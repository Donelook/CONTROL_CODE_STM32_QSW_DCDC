
Magisterka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000167e0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  080169c0  080169c0  000179c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080171f0  080171f0  00019378  2**0
                  CONTENTS
  4 .ARM          00000008  080171f0  080171f0  000181f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080171f8  080171f8  00019378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080171f8  080171f8  000181f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080171fc  080171fc  000181fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000378  20000000  08017200  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002300  20000378  08017578  00019378  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002678  08017578  00019678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019378  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025640  00000000  00000000  000193a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ec4  00000000  00000000  0003e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f20  00000000  00000000  000438b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017f9  00000000  00000000  000457d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d55c  00000000  00000000  00046fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000265a2  00000000  00000000  00074525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f005  00000000  00000000  0009aac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b9acc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fa8  00000000  00000000  001b9b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001c3ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000378 	.word	0x20000378
 80001fc:	00000000 	.word	0x00000000
 8000200:	080169a8 	.word	0x080169a8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000037c 	.word	0x2000037c
 800021c:	080169a8 	.word	0x080169a8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103a:	f002 ffc4 	bl	8003fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103e:	f000 f97b 	bl	8001338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f000 ff9b 	bl	8001f7c <MX_GPIO_Init>
  MX_DMA_Init();
 8001046:	f000 ff4f 	bl	8001ee8 <MX_DMA_Init>
  MX_ADC3_Init();
 800104a:	f000 fa3b 	bl	80014c4 <MX_ADC3_Init>
  MX_ADC4_Init();
 800104e:	f000 fb03 	bl	8001658 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001052:	f000 fb67 	bl	8001724 <MX_ADC5_Init>
  MX_DAC1_Init();
 8001056:	f000 fbeb 	bl	8001830 <MX_DAC1_Init>
  MX_DAC2_Init();
 800105a:	f000 fc35 	bl	80018c8 <MX_DAC2_Init>
  MX_TIM1_Init();
 800105e:	f000 fc6d 	bl	800193c <MX_TIM1_Init>
  MX_TIM8_Init();
 8001062:	f000 fdeb 	bl	8001c3c <MX_TIM8_Init>
  MX_UART4_Init();
 8001066:	f000 fef3 	bl	8001e50 <MX_UART4_Init>
  MX_ADC1_Init();
 800106a:	f000 f9b3 	bl	80013d4 <MX_ADC1_Init>
  MX_TIM4_Init();
 800106e:	f000 fcf7 	bl	8001a60 <MX_TIM4_Init>
  MX_USB_Device_Init();
 8001072:	f00e fdc7 	bl	800fc04 <MX_USB_Device_Init>
  MX_TIM15_Init();
 8001076:	f000 fe73 	bl	8001d60 <MX_TIM15_Init>
  MX_TIM16_Init();
 800107a:	f000 fec3 	bl	8001e04 <MX_TIM16_Init>
  MX_TIM7_Init();
 800107e:	f000 fda7 	bl	8001bd0 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001082:	f000 fd65 	bl	8001b50 <MX_TIM6_Init>
  MX_CORDIC_Init();
 8001086:	f000 fbbf 	bl	8001808 <MX_CORDIC_Init>


  while (1)
  {

	  checkfaults = Check_Faults();
 800108a:	f001 f9e3 	bl	8002454 <Check_Faults>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	4b8d      	ldr	r3, [pc, #564]	@ (80012c8 <main+0x294>)
 8001094:	701a      	strb	r2, [r3, #0]
	  checkreads = Check_Ready();
 8001096:	f001 fa15 	bl	80024c4 <Check_Ready>
 800109a:	4603      	mov	r3, r0
 800109c:	461a      	mov	r2, r3
 800109e:	4b8b      	ldr	r3, [pc, #556]	@ (80012cc <main+0x298>)
 80010a0:	701a      	strb	r2, [r3, #0]
	  	  	  	  if (dataReceivedFlag) {
 80010a2:	4b8b      	ldr	r3, [pc, #556]	@ (80012d0 <main+0x29c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d004      	beq.n	80010b6 <main+0x82>
	  	  	  	      // Process the data
	  	  	  	      ParseUSBCommand();  // Function to handle the received command
 80010ac:	f001 fec2 	bl	8002e34 <ParseUSBCommand>

	  	  	  	      // Clear the flag after processing
	  	  	  	      dataReceivedFlag = 0;
 80010b0:	4b87      	ldr	r3, [pc, #540]	@ (80012d0 <main+0x29c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
	  	  	  	  }

	  	  	  	  uint8_t interlock = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 80010b6:	2104      	movs	r1, #4
 80010b8:	4886      	ldr	r0, [pc, #536]	@ (80012d4 <main+0x2a0>)
 80010ba:	f005 fd3d 	bl	8006b38 <HAL_GPIO_ReadPin>
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	  	          if (/*interlock && */ start_program && !(Check_Faults())   && Check_Ready()/* start_program condition */) {
 80010c2:	4b85      	ldr	r3, [pc, #532]	@ (80012d8 <main+0x2a4>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00d      	beq.n	80010e6 <main+0xb2>
 80010ca:	f001 f9c3 	bl	8002454 <Check_Faults>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d108      	bne.n	80010e6 <main+0xb2>
 80010d4:	f001 f9f6 	bl	80024c4 <Check_Ready>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <main+0xb2>
	  	        	//USB_SendString("State: EVENT start_program \r\n");
	  	              event = EVENT_START;
 80010de:	4b7f      	ldr	r3, [pc, #508]	@ (80012dc <main+0x2a8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
 80010e4:	e00f      	b.n	8001106 <main+0xd2>
	  	          } else if (/*HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin)*/Check_Faults() /* fault condition */) {
 80010e6:	f001 f9b5 	bl	8002454 <Check_Faults>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <main+0xc4>
	  	              event = EVENT_FAULT;
 80010f0:	4b7a      	ldr	r3, [pc, #488]	@ (80012dc <main+0x2a8>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e006      	b.n	8001106 <main+0xd2>
	  	          } else if (clear_fault) {
 80010f8:	4b79      	ldr	r3, [pc, #484]	@ (80012e0 <main+0x2ac>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <main+0xd2>
	  	        	  /* clear fault condition */
	  	              event = EVENT_CLEAR_FAULT;
 8001100:	4b76      	ldr	r3, [pc, #472]	@ (80012dc <main+0x2a8>)
 8001102:	2202      	movs	r2, #2
 8001104:	701a      	strb	r2, [r3, #0]
	  	          } else if (0/* shutdown condition */) {
	  	              event = EVENT_SHUTDOWN;
	  	          }

	  	          // Handle the event and update the state
	  	          currentState = handle_event(currentState, event);
 8001106:	4b77      	ldr	r3, [pc, #476]	@ (80012e4 <main+0x2b0>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	4a74      	ldr	r2, [pc, #464]	@ (80012dc <main+0x2a8>)
 800110c:	7812      	ldrb	r2, [r2, #0]
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f001 f87f 	bl	8002214 <handle_event>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	4b72      	ldr	r3, [pc, #456]	@ (80012e4 <main+0x2b0>)
 800111c:	701a      	strb	r2, [r3, #0]

	  	          // Perform actions based on the current state
	  	          switch (currentState) {
 800111e:	4b71      	ldr	r3, [pc, #452]	@ (80012e4 <main+0x2b0>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b05      	cmp	r3, #5
 8001124:	f200 80cb 	bhi.w	80012be <main+0x28a>
 8001128:	a201      	add	r2, pc, #4	@ (adr r2, 8001130 <main+0xfc>)
 800112a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112e:	bf00      	nop
 8001130:	08001149 	.word	0x08001149
 8001134:	080011f3 	.word	0x080011f3
 8001138:	08001217 	.word	0x08001217
 800113c:	080012bf 	.word	0x080012bf
 8001140:	08001247 	.word	0x08001247
 8001144:	080012bf 	.word	0x080012bf
	  	              {
	  	            	//GPIOs
	  	            	//CUrrent Sensors OCD pin needed to go low in reset condition after fault event
	  	            	//HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_SET);
	  	            	//HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 8001148:	2201      	movs	r2, #1
 800114a:	2104      	movs	r1, #4
 800114c:	4866      	ldr	r0, [pc, #408]	@ (80012e8 <main+0x2b4>)
 800114e:	f005 fd0b 	bl	8006b68 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP
 8001152:	2200      	movs	r2, #0
 8001154:	2120      	movs	r1, #32
 8001156:	485f      	ldr	r0, [pc, #380]	@ (80012d4 <main+0x2a0>)
 8001158:	f005 fd06 	bl	8006b68 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2120      	movs	r1, #32
 8001160:	4862      	ldr	r0, [pc, #392]	@ (80012ec <main+0x2b8>)
 8001162:	f005 fd01 	bl	8006b68 <HAL_GPIO_WritePin>
	  	            	HAL_Delay(1000);
 8001166:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800116a:	f002 ff9d 	bl	80040a8 <HAL_Delay>
	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	2120      	movs	r1, #32
 8001172:	485e      	ldr	r0, [pc, #376]	@ (80012ec <main+0x2b8>)
 8001174:	f005 fcf8 	bl	8006b68 <HAL_GPIO_WritePin>
	  	            	  // Start PWM for delay time transfer to FPGA
	  	            	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001178:	2100      	movs	r1, #0
 800117a:	485d      	ldr	r0, [pc, #372]	@ (80012f0 <main+0x2bc>)
 800117c:	f008 fc52 	bl	8009a24 <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001180:	2104      	movs	r1, #4
 8001182:	485c      	ldr	r0, [pc, #368]	@ (80012f4 <main+0x2c0>)
 8001184:	f008 fc4e 	bl	8009a24 <HAL_TIM_PWM_Start>

	  	            	  //DAC for  current reference
	  	            	  ///DAC1_OUT1 	- MAX1
	  	            	  //DAC1_OUT2 	- MAX2
	  	            	  //DAC2_OUT1	- MIN
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_1);
 8001188:	2100      	movs	r1, #0
 800118a:	485b      	ldr	r0, [pc, #364]	@ (80012f8 <main+0x2c4>)
 800118c:	f004 fe24 	bl	8005dd8 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_2);
 8001190:	2110      	movs	r1, #16
 8001192:	4859      	ldr	r0, [pc, #356]	@ (80012f8 <main+0x2c4>)
 8001194:	f004 fe20 	bl	8005dd8 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac2,DAC2_CHANNEL_1);
 8001198:	2100      	movs	r1, #0
 800119a:	4858      	ldr	r0, [pc, #352]	@ (80012fc <main+0x2c8>)
 800119c:	f004 fe1c 	bl	8005dd8 <HAL_DAC_Start>

	  	            	//if( HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R)!= HAL_OK) printf("error");
	  	            	//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);

	  	            	  // FAN PWM and 5s timer6 for check temperature and change duty cycle
	  	            	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80011a0:	2100      	movs	r1, #0
 80011a2:	4857      	ldr	r0, [pc, #348]	@ (8001300 <main+0x2cc>)
 80011a4:	f008 fc3e 	bl	8009a24 <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_Base_Start_IT(&htim6);
 80011a8:	4856      	ldr	r0, [pc, #344]	@ (8001304 <main+0x2d0>)
 80011aa:	f008 fb3d 	bl	8009828 <HAL_TIM_Base_Start_IT>

	  	            	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 80011ae:	217f      	movs	r1, #127	@ 0x7f
 80011b0:	4855      	ldr	r0, [pc, #340]	@ (8001308 <main+0x2d4>)
 80011b2:	f004 fa9f 	bl	80056f4 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 80011b6:	217f      	movs	r1, #127	@ 0x7f
 80011b8:	4854      	ldr	r0, [pc, #336]	@ (800130c <main+0x2d8>)
 80011ba:	f004 fa9b 	bl	80056f4 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 80011be:	217f      	movs	r1, #127	@ 0x7f
 80011c0:	4853      	ldr	r0, [pc, #332]	@ (8001310 <main+0x2dc>)
 80011c2:	f004 fa97 	bl	80056f4 <HAL_ADCEx_Calibration_Start>

	  	            	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_dma_buffer, 5);
 80011c6:	2205      	movs	r2, #5
 80011c8:	4952      	ldr	r1, [pc, #328]	@ (8001314 <main+0x2e0>)
 80011ca:	484f      	ldr	r0, [pc, #316]	@ (8001308 <main+0x2d4>)
 80011cc:	f003 fb8e 	bl	80048ec <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4_dma_buffer, 2);
 80011d0:	2202      	movs	r2, #2
 80011d2:	4951      	ldr	r1, [pc, #324]	@ (8001318 <main+0x2e4>)
 80011d4:	484d      	ldr	r0, [pc, #308]	@ (800130c <main+0x2d8>)
 80011d6:	f003 fb89 	bl	80048ec <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_dma_buffer, 10);
 80011da:	220a      	movs	r2, #10
 80011dc:	494f      	ldr	r1, [pc, #316]	@ (800131c <main+0x2e8>)
 80011de:	484c      	ldr	r0, [pc, #304]	@ (8001310 <main+0x2dc>)
 80011e0:	f003 fb84 	bl	80048ec <HAL_ADC_Start_DMA>

	  	            	Set_PWM_DutyCycle(20);
 80011e4:	2014      	movs	r0, #20
 80011e6:	f001 f869 	bl	80022bc <Set_PWM_DutyCycle>
	  	            	currentState = STATE_STANDBY;
 80011ea:	4b3e      	ldr	r3, [pc, #248]	@ (80012e4 <main+0x2b0>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 80011f0:	e068      	b.n	80012c4 <main+0x290>
	  	              case STATE_STANDBY:
	  	                  // Wait for start_program signal
	  	              {
	  	            	  if(start_program && /*HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin)*/   !(Check_Faults())   && Check_Ready()){
 80011f2:	4b39      	ldr	r3, [pc, #228]	@ (80012d8 <main+0x2a4>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d063      	beq.n	80012c2 <main+0x28e>
 80011fa:	f001 f92b 	bl	8002454 <Check_Faults>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d15e      	bne.n	80012c2 <main+0x28e>
 8001204:	f001 f95e 	bl	80024c4 <Check_Ready>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d059      	beq.n	80012c2 <main+0x28e>
	  	            		  currentState = STATE_SOFT_START;
 800120e:	4b35      	ldr	r3, [pc, #212]	@ (80012e4 <main+0x2b0>)
 8001210:	2202      	movs	r2, #2
 8001212:	701a      	strb	r2, [r3, #0]
	  	            	  }

	  	              }
	  	                  break;
 8001214:	e055      	b.n	80012c2 <main+0x28e>
	  	              case STATE_SOFT_START:
	  	                  // Gradually ramp up the output
	  	              {
	  	            	current_sensor1_vref = adc3_dma_buffer[0];// reference for imax imin
 8001216:	4b3f      	ldr	r3, [pc, #252]	@ (8001314 <main+0x2e0>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	b29a      	uxth	r2, r3
 800121c:	4b40      	ldr	r3, [pc, #256]	@ (8001320 <main+0x2ec>)
 800121e:	801a      	strh	r2, [r3, #0]
	  	            	current_sensor2_vref = adc3_dma_buffer[1];// reference for imax imin
 8001220:	4b3c      	ldr	r3, [pc, #240]	@ (8001314 <main+0x2e0>)
 8001222:	885b      	ldrh	r3, [r3, #2]
 8001224:	b29a      	uxth	r2, r3
 8001226:	4b3f      	ldr	r3, [pc, #252]	@ (8001324 <main+0x2f0>)
 8001228:	801a      	strh	r2, [r3, #0]

	  	            	  //Start timer that start_program ramp and pi regulation
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
 800122a:	2200      	movs	r2, #0
 800122c:	2104      	movs	r1, #4
 800122e:	482e      	ldr	r0, [pc, #184]	@ (80012e8 <main+0x2b4>)
 8001230:	f005 fc9a 	bl	8006b68 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
 8001234:	2201      	movs	r2, #1
 8001236:	2120      	movs	r1, #32
 8001238:	4826      	ldr	r0, [pc, #152]	@ (80012d4 <main+0x2a0>)
 800123a:	f005 fc95 	bl	8006b68 <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Start_IT(&htim15); // START TIM15 THATS IS MAIN CONTROL LOOP
 800123e:	483a      	ldr	r0, [pc, #232]	@ (8001328 <main+0x2f4>)
 8001240:	f008 faf2 	bl	8009828 <HAL_TIM_Base_Start_IT>
	  	              }
	  	                  break;
 8001244:	e03e      	b.n	80012c4 <main+0x290>
	  	                  break;
	  	              case STATE_FAULT:
	  	                  // Handle fault condition
	  	            	  // Turn off all gate drivers and stop FPGA
	  	              {
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 8001246:	2201      	movs	r2, #1
 8001248:	2104      	movs	r1, #4
 800124a:	4827      	ldr	r0, [pc, #156]	@ (80012e8 <main+0x2b4>)
 800124c:	f005 fc8c 	bl	8006b68 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2120      	movs	r1, #32
 8001254:	481f      	ldr	r0, [pc, #124]	@ (80012d4 <main+0x2a0>)
 8001256:	f005 fc87 	bl	8006b68 <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 800125a:	4833      	ldr	r0, [pc, #204]	@ (8001328 <main+0x2f4>)
 800125c:	f008 fb5c 	bl	8009918 <HAL_TIM_Base_Stop_IT>

	  	            	HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port,NOT_RST_1_Pin, GPIO_PIN_RESET);
 8001260:	2200      	movs	r2, #0
 8001262:	2180      	movs	r1, #128	@ 0x80
 8001264:	4831      	ldr	r0, [pc, #196]	@ (800132c <main+0x2f8>)
 8001266:	f005 fc7f 	bl	8006b68 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_2_GPIO_Port,NOT_RST_2_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001270:	481e      	ldr	r0, [pc, #120]	@ (80012ec <main+0x2b8>)
 8001272:	f005 fc79 	bl	8006b68 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port,NOT_RST_3_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2101      	movs	r1, #1
 800127a:	482d      	ldr	r0, [pc, #180]	@ (8001330 <main+0x2fc>)
 800127c:	f005 fc74 	bl	8006b68 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port,NOT_RST_4_Pin, GPIO_PIN_RESET);
 8001280:	2200      	movs	r2, #0
 8001282:	2140      	movs	r1, #64	@ 0x40
 8001284:	4813      	ldr	r0, [pc, #76]	@ (80012d4 <main+0x2a0>)
 8001286:	f005 fc6f 	bl	8006b68 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	2102      	movs	r1, #2
 800128e:	4817      	ldr	r0, [pc, #92]	@ (80012ec <main+0x2b8>)
 8001290:	f005 fc6a 	bl	8006b68 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800129a:	4813      	ldr	r0, [pc, #76]	@ (80012e8 <main+0x2b4>)
 800129c:	f005 fc64 	bl	8006b68 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 80012a0:	2201      	movs	r2, #1
 80012a2:	2120      	movs	r1, #32
 80012a4:	4811      	ldr	r0, [pc, #68]	@ (80012ec <main+0x2b8>)
 80012a6:	f005 fc5f 	bl	8006b68 <HAL_GPIO_WritePin>

	  	            	HAL_TIM_Base_Start(&htim7); // timer for reset OCD and INTERLOCK reset turn off
 80012aa:	4822      	ldr	r0, [pc, #136]	@ (8001334 <main+0x300>)
 80012ac:	f008 fa4c 	bl	8009748 <HAL_TIM_Base_Start>



	  	            	start_program = 0;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <main+0x2a4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
	  	            	currentState = STATE_STANDBY;
 80012b6:	4b0b      	ldr	r3, [pc, #44]	@ (80012e4 <main+0x2b0>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 80012bc:	e002      	b.n	80012c4 <main+0x290>
	  	            	//HAL_TIM_Base_Stop_IT(&htim15);
	  	              }

	  	                  break;
	  	              default:
	  	                  break;
 80012be:	bf00      	nop
 80012c0:	e6e3      	b.n	800108a <main+0x56>
	  	                  break;
 80012c2:	bf00      	nop
  {
 80012c4:	e6e1      	b.n	800108a <main+0x56>
 80012c6:	bf00      	nop
 80012c8:	20000b4b 	.word	0x20000b4b
 80012cc:	20000b4c 	.word	0x20000b4c
 80012d0:	20000b38 	.word	0x20000b38
 80012d4:	48000800 	.word	0x48000800
 80012d8:	20000b48 	.word	0x20000b48
 80012dc:	20000014 	.word	0x20000014
 80012e0:	20000b49 	.word	0x20000b49
 80012e4:	20000b4a 	.word	0x20000b4a
 80012e8:	48001400 	.word	0x48001400
 80012ec:	48001000 	.word	0x48001000
 80012f0:	20000774 	.word	0x20000774
 80012f4:	200008a4 	.word	0x200008a4
 80012f8:	2000068c 	.word	0x2000068c
 80012fc:	200006a0 	.word	0x200006a0
 8001300:	200007c0 	.word	0x200007c0
 8001304:	2000080c 	.word	0x2000080c
 8001308:	20000400 	.word	0x20000400
 800130c:	2000046c 	.word	0x2000046c
 8001310:	200004d8 	.word	0x200004d8
 8001314:	20000a38 	.word	0x20000a38
 8001318:	20000a4c 	.word	0x20000a4c
 800131c:	20000a60 	.word	0x20000a60
 8001320:	20000a1c 	.word	0x20000a1c
 8001324:	20000a1e 	.word	0x20000a1e
 8001328:	200008f0 	.word	0x200008f0
 800132c:	48000400 	.word	0x48000400
 8001330:	48000c00 	.word	0x48000c00
 8001334:	20000858 	.word	0x20000858

08001338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b094      	sub	sp, #80	@ 0x50
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 0318 	add.w	r3, r7, #24
 8001342:	2238      	movs	r2, #56	@ 0x38
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f010 f939 	bl	80115be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800135a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800135e:	f007 f96b 	bl	8008638 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001362:	2322      	movs	r3, #34	@ 0x22
 8001364:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001366:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800136a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800136c:	2340      	movs	r3, #64	@ 0x40
 800136e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001370:	2301      	movs	r3, #1
 8001372:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001374:	2302      	movs	r3, #2
 8001376:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001378:	2302      	movs	r3, #2
 800137a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800137c:	2304      	movs	r3, #4
 800137e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001380:	234b      	movs	r3, #75	@ 0x4b
 8001382:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001384:	2302      	movs	r3, #2
 8001386:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001388:	2302      	movs	r3, #2
 800138a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800138c:	2302      	movs	r3, #2
 800138e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f007 fa03 	bl	80087a0 <HAL_RCC_OscConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80013a0:	f001 fffe 	bl	80033a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013a4:	230f      	movs	r3, #15
 80013a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a8:	2303      	movs	r3, #3
 80013aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2104      	movs	r1, #4
 80013bc:	4618      	mov	r0, r3
 80013be:	f007 fd01 	bl	8008dc4 <HAL_RCC_ClockConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013c8:	f001 ffea 	bl	80033a0 <Error_Handler>
  }
}
 80013cc:	bf00      	nop
 80013ce:	3750      	adds	r7, #80	@ 0x50
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	@ 0x30
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2220      	movs	r2, #32
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f010 f8e6 	bl	80115be <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013f2:	4b32      	ldr	r3, [pc, #200]	@ (80014bc <MX_ADC1_Init+0xe8>)
 80013f4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013fa:	4b30      	ldr	r3, [pc, #192]	@ (80014bc <MX_ADC1_Init+0xe8>)
 80013fc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001400:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001402:	4b2e      	ldr	r3, [pc, #184]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001408:	4b2c      	ldr	r3, [pc, #176]	@ (80014bc <MX_ADC1_Init+0xe8>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800140e:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001414:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800141a:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <MX_ADC1_Init+0xe8>)
 800141c:	2204      	movs	r2, #4
 800141e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001420:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001422:	2200      	movs	r2, #0
 8001424:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001426:	4b25      	ldr	r3, [pc, #148]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001428:	2200      	movs	r2, #0
 800142a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800142c:	4b23      	ldr	r3, [pc, #140]	@ (80014bc <MX_ADC1_Init+0xe8>)
 800142e:	2201      	movs	r2, #1
 8001430:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001432:	4b22      	ldr	r3, [pc, #136]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <MX_ADC1_Init+0xe8>)
 800143c:	2200      	movs	r2, #0
 800143e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001440:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001442:	2200      	movs	r2, #0
 8001444:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001446:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001448:	2200      	movs	r2, #0
 800144a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800144e:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001450:	2200      	movs	r2, #0
 8001452:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001454:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800145c:	4817      	ldr	r0, [pc, #92]	@ (80014bc <MX_ADC1_Init+0xe8>)
 800145e:	f003 f889 	bl	8004574 <HAL_ADC_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001468:	f001 ff9a 	bl	80033a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001470:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001474:	4619      	mov	r1, r3
 8001476:	4811      	ldr	r0, [pc, #68]	@ (80014bc <MX_ADC1_Init+0xe8>)
 8001478:	f004 f99e 	bl	80057b8 <HAL_ADCEx_MultiModeConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001482:	f001 ff8d 	bl	80033a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <MX_ADC1_Init+0xec>)
 8001488:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800148a:	2306      	movs	r3, #6
 800148c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800148e:	2307      	movs	r3, #7
 8001490:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001492:	237f      	movs	r3, #127	@ 0x7f
 8001494:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001496:	2304      	movs	r3, #4
 8001498:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	@ (80014bc <MX_ADC1_Init+0xe8>)
 80014a4:	f003 fb0a 	bl	8004abc <HAL_ADC_ConfigChannel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014ae:	f001 ff77 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3730      	adds	r7, #48	@ 0x30
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000394 	.word	0x20000394
 80014c0:	cb840000 	.word	0xcb840000

080014c4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08c      	sub	sp, #48	@ 0x30
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80014ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2220      	movs	r2, #32
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f010 f86e 	bl	80115be <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80014e2:	4b56      	ldr	r3, [pc, #344]	@ (800163c <MX_ADC3_Init+0x178>)
 80014e4:	4a56      	ldr	r2, [pc, #344]	@ (8001640 <MX_ADC3_Init+0x17c>)
 80014e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 80014e8:	4b54      	ldr	r3, [pc, #336]	@ (800163c <MX_ADC3_Init+0x178>)
 80014ea:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 80014ee:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014f0:	4b52      	ldr	r3, [pc, #328]	@ (800163c <MX_ADC3_Init+0x178>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014f6:	4b51      	ldr	r3, [pc, #324]	@ (800163c <MX_ADC3_Init+0x178>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80014fc:	4b4f      	ldr	r3, [pc, #316]	@ (800163c <MX_ADC3_Init+0x178>)
 80014fe:	2200      	movs	r2, #0
 8001500:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001502:	4b4e      	ldr	r3, [pc, #312]	@ (800163c <MX_ADC3_Init+0x178>)
 8001504:	2201      	movs	r2, #1
 8001506:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001508:	4b4c      	ldr	r3, [pc, #304]	@ (800163c <MX_ADC3_Init+0x178>)
 800150a:	2204      	movs	r2, #4
 800150c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800150e:	4b4b      	ldr	r3, [pc, #300]	@ (800163c <MX_ADC3_Init+0x178>)
 8001510:	2200      	movs	r2, #0
 8001512:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001514:	4b49      	ldr	r3, [pc, #292]	@ (800163c <MX_ADC3_Init+0x178>)
 8001516:	2201      	movs	r2, #1
 8001518:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 5;
 800151a:	4b48      	ldr	r3, [pc, #288]	@ (800163c <MX_ADC3_Init+0x178>)
 800151c:	2205      	movs	r2, #5
 800151e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001520:	4b46      	ldr	r3, [pc, #280]	@ (800163c <MX_ADC3_Init+0x178>)
 8001522:	2200      	movs	r2, #0
 8001524:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001528:	4b44      	ldr	r3, [pc, #272]	@ (800163c <MX_ADC3_Init+0x178>)
 800152a:	2200      	movs	r2, #0
 800152c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800152e:	4b43      	ldr	r3, [pc, #268]	@ (800163c <MX_ADC3_Init+0x178>)
 8001530:	2200      	movs	r2, #0
 8001532:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001534:	4b41      	ldr	r3, [pc, #260]	@ (800163c <MX_ADC3_Init+0x178>)
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800153c:	4b3f      	ldr	r3, [pc, #252]	@ (800163c <MX_ADC3_Init+0x178>)
 800153e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001542:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001544:	4b3d      	ldr	r3, [pc, #244]	@ (800163c <MX_ADC3_Init+0x178>)
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800154c:	483b      	ldr	r0, [pc, #236]	@ (800163c <MX_ADC3_Init+0x178>)
 800154e:	f003 f811 	bl	8004574 <HAL_ADC_Init>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8001558:	f001 ff22 	bl	80033a0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001560:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	4835      	ldr	r0, [pc, #212]	@ (800163c <MX_ADC3_Init+0x178>)
 8001568:	f004 f926 	bl	80057b8 <HAL_ADCEx_MultiModeConfigChannel>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001572:	f001 ff15 	bl	80033a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001576:	4b33      	ldr	r3, [pc, #204]	@ (8001644 <MX_ADC3_Init+0x180>)
 8001578:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800157a:	2306      	movs	r3, #6
 800157c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001582:	237f      	movs	r3, #127	@ 0x7f
 8001584:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_2;
 8001586:	2301      	movs	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 37;
 800158a:	2325      	movs	r3, #37	@ 0x25
 800158c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 800158e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001592:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetSaturation = DISABLE;
 8001594:	2300      	movs	r3, #0
 8001596:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	4619      	mov	r1, r3
 800159e:	4827      	ldr	r0, [pc, #156]	@ (800163c <MX_ADC3_Init+0x178>)
 80015a0:	f003 fa8c 	bl	8004abc <HAL_ADC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 80015aa:	f001 fef9 	bl	80033a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80015ae:	4b26      	ldr	r3, [pc, #152]	@ (8001648 <MX_ADC3_Init+0x184>)
 80015b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80015b2:	230c      	movs	r3, #12
 80015b4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	481f      	ldr	r0, [pc, #124]	@ (800163c <MX_ADC3_Init+0x178>)
 80015c0:	f003 fa7c 	bl	8004abc <HAL_ADC_ConfigChannel>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_ADC3_Init+0x10a>
  {
    Error_Handler();
 80015ca:	f001 fee9 	bl	80033a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80015ce:	4b1f      	ldr	r3, [pc, #124]	@ (800164c <MX_ADC3_Init+0x188>)
 80015d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015d2:	2312      	movs	r3, #18
 80015d4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_2;
 80015d6:	2301      	movs	r3, #1
 80015d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 8;
 80015da:	2308      	movs	r3, #8
 80015dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4816      	ldr	r0, [pc, #88]	@ (800163c <MX_ADC3_Init+0x178>)
 80015e4:	f003 fa6a 	bl	8004abc <HAL_ADC_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_ADC3_Init+0x12e>
  {
    Error_Handler();
 80015ee:	f001 fed7 	bl	80033a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015f2:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <MX_ADC3_Init+0x18c>)
 80015f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015f6:	2318      	movs	r3, #24
 80015f8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015fa:	2304      	movs	r3, #4
 80015fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	4619      	mov	r1, r3
 8001606:	480d      	ldr	r0, [pc, #52]	@ (800163c <MX_ADC3_Init+0x178>)
 8001608:	f003 fa58 	bl	8004abc <HAL_ADC_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_ADC3_Init+0x152>
  {
    Error_Handler();
 8001612:	f001 fec5 	bl	80033a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001616:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <MX_ADC3_Init+0x190>)
 8001618:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800161a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800161e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	4619      	mov	r1, r3
 8001624:	4805      	ldr	r0, [pc, #20]	@ (800163c <MX_ADC3_Init+0x178>)
 8001626:	f003 fa49 	bl	8004abc <HAL_ADC_ConfigChannel>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_ADC3_Init+0x170>
  {
    Error_Handler();
 8001630:	f001 feb6 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	3730      	adds	r7, #48	@ 0x30
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000400 	.word	0x20000400
 8001640:	50000400 	.word	0x50000400
 8001644:	04300002 	.word	0x04300002
 8001648:	08600004 	.word	0x08600004
 800164c:	0c900008 	.word	0x0c900008
 8001650:	10c00010 	.word	0x10c00010
 8001654:	14f00020 	.word	0x14f00020

08001658 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800165e:	463b      	mov	r3, r7
 8001660:	2220      	movs	r2, #32
 8001662:	2100      	movs	r1, #0
 8001664:	4618      	mov	r0, r3
 8001666:	f00f ffaa 	bl	80115be <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800166a:	4b2b      	ldr	r3, [pc, #172]	@ (8001718 <MX_ADC4_Init+0xc0>)
 800166c:	4a2b      	ldr	r2, [pc, #172]	@ (800171c <MX_ADC4_Init+0xc4>)
 800166e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001670:	4b29      	ldr	r3, [pc, #164]	@ (8001718 <MX_ADC4_Init+0xc0>)
 8001672:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001676:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001678:	4b27      	ldr	r3, [pc, #156]	@ (8001718 <MX_ADC4_Init+0xc0>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800167e:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <MX_ADC4_Init+0xc0>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001684:	4b24      	ldr	r3, [pc, #144]	@ (8001718 <MX_ADC4_Init+0xc0>)
 8001686:	2200      	movs	r2, #0
 8001688:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800168a:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <MX_ADC4_Init+0xc0>)
 800168c:	2200      	movs	r2, #0
 800168e:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001690:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <MX_ADC4_Init+0xc0>)
 8001692:	2204      	movs	r2, #4
 8001694:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001696:	4b20      	ldr	r3, [pc, #128]	@ (8001718 <MX_ADC4_Init+0xc0>)
 8001698:	2200      	movs	r2, #0
 800169a:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 800169c:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <MX_ADC4_Init+0xc0>)
 800169e:	2201      	movs	r2, #1
 80016a0:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80016a2:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <MX_ADC4_Init+0xc0>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001718 <MX_ADC4_Init+0xc0>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016b0:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <MX_ADC4_Init+0xc0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016b6:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <MX_ADC4_Init+0xc0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80016bc:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <MX_ADC4_Init+0xc0>)
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80016c4:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <MX_ADC4_Init+0xc0>)
 80016c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80016cc:	4b12      	ldr	r3, [pc, #72]	@ (8001718 <MX_ADC4_Init+0xc0>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80016d4:	4810      	ldr	r0, [pc, #64]	@ (8001718 <MX_ADC4_Init+0xc0>)
 80016d6:	f002 ff4d 	bl	8004574 <HAL_ADC_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 80016e0:	f001 fe5e 	bl	80033a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001720 <MX_ADC4_Init+0xc8>)
 80016e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016e8:	2306      	movs	r3, #6
 80016ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80016ec:	2307      	movs	r3, #7
 80016ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016f0:	237f      	movs	r3, #127	@ 0x7f
 80016f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016f4:	2304      	movs	r3, #4
 80016f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	4619      	mov	r1, r3
 8001700:	4805      	ldr	r0, [pc, #20]	@ (8001718 <MX_ADC4_Init+0xc0>)
 8001702:	f003 f9db 	bl	8004abc <HAL_ADC_ConfigChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 800170c:	f001 fe48 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	3720      	adds	r7, #32
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000046c 	.word	0x2000046c
 800171c:	50000500 	.word	0x50000500
 8001720:	04300002 	.word	0x04300002

08001724 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800172a:	463b      	mov	r3, r7
 800172c:	2220      	movs	r2, #32
 800172e:	2100      	movs	r1, #0
 8001730:	4618      	mov	r0, r3
 8001732:	f00f ff44 	bl	80115be <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001736:	4b31      	ldr	r3, [pc, #196]	@ (80017fc <MX_ADC5_Init+0xd8>)
 8001738:	4a31      	ldr	r2, [pc, #196]	@ (8001800 <MX_ADC5_Init+0xdc>)
 800173a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 800173c:	4b2f      	ldr	r3, [pc, #188]	@ (80017fc <MX_ADC5_Init+0xd8>)
 800173e:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001742:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001744:	4b2d      	ldr	r3, [pc, #180]	@ (80017fc <MX_ADC5_Init+0xd8>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800174a:	4b2c      	ldr	r3, [pc, #176]	@ (80017fc <MX_ADC5_Init+0xd8>)
 800174c:	2200      	movs	r2, #0
 800174e:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001750:	4b2a      	ldr	r3, [pc, #168]	@ (80017fc <MX_ADC5_Init+0xd8>)
 8001752:	2200      	movs	r2, #0
 8001754:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001756:	4b29      	ldr	r3, [pc, #164]	@ (80017fc <MX_ADC5_Init+0xd8>)
 8001758:	2200      	movs	r2, #0
 800175a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800175c:	4b27      	ldr	r3, [pc, #156]	@ (80017fc <MX_ADC5_Init+0xd8>)
 800175e:	2204      	movs	r2, #4
 8001760:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001762:	4b26      	ldr	r3, [pc, #152]	@ (80017fc <MX_ADC5_Init+0xd8>)
 8001764:	2200      	movs	r2, #0
 8001766:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001768:	4b24      	ldr	r3, [pc, #144]	@ (80017fc <MX_ADC5_Init+0xd8>)
 800176a:	2201      	movs	r2, #1
 800176c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 800176e:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <MX_ADC5_Init+0xd8>)
 8001770:	2201      	movs	r2, #1
 8001772:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001774:	4b21      	ldr	r3, [pc, #132]	@ (80017fc <MX_ADC5_Init+0xd8>)
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800177c:	4b1f      	ldr	r3, [pc, #124]	@ (80017fc <MX_ADC5_Init+0xd8>)
 800177e:	2200      	movs	r2, #0
 8001780:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001782:	4b1e      	ldr	r3, [pc, #120]	@ (80017fc <MX_ADC5_Init+0xd8>)
 8001784:	2200      	movs	r2, #0
 8001786:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001788:	4b1c      	ldr	r3, [pc, #112]	@ (80017fc <MX_ADC5_Init+0xd8>)
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001790:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <MX_ADC5_Init+0xd8>)
 8001792:	2200      	movs	r2, #0
 8001794:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8001796:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <MX_ADC5_Init+0xd8>)
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 800179e:	4b17      	ldr	r3, [pc, #92]	@ (80017fc <MX_ADC5_Init+0xd8>)
 80017a0:	221c      	movs	r2, #28
 80017a2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 80017a4:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_ADC5_Init+0xd8>)
 80017a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017aa:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <MX_ADC5_Init+0xd8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <MX_ADC5_Init+0xd8>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 80017b8:	4810      	ldr	r0, [pc, #64]	@ (80017fc <MX_ADC5_Init+0xd8>)
 80017ba:	f002 fedb 	bl	8004574 <HAL_ADC_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_ADC5_Init+0xa4>
  {
    Error_Handler();
 80017c4:	f001 fdec 	bl	80033a0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <MX_ADC5_Init+0xe0>)
 80017ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017cc:	2306      	movs	r3, #6
 80017ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80017d4:	237f      	movs	r3, #127	@ 0x7f
 80017d6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80017d8:	2304      	movs	r3, #4
 80017da:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80017e0:	463b      	mov	r3, r7
 80017e2:	4619      	mov	r1, r3
 80017e4:	4805      	ldr	r0, [pc, #20]	@ (80017fc <MX_ADC5_Init+0xd8>)
 80017e6:	f003 f969 	bl	8004abc <HAL_ADC_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_ADC5_Init+0xd0>
  {
    Error_Handler();
 80017f0:	f001 fdd6 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200004d8 	.word	0x200004d8
 8001800:	50000600 	.word	0x50000600
 8001804:	04300002 	.word	0x04300002

08001808 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <MX_CORDIC_Init+0x20>)
 800180e:	4a07      	ldr	r2, [pc, #28]	@ (800182c <MX_CORDIC_Init+0x24>)
 8001810:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	@ (8001828 <MX_CORDIC_Init+0x20>)
 8001814:	f004 f8d8 	bl	80059c8 <HAL_CORDIC_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800181e:	f001 fdbf 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000664 	.word	0x20000664
 800182c:	40020c00 	.word	0x40020c00

08001830 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08c      	sub	sp, #48	@ 0x30
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001836:	463b      	mov	r3, r7
 8001838:	2230      	movs	r2, #48	@ 0x30
 800183a:	2100      	movs	r1, #0
 800183c:	4618      	mov	r0, r3
 800183e:	f00f febe 	bl	80115be <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001842:	4b1e      	ldr	r3, [pc, #120]	@ (80018bc <MX_DAC1_Init+0x8c>)
 8001844:	4a1e      	ldr	r2, [pc, #120]	@ (80018c0 <MX_DAC1_Init+0x90>)
 8001846:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001848:	481c      	ldr	r0, [pc, #112]	@ (80018bc <MX_DAC1_Init+0x8c>)
 800184a:	f004 faa2 	bl	8005d92 <HAL_DAC_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001854:	f001 fda4 	bl	80033a0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001858:	2302      	movs	r3, #2
 800185a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001868:	2300      	movs	r3, #0
 800186a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800186c:	2300      	movs	r3, #0
 800186e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001874:	2301      	movs	r3, #1
 8001876:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800187c:	463b      	mov	r3, r7
 800187e:	2200      	movs	r2, #0
 8001880:	4619      	mov	r1, r3
 8001882:	480e      	ldr	r0, [pc, #56]	@ (80018bc <MX_DAC1_Init+0x8c>)
 8001884:	f004 fba2 	bl	8005fcc <HAL_DAC_ConfigChannel>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800188e:	f001 fd87 	bl	80033a0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001892:	463b      	mov	r3, r7
 8001894:	2210      	movs	r2, #16
 8001896:	4619      	mov	r1, r3
 8001898:	4808      	ldr	r0, [pc, #32]	@ (80018bc <MX_DAC1_Init+0x8c>)
 800189a:	f004 fb97 	bl	8005fcc <HAL_DAC_ConfigChannel>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80018a4:	f001 fd7c 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  __HAL_LINKDMA(&hdac1, DMA_Handle1, hdma_dac1_ch1);
 80018a8:	4b04      	ldr	r3, [pc, #16]	@ (80018bc <MX_DAC1_Init+0x8c>)
 80018aa:	4a06      	ldr	r2, [pc, #24]	@ (80018c4 <MX_DAC1_Init+0x94>)
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <MX_DAC1_Init+0x94>)
 80018b0:	4a02      	ldr	r2, [pc, #8]	@ (80018bc <MX_DAC1_Init+0x8c>)
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END DAC1_Init 2 */

}
 80018b4:	bf00      	nop
 80018b6:	3730      	adds	r7, #48	@ 0x30
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	2000068c 	.word	0x2000068c
 80018c0:	50000800 	.word	0x50000800
 80018c4:	200006b4 	.word	0x200006b4

080018c8 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	@ 0x30
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80018ce:	463b      	mov	r3, r7
 80018d0:	2230      	movs	r2, #48	@ 0x30
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00f fe72 	bl	80115be <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 80018da:	4b16      	ldr	r3, [pc, #88]	@ (8001934 <MX_DAC2_Init+0x6c>)
 80018dc:	4a16      	ldr	r2, [pc, #88]	@ (8001938 <MX_DAC2_Init+0x70>)
 80018de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80018e0:	4814      	ldr	r0, [pc, #80]	@ (8001934 <MX_DAC2_Init+0x6c>)
 80018e2:	f004 fa56 	bl	8005d92 <HAL_DAC_Init>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 80018ec:	f001 fd58 	bl	80033a0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80018f0:	2302      	movs	r3, #2
 80018f2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001904:	2300      	movs	r3, #0
 8001906:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800190c:	2301      	movs	r3, #1
 800190e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001914:	463b      	mov	r3, r7
 8001916:	2200      	movs	r2, #0
 8001918:	4619      	mov	r1, r3
 800191a:	4806      	ldr	r0, [pc, #24]	@ (8001934 <MX_DAC2_Init+0x6c>)
 800191c:	f004 fb56 	bl	8005fcc <HAL_DAC_ConfigChannel>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001926:	f001 fd3b 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800192a:	bf00      	nop
 800192c:	3730      	adds	r7, #48	@ 0x30
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200006a0 	.word	0x200006a0
 8001938:	50000c00 	.word	0x50000c00

0800193c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b098      	sub	sp, #96	@ 0x60
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001942:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800194e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]
 800195e:	615a      	str	r2, [r3, #20]
 8001960:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	2234      	movs	r2, #52	@ 0x34
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f00f fe28 	bl	80115be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800196e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a58 <MX_TIM1_Init+0x11c>)
 8001970:	4a3a      	ldr	r2, [pc, #232]	@ (8001a5c <MX_TIM1_Init+0x120>)
 8001972:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001974:	4b38      	ldr	r3, [pc, #224]	@ (8001a58 <MX_TIM1_Init+0x11c>)
 8001976:	2200      	movs	r2, #0
 8001978:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197a:	4b37      	ldr	r3, [pc, #220]	@ (8001a58 <MX_TIM1_Init+0x11c>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210;
 8001980:	4b35      	ldr	r3, [pc, #212]	@ (8001a58 <MX_TIM1_Init+0x11c>)
 8001982:	22d2      	movs	r2, #210	@ 0xd2
 8001984:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001986:	4b34      	ldr	r3, [pc, #208]	@ (8001a58 <MX_TIM1_Init+0x11c>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800198c:	4b32      	ldr	r3, [pc, #200]	@ (8001a58 <MX_TIM1_Init+0x11c>)
 800198e:	2200      	movs	r2, #0
 8001990:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001992:	4b31      	ldr	r3, [pc, #196]	@ (8001a58 <MX_TIM1_Init+0x11c>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001998:	482f      	ldr	r0, [pc, #188]	@ (8001a58 <MX_TIM1_Init+0x11c>)
 800199a:	f007 ffec 	bl	8009976 <HAL_TIM_PWM_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80019a4:	f001 fcfc 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80019ac:	2300      	movs	r3, #0
 80019ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80019b8:	4619      	mov	r1, r3
 80019ba:	4827      	ldr	r0, [pc, #156]	@ (8001a58 <MX_TIM1_Init+0x11c>)
 80019bc:	f009 f986 	bl	800accc <HAL_TIMEx_MasterConfigSynchronization>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80019c6:	f001 fceb 	bl	80033a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ca:	2360      	movs	r3, #96	@ 0x60
 80019cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019d2:	2300      	movs	r3, #0
 80019d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019d6:	2300      	movs	r3, #0
 80019d8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019da:	2300      	movs	r3, #0
 80019dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019ea:	2200      	movs	r2, #0
 80019ec:	4619      	mov	r1, r3
 80019ee:	481a      	ldr	r0, [pc, #104]	@ (8001a58 <MX_TIM1_Init+0x11c>)
 80019f0:	f008 fa7a 	bl	8009ee8 <HAL_TIM_PWM_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80019fa:	f001 fcd1 	bl	80033a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a36:	1d3b      	adds	r3, r7, #4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4807      	ldr	r0, [pc, #28]	@ (8001a58 <MX_TIM1_Init+0x11c>)
 8001a3c:	f009 f9dc 	bl	800adf8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001a46:	f001 fcab 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a4a:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <MX_TIM1_Init+0x11c>)
 8001a4c:	f002 f84c 	bl	8003ae8 <HAL_TIM_MspPostInit>

}
 8001a50:	bf00      	nop
 8001a52:	3760      	adds	r7, #96	@ 0x60
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000774 	.word	0x20000774
 8001a5c:	40012c00 	.word	0x40012c00

08001a60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08e      	sub	sp, #56	@ 0x38
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a80:	463b      	mov	r3, r7
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	611a      	str	r2, [r3, #16]
 8001a8e:	615a      	str	r2, [r3, #20]
 8001a90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a92:	4b2d      	ldr	r3, [pc, #180]	@ (8001b48 <MX_TIM4_Init+0xe8>)
 8001a94:	4a2d      	ldr	r2, [pc, #180]	@ (8001b4c <MX_TIM4_Init+0xec>)
 8001a96:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a98:	4b2b      	ldr	r3, [pc, #172]	@ (8001b48 <MX_TIM4_Init+0xe8>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b48 <MX_TIM4_Init+0xe8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 679;
 8001aa4:	4b28      	ldr	r3, [pc, #160]	@ (8001b48 <MX_TIM4_Init+0xe8>)
 8001aa6:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8001aaa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aac:	4b26      	ldr	r3, [pc, #152]	@ (8001b48 <MX_TIM4_Init+0xe8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab2:	4b25      	ldr	r3, [pc, #148]	@ (8001b48 <MX_TIM4_Init+0xe8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ab8:	4823      	ldr	r0, [pc, #140]	@ (8001b48 <MX_TIM4_Init+0xe8>)
 8001aba:	f007 fded 	bl	8009698 <HAL_TIM_Base_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001ac4:	f001 fc6c 	bl	80033a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001acc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ace:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	481c      	ldr	r0, [pc, #112]	@ (8001b48 <MX_TIM4_Init+0xe8>)
 8001ad6:	f008 fb1b 	bl	800a110 <HAL_TIM_ConfigClockSource>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001ae0:	f001 fc5e 	bl	80033a0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ae4:	4818      	ldr	r0, [pc, #96]	@ (8001b48 <MX_TIM4_Init+0xe8>)
 8001ae6:	f007 ff46 	bl	8009976 <HAL_TIM_PWM_Init>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001af0:	f001 fc56 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af8:	2300      	movs	r3, #0
 8001afa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001afc:	f107 031c 	add.w	r3, r7, #28
 8001b00:	4619      	mov	r1, r3
 8001b02:	4811      	ldr	r0, [pc, #68]	@ (8001b48 <MX_TIM4_Init+0xe8>)
 8001b04:	f009 f8e2 	bl	800accc <HAL_TIMEx_MasterConfigSynchronization>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001b0e:	f001 fc47 	bl	80033a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b12:	2360      	movs	r3, #96	@ 0x60
 8001b14:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b22:	463b      	mov	r3, r7
 8001b24:	2200      	movs	r2, #0
 8001b26:	4619      	mov	r1, r3
 8001b28:	4807      	ldr	r0, [pc, #28]	@ (8001b48 <MX_TIM4_Init+0xe8>)
 8001b2a:	f008 f9dd 	bl	8009ee8 <HAL_TIM_PWM_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001b34:	f001 fc34 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b38:	4803      	ldr	r0, [pc, #12]	@ (8001b48 <MX_TIM4_Init+0xe8>)
 8001b3a:	f001 ffd5 	bl	8003ae8 <HAL_TIM_MspPostInit>

}
 8001b3e:	bf00      	nop
 8001b40:	3738      	adds	r7, #56	@ 0x38
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200007c0 	.word	0x200007c0
 8001b4c:	40000800 	.word	0x40000800

08001b50 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <MX_TIM6_Init+0x78>)
 8001b62:	4a1a      	ldr	r2, [pc, #104]	@ (8001bcc <MX_TIM6_Init+0x7c>)
 8001b64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11549;
 8001b66:	4b18      	ldr	r3, [pc, #96]	@ (8001bc8 <MX_TIM6_Init+0x78>)
 8001b68:	f642 521d 	movw	r2, #11549	@ 0x2d1d
 8001b6c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <MX_TIM6_Init+0x78>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64934;
 8001b74:	4b14      	ldr	r3, [pc, #80]	@ (8001bc8 <MX_TIM6_Init+0x78>)
 8001b76:	f64f 52a6 	movw	r2, #64934	@ 0xfda6
 8001b7a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b7c:	4b12      	ldr	r3, [pc, #72]	@ (8001bc8 <MX_TIM6_Init+0x78>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b82:	4811      	ldr	r0, [pc, #68]	@ (8001bc8 <MX_TIM6_Init+0x78>)
 8001b84:	f007 fd88 	bl	8009698 <HAL_TIM_Base_Init>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001b8e:	f001 fc07 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001b9a:	1d3b      	adds	r3, r7, #4
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480a      	ldr	r0, [pc, #40]	@ (8001bc8 <MX_TIM6_Init+0x78>)
 8001ba0:	f009 f894 	bl	800accc <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001baa:	f001 fbf9 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2036      	movs	r0, #54	@ 0x36
 8001bb4:	f004 f8b9 	bl	8005d2a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bb8:	2036      	movs	r0, #54	@ 0x36
 8001bba:	f004 f8d0 	bl	8005d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	2000080c 	.word	0x2000080c
 8001bcc:	40001000 	.word	0x40001000

08001bd0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001be0:	4b14      	ldr	r3, [pc, #80]	@ (8001c34 <MX_TIM7_Init+0x64>)
 8001be2:	4a15      	ldr	r2, [pc, #84]	@ (8001c38 <MX_TIM7_Init+0x68>)
 8001be4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 14999;
 8001be6:	4b13      	ldr	r3, [pc, #76]	@ (8001c34 <MX_TIM7_Init+0x64>)
 8001be8:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001bec:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bee:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <MX_TIM7_Init+0x64>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8001bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001c34 <MX_TIM7_Init+0x64>)
 8001bf6:	2209      	movs	r2, #9
 8001bf8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <MX_TIM7_Init+0x64>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001c00:	480c      	ldr	r0, [pc, #48]	@ (8001c34 <MX_TIM7_Init+0x64>)
 8001c02:	f007 fd49 	bl	8009698 <HAL_TIM_Base_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001c0c:	f001 fbc8 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	@ (8001c34 <MX_TIM7_Init+0x64>)
 8001c1e:	f009 f855 	bl	800accc <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001c28:	f001 fbba 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	3710      	adds	r7, #16
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	20000858 	.word	0x20000858
 8001c38:	40001400 	.word	0x40001400

08001c3c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b098      	sub	sp, #96	@ 0x60
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c42:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c4e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c52:	2200      	movs	r2, #0
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	605a      	str	r2, [r3, #4]
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	60da      	str	r2, [r3, #12]
 8001c5c:	611a      	str	r2, [r3, #16]
 8001c5e:	615a      	str	r2, [r3, #20]
 8001c60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2234      	movs	r2, #52	@ 0x34
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f00f fca8 	bl	80115be <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d58 <MX_TIM8_Init+0x11c>)
 8001c70:	4a3a      	ldr	r2, [pc, #232]	@ (8001d5c <MX_TIM8_Init+0x120>)
 8001c72:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c74:	4b38      	ldr	r3, [pc, #224]	@ (8001d58 <MX_TIM8_Init+0x11c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7a:	4b37      	ldr	r3, [pc, #220]	@ (8001d58 <MX_TIM8_Init+0x11c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 8001c80:	4b35      	ldr	r3, [pc, #212]	@ (8001d58 <MX_TIM8_Init+0x11c>)
 8001c82:	22d2      	movs	r2, #210	@ 0xd2
 8001c84:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c86:	4b34      	ldr	r3, [pc, #208]	@ (8001d58 <MX_TIM8_Init+0x11c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c8c:	4b32      	ldr	r3, [pc, #200]	@ (8001d58 <MX_TIM8_Init+0x11c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c92:	4b31      	ldr	r3, [pc, #196]	@ (8001d58 <MX_TIM8_Init+0x11c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001c98:	482f      	ldr	r0, [pc, #188]	@ (8001d58 <MX_TIM8_Init+0x11c>)
 8001c9a:	f007 fe6c 	bl	8009976 <HAL_TIM_PWM_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8001ca4:	f001 fb7c 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cb4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4827      	ldr	r0, [pc, #156]	@ (8001d58 <MX_TIM8_Init+0x11c>)
 8001cbc:	f009 f806 	bl	800accc <HAL_TIMEx_MasterConfigSynchronization>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8001cc6:	f001 fb6b 	bl	80033a0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cca:	2360      	movs	r3, #96	@ 0x60
 8001ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ce6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cea:	2204      	movs	r2, #4
 8001cec:	4619      	mov	r1, r3
 8001cee:	481a      	ldr	r0, [pc, #104]	@ (8001d58 <MX_TIM8_Init+0x11c>)
 8001cf0:	f008 f8fa 	bl	8009ee8 <HAL_TIM_PWM_ConfigChannel>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001cfa:	f001 fb51 	bl	80033a0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d16:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d24:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001d28:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4807      	ldr	r0, [pc, #28]	@ (8001d58 <MX_TIM8_Init+0x11c>)
 8001d3c:	f009 f85c 	bl	800adf8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001d46:	f001 fb2b 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d4a:	4803      	ldr	r0, [pc, #12]	@ (8001d58 <MX_TIM8_Init+0x11c>)
 8001d4c:	f001 fecc 	bl	8003ae8 <HAL_TIM_MspPostInit>

}
 8001d50:	bf00      	nop
 8001d52:	3760      	adds	r7, #96	@ 0x60
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	200008a4 	.word	0x200008a4
 8001d5c:	40013400 	.word	0x40013400

08001d60 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d66:	f107 0310 	add.w	r3, r7, #16
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	601a      	str	r2, [r3, #0]
 8001d6e:	605a      	str	r2, [r3, #4]
 8001d70:	609a      	str	r2, [r3, #8]
 8001d72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <MX_TIM15_Init+0x9c>)
 8001d80:	4a1f      	ldr	r2, [pc, #124]	@ (8001e00 <MX_TIM15_Init+0xa0>)
 8001d82:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1499;
 8001d84:	4b1d      	ldr	r3, [pc, #116]	@ (8001dfc <MX_TIM15_Init+0x9c>)
 8001d86:	f240 52db 	movw	r2, #1499	@ 0x5db
 8001d8a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dfc <MX_TIM15_Init+0x9c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4;
 8001d92:	4b1a      	ldr	r3, [pc, #104]	@ (8001dfc <MX_TIM15_Init+0x9c>)
 8001d94:	2204      	movs	r2, #4
 8001d96:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d98:	4b18      	ldr	r3, [pc, #96]	@ (8001dfc <MX_TIM15_Init+0x9c>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001d9e:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <MX_TIM15_Init+0x9c>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da4:	4b15      	ldr	r3, [pc, #84]	@ (8001dfc <MX_TIM15_Init+0x9c>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001daa:	4814      	ldr	r0, [pc, #80]	@ (8001dfc <MX_TIM15_Init+0x9c>)
 8001dac:	f007 fc74 	bl	8009698 <HAL_TIM_Base_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001db6:	f001 faf3 	bl	80033a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dbe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001dc0:	f107 0310 	add.w	r3, r7, #16
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	480d      	ldr	r0, [pc, #52]	@ (8001dfc <MX_TIM15_Init+0x9c>)
 8001dc8:	f008 f9a2 	bl	800a110 <HAL_TIM_ConfigClockSource>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001dd2:	f001 fae5 	bl	80033a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	4619      	mov	r1, r3
 8001de2:	4806      	ldr	r0, [pc, #24]	@ (8001dfc <MX_TIM15_Init+0x9c>)
 8001de4:	f008 ff72 	bl	800accc <HAL_TIMEx_MasterConfigSynchronization>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001dee:	f001 fad7 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001df2:	bf00      	nop
 8001df4:	3720      	adds	r7, #32
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	200008f0 	.word	0x200008f0
 8001e00:	40014000 	.word	0x40014000

08001e04 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001e08:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <MX_TIM16_Init+0x44>)
 8001e0a:	4a10      	ldr	r2, [pc, #64]	@ (8001e4c <MX_TIM16_Init+0x48>)
 8001e0c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 14999;
 8001e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e48 <MX_TIM16_Init+0x44>)
 8001e10:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8001e14:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e16:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <MX_TIM16_Init+0x44>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001e48 <MX_TIM16_Init+0x44>)
 8001e1e:	2209      	movs	r2, #9
 8001e20:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e22:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <MX_TIM16_Init+0x44>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001e28:	4b07      	ldr	r3, [pc, #28]	@ (8001e48 <MX_TIM16_Init+0x44>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e2e:	4b06      	ldr	r3, [pc, #24]	@ (8001e48 <MX_TIM16_Init+0x44>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001e34:	4804      	ldr	r0, [pc, #16]	@ (8001e48 <MX_TIM16_Init+0x44>)
 8001e36:	f007 fc2f 	bl	8009698 <HAL_TIM_Base_Init>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d001      	beq.n	8001e44 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001e40:	f001 faae 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	2000093c 	.word	0x2000093c
 8001e4c:	40014400 	.word	0x40014400

08001e50 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e54:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <MX_UART4_Init+0x90>)
 8001e56:	4a23      	ldr	r2, [pc, #140]	@ (8001ee4 <MX_UART4_Init+0x94>)
 8001e58:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ee0 <MX_UART4_Init+0x90>)
 8001e5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e60:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <MX_UART4_Init+0x90>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <MX_UART4_Init+0x90>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee0 <MX_UART4_Init+0x90>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <MX_UART4_Init+0x90>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <MX_UART4_Init+0x90>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e80:	4b17      	ldr	r3, [pc, #92]	@ (8001ee0 <MX_UART4_Init+0x90>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e86:	4b16      	ldr	r3, [pc, #88]	@ (8001ee0 <MX_UART4_Init+0x90>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ee0 <MX_UART4_Init+0x90>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e92:	4b13      	ldr	r3, [pc, #76]	@ (8001ee0 <MX_UART4_Init+0x90>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e98:	4811      	ldr	r0, [pc, #68]	@ (8001ee0 <MX_UART4_Init+0x90>)
 8001e9a:	f009 f887 	bl	800afac <HAL_UART_Init>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001ea4:	f001 fa7c 	bl	80033a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	480d      	ldr	r0, [pc, #52]	@ (8001ee0 <MX_UART4_Init+0x90>)
 8001eac:	f009 fe22 	bl	800baf4 <HAL_UARTEx_SetTxFifoThreshold>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001eb6:	f001 fa73 	bl	80033a0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4808      	ldr	r0, [pc, #32]	@ (8001ee0 <MX_UART4_Init+0x90>)
 8001ebe:	f009 fe57 	bl	800bb70 <HAL_UARTEx_SetRxFifoThreshold>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001ec8:	f001 fa6a 	bl	80033a0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001ecc:	4804      	ldr	r0, [pc, #16]	@ (8001ee0 <MX_UART4_Init+0x90>)
 8001ece:	f009 fdd8 	bl	800ba82 <HAL_UARTEx_DisableFifoMode>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001ed8:	f001 fa62 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000988 	.word	0x20000988
 8001ee4:	40004c00 	.word	0x40004c00

08001ee8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001eee:	4b22      	ldr	r3, [pc, #136]	@ (8001f78 <MX_DMA_Init+0x90>)
 8001ef0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef2:	4a21      	ldr	r2, [pc, #132]	@ (8001f78 <MX_DMA_Init+0x90>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	6493      	str	r3, [r2, #72]	@ 0x48
 8001efa:	4b1f      	ldr	r3, [pc, #124]	@ (8001f78 <MX_DMA_Init+0x90>)
 8001efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f06:	4b1c      	ldr	r3, [pc, #112]	@ (8001f78 <MX_DMA_Init+0x90>)
 8001f08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8001f78 <MX_DMA_Init+0x90>)
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6493      	str	r3, [r2, #72]	@ 0x48
 8001f12:	4b19      	ldr	r3, [pc, #100]	@ (8001f78 <MX_DMA_Init+0x90>)
 8001f14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	200b      	movs	r0, #11
 8001f24:	f003 ff01 	bl	8005d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001f28:	200b      	movs	r0, #11
 8001f2a:	f003 ff18 	bl	8005d5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	200c      	movs	r0, #12
 8001f34:	f003 fef9 	bl	8005d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001f38:	200c      	movs	r0, #12
 8001f3a:	f003 ff10 	bl	8005d5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	200d      	movs	r0, #13
 8001f44:	f003 fef1 	bl	8005d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001f48:	200d      	movs	r0, #13
 8001f4a:	f003 ff08 	bl	8005d5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	200e      	movs	r0, #14
 8001f54:	f003 fee9 	bl	8005d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001f58:	200e      	movs	r0, #14
 8001f5a:	f003 ff00 	bl	8005d5e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	200f      	movs	r0, #15
 8001f64:	f003 fee1 	bl	8005d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001f68:	200f      	movs	r0, #15
 8001f6a:	f003 fef8 	bl	8005d5e <HAL_NVIC_EnableIRQ>

}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000

08001f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	@ 0x30
 8001f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f82:	f107 031c 	add.w	r3, r7, #28
 8001f86:	2200      	movs	r2, #0
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	609a      	str	r2, [r3, #8]
 8001f8e:	60da      	str	r2, [r3, #12]
 8001f90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f92:	4b9a      	ldr	r3, [pc, #616]	@ (80021fc <MX_GPIO_Init+0x280>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f96:	4a99      	ldr	r2, [pc, #612]	@ (80021fc <MX_GPIO_Init+0x280>)
 8001f98:	f043 0310 	orr.w	r3, r3, #16
 8001f9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f9e:	4b97      	ldr	r3, [pc, #604]	@ (80021fc <MX_GPIO_Init+0x280>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001faa:	4b94      	ldr	r3, [pc, #592]	@ (80021fc <MX_GPIO_Init+0x280>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fae:	4a93      	ldr	r2, [pc, #588]	@ (80021fc <MX_GPIO_Init+0x280>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb6:	4b91      	ldr	r3, [pc, #580]	@ (80021fc <MX_GPIO_Init+0x280>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fc2:	4b8e      	ldr	r3, [pc, #568]	@ (80021fc <MX_GPIO_Init+0x280>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc6:	4a8d      	ldr	r2, [pc, #564]	@ (80021fc <MX_GPIO_Init+0x280>)
 8001fc8:	f043 0320 	orr.w	r3, r3, #32
 8001fcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fce:	4b8b      	ldr	r3, [pc, #556]	@ (80021fc <MX_GPIO_Init+0x280>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd2:	f003 0320 	and.w	r3, r3, #32
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	4b88      	ldr	r3, [pc, #544]	@ (80021fc <MX_GPIO_Init+0x280>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fde:	4a87      	ldr	r2, [pc, #540]	@ (80021fc <MX_GPIO_Init+0x280>)
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fe6:	4b85      	ldr	r3, [pc, #532]	@ (80021fc <MX_GPIO_Init+0x280>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff2:	4b82      	ldr	r3, [pc, #520]	@ (80021fc <MX_GPIO_Init+0x280>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff6:	4a81      	ldr	r2, [pc, #516]	@ (80021fc <MX_GPIO_Init+0x280>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ffe:	4b7f      	ldr	r3, [pc, #508]	@ (80021fc <MX_GPIO_Init+0x280>)
 8002000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800200a:	4b7c      	ldr	r3, [pc, #496]	@ (80021fc <MX_GPIO_Init+0x280>)
 800200c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800200e:	4a7b      	ldr	r2, [pc, #492]	@ (80021fc <MX_GPIO_Init+0x280>)
 8002010:	f043 0308 	orr.w	r3, r3, #8
 8002014:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002016:	4b79      	ldr	r3, [pc, #484]	@ (80021fc <MX_GPIO_Init+0x280>)
 8002018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	607b      	str	r3, [r7, #4]
 8002020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	2120      	movs	r1, #32
 8002026:	4876      	ldr	r0, [pc, #472]	@ (8002200 <MX_GPIO_Init+0x284>)
 8002028:	f004 fd9e 	bl	8006b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
 800202c:	2201      	movs	r2, #1
 800202e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002032:	4874      	ldr	r0, [pc, #464]	@ (8002204 <MX_GPIO_Init+0x288>)
 8002034:	f004 fd98 	bl	8006b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, GPIO_PIN_RESET);
 8002038:	2200      	movs	r2, #0
 800203a:	2104      	movs	r1, #4
 800203c:	4871      	ldr	r0, [pc, #452]	@ (8002204 <MX_GPIO_Init+0x288>)
 800203e:	f004 fd93 	bl	8006b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 8002042:	2200      	movs	r2, #0
 8002044:	2120      	movs	r1, #32
 8002046:	4870      	ldr	r0, [pc, #448]	@ (8002208 <MX_GPIO_Init+0x28c>)
 8002048:	f004 fd8e 	bl	8006b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_RST_2_Pin|CS_OCD_1_Pin, GPIO_PIN_SET);
 800204c:	2201      	movs	r2, #1
 800204e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002052:	486b      	ldr	r0, [pc, #428]	@ (8002200 <MX_GPIO_Init+0x284>)
 8002054:	f004 fd88 	bl	8006b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port, NOT_RST_4_Pin, GPIO_PIN_SET);
 8002058:	2201      	movs	r2, #1
 800205a:	2140      	movs	r1, #64	@ 0x40
 800205c:	486a      	ldr	r0, [pc, #424]	@ (8002208 <MX_GPIO_Init+0x28c>)
 800205e:	f004 fd83 	bl	8006b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port, NOT_RST_3_Pin, GPIO_PIN_SET);
 8002062:	2201      	movs	r2, #1
 8002064:	2101      	movs	r1, #1
 8002066:	4869      	ldr	r0, [pc, #420]	@ (800220c <MX_GPIO_Init+0x290>)
 8002068:	f004 fd7e 	bl	8006b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port, NOT_RST_1_Pin, GPIO_PIN_SET);
 800206c:	2201      	movs	r2, #1
 800206e:	2180      	movs	r1, #128	@ 0x80
 8002070:	4867      	ldr	r0, [pc, #412]	@ (8002210 <MX_GPIO_Init+0x294>)
 8002072:	f004 fd79 	bl	8006b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NOT_FAULT_1_Pin CS_FAULT_2_Pin NOT_FAULT_2_Pin CS_FAULT_1_Pin */
  GPIO_InitStruct.Pin = NOT_FAULT_1_Pin|CS_FAULT_2_Pin|NOT_FAULT_2_Pin|CS_FAULT_1_Pin;
 8002076:	f640 0315 	movw	r3, #2069	@ 0x815
 800207a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207c:	2300      	movs	r3, #0
 800207e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002080:	2300      	movs	r3, #0
 8002082:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002084:	f107 031c 	add.w	r3, r7, #28
 8002088:	4619      	mov	r1, r3
 800208a:	485d      	ldr	r0, [pc, #372]	@ (8002200 <MX_GPIO_Init+0x284>)
 800208c:	f004 fbd2 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_INTERLOCK_Pin */
  GPIO_InitStruct.Pin = RESET_INTERLOCK_Pin;
 8002090:	2320      	movs	r3, #32
 8002092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002094:	2301      	movs	r3, #1
 8002096:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 80020a0:	f107 031c 	add.w	r3, r7, #28
 80020a4:	4619      	mov	r1, r3
 80020a6:	4856      	ldr	r0, [pc, #344]	@ (8002200 <MX_GPIO_Init+0x284>)
 80020a8:	f004 fbc4 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_OCD_2_Pin */
  GPIO_InitStruct.Pin = CS_OCD_2_Pin;
 80020ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80020b2:	2311      	movs	r3, #17
 80020b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_OCD_2_GPIO_Port, &GPIO_InitStruct);
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	4619      	mov	r1, r3
 80020c4:	484f      	ldr	r0, [pc, #316]	@ (8002204 <MX_GPIO_Init+0x288>)
 80020c6:	f004 fbb5 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_3_Pin */
  GPIO_InitStruct.Pin = READY_3_Pin;
 80020ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_3_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	4849      	ldr	r0, [pc, #292]	@ (8002204 <MX_GPIO_Init+0x288>)
 80020e0:	f004 fba8 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERLOCK_Pin NOT_FAULT_4_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin|NOT_FAULT_4_Pin;
 80020e4:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80020e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	4619      	mov	r1, r3
 80020f8:	4843      	ldr	r0, [pc, #268]	@ (8002208 <MX_GPIO_Init+0x28c>)
 80020fa:	f004 fb9b 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_FPGA_Pin */
  GPIO_InitStruct.Pin = RESET_FPGA_Pin;
 80020fe:	2304      	movs	r3, #4
 8002100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002102:	2301      	movs	r3, #1
 8002104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_FPGA_GPIO_Port, &GPIO_InitStruct);
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	4619      	mov	r1, r3
 8002114:	483b      	ldr	r0, [pc, #236]	@ (8002204 <MX_GPIO_Init+0x288>)
 8002116:	f004 fb8d 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_STOP_FPGA_Pin */
  GPIO_InitStruct.Pin = START_STOP_FPGA_Pin;
 800211a:	2320      	movs	r3, #32
 800211c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800211e:	2301      	movs	r3, #1
 8002120:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002126:	2300      	movs	r3, #0
 8002128:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(START_STOP_FPGA_GPIO_Port, &GPIO_InitStruct);
 800212a:	f107 031c 	add.w	r3, r7, #28
 800212e:	4619      	mov	r1, r3
 8002130:	4835      	ldr	r0, [pc, #212]	@ (8002208 <MX_GPIO_Init+0x28c>)
 8002132:	f004 fb7f 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_2_Pin */
  GPIO_InitStruct.Pin = READY_2_Pin;
 8002136:	2301      	movs	r3, #1
 8002138:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_2_GPIO_Port, &GPIO_InitStruct);
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	4619      	mov	r1, r3
 8002148:	4831      	ldr	r0, [pc, #196]	@ (8002210 <MX_GPIO_Init+0x294>)
 800214a:	f004 fb73 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pins : NOT_RST_2_Pin CS_OCD_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_2_Pin|CS_OCD_1_Pin;
 800214e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002154:	2311      	movs	r3, #17
 8002156:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	4619      	mov	r1, r3
 8002166:	4826      	ldr	r0, [pc, #152]	@ (8002200 <MX_GPIO_Init+0x284>)
 8002168:	f004 fb64 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_4_Pin */
  GPIO_InitStruct.Pin = NOT_RST_4_Pin;
 800216c:	2340      	movs	r3, #64	@ 0x40
 800216e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002170:	2311      	movs	r3, #17
 8002172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_4_GPIO_Port, &GPIO_InitStruct);
 800217c:	f107 031c 	add.w	r3, r7, #28
 8002180:	4619      	mov	r1, r3
 8002182:	4821      	ldr	r0, [pc, #132]	@ (8002208 <MX_GPIO_Init+0x28c>)
 8002184:	f004 fb56 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_4_Pin */
  GPIO_InitStruct.Pin = READY_4_Pin;
 8002188:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800218c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_4_GPIO_Port, &GPIO_InitStruct);
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021a0:	f004 fb48 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_3_Pin */
  GPIO_InitStruct.Pin = NOT_RST_3_Pin;
 80021a4:	2301      	movs	r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021a8:	2311      	movs	r3, #17
 80021aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_3_GPIO_Port, &GPIO_InitStruct);
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	4619      	mov	r1, r3
 80021ba:	4814      	ldr	r0, [pc, #80]	@ (800220c <MX_GPIO_Init+0x290>)
 80021bc:	f004 fb3a 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_1_Pin PD5 NOT_FAULT_3_Pin */
  GPIO_InitStruct.Pin = READY_1_Pin|GPIO_PIN_5|NOT_FAULT_3_Pin;
 80021c0:	2370      	movs	r3, #112	@ 0x70
 80021c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	4619      	mov	r1, r3
 80021d2:	480e      	ldr	r0, [pc, #56]	@ (800220c <MX_GPIO_Init+0x290>)
 80021d4:	f004 fb2e 	bl	8006834 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_1_Pin;
 80021d8:	2380      	movs	r3, #128	@ 0x80
 80021da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80021dc:	2311      	movs	r3, #17
 80021de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_1_GPIO_Port, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4808      	ldr	r0, [pc, #32]	@ (8002210 <MX_GPIO_Init+0x294>)
 80021f0:	f004 fb20 	bl	8006834 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021f4:	bf00      	nop
 80021f6:	3730      	adds	r7, #48	@ 0x30
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	48001000 	.word	0x48001000
 8002204:	48001400 	.word	0x48001400
 8002208:	48000800 	.word	0x48000800
 800220c:	48000c00 	.word	0x48000c00
 8002210:	48000400 	.word	0x48000400

08002214 <handle_event>:

/* USER CODE BEGIN 4 */

ConverterState handle_event(ConverterState currentState, ConverterEvent event) {
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	460a      	mov	r2, r1
 800221e:	71fb      	strb	r3, [r7, #7]
 8002220:	4613      	mov	r3, r2
 8002222:	71bb      	strb	r3, [r7, #6]
    switch (currentState) {
 8002224:	79fb      	ldrb	r3, [r7, #7]
 8002226:	2b05      	cmp	r3, #5
 8002228:	d834      	bhi.n	8002294 <handle_event+0x80>
 800222a:	a201      	add	r2, pc, #4	@ (adr r2, 8002230 <handle_event+0x1c>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	08002249 	.word	0x08002249
 8002234:	08002253 	.word	0x08002253
 8002238:	0800225d 	.word	0x0800225d
 800223c:	08002273 	.word	0x08002273
 8002240:	08002287 	.word	0x08002287
 8002244:	08002291 	.word	0x08002291
        case STATE_INIT:
            if (event == EVENT_START)
 8002248:	79bb      	ldrb	r3, [r7, #6]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d124      	bne.n	8002298 <handle_event+0x84>
            {
                return STATE_SOFT_START;
 800224e:	2302      	movs	r3, #2
 8002250:	e02c      	b.n	80022ac <handle_event+0x98>
            }
            break;
        case STATE_STANDBY:
            if (event == EVENT_START)
 8002252:	79bb      	ldrb	r3, [r7, #6]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d121      	bne.n	800229c <handle_event+0x88>
            {
                return STATE_SOFT_START;
 8002258:	2302      	movs	r3, #2
 800225a:	e027      	b.n	80022ac <handle_event+0x98>
            }
            break;
        case STATE_SOFT_START:
            if (event == EVENT_FAULT)
 800225c:	79bb      	ldrb	r3, [r7, #6]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d101      	bne.n	8002266 <handle_event+0x52>
            {
                return STATE_FAULT;
 8002262:	2304      	movs	r3, #4
 8002264:	e022      	b.n	80022ac <handle_event+0x98>
            } else if (RAMP_FINISHED) {
 8002266:	4b14      	ldr	r3, [pc, #80]	@ (80022b8 <handle_event+0xa4>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d018      	beq.n	80022a0 <handle_event+0x8c>
                return STATE_REGULATION;
 800226e:	2303      	movs	r3, #3
 8002270:	e01c      	b.n	80022ac <handle_event+0x98>
            }
            break;
        case STATE_REGULATION:
        	//USB_SendString("State: INIT -> RUNNING\r\n");
            if (event == EVENT_FAULT)
 8002272:	79bb      	ldrb	r3, [r7, #6]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <handle_event+0x68>
            {
                return STATE_FAULT;
 8002278:	2304      	movs	r3, #4
 800227a:	e017      	b.n	80022ac <handle_event+0x98>
            } else if (event == EVENT_SHUTDOWN)
 800227c:	79bb      	ldrb	r3, [r7, #6]
 800227e:	2b03      	cmp	r3, #3
 8002280:	d110      	bne.n	80022a4 <handle_event+0x90>
            {
                return STATE_SHUTDOWN;
 8002282:	2305      	movs	r3, #5
 8002284:	e012      	b.n	80022ac <handle_event+0x98>
            }

            break;
        case STATE_FAULT:
            if (event == EVENT_CLEAR_FAULT)
 8002286:	79bb      	ldrb	r3, [r7, #6]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d10d      	bne.n	80022a8 <handle_event+0x94>
            {
                return STATE_STANDBY;
 800228c:	2301      	movs	r3, #1
 800228e:	e00d      	b.n	80022ac <handle_event+0x98>
            }
            break;
        case STATE_SHUTDOWN:
            if (1)
            {
                return STATE_STANDBY;
 8002290:	2301      	movs	r3, #1
 8002292:	e00b      	b.n	80022ac <handle_event+0x98>
            }
            break;
        default:
            break;
 8002294:	bf00      	nop
 8002296:	e008      	b.n	80022aa <handle_event+0x96>
            break;
 8002298:	bf00      	nop
 800229a:	e006      	b.n	80022aa <handle_event+0x96>
            break;
 800229c:	bf00      	nop
 800229e:	e004      	b.n	80022aa <handle_event+0x96>
            break;
 80022a0:	bf00      	nop
 80022a2:	e002      	b.n	80022aa <handle_event+0x96>
            break;
 80022a4:	bf00      	nop
 80022a6:	e000      	b.n	80022aa <handle_event+0x96>
            break;
 80022a8:	bf00      	nop
    }
    return currentState; // No state change
 80022aa:	79fb      	ldrb	r3, [r7, #7]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	20000a50 	.word	0x20000a50

080022bc <Set_PWM_DutyCycle>:
       // float TEMPERATURE_AFTER_CONVERSION_FROM_ADC = (((adc_value/4096.0f)*3.3f) - 0.4f)/0.0195f;
       // return TEMPERATURE_AFTER_CONVERSION_FROM_ADC;

}

void Set_PWM_DutyCycle(uint32_t dutyCycle) { // dutycyle for FAN SPEED CONTROl
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
    if (dutyCycle > 100) dutyCycle = 100;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b64      	cmp	r3, #100	@ 0x64
 80022c8:	d901      	bls.n	80022ce <Set_PWM_DutyCycle+0x12>
 80022ca:	2364      	movs	r3, #100	@ 0x64
 80022cc:	607b      	str	r3, [r7, #4]
    uint32_t pulse = (htim4.Init.Period + 1) * dutyCycle / 100 - 1;
 80022ce:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <Set_PWM_DutyCycle+0x40>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	3301      	adds	r3, #1
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	fb02 f303 	mul.w	r3, r2, r3
 80022da:	4a09      	ldr	r2, [pc, #36]	@ (8002300 <Set_PWM_DutyCycle+0x44>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	095b      	lsrs	r3, r3, #5
 80022e2:	3b01      	subs	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 80022e6:	4b05      	ldr	r3, [pc, #20]	@ (80022fc <Set_PWM_DutyCycle+0x40>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80022ee:	bf00      	nop
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	200007c0 	.word	0x200007c0
 8002300:	51eb851f 	.word	0x51eb851f

08002304 <HAL_ADC_ConvCpltCallback>:
//ADC save to array and moving average
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC5)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a14      	ldr	r2, [pc, #80]	@ (8002364 <HAL_ADC_ConvCpltCallback+0x60>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d120      	bne.n	8002358 <HAL_ADC_ConvCpltCallback+0x54>
		    {
		        uint32_t sum = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	e00b      	b.n	8002338 <HAL_ADC_ConvCpltCallback+0x34>
		        {
		            sum += adc5_dma_buffer[i];
 8002320:	4a11      	ldr	r2, [pc, #68]	@ (8002368 <HAL_ADC_ConvCpltCallback+0x64>)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002328:	b29b      	uxth	r3, r3
 800232a:	461a      	mov	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4413      	add	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	3301      	adds	r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b09      	cmp	r3, #9
 800233c:	ddf0      	ble.n	8002320 <HAL_ADC_ConvCpltCallback+0x1c>
		        }
		        adc_moving_average = ((sum / MA_WINDOW_SIZE)*3300)/4096;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	4a0a      	ldr	r2, [pc, #40]	@ (800236c <HAL_ADC_ConvCpltCallback+0x68>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	08db      	lsrs	r3, r3, #3
 8002348:	f640 42e4 	movw	r2, #3300	@ 0xce4
 800234c:	fb02 f303 	mul.w	r3, r2, r3
 8002350:	0b1b      	lsrs	r3, r3, #12
 8002352:	b29a      	uxth	r2, r3
 8002354:	4b06      	ldr	r3, [pc, #24]	@ (8002370 <HAL_ADC_ConvCpltCallback+0x6c>)
 8002356:	801a      	strh	r2, [r3, #0]
		        // Restart the DMA transfer
		       // HAL_ADC_Start_DMA(hadc, (uint32_t*)adc5_dma_buffer, MA_WINDOW_SIZE);
		    }


}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	50000600 	.word	0x50000600
 8002368:	20000a60 	.word	0x20000a60
 800236c:	cccccccd 	.word	0xcccccccd
 8002370:	20000a74 	.word	0x20000a74

08002374 <Update_PWM_Frequency>:
        }
    }
}

void Update_PWM_Frequency(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency)
{
 8002374:	b480      	push	{r7}
 8002376:	b089      	sub	sp, #36	@ 0x24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
	 uint32_t timer_clock = 150000000;  // Assuming a 150 MHz timer clock
 8002380:	4b33      	ldr	r3, [pc, #204]	@ (8002450 <Update_PWM_Frequency+0xdc>)
 8002382:	61bb      	str	r3, [r7, #24]
	    uint32_t prescaler = htim->Init.Prescaler + 1;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	3301      	adds	r3, #1
 800238a:	617b      	str	r3, [r7, #20]
	    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	fbb2 f3f3 	udiv	r3, r2, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]

	    // Ensure period is within valid range
	    if (period > 65535) {
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a4:	d314      	bcc.n	80023d0 <Update_PWM_Frequency+0x5c>
	        // Adjust prescaler to bring period within range
	        prescaler = (prescaler * (period / 65536)) + 1;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	0c1b      	lsrs	r3, r3, #16
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
	        period = (timer_clock / (prescaler * frequency)) - 1;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	fb02 f303 	mul.w	r3, r2, r3
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	61fb      	str	r3, [r7, #28]
	        __HAL_TIM_SET_PRESCALER(htim, prescaler - 1);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	3a01      	subs	r2, #1
 80023ce:	629a      	str	r2, [r3, #40]	@ 0x28
	    }

	    // Update the period register (ARR) with double buffering
	    __HAL_TIM_SET_AUTORELOAD(htim, period);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	60da      	str	r2, [r3, #12]

	    // Set the duty cycle to approximately 50%
	    uint32_t pulse = period / 2;
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	085b      	lsrs	r3, r3, #1
 80023e2:	613b      	str	r3, [r7, #16]
	    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d104      	bne.n	80023f4 <Update_PWM_Frequency+0x80>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80023f2:	e023      	b.n	800243c <Update_PWM_Frequency+0xc8>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d104      	bne.n	8002404 <Update_PWM_Frequency+0x90>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	6393      	str	r3, [r2, #56]	@ 0x38
 8002402:	e01b      	b.n	800243c <Update_PWM_Frequency+0xc8>
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b08      	cmp	r3, #8
 8002408:	d104      	bne.n	8002414 <Update_PWM_Frequency+0xa0>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002412:	e013      	b.n	800243c <Update_PWM_Frequency+0xc8>
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b0c      	cmp	r3, #12
 8002418:	d104      	bne.n	8002424 <Update_PWM_Frequency+0xb0>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	6413      	str	r3, [r2, #64]	@ 0x40
 8002422:	e00b      	b.n	800243c <Update_PWM_Frequency+0xc8>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b10      	cmp	r3, #16
 8002428:	d104      	bne.n	8002434 <Update_PWM_Frequency+0xc0>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	6493      	str	r3, [r2, #72]	@ 0x48
 8002432:	e003      	b.n	800243c <Update_PWM_Frequency+0xc8>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	    // Manually generate an update event by setting the UG bit in the EGR register
	    htim->Instance->EGR = TIM_EGR_UG;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2201      	movs	r2, #1
 8002442:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_AUTORELOAD(htim, period);

    // Restart the timer PWM generation
    HAL_TIM_PWM_Stop(htim, channel);
    HAL_TIM_PWM_Start(htim, channel);*/
}
 8002444:	bf00      	nop
 8002446:	3724      	adds	r7, #36	@ 0x24
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	08f0d180 	.word	0x08f0d180

08002454 <Check_Faults>:
	        dac_buffer[i] = (((1/3.3)*res12_b) + ((0.5/3.3)*res12_b) * sin(2 * M_PI * i/BUFFER_SIZE));
	    }
}

uint8_t Check_Faults()
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
	// Faults pins are from gate driver and they are active pull down
	// 4 fault pins from 4 gate driver + 2 fault pins from  2 currents sensors  = 6 pins
	if(HAL_GPIO_ReadPin(CS_FAULT_1_GPIO_Port, CS_FAULT_1_Pin) && HAL_GPIO_ReadPin(CS_FAULT_2_GPIO_Port, CS_FAULT_2_Pin)
 8002458:	2101      	movs	r1, #1
 800245a:	4817      	ldr	r0, [pc, #92]	@ (80024b8 <Check_Faults+0x64>)
 800245c:	f004 fb6c 	bl	8006b38 <HAL_GPIO_ReadPin>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d025      	beq.n	80024b2 <Check_Faults+0x5e>
 8002466:	2110      	movs	r1, #16
 8002468:	4813      	ldr	r0, [pc, #76]	@ (80024b8 <Check_Faults+0x64>)
 800246a:	f004 fb65 	bl	8006b38 <HAL_GPIO_ReadPin>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01e      	beq.n	80024b2 <Check_Faults+0x5e>
			&& HAL_GPIO_ReadPin(NOT_FAULT_1_GPIO_Port, NOT_FAULT_1_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_2_GPIO_Port, NOT_FAULT_2_Pin)
 8002474:	2104      	movs	r1, #4
 8002476:	4810      	ldr	r0, [pc, #64]	@ (80024b8 <Check_Faults+0x64>)
 8002478:	f004 fb5e 	bl	8006b38 <HAL_GPIO_ReadPin>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d017      	beq.n	80024b2 <Check_Faults+0x5e>
 8002482:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002486:	480c      	ldr	r0, [pc, #48]	@ (80024b8 <Check_Faults+0x64>)
 8002488:	f004 fb56 	bl	8006b38 <HAL_GPIO_ReadPin>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00f      	beq.n	80024b2 <Check_Faults+0x5e>
			&& HAL_GPIO_ReadPin(NOT_FAULT_3_GPIO_Port, NOT_FAULT_3_Pin) && HAL_GPIO_ReadPin(NOT_RST_4_GPIO_Port, NOT_RST_4_Pin) )
 8002492:	2140      	movs	r1, #64	@ 0x40
 8002494:	4809      	ldr	r0, [pc, #36]	@ (80024bc <Check_Faults+0x68>)
 8002496:	f004 fb4f 	bl	8006b38 <HAL_GPIO_ReadPin>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <Check_Faults+0x5e>
 80024a0:	2140      	movs	r1, #64	@ 0x40
 80024a2:	4807      	ldr	r0, [pc, #28]	@ (80024c0 <Check_Faults+0x6c>)
 80024a4:	f004 fb48 	bl	8006b38 <HAL_GPIO_ReadPin>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <Check_Faults+0x5e>
		return 0; // if all pins is 1 then all is ready, there is not faults then return 0
 80024ae:	2300      	movs	r3, #0
 80024b0:	e000      	b.n	80024b4 <Check_Faults+0x60>

	return 1;
 80024b2:	2301      	movs	r3, #1
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	48001000 	.word	0x48001000
 80024bc:	48000c00 	.word	0x48000c00
 80024c0:	48000800 	.word	0x48000800

080024c4 <Check_Ready>:

uint8_t Check_Ready()
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
	// Ready pins are from gate driver and they are active pull up
	// 4 ready pins from 4 gate drivers
	if(HAL_GPIO_ReadPin(READY_1_GPIO_Port, READY_1_Pin) && HAL_GPIO_ReadPin(READY_2_GPIO_Port, READY_2_Pin)
 80024c8:	2110      	movs	r1, #16
 80024ca:	4811      	ldr	r0, [pc, #68]	@ (8002510 <Check_Ready+0x4c>)
 80024cc:	f004 fb34 	bl	8006b38 <HAL_GPIO_ReadPin>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d019      	beq.n	800250a <Check_Ready+0x46>
 80024d6:	2101      	movs	r1, #1
 80024d8:	480e      	ldr	r0, [pc, #56]	@ (8002514 <Check_Ready+0x50>)
 80024da:	f004 fb2d 	bl	8006b38 <HAL_GPIO_ReadPin>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d012      	beq.n	800250a <Check_Ready+0x46>
			&& HAL_GPIO_ReadPin(READY_3_GPIO_Port, READY_3_Pin) && HAL_GPIO_ReadPin(READY_4_GPIO_Port, READY_4_Pin) )
 80024e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024e8:	480b      	ldr	r0, [pc, #44]	@ (8002518 <Check_Ready+0x54>)
 80024ea:	f004 fb25 	bl	8006b38 <HAL_GPIO_ReadPin>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00a      	beq.n	800250a <Check_Ready+0x46>
 80024f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80024f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024fc:	f004 fb1c 	bl	8006b38 <HAL_GPIO_ReadPin>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <Check_Ready+0x46>
			return 1; // return 1 when is gate drivers ready
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <Check_Ready+0x48>

		return 0;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	48000c00 	.word	0x48000c00
 8002514:	48000400 	.word	0x48000400
 8002518:	48001400 	.word	0x48001400
 800251c:	00000000 	.word	0x00000000

08002520 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002520:	b5b0      	push	{r4, r5, r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	// SOFT start_program RAMP REALISATION
	//  Ts 20khz
	if(htim->Instance == TIM15)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a70      	ldr	r2, [pc, #448]	@ (80026f0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	f040 822e 	bne.w	8002990 <HAL_TIM_PeriodElapsedCallback+0x470>
	{
		if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
 8002534:	4b6f      	ldr	r3, [pc, #444]	@ (80026f4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d004      	beq.n	8002546 <HAL_TIM_PeriodElapsedCallback+0x26>
 800253c:	4b6d      	ldr	r3, [pc, #436]	@ (80026f4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b03      	cmp	r3, #3
 8002542:	f040 8225 	bne.w	8002990 <HAL_TIM_PeriodElapsedCallback+0x470>
		{
		//current_sensor1_vref = adc3_dma_buffer[0]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[0], pcb_temp)/4096)*3.3;
		//current_sensor2_vref = adc3_dma_buffer[1]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[1], pcb_temp)/4096)*3.3;

		input_voltage = (int)((((adc3_dma_buffer[2])*3300)/4096-200)*18.81);//[mV]		((Low_pass_filter(adc3_dma_buffer[2], input_voltage)/4096)*3.3-0.2)*27.1;
 8002546:	4b6c      	ldr	r3, [pc, #432]	@ (80026f8 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002548:	889b      	ldrh	r3, [r3, #4]
 800254a:	b29b      	uxth	r3, r3
 800254c:	461a      	mov	r2, r3
 800254e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	da01      	bge.n	800255e <HAL_TIM_PeriodElapsedCallback+0x3e>
 800255a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800255e:	131b      	asrs	r3, r3, #12
 8002560:	3bc8      	subs	r3, #200	@ 0xc8
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe f806 	bl	8000574 <__aeabi_i2d>
 8002568:	a359      	add	r3, pc, #356	@ (adr r3, 80026d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800256a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256e:	f7fe f86b 	bl	8000648 <__aeabi_dmul>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4610      	mov	r0, r2
 8002578:	4619      	mov	r1, r3
 800257a:	f7fe fb15 	bl	8000ba8 <__aeabi_d2iz>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	4b5e      	ldr	r3, [pc, #376]	@ (80026fc <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002584:	601a      	str	r2, [r3, #0]
		output_voltage = (int)((((adc4_dma_buffer[1])*3300)/4096-200)*18.81);//[mV] 		((Low_pass_filter(adc4_dma_buffer, output_voltage)/4096)*3.3-0.2)*27.1;
 8002586:	4b5e      	ldr	r3, [pc, #376]	@ (8002700 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002588:	885b      	ldrh	r3, [r3, #2]
 800258a:	b29b      	uxth	r3, r3
 800258c:	461a      	mov	r2, r3
 800258e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	da01      	bge.n	800259e <HAL_TIM_PeriodElapsedCallback+0x7e>
 800259a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800259e:	131b      	asrs	r3, r3, #12
 80025a0:	3bc8      	subs	r3, #200	@ 0xc8
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd ffe6 	bl	8000574 <__aeabi_i2d>
 80025a8:	a349      	add	r3, pc, #292	@ (adr r3, 80026d0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80025aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ae:	f7fe f84b 	bl	8000648 <__aeabi_dmul>
 80025b2:	4602      	mov	r2, r0
 80025b4:	460b      	mov	r3, r1
 80025b6:	4610      	mov	r0, r2
 80025b8:	4619      	mov	r1, r3
 80025ba:	f7fe faf5 	bl	8000ba8 <__aeabi_d2iz>
 80025be:	4603      	mov	r3, r0
 80025c0:	461a      	mov	r2, r3
 80025c2:	4b50      	ldr	r3, [pc, #320]	@ (8002704 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80025c4:	601a      	str	r2, [r3, #0]

		imax2_sum = (adc_moving_average-1450)*0.384; //[mA] 0.20V - -0.5A || 1.45v - 0A || 2.77V - 0.5A		0.384 A/V
 80025c6:	4b50      	ldr	r3, [pc, #320]	@ (8002708 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	f2a3 53aa 	subw	r3, r3, #1450	@ 0x5aa
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ffd0 	bl	8000574 <__aeabi_i2d>
 80025d4:	a340      	add	r3, pc, #256	@ (adr r3, 80026d8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fe f835 	bl	8000648 <__aeabi_dmul>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f7fe fb07 	bl	8000bf8 <__aeabi_d2uiz>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4a47      	ldr	r2, [pc, #284]	@ (800270c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80025ee:	6013      	str	r3, [r2, #0]
		Gv = output_voltage/input_voltage;//output_voltage/input_voltage;
 80025f0:	4b44      	ldr	r3, [pc, #272]	@ (8002704 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	4b41      	ldr	r3, [pc, #260]	@ (80026fc <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	ee07 3a90 	vmov	s15, r3
 8002600:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002604:	4b42      	ldr	r3, [pc, #264]	@ (8002710 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002606:	edc3 7a00 	vstr	s15, [r3]

		if(Gv<2) //CZARY
 800260a:	4b41      	ldr	r3, [pc, #260]	@ (8002710 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800260c:	edd3 7a00 	vldr	s15, [r3]
 8002610:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002614:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261c:	d57e      	bpl.n	800271c <HAL_TIM_PeriodElapsedCallback+0x1fc>
		{
			delay_tr = acos(1-Gv)/wr;
 800261e:	4b3c      	ldr	r3, [pc, #240]	@ (8002710 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800262c:	ee17 0a90 	vmov	r0, s15
 8002630:	f7fd ffb2 	bl	8000598 <__aeabi_f2d>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	ec43 2b10 	vmov	d0, r2, r3
 800263c:	f012 ff98 	bl	8015570 <acos>
 8002640:	ec51 0b10 	vmov	r0, r1, d0
 8002644:	a326      	add	r3, pc, #152	@ (adr r3, 80026e0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f7fe f927 	bl	800089c <__aeabi_ddiv>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f7fe faef 	bl	8000c38 <__aeabi_d2f>
 800265a:	4603      	mov	r3, r0
 800265c:	4a2d      	ldr	r2, [pc, #180]	@ (8002714 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800265e:	6013      	str	r3, [r2, #0]
			imin = output_voltage*sqrt((2-Gv)/Gv)/Z; //[mA] Negative current needed to Zero voltage switching in resonance
 8002660:	4b28      	ldr	r3, [pc, #160]	@ (8002704 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f7fd ff75 	bl	8000554 <__aeabi_ui2d>
 800266a:	4604      	mov	r4, r0
 800266c:	460d      	mov	r5, r1
 800266e:	4b28      	ldr	r3, [pc, #160]	@ (8002710 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002670:	edd3 7a00 	vldr	s15, [r3]
 8002674:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002678:	ee37 7a67 	vsub.f32	s14, s14, s15
 800267c:	4b24      	ldr	r3, [pc, #144]	@ (8002710 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800267e:	edd3 7a00 	vldr	s15, [r3]
 8002682:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002686:	ee16 0a90 	vmov	r0, s13
 800268a:	f7fd ff85 	bl	8000598 <__aeabi_f2d>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	ec43 2b10 	vmov	d0, r2, r3
 8002696:	f013 f80f 	bl	80156b8 <sqrt>
 800269a:	ec53 2b10 	vmov	r2, r3, d0
 800269e:	4620      	mov	r0, r4
 80026a0:	4629      	mov	r1, r5
 80026a2:	f7fd ffd1 	bl	8000648 <__aeabi_dmul>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80026e8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80026b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b4:	f7fe f8f2 	bl	800089c <__aeabi_ddiv>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	f7fe fa9a 	bl	8000bf8 <__aeabi_d2uiz>
 80026c4:	4603      	mov	r3, r0
 80026c6:	4a14      	ldr	r2, [pc, #80]	@ (8002718 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e062      	b.n	8002792 <HAL_TIM_PeriodElapsedCallback+0x272>
 80026cc:	f3af 8000 	nop.w
 80026d0:	28f5c28f 	.word	0x28f5c28f
 80026d4:	4032cf5c 	.word	0x4032cf5c
 80026d8:	bc6a7efa 	.word	0xbc6a7efa
 80026dc:	3fd89374 	.word	0x3fd89374
 80026e0:	78000000 	.word	0x78000000
 80026e4:	4190942a 	.word	0x4190942a
 80026e8:	9374bc6a 	.word	0x9374bc6a
 80026ec:	40624418 	.word	0x40624418
 80026f0:	40014000 	.word	0x40014000
 80026f4:	20000b4a 	.word	0x20000b4a
 80026f8:	20000a38 	.word	0x20000a38
 80026fc:	20000a2c 	.word	0x20000a2c
 8002700:	20000a4c 	.word	0x20000a4c
 8002704:	20000a44 	.word	0x20000a44
 8002708:	20000a74 	.word	0x20000a74
 800270c:	20000a5c 	.word	0x20000a5c
 8002710:	20000004 	.word	0x20000004
 8002714:	20000a54 	.word	0x20000a54
 8002718:	20000a28 	.word	0x20000a28

		} else if(Gv>=2)
 800271c:	4bb8      	ldr	r3, [pc, #736]	@ (8002a00 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002726:	eef4 7ac7 	vcmpe.f32	s15, s14
 800272a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272e:	db30      	blt.n	8002792 <HAL_TIM_PeriodElapsedCallback+0x272>
		{
			delay_tr = (M_PI-acos(1/(Gv-1)))/wr;
 8002730:	4bb3      	ldr	r3, [pc, #716]	@ (8002a00 <HAL_TIM_PeriodElapsedCallback+0x4e0>)
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800273a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800273e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002742:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002746:	ee16 0a90 	vmov	r0, s13
 800274a:	f7fd ff25 	bl	8000598 <__aeabi_f2d>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	ec43 2b10 	vmov	d0, r2, r3
 8002756:	f012 ff0b 	bl	8015570 <acos>
 800275a:	ec53 2b10 	vmov	r2, r3, d0
 800275e:	a19e      	add	r1, pc, #632	@ (adr r1, 80029d8 <HAL_TIM_PeriodElapsedCallback+0x4b8>)
 8002760:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002764:	f7fd fdb8 	bl	80002d8 <__aeabi_dsub>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	a39b      	add	r3, pc, #620	@ (adr r3, 80029e0 <HAL_TIM_PeriodElapsedCallback+0x4c0>)
 8002772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002776:	f7fe f891 	bl	800089c <__aeabi_ddiv>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f7fe fa59 	bl	8000c38 <__aeabi_d2f>
 8002786:	4603      	mov	r3, r0
 8002788:	4a9e      	ldr	r2, [pc, #632]	@ (8002a04 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 800278a:	6013      	str	r3, [r2, #0]
			imin = 0;
 800278c:	4b9e      	ldr	r3, [pc, #632]	@ (8002a08 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
		}
		if(delay_tr<0.01){
 8002792:	4b9c      	ldr	r3, [pc, #624]	@ (8002a04 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fd fefe 	bl	8000598 <__aeabi_f2d>
 800279c:	a392      	add	r3, pc, #584	@ (adr r3, 80029e8 <HAL_TIM_PeriodElapsedCallback+0x4c8>)
 800279e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a2:	f7fe f9c3 	bl	8000b2c <__aeabi_dcmplt>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d011      	beq.n	80027d0 <HAL_TIM_PeriodElapsedCallback+0x2b0>
		int delay_tr_freq = (int)(1/delay_tr);
 80027ac:	4b95      	ldr	r3, [pc, #596]	@ (8002a04 <HAL_TIM_PeriodElapsedCallback+0x4e4>)
 80027ae:	ed93 7a00 	vldr	s14, [r3]
 80027b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027be:	ee17 3a90 	vmov	r3, s15
 80027c2:	60fb      	str	r3, [r7, #12]
		Update_PWM_Frequency(&htim1, TIM_CHANNEL_1, delay_tr_freq); // Set TIM1 CH1 to freq that is delay tr and send to fpga
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	461a      	mov	r2, r3
 80027c8:	2100      	movs	r1, #0
 80027ca:	4890      	ldr	r0, [pc, #576]	@ (8002a0c <HAL_TIM_PeriodElapsedCallback+0x4ec>)
 80027cc:	f7ff fdd2 	bl	8002374 <Update_PWM_Frequency>
		}

		if(currentState == STATE_SOFT_START) RAMP(); // Adding to Vramp stepping voltage to create starting ramp
 80027d0:	4b8f      	ldr	r3, [pc, #572]	@ (8002a10 <HAL_TIM_PeriodElapsedCallback+0x4f0>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d101      	bne.n	80027dc <HAL_TIM_PeriodElapsedCallback+0x2bc>
 80027d8:	f000 f94a 	bl	8002a70 <RAMP>

		regulatorPI(&imax1, &Integral_I, output_voltage, Vramp, LIM_PEAK_POS, LIM_PEAK_NEG, Kp, Ti, Ts);
 80027dc:	4b8d      	ldr	r3, [pc, #564]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	ee07 3a90 	vmov	s15, r3
 80027e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e8:	4b8b      	ldr	r3, [pc, #556]	@ (8002a18 <HAL_TIM_PeriodElapsedCallback+0x4f8>)
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	ee07 3a10 	vmov	s14, r3
 80027f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80027f4:	4b89      	ldr	r3, [pc, #548]	@ (8002a1c <HAL_TIM_PeriodElapsedCallback+0x4fc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	ee06 3a90 	vmov	s13, r3
 80027fc:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002800:	4b87      	ldr	r3, [pc, #540]	@ (8002a20 <HAL_TIM_PeriodElapsedCallback+0x500>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	ee06 3a10 	vmov	s12, r3
 8002808:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 800280c:	4b85      	ldr	r3, [pc, #532]	@ (8002a24 <HAL_TIM_PeriodElapsedCallback+0x504>)
 800280e:	edd3 5a00 	vldr	s11, [r3]
 8002812:	4b85      	ldr	r3, [pc, #532]	@ (8002a28 <HAL_TIM_PeriodElapsedCallback+0x508>)
 8002814:	ed93 5a00 	vldr	s10, [r3]
 8002818:	ed9f 3a84 	vldr	s6, [pc, #528]	@ 8002a2c <HAL_TIM_PeriodElapsedCallback+0x50c>
 800281c:	eef0 2a45 	vmov.f32	s5, s10
 8002820:	eeb0 2a65 	vmov.f32	s4, s11
 8002824:	eef0 1a46 	vmov.f32	s3, s12
 8002828:	eeb0 1a66 	vmov.f32	s2, s13
 800282c:	eef0 0a47 	vmov.f32	s1, s14
 8002830:	eeb0 0a67 	vmov.f32	s0, s15
 8002834:	497e      	ldr	r1, [pc, #504]	@ (8002a30 <HAL_TIM_PeriodElapsedCallback+0x510>)
 8002836:	487f      	ldr	r0, [pc, #508]	@ (8002a34 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8002838:	f000 f970 	bl	8002b1c <regulatorPI>

		if(output_voltage>19000)
 800283c:	4b75      	ldr	r3, [pc, #468]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f644 2238 	movw	r2, #19000	@ 0x4a38
 8002844:	4293      	cmp	r3, r2
 8002846:	d933      	bls.n	80028b0 <HAL_TIM_PeriodElapsedCallback+0x390>
		{
		delay_hc = (2*C_CAP*output_voltage)/imax1;
 8002848:	4b72      	ldr	r3, [pc, #456]	@ (8002a14 <HAL_TIM_PeriodElapsedCallback+0x4f4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fe81 	bl	8000554 <__aeabi_ui2d>
 8002852:	a367      	add	r3, pc, #412	@ (adr r3, 80029f0 <HAL_TIM_PeriodElapsedCallback+0x4d0>)
 8002854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002858:	f7fd fef6 	bl	8000648 <__aeabi_dmul>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	4614      	mov	r4, r2
 8002862:	461d      	mov	r5, r3
 8002864:	4b73      	ldr	r3, [pc, #460]	@ (8002a34 <HAL_TIM_PeriodElapsedCallback+0x514>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fd fe73 	bl	8000554 <__aeabi_ui2d>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4620      	mov	r0, r4
 8002874:	4629      	mov	r1, r5
 8002876:	f7fe f811 	bl	800089c <__aeabi_ddiv>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4610      	mov	r0, r2
 8002880:	4619      	mov	r1, r3
 8002882:	f7fe f9d9 	bl	8000c38 <__aeabi_d2f>
 8002886:	4603      	mov	r3, r0
 8002888:	4a6b      	ldr	r2, [pc, #428]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x518>)
 800288a:	6013      	str	r3, [r2, #0]
		int delay_hc_freq = 1/delay_hc;
 800288c:	4b6a      	ldr	r3, [pc, #424]	@ (8002a38 <HAL_TIM_PeriodElapsedCallback+0x518>)
 800288e:	ed93 7a00 	vldr	s14, [r3]
 8002892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800289e:	ee17 3a90 	vmov	r3, s15
 80028a2:	60bb      	str	r3, [r7, #8]
		Update_PWM_Frequency(&htim8, TIM_CHANNEL_1, delay_hc_freq); // Set TIM8 CH1 o freq that is delay hc and send to fpga
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	461a      	mov	r2, r3
 80028a8:	2100      	movs	r1, #0
 80028aa:	4864      	ldr	r0, [pc, #400]	@ (8002a3c <HAL_TIM_PeriodElapsedCallback+0x51c>)
 80028ac:	f7ff fd62 	bl	8002374 <Update_PWM_Frequency>
		}

		imax2 = imax1 + imax2_sum; // imax2_sum signal from FPGA
 80028b0:	4b60      	ldr	r3, [pc, #384]	@ (8002a34 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b62      	ldr	r3, [pc, #392]	@ (8002a40 <HAL_TIM_PeriodElapsedCallback+0x520>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4413      	add	r3, r2
 80028ba:	4a62      	ldr	r2, [pc, #392]	@ (8002a44 <HAL_TIM_PeriodElapsedCallback+0x524>)
 80028bc:	6013      	str	r3, [r2, #0]
		// imax1,2 each for branches to make 180 degree shift
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref+((int)imax1*0.025)); // imax1  1.5V is 0A;  1A is 20mV; 1 bit is 0.8mV; imax[mA]*0.02 [V/A]/0.8[mV] = Value for DAC
 80028be:	4b62      	ldr	r3, [pc, #392]	@ (8002a48 <HAL_TIM_PeriodElapsedCallback+0x528>)
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fd fe56 	bl	8000574 <__aeabi_i2d>
 80028c8:	4604      	mov	r4, r0
 80028ca:	460d      	mov	r5, r1
 80028cc:	4b59      	ldr	r3, [pc, #356]	@ (8002a34 <HAL_TIM_PeriodElapsedCallback+0x514>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe4f 	bl	8000574 <__aeabi_i2d>
 80028d6:	a348      	add	r3, pc, #288	@ (adr r3, 80029f8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f7fd feb4 	bl	8000648 <__aeabi_dmul>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4620      	mov	r0, r4
 80028e6:	4629      	mov	r1, r5
 80028e8:	f7fd fcf8 	bl	80002dc <__adddf3>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	f7fe f980 	bl	8000bf8 <__aeabi_d2uiz>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2200      	movs	r2, #0
 80028fc:	2100      	movs	r1, #0
 80028fe:	4853      	ldr	r0, [pc, #332]	@ (8002a4c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002900:	f003 fb2c 	bl	8005f5c <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, current_sensor2_vref+((int)imax2*0.025)); // imax2
 8002904:	4b52      	ldr	r3, [pc, #328]	@ (8002a50 <HAL_TIM_PeriodElapsedCallback+0x530>)
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fd fe33 	bl	8000574 <__aeabi_i2d>
 800290e:	4604      	mov	r4, r0
 8002910:	460d      	mov	r5, r1
 8002912:	4b4c      	ldr	r3, [pc, #304]	@ (8002a44 <HAL_TIM_PeriodElapsedCallback+0x524>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fd fe2c 	bl	8000574 <__aeabi_i2d>
 800291c:	a336      	add	r3, pc, #216	@ (adr r3, 80029f8 <HAL_TIM_PeriodElapsedCallback+0x4d8>)
 800291e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002922:	f7fd fe91 	bl	8000648 <__aeabi_dmul>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4620      	mov	r0, r4
 800292c:	4629      	mov	r1, r5
 800292e:	f7fd fcd5 	bl	80002dc <__adddf3>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	f7fe f95d 	bl	8000bf8 <__aeabi_d2uiz>
 800293e:	4603      	mov	r3, r0
 8002940:	2200      	movs	r2, #0
 8002942:	2110      	movs	r1, #16
 8002944:	4841      	ldr	r0, [pc, #260]	@ (8002a4c <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8002946:	f003 fb09 	bl	8005f5c <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref+((int)imin*0.25)); // imin uzyto tutaj wzmacniacza 10x dla sygnalu z sensora pradu wiec ma wzmocnienie 200mv/A a nie 20mv/a
 800294a:	4b3f      	ldr	r3, [pc, #252]	@ (8002a48 <HAL_TIM_PeriodElapsedCallback+0x528>)
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7fd fe10 	bl	8000574 <__aeabi_i2d>
 8002954:	4604      	mov	r4, r0
 8002956:	460d      	mov	r5, r1
 8002958:	4b2b      	ldr	r3, [pc, #172]	@ (8002a08 <HAL_TIM_PeriodElapsedCallback+0x4e8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7fd fe09 	bl	8000574 <__aeabi_i2d>
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	4b3b      	ldr	r3, [pc, #236]	@ (8002a54 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8002968:	f7fd fe6e 	bl	8000648 <__aeabi_dmul>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4620      	mov	r0, r4
 8002972:	4629      	mov	r1, r5
 8002974:	f7fd fcb2 	bl	80002dc <__adddf3>
 8002978:	4602      	mov	r2, r0
 800297a:	460b      	mov	r3, r1
 800297c:	4610      	mov	r0, r2
 800297e:	4619      	mov	r1, r3
 8002980:	f7fe f93a 	bl	8000bf8 <__aeabi_d2uiz>
 8002984:	4603      	mov	r3, r0
 8002986:	2200      	movs	r2, #0
 8002988:	2100      	movs	r1, #0
 800298a:	4833      	ldr	r0, [pc, #204]	@ (8002a58 <HAL_TIM_PeriodElapsedCallback+0x538>)
 800298c:	f003 fae6 	bl	8005f5c <HAL_DAC_SetValue>

		}
		//HAL_TIM_Base_Stop_IT(&htim15);
	}

	if (htim->Instance == TIM6) // 5 sec period
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a31      	ldr	r2, [pc, #196]	@ (8002a5c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_TIM_PeriodElapsedCallback+0x47e>
		    {
		//if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
				//{
				FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
 800299a:	f000 f989 	bl	8002cb0 <FAN_Drive>
				//}
		    }


	if (htim->Instance == TIM7)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2f      	ldr	r2, [pc, #188]	@ (8002a60 <HAL_TIM_PeriodElapsedCallback+0x540>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d110      	bne.n	80029ca <HAL_TIM_PeriodElapsedCallback+0x4aa>
	    {
	        // Turn off OCD pins of currents sensors to reset current sensor 1us

	        HAL_GPIO_TogglePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin);
 80029a8:	2102      	movs	r1, #2
 80029aa:	482e      	ldr	r0, [pc, #184]	@ (8002a64 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80029ac:	f004 f8f4 	bl	8006b98 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin);
 80029b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029b4:	482c      	ldr	r0, [pc, #176]	@ (8002a68 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80029b6:	f004 f8ef 	bl	8006b98 <HAL_GPIO_TogglePin>
	        HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 80029ba:	2200      	movs	r2, #0
 80029bc:	2120      	movs	r1, #32
 80029be:	4829      	ldr	r0, [pc, #164]	@ (8002a64 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80029c0:	f004 f8d2 	bl	8006b68 <HAL_GPIO_WritePin>
	        // Stop the timer
	        HAL_TIM_Base_Stop_IT(&htim7);
 80029c4:	4829      	ldr	r0, [pc, #164]	@ (8002a6c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80029c6:	f006 ffa7 	bl	8009918 <HAL_TIM_Base_Stop_IT>
	    }


}
 80029ca:	bf00      	nop
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bdb0      	pop	{r4, r5, r7, pc}
 80029d2:	bf00      	nop
 80029d4:	f3af 8000 	nop.w
 80029d8:	54442d18 	.word	0x54442d18
 80029dc:	400921fb 	.word	0x400921fb
 80029e0:	78000000 	.word	0x78000000
 80029e4:	4190942a 	.word	0x4190942a
 80029e8:	47ae147b 	.word	0x47ae147b
 80029ec:	3f847ae1 	.word	0x3f847ae1
 80029f0:	e5c45270 	.word	0xe5c45270
 80029f4:	3e32e5d9 	.word	0x3e32e5d9
 80029f8:	9999999a 	.word	0x9999999a
 80029fc:	3f999999 	.word	0x3f999999
 8002a00:	20000004 	.word	0x20000004
 8002a04:	20000a54 	.word	0x20000a54
 8002a08:	20000a28 	.word	0x20000a28
 8002a0c:	20000774 	.word	0x20000774
 8002a10:	20000b4a 	.word	0x20000b4a
 8002a14:	20000a44 	.word	0x20000a44
 8002a18:	20000a48 	.word	0x20000a48
 8002a1c:	20000010 	.word	0x20000010
 8002a20:	20000b3c 	.word	0x20000b3c
 8002a24:	20000008 	.word	0x20000008
 8002a28:	2000000c 	.word	0x2000000c
 8002a2c:	3851b717 	.word	0x3851b717
 8002a30:	20000b40 	.word	0x20000b40
 8002a34:	20000a20 	.word	0x20000a20
 8002a38:	20000a58 	.word	0x20000a58
 8002a3c:	200008a4 	.word	0x200008a4
 8002a40:	20000a5c 	.word	0x20000a5c
 8002a44:	20000a24 	.word	0x20000a24
 8002a48:	20000a1c 	.word	0x20000a1c
 8002a4c:	2000068c 	.word	0x2000068c
 8002a50:	20000a1e 	.word	0x20000a1e
 8002a54:	3fd00000 	.word	0x3fd00000
 8002a58:	200006a0 	.word	0x200006a0
 8002a5c:	40001000 	.word	0x40001000
 8002a60:	40001400 	.word	0x40001400
 8002a64:	48001000 	.word	0x48001000
 8002a68:	48001400 	.word	0x48001400
 8002a6c:	20000858 	.word	0x20000858

08002a70 <RAMP>:

void RAMP()
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
	// RAMP Voltage to soft-start
				if((vref-output_voltage)>100)
 8002a74:	4b24      	ldr	r3, [pc, #144]	@ (8002b08 <RAMP+0x98>)
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4b24      	ldr	r3, [pc, #144]	@ (8002b0c <RAMP+0x9c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b64      	cmp	r3, #100	@ 0x64
 8002a82:	d917      	bls.n	8002ab4 <RAMP+0x44>
				{
					Vramp = output_voltage+200000*Ts; // 1s ramp 0 to 800V
 8002a84:	4b21      	ldr	r3, [pc, #132]	@ (8002b0c <RAMP+0x9c>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f7fd fd63 	bl	8000554 <__aeabi_ui2d>
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	4b1f      	ldr	r3, [pc, #124]	@ (8002b10 <RAMP+0xa0>)
 8002a94:	f7fd fc22 	bl	80002dc <__adddf3>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f7fe f8aa 	bl	8000bf8 <__aeabi_d2uiz>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	@ (8002b14 <RAMP+0xa4>)
 8002aaa:	801a      	strh	r2, [r3, #0]
					RAMP_FINISHED = 0;
 8002aac:	4b1a      	ldr	r3, [pc, #104]	@ (8002b18 <RAMP+0xa8>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
				{
					Vramp = 48000; // 48V
				}


}
 8002ab2:	e027      	b.n	8002b04 <RAMP+0x94>
				else if((vref-output_voltage)<-100)
 8002ab4:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <RAMP+0x98>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4b14      	ldr	r3, [pc, #80]	@ (8002b0c <RAMP+0x9c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	f113 0f65 	cmn.w	r3, #101	@ 0x65
 8002ac4:	d814      	bhi.n	8002af0 <RAMP+0x80>
					Vramp = output_voltage-200000*Ts;
 8002ac6:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <RAMP+0x9c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fd42 	bl	8000554 <__aeabi_ui2d>
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b10 <RAMP+0xa0>)
 8002ad6:	f7fd fbff 	bl	80002d8 <__aeabi_dsub>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	f7fe f889 	bl	8000bf8 <__aeabi_d2uiz>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	4b0a      	ldr	r3, [pc, #40]	@ (8002b14 <RAMP+0xa4>)
 8002aec:	801a      	strh	r2, [r3, #0]
}
 8002aee:	e009      	b.n	8002b04 <RAMP+0x94>
				else if(Vramp>50000)
 8002af0:	4b08      	ldr	r3, [pc, #32]	@ (8002b14 <RAMP+0xa4>)
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d903      	bls.n	8002b04 <RAMP+0x94>
					Vramp = 48000; // 48V
 8002afc:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <RAMP+0xa4>)
 8002afe:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002b02:	801a      	strh	r2, [r3, #0]
}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	20000a44 	.word	0x20000a44
 8002b10:	40240000 	.word	0x40240000
 8002b14:	20000a48 	.word	0x20000a48
 8002b18:	20000a50 	.word	0x20000a50

08002b1c <regulatorPI>:

void regulatorPI(uint32_t *out, uint32_t *integral, float in, float in_zad, float limp, float limn, float kp, float ti, float Ts1)
{
 8002b1c:	b5b0      	push	{r4, r5, r7, lr}
 8002b1e:	b08c      	sub	sp, #48	@ 0x30
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6278      	str	r0, [r7, #36]	@ 0x24
 8002b24:	6239      	str	r1, [r7, #32]
 8002b26:	ed87 0a07 	vstr	s0, [r7, #28]
 8002b2a:	edc7 0a06 	vstr	s1, [r7, #24]
 8002b2e:	ed87 1a05 	vstr	s2, [r7, #20]
 8002b32:	edc7 1a04 	vstr	s3, [r7, #16]
 8002b36:	ed87 2a03 	vstr	s4, [r7, #12]
 8002b3a:	edc7 2a02 	vstr	s5, [r7, #8]
 8002b3e:	ed87 3a01 	vstr	s6, [r7, #4]
	// Tustin transfrom of PI regulator s -> 2/T * (Z-1)/(Z+1)
    float delta;

    delta = in_zad - in; // error
 8002b42:	ed97 7a06 	vldr	s14, [r7, #24]
 8002b46:	edd7 7a07 	vldr	s15, [r7, #28]
 8002b4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    *integral = *integral + (delta + prev_delta) * (kp / ti) * Ts1 * 0.5 ; // I part
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fcfc 	bl	8000554 <__aeabi_ui2d>
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	460d      	mov	r5, r1
 8002b60:	4b51      	ldr	r3, [pc, #324]	@ (8002ca8 <regulatorPI+0x18c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	ee07 3a90 	vmov	s15, r3
 8002b68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b6c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002b70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b74:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b78:	edd7 6a02 	vldr	s13, [r7, #8]
 8002b7c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002b80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b84:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b8c:	ee17 0a90 	vmov	r0, s15
 8002b90:	f7fd fd02 	bl	8000598 <__aeabi_f2d>
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	4b44      	ldr	r3, [pc, #272]	@ (8002cac <regulatorPI+0x190>)
 8002b9a:	f7fd fd55 	bl	8000648 <__aeabi_dmul>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	f7fd fb99 	bl	80002dc <__adddf3>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f7fe f821 	bl	8000bf8 <__aeabi_d2uiz>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	601a      	str	r2, [r3, #0]
    prev_delta = delta;
 8002bbc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bc4:	ee17 2a90 	vmov	r2, s15
 8002bc8:	4b37      	ldr	r3, [pc, #220]	@ (8002ca8 <regulatorPI+0x18c>)
 8002bca:	601a      	str	r2, [r3, #0]
    if (*integral >= limp) // limit peak positive
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	ee07 3a90 	vmov	s15, r3
 8002bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bd8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002bdc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be4:	d807      	bhi.n	8002bf6 <regulatorPI+0xda>
    {
        *integral = limp;
 8002be6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bee:	ee17 2a90 	vmov	r2, s15
 8002bf2:	6a3b      	ldr	r3, [r7, #32]
 8002bf4:	601a      	str	r2, [r3, #0]
    }
    if (*integral <= limn)// limit peak negative
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	ee07 3a90 	vmov	s15, r3
 8002bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c02:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0e:	db07      	blt.n	8002c20 <regulatorPI+0x104>
    {
        *integral = limn;
 8002c10:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c18:	ee17 2a90 	vmov	r2, s15
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	601a      	str	r2, [r3, #0]
    }
    *out = (delta * kp + *integral); // Sum of P and I
 8002c20:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002c24:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c28:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	ee07 3a90 	vmov	s15, r3
 8002c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c40:	ee17 2a90 	vmov	r2, s15
 8002c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c46:	601a      	str	r2, [r3, #0]
    if (*out >= limp) // limit peak positive
 8002c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c54:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c60:	d807      	bhi.n	8002c72 <regulatorPI+0x156>
    {
        *out = limp;
 8002c62:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c6a:	ee17 2a90 	vmov	r2, s15
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c70:	601a      	str	r2, [r3, #0]
    }
    if (*out <= limn)// limit peak negative
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	ee07 3a90 	vmov	s15, r3
 8002c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8a:	da00      	bge.n	8002c8e <regulatorPI+0x172>
    {
        *out = limn;
    }
}
 8002c8c:	e007      	b.n	8002c9e <regulatorPI+0x182>
        *out = limn;
 8002c8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c96:	ee17 2a90 	vmov	r2, s15
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	601a      	str	r2, [r3, #0]
}
 8002c9e:	bf00      	nop
 8002ca0:	3730      	adds	r7, #48	@ 0x30
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000b44 	.word	0x20000b44
 8002cac:	3fe00000 	.word	0x3fe00000

08002cb0 <FAN_Drive>:

	return Low_passed_sample;

}
void FAN_Drive()
{ //@ToDo poprawic ogarnac zeby a intach bylo
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
		pcb_temp = (adc3_dma_buffer[3]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[3], pcb_temp)/4096)*3.3;
 8002cb6:	4b44      	ldr	r3, [pc, #272]	@ (8002dc8 <FAN_Drive+0x118>)
 8002cb8:	88db      	ldrh	r3, [r3, #6]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	da01      	bge.n	8002cce <FAN_Drive+0x1e>
 8002cca:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002cce:	131b      	asrs	r3, r3, #12
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b3e      	ldr	r3, [pc, #248]	@ (8002dcc <FAN_Drive+0x11c>)
 8002cd4:	601a      	str	r2, [r3, #0]
		heat_sink_temp = (adc3_dma_buffer[4]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[4], heat_sink_temp)/4096)*3.3;
 8002cd6:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc8 <FAN_Drive+0x118>)
 8002cd8:	891b      	ldrh	r3, [r3, #8]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	da01      	bge.n	8002cee <FAN_Drive+0x3e>
 8002cea:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002cee:	131b      	asrs	r3, r3, #12
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b37      	ldr	r3, [pc, #220]	@ (8002dd0 <FAN_Drive+0x120>)
 8002cf4:	601a      	str	r2, [r3, #0]

		uint32_t temperature = 20;
 8002cf6:	2314      	movs	r3, #20
 8002cf8:	603b      	str	r3, [r7, #0]

		pcb_temp = (pcb_temp-400)/20;
 8002cfa:	4b34      	ldr	r3, [pc, #208]	@ (8002dcc <FAN_Drive+0x11c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002d02:	4a34      	ldr	r2, [pc, #208]	@ (8002dd4 <FAN_Drive+0x124>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	4a30      	ldr	r2, [pc, #192]	@ (8002dcc <FAN_Drive+0x11c>)
 8002d0c:	6013      	str	r3, [r2, #0]
		heat_sink_temp = (heat_sink_temp-500)/10;
 8002d0e:	4b30      	ldr	r3, [pc, #192]	@ (8002dd0 <FAN_Drive+0x120>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002d16:	4a2f      	ldr	r2, [pc, #188]	@ (8002dd4 <FAN_Drive+0x124>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	08db      	lsrs	r3, r3, #3
 8002d1e:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd0 <FAN_Drive+0x120>)
 8002d20:	6013      	str	r3, [r2, #0]
		// Choose the higher of the two temperatures
		temperature = (pcb_temp > heat_sink_temp) ? pcb_temp : heat_sink_temp;
 8002d22:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <FAN_Drive+0x120>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4b29      	ldr	r3, [pc, #164]	@ (8002dcc <FAN_Drive+0x11c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	bf38      	it	cc
 8002d2e:	4613      	movcc	r3, r2
 8002d30:	603b      	str	r3, [r7, #0]
		// Apply a non-linear (exponential) scaling for the fan speed
		// This scales the temperature to a value between 0 and 1, then applies an exponential curve
		uint32_t normalized_temp = ((temperature - 20) *100)/ 80;  // Normalizing between 0 (20°C) and 1000 (100°C)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2264      	movs	r2, #100	@ 0x64
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8002d3e:	4a25      	ldr	r2, [pc, #148]	@ (8002dd4 <FAN_Drive+0x124>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	099b      	lsrs	r3, r3, #6
 8002d46:	607b      	str	r3, [r7, #4]
		if (normalized_temp > 100) normalized_temp = 100;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b64      	cmp	r3, #100	@ 0x64
 8002d4c:	d901      	bls.n	8002d52 <FAN_Drive+0xa2>
 8002d4e:	2364      	movs	r3, #100	@ 0x64
 8002d50:	607b      	str	r3, [r7, #4]
		if (normalized_temp < 0) normalized_temp = 0;

		duty_cycle = 20 + ((int)(pow(normalized_temp, 3) * 79))/1000000;  // Cubic curve for fan speed control
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fd fbfe 	bl	8000554 <__aeabi_ui2d>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8002db8 <FAN_Drive+0x108>
 8002d60:	ec43 2b10 	vmov	d0, r2, r3
 8002d64:	f012 fc38 	bl	80155d8 <pow>
 8002d68:	ec51 0b10 	vmov	r0, r1, d0
 8002d6c:	a314      	add	r3, pc, #80	@ (adr r3, 8002dc0 <FAN_Drive+0x110>)
 8002d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d72:	f7fd fc69 	bl	8000648 <__aeabi_dmul>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4610      	mov	r0, r2
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f7fd ff13 	bl	8000ba8 <__aeabi_d2iz>
 8002d82:	4603      	mov	r3, r0
 8002d84:	4a14      	ldr	r2, [pc, #80]	@ (8002dd8 <FAN_Drive+0x128>)
 8002d86:	fb82 1203 	smull	r1, r2, r2, r3
 8002d8a:	1492      	asrs	r2, r2, #18
 8002d8c:	17db      	asrs	r3, r3, #31
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	3314      	adds	r3, #20
 8002d92:	4a12      	ldr	r2, [pc, #72]	@ (8002ddc <FAN_Drive+0x12c>)
 8002d94:	6013      	str	r3, [r2, #0]

		// Enforce minimum and maximum duty cycles
		if (temperature < 20) {
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b13      	cmp	r3, #19
 8002d9a:	d803      	bhi.n	8002da4 <FAN_Drive+0xf4>
		        duty_cycle = 20;
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <FAN_Drive+0x12c>)
 8002d9e:	2214      	movs	r2, #20
 8002da0:	601a      	str	r2, [r3, #0]
		    	duty_cycle = 99;
		}

		//Set_PWM_DutyCycle(duty_cycle);

}
 8002da2:	e005      	b.n	8002db0 <FAN_Drive+0x100>
		} else if (temperature > 100) {
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2b64      	cmp	r3, #100	@ 0x64
 8002da8:	d902      	bls.n	8002db0 <FAN_Drive+0x100>
		    	duty_cycle = 99;
 8002daa:	4b0c      	ldr	r3, [pc, #48]	@ (8002ddc <FAN_Drive+0x12c>)
 8002dac:	2263      	movs	r2, #99	@ 0x63
 8002dae:	601a      	str	r2, [r3, #0]
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	00000000 	.word	0x00000000
 8002dbc:	40080000 	.word	0x40080000
 8002dc0:	00000000 	.word	0x00000000
 8002dc4:	4053c000 	.word	0x4053c000
 8002dc8:	20000a38 	.word	0x20000a38
 8002dcc:	20000a30 	.word	0x20000a30
 8002dd0:	20000a34 	.word	0x20000a34
 8002dd4:	cccccccd 	.word	0xcccccccd
 8002dd8:	431bde83 	.word	0x431bde83
 8002ddc:	20000018 	.word	0x20000018

08002de0 <SendUSBMessage>:



void SendUSBMessage(const char* message) {
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7fd fa69 	bl	80002c0 <strlen>
 8002dee:	4603      	mov	r3, r0
 8002df0:	81fb      	strh	r3, [r7, #14]
    if (len > 127) len = 127;  // Limit to buffer size
 8002df2:	89fb      	ldrh	r3, [r7, #14]
 8002df4:	2b7f      	cmp	r3, #127	@ 0x7f
 8002df6:	d901      	bls.n	8002dfc <SendUSBMessage+0x1c>
 8002df8:	237f      	movs	r3, #127	@ 0x7f
 8002dfa:	81fb      	strh	r3, [r7, #14]
    memcpy(USB_TX_Buffer, message, len);
 8002dfc:	89fb      	ldrh	r3, [r7, #14]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	480b      	ldr	r0, [pc, #44]	@ (8002e30 <SendUSBMessage+0x50>)
 8002e04:	f00e fc6d 	bl	80116e2 <memcpy>
    USB_TX_Buffer[len] = '\0';  // Ensure null-terminated string
 8002e08:	89fb      	ldrh	r3, [r7, #14]
 8002e0a:	4a09      	ldr	r2, [pc, #36]	@ (8002e30 <SendUSBMessage+0x50>)
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	54d1      	strb	r1, [r2, r3]
            break;
        }
      // HAL_Delay(10);  // Small delay before retrying
    } while (retry_count-- > 0);*/
    do {
            result = CDC_Transmit_FS((uint8_t*)message, len);
 8002e10:	89fb      	ldrh	r3, [r7, #14]
 8002e12:	4619      	mov	r1, r3
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f00c ffc9 	bl	800fdac <CDC_Transmit_FS>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	737b      	strb	r3, [r7, #13]
        } while (result == USBD_BUSY); // Retry while USB is busy
 8002e1e:	7b7b      	ldrb	r3, [r7, #13]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d0f5      	beq.n	8002e10 <SendUSBMessage+0x30>


}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000ab8 	.word	0x20000ab8

08002e34 <ParseUSBCommand>:

void ParseUSBCommand(void) {
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
	 if (dataReceivedFlag) {
 8002e38:	4ba6      	ldr	r3, [pc, #664]	@ (80030d4 <ParseUSBCommand+0x2a0>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f000 8146 	beq.w	80030d0 <ParseUSBCommand+0x29c>
	        if (strncmp((char*)USB_RX_Buffer, "SET_KP", 6) == 0) {
 8002e44:	2206      	movs	r2, #6
 8002e46:	49a4      	ldr	r1, [pc, #656]	@ (80030d8 <ParseUSBCommand+0x2a4>)
 8002e48:	48a4      	ldr	r0, [pc, #656]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002e4a:	f00e fbc0 	bl	80115ce <strncmp>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d108      	bne.n	8002e66 <ParseUSBCommand+0x32>
	            sscanf((char*)USB_RX_Buffer, "SET_KP %f", &Kp);
 8002e54:	4aa2      	ldr	r2, [pc, #648]	@ (80030e0 <ParseUSBCommand+0x2ac>)
 8002e56:	49a3      	ldr	r1, [pc, #652]	@ (80030e4 <ParseUSBCommand+0x2b0>)
 8002e58:	48a0      	ldr	r0, [pc, #640]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002e5a:	f00e fb41 	bl	80114e0 <siscanf>
	            SendUSBMessage("KP Updated\n");
 8002e5e:	48a2      	ldr	r0, [pc, #648]	@ (80030e8 <ParseUSBCommand+0x2b4>)
 8002e60:	f7ff ffbe 	bl	8002de0 <SendUSBMessage>
 8002e64:	e12c      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_Ti", 6) == 0) {
 8002e66:	2206      	movs	r2, #6
 8002e68:	49a0      	ldr	r1, [pc, #640]	@ (80030ec <ParseUSBCommand+0x2b8>)
 8002e6a:	489c      	ldr	r0, [pc, #624]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002e6c:	f00e fbaf 	bl	80115ce <strncmp>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d108      	bne.n	8002e88 <ParseUSBCommand+0x54>
	            sscanf((char*)USB_RX_Buffer, "SET_Ti %f", &Ti);
 8002e76:	4a9e      	ldr	r2, [pc, #632]	@ (80030f0 <ParseUSBCommand+0x2bc>)
 8002e78:	499e      	ldr	r1, [pc, #632]	@ (80030f4 <ParseUSBCommand+0x2c0>)
 8002e7a:	4898      	ldr	r0, [pc, #608]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002e7c:	f00e fb30 	bl	80114e0 <siscanf>
	            SendUSBMessage("Ti Updated\n");
 8002e80:	489d      	ldr	r0, [pc, #628]	@ (80030f8 <ParseUSBCommand+0x2c4>)
 8002e82:	f7ff ffad 	bl	8002de0 <SendUSBMessage>
 8002e86:	e11b      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_VREF", 8) == 0) {
 8002e88:	2208      	movs	r2, #8
 8002e8a:	499c      	ldr	r1, [pc, #624]	@ (80030fc <ParseUSBCommand+0x2c8>)
 8002e8c:	4893      	ldr	r0, [pc, #588]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002e8e:	f00e fb9e 	bl	80115ce <strncmp>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d108      	bne.n	8002eaa <ParseUSBCommand+0x76>
	            sscanf((char*)USB_RX_Buffer, "SET_VREF %hu", &vref);
 8002e98:	4a99      	ldr	r2, [pc, #612]	@ (8003100 <ParseUSBCommand+0x2cc>)
 8002e9a:	499a      	ldr	r1, [pc, #616]	@ (8003104 <ParseUSBCommand+0x2d0>)
 8002e9c:	488f      	ldr	r0, [pc, #572]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002e9e:	f00e fb1f 	bl	80114e0 <siscanf>
	            SendUSBMessage("vref Updated\n");
 8002ea2:	4899      	ldr	r0, [pc, #612]	@ (8003108 <ParseUSBCommand+0x2d4>)
 8002ea4:	f7ff ff9c 	bl	8002de0 <SendUSBMessage>
 8002ea8:	e10a      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS1_VREF", 12) == 0) {
 8002eaa:	220c      	movs	r2, #12
 8002eac:	4997      	ldr	r1, [pc, #604]	@ (800310c <ParseUSBCommand+0x2d8>)
 8002eae:	488b      	ldr	r0, [pc, #556]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002eb0:	f00e fb8d 	bl	80115ce <strncmp>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d108      	bne.n	8002ecc <ParseUSBCommand+0x98>
	            sscanf((char*)USB_RX_Buffer, "SET_CS1_VREF %d", &current_sensor1_vref);
 8002eba:	4a95      	ldr	r2, [pc, #596]	@ (8003110 <ParseUSBCommand+0x2dc>)
 8002ebc:	4995      	ldr	r1, [pc, #596]	@ (8003114 <ParseUSBCommand+0x2e0>)
 8002ebe:	4887      	ldr	r0, [pc, #540]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002ec0:	f00e fb0e 	bl	80114e0 <siscanf>
	            SendUSBMessage("current_sensor1_vref Updated\n");
 8002ec4:	4894      	ldr	r0, [pc, #592]	@ (8003118 <ParseUSBCommand+0x2e4>)
 8002ec6:	f7ff ff8b 	bl	8002de0 <SendUSBMessage>
 8002eca:	e0f9      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS2_VREF", 12) == 0) {
 8002ecc:	220c      	movs	r2, #12
 8002ece:	4993      	ldr	r1, [pc, #588]	@ (800311c <ParseUSBCommand+0x2e8>)
 8002ed0:	4882      	ldr	r0, [pc, #520]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002ed2:	f00e fb7c 	bl	80115ce <strncmp>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d108      	bne.n	8002eee <ParseUSBCommand+0xba>
	            sscanf((char*)USB_RX_Buffer, "SET_CS2_VREF %d", &current_sensor2_vref);
 8002edc:	4a90      	ldr	r2, [pc, #576]	@ (8003120 <ParseUSBCommand+0x2ec>)
 8002ede:	4991      	ldr	r1, [pc, #580]	@ (8003124 <ParseUSBCommand+0x2f0>)
 8002ee0:	487e      	ldr	r0, [pc, #504]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002ee2:	f00e fafd 	bl	80114e0 <siscanf>
	            SendUSBMessage("current_sensor2_vref Updated\n");
 8002ee6:	4890      	ldr	r0, [pc, #576]	@ (8003128 <ParseUSBCommand+0x2f4>)
 8002ee8:	f7ff ff7a 	bl	8002de0 <SendUSBMessage>
 8002eec:	e0e8      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_IMAX2_SUM", 13) == 0) {
 8002eee:	220d      	movs	r2, #13
 8002ef0:	498e      	ldr	r1, [pc, #568]	@ (800312c <ParseUSBCommand+0x2f8>)
 8002ef2:	487a      	ldr	r0, [pc, #488]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002ef4:	f00e fb6b 	bl	80115ce <strncmp>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d108      	bne.n	8002f10 <ParseUSBCommand+0xdc>
	            sscanf((char*)USB_RX_Buffer, "SET_IMAX2_SUM %d", &imax2_sum);
 8002efe:	4a8c      	ldr	r2, [pc, #560]	@ (8003130 <ParseUSBCommand+0x2fc>)
 8002f00:	498c      	ldr	r1, [pc, #560]	@ (8003134 <ParseUSBCommand+0x300>)
 8002f02:	4876      	ldr	r0, [pc, #472]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002f04:	f00e faec 	bl	80114e0 <siscanf>
	            SendUSBMessage("imax2_sum Updated\n");
 8002f08:	488b      	ldr	r0, [pc, #556]	@ (8003138 <ParseUSBCommand+0x304>)
 8002f0a:	f7ff ff69 	bl	8002de0 <SendUSBMessage>
 8002f0e:	e0d7      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_TR", 12) == 0) {
 8002f10:	220c      	movs	r2, #12
 8002f12:	498a      	ldr	r1, [pc, #552]	@ (800313c <ParseUSBCommand+0x308>)
 8002f14:	4871      	ldr	r0, [pc, #452]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002f16:	f00e fb5a 	bl	80115ce <strncmp>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d108      	bne.n	8002f32 <ParseUSBCommand+0xfe>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_TR %f", &delay_tr);
 8002f20:	4a87      	ldr	r2, [pc, #540]	@ (8003140 <ParseUSBCommand+0x30c>)
 8002f22:	4988      	ldr	r1, [pc, #544]	@ (8003144 <ParseUSBCommand+0x310>)
 8002f24:	486d      	ldr	r0, [pc, #436]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002f26:	f00e fadb 	bl	80114e0 <siscanf>
	            SendUSBMessage("delay_tr Updated\n");
 8002f2a:	4887      	ldr	r0, [pc, #540]	@ (8003148 <ParseUSBCommand+0x314>)
 8002f2c:	f7ff ff58 	bl	8002de0 <SendUSBMessage>
 8002f30:	e0c6      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_HC", 12) == 0) {
 8002f32:	220c      	movs	r2, #12
 8002f34:	4985      	ldr	r1, [pc, #532]	@ (800314c <ParseUSBCommand+0x318>)
 8002f36:	4869      	ldr	r0, [pc, #420]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002f38:	f00e fb49 	bl	80115ce <strncmp>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d108      	bne.n	8002f54 <ParseUSBCommand+0x120>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_HC %f", &delay_hc);
 8002f42:	4a83      	ldr	r2, [pc, #524]	@ (8003150 <ParseUSBCommand+0x31c>)
 8002f44:	4983      	ldr	r1, [pc, #524]	@ (8003154 <ParseUSBCommand+0x320>)
 8002f46:	4865      	ldr	r0, [pc, #404]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002f48:	f00e faca 	bl	80114e0 <siscanf>
	            SendUSBMessage("delay_hc Updated\n");
 8002f4c:	4882      	ldr	r0, [pc, #520]	@ (8003158 <ParseUSBCommand+0x324>)
 8002f4e:	f7ff ff47 	bl	8002de0 <SendUSBMessage>
 8002f52:	e0b5      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_KP", 6) == 0) {
 8002f54:	2206      	movs	r2, #6
 8002f56:	4981      	ldr	r1, [pc, #516]	@ (800315c <ParseUSBCommand+0x328>)
 8002f58:	4860      	ldr	r0, [pc, #384]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002f5a:	f00e fb38 	bl	80115ce <strncmp>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10e      	bne.n	8002f82 <ParseUSBCommand+0x14e>
	            sprintf((char*)USB_TX_Buffer, "KP = %f\n", Kp);
 8002f64:	4b5e      	ldr	r3, [pc, #376]	@ (80030e0 <ParseUSBCommand+0x2ac>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd fb15 	bl	8000598 <__aeabi_f2d>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	497b      	ldr	r1, [pc, #492]	@ (8003160 <ParseUSBCommand+0x32c>)
 8002f74:	487b      	ldr	r0, [pc, #492]	@ (8003164 <ParseUSBCommand+0x330>)
 8002f76:	f00e fa93 	bl	80114a0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8002f7a:	487a      	ldr	r0, [pc, #488]	@ (8003164 <ParseUSBCommand+0x330>)
 8002f7c:	f7ff ff30 	bl	8002de0 <SendUSBMessage>
 8002f80:	e09e      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_Ti", 6) == 0) {
 8002f82:	2206      	movs	r2, #6
 8002f84:	4978      	ldr	r1, [pc, #480]	@ (8003168 <ParseUSBCommand+0x334>)
 8002f86:	4855      	ldr	r0, [pc, #340]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002f88:	f00e fb21 	bl	80115ce <strncmp>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10e      	bne.n	8002fb0 <ParseUSBCommand+0x17c>
	            sprintf((char*)USB_TX_Buffer, "Ti = %f\n", Ti);
 8002f92:	4b57      	ldr	r3, [pc, #348]	@ (80030f0 <ParseUSBCommand+0x2bc>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fd fafe 	bl	8000598 <__aeabi_f2d>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4972      	ldr	r1, [pc, #456]	@ (800316c <ParseUSBCommand+0x338>)
 8002fa2:	4870      	ldr	r0, [pc, #448]	@ (8003164 <ParseUSBCommand+0x330>)
 8002fa4:	f00e fa7c 	bl	80114a0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8002fa8:	486e      	ldr	r0, [pc, #440]	@ (8003164 <ParseUSBCommand+0x330>)
 8002faa:	f7ff ff19 	bl	8002de0 <SendUSBMessage>
 8002fae:	e087      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_VREF", 8) == 0) {
 8002fb0:	2208      	movs	r2, #8
 8002fb2:	496f      	ldr	r1, [pc, #444]	@ (8003170 <ParseUSBCommand+0x33c>)
 8002fb4:	4849      	ldr	r0, [pc, #292]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002fb6:	f00e fb0a 	bl	80115ce <strncmp>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10a      	bne.n	8002fd6 <ParseUSBCommand+0x1a2>
	            sprintf((char*)USB_TX_Buffer, "vref = %hu\n", vref);
 8002fc0:	4b4f      	ldr	r3, [pc, #316]	@ (8003100 <ParseUSBCommand+0x2cc>)
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	496b      	ldr	r1, [pc, #428]	@ (8003174 <ParseUSBCommand+0x340>)
 8002fc8:	4866      	ldr	r0, [pc, #408]	@ (8003164 <ParseUSBCommand+0x330>)
 8002fca:	f00e fa69 	bl	80114a0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8002fce:	4865      	ldr	r0, [pc, #404]	@ (8003164 <ParseUSBCommand+0x330>)
 8002fd0:	f7ff ff06 	bl	8002de0 <SendUSBMessage>
 8002fd4:	e074      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS1_VREF", 12) == 0) {
 8002fd6:	220c      	movs	r2, #12
 8002fd8:	4967      	ldr	r1, [pc, #412]	@ (8003178 <ParseUSBCommand+0x344>)
 8002fda:	4840      	ldr	r0, [pc, #256]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8002fdc:	f00e faf7 	bl	80115ce <strncmp>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <ParseUSBCommand+0x1c8>
	            sprintf((char*)USB_TX_Buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 8002fe6:	4b4a      	ldr	r3, [pc, #296]	@ (8003110 <ParseUSBCommand+0x2dc>)
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	4963      	ldr	r1, [pc, #396]	@ (800317c <ParseUSBCommand+0x348>)
 8002fee:	485d      	ldr	r0, [pc, #372]	@ (8003164 <ParseUSBCommand+0x330>)
 8002ff0:	f00e fa56 	bl	80114a0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8002ff4:	485b      	ldr	r0, [pc, #364]	@ (8003164 <ParseUSBCommand+0x330>)
 8002ff6:	f7ff fef3 	bl	8002de0 <SendUSBMessage>
 8002ffa:	e061      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS2_VREF", 12) == 0) {
 8002ffc:	220c      	movs	r2, #12
 8002ffe:	4960      	ldr	r1, [pc, #384]	@ (8003180 <ParseUSBCommand+0x34c>)
 8003000:	4836      	ldr	r0, [pc, #216]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8003002:	f00e fae4 	bl	80115ce <strncmp>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <ParseUSBCommand+0x1ee>
	            sprintf((char*)USB_TX_Buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 800300c:	4b44      	ldr	r3, [pc, #272]	@ (8003120 <ParseUSBCommand+0x2ec>)
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	495c      	ldr	r1, [pc, #368]	@ (8003184 <ParseUSBCommand+0x350>)
 8003014:	4853      	ldr	r0, [pc, #332]	@ (8003164 <ParseUSBCommand+0x330>)
 8003016:	f00e fa43 	bl	80114a0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800301a:	4852      	ldr	r0, [pc, #328]	@ (8003164 <ParseUSBCommand+0x330>)
 800301c:	f7ff fee0 	bl	8002de0 <SendUSBMessage>
 8003020:	e04e      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_IMAX2_SUM", 13) == 0) {
 8003022:	220d      	movs	r2, #13
 8003024:	4958      	ldr	r1, [pc, #352]	@ (8003188 <ParseUSBCommand+0x354>)
 8003026:	482d      	ldr	r0, [pc, #180]	@ (80030dc <ParseUSBCommand+0x2a8>)
 8003028:	f00e fad1 	bl	80115ce <strncmp>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <ParseUSBCommand+0x214>
	            sprintf((char*)USB_TX_Buffer, "imax2_sum = %f\n", imax2_sum);
 8003032:	4b3f      	ldr	r3, [pc, #252]	@ (8003130 <ParseUSBCommand+0x2fc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	4954      	ldr	r1, [pc, #336]	@ (800318c <ParseUSBCommand+0x358>)
 800303a:	484a      	ldr	r0, [pc, #296]	@ (8003164 <ParseUSBCommand+0x330>)
 800303c:	f00e fa30 	bl	80114a0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003040:	4848      	ldr	r0, [pc, #288]	@ (8003164 <ParseUSBCommand+0x330>)
 8003042:	f7ff fecd 	bl	8002de0 <SendUSBMessage>
 8003046:	e03b      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_TR", 12) == 0) {
 8003048:	220c      	movs	r2, #12
 800304a:	4951      	ldr	r1, [pc, #324]	@ (8003190 <ParseUSBCommand+0x35c>)
 800304c:	4823      	ldr	r0, [pc, #140]	@ (80030dc <ParseUSBCommand+0x2a8>)
 800304e:	f00e fabe 	bl	80115ce <strncmp>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10e      	bne.n	8003076 <ParseUSBCommand+0x242>
	            sprintf((char*)USB_TX_Buffer, "delay_tr = %f\n", delay_tr);
 8003058:	4b39      	ldr	r3, [pc, #228]	@ (8003140 <ParseUSBCommand+0x30c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fd fa9b 	bl	8000598 <__aeabi_f2d>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	494b      	ldr	r1, [pc, #300]	@ (8003194 <ParseUSBCommand+0x360>)
 8003068:	483e      	ldr	r0, [pc, #248]	@ (8003164 <ParseUSBCommand+0x330>)
 800306a:	f00e fa19 	bl	80114a0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800306e:	483d      	ldr	r0, [pc, #244]	@ (8003164 <ParseUSBCommand+0x330>)
 8003070:	f7ff feb6 	bl	8002de0 <SendUSBMessage>
 8003074:	e024      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_HC", 12) == 0) {
 8003076:	220c      	movs	r2, #12
 8003078:	4947      	ldr	r1, [pc, #284]	@ (8003198 <ParseUSBCommand+0x364>)
 800307a:	4818      	ldr	r0, [pc, #96]	@ (80030dc <ParseUSBCommand+0x2a8>)
 800307c:	f00e faa7 	bl	80115ce <strncmp>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10e      	bne.n	80030a4 <ParseUSBCommand+0x270>
	            sprintf((char*)USB_TX_Buffer, "delay_hc = %f\n", delay_hc);
 8003086:	4b32      	ldr	r3, [pc, #200]	@ (8003150 <ParseUSBCommand+0x31c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7fd fa84 	bl	8000598 <__aeabi_f2d>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4941      	ldr	r1, [pc, #260]	@ (800319c <ParseUSBCommand+0x368>)
 8003096:	4833      	ldr	r0, [pc, #204]	@ (8003164 <ParseUSBCommand+0x330>)
 8003098:	f00e fa02 	bl	80114a0 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800309c:	4831      	ldr	r0, [pc, #196]	@ (8003164 <ParseUSBCommand+0x330>)
 800309e:	f7ff fe9f 	bl	8002de0 <SendUSBMessage>
 80030a2:	e00d      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "DISPLAY_ALL", 11) == 0) {
 80030a4:	220b      	movs	r2, #11
 80030a6:	493e      	ldr	r1, [pc, #248]	@ (80031a0 <ParseUSBCommand+0x36c>)
 80030a8:	480c      	ldr	r0, [pc, #48]	@ (80030dc <ParseUSBCommand+0x2a8>)
 80030aa:	f00e fa90 	bl	80115ce <strncmp>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d102      	bne.n	80030ba <ParseUSBCommand+0x286>
	            DisplayAllVariables();
 80030b4:	f000 f878 	bl	80031a8 <DisplayAllVariables>
 80030b8:	e002      	b.n	80030c0 <ParseUSBCommand+0x28c>

	        } else {
	            SendUSBMessage("Unknown Command\n");
 80030ba:	483a      	ldr	r0, [pc, #232]	@ (80031a4 <ParseUSBCommand+0x370>)
 80030bc:	f7ff fe90 	bl	8002de0 <SendUSBMessage>
	        }
	        memset(USB_RX_Buffer, 0, sizeof(USB_RX_Buffer));  // Clear buffer
 80030c0:	2240      	movs	r2, #64	@ 0x40
 80030c2:	2100      	movs	r1, #0
 80030c4:	4805      	ldr	r0, [pc, #20]	@ (80030dc <ParseUSBCommand+0x2a8>)
 80030c6:	f00e fa7a 	bl	80115be <memset>
	        dataReceivedFlag = 0;
 80030ca:	4b02      	ldr	r3, [pc, #8]	@ (80030d4 <ParseUSBCommand+0x2a0>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	701a      	strb	r2, [r3, #0]
	    }
}
 80030d0:	bf00      	nop
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20000b38 	.word	0x20000b38
 80030d8:	080169c0 	.word	0x080169c0
 80030dc:	20000a78 	.word	0x20000a78
 80030e0:	20000008 	.word	0x20000008
 80030e4:	080169c8 	.word	0x080169c8
 80030e8:	080169d4 	.word	0x080169d4
 80030ec:	080169e0 	.word	0x080169e0
 80030f0:	2000000c 	.word	0x2000000c
 80030f4:	080169e8 	.word	0x080169e8
 80030f8:	080169f4 	.word	0x080169f4
 80030fc:	08016a00 	.word	0x08016a00
 8003100:	20000000 	.word	0x20000000
 8003104:	08016a0c 	.word	0x08016a0c
 8003108:	08016a1c 	.word	0x08016a1c
 800310c:	08016a2c 	.word	0x08016a2c
 8003110:	20000a1c 	.word	0x20000a1c
 8003114:	08016a3c 	.word	0x08016a3c
 8003118:	08016a4c 	.word	0x08016a4c
 800311c:	08016a6c 	.word	0x08016a6c
 8003120:	20000a1e 	.word	0x20000a1e
 8003124:	08016a7c 	.word	0x08016a7c
 8003128:	08016a8c 	.word	0x08016a8c
 800312c:	08016aac 	.word	0x08016aac
 8003130:	20000a5c 	.word	0x20000a5c
 8003134:	08016abc 	.word	0x08016abc
 8003138:	08016ad0 	.word	0x08016ad0
 800313c:	08016ae4 	.word	0x08016ae4
 8003140:	20000a54 	.word	0x20000a54
 8003144:	08016af4 	.word	0x08016af4
 8003148:	08016b04 	.word	0x08016b04
 800314c:	08016b18 	.word	0x08016b18
 8003150:	20000a58 	.word	0x20000a58
 8003154:	08016b28 	.word	0x08016b28
 8003158:	08016b38 	.word	0x08016b38
 800315c:	08016b4c 	.word	0x08016b4c
 8003160:	08016b54 	.word	0x08016b54
 8003164:	20000ab8 	.word	0x20000ab8
 8003168:	08016b60 	.word	0x08016b60
 800316c:	08016b68 	.word	0x08016b68
 8003170:	08016b74 	.word	0x08016b74
 8003174:	08016b80 	.word	0x08016b80
 8003178:	08016b8c 	.word	0x08016b8c
 800317c:	08016b9c 	.word	0x08016b9c
 8003180:	08016bb8 	.word	0x08016bb8
 8003184:	08016bc8 	.word	0x08016bc8
 8003188:	08016be4 	.word	0x08016be4
 800318c:	08016bf4 	.word	0x08016bf4
 8003190:	08016c04 	.word	0x08016c04
 8003194:	08016c14 	.word	0x08016c14
 8003198:	08016c24 	.word	0x08016c24
 800319c:	08016c34 	.word	0x08016c34
 80031a0:	08016c44 	.word	0x08016c44
 80031a4:	08016c50 	.word	0x08016c50

080031a8 <DisplayAllVariables>:

void DisplayAllVariables(void) {
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b0a0      	sub	sp, #128	@ 0x80
 80031ac:	af00      	add	r7, sp, #0
    char buffer[128];

    sprintf(buffer, "KP = %f\n", Kp);
 80031ae:	4b5e      	ldr	r3, [pc, #376]	@ (8003328 <DisplayAllVariables+0x180>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd f9f0 	bl	8000598 <__aeabi_f2d>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4638      	mov	r0, r7
 80031be:	495b      	ldr	r1, [pc, #364]	@ (800332c <DisplayAllVariables+0x184>)
 80031c0:	f00e f96e 	bl	80114a0 <siprintf>
        SendUSBMessage(buffer);
 80031c4:	463b      	mov	r3, r7
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fe0a 	bl	8002de0 <SendUSBMessage>

        sprintf(buffer, "Ti = %f\n", Ti);
 80031cc:	4b58      	ldr	r3, [pc, #352]	@ (8003330 <DisplayAllVariables+0x188>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd f9e1 	bl	8000598 <__aeabi_f2d>
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	4638      	mov	r0, r7
 80031dc:	4955      	ldr	r1, [pc, #340]	@ (8003334 <DisplayAllVariables+0x18c>)
 80031de:	f00e f95f 	bl	80114a0 <siprintf>
        SendUSBMessage(buffer);
 80031e2:	463b      	mov	r3, r7
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fdfb 	bl	8002de0 <SendUSBMessage>

        sprintf(buffer, "vref = %hu\n", vref);
 80031ea:	4b53      	ldr	r3, [pc, #332]	@ (8003338 <DisplayAllVariables+0x190>)
 80031ec:	881b      	ldrh	r3, [r3, #0]
 80031ee:	461a      	mov	r2, r3
 80031f0:	463b      	mov	r3, r7
 80031f2:	4952      	ldr	r1, [pc, #328]	@ (800333c <DisplayAllVariables+0x194>)
 80031f4:	4618      	mov	r0, r3
 80031f6:	f00e f953 	bl	80114a0 <siprintf>
        SendUSBMessage(buffer);
 80031fa:	463b      	mov	r3, r7
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff fdef 	bl	8002de0 <SendUSBMessage>

        sprintf(buffer, "imax1 = %f\n", imax1);
 8003202:	4b4f      	ldr	r3, [pc, #316]	@ (8003340 <DisplayAllVariables+0x198>)
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	463b      	mov	r3, r7
 8003208:	494e      	ldr	r1, [pc, #312]	@ (8003344 <DisplayAllVariables+0x19c>)
 800320a:	4618      	mov	r0, r3
 800320c:	f00e f948 	bl	80114a0 <siprintf>
        SendUSBMessage(buffer);
 8003210:	463b      	mov	r3, r7
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff fde4 	bl	8002de0 <SendUSBMessage>

        sprintf(buffer, "imax2 = %f\n", imax2);
 8003218:	4b4b      	ldr	r3, [pc, #300]	@ (8003348 <DisplayAllVariables+0x1a0>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	463b      	mov	r3, r7
 800321e:	494b      	ldr	r1, [pc, #300]	@ (800334c <DisplayAllVariables+0x1a4>)
 8003220:	4618      	mov	r0, r3
 8003222:	f00e f93d 	bl	80114a0 <siprintf>
        SendUSBMessage(buffer);
 8003226:	463b      	mov	r3, r7
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fdd9 	bl	8002de0 <SendUSBMessage>

        sprintf(buffer, "imin = %f\n", imin);
 800322e:	4b48      	ldr	r3, [pc, #288]	@ (8003350 <DisplayAllVariables+0x1a8>)
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	463b      	mov	r3, r7
 8003234:	4947      	ldr	r1, [pc, #284]	@ (8003354 <DisplayAllVariables+0x1ac>)
 8003236:	4618      	mov	r0, r3
 8003238:	f00e f932 	bl	80114a0 <siprintf>
        SendUSBMessage(buffer);
 800323c:	463b      	mov	r3, r7
 800323e:	4618      	mov	r0, r3
 8003240:	f7ff fdce 	bl	8002de0 <SendUSBMessage>

        sprintf(buffer, "input_voltage = %f\n", input_voltage);
 8003244:	4b44      	ldr	r3, [pc, #272]	@ (8003358 <DisplayAllVariables+0x1b0>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	463b      	mov	r3, r7
 800324a:	4944      	ldr	r1, [pc, #272]	@ (800335c <DisplayAllVariables+0x1b4>)
 800324c:	4618      	mov	r0, r3
 800324e:	f00e f927 	bl	80114a0 <siprintf>
        SendUSBMessage(buffer);
 8003252:	463b      	mov	r3, r7
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fdc3 	bl	8002de0 <SendUSBMessage>

        sprintf(buffer, "output_voltage = %f\n", output_voltage);
 800325a:	4b41      	ldr	r3, [pc, #260]	@ (8003360 <DisplayAllVariables+0x1b8>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	463b      	mov	r3, r7
 8003260:	4940      	ldr	r1, [pc, #256]	@ (8003364 <DisplayAllVariables+0x1bc>)
 8003262:	4618      	mov	r0, r3
 8003264:	f00e f91c 	bl	80114a0 <siprintf>
        SendUSBMessage(buffer);
 8003268:	463b      	mov	r3, r7
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff fdb8 	bl	8002de0 <SendUSBMessage>

        sprintf(buffer, "pcb_temp = %f\n", pcb_temp);
 8003270:	4b3d      	ldr	r3, [pc, #244]	@ (8003368 <DisplayAllVariables+0x1c0>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	463b      	mov	r3, r7
 8003276:	493d      	ldr	r1, [pc, #244]	@ (800336c <DisplayAllVariables+0x1c4>)
 8003278:	4618      	mov	r0, r3
 800327a:	f00e f911 	bl	80114a0 <siprintf>
        SendUSBMessage(buffer);
 800327e:	463b      	mov	r3, r7
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff fdad 	bl	8002de0 <SendUSBMessage>

        sprintf(buffer, "heat_sink_temp = %f\n", heat_sink_temp);
 8003286:	4b3a      	ldr	r3, [pc, #232]	@ (8003370 <DisplayAllVariables+0x1c8>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	463b      	mov	r3, r7
 800328c:	4939      	ldr	r1, [pc, #228]	@ (8003374 <DisplayAllVariables+0x1cc>)
 800328e:	4618      	mov	r0, r3
 8003290:	f00e f906 	bl	80114a0 <siprintf>
        SendUSBMessage(buffer);
 8003294:	463b      	mov	r3, r7
 8003296:	4618      	mov	r0, r3
 8003298:	f7ff fda2 	bl	8002de0 <SendUSBMessage>

        sprintf(buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 800329c:	4b36      	ldr	r3, [pc, #216]	@ (8003378 <DisplayAllVariables+0x1d0>)
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	461a      	mov	r2, r3
 80032a2:	463b      	mov	r3, r7
 80032a4:	4935      	ldr	r1, [pc, #212]	@ (800337c <DisplayAllVariables+0x1d4>)
 80032a6:	4618      	mov	r0, r3
 80032a8:	f00e f8fa 	bl	80114a0 <siprintf>
        SendUSBMessage(buffer);
 80032ac:	463b      	mov	r3, r7
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fd96 	bl	8002de0 <SendUSBMessage>

        sprintf(buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 80032b4:	4b32      	ldr	r3, [pc, #200]	@ (8003380 <DisplayAllVariables+0x1d8>)
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	463b      	mov	r3, r7
 80032bc:	4931      	ldr	r1, [pc, #196]	@ (8003384 <DisplayAllVariables+0x1dc>)
 80032be:	4618      	mov	r0, r3
 80032c0:	f00e f8ee 	bl	80114a0 <siprintf>
        SendUSBMessage(buffer);
 80032c4:	463b      	mov	r3, r7
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fd8a 	bl	8002de0 <SendUSBMessage>

        sprintf(buffer, "imax2_sum = %f\n", imax2_sum);
 80032cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003388 <DisplayAllVariables+0x1e0>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	463b      	mov	r3, r7
 80032d2:	492e      	ldr	r1, [pc, #184]	@ (800338c <DisplayAllVariables+0x1e4>)
 80032d4:	4618      	mov	r0, r3
 80032d6:	f00e f8e3 	bl	80114a0 <siprintf>
        SendUSBMessage(buffer);
 80032da:	463b      	mov	r3, r7
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fd7f 	bl	8002de0 <SendUSBMessage>

        sprintf(buffer, "delay_tr = %f\n", delay_tr);
 80032e2:	4b2b      	ldr	r3, [pc, #172]	@ (8003390 <DisplayAllVariables+0x1e8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fd f956 	bl	8000598 <__aeabi_f2d>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4638      	mov	r0, r7
 80032f2:	4928      	ldr	r1, [pc, #160]	@ (8003394 <DisplayAllVariables+0x1ec>)
 80032f4:	f00e f8d4 	bl	80114a0 <siprintf>
        SendUSBMessage(buffer);
 80032f8:	463b      	mov	r3, r7
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7ff fd70 	bl	8002de0 <SendUSBMessage>

        sprintf(buffer, "delay_hc = %f\n", delay_hc);
 8003300:	4b25      	ldr	r3, [pc, #148]	@ (8003398 <DisplayAllVariables+0x1f0>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd f947 	bl	8000598 <__aeabi_f2d>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4638      	mov	r0, r7
 8003310:	4922      	ldr	r1, [pc, #136]	@ (800339c <DisplayAllVariables+0x1f4>)
 8003312:	f00e f8c5 	bl	80114a0 <siprintf>
        SendUSBMessage(buffer);
 8003316:	463b      	mov	r3, r7
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fd61 	bl	8002de0 <SendUSBMessage>
}
 800331e:	bf00      	nop
 8003320:	3780      	adds	r7, #128	@ 0x80
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000008 	.word	0x20000008
 800332c:	08016b54 	.word	0x08016b54
 8003330:	2000000c 	.word	0x2000000c
 8003334:	08016b68 	.word	0x08016b68
 8003338:	20000000 	.word	0x20000000
 800333c:	08016b80 	.word	0x08016b80
 8003340:	20000a20 	.word	0x20000a20
 8003344:	08016c64 	.word	0x08016c64
 8003348:	20000a24 	.word	0x20000a24
 800334c:	08016c70 	.word	0x08016c70
 8003350:	20000a28 	.word	0x20000a28
 8003354:	08016c7c 	.word	0x08016c7c
 8003358:	20000a2c 	.word	0x20000a2c
 800335c:	08016c88 	.word	0x08016c88
 8003360:	20000a44 	.word	0x20000a44
 8003364:	08016c9c 	.word	0x08016c9c
 8003368:	20000a30 	.word	0x20000a30
 800336c:	08016cb4 	.word	0x08016cb4
 8003370:	20000a34 	.word	0x20000a34
 8003374:	08016cc4 	.word	0x08016cc4
 8003378:	20000a1c 	.word	0x20000a1c
 800337c:	08016b9c 	.word	0x08016b9c
 8003380:	20000a1e 	.word	0x20000a1e
 8003384:	08016bc8 	.word	0x08016bc8
 8003388:	20000a5c 	.word	0x20000a5c
 800338c:	08016bf4 	.word	0x08016bf4
 8003390:	20000a54 	.word	0x20000a54
 8003394:	08016c14 	.word	0x08016c14
 8003398:	20000a58 	.word	0x20000a58
 800339c:	08016c34 	.word	0x08016c34

080033a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033a4:	b672      	cpsid	i
}
 80033a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80033a8:	bf00      	nop
 80033aa:	e7fd      	b.n	80033a8 <Error_Handler+0x8>

080033ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033b2:	4b0f      	ldr	r3, [pc, #60]	@ (80033f0 <HAL_MspInit+0x44>)
 80033b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b6:	4a0e      	ldr	r2, [pc, #56]	@ (80033f0 <HAL_MspInit+0x44>)
 80033b8:	f043 0301 	orr.w	r3, r3, #1
 80033bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80033be:	4b0c      	ldr	r3, [pc, #48]	@ (80033f0 <HAL_MspInit+0x44>)
 80033c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	607b      	str	r3, [r7, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ca:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <HAL_MspInit+0x44>)
 80033cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ce:	4a08      	ldr	r2, [pc, #32]	@ (80033f0 <HAL_MspInit+0x44>)
 80033d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80033d6:	4b06      	ldr	r3, [pc, #24]	@ (80033f0 <HAL_MspInit+0x44>)
 80033d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033de:	603b      	str	r3, [r7, #0]
 80033e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80033e2:	f005 f9cd 	bl	8008780 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40021000 	.word	0x40021000

080033f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b0a4      	sub	sp, #144	@ 0x90
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800340c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003410:	2254      	movs	r2, #84	@ 0x54
 8003412:	2100      	movs	r1, #0
 8003414:	4618      	mov	r0, r3
 8003416:	f00e f8d2 	bl	80115be <memset>
  if(hadc->Instance==ADC1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003422:	d11c      	bne.n	800345e <HAL_ADC_MspInit+0x6a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003424:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003428:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800342a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800342e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003430:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003434:	4618      	mov	r0, r3
 8003436:	f005 fee1 	bl	80091fc <HAL_RCCEx_PeriphCLKConfig>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003440:	f7ff ffae 	bl	80033a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003444:	4b85      	ldr	r3, [pc, #532]	@ (800365c <HAL_ADC_MspInit+0x268>)
 8003446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003448:	4a84      	ldr	r2, [pc, #528]	@ (800365c <HAL_ADC_MspInit+0x268>)
 800344a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800344e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003450:	4b82      	ldr	r3, [pc, #520]	@ (800365c <HAL_ADC_MspInit+0x268>)
 8003452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003458:	627b      	str	r3, [r7, #36]	@ 0x24
 800345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 800345c:	e183      	b.n	8003766 <HAL_ADC_MspInit+0x372>
  else if(hadc->Instance==ADC3)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a7f      	ldr	r2, [pc, #508]	@ (8003660 <HAL_ADC_MspInit+0x26c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	f040 8087 	bne.w	8003578 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800346a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800346e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003470:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003474:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003476:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800347a:	4618      	mov	r0, r3
 800347c:	f005 febe 	bl	80091fc <HAL_RCCEx_PeriphCLKConfig>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_ADC_MspInit+0x96>
      Error_Handler();
 8003486:	f7ff ff8b 	bl	80033a0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800348a:	4b76      	ldr	r3, [pc, #472]	@ (8003664 <HAL_ADC_MspInit+0x270>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3301      	adds	r3, #1
 8003490:	4a74      	ldr	r2, [pc, #464]	@ (8003664 <HAL_ADC_MspInit+0x270>)
 8003492:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003494:	4b73      	ldr	r3, [pc, #460]	@ (8003664 <HAL_ADC_MspInit+0x270>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d10b      	bne.n	80034b4 <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800349c:	4b6f      	ldr	r3, [pc, #444]	@ (800365c <HAL_ADC_MspInit+0x268>)
 800349e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a0:	4a6e      	ldr	r2, [pc, #440]	@ (800365c <HAL_ADC_MspInit+0x268>)
 80034a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034a8:	4b6c      	ldr	r3, [pc, #432]	@ (800365c <HAL_ADC_MspInit+0x268>)
 80034aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034b0:	623b      	str	r3, [r7, #32]
 80034b2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034b4:	4b69      	ldr	r3, [pc, #420]	@ (800365c <HAL_ADC_MspInit+0x268>)
 80034b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b8:	4a68      	ldr	r2, [pc, #416]	@ (800365c <HAL_ADC_MspInit+0x268>)
 80034ba:	f043 0302 	orr.w	r3, r3, #2
 80034be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034c0:	4b66      	ldr	r3, [pc, #408]	@ (800365c <HAL_ADC_MspInit+0x268>)
 80034c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80034cc:	4b63      	ldr	r3, [pc, #396]	@ (800365c <HAL_ADC_MspInit+0x268>)
 80034ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034d0:	4a62      	ldr	r2, [pc, #392]	@ (800365c <HAL_ADC_MspInit+0x268>)
 80034d2:	f043 0310 	orr.w	r3, r3, #16
 80034d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034d8:	4b60      	ldr	r3, [pc, #384]	@ (800365c <HAL_ADC_MspInit+0x268>)
 80034da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034dc:	f003 0310 	and.w	r3, r3, #16
 80034e0:	61bb      	str	r3, [r7, #24]
 80034e2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS_VREF_1_Pin|HEATSINK_TEMP_Pin;
 80034e4:	f242 0302 	movw	r3, #8194	@ 0x2002
 80034e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ea:	2303      	movs	r3, #3
 80034ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80034fa:	4619      	mov	r1, r3
 80034fc:	485a      	ldr	r0, [pc, #360]	@ (8003668 <HAL_ADC_MspInit+0x274>)
 80034fe:	f003 f999 	bl	8006834 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PCB_TEMP_Pin|CS_VREF_2_Pin|INPUT_V_ADC_Pin;
 8003502:	f44f 530a 	mov.w	r3, #8832	@ 0x2280
 8003506:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003508:	2303      	movs	r3, #3
 800350a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350e:	2300      	movs	r3, #0
 8003510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003514:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003518:	4619      	mov	r1, r3
 800351a:	4854      	ldr	r0, [pc, #336]	@ (800366c <HAL_ADC_MspInit+0x278>)
 800351c:	f003 f98a 	bl	8006834 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel1;
 8003520:	4b53      	ldr	r3, [pc, #332]	@ (8003670 <HAL_ADC_MspInit+0x27c>)
 8003522:	4a54      	ldr	r2, [pc, #336]	@ (8003674 <HAL_ADC_MspInit+0x280>)
 8003524:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003526:	4b52      	ldr	r3, [pc, #328]	@ (8003670 <HAL_ADC_MspInit+0x27c>)
 8003528:	2225      	movs	r2, #37	@ 0x25
 800352a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800352c:	4b50      	ldr	r3, [pc, #320]	@ (8003670 <HAL_ADC_MspInit+0x27c>)
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003532:	4b4f      	ldr	r3, [pc, #316]	@ (8003670 <HAL_ADC_MspInit+0x27c>)
 8003534:	2200      	movs	r2, #0
 8003536:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003538:	4b4d      	ldr	r3, [pc, #308]	@ (8003670 <HAL_ADC_MspInit+0x27c>)
 800353a:	2280      	movs	r2, #128	@ 0x80
 800353c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800353e:	4b4c      	ldr	r3, [pc, #304]	@ (8003670 <HAL_ADC_MspInit+0x27c>)
 8003540:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003544:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003546:	4b4a      	ldr	r3, [pc, #296]	@ (8003670 <HAL_ADC_MspInit+0x27c>)
 8003548:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800354c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800354e:	4b48      	ldr	r3, [pc, #288]	@ (8003670 <HAL_ADC_MspInit+0x27c>)
 8003550:	2220      	movs	r2, #32
 8003552:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003554:	4b46      	ldr	r3, [pc, #280]	@ (8003670 <HAL_ADC_MspInit+0x27c>)
 8003556:	2200      	movs	r2, #0
 8003558:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800355a:	4845      	ldr	r0, [pc, #276]	@ (8003670 <HAL_ADC_MspInit+0x27c>)
 800355c:	f002 fef8 	bl	8006350 <HAL_DMA_Init>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_ADC_MspInit+0x176>
      Error_Handler();
 8003566:	f7ff ff1b 	bl	80033a0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a40      	ldr	r2, [pc, #256]	@ (8003670 <HAL_ADC_MspInit+0x27c>)
 800356e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003570:	4a3f      	ldr	r2, [pc, #252]	@ (8003670 <HAL_ADC_MspInit+0x27c>)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003576:	e0f6      	b.n	8003766 <HAL_ADC_MspInit+0x372>
  else if(hadc->Instance==ADC4)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a3e      	ldr	r2, [pc, #248]	@ (8003678 <HAL_ADC_MspInit+0x284>)
 800357e:	4293      	cmp	r3, r2
 8003580:	f040 8080 	bne.w	8003684 <HAL_ADC_MspInit+0x290>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003584:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003588:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 800358a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800358e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003590:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003594:	4618      	mov	r0, r3
 8003596:	f005 fe31 	bl	80091fc <HAL_RCCEx_PeriphCLKConfig>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 80035a0:	f7ff fefe 	bl	80033a0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80035a4:	4b2f      	ldr	r3, [pc, #188]	@ (8003664 <HAL_ADC_MspInit+0x270>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3301      	adds	r3, #1
 80035aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003664 <HAL_ADC_MspInit+0x270>)
 80035ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80035ae:	4b2d      	ldr	r3, [pc, #180]	@ (8003664 <HAL_ADC_MspInit+0x270>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d10b      	bne.n	80035ce <HAL_ADC_MspInit+0x1da>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80035b6:	4b29      	ldr	r3, [pc, #164]	@ (800365c <HAL_ADC_MspInit+0x268>)
 80035b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ba:	4a28      	ldr	r2, [pc, #160]	@ (800365c <HAL_ADC_MspInit+0x268>)
 80035bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035c2:	4b26      	ldr	r3, [pc, #152]	@ (800365c <HAL_ADC_MspInit+0x268>)
 80035c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ca:	617b      	str	r3, [r7, #20]
 80035cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80035ce:	4b23      	ldr	r3, [pc, #140]	@ (800365c <HAL_ADC_MspInit+0x268>)
 80035d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d2:	4a22      	ldr	r2, [pc, #136]	@ (800365c <HAL_ADC_MspInit+0x268>)
 80035d4:	f043 0310 	orr.w	r3, r3, #16
 80035d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035da:	4b20      	ldr	r3, [pc, #128]	@ (800365c <HAL_ADC_MspInit+0x268>)
 80035dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035de:	f003 0310 	and.w	r3, r3, #16
 80035e2:	613b      	str	r3, [r7, #16]
 80035e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT_V_ADC_Pin;
 80035e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80035ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035ec:	2303      	movs	r3, #3
 80035ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(OUTPUT_V_ADC_GPIO_Port, &GPIO_InitStruct);
 80035f8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80035fc:	4619      	mov	r1, r3
 80035fe:	481b      	ldr	r0, [pc, #108]	@ (800366c <HAL_ADC_MspInit+0x278>)
 8003600:	f003 f918 	bl	8006834 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel2;
 8003604:	4b1d      	ldr	r3, [pc, #116]	@ (800367c <HAL_ADC_MspInit+0x288>)
 8003606:	4a1e      	ldr	r2, [pc, #120]	@ (8003680 <HAL_ADC_MspInit+0x28c>)
 8003608:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800360a:	4b1c      	ldr	r3, [pc, #112]	@ (800367c <HAL_ADC_MspInit+0x288>)
 800360c:	2226      	movs	r2, #38	@ 0x26
 800360e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003610:	4b1a      	ldr	r3, [pc, #104]	@ (800367c <HAL_ADC_MspInit+0x288>)
 8003612:	2200      	movs	r2, #0
 8003614:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003616:	4b19      	ldr	r3, [pc, #100]	@ (800367c <HAL_ADC_MspInit+0x288>)
 8003618:	2200      	movs	r2, #0
 800361a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800361c:	4b17      	ldr	r3, [pc, #92]	@ (800367c <HAL_ADC_MspInit+0x288>)
 800361e:	2280      	movs	r2, #128	@ 0x80
 8003620:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003622:	4b16      	ldr	r3, [pc, #88]	@ (800367c <HAL_ADC_MspInit+0x288>)
 8003624:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003628:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800362a:	4b14      	ldr	r3, [pc, #80]	@ (800367c <HAL_ADC_MspInit+0x288>)
 800362c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003630:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8003632:	4b12      	ldr	r3, [pc, #72]	@ (800367c <HAL_ADC_MspInit+0x288>)
 8003634:	2220      	movs	r2, #32
 8003636:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8003638:	4b10      	ldr	r3, [pc, #64]	@ (800367c <HAL_ADC_MspInit+0x288>)
 800363a:	2200      	movs	r2, #0
 800363c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800363e:	480f      	ldr	r0, [pc, #60]	@ (800367c <HAL_ADC_MspInit+0x288>)
 8003640:	f002 fe86 	bl	8006350 <HAL_DMA_Init>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_ADC_MspInit+0x25a>
      Error_Handler();
 800364a:	f7ff fea9 	bl	80033a0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a0a      	ldr	r2, [pc, #40]	@ (800367c <HAL_ADC_MspInit+0x288>)
 8003652:	655a      	str	r2, [r3, #84]	@ 0x54
 8003654:	4a09      	ldr	r2, [pc, #36]	@ (800367c <HAL_ADC_MspInit+0x288>)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800365a:	e084      	b.n	8003766 <HAL_ADC_MspInit+0x372>
 800365c:	40021000 	.word	0x40021000
 8003660:	50000400 	.word	0x50000400
 8003664:	20000b50 	.word	0x20000b50
 8003668:	48000400 	.word	0x48000400
 800366c:	48001000 	.word	0x48001000
 8003670:	20000544 	.word	0x20000544
 8003674:	40020008 	.word	0x40020008
 8003678:	50000500 	.word	0x50000500
 800367c:	200005a4 	.word	0x200005a4
 8003680:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC5)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a39      	ldr	r2, [pc, #228]	@ (8003770 <HAL_ADC_MspInit+0x37c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d16b      	bne.n	8003766 <HAL_ADC_MspInit+0x372>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800368e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003692:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003694:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003698:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800369a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800369e:	4618      	mov	r0, r3
 80036a0:	f005 fdac 	bl	80091fc <HAL_RCCEx_PeriphCLKConfig>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_ADC_MspInit+0x2ba>
      Error_Handler();
 80036aa:	f7ff fe79 	bl	80033a0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80036ae:	4b31      	ldr	r3, [pc, #196]	@ (8003774 <HAL_ADC_MspInit+0x380>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3301      	adds	r3, #1
 80036b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003774 <HAL_ADC_MspInit+0x380>)
 80036b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80036b8:	4b2e      	ldr	r3, [pc, #184]	@ (8003774 <HAL_ADC_MspInit+0x380>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10b      	bne.n	80036d8 <HAL_ADC_MspInit+0x2e4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80036c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003778 <HAL_ADC_MspInit+0x384>)
 80036c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c4:	4a2c      	ldr	r2, [pc, #176]	@ (8003778 <HAL_ADC_MspInit+0x384>)
 80036c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003778 <HAL_ADC_MspInit+0x384>)
 80036ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d8:	4b27      	ldr	r3, [pc, #156]	@ (8003778 <HAL_ADC_MspInit+0x384>)
 80036da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036dc:	4a26      	ldr	r2, [pc, #152]	@ (8003778 <HAL_ADC_MspInit+0x384>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036e4:	4b24      	ldr	r3, [pc, #144]	@ (8003778 <HAL_ADC_MspInit+0x384>)
 80036e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	60bb      	str	r3, [r7, #8]
 80036ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMAX2_SUM_Pin;
 80036f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036f6:	2303      	movs	r3, #3
 80036f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(IMAX2_SUM_GPIO_Port, &GPIO_InitStruct);
 8003702:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003706:	4619      	mov	r1, r3
 8003708:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800370c:	f003 f892 	bl	8006834 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel3;
 8003710:	4b1a      	ldr	r3, [pc, #104]	@ (800377c <HAL_ADC_MspInit+0x388>)
 8003712:	4a1b      	ldr	r2, [pc, #108]	@ (8003780 <HAL_ADC_MspInit+0x38c>)
 8003714:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003716:	4b19      	ldr	r3, [pc, #100]	@ (800377c <HAL_ADC_MspInit+0x388>)
 8003718:	2227      	movs	r2, #39	@ 0x27
 800371a:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800371c:	4b17      	ldr	r3, [pc, #92]	@ (800377c <HAL_ADC_MspInit+0x388>)
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003722:	4b16      	ldr	r3, [pc, #88]	@ (800377c <HAL_ADC_MspInit+0x388>)
 8003724:	2200      	movs	r2, #0
 8003726:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003728:	4b14      	ldr	r3, [pc, #80]	@ (800377c <HAL_ADC_MspInit+0x388>)
 800372a:	2280      	movs	r2, #128	@ 0x80
 800372c:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800372e:	4b13      	ldr	r3, [pc, #76]	@ (800377c <HAL_ADC_MspInit+0x388>)
 8003730:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003734:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003736:	4b11      	ldr	r3, [pc, #68]	@ (800377c <HAL_ADC_MspInit+0x388>)
 8003738:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800373c:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 800373e:	4b0f      	ldr	r3, [pc, #60]	@ (800377c <HAL_ADC_MspInit+0x388>)
 8003740:	2220      	movs	r2, #32
 8003742:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003744:	4b0d      	ldr	r3, [pc, #52]	@ (800377c <HAL_ADC_MspInit+0x388>)
 8003746:	2200      	movs	r2, #0
 8003748:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800374a:	480c      	ldr	r0, [pc, #48]	@ (800377c <HAL_ADC_MspInit+0x388>)
 800374c:	f002 fe00 	bl	8006350 <HAL_DMA_Init>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_ADC_MspInit+0x366>
      Error_Handler();
 8003756:	f7ff fe23 	bl	80033a0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a07      	ldr	r2, [pc, #28]	@ (800377c <HAL_ADC_MspInit+0x388>)
 800375e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003760:	4a06      	ldr	r2, [pc, #24]	@ (800377c <HAL_ADC_MspInit+0x388>)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003766:	bf00      	nop
 8003768:	3790      	adds	r7, #144	@ 0x90
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	50000600 	.word	0x50000600
 8003774:	20000b50 	.word	0x20000b50
 8003778:	40021000 	.word	0x40021000
 800377c:	20000604 	.word	0x20000604
 8003780:	40020030 	.word	0x40020030

08003784 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0d      	ldr	r2, [pc, #52]	@ (80037c8 <HAL_CORDIC_MspInit+0x44>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d113      	bne.n	80037be <HAL_CORDIC_MspInit+0x3a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003796:	4b0d      	ldr	r3, [pc, #52]	@ (80037cc <HAL_CORDIC_MspInit+0x48>)
 8003798:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800379a:	4a0c      	ldr	r2, [pc, #48]	@ (80037cc <HAL_CORDIC_MspInit+0x48>)
 800379c:	f043 0308 	orr.w	r3, r3, #8
 80037a0:	6493      	str	r3, [r2, #72]	@ 0x48
 80037a2:	4b0a      	ldr	r3, [pc, #40]	@ (80037cc <HAL_CORDIC_MspInit+0x48>)
 80037a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	68fb      	ldr	r3, [r7, #12]
    /* CORDIC interrupt Init */
    HAL_NVIC_SetPriority(CORDIC_IRQn, 0, 0);
 80037ae:	2200      	movs	r2, #0
 80037b0:	2100      	movs	r1, #0
 80037b2:	2064      	movs	r0, #100	@ 0x64
 80037b4:	f002 fab9 	bl	8005d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CORDIC_IRQn);
 80037b8:	2064      	movs	r0, #100	@ 0x64
 80037ba:	f002 fad0 	bl	8005d5e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 80037be:	bf00      	nop
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40020c00 	.word	0x40020c00
 80037cc:	40021000 	.word	0x40021000

080037d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08c      	sub	sp, #48	@ 0x30
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d8:	f107 031c 	add.w	r3, r7, #28
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	609a      	str	r2, [r3, #8]
 80037e4:	60da      	str	r2, [r3, #12]
 80037e6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a5b      	ldr	r2, [pc, #364]	@ (800395c <HAL_DAC_MspInit+0x18c>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d159      	bne.n	80038a6 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80037f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003960 <HAL_DAC_MspInit+0x190>)
 80037f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f6:	4a5a      	ldr	r2, [pc, #360]	@ (8003960 <HAL_DAC_MspInit+0x190>)
 80037f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037fe:	4b58      	ldr	r3, [pc, #352]	@ (8003960 <HAL_DAC_MspInit+0x190>)
 8003800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800380a:	4b55      	ldr	r3, [pc, #340]	@ (8003960 <HAL_DAC_MspInit+0x190>)
 800380c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800380e:	4a54      	ldr	r2, [pc, #336]	@ (8003960 <HAL_DAC_MspInit+0x190>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003816:	4b52      	ldr	r3, [pc, #328]	@ (8003960 <HAL_DAC_MspInit+0x190>)
 8003818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = IMAX_Pin|IMAX2_Pin;
 8003822:	2330      	movs	r3, #48	@ 0x30
 8003824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003826:	2303      	movs	r3, #3
 8003828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382a:	2300      	movs	r3, #0
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382e:	f107 031c 	add.w	r3, r7, #28
 8003832:	4619      	mov	r1, r3
 8003834:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003838:	f002 fffc 	bl	8006834 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 800383c:	4b49      	ldr	r3, [pc, #292]	@ (8003964 <HAL_DAC_MspInit+0x194>)
 800383e:	4a4a      	ldr	r2, [pc, #296]	@ (8003968 <HAL_DAC_MspInit+0x198>)
 8003840:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003842:	4b48      	ldr	r3, [pc, #288]	@ (8003964 <HAL_DAC_MspInit+0x194>)
 8003844:	2206      	movs	r2, #6
 8003846:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003848:	4b46      	ldr	r3, [pc, #280]	@ (8003964 <HAL_DAC_MspInit+0x194>)
 800384a:	2210      	movs	r2, #16
 800384c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800384e:	4b45      	ldr	r3, [pc, #276]	@ (8003964 <HAL_DAC_MspInit+0x194>)
 8003850:	2200      	movs	r2, #0
 8003852:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003854:	4b43      	ldr	r3, [pc, #268]	@ (8003964 <HAL_DAC_MspInit+0x194>)
 8003856:	2280      	movs	r2, #128	@ 0x80
 8003858:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800385a:	4b42      	ldr	r3, [pc, #264]	@ (8003964 <HAL_DAC_MspInit+0x194>)
 800385c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003860:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003862:	4b40      	ldr	r3, [pc, #256]	@ (8003964 <HAL_DAC_MspInit+0x194>)
 8003864:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003868:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800386a:	4b3e      	ldr	r3, [pc, #248]	@ (8003964 <HAL_DAC_MspInit+0x194>)
 800386c:	2220      	movs	r2, #32
 800386e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003870:	4b3c      	ldr	r3, [pc, #240]	@ (8003964 <HAL_DAC_MspInit+0x194>)
 8003872:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003876:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003878:	483a      	ldr	r0, [pc, #232]	@ (8003964 <HAL_DAC_MspInit+0x194>)
 800387a:	f002 fd69 	bl	8006350 <HAL_DMA_Init>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8003884:	f7ff fd8c 	bl	80033a0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a36      	ldr	r2, [pc, #216]	@ (8003964 <HAL_DAC_MspInit+0x194>)
 800388c:	609a      	str	r2, [r3, #8]
 800388e:	4a35      	ldr	r2, [pc, #212]	@ (8003964 <HAL_DAC_MspInit+0x194>)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003894:	2200      	movs	r2, #0
 8003896:	2100      	movs	r1, #0
 8003898:	2036      	movs	r0, #54	@ 0x36
 800389a:	f002 fa46 	bl	8005d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800389e:	2036      	movs	r0, #54	@ 0x36
 80038a0:	f002 fa5d 	bl	8005d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 80038a4:	e055      	b.n	8003952 <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC2)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a30      	ldr	r2, [pc, #192]	@ (800396c <HAL_DAC_MspInit+0x19c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d150      	bne.n	8003952 <HAL_DAC_MspInit+0x182>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80038b0:	4b2b      	ldr	r3, [pc, #172]	@ (8003960 <HAL_DAC_MspInit+0x190>)
 80038b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003960 <HAL_DAC_MspInit+0x190>)
 80038b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038bc:	4b28      	ldr	r3, [pc, #160]	@ (8003960 <HAL_DAC_MspInit+0x190>)
 80038be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c8:	4b25      	ldr	r3, [pc, #148]	@ (8003960 <HAL_DAC_MspInit+0x190>)
 80038ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038cc:	4a24      	ldr	r2, [pc, #144]	@ (8003960 <HAL_DAC_MspInit+0x190>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038d4:	4b22      	ldr	r3, [pc, #136]	@ (8003960 <HAL_DAC_MspInit+0x190>)
 80038d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMIN_Pin;
 80038e0:	2340      	movs	r3, #64	@ 0x40
 80038e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038e4:	2303      	movs	r3, #3
 80038e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMIN_GPIO_Port, &GPIO_InitStruct);
 80038ec:	f107 031c 	add.w	r3, r7, #28
 80038f0:	4619      	mov	r1, r3
 80038f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038f6:	f002 ff9d 	bl	8006834 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel5;
 80038fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003970 <HAL_DAC_MspInit+0x1a0>)
 80038fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003974 <HAL_DAC_MspInit+0x1a4>)
 80038fe:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8003900:	4b1b      	ldr	r3, [pc, #108]	@ (8003970 <HAL_DAC_MspInit+0x1a0>)
 8003902:	2229      	movs	r2, #41	@ 0x29
 8003904:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003906:	4b1a      	ldr	r3, [pc, #104]	@ (8003970 <HAL_DAC_MspInit+0x1a0>)
 8003908:	2210      	movs	r2, #16
 800390a:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800390c:	4b18      	ldr	r3, [pc, #96]	@ (8003970 <HAL_DAC_MspInit+0x1a0>)
 800390e:	2200      	movs	r2, #0
 8003910:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003912:	4b17      	ldr	r3, [pc, #92]	@ (8003970 <HAL_DAC_MspInit+0x1a0>)
 8003914:	2280      	movs	r2, #128	@ 0x80
 8003916:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003918:	4b15      	ldr	r3, [pc, #84]	@ (8003970 <HAL_DAC_MspInit+0x1a0>)
 800391a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800391e:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003920:	4b13      	ldr	r3, [pc, #76]	@ (8003970 <HAL_DAC_MspInit+0x1a0>)
 8003922:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003926:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8003928:	4b11      	ldr	r3, [pc, #68]	@ (8003970 <HAL_DAC_MspInit+0x1a0>)
 800392a:	2220      	movs	r2, #32
 800392c:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800392e:	4b10      	ldr	r3, [pc, #64]	@ (8003970 <HAL_DAC_MspInit+0x1a0>)
 8003930:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003934:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8003936:	480e      	ldr	r0, [pc, #56]	@ (8003970 <HAL_DAC_MspInit+0x1a0>)
 8003938:	f002 fd0a 	bl	8006350 <HAL_DMA_Init>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d001      	beq.n	8003946 <HAL_DAC_MspInit+0x176>
      Error_Handler();
 8003942:	f7ff fd2d 	bl	80033a0 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a09      	ldr	r2, [pc, #36]	@ (8003970 <HAL_DAC_MspInit+0x1a0>)
 800394a:	609a      	str	r2, [r3, #8]
 800394c:	4a08      	ldr	r2, [pc, #32]	@ (8003970 <HAL_DAC_MspInit+0x1a0>)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003952:	bf00      	nop
 8003954:	3730      	adds	r7, #48	@ 0x30
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	50000800 	.word	0x50000800
 8003960:	40021000 	.word	0x40021000
 8003964:	200006b4 	.word	0x200006b4
 8003968:	40020044 	.word	0x40020044
 800396c:	50000c00 	.word	0x50000c00
 8003970:	20000714 	.word	0x20000714
 8003974:	40020058 	.word	0x40020058

08003978 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a16      	ldr	r2, [pc, #88]	@ (80039e0 <HAL_TIM_PWM_MspInit+0x68>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d114      	bne.n	80039b4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800398a:	4b16      	ldr	r3, [pc, #88]	@ (80039e4 <HAL_TIM_PWM_MspInit+0x6c>)
 800398c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800398e:	4a15      	ldr	r2, [pc, #84]	@ (80039e4 <HAL_TIM_PWM_MspInit+0x6c>)
 8003990:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003994:	6613      	str	r3, [r2, #96]	@ 0x60
 8003996:	4b13      	ldr	r3, [pc, #76]	@ (80039e4 <HAL_TIM_PWM_MspInit+0x6c>)
 8003998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800399a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80039a2:	2200      	movs	r2, #0
 80039a4:	2100      	movs	r1, #0
 80039a6:	2018      	movs	r0, #24
 80039a8:	f002 f9bf 	bl	8005d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80039ac:	2018      	movs	r0, #24
 80039ae:	f002 f9d6 	bl	8005d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80039b2:	e010      	b.n	80039d6 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0b      	ldr	r2, [pc, #44]	@ (80039e8 <HAL_TIM_PWM_MspInit+0x70>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d10b      	bne.n	80039d6 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80039be:	4b09      	ldr	r3, [pc, #36]	@ (80039e4 <HAL_TIM_PWM_MspInit+0x6c>)
 80039c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c2:	4a08      	ldr	r2, [pc, #32]	@ (80039e4 <HAL_TIM_PWM_MspInit+0x6c>)
 80039c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80039c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80039ca:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <HAL_TIM_PWM_MspInit+0x6c>)
 80039cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039d2:	60bb      	str	r3, [r7, #8]
 80039d4:	68bb      	ldr	r3, [r7, #8]
}
 80039d6:	bf00      	nop
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	40012c00 	.word	0x40012c00
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40013400 	.word	0x40013400

080039ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b088      	sub	sp, #32
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a35      	ldr	r2, [pc, #212]	@ (8003ad0 <HAL_TIM_Base_MspInit+0xe4>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d10c      	bne.n	8003a18 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80039fe:	4b35      	ldr	r3, [pc, #212]	@ (8003ad4 <HAL_TIM_Base_MspInit+0xe8>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a02:	4a34      	ldr	r2, [pc, #208]	@ (8003ad4 <HAL_TIM_Base_MspInit+0xe8>)
 8003a04:	f043 0304 	orr.w	r3, r3, #4
 8003a08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a0a:	4b32      	ldr	r3, [pc, #200]	@ (8003ad4 <HAL_TIM_Base_MspInit+0xe8>)
 8003a0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003a16:	e056      	b.n	8003ac6 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a2e      	ldr	r2, [pc, #184]	@ (8003ad8 <HAL_TIM_Base_MspInit+0xec>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d114      	bne.n	8003a4c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003a22:	4b2c      	ldr	r3, [pc, #176]	@ (8003ad4 <HAL_TIM_Base_MspInit+0xe8>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a26:	4a2b      	ldr	r2, [pc, #172]	@ (8003ad4 <HAL_TIM_Base_MspInit+0xe8>)
 8003a28:	f043 0310 	orr.w	r3, r3, #16
 8003a2c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a2e:	4b29      	ldr	r3, [pc, #164]	@ (8003ad4 <HAL_TIM_Base_MspInit+0xe8>)
 8003a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a32:	f003 0310 	and.w	r3, r3, #16
 8003a36:	61bb      	str	r3, [r7, #24]
 8003a38:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	2036      	movs	r0, #54	@ 0x36
 8003a40:	f002 f973 	bl	8005d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a44:	2036      	movs	r0, #54	@ 0x36
 8003a46:	f002 f98a 	bl	8005d5e <HAL_NVIC_EnableIRQ>
}
 8003a4a:	e03c      	b.n	8003ac6 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM7)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a22      	ldr	r2, [pc, #136]	@ (8003adc <HAL_TIM_Base_MspInit+0xf0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10c      	bne.n	8003a70 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a56:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad4 <HAL_TIM_Base_MspInit+0xe8>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad4 <HAL_TIM_Base_MspInit+0xe8>)
 8003a5c:	f043 0320 	orr.w	r3, r3, #32
 8003a60:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a62:	4b1c      	ldr	r3, [pc, #112]	@ (8003ad4 <HAL_TIM_Base_MspInit+0xe8>)
 8003a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	697b      	ldr	r3, [r7, #20]
}
 8003a6e:	e02a      	b.n	8003ac6 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM15)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1a      	ldr	r2, [pc, #104]	@ (8003ae0 <HAL_TIM_Base_MspInit+0xf4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d114      	bne.n	8003aa4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003a7a:	4b16      	ldr	r3, [pc, #88]	@ (8003ad4 <HAL_TIM_Base_MspInit+0xe8>)
 8003a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7e:	4a15      	ldr	r2, [pc, #84]	@ (8003ad4 <HAL_TIM_Base_MspInit+0xe8>)
 8003a80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a84:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a86:	4b13      	ldr	r3, [pc, #76]	@ (8003ad4 <HAL_TIM_Base_MspInit+0xe8>)
 8003a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003a92:	2200      	movs	r2, #0
 8003a94:	2100      	movs	r1, #0
 8003a96:	2018      	movs	r0, #24
 8003a98:	f002 f947 	bl	8005d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003a9c:	2018      	movs	r0, #24
 8003a9e:	f002 f95e 	bl	8005d5e <HAL_NVIC_EnableIRQ>
}
 8003aa2:	e010      	b.n	8003ac6 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM16)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a0e      	ldr	r2, [pc, #56]	@ (8003ae4 <HAL_TIM_Base_MspInit+0xf8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d10b      	bne.n	8003ac6 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003aae:	4b09      	ldr	r3, [pc, #36]	@ (8003ad4 <HAL_TIM_Base_MspInit+0xe8>)
 8003ab0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ab2:	4a08      	ldr	r2, [pc, #32]	@ (8003ad4 <HAL_TIM_Base_MspInit+0xe8>)
 8003ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ab8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003aba:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <HAL_TIM_Base_MspInit+0xe8>)
 8003abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
}
 8003ac6:	bf00      	nop
 8003ac8:	3720      	adds	r7, #32
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	40001000 	.word	0x40001000
 8003adc:	40001400 	.word	0x40001400
 8003ae0:	40014000 	.word	0x40014000
 8003ae4:	40014400 	.word	0x40014400

08003ae8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	@ 0x28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	2200      	movs	r2, #0
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	605a      	str	r2, [r3, #4]
 8003afa:	609a      	str	r2, [r3, #8]
 8003afc:	60da      	str	r2, [r3, #12]
 8003afe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a33      	ldr	r2, [pc, #204]	@ (8003bd4 <HAL_TIM_MspPostInit+0xec>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d11c      	bne.n	8003b44 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b0a:	4b33      	ldr	r3, [pc, #204]	@ (8003bd8 <HAL_TIM_MspPostInit+0xf0>)
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0e:	4a32      	ldr	r2, [pc, #200]	@ (8003bd8 <HAL_TIM_MspPostInit+0xf0>)
 8003b10:	f043 0304 	orr.w	r3, r3, #4
 8003b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b16:	4b30      	ldr	r3, [pc, #192]	@ (8003bd8 <HAL_TIM_MspPostInit+0xf0>)
 8003b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	613b      	str	r3, [r7, #16]
 8003b20:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DEADTIME_TR_Pin;
 8003b22:	2301      	movs	r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b26:	2302      	movs	r3, #2
 8003b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003b32:	2302      	movs	r3, #2
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_TR_GPIO_Port, &GPIO_InitStruct);
 8003b36:	f107 0314 	add.w	r3, r7, #20
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4827      	ldr	r0, [pc, #156]	@ (8003bdc <HAL_TIM_MspPostInit+0xf4>)
 8003b3e:	f002 fe79 	bl	8006834 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003b42:	e043      	b.n	8003bcc <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a25      	ldr	r2, [pc, #148]	@ (8003be0 <HAL_TIM_MspPostInit+0xf8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d11d      	bne.n	8003b8a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b4e:	4b22      	ldr	r3, [pc, #136]	@ (8003bd8 <HAL_TIM_MspPostInit+0xf0>)
 8003b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b52:	4a21      	ldr	r2, [pc, #132]	@ (8003bd8 <HAL_TIM_MspPostInit+0xf0>)
 8003b54:	f043 0308 	orr.w	r3, r3, #8
 8003b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd8 <HAL_TIM_MspPostInit+0xf0>)
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5e:	f003 0308 	and.w	r3, r3, #8
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8003b66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b74:	2300      	movs	r3, #0
 8003b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b7c:	f107 0314 	add.w	r3, r7, #20
 8003b80:	4619      	mov	r1, r3
 8003b82:	4818      	ldr	r0, [pc, #96]	@ (8003be4 <HAL_TIM_MspPostInit+0xfc>)
 8003b84:	f002 fe56 	bl	8006834 <HAL_GPIO_Init>
}
 8003b88:	e020      	b.n	8003bcc <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a16      	ldr	r2, [pc, #88]	@ (8003be8 <HAL_TIM_MspPostInit+0x100>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d11b      	bne.n	8003bcc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b94:	4b10      	ldr	r3, [pc, #64]	@ (8003bd8 <HAL_TIM_MspPostInit+0xf0>)
 8003b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b98:	4a0f      	ldr	r2, [pc, #60]	@ (8003bd8 <HAL_TIM_MspPostInit+0xf0>)
 8003b9a:	f043 0304 	orr.w	r3, r3, #4
 8003b9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd8 <HAL_TIM_MspPostInit+0xf0>)
 8003ba2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEADTIME_HC_Pin;
 8003bac:	2380      	movs	r3, #128	@ 0x80
 8003bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_HC_GPIO_Port, &GPIO_InitStruct);
 8003bc0:	f107 0314 	add.w	r3, r7, #20
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4805      	ldr	r0, [pc, #20]	@ (8003bdc <HAL_TIM_MspPostInit+0xf4>)
 8003bc8:	f002 fe34 	bl	8006834 <HAL_GPIO_Init>
}
 8003bcc:	bf00      	nop
 8003bce:	3728      	adds	r7, #40	@ 0x28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	48000800 	.word	0x48000800
 8003be0:	40000800 	.word	0x40000800
 8003be4:	48000c00 	.word	0x48000c00
 8003be8:	40013400 	.word	0x40013400

08003bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b09e      	sub	sp, #120	@ 0x78
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bf4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
 8003bfc:	605a      	str	r2, [r3, #4]
 8003bfe:	609a      	str	r2, [r3, #8]
 8003c00:	60da      	str	r2, [r3, #12]
 8003c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c04:	f107 0310 	add.w	r3, r7, #16
 8003c08:	2254      	movs	r2, #84	@ 0x54
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f00d fcd6 	bl	80115be <memset>
  if(huart->Instance==UART4)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1f      	ldr	r2, [pc, #124]	@ (8003c94 <HAL_UART_MspInit+0xa8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d136      	bne.n	8003c8a <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003c1c:	2308      	movs	r3, #8
 8003c1e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_HSI;
 8003c20:	2380      	movs	r3, #128	@ 0x80
 8003c22:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c24:	f107 0310 	add.w	r3, r7, #16
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f005 fae7 	bl	80091fc <HAL_RCCEx_PeriphCLKConfig>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003c34:	f7ff fbb4 	bl	80033a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003c38:	4b17      	ldr	r3, [pc, #92]	@ (8003c98 <HAL_UART_MspInit+0xac>)
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3c:	4a16      	ldr	r2, [pc, #88]	@ (8003c98 <HAL_UART_MspInit+0xac>)
 8003c3e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c44:	4b14      	ldr	r3, [pc, #80]	@ (8003c98 <HAL_UART_MspInit+0xac>)
 8003c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c50:	4b11      	ldr	r3, [pc, #68]	@ (8003c98 <HAL_UART_MspInit+0xac>)
 8003c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c54:	4a10      	ldr	r2, [pc, #64]	@ (8003c98 <HAL_UART_MspInit+0xac>)
 8003c56:	f043 0304 	orr.w	r3, r3, #4
 8003c5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c98 <HAL_UART_MspInit+0xac>)
 8003c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c68:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003c6c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c76:	2300      	movs	r3, #0
 8003c78:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003c7a:	2305      	movs	r3, #5
 8003c7c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c7e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003c82:	4619      	mov	r1, r3
 8003c84:	4805      	ldr	r0, [pc, #20]	@ (8003c9c <HAL_UART_MspInit+0xb0>)
 8003c86:	f002 fdd5 	bl	8006834 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8003c8a:	bf00      	nop
 8003c8c:	3778      	adds	r7, #120	@ 0x78
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40004c00 	.word	0x40004c00
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	48000800 	.word	0x48000800

08003ca0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ca4:	bf00      	nop
 8003ca6:	e7fd      	b.n	8003ca4 <NMI_Handler+0x4>

08003ca8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003cac:	bf00      	nop
 8003cae:	e7fd      	b.n	8003cac <HardFault_Handler+0x4>

08003cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003cb4:	bf00      	nop
 8003cb6:	e7fd      	b.n	8003cb4 <MemManage_Handler+0x4>

08003cb8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003cbc:	bf00      	nop
 8003cbe:	e7fd      	b.n	8003cbc <BusFault_Handler+0x4>

08003cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003cc4:	bf00      	nop
 8003cc6:	e7fd      	b.n	8003cc4 <UsageFault_Handler+0x4>

08003cc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003cda:	bf00      	nop
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003cf6:	f000 f9b9 	bl	800406c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003cfa:	bf00      	nop
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003d04:	4802      	ldr	r0, [pc, #8]	@ (8003d10 <DMA1_Channel1_IRQHandler+0x10>)
 8003d06:	f002 fc46 	bl	8006596 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003d0a:	bf00      	nop
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	20000544 	.word	0x20000544

08003d14 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8003d18:	4802      	ldr	r0, [pc, #8]	@ (8003d24 <DMA1_Channel2_IRQHandler+0x10>)
 8003d1a:	f002 fc3c 	bl	8006596 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	200005a4 	.word	0x200005a4

08003d28 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8003d2c:	4802      	ldr	r0, [pc, #8]	@ (8003d38 <DMA1_Channel3_IRQHandler+0x10>)
 8003d2e:	f002 fc32 	bl	8006596 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003d32:	bf00      	nop
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000604 	.word	0x20000604

08003d3c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003d40:	4802      	ldr	r0, [pc, #8]	@ (8003d4c <DMA1_Channel4_IRQHandler+0x10>)
 8003d42:	f002 fc28 	bl	8006596 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003d46:	bf00      	nop
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	200006b4 	.word	0x200006b4

08003d50 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8003d54:	4802      	ldr	r0, [pc, #8]	@ (8003d60 <DMA1_Channel5_IRQHandler+0x10>)
 8003d56:	f002 fc1e 	bl	8006596 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003d5a:	bf00      	nop
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000714 	.word	0x20000714

08003d64 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003d68:	4802      	ldr	r0, [pc, #8]	@ (8003d74 <USB_LP_IRQHandler+0x10>)
 8003d6a:	f003 f81f 	bl	8006dac <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20002030 	.word	0x20002030

08003d78 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003d7c:	4803      	ldr	r0, [pc, #12]	@ (8003d8c <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8003d7e:	f005 ff63 	bl	8009c48 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8003d82:	4803      	ldr	r0, [pc, #12]	@ (8003d90 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8003d84:	f005 ff60 	bl	8009c48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003d88:	bf00      	nop
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	20000774 	.word	0x20000774
 8003d90:	200008f0 	.word	0x200008f0

08003d94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
					HEAT_SINK_TEMP = (ADC3_DMA_BUFFER[4]/4096)*3.3;//(Low_pass_filter(ADC3_DMA_BUFFER[4], HEAT_SINK_TEMP)/4096)*3.3;
					FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
					}*/

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003d98:	4803      	ldr	r0, [pc, #12]	@ (8003da8 <TIM6_DAC_IRQHandler+0x14>)
 8003d9a:	f005 ff55 	bl	8009c48 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003d9e:	4803      	ldr	r0, [pc, #12]	@ (8003dac <TIM6_DAC_IRQHandler+0x18>)
 8003da0:	f002 f886 	bl	8005eb0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003da4:	bf00      	nop
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	2000080c 	.word	0x2000080c
 8003dac:	2000068c 	.word	0x2000068c

08003db0 <CORDIC_IRQHandler>:

/**
  * @brief This function handles CORDIC interrupt.
  */
void CORDIC_IRQHandler(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CORDIC_IRQn 0 */

  /* USER CODE END CORDIC_IRQn 0 */
  HAL_CORDIC_IRQHandler(&hcordic);
 8003db4:	4802      	ldr	r0, [pc, #8]	@ (8003dc0 <CORDIC_IRQHandler+0x10>)
 8003db6:	f001 fe42 	bl	8005a3e <HAL_CORDIC_IRQHandler>
  /* USER CODE BEGIN CORDIC_IRQn 1 */

  /* USER CODE END CORDIC_IRQn 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	20000664 	.word	0x20000664

08003dc4 <_getpid>:
 8003dc4:	b480      	push	{r7}
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	2301      	movs	r3, #1
 8003dca:	4618      	mov	r0, r3
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <_kill>:
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
 8003dde:	f00d fc53 	bl	8011688 <__errno>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2216      	movs	r2, #22
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	f04f 33ff 	mov.w	r3, #4294967295
 8003dec:	4618      	mov	r0, r3
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <_exit>:
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f7ff ffe7 	bl	8003dd4 <_kill>
 8003e06:	bf00      	nop
 8003e08:	e7fd      	b.n	8003e06 <_exit+0x12>

08003e0a <_read>:
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	e00a      	b.n	8003e32 <_read+0x28>
 8003e1c:	f3af 8000 	nop.w
 8003e20:	4601      	mov	r1, r0
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	60ba      	str	r2, [r7, #8]
 8003e28:	b2ca      	uxtb	r2, r1
 8003e2a:	701a      	strb	r2, [r3, #0]
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	dbf0      	blt.n	8003e1c <_read+0x12>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <_write>:
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	e009      	b.n	8003e6a <_write+0x26>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	60ba      	str	r2, [r7, #8]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f3af 8000 	nop.w
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	3301      	adds	r3, #1
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	dbf1      	blt.n	8003e56 <_write+0x12>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_close>:
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	f04f 33ff 	mov.w	r3, #4294967295
 8003e88:	4618      	mov	r0, r3
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <_fstat>:
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <_isatty>:
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <_lseek>:
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <_sbrk>:
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	4a14      	ldr	r2, [pc, #80]	@ (8003f40 <_sbrk+0x5c>)
 8003eee:	4b15      	ldr	r3, [pc, #84]	@ (8003f44 <_sbrk+0x60>)
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	4b13      	ldr	r3, [pc, #76]	@ (8003f48 <_sbrk+0x64>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d102      	bne.n	8003f06 <_sbrk+0x22>
 8003f00:	4b11      	ldr	r3, [pc, #68]	@ (8003f48 <_sbrk+0x64>)
 8003f02:	4a12      	ldr	r2, [pc, #72]	@ (8003f4c <_sbrk+0x68>)
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	4b10      	ldr	r3, [pc, #64]	@ (8003f48 <_sbrk+0x64>)
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d207      	bcs.n	8003f24 <_sbrk+0x40>
 8003f14:	f00d fbb8 	bl	8011688 <__errno>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	220c      	movs	r2, #12
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003f22:	e009      	b.n	8003f38 <_sbrk+0x54>
 8003f24:	4b08      	ldr	r3, [pc, #32]	@ (8003f48 <_sbrk+0x64>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60fb      	str	r3, [r7, #12]
 8003f2a:	4b07      	ldr	r3, [pc, #28]	@ (8003f48 <_sbrk+0x64>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4413      	add	r3, r2
 8003f32:	4a05      	ldr	r2, [pc, #20]	@ (8003f48 <_sbrk+0x64>)
 8003f34:	6013      	str	r3, [r2, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3718      	adds	r7, #24
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	20020000 	.word	0x20020000
 8003f44:	00000400 	.word	0x00000400
 8003f48:	20000b54 	.word	0x20000b54
 8003f4c:	20002678 	.word	0x20002678

08003f50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f54:	4b06      	ldr	r3, [pc, #24]	@ (8003f70 <SystemInit+0x20>)
 8003f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5a:	4a05      	ldr	r2, [pc, #20]	@ (8003f70 <SystemInit+0x20>)
 8003f5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <Reset_Handler>:
 8003f74:	480d      	ldr	r0, [pc, #52]	@ (8003fac <LoopForever+0x2>)
 8003f76:	4685      	mov	sp, r0
 8003f78:	f7ff ffea 	bl	8003f50 <SystemInit>
 8003f7c:	480c      	ldr	r0, [pc, #48]	@ (8003fb0 <LoopForever+0x6>)
 8003f7e:	490d      	ldr	r1, [pc, #52]	@ (8003fb4 <LoopForever+0xa>)
 8003f80:	4a0d      	ldr	r2, [pc, #52]	@ (8003fb8 <LoopForever+0xe>)
 8003f82:	2300      	movs	r3, #0
 8003f84:	e002      	b.n	8003f8c <LoopCopyDataInit>

08003f86 <CopyDataInit>:
 8003f86:	58d4      	ldr	r4, [r2, r3]
 8003f88:	50c4      	str	r4, [r0, r3]
 8003f8a:	3304      	adds	r3, #4

08003f8c <LoopCopyDataInit>:
 8003f8c:	18c4      	adds	r4, r0, r3
 8003f8e:	428c      	cmp	r4, r1
 8003f90:	d3f9      	bcc.n	8003f86 <CopyDataInit>
 8003f92:	4a0a      	ldr	r2, [pc, #40]	@ (8003fbc <LoopForever+0x12>)
 8003f94:	4c0a      	ldr	r4, [pc, #40]	@ (8003fc0 <LoopForever+0x16>)
 8003f96:	2300      	movs	r3, #0
 8003f98:	e001      	b.n	8003f9e <LoopFillZerobss>

08003f9a <FillZerobss>:
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	3204      	adds	r2, #4

08003f9e <LoopFillZerobss>:
 8003f9e:	42a2      	cmp	r2, r4
 8003fa0:	d3fb      	bcc.n	8003f9a <FillZerobss>
 8003fa2:	f00d fb77 	bl	8011694 <__libc_init_array>
 8003fa6:	f7fd f845 	bl	8001034 <main>

08003faa <LoopForever>:
 8003faa:	e7fe      	b.n	8003faa <LoopForever>
 8003fac:	20020000 	.word	0x20020000
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	20000378 	.word	0x20000378
 8003fb8:	08017200 	.word	0x08017200
 8003fbc:	20000378 	.word	0x20000378
 8003fc0:	20002678 	.word	0x20002678

08003fc4 <ADC1_2_IRQHandler>:
 8003fc4:	e7fe      	b.n	8003fc4 <ADC1_2_IRQHandler>

08003fc6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b082      	sub	sp, #8
 8003fca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fd0:	2003      	movs	r0, #3
 8003fd2:	f001 fe9f 	bl	8005d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fd6:	200f      	movs	r0, #15
 8003fd8:	f000 f80e 	bl	8003ff8 <HAL_InitTick>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	71fb      	strb	r3, [r7, #7]
 8003fe6:	e001      	b.n	8003fec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fe8:	f7ff f9e0 	bl	80033ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fec:	79fb      	ldrb	r3, [r7, #7]

}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3708      	adds	r7, #8
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
	...

08003ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004004:	4b16      	ldr	r3, [pc, #88]	@ (8004060 <HAL_InitTick+0x68>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d022      	beq.n	8004052 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800400c:	4b15      	ldr	r3, [pc, #84]	@ (8004064 <HAL_InitTick+0x6c>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b13      	ldr	r3, [pc, #76]	@ (8004060 <HAL_InitTick+0x68>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004018:	fbb1 f3f3 	udiv	r3, r1, r3
 800401c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004020:	4618      	mov	r0, r3
 8004022:	f001 feaa 	bl	8005d7a <HAL_SYSTICK_Config>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10f      	bne.n	800404c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b0f      	cmp	r3, #15
 8004030:	d809      	bhi.n	8004046 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004032:	2200      	movs	r2, #0
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	f04f 30ff 	mov.w	r0, #4294967295
 800403a:	f001 fe76 	bl	8005d2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800403e:	4a0a      	ldr	r2, [pc, #40]	@ (8004068 <HAL_InitTick+0x70>)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	e007      	b.n	8004056 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
 800404a:	e004      	b.n	8004056 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	e001      	b.n	8004056 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004056:	7bfb      	ldrb	r3, [r7, #15]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000024 	.word	0x20000024
 8004064:	2000001c 	.word	0x2000001c
 8004068:	20000020 	.word	0x20000020

0800406c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800406c:	b480      	push	{r7}
 800406e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004070:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <HAL_IncTick+0x1c>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b05      	ldr	r3, [pc, #20]	@ (800408c <HAL_IncTick+0x20>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4413      	add	r3, r2
 800407a:	4a03      	ldr	r2, [pc, #12]	@ (8004088 <HAL_IncTick+0x1c>)
 800407c:	6013      	str	r3, [r2, #0]
}
 800407e:	bf00      	nop
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	20000b58 	.word	0x20000b58
 800408c:	20000024 	.word	0x20000024

08004090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return uwTick;
 8004094:	4b03      	ldr	r3, [pc, #12]	@ (80040a4 <HAL_GetTick+0x14>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	20000b58 	.word	0x20000b58

080040a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040b0:	f7ff ffee 	bl	8004090 <HAL_GetTick>
 80040b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d004      	beq.n	80040cc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80040c2:	4b09      	ldr	r3, [pc, #36]	@ (80040e8 <HAL_Delay+0x40>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4413      	add	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040cc:	bf00      	nop
 80040ce:	f7ff ffdf 	bl	8004090 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d8f7      	bhi.n	80040ce <HAL_Delay+0x26>
  {
  }
}
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20000024 	.word	0x20000024

080040ec <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	609a      	str	r2, [r3, #8]
}
 8004106:	bf00      	nop
 8004108:	370c      	adds	r7, #12
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
 800411a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	609a      	str	r2, [r3, #8]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3360      	adds	r3, #96	@ 0x60
 8004166:	461a      	mov	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	4413      	add	r3, r2
 800416e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b08      	ldr	r3, [pc, #32]	@ (8004198 <LL_ADC_SetOffset+0x44>)
 8004176:	4013      	ands	r3, r2
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800418c:	bf00      	nop
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	03fff000 	.word	0x03fff000

0800419c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3360      	adds	r3, #96	@ 0x60
 80041aa:	461a      	mov	r2, r3
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3714      	adds	r7, #20
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3360      	adds	r3, #96	@ 0x60
 80041d8:	461a      	mov	r2, r3
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80041fe:	b480      	push	{r7}
 8004200:	b087      	sub	sp, #28
 8004202:	af00      	add	r7, sp, #0
 8004204:	60f8      	str	r0, [r7, #12]
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3360      	adds	r3, #96	@ 0x60
 800420e:	461a      	mov	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	431a      	orrs	r2, r3
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	3360      	adds	r3, #96	@ 0x60
 8004244:	461a      	mov	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4413      	add	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	431a      	orrs	r2, r3
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800425e:	bf00      	nop
 8004260:	371c      	adds	r7, #28
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr

0800426a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
 8004272:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	615a      	str	r2, [r3, #20]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80042a4:	2301      	movs	r3, #1
 80042a6:	e000      	b.n	80042aa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80042b6:	b480      	push	{r7}
 80042b8:	b087      	sub	sp, #28
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3330      	adds	r3, #48	@ 0x30
 80042c6:	461a      	mov	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	0a1b      	lsrs	r3, r3, #8
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	4413      	add	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	211f      	movs	r1, #31
 80042e2:	fa01 f303 	lsl.w	r3, r1, r3
 80042e6:	43db      	mvns	r3, r3
 80042e8:	401a      	ands	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	0e9b      	lsrs	r3, r3, #26
 80042ee:	f003 011f 	and.w	r1, r3, #31
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f003 031f 	and.w	r3, r3, #31
 80042f8:	fa01 f303 	lsl.w	r3, r1, r3
 80042fc:	431a      	orrs	r2, r3
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004302:	bf00      	nop
 8004304:	371c      	adds	r7, #28
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800430e:	b480      	push	{r7}
 8004310:	b087      	sub	sp, #28
 8004312:	af00      	add	r7, sp, #0
 8004314:	60f8      	str	r0, [r7, #12]
 8004316:	60b9      	str	r1, [r7, #8]
 8004318:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3314      	adds	r3, #20
 800431e:	461a      	mov	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	0e5b      	lsrs	r3, r3, #25
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	4413      	add	r3, r2
 800432c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	0d1b      	lsrs	r3, r3, #20
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	2107      	movs	r1, #7
 800433c:	fa01 f303 	lsl.w	r3, r1, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	401a      	ands	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	0d1b      	lsrs	r3, r3, #20
 8004348:	f003 031f 	and.w	r3, r3, #31
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	fa01 f303 	lsl.w	r3, r1, r3
 8004352:	431a      	orrs	r2, r3
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004358:	bf00      	nop
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800437c:	43db      	mvns	r3, r3
 800437e:	401a      	ands	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f003 0318 	and.w	r3, r3, #24
 8004386:	4908      	ldr	r1, [pc, #32]	@ (80043a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004388:	40d9      	lsrs	r1, r3
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	400b      	ands	r3, r1
 800438e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004392:	431a      	orrs	r2, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800439a:	bf00      	nop
 800439c:	3714      	adds	r7, #20
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	0007ffff 	.word	0x0007ffff

080043ac <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 031f 	and.w	r3, r3, #31
}
 80043bc:	4618      	mov	r0, r3
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80043d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6093      	str	r3, [r2, #8]
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80043fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004400:	d101      	bne.n	8004406 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004424:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004428:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800444c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004450:	d101      	bne.n	8004456 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004452:	2301      	movs	r3, #1
 8004454:	e000      	b.n	8004458 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004456:	2300      	movs	r3, #0
}
 8004458:	4618      	mov	r0, r3
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004474:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004478:	f043 0201 	orr.w	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800449c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80044a0:	f043 0202 	orr.w	r2, r3, #2
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <LL_ADC_IsEnabled+0x18>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <LL_ADC_IsEnabled+0x1a>
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d101      	bne.n	80044f2 <LL_ADC_IsDisableOngoing+0x18>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <LL_ADC_IsDisableOngoing+0x1a>
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004510:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004514:	f043 0204 	orr.w	r2, r3, #4
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 0304 	and.w	r3, r3, #4
 8004538:	2b04      	cmp	r3, #4
 800453a:	d101      	bne.n	8004540 <LL_ADC_REG_IsConversionOngoing+0x18>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b08      	cmp	r3, #8
 8004560:	d101      	bne.n	8004566 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004574:	b590      	push	{r4, r7, lr}
 8004576:	b089      	sub	sp, #36	@ 0x24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800457c:	2300      	movs	r3, #0
 800457e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004580:	2300      	movs	r3, #0
 8004582:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e1a9      	b.n	80048e2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004598:	2b00      	cmp	r3, #0
 800459a:	d109      	bne.n	80045b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7fe ff29 	bl	80033f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff ff19 	bl	80043ec <LL_ADC_IsDeepPowerDownEnabled>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d004      	beq.n	80045ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff feff 	bl	80043c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f7ff ff34 	bl	800443c <LL_ADC_IsInternalRegulatorEnabled>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d115      	bne.n	8004606 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7ff ff18 	bl	8004414 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045e4:	4b9c      	ldr	r3, [pc, #624]	@ (8004858 <HAL_ADC_Init+0x2e4>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	099b      	lsrs	r3, r3, #6
 80045ea:	4a9c      	ldr	r2, [pc, #624]	@ (800485c <HAL_ADC_Init+0x2e8>)
 80045ec:	fba2 2303 	umull	r2, r3, r2, r3
 80045f0:	099b      	lsrs	r3, r3, #6
 80045f2:	3301      	adds	r3, #1
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80045f8:	e002      	b.n	8004600 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f9      	bne.n	80045fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff ff16 	bl	800443c <LL_ADC_IsInternalRegulatorEnabled>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10d      	bne.n	8004632 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800461a:	f043 0210 	orr.w	r2, r3, #16
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004626:	f043 0201 	orr.w	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff ff76 	bl	8004528 <LL_ADC_REG_IsConversionOngoing>
 800463c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b00      	cmp	r3, #0
 8004648:	f040 8142 	bne.w	80048d0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2b00      	cmp	r3, #0
 8004650:	f040 813e 	bne.w	80048d0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004658:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800465c:	f043 0202 	orr.w	r2, r3, #2
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ff23 	bl	80044b4 <LL_ADC_IsEnabled>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d141      	bne.n	80046f8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800467c:	d004      	beq.n	8004688 <HAL_ADC_Init+0x114>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a77      	ldr	r2, [pc, #476]	@ (8004860 <HAL_ADC_Init+0x2ec>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d10f      	bne.n	80046a8 <HAL_ADC_Init+0x134>
 8004688:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800468c:	f7ff ff12 	bl	80044b4 <LL_ADC_IsEnabled>
 8004690:	4604      	mov	r4, r0
 8004692:	4873      	ldr	r0, [pc, #460]	@ (8004860 <HAL_ADC_Init+0x2ec>)
 8004694:	f7ff ff0e 	bl	80044b4 <LL_ADC_IsEnabled>
 8004698:	4603      	mov	r3, r0
 800469a:	4323      	orrs	r3, r4
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf0c      	ite	eq
 80046a0:	2301      	moveq	r3, #1
 80046a2:	2300      	movne	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	e012      	b.n	80046ce <HAL_ADC_Init+0x15a>
 80046a8:	486e      	ldr	r0, [pc, #440]	@ (8004864 <HAL_ADC_Init+0x2f0>)
 80046aa:	f7ff ff03 	bl	80044b4 <LL_ADC_IsEnabled>
 80046ae:	4604      	mov	r4, r0
 80046b0:	486d      	ldr	r0, [pc, #436]	@ (8004868 <HAL_ADC_Init+0x2f4>)
 80046b2:	f7ff feff 	bl	80044b4 <LL_ADC_IsEnabled>
 80046b6:	4603      	mov	r3, r0
 80046b8:	431c      	orrs	r4, r3
 80046ba:	486c      	ldr	r0, [pc, #432]	@ (800486c <HAL_ADC_Init+0x2f8>)
 80046bc:	f7ff fefa 	bl	80044b4 <LL_ADC_IsEnabled>
 80046c0:	4603      	mov	r3, r0
 80046c2:	4323      	orrs	r3, r4
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	bf0c      	ite	eq
 80046c8:	2301      	moveq	r3, #1
 80046ca:	2300      	movne	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d012      	beq.n	80046f8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046da:	d004      	beq.n	80046e6 <HAL_ADC_Init+0x172>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a5f      	ldr	r2, [pc, #380]	@ (8004860 <HAL_ADC_Init+0x2ec>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d101      	bne.n	80046ea <HAL_ADC_Init+0x176>
 80046e6:	4a62      	ldr	r2, [pc, #392]	@ (8004870 <HAL_ADC_Init+0x2fc>)
 80046e8:	e000      	b.n	80046ec <HAL_ADC_Init+0x178>
 80046ea:	4a62      	ldr	r2, [pc, #392]	@ (8004874 <HAL_ADC_Init+0x300>)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f7ff fcfa 	bl	80040ec <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	7f5b      	ldrb	r3, [r3, #29]
 80046fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004702:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004708:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800470e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004716:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004718:	4313      	orrs	r3, r2
 800471a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004722:	2b01      	cmp	r3, #1
 8004724:	d106      	bne.n	8004734 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472a:	3b01      	subs	r3, #1
 800472c:	045b      	lsls	r3, r3, #17
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4313      	orrs	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004738:	2b00      	cmp	r3, #0
 800473a:	d009      	beq.n	8004750 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004740:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004748:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4313      	orrs	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68da      	ldr	r2, [r3, #12]
 8004756:	4b48      	ldr	r3, [pc, #288]	@ (8004878 <HAL_ADC_Init+0x304>)
 8004758:	4013      	ands	r3, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	69b9      	ldr	r1, [r7, #24]
 8004760:	430b      	orrs	r3, r1
 8004762:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff fee5 	bl	800454e <LL_ADC_INJ_IsConversionOngoing>
 8004784:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d17f      	bne.n	800488c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d17c      	bne.n	800488c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004796:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800479e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80047a0:	4313      	orrs	r3, r2
 80047a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047ae:	f023 0302 	bic.w	r3, r3, #2
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6812      	ldr	r2, [r2, #0]
 80047b6:	69b9      	ldr	r1, [r7, #24]
 80047b8:	430b      	orrs	r3, r1
 80047ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d017      	beq.n	80047f4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80047d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80047dc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80047e0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6911      	ldr	r1, [r2, #16]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	430b      	orrs	r3, r1
 80047ee:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80047f2:	e013      	b.n	800481c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691a      	ldr	r2, [r3, #16]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004802:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6812      	ldr	r2, [r2, #0]
 8004810:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004814:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004818:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004822:	2b01      	cmp	r3, #1
 8004824:	d12a      	bne.n	800487c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004830:	f023 0304 	bic.w	r3, r3, #4
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800483c:	4311      	orrs	r1, r2
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004842:	4311      	orrs	r1, r2
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004848:	430a      	orrs	r2, r1
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0201 	orr.w	r2, r2, #1
 8004854:	611a      	str	r2, [r3, #16]
 8004856:	e019      	b.n	800488c <HAL_ADC_Init+0x318>
 8004858:	2000001c 	.word	0x2000001c
 800485c:	053e2d63 	.word	0x053e2d63
 8004860:	50000100 	.word	0x50000100
 8004864:	50000400 	.word	0x50000400
 8004868:	50000500 	.word	0x50000500
 800486c:	50000600 	.word	0x50000600
 8004870:	50000300 	.word	0x50000300
 8004874:	50000700 	.word	0x50000700
 8004878:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	691a      	ldr	r2, [r3, #16]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f022 0201 	bic.w	r2, r2, #1
 800488a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d10c      	bne.n	80048ae <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489a:	f023 010f 	bic.w	r1, r3, #15
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	1e5a      	subs	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80048ac:	e007      	b.n	80048be <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 020f 	bic.w	r2, r2, #15
 80048bc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c2:	f023 0303 	bic.w	r3, r3, #3
 80048c6:	f043 0201 	orr.w	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048ce:	e007      	b.n	80048e0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d4:	f043 0210 	orr.w	r2, r3, #16
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80048e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3724      	adds	r7, #36	@ 0x24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd90      	pop	{r4, r7, pc}
 80048ea:	bf00      	nop

080048ec <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004900:	d004      	beq.n	800490c <HAL_ADC_Start_DMA+0x20>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a5a      	ldr	r2, [pc, #360]	@ (8004a70 <HAL_ADC_Start_DMA+0x184>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d101      	bne.n	8004910 <HAL_ADC_Start_DMA+0x24>
 800490c:	4b59      	ldr	r3, [pc, #356]	@ (8004a74 <HAL_ADC_Start_DMA+0x188>)
 800490e:	e000      	b.n	8004912 <HAL_ADC_Start_DMA+0x26>
 8004910:	4b59      	ldr	r3, [pc, #356]	@ (8004a78 <HAL_ADC_Start_DMA+0x18c>)
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff fd4a 	bl	80043ac <LL_ADC_GetMultimode>
 8004918:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff fe02 	bl	8004528 <LL_ADC_REG_IsConversionOngoing>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	f040 809b 	bne.w	8004a62 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_ADC_Start_DMA+0x4e>
 8004936:	2302      	movs	r3, #2
 8004938:	e096      	b.n	8004a68 <HAL_ADC_Start_DMA+0x17c>
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a4d      	ldr	r2, [pc, #308]	@ (8004a7c <HAL_ADC_Start_DMA+0x190>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d008      	beq.n	800495e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b05      	cmp	r3, #5
 8004956:	d002      	beq.n	800495e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b09      	cmp	r3, #9
 800495c:	d17a      	bne.n	8004a54 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 fcec 	bl	800533c <ADC_Enable>
 8004964:	4603      	mov	r3, r0
 8004966:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004968:	7dfb      	ldrb	r3, [r7, #23]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d16d      	bne.n	8004a4a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004972:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004976:	f023 0301 	bic.w	r3, r3, #1
 800497a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a3a      	ldr	r2, [pc, #232]	@ (8004a70 <HAL_ADC_Start_DMA+0x184>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d009      	beq.n	80049a0 <HAL_ADC_Start_DMA+0xb4>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a3b      	ldr	r2, [pc, #236]	@ (8004a80 <HAL_ADC_Start_DMA+0x194>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d002      	beq.n	800499c <HAL_ADC_Start_DMA+0xb0>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	e003      	b.n	80049a4 <HAL_ADC_Start_DMA+0xb8>
 800499c:	4b39      	ldr	r3, [pc, #228]	@ (8004a84 <HAL_ADC_Start_DMA+0x198>)
 800499e:	e001      	b.n	80049a4 <HAL_ADC_Start_DMA+0xb8>
 80049a0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d002      	beq.n	80049b2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d105      	bne.n	80049be <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d006      	beq.n	80049d8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ce:	f023 0206 	bic.w	r2, r3, #6
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	661a      	str	r2, [r3, #96]	@ 0x60
 80049d6:	e002      	b.n	80049de <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049e2:	4a29      	ldr	r2, [pc, #164]	@ (8004a88 <HAL_ADC_Start_DMA+0x19c>)
 80049e4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ea:	4a28      	ldr	r2, [pc, #160]	@ (8004a8c <HAL_ADC_Start_DMA+0x1a0>)
 80049ec:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f2:	4a27      	ldr	r2, [pc, #156]	@ (8004a90 <HAL_ADC_Start_DMA+0x1a4>)
 80049f4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	221c      	movs	r2, #28
 80049fc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685a      	ldr	r2, [r3, #4]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0210 	orr.w	r2, r2, #16
 8004a14:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0201 	orr.w	r2, r2, #1
 8004a24:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3340      	adds	r3, #64	@ 0x40
 8004a30:	4619      	mov	r1, r3
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f001 fd33 	bl	80064a0 <HAL_DMA_Start_IT>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff fd5c 	bl	8004500 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004a48:	e00d      	b.n	8004a66 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004a52:	e008      	b.n	8004a66 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004a60:	e001      	b.n	8004a66 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004a62:	2302      	movs	r3, #2
 8004a64:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	50000100 	.word	0x50000100
 8004a74:	50000300 	.word	0x50000300
 8004a78:	50000700 	.word	0x50000700
 8004a7c:	50000600 	.word	0x50000600
 8004a80:	50000500 	.word	0x50000500
 8004a84:	50000400 	.word	0x50000400
 8004a88:	08005527 	.word	0x08005527
 8004a8c:	080055ff 	.word	0x080055ff
 8004a90:	0800561b 	.word	0x0800561b

08004a94 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b0b6      	sub	sp, #216	@ 0xd8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d102      	bne.n	8004ae0 <HAL_ADC_ConfigChannel+0x24>
 8004ada:	2302      	movs	r3, #2
 8004adc:	f000 bc13 	b.w	8005306 <HAL_ADC_ConfigChannel+0x84a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7ff fd1b 	bl	8004528 <LL_ADC_REG_IsConversionOngoing>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f040 83f3 	bne.w	80052e0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6818      	ldr	r0, [r3, #0]
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	6859      	ldr	r1, [r3, #4]
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	f7ff fbd5 	bl	80042b6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7ff fd09 	bl	8004528 <LL_ADC_REG_IsConversionOngoing>
 8004b16:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7ff fd15 	bl	800454e <LL_ADC_INJ_IsConversionOngoing>
 8004b24:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b28:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f040 81d9 	bne.w	8004ee4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f040 81d4 	bne.w	8004ee4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b44:	d10f      	bne.n	8004b66 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	4619      	mov	r1, r3
 8004b52:	f7ff fbdc 	bl	800430e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff fb83 	bl	800426a <LL_ADC_SetSamplingTimeCommonConfig>
 8004b64:	e00e      	b.n	8004b84 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6819      	ldr	r1, [r3, #0]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	461a      	mov	r2, r3
 8004b74:	f7ff fbcb 	bl	800430e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7ff fb73 	bl	800426a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	695a      	ldr	r2, [r3, #20]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	08db      	lsrs	r3, r3, #3
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	005b      	lsls	r3, r3, #1
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	2b04      	cmp	r3, #4
 8004ba4:	d022      	beq.n	8004bec <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6818      	ldr	r0, [r3, #0]
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6919      	ldr	r1, [r3, #16]
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004bb6:	f7ff facd 	bl	8004154 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6919      	ldr	r1, [r3, #16]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f7ff fb19 	bl	80041fe <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6818      	ldr	r0, [r3, #0]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d102      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x126>
 8004bdc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004be0:	e000      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x128>
 8004be2:	2300      	movs	r3, #0
 8004be4:	461a      	mov	r2, r3
 8004be6:	f7ff fb25 	bl	8004234 <LL_ADC_SetOffsetSaturation>
 8004bea:	e17b      	b.n	8004ee4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f7ff fad2 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10a      	bne.n	8004c18 <HAL_ADC_ConfigChannel+0x15c>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2100      	movs	r1, #0
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fac7 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	0e9b      	lsrs	r3, r3, #26
 8004c12:	f003 021f 	and.w	r2, r3, #31
 8004c16:	e01e      	b.n	8004c56 <HAL_ADC_ConfigChannel+0x19a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff fabc 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004c2e:	fa93 f3a3 	rbit	r3, r3
 8004c32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004c3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004c46:	2320      	movs	r3, #32
 8004c48:	e004      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004c4a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c4e:	fab3 f383 	clz	r3, r3
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d105      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x1b2>
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	0e9b      	lsrs	r3, r3, #26
 8004c68:	f003 031f 	and.w	r3, r3, #31
 8004c6c:	e018      	b.n	8004ca0 <HAL_ADC_ConfigChannel+0x1e4>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004c7a:	fa93 f3a3 	rbit	r3, r3
 8004c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004c82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c86:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004c8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004c92:	2320      	movs	r3, #32
 8004c94:	e004      	b.n	8004ca0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004c96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c9a:	fab3 f383 	clz	r3, r3
 8004c9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d106      	bne.n	8004cb2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	2100      	movs	r1, #0
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7ff fa8b 	bl	80041c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7ff fa6f 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d10a      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x222>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2101      	movs	r1, #1
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7ff fa64 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	0e9b      	lsrs	r3, r3, #26
 8004cd8:	f003 021f 	and.w	r2, r3, #31
 8004cdc:	e01e      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x260>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff fa59 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004cea:	4603      	mov	r3, r0
 8004cec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004cf4:	fa93 f3a3 	rbit	r3, r3
 8004cf8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004cfc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004d00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004d04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004d0c:	2320      	movs	r3, #32
 8004d0e:	e004      	b.n	8004d1a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004d14:	fab3 f383 	clz	r3, r3
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d105      	bne.n	8004d34 <HAL_ADC_ConfigChannel+0x278>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	0e9b      	lsrs	r3, r3, #26
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	e018      	b.n	8004d66 <HAL_ADC_ConfigChannel+0x2aa>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d40:	fa93 f3a3 	rbit	r3, r3
 8004d44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004d48:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004d4c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d101      	bne.n	8004d5c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004d58:	2320      	movs	r3, #32
 8004d5a:	e004      	b.n	8004d66 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d60:	fab3 f383 	clz	r3, r3
 8004d64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d106      	bne.n	8004d78 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2101      	movs	r1, #1
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fa28 	bl	80041c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2102      	movs	r1, #2
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff fa0c 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004d84:	4603      	mov	r3, r0
 8004d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10a      	bne.n	8004da4 <HAL_ADC_ConfigChannel+0x2e8>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2102      	movs	r1, #2
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fa01 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	0e9b      	lsrs	r3, r3, #26
 8004d9e:	f003 021f 	and.w	r2, r3, #31
 8004da2:	e01e      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x326>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2102      	movs	r1, #2
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff f9f6 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004db0:	4603      	mov	r3, r0
 8004db2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dba:	fa93 f3a3 	rbit	r3, r3
 8004dbe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004dc2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004dc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004dca:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004dd2:	2320      	movs	r3, #32
 8004dd4:	e004      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004dda:	fab3 f383 	clz	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d105      	bne.n	8004dfa <HAL_ADC_ConfigChannel+0x33e>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	0e9b      	lsrs	r3, r3, #26
 8004df4:	f003 031f 	and.w	r3, r3, #31
 8004df8:	e016      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x36c>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e02:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004e06:	fa93 f3a3 	rbit	r3, r3
 8004e0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004e0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004e0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004e12:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004e1a:	2320      	movs	r3, #32
 8004e1c:	e004      	b.n	8004e28 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004e1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004e22:	fab3 f383 	clz	r3, r3
 8004e26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d106      	bne.n	8004e3a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2200      	movs	r2, #0
 8004e32:	2102      	movs	r1, #2
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff f9c7 	bl	80041c8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2103      	movs	r1, #3
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7ff f9ab 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <HAL_ADC_ConfigChannel+0x3aa>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2103      	movs	r1, #3
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff f9a0 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	0e9b      	lsrs	r3, r3, #26
 8004e60:	f003 021f 	and.w	r2, r3, #31
 8004e64:	e017      	b.n	8004e96 <HAL_ADC_ConfigChannel+0x3da>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2103      	movs	r1, #3
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7ff f995 	bl	800419c <LL_ADC_GetOffsetChannel>
 8004e72:	4603      	mov	r3, r0
 8004e74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004e78:	fa93 f3a3 	rbit	r3, r3
 8004e7c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004e7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e80:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004e82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004e88:	2320      	movs	r3, #32
 8004e8a:	e003      	b.n	8004e94 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004e8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e8e:	fab3 f383 	clz	r3, r3
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d105      	bne.n	8004eae <HAL_ADC_ConfigChannel+0x3f2>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	0e9b      	lsrs	r3, r3, #26
 8004ea8:	f003 031f 	and.w	r3, r3, #31
 8004eac:	e011      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x416>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004eb6:	fa93 f3a3 	rbit	r3, r3
 8004eba:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004ebc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ebe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004ec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004ec6:	2320      	movs	r3, #32
 8004ec8:	e003      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ecc:	fab3 f383 	clz	r3, r3
 8004ed0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d106      	bne.n	8004ee4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	2103      	movs	r1, #3
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f7ff f972 	bl	80041c8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff fae3 	bl	80044b4 <LL_ADC_IsEnabled>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f040 813d 	bne.w	8005170 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6819      	ldr	r1, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f7ff fa2e 	bl	8004364 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4aa2      	ldr	r2, [pc, #648]	@ (8005198 <HAL_ADC_ConfigChannel+0x6dc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	f040 812e 	bne.w	8005170 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10b      	bne.n	8004f3c <HAL_ADC_ConfigChannel+0x480>
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	0e9b      	lsrs	r3, r3, #26
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	f003 031f 	and.w	r3, r3, #31
 8004f30:	2b09      	cmp	r3, #9
 8004f32:	bf94      	ite	ls
 8004f34:	2301      	movls	r3, #1
 8004f36:	2300      	movhi	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	e019      	b.n	8004f70 <HAL_ADC_ConfigChannel+0x4b4>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f44:	fa93 f3a3 	rbit	r3, r3
 8004f48:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004f4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f4c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004f4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004f54:	2320      	movs	r3, #32
 8004f56:	e003      	b.n	8004f60 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004f58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f5a:	fab3 f383 	clz	r3, r3
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	3301      	adds	r3, #1
 8004f62:	f003 031f 	and.w	r3, r3, #31
 8004f66:	2b09      	cmp	r3, #9
 8004f68:	bf94      	ite	ls
 8004f6a:	2301      	movls	r3, #1
 8004f6c:	2300      	movhi	r3, #0
 8004f6e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d079      	beq.n	8005068 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d107      	bne.n	8004f90 <HAL_ADC_ConfigChannel+0x4d4>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	0e9b      	lsrs	r3, r3, #26
 8004f86:	3301      	adds	r3, #1
 8004f88:	069b      	lsls	r3, r3, #26
 8004f8a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004f8e:	e015      	b.n	8004fbc <HAL_ADC_ConfigChannel+0x500>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f98:	fa93 f3a3 	rbit	r3, r3
 8004f9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004f9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fa0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004fa8:	2320      	movs	r3, #32
 8004faa:	e003      	b.n	8004fb4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004fae:	fab3 f383 	clz	r3, r3
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	069b      	lsls	r3, r3, #26
 8004fb8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d109      	bne.n	8004fdc <HAL_ADC_ConfigChannel+0x520>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	0e9b      	lsrs	r3, r3, #26
 8004fce:	3301      	adds	r3, #1
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fda:	e017      	b.n	800500c <HAL_ADC_ConfigChannel+0x550>
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fe4:	fa93 f3a3 	rbit	r3, r3
 8004fe8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fec:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004fee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004ff4:	2320      	movs	r3, #32
 8004ff6:	e003      	b.n	8005000 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004ff8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ffa:	fab3 f383 	clz	r3, r3
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	3301      	adds	r3, #1
 8005002:	f003 031f 	and.w	r3, r3, #31
 8005006:	2101      	movs	r1, #1
 8005008:	fa01 f303 	lsl.w	r3, r1, r3
 800500c:	ea42 0103 	orr.w	r1, r2, r3
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10a      	bne.n	8005032 <HAL_ADC_ConfigChannel+0x576>
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	0e9b      	lsrs	r3, r3, #26
 8005022:	3301      	adds	r3, #1
 8005024:	f003 021f 	and.w	r2, r3, #31
 8005028:	4613      	mov	r3, r2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	4413      	add	r3, r2
 800502e:	051b      	lsls	r3, r3, #20
 8005030:	e018      	b.n	8005064 <HAL_ADC_ConfigChannel+0x5a8>
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503a:	fa93 f3a3 	rbit	r3, r3
 800503e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005042:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005046:	2b00      	cmp	r3, #0
 8005048:	d101      	bne.n	800504e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800504a:	2320      	movs	r3, #32
 800504c:	e003      	b.n	8005056 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800504e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005050:	fab3 f383 	clz	r3, r3
 8005054:	b2db      	uxtb	r3, r3
 8005056:	3301      	adds	r3, #1
 8005058:	f003 021f 	and.w	r2, r3, #31
 800505c:	4613      	mov	r3, r2
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	4413      	add	r3, r2
 8005062:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005064:	430b      	orrs	r3, r1
 8005066:	e07e      	b.n	8005166 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005070:	2b00      	cmp	r3, #0
 8005072:	d107      	bne.n	8005084 <HAL_ADC_ConfigChannel+0x5c8>
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	0e9b      	lsrs	r3, r3, #26
 800507a:	3301      	adds	r3, #1
 800507c:	069b      	lsls	r3, r3, #26
 800507e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005082:	e015      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x5f4>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800508c:	fa93 f3a3 	rbit	r3, r3
 8005090:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005094:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800509c:	2320      	movs	r3, #32
 800509e:	e003      	b.n	80050a8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80050a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a2:	fab3 f383 	clz	r3, r3
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	3301      	adds	r3, #1
 80050aa:	069b      	lsls	r3, r3, #26
 80050ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d109      	bne.n	80050d0 <HAL_ADC_ConfigChannel+0x614>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	0e9b      	lsrs	r3, r3, #26
 80050c2:	3301      	adds	r3, #1
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	2101      	movs	r1, #1
 80050ca:	fa01 f303 	lsl.w	r3, r1, r3
 80050ce:	e017      	b.n	8005100 <HAL_ADC_ConfigChannel+0x644>
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	fa93 f3a3 	rbit	r3, r3
 80050dc:	61fb      	str	r3, [r7, #28]
  return result;
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80050e8:	2320      	movs	r3, #32
 80050ea:	e003      	b.n	80050f4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	fab3 f383 	clz	r3, r3
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	3301      	adds	r3, #1
 80050f6:	f003 031f 	and.w	r3, r3, #31
 80050fa:	2101      	movs	r1, #1
 80050fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005100:	ea42 0103 	orr.w	r1, r2, r3
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10d      	bne.n	800512c <HAL_ADC_ConfigChannel+0x670>
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	0e9b      	lsrs	r3, r3, #26
 8005116:	3301      	adds	r3, #1
 8005118:	f003 021f 	and.w	r2, r3, #31
 800511c:	4613      	mov	r3, r2
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	4413      	add	r3, r2
 8005122:	3b1e      	subs	r3, #30
 8005124:	051b      	lsls	r3, r3, #20
 8005126:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800512a:	e01b      	b.n	8005164 <HAL_ADC_ConfigChannel+0x6a8>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	fa93 f3a3 	rbit	r3, r3
 8005138:	613b      	str	r3, [r7, #16]
  return result;
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005144:	2320      	movs	r3, #32
 8005146:	e003      	b.n	8005150 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	fab3 f383 	clz	r3, r3
 800514e:	b2db      	uxtb	r3, r3
 8005150:	3301      	adds	r3, #1
 8005152:	f003 021f 	and.w	r2, r3, #31
 8005156:	4613      	mov	r3, r2
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	4413      	add	r3, r2
 800515c:	3b1e      	subs	r3, #30
 800515e:	051b      	lsls	r3, r3, #20
 8005160:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005164:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800516a:	4619      	mov	r1, r3
 800516c:	f7ff f8cf 	bl	800430e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	4b09      	ldr	r3, [pc, #36]	@ (800519c <HAL_ADC_ConfigChannel+0x6e0>)
 8005176:	4013      	ands	r3, r2
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 80be 	beq.w	80052fa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005186:	d004      	beq.n	8005192 <HAL_ADC_ConfigChannel+0x6d6>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a04      	ldr	r2, [pc, #16]	@ (80051a0 <HAL_ADC_ConfigChannel+0x6e4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d10a      	bne.n	80051a8 <HAL_ADC_ConfigChannel+0x6ec>
 8005192:	4b04      	ldr	r3, [pc, #16]	@ (80051a4 <HAL_ADC_ConfigChannel+0x6e8>)
 8005194:	e009      	b.n	80051aa <HAL_ADC_ConfigChannel+0x6ee>
 8005196:	bf00      	nop
 8005198:	407f0000 	.word	0x407f0000
 800519c:	80080000 	.word	0x80080000
 80051a0:	50000100 	.word	0x50000100
 80051a4:	50000300 	.word	0x50000300
 80051a8:	4b59      	ldr	r3, [pc, #356]	@ (8005310 <HAL_ADC_ConfigChannel+0x854>)
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fe ffc4 	bl	8004138 <LL_ADC_GetCommonPathInternalCh>
 80051b0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a56      	ldr	r2, [pc, #344]	@ (8005314 <HAL_ADC_ConfigChannel+0x858>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d004      	beq.n	80051c8 <HAL_ADC_ConfigChannel+0x70c>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a55      	ldr	r2, [pc, #340]	@ (8005318 <HAL_ADC_ConfigChannel+0x85c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d13a      	bne.n	800523e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80051cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d134      	bne.n	800523e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051dc:	d005      	beq.n	80051ea <HAL_ADC_ConfigChannel+0x72e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a4e      	ldr	r2, [pc, #312]	@ (800531c <HAL_ADC_ConfigChannel+0x860>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	f040 8085 	bne.w	80052f4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051f2:	d004      	beq.n	80051fe <HAL_ADC_ConfigChannel+0x742>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a49      	ldr	r2, [pc, #292]	@ (8005320 <HAL_ADC_ConfigChannel+0x864>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d101      	bne.n	8005202 <HAL_ADC_ConfigChannel+0x746>
 80051fe:	4a49      	ldr	r2, [pc, #292]	@ (8005324 <HAL_ADC_ConfigChannel+0x868>)
 8005200:	e000      	b.n	8005204 <HAL_ADC_ConfigChannel+0x748>
 8005202:	4a43      	ldr	r2, [pc, #268]	@ (8005310 <HAL_ADC_ConfigChannel+0x854>)
 8005204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005208:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800520c:	4619      	mov	r1, r3
 800520e:	4610      	mov	r0, r2
 8005210:	f7fe ff7f 	bl	8004112 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005214:	4b44      	ldr	r3, [pc, #272]	@ (8005328 <HAL_ADC_ConfigChannel+0x86c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	099b      	lsrs	r3, r3, #6
 800521a:	4a44      	ldr	r2, [pc, #272]	@ (800532c <HAL_ADC_ConfigChannel+0x870>)
 800521c:	fba2 2303 	umull	r2, r3, r2, r3
 8005220:	099b      	lsrs	r3, r3, #6
 8005222:	1c5a      	adds	r2, r3, #1
 8005224:	4613      	mov	r3, r2
 8005226:	005b      	lsls	r3, r3, #1
 8005228:	4413      	add	r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800522e:	e002      	b.n	8005236 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	3b01      	subs	r3, #1
 8005234:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f9      	bne.n	8005230 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800523c:	e05a      	b.n	80052f4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a3b      	ldr	r2, [pc, #236]	@ (8005330 <HAL_ADC_ConfigChannel+0x874>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d125      	bne.n	8005294 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800524c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d11f      	bne.n	8005294 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a31      	ldr	r2, [pc, #196]	@ (8005320 <HAL_ADC_ConfigChannel+0x864>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d104      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x7ac>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a34      	ldr	r2, [pc, #208]	@ (8005334 <HAL_ADC_ConfigChannel+0x878>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d047      	beq.n	80052f8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005270:	d004      	beq.n	800527c <HAL_ADC_ConfigChannel+0x7c0>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a2a      	ldr	r2, [pc, #168]	@ (8005320 <HAL_ADC_ConfigChannel+0x864>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d101      	bne.n	8005280 <HAL_ADC_ConfigChannel+0x7c4>
 800527c:	4a29      	ldr	r2, [pc, #164]	@ (8005324 <HAL_ADC_ConfigChannel+0x868>)
 800527e:	e000      	b.n	8005282 <HAL_ADC_ConfigChannel+0x7c6>
 8005280:	4a23      	ldr	r2, [pc, #140]	@ (8005310 <HAL_ADC_ConfigChannel+0x854>)
 8005282:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800528a:	4619      	mov	r1, r3
 800528c:	4610      	mov	r0, r2
 800528e:	f7fe ff40 	bl	8004112 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005292:	e031      	b.n	80052f8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a27      	ldr	r2, [pc, #156]	@ (8005338 <HAL_ADC_ConfigChannel+0x87c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d12d      	bne.n	80052fa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800529e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d127      	bne.n	80052fa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005320 <HAL_ADC_ConfigChannel+0x864>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d022      	beq.n	80052fa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052bc:	d004      	beq.n	80052c8 <HAL_ADC_ConfigChannel+0x80c>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a17      	ldr	r2, [pc, #92]	@ (8005320 <HAL_ADC_ConfigChannel+0x864>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d101      	bne.n	80052cc <HAL_ADC_ConfigChannel+0x810>
 80052c8:	4a16      	ldr	r2, [pc, #88]	@ (8005324 <HAL_ADC_ConfigChannel+0x868>)
 80052ca:	e000      	b.n	80052ce <HAL_ADC_ConfigChannel+0x812>
 80052cc:	4a10      	ldr	r2, [pc, #64]	@ (8005310 <HAL_ADC_ConfigChannel+0x854>)
 80052ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80052d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80052d6:	4619      	mov	r1, r3
 80052d8:	4610      	mov	r0, r2
 80052da:	f7fe ff1a 	bl	8004112 <LL_ADC_SetCommonPathInternalCh>
 80052de:	e00c      	b.n	80052fa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052e4:	f043 0220 	orr.w	r2, r3, #32
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80052f2:	e002      	b.n	80052fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80052f4:	bf00      	nop
 80052f6:	e000      	b.n	80052fa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80052f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005302:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005306:	4618      	mov	r0, r3
 8005308:	37d8      	adds	r7, #216	@ 0xd8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
 800530e:	bf00      	nop
 8005310:	50000700 	.word	0x50000700
 8005314:	c3210000 	.word	0xc3210000
 8005318:	90c00010 	.word	0x90c00010
 800531c:	50000600 	.word	0x50000600
 8005320:	50000100 	.word	0x50000100
 8005324:	50000300 	.word	0x50000300
 8005328:	2000001c 	.word	0x2000001c
 800532c:	053e2d63 	.word	0x053e2d63
 8005330:	c7520000 	.word	0xc7520000
 8005334:	50000500 	.word	0x50000500
 8005338:	cb840000 	.word	0xcb840000

0800533c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005344:	2300      	movs	r3, #0
 8005346:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f7ff f8b1 	bl	80044b4 <LL_ADC_IsEnabled>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d176      	bne.n	8005446 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	4b3c      	ldr	r3, [pc, #240]	@ (8005450 <ADC_Enable+0x114>)
 8005360:	4013      	ands	r3, r2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800536a:	f043 0210 	orr.w	r2, r3, #16
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005376:	f043 0201 	orr.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e062      	b.n	8005448 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff f86c 	bl	8004464 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005394:	d004      	beq.n	80053a0 <ADC_Enable+0x64>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a2e      	ldr	r2, [pc, #184]	@ (8005454 <ADC_Enable+0x118>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d101      	bne.n	80053a4 <ADC_Enable+0x68>
 80053a0:	4b2d      	ldr	r3, [pc, #180]	@ (8005458 <ADC_Enable+0x11c>)
 80053a2:	e000      	b.n	80053a6 <ADC_Enable+0x6a>
 80053a4:	4b2d      	ldr	r3, [pc, #180]	@ (800545c <ADC_Enable+0x120>)
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fe fec6 	bl	8004138 <LL_ADC_GetCommonPathInternalCh>
 80053ac:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80053ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d013      	beq.n	80053de <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005460 <ADC_Enable+0x124>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	099b      	lsrs	r3, r3, #6
 80053bc:	4a29      	ldr	r2, [pc, #164]	@ (8005464 <ADC_Enable+0x128>)
 80053be:	fba2 2303 	umull	r2, r3, r2, r3
 80053c2:	099b      	lsrs	r3, r3, #6
 80053c4:	1c5a      	adds	r2, r3, #1
 80053c6:	4613      	mov	r3, r2
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80053d0:	e002      	b.n	80053d8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f9      	bne.n	80053d2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80053de:	f7fe fe57 	bl	8004090 <HAL_GetTick>
 80053e2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053e4:	e028      	b.n	8005438 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f7ff f862 	bl	80044b4 <LL_ADC_IsEnabled>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff f832 	bl	8004464 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005400:	f7fe fe46 	bl	8004090 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d914      	bls.n	8005438 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b01      	cmp	r3, #1
 800541a:	d00d      	beq.n	8005438 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005420:	f043 0210 	orr.w	r2, r3, #16
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800542c:	f043 0201 	orr.w	r2, r3, #1
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e007      	b.n	8005448 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	2b01      	cmp	r3, #1
 8005444:	d1cf      	bne.n	80053e6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	8000003f 	.word	0x8000003f
 8005454:	50000100 	.word	0x50000100
 8005458:	50000300 	.word	0x50000300
 800545c:	50000700 	.word	0x50000700
 8005460:	2000001c 	.word	0x2000001c
 8005464:	053e2d63 	.word	0x053e2d63

08005468 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4618      	mov	r0, r3
 8005476:	f7ff f830 	bl	80044da <LL_ADC_IsDisableOngoing>
 800547a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff f817 	bl	80044b4 <LL_ADC_IsEnabled>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d047      	beq.n	800551c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d144      	bne.n	800551c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 030d 	and.w	r3, r3, #13
 800549c:	2b01      	cmp	r3, #1
 800549e:	d10c      	bne.n	80054ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fe fff1 	bl	800448c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2203      	movs	r2, #3
 80054b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80054b2:	f7fe fded 	bl	8004090 <HAL_GetTick>
 80054b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054b8:	e029      	b.n	800550e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054be:	f043 0210 	orr.w	r2, r3, #16
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ca:	f043 0201 	orr.w	r2, r3, #1
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e023      	b.n	800551e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80054d6:	f7fe fddb 	bl	8004090 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d914      	bls.n	800550e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00d      	beq.n	800550e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054f6:	f043 0210 	orr.w	r2, r3, #16
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005502:	f043 0201 	orr.w	r2, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e007      	b.n	800551e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1dc      	bne.n	80054d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005532:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005538:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800553c:	2b00      	cmp	r3, #0
 800553e:	d14b      	bne.n	80055d8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005544:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d021      	beq.n	800559e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe fe96 	bl	8004290 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	d032      	beq.n	80055d0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d12b      	bne.n	80055d0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800557c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005588:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d11f      	bne.n	80055d0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005594:	f043 0201 	orr.w	r2, r3, #1
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800559c:	e018      	b.n	80055d0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d111      	bne.n	80055d0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d105      	bne.n	80055d0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055c8:	f043 0201 	orr.w	r2, r3, #1
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80055d0:	68f8      	ldr	r0, [r7, #12]
 80055d2:	f7fc fe97 	bl	8002304 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80055d6:	e00e      	b.n	80055f6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d003      	beq.n	80055ec <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f7ff fa5f 	bl	8004aa8 <HAL_ADC_ErrorCallback>
}
 80055ea:	e004      	b.n	80055f6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
}
 80055f6:	bf00      	nop
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}

080055fe <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800560a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f7ff fa41 	bl	8004a94 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}

0800561a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800561a:	b580      	push	{r7, lr}
 800561c:	b084      	sub	sp, #16
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005626:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800562c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005638:	f043 0204 	orr.w	r2, r3, #4
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005640:	68f8      	ldr	r0, [r7, #12]
 8005642:	f7ff fa31 	bl	8004aa8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005646:	bf00      	nop
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <LL_ADC_IsEnabled>:
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b01      	cmp	r3, #1
 8005660:	d101      	bne.n	8005666 <LL_ADC_IsEnabled+0x18>
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <LL_ADC_IsEnabled+0x1a>
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <LL_ADC_StartCalibration>:
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005686:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005690:	4313      	orrs	r3, r2
 8005692:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	609a      	str	r2, [r3, #8]
}
 800569a:	bf00      	nop
 800569c:	370c      	adds	r7, #12
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <LL_ADC_IsCalibrationOnGoing>:
{
 80056a6:	b480      	push	{r7}
 80056a8:	b083      	sub	sp, #12
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056ba:	d101      	bne.n	80056c0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80056bc:	2301      	movs	r3, #1
 80056be:	e000      	b.n	80056c2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80056c0:	2300      	movs	r3, #0
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr

080056ce <LL_ADC_REG_IsConversionOngoing>:
{
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 0304 	and.w	r3, r3, #4
 80056de:	2b04      	cmp	r3, #4
 80056e0:	d101      	bne.n	80056e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80056e2:	2301      	movs	r3, #1
 80056e4:	e000      	b.n	80056e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80056fe:	2300      	movs	r3, #0
 8005700:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_ADCEx_Calibration_Start+0x1c>
 800570c:	2302      	movs	r3, #2
 800570e:	e04d      	b.n	80057ac <HAL_ADCEx_Calibration_Start+0xb8>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7ff fea5 	bl	8005468 <ADC_Disable>
 800571e:	4603      	mov	r3, r0
 8005720:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d136      	bne.n	8005796 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800572c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005730:	f023 0302 	bic.w	r3, r3, #2
 8005734:	f043 0202 	orr.w	r2, r3, #2
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff ff96 	bl	8005674 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005748:	e014      	b.n	8005774 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	3301      	adds	r3, #1
 800574e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4a18      	ldr	r2, [pc, #96]	@ (80057b4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d90d      	bls.n	8005774 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800575c:	f023 0312 	bic.w	r3, r3, #18
 8005760:	f043 0210 	orr.w	r2, r3, #16
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e01b      	b.n	80057ac <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4618      	mov	r0, r3
 800577a:	f7ff ff94 	bl	80056a6 <LL_ADC_IsCalibrationOnGoing>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1e2      	bne.n	800574a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005788:	f023 0303 	bic.w	r3, r3, #3
 800578c:	f043 0201 	orr.w	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005794:	e005      	b.n	80057a2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579a:	f043 0210 	orr.w	r2, r3, #16
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80057aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	0004de01 	.word	0x0004de01

080057b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80057b8:	b590      	push	{r4, r7, lr}
 80057ba:	b0a1      	sub	sp, #132	@ 0x84
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e0e7      	b.n	80059a6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80057de:	2300      	movs	r3, #0
 80057e0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80057e2:	2300      	movs	r3, #0
 80057e4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057ee:	d102      	bne.n	80057f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80057f0:	4b6f      	ldr	r3, [pc, #444]	@ (80059b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	e009      	b.n	800580a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a6e      	ldr	r2, [pc, #440]	@ (80059b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d102      	bne.n	8005806 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005800:	4b6d      	ldr	r3, [pc, #436]	@ (80059b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005802:	60bb      	str	r3, [r7, #8]
 8005804:	e001      	b.n	800580a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005806:	2300      	movs	r3, #0
 8005808:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10b      	bne.n	8005828 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005814:	f043 0220 	orr.w	r2, r3, #32
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e0be      	b.n	80059a6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff ff4f 	bl	80056ce <LL_ADC_REG_IsConversionOngoing>
 8005830:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4618      	mov	r0, r3
 8005838:	f7ff ff49 	bl	80056ce <LL_ADC_REG_IsConversionOngoing>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	f040 80a0 	bne.w	8005984 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005846:	2b00      	cmp	r3, #0
 8005848:	f040 809c 	bne.w	8005984 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005854:	d004      	beq.n	8005860 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a55      	ldr	r2, [pc, #340]	@ (80059b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d101      	bne.n	8005864 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005860:	4b56      	ldr	r3, [pc, #344]	@ (80059bc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005862:	e000      	b.n	8005866 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005864:	4b56      	ldr	r3, [pc, #344]	@ (80059c0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005866:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d04b      	beq.n	8005908 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005870:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	6859      	ldr	r1, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005882:	035b      	lsls	r3, r3, #13
 8005884:	430b      	orrs	r3, r1
 8005886:	431a      	orrs	r2, r3
 8005888:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800588a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005894:	d004      	beq.n	80058a0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a45      	ldr	r2, [pc, #276]	@ (80059b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d10f      	bne.n	80058c0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80058a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80058a4:	f7ff fed3 	bl	800564e <LL_ADC_IsEnabled>
 80058a8:	4604      	mov	r4, r0
 80058aa:	4841      	ldr	r0, [pc, #260]	@ (80059b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80058ac:	f7ff fecf 	bl	800564e <LL_ADC_IsEnabled>
 80058b0:	4603      	mov	r3, r0
 80058b2:	4323      	orrs	r3, r4
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bf0c      	ite	eq
 80058b8:	2301      	moveq	r3, #1
 80058ba:	2300      	movne	r3, #0
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	e012      	b.n	80058e6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80058c0:	483c      	ldr	r0, [pc, #240]	@ (80059b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80058c2:	f7ff fec4 	bl	800564e <LL_ADC_IsEnabled>
 80058c6:	4604      	mov	r4, r0
 80058c8:	483b      	ldr	r0, [pc, #236]	@ (80059b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80058ca:	f7ff fec0 	bl	800564e <LL_ADC_IsEnabled>
 80058ce:	4603      	mov	r3, r0
 80058d0:	431c      	orrs	r4, r3
 80058d2:	483c      	ldr	r0, [pc, #240]	@ (80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80058d4:	f7ff febb 	bl	800564e <LL_ADC_IsEnabled>
 80058d8:	4603      	mov	r3, r0
 80058da:	4323      	orrs	r3, r4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	bf0c      	ite	eq
 80058e0:	2301      	moveq	r3, #1
 80058e2:	2300      	movne	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d056      	beq.n	8005998 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80058ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80058f2:	f023 030f 	bic.w	r3, r3, #15
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	6811      	ldr	r1, [r2, #0]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	6892      	ldr	r2, [r2, #8]
 80058fe:	430a      	orrs	r2, r1
 8005900:	431a      	orrs	r2, r3
 8005902:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005904:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005906:	e047      	b.n	8005998 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005908:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005910:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005912:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800591c:	d004      	beq.n	8005928 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a23      	ldr	r2, [pc, #140]	@ (80059b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d10f      	bne.n	8005948 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005928:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800592c:	f7ff fe8f 	bl	800564e <LL_ADC_IsEnabled>
 8005930:	4604      	mov	r4, r0
 8005932:	481f      	ldr	r0, [pc, #124]	@ (80059b0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005934:	f7ff fe8b 	bl	800564e <LL_ADC_IsEnabled>
 8005938:	4603      	mov	r3, r0
 800593a:	4323      	orrs	r3, r4
 800593c:	2b00      	cmp	r3, #0
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	e012      	b.n	800596e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005948:	481a      	ldr	r0, [pc, #104]	@ (80059b4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800594a:	f7ff fe80 	bl	800564e <LL_ADC_IsEnabled>
 800594e:	4604      	mov	r4, r0
 8005950:	4819      	ldr	r0, [pc, #100]	@ (80059b8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005952:	f7ff fe7c 	bl	800564e <LL_ADC_IsEnabled>
 8005956:	4603      	mov	r3, r0
 8005958:	431c      	orrs	r4, r3
 800595a:	481a      	ldr	r0, [pc, #104]	@ (80059c4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800595c:	f7ff fe77 	bl	800564e <LL_ADC_IsEnabled>
 8005960:	4603      	mov	r3, r0
 8005962:	4323      	orrs	r3, r4
 8005964:	2b00      	cmp	r3, #0
 8005966:	bf0c      	ite	eq
 8005968:	2301      	moveq	r3, #1
 800596a:	2300      	movne	r3, #0
 800596c:	b2db      	uxtb	r3, r3
 800596e:	2b00      	cmp	r3, #0
 8005970:	d012      	beq.n	8005998 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005972:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800597a:	f023 030f 	bic.w	r3, r3, #15
 800597e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005980:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005982:	e009      	b.n	8005998 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005988:	f043 0220 	orr.w	r2, r3, #32
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005996:	e000      	b.n	800599a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005998:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80059a2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3784      	adds	r7, #132	@ 0x84
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd90      	pop	{r4, r7, pc}
 80059ae:	bf00      	nop
 80059b0:	50000100 	.word	0x50000100
 80059b4:	50000400 	.word	0x50000400
 80059b8:	50000500 	.word	0x50000500
 80059bc:	50000300 	.word	0x50000300
 80059c0:	50000700 	.word	0x50000700
 80059c4:	50000600 	.word	0x50000600

080059c8 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e023      	b.n	8005a22 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fd fec8 	bl	8003784 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_CORDIC_CalculateCpltCallback>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
__weak void HAL_CORDIC_CalculateCpltCallback(CORDIC_HandleTypeDef *hcordic)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  UNUSED(hcordic);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_CORDIC_CalculateCpltCallback can be implemented in the user file
   */
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <HAL_CORDIC_IRQHandler>:
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure that contains
  *         the configuration information for CORDIC module
  * @retval None
  */
void HAL_CORDIC_IRQHandler(CORDIC_HandleTypeDef *hcordic)
{
 8005a3e:	b580      	push	{r7, lr}
 8005a40:	b082      	sub	sp, #8
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  /* Check if calculation complete interrupt is enabled and if result ready
     flag is raised */
  if (__HAL_CORDIC_GET_IT_SOURCE(hcordic, CORDIC_IT_IEN) != 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d039      	beq.n	8005ac8 <HAL_CORDIC_IRQHandler+0x8a>
  {
    if (__HAL_CORDIC_GET_FLAG(hcordic, CORDIC_FLAG_RRDY) != 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a62:	d101      	bne.n	8005a68 <HAL_CORDIC_IRQHandler+0x2a>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <HAL_CORDIC_IRQHandler+0x2c>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d02c      	beq.n	8005ac8 <HAL_CORDIC_IRQHandler+0x8a>
    {
      /* Decrement number of calculations to get */
      hcordic->NbCalcToGet--;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	1e5a      	subs	r2, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	611a      	str	r2, [r3, #16]

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &(hcordic->pOutBuff));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	3308      	adds	r3, #8
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f84f 	bl	8005b22 <CORDIC_ReadOutDataIncrementPtr>

      /* Check if calculations are still to be ordered */
      if (hcordic->NbCalcToOrder > 0U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <HAL_CORDIC_IRQHandler+0x64>
      {
        /* Decrement number of calculations to order */
        hcordic->NbCalcToOrder--;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	1e5a      	subs	r2, r3, #1
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	60da      	str	r2, [r3, #12]

        /* Continue the processing by providing another write of input data
           in the Write Data register, and increment input buffer pointer */
        CORDIC_WriteInDataIncrementPtr(hcordic, &(hcordic->pInBuff));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f817 	bl	8005ad0 <CORDIC_WriteInDataIncrementPtr>
      }

      /* Check if all calculations results are got */
      if (hcordic->NbCalcToGet == 0U)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d10e      	bne.n	8005ac8 <HAL_CORDIC_IRQHandler+0x8a>
      {
        /* Disable Result Ready Interrupt */
        __HAL_CORDIC_DISABLE_IT(hcordic, CORDIC_IT_IEN);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005ab8:	601a      	str	r2, [r3, #0]

        /* Change the CORDIC state */
        hcordic->State = HAL_CORDIC_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
#if USE_HAL_CORDIC_REGISTER_CALLBACKS == 1
        /*Call registered callback*/
        hcordic->CalculateCpltCallback(hcordic);
#else
        /*Call legacy weak callback*/
        HAL_CORDIC_CalculateCpltCallback(hcordic);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff ffb1 	bl	8005a2a <HAL_CORDIC_CalculateCpltCallback>
#endif /* USE_HAL_CORDIC_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005ac8:	bf00      	nop
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	1d1a      	adds	r2, r3, #4
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005afa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005afe:	d10a      	bne.n	8005b16 <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	1d1a      	adds	r2, r3, #4
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	601a      	str	r2, [r3, #0]
  }
}
 8005b16:	bf00      	nop
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b083      	sub	sp, #12
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689a      	ldr	r2, [r3, #8]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	1d1a      	adds	r2, r3, #4
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b4c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005b50:	d10a      	bne.n	8005b68 <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	1d1a      	adds	r2, r3, #4
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	601a      	str	r2, [r3, #0]
  }
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f003 0307 	and.w	r3, r3, #7
 8005b82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005b84:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005b90:	4013      	ands	r3, r2
 8005b92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005ba6:	4a04      	ldr	r2, [pc, #16]	@ (8005bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	60d3      	str	r3, [r2, #12]
}
 8005bac:	bf00      	nop
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	e000ed00 	.word	0xe000ed00

08005bbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bc0:	4b04      	ldr	r3, [pc, #16]	@ (8005bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	0a1b      	lsrs	r3, r3, #8
 8005bc6:	f003 0307 	and.w	r3, r3, #7
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr
 8005bd4:	e000ed00 	.word	0xe000ed00

08005bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	4603      	mov	r3, r0
 8005be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	db0b      	blt.n	8005c02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	f003 021f 	and.w	r2, r3, #31
 8005bf0:	4907      	ldr	r1, [pc, #28]	@ (8005c10 <__NVIC_EnableIRQ+0x38>)
 8005bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	2001      	movs	r0, #1
 8005bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8005bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	e000e100 	.word	0xe000e100

08005c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	6039      	str	r1, [r7, #0]
 8005c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	db0a      	blt.n	8005c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	490c      	ldr	r1, [pc, #48]	@ (8005c60 <__NVIC_SetPriority+0x4c>)
 8005c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c32:	0112      	lsls	r2, r2, #4
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	440b      	add	r3, r1
 8005c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c3c:	e00a      	b.n	8005c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	4908      	ldr	r1, [pc, #32]	@ (8005c64 <__NVIC_SetPriority+0x50>)
 8005c44:	79fb      	ldrb	r3, [r7, #7]
 8005c46:	f003 030f 	and.w	r3, r3, #15
 8005c4a:	3b04      	subs	r3, #4
 8005c4c:	0112      	lsls	r2, r2, #4
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	440b      	add	r3, r1
 8005c52:	761a      	strb	r2, [r3, #24]
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr
 8005c60:	e000e100 	.word	0xe000e100
 8005c64:	e000ed00 	.word	0xe000ed00

08005c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b089      	sub	sp, #36	@ 0x24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	f1c3 0307 	rsb	r3, r3, #7
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	bf28      	it	cs
 8005c86:	2304      	movcs	r3, #4
 8005c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	2b06      	cmp	r3, #6
 8005c90:	d902      	bls.n	8005c98 <NVIC_EncodePriority+0x30>
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	3b03      	subs	r3, #3
 8005c96:	e000      	b.n	8005c9a <NVIC_EncodePriority+0x32>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	43da      	mvns	r2, r3
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	401a      	ands	r2, r3
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cba:	43d9      	mvns	r1, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cc0:	4313      	orrs	r3, r2
         );
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3724      	adds	r7, #36	@ 0x24
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
	...

08005cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ce0:	d301      	bcc.n	8005ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e00f      	b.n	8005d06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8005d10 <SysTick_Config+0x40>)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005cee:	210f      	movs	r1, #15
 8005cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf4:	f7ff ff8e 	bl	8005c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cf8:	4b05      	ldr	r3, [pc, #20]	@ (8005d10 <SysTick_Config+0x40>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cfe:	4b04      	ldr	r3, [pc, #16]	@ (8005d10 <SysTick_Config+0x40>)
 8005d00:	2207      	movs	r2, #7
 8005d02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	e000e010 	.word	0xe000e010

08005d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff ff29 	bl	8005b74 <__NVIC_SetPriorityGrouping>
}
 8005d22:	bf00      	nop
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b086      	sub	sp, #24
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	4603      	mov	r3, r0
 8005d32:	60b9      	str	r1, [r7, #8]
 8005d34:	607a      	str	r2, [r7, #4]
 8005d36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005d38:	f7ff ff40 	bl	8005bbc <__NVIC_GetPriorityGrouping>
 8005d3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	68b9      	ldr	r1, [r7, #8]
 8005d42:	6978      	ldr	r0, [r7, #20]
 8005d44:	f7ff ff90 	bl	8005c68 <NVIC_EncodePriority>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d4e:	4611      	mov	r1, r2
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff ff5f 	bl	8005c14 <__NVIC_SetPriority>
}
 8005d56:	bf00      	nop
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b082      	sub	sp, #8
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	4603      	mov	r3, r0
 8005d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7ff ff33 	bl	8005bd8 <__NVIC_EnableIRQ>
}
 8005d72:	bf00      	nop
 8005d74:	3708      	adds	r7, #8
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b082      	sub	sp, #8
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff ffa4 	bl	8005cd0 <SysTick_Config>
 8005d88:	4603      	mov	r3, r0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3708      	adds	r7, #8
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e014      	b.n	8005dce <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	791b      	ldrb	r3, [r3, #4]
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d105      	bne.n	8005dba <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7fd fd0b 	bl	80037d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2202      	movs	r2, #2
 8005dbe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e056      	b.n	8005e9a <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	795b      	ldrb	r3, [r3, #5]
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_DAC_Start+0x20>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e050      	b.n	8005e9a <HAL_DAC_Start+0xc2>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2202      	movs	r2, #2
 8005e02:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6819      	ldr	r1, [r3, #0]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	f003 0310 	and.w	r3, r3, #16
 8005e10:	2201      	movs	r2, #1
 8005e12:	409a      	lsls	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	430a      	orrs	r2, r1
 8005e1a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005e1c:	4b22      	ldr	r3, [pc, #136]	@ (8005ea8 <HAL_DAC_Start+0xd0>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	099b      	lsrs	r3, r3, #6
 8005e22:	4a22      	ldr	r2, [pc, #136]	@ (8005eac <HAL_DAC_Start+0xd4>)
 8005e24:	fba2 2303 	umull	r2, r3, r2, r3
 8005e28:	099b      	lsrs	r3, r3, #6
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005e2e:	e002      	b.n	8005e36 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1f9      	bne.n	8005e30 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10f      	bne.n	8005e62 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005e4c:	2b02      	cmp	r3, #2
 8005e4e:	d11d      	bne.n	8005e8c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f042 0201 	orr.w	r2, r2, #1
 8005e5e:	605a      	str	r2, [r3, #4]
 8005e60:	e014      	b.n	8005e8c <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	f003 0310 	and.w	r3, r3, #16
 8005e72:	2102      	movs	r1, #2
 8005e74:	fa01 f303 	lsl.w	r3, r1, r3
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d107      	bne.n	8005e8c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f042 0202 	orr.w	r2, r2, #2
 8005e8a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	2000001c 	.word	0x2000001c
 8005eac:	053e2d63 	.word	0x053e2d63

08005eb0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ec6:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d01d      	beq.n	8005f0e <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d018      	beq.n	8005f0e <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2204      	movs	r2, #4
 8005ee0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f043 0201 	orr.w	r2, r3, #1
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005ef6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005f06:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 f854 	bl	8005fb6 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d01d      	beq.n	8005f54 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d018      	beq.n	8005f54 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2204      	movs	r2, #4
 8005f26:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	f043 0202 	orr.w	r2, r3, #2
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8005f3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8005f4c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f9f4 	bl	800633c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005f54:	bf00      	nop
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e018      	b.n	8005faa <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d105      	bne.n	8005f96 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4413      	add	r3, r2
 8005f90:	3308      	adds	r3, #8
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	e004      	b.n	8005fa0 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	3314      	adds	r3, #20
 8005f9e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	371c      	adds	r7, #28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b083      	sub	sp, #12
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
	...

08005fcc <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	@ 0x28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <HAL_DAC_ConfigChannel+0x1c>
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d101      	bne.n	8005fec <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e19e      	b.n	800632a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	795b      	ldrb	r3, [r3, #5]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d101      	bne.n	8005ff8 <HAL_DAC_ConfigChannel+0x2c>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	e198      	b.n	800632a <HAL_DAC_ConfigChannel+0x35e>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2202      	movs	r2, #2
 8006002:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	2b04      	cmp	r3, #4
 800600a:	d17a      	bne.n	8006102 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800600c:	f7fe f840 	bl	8004090 <HAL_GetTick>
 8006010:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d13d      	bne.n	8006094 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006018:	e018      	b.n	800604c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800601a:	f7fe f839 	bl	8004090 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b01      	cmp	r3, #1
 8006026:	d911      	bls.n	800604c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f043 0208 	orr.w	r2, r3, #8
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2203      	movs	r2, #3
 8006046:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e16e      	b.n	800632a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006052:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1df      	bne.n	800601a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006062:	641a      	str	r2, [r3, #64]	@ 0x40
 8006064:	e020      	b.n	80060a8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006066:	f7fe f813 	bl	8004090 <HAL_GetTick>
 800606a:	4602      	mov	r2, r0
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	d90f      	bls.n	8006094 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800607a:	2b00      	cmp	r3, #0
 800607c:	da0a      	bge.n	8006094 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f043 0208 	orr.w	r2, r3, #8
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2203      	movs	r2, #3
 800608e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e14a      	b.n	800632a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800609a:	2b00      	cmp	r3, #0
 800609c:	dbe3      	blt.n	8006066 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80060a6:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f003 0310 	and.w	r3, r3, #16
 80060b4:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80060b8:	fa01 f303 	lsl.w	r3, r1, r3
 80060bc:	43db      	mvns	r3, r3
 80060be:	ea02 0103 	and.w	r1, r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f003 0310 	and.w	r3, r3, #16
 80060cc:	409a      	lsls	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	430a      	orrs	r2, r1
 80060d4:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	21ff      	movs	r1, #255	@ 0xff
 80060e4:	fa01 f303 	lsl.w	r3, r1, r3
 80060e8:	43db      	mvns	r3, r3
 80060ea:	ea02 0103 	and.w	r1, r2, r3
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f003 0310 	and.w	r3, r3, #16
 80060f8:	409a      	lsls	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d11d      	bne.n	8006146 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006110:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f003 0310 	and.w	r3, r3, #16
 8006118:	221f      	movs	r2, #31
 800611a:	fa02 f303 	lsl.w	r3, r2, r3
 800611e:	43db      	mvns	r3, r3
 8006120:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006122:	4013      	ands	r3, r2
 8006124:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f003 0310 	and.w	r3, r3, #16
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	fa02 f303 	lsl.w	r3, r2, r3
 8006138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800613a:	4313      	orrs	r3, r2
 800613c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006144:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800614c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f003 0310 	and.w	r3, r3, #16
 8006154:	2207      	movs	r2, #7
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	43db      	mvns	r3, r3
 800615c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800615e:	4013      	ands	r3, r2
 8006160:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d102      	bne.n	8006170 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800616a:	2300      	movs	r3, #0
 800616c:	623b      	str	r3, [r7, #32]
 800616e:	e00f      	b.n	8006190 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	2b02      	cmp	r3, #2
 8006176:	d102      	bne.n	800617e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006178:	2301      	movs	r3, #1
 800617a:	623b      	str	r3, [r7, #32]
 800617c:	e008      	b.n	8006190 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d102      	bne.n	800618c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006186:	2301      	movs	r3, #1
 8006188:	623b      	str	r3, [r7, #32]
 800618a:	e001      	b.n	8006190 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800618c:	2300      	movs	r3, #0
 800618e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	689a      	ldr	r2, [r3, #8]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	6a3a      	ldr	r2, [r7, #32]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f003 0310 	and.w	r3, r3, #16
 80061a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	43db      	mvns	r3, r3
 80061b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061b2:	4013      	ands	r3, r2
 80061b4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	791b      	ldrb	r3, [r3, #4]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d102      	bne.n	80061c4 <HAL_DAC_ConfigChannel+0x1f8>
 80061be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80061c2:	e000      	b.n	80061c6 <HAL_DAC_ConfigChannel+0x1fa>
 80061c4:	2300      	movs	r3, #0
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f003 0310 	and.w	r3, r3, #16
 80061d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80061d6:	fa02 f303 	lsl.w	r3, r2, r3
 80061da:	43db      	mvns	r3, r3
 80061dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061de:	4013      	ands	r3, r2
 80061e0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	795b      	ldrb	r3, [r3, #5]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d102      	bne.n	80061f0 <HAL_DAC_ConfigChannel+0x224>
 80061ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80061ee:	e000      	b.n	80061f2 <HAL_DAC_ConfigChannel+0x226>
 80061f0:	2300      	movs	r3, #0
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80061f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fa:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80061fe:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	2b02      	cmp	r3, #2
 8006206:	d114      	bne.n	8006232 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006208:	f002 ff7a 	bl	8009100 <HAL_RCC_GetHCLKFreq>
 800620c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	4a48      	ldr	r2, [pc, #288]	@ (8006334 <HAL_DAC_ConfigChannel+0x368>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d904      	bls.n	8006220 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006218:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800621c:	627b      	str	r3, [r7, #36]	@ 0x24
 800621e:	e00f      	b.n	8006240 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4a45      	ldr	r2, [pc, #276]	@ (8006338 <HAL_DAC_ConfigChannel+0x36c>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d90a      	bls.n	800623e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800622e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006230:	e006      	b.n	8006240 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006238:	4313      	orrs	r3, r2
 800623a:	627b      	str	r3, [r7, #36]	@ 0x24
 800623c:	e000      	b.n	8006240 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800623e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f003 0310 	and.w	r3, r3, #16
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	fa02 f303 	lsl.w	r3, r2, r3
 800624c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800624e:	4313      	orrs	r3, r2
 8006250:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006258:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	6819      	ldr	r1, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f003 0310 	and.w	r3, r3, #16
 8006266:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800626a:	fa02 f303 	lsl.w	r3, r2, r3
 800626e:	43da      	mvns	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	400a      	ands	r2, r1
 8006276:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f003 0310 	and.w	r3, r3, #16
 8006286:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	43db      	mvns	r3, r3
 8006290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006292:	4013      	ands	r3, r2
 8006294:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f003 0310 	and.w	r3, r3, #16
 80062a2:	697a      	ldr	r2, [r7, #20]
 80062a4:	fa02 f303 	lsl.w	r3, r2, r3
 80062a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062aa:	4313      	orrs	r3, r2
 80062ac:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6819      	ldr	r1, [r3, #0]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f003 0310 	and.w	r3, r3, #16
 80062c2:	22c0      	movs	r2, #192	@ 0xc0
 80062c4:	fa02 f303 	lsl.w	r3, r2, r3
 80062c8:	43da      	mvns	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	400a      	ands	r2, r1
 80062d0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	089b      	lsrs	r3, r3, #2
 80062d8:	f003 030f 	and.w	r3, r3, #15
 80062dc:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	089b      	lsrs	r3, r3, #2
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f003 0310 	and.w	r3, r3, #16
 80062fc:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8006300:	fa01 f303 	lsl.w	r3, r1, r3
 8006304:	43db      	mvns	r3, r3
 8006306:	ea02 0103 	and.w	r1, r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f003 0310 	and.w	r3, r3, #16
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	409a      	lsls	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006328:	7ffb      	ldrb	r3, [r7, #31]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3728      	adds	r7, #40	@ 0x28
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	09896800 	.word	0x09896800
 8006338:	04c4b400 	.word	0x04c4b400

0800633c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e08d      	b.n	800647e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	461a      	mov	r2, r3
 8006368:	4b47      	ldr	r3, [pc, #284]	@ (8006488 <HAL_DMA_Init+0x138>)
 800636a:	429a      	cmp	r2, r3
 800636c:	d80f      	bhi.n	800638e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	4b45      	ldr	r3, [pc, #276]	@ (800648c <HAL_DMA_Init+0x13c>)
 8006376:	4413      	add	r3, r2
 8006378:	4a45      	ldr	r2, [pc, #276]	@ (8006490 <HAL_DMA_Init+0x140>)
 800637a:	fba2 2303 	umull	r2, r3, r2, r3
 800637e:	091b      	lsrs	r3, r3, #4
 8006380:	009a      	lsls	r2, r3, #2
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a42      	ldr	r2, [pc, #264]	@ (8006494 <HAL_DMA_Init+0x144>)
 800638a:	641a      	str	r2, [r3, #64]	@ 0x40
 800638c:	e00e      	b.n	80063ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	461a      	mov	r2, r3
 8006394:	4b40      	ldr	r3, [pc, #256]	@ (8006498 <HAL_DMA_Init+0x148>)
 8006396:	4413      	add	r3, r2
 8006398:	4a3d      	ldr	r2, [pc, #244]	@ (8006490 <HAL_DMA_Init+0x140>)
 800639a:	fba2 2303 	umull	r2, r3, r2, r3
 800639e:	091b      	lsrs	r3, r3, #4
 80063a0:	009a      	lsls	r2, r3, #2
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a3c      	ldr	r2, [pc, #240]	@ (800649c <HAL_DMA_Init+0x14c>)
 80063aa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80063c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80063d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a1b      	ldr	r3, [r3, #32]
 80063ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f9b6 	bl	8006770 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800640c:	d102      	bne.n	8006414 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800641c:	b2d2      	uxtb	r2, r2
 800641e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006428:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d010      	beq.n	8006454 <HAL_DMA_Init+0x104>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b04      	cmp	r3, #4
 8006438:	d80c      	bhi.n	8006454 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f000 f9d6 	bl	80067ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006450:	605a      	str	r2, [r3, #4]
 8006452:	e008      	b.n	8006466 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	40020407 	.word	0x40020407
 800648c:	bffdfff8 	.word	0xbffdfff8
 8006490:	cccccccd 	.word	0xcccccccd
 8006494:	40020000 	.word	0x40020000
 8006498:	bffdfbf8 	.word	0xbffdfbf8
 800649c:	40020400 	.word	0x40020400

080064a0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
 80064ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d101      	bne.n	80064c0 <HAL_DMA_Start_IT+0x20>
 80064bc:	2302      	movs	r3, #2
 80064be:	e066      	b.n	800658e <HAL_DMA_Start_IT+0xee>
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d155      	bne.n	8006580 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0201 	bic.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	68b9      	ldr	r1, [r7, #8]
 80064f8:	68f8      	ldr	r0, [r7, #12]
 80064fa:	f000 f8fb 	bl	80066f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006502:	2b00      	cmp	r3, #0
 8006504:	d008      	beq.n	8006518 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 020e 	orr.w	r2, r2, #14
 8006514:	601a      	str	r2, [r3, #0]
 8006516:	e00f      	b.n	8006538 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0204 	bic.w	r2, r2, #4
 8006526:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f042 020a 	orr.w	r2, r2, #10
 8006536:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d007      	beq.n	8006556 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006550:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006554:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006568:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800656c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0201 	orr.w	r2, r2, #1
 800657c:	601a      	str	r2, [r3, #0]
 800657e:	e005      	b.n	800658c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006588:	2302      	movs	r3, #2
 800658a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800658c:	7dfb      	ldrb	r3, [r7, #23]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b2:	f003 031f 	and.w	r3, r3, #31
 80065b6:	2204      	movs	r2, #4
 80065b8:	409a      	lsls	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	4013      	ands	r3, r2
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d026      	beq.n	8006610 <HAL_DMA_IRQHandler+0x7a>
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d021      	beq.n	8006610 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0320 	and.w	r3, r3, #32
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d107      	bne.n	80065ea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0204 	bic.w	r2, r2, #4
 80065e8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ee:	f003 021f 	and.w	r2, r3, #31
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f6:	2104      	movs	r1, #4
 80065f8:	fa01 f202 	lsl.w	r2, r1, r2
 80065fc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006602:	2b00      	cmp	r3, #0
 8006604:	d071      	beq.n	80066ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800660e:	e06c      	b.n	80066ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006614:	f003 031f 	and.w	r3, r3, #31
 8006618:	2202      	movs	r2, #2
 800661a:	409a      	lsls	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4013      	ands	r3, r2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d02e      	beq.n	8006682 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d029      	beq.n	8006682 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0320 	and.w	r3, r3, #32
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10b      	bne.n	8006654 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 020a 	bic.w	r2, r2, #10
 800664a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006658:	f003 021f 	and.w	r2, r3, #31
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006660:	2102      	movs	r1, #2
 8006662:	fa01 f202 	lsl.w	r2, r1, r2
 8006666:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006674:	2b00      	cmp	r3, #0
 8006676:	d038      	beq.n	80066ea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006680:	e033      	b.n	80066ea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006686:	f003 031f 	and.w	r3, r3, #31
 800668a:	2208      	movs	r2, #8
 800668c:	409a      	lsls	r2, r3
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	4013      	ands	r3, r2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d02a      	beq.n	80066ec <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f003 0308 	and.w	r3, r3, #8
 800669c:	2b00      	cmp	r3, #0
 800669e:	d025      	beq.n	80066ec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 020e 	bic.w	r2, r2, #14
 80066ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b4:	f003 021f 	and.w	r2, r3, #31
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066bc:	2101      	movs	r1, #1
 80066be:	fa01 f202 	lsl.w	r2, r1, r2
 80066c2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d004      	beq.n	80066ec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80066ea:	bf00      	nop
 80066ec:	bf00      	nop
}
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800670a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006710:	2b00      	cmp	r3, #0
 8006712:	d004      	beq.n	800671e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800671c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006722:	f003 021f 	and.w	r2, r3, #31
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800672a:	2101      	movs	r1, #1
 800672c:	fa01 f202 	lsl.w	r2, r1, r2
 8006730:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	2b10      	cmp	r3, #16
 8006740:	d108      	bne.n	8006754 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	687a      	ldr	r2, [r7, #4]
 8006748:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68ba      	ldr	r2, [r7, #8]
 8006750:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006752:	e007      	b.n	8006764 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	60da      	str	r2, [r3, #12]
}
 8006764:	bf00      	nop
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	461a      	mov	r2, r3
 800677e:	4b16      	ldr	r3, [pc, #88]	@ (80067d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006780:	429a      	cmp	r2, r3
 8006782:	d802      	bhi.n	800678a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006784:	4b15      	ldr	r3, [pc, #84]	@ (80067dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006786:	617b      	str	r3, [r7, #20]
 8006788:	e001      	b.n	800678e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800678a:	4b15      	ldr	r3, [pc, #84]	@ (80067e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800678c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	b2db      	uxtb	r3, r3
 8006798:	3b08      	subs	r3, #8
 800679a:	4a12      	ldr	r2, [pc, #72]	@ (80067e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800679c:	fba2 2303 	umull	r2, r3, r2, r3
 80067a0:	091b      	lsrs	r3, r3, #4
 80067a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a8:	089b      	lsrs	r3, r3, #2
 80067aa:	009a      	lsls	r2, r3, #2
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4413      	add	r3, r2
 80067b0:	461a      	mov	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a0b      	ldr	r2, [pc, #44]	@ (80067e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80067ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f003 031f 	and.w	r3, r3, #31
 80067c2:	2201      	movs	r2, #1
 80067c4:	409a      	lsls	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80067ca:	bf00      	nop
 80067cc:	371c      	adds	r7, #28
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40020407 	.word	0x40020407
 80067dc:	40020800 	.word	0x40020800
 80067e0:	40020820 	.word	0x40020820
 80067e4:	cccccccd 	.word	0xcccccccd
 80067e8:	40020880 	.word	0x40020880

080067ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b085      	sub	sp, #20
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4b0b      	ldr	r3, [pc, #44]	@ (800682c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006800:	4413      	add	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	461a      	mov	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a08      	ldr	r2, [pc, #32]	@ (8006830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800680e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3b01      	subs	r3, #1
 8006814:	f003 031f 	and.w	r3, r3, #31
 8006818:	2201      	movs	r2, #1
 800681a:	409a      	lsls	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006820:	bf00      	nop
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	1000823f 	.word	0x1000823f
 8006830:	40020940 	.word	0x40020940

08006834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006834:	b480      	push	{r7}
 8006836:	b087      	sub	sp, #28
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800683e:	2300      	movs	r3, #0
 8006840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006842:	e15a      	b.n	8006afa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	2101      	movs	r1, #1
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	fa01 f303 	lsl.w	r3, r1, r3
 8006850:	4013      	ands	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 814c 	beq.w	8006af4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f003 0303 	and.w	r3, r3, #3
 8006864:	2b01      	cmp	r3, #1
 8006866:	d005      	beq.n	8006874 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006870:	2b02      	cmp	r3, #2
 8006872:	d130      	bne.n	80068d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	005b      	lsls	r3, r3, #1
 800687e:	2203      	movs	r2, #3
 8006880:	fa02 f303 	lsl.w	r3, r2, r3
 8006884:	43db      	mvns	r3, r3
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4013      	ands	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	005b      	lsls	r3, r3, #1
 8006894:	fa02 f303 	lsl.w	r3, r2, r3
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80068aa:	2201      	movs	r2, #1
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	fa02 f303 	lsl.w	r3, r2, r3
 80068b2:	43db      	mvns	r3, r3
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4013      	ands	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	091b      	lsrs	r3, r3, #4
 80068c0:	f003 0201 	and.w	r2, r3, #1
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f003 0303 	and.w	r3, r3, #3
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d017      	beq.n	8006912 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	2203      	movs	r2, #3
 80068ee:	fa02 f303 	lsl.w	r3, r2, r3
 80068f2:	43db      	mvns	r3, r3
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	4013      	ands	r3, r2
 80068f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	fa02 f303 	lsl.w	r3, r2, r3
 8006906:	693a      	ldr	r2, [r7, #16]
 8006908:	4313      	orrs	r3, r2
 800690a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d123      	bne.n	8006966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	08da      	lsrs	r2, r3, #3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	3208      	adds	r2, #8
 8006926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	f003 0307 	and.w	r3, r3, #7
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	220f      	movs	r2, #15
 8006936:	fa02 f303 	lsl.w	r3, r2, r3
 800693a:	43db      	mvns	r3, r3
 800693c:	693a      	ldr	r2, [r7, #16]
 800693e:	4013      	ands	r3, r2
 8006940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	691a      	ldr	r2, [r3, #16]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	fa02 f303 	lsl.w	r3, r2, r3
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	4313      	orrs	r3, r2
 8006956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	08da      	lsrs	r2, r3, #3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3208      	adds	r2, #8
 8006960:	6939      	ldr	r1, [r7, #16]
 8006962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	2203      	movs	r2, #3
 8006972:	fa02 f303 	lsl.w	r3, r2, r3
 8006976:	43db      	mvns	r3, r3
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4013      	ands	r3, r2
 800697c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	f003 0203 	and.w	r2, r3, #3
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	fa02 f303 	lsl.w	r3, r2, r3
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	4313      	orrs	r3, r2
 8006992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f000 80a6 	beq.w	8006af4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80069a8:	4b5b      	ldr	r3, [pc, #364]	@ (8006b18 <HAL_GPIO_Init+0x2e4>)
 80069aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069ac:	4a5a      	ldr	r2, [pc, #360]	@ (8006b18 <HAL_GPIO_Init+0x2e4>)
 80069ae:	f043 0301 	orr.w	r3, r3, #1
 80069b2:	6613      	str	r3, [r2, #96]	@ 0x60
 80069b4:	4b58      	ldr	r3, [pc, #352]	@ (8006b18 <HAL_GPIO_Init+0x2e4>)
 80069b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	60bb      	str	r3, [r7, #8]
 80069be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80069c0:	4a56      	ldr	r2, [pc, #344]	@ (8006b1c <HAL_GPIO_Init+0x2e8>)
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	089b      	lsrs	r3, r3, #2
 80069c6:	3302      	adds	r3, #2
 80069c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f003 0303 	and.w	r3, r3, #3
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	220f      	movs	r2, #15
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	43db      	mvns	r3, r3
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4013      	ands	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80069ea:	d01f      	beq.n	8006a2c <HAL_GPIO_Init+0x1f8>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a4c      	ldr	r2, [pc, #304]	@ (8006b20 <HAL_GPIO_Init+0x2ec>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d019      	beq.n	8006a28 <HAL_GPIO_Init+0x1f4>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a4b      	ldr	r2, [pc, #300]	@ (8006b24 <HAL_GPIO_Init+0x2f0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d013      	beq.n	8006a24 <HAL_GPIO_Init+0x1f0>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a4a      	ldr	r2, [pc, #296]	@ (8006b28 <HAL_GPIO_Init+0x2f4>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00d      	beq.n	8006a20 <HAL_GPIO_Init+0x1ec>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a49      	ldr	r2, [pc, #292]	@ (8006b2c <HAL_GPIO_Init+0x2f8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d007      	beq.n	8006a1c <HAL_GPIO_Init+0x1e8>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a48      	ldr	r2, [pc, #288]	@ (8006b30 <HAL_GPIO_Init+0x2fc>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d101      	bne.n	8006a18 <HAL_GPIO_Init+0x1e4>
 8006a14:	2305      	movs	r3, #5
 8006a16:	e00a      	b.n	8006a2e <HAL_GPIO_Init+0x1fa>
 8006a18:	2306      	movs	r3, #6
 8006a1a:	e008      	b.n	8006a2e <HAL_GPIO_Init+0x1fa>
 8006a1c:	2304      	movs	r3, #4
 8006a1e:	e006      	b.n	8006a2e <HAL_GPIO_Init+0x1fa>
 8006a20:	2303      	movs	r3, #3
 8006a22:	e004      	b.n	8006a2e <HAL_GPIO_Init+0x1fa>
 8006a24:	2302      	movs	r3, #2
 8006a26:	e002      	b.n	8006a2e <HAL_GPIO_Init+0x1fa>
 8006a28:	2301      	movs	r3, #1
 8006a2a:	e000      	b.n	8006a2e <HAL_GPIO_Init+0x1fa>
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	f002 0203 	and.w	r2, r2, #3
 8006a34:	0092      	lsls	r2, r2, #2
 8006a36:	4093      	lsls	r3, r2
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a3e:	4937      	ldr	r1, [pc, #220]	@ (8006b1c <HAL_GPIO_Init+0x2e8>)
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	089b      	lsrs	r3, r3, #2
 8006a44:	3302      	adds	r3, #2
 8006a46:	693a      	ldr	r2, [r7, #16]
 8006a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006a4c:	4b39      	ldr	r3, [pc, #228]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	43db      	mvns	r3, r3
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d003      	beq.n	8006a70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006a70:	4a30      	ldr	r2, [pc, #192]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006a76:	4b2f      	ldr	r3, [pc, #188]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006a78:	68db      	ldr	r3, [r3, #12]
 8006a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	43db      	mvns	r3, r3
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	4013      	ands	r3, r2
 8006a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d003      	beq.n	8006a9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006a92:	693a      	ldr	r2, [r7, #16]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006a9a:	4a26      	ldr	r2, [pc, #152]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006aa0:	4b24      	ldr	r3, [pc, #144]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	43db      	mvns	r3, r3
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4013      	ands	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006aca:	4b1a      	ldr	r3, [pc, #104]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	43db      	mvns	r3, r3
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006aee:	4a11      	ldr	r2, [pc, #68]	@ (8006b34 <HAL_GPIO_Init+0x300>)
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	3301      	adds	r3, #1
 8006af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	fa22 f303 	lsr.w	r3, r2, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f47f ae9d 	bne.w	8006844 <HAL_GPIO_Init+0x10>
  }
}
 8006b0a:	bf00      	nop
 8006b0c:	bf00      	nop
 8006b0e:	371c      	adds	r7, #28
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	40010000 	.word	0x40010000
 8006b20:	48000400 	.word	0x48000400
 8006b24:	48000800 	.word	0x48000800
 8006b28:	48000c00 	.word	0x48000c00
 8006b2c:	48001000 	.word	0x48001000
 8006b30:	48001400 	.word	0x48001400
 8006b34:	40010400 	.word	0x40010400

08006b38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	460b      	mov	r3, r1
 8006b42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691a      	ldr	r2, [r3, #16]
 8006b48:	887b      	ldrh	r3, [r7, #2]
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d002      	beq.n	8006b56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006b50:	2301      	movs	r3, #1
 8006b52:	73fb      	strb	r3, [r7, #15]
 8006b54:	e001      	b.n	8006b5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3714      	adds	r7, #20
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	807b      	strh	r3, [r7, #2]
 8006b74:	4613      	mov	r3, r2
 8006b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006b78:	787b      	ldrb	r3, [r7, #1]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006b7e:	887a      	ldrh	r2, [r7, #2]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006b84:	e002      	b.n	8006b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006b86:	887a      	ldrh	r2, [r7, #2]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006baa:	887a      	ldrh	r2, [r7, #2]
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	4013      	ands	r3, r2
 8006bb0:	041a      	lsls	r2, r3, #16
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	43d9      	mvns	r1, r3
 8006bb6:	887b      	ldrh	r3, [r7, #2]
 8006bb8:	400b      	ands	r3, r1
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	619a      	str	r2, [r3, #24]
}
 8006bc0:	bf00      	nop
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e0c0      	b.n	8006d60 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d106      	bne.n	8006bf8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f009 fa22 	bl	801003c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2203      	movs	r2, #3
 8006bfc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f005 f856 	bl	800bcb6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73fb      	strb	r3, [r7, #15]
 8006c0e:	e03e      	b.n	8006c8e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c10:	7bfa      	ldrb	r2, [r7, #15]
 8006c12:	6879      	ldr	r1, [r7, #4]
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	440b      	add	r3, r1
 8006c1e:	3311      	adds	r3, #17
 8006c20:	2201      	movs	r2, #1
 8006c22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c24:	7bfa      	ldrb	r2, [r7, #15]
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	00db      	lsls	r3, r3, #3
 8006c30:	440b      	add	r3, r1
 8006c32:	3310      	adds	r3, #16
 8006c34:	7bfa      	ldrb	r2, [r7, #15]
 8006c36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c38:	7bfa      	ldrb	r2, [r7, #15]
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	00db      	lsls	r3, r3, #3
 8006c44:	440b      	add	r3, r1
 8006c46:	3313      	adds	r3, #19
 8006c48:	2200      	movs	r2, #0
 8006c4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c4c:	7bfa      	ldrb	r2, [r7, #15]
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	4613      	mov	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	440b      	add	r3, r1
 8006c5a:	3320      	adds	r3, #32
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c60:	7bfa      	ldrb	r2, [r7, #15]
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	440b      	add	r3, r1
 8006c6e:	3324      	adds	r3, #36	@ 0x24
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	009b      	lsls	r3, r3, #2
 8006c7e:	4413      	add	r3, r2
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	440b      	add	r3, r1
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	73fb      	strb	r3, [r7, #15]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	791b      	ldrb	r3, [r3, #4]
 8006c92:	7bfa      	ldrb	r2, [r7, #15]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d3bb      	bcc.n	8006c10 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c98:	2300      	movs	r3, #0
 8006c9a:	73fb      	strb	r3, [r7, #15]
 8006c9c:	e044      	b.n	8006d28 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c9e:	7bfa      	ldrb	r2, [r7, #15]
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	440b      	add	r3, r1
 8006cac:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006cb4:	7bfa      	ldrb	r2, [r7, #15]
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	00db      	lsls	r3, r3, #3
 8006cc0:	440b      	add	r3, r1
 8006cc2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cc6:	7bfa      	ldrb	r2, [r7, #15]
 8006cc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006cca:	7bfa      	ldrb	r2, [r7, #15]
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	4413      	add	r3, r2
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	440b      	add	r3, r1
 8006cd8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006cdc:	2200      	movs	r2, #0
 8006cde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006ce0:	7bfa      	ldrb	r2, [r7, #15]
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	00db      	lsls	r3, r3, #3
 8006cec:	440b      	add	r3, r1
 8006cee:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006cf6:	7bfa      	ldrb	r2, [r7, #15]
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	4413      	add	r3, r2
 8006d00:	00db      	lsls	r3, r3, #3
 8006d02:	440b      	add	r3, r1
 8006d04:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d0c:	7bfa      	ldrb	r2, [r7, #15]
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	440b      	add	r3, r1
 8006d1a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
 8006d24:	3301      	adds	r3, #1
 8006d26:	73fb      	strb	r3, [r7, #15]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	791b      	ldrb	r3, [r3, #4]
 8006d2c:	7bfa      	ldrb	r2, [r7, #15]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d3b5      	bcc.n	8006c9e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	3304      	adds	r3, #4
 8006d3a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006d3e:	f004 ffd5 	bl	800bcec <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	7a9b      	ldrb	r3, [r3, #10]
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d102      	bne.n	8006d5e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f001 fc42 	bl	80085e2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d101      	bne.n	8006d7e <HAL_PCD_Start+0x16>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e012      	b.n	8006da4 <HAL_PCD_Start+0x3c>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2201      	movs	r2, #1
 8006d82:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f004 ff7c 	bl	800bc88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f007 fa3d 	bl	800e214 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4618      	mov	r0, r3
 8006dba:	f007 fa42 	bl	800e242 <USB_ReadInterrupts>
 8006dbe:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fb06 	bl	80073dc <PCD_EP_ISR_Handler>

    return;
 8006dd0:	e110      	b.n	8006ff4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d013      	beq.n	8006e04 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006dee:	b292      	uxth	r2, r2
 8006df0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f009 f9b2 	bl	801015e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f8fc 	bl	8006ffa <HAL_PCD_SetAddress>

    return;
 8006e02:	e0f7      	b.n	8006ff4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d00c      	beq.n	8006e28 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e16:	b29a      	uxth	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e20:	b292      	uxth	r2, r2
 8006e22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006e26:	e0e5      	b.n	8006ff4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00c      	beq.n	8006e4c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e44:	b292      	uxth	r2, r2
 8006e46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006e4a:	e0d3      	b.n	8006ff4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d034      	beq.n	8006ec0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f022 0204 	bic.w	r2, r2, #4
 8006e68:	b292      	uxth	r2, r2
 8006e6a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f022 0208 	bic.w	r2, r2, #8
 8006e80:	b292      	uxth	r2, r2
 8006e82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d107      	bne.n	8006ea0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006e98:	2100      	movs	r1, #0
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f009 fb52 	bl	8010544 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f009 f995 	bl	80101d0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006eb8:	b292      	uxth	r2, r2
 8006eba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006ebe:	e099      	b.n	8006ff4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d027      	beq.n	8006f1a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f042 0208 	orr.w	r2, r2, #8
 8006edc:	b292      	uxth	r2, r2
 8006ede:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ef4:	b292      	uxth	r2, r2
 8006ef6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f02:	b29a      	uxth	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f042 0204 	orr.w	r2, r2, #4
 8006f0c:	b292      	uxth	r2, r2
 8006f0e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f009 f942 	bl	801019c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006f18:	e06c      	b.n	8006ff4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d040      	beq.n	8006fa6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f36:	b292      	uxth	r2, r2
 8006f38:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d12b      	bne.n	8006f9e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f042 0204 	orr.w	r2, r2, #4
 8006f58:	b292      	uxth	r2, r2
 8006f5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f66:	b29a      	uxth	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f042 0208 	orr.w	r2, r2, #8
 8006f70:	b292      	uxth	r2, r2
 8006f72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	089b      	lsrs	r3, r3, #2
 8006f8a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006f94:	2101      	movs	r1, #1
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f009 fad4 	bl	8010544 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006f9c:	e02a      	b.n	8006ff4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f009 f8fc 	bl	801019c <HAL_PCD_SuspendCallback>
    return;
 8006fa4:	e026      	b.n	8006ff4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00f      	beq.n	8006fd0 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006fc2:	b292      	uxth	r2, r2
 8006fc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f009 f8ba 	bl	8010142 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006fce:	e011      	b.n	8006ff4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00c      	beq.n	8006ff4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fec:	b292      	uxth	r2, r2
 8006fee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006ff2:	bf00      	nop
  }
}
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b082      	sub	sp, #8
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	460b      	mov	r3, r1
 8007004:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800700c:	2b01      	cmp	r3, #1
 800700e:	d101      	bne.n	8007014 <HAL_PCD_SetAddress+0x1a>
 8007010:	2302      	movs	r3, #2
 8007012:	e012      	b.n	800703a <HAL_PCD_SetAddress+0x40>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	78fa      	ldrb	r2, [r7, #3]
 8007020:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	78fa      	ldrb	r2, [r7, #3]
 8007028:	4611      	mov	r1, r2
 800702a:	4618      	mov	r0, r3
 800702c:	f007 f8de 	bl	800e1ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b084      	sub	sp, #16
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	4608      	mov	r0, r1
 800704c:	4611      	mov	r1, r2
 800704e:	461a      	mov	r2, r3
 8007050:	4603      	mov	r3, r0
 8007052:	70fb      	strb	r3, [r7, #3]
 8007054:	460b      	mov	r3, r1
 8007056:	803b      	strh	r3, [r7, #0]
 8007058:	4613      	mov	r3, r2
 800705a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007064:	2b00      	cmp	r3, #0
 8007066:	da0e      	bge.n	8007086 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007068:	78fb      	ldrb	r3, [r7, #3]
 800706a:	f003 0207 	and.w	r2, r3, #7
 800706e:	4613      	mov	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	3310      	adds	r3, #16
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	4413      	add	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2201      	movs	r2, #1
 8007082:	705a      	strb	r2, [r3, #1]
 8007084:	e00e      	b.n	80070a4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	f003 0207 	and.w	r2, r3, #7
 800708c:	4613      	mov	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	00db      	lsls	r3, r3, #3
 8007094:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	4413      	add	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80070a4:	78fb      	ldrb	r3, [r7, #3]
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80070b0:	883b      	ldrh	r3, [r7, #0]
 80070b2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	78ba      	ldrb	r2, [r7, #2]
 80070be:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80070c0:	78bb      	ldrb	r3, [r7, #2]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d102      	bne.n	80070cc <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d101      	bne.n	80070da <HAL_PCD_EP_Open+0x98>
 80070d6:	2302      	movs	r3, #2
 80070d8:	e00e      	b.n	80070f8 <HAL_PCD_EP_Open+0xb6>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68f9      	ldr	r1, [r7, #12]
 80070e8:	4618      	mov	r0, r3
 80070ea:	f004 fe1d 	bl	800bd28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80070f6:	7afb      	ldrb	r3, [r7, #11]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3710      	adds	r7, #16
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	460b      	mov	r3, r1
 800710a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800710c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007110:	2b00      	cmp	r3, #0
 8007112:	da0e      	bge.n	8007132 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	f003 0207 	and.w	r2, r3, #7
 800711a:	4613      	mov	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	3310      	adds	r3, #16
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	4413      	add	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2201      	movs	r2, #1
 800712e:	705a      	strb	r2, [r3, #1]
 8007130:	e00e      	b.n	8007150 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007132:	78fb      	ldrb	r3, [r7, #3]
 8007134:	f003 0207 	and.w	r2, r3, #7
 8007138:	4613      	mov	r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4413      	add	r3, r2
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	4413      	add	r3, r2
 8007148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2200      	movs	r2, #0
 800714e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007150:	78fb      	ldrb	r3, [r7, #3]
 8007152:	f003 0307 	and.w	r3, r3, #7
 8007156:	b2da      	uxtb	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007162:	2b01      	cmp	r3, #1
 8007164:	d101      	bne.n	800716a <HAL_PCD_EP_Close+0x6a>
 8007166:	2302      	movs	r3, #2
 8007168:	e00e      	b.n	8007188 <HAL_PCD_EP_Close+0x88>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68f9      	ldr	r1, [r7, #12]
 8007178:	4618      	mov	r0, r3
 800717a:	f005 f999 	bl	800c4b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	607a      	str	r2, [r7, #4]
 800719a:	603b      	str	r3, [r7, #0]
 800719c:	460b      	mov	r3, r1
 800719e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071a0:	7afb      	ldrb	r3, [r7, #11]
 80071a2:	f003 0207 	and.w	r2, r3, #7
 80071a6:	4613      	mov	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	4413      	add	r3, r2
 80071ac:	00db      	lsls	r3, r3, #3
 80071ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	4413      	add	r3, r2
 80071b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	2200      	movs	r2, #0
 80071c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2200      	movs	r2, #0
 80071ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80071d0:	7afb      	ldrb	r3, [r7, #11]
 80071d2:	f003 0307 	and.w	r3, r3, #7
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6979      	ldr	r1, [r7, #20]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f005 fb51 	bl	800c88a <USB_EPStartXfer>

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3718      	adds	r7, #24
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}

080071f2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
 80071fa:	460b      	mov	r3, r1
 80071fc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80071fe:	78fb      	ldrb	r3, [r7, #3]
 8007200:	f003 0207 	and.w	r2, r3, #7
 8007204:	6879      	ldr	r1, [r7, #4]
 8007206:	4613      	mov	r3, r2
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4413      	add	r3, r2
 800720c:	00db      	lsls	r3, r3, #3
 800720e:	440b      	add	r3, r1
 8007210:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007214:	681b      	ldr	r3, [r3, #0]
}
 8007216:	4618      	mov	r0, r3
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007222:	b580      	push	{r7, lr}
 8007224:	b086      	sub	sp, #24
 8007226:	af00      	add	r7, sp, #0
 8007228:	60f8      	str	r0, [r7, #12]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
 800722e:	460b      	mov	r3, r1
 8007230:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007232:	7afb      	ldrb	r3, [r7, #11]
 8007234:	f003 0207 	and.w	r2, r3, #7
 8007238:	4613      	mov	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	3310      	adds	r3, #16
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	4413      	add	r3, r2
 8007246:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2201      	movs	r2, #1
 8007258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2200      	movs	r2, #0
 8007266:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	2201      	movs	r2, #1
 800726c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800726e:	7afb      	ldrb	r3, [r7, #11]
 8007270:	f003 0307 	and.w	r3, r3, #7
 8007274:	b2da      	uxtb	r2, r3
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6979      	ldr	r1, [r7, #20]
 8007280:	4618      	mov	r0, r3
 8007282:	f005 fb02 	bl	800c88a <USB_EPStartXfer>

  return HAL_OK;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	3718      	adds	r7, #24
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}

08007290 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	460b      	mov	r3, r1
 800729a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800729c:	78fb      	ldrb	r3, [r7, #3]
 800729e:	f003 0307 	and.w	r3, r3, #7
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	7912      	ldrb	r2, [r2, #4]
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d901      	bls.n	80072ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e03e      	b.n	800732c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80072ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	da0e      	bge.n	80072d4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072b6:	78fb      	ldrb	r3, [r7, #3]
 80072b8:	f003 0207 	and.w	r2, r3, #7
 80072bc:	4613      	mov	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	4413      	add	r3, r2
 80072c2:	00db      	lsls	r3, r3, #3
 80072c4:	3310      	adds	r3, #16
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	4413      	add	r3, r2
 80072ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	2201      	movs	r2, #1
 80072d0:	705a      	strb	r2, [r3, #1]
 80072d2:	e00c      	b.n	80072ee <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80072d4:	78fa      	ldrb	r2, [r7, #3]
 80072d6:	4613      	mov	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4413      	add	r3, r2
 80072dc:	00db      	lsls	r3, r3, #3
 80072de:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	4413      	add	r3, r2
 80072e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2200      	movs	r2, #0
 80072ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2201      	movs	r2, #1
 80072f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072f4:	78fb      	ldrb	r3, [r7, #3]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	b2da      	uxtb	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007306:	2b01      	cmp	r3, #1
 8007308:	d101      	bne.n	800730e <HAL_PCD_EP_SetStall+0x7e>
 800730a:	2302      	movs	r3, #2
 800730c:	e00e      	b.n	800732c <HAL_PCD_EP_SetStall+0x9c>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68f9      	ldr	r1, [r7, #12]
 800731c:	4618      	mov	r0, r3
 800731e:	f006 fe66 	bl	800dfee <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2200      	movs	r2, #0
 8007326:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007340:	78fb      	ldrb	r3, [r7, #3]
 8007342:	f003 030f 	and.w	r3, r3, #15
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	7912      	ldrb	r2, [r2, #4]
 800734a:	4293      	cmp	r3, r2
 800734c:	d901      	bls.n	8007352 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e040      	b.n	80073d4 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007356:	2b00      	cmp	r3, #0
 8007358:	da0e      	bge.n	8007378 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	f003 0207 	and.w	r2, r3, #7
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	3310      	adds	r3, #16
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	4413      	add	r3, r2
 800736e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2201      	movs	r2, #1
 8007374:	705a      	strb	r2, [r3, #1]
 8007376:	e00e      	b.n	8007396 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007378:	78fb      	ldrb	r3, [r7, #3]
 800737a:	f003 0207 	and.w	r2, r3, #7
 800737e:	4613      	mov	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	4413      	add	r3, r2
 800738e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2200      	movs	r2, #0
 800739a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800739c:	78fb      	ldrb	r3, [r7, #3]
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	b2da      	uxtb	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_PCD_EP_ClrStall+0x82>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e00e      	b.n	80073d4 <HAL_PCD_EP_ClrStall+0xa0>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68f9      	ldr	r1, [r7, #12]
 80073c4:	4618      	mov	r0, r3
 80073c6:	f006 fe63 	bl	800e090 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3710      	adds	r7, #16
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b096      	sub	sp, #88	@ 0x58
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80073e4:	e3ad      	b.n	8007b42 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80073ee:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80073f2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	f003 030f 	and.w	r3, r3, #15
 80073fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8007400:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007404:	2b00      	cmp	r3, #0
 8007406:	f040 816f 	bne.w	80076e8 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800740a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800740e:	f003 0310 	and.w	r3, r3, #16
 8007412:	2b00      	cmp	r3, #0
 8007414:	d14c      	bne.n	80074b0 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	881b      	ldrh	r3, [r3, #0]
 800741c:	b29b      	uxth	r3, r3
 800741e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007426:	81fb      	strh	r3, [r7, #14]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	89fb      	ldrh	r3, [r7, #14]
 800742e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007436:	b29b      	uxth	r3, r3
 8007438:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3310      	adds	r3, #16
 800743e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007448:	b29b      	uxth	r3, r3
 800744a:	461a      	mov	r2, r3
 800744c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	4413      	add	r3, r2
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	6812      	ldr	r2, [r2, #0]
 8007458:	4413      	add	r3, r2
 800745a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007464:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007466:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800746a:	695a      	ldr	r2, [r3, #20]
 800746c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	441a      	add	r2, r3
 8007472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007474:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007476:	2100      	movs	r1, #0
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f008 fe48 	bl	801010e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	7b1b      	ldrb	r3, [r3, #12]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 835c 	beq.w	8007b42 <PCD_EP_ISR_Handler+0x766>
 800748a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	2b00      	cmp	r3, #0
 8007490:	f040 8357 	bne.w	8007b42 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	7b1b      	ldrb	r3, [r3, #12]
 8007498:	b2db      	uxtb	r3, r3
 800749a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	731a      	strb	r2, [r3, #12]
 80074ae:	e348      	b.n	8007b42 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074b6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80074c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80074c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d032      	beq.n	8007534 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	461a      	mov	r2, r3
 80074da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	00db      	lsls	r3, r3, #3
 80074e0:	4413      	add	r3, r2
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	6812      	ldr	r2, [r2, #0]
 80074e6:	4413      	add	r3, r2
 80074e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80074f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074f4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007502:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007506:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007508:	b29b      	uxth	r3, r3
 800750a:	f006 feec 	bl	800e2e6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	b29a      	uxth	r2, r3
 8007516:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800751a:	4013      	ands	r3, r2
 800751c:	823b      	strh	r3, [r7, #16]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	8a3a      	ldrh	r2, [r7, #16]
 8007524:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007528:	b292      	uxth	r2, r2
 800752a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f008 fdc1 	bl	80100b4 <HAL_PCD_SetupStageCallback>
 8007532:	e306      	b.n	8007b42 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007534:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007538:	2b00      	cmp	r3, #0
 800753a:	f280 8302 	bge.w	8007b42 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	881b      	ldrh	r3, [r3, #0]
 8007544:	b29a      	uxth	r2, r3
 8007546:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800754a:	4013      	ands	r3, r2
 800754c:	83fb      	strh	r3, [r7, #30]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	8bfa      	ldrh	r2, [r7, #30]
 8007554:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007558:	b292      	uxth	r2, r2
 800755a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007564:	b29b      	uxth	r3, r3
 8007566:	461a      	mov	r2, r3
 8007568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	4413      	add	r3, r2
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	6812      	ldr	r2, [r2, #0]
 8007574:	4413      	add	r3, r2
 8007576:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007582:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007584:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d019      	beq.n	80075c0 <PCD_EP_ISR_Handler+0x1e4>
 800758c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d015      	beq.n	80075c0 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6818      	ldr	r0, [r3, #0]
 8007598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800759a:	6959      	ldr	r1, [r3, #20]
 800759c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800759e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80075a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075a2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	f006 fe9e 	bl	800e2e6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80075aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075ac:	695a      	ldr	r2, [r3, #20]
 80075ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075b0:	69db      	ldr	r3, [r3, #28]
 80075b2:	441a      	add	r2, r3
 80075b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075b6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80075b8:	2100      	movs	r1, #0
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f008 fd8c 	bl	80100d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80075ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80075ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f040 82b5 	bne.w	8007b42 <PCD_EP_ISR_Handler+0x766>
 80075d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80075dc:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80075e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80075e4:	f000 82ad 	beq.w	8007b42 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	61bb      	str	r3, [r7, #24]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	461a      	mov	r2, r3
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	4413      	add	r3, r2
 80075fe:	61bb      	str	r3, [r7, #24]
 8007600:	69bb      	ldr	r3, [r7, #24]
 8007602:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007606:	617b      	str	r3, [r7, #20]
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	b29b      	uxth	r3, r3
 800760e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007612:	b29a      	uxth	r2, r3
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	801a      	strh	r2, [r3, #0]
 8007618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <PCD_EP_ISR_Handler+0x25a>
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29b      	uxth	r3, r3
 8007626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800762a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800762e:	b29a      	uxth	r2, r3
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	801a      	strh	r2, [r3, #0]
 8007634:	e039      	b.n	80076aa <PCD_EP_ISR_Handler+0x2ce>
 8007636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	2b3e      	cmp	r3, #62	@ 0x3e
 800763c:	d818      	bhi.n	8007670 <PCD_EP_ISR_Handler+0x294>
 800763e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	085b      	lsrs	r3, r3, #1
 8007644:	647b      	str	r3, [r7, #68]	@ 0x44
 8007646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d002      	beq.n	8007658 <PCD_EP_ISR_Handler+0x27c>
 8007652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007654:	3301      	adds	r3, #1
 8007656:	647b      	str	r3, [r7, #68]	@ 0x44
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	b29a      	uxth	r2, r3
 800765e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007660:	b29b      	uxth	r3, r3
 8007662:	029b      	lsls	r3, r3, #10
 8007664:	b29b      	uxth	r3, r3
 8007666:	4313      	orrs	r3, r2
 8007668:	b29a      	uxth	r2, r3
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	801a      	strh	r2, [r3, #0]
 800766e:	e01c      	b.n	80076aa <PCD_EP_ISR_Handler+0x2ce>
 8007670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	095b      	lsrs	r3, r3, #5
 8007676:	647b      	str	r3, [r7, #68]	@ 0x44
 8007678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800767a:	691b      	ldr	r3, [r3, #16]
 800767c:	f003 031f 	and.w	r3, r3, #31
 8007680:	2b00      	cmp	r3, #0
 8007682:	d102      	bne.n	800768a <PCD_EP_ISR_Handler+0x2ae>
 8007684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007686:	3b01      	subs	r3, #1
 8007688:	647b      	str	r3, [r7, #68]	@ 0x44
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	881b      	ldrh	r3, [r3, #0]
 800768e:	b29a      	uxth	r2, r3
 8007690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007692:	b29b      	uxth	r3, r3
 8007694:	029b      	lsls	r3, r3, #10
 8007696:	b29b      	uxth	r3, r3
 8007698:	4313      	orrs	r3, r2
 800769a:	b29b      	uxth	r3, r3
 800769c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	881b      	ldrh	r3, [r3, #0]
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80076b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ba:	827b      	strh	r3, [r7, #18]
 80076bc:	8a7b      	ldrh	r3, [r7, #18]
 80076be:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80076c2:	827b      	strh	r3, [r7, #18]
 80076c4:	8a7b      	ldrh	r3, [r7, #18]
 80076c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80076ca:	827b      	strh	r3, [r7, #18]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	8a7b      	ldrh	r3, [r7, #18]
 80076d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80076de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	8013      	strh	r3, [r2, #0]
 80076e6:	e22c      	b.n	8007b42 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	461a      	mov	r2, r3
 80076ee:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80076f2:	009b      	lsls	r3, r3, #2
 80076f4:	4413      	add	r3, r2
 80076f6:	881b      	ldrh	r3, [r3, #0]
 80076f8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80076fc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007700:	2b00      	cmp	r3, #0
 8007702:	f280 80f6 	bge.w	80078f2 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	461a      	mov	r2, r3
 800770c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	4413      	add	r3, r2
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	b29a      	uxth	r2, r3
 8007718:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800771c:	4013      	ands	r3, r2
 800771e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8007734:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007738:	b292      	uxth	r2, r2
 800773a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800773c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007740:	4613      	mov	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	00db      	lsls	r3, r3, #3
 8007748:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	4413      	add	r3, r2
 8007750:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007754:	7b1b      	ldrb	r3, [r3, #12]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d123      	bne.n	80077a2 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007762:	b29b      	uxth	r3, r3
 8007764:	461a      	mov	r2, r3
 8007766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	4413      	add	r3, r2
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6812      	ldr	r2, [r2, #0]
 8007772:	4413      	add	r3, r2
 8007774:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800777e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8007782:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007786:	2b00      	cmp	r3, #0
 8007788:	f000 808e 	beq.w	80078a8 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6818      	ldr	r0, [r3, #0]
 8007790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007792:	6959      	ldr	r1, [r3, #20]
 8007794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007796:	88da      	ldrh	r2, [r3, #6]
 8007798:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800779c:	f006 fda3 	bl	800e2e6 <USB_ReadPMA>
 80077a0:	e082      	b.n	80078a8 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80077a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077a4:	78db      	ldrb	r3, [r3, #3]
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d10a      	bne.n	80077c0 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80077aa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80077ae:	461a      	mov	r2, r3
 80077b0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f9d3 	bl	8007b5e <HAL_PCD_EP_DB_Receive>
 80077b8:	4603      	mov	r3, r0
 80077ba:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80077be:	e073      	b.n	80078a8 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077da:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	441a      	add	r2, r3
 80077ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80077f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077fc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007800:	b29b      	uxth	r3, r3
 8007802:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	461a      	mov	r2, r3
 800780a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d022      	beq.n	8007864 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007826:	b29b      	uxth	r3, r3
 8007828:	461a      	mov	r2, r3
 800782a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	4413      	add	r3, r2
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6812      	ldr	r2, [r2, #0]
 8007836:	4413      	add	r3, r2
 8007838:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800783c:	881b      	ldrh	r3, [r3, #0]
 800783e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007842:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007846:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800784a:	2b00      	cmp	r3, #0
 800784c:	d02c      	beq.n	80078a8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6818      	ldr	r0, [r3, #0]
 8007852:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007854:	6959      	ldr	r1, [r3, #20]
 8007856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007858:	891a      	ldrh	r2, [r3, #8]
 800785a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800785e:	f006 fd42 	bl	800e2e6 <USB_ReadPMA>
 8007862:	e021      	b.n	80078a8 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800786c:	b29b      	uxth	r3, r3
 800786e:	461a      	mov	r2, r3
 8007870:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	00db      	lsls	r3, r3, #3
 8007876:	4413      	add	r3, r2
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	6812      	ldr	r2, [r2, #0]
 800787c:	4413      	add	r3, r2
 800787e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007882:	881b      	ldrh	r3, [r3, #0]
 8007884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007888:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800788c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007890:	2b00      	cmp	r3, #0
 8007892:	d009      	beq.n	80078a8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6818      	ldr	r0, [r3, #0]
 8007898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800789a:	6959      	ldr	r1, [r3, #20]
 800789c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800789e:	895a      	ldrh	r2, [r3, #10]
 80078a0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80078a4:	f006 fd1f 	bl	800e2e6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80078a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078aa:	69da      	ldr	r2, [r3, #28]
 80078ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80078b0:	441a      	add	r2, r3
 80078b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078b4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80078b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078b8:	695a      	ldr	r2, [r3, #20]
 80078ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80078be:	441a      	add	r2, r3
 80078c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078c2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80078c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <PCD_EP_ISR_Handler+0x4fc>
 80078cc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80078d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	d206      	bcs.n	80078e6 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80078d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f008 fbfa 	bl	80100d8 <HAL_PCD_DataOutStageCallback>
 80078e4:	e005      	b.n	80078f2 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80078ec:	4618      	mov	r0, r3
 80078ee:	f004 ffcc 	bl	800c88a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80078f2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80078f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 8121 	beq.w	8007b42 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8007900:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007904:	4613      	mov	r3, r2
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	00db      	lsls	r3, r3, #3
 800790c:	3310      	adds	r3, #16
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	4413      	add	r3, r2
 8007912:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	b29b      	uxth	r3, r3
 8007926:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800792a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800792e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	441a      	add	r2, r3
 8007940:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800794c:	b29b      	uxth	r3, r3
 800794e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007952:	78db      	ldrb	r3, [r3, #3]
 8007954:	2b01      	cmp	r3, #1
 8007956:	f040 80a2 	bne.w	8007a9e <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800795a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800795c:	2200      	movs	r2, #0
 800795e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007962:	7b1b      	ldrb	r3, [r3, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 8093 	beq.w	8007a90 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800796a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800796e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007972:	2b00      	cmp	r3, #0
 8007974:	d046      	beq.n	8007a04 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007976:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007978:	785b      	ldrb	r3, [r3, #1]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d126      	bne.n	80079cc <PCD_EP_ISR_Handler+0x5f0>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	627b      	str	r3, [r7, #36]	@ 0x24
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800798c:	b29b      	uxth	r3, r3
 800798e:	461a      	mov	r2, r3
 8007990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007992:	4413      	add	r3, r2
 8007994:	627b      	str	r3, [r7, #36]	@ 0x24
 8007996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	00da      	lsls	r2, r3, #3
 800799c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800799e:	4413      	add	r3, r2
 80079a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079a4:	623b      	str	r3, [r7, #32]
 80079a6:	6a3b      	ldr	r3, [r7, #32]
 80079a8:	881b      	ldrh	r3, [r3, #0]
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079b0:	b29a      	uxth	r2, r3
 80079b2:	6a3b      	ldr	r3, [r7, #32]
 80079b4:	801a      	strh	r2, [r3, #0]
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079c4:	b29a      	uxth	r2, r3
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	801a      	strh	r2, [r3, #0]
 80079ca:	e061      	b.n	8007a90 <PCD_EP_ISR_Handler+0x6b4>
 80079cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d15d      	bne.n	8007a90 <PCD_EP_ISR_Handler+0x6b4>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	461a      	mov	r2, r3
 80079e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079e8:	4413      	add	r3, r2
 80079ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	00da      	lsls	r2, r3, #3
 80079f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f4:	4413      	add	r3, r2
 80079f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079fe:	2200      	movs	r2, #0
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	e045      	b.n	8007a90 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a0c:	785b      	ldrb	r3, [r3, #1]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d126      	bne.n	8007a60 <PCD_EP_ISR_Handler+0x684>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	461a      	mov	r2, r3
 8007a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a26:	4413      	add	r3, r2
 8007a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	00da      	lsls	r2, r3, #3
 8007a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a32:	4413      	add	r3, r2
 8007a34:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a44:	b29a      	uxth	r2, r3
 8007a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a48:	801a      	strh	r2, [r3, #0]
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a58:	b29a      	uxth	r2, r3
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5c:	801a      	strh	r2, [r3, #0]
 8007a5e:	e017      	b.n	8007a90 <PCD_EP_ISR_Handler+0x6b4>
 8007a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a62:	785b      	ldrb	r3, [r3, #1]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d113      	bne.n	8007a90 <PCD_EP_ISR_Handler+0x6b4>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	461a      	mov	r2, r3
 8007a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a76:	4413      	add	r3, r2
 8007a78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a7c:	781b      	ldrb	r3, [r3, #0]
 8007a7e:	00da      	lsls	r2, r3, #3
 8007a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a82:	4413      	add	r3, r2
 8007a84:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a88:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007a90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f008 fb39 	bl	801010e <HAL_PCD_DataInStageCallback>
 8007a9c:	e051      	b.n	8007b42 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007a9e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007aa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d144      	bne.n	8007b34 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	00db      	lsls	r3, r3, #3
 8007abc:	4413      	add	r3, r2
 8007abe:	687a      	ldr	r2, [r7, #4]
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	4413      	add	r3, r2
 8007ac4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ace:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8007ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ad4:	699a      	ldr	r2, [r3, #24]
 8007ad6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d907      	bls.n	8007aee <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8007ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ae0:	699a      	ldr	r2, [r3, #24]
 8007ae2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007ae6:	1ad2      	subs	r2, r2, r3
 8007ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aea:	619a      	str	r2, [r3, #24]
 8007aec:	e002      	b.n	8007af4 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8007aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007af0:	2200      	movs	r2, #0
 8007af2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007af4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d106      	bne.n	8007b0a <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007afc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	4619      	mov	r1, r3
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f008 fb03 	bl	801010e <HAL_PCD_DataInStageCallback>
 8007b08:	e01b      	b.n	8007b42 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b0c:	695a      	ldr	r2, [r3, #20]
 8007b0e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007b12:	441a      	add	r2, r3
 8007b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b16:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007b18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b1a:	69da      	ldr	r2, [r3, #28]
 8007b1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007b20:	441a      	add	r2, r3
 8007b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b24:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f004 feac 	bl	800c88a <USB_EPStartXfer>
 8007b32:	e006      	b.n	8007b42 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007b34:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007b38:	461a      	mov	r2, r3
 8007b3a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f917 	bl	8007d70 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	b21b      	sxth	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	f6ff ac49 	blt.w	80073e6 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007b54:	2300      	movs	r3, #0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3758      	adds	r7, #88	@ 0x58
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b088      	sub	sp, #32
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	60f8      	str	r0, [r7, #12]
 8007b66:	60b9      	str	r1, [r7, #8]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007b6c:	88fb      	ldrh	r3, [r7, #6]
 8007b6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d07c      	beq.n	8007c70 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	461a      	mov	r2, r3
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	4413      	add	r3, r2
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	6812      	ldr	r2, [r2, #0]
 8007b8e:	4413      	add	r3, r2
 8007b90:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b9a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	699a      	ldr	r2, [r3, #24]
 8007ba0:	8b7b      	ldrh	r3, [r7, #26]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d306      	bcc.n	8007bb4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	699a      	ldr	r2, [r3, #24]
 8007baa:	8b7b      	ldrh	r3, [r7, #26]
 8007bac:	1ad2      	subs	r2, r2, r3
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	619a      	str	r2, [r3, #24]
 8007bb2:	e002      	b.n	8007bba <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	699b      	ldr	r3, [r3, #24]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d123      	bne.n	8007c0a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	4413      	add	r3, r2
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007bd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bdc:	833b      	strh	r3, [r7, #24]
 8007bde:	8b3b      	ldrh	r3, [r7, #24]
 8007be0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007be4:	833b      	strh	r3, [r7, #24]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	461a      	mov	r2, r3
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	441a      	add	r2, r3
 8007bf4:	8b3b      	ldrh	r3, [r7, #24]
 8007bf6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bfa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007c0a:	88fb      	ldrh	r3, [r7, #6]
 8007c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d01f      	beq.n	8007c54 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	461a      	mov	r2, r3
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c2e:	82fb      	strh	r3, [r7, #22]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	461a      	mov	r2, r3
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	441a      	add	r2, r3
 8007c3e:	8afb      	ldrh	r3, [r7, #22]
 8007c40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007c54:	8b7b      	ldrh	r3, [r7, #26]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	f000 8085 	beq.w	8007d66 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6818      	ldr	r0, [r3, #0]
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	6959      	ldr	r1, [r3, #20]
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	891a      	ldrh	r2, [r3, #8]
 8007c68:	8b7b      	ldrh	r3, [r7, #26]
 8007c6a:	f006 fb3c 	bl	800e2e6 <USB_ReadPMA>
 8007c6e:	e07a      	b.n	8007d66 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	00db      	lsls	r3, r3, #3
 8007c82:	4413      	add	r3, r2
 8007c84:	68fa      	ldr	r2, [r7, #12]
 8007c86:	6812      	ldr	r2, [r2, #0]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c94:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	699a      	ldr	r2, [r3, #24]
 8007c9a:	8b7b      	ldrh	r3, [r7, #26]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d306      	bcc.n	8007cae <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	699a      	ldr	r2, [r3, #24]
 8007ca4:	8b7b      	ldrh	r3, [r7, #26]
 8007ca6:	1ad2      	subs	r2, r2, r3
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	619a      	str	r2, [r3, #24]
 8007cac:	e002      	b.n	8007cb4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d123      	bne.n	8007d04 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cd6:	83fb      	strh	r3, [r7, #30]
 8007cd8:	8bfb      	ldrh	r3, [r7, #30]
 8007cda:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007cde:	83fb      	strh	r3, [r7, #30]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	441a      	add	r2, r3
 8007cee:	8bfb      	ldrh	r3, [r7, #30]
 8007cf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007d04:	88fb      	ldrh	r3, [r7, #6]
 8007d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d11f      	bne.n	8007d4e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	881b      	ldrh	r3, [r3, #0]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d28:	83bb      	strh	r3, [r7, #28]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	441a      	add	r2, r3
 8007d38:	8bbb      	ldrh	r3, [r7, #28]
 8007d3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d4a:	b29b      	uxth	r3, r3
 8007d4c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007d4e:	8b7b      	ldrh	r3, [r7, #26]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d008      	beq.n	8007d66 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	6818      	ldr	r0, [r3, #0]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	6959      	ldr	r1, [r3, #20]
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	895a      	ldrh	r2, [r3, #10]
 8007d60:	8b7b      	ldrh	r3, [r7, #26]
 8007d62:	f006 fac0 	bl	800e2e6 <USB_ReadPMA>
    }
  }

  return count;
 8007d66:	8b7b      	ldrh	r3, [r7, #26]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3720      	adds	r7, #32
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b0a4      	sub	sp, #144	@ 0x90
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007d7e:	88fb      	ldrh	r3, [r7, #6]
 8007d80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	f000 81db 	beq.w	8008140 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	461a      	mov	r2, r3
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	00db      	lsls	r3, r3, #3
 8007d9c:	4413      	add	r3, r2
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	6812      	ldr	r2, [r2, #0]
 8007da2:	4413      	add	r3, r2
 8007da4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007da8:	881b      	ldrh	r3, [r3, #0]
 8007daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dae:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	699a      	ldr	r2, [r3, #24]
 8007db6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d907      	bls.n	8007dce <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	699a      	ldr	r2, [r3, #24]
 8007dc2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007dc6:	1ad2      	subs	r2, r2, r3
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	619a      	str	r2, [r3, #24]
 8007dcc:	e002      	b.n	8007dd4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	f040 80b9 	bne.w	8007f50 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	785b      	ldrb	r3, [r3, #1]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d126      	bne.n	8007e34 <HAL_PCD_EP_DB_Transmit+0xc4>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007df4:	b29b      	uxth	r3, r3
 8007df6:	461a      	mov	r2, r3
 8007df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dfa:	4413      	add	r3, r2
 8007dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	00da      	lsls	r2, r3, #3
 8007e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e06:	4413      	add	r3, r2
 8007e08:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e10:	881b      	ldrh	r3, [r3, #0]
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e18:	b29a      	uxth	r2, r3
 8007e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1c:	801a      	strh	r2, [r3, #0]
 8007e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e2c:	b29a      	uxth	r2, r3
 8007e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e30:	801a      	strh	r2, [r3, #0]
 8007e32:	e01a      	b.n	8007e6a <HAL_PCD_EP_DB_Transmit+0xfa>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	785b      	ldrb	r3, [r3, #1]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d116      	bne.n	8007e6a <HAL_PCD_EP_DB_Transmit+0xfa>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e50:	4413      	add	r3, r2
 8007e52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	00da      	lsls	r2, r3, #3
 8007e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e5c:	4413      	add	r3, r2
 8007e5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e62:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e66:	2200      	movs	r2, #0
 8007e68:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	785b      	ldrb	r3, [r3, #1]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d126      	bne.n	8007ec6 <HAL_PCD_EP_DB_Transmit+0x156>
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	61fb      	str	r3, [r7, #28]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	461a      	mov	r2, r3
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	61fb      	str	r3, [r7, #28]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	00da      	lsls	r2, r3, #3
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	4413      	add	r3, r2
 8007e9a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e9e:	61bb      	str	r3, [r7, #24]
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	801a      	strh	r2, [r3, #0]
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	881b      	ldrh	r3, [r3, #0]
 8007eb4:	b29b      	uxth	r3, r3
 8007eb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007eba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	801a      	strh	r2, [r3, #0]
 8007ec4:	e017      	b.n	8007ef6 <HAL_PCD_EP_DB_Transmit+0x186>
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	785b      	ldrb	r3, [r3, #1]
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d113      	bne.n	8007ef6 <HAL_PCD_EP_DB_Transmit+0x186>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	461a      	mov	r2, r3
 8007eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007edc:	4413      	add	r3, r2
 8007ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	00da      	lsls	r2, r3, #3
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee8:	4413      	add	r3, r2
 8007eea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007eee:	623b      	str	r3, [r7, #32]
 8007ef0:	6a3b      	ldr	r3, [r7, #32]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	4619      	mov	r1, r3
 8007efc:	68f8      	ldr	r0, [r7, #12]
 8007efe:	f008 f906 	bl	801010e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007f02:	88fb      	ldrh	r3, [r7, #6]
 8007f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	f000 82fa 	beq.w	8008502 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	461a      	mov	r2, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f28:	82fb      	strh	r3, [r7, #22]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	441a      	add	r2, r3
 8007f38:	8afb      	ldrh	r3, [r7, #22]
 8007f3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	8013      	strh	r3, [r2, #0]
 8007f4e:	e2d8      	b.n	8008502 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007f50:	88fb      	ldrh	r3, [r7, #6]
 8007f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d021      	beq.n	8007f9e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f70:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f74:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	441a      	add	r2, r3
 8007f86:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007f8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	f040 82ac 	bne.w	8008502 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	695a      	ldr	r2, [r3, #20]
 8007fae:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007fb2:	441a      	add	r2, r3
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	69da      	ldr	r2, [r3, #28]
 8007fbc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007fc0:	441a      	add	r2, r3
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	6a1a      	ldr	r2, [r3, #32]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d30b      	bcc.n	8007fea <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	6a1a      	ldr	r2, [r3, #32]
 8007fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fe2:	1ad2      	subs	r2, r2, r3
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	621a      	str	r2, [r3, #32]
 8007fe8:	e017      	b.n	800801a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	6a1b      	ldr	r3, [r3, #32]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d108      	bne.n	8008004 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8007ff2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007ff6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008002:	e00a      	b.n	800801a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2200      	movs	r2, #0
 8008008:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	6a1b      	ldr	r3, [r3, #32]
 8008010:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	2200      	movs	r2, #0
 8008018:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	785b      	ldrb	r3, [r3, #1]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d165      	bne.n	80080ee <HAL_PCD_EP_DB_Transmit+0x37e>
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008030:	b29b      	uxth	r3, r3
 8008032:	461a      	mov	r2, r3
 8008034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008036:	4413      	add	r3, r2
 8008038:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	00da      	lsls	r2, r3, #3
 8008040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008042:	4413      	add	r3, r2
 8008044:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008048:	63bb      	str	r3, [r7, #56]	@ 0x38
 800804a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800804c:	881b      	ldrh	r3, [r3, #0]
 800804e:	b29b      	uxth	r3, r3
 8008050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008054:	b29a      	uxth	r2, r3
 8008056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008058:	801a      	strh	r2, [r3, #0]
 800805a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10a      	bne.n	8008078 <HAL_PCD_EP_DB_Transmit+0x308>
 8008062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008064:	881b      	ldrh	r3, [r3, #0]
 8008066:	b29b      	uxth	r3, r3
 8008068:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800806c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008070:	b29a      	uxth	r2, r3
 8008072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008074:	801a      	strh	r2, [r3, #0]
 8008076:	e057      	b.n	8008128 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008078:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800807c:	2b3e      	cmp	r3, #62	@ 0x3e
 800807e:	d818      	bhi.n	80080b2 <HAL_PCD_EP_DB_Transmit+0x342>
 8008080:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008084:	085b      	lsrs	r3, r3, #1
 8008086:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008088:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800808c:	f003 0301 	and.w	r3, r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	d002      	beq.n	800809a <HAL_PCD_EP_DB_Transmit+0x32a>
 8008094:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008096:	3301      	adds	r3, #1
 8008098:	64bb      	str	r3, [r7, #72]	@ 0x48
 800809a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	b29a      	uxth	r2, r3
 80080a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	029b      	lsls	r3, r3, #10
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	4313      	orrs	r3, r2
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ae:	801a      	strh	r2, [r3, #0]
 80080b0:	e03a      	b.n	8008128 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80080b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080b6:	095b      	lsrs	r3, r3, #5
 80080b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080be:	f003 031f 	and.w	r3, r3, #31
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d102      	bne.n	80080cc <HAL_PCD_EP_DB_Transmit+0x35c>
 80080c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080c8:	3b01      	subs	r3, #1
 80080ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ce:	881b      	ldrh	r3, [r3, #0]
 80080d0:	b29a      	uxth	r2, r3
 80080d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	029b      	lsls	r3, r3, #10
 80080d8:	b29b      	uxth	r3, r3
 80080da:	4313      	orrs	r3, r2
 80080dc:	b29b      	uxth	r3, r3
 80080de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ea:	801a      	strh	r2, [r3, #0]
 80080ec:	e01c      	b.n	8008128 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80080ee:	68bb      	ldr	r3, [r7, #8]
 80080f0:	785b      	ldrb	r3, [r3, #1]
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	d118      	bne.n	8008128 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008104:	b29b      	uxth	r3, r3
 8008106:	461a      	mov	r2, r3
 8008108:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800810a:	4413      	add	r3, r2
 800810c:	647b      	str	r3, [r7, #68]	@ 0x44
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	00da      	lsls	r2, r3, #3
 8008114:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008116:	4413      	add	r3, r2
 8008118:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800811c:	643b      	str	r3, [r7, #64]	@ 0x40
 800811e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008122:	b29a      	uxth	r2, r3
 8008124:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008126:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	6959      	ldr	r1, [r3, #20]
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	891a      	ldrh	r2, [r3, #8]
 8008134:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008138:	b29b      	uxth	r3, r3
 800813a:	f006 f892 	bl	800e262 <USB_WritePMA>
 800813e:	e1e0      	b.n	8008502 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008148:	b29b      	uxth	r3, r3
 800814a:	461a      	mov	r2, r3
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	00db      	lsls	r3, r3, #3
 8008152:	4413      	add	r3, r2
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	6812      	ldr	r2, [r2, #0]
 8008158:	4413      	add	r3, r2
 800815a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800815e:	881b      	ldrh	r3, [r3, #0]
 8008160:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008164:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	699a      	ldr	r2, [r3, #24]
 800816c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008170:	429a      	cmp	r2, r3
 8008172:	d307      	bcc.n	8008184 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	699a      	ldr	r2, [r3, #24]
 8008178:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800817c:	1ad2      	subs	r2, r2, r3
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	619a      	str	r2, [r3, #24]
 8008182:	e002      	b.n	800818a <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	2200      	movs	r2, #0
 8008188:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	699b      	ldr	r3, [r3, #24]
 800818e:	2b00      	cmp	r3, #0
 8008190:	f040 80c0 	bne.w	8008314 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	785b      	ldrb	r3, [r3, #1]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d126      	bne.n	80081ea <HAL_PCD_EP_DB_Transmit+0x47a>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	461a      	mov	r2, r3
 80081ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081b0:	4413      	add	r3, r2
 80081b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	00da      	lsls	r2, r3, #3
 80081ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80081bc:	4413      	add	r3, r2
 80081be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80081c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081c6:	881b      	ldrh	r3, [r3, #0]
 80081c8:	b29b      	uxth	r3, r3
 80081ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081d2:	801a      	strh	r2, [r3, #0]
 80081d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081d6:	881b      	ldrh	r3, [r3, #0]
 80081d8:	b29b      	uxth	r3, r3
 80081da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80081e6:	801a      	strh	r2, [r3, #0]
 80081e8:	e01a      	b.n	8008220 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	785b      	ldrb	r3, [r3, #1]
 80081ee:	2b01      	cmp	r3, #1
 80081f0:	d116      	bne.n	8008220 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008200:	b29b      	uxth	r3, r3
 8008202:	461a      	mov	r2, r3
 8008204:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008206:	4413      	add	r3, r2
 8008208:	667b      	str	r3, [r7, #100]	@ 0x64
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	00da      	lsls	r2, r3, #3
 8008210:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008212:	4413      	add	r3, r2
 8008214:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008218:	663b      	str	r3, [r7, #96]	@ 0x60
 800821a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800821c:	2200      	movs	r2, #0
 800821e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	677b      	str	r3, [r7, #116]	@ 0x74
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	785b      	ldrb	r3, [r3, #1]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d12b      	bne.n	8008286 <HAL_PCD_EP_DB_Transmit+0x516>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800823c:	b29b      	uxth	r3, r3
 800823e:	461a      	mov	r2, r3
 8008240:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008242:	4413      	add	r3, r2
 8008244:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	00da      	lsls	r2, r3, #3
 800824c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800824e:	4413      	add	r3, r2
 8008250:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008258:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800825c:	881b      	ldrh	r3, [r3, #0]
 800825e:	b29b      	uxth	r3, r3
 8008260:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008264:	b29a      	uxth	r2, r3
 8008266:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800826a:	801a      	strh	r2, [r3, #0]
 800826c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008270:	881b      	ldrh	r3, [r3, #0]
 8008272:	b29b      	uxth	r3, r3
 8008274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800827c:	b29a      	uxth	r2, r3
 800827e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008282:	801a      	strh	r2, [r3, #0]
 8008284:	e017      	b.n	80082b6 <HAL_PCD_EP_DB_Transmit+0x546>
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	785b      	ldrb	r3, [r3, #1]
 800828a:	2b01      	cmp	r3, #1
 800828c:	d113      	bne.n	80082b6 <HAL_PCD_EP_DB_Transmit+0x546>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008296:	b29b      	uxth	r3, r3
 8008298:	461a      	mov	r2, r3
 800829a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800829c:	4413      	add	r3, r2
 800829e:	677b      	str	r3, [r7, #116]	@ 0x74
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	781b      	ldrb	r3, [r3, #0]
 80082a4:	00da      	lsls	r2, r3, #3
 80082a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80082a8:	4413      	add	r3, r2
 80082aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80082ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80082b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80082b2:	2200      	movs	r2, #0
 80082b4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	4619      	mov	r1, r3
 80082bc:	68f8      	ldr	r0, [r7, #12]
 80082be:	f007 ff26 	bl	801010e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80082c2:	88fb      	ldrh	r3, [r7, #6]
 80082c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f040 811a 	bne.w	8008502 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	68bb      	ldr	r3, [r7, #8]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	4413      	add	r3, r2
 80082dc:	881b      	ldrh	r3, [r3, #0]
 80082de:	b29b      	uxth	r3, r3
 80082e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082e8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	461a      	mov	r2, r3
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	441a      	add	r2, r3
 80082fa:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80082fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008302:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008306:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800830a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800830e:	b29b      	uxth	r3, r3
 8008310:	8013      	strh	r3, [r2, #0]
 8008312:	e0f6      	b.n	8008502 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008314:	88fb      	ldrh	r3, [r7, #6]
 8008316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d121      	bne.n	8008362 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	461a      	mov	r2, r3
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	4413      	add	r3, r2
 800832c:	881b      	ldrh	r3, [r3, #0]
 800832e:	b29b      	uxth	r3, r3
 8008330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008338:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	461a      	mov	r2, r3
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	441a      	add	r2, r3
 800834a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800834e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008352:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008356:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800835a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800835e:	b29b      	uxth	r3, r3
 8008360:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008368:	2b01      	cmp	r3, #1
 800836a:	f040 80ca 	bne.w	8008502 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	695a      	ldr	r2, [r3, #20]
 8008372:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008376:	441a      	add	r2, r3
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	69da      	ldr	r2, [r3, #28]
 8008380:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008384:	441a      	add	r2, r3
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	6a1a      	ldr	r2, [r3, #32]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	429a      	cmp	r2, r3
 8008394:	d30b      	bcc.n	80083ae <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	691b      	ldr	r3, [r3, #16]
 800839a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	6a1a      	ldr	r2, [r3, #32]
 80083a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80083a6:	1ad2      	subs	r2, r2, r3
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	621a      	str	r2, [r3, #32]
 80083ac:	e017      	b.n	80083de <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	6a1b      	ldr	r3, [r3, #32]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d108      	bne.n	80083c8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80083b6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80083ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2200      	movs	r2, #0
 80083c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80083c6:	e00a      	b.n	80083de <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	6a1b      	ldr	r3, [r3, #32]
 80083cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2200      	movs	r2, #0
 80083d4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	785b      	ldrb	r3, [r3, #1]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d165      	bne.n	80084b8 <HAL_PCD_EP_DB_Transmit+0x748>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	461a      	mov	r2, r3
 80083fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008400:	4413      	add	r3, r2
 8008402:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	00da      	lsls	r2, r3, #3
 800840a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800840c:	4413      	add	r3, r2
 800840e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008412:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008414:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008416:	881b      	ldrh	r3, [r3, #0]
 8008418:	b29b      	uxth	r3, r3
 800841a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800841e:	b29a      	uxth	r2, r3
 8008420:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008422:	801a      	strh	r2, [r3, #0]
 8008424:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008428:	2b00      	cmp	r3, #0
 800842a:	d10a      	bne.n	8008442 <HAL_PCD_EP_DB_Transmit+0x6d2>
 800842c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800842e:	881b      	ldrh	r3, [r3, #0]
 8008430:	b29b      	uxth	r3, r3
 8008432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800843a:	b29a      	uxth	r2, r3
 800843c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800843e:	801a      	strh	r2, [r3, #0]
 8008440:	e054      	b.n	80084ec <HAL_PCD_EP_DB_Transmit+0x77c>
 8008442:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008446:	2b3e      	cmp	r3, #62	@ 0x3e
 8008448:	d818      	bhi.n	800847c <HAL_PCD_EP_DB_Transmit+0x70c>
 800844a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800844e:	085b      	lsrs	r3, r3, #1
 8008450:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008452:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d002      	beq.n	8008464 <HAL_PCD_EP_DB_Transmit+0x6f4>
 800845e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008460:	3301      	adds	r3, #1
 8008462:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008464:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	b29a      	uxth	r2, r3
 800846a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800846c:	b29b      	uxth	r3, r3
 800846e:	029b      	lsls	r3, r3, #10
 8008470:	b29b      	uxth	r3, r3
 8008472:	4313      	orrs	r3, r2
 8008474:	b29a      	uxth	r2, r3
 8008476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008478:	801a      	strh	r2, [r3, #0]
 800847a:	e037      	b.n	80084ec <HAL_PCD_EP_DB_Transmit+0x77c>
 800847c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008480:	095b      	lsrs	r3, r3, #5
 8008482:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008484:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008488:	f003 031f 	and.w	r3, r3, #31
 800848c:	2b00      	cmp	r3, #0
 800848e:	d102      	bne.n	8008496 <HAL_PCD_EP_DB_Transmit+0x726>
 8008490:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008492:	3b01      	subs	r3, #1
 8008494:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008496:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008498:	881b      	ldrh	r3, [r3, #0]
 800849a:	b29a      	uxth	r2, r3
 800849c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800849e:	b29b      	uxth	r3, r3
 80084a0:	029b      	lsls	r3, r3, #10
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	4313      	orrs	r3, r2
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084b0:	b29a      	uxth	r2, r3
 80084b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084b4:	801a      	strh	r2, [r3, #0]
 80084b6:	e019      	b.n	80084ec <HAL_PCD_EP_DB_Transmit+0x77c>
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d115      	bne.n	80084ec <HAL_PCD_EP_DB_Transmit+0x77c>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084c8:	b29b      	uxth	r3, r3
 80084ca:	461a      	mov	r2, r3
 80084cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084ce:	4413      	add	r3, r2
 80084d0:	657b      	str	r3, [r7, #84]	@ 0x54
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	00da      	lsls	r2, r3, #3
 80084d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80084da:	4413      	add	r3, r2
 80084dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80084e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80084ea:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6818      	ldr	r0, [r3, #0]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	6959      	ldr	r1, [r3, #20]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	895a      	ldrh	r2, [r3, #10]
 80084f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	f005 feb0 	bl	800e262 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	461a      	mov	r2, r3
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	009b      	lsls	r3, r3, #2
 800850e:	4413      	add	r3, r2
 8008510:	881b      	ldrh	r3, [r3, #0]
 8008512:	b29b      	uxth	r3, r3
 8008514:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008518:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800851c:	82bb      	strh	r3, [r7, #20]
 800851e:	8abb      	ldrh	r3, [r7, #20]
 8008520:	f083 0310 	eor.w	r3, r3, #16
 8008524:	82bb      	strh	r3, [r7, #20]
 8008526:	8abb      	ldrh	r3, [r7, #20]
 8008528:	f083 0320 	eor.w	r3, r3, #32
 800852c:	82bb      	strh	r3, [r7, #20]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	441a      	add	r2, r3
 800853c:	8abb      	ldrh	r3, [r7, #20]
 800853e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800854a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800854e:	b29b      	uxth	r3, r3
 8008550:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3790      	adds	r7, #144	@ 0x90
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	607b      	str	r3, [r7, #4]
 8008566:	460b      	mov	r3, r1
 8008568:	817b      	strh	r3, [r7, #10]
 800856a:	4613      	mov	r3, r2
 800856c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800856e:	897b      	ldrh	r3, [r7, #10]
 8008570:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008574:	b29b      	uxth	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00b      	beq.n	8008592 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800857a:	897b      	ldrh	r3, [r7, #10]
 800857c:	f003 0207 	and.w	r2, r3, #7
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	00db      	lsls	r3, r3, #3
 8008588:	3310      	adds	r3, #16
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	4413      	add	r3, r2
 800858e:	617b      	str	r3, [r7, #20]
 8008590:	e009      	b.n	80085a6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008592:	897a      	ldrh	r2, [r7, #10]
 8008594:	4613      	mov	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80085a0:	68fa      	ldr	r2, [r7, #12]
 80085a2:	4413      	add	r3, r2
 80085a4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80085a6:	893b      	ldrh	r3, [r7, #8]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d107      	bne.n	80085bc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	2200      	movs	r2, #0
 80085b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	b29a      	uxth	r2, r3
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	80da      	strh	r2, [r3, #6]
 80085ba:	e00b      	b.n	80085d4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	2201      	movs	r2, #1
 80085c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	b29a      	uxth	r2, r3
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	0c1b      	lsrs	r3, r3, #16
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	371c      	adds	r7, #28
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008606:	b29b      	uxth	r3, r3
 8008608:	f043 0301 	orr.w	r3, r3, #1
 800860c:	b29a      	uxth	r2, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800861a:	b29b      	uxth	r3, r3
 800861c:	f043 0302 	orr.w	r3, r3, #2
 8008620:	b29a      	uxth	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3714      	adds	r7, #20
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d141      	bne.n	80086ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008646:	4b4b      	ldr	r3, [pc, #300]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800864e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008652:	d131      	bne.n	80086b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008654:	4b47      	ldr	r3, [pc, #284]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008656:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800865a:	4a46      	ldr	r2, [pc, #280]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800865c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008660:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008664:	4b43      	ldr	r3, [pc, #268]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800866c:	4a41      	ldr	r2, [pc, #260]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800866e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008672:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008674:	4b40      	ldr	r3, [pc, #256]	@ (8008778 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2232      	movs	r2, #50	@ 0x32
 800867a:	fb02 f303 	mul.w	r3, r2, r3
 800867e:	4a3f      	ldr	r2, [pc, #252]	@ (800877c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008680:	fba2 2303 	umull	r2, r3, r2, r3
 8008684:	0c9b      	lsrs	r3, r3, #18
 8008686:	3301      	adds	r3, #1
 8008688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800868a:	e002      	b.n	8008692 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3b01      	subs	r3, #1
 8008690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008692:	4b38      	ldr	r3, [pc, #224]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800869a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800869e:	d102      	bne.n	80086a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1f2      	bne.n	800868c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80086a6:	4b33      	ldr	r3, [pc, #204]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086a8:	695b      	ldr	r3, [r3, #20]
 80086aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086b2:	d158      	bne.n	8008766 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e057      	b.n	8008768 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086b8:	4b2e      	ldr	r3, [pc, #184]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086be:	4a2d      	ldr	r2, [pc, #180]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80086c8:	e04d      	b.n	8008766 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086d0:	d141      	bne.n	8008756 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80086d2:	4b28      	ldr	r3, [pc, #160]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80086da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086de:	d131      	bne.n	8008744 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80086e0:	4b24      	ldr	r3, [pc, #144]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086e6:	4a23      	ldr	r2, [pc, #140]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086ec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80086f0:	4b20      	ldr	r3, [pc, #128]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80086f8:	4a1e      	ldr	r2, [pc, #120]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80086fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80086fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008700:	4b1d      	ldr	r3, [pc, #116]	@ (8008778 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2232      	movs	r2, #50	@ 0x32
 8008706:	fb02 f303 	mul.w	r3, r2, r3
 800870a:	4a1c      	ldr	r2, [pc, #112]	@ (800877c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800870c:	fba2 2303 	umull	r2, r3, r2, r3
 8008710:	0c9b      	lsrs	r3, r3, #18
 8008712:	3301      	adds	r3, #1
 8008714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008716:	e002      	b.n	800871e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	3b01      	subs	r3, #1
 800871c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800871e:	4b15      	ldr	r3, [pc, #84]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800872a:	d102      	bne.n	8008732 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1f2      	bne.n	8008718 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008732:	4b10      	ldr	r3, [pc, #64]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800873a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800873e:	d112      	bne.n	8008766 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e011      	b.n	8008768 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008744:	4b0b      	ldr	r3, [pc, #44]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800874a:	4a0a      	ldr	r2, [pc, #40]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800874c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008750:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008754:	e007      	b.n	8008766 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008756:	4b07      	ldr	r3, [pc, #28]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800875e:	4a05      	ldr	r2, [pc, #20]	@ (8008774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008760:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008764:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr
 8008774:	40007000 	.word	0x40007000
 8008778:	2000001c 	.word	0x2000001c
 800877c:	431bde83 	.word	0x431bde83

08008780 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008780:	b480      	push	{r7}
 8008782:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008784:	4b05      	ldr	r3, [pc, #20]	@ (800879c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008786:	689b      	ldr	r3, [r3, #8]
 8008788:	4a04      	ldr	r2, [pc, #16]	@ (800879c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800878a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800878e:	6093      	str	r3, [r2, #8]
}
 8008790:	bf00      	nop
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop
 800879c:	40007000 	.word	0x40007000

080087a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b088      	sub	sp, #32
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e2fe      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0301 	and.w	r3, r3, #1
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d075      	beq.n	80088aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80087be:	4b97      	ldr	r3, [pc, #604]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f003 030c 	and.w	r3, r3, #12
 80087c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80087c8:	4b94      	ldr	r3, [pc, #592]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f003 0303 	and.w	r3, r3, #3
 80087d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b0c      	cmp	r3, #12
 80087d6:	d102      	bne.n	80087de <HAL_RCC_OscConfig+0x3e>
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d002      	beq.n	80087e4 <HAL_RCC_OscConfig+0x44>
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	2b08      	cmp	r3, #8
 80087e2:	d10b      	bne.n	80087fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087e4:	4b8d      	ldr	r3, [pc, #564]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d05b      	beq.n	80088a8 <HAL_RCC_OscConfig+0x108>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d157      	bne.n	80088a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	e2d9      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008804:	d106      	bne.n	8008814 <HAL_RCC_OscConfig+0x74>
 8008806:	4b85      	ldr	r3, [pc, #532]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a84      	ldr	r2, [pc, #528]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 800880c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008810:	6013      	str	r3, [r2, #0]
 8008812:	e01d      	b.n	8008850 <HAL_RCC_OscConfig+0xb0>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800881c:	d10c      	bne.n	8008838 <HAL_RCC_OscConfig+0x98>
 800881e:	4b7f      	ldr	r3, [pc, #508]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a7e      	ldr	r2, [pc, #504]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 8008824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008828:	6013      	str	r3, [r2, #0]
 800882a:	4b7c      	ldr	r3, [pc, #496]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a7b      	ldr	r2, [pc, #492]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 8008830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008834:	6013      	str	r3, [r2, #0]
 8008836:	e00b      	b.n	8008850 <HAL_RCC_OscConfig+0xb0>
 8008838:	4b78      	ldr	r3, [pc, #480]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a77      	ldr	r2, [pc, #476]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 800883e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008842:	6013      	str	r3, [r2, #0]
 8008844:	4b75      	ldr	r3, [pc, #468]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a74      	ldr	r2, [pc, #464]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 800884a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800884e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d013      	beq.n	8008880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008858:	f7fb fc1a 	bl	8004090 <HAL_GetTick>
 800885c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800885e:	e008      	b.n	8008872 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008860:	f7fb fc16 	bl	8004090 <HAL_GetTick>
 8008864:	4602      	mov	r2, r0
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	1ad3      	subs	r3, r2, r3
 800886a:	2b64      	cmp	r3, #100	@ 0x64
 800886c:	d901      	bls.n	8008872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e29e      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008872:	4b6a      	ldr	r3, [pc, #424]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d0f0      	beq.n	8008860 <HAL_RCC_OscConfig+0xc0>
 800887e:	e014      	b.n	80088aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008880:	f7fb fc06 	bl	8004090 <HAL_GetTick>
 8008884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008886:	e008      	b.n	800889a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008888:	f7fb fc02 	bl	8004090 <HAL_GetTick>
 800888c:	4602      	mov	r2, r0
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	2b64      	cmp	r3, #100	@ 0x64
 8008894:	d901      	bls.n	800889a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008896:	2303      	movs	r3, #3
 8008898:	e28a      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800889a:	4b60      	ldr	r3, [pc, #384]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1f0      	bne.n	8008888 <HAL_RCC_OscConfig+0xe8>
 80088a6:	e000      	b.n	80088aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 0302 	and.w	r3, r3, #2
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d075      	beq.n	80089a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80088b6:	4b59      	ldr	r3, [pc, #356]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f003 030c 	and.w	r3, r3, #12
 80088be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088c0:	4b56      	ldr	r3, [pc, #344]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 80088c2:	68db      	ldr	r3, [r3, #12]
 80088c4:	f003 0303 	and.w	r3, r3, #3
 80088c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	2b0c      	cmp	r3, #12
 80088ce:	d102      	bne.n	80088d6 <HAL_RCC_OscConfig+0x136>
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	2b02      	cmp	r3, #2
 80088d4:	d002      	beq.n	80088dc <HAL_RCC_OscConfig+0x13c>
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	2b04      	cmp	r3, #4
 80088da:	d11f      	bne.n	800891c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80088dc:	4b4f      	ldr	r3, [pc, #316]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d005      	beq.n	80088f4 <HAL_RCC_OscConfig+0x154>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	68db      	ldr	r3, [r3, #12]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80088f0:	2301      	movs	r3, #1
 80088f2:	e25d      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088f4:	4b49      	ldr	r3, [pc, #292]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	061b      	lsls	r3, r3, #24
 8008902:	4946      	ldr	r1, [pc, #280]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 8008904:	4313      	orrs	r3, r2
 8008906:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008908:	4b45      	ldr	r3, [pc, #276]	@ (8008a20 <HAL_RCC_OscConfig+0x280>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4618      	mov	r0, r3
 800890e:	f7fb fb73 	bl	8003ff8 <HAL_InitTick>
 8008912:	4603      	mov	r3, r0
 8008914:	2b00      	cmp	r3, #0
 8008916:	d043      	beq.n	80089a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e249      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68db      	ldr	r3, [r3, #12]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d023      	beq.n	800896c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008924:	4b3d      	ldr	r3, [pc, #244]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a3c      	ldr	r2, [pc, #240]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 800892a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800892e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008930:	f7fb fbae 	bl	8004090 <HAL_GetTick>
 8008934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008936:	e008      	b.n	800894a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008938:	f7fb fbaa 	bl	8004090 <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	2b02      	cmp	r3, #2
 8008944:	d901      	bls.n	800894a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e232      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800894a:	4b34      	ldr	r3, [pc, #208]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0f0      	beq.n	8008938 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008956:	4b31      	ldr	r3, [pc, #196]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	061b      	lsls	r3, r3, #24
 8008964:	492d      	ldr	r1, [pc, #180]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 8008966:	4313      	orrs	r3, r2
 8008968:	604b      	str	r3, [r1, #4]
 800896a:	e01a      	b.n	80089a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800896c:	4b2b      	ldr	r3, [pc, #172]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a2a      	ldr	r2, [pc, #168]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 8008972:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008978:	f7fb fb8a 	bl	8004090 <HAL_GetTick>
 800897c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800897e:	e008      	b.n	8008992 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008980:	f7fb fb86 	bl	8004090 <HAL_GetTick>
 8008984:	4602      	mov	r2, r0
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	2b02      	cmp	r3, #2
 800898c:	d901      	bls.n	8008992 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e20e      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008992:	4b22      	ldr	r3, [pc, #136]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1f0      	bne.n	8008980 <HAL_RCC_OscConfig+0x1e0>
 800899e:	e000      	b.n	80089a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 0308 	and.w	r3, r3, #8
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d041      	beq.n	8008a32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	695b      	ldr	r3, [r3, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d01c      	beq.n	80089f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80089b6:	4b19      	ldr	r3, [pc, #100]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 80089b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089bc:	4a17      	ldr	r2, [pc, #92]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 80089be:	f043 0301 	orr.w	r3, r3, #1
 80089c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c6:	f7fb fb63 	bl	8004090 <HAL_GetTick>
 80089ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80089cc:	e008      	b.n	80089e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80089ce:	f7fb fb5f 	bl	8004090 <HAL_GetTick>
 80089d2:	4602      	mov	r2, r0
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d901      	bls.n	80089e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80089dc:	2303      	movs	r3, #3
 80089de:	e1e7      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80089e0:	4b0e      	ldr	r3, [pc, #56]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 80089e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d0ef      	beq.n	80089ce <HAL_RCC_OscConfig+0x22e>
 80089ee:	e020      	b.n	8008a32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80089f0:	4b0a      	ldr	r3, [pc, #40]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 80089f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089f6:	4a09      	ldr	r2, [pc, #36]	@ (8008a1c <HAL_RCC_OscConfig+0x27c>)
 80089f8:	f023 0301 	bic.w	r3, r3, #1
 80089fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a00:	f7fb fb46 	bl	8004090 <HAL_GetTick>
 8008a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a06:	e00d      	b.n	8008a24 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008a08:	f7fb fb42 	bl	8004090 <HAL_GetTick>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	1ad3      	subs	r3, r2, r3
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d906      	bls.n	8008a24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008a16:	2303      	movs	r3, #3
 8008a18:	e1ca      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
 8008a1a:	bf00      	nop
 8008a1c:	40021000 	.word	0x40021000
 8008a20:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008a24:	4b8c      	ldr	r3, [pc, #560]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a2a:	f003 0302 	and.w	r3, r3, #2
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1ea      	bne.n	8008a08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0304 	and.w	r3, r3, #4
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 80a6 	beq.w	8008b8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a40:	2300      	movs	r3, #0
 8008a42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008a44:	4b84      	ldr	r3, [pc, #528]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <HAL_RCC_OscConfig+0x2b4>
 8008a50:	2301      	movs	r3, #1
 8008a52:	e000      	b.n	8008a56 <HAL_RCC_OscConfig+0x2b6>
 8008a54:	2300      	movs	r3, #0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00d      	beq.n	8008a76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a64:	6593      	str	r3, [r2, #88]	@ 0x58
 8008a66:	4b7c      	ldr	r3, [pc, #496]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008a6e:	60fb      	str	r3, [r7, #12]
 8008a70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008a72:	2301      	movs	r3, #1
 8008a74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a76:	4b79      	ldr	r3, [pc, #484]	@ (8008c5c <HAL_RCC_OscConfig+0x4bc>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d118      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a82:	4b76      	ldr	r3, [pc, #472]	@ (8008c5c <HAL_RCC_OscConfig+0x4bc>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a75      	ldr	r2, [pc, #468]	@ (8008c5c <HAL_RCC_OscConfig+0x4bc>)
 8008a88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a8e:	f7fb faff 	bl	8004090 <HAL_GetTick>
 8008a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a94:	e008      	b.n	8008aa8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a96:	f7fb fafb 	bl	8004090 <HAL_GetTick>
 8008a9a:	4602      	mov	r2, r0
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d901      	bls.n	8008aa8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e183      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008aa8:	4b6c      	ldr	r3, [pc, #432]	@ (8008c5c <HAL_RCC_OscConfig+0x4bc>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d0f0      	beq.n	8008a96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d108      	bne.n	8008ace <HAL_RCC_OscConfig+0x32e>
 8008abc:	4b66      	ldr	r3, [pc, #408]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ac2:	4a65      	ldr	r2, [pc, #404]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008ac4:	f043 0301 	orr.w	r3, r3, #1
 8008ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008acc:	e024      	b.n	8008b18 <HAL_RCC_OscConfig+0x378>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	2b05      	cmp	r3, #5
 8008ad4:	d110      	bne.n	8008af8 <HAL_RCC_OscConfig+0x358>
 8008ad6:	4b60      	ldr	r3, [pc, #384]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008adc:	4a5e      	ldr	r2, [pc, #376]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008ade:	f043 0304 	orr.w	r3, r3, #4
 8008ae2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ae6:	4b5c      	ldr	r3, [pc, #368]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aec:	4a5a      	ldr	r2, [pc, #360]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008aee:	f043 0301 	orr.w	r3, r3, #1
 8008af2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008af6:	e00f      	b.n	8008b18 <HAL_RCC_OscConfig+0x378>
 8008af8:	4b57      	ldr	r3, [pc, #348]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008afe:	4a56      	ldr	r2, [pc, #344]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008b00:	f023 0301 	bic.w	r3, r3, #1
 8008b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008b08:	4b53      	ldr	r3, [pc, #332]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b0e:	4a52      	ldr	r2, [pc, #328]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008b10:	f023 0304 	bic.w	r3, r3, #4
 8008b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d016      	beq.n	8008b4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b20:	f7fb fab6 	bl	8004090 <HAL_GetTick>
 8008b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b26:	e00a      	b.n	8008b3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b28:	f7fb fab2 	bl	8004090 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d901      	bls.n	8008b3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e138      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b3e:	4b46      	ldr	r3, [pc, #280]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b44:	f003 0302 	and.w	r3, r3, #2
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d0ed      	beq.n	8008b28 <HAL_RCC_OscConfig+0x388>
 8008b4c:	e015      	b.n	8008b7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b4e:	f7fb fa9f 	bl	8004090 <HAL_GetTick>
 8008b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b54:	e00a      	b.n	8008b6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b56:	f7fb fa9b 	bl	8004090 <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d901      	bls.n	8008b6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e121      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008b6c:	4b3a      	ldr	r3, [pc, #232]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1ed      	bne.n	8008b56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008b7a:	7ffb      	ldrb	r3, [r7, #31]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d105      	bne.n	8008b8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b80:	4b35      	ldr	r3, [pc, #212]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008b82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b84:	4a34      	ldr	r2, [pc, #208]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008b86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b8a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f003 0320 	and.w	r3, r3, #32
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d03c      	beq.n	8008c12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d01c      	beq.n	8008bda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ba6:	4a2c      	ldr	r2, [pc, #176]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008ba8:	f043 0301 	orr.w	r3, r3, #1
 8008bac:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bb0:	f7fb fa6e 	bl	8004090 <HAL_GetTick>
 8008bb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008bb6:	e008      	b.n	8008bca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bb8:	f7fb fa6a 	bl	8004090 <HAL_GetTick>
 8008bbc:	4602      	mov	r2, r0
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	1ad3      	subs	r3, r2, r3
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d901      	bls.n	8008bca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e0f2      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008bca:	4b23      	ldr	r3, [pc, #140]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d0ef      	beq.n	8008bb8 <HAL_RCC_OscConfig+0x418>
 8008bd8:	e01b      	b.n	8008c12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008bda:	4b1f      	ldr	r3, [pc, #124]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008be0:	4a1d      	ldr	r2, [pc, #116]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008be2:	f023 0301 	bic.w	r3, r3, #1
 8008be6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bea:	f7fb fa51 	bl	8004090 <HAL_GetTick>
 8008bee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008bf0:	e008      	b.n	8008c04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008bf2:	f7fb fa4d 	bl	8004090 <HAL_GetTick>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	1ad3      	subs	r3, r2, r3
 8008bfc:	2b02      	cmp	r3, #2
 8008bfe:	d901      	bls.n	8008c04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008c00:	2303      	movs	r3, #3
 8008c02:	e0d5      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008c04:	4b14      	ldr	r3, [pc, #80]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d1ef      	bne.n	8008bf2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 80c9 	beq.w	8008dae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	f003 030c 	and.w	r3, r3, #12
 8008c24:	2b0c      	cmp	r3, #12
 8008c26:	f000 8083 	beq.w	8008d30 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	69db      	ldr	r3, [r3, #28]
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	d15e      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c32:	4b09      	ldr	r3, [pc, #36]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a08      	ldr	r2, [pc, #32]	@ (8008c58 <HAL_RCC_OscConfig+0x4b8>)
 8008c38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c3e:	f7fb fa27 	bl	8004090 <HAL_GetTick>
 8008c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c44:	e00c      	b.n	8008c60 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c46:	f7fb fa23 	bl	8004090 <HAL_GetTick>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	1ad3      	subs	r3, r2, r3
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d905      	bls.n	8008c60 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e0ab      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
 8008c58:	40021000 	.word	0x40021000
 8008c5c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c60:	4b55      	ldr	r3, [pc, #340]	@ (8008db8 <HAL_RCC_OscConfig+0x618>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1ec      	bne.n	8008c46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c6c:	4b52      	ldr	r3, [pc, #328]	@ (8008db8 <HAL_RCC_OscConfig+0x618>)
 8008c6e:	68da      	ldr	r2, [r3, #12]
 8008c70:	4b52      	ldr	r3, [pc, #328]	@ (8008dbc <HAL_RCC_OscConfig+0x61c>)
 8008c72:	4013      	ands	r3, r2
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	6a11      	ldr	r1, [r2, #32]
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008c7c:	3a01      	subs	r2, #1
 8008c7e:	0112      	lsls	r2, r2, #4
 8008c80:	4311      	orrs	r1, r2
 8008c82:	687a      	ldr	r2, [r7, #4]
 8008c84:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008c86:	0212      	lsls	r2, r2, #8
 8008c88:	4311      	orrs	r1, r2
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008c8e:	0852      	lsrs	r2, r2, #1
 8008c90:	3a01      	subs	r2, #1
 8008c92:	0552      	lsls	r2, r2, #21
 8008c94:	4311      	orrs	r1, r2
 8008c96:	687a      	ldr	r2, [r7, #4]
 8008c98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008c9a:	0852      	lsrs	r2, r2, #1
 8008c9c:	3a01      	subs	r2, #1
 8008c9e:	0652      	lsls	r2, r2, #25
 8008ca0:	4311      	orrs	r1, r2
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008ca6:	06d2      	lsls	r2, r2, #27
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	4943      	ldr	r1, [pc, #268]	@ (8008db8 <HAL_RCC_OscConfig+0x618>)
 8008cac:	4313      	orrs	r3, r2
 8008cae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008cb0:	4b41      	ldr	r3, [pc, #260]	@ (8008db8 <HAL_RCC_OscConfig+0x618>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a40      	ldr	r2, [pc, #256]	@ (8008db8 <HAL_RCC_OscConfig+0x618>)
 8008cb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008cbc:	4b3e      	ldr	r3, [pc, #248]	@ (8008db8 <HAL_RCC_OscConfig+0x618>)
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	4a3d      	ldr	r2, [pc, #244]	@ (8008db8 <HAL_RCC_OscConfig+0x618>)
 8008cc2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cc8:	f7fb f9e2 	bl	8004090 <HAL_GetTick>
 8008ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cce:	e008      	b.n	8008ce2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cd0:	f7fb f9de 	bl	8004090 <HAL_GetTick>
 8008cd4:	4602      	mov	r2, r0
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	2b02      	cmp	r3, #2
 8008cdc:	d901      	bls.n	8008ce2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e066      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ce2:	4b35      	ldr	r3, [pc, #212]	@ (8008db8 <HAL_RCC_OscConfig+0x618>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d0f0      	beq.n	8008cd0 <HAL_RCC_OscConfig+0x530>
 8008cee:	e05e      	b.n	8008dae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008cf0:	4b31      	ldr	r3, [pc, #196]	@ (8008db8 <HAL_RCC_OscConfig+0x618>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a30      	ldr	r2, [pc, #192]	@ (8008db8 <HAL_RCC_OscConfig+0x618>)
 8008cf6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cfc:	f7fb f9c8 	bl	8004090 <HAL_GetTick>
 8008d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d02:	e008      	b.n	8008d16 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d04:	f7fb f9c4 	bl	8004090 <HAL_GetTick>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d901      	bls.n	8008d16 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008d12:	2303      	movs	r3, #3
 8008d14:	e04c      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d16:	4b28      	ldr	r3, [pc, #160]	@ (8008db8 <HAL_RCC_OscConfig+0x618>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d1f0      	bne.n	8008d04 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008d22:	4b25      	ldr	r3, [pc, #148]	@ (8008db8 <HAL_RCC_OscConfig+0x618>)
 8008d24:	68da      	ldr	r2, [r3, #12]
 8008d26:	4924      	ldr	r1, [pc, #144]	@ (8008db8 <HAL_RCC_OscConfig+0x618>)
 8008d28:	4b25      	ldr	r3, [pc, #148]	@ (8008dc0 <HAL_RCC_OscConfig+0x620>)
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	60cb      	str	r3, [r1, #12]
 8008d2e:	e03e      	b.n	8008dae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	69db      	ldr	r3, [r3, #28]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d101      	bne.n	8008d3c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	e039      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8008db8 <HAL_RCC_OscConfig+0x618>)
 8008d3e:	68db      	ldr	r3, [r3, #12]
 8008d40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d42:	697b      	ldr	r3, [r7, #20]
 8008d44:	f003 0203 	and.w	r2, r3, #3
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6a1b      	ldr	r3, [r3, #32]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d12c      	bne.n	8008daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5a:	3b01      	subs	r3, #1
 8008d5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d123      	bne.n	8008daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d11b      	bne.n	8008daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d113      	bne.n	8008daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d8c:	085b      	lsrs	r3, r3, #1
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d109      	bne.n	8008daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008da0:	085b      	lsrs	r3, r3, #1
 8008da2:	3b01      	subs	r3, #1
 8008da4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008da6:	429a      	cmp	r2, r3
 8008da8:	d001      	beq.n	8008dae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e000      	b.n	8008db0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008dae:	2300      	movs	r3, #0
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3720      	adds	r7, #32
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	40021000 	.word	0x40021000
 8008dbc:	019f800c 	.word	0x019f800c
 8008dc0:	feeefffc 	.word	0xfeeefffc

08008dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b086      	sub	sp, #24
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d101      	bne.n	8008ddc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e11e      	b.n	800901a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ddc:	4b91      	ldr	r3, [pc, #580]	@ (8009024 <HAL_RCC_ClockConfig+0x260>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f003 030f 	and.w	r3, r3, #15
 8008de4:	683a      	ldr	r2, [r7, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d910      	bls.n	8008e0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dea:	4b8e      	ldr	r3, [pc, #568]	@ (8009024 <HAL_RCC_ClockConfig+0x260>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f023 020f 	bic.w	r2, r3, #15
 8008df2:	498c      	ldr	r1, [pc, #560]	@ (8009024 <HAL_RCC_ClockConfig+0x260>)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dfa:	4b8a      	ldr	r3, [pc, #552]	@ (8009024 <HAL_RCC_ClockConfig+0x260>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 030f 	and.w	r3, r3, #15
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d001      	beq.n	8008e0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e106      	b.n	800901a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d073      	beq.n	8008f00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	2b03      	cmp	r3, #3
 8008e1e:	d129      	bne.n	8008e74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008e20:	4b81      	ldr	r3, [pc, #516]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d101      	bne.n	8008e30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	e0f4      	b.n	800901a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008e30:	f000 f99e 	bl	8009170 <RCC_GetSysClockFreqFromPLLSource>
 8008e34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	4a7c      	ldr	r2, [pc, #496]	@ (800902c <HAL_RCC_ClockConfig+0x268>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d93f      	bls.n	8008ebe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008e3e:	4b7a      	ldr	r3, [pc, #488]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d009      	beq.n	8008e5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d033      	beq.n	8008ebe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d12f      	bne.n	8008ebe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008e5e:	4b72      	ldr	r3, [pc, #456]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008e66:	4a70      	ldr	r2, [pc, #448]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008e6e:	2380      	movs	r3, #128	@ 0x80
 8008e70:	617b      	str	r3, [r7, #20]
 8008e72:	e024      	b.n	8008ebe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	2b02      	cmp	r3, #2
 8008e7a:	d107      	bne.n	8008e8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e7c:	4b6a      	ldr	r3, [pc, #424]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d109      	bne.n	8008e9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	e0c6      	b.n	800901a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e8c:	4b66      	ldr	r3, [pc, #408]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e0be      	b.n	800901a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008e9c:	f000 f8ce 	bl	800903c <HAL_RCC_GetSysClockFreq>
 8008ea0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	4a61      	ldr	r2, [pc, #388]	@ (800902c <HAL_RCC_ClockConfig+0x268>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d909      	bls.n	8008ebe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008eb2:	4a5d      	ldr	r2, [pc, #372]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008eb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eb8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008eba:	2380      	movs	r3, #128	@ 0x80
 8008ebc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008ebe:	4b5a      	ldr	r3, [pc, #360]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f023 0203 	bic.w	r2, r3, #3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	4957      	ldr	r1, [pc, #348]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ed0:	f7fb f8de 	bl	8004090 <HAL_GetTick>
 8008ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ed6:	e00a      	b.n	8008eee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ed8:	f7fb f8da 	bl	8004090 <HAL_GetTick>
 8008edc:	4602      	mov	r2, r0
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	1ad3      	subs	r3, r2, r3
 8008ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d901      	bls.n	8008eee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	e095      	b.n	800901a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eee:	4b4e      	ldr	r3, [pc, #312]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	f003 020c 	and.w	r2, r3, #12
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d1eb      	bne.n	8008ed8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0302 	and.w	r3, r3, #2
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d023      	beq.n	8008f54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 0304 	and.w	r3, r3, #4
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d005      	beq.n	8008f24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f18:	4b43      	ldr	r3, [pc, #268]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	4a42      	ldr	r2, [pc, #264]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008f1e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008f22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0308 	and.w	r3, r3, #8
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d007      	beq.n	8008f40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008f30:	4b3d      	ldr	r3, [pc, #244]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008f38:	4a3b      	ldr	r2, [pc, #236]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008f3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008f3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f40:	4b39      	ldr	r3, [pc, #228]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	689b      	ldr	r3, [r3, #8]
 8008f4c:	4936      	ldr	r1, [pc, #216]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	608b      	str	r3, [r1, #8]
 8008f52:	e008      	b.n	8008f66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	2b80      	cmp	r3, #128	@ 0x80
 8008f58:	d105      	bne.n	8008f66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008f5a:	4b33      	ldr	r3, [pc, #204]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008f5c:	689b      	ldr	r3, [r3, #8]
 8008f5e:	4a32      	ldr	r2, [pc, #200]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008f60:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f66:	4b2f      	ldr	r3, [pc, #188]	@ (8009024 <HAL_RCC_ClockConfig+0x260>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f003 030f 	and.w	r3, r3, #15
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d21d      	bcs.n	8008fb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f74:	4b2b      	ldr	r3, [pc, #172]	@ (8009024 <HAL_RCC_ClockConfig+0x260>)
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f023 020f 	bic.w	r2, r3, #15
 8008f7c:	4929      	ldr	r1, [pc, #164]	@ (8009024 <HAL_RCC_ClockConfig+0x260>)
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008f84:	f7fb f884 	bl	8004090 <HAL_GetTick>
 8008f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f8a:	e00a      	b.n	8008fa2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f8c:	f7fb f880 	bl	8004090 <HAL_GetTick>
 8008f90:	4602      	mov	r2, r0
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d901      	bls.n	8008fa2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008f9e:	2303      	movs	r3, #3
 8008fa0:	e03b      	b.n	800901a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fa2:	4b20      	ldr	r3, [pc, #128]	@ (8009024 <HAL_RCC_ClockConfig+0x260>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 030f 	and.w	r3, r3, #15
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d1ed      	bne.n	8008f8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 0304 	and.w	r3, r3, #4
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d008      	beq.n	8008fce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	4917      	ldr	r1, [pc, #92]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f003 0308 	and.w	r3, r3, #8
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d009      	beq.n	8008fee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008fda:	4b13      	ldr	r3, [pc, #76]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	00db      	lsls	r3, r3, #3
 8008fe8:	490f      	ldr	r1, [pc, #60]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008fea:	4313      	orrs	r3, r2
 8008fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008fee:	f000 f825 	bl	800903c <HAL_RCC_GetSysClockFreq>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8009028 <HAL_RCC_ClockConfig+0x264>)
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	091b      	lsrs	r3, r3, #4
 8008ffa:	f003 030f 	and.w	r3, r3, #15
 8008ffe:	490c      	ldr	r1, [pc, #48]	@ (8009030 <HAL_RCC_ClockConfig+0x26c>)
 8009000:	5ccb      	ldrb	r3, [r1, r3]
 8009002:	f003 031f 	and.w	r3, r3, #31
 8009006:	fa22 f303 	lsr.w	r3, r2, r3
 800900a:	4a0a      	ldr	r2, [pc, #40]	@ (8009034 <HAL_RCC_ClockConfig+0x270>)
 800900c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800900e:	4b0a      	ldr	r3, [pc, #40]	@ (8009038 <HAL_RCC_ClockConfig+0x274>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4618      	mov	r0, r3
 8009014:	f7fa fff0 	bl	8003ff8 <HAL_InitTick>
 8009018:	4603      	mov	r3, r0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	40022000 	.word	0x40022000
 8009028:	40021000 	.word	0x40021000
 800902c:	04c4b400 	.word	0x04c4b400
 8009030:	08016d30 	.word	0x08016d30
 8009034:	2000001c 	.word	0x2000001c
 8009038:	20000020 	.word	0x20000020

0800903c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009042:	4b2c      	ldr	r3, [pc, #176]	@ (80090f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	f003 030c 	and.w	r3, r3, #12
 800904a:	2b04      	cmp	r3, #4
 800904c:	d102      	bne.n	8009054 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800904e:	4b2a      	ldr	r3, [pc, #168]	@ (80090f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009050:	613b      	str	r3, [r7, #16]
 8009052:	e047      	b.n	80090e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009054:	4b27      	ldr	r3, [pc, #156]	@ (80090f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f003 030c 	and.w	r3, r3, #12
 800905c:	2b08      	cmp	r3, #8
 800905e:	d102      	bne.n	8009066 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009060:	4b26      	ldr	r3, [pc, #152]	@ (80090fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8009062:	613b      	str	r3, [r7, #16]
 8009064:	e03e      	b.n	80090e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8009066:	4b23      	ldr	r3, [pc, #140]	@ (80090f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	f003 030c 	and.w	r3, r3, #12
 800906e:	2b0c      	cmp	r3, #12
 8009070:	d136      	bne.n	80090e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009072:	4b20      	ldr	r3, [pc, #128]	@ (80090f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	f003 0303 	and.w	r3, r3, #3
 800907a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800907c:	4b1d      	ldr	r3, [pc, #116]	@ (80090f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	091b      	lsrs	r3, r3, #4
 8009082:	f003 030f 	and.w	r3, r3, #15
 8009086:	3301      	adds	r3, #1
 8009088:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2b03      	cmp	r3, #3
 800908e:	d10c      	bne.n	80090aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009090:	4a1a      	ldr	r2, [pc, #104]	@ (80090fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8009092:	68bb      	ldr	r3, [r7, #8]
 8009094:	fbb2 f3f3 	udiv	r3, r2, r3
 8009098:	4a16      	ldr	r2, [pc, #88]	@ (80090f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800909a:	68d2      	ldr	r2, [r2, #12]
 800909c:	0a12      	lsrs	r2, r2, #8
 800909e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80090a2:	fb02 f303 	mul.w	r3, r2, r3
 80090a6:	617b      	str	r3, [r7, #20]
      break;
 80090a8:	e00c      	b.n	80090c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80090aa:	4a13      	ldr	r2, [pc, #76]	@ (80090f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b2:	4a10      	ldr	r2, [pc, #64]	@ (80090f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090b4:	68d2      	ldr	r2, [r2, #12]
 80090b6:	0a12      	lsrs	r2, r2, #8
 80090b8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80090bc:	fb02 f303 	mul.w	r3, r2, r3
 80090c0:	617b      	str	r3, [r7, #20]
      break;
 80090c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80090c4:	4b0b      	ldr	r3, [pc, #44]	@ (80090f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	0e5b      	lsrs	r3, r3, #25
 80090ca:	f003 0303 	and.w	r3, r3, #3
 80090ce:	3301      	adds	r3, #1
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090dc:	613b      	str	r3, [r7, #16]
 80090de:	e001      	b.n	80090e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80090e0:	2300      	movs	r3, #0
 80090e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80090e4:	693b      	ldr	r3, [r7, #16]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	371c      	adds	r7, #28
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	40021000 	.word	0x40021000
 80090f8:	00f42400 	.word	0x00f42400
 80090fc:	016e3600 	.word	0x016e3600

08009100 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009100:	b480      	push	{r7}
 8009102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009104:	4b03      	ldr	r3, [pc, #12]	@ (8009114 <HAL_RCC_GetHCLKFreq+0x14>)
 8009106:	681b      	ldr	r3, [r3, #0]
}
 8009108:	4618      	mov	r0, r3
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	2000001c 	.word	0x2000001c

08009118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800911c:	f7ff fff0 	bl	8009100 <HAL_RCC_GetHCLKFreq>
 8009120:	4602      	mov	r2, r0
 8009122:	4b06      	ldr	r3, [pc, #24]	@ (800913c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	0a1b      	lsrs	r3, r3, #8
 8009128:	f003 0307 	and.w	r3, r3, #7
 800912c:	4904      	ldr	r1, [pc, #16]	@ (8009140 <HAL_RCC_GetPCLK1Freq+0x28>)
 800912e:	5ccb      	ldrb	r3, [r1, r3]
 8009130:	f003 031f 	and.w	r3, r3, #31
 8009134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009138:	4618      	mov	r0, r3
 800913a:	bd80      	pop	{r7, pc}
 800913c:	40021000 	.word	0x40021000
 8009140:	08016d40 	.word	0x08016d40

08009144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009148:	f7ff ffda 	bl	8009100 <HAL_RCC_GetHCLKFreq>
 800914c:	4602      	mov	r2, r0
 800914e:	4b06      	ldr	r3, [pc, #24]	@ (8009168 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	0adb      	lsrs	r3, r3, #11
 8009154:	f003 0307 	and.w	r3, r3, #7
 8009158:	4904      	ldr	r1, [pc, #16]	@ (800916c <HAL_RCC_GetPCLK2Freq+0x28>)
 800915a:	5ccb      	ldrb	r3, [r1, r3]
 800915c:	f003 031f 	and.w	r3, r3, #31
 8009160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009164:	4618      	mov	r0, r3
 8009166:	bd80      	pop	{r7, pc}
 8009168:	40021000 	.word	0x40021000
 800916c:	08016d40 	.word	0x08016d40

08009170 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009170:	b480      	push	{r7}
 8009172:	b087      	sub	sp, #28
 8009174:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009176:	4b1e      	ldr	r3, [pc, #120]	@ (80091f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	f003 0303 	and.w	r3, r3, #3
 800917e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009180:	4b1b      	ldr	r3, [pc, #108]	@ (80091f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009182:	68db      	ldr	r3, [r3, #12]
 8009184:	091b      	lsrs	r3, r3, #4
 8009186:	f003 030f 	and.w	r3, r3, #15
 800918a:	3301      	adds	r3, #1
 800918c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	2b03      	cmp	r3, #3
 8009192:	d10c      	bne.n	80091ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009194:	4a17      	ldr	r2, [pc, #92]	@ (80091f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	fbb2 f3f3 	udiv	r3, r2, r3
 800919c:	4a14      	ldr	r2, [pc, #80]	@ (80091f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800919e:	68d2      	ldr	r2, [r2, #12]
 80091a0:	0a12      	lsrs	r2, r2, #8
 80091a2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80091a6:	fb02 f303 	mul.w	r3, r2, r3
 80091aa:	617b      	str	r3, [r7, #20]
    break;
 80091ac:	e00c      	b.n	80091c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80091ae:	4a12      	ldr	r2, [pc, #72]	@ (80091f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b6:	4a0e      	ldr	r2, [pc, #56]	@ (80091f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80091b8:	68d2      	ldr	r2, [r2, #12]
 80091ba:	0a12      	lsrs	r2, r2, #8
 80091bc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80091c0:	fb02 f303 	mul.w	r3, r2, r3
 80091c4:	617b      	str	r3, [r7, #20]
    break;
 80091c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80091c8:	4b09      	ldr	r3, [pc, #36]	@ (80091f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	0e5b      	lsrs	r3, r3, #25
 80091ce:	f003 0303 	and.w	r3, r3, #3
 80091d2:	3301      	adds	r3, #1
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80091e2:	687b      	ldr	r3, [r7, #4]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	371c      	adds	r7, #28
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr
 80091f0:	40021000 	.word	0x40021000
 80091f4:	016e3600 	.word	0x016e3600
 80091f8:	00f42400 	.word	0x00f42400

080091fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b086      	sub	sp, #24
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009204:	2300      	movs	r3, #0
 8009206:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009208:	2300      	movs	r3, #0
 800920a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009214:	2b00      	cmp	r3, #0
 8009216:	f000 8098 	beq.w	800934a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800921a:	2300      	movs	r3, #0
 800921c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800921e:	4b43      	ldr	r3, [pc, #268]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10d      	bne.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800922a:	4b40      	ldr	r3, [pc, #256]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800922c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800922e:	4a3f      	ldr	r2, [pc, #252]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009234:	6593      	str	r3, [r2, #88]	@ 0x58
 8009236:	4b3d      	ldr	r3, [pc, #244]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800923a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800923e:	60bb      	str	r3, [r7, #8]
 8009240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009242:	2301      	movs	r3, #1
 8009244:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009246:	4b3a      	ldr	r3, [pc, #232]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	4a39      	ldr	r2, [pc, #228]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800924c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009250:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009252:	f7fa ff1d 	bl	8004090 <HAL_GetTick>
 8009256:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009258:	e009      	b.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800925a:	f7fa ff19 	bl	8004090 <HAL_GetTick>
 800925e:	4602      	mov	r2, r0
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	1ad3      	subs	r3, r2, r3
 8009264:	2b02      	cmp	r3, #2
 8009266:	d902      	bls.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009268:	2303      	movs	r3, #3
 800926a:	74fb      	strb	r3, [r7, #19]
        break;
 800926c:	e005      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800926e:	4b30      	ldr	r3, [pc, #192]	@ (8009330 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0ef      	beq.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800927a:	7cfb      	ldrb	r3, [r7, #19]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d159      	bne.n	8009334 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009280:	4b2a      	ldr	r3, [pc, #168]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009286:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800928a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d01e      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	429a      	cmp	r2, r3
 800929a:	d019      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800929c:	4b23      	ldr	r3, [pc, #140]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800929e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80092a8:	4b20      	ldr	r3, [pc, #128]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092ae:	4a1f      	ldr	r2, [pc, #124]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092b8:	4b1c      	ldr	r3, [pc, #112]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092be:	4a1b      	ldr	r2, [pc, #108]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80092c8:	4a18      	ldr	r2, [pc, #96]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d016      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092da:	f7fa fed9 	bl	8004090 <HAL_GetTick>
 80092de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092e0:	e00b      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092e2:	f7fa fed5 	bl	8004090 <HAL_GetTick>
 80092e6:	4602      	mov	r2, r0
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d902      	bls.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	74fb      	strb	r3, [r7, #19]
            break;
 80092f8:	e006      	b.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092fa:	4b0c      	ldr	r3, [pc, #48]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009300:	f003 0302 	and.w	r3, r3, #2
 8009304:	2b00      	cmp	r3, #0
 8009306:	d0ec      	beq.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009308:	7cfb      	ldrb	r3, [r7, #19]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10b      	bne.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800930e:	4b07      	ldr	r3, [pc, #28]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009314:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800931c:	4903      	ldr	r1, [pc, #12]	@ (800932c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800931e:	4313      	orrs	r3, r2
 8009320:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009324:	e008      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009326:	7cfb      	ldrb	r3, [r7, #19]
 8009328:	74bb      	strb	r3, [r7, #18]
 800932a:	e005      	b.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800932c:	40021000 	.word	0x40021000
 8009330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009334:	7cfb      	ldrb	r3, [r7, #19]
 8009336:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009338:	7c7b      	ldrb	r3, [r7, #17]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d105      	bne.n	800934a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800933e:	4ba7      	ldr	r3, [pc, #668]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009342:	4aa6      	ldr	r2, [pc, #664]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009344:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009348:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d00a      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009356:	4ba1      	ldr	r3, [pc, #644]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800935c:	f023 0203 	bic.w	r2, r3, #3
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	499d      	ldr	r1, [pc, #628]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009366:	4313      	orrs	r3, r2
 8009368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 0302 	and.w	r3, r3, #2
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00a      	beq.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009378:	4b98      	ldr	r3, [pc, #608]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800937a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800937e:	f023 020c 	bic.w	r2, r3, #12
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	4995      	ldr	r1, [pc, #596]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009388:	4313      	orrs	r3, r2
 800938a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	d00a      	beq.n	80093b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800939a:	4b90      	ldr	r3, [pc, #576]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800939c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	498c      	ldr	r1, [pc, #560]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093aa:	4313      	orrs	r3, r2
 80093ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 0308 	and.w	r3, r3, #8
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00a      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80093bc:	4b87      	ldr	r3, [pc, #540]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	4984      	ldr	r1, [pc, #528]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 0310 	and.w	r3, r3, #16
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00a      	beq.n	80093f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80093de:	4b7f      	ldr	r3, [pc, #508]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	695b      	ldr	r3, [r3, #20]
 80093ec:	497b      	ldr	r1, [pc, #492]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80093ee:	4313      	orrs	r3, r2
 80093f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 0320 	and.w	r3, r3, #32
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d00a      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009400:	4b76      	ldr	r3, [pc, #472]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009402:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009406:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	699b      	ldr	r3, [r3, #24]
 800940e:	4973      	ldr	r1, [pc, #460]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009410:	4313      	orrs	r3, r2
 8009412:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800941e:	2b00      	cmp	r3, #0
 8009420:	d00a      	beq.n	8009438 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009422:	4b6e      	ldr	r3, [pc, #440]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009428:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	496a      	ldr	r1, [pc, #424]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009432:	4313      	orrs	r3, r2
 8009434:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009440:	2b00      	cmp	r3, #0
 8009442:	d00a      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009444:	4b65      	ldr	r3, [pc, #404]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800944a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	4962      	ldr	r1, [pc, #392]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009454:	4313      	orrs	r3, r2
 8009456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00a      	beq.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009466:	4b5d      	ldr	r3, [pc, #372]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800946c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009474:	4959      	ldr	r1, [pc, #356]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009476:	4313      	orrs	r3, r2
 8009478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00a      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009488:	4b54      	ldr	r3, [pc, #336]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800948a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800948e:	f023 0203 	bic.w	r2, r3, #3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009496:	4951      	ldr	r1, [pc, #324]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009498:	4313      	orrs	r3, r2
 800949a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d00a      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80094aa:	4b4c      	ldr	r3, [pc, #304]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b8:	4948      	ldr	r1, [pc, #288]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d015      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094cc:	4b43      	ldr	r3, [pc, #268]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094da:	4940      	ldr	r1, [pc, #256]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094dc:	4313      	orrs	r3, r2
 80094de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094ea:	d105      	bne.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80094ec:	4b3b      	ldr	r3, [pc, #236]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	4a3a      	ldr	r2, [pc, #232]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094f6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009500:	2b00      	cmp	r3, #0
 8009502:	d015      	beq.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009504:	4b35      	ldr	r3, [pc, #212]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800950a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009512:	4932      	ldr	r1, [pc, #200]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009514:	4313      	orrs	r3, r2
 8009516:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800951e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009522:	d105      	bne.n	8009530 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009524:	4b2d      	ldr	r3, [pc, #180]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	4a2c      	ldr	r2, [pc, #176]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800952a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800952e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d015      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800953c:	4b27      	ldr	r3, [pc, #156]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800953e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009542:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800954a:	4924      	ldr	r1, [pc, #144]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800954c:	4313      	orrs	r3, r2
 800954e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009556:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800955a:	d105      	bne.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800955c:	4b1f      	ldr	r3, [pc, #124]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	4a1e      	ldr	r2, [pc, #120]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009562:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009566:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d015      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009574:	4b19      	ldr	r3, [pc, #100]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800957a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009582:	4916      	ldr	r1, [pc, #88]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009584:	4313      	orrs	r3, r2
 8009586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800958e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009592:	d105      	bne.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009594:	4b11      	ldr	r3, [pc, #68]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	4a10      	ldr	r2, [pc, #64]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800959a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800959e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d019      	beq.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80095ac:	4b0b      	ldr	r3, [pc, #44]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095b2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ba:	4908      	ldr	r1, [pc, #32]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095bc:	4313      	orrs	r3, r2
 80095be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80095ca:	d109      	bne.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095cc:	4b03      	ldr	r3, [pc, #12]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	4a02      	ldr	r2, [pc, #8]	@ (80095dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095d6:	60d3      	str	r3, [r2, #12]
 80095d8:	e002      	b.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80095da:	bf00      	nop
 80095dc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d015      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80095ec:	4b29      	ldr	r3, [pc, #164]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80095ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095fa:	4926      	ldr	r1, [pc, #152]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80095fc:	4313      	orrs	r3, r2
 80095fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800960a:	d105      	bne.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800960c:	4b21      	ldr	r3, [pc, #132]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	4a20      	ldr	r2, [pc, #128]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009612:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009616:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009620:	2b00      	cmp	r3, #0
 8009622:	d015      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009624:	4b1b      	ldr	r3, [pc, #108]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800962a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009632:	4918      	ldr	r1, [pc, #96]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009634:	4313      	orrs	r3, r2
 8009636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800963e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009642:	d105      	bne.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009644:	4b13      	ldr	r3, [pc, #76]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	4a12      	ldr	r2, [pc, #72]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800964a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800964e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d015      	beq.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800965c:	4b0d      	ldr	r3, [pc, #52]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800965e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009662:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800966a:	490a      	ldr	r1, [pc, #40]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800966c:	4313      	orrs	r3, r2
 800966e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009676:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800967a:	d105      	bne.n	8009688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800967c:	4b05      	ldr	r3, [pc, #20]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	4a04      	ldr	r2, [pc, #16]	@ (8009694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009682:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009686:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009688:	7cbb      	ldrb	r3, [r7, #18]
}
 800968a:	4618      	mov	r0, r3
 800968c:	3718      	adds	r7, #24
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	40021000 	.word	0x40021000

08009698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d101      	bne.n	80096aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096a6:	2301      	movs	r3, #1
 80096a8:	e049      	b.n	800973e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d106      	bne.n	80096c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7fa f994 	bl	80039ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2202      	movs	r2, #2
 80096c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3304      	adds	r3, #4
 80096d4:	4619      	mov	r1, r3
 80096d6:	4610      	mov	r0, r2
 80096d8:	f000 fe58 	bl	800a38c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2201      	movs	r2, #1
 80096e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2201      	movs	r2, #1
 80096f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2201      	movs	r2, #1
 80096f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2201      	movs	r2, #1
 8009700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2201      	movs	r2, #1
 8009710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
	...

08009748 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009748:	b480      	push	{r7}
 800974a:	b085      	sub	sp, #20
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009756:	b2db      	uxtb	r3, r3
 8009758:	2b01      	cmp	r3, #1
 800975a:	d001      	beq.n	8009760 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	e04c      	b.n	80097fa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2202      	movs	r2, #2
 8009764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a26      	ldr	r2, [pc, #152]	@ (8009808 <HAL_TIM_Base_Start+0xc0>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d022      	beq.n	80097b8 <HAL_TIM_Base_Start+0x70>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800977a:	d01d      	beq.n	80097b8 <HAL_TIM_Base_Start+0x70>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a22      	ldr	r2, [pc, #136]	@ (800980c <HAL_TIM_Base_Start+0xc4>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d018      	beq.n	80097b8 <HAL_TIM_Base_Start+0x70>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a21      	ldr	r2, [pc, #132]	@ (8009810 <HAL_TIM_Base_Start+0xc8>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d013      	beq.n	80097b8 <HAL_TIM_Base_Start+0x70>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a1f      	ldr	r2, [pc, #124]	@ (8009814 <HAL_TIM_Base_Start+0xcc>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d00e      	beq.n	80097b8 <HAL_TIM_Base_Start+0x70>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a1e      	ldr	r2, [pc, #120]	@ (8009818 <HAL_TIM_Base_Start+0xd0>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d009      	beq.n	80097b8 <HAL_TIM_Base_Start+0x70>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a1c      	ldr	r2, [pc, #112]	@ (800981c <HAL_TIM_Base_Start+0xd4>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d004      	beq.n	80097b8 <HAL_TIM_Base_Start+0x70>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a1b      	ldr	r2, [pc, #108]	@ (8009820 <HAL_TIM_Base_Start+0xd8>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d115      	bne.n	80097e4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	689a      	ldr	r2, [r3, #8]
 80097be:	4b19      	ldr	r3, [pc, #100]	@ (8009824 <HAL_TIM_Base_Start+0xdc>)
 80097c0:	4013      	ands	r3, r2
 80097c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2b06      	cmp	r3, #6
 80097c8:	d015      	beq.n	80097f6 <HAL_TIM_Base_Start+0xae>
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097d0:	d011      	beq.n	80097f6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f042 0201 	orr.w	r2, r2, #1
 80097e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097e2:	e008      	b.n	80097f6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681a      	ldr	r2, [r3, #0]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f042 0201 	orr.w	r2, r2, #1
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	e000      	b.n	80097f8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80097f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	40012c00 	.word	0x40012c00
 800980c:	40000400 	.word	0x40000400
 8009810:	40000800 	.word	0x40000800
 8009814:	40000c00 	.word	0x40000c00
 8009818:	40013400 	.word	0x40013400
 800981c:	40014000 	.word	0x40014000
 8009820:	40015000 	.word	0x40015000
 8009824:	00010007 	.word	0x00010007

08009828 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b01      	cmp	r3, #1
 800983a:	d001      	beq.n	8009840 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	e054      	b.n	80098ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2202      	movs	r2, #2
 8009844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f042 0201 	orr.w	r2, r2, #1
 8009856:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a26      	ldr	r2, [pc, #152]	@ (80098f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d022      	beq.n	80098a8 <HAL_TIM_Base_Start_IT+0x80>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800986a:	d01d      	beq.n	80098a8 <HAL_TIM_Base_Start_IT+0x80>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a22      	ldr	r2, [pc, #136]	@ (80098fc <HAL_TIM_Base_Start_IT+0xd4>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d018      	beq.n	80098a8 <HAL_TIM_Base_Start_IT+0x80>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a21      	ldr	r2, [pc, #132]	@ (8009900 <HAL_TIM_Base_Start_IT+0xd8>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d013      	beq.n	80098a8 <HAL_TIM_Base_Start_IT+0x80>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a1f      	ldr	r2, [pc, #124]	@ (8009904 <HAL_TIM_Base_Start_IT+0xdc>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d00e      	beq.n	80098a8 <HAL_TIM_Base_Start_IT+0x80>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4a1e      	ldr	r2, [pc, #120]	@ (8009908 <HAL_TIM_Base_Start_IT+0xe0>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d009      	beq.n	80098a8 <HAL_TIM_Base_Start_IT+0x80>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4a1c      	ldr	r2, [pc, #112]	@ (800990c <HAL_TIM_Base_Start_IT+0xe4>)
 800989a:	4293      	cmp	r3, r2
 800989c:	d004      	beq.n	80098a8 <HAL_TIM_Base_Start_IT+0x80>
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a1b      	ldr	r2, [pc, #108]	@ (8009910 <HAL_TIM_Base_Start_IT+0xe8>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d115      	bne.n	80098d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	689a      	ldr	r2, [r3, #8]
 80098ae:	4b19      	ldr	r3, [pc, #100]	@ (8009914 <HAL_TIM_Base_Start_IT+0xec>)
 80098b0:	4013      	ands	r3, r2
 80098b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b06      	cmp	r3, #6
 80098b8:	d015      	beq.n	80098e6 <HAL_TIM_Base_Start_IT+0xbe>
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098c0:	d011      	beq.n	80098e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f042 0201 	orr.w	r2, r2, #1
 80098d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098d2:	e008      	b.n	80098e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f042 0201 	orr.w	r2, r2, #1
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	e000      	b.n	80098e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3714      	adds	r7, #20
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	40012c00 	.word	0x40012c00
 80098fc:	40000400 	.word	0x40000400
 8009900:	40000800 	.word	0x40000800
 8009904:	40000c00 	.word	0x40000c00
 8009908:	40013400 	.word	0x40013400
 800990c:	40014000 	.word	0x40014000
 8009910:	40015000 	.word	0x40015000
 8009914:	00010007 	.word	0x00010007

08009918 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68da      	ldr	r2, [r3, #12]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f022 0201 	bic.w	r2, r2, #1
 800992e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	6a1a      	ldr	r2, [r3, #32]
 8009936:	f241 1311 	movw	r3, #4369	@ 0x1111
 800993a:	4013      	ands	r3, r2
 800993c:	2b00      	cmp	r3, #0
 800993e:	d10f      	bne.n	8009960 <HAL_TIM_Base_Stop_IT+0x48>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	6a1a      	ldr	r2, [r3, #32]
 8009946:	f244 4344 	movw	r3, #17476	@ 0x4444
 800994a:	4013      	ands	r3, r2
 800994c:	2b00      	cmp	r3, #0
 800994e:	d107      	bne.n	8009960 <HAL_TIM_Base_Stop_IT+0x48>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f022 0201 	bic.w	r2, r2, #1
 800995e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009968:	2300      	movs	r3, #0
}
 800996a:	4618      	mov	r0, r3
 800996c:	370c      	adds	r7, #12
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr

08009976 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b082      	sub	sp, #8
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e049      	b.n	8009a1c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b00      	cmp	r3, #0
 8009992:	d106      	bne.n	80099a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7f9 ffeb 	bl	8003978 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	3304      	adds	r3, #4
 80099b2:	4619      	mov	r1, r3
 80099b4:	4610      	mov	r0, r2
 80099b6:	f000 fce9 	bl	800a38c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2201      	movs	r2, #1
 80099d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	2201      	movs	r2, #1
 80099de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2201      	movs	r2, #1
 80099ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2201      	movs	r2, #1
 80099f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2201      	movs	r2, #1
 80099fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d109      	bne.n	8009a48 <HAL_TIM_PWM_Start+0x24>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	bf14      	ite	ne
 8009a40:	2301      	movne	r3, #1
 8009a42:	2300      	moveq	r3, #0
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	e03c      	b.n	8009ac2 <HAL_TIM_PWM_Start+0x9e>
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	2b04      	cmp	r3, #4
 8009a4c:	d109      	bne.n	8009a62 <HAL_TIM_PWM_Start+0x3e>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	bf14      	ite	ne
 8009a5a:	2301      	movne	r3, #1
 8009a5c:	2300      	moveq	r3, #0
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	e02f      	b.n	8009ac2 <HAL_TIM_PWM_Start+0x9e>
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b08      	cmp	r3, #8
 8009a66:	d109      	bne.n	8009a7c <HAL_TIM_PWM_Start+0x58>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009a6e:	b2db      	uxtb	r3, r3
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	bf14      	ite	ne
 8009a74:	2301      	movne	r3, #1
 8009a76:	2300      	moveq	r3, #0
 8009a78:	b2db      	uxtb	r3, r3
 8009a7a:	e022      	b.n	8009ac2 <HAL_TIM_PWM_Start+0x9e>
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	2b0c      	cmp	r3, #12
 8009a80:	d109      	bne.n	8009a96 <HAL_TIM_PWM_Start+0x72>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	bf14      	ite	ne
 8009a8e:	2301      	movne	r3, #1
 8009a90:	2300      	moveq	r3, #0
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	e015      	b.n	8009ac2 <HAL_TIM_PWM_Start+0x9e>
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	2b10      	cmp	r3, #16
 8009a9a:	d109      	bne.n	8009ab0 <HAL_TIM_PWM_Start+0x8c>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	bf14      	ite	ne
 8009aa8:	2301      	movne	r3, #1
 8009aaa:	2300      	moveq	r3, #0
 8009aac:	b2db      	uxtb	r3, r3
 8009aae:	e008      	b.n	8009ac2 <HAL_TIM_PWM_Start+0x9e>
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009ab6:	b2db      	uxtb	r3, r3
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	bf14      	ite	ne
 8009abc:	2301      	movne	r3, #1
 8009abe:	2300      	moveq	r3, #0
 8009ac0:	b2db      	uxtb	r3, r3
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d001      	beq.n	8009aca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009ac6:	2301      	movs	r3, #1
 8009ac8:	e0a6      	b.n	8009c18 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d104      	bne.n	8009ada <HAL_TIM_PWM_Start+0xb6>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2202      	movs	r2, #2
 8009ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ad8:	e023      	b.n	8009b22 <HAL_TIM_PWM_Start+0xfe>
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2b04      	cmp	r3, #4
 8009ade:	d104      	bne.n	8009aea <HAL_TIM_PWM_Start+0xc6>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2202      	movs	r2, #2
 8009ae4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ae8:	e01b      	b.n	8009b22 <HAL_TIM_PWM_Start+0xfe>
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	2b08      	cmp	r3, #8
 8009aee:	d104      	bne.n	8009afa <HAL_TIM_PWM_Start+0xd6>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2202      	movs	r2, #2
 8009af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009af8:	e013      	b.n	8009b22 <HAL_TIM_PWM_Start+0xfe>
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b0c      	cmp	r3, #12
 8009afe:	d104      	bne.n	8009b0a <HAL_TIM_PWM_Start+0xe6>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2202      	movs	r2, #2
 8009b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b08:	e00b      	b.n	8009b22 <HAL_TIM_PWM_Start+0xfe>
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	2b10      	cmp	r3, #16
 8009b0e:	d104      	bne.n	8009b1a <HAL_TIM_PWM_Start+0xf6>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2202      	movs	r2, #2
 8009b14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b18:	e003      	b.n	8009b22 <HAL_TIM_PWM_Start+0xfe>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2202      	movs	r2, #2
 8009b1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2201      	movs	r2, #1
 8009b28:	6839      	ldr	r1, [r7, #0]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f001 f8a8 	bl	800ac80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a3a      	ldr	r2, [pc, #232]	@ (8009c20 <HAL_TIM_PWM_Start+0x1fc>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d018      	beq.n	8009b6c <HAL_TIM_PWM_Start+0x148>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a39      	ldr	r2, [pc, #228]	@ (8009c24 <HAL_TIM_PWM_Start+0x200>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d013      	beq.n	8009b6c <HAL_TIM_PWM_Start+0x148>
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a37      	ldr	r2, [pc, #220]	@ (8009c28 <HAL_TIM_PWM_Start+0x204>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d00e      	beq.n	8009b6c <HAL_TIM_PWM_Start+0x148>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a36      	ldr	r2, [pc, #216]	@ (8009c2c <HAL_TIM_PWM_Start+0x208>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d009      	beq.n	8009b6c <HAL_TIM_PWM_Start+0x148>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	4a34      	ldr	r2, [pc, #208]	@ (8009c30 <HAL_TIM_PWM_Start+0x20c>)
 8009b5e:	4293      	cmp	r3, r2
 8009b60:	d004      	beq.n	8009b6c <HAL_TIM_PWM_Start+0x148>
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a33      	ldr	r2, [pc, #204]	@ (8009c34 <HAL_TIM_PWM_Start+0x210>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d101      	bne.n	8009b70 <HAL_TIM_PWM_Start+0x14c>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e000      	b.n	8009b72 <HAL_TIM_PWM_Start+0x14e>
 8009b70:	2300      	movs	r3, #0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d007      	beq.n	8009b86 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009b84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a25      	ldr	r2, [pc, #148]	@ (8009c20 <HAL_TIM_PWM_Start+0x1fc>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d022      	beq.n	8009bd6 <HAL_TIM_PWM_Start+0x1b2>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009b98:	d01d      	beq.n	8009bd6 <HAL_TIM_PWM_Start+0x1b2>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a26      	ldr	r2, [pc, #152]	@ (8009c38 <HAL_TIM_PWM_Start+0x214>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d018      	beq.n	8009bd6 <HAL_TIM_PWM_Start+0x1b2>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a24      	ldr	r2, [pc, #144]	@ (8009c3c <HAL_TIM_PWM_Start+0x218>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d013      	beq.n	8009bd6 <HAL_TIM_PWM_Start+0x1b2>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a23      	ldr	r2, [pc, #140]	@ (8009c40 <HAL_TIM_PWM_Start+0x21c>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d00e      	beq.n	8009bd6 <HAL_TIM_PWM_Start+0x1b2>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a19      	ldr	r2, [pc, #100]	@ (8009c24 <HAL_TIM_PWM_Start+0x200>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d009      	beq.n	8009bd6 <HAL_TIM_PWM_Start+0x1b2>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a18      	ldr	r2, [pc, #96]	@ (8009c28 <HAL_TIM_PWM_Start+0x204>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d004      	beq.n	8009bd6 <HAL_TIM_PWM_Start+0x1b2>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a18      	ldr	r2, [pc, #96]	@ (8009c34 <HAL_TIM_PWM_Start+0x210>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d115      	bne.n	8009c02 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	689a      	ldr	r2, [r3, #8]
 8009bdc:	4b19      	ldr	r3, [pc, #100]	@ (8009c44 <HAL_TIM_PWM_Start+0x220>)
 8009bde:	4013      	ands	r3, r2
 8009be0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2b06      	cmp	r3, #6
 8009be6:	d015      	beq.n	8009c14 <HAL_TIM_PWM_Start+0x1f0>
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bee:	d011      	beq.n	8009c14 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0201 	orr.w	r2, r2, #1
 8009bfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c00:	e008      	b.n	8009c14 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f042 0201 	orr.w	r2, r2, #1
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	e000      	b.n	8009c16 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c16:	2300      	movs	r3, #0
}
 8009c18:	4618      	mov	r0, r3
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	40012c00 	.word	0x40012c00
 8009c24:	40013400 	.word	0x40013400
 8009c28:	40014000 	.word	0x40014000
 8009c2c:	40014400 	.word	0x40014400
 8009c30:	40014800 	.word	0x40014800
 8009c34:	40015000 	.word	0x40015000
 8009c38:	40000400 	.word	0x40000400
 8009c3c:	40000800 	.word	0x40000800
 8009c40:	40000c00 	.word	0x40000c00
 8009c44:	00010007 	.word	0x00010007

08009c48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f003 0302 	and.w	r3, r3, #2
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d020      	beq.n	8009cac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f003 0302 	and.w	r3, r3, #2
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d01b      	beq.n	8009cac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f06f 0202 	mvn.w	r2, #2
 8009c7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	f003 0303 	and.w	r3, r3, #3
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d003      	beq.n	8009c9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fb5c 	bl	800a350 <HAL_TIM_IC_CaptureCallback>
 8009c98:	e005      	b.n	8009ca6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fb4e 	bl	800a33c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fb5f 	bl	800a364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	f003 0304 	and.w	r3, r3, #4
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d020      	beq.n	8009cf8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d01b      	beq.n	8009cf8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f06f 0204 	mvn.w	r2, #4
 8009cc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2202      	movs	r2, #2
 8009cce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	699b      	ldr	r3, [r3, #24]
 8009cd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f000 fb36 	bl	800a350 <HAL_TIM_IC_CaptureCallback>
 8009ce4:	e005      	b.n	8009cf2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f000 fb28 	bl	800a33c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 fb39 	bl	800a364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	f003 0308 	and.w	r3, r3, #8
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d020      	beq.n	8009d44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f003 0308 	and.w	r3, r3, #8
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d01b      	beq.n	8009d44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f06f 0208 	mvn.w	r2, #8
 8009d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2204      	movs	r2, #4
 8009d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	69db      	ldr	r3, [r3, #28]
 8009d22:	f003 0303 	and.w	r3, r3, #3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d003      	beq.n	8009d32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	f000 fb10 	bl	800a350 <HAL_TIM_IC_CaptureCallback>
 8009d30:	e005      	b.n	8009d3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f000 fb02 	bl	800a33c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f000 fb13 	bl	800a364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	f003 0310 	and.w	r3, r3, #16
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d020      	beq.n	8009d90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f003 0310 	and.w	r3, r3, #16
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d01b      	beq.n	8009d90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f06f 0210 	mvn.w	r2, #16
 8009d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2208      	movs	r2, #8
 8009d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	69db      	ldr	r3, [r3, #28]
 8009d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 faea 	bl	800a350 <HAL_TIM_IC_CaptureCallback>
 8009d7c:	e005      	b.n	8009d8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fadc 	bl	800a33c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f000 faed 	bl	800a364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	f003 0301 	and.w	r3, r3, #1
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d00c      	beq.n	8009db4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f003 0301 	and.w	r3, r3, #1
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d007      	beq.n	8009db4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f06f 0201 	mvn.w	r2, #1
 8009dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f7f8 fbb6 	bl	8002520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d104      	bne.n	8009dc8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00c      	beq.n	8009de2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d007      	beq.n	8009de2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f001 f8a9 	bl	800af34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00c      	beq.n	8009e06 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d007      	beq.n	8009e06 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f001 f8a1 	bl	800af48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d00c      	beq.n	8009e2a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d007      	beq.n	8009e2a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 faa7 	bl	800a378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	f003 0320 	and.w	r3, r3, #32
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00c      	beq.n	8009e4e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f003 0320 	and.w	r3, r3, #32
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d007      	beq.n	8009e4e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f06f 0220 	mvn.w	r2, #32
 8009e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f001 f869 	bl	800af20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00c      	beq.n	8009e72 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d007      	beq.n	8009e72 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f001 f875 	bl	800af5c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00c      	beq.n	8009e96 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d007      	beq.n	8009e96 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f001 f86d 	bl	800af70 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00c      	beq.n	8009eba <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d007      	beq.n	8009eba <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f001 f865 	bl	800af84 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00c      	beq.n	8009ede <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d007      	beq.n	8009ede <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f001 f85d 	bl	800af98 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ede:	bf00      	nop
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
	...

08009ee8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d101      	bne.n	8009f06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009f02:	2302      	movs	r3, #2
 8009f04:	e0ff      	b.n	800a106 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b14      	cmp	r3, #20
 8009f12:	f200 80f0 	bhi.w	800a0f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009f16:	a201      	add	r2, pc, #4	@ (adr r2, 8009f1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f1c:	08009f71 	.word	0x08009f71
 8009f20:	0800a0f7 	.word	0x0800a0f7
 8009f24:	0800a0f7 	.word	0x0800a0f7
 8009f28:	0800a0f7 	.word	0x0800a0f7
 8009f2c:	08009fb1 	.word	0x08009fb1
 8009f30:	0800a0f7 	.word	0x0800a0f7
 8009f34:	0800a0f7 	.word	0x0800a0f7
 8009f38:	0800a0f7 	.word	0x0800a0f7
 8009f3c:	08009ff3 	.word	0x08009ff3
 8009f40:	0800a0f7 	.word	0x0800a0f7
 8009f44:	0800a0f7 	.word	0x0800a0f7
 8009f48:	0800a0f7 	.word	0x0800a0f7
 8009f4c:	0800a033 	.word	0x0800a033
 8009f50:	0800a0f7 	.word	0x0800a0f7
 8009f54:	0800a0f7 	.word	0x0800a0f7
 8009f58:	0800a0f7 	.word	0x0800a0f7
 8009f5c:	0800a075 	.word	0x0800a075
 8009f60:	0800a0f7 	.word	0x0800a0f7
 8009f64:	0800a0f7 	.word	0x0800a0f7
 8009f68:	0800a0f7 	.word	0x0800a0f7
 8009f6c:	0800a0b5 	.word	0x0800a0b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68b9      	ldr	r1, [r7, #8]
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 fabc 	bl	800a4f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	699a      	ldr	r2, [r3, #24]
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f042 0208 	orr.w	r2, r2, #8
 8009f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	699a      	ldr	r2, [r3, #24]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f022 0204 	bic.w	r2, r2, #4
 8009f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	6999      	ldr	r1, [r3, #24]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	691a      	ldr	r2, [r3, #16]
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	430a      	orrs	r2, r1
 8009fac:	619a      	str	r2, [r3, #24]
      break;
 8009fae:	e0a5      	b.n	800a0fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68b9      	ldr	r1, [r7, #8]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f000 fb36 	bl	800a628 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	699a      	ldr	r2, [r3, #24]
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	699a      	ldr	r2, [r3, #24]
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	6999      	ldr	r1, [r3, #24]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	021a      	lsls	r2, r3, #8
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	430a      	orrs	r2, r1
 8009fee:	619a      	str	r2, [r3, #24]
      break;
 8009ff0:	e084      	b.n	800a0fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68b9      	ldr	r1, [r7, #8]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f000 fba9 	bl	800a750 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	69da      	ldr	r2, [r3, #28]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f042 0208 	orr.w	r2, r2, #8
 800a00c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	69da      	ldr	r2, [r3, #28]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f022 0204 	bic.w	r2, r2, #4
 800a01c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	69d9      	ldr	r1, [r3, #28]
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	691a      	ldr	r2, [r3, #16]
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	430a      	orrs	r2, r1
 800a02e:	61da      	str	r2, [r3, #28]
      break;
 800a030:	e064      	b.n	800a0fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	68b9      	ldr	r1, [r7, #8]
 800a038:	4618      	mov	r0, r3
 800a03a:	f000 fc1b 	bl	800a874 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	69da      	ldr	r2, [r3, #28]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a04c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	69da      	ldr	r2, [r3, #28]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a05c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	69d9      	ldr	r1, [r3, #28]
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	021a      	lsls	r2, r3, #8
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	430a      	orrs	r2, r1
 800a070:	61da      	str	r2, [r3, #28]
      break;
 800a072:	e043      	b.n	800a0fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	68b9      	ldr	r1, [r7, #8]
 800a07a:	4618      	mov	r0, r3
 800a07c:	f000 fc8e 	bl	800a99c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f042 0208 	orr.w	r2, r2, #8
 800a08e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f022 0204 	bic.w	r2, r2, #4
 800a09e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	691a      	ldr	r2, [r3, #16]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a0b2:	e023      	b.n	800a0fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	68b9      	ldr	r1, [r7, #8]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f000 fcd8 	bl	800aa70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a0ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0de:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	691b      	ldr	r3, [r3, #16]
 800a0ea:	021a      	lsls	r2, r3, #8
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	430a      	orrs	r2, r1
 800a0f2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a0f4:	e002      	b.n	800a0fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	75fb      	strb	r3, [r7, #23]
      break;
 800a0fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2200      	movs	r2, #0
 800a100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a104:	7dfb      	ldrb	r3, [r7, #23]
}
 800a106:	4618      	mov	r0, r3
 800a108:	3718      	adds	r7, #24
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	bf00      	nop

0800a110 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
 800a118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a124:	2b01      	cmp	r3, #1
 800a126:	d101      	bne.n	800a12c <HAL_TIM_ConfigClockSource+0x1c>
 800a128:	2302      	movs	r3, #2
 800a12a:	e0f6      	b.n	800a31a <HAL_TIM_ConfigClockSource+0x20a>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2202      	movs	r2, #2
 800a138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a14a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a14e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68ba      	ldr	r2, [r7, #8]
 800a15e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a6f      	ldr	r2, [pc, #444]	@ (800a324 <HAL_TIM_ConfigClockSource+0x214>)
 800a166:	4293      	cmp	r3, r2
 800a168:	f000 80c1 	beq.w	800a2ee <HAL_TIM_ConfigClockSource+0x1de>
 800a16c:	4a6d      	ldr	r2, [pc, #436]	@ (800a324 <HAL_TIM_ConfigClockSource+0x214>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	f200 80c6 	bhi.w	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a174:	4a6c      	ldr	r2, [pc, #432]	@ (800a328 <HAL_TIM_ConfigClockSource+0x218>)
 800a176:	4293      	cmp	r3, r2
 800a178:	f000 80b9 	beq.w	800a2ee <HAL_TIM_ConfigClockSource+0x1de>
 800a17c:	4a6a      	ldr	r2, [pc, #424]	@ (800a328 <HAL_TIM_ConfigClockSource+0x218>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	f200 80be 	bhi.w	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a184:	4a69      	ldr	r2, [pc, #420]	@ (800a32c <HAL_TIM_ConfigClockSource+0x21c>)
 800a186:	4293      	cmp	r3, r2
 800a188:	f000 80b1 	beq.w	800a2ee <HAL_TIM_ConfigClockSource+0x1de>
 800a18c:	4a67      	ldr	r2, [pc, #412]	@ (800a32c <HAL_TIM_ConfigClockSource+0x21c>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	f200 80b6 	bhi.w	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a194:	4a66      	ldr	r2, [pc, #408]	@ (800a330 <HAL_TIM_ConfigClockSource+0x220>)
 800a196:	4293      	cmp	r3, r2
 800a198:	f000 80a9 	beq.w	800a2ee <HAL_TIM_ConfigClockSource+0x1de>
 800a19c:	4a64      	ldr	r2, [pc, #400]	@ (800a330 <HAL_TIM_ConfigClockSource+0x220>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	f200 80ae 	bhi.w	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1a4:	4a63      	ldr	r2, [pc, #396]	@ (800a334 <HAL_TIM_ConfigClockSource+0x224>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	f000 80a1 	beq.w	800a2ee <HAL_TIM_ConfigClockSource+0x1de>
 800a1ac:	4a61      	ldr	r2, [pc, #388]	@ (800a334 <HAL_TIM_ConfigClockSource+0x224>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	f200 80a6 	bhi.w	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1b4:	4a60      	ldr	r2, [pc, #384]	@ (800a338 <HAL_TIM_ConfigClockSource+0x228>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	f000 8099 	beq.w	800a2ee <HAL_TIM_ConfigClockSource+0x1de>
 800a1bc:	4a5e      	ldr	r2, [pc, #376]	@ (800a338 <HAL_TIM_ConfigClockSource+0x228>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	f200 809e 	bhi.w	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a1c8:	f000 8091 	beq.w	800a2ee <HAL_TIM_ConfigClockSource+0x1de>
 800a1cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a1d0:	f200 8096 	bhi.w	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1d8:	f000 8089 	beq.w	800a2ee <HAL_TIM_ConfigClockSource+0x1de>
 800a1dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a1e0:	f200 808e 	bhi.w	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1e8:	d03e      	beq.n	800a268 <HAL_TIM_ConfigClockSource+0x158>
 800a1ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1ee:	f200 8087 	bhi.w	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a1f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1f6:	f000 8086 	beq.w	800a306 <HAL_TIM_ConfigClockSource+0x1f6>
 800a1fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1fe:	d87f      	bhi.n	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a200:	2b70      	cmp	r3, #112	@ 0x70
 800a202:	d01a      	beq.n	800a23a <HAL_TIM_ConfigClockSource+0x12a>
 800a204:	2b70      	cmp	r3, #112	@ 0x70
 800a206:	d87b      	bhi.n	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a208:	2b60      	cmp	r3, #96	@ 0x60
 800a20a:	d050      	beq.n	800a2ae <HAL_TIM_ConfigClockSource+0x19e>
 800a20c:	2b60      	cmp	r3, #96	@ 0x60
 800a20e:	d877      	bhi.n	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a210:	2b50      	cmp	r3, #80	@ 0x50
 800a212:	d03c      	beq.n	800a28e <HAL_TIM_ConfigClockSource+0x17e>
 800a214:	2b50      	cmp	r3, #80	@ 0x50
 800a216:	d873      	bhi.n	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a218:	2b40      	cmp	r3, #64	@ 0x40
 800a21a:	d058      	beq.n	800a2ce <HAL_TIM_ConfigClockSource+0x1be>
 800a21c:	2b40      	cmp	r3, #64	@ 0x40
 800a21e:	d86f      	bhi.n	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a220:	2b30      	cmp	r3, #48	@ 0x30
 800a222:	d064      	beq.n	800a2ee <HAL_TIM_ConfigClockSource+0x1de>
 800a224:	2b30      	cmp	r3, #48	@ 0x30
 800a226:	d86b      	bhi.n	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a228:	2b20      	cmp	r3, #32
 800a22a:	d060      	beq.n	800a2ee <HAL_TIM_ConfigClockSource+0x1de>
 800a22c:	2b20      	cmp	r3, #32
 800a22e:	d867      	bhi.n	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
 800a230:	2b00      	cmp	r3, #0
 800a232:	d05c      	beq.n	800a2ee <HAL_TIM_ConfigClockSource+0x1de>
 800a234:	2b10      	cmp	r3, #16
 800a236:	d05a      	beq.n	800a2ee <HAL_TIM_ConfigClockSource+0x1de>
 800a238:	e062      	b.n	800a300 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a24a:	f000 fcf9 	bl	800ac40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a25c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68ba      	ldr	r2, [r7, #8]
 800a264:	609a      	str	r2, [r3, #8]
      break;
 800a266:	e04f      	b.n	800a308 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a278:	f000 fce2 	bl	800ac40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	689a      	ldr	r2, [r3, #8]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a28a:	609a      	str	r2, [r3, #8]
      break;
 800a28c:	e03c      	b.n	800a308 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a29a:	461a      	mov	r2, r3
 800a29c:	f000 fc54 	bl	800ab48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	2150      	movs	r1, #80	@ 0x50
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f000 fcad 	bl	800ac06 <TIM_ITRx_SetConfig>
      break;
 800a2ac:	e02c      	b.n	800a308 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	f000 fc73 	bl	800aba6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2160      	movs	r1, #96	@ 0x60
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f000 fc9d 	bl	800ac06 <TIM_ITRx_SetConfig>
      break;
 800a2cc:	e01c      	b.n	800a308 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2da:	461a      	mov	r2, r3
 800a2dc:	f000 fc34 	bl	800ab48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2140      	movs	r1, #64	@ 0x40
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f000 fc8d 	bl	800ac06 <TIM_ITRx_SetConfig>
      break;
 800a2ec:	e00c      	b.n	800a308 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	f000 fc84 	bl	800ac06 <TIM_ITRx_SetConfig>
      break;
 800a2fe:	e003      	b.n	800a308 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	73fb      	strb	r3, [r7, #15]
      break;
 800a304:	e000      	b.n	800a308 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a306:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a318:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	00100070 	.word	0x00100070
 800a328:	00100060 	.word	0x00100060
 800a32c:	00100050 	.word	0x00100050
 800a330:	00100040 	.word	0x00100040
 800a334:	00100030 	.word	0x00100030
 800a338:	00100020 	.word	0x00100020

0800a33c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a344:	bf00      	nop
 800a346:	370c      	adds	r7, #12
 800a348:	46bd      	mov	sp, r7
 800a34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34e:	4770      	bx	lr

0800a350 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a358:	bf00      	nop
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	4a4c      	ldr	r2, [pc, #304]	@ (800a4d0 <TIM_Base_SetConfig+0x144>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d017      	beq.n	800a3d4 <TIM_Base_SetConfig+0x48>
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3aa:	d013      	beq.n	800a3d4 <TIM_Base_SetConfig+0x48>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a49      	ldr	r2, [pc, #292]	@ (800a4d4 <TIM_Base_SetConfig+0x148>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d00f      	beq.n	800a3d4 <TIM_Base_SetConfig+0x48>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	4a48      	ldr	r2, [pc, #288]	@ (800a4d8 <TIM_Base_SetConfig+0x14c>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d00b      	beq.n	800a3d4 <TIM_Base_SetConfig+0x48>
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a47      	ldr	r2, [pc, #284]	@ (800a4dc <TIM_Base_SetConfig+0x150>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d007      	beq.n	800a3d4 <TIM_Base_SetConfig+0x48>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4a46      	ldr	r2, [pc, #280]	@ (800a4e0 <TIM_Base_SetConfig+0x154>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d003      	beq.n	800a3d4 <TIM_Base_SetConfig+0x48>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4a45      	ldr	r2, [pc, #276]	@ (800a4e4 <TIM_Base_SetConfig+0x158>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d108      	bne.n	800a3e6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a39      	ldr	r2, [pc, #228]	@ (800a4d0 <TIM_Base_SetConfig+0x144>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d023      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3f4:	d01f      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a36      	ldr	r2, [pc, #216]	@ (800a4d4 <TIM_Base_SetConfig+0x148>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d01b      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	4a35      	ldr	r2, [pc, #212]	@ (800a4d8 <TIM_Base_SetConfig+0x14c>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d017      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	4a34      	ldr	r2, [pc, #208]	@ (800a4dc <TIM_Base_SetConfig+0x150>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d013      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	4a33      	ldr	r2, [pc, #204]	@ (800a4e0 <TIM_Base_SetConfig+0x154>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d00f      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	4a33      	ldr	r2, [pc, #204]	@ (800a4e8 <TIM_Base_SetConfig+0x15c>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d00b      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	4a32      	ldr	r2, [pc, #200]	@ (800a4ec <TIM_Base_SetConfig+0x160>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d007      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a31      	ldr	r2, [pc, #196]	@ (800a4f0 <TIM_Base_SetConfig+0x164>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d003      	beq.n	800a436 <TIM_Base_SetConfig+0xaa>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a2c      	ldr	r2, [pc, #176]	@ (800a4e4 <TIM_Base_SetConfig+0x158>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d108      	bne.n	800a448 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a43c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	4313      	orrs	r3, r2
 800a446:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	695b      	ldr	r3, [r3, #20]
 800a452:	4313      	orrs	r3, r2
 800a454:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	689a      	ldr	r2, [r3, #8]
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	681a      	ldr	r2, [r3, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a18      	ldr	r2, [pc, #96]	@ (800a4d0 <TIM_Base_SetConfig+0x144>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d013      	beq.n	800a49c <TIM_Base_SetConfig+0x110>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a1a      	ldr	r2, [pc, #104]	@ (800a4e0 <TIM_Base_SetConfig+0x154>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d00f      	beq.n	800a49c <TIM_Base_SetConfig+0x110>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	4a1a      	ldr	r2, [pc, #104]	@ (800a4e8 <TIM_Base_SetConfig+0x15c>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d00b      	beq.n	800a49c <TIM_Base_SetConfig+0x110>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a19      	ldr	r2, [pc, #100]	@ (800a4ec <TIM_Base_SetConfig+0x160>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d007      	beq.n	800a49c <TIM_Base_SetConfig+0x110>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a18      	ldr	r2, [pc, #96]	@ (800a4f0 <TIM_Base_SetConfig+0x164>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d003      	beq.n	800a49c <TIM_Base_SetConfig+0x110>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a13      	ldr	r2, [pc, #76]	@ (800a4e4 <TIM_Base_SetConfig+0x158>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d103      	bne.n	800a4a4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	691a      	ldr	r2, [r3, #16]
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	f003 0301 	and.w	r3, r3, #1
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d105      	bne.n	800a4c2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	f023 0201 	bic.w	r2, r3, #1
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	611a      	str	r2, [r3, #16]
  }
}
 800a4c2:	bf00      	nop
 800a4c4:	3714      	adds	r7, #20
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	40012c00 	.word	0x40012c00
 800a4d4:	40000400 	.word	0x40000400
 800a4d8:	40000800 	.word	0x40000800
 800a4dc:	40000c00 	.word	0x40000c00
 800a4e0:	40013400 	.word	0x40013400
 800a4e4:	40015000 	.word	0x40015000
 800a4e8:	40014000 	.word	0x40014000
 800a4ec:	40014400 	.word	0x40014400
 800a4f0:	40014800 	.word	0x40014800

0800a4f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b087      	sub	sp, #28
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a1b      	ldr	r3, [r3, #32]
 800a502:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6a1b      	ldr	r3, [r3, #32]
 800a508:	f023 0201 	bic.w	r2, r3, #1
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f023 0303 	bic.w	r3, r3, #3
 800a52e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	4313      	orrs	r3, r2
 800a538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f023 0302 	bic.w	r3, r3, #2
 800a540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	4313      	orrs	r3, r2
 800a54a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a30      	ldr	r2, [pc, #192]	@ (800a610 <TIM_OC1_SetConfig+0x11c>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d013      	beq.n	800a57c <TIM_OC1_SetConfig+0x88>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a2f      	ldr	r2, [pc, #188]	@ (800a614 <TIM_OC1_SetConfig+0x120>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d00f      	beq.n	800a57c <TIM_OC1_SetConfig+0x88>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a2e      	ldr	r2, [pc, #184]	@ (800a618 <TIM_OC1_SetConfig+0x124>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d00b      	beq.n	800a57c <TIM_OC1_SetConfig+0x88>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a2d      	ldr	r2, [pc, #180]	@ (800a61c <TIM_OC1_SetConfig+0x128>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d007      	beq.n	800a57c <TIM_OC1_SetConfig+0x88>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a2c      	ldr	r2, [pc, #176]	@ (800a620 <TIM_OC1_SetConfig+0x12c>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d003      	beq.n	800a57c <TIM_OC1_SetConfig+0x88>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	4a2b      	ldr	r2, [pc, #172]	@ (800a624 <TIM_OC1_SetConfig+0x130>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d10c      	bne.n	800a596 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f023 0308 	bic.w	r3, r3, #8
 800a582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	697a      	ldr	r2, [r7, #20]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	f023 0304 	bic.w	r3, r3, #4
 800a594:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a1d      	ldr	r2, [pc, #116]	@ (800a610 <TIM_OC1_SetConfig+0x11c>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d013      	beq.n	800a5c6 <TIM_OC1_SetConfig+0xd2>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a1c      	ldr	r2, [pc, #112]	@ (800a614 <TIM_OC1_SetConfig+0x120>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d00f      	beq.n	800a5c6 <TIM_OC1_SetConfig+0xd2>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a1b      	ldr	r2, [pc, #108]	@ (800a618 <TIM_OC1_SetConfig+0x124>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d00b      	beq.n	800a5c6 <TIM_OC1_SetConfig+0xd2>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a1a      	ldr	r2, [pc, #104]	@ (800a61c <TIM_OC1_SetConfig+0x128>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d007      	beq.n	800a5c6 <TIM_OC1_SetConfig+0xd2>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a19      	ldr	r2, [pc, #100]	@ (800a620 <TIM_OC1_SetConfig+0x12c>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d003      	beq.n	800a5c6 <TIM_OC1_SetConfig+0xd2>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a18      	ldr	r2, [pc, #96]	@ (800a624 <TIM_OC1_SetConfig+0x130>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d111      	bne.n	800a5ea <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a5cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a5d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	693a      	ldr	r2, [r7, #16]
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	699b      	ldr	r3, [r3, #24]
 800a5e4:	693a      	ldr	r2, [r7, #16]
 800a5e6:	4313      	orrs	r3, r2
 800a5e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	693a      	ldr	r2, [r7, #16]
 800a5ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	685a      	ldr	r2, [r3, #4]
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	697a      	ldr	r2, [r7, #20]
 800a602:	621a      	str	r2, [r3, #32]
}
 800a604:	bf00      	nop
 800a606:	371c      	adds	r7, #28
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr
 800a610:	40012c00 	.word	0x40012c00
 800a614:	40013400 	.word	0x40013400
 800a618:	40014000 	.word	0x40014000
 800a61c:	40014400 	.word	0x40014400
 800a620:	40014800 	.word	0x40014800
 800a624:	40015000 	.word	0x40015000

0800a628 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a628:	b480      	push	{r7}
 800a62a:	b087      	sub	sp, #28
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a1b      	ldr	r3, [r3, #32]
 800a636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6a1b      	ldr	r3, [r3, #32]
 800a63c:	f023 0210 	bic.w	r2, r3, #16
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	699b      	ldr	r3, [r3, #24]
 800a64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a656:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a65a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a662:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	021b      	lsls	r3, r3, #8
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	4313      	orrs	r3, r2
 800a66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	f023 0320 	bic.w	r3, r3, #32
 800a676:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	689b      	ldr	r3, [r3, #8]
 800a67c:	011b      	lsls	r3, r3, #4
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	4313      	orrs	r3, r2
 800a682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	4a2c      	ldr	r2, [pc, #176]	@ (800a738 <TIM_OC2_SetConfig+0x110>)
 800a688:	4293      	cmp	r3, r2
 800a68a:	d007      	beq.n	800a69c <TIM_OC2_SetConfig+0x74>
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4a2b      	ldr	r2, [pc, #172]	@ (800a73c <TIM_OC2_SetConfig+0x114>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d003      	beq.n	800a69c <TIM_OC2_SetConfig+0x74>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	4a2a      	ldr	r2, [pc, #168]	@ (800a740 <TIM_OC2_SetConfig+0x118>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d10d      	bne.n	800a6b8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	011b      	lsls	r3, r3, #4
 800a6aa:	697a      	ldr	r2, [r7, #20]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a1f      	ldr	r2, [pc, #124]	@ (800a738 <TIM_OC2_SetConfig+0x110>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d013      	beq.n	800a6e8 <TIM_OC2_SetConfig+0xc0>
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	4a1e      	ldr	r2, [pc, #120]	@ (800a73c <TIM_OC2_SetConfig+0x114>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d00f      	beq.n	800a6e8 <TIM_OC2_SetConfig+0xc0>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	4a1e      	ldr	r2, [pc, #120]	@ (800a744 <TIM_OC2_SetConfig+0x11c>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d00b      	beq.n	800a6e8 <TIM_OC2_SetConfig+0xc0>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	4a1d      	ldr	r2, [pc, #116]	@ (800a748 <TIM_OC2_SetConfig+0x120>)
 800a6d4:	4293      	cmp	r3, r2
 800a6d6:	d007      	beq.n	800a6e8 <TIM_OC2_SetConfig+0xc0>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	4a1c      	ldr	r2, [pc, #112]	@ (800a74c <TIM_OC2_SetConfig+0x124>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d003      	beq.n	800a6e8 <TIM_OC2_SetConfig+0xc0>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	4a17      	ldr	r2, [pc, #92]	@ (800a740 <TIM_OC2_SetConfig+0x118>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d113      	bne.n	800a710 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a6ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a6f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	695b      	ldr	r3, [r3, #20]
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	693a      	ldr	r2, [r7, #16]
 800a700:	4313      	orrs	r3, r2
 800a702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	693a      	ldr	r2, [r7, #16]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	685a      	ldr	r2, [r3, #4]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	697a      	ldr	r2, [r7, #20]
 800a728:	621a      	str	r2, [r3, #32]
}
 800a72a:	bf00      	nop
 800a72c:	371c      	adds	r7, #28
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	40012c00 	.word	0x40012c00
 800a73c:	40013400 	.word	0x40013400
 800a740:	40015000 	.word	0x40015000
 800a744:	40014000 	.word	0x40014000
 800a748:	40014400 	.word	0x40014400
 800a74c:	40014800 	.word	0x40014800

0800a750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a750:	b480      	push	{r7}
 800a752:	b087      	sub	sp, #28
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a1b      	ldr	r3, [r3, #32]
 800a75e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6a1b      	ldr	r3, [r3, #32]
 800a764:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	69db      	ldr	r3, [r3, #28]
 800a776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a77e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f023 0303 	bic.w	r3, r3, #3
 800a78a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	4313      	orrs	r3, r2
 800a794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a79c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	021b      	lsls	r3, r3, #8
 800a7a4:	697a      	ldr	r2, [r7, #20]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a2b      	ldr	r2, [pc, #172]	@ (800a85c <TIM_OC3_SetConfig+0x10c>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d007      	beq.n	800a7c2 <TIM_OC3_SetConfig+0x72>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a2a      	ldr	r2, [pc, #168]	@ (800a860 <TIM_OC3_SetConfig+0x110>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d003      	beq.n	800a7c2 <TIM_OC3_SetConfig+0x72>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a29      	ldr	r2, [pc, #164]	@ (800a864 <TIM_OC3_SetConfig+0x114>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d10d      	bne.n	800a7de <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a7c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	021b      	lsls	r3, r3, #8
 800a7d0:	697a      	ldr	r2, [r7, #20]
 800a7d2:	4313      	orrs	r3, r2
 800a7d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a7dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a1e      	ldr	r2, [pc, #120]	@ (800a85c <TIM_OC3_SetConfig+0x10c>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d013      	beq.n	800a80e <TIM_OC3_SetConfig+0xbe>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	4a1d      	ldr	r2, [pc, #116]	@ (800a860 <TIM_OC3_SetConfig+0x110>)
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d00f      	beq.n	800a80e <TIM_OC3_SetConfig+0xbe>
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a868 <TIM_OC3_SetConfig+0x118>)
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	d00b      	beq.n	800a80e <TIM_OC3_SetConfig+0xbe>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	4a1c      	ldr	r2, [pc, #112]	@ (800a86c <TIM_OC3_SetConfig+0x11c>)
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	d007      	beq.n	800a80e <TIM_OC3_SetConfig+0xbe>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4a1b      	ldr	r2, [pc, #108]	@ (800a870 <TIM_OC3_SetConfig+0x120>)
 800a802:	4293      	cmp	r3, r2
 800a804:	d003      	beq.n	800a80e <TIM_OC3_SetConfig+0xbe>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	4a16      	ldr	r2, [pc, #88]	@ (800a864 <TIM_OC3_SetConfig+0x114>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d113      	bne.n	800a836 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a80e:	693b      	ldr	r3, [r7, #16]
 800a810:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a81c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	695b      	ldr	r3, [r3, #20]
 800a822:	011b      	lsls	r3, r3, #4
 800a824:	693a      	ldr	r2, [r7, #16]
 800a826:	4313      	orrs	r3, r2
 800a828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	011b      	lsls	r3, r3, #4
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	4313      	orrs	r3, r2
 800a834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68fa      	ldr	r2, [r7, #12]
 800a840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	685a      	ldr	r2, [r3, #4]
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	697a      	ldr	r2, [r7, #20]
 800a84e:	621a      	str	r2, [r3, #32]
}
 800a850:	bf00      	nop
 800a852:	371c      	adds	r7, #28
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	40012c00 	.word	0x40012c00
 800a860:	40013400 	.word	0x40013400
 800a864:	40015000 	.word	0x40015000
 800a868:	40014000 	.word	0x40014000
 800a86c:	40014400 	.word	0x40014400
 800a870:	40014800 	.word	0x40014800

0800a874 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a874:	b480      	push	{r7}
 800a876:	b087      	sub	sp, #28
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a1b      	ldr	r3, [r3, #32]
 800a882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a1b      	ldr	r3, [r3, #32]
 800a888:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	69db      	ldr	r3, [r3, #28]
 800a89a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a8a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	021b      	lsls	r3, r3, #8
 800a8b6:	68fa      	ldr	r2, [r7, #12]
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a8c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	031b      	lsls	r3, r3, #12
 800a8ca:	697a      	ldr	r2, [r7, #20]
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a2c      	ldr	r2, [pc, #176]	@ (800a984 <TIM_OC4_SetConfig+0x110>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d007      	beq.n	800a8e8 <TIM_OC4_SetConfig+0x74>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a2b      	ldr	r2, [pc, #172]	@ (800a988 <TIM_OC4_SetConfig+0x114>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d003      	beq.n	800a8e8 <TIM_OC4_SetConfig+0x74>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a2a      	ldr	r2, [pc, #168]	@ (800a98c <TIM_OC4_SetConfig+0x118>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d10d      	bne.n	800a904 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a8ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	031b      	lsls	r3, r3, #12
 800a8f6:	697a      	ldr	r2, [r7, #20]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a902:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a1f      	ldr	r2, [pc, #124]	@ (800a984 <TIM_OC4_SetConfig+0x110>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d013      	beq.n	800a934 <TIM_OC4_SetConfig+0xc0>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	4a1e      	ldr	r2, [pc, #120]	@ (800a988 <TIM_OC4_SetConfig+0x114>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d00f      	beq.n	800a934 <TIM_OC4_SetConfig+0xc0>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a1e      	ldr	r2, [pc, #120]	@ (800a990 <TIM_OC4_SetConfig+0x11c>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d00b      	beq.n	800a934 <TIM_OC4_SetConfig+0xc0>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	4a1d      	ldr	r2, [pc, #116]	@ (800a994 <TIM_OC4_SetConfig+0x120>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d007      	beq.n	800a934 <TIM_OC4_SetConfig+0xc0>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a1c      	ldr	r2, [pc, #112]	@ (800a998 <TIM_OC4_SetConfig+0x124>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d003      	beq.n	800a934 <TIM_OC4_SetConfig+0xc0>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a17      	ldr	r2, [pc, #92]	@ (800a98c <TIM_OC4_SetConfig+0x118>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d113      	bne.n	800a95c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a93a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a942:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	695b      	ldr	r3, [r3, #20]
 800a948:	019b      	lsls	r3, r3, #6
 800a94a:	693a      	ldr	r2, [r7, #16]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	699b      	ldr	r3, [r3, #24]
 800a954:	019b      	lsls	r3, r3, #6
 800a956:	693a      	ldr	r2, [r7, #16]
 800a958:	4313      	orrs	r3, r2
 800a95a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	685a      	ldr	r2, [r3, #4]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	697a      	ldr	r2, [r7, #20]
 800a974:	621a      	str	r2, [r3, #32]
}
 800a976:	bf00      	nop
 800a978:	371c      	adds	r7, #28
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	40012c00 	.word	0x40012c00
 800a988:	40013400 	.word	0x40013400
 800a98c:	40015000 	.word	0x40015000
 800a990:	40014000 	.word	0x40014000
 800a994:	40014400 	.word	0x40014400
 800a998:	40014800 	.word	0x40014800

0800a99c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b087      	sub	sp, #28
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a1b      	ldr	r3, [r3, #32]
 800a9aa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a1b      	ldr	r3, [r3, #32]
 800a9b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68fa      	ldr	r2, [r7, #12]
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a9e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	041b      	lsls	r3, r3, #16
 800a9e8:	693a      	ldr	r2, [r7, #16]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a19      	ldr	r2, [pc, #100]	@ (800aa58 <TIM_OC5_SetConfig+0xbc>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d013      	beq.n	800aa1e <TIM_OC5_SetConfig+0x82>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a18      	ldr	r2, [pc, #96]	@ (800aa5c <TIM_OC5_SetConfig+0xc0>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d00f      	beq.n	800aa1e <TIM_OC5_SetConfig+0x82>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a17      	ldr	r2, [pc, #92]	@ (800aa60 <TIM_OC5_SetConfig+0xc4>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d00b      	beq.n	800aa1e <TIM_OC5_SetConfig+0x82>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a16      	ldr	r2, [pc, #88]	@ (800aa64 <TIM_OC5_SetConfig+0xc8>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d007      	beq.n	800aa1e <TIM_OC5_SetConfig+0x82>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a15      	ldr	r2, [pc, #84]	@ (800aa68 <TIM_OC5_SetConfig+0xcc>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d003      	beq.n	800aa1e <TIM_OC5_SetConfig+0x82>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a14      	ldr	r2, [pc, #80]	@ (800aa6c <TIM_OC5_SetConfig+0xd0>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d109      	bne.n	800aa32 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aa24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	021b      	lsls	r3, r3, #8
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	697a      	ldr	r2, [r7, #20]
 800aa36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	68fa      	ldr	r2, [r7, #12]
 800aa3c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	685a      	ldr	r2, [r3, #4]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	621a      	str	r2, [r3, #32]
}
 800aa4c:	bf00      	nop
 800aa4e:	371c      	adds	r7, #28
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	40012c00 	.word	0x40012c00
 800aa5c:	40013400 	.word	0x40013400
 800aa60:	40014000 	.word	0x40014000
 800aa64:	40014400 	.word	0x40014400
 800aa68:	40014800 	.word	0x40014800
 800aa6c:	40015000 	.word	0x40015000

0800aa70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b087      	sub	sp, #28
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6a1b      	ldr	r3, [r3, #32]
 800aa7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a1b      	ldr	r3, [r3, #32]
 800aa84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aa9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aaa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	021b      	lsls	r3, r3, #8
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	4313      	orrs	r3, r2
 800aaae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800aab6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	051b      	lsls	r3, r3, #20
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	4313      	orrs	r3, r2
 800aac2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	4a1a      	ldr	r2, [pc, #104]	@ (800ab30 <TIM_OC6_SetConfig+0xc0>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d013      	beq.n	800aaf4 <TIM_OC6_SetConfig+0x84>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a19      	ldr	r2, [pc, #100]	@ (800ab34 <TIM_OC6_SetConfig+0xc4>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d00f      	beq.n	800aaf4 <TIM_OC6_SetConfig+0x84>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	4a18      	ldr	r2, [pc, #96]	@ (800ab38 <TIM_OC6_SetConfig+0xc8>)
 800aad8:	4293      	cmp	r3, r2
 800aada:	d00b      	beq.n	800aaf4 <TIM_OC6_SetConfig+0x84>
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	4a17      	ldr	r2, [pc, #92]	@ (800ab3c <TIM_OC6_SetConfig+0xcc>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d007      	beq.n	800aaf4 <TIM_OC6_SetConfig+0x84>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	4a16      	ldr	r2, [pc, #88]	@ (800ab40 <TIM_OC6_SetConfig+0xd0>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d003      	beq.n	800aaf4 <TIM_OC6_SetConfig+0x84>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	4a15      	ldr	r2, [pc, #84]	@ (800ab44 <TIM_OC6_SetConfig+0xd4>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d109      	bne.n	800ab08 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800aafa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	029b      	lsls	r3, r3, #10
 800ab02:	697a      	ldr	r2, [r7, #20]
 800ab04:	4313      	orrs	r3, r2
 800ab06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	68fa      	ldr	r2, [r7, #12]
 800ab12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	621a      	str	r2, [r3, #32]
}
 800ab22:	bf00      	nop
 800ab24:	371c      	adds	r7, #28
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	40012c00 	.word	0x40012c00
 800ab34:	40013400 	.word	0x40013400
 800ab38:	40014000 	.word	0x40014000
 800ab3c:	40014400 	.word	0x40014400
 800ab40:	40014800 	.word	0x40014800
 800ab44:	40015000 	.word	0x40015000

0800ab48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	60f8      	str	r0, [r7, #12]
 800ab50:	60b9      	str	r1, [r7, #8]
 800ab52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	6a1b      	ldr	r3, [r3, #32]
 800ab58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	6a1b      	ldr	r3, [r3, #32]
 800ab5e:	f023 0201 	bic.w	r2, r3, #1
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ab72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	011b      	lsls	r3, r3, #4
 800ab78:	693a      	ldr	r2, [r7, #16]
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f023 030a 	bic.w	r3, r3, #10
 800ab84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab86:	697a      	ldr	r2, [r7, #20]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	693a      	ldr	r2, [r7, #16]
 800ab92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	621a      	str	r2, [r3, #32]
}
 800ab9a:	bf00      	nop
 800ab9c:	371c      	adds	r7, #28
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr

0800aba6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aba6:	b480      	push	{r7}
 800aba8:	b087      	sub	sp, #28
 800abaa:	af00      	add	r7, sp, #0
 800abac:	60f8      	str	r0, [r7, #12]
 800abae:	60b9      	str	r1, [r7, #8]
 800abb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6a1b      	ldr	r3, [r3, #32]
 800abb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6a1b      	ldr	r3, [r3, #32]
 800abbc:	f023 0210 	bic.w	r2, r3, #16
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800abd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	031b      	lsls	r3, r3, #12
 800abd6:	693a      	ldr	r2, [r7, #16]
 800abd8:	4313      	orrs	r3, r2
 800abda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800abe2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	011b      	lsls	r3, r3, #4
 800abe8:	697a      	ldr	r2, [r7, #20]
 800abea:	4313      	orrs	r3, r2
 800abec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	621a      	str	r2, [r3, #32]
}
 800abfa:	bf00      	nop
 800abfc:	371c      	adds	r7, #28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac06:	b480      	push	{r7}
 800ac08:	b085      	sub	sp, #20
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ac1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	f043 0307 	orr.w	r3, r3, #7
 800ac2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	609a      	str	r2, [r3, #8]
}
 800ac34:	bf00      	nop
 800ac36:	3714      	adds	r7, #20
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b087      	sub	sp, #28
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
 800ac4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	021a      	lsls	r2, r3, #8
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	431a      	orrs	r2, r3
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	4313      	orrs	r3, r2
 800ac68:	697a      	ldr	r2, [r7, #20]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	697a      	ldr	r2, [r7, #20]
 800ac72:	609a      	str	r2, [r3, #8]
}
 800ac74:	bf00      	nop
 800ac76:	371c      	adds	r7, #28
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr

0800ac80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b087      	sub	sp, #28
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	60b9      	str	r1, [r7, #8]
 800ac8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	f003 031f 	and.w	r3, r3, #31
 800ac92:	2201      	movs	r2, #1
 800ac94:	fa02 f303 	lsl.w	r3, r2, r3
 800ac98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	6a1a      	ldr	r2, [r3, #32]
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	43db      	mvns	r3, r3
 800aca2:	401a      	ands	r2, r3
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	6a1a      	ldr	r2, [r3, #32]
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	f003 031f 	and.w	r3, r3, #31
 800acb2:	6879      	ldr	r1, [r7, #4]
 800acb4:	fa01 f303 	lsl.w	r3, r1, r3
 800acb8:	431a      	orrs	r2, r3
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	621a      	str	r2, [r3, #32]
}
 800acbe:	bf00      	nop
 800acc0:	371c      	adds	r7, #28
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
	...

0800accc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d101      	bne.n	800ace4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ace0:	2302      	movs	r3, #2
 800ace2:	e074      	b.n	800adce <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2202      	movs	r2, #2
 800acf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	685b      	ldr	r3, [r3, #4]
 800acfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4a34      	ldr	r2, [pc, #208]	@ (800addc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ad0a:	4293      	cmp	r3, r2
 800ad0c:	d009      	beq.n	800ad22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4a33      	ldr	r2, [pc, #204]	@ (800ade0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d004      	beq.n	800ad22 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a31      	ldr	r2, [pc, #196]	@ (800ade4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d108      	bne.n	800ad34 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ad28:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	685b      	ldr	r3, [r3, #4]
 800ad2e:	68fa      	ldr	r2, [r7, #12]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ad3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	68fa      	ldr	r2, [r7, #12]
 800ad46:	4313      	orrs	r3, r2
 800ad48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a21      	ldr	r2, [pc, #132]	@ (800addc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d022      	beq.n	800ada2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad64:	d01d      	beq.n	800ada2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a1f      	ldr	r2, [pc, #124]	@ (800ade8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d018      	beq.n	800ada2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4a1d      	ldr	r2, [pc, #116]	@ (800adec <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d013      	beq.n	800ada2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	4a1c      	ldr	r2, [pc, #112]	@ (800adf0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ad80:	4293      	cmp	r3, r2
 800ad82:	d00e      	beq.n	800ada2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	4a15      	ldr	r2, [pc, #84]	@ (800ade0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d009      	beq.n	800ada2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4a18      	ldr	r2, [pc, #96]	@ (800adf4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d004      	beq.n	800ada2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a11      	ldr	r2, [pc, #68]	@ (800ade4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d10c      	bne.n	800adbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ada8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	4313      	orrs	r3, r2
 800adb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800adcc:	2300      	movs	r3, #0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3714      	adds	r7, #20
 800add2:	46bd      	mov	sp, r7
 800add4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add8:	4770      	bx	lr
 800adda:	bf00      	nop
 800addc:	40012c00 	.word	0x40012c00
 800ade0:	40013400 	.word	0x40013400
 800ade4:	40015000 	.word	0x40015000
 800ade8:	40000400 	.word	0x40000400
 800adec:	40000800 	.word	0x40000800
 800adf0:	40000c00 	.word	0x40000c00
 800adf4:	40014000 	.word	0x40014000

0800adf8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ae02:	2300      	movs	r3, #0
 800ae04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d101      	bne.n	800ae14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ae10:	2302      	movs	r3, #2
 800ae12:	e078      	b.n	800af06 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	4313      	orrs	r3, r2
 800ae28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	689b      	ldr	r3, [r3, #8]
 800ae34:	4313      	orrs	r3, r2
 800ae36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	695b      	ldr	r3, [r3, #20]
 800ae6c:	4313      	orrs	r3, r2
 800ae6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	699b      	ldr	r3, [r3, #24]
 800ae88:	041b      	lsls	r3, r3, #16
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	69db      	ldr	r3, [r3, #28]
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a1c      	ldr	r2, [pc, #112]	@ (800af14 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d009      	beq.n	800aeba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a1b      	ldr	r2, [pc, #108]	@ (800af18 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d004      	beq.n	800aeba <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a19      	ldr	r2, [pc, #100]	@ (800af1c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d11c      	bne.n	800aef4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aec4:	051b      	lsls	r3, r3, #20
 800aec6:	4313      	orrs	r3, r2
 800aec8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	6a1b      	ldr	r3, [r3, #32]
 800aed4:	4313      	orrs	r3, r2
 800aed6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aee2:	4313      	orrs	r3, r2
 800aee4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef0:	4313      	orrs	r3, r2
 800aef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	40012c00 	.word	0x40012c00
 800af18:	40013400 	.word	0x40013400
 800af1c:	40015000 	.word	0x40015000

0800af20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af28:	bf00      	nop
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800af64:	bf00      	nop
 800af66:	370c      	adds	r7, #12
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800af98:	b480      	push	{r7}
 800af9a:	b083      	sub	sp, #12
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d101      	bne.n	800afbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afba:	2301      	movs	r3, #1
 800afbc:	e042      	b.n	800b044 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d106      	bne.n	800afd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2200      	movs	r2, #0
 800afcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f7f8 fe0b 	bl	8003bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2224      	movs	r2, #36	@ 0x24
 800afda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f022 0201 	bic.w	r2, r2, #1
 800afec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d002      	beq.n	800affc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fb24 	bl	800b644 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f825 	bl	800b04c <UART_SetConfig>
 800b002:	4603      	mov	r3, r0
 800b004:	2b01      	cmp	r3, #1
 800b006:	d101      	bne.n	800b00c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	e01b      	b.n	800b044 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	685a      	ldr	r2, [r3, #4]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b01a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	689a      	ldr	r2, [r3, #8]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b02a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f042 0201 	orr.w	r2, r2, #1
 800b03a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 fba3 	bl	800b788 <UART_CheckIdleState>
 800b042:	4603      	mov	r3, r0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3708      	adds	r7, #8
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b04c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b050:	b08c      	sub	sp, #48	@ 0x30
 800b052:	af00      	add	r7, sp, #0
 800b054:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b056:	2300      	movs	r3, #0
 800b058:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b05c:	697b      	ldr	r3, [r7, #20]
 800b05e:	689a      	ldr	r2, [r3, #8]
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	431a      	orrs	r2, r3
 800b066:	697b      	ldr	r3, [r7, #20]
 800b068:	695b      	ldr	r3, [r3, #20]
 800b06a:	431a      	orrs	r2, r3
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	69db      	ldr	r3, [r3, #28]
 800b070:	4313      	orrs	r3, r2
 800b072:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b074:	697b      	ldr	r3, [r7, #20]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	4baa      	ldr	r3, [pc, #680]	@ (800b324 <UART_SetConfig+0x2d8>)
 800b07c:	4013      	ands	r3, r2
 800b07e:	697a      	ldr	r2, [r7, #20]
 800b080:	6812      	ldr	r2, [r2, #0]
 800b082:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b084:	430b      	orrs	r3, r1
 800b086:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b088:	697b      	ldr	r3, [r7, #20]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	68da      	ldr	r2, [r3, #12]
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	430a      	orrs	r2, r1
 800b09c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	699b      	ldr	r3, [r3, #24]
 800b0a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a9f      	ldr	r2, [pc, #636]	@ (800b328 <UART_SetConfig+0x2dc>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d004      	beq.n	800b0b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	6a1b      	ldr	r3, [r3, #32]
 800b0b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b0c2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b0c6:	697a      	ldr	r2, [r7, #20]
 800b0c8:	6812      	ldr	r2, [r2, #0]
 800b0ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0cc:	430b      	orrs	r3, r1
 800b0ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d6:	f023 010f 	bic.w	r1, r3, #15
 800b0da:	697b      	ldr	r3, [r7, #20]
 800b0dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	430a      	orrs	r2, r1
 800b0e4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a90      	ldr	r2, [pc, #576]	@ (800b32c <UART_SetConfig+0x2e0>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d125      	bne.n	800b13c <UART_SetConfig+0xf0>
 800b0f0:	4b8f      	ldr	r3, [pc, #572]	@ (800b330 <UART_SetConfig+0x2e4>)
 800b0f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0f6:	f003 0303 	and.w	r3, r3, #3
 800b0fa:	2b03      	cmp	r3, #3
 800b0fc:	d81a      	bhi.n	800b134 <UART_SetConfig+0xe8>
 800b0fe:	a201      	add	r2, pc, #4	@ (adr r2, 800b104 <UART_SetConfig+0xb8>)
 800b100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b104:	0800b115 	.word	0x0800b115
 800b108:	0800b125 	.word	0x0800b125
 800b10c:	0800b11d 	.word	0x0800b11d
 800b110:	0800b12d 	.word	0x0800b12d
 800b114:	2301      	movs	r3, #1
 800b116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b11a:	e116      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b11c:	2302      	movs	r3, #2
 800b11e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b122:	e112      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b124:	2304      	movs	r3, #4
 800b126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b12a:	e10e      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b12c:	2308      	movs	r3, #8
 800b12e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b132:	e10a      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b134:	2310      	movs	r3, #16
 800b136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b13a:	e106      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a7c      	ldr	r2, [pc, #496]	@ (800b334 <UART_SetConfig+0x2e8>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d138      	bne.n	800b1b8 <UART_SetConfig+0x16c>
 800b146:	4b7a      	ldr	r3, [pc, #488]	@ (800b330 <UART_SetConfig+0x2e4>)
 800b148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b14c:	f003 030c 	and.w	r3, r3, #12
 800b150:	2b0c      	cmp	r3, #12
 800b152:	d82d      	bhi.n	800b1b0 <UART_SetConfig+0x164>
 800b154:	a201      	add	r2, pc, #4	@ (adr r2, 800b15c <UART_SetConfig+0x110>)
 800b156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15a:	bf00      	nop
 800b15c:	0800b191 	.word	0x0800b191
 800b160:	0800b1b1 	.word	0x0800b1b1
 800b164:	0800b1b1 	.word	0x0800b1b1
 800b168:	0800b1b1 	.word	0x0800b1b1
 800b16c:	0800b1a1 	.word	0x0800b1a1
 800b170:	0800b1b1 	.word	0x0800b1b1
 800b174:	0800b1b1 	.word	0x0800b1b1
 800b178:	0800b1b1 	.word	0x0800b1b1
 800b17c:	0800b199 	.word	0x0800b199
 800b180:	0800b1b1 	.word	0x0800b1b1
 800b184:	0800b1b1 	.word	0x0800b1b1
 800b188:	0800b1b1 	.word	0x0800b1b1
 800b18c:	0800b1a9 	.word	0x0800b1a9
 800b190:	2300      	movs	r3, #0
 800b192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b196:	e0d8      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b198:	2302      	movs	r3, #2
 800b19a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b19e:	e0d4      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b1a0:	2304      	movs	r3, #4
 800b1a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1a6:	e0d0      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b1a8:	2308      	movs	r3, #8
 800b1aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1ae:	e0cc      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b1b0:	2310      	movs	r3, #16
 800b1b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1b6:	e0c8      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	4a5e      	ldr	r2, [pc, #376]	@ (800b338 <UART_SetConfig+0x2ec>)
 800b1be:	4293      	cmp	r3, r2
 800b1c0:	d125      	bne.n	800b20e <UART_SetConfig+0x1c2>
 800b1c2:	4b5b      	ldr	r3, [pc, #364]	@ (800b330 <UART_SetConfig+0x2e4>)
 800b1c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1c8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b1cc:	2b30      	cmp	r3, #48	@ 0x30
 800b1ce:	d016      	beq.n	800b1fe <UART_SetConfig+0x1b2>
 800b1d0:	2b30      	cmp	r3, #48	@ 0x30
 800b1d2:	d818      	bhi.n	800b206 <UART_SetConfig+0x1ba>
 800b1d4:	2b20      	cmp	r3, #32
 800b1d6:	d00a      	beq.n	800b1ee <UART_SetConfig+0x1a2>
 800b1d8:	2b20      	cmp	r3, #32
 800b1da:	d814      	bhi.n	800b206 <UART_SetConfig+0x1ba>
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <UART_SetConfig+0x19a>
 800b1e0:	2b10      	cmp	r3, #16
 800b1e2:	d008      	beq.n	800b1f6 <UART_SetConfig+0x1aa>
 800b1e4:	e00f      	b.n	800b206 <UART_SetConfig+0x1ba>
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1ec:	e0ad      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b1ee:	2302      	movs	r3, #2
 800b1f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1f4:	e0a9      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b1f6:	2304      	movs	r3, #4
 800b1f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1fc:	e0a5      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b1fe:	2308      	movs	r3, #8
 800b200:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b204:	e0a1      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b206:	2310      	movs	r3, #16
 800b208:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b20c:	e09d      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	4a4a      	ldr	r2, [pc, #296]	@ (800b33c <UART_SetConfig+0x2f0>)
 800b214:	4293      	cmp	r3, r2
 800b216:	d125      	bne.n	800b264 <UART_SetConfig+0x218>
 800b218:	4b45      	ldr	r3, [pc, #276]	@ (800b330 <UART_SetConfig+0x2e4>)
 800b21a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b21e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b222:	2bc0      	cmp	r3, #192	@ 0xc0
 800b224:	d016      	beq.n	800b254 <UART_SetConfig+0x208>
 800b226:	2bc0      	cmp	r3, #192	@ 0xc0
 800b228:	d818      	bhi.n	800b25c <UART_SetConfig+0x210>
 800b22a:	2b80      	cmp	r3, #128	@ 0x80
 800b22c:	d00a      	beq.n	800b244 <UART_SetConfig+0x1f8>
 800b22e:	2b80      	cmp	r3, #128	@ 0x80
 800b230:	d814      	bhi.n	800b25c <UART_SetConfig+0x210>
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <UART_SetConfig+0x1f0>
 800b236:	2b40      	cmp	r3, #64	@ 0x40
 800b238:	d008      	beq.n	800b24c <UART_SetConfig+0x200>
 800b23a:	e00f      	b.n	800b25c <UART_SetConfig+0x210>
 800b23c:	2300      	movs	r3, #0
 800b23e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b242:	e082      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b244:	2302      	movs	r3, #2
 800b246:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b24a:	e07e      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b24c:	2304      	movs	r3, #4
 800b24e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b252:	e07a      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b254:	2308      	movs	r3, #8
 800b256:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b25a:	e076      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b25c:	2310      	movs	r3, #16
 800b25e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b262:	e072      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a35      	ldr	r2, [pc, #212]	@ (800b340 <UART_SetConfig+0x2f4>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d12a      	bne.n	800b2c4 <UART_SetConfig+0x278>
 800b26e:	4b30      	ldr	r3, [pc, #192]	@ (800b330 <UART_SetConfig+0x2e4>)
 800b270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b274:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b278:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b27c:	d01a      	beq.n	800b2b4 <UART_SetConfig+0x268>
 800b27e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b282:	d81b      	bhi.n	800b2bc <UART_SetConfig+0x270>
 800b284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b288:	d00c      	beq.n	800b2a4 <UART_SetConfig+0x258>
 800b28a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b28e:	d815      	bhi.n	800b2bc <UART_SetConfig+0x270>
 800b290:	2b00      	cmp	r3, #0
 800b292:	d003      	beq.n	800b29c <UART_SetConfig+0x250>
 800b294:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b298:	d008      	beq.n	800b2ac <UART_SetConfig+0x260>
 800b29a:	e00f      	b.n	800b2bc <UART_SetConfig+0x270>
 800b29c:	2300      	movs	r3, #0
 800b29e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2a2:	e052      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b2a4:	2302      	movs	r3, #2
 800b2a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2aa:	e04e      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b2ac:	2304      	movs	r3, #4
 800b2ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2b2:	e04a      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b2b4:	2308      	movs	r3, #8
 800b2b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2ba:	e046      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b2bc:	2310      	movs	r3, #16
 800b2be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2c2:	e042      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a17      	ldr	r2, [pc, #92]	@ (800b328 <UART_SetConfig+0x2dc>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d13a      	bne.n	800b344 <UART_SetConfig+0x2f8>
 800b2ce:	4b18      	ldr	r3, [pc, #96]	@ (800b330 <UART_SetConfig+0x2e4>)
 800b2d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2d4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b2d8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b2dc:	d01a      	beq.n	800b314 <UART_SetConfig+0x2c8>
 800b2de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b2e2:	d81b      	bhi.n	800b31c <UART_SetConfig+0x2d0>
 800b2e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2e8:	d00c      	beq.n	800b304 <UART_SetConfig+0x2b8>
 800b2ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b2ee:	d815      	bhi.n	800b31c <UART_SetConfig+0x2d0>
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d003      	beq.n	800b2fc <UART_SetConfig+0x2b0>
 800b2f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2f8:	d008      	beq.n	800b30c <UART_SetConfig+0x2c0>
 800b2fa:	e00f      	b.n	800b31c <UART_SetConfig+0x2d0>
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b302:	e022      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b304:	2302      	movs	r3, #2
 800b306:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b30a:	e01e      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b30c:	2304      	movs	r3, #4
 800b30e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b312:	e01a      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b314:	2308      	movs	r3, #8
 800b316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b31a:	e016      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b31c:	2310      	movs	r3, #16
 800b31e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b322:	e012      	b.n	800b34a <UART_SetConfig+0x2fe>
 800b324:	cfff69f3 	.word	0xcfff69f3
 800b328:	40008000 	.word	0x40008000
 800b32c:	40013800 	.word	0x40013800
 800b330:	40021000 	.word	0x40021000
 800b334:	40004400 	.word	0x40004400
 800b338:	40004800 	.word	0x40004800
 800b33c:	40004c00 	.word	0x40004c00
 800b340:	40005000 	.word	0x40005000
 800b344:	2310      	movs	r3, #16
 800b346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4aae      	ldr	r2, [pc, #696]	@ (800b608 <UART_SetConfig+0x5bc>)
 800b350:	4293      	cmp	r3, r2
 800b352:	f040 8097 	bne.w	800b484 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b356:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b35a:	2b08      	cmp	r3, #8
 800b35c:	d823      	bhi.n	800b3a6 <UART_SetConfig+0x35a>
 800b35e:	a201      	add	r2, pc, #4	@ (adr r2, 800b364 <UART_SetConfig+0x318>)
 800b360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b364:	0800b389 	.word	0x0800b389
 800b368:	0800b3a7 	.word	0x0800b3a7
 800b36c:	0800b391 	.word	0x0800b391
 800b370:	0800b3a7 	.word	0x0800b3a7
 800b374:	0800b397 	.word	0x0800b397
 800b378:	0800b3a7 	.word	0x0800b3a7
 800b37c:	0800b3a7 	.word	0x0800b3a7
 800b380:	0800b3a7 	.word	0x0800b3a7
 800b384:	0800b39f 	.word	0x0800b39f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b388:	f7fd fec6 	bl	8009118 <HAL_RCC_GetPCLK1Freq>
 800b38c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b38e:	e010      	b.n	800b3b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b390:	4b9e      	ldr	r3, [pc, #632]	@ (800b60c <UART_SetConfig+0x5c0>)
 800b392:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b394:	e00d      	b.n	800b3b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b396:	f7fd fe51 	bl	800903c <HAL_RCC_GetSysClockFreq>
 800b39a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b39c:	e009      	b.n	800b3b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b39e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b3a4:	e005      	b.n	800b3b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b3b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f000 8130 	beq.w	800b61a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3be:	4a94      	ldr	r2, [pc, #592]	@ (800b610 <UART_SetConfig+0x5c4>)
 800b3c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b3cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	685a      	ldr	r2, [r3, #4]
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	005b      	lsls	r3, r3, #1
 800b3d6:	4413      	add	r3, r2
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d305      	bcc.n	800b3ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b3e4:	69ba      	ldr	r2, [r7, #24]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d903      	bls.n	800b3f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b3f0:	e113      	b.n	800b61a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	60bb      	str	r3, [r7, #8]
 800b3f8:	60fa      	str	r2, [r7, #12]
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3fe:	4a84      	ldr	r2, [pc, #528]	@ (800b610 <UART_SetConfig+0x5c4>)
 800b400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b404:	b29b      	uxth	r3, r3
 800b406:	2200      	movs	r2, #0
 800b408:	603b      	str	r3, [r7, #0]
 800b40a:	607a      	str	r2, [r7, #4]
 800b40c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b410:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b414:	f7f5 fc60 	bl	8000cd8 <__aeabi_uldivmod>
 800b418:	4602      	mov	r2, r0
 800b41a:	460b      	mov	r3, r1
 800b41c:	4610      	mov	r0, r2
 800b41e:	4619      	mov	r1, r3
 800b420:	f04f 0200 	mov.w	r2, #0
 800b424:	f04f 0300 	mov.w	r3, #0
 800b428:	020b      	lsls	r3, r1, #8
 800b42a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b42e:	0202      	lsls	r2, r0, #8
 800b430:	6979      	ldr	r1, [r7, #20]
 800b432:	6849      	ldr	r1, [r1, #4]
 800b434:	0849      	lsrs	r1, r1, #1
 800b436:	2000      	movs	r0, #0
 800b438:	460c      	mov	r4, r1
 800b43a:	4605      	mov	r5, r0
 800b43c:	eb12 0804 	adds.w	r8, r2, r4
 800b440:	eb43 0905 	adc.w	r9, r3, r5
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	685b      	ldr	r3, [r3, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	469a      	mov	sl, r3
 800b44c:	4693      	mov	fp, r2
 800b44e:	4652      	mov	r2, sl
 800b450:	465b      	mov	r3, fp
 800b452:	4640      	mov	r0, r8
 800b454:	4649      	mov	r1, r9
 800b456:	f7f5 fc3f 	bl	8000cd8 <__aeabi_uldivmod>
 800b45a:	4602      	mov	r2, r0
 800b45c:	460b      	mov	r3, r1
 800b45e:	4613      	mov	r3, r2
 800b460:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b462:	6a3b      	ldr	r3, [r7, #32]
 800b464:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b468:	d308      	bcc.n	800b47c <UART_SetConfig+0x430>
 800b46a:	6a3b      	ldr	r3, [r7, #32]
 800b46c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b470:	d204      	bcs.n	800b47c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	6a3a      	ldr	r2, [r7, #32]
 800b478:	60da      	str	r2, [r3, #12]
 800b47a:	e0ce      	b.n	800b61a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b47c:	2301      	movs	r3, #1
 800b47e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b482:	e0ca      	b.n	800b61a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	69db      	ldr	r3, [r3, #28]
 800b488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b48c:	d166      	bne.n	800b55c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b48e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b492:	2b08      	cmp	r3, #8
 800b494:	d827      	bhi.n	800b4e6 <UART_SetConfig+0x49a>
 800b496:	a201      	add	r2, pc, #4	@ (adr r2, 800b49c <UART_SetConfig+0x450>)
 800b498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b49c:	0800b4c1 	.word	0x0800b4c1
 800b4a0:	0800b4c9 	.word	0x0800b4c9
 800b4a4:	0800b4d1 	.word	0x0800b4d1
 800b4a8:	0800b4e7 	.word	0x0800b4e7
 800b4ac:	0800b4d7 	.word	0x0800b4d7
 800b4b0:	0800b4e7 	.word	0x0800b4e7
 800b4b4:	0800b4e7 	.word	0x0800b4e7
 800b4b8:	0800b4e7 	.word	0x0800b4e7
 800b4bc:	0800b4df 	.word	0x0800b4df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b4c0:	f7fd fe2a 	bl	8009118 <HAL_RCC_GetPCLK1Freq>
 800b4c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4c6:	e014      	b.n	800b4f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b4c8:	f7fd fe3c 	bl	8009144 <HAL_RCC_GetPCLK2Freq>
 800b4cc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4ce:	e010      	b.n	800b4f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b4d0:	4b4e      	ldr	r3, [pc, #312]	@ (800b60c <UART_SetConfig+0x5c0>)
 800b4d2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b4d4:	e00d      	b.n	800b4f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b4d6:	f7fd fdb1 	bl	800903c <HAL_RCC_GetSysClockFreq>
 800b4da:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b4dc:	e009      	b.n	800b4f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4e2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b4e4:	e005      	b.n	800b4f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b4f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f000 8090 	beq.w	800b61a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4fe:	4a44      	ldr	r2, [pc, #272]	@ (800b610 <UART_SetConfig+0x5c4>)
 800b500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b504:	461a      	mov	r2, r3
 800b506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b508:	fbb3 f3f2 	udiv	r3, r3, r2
 800b50c:	005a      	lsls	r2, r3, #1
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	085b      	lsrs	r3, r3, #1
 800b514:	441a      	add	r2, r3
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b51e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b520:	6a3b      	ldr	r3, [r7, #32]
 800b522:	2b0f      	cmp	r3, #15
 800b524:	d916      	bls.n	800b554 <UART_SetConfig+0x508>
 800b526:	6a3b      	ldr	r3, [r7, #32]
 800b528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b52c:	d212      	bcs.n	800b554 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b52e:	6a3b      	ldr	r3, [r7, #32]
 800b530:	b29b      	uxth	r3, r3
 800b532:	f023 030f 	bic.w	r3, r3, #15
 800b536:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b538:	6a3b      	ldr	r3, [r7, #32]
 800b53a:	085b      	lsrs	r3, r3, #1
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	f003 0307 	and.w	r3, r3, #7
 800b542:	b29a      	uxth	r2, r3
 800b544:	8bfb      	ldrh	r3, [r7, #30]
 800b546:	4313      	orrs	r3, r2
 800b548:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	8bfa      	ldrh	r2, [r7, #30]
 800b550:	60da      	str	r2, [r3, #12]
 800b552:	e062      	b.n	800b61a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b55a:	e05e      	b.n	800b61a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b55c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b560:	2b08      	cmp	r3, #8
 800b562:	d828      	bhi.n	800b5b6 <UART_SetConfig+0x56a>
 800b564:	a201      	add	r2, pc, #4	@ (adr r2, 800b56c <UART_SetConfig+0x520>)
 800b566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56a:	bf00      	nop
 800b56c:	0800b591 	.word	0x0800b591
 800b570:	0800b599 	.word	0x0800b599
 800b574:	0800b5a1 	.word	0x0800b5a1
 800b578:	0800b5b7 	.word	0x0800b5b7
 800b57c:	0800b5a7 	.word	0x0800b5a7
 800b580:	0800b5b7 	.word	0x0800b5b7
 800b584:	0800b5b7 	.word	0x0800b5b7
 800b588:	0800b5b7 	.word	0x0800b5b7
 800b58c:	0800b5af 	.word	0x0800b5af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b590:	f7fd fdc2 	bl	8009118 <HAL_RCC_GetPCLK1Freq>
 800b594:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b596:	e014      	b.n	800b5c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b598:	f7fd fdd4 	bl	8009144 <HAL_RCC_GetPCLK2Freq>
 800b59c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b59e:	e010      	b.n	800b5c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b5a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b60c <UART_SetConfig+0x5c0>)
 800b5a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b5a4:	e00d      	b.n	800b5c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b5a6:	f7fd fd49 	bl	800903c <HAL_RCC_GetSysClockFreq>
 800b5aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b5ac:	e009      	b.n	800b5c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b5b4:	e005      	b.n	800b5c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b5c0:	bf00      	nop
    }

    if (pclk != 0U)
 800b5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d028      	beq.n	800b61a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5cc:	4a10      	ldr	r2, [pc, #64]	@ (800b610 <UART_SetConfig+0x5c4>)
 800b5ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	085b      	lsrs	r3, r3, #1
 800b5e0:	441a      	add	r2, r3
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5ec:	6a3b      	ldr	r3, [r7, #32]
 800b5ee:	2b0f      	cmp	r3, #15
 800b5f0:	d910      	bls.n	800b614 <UART_SetConfig+0x5c8>
 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5f8:	d20c      	bcs.n	800b614 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b5fa:	6a3b      	ldr	r3, [r7, #32]
 800b5fc:	b29a      	uxth	r2, r3
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	60da      	str	r2, [r3, #12]
 800b604:	e009      	b.n	800b61a <UART_SetConfig+0x5ce>
 800b606:	bf00      	nop
 800b608:	40008000 	.word	0x40008000
 800b60c:	00f42400 	.word	0x00f42400
 800b610:	08016d48 	.word	0x08016d48
      }
      else
      {
        ret = HAL_ERROR;
 800b614:	2301      	movs	r3, #1
 800b616:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b61a:	697b      	ldr	r3, [r7, #20]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	2201      	movs	r2, #1
 800b626:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	2200      	movs	r2, #0
 800b62e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	2200      	movs	r2, #0
 800b634:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b636:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3730      	adds	r7, #48	@ 0x30
 800b63e:	46bd      	mov	sp, r7
 800b640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b644:	b480      	push	{r7}
 800b646:	b083      	sub	sp, #12
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b650:	f003 0308 	and.w	r3, r3, #8
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00a      	beq.n	800b66e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	430a      	orrs	r2, r1
 800b66c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b672:	f003 0301 	and.w	r3, r3, #1
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00a      	beq.n	800b690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	685b      	ldr	r3, [r3, #4]
 800b680:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	430a      	orrs	r2, r1
 800b68e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b694:	f003 0302 	and.w	r3, r3, #2
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d00a      	beq.n	800b6b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	430a      	orrs	r2, r1
 800b6b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b6:	f003 0304 	and.w	r3, r3, #4
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00a      	beq.n	800b6d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	430a      	orrs	r2, r1
 800b6d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d8:	f003 0310 	and.w	r3, r3, #16
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00a      	beq.n	800b6f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	430a      	orrs	r2, r1
 800b6f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6fa:	f003 0320 	and.w	r3, r3, #32
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00a      	beq.n	800b718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	430a      	orrs	r2, r1
 800b716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b71c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b720:	2b00      	cmp	r3, #0
 800b722:	d01a      	beq.n	800b75a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	430a      	orrs	r2, r1
 800b738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b73e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b742:	d10a      	bne.n	800b75a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	430a      	orrs	r2, r1
 800b758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b75e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00a      	beq.n	800b77c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	430a      	orrs	r2, r1
 800b77a:	605a      	str	r2, [r3, #4]
  }
}
 800b77c:	bf00      	nop
 800b77e:	370c      	adds	r7, #12
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b098      	sub	sp, #96	@ 0x60
 800b78c:	af02      	add	r7, sp, #8
 800b78e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2200      	movs	r2, #0
 800b794:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b798:	f7f8 fc7a 	bl	8004090 <HAL_GetTick>
 800b79c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	f003 0308 	and.w	r3, r3, #8
 800b7a8:	2b08      	cmp	r3, #8
 800b7aa:	d12f      	bne.n	800b80c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b7ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b7b0:	9300      	str	r3, [sp, #0]
 800b7b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f88e 	bl	800b8dc <UART_WaitOnFlagUntilTimeout>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d022      	beq.n	800b80c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ce:	e853 3f00 	ldrex	r3, [r3]
 800b7d2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b7d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b7da:	653b      	str	r3, [r7, #80]	@ 0x50
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800b7e6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7e8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b7ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b7ec:	e841 2300 	strex	r3, r2, [r1]
 800b7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b7f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d1e6      	bne.n	800b7c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2220      	movs	r2, #32
 800b7fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2200      	movs	r2, #0
 800b804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b808:	2303      	movs	r3, #3
 800b80a:	e063      	b.n	800b8d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f003 0304 	and.w	r3, r3, #4
 800b816:	2b04      	cmp	r3, #4
 800b818:	d149      	bne.n	800b8ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b81a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b81e:	9300      	str	r3, [sp, #0]
 800b820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b822:	2200      	movs	r2, #0
 800b824:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 f857 	bl	800b8dc <UART_WaitOnFlagUntilTimeout>
 800b82e:	4603      	mov	r3, r0
 800b830:	2b00      	cmp	r3, #0
 800b832:	d03c      	beq.n	800b8ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b83c:	e853 3f00 	ldrex	r3, [r3]
 800b840:	623b      	str	r3, [r7, #32]
   return(result);
 800b842:	6a3b      	ldr	r3, [r7, #32]
 800b844:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b848:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	461a      	mov	r2, r3
 800b850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b852:	633b      	str	r3, [r7, #48]	@ 0x30
 800b854:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b856:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b858:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b85a:	e841 2300 	strex	r3, r2, [r1]
 800b85e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1e6      	bne.n	800b834 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3308      	adds	r3, #8
 800b86c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	e853 3f00 	ldrex	r3, [r3]
 800b874:	60fb      	str	r3, [r7, #12]
   return(result);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f023 0301 	bic.w	r3, r3, #1
 800b87c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3308      	adds	r3, #8
 800b884:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b886:	61fa      	str	r2, [r7, #28]
 800b888:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b88a:	69b9      	ldr	r1, [r7, #24]
 800b88c:	69fa      	ldr	r2, [r7, #28]
 800b88e:	e841 2300 	strex	r3, r2, [r1]
 800b892:	617b      	str	r3, [r7, #20]
   return(result);
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d1e5      	bne.n	800b866 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2220      	movs	r2, #32
 800b89e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8aa:	2303      	movs	r3, #3
 800b8ac:	e012      	b.n	800b8d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2220      	movs	r2, #32
 800b8b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2220      	movs	r2, #32
 800b8ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b8d2:	2300      	movs	r3, #0
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3758      	adds	r7, #88	@ 0x58
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b084      	sub	sp, #16
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	603b      	str	r3, [r7, #0]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b8ec:	e04f      	b.n	800b98e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8ee:	69bb      	ldr	r3, [r7, #24]
 800b8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8f4:	d04b      	beq.n	800b98e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b8f6:	f7f8 fbcb 	bl	8004090 <HAL_GetTick>
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	1ad3      	subs	r3, r2, r3
 800b900:	69ba      	ldr	r2, [r7, #24]
 800b902:	429a      	cmp	r2, r3
 800b904:	d302      	bcc.n	800b90c <UART_WaitOnFlagUntilTimeout+0x30>
 800b906:	69bb      	ldr	r3, [r7, #24]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d101      	bne.n	800b910 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b90c:	2303      	movs	r3, #3
 800b90e:	e04e      	b.n	800b9ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f003 0304 	and.w	r3, r3, #4
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d037      	beq.n	800b98e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2b80      	cmp	r3, #128	@ 0x80
 800b922:	d034      	beq.n	800b98e <UART_WaitOnFlagUntilTimeout+0xb2>
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	2b40      	cmp	r3, #64	@ 0x40
 800b928:	d031      	beq.n	800b98e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	69db      	ldr	r3, [r3, #28]
 800b930:	f003 0308 	and.w	r3, r3, #8
 800b934:	2b08      	cmp	r3, #8
 800b936:	d110      	bne.n	800b95a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2208      	movs	r2, #8
 800b93e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f000 f838 	bl	800b9b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2208      	movs	r2, #8
 800b94a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2200      	movs	r2, #0
 800b952:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b956:	2301      	movs	r3, #1
 800b958:	e029      	b.n	800b9ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	69db      	ldr	r3, [r3, #28]
 800b960:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b964:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b968:	d111      	bne.n	800b98e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b972:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f000 f81e 	bl	800b9b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2220      	movs	r2, #32
 800b97e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2200      	movs	r2, #0
 800b986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b98a:	2303      	movs	r3, #3
 800b98c:	e00f      	b.n	800b9ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	69da      	ldr	r2, [r3, #28]
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	4013      	ands	r3, r2
 800b998:	68ba      	ldr	r2, [r7, #8]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	bf0c      	ite	eq
 800b99e:	2301      	moveq	r3, #1
 800b9a0:	2300      	movne	r3, #0
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	79fb      	ldrb	r3, [r7, #7]
 800b9a8:	429a      	cmp	r2, r3
 800b9aa:	d0a0      	beq.n	800b8ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3710      	adds	r7, #16
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b9b6:	b480      	push	{r7}
 800b9b8:	b095      	sub	sp, #84	@ 0x54
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9c6:	e853 3f00 	ldrex	r3, [r3]
 800b9ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b9cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	461a      	mov	r2, r3
 800b9da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9dc:	643b      	str	r3, [r7, #64]	@ 0x40
 800b9de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b9e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b9e4:	e841 2300 	strex	r3, r2, [r1]
 800b9e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b9ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1e6      	bne.n	800b9be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9f8:	6a3b      	ldr	r3, [r7, #32]
 800b9fa:	e853 3f00 	ldrex	r3, [r3]
 800b9fe:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba00:	69fb      	ldr	r3, [r7, #28]
 800ba02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ba06:	f023 0301 	bic.w	r3, r3, #1
 800ba0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	3308      	adds	r3, #8
 800ba12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ba16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba1c:	e841 2300 	strex	r3, r2, [r1]
 800ba20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d1e3      	bne.n	800b9f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d118      	bne.n	800ba62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	e853 3f00 	ldrex	r3, [r3]
 800ba3c:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	f023 0310 	bic.w	r3, r3, #16
 800ba44:	647b      	str	r3, [r7, #68]	@ 0x44
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	461a      	mov	r2, r3
 800ba4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba4e:	61bb      	str	r3, [r7, #24]
 800ba50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba52:	6979      	ldr	r1, [r7, #20]
 800ba54:	69ba      	ldr	r2, [r7, #24]
 800ba56:	e841 2300 	strex	r3, r2, [r1]
 800ba5a:	613b      	str	r3, [r7, #16]
   return(result);
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1e6      	bne.n	800ba30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2220      	movs	r2, #32
 800ba66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ba76:	bf00      	nop
 800ba78:	3754      	adds	r7, #84	@ 0x54
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr

0800ba82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ba82:	b480      	push	{r7}
 800ba84:	b085      	sub	sp, #20
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d101      	bne.n	800ba98 <HAL_UARTEx_DisableFifoMode+0x16>
 800ba94:	2302      	movs	r3, #2
 800ba96:	e027      	b.n	800bae8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2224      	movs	r2, #36	@ 0x24
 800baa4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f022 0201 	bic.w	r2, r2, #1
 800babe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bac6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2200      	movs	r2, #0
 800bacc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2220      	movs	r2, #32
 800bada:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bae6:	2300      	movs	r3, #0
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3714      	adds	r7, #20
 800baec:	46bd      	mov	sp, r7
 800baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf2:	4770      	bx	lr

0800baf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
 800bafc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d101      	bne.n	800bb0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bb08:	2302      	movs	r3, #2
 800bb0a:	e02d      	b.n	800bb68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2224      	movs	r2, #36	@ 0x24
 800bb18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f022 0201 	bic.w	r2, r2, #1
 800bb32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	430a      	orrs	r2, r1
 800bb46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f000 f84f 	bl	800bbec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2220      	movs	r2, #32
 800bb5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3710      	adds	r7, #16
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
 800bb78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d101      	bne.n	800bb88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bb84:	2302      	movs	r3, #2
 800bb86:	e02d      	b.n	800bbe4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2224      	movs	r2, #36	@ 0x24
 800bb94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	681a      	ldr	r2, [r3, #0]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f022 0201 	bic.w	r2, r2, #1
 800bbae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	689b      	ldr	r3, [r3, #8]
 800bbb6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	683a      	ldr	r2, [r7, #0]
 800bbc0:	430a      	orrs	r2, r1
 800bbc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bbc4:	6878      	ldr	r0, [r7, #4]
 800bbc6:	f000 f811 	bl	800bbec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	68fa      	ldr	r2, [r7, #12]
 800bbd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2220      	movs	r2, #32
 800bbd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d108      	bne.n	800bc0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2201      	movs	r2, #1
 800bc00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2201      	movs	r2, #1
 800bc08:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bc0c:	e031      	b.n	800bc72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bc0e:	2308      	movs	r3, #8
 800bc10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bc12:	2308      	movs	r3, #8
 800bc14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	689b      	ldr	r3, [r3, #8]
 800bc1c:	0e5b      	lsrs	r3, r3, #25
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	f003 0307 	and.w	r3, r3, #7
 800bc24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	0f5b      	lsrs	r3, r3, #29
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	f003 0307 	and.w	r3, r3, #7
 800bc34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc36:	7bbb      	ldrb	r3, [r7, #14]
 800bc38:	7b3a      	ldrb	r2, [r7, #12]
 800bc3a:	4911      	ldr	r1, [pc, #68]	@ (800bc80 <UARTEx_SetNbDataToProcess+0x94>)
 800bc3c:	5c8a      	ldrb	r2, [r1, r2]
 800bc3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bc42:	7b3a      	ldrb	r2, [r7, #12]
 800bc44:	490f      	ldr	r1, [pc, #60]	@ (800bc84 <UARTEx_SetNbDataToProcess+0x98>)
 800bc46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bc48:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc4c:	b29a      	uxth	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc54:	7bfb      	ldrb	r3, [r7, #15]
 800bc56:	7b7a      	ldrb	r2, [r7, #13]
 800bc58:	4909      	ldr	r1, [pc, #36]	@ (800bc80 <UARTEx_SetNbDataToProcess+0x94>)
 800bc5a:	5c8a      	ldrb	r2, [r1, r2]
 800bc5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bc60:	7b7a      	ldrb	r2, [r7, #13]
 800bc62:	4908      	ldr	r1, [pc, #32]	@ (800bc84 <UARTEx_SetNbDataToProcess+0x98>)
 800bc64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bc66:	fb93 f3f2 	sdiv	r3, r3, r2
 800bc6a:	b29a      	uxth	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bc72:	bf00      	nop
 800bc74:	3714      	adds	r7, #20
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr
 800bc7e:	bf00      	nop
 800bc80:	08016d60 	.word	0x08016d60
 800bc84:	08016d68 	.word	0x08016d68

0800bc88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b085      	sub	sp, #20
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bc98:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bc9c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	b29a      	uxth	r2, r3
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3714      	adds	r7, #20
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb4:	4770      	bx	lr

0800bcb6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bcb6:	b480      	push	{r7}
 800bcb8:	b085      	sub	sp, #20
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bcbe:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bcc2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800bcca:	b29a      	uxth	r2, r3
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	43db      	mvns	r3, r3
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	b29a      	uxth	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bcde:	2300      	movs	r3, #0
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	60f8      	str	r0, [r7, #12]
 800bcf4:	1d3b      	adds	r3, r7, #4
 800bcf6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2200      	movs	r2, #0
 800bd06:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2200      	movs	r2, #0
 800bd16:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bd1a:	2300      	movs	r3, #0
}
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	3714      	adds	r7, #20
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	b09d      	sub	sp, #116	@ 0x74
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
 800bd30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bd32:	2300      	movs	r3, #0
 800bd34:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bd38:	687a      	ldr	r2, [r7, #4]
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	009b      	lsls	r3, r3, #2
 800bd40:	4413      	add	r3, r2
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	b29b      	uxth	r3, r3
 800bd46:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800bd4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd4e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	78db      	ldrb	r3, [r3, #3]
 800bd56:	2b03      	cmp	r3, #3
 800bd58:	d81f      	bhi.n	800bd9a <USB_ActivateEndpoint+0x72>
 800bd5a:	a201      	add	r2, pc, #4	@ (adr r2, 800bd60 <USB_ActivateEndpoint+0x38>)
 800bd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd60:	0800bd71 	.word	0x0800bd71
 800bd64:	0800bd8d 	.word	0x0800bd8d
 800bd68:	0800bda3 	.word	0x0800bda3
 800bd6c:	0800bd7f 	.word	0x0800bd7f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bd70:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bd74:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bd78:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bd7c:	e012      	b.n	800bda4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bd7e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bd82:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bd86:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bd8a:	e00b      	b.n	800bda4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bd8c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bd90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bd94:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800bd98:	e004      	b.n	800bda4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800bda0:	e000      	b.n	800bda4 <USB_ActivateEndpoint+0x7c>
      break;
 800bda2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	441a      	add	r2, r3
 800bdae:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800bdb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdc2:	b29b      	uxth	r3, r3
 800bdc4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	009b      	lsls	r3, r3, #2
 800bdce:	4413      	add	r3, r2
 800bdd0:	881b      	ldrh	r3, [r3, #0]
 800bdd2:	b29b      	uxth	r3, r3
 800bdd4:	b21b      	sxth	r3, r3
 800bdd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdde:	b21a      	sxth	r2, r3
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	b21b      	sxth	r3, r3
 800bde6:	4313      	orrs	r3, r2
 800bde8:	b21b      	sxth	r3, r3
 800bdea:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	009b      	lsls	r3, r3, #2
 800bdf6:	441a      	add	r2, r3
 800bdf8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800bdfc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be0c:	b29b      	uxth	r3, r3
 800be0e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800be10:	683b      	ldr	r3, [r7, #0]
 800be12:	7b1b      	ldrb	r3, [r3, #12]
 800be14:	2b00      	cmp	r3, #0
 800be16:	f040 8178 	bne.w	800c10a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	785b      	ldrb	r3, [r3, #1]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	f000 8084 	beq.w	800bf2c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	61bb      	str	r3, [r7, #24]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be2e:	b29b      	uxth	r3, r3
 800be30:	461a      	mov	r2, r3
 800be32:	69bb      	ldr	r3, [r7, #24]
 800be34:	4413      	add	r3, r2
 800be36:	61bb      	str	r3, [r7, #24]
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	00da      	lsls	r2, r3, #3
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	4413      	add	r3, r2
 800be42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800be46:	617b      	str	r3, [r7, #20]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	88db      	ldrh	r3, [r3, #6]
 800be4c:	085b      	lsrs	r3, r3, #1
 800be4e:	b29b      	uxth	r3, r3
 800be50:	005b      	lsls	r3, r3, #1
 800be52:	b29a      	uxth	r2, r3
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	4413      	add	r3, r2
 800be62:	881b      	ldrh	r3, [r3, #0]
 800be64:	827b      	strh	r3, [r7, #18]
 800be66:	8a7b      	ldrh	r3, [r7, #18]
 800be68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d01b      	beq.n	800bea8 <USB_ActivateEndpoint+0x180>
 800be70:	687a      	ldr	r2, [r7, #4]
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	781b      	ldrb	r3, [r3, #0]
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	4413      	add	r3, r2
 800be7a:	881b      	ldrh	r3, [r3, #0]
 800be7c:	b29b      	uxth	r3, r3
 800be7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be86:	823b      	strh	r3, [r7, #16]
 800be88:	687a      	ldr	r2, [r7, #4]
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	009b      	lsls	r3, r3, #2
 800be90:	441a      	add	r2, r3
 800be92:	8a3b      	ldrh	r3, [r7, #16]
 800be94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bea0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	78db      	ldrb	r3, [r3, #3]
 800beac:	2b01      	cmp	r3, #1
 800beae:	d020      	beq.n	800bef2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	4413      	add	r3, r2
 800beba:	881b      	ldrh	r3, [r3, #0]
 800bebc:	b29b      	uxth	r3, r3
 800bebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bec2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bec6:	81bb      	strh	r3, [r7, #12]
 800bec8:	89bb      	ldrh	r3, [r7, #12]
 800beca:	f083 0320 	eor.w	r3, r3, #32
 800bece:	81bb      	strh	r3, [r7, #12]
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	441a      	add	r2, r3
 800beda:	89bb      	ldrh	r3, [r7, #12]
 800bedc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bee8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800beec:	b29b      	uxth	r3, r3
 800beee:	8013      	strh	r3, [r2, #0]
 800bef0:	e2d5      	b.n	800c49e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	4413      	add	r3, r2
 800befc:	881b      	ldrh	r3, [r3, #0]
 800befe:	b29b      	uxth	r3, r3
 800bf00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf08:	81fb      	strh	r3, [r7, #14]
 800bf0a:	687a      	ldr	r2, [r7, #4]
 800bf0c:	683b      	ldr	r3, [r7, #0]
 800bf0e:	781b      	ldrb	r3, [r3, #0]
 800bf10:	009b      	lsls	r3, r3, #2
 800bf12:	441a      	add	r2, r3
 800bf14:	89fb      	ldrh	r3, [r7, #14]
 800bf16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	8013      	strh	r3, [r2, #0]
 800bf2a:	e2b8      	b.n	800c49e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	461a      	mov	r2, r3
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf3c:	4413      	add	r3, r2
 800bf3e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	00da      	lsls	r2, r3, #3
 800bf46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf48:	4413      	add	r3, r2
 800bf4a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800bf4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	88db      	ldrh	r3, [r3, #6]
 800bf54:	085b      	lsrs	r3, r3, #1
 800bf56:	b29b      	uxth	r3, r3
 800bf58:	005b      	lsls	r3, r3, #1
 800bf5a:	b29a      	uxth	r2, r3
 800bf5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf5e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf6a:	b29b      	uxth	r3, r3
 800bf6c:	461a      	mov	r2, r3
 800bf6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf70:	4413      	add	r3, r2
 800bf72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	00da      	lsls	r2, r3, #3
 800bf7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf7c:	4413      	add	r3, r2
 800bf7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bf82:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf86:	881b      	ldrh	r3, [r3, #0]
 800bf88:	b29b      	uxth	r3, r3
 800bf8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf8e:	b29a      	uxth	r2, r3
 800bf90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf92:	801a      	strh	r2, [r3, #0]
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	691b      	ldr	r3, [r3, #16]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d10a      	bne.n	800bfb2 <USB_ActivateEndpoint+0x28a>
 800bf9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9e:	881b      	ldrh	r3, [r3, #0]
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfae:	801a      	strh	r2, [r3, #0]
 800bfb0:	e039      	b.n	800c026 <USB_ActivateEndpoint+0x2fe>
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfb8:	d818      	bhi.n	800bfec <USB_ActivateEndpoint+0x2c4>
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	085b      	lsrs	r3, r3, #1
 800bfc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	f003 0301 	and.w	r3, r3, #1
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d002      	beq.n	800bfd4 <USB_ActivateEndpoint+0x2ac>
 800bfce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bfd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd6:	881b      	ldrh	r3, [r3, #0]
 800bfd8:	b29a      	uxth	r2, r3
 800bfda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	029b      	lsls	r3, r3, #10
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	b29a      	uxth	r2, r3
 800bfe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe8:	801a      	strh	r2, [r3, #0]
 800bfea:	e01c      	b.n	800c026 <USB_ActivateEndpoint+0x2fe>
 800bfec:	683b      	ldr	r3, [r7, #0]
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	095b      	lsrs	r3, r3, #5
 800bff2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	691b      	ldr	r3, [r3, #16]
 800bff8:	f003 031f 	and.w	r3, r3, #31
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d102      	bne.n	800c006 <USB_ActivateEndpoint+0x2de>
 800c000:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c002:	3b01      	subs	r3, #1
 800c004:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c008:	881b      	ldrh	r3, [r3, #0]
 800c00a:	b29a      	uxth	r2, r3
 800c00c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c00e:	b29b      	uxth	r3, r3
 800c010:	029b      	lsls	r3, r3, #10
 800c012:	b29b      	uxth	r3, r3
 800c014:	4313      	orrs	r3, r2
 800c016:	b29b      	uxth	r3, r3
 800c018:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c01c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c020:	b29a      	uxth	r2, r3
 800c022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c024:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c026:	687a      	ldr	r2, [r7, #4]
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	4413      	add	r3, r2
 800c030:	881b      	ldrh	r3, [r3, #0]
 800c032:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c034:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d01b      	beq.n	800c076 <USB_ActivateEndpoint+0x34e>
 800c03e:	687a      	ldr	r2, [r7, #4]
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	4413      	add	r3, r2
 800c048:	881b      	ldrh	r3, [r3, #0]
 800c04a:	b29b      	uxth	r3, r3
 800c04c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c050:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c054:	843b      	strh	r3, [r7, #32]
 800c056:	687a      	ldr	r2, [r7, #4]
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	009b      	lsls	r3, r3, #2
 800c05e:	441a      	add	r2, r3
 800c060:	8c3b      	ldrh	r3, [r7, #32]
 800c062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c06a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c06e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c072:	b29b      	uxth	r3, r3
 800c074:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d124      	bne.n	800c0c8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c07e:	687a      	ldr	r2, [r7, #4]
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	781b      	ldrb	r3, [r3, #0]
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	881b      	ldrh	r3, [r3, #0]
 800c08a:	b29b      	uxth	r3, r3
 800c08c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c094:	83bb      	strh	r3, [r7, #28]
 800c096:	8bbb      	ldrh	r3, [r7, #28]
 800c098:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c09c:	83bb      	strh	r3, [r7, #28]
 800c09e:	8bbb      	ldrh	r3, [r7, #28]
 800c0a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c0a4:	83bb      	strh	r3, [r7, #28]
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	781b      	ldrb	r3, [r3, #0]
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	441a      	add	r2, r3
 800c0b0:	8bbb      	ldrh	r3, [r7, #28]
 800c0b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	8013      	strh	r3, [r2, #0]
 800c0c6:	e1ea      	b.n	800c49e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	4413      	add	r3, r2
 800c0d2:	881b      	ldrh	r3, [r3, #0]
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c0da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0de:	83fb      	strh	r3, [r7, #30]
 800c0e0:	8bfb      	ldrh	r3, [r7, #30]
 800c0e2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c0e6:	83fb      	strh	r3, [r7, #30]
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	441a      	add	r2, r3
 800c0f2:	8bfb      	ldrh	r3, [r7, #30]
 800c0f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c104:	b29b      	uxth	r3, r3
 800c106:	8013      	strh	r3, [r2, #0]
 800c108:	e1c9      	b.n	800c49e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	78db      	ldrb	r3, [r3, #3]
 800c10e:	2b02      	cmp	r3, #2
 800c110:	d11e      	bne.n	800c150 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	781b      	ldrb	r3, [r3, #0]
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	4413      	add	r3, r2
 800c11c:	881b      	ldrh	r3, [r3, #0]
 800c11e:	b29b      	uxth	r3, r3
 800c120:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c128:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	441a      	add	r2, r3
 800c136:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c13a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c13e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c142:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	8013      	strh	r3, [r2, #0]
 800c14e:	e01d      	b.n	800c18c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c150:	687a      	ldr	r2, [r7, #4]
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	4413      	add	r3, r2
 800c15a:	881b      	ldrh	r3, [r3, #0]
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c166:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	441a      	add	r2, r3
 800c174:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c178:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c17c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c180:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c184:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c188:	b29b      	uxth	r3, r3
 800c18a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c196:	b29b      	uxth	r3, r3
 800c198:	461a      	mov	r2, r3
 800c19a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c19c:	4413      	add	r3, r2
 800c19e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	00da      	lsls	r2, r3, #3
 800c1a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1a8:	4413      	add	r3, r2
 800c1aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c1ae:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	891b      	ldrh	r3, [r3, #8]
 800c1b4:	085b      	lsrs	r3, r3, #1
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	005b      	lsls	r3, r3, #1
 800c1ba:	b29a      	uxth	r2, r3
 800c1bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c1be:	801a      	strh	r2, [r3, #0]
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	461a      	mov	r2, r3
 800c1ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1d0:	4413      	add	r3, r2
 800c1d2:	657b      	str	r3, [r7, #84]	@ 0x54
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	781b      	ldrb	r3, [r3, #0]
 800c1d8:	00da      	lsls	r2, r3, #3
 800c1da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c1dc:	4413      	add	r3, r2
 800c1de:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c1e2:	653b      	str	r3, [r7, #80]	@ 0x50
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	895b      	ldrh	r3, [r3, #10]
 800c1e8:	085b      	lsrs	r3, r3, #1
 800c1ea:	b29b      	uxth	r3, r3
 800c1ec:	005b      	lsls	r3, r3, #1
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1f2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	785b      	ldrb	r3, [r3, #1]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f040 8093 	bne.w	800c324 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c1fe:	687a      	ldr	r2, [r7, #4]
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	881b      	ldrh	r3, [r3, #0]
 800c20a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c20e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c216:	2b00      	cmp	r3, #0
 800c218:	d01b      	beq.n	800c252 <USB_ActivateEndpoint+0x52a>
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4413      	add	r3, r2
 800c224:	881b      	ldrh	r3, [r3, #0]
 800c226:	b29b      	uxth	r3, r3
 800c228:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c22c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c230:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	441a      	add	r2, r3
 800c23c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c23e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c242:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c246:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c24a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c24e:	b29b      	uxth	r3, r3
 800c250:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c252:	687a      	ldr	r2, [r7, #4]
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	4413      	add	r3, r2
 800c25c:	881b      	ldrh	r3, [r3, #0]
 800c25e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c260:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c266:	2b00      	cmp	r3, #0
 800c268:	d01b      	beq.n	800c2a2 <USB_ActivateEndpoint+0x57a>
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4413      	add	r3, r2
 800c274:	881b      	ldrh	r3, [r3, #0]
 800c276:	b29b      	uxth	r3, r3
 800c278:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c27c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c280:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	441a      	add	r2, r3
 800c28c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c28e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c292:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c296:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c29a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c2a2:	687a      	ldr	r2, [r7, #4]
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	4413      	add	r3, r2
 800c2ac:	881b      	ldrh	r3, [r3, #0]
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2b8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c2ba:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c2bc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c2c0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c2c2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c2c4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c2c8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	441a      	add	r2, r3
 800c2d4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c2d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	4413      	add	r3, r2
 800c2f4:	881b      	ldrh	r3, [r3, #0]
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c300:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c302:	687a      	ldr	r2, [r7, #4]
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	781b      	ldrb	r3, [r3, #0]
 800c308:	009b      	lsls	r3, r3, #2
 800c30a:	441a      	add	r2, r3
 800c30c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c30e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c312:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c316:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c31a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c31e:	b29b      	uxth	r3, r3
 800c320:	8013      	strh	r3, [r2, #0]
 800c322:	e0bc      	b.n	800c49e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	4413      	add	r3, r2
 800c32e:	881b      	ldrh	r3, [r3, #0]
 800c330:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c334:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c338:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d01d      	beq.n	800c37c <USB_ActivateEndpoint+0x654>
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	4413      	add	r3, r2
 800c34a:	881b      	ldrh	r3, [r3, #0]
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c356:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	009b      	lsls	r3, r3, #2
 800c362:	441a      	add	r2, r3
 800c364:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c368:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c36c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c370:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c374:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c378:	b29b      	uxth	r3, r3
 800c37a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	4413      	add	r3, r2
 800c386:	881b      	ldrh	r3, [r3, #0]
 800c388:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c38c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c394:	2b00      	cmp	r3, #0
 800c396:	d01d      	beq.n	800c3d4 <USB_ActivateEndpoint+0x6ac>
 800c398:	687a      	ldr	r2, [r7, #4]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	009b      	lsls	r3, r3, #2
 800c3a0:	4413      	add	r3, r2
 800c3a2:	881b      	ldrh	r3, [r3, #0]
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3ae:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	441a      	add	r2, r3
 800c3bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c3c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	78db      	ldrb	r3, [r3, #3]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d024      	beq.n	800c426 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c3dc:	687a      	ldr	r2, [r7, #4]
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	4413      	add	r3, r2
 800c3e6:	881b      	ldrh	r3, [r3, #0]
 800c3e8:	b29b      	uxth	r3, r3
 800c3ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3f2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c3f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c3fa:	f083 0320 	eor.w	r3, r3, #32
 800c3fe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	441a      	add	r2, r3
 800c40c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c410:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c414:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c418:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c41c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c420:	b29b      	uxth	r3, r3
 800c422:	8013      	strh	r3, [r2, #0]
 800c424:	e01d      	b.n	800c462 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	4413      	add	r3, r2
 800c430:	881b      	ldrh	r3, [r3, #0]
 800c432:	b29b      	uxth	r3, r3
 800c434:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c43c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	781b      	ldrb	r3, [r3, #0]
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	441a      	add	r2, r3
 800c44a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c44e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c45a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c45e:	b29b      	uxth	r3, r3
 800c460:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	4413      	add	r3, r2
 800c46c:	881b      	ldrh	r3, [r3, #0]
 800c46e:	b29b      	uxth	r3, r3
 800c470:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c478:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	441a      	add	r2, r3
 800c486:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c48a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c48e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c49e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3774      	adds	r7, #116	@ 0x74
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
 800c4ae:	bf00      	nop

0800c4b0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b08d      	sub	sp, #52	@ 0x34
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	7b1b      	ldrb	r3, [r3, #12]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f040 808e 	bne.w	800c5e0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	785b      	ldrb	r3, [r3, #1]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d044      	beq.n	800c556 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	4413      	add	r3, r2
 800c4d6:	881b      	ldrh	r3, [r3, #0]
 800c4d8:	81bb      	strh	r3, [r7, #12]
 800c4da:	89bb      	ldrh	r3, [r7, #12]
 800c4dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d01b      	beq.n	800c51c <USB_DeactivateEndpoint+0x6c>
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	4413      	add	r3, r2
 800c4ee:	881b      	ldrh	r3, [r3, #0]
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4fa:	817b      	strh	r3, [r7, #10]
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	009b      	lsls	r3, r3, #2
 800c504:	441a      	add	r2, r3
 800c506:	897b      	ldrh	r3, [r7, #10]
 800c508:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c50c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c510:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c514:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c518:	b29b      	uxth	r3, r3
 800c51a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c51c:	687a      	ldr	r2, [r7, #4]
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	4413      	add	r3, r2
 800c526:	881b      	ldrh	r3, [r3, #0]
 800c528:	b29b      	uxth	r3, r3
 800c52a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c52e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c532:	813b      	strh	r3, [r7, #8]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	781b      	ldrb	r3, [r3, #0]
 800c53a:	009b      	lsls	r3, r3, #2
 800c53c:	441a      	add	r2, r3
 800c53e:	893b      	ldrh	r3, [r7, #8]
 800c540:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c544:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c548:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c54c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c550:	b29b      	uxth	r3, r3
 800c552:	8013      	strh	r3, [r2, #0]
 800c554:	e192      	b.n	800c87c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	009b      	lsls	r3, r3, #2
 800c55e:	4413      	add	r3, r2
 800c560:	881b      	ldrh	r3, [r3, #0]
 800c562:	827b      	strh	r3, [r7, #18]
 800c564:	8a7b      	ldrh	r3, [r7, #18]
 800c566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d01b      	beq.n	800c5a6 <USB_DeactivateEndpoint+0xf6>
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	4413      	add	r3, r2
 800c578:	881b      	ldrh	r3, [r3, #0]
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c580:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c584:	823b      	strh	r3, [r7, #16]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	441a      	add	r2, r3
 800c590:	8a3b      	ldrh	r3, [r7, #16]
 800c592:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c596:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c59a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c59e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5a2:	b29b      	uxth	r3, r3
 800c5a4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	4413      	add	r3, r2
 800c5b0:	881b      	ldrh	r3, [r3, #0]
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c5b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5bc:	81fb      	strh	r3, [r7, #14]
 800c5be:	687a      	ldr	r2, [r7, #4]
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	009b      	lsls	r3, r3, #2
 800c5c6:	441a      	add	r2, r3
 800c5c8:	89fb      	ldrh	r3, [r7, #14]
 800c5ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c5da:	b29b      	uxth	r3, r3
 800c5dc:	8013      	strh	r3, [r2, #0]
 800c5de:	e14d      	b.n	800c87c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	785b      	ldrb	r3, [r3, #1]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	f040 80a5 	bne.w	800c734 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	4413      	add	r3, r2
 800c5f4:	881b      	ldrh	r3, [r3, #0]
 800c5f6:	843b      	strh	r3, [r7, #32]
 800c5f8:	8c3b      	ldrh	r3, [r7, #32]
 800c5fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d01b      	beq.n	800c63a <USB_DeactivateEndpoint+0x18a>
 800c602:	687a      	ldr	r2, [r7, #4]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	781b      	ldrb	r3, [r3, #0]
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4413      	add	r3, r2
 800c60c:	881b      	ldrh	r3, [r3, #0]
 800c60e:	b29b      	uxth	r3, r3
 800c610:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c614:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c618:	83fb      	strh	r3, [r7, #30]
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	441a      	add	r2, r3
 800c624:	8bfb      	ldrh	r3, [r7, #30]
 800c626:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c62a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c62e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c636:	b29b      	uxth	r3, r3
 800c638:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4413      	add	r3, r2
 800c644:	881b      	ldrh	r3, [r3, #0]
 800c646:	83bb      	strh	r3, [r7, #28]
 800c648:	8bbb      	ldrh	r3, [r7, #28]
 800c64a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d01b      	beq.n	800c68a <USB_DeactivateEndpoint+0x1da>
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	009b      	lsls	r3, r3, #2
 800c65a:	4413      	add	r3, r2
 800c65c:	881b      	ldrh	r3, [r3, #0]
 800c65e:	b29b      	uxth	r3, r3
 800c660:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c664:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c668:	837b      	strh	r3, [r7, #26]
 800c66a:	687a      	ldr	r2, [r7, #4]
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	009b      	lsls	r3, r3, #2
 800c672:	441a      	add	r2, r3
 800c674:	8b7b      	ldrh	r3, [r7, #26]
 800c676:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c67a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c67e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c682:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c686:	b29b      	uxth	r3, r3
 800c688:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4413      	add	r3, r2
 800c694:	881b      	ldrh	r3, [r3, #0]
 800c696:	b29b      	uxth	r3, r3
 800c698:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c69c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6a0:	833b      	strh	r3, [r7, #24]
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	441a      	add	r2, r3
 800c6ac:	8b3b      	ldrh	r3, [r7, #24]
 800c6ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6ba:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c6be:	b29b      	uxth	r3, r3
 800c6c0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4413      	add	r3, r2
 800c6cc:	881b      	ldrh	r3, [r3, #0]
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c6d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6d8:	82fb      	strh	r3, [r7, #22]
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	441a      	add	r2, r3
 800c6e4:	8afb      	ldrh	r3, [r7, #22]
 800c6e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6f6:	b29b      	uxth	r3, r3
 800c6f8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	4413      	add	r3, r2
 800c704:	881b      	ldrh	r3, [r3, #0]
 800c706:	b29b      	uxth	r3, r3
 800c708:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c70c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c710:	82bb      	strh	r3, [r7, #20]
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	441a      	add	r2, r3
 800c71c:	8abb      	ldrh	r3, [r7, #20]
 800c71e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c722:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c726:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c72a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c72e:	b29b      	uxth	r3, r3
 800c730:	8013      	strh	r3, [r2, #0]
 800c732:	e0a3      	b.n	800c87c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	4413      	add	r3, r2
 800c73e:	881b      	ldrh	r3, [r3, #0]
 800c740:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c742:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d01b      	beq.n	800c784 <USB_DeactivateEndpoint+0x2d4>
 800c74c:	687a      	ldr	r2, [r7, #4]
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	781b      	ldrb	r3, [r3, #0]
 800c752:	009b      	lsls	r3, r3, #2
 800c754:	4413      	add	r3, r2
 800c756:	881b      	ldrh	r3, [r3, #0]
 800c758:	b29b      	uxth	r3, r3
 800c75a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c75e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c762:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	009b      	lsls	r3, r3, #2
 800c76c:	441a      	add	r2, r3
 800c76e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c770:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c774:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c778:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c77c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c780:	b29b      	uxth	r3, r3
 800c782:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c784:	687a      	ldr	r2, [r7, #4]
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4413      	add	r3, r2
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c792:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d01b      	beq.n	800c7d4 <USB_DeactivateEndpoint+0x324>
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	4413      	add	r3, r2
 800c7a6:	881b      	ldrh	r3, [r3, #0]
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7b2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c7b4:	687a      	ldr	r2, [r7, #4]
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	781b      	ldrb	r3, [r3, #0]
 800c7ba:	009b      	lsls	r3, r3, #2
 800c7bc:	441a      	add	r2, r3
 800c7be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c7c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c7d0:	b29b      	uxth	r3, r3
 800c7d2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	4413      	add	r3, r2
 800c7de:	881b      	ldrh	r3, [r3, #0]
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	441a      	add	r2, r3
 800c7f6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c7f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c808:	b29b      	uxth	r3, r3
 800c80a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	4413      	add	r3, r2
 800c816:	881b      	ldrh	r3, [r3, #0]
 800c818:	b29b      	uxth	r3, r3
 800c81a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c81e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c822:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	441a      	add	r2, r3
 800c82e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c830:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c834:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c838:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c83c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c840:	b29b      	uxth	r3, r3
 800c842:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	009b      	lsls	r3, r3, #2
 800c84c:	4413      	add	r3, r2
 800c84e:	881b      	ldrh	r3, [r3, #0]
 800c850:	b29b      	uxth	r3, r3
 800c852:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c85a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	441a      	add	r2, r3
 800c866:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c868:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c86c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c870:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c874:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c878:	b29b      	uxth	r3, r3
 800c87a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3734      	adds	r7, #52	@ 0x34
 800c882:	46bd      	mov	sp, r7
 800c884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c888:	4770      	bx	lr

0800c88a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b0c2      	sub	sp, #264	@ 0x108
 800c88e:	af00      	add	r7, sp, #0
 800c890:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c894:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c898:	6018      	str	r0, [r3, #0]
 800c89a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c89e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8a2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c8a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	785b      	ldrb	r3, [r3, #1]
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	f040 86b7 	bne.w	800d624 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c8b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	699a      	ldr	r2, [r3, #24]
 800c8c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	691b      	ldr	r3, [r3, #16]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d908      	bls.n	800c8e4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800c8d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	691b      	ldr	r3, [r3, #16]
 800c8de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c8e2:	e007      	b.n	800c8f4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c8e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	699b      	ldr	r3, [r3, #24]
 800c8f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c8f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	7b1b      	ldrb	r3, [r3, #12]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d13a      	bne.n	800c97a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	6959      	ldr	r1, [r3, #20]
 800c910:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c914:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	88da      	ldrh	r2, [r3, #6]
 800c91c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c920:	b29b      	uxth	r3, r3
 800c922:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c926:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c92a:	6800      	ldr	r0, [r0, #0]
 800c92c:	f001 fc99 	bl	800e262 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c930:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c934:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	613b      	str	r3, [r7, #16]
 800c93c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c940:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	461a      	mov	r2, r3
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	4413      	add	r3, r2
 800c952:	613b      	str	r3, [r7, #16]
 800c954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	00da      	lsls	r2, r3, #3
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	4413      	add	r3, r2
 800c966:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c96a:	60fb      	str	r3, [r7, #12]
 800c96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c970:	b29a      	uxth	r2, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	801a      	strh	r2, [r3, #0]
 800c976:	f000 be1f 	b.w	800d5b8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c97a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c97e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	78db      	ldrb	r3, [r3, #3]
 800c986:	2b02      	cmp	r3, #2
 800c988:	f040 8462 	bne.w	800d250 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c98c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	6a1a      	ldr	r2, [r3, #32]
 800c998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c99c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	f240 83df 	bls.w	800d168 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c9aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9b2:	681a      	ldr	r2, [r3, #0]
 800c9b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	4413      	add	r3, r2
 800c9c4:	881b      	ldrh	r3, [r3, #0]
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9d0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c9d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9dc:	681a      	ldr	r2, [r3, #0]
 800c9de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	009b      	lsls	r3, r3, #2
 800c9ec:	441a      	add	r2, r3
 800c9ee:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c9f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9fa:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c9fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca02:	b29b      	uxth	r3, r3
 800ca04:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ca06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	6a1a      	ldr	r2, [r3, #32]
 800ca12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca16:	1ad2      	subs	r2, r2, r3
 800ca18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ca24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	009b      	lsls	r3, r3, #2
 800ca3c:	4413      	add	r3, r2
 800ca3e:	881b      	ldrh	r3, [r3, #0]
 800ca40:	b29b      	uxth	r3, r3
 800ca42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	f000 81c7 	beq.w	800cdda <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ca4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	633b      	str	r3, [r7, #48]	@ 0x30
 800ca58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	785b      	ldrb	r3, [r3, #1]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d177      	bne.n	800cb58 <USB_EPStartXfer+0x2ce>
 800ca68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca82:	b29b      	uxth	r3, r3
 800ca84:	461a      	mov	r2, r3
 800ca86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca88:	4413      	add	r3, r2
 800ca8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	00da      	lsls	r2, r3, #3
 800ca9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca9c:	4413      	add	r3, r2
 800ca9e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800caa2:	627b      	str	r3, [r7, #36]	@ 0x24
 800caa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800caae:	b29a      	uxth	r2, r3
 800cab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab2:	801a      	strh	r2, [r3, #0]
 800cab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10a      	bne.n	800cad2 <USB_EPStartXfer+0x248>
 800cabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabe:	881b      	ldrh	r3, [r3, #0]
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cac6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800caca:	b29a      	uxth	r2, r3
 800cacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cace:	801a      	strh	r2, [r3, #0]
 800cad0:	e067      	b.n	800cba2 <USB_EPStartXfer+0x318>
 800cad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cad6:	2b3e      	cmp	r3, #62	@ 0x3e
 800cad8:	d81c      	bhi.n	800cb14 <USB_EPStartXfer+0x28a>
 800cada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cade:	085b      	lsrs	r3, r3, #1
 800cae0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cae8:	f003 0301 	and.w	r3, r3, #1
 800caec:	2b00      	cmp	r3, #0
 800caee:	d004      	beq.n	800cafa <USB_EPStartXfer+0x270>
 800caf0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800caf4:	3301      	adds	r3, #1
 800caf6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cafc:	881b      	ldrh	r3, [r3, #0]
 800cafe:	b29a      	uxth	r2, r3
 800cb00:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cb04:	b29b      	uxth	r3, r3
 800cb06:	029b      	lsls	r3, r3, #10
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb10:	801a      	strh	r2, [r3, #0]
 800cb12:	e046      	b.n	800cba2 <USB_EPStartXfer+0x318>
 800cb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb18:	095b      	lsrs	r3, r3, #5
 800cb1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cb1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb22:	f003 031f 	and.w	r3, r3, #31
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d104      	bne.n	800cb34 <USB_EPStartXfer+0x2aa>
 800cb2a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cb2e:	3b01      	subs	r3, #1
 800cb30:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb36:	881b      	ldrh	r3, [r3, #0]
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	029b      	lsls	r3, r3, #10
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	4313      	orrs	r3, r2
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb50:	b29a      	uxth	r2, r3
 800cb52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb54:	801a      	strh	r2, [r3, #0]
 800cb56:	e024      	b.n	800cba2 <USB_EPStartXfer+0x318>
 800cb58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	785b      	ldrb	r3, [r3, #1]
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	d11c      	bne.n	800cba2 <USB_EPStartXfer+0x318>
 800cb68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb76:	b29b      	uxth	r3, r3
 800cb78:	461a      	mov	r2, r3
 800cb7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb7c:	4413      	add	r3, r2
 800cb7e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	00da      	lsls	r2, r3, #3
 800cb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb90:	4413      	add	r3, r2
 800cb92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb9c:	b29a      	uxth	r2, r3
 800cb9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cba0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cba2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cba6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	895b      	ldrh	r3, [r3, #10]
 800cbae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cbb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6959      	ldr	r1, [r3, #20]
 800cbbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbc2:	b29b      	uxth	r3, r3
 800cbc4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cbc8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cbcc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cbd0:	6800      	ldr	r0, [r0, #0]
 800cbd2:	f001 fb46 	bl	800e262 <USB_WritePMA>
            ep->xfer_buff += len;
 800cbd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	695a      	ldr	r2, [r3, #20]
 800cbe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbe6:	441a      	add	r2, r3
 800cbe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cbf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	6a1a      	ldr	r2, [r3, #32]
 800cc00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	691b      	ldr	r3, [r3, #16]
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d90f      	bls.n	800cc30 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800cc10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	6a1a      	ldr	r2, [r3, #32]
 800cc1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc20:	1ad2      	subs	r2, r2, r3
 800cc22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	621a      	str	r2, [r3, #32]
 800cc2e:	e00e      	b.n	800cc4e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800cc30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	6a1b      	ldr	r3, [r3, #32]
 800cc3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800cc40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cc4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	785b      	ldrb	r3, [r3, #1]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d177      	bne.n	800cd4e <USB_EPStartXfer+0x4c4>
 800cc5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	61bb      	str	r3, [r7, #24]
 800cc6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	69bb      	ldr	r3, [r7, #24]
 800cc7e:	4413      	add	r3, r2
 800cc80:	61bb      	str	r3, [r7, #24]
 800cc82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	00da      	lsls	r2, r3, #3
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	4413      	add	r3, r2
 800cc94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cc98:	617b      	str	r3, [r7, #20]
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	881b      	ldrh	r3, [r3, #0]
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	801a      	strh	r2, [r3, #0]
 800ccaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d10a      	bne.n	800ccc8 <USB_EPStartXfer+0x43e>
 800ccb2:	697b      	ldr	r3, [r7, #20]
 800ccb4:	881b      	ldrh	r3, [r3, #0]
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	801a      	strh	r2, [r3, #0]
 800ccc6:	e06d      	b.n	800cda4 <USB_EPStartXfer+0x51a>
 800ccc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cccc:	2b3e      	cmp	r3, #62	@ 0x3e
 800ccce:	d81c      	bhi.n	800cd0a <USB_EPStartXfer+0x480>
 800ccd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccd4:	085b      	lsrs	r3, r3, #1
 800ccd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ccda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccde:	f003 0301 	and.w	r3, r3, #1
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d004      	beq.n	800ccf0 <USB_EPStartXfer+0x466>
 800cce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ccea:	3301      	adds	r3, #1
 800ccec:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	881b      	ldrh	r3, [r3, #0]
 800ccf4:	b29a      	uxth	r2, r3
 800ccf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ccfa:	b29b      	uxth	r3, r3
 800ccfc:	029b      	lsls	r3, r3, #10
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	4313      	orrs	r3, r2
 800cd02:	b29a      	uxth	r2, r3
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	801a      	strh	r2, [r3, #0]
 800cd08:	e04c      	b.n	800cda4 <USB_EPStartXfer+0x51a>
 800cd0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd0e:	095b      	lsrs	r3, r3, #5
 800cd10:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cd14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd18:	f003 031f 	and.w	r3, r3, #31
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d104      	bne.n	800cd2a <USB_EPStartXfer+0x4a0>
 800cd20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd24:	3b01      	subs	r3, #1
 800cd26:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	881b      	ldrh	r3, [r3, #0]
 800cd2e:	b29a      	uxth	r2, r3
 800cd30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	029b      	lsls	r3, r3, #10
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	4313      	orrs	r3, r2
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd46:	b29a      	uxth	r2, r3
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	801a      	strh	r2, [r3, #0]
 800cd4c:	e02a      	b.n	800cda4 <USB_EPStartXfer+0x51a>
 800cd4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	785b      	ldrb	r3, [r3, #1]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d122      	bne.n	800cda4 <USB_EPStartXfer+0x51a>
 800cd5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	623b      	str	r3, [r7, #32]
 800cd6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	6a3b      	ldr	r3, [r7, #32]
 800cd7e:	4413      	add	r3, r2
 800cd80:	623b      	str	r3, [r7, #32]
 800cd82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	00da      	lsls	r2, r3, #3
 800cd90:	6a3b      	ldr	r3, [r7, #32]
 800cd92:	4413      	add	r3, r2
 800cd94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd98:	61fb      	str	r3, [r7, #28]
 800cd9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd9e:	b29a      	uxth	r2, r3
 800cda0:	69fb      	ldr	r3, [r7, #28]
 800cda2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cda4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cda8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	891b      	ldrh	r3, [r3, #8]
 800cdb0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cdb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	6959      	ldr	r1, [r3, #20]
 800cdc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdc4:	b29b      	uxth	r3, r3
 800cdc6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cdca:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cdce:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cdd2:	6800      	ldr	r0, [r0, #0]
 800cdd4:	f001 fa45 	bl	800e262 <USB_WritePMA>
 800cdd8:	e3ee      	b.n	800d5b8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cdda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	785b      	ldrb	r3, [r3, #1]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d177      	bne.n	800ceda <USB_EPStartXfer+0x650>
 800cdea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cdf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	461a      	mov	r2, r3
 800ce08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce0a:	4413      	add	r3, r2
 800ce0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	00da      	lsls	r2, r3, #3
 800ce1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ce1e:	4413      	add	r3, r2
 800ce20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce24:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce28:	881b      	ldrh	r3, [r3, #0]
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce34:	801a      	strh	r2, [r3, #0]
 800ce36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d10a      	bne.n	800ce54 <USB_EPStartXfer+0x5ca>
 800ce3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce40:	881b      	ldrh	r3, [r3, #0]
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce4c:	b29a      	uxth	r2, r3
 800ce4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce50:	801a      	strh	r2, [r3, #0]
 800ce52:	e06d      	b.n	800cf30 <USB_EPStartXfer+0x6a6>
 800ce54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce58:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce5a:	d81c      	bhi.n	800ce96 <USB_EPStartXfer+0x60c>
 800ce5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce60:	085b      	lsrs	r3, r3, #1
 800ce62:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ce66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce6a:	f003 0301 	and.w	r3, r3, #1
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d004      	beq.n	800ce7c <USB_EPStartXfer+0x5f2>
 800ce72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ce76:	3301      	adds	r3, #1
 800ce78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ce7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce7e:	881b      	ldrh	r3, [r3, #0]
 800ce80:	b29a      	uxth	r2, r3
 800ce82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	029b      	lsls	r3, r3, #10
 800ce8a:	b29b      	uxth	r3, r3
 800ce8c:	4313      	orrs	r3, r2
 800ce8e:	b29a      	uxth	r2, r3
 800ce90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ce92:	801a      	strh	r2, [r3, #0]
 800ce94:	e04c      	b.n	800cf30 <USB_EPStartXfer+0x6a6>
 800ce96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce9a:	095b      	lsrs	r3, r3, #5
 800ce9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cea4:	f003 031f 	and.w	r3, r3, #31
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d104      	bne.n	800ceb6 <USB_EPStartXfer+0x62c>
 800ceac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800ceb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ceb8:	881b      	ldrh	r3, [r3, #0]
 800ceba:	b29a      	uxth	r2, r3
 800cebc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	029b      	lsls	r3, r3, #10
 800cec4:	b29b      	uxth	r3, r3
 800cec6:	4313      	orrs	r3, r2
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ced2:	b29a      	uxth	r2, r3
 800ced4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ced6:	801a      	strh	r2, [r3, #0]
 800ced8:	e02a      	b.n	800cf30 <USB_EPStartXfer+0x6a6>
 800ceda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	785b      	ldrb	r3, [r3, #1]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d122      	bne.n	800cf30 <USB_EPStartXfer+0x6a6>
 800ceea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ceee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	653b      	str	r3, [r7, #80]	@ 0x50
 800cef6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cefa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	461a      	mov	r2, r3
 800cf08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf0a:	4413      	add	r3, r2
 800cf0c:	653b      	str	r3, [r7, #80]	@ 0x50
 800cf0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	00da      	lsls	r2, r3, #3
 800cf1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf1e:	4413      	add	r3, r2
 800cf20:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cf24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cf26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf2a:	b29a      	uxth	r2, r3
 800cf2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cf2e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cf30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	891b      	ldrh	r3, [r3, #8]
 800cf3c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cf40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	6959      	ldr	r1, [r3, #20]
 800cf4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cf56:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cf5a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cf5e:	6800      	ldr	r0, [r0, #0]
 800cf60:	f001 f97f 	bl	800e262 <USB_WritePMA>
            ep->xfer_buff += len;
 800cf64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	695a      	ldr	r2, [r3, #20]
 800cf70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf74:	441a      	add	r2, r3
 800cf76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cf82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	6a1a      	ldr	r2, [r3, #32]
 800cf8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	691b      	ldr	r3, [r3, #16]
 800cf9a:	429a      	cmp	r2, r3
 800cf9c:	d90f      	bls.n	800cfbe <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800cf9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	6a1a      	ldr	r2, [r3, #32]
 800cfaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfae:	1ad2      	subs	r2, r2, r3
 800cfb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	621a      	str	r2, [r3, #32]
 800cfbc:	e00e      	b.n	800cfdc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800cfbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	6a1b      	ldr	r3, [r3, #32]
 800cfca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800cfce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cfdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfe0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cfe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	785b      	ldrb	r3, [r3, #1]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d177      	bne.n	800d0e8 <USB_EPStartXfer+0x85e>
 800cff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cffc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d008:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d012:	b29b      	uxth	r3, r3
 800d014:	461a      	mov	r2, r3
 800d016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d018:	4413      	add	r3, r2
 800d01a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d01c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	781b      	ldrb	r3, [r3, #0]
 800d028:	00da      	lsls	r2, r3, #3
 800d02a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d02c:	4413      	add	r3, r2
 800d02e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d032:	637b      	str	r3, [r7, #52]	@ 0x34
 800d034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d036:	881b      	ldrh	r3, [r3, #0]
 800d038:	b29b      	uxth	r3, r3
 800d03a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d03e:	b29a      	uxth	r2, r3
 800d040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d042:	801a      	strh	r2, [r3, #0]
 800d044:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d10a      	bne.n	800d062 <USB_EPStartXfer+0x7d8>
 800d04c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d04e:	881b      	ldrh	r3, [r3, #0]
 800d050:	b29b      	uxth	r3, r3
 800d052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d05e:	801a      	strh	r2, [r3, #0]
 800d060:	e067      	b.n	800d132 <USB_EPStartXfer+0x8a8>
 800d062:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d066:	2b3e      	cmp	r3, #62	@ 0x3e
 800d068:	d81c      	bhi.n	800d0a4 <USB_EPStartXfer+0x81a>
 800d06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d06e:	085b      	lsrs	r3, r3, #1
 800d070:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d078:	f003 0301 	and.w	r3, r3, #1
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d004      	beq.n	800d08a <USB_EPStartXfer+0x800>
 800d080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d084:	3301      	adds	r3, #1
 800d086:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d08a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d08c:	881b      	ldrh	r3, [r3, #0]
 800d08e:	b29a      	uxth	r2, r3
 800d090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d094:	b29b      	uxth	r3, r3
 800d096:	029b      	lsls	r3, r3, #10
 800d098:	b29b      	uxth	r3, r3
 800d09a:	4313      	orrs	r3, r2
 800d09c:	b29a      	uxth	r2, r3
 800d09e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0a0:	801a      	strh	r2, [r3, #0]
 800d0a2:	e046      	b.n	800d132 <USB_EPStartXfer+0x8a8>
 800d0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0a8:	095b      	lsrs	r3, r3, #5
 800d0aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d0ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0b2:	f003 031f 	and.w	r3, r3, #31
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d104      	bne.n	800d0c4 <USB_EPStartXfer+0x83a>
 800d0ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0be:	3b01      	subs	r3, #1
 800d0c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d0c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0c6:	881b      	ldrh	r3, [r3, #0]
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	029b      	lsls	r3, r3, #10
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	b29b      	uxth	r3, r3
 800d0d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0e0:	b29a      	uxth	r2, r3
 800d0e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0e4:	801a      	strh	r2, [r3, #0]
 800d0e6:	e024      	b.n	800d132 <USB_EPStartXfer+0x8a8>
 800d0e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	785b      	ldrb	r3, [r3, #1]
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d11c      	bne.n	800d132 <USB_EPStartXfer+0x8a8>
 800d0f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d106:	b29b      	uxth	r3, r3
 800d108:	461a      	mov	r2, r3
 800d10a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d10c:	4413      	add	r3, r2
 800d10e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	00da      	lsls	r2, r3, #3
 800d11e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d120:	4413      	add	r3, r2
 800d122:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d12c:	b29a      	uxth	r2, r3
 800d12e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d130:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d132:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d136:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	895b      	ldrh	r3, [r3, #10]
 800d13e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	6959      	ldr	r1, [r3, #20]
 800d14e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d152:	b29b      	uxth	r3, r3
 800d154:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d158:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d15c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d160:	6800      	ldr	r0, [r0, #0]
 800d162:	f001 f87e 	bl	800e262 <USB_WritePMA>
 800d166:	e227      	b.n	800d5b8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d16c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	6a1b      	ldr	r3, [r3, #32]
 800d174:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d17c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	009b      	lsls	r3, r3, #2
 800d190:	4413      	add	r3, r2
 800d192:	881b      	ldrh	r3, [r3, #0]
 800d194:	b29b      	uxth	r3, r3
 800d196:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d19a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d19e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d1a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1aa:	681a      	ldr	r2, [r3, #0]
 800d1ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	781b      	ldrb	r3, [r3, #0]
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	441a      	add	r2, r3
 800d1bc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d1c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d1d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d1e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1ee:	b29b      	uxth	r3, r3
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d1f4:	4413      	add	r3, r2
 800d1f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d1f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	781b      	ldrb	r3, [r3, #0]
 800d204:	00da      	lsls	r2, r3, #3
 800d206:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d208:	4413      	add	r3, r2
 800d20a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d20e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d214:	b29a      	uxth	r2, r3
 800d216:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d218:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d21a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d21e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	891b      	ldrh	r3, [r3, #8]
 800d226:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d22a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d22e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	6959      	ldr	r1, [r3, #20]
 800d236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d240:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d244:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d248:	6800      	ldr	r0, [r0, #0]
 800d24a:	f001 f80a 	bl	800e262 <USB_WritePMA>
 800d24e:	e1b3      	b.n	800d5b8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d254:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	6a1a      	ldr	r2, [r3, #32]
 800d25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d260:	1ad2      	subs	r2, r2, r3
 800d262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d26e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d272:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d27c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	781b      	ldrb	r3, [r3, #0]
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	4413      	add	r3, r2
 800d288:	881b      	ldrh	r3, [r3, #0]
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d290:	2b00      	cmp	r3, #0
 800d292:	f000 80c6 	beq.w	800d422 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d29a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	673b      	str	r3, [r7, #112]	@ 0x70
 800d2a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	785b      	ldrb	r3, [r3, #1]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d177      	bne.n	800d3a2 <USB_EPStartXfer+0xb18>
 800d2b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d2be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2cc:	b29b      	uxth	r3, r3
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d2d2:	4413      	add	r3, r2
 800d2d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d2d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	00da      	lsls	r2, r3, #3
 800d2e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d2e6:	4413      	add	r3, r2
 800d2e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d2ec:	667b      	str	r3, [r7, #100]	@ 0x64
 800d2ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2f0:	881b      	ldrh	r3, [r3, #0]
 800d2f2:	b29b      	uxth	r3, r3
 800d2f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d2f8:	b29a      	uxth	r2, r3
 800d2fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2fc:	801a      	strh	r2, [r3, #0]
 800d2fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d302:	2b00      	cmp	r3, #0
 800d304:	d10a      	bne.n	800d31c <USB_EPStartXfer+0xa92>
 800d306:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d308:	881b      	ldrh	r3, [r3, #0]
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d310:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d314:	b29a      	uxth	r2, r3
 800d316:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d318:	801a      	strh	r2, [r3, #0]
 800d31a:	e067      	b.n	800d3ec <USB_EPStartXfer+0xb62>
 800d31c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d320:	2b3e      	cmp	r3, #62	@ 0x3e
 800d322:	d81c      	bhi.n	800d35e <USB_EPStartXfer+0xad4>
 800d324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d328:	085b      	lsrs	r3, r3, #1
 800d32a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d332:	f003 0301 	and.w	r3, r3, #1
 800d336:	2b00      	cmp	r3, #0
 800d338:	d004      	beq.n	800d344 <USB_EPStartXfer+0xaba>
 800d33a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d33e:	3301      	adds	r3, #1
 800d340:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d344:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d346:	881b      	ldrh	r3, [r3, #0]
 800d348:	b29a      	uxth	r2, r3
 800d34a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d34e:	b29b      	uxth	r3, r3
 800d350:	029b      	lsls	r3, r3, #10
 800d352:	b29b      	uxth	r3, r3
 800d354:	4313      	orrs	r3, r2
 800d356:	b29a      	uxth	r2, r3
 800d358:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d35a:	801a      	strh	r2, [r3, #0]
 800d35c:	e046      	b.n	800d3ec <USB_EPStartXfer+0xb62>
 800d35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d362:	095b      	lsrs	r3, r3, #5
 800d364:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d36c:	f003 031f 	and.w	r3, r3, #31
 800d370:	2b00      	cmp	r3, #0
 800d372:	d104      	bne.n	800d37e <USB_EPStartXfer+0xaf4>
 800d374:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d378:	3b01      	subs	r3, #1
 800d37a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d37e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d380:	881b      	ldrh	r3, [r3, #0]
 800d382:	b29a      	uxth	r2, r3
 800d384:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d388:	b29b      	uxth	r3, r3
 800d38a:	029b      	lsls	r3, r3, #10
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	4313      	orrs	r3, r2
 800d390:	b29b      	uxth	r3, r3
 800d392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d39a:	b29a      	uxth	r2, r3
 800d39c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d39e:	801a      	strh	r2, [r3, #0]
 800d3a0:	e024      	b.n	800d3ec <USB_EPStartXfer+0xb62>
 800d3a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	785b      	ldrb	r3, [r3, #1]
 800d3ae:	2b01      	cmp	r3, #1
 800d3b0:	d11c      	bne.n	800d3ec <USB_EPStartXfer+0xb62>
 800d3b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3c0:	b29b      	uxth	r3, r3
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d3c6:	4413      	add	r3, r2
 800d3c8:	673b      	str	r3, [r7, #112]	@ 0x70
 800d3ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	781b      	ldrb	r3, [r3, #0]
 800d3d6:	00da      	lsls	r2, r3, #3
 800d3d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d3da:	4413      	add	r3, r2
 800d3dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d3e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3e6:	b29a      	uxth	r2, r3
 800d3e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d3ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d3ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	895b      	ldrh	r3, [r3, #10]
 800d3f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d3fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	6959      	ldr	r1, [r3, #20]
 800d408:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d412:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d416:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d41a:	6800      	ldr	r0, [r0, #0]
 800d41c:	f000 ff21 	bl	800e262 <USB_WritePMA>
 800d420:	e0ca      	b.n	800d5b8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	785b      	ldrb	r3, [r3, #1]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d177      	bne.n	800d522 <USB_EPStartXfer+0xc98>
 800d432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d436:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d43e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d442:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	461a      	mov	r2, r3
 800d450:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d452:	4413      	add	r3, r2
 800d454:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d45a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	00da      	lsls	r2, r3, #3
 800d464:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d466:	4413      	add	r3, r2
 800d468:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d46c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d46e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d470:	881b      	ldrh	r3, [r3, #0]
 800d472:	b29b      	uxth	r3, r3
 800d474:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d478:	b29a      	uxth	r2, r3
 800d47a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d47c:	801a      	strh	r2, [r3, #0]
 800d47e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d482:	2b00      	cmp	r3, #0
 800d484:	d10a      	bne.n	800d49c <USB_EPStartXfer+0xc12>
 800d486:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d488:	881b      	ldrh	r3, [r3, #0]
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d494:	b29a      	uxth	r2, r3
 800d496:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d498:	801a      	strh	r2, [r3, #0]
 800d49a:	e073      	b.n	800d584 <USB_EPStartXfer+0xcfa>
 800d49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d4a2:	d81c      	bhi.n	800d4de <USB_EPStartXfer+0xc54>
 800d4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4a8:	085b      	lsrs	r3, r3, #1
 800d4aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4b2:	f003 0301 	and.w	r3, r3, #1
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d004      	beq.n	800d4c4 <USB_EPStartXfer+0xc3a>
 800d4ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d4be:	3301      	adds	r3, #1
 800d4c0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d4c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4c6:	881b      	ldrh	r3, [r3, #0]
 800d4c8:	b29a      	uxth	r2, r3
 800d4ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	029b      	lsls	r3, r3, #10
 800d4d2:	b29b      	uxth	r3, r3
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	b29a      	uxth	r2, r3
 800d4d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4da:	801a      	strh	r2, [r3, #0]
 800d4dc:	e052      	b.n	800d584 <USB_EPStartXfer+0xcfa>
 800d4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4e2:	095b      	lsrs	r3, r3, #5
 800d4e4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d4e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4ec:	f003 031f 	and.w	r3, r3, #31
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d104      	bne.n	800d4fe <USB_EPStartXfer+0xc74>
 800d4f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d4f8:	3b01      	subs	r3, #1
 800d4fa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d4fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d500:	881b      	ldrh	r3, [r3, #0]
 800d502:	b29a      	uxth	r2, r3
 800d504:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d508:	b29b      	uxth	r3, r3
 800d50a:	029b      	lsls	r3, r3, #10
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	4313      	orrs	r3, r2
 800d510:	b29b      	uxth	r3, r3
 800d512:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d516:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d51a:	b29a      	uxth	r2, r3
 800d51c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d51e:	801a      	strh	r2, [r3, #0]
 800d520:	e030      	b.n	800d584 <USB_EPStartXfer+0xcfa>
 800d522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	785b      	ldrb	r3, [r3, #1]
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d128      	bne.n	800d584 <USB_EPStartXfer+0xcfa>
 800d532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d536:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d540:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d544:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d54e:	b29b      	uxth	r3, r3
 800d550:	461a      	mov	r2, r3
 800d552:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d556:	4413      	add	r3, r2
 800d558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d55c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d560:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	00da      	lsls	r2, r3, #3
 800d56a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d56e:	4413      	add	r3, r2
 800d570:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d574:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d57c:	b29a      	uxth	r2, r3
 800d57e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d582:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	891b      	ldrh	r3, [r3, #8]
 800d590:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	6959      	ldr	r1, [r3, #20]
 800d5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d5aa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d5ae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d5b2:	6800      	ldr	r0, [r0, #0]
 800d5b4:	f000 fe55 	bl	800e262 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d5b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5c0:	681a      	ldr	r2, [r3, #0]
 800d5c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	4413      	add	r3, r2
 800d5d2:	881b      	ldrh	r3, [r3, #0]
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d5da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5de:	817b      	strh	r3, [r7, #10]
 800d5e0:	897b      	ldrh	r3, [r7, #10]
 800d5e2:	f083 0310 	eor.w	r3, r3, #16
 800d5e6:	817b      	strh	r3, [r7, #10]
 800d5e8:	897b      	ldrh	r3, [r7, #10]
 800d5ea:	f083 0320 	eor.w	r3, r3, #32
 800d5ee:	817b      	strh	r3, [r7, #10]
 800d5f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	009b      	lsls	r3, r3, #2
 800d608:	441a      	add	r2, r3
 800d60a:	897b      	ldrh	r3, [r7, #10]
 800d60c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d610:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d614:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	8013      	strh	r3, [r2, #0]
 800d620:	f000 bcdf 	b.w	800dfe2 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	7b1b      	ldrb	r3, [r3, #12]
 800d630:	2b00      	cmp	r3, #0
 800d632:	f040 80bc 	bne.w	800d7ae <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d63a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	699a      	ldr	r2, [r3, #24]
 800d642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	691b      	ldr	r3, [r3, #16]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d917      	bls.n	800d682 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	691b      	ldr	r3, [r3, #16]
 800d65e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800d662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	699a      	ldr	r2, [r3, #24]
 800d66e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d672:	1ad2      	subs	r2, r2, r3
 800d674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	619a      	str	r2, [r3, #24]
 800d680:	e00e      	b.n	800d6a0 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	699b      	ldr	r3, [r3, #24]
 800d68e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800d692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	2200      	movs	r2, #0
 800d69e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d6ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6bc:	b29b      	uxth	r3, r3
 800d6be:	461a      	mov	r2, r3
 800d6c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d6c4:	4413      	add	r3, r2
 800d6c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	00da      	lsls	r2, r3, #3
 800d6d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d6dc:	4413      	add	r3, r2
 800d6de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d6e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d6e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6ea:	881b      	ldrh	r3, [r3, #0]
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d6f2:	b29a      	uxth	r2, r3
 800d6f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d6f8:	801a      	strh	r2, [r3, #0]
 800d6fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d10d      	bne.n	800d71e <USB_EPStartXfer+0xe94>
 800d702:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d706:	881b      	ldrh	r3, [r3, #0]
 800d708:	b29b      	uxth	r3, r3
 800d70a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d70e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d712:	b29a      	uxth	r2, r3
 800d714:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d718:	801a      	strh	r2, [r3, #0]
 800d71a:	f000 bc28 	b.w	800df6e <USB_EPStartXfer+0x16e4>
 800d71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d722:	2b3e      	cmp	r3, #62	@ 0x3e
 800d724:	d81f      	bhi.n	800d766 <USB_EPStartXfer+0xedc>
 800d726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d72a:	085b      	lsrs	r3, r3, #1
 800d72c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d734:	f003 0301 	and.w	r3, r3, #1
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d004      	beq.n	800d746 <USB_EPStartXfer+0xebc>
 800d73c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d740:	3301      	adds	r3, #1
 800d742:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d746:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d74a:	881b      	ldrh	r3, [r3, #0]
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d752:	b29b      	uxth	r3, r3
 800d754:	029b      	lsls	r3, r3, #10
 800d756:	b29b      	uxth	r3, r3
 800d758:	4313      	orrs	r3, r2
 800d75a:	b29a      	uxth	r2, r3
 800d75c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d760:	801a      	strh	r2, [r3, #0]
 800d762:	f000 bc04 	b.w	800df6e <USB_EPStartXfer+0x16e4>
 800d766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d76a:	095b      	lsrs	r3, r3, #5
 800d76c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d774:	f003 031f 	and.w	r3, r3, #31
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d104      	bne.n	800d786 <USB_EPStartXfer+0xefc>
 800d77c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d780:	3b01      	subs	r3, #1
 800d782:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d78a:	881b      	ldrh	r3, [r3, #0]
 800d78c:	b29a      	uxth	r2, r3
 800d78e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d792:	b29b      	uxth	r3, r3
 800d794:	029b      	lsls	r3, r3, #10
 800d796:	b29b      	uxth	r3, r3
 800d798:	4313      	orrs	r3, r2
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7a4:	b29a      	uxth	r2, r3
 800d7a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7aa:	801a      	strh	r2, [r3, #0]
 800d7ac:	e3df      	b.n	800df6e <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d7ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	78db      	ldrb	r3, [r3, #3]
 800d7ba:	2b02      	cmp	r3, #2
 800d7bc:	f040 8218 	bne.w	800dbf0 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d7c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	785b      	ldrb	r3, [r3, #1]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	f040 809d 	bne.w	800d90c <USB_EPStartXfer+0x1082>
 800d7d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d7e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d7ee:	b29b      	uxth	r3, r3
 800d7f0:	461a      	mov	r2, r3
 800d7f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d7f6:	4413      	add	r3, r2
 800d7f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d7fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	00da      	lsls	r2, r3, #3
 800d80a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d80e:	4413      	add	r3, r2
 800d810:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d814:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d818:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d81c:	881b      	ldrh	r3, [r3, #0]
 800d81e:	b29b      	uxth	r3, r3
 800d820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d824:	b29a      	uxth	r2, r3
 800d826:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d82a:	801a      	strh	r2, [r3, #0]
 800d82c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	691b      	ldr	r3, [r3, #16]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10c      	bne.n	800d856 <USB_EPStartXfer+0xfcc>
 800d83c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d840:	881b      	ldrh	r3, [r3, #0]
 800d842:	b29b      	uxth	r3, r3
 800d844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d84c:	b29a      	uxth	r2, r3
 800d84e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d852:	801a      	strh	r2, [r3, #0]
 800d854:	e08f      	b.n	800d976 <USB_EPStartXfer+0x10ec>
 800d856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d85a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	691b      	ldr	r3, [r3, #16]
 800d862:	2b3e      	cmp	r3, #62	@ 0x3e
 800d864:	d826      	bhi.n	800d8b4 <USB_EPStartXfer+0x102a>
 800d866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d86a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	691b      	ldr	r3, [r3, #16]
 800d872:	085b      	lsrs	r3, r3, #1
 800d874:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d87c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	691b      	ldr	r3, [r3, #16]
 800d884:	f003 0301 	and.w	r3, r3, #1
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d004      	beq.n	800d896 <USB_EPStartXfer+0x100c>
 800d88c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d890:	3301      	adds	r3, #1
 800d892:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d896:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d89a:	881b      	ldrh	r3, [r3, #0]
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	029b      	lsls	r3, r3, #10
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8b0:	801a      	strh	r2, [r3, #0]
 800d8b2:	e060      	b.n	800d976 <USB_EPStartXfer+0x10ec>
 800d8b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	691b      	ldr	r3, [r3, #16]
 800d8c0:	095b      	lsrs	r3, r3, #5
 800d8c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d8c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	691b      	ldr	r3, [r3, #16]
 800d8d2:	f003 031f 	and.w	r3, r3, #31
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d104      	bne.n	800d8e4 <USB_EPStartXfer+0x105a>
 800d8da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8de:	3b01      	subs	r3, #1
 800d8e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d8e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8e8:	881b      	ldrh	r3, [r3, #0]
 800d8ea:	b29a      	uxth	r2, r3
 800d8ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	029b      	lsls	r3, r3, #10
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	b29b      	uxth	r3, r3
 800d8fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d902:	b29a      	uxth	r2, r3
 800d904:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d908:	801a      	strh	r2, [r3, #0]
 800d90a:	e034      	b.n	800d976 <USB_EPStartXfer+0x10ec>
 800d90c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	785b      	ldrb	r3, [r3, #1]
 800d918:	2b01      	cmp	r3, #1
 800d91a:	d12c      	bne.n	800d976 <USB_EPStartXfer+0x10ec>
 800d91c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d920:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d92a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d92e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d938:	b29b      	uxth	r3, r3
 800d93a:	461a      	mov	r2, r3
 800d93c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d940:	4413      	add	r3, r2
 800d942:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d94a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	00da      	lsls	r2, r3, #3
 800d954:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d958:	4413      	add	r3, r2
 800d95a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d95e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	691b      	ldr	r3, [r3, #16]
 800d96e:	b29a      	uxth	r2, r3
 800d970:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d974:	801a      	strh	r2, [r3, #0]
 800d976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d97a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d984:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d988:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	785b      	ldrb	r3, [r3, #1]
 800d990:	2b00      	cmp	r3, #0
 800d992:	f040 809d 	bne.w	800dad0 <USB_EPStartXfer+0x1246>
 800d996:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d99a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d9a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d9ba:	4413      	add	r3, r2
 800d9bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d9c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	781b      	ldrb	r3, [r3, #0]
 800d9cc:	00da      	lsls	r2, r3, #3
 800d9ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d9d2:	4413      	add	r3, r2
 800d9d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d9d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d9dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d9e0:	881b      	ldrh	r3, [r3, #0]
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d9ee:	801a      	strh	r2, [r3, #0]
 800d9f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	691b      	ldr	r3, [r3, #16]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d10c      	bne.n	800da1a <USB_EPStartXfer+0x1190>
 800da00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da04:	881b      	ldrh	r3, [r3, #0]
 800da06:	b29b      	uxth	r3, r3
 800da08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da10:	b29a      	uxth	r2, r3
 800da12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da16:	801a      	strh	r2, [r3, #0]
 800da18:	e088      	b.n	800db2c <USB_EPStartXfer+0x12a2>
 800da1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	2b3e      	cmp	r3, #62	@ 0x3e
 800da28:	d826      	bhi.n	800da78 <USB_EPStartXfer+0x11ee>
 800da2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	691b      	ldr	r3, [r3, #16]
 800da36:	085b      	lsrs	r3, r3, #1
 800da38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800da3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	691b      	ldr	r3, [r3, #16]
 800da48:	f003 0301 	and.w	r3, r3, #1
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d004      	beq.n	800da5a <USB_EPStartXfer+0x11d0>
 800da50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da54:	3301      	adds	r3, #1
 800da56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800da5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da5e:	881b      	ldrh	r3, [r3, #0]
 800da60:	b29a      	uxth	r2, r3
 800da62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800da66:	b29b      	uxth	r3, r3
 800da68:	029b      	lsls	r3, r3, #10
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	4313      	orrs	r3, r2
 800da6e:	b29a      	uxth	r2, r3
 800da70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da74:	801a      	strh	r2, [r3, #0]
 800da76:	e059      	b.n	800db2c <USB_EPStartXfer+0x12a2>
 800da78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	691b      	ldr	r3, [r3, #16]
 800da84:	095b      	lsrs	r3, r3, #5
 800da86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800da8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	691b      	ldr	r3, [r3, #16]
 800da96:	f003 031f 	and.w	r3, r3, #31
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d104      	bne.n	800daa8 <USB_EPStartXfer+0x121e>
 800da9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800daa2:	3b01      	subs	r3, #1
 800daa4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800daa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800daac:	881b      	ldrh	r3, [r3, #0]
 800daae:	b29a      	uxth	r2, r3
 800dab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dab4:	b29b      	uxth	r3, r3
 800dab6:	029b      	lsls	r3, r3, #10
 800dab8:	b29b      	uxth	r3, r3
 800daba:	4313      	orrs	r3, r2
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dac6:	b29a      	uxth	r2, r3
 800dac8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dacc:	801a      	strh	r2, [r3, #0]
 800dace:	e02d      	b.n	800db2c <USB_EPStartXfer+0x12a2>
 800dad0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dad4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	785b      	ldrb	r3, [r3, #1]
 800dadc:	2b01      	cmp	r3, #1
 800dade:	d125      	bne.n	800db2c <USB_EPStartXfer+0x12a2>
 800dae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dae4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800daee:	b29b      	uxth	r3, r3
 800daf0:	461a      	mov	r2, r3
 800daf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800daf6:	4413      	add	r3, r2
 800daf8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dafc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	00da      	lsls	r2, r3, #3
 800db0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800db0e:	4413      	add	r3, r2
 800db10:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800db14:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800db18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	691b      	ldr	r3, [r3, #16]
 800db24:	b29a      	uxth	r2, r3
 800db26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800db2a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800db2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	69db      	ldr	r3, [r3, #28]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	f000 8218 	beq.w	800df6e <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800db3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db46:	681a      	ldr	r2, [r3, #0]
 800db48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	4413      	add	r3, r2
 800db58:	881b      	ldrh	r3, [r3, #0]
 800db5a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800db5e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800db62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800db66:	2b00      	cmp	r3, #0
 800db68:	d005      	beq.n	800db76 <USB_EPStartXfer+0x12ec>
 800db6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800db6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db72:	2b00      	cmp	r3, #0
 800db74:	d10d      	bne.n	800db92 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800db76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800db7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f040 81f5 	bne.w	800df6e <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800db84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800db88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	f040 81ee 	bne.w	800df6e <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800db92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db9a:	681a      	ldr	r2, [r3, #0]
 800db9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	009b      	lsls	r3, r3, #2
 800dbaa:	4413      	add	r3, r2
 800dbac:	881b      	ldrh	r3, [r3, #0]
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dbb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dbb8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800dbbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	441a      	add	r2, r3
 800dbd6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800dbda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dbde:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dbe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbe6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	8013      	strh	r3, [r2, #0]
 800dbee:	e1be      	b.n	800df6e <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800dbf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	78db      	ldrb	r3, [r3, #3]
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	f040 81b4 	bne.w	800df6a <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800dc02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	699a      	ldr	r2, [r3, #24]
 800dc0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	691b      	ldr	r3, [r3, #16]
 800dc1a:	429a      	cmp	r2, r3
 800dc1c:	d917      	bls.n	800dc4e <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800dc1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	691b      	ldr	r3, [r3, #16]
 800dc2a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800dc2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	699a      	ldr	r2, [r3, #24]
 800dc3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc3e:	1ad2      	subs	r2, r2, r3
 800dc40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	619a      	str	r2, [r3, #24]
 800dc4c:	e00e      	b.n	800dc6c <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800dc4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	699b      	ldr	r3, [r3, #24]
 800dc5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800dc5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800dc6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	785b      	ldrb	r3, [r3, #1]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	f040 8085 	bne.w	800dd88 <USB_EPStartXfer+0x14fe>
 800dc7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dc8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc9a:	b29b      	uxth	r3, r3
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dca2:	4413      	add	r3, r2
 800dca4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	00da      	lsls	r2, r3, #3
 800dcb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dcba:	4413      	add	r3, r2
 800dcbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dcc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dcc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dcc8:	881b      	ldrh	r3, [r3, #0]
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dcd0:	b29a      	uxth	r2, r3
 800dcd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dcd6:	801a      	strh	r2, [r3, #0]
 800dcd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d10c      	bne.n	800dcfa <USB_EPStartXfer+0x1470>
 800dce0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dce4:	881b      	ldrh	r3, [r3, #0]
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dcec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dcf6:	801a      	strh	r2, [r3, #0]
 800dcf8:	e077      	b.n	800ddea <USB_EPStartXfer+0x1560>
 800dcfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcfe:	2b3e      	cmp	r3, #62	@ 0x3e
 800dd00:	d81e      	bhi.n	800dd40 <USB_EPStartXfer+0x14b6>
 800dd02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd06:	085b      	lsrs	r3, r3, #1
 800dd08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dd0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd10:	f003 0301 	and.w	r3, r3, #1
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d004      	beq.n	800dd22 <USB_EPStartXfer+0x1498>
 800dd18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dd22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd26:	881b      	ldrh	r3, [r3, #0]
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	029b      	lsls	r3, r3, #10
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	4313      	orrs	r3, r2
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd3c:	801a      	strh	r2, [r3, #0]
 800dd3e:	e054      	b.n	800ddea <USB_EPStartXfer+0x1560>
 800dd40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd44:	095b      	lsrs	r3, r3, #5
 800dd46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dd4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd4e:	f003 031f 	and.w	r3, r3, #31
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d104      	bne.n	800dd60 <USB_EPStartXfer+0x14d6>
 800dd56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dd60:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd64:	881b      	ldrh	r3, [r3, #0]
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	029b      	lsls	r3, r3, #10
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	4313      	orrs	r3, r2
 800dd74:	b29b      	uxth	r3, r3
 800dd76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd7e:	b29a      	uxth	r2, r3
 800dd80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd84:	801a      	strh	r2, [r3, #0]
 800dd86:	e030      	b.n	800ddea <USB_EPStartXfer+0x1560>
 800dd88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	785b      	ldrb	r3, [r3, #1]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d128      	bne.n	800ddea <USB_EPStartXfer+0x1560>
 800dd98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800dda6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddaa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ddbc:	4413      	add	r3, r2
 800ddbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ddc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	00da      	lsls	r2, r3, #3
 800ddd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ddd4:	4413      	add	r3, r2
 800ddd6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ddda:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ddde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dde2:	b29a      	uxth	r2, r3
 800dde4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800dde8:	801a      	strh	r2, [r3, #0]
 800ddea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ddf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	785b      	ldrb	r3, [r3, #1]
 800de04:	2b00      	cmp	r3, #0
 800de06:	f040 8085 	bne.w	800df14 <USB_EPStartXfer+0x168a>
 800de0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800de18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de26:	b29b      	uxth	r3, r3
 800de28:	461a      	mov	r2, r3
 800de2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800de2e:	4413      	add	r3, r2
 800de30:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800de34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	781b      	ldrb	r3, [r3, #0]
 800de40:	00da      	lsls	r2, r3, #3
 800de42:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800de46:	4413      	add	r3, r2
 800de48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800de4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800de50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800de54:	881b      	ldrh	r3, [r3, #0]
 800de56:	b29b      	uxth	r3, r3
 800de58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800de62:	801a      	strh	r2, [r3, #0]
 800de64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d10c      	bne.n	800de86 <USB_EPStartXfer+0x15fc>
 800de6c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800de70:	881b      	ldrh	r3, [r3, #0]
 800de72:	b29b      	uxth	r3, r3
 800de74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de7c:	b29a      	uxth	r2, r3
 800de7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800de82:	801a      	strh	r2, [r3, #0]
 800de84:	e073      	b.n	800df6e <USB_EPStartXfer+0x16e4>
 800de86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de8a:	2b3e      	cmp	r3, #62	@ 0x3e
 800de8c:	d81e      	bhi.n	800decc <USB_EPStartXfer+0x1642>
 800de8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de92:	085b      	lsrs	r3, r3, #1
 800de94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800de98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de9c:	f003 0301 	and.w	r3, r3, #1
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d004      	beq.n	800deae <USB_EPStartXfer+0x1624>
 800dea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dea8:	3301      	adds	r3, #1
 800deaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800deae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800deb2:	881b      	ldrh	r3, [r3, #0]
 800deb4:	b29a      	uxth	r2, r3
 800deb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800deba:	b29b      	uxth	r3, r3
 800debc:	029b      	lsls	r3, r3, #10
 800debe:	b29b      	uxth	r3, r3
 800dec0:	4313      	orrs	r3, r2
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dec8:	801a      	strh	r2, [r3, #0]
 800deca:	e050      	b.n	800df6e <USB_EPStartXfer+0x16e4>
 800decc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ded0:	095b      	lsrs	r3, r3, #5
 800ded2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ded6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deda:	f003 031f 	and.w	r3, r3, #31
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d104      	bne.n	800deec <USB_EPStartXfer+0x1662>
 800dee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dee6:	3b01      	subs	r3, #1
 800dee8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800deec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	b29a      	uxth	r2, r3
 800def4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800def8:	b29b      	uxth	r3, r3
 800defa:	029b      	lsls	r3, r3, #10
 800defc:	b29b      	uxth	r3, r3
 800defe:	4313      	orrs	r3, r2
 800df00:	b29b      	uxth	r3, r3
 800df02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df0a:	b29a      	uxth	r2, r3
 800df0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df10:	801a      	strh	r2, [r3, #0]
 800df12:	e02c      	b.n	800df6e <USB_EPStartXfer+0x16e4>
 800df14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	785b      	ldrb	r3, [r3, #1]
 800df20:	2b01      	cmp	r3, #1
 800df22:	d124      	bne.n	800df6e <USB_EPStartXfer+0x16e4>
 800df24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df32:	b29b      	uxth	r3, r3
 800df34:	461a      	mov	r2, r3
 800df36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800df3a:	4413      	add	r3, r2
 800df3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800df40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	00da      	lsls	r2, r3, #3
 800df4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800df52:	4413      	add	r3, r2
 800df54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800df58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800df5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df60:	b29a      	uxth	r2, r3
 800df62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800df66:	801a      	strh	r2, [r3, #0]
 800df68:	e001      	b.n	800df6e <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800df6a:	2301      	movs	r3, #1
 800df6c:	e03a      	b.n	800dfe4 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800df6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df76:	681a      	ldr	r2, [r3, #0]
 800df78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	781b      	ldrb	r3, [r3, #0]
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	4413      	add	r3, r2
 800df88:	881b      	ldrh	r3, [r3, #0]
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800df90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df94:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800df98:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800df9c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800dfa0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800dfa4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dfa8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800dfac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800dfb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfb8:	681a      	ldr	r2, [r3, #0]
 800dfba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	441a      	add	r2, r3
 800dfca:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800dfce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dfd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dfd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dfda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800dfe2:	2300      	movs	r3, #0
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dfee:	b480      	push	{r7}
 800dff0:	b085      	sub	sp, #20
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
 800dff6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	785b      	ldrb	r3, [r3, #1]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d020      	beq.n	800e042 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	009b      	lsls	r3, r3, #2
 800e008:	4413      	add	r3, r2
 800e00a:	881b      	ldrh	r3, [r3, #0]
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e012:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e016:	81bb      	strh	r3, [r7, #12]
 800e018:	89bb      	ldrh	r3, [r7, #12]
 800e01a:	f083 0310 	eor.w	r3, r3, #16
 800e01e:	81bb      	strh	r3, [r7, #12]
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	781b      	ldrb	r3, [r3, #0]
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	441a      	add	r2, r3
 800e02a:	89bb      	ldrh	r3, [r7, #12]
 800e02c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e030:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e034:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	8013      	strh	r3, [r2, #0]
 800e040:	e01f      	b.n	800e082 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	4413      	add	r3, r2
 800e04c:	881b      	ldrh	r3, [r3, #0]
 800e04e:	b29b      	uxth	r3, r3
 800e050:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e054:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e058:	81fb      	strh	r3, [r7, #14]
 800e05a:	89fb      	ldrh	r3, [r7, #14]
 800e05c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e060:	81fb      	strh	r3, [r7, #14]
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	683b      	ldr	r3, [r7, #0]
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	009b      	lsls	r3, r3, #2
 800e06a:	441a      	add	r2, r3
 800e06c:	89fb      	ldrh	r3, [r7, #14]
 800e06e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e072:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e076:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e07a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e07e:	b29b      	uxth	r3, r3
 800e080:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e082:	2300      	movs	r3, #0
}
 800e084:	4618      	mov	r0, r3
 800e086:	3714      	adds	r7, #20
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e090:	b480      	push	{r7}
 800e092:	b087      	sub	sp, #28
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	7b1b      	ldrb	r3, [r3, #12]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	f040 809d 	bne.w	800e1de <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	785b      	ldrb	r3, [r3, #1]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d04c      	beq.n	800e146 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	4413      	add	r3, r2
 800e0b6:	881b      	ldrh	r3, [r3, #0]
 800e0b8:	823b      	strh	r3, [r7, #16]
 800e0ba:	8a3b      	ldrh	r3, [r7, #16]
 800e0bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d01b      	beq.n	800e0fc <USB_EPClearStall+0x6c>
 800e0c4:	687a      	ldr	r2, [r7, #4]
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	4413      	add	r3, r2
 800e0ce:	881b      	ldrh	r3, [r3, #0]
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e0d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e0da:	81fb      	strh	r3, [r7, #14]
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	441a      	add	r2, r3
 800e0e6:	89fb      	ldrh	r3, [r7, #14]
 800e0e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e0f8:	b29b      	uxth	r3, r3
 800e0fa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	78db      	ldrb	r3, [r3, #3]
 800e100:	2b01      	cmp	r3, #1
 800e102:	d06c      	beq.n	800e1de <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	781b      	ldrb	r3, [r3, #0]
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4413      	add	r3, r2
 800e10e:	881b      	ldrh	r3, [r3, #0]
 800e110:	b29b      	uxth	r3, r3
 800e112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e116:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e11a:	81bb      	strh	r3, [r7, #12]
 800e11c:	89bb      	ldrh	r3, [r7, #12]
 800e11e:	f083 0320 	eor.w	r3, r3, #32
 800e122:	81bb      	strh	r3, [r7, #12]
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	441a      	add	r2, r3
 800e12e:	89bb      	ldrh	r3, [r7, #12]
 800e130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e13c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e140:	b29b      	uxth	r3, r3
 800e142:	8013      	strh	r3, [r2, #0]
 800e144:	e04b      	b.n	800e1de <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	781b      	ldrb	r3, [r3, #0]
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	4413      	add	r3, r2
 800e150:	881b      	ldrh	r3, [r3, #0]
 800e152:	82fb      	strh	r3, [r7, #22]
 800e154:	8afb      	ldrh	r3, [r7, #22]
 800e156:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d01b      	beq.n	800e196 <USB_EPClearStall+0x106>
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	4413      	add	r3, r2
 800e168:	881b      	ldrh	r3, [r3, #0]
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e170:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e174:	82bb      	strh	r3, [r7, #20]
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	441a      	add	r2, r3
 800e180:	8abb      	ldrh	r3, [r7, #20]
 800e182:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e186:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e18a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e18e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e192:	b29b      	uxth	r3, r3
 800e194:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e196:	687a      	ldr	r2, [r7, #4]
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	009b      	lsls	r3, r3, #2
 800e19e:	4413      	add	r3, r2
 800e1a0:	881b      	ldrh	r3, [r3, #0]
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e1a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1ac:	827b      	strh	r3, [r7, #18]
 800e1ae:	8a7b      	ldrh	r3, [r7, #18]
 800e1b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e1b4:	827b      	strh	r3, [r7, #18]
 800e1b6:	8a7b      	ldrh	r3, [r7, #18]
 800e1b8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e1bc:	827b      	strh	r3, [r7, #18]
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	441a      	add	r2, r3
 800e1c8:	8a7b      	ldrh	r3, [r7, #18]
 800e1ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1da:	b29b      	uxth	r3, r3
 800e1dc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e1de:	2300      	movs	r3, #0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	371c      	adds	r7, #28
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e1f8:	78fb      	ldrb	r3, [r7, #3]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d103      	bne.n	800e206 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2280      	movs	r2, #128	@ 0x80
 800e202:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e206:	2300      	movs	r3, #0
}
 800e208:	4618      	mov	r0, r3
 800e20a:	370c      	adds	r7, #12
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr

0800e214 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e214:	b480      	push	{r7}
 800e216:	b083      	sub	sp, #12
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e222:	b29b      	uxth	r3, r3
 800e224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e234:	2300      	movs	r3, #0
}
 800e236:	4618      	mov	r0, r3
 800e238:	370c      	adds	r7, #12
 800e23a:	46bd      	mov	sp, r7
 800e23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e240:	4770      	bx	lr

0800e242 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e242:	b480      	push	{r7}
 800e244:	b085      	sub	sp, #20
 800e246:	af00      	add	r7, sp, #0
 800e248:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e250:	b29b      	uxth	r3, r3
 800e252:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e254:	68fb      	ldr	r3, [r7, #12]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3714      	adds	r7, #20
 800e25a:	46bd      	mov	sp, r7
 800e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e260:	4770      	bx	lr

0800e262 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e262:	b480      	push	{r7}
 800e264:	b08b      	sub	sp, #44	@ 0x2c
 800e266:	af00      	add	r7, sp, #0
 800e268:	60f8      	str	r0, [r7, #12]
 800e26a:	60b9      	str	r1, [r7, #8]
 800e26c:	4611      	mov	r1, r2
 800e26e:	461a      	mov	r2, r3
 800e270:	460b      	mov	r3, r1
 800e272:	80fb      	strh	r3, [r7, #6]
 800e274:	4613      	mov	r3, r2
 800e276:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e278:	88bb      	ldrh	r3, [r7, #4]
 800e27a:	3301      	adds	r3, #1
 800e27c:	085b      	lsrs	r3, r3, #1
 800e27e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e288:	88fa      	ldrh	r2, [r7, #6]
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	4413      	add	r3, r2
 800e28e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e292:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e294:	69bb      	ldr	r3, [r7, #24]
 800e296:	627b      	str	r3, [r7, #36]	@ 0x24
 800e298:	e01b      	b.n	800e2d2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e2a0:	69fb      	ldr	r3, [r7, #28]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	021b      	lsls	r3, r3, #8
 800e2a8:	b21a      	sxth	r2, r3
 800e2aa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	b21b      	sxth	r3, r3
 800e2b2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e2b4:	6a3b      	ldr	r3, [r7, #32]
 800e2b6:	8a7a      	ldrh	r2, [r7, #18]
 800e2b8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e2ba:	6a3b      	ldr	r3, [r7, #32]
 800e2bc:	3302      	adds	r3, #2
 800e2be:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e2c0:	69fb      	ldr	r3, [r7, #28]
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e2c6:	69fb      	ldr	r3, [r7, #28]
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e2cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2ce:	3b01      	subs	r3, #1
 800e2d0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d1e0      	bne.n	800e29a <USB_WritePMA+0x38>
  }
}
 800e2d8:	bf00      	nop
 800e2da:	bf00      	nop
 800e2dc:	372c      	adds	r7, #44	@ 0x2c
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e4:	4770      	bx	lr

0800e2e6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e2e6:	b480      	push	{r7}
 800e2e8:	b08b      	sub	sp, #44	@ 0x2c
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	60f8      	str	r0, [r7, #12]
 800e2ee:	60b9      	str	r1, [r7, #8]
 800e2f0:	4611      	mov	r1, r2
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	80fb      	strh	r3, [r7, #6]
 800e2f8:	4613      	mov	r3, r2
 800e2fa:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e2fc:	88bb      	ldrh	r3, [r7, #4]
 800e2fe:	085b      	lsrs	r3, r3, #1
 800e300:	b29b      	uxth	r3, r3
 800e302:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e30c:	88fa      	ldrh	r2, [r7, #6]
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	4413      	add	r3, r2
 800e312:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e316:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e318:	69bb      	ldr	r3, [r7, #24]
 800e31a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e31c:	e018      	b.n	800e350 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e31e:	6a3b      	ldr	r3, [r7, #32]
 800e320:	881b      	ldrh	r3, [r3, #0]
 800e322:	b29b      	uxth	r3, r3
 800e324:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e326:	6a3b      	ldr	r3, [r7, #32]
 800e328:	3302      	adds	r3, #2
 800e32a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e32c:	693b      	ldr	r3, [r7, #16]
 800e32e:	b2da      	uxtb	r2, r3
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	3301      	adds	r3, #1
 800e338:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	0a1b      	lsrs	r3, r3, #8
 800e33e:	b2da      	uxtb	r2, r3
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e344:	69fb      	ldr	r3, [r7, #28]
 800e346:	3301      	adds	r3, #1
 800e348:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e34c:	3b01      	subs	r3, #1
 800e34e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e352:	2b00      	cmp	r3, #0
 800e354:	d1e3      	bne.n	800e31e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e356:	88bb      	ldrh	r3, [r7, #4]
 800e358:	f003 0301 	and.w	r3, r3, #1
 800e35c:	b29b      	uxth	r3, r3
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d007      	beq.n	800e372 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e362:	6a3b      	ldr	r3, [r7, #32]
 800e364:	881b      	ldrh	r3, [r3, #0]
 800e366:	b29b      	uxth	r3, r3
 800e368:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	b2da      	uxtb	r2, r3
 800e36e:	69fb      	ldr	r3, [r7, #28]
 800e370:	701a      	strb	r2, [r3, #0]
  }
}
 800e372:	bf00      	nop
 800e374:	372c      	adds	r7, #44	@ 0x2c
 800e376:	46bd      	mov	sp, r7
 800e378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37c:	4770      	bx	lr

0800e37e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e37e:	b580      	push	{r7, lr}
 800e380:	b084      	sub	sp, #16
 800e382:	af00      	add	r7, sp, #0
 800e384:	6078      	str	r0, [r7, #4]
 800e386:	460b      	mov	r3, r1
 800e388:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e38a:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e38e:	f002 f90f 	bl	80105b0 <USBD_static_malloc>
 800e392:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d105      	bne.n	800e3a6 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	2200      	movs	r2, #0
 800e39e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800e3a2:	2302      	movs	r3, #2
 800e3a4:	e066      	b.n	800e474 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	68fa      	ldr	r2, [r7, #12]
 800e3aa:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	7c1b      	ldrb	r3, [r3, #16]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d119      	bne.n	800e3ea <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e3b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3ba:	2202      	movs	r2, #2
 800e3bc:	2181      	movs	r1, #129	@ 0x81
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f001 ff9d 	bl	80102fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e3ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e3ce:	2202      	movs	r2, #2
 800e3d0:	2101      	movs	r1, #1
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f001 ff93 	bl	80102fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2210      	movs	r2, #16
 800e3e4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800e3e8:	e016      	b.n	800e418 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e3ea:	2340      	movs	r3, #64	@ 0x40
 800e3ec:	2202      	movs	r2, #2
 800e3ee:	2181      	movs	r1, #129	@ 0x81
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f001 ff84 	bl	80102fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e3fc:	2340      	movs	r3, #64	@ 0x40
 800e3fe:	2202      	movs	r2, #2
 800e400:	2101      	movs	r1, #1
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f001 ff7b 	bl	80102fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2201      	movs	r2, #1
 800e40c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2210      	movs	r2, #16
 800e414:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e418:	2308      	movs	r3, #8
 800e41a:	2203      	movs	r2, #3
 800e41c:	2182      	movs	r1, #130	@ 0x82
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f001 ff6d 	bl	80102fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2201      	movs	r2, #1
 800e428:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2200      	movs	r2, #0
 800e43a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2200      	movs	r2, #0
 800e442:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	7c1b      	ldrb	r3, [r3, #16]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d109      	bne.n	800e462 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e454:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e458:	2101      	movs	r1, #1
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f002 f83e 	bl	80104dc <USBD_LL_PrepareReceive>
 800e460:	e007      	b.n	800e472 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e468:	2340      	movs	r3, #64	@ 0x40
 800e46a:	2101      	movs	r1, #1
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f002 f835 	bl	80104dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e472:	2300      	movs	r3, #0
}
 800e474:	4618      	mov	r0, r3
 800e476:	3710      	adds	r7, #16
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	460b      	mov	r3, r1
 800e486:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e488:	2181      	movs	r1, #129	@ 0x81
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f001 ff5d 	bl	801034a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2200      	movs	r2, #0
 800e494:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e496:	2101      	movs	r1, #1
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f001 ff56 	bl	801034a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e4a6:	2182      	movs	r1, #130	@ 0x82
 800e4a8:	6878      	ldr	r0, [r7, #4]
 800e4aa:	f001 ff4e 	bl	801034a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d00e      	beq.n	800e4e6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e4ce:	685b      	ldr	r3, [r3, #4]
 800e4d0:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f002 f877 	bl	80105cc <USBD_static_free>
    pdev->pClassData = NULL;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e4e6:	2300      	movs	r3, #0
}
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b086      	sub	sp, #24
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e500:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e502:	2300      	movs	r3, #0
 800e504:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e506:	2300      	movs	r3, #0
 800e508:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e50a:	2300      	movs	r3, #0
 800e50c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e50e:	693b      	ldr	r3, [r7, #16]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d101      	bne.n	800e518 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e514:	2303      	movs	r3, #3
 800e516:	e0af      	b.n	800e678 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e520:	2b00      	cmp	r3, #0
 800e522:	d03f      	beq.n	800e5a4 <USBD_CDC_Setup+0xb4>
 800e524:	2b20      	cmp	r3, #32
 800e526:	f040 809f 	bne.w	800e668 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	88db      	ldrh	r3, [r3, #6]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d02e      	beq.n	800e590 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	b25b      	sxtb	r3, r3
 800e538:	2b00      	cmp	r3, #0
 800e53a:	da16      	bge.n	800e56a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e542:	689b      	ldr	r3, [r3, #8]
 800e544:	683a      	ldr	r2, [r7, #0]
 800e546:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e548:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e54a:	683a      	ldr	r2, [r7, #0]
 800e54c:	88d2      	ldrh	r2, [r2, #6]
 800e54e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	88db      	ldrh	r3, [r3, #6]
 800e554:	2b07      	cmp	r3, #7
 800e556:	bf28      	it	cs
 800e558:	2307      	movcs	r3, #7
 800e55a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	89fa      	ldrh	r2, [r7, #14]
 800e560:	4619      	mov	r1, r3
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f001 facd 	bl	800fb02 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e568:	e085      	b.n	800e676 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	785a      	ldrb	r2, [r3, #1]
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	88db      	ldrh	r3, [r3, #6]
 800e578:	b2da      	uxtb	r2, r3
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e580:	6939      	ldr	r1, [r7, #16]
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	88db      	ldrh	r3, [r3, #6]
 800e586:	461a      	mov	r2, r3
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f001 fae6 	bl	800fb5a <USBD_CtlPrepareRx>
      break;
 800e58e:	e072      	b.n	800e676 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e596:	689b      	ldr	r3, [r3, #8]
 800e598:	683a      	ldr	r2, [r7, #0]
 800e59a:	7850      	ldrb	r0, [r2, #1]
 800e59c:	2200      	movs	r2, #0
 800e59e:	6839      	ldr	r1, [r7, #0]
 800e5a0:	4798      	blx	r3
      break;
 800e5a2:	e068      	b.n	800e676 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	785b      	ldrb	r3, [r3, #1]
 800e5a8:	2b0b      	cmp	r3, #11
 800e5aa:	d852      	bhi.n	800e652 <USBD_CDC_Setup+0x162>
 800e5ac:	a201      	add	r2, pc, #4	@ (adr r2, 800e5b4 <USBD_CDC_Setup+0xc4>)
 800e5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5b2:	bf00      	nop
 800e5b4:	0800e5e5 	.word	0x0800e5e5
 800e5b8:	0800e661 	.word	0x0800e661
 800e5bc:	0800e653 	.word	0x0800e653
 800e5c0:	0800e653 	.word	0x0800e653
 800e5c4:	0800e653 	.word	0x0800e653
 800e5c8:	0800e653 	.word	0x0800e653
 800e5cc:	0800e653 	.word	0x0800e653
 800e5d0:	0800e653 	.word	0x0800e653
 800e5d4:	0800e653 	.word	0x0800e653
 800e5d8:	0800e653 	.word	0x0800e653
 800e5dc:	0800e60f 	.word	0x0800e60f
 800e5e0:	0800e639 	.word	0x0800e639
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	2b03      	cmp	r3, #3
 800e5ee:	d107      	bne.n	800e600 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e5f0:	f107 030a 	add.w	r3, r7, #10
 800e5f4:	2202      	movs	r2, #2
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	6878      	ldr	r0, [r7, #4]
 800e5fa:	f001 fa82 	bl	800fb02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e5fe:	e032      	b.n	800e666 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e600:	6839      	ldr	r1, [r7, #0]
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f001 fa0c 	bl	800fa20 <USBD_CtlError>
            ret = USBD_FAIL;
 800e608:	2303      	movs	r3, #3
 800e60a:	75fb      	strb	r3, [r7, #23]
          break;
 800e60c:	e02b      	b.n	800e666 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e614:	b2db      	uxtb	r3, r3
 800e616:	2b03      	cmp	r3, #3
 800e618:	d107      	bne.n	800e62a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e61a:	f107 030d 	add.w	r3, r7, #13
 800e61e:	2201      	movs	r2, #1
 800e620:	4619      	mov	r1, r3
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f001 fa6d 	bl	800fb02 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e628:	e01d      	b.n	800e666 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e62a:	6839      	ldr	r1, [r7, #0]
 800e62c:	6878      	ldr	r0, [r7, #4]
 800e62e:	f001 f9f7 	bl	800fa20 <USBD_CtlError>
            ret = USBD_FAIL;
 800e632:	2303      	movs	r3, #3
 800e634:	75fb      	strb	r3, [r7, #23]
          break;
 800e636:	e016      	b.n	800e666 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	2b03      	cmp	r3, #3
 800e642:	d00f      	beq.n	800e664 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e644:	6839      	ldr	r1, [r7, #0]
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f001 f9ea 	bl	800fa20 <USBD_CtlError>
            ret = USBD_FAIL;
 800e64c:	2303      	movs	r3, #3
 800e64e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e650:	e008      	b.n	800e664 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e652:	6839      	ldr	r1, [r7, #0]
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f001 f9e3 	bl	800fa20 <USBD_CtlError>
          ret = USBD_FAIL;
 800e65a:	2303      	movs	r3, #3
 800e65c:	75fb      	strb	r3, [r7, #23]
          break;
 800e65e:	e002      	b.n	800e666 <USBD_CDC_Setup+0x176>
          break;
 800e660:	bf00      	nop
 800e662:	e008      	b.n	800e676 <USBD_CDC_Setup+0x186>
          break;
 800e664:	bf00      	nop
      }
      break;
 800e666:	e006      	b.n	800e676 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e668:	6839      	ldr	r1, [r7, #0]
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	f001 f9d8 	bl	800fa20 <USBD_CtlError>
      ret = USBD_FAIL;
 800e670:	2303      	movs	r3, #3
 800e672:	75fb      	strb	r3, [r7, #23]
      break;
 800e674:	bf00      	nop
  }

  return (uint8_t)ret;
 800e676:	7dfb      	ldrb	r3, [r7, #23]
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3718      	adds	r7, #24
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b084      	sub	sp, #16
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
 800e688:	460b      	mov	r3, r1
 800e68a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e692:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d101      	bne.n	800e6a2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e69e:	2303      	movs	r3, #3
 800e6a0:	e04f      	b.n	800e742 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e6a8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e6aa:	78fa      	ldrb	r2, [r7, #3]
 800e6ac:	6879      	ldr	r1, [r7, #4]
 800e6ae:	4613      	mov	r3, r2
 800e6b0:	009b      	lsls	r3, r3, #2
 800e6b2:	4413      	add	r3, r2
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	440b      	add	r3, r1
 800e6b8:	3318      	adds	r3, #24
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d029      	beq.n	800e714 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e6c0:	78fa      	ldrb	r2, [r7, #3]
 800e6c2:	6879      	ldr	r1, [r7, #4]
 800e6c4:	4613      	mov	r3, r2
 800e6c6:	009b      	lsls	r3, r3, #2
 800e6c8:	4413      	add	r3, r2
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	440b      	add	r3, r1
 800e6ce:	3318      	adds	r3, #24
 800e6d0:	681a      	ldr	r2, [r3, #0]
 800e6d2:	78f9      	ldrb	r1, [r7, #3]
 800e6d4:	68f8      	ldr	r0, [r7, #12]
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	440b      	add	r3, r1
 800e6dc:	00db      	lsls	r3, r3, #3
 800e6de:	4403      	add	r3, r0
 800e6e0:	3320      	adds	r3, #32
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	fbb2 f1f3 	udiv	r1, r2, r3
 800e6e8:	fb01 f303 	mul.w	r3, r1, r3
 800e6ec:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d110      	bne.n	800e714 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e6f2:	78fa      	ldrb	r2, [r7, #3]
 800e6f4:	6879      	ldr	r1, [r7, #4]
 800e6f6:	4613      	mov	r3, r2
 800e6f8:	009b      	lsls	r3, r3, #2
 800e6fa:	4413      	add	r3, r2
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	440b      	add	r3, r1
 800e700:	3318      	adds	r3, #24
 800e702:	2200      	movs	r2, #0
 800e704:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e706:	78f9      	ldrb	r1, [r7, #3]
 800e708:	2300      	movs	r3, #0
 800e70a:	2200      	movs	r2, #0
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f001 fec4 	bl	801049a <USBD_LL_Transmit>
 800e712:	e015      	b.n	800e740 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	2200      	movs	r2, #0
 800e718:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e722:	691b      	ldr	r3, [r3, #16]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d00b      	beq.n	800e740 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e72e:	691b      	ldr	r3, [r3, #16]
 800e730:	68ba      	ldr	r2, [r7, #8]
 800e732:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e736:	68ba      	ldr	r2, [r7, #8]
 800e738:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e73c:	78fa      	ldrb	r2, [r7, #3]
 800e73e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e740:	2300      	movs	r3, #0
}
 800e742:	4618      	mov	r0, r3
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}

0800e74a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e74a:	b580      	push	{r7, lr}
 800e74c:	b084      	sub	sp, #16
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
 800e752:	460b      	mov	r3, r1
 800e754:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e75c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e764:	2b00      	cmp	r3, #0
 800e766:	d101      	bne.n	800e76c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e768:	2303      	movs	r3, #3
 800e76a:	e015      	b.n	800e798 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e76c:	78fb      	ldrb	r3, [r7, #3]
 800e76e:	4619      	mov	r1, r3
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f001 fed4 	bl	801051e <USBD_LL_GetRxDataSize>
 800e776:	4602      	mov	r2, r0
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e784:	68db      	ldr	r3, [r3, #12]
 800e786:	68fa      	ldr	r2, [r7, #12]
 800e788:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e78c:	68fa      	ldr	r2, [r7, #12]
 800e78e:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e792:	4611      	mov	r1, r2
 800e794:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e796:	2300      	movs	r3, #0
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3710      	adds	r7, #16
 800e79c:	46bd      	mov	sp, r7
 800e79e:	bd80      	pop	{r7, pc}

0800e7a0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e7ae:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d101      	bne.n	800e7ba <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e7b6:	2303      	movs	r3, #3
 800e7b8:	e01a      	b.n	800e7f0 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d014      	beq.n	800e7ee <USBD_CDC_EP0_RxReady+0x4e>
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e7ca:	2bff      	cmp	r3, #255	@ 0xff
 800e7cc:	d00f      	beq.n	800e7ee <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	68fa      	ldr	r2, [r7, #12]
 800e7d8:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800e7dc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e7e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	22ff      	movs	r2, #255	@ 0xff
 800e7ea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e7ee:	2300      	movs	r3, #0
}
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	3710      	adds	r7, #16
 800e7f4:	46bd      	mov	sp, r7
 800e7f6:	bd80      	pop	{r7, pc}

0800e7f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b083      	sub	sp, #12
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2243      	movs	r2, #67	@ 0x43
 800e804:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e806:	4b03      	ldr	r3, [pc, #12]	@ (800e814 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e808:	4618      	mov	r0, r3
 800e80a:	370c      	adds	r7, #12
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr
 800e814:	200000b0 	.word	0x200000b0

0800e818 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e818:	b480      	push	{r7}
 800e81a:	b083      	sub	sp, #12
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2243      	movs	r2, #67	@ 0x43
 800e824:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e826:	4b03      	ldr	r3, [pc, #12]	@ (800e834 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e828:	4618      	mov	r0, r3
 800e82a:	370c      	adds	r7, #12
 800e82c:	46bd      	mov	sp, r7
 800e82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e832:	4770      	bx	lr
 800e834:	2000006c 	.word	0x2000006c

0800e838 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e838:	b480      	push	{r7}
 800e83a:	b083      	sub	sp, #12
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	2243      	movs	r2, #67	@ 0x43
 800e844:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e846:	4b03      	ldr	r3, [pc, #12]	@ (800e854 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e848:	4618      	mov	r0, r3
 800e84a:	370c      	adds	r7, #12
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr
 800e854:	200000f4 	.word	0x200000f4

0800e858 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e858:	b480      	push	{r7}
 800e85a:	b083      	sub	sp, #12
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	220a      	movs	r2, #10
 800e864:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e866:	4b03      	ldr	r3, [pc, #12]	@ (800e874 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e868:	4618      	mov	r0, r3
 800e86a:	370c      	adds	r7, #12
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr
 800e874:	20000028 	.word	0x20000028

0800e878 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d101      	bne.n	800e88c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e888:	2303      	movs	r3, #3
 800e88a:	e004      	b.n	800e896 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	683a      	ldr	r2, [r7, #0]
 800e890:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800e894:	2300      	movs	r3, #0
}
 800e896:	4618      	mov	r0, r3
 800e898:	370c      	adds	r7, #12
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr

0800e8a2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e8a2:	b480      	push	{r7}
 800e8a4:	b087      	sub	sp, #28
 800e8a6:	af00      	add	r7, sp, #0
 800e8a8:	60f8      	str	r0, [r7, #12]
 800e8aa:	60b9      	str	r1, [r7, #8]
 800e8ac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e8b4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d101      	bne.n	800e8c0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e8bc:	2303      	movs	r3, #3
 800e8be:	e008      	b.n	800e8d2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	68ba      	ldr	r2, [r7, #8]
 800e8c4:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e8d0:	2300      	movs	r3, #0
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	371c      	adds	r7, #28
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr

0800e8de <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e8de:	b480      	push	{r7}
 800e8e0:	b085      	sub	sp, #20
 800e8e2:	af00      	add	r7, sp, #0
 800e8e4:	6078      	str	r0, [r7, #4]
 800e8e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e8ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d101      	bne.n	800e8fa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e8f6:	2303      	movs	r3, #3
 800e8f8:	e004      	b.n	800e904 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	683a      	ldr	r2, [r7, #0]
 800e8fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e902:	2300      	movs	r3, #0
}
 800e904:	4618      	mov	r0, r3
 800e906:	3714      	adds	r7, #20
 800e908:	46bd      	mov	sp, r7
 800e90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90e:	4770      	bx	lr

0800e910 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b084      	sub	sp, #16
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e91e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e920:	2301      	movs	r3, #1
 800e922:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d101      	bne.n	800e932 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e92e:	2303      	movs	r3, #3
 800e930:	e01a      	b.n	800e968 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e932:	68bb      	ldr	r3, [r7, #8]
 800e934:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d114      	bne.n	800e966 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	2201      	movs	r2, #1
 800e940:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e95a:	2181      	movs	r1, #129	@ 0x81
 800e95c:	6878      	ldr	r0, [r7, #4]
 800e95e:	f001 fd9c 	bl	801049a <USBD_LL_Transmit>

    ret = USBD_OK;
 800e962:	2300      	movs	r3, #0
 800e964:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e966:	7bfb      	ldrb	r3, [r7, #15]
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e97e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e986:	2b00      	cmp	r3, #0
 800e988:	d101      	bne.n	800e98e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e98a:	2303      	movs	r3, #3
 800e98c:	e016      	b.n	800e9bc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	7c1b      	ldrb	r3, [r3, #16]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d109      	bne.n	800e9aa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e99c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e9a0:	2101      	movs	r1, #1
 800e9a2:	6878      	ldr	r0, [r7, #4]
 800e9a4:	f001 fd9a 	bl	80104dc <USBD_LL_PrepareReceive>
 800e9a8:	e007      	b.n	800e9ba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e9b0:	2340      	movs	r3, #64	@ 0x40
 800e9b2:	2101      	movs	r1, #1
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f001 fd91 	bl	80104dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e9ba:	2300      	movs	r3, #0
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3710      	adds	r7, #16
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b086      	sub	sp, #24
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	60f8      	str	r0, [r7, #12]
 800e9cc:	60b9      	str	r1, [r7, #8]
 800e9ce:	4613      	mov	r3, r2
 800e9d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d101      	bne.n	800e9dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e9d8:	2303      	movs	r3, #3
 800e9da:	e01f      	b.n	800ea1c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	2200      	movs	r2, #0
 800e9f0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d003      	beq.n	800ea02 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	68ba      	ldr	r2, [r7, #8]
 800e9fe:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2201      	movs	r2, #1
 800ea06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	79fa      	ldrb	r2, [r7, #7]
 800ea0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f001 fbf9 	bl	8010208 <USBD_LL_Init>
 800ea16:	4603      	mov	r3, r0
 800ea18:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ea1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3718      	adds	r7, #24
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}

0800ea24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b084      	sub	sp, #16
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d101      	bne.n	800ea3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800ea38:	2303      	movs	r3, #3
 800ea3a:	e016      	b.n	800ea6a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	683a      	ldr	r2, [r7, #0]
 800ea40:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d00b      	beq.n	800ea68 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea58:	f107 020e 	add.w	r2, r7, #14
 800ea5c:	4610      	mov	r0, r2
 800ea5e:	4798      	blx	r3
 800ea60:	4602      	mov	r2, r0
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ea68:	2300      	movs	r3, #0
}
 800ea6a:	4618      	mov	r0, r3
 800ea6c:	3710      	adds	r7, #16
 800ea6e:	46bd      	mov	sp, r7
 800ea70:	bd80      	pop	{r7, pc}

0800ea72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ea72:	b580      	push	{r7, lr}
 800ea74:	b082      	sub	sp, #8
 800ea76:	af00      	add	r7, sp, #0
 800ea78:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f001 fc24 	bl	80102c8 <USBD_LL_Start>
 800ea80:	4603      	mov	r3, r0
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3708      	adds	r7, #8
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}

0800ea8a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ea8a:	b480      	push	{r7}
 800ea8c:	b083      	sub	sp, #12
 800ea8e:	af00      	add	r7, sp, #0
 800ea90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ea92:	2300      	movs	r3, #0
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b084      	sub	sp, #16
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800eaac:	2303      	movs	r3, #3
 800eaae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d009      	beq.n	800eace <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	78fa      	ldrb	r2, [r7, #3]
 800eac4:	4611      	mov	r1, r2
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	4798      	blx	r3
 800eaca:	4603      	mov	r3, r0
 800eacc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800eace:	7bfb      	ldrb	r3, [r7, #15]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3710      	adds	r7, #16
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b082      	sub	sp, #8
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	460b      	mov	r3, r1
 800eae2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d007      	beq.n	800eafe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	78fa      	ldrb	r2, [r7, #3]
 800eaf8:	4611      	mov	r1, r2
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	4798      	blx	r3
  }

  return USBD_OK;
 800eafe:	2300      	movs	r3, #0
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3708      	adds	r7, #8
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b084      	sub	sp, #16
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb18:	6839      	ldr	r1, [r7, #0]
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f000 ff46 	bl	800f9ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2201      	movs	r2, #1
 800eb24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800eb2e:	461a      	mov	r2, r3
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eb3c:	f003 031f 	and.w	r3, r3, #31
 800eb40:	2b02      	cmp	r3, #2
 800eb42:	d01a      	beq.n	800eb7a <USBD_LL_SetupStage+0x72>
 800eb44:	2b02      	cmp	r3, #2
 800eb46:	d822      	bhi.n	800eb8e <USBD_LL_SetupStage+0x86>
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d002      	beq.n	800eb52 <USBD_LL_SetupStage+0x4a>
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d00a      	beq.n	800eb66 <USBD_LL_SetupStage+0x5e>
 800eb50:	e01d      	b.n	800eb8e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb58:	4619      	mov	r1, r3
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f000 f9ee 	bl	800ef3c <USBD_StdDevReq>
 800eb60:	4603      	mov	r3, r0
 800eb62:	73fb      	strb	r3, [r7, #15]
      break;
 800eb64:	e020      	b.n	800eba8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb6c:	4619      	mov	r1, r3
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 fa52 	bl	800f018 <USBD_StdItfReq>
 800eb74:	4603      	mov	r3, r0
 800eb76:	73fb      	strb	r3, [r7, #15]
      break;
 800eb78:	e016      	b.n	800eba8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eb80:	4619      	mov	r1, r3
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f000 fa91 	bl	800f0aa <USBD_StdEPReq>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	73fb      	strb	r3, [r7, #15]
      break;
 800eb8c:	e00c      	b.n	800eba8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eb94:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800eb98:	b2db      	uxtb	r3, r3
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	6878      	ldr	r0, [r7, #4]
 800eb9e:	f001 fbf3 	bl	8010388 <USBD_LL_StallEP>
 800eba2:	4603      	mov	r3, r0
 800eba4:	73fb      	strb	r3, [r7, #15]
      break;
 800eba6:	bf00      	nop
  }

  return ret;
 800eba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3710      	adds	r7, #16
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}

0800ebb2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ebb2:	b580      	push	{r7, lr}
 800ebb4:	b086      	sub	sp, #24
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	60f8      	str	r0, [r7, #12]
 800ebba:	460b      	mov	r3, r1
 800ebbc:	607a      	str	r2, [r7, #4]
 800ebbe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ebc0:	7afb      	ldrb	r3, [r7, #11]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d138      	bne.n	800ec38 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ebcc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ebd4:	2b03      	cmp	r3, #3
 800ebd6:	d14a      	bne.n	800ec6e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	689a      	ldr	r2, [r3, #8]
 800ebdc:	693b      	ldr	r3, [r7, #16]
 800ebde:	68db      	ldr	r3, [r3, #12]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d913      	bls.n	800ec0c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	689a      	ldr	r2, [r3, #8]
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	68db      	ldr	r3, [r3, #12]
 800ebec:	1ad2      	subs	r2, r2, r3
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	68da      	ldr	r2, [r3, #12]
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	689b      	ldr	r3, [r3, #8]
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	bf28      	it	cs
 800ebfe:	4613      	movcs	r3, r2
 800ec00:	461a      	mov	r2, r3
 800ec02:	6879      	ldr	r1, [r7, #4]
 800ec04:	68f8      	ldr	r0, [r7, #12]
 800ec06:	f000 ffc5 	bl	800fb94 <USBD_CtlContinueRx>
 800ec0a:	e030      	b.n	800ec6e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec12:	b2db      	uxtb	r3, r3
 800ec14:	2b03      	cmp	r3, #3
 800ec16:	d10b      	bne.n	800ec30 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec1e:	691b      	ldr	r3, [r3, #16]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d005      	beq.n	800ec30 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec2a:	691b      	ldr	r3, [r3, #16]
 800ec2c:	68f8      	ldr	r0, [r7, #12]
 800ec2e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ec30:	68f8      	ldr	r0, [r7, #12]
 800ec32:	f000 ffc0 	bl	800fbb6 <USBD_CtlSendStatus>
 800ec36:	e01a      	b.n	800ec6e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	2b03      	cmp	r3, #3
 800ec42:	d114      	bne.n	800ec6e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec4a:	699b      	ldr	r3, [r3, #24]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d00e      	beq.n	800ec6e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ec56:	699b      	ldr	r3, [r3, #24]
 800ec58:	7afa      	ldrb	r2, [r7, #11]
 800ec5a:	4611      	mov	r1, r2
 800ec5c:	68f8      	ldr	r0, [r7, #12]
 800ec5e:	4798      	blx	r3
 800ec60:	4603      	mov	r3, r0
 800ec62:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ec64:	7dfb      	ldrb	r3, [r7, #23]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d001      	beq.n	800ec6e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ec6a:	7dfb      	ldrb	r3, [r7, #23]
 800ec6c:	e000      	b.n	800ec70 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ec6e:	2300      	movs	r3, #0
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3718      	adds	r7, #24
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b086      	sub	sp, #24
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	460b      	mov	r3, r1
 800ec82:	607a      	str	r2, [r7, #4]
 800ec84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ec86:	7afb      	ldrb	r3, [r7, #11]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d16b      	bne.n	800ed64 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	3314      	adds	r3, #20
 800ec90:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ec98:	2b02      	cmp	r3, #2
 800ec9a:	d156      	bne.n	800ed4a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	689a      	ldr	r2, [r3, #8]
 800eca0:	693b      	ldr	r3, [r7, #16]
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d914      	bls.n	800ecd2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	689a      	ldr	r2, [r3, #8]
 800ecac:	693b      	ldr	r3, [r7, #16]
 800ecae:	68db      	ldr	r3, [r3, #12]
 800ecb0:	1ad2      	subs	r2, r2, r3
 800ecb2:	693b      	ldr	r3, [r7, #16]
 800ecb4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	689b      	ldr	r3, [r3, #8]
 800ecba:	461a      	mov	r2, r3
 800ecbc:	6879      	ldr	r1, [r7, #4]
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f000 ff3a 	bl	800fb38 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	2100      	movs	r1, #0
 800ecca:	68f8      	ldr	r0, [r7, #12]
 800eccc:	f001 fc06 	bl	80104dc <USBD_LL_PrepareReceive>
 800ecd0:	e03b      	b.n	800ed4a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ecd2:	693b      	ldr	r3, [r7, #16]
 800ecd4:	68da      	ldr	r2, [r3, #12]
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	689b      	ldr	r3, [r3, #8]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d11c      	bne.n	800ed18 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	685a      	ldr	r2, [r3, #4]
 800ece2:	693b      	ldr	r3, [r7, #16]
 800ece4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d316      	bcc.n	800ed18 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	685a      	ldr	r2, [r3, #4]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ecf4:	429a      	cmp	r2, r3
 800ecf6:	d20f      	bcs.n	800ed18 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	2100      	movs	r1, #0
 800ecfc:	68f8      	ldr	r0, [r7, #12]
 800ecfe:	f000 ff1b 	bl	800fb38 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	2200      	movs	r2, #0
 800ed06:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	2100      	movs	r1, #0
 800ed10:	68f8      	ldr	r0, [r7, #12]
 800ed12:	f001 fbe3 	bl	80104dc <USBD_LL_PrepareReceive>
 800ed16:	e018      	b.n	800ed4a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	2b03      	cmp	r3, #3
 800ed22:	d10b      	bne.n	800ed3c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed2a:	68db      	ldr	r3, [r3, #12]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d005      	beq.n	800ed3c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed36:	68db      	ldr	r3, [r3, #12]
 800ed38:	68f8      	ldr	r0, [r7, #12]
 800ed3a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed3c:	2180      	movs	r1, #128	@ 0x80
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	f001 fb22 	bl	8010388 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ed44:	68f8      	ldr	r0, [r7, #12]
 800ed46:	f000 ff49 	bl	800fbdc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d122      	bne.n	800ed9a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ed54:	68f8      	ldr	r0, [r7, #12]
 800ed56:	f7ff fe98 	bl	800ea8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	2200      	movs	r2, #0
 800ed5e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ed62:	e01a      	b.n	800ed9a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	2b03      	cmp	r3, #3
 800ed6e:	d114      	bne.n	800ed9a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed76:	695b      	ldr	r3, [r3, #20]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d00e      	beq.n	800ed9a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed82:	695b      	ldr	r3, [r3, #20]
 800ed84:	7afa      	ldrb	r2, [r7, #11]
 800ed86:	4611      	mov	r1, r2
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	4798      	blx	r3
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ed90:	7dfb      	ldrb	r3, [r7, #23]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d001      	beq.n	800ed9a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ed96:	7dfb      	ldrb	r3, [r7, #23]
 800ed98:	e000      	b.n	800ed9c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ed9a:	2300      	movs	r3, #0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3718      	adds	r7, #24
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b082      	sub	sp, #8
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2201      	movs	r2, #1
 800edb0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2200      	movs	r2, #0
 800edc0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d101      	bne.n	800edd8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800edd4:	2303      	movs	r3, #3
 800edd6:	e02f      	b.n	800ee38 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d00f      	beq.n	800ee02 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d009      	beq.n	800ee02 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	6852      	ldr	r2, [r2, #4]
 800edfa:	b2d2      	uxtb	r2, r2
 800edfc:	4611      	mov	r1, r2
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee02:	2340      	movs	r3, #64	@ 0x40
 800ee04:	2200      	movs	r2, #0
 800ee06:	2100      	movs	r1, #0
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f001 fa78 	bl	80102fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2201      	movs	r2, #1
 800ee12:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2240      	movs	r2, #64	@ 0x40
 800ee1a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ee1e:	2340      	movs	r3, #64	@ 0x40
 800ee20:	2200      	movs	r2, #0
 800ee22:	2180      	movs	r1, #128	@ 0x80
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f001 fa6a 	bl	80102fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2201      	movs	r2, #1
 800ee2e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2240      	movs	r2, #64	@ 0x40
 800ee34:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ee36:	2300      	movs	r3, #0
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3708      	adds	r7, #8
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b083      	sub	sp, #12
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
 800ee48:	460b      	mov	r3, r1
 800ee4a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	78fa      	ldrb	r2, [r7, #3]
 800ee50:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ee52:	2300      	movs	r3, #0
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	370c      	adds	r7, #12
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr

0800ee60 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee6e:	b2da      	uxtb	r2, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2204      	movs	r2, #4
 800ee7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ee7e:	2300      	movs	r3, #0
}
 800ee80:	4618      	mov	r0, r3
 800ee82:	370c      	adds	r7, #12
 800ee84:	46bd      	mov	sp, r7
 800ee86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee8a:	4770      	bx	lr

0800ee8c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b083      	sub	sp, #12
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	2b04      	cmp	r3, #4
 800ee9e:	d106      	bne.n	800eeae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800eea6:	b2da      	uxtb	r2, r3
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800eeae:	2300      	movs	r3, #0
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	370c      	adds	r7, #12
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d101      	bne.n	800eed2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800eece:	2303      	movs	r3, #3
 800eed0:	e012      	b.n	800eef8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eed8:	b2db      	uxtb	r3, r3
 800eeda:	2b03      	cmp	r3, #3
 800eedc:	d10b      	bne.n	800eef6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eee4:	69db      	ldr	r3, [r3, #28]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d005      	beq.n	800eef6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eef0:	69db      	ldr	r3, [r3, #28]
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eef6:	2300      	movs	r3, #0
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3708      	adds	r7, #8
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}

0800ef00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b087      	sub	sp, #28
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	3301      	adds	r3, #1
 800ef16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ef1e:	8a3b      	ldrh	r3, [r7, #16]
 800ef20:	021b      	lsls	r3, r3, #8
 800ef22:	b21a      	sxth	r2, r3
 800ef24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ef28:	4313      	orrs	r3, r2
 800ef2a:	b21b      	sxth	r3, r3
 800ef2c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ef2e:	89fb      	ldrh	r3, [r7, #14]
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	371c      	adds	r7, #28
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr

0800ef3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef46:	2300      	movs	r3, #0
 800ef48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ef52:	2b40      	cmp	r3, #64	@ 0x40
 800ef54:	d005      	beq.n	800ef62 <USBD_StdDevReq+0x26>
 800ef56:	2b40      	cmp	r3, #64	@ 0x40
 800ef58:	d853      	bhi.n	800f002 <USBD_StdDevReq+0xc6>
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d00b      	beq.n	800ef76 <USBD_StdDevReq+0x3a>
 800ef5e:	2b20      	cmp	r3, #32
 800ef60:	d14f      	bne.n	800f002 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	6839      	ldr	r1, [r7, #0]
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	4798      	blx	r3
 800ef70:	4603      	mov	r3, r0
 800ef72:	73fb      	strb	r3, [r7, #15]
      break;
 800ef74:	e04a      	b.n	800f00c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	785b      	ldrb	r3, [r3, #1]
 800ef7a:	2b09      	cmp	r3, #9
 800ef7c:	d83b      	bhi.n	800eff6 <USBD_StdDevReq+0xba>
 800ef7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ef84 <USBD_StdDevReq+0x48>)
 800ef80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef84:	0800efd9 	.word	0x0800efd9
 800ef88:	0800efed 	.word	0x0800efed
 800ef8c:	0800eff7 	.word	0x0800eff7
 800ef90:	0800efe3 	.word	0x0800efe3
 800ef94:	0800eff7 	.word	0x0800eff7
 800ef98:	0800efb7 	.word	0x0800efb7
 800ef9c:	0800efad 	.word	0x0800efad
 800efa0:	0800eff7 	.word	0x0800eff7
 800efa4:	0800efcf 	.word	0x0800efcf
 800efa8:	0800efc1 	.word	0x0800efc1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800efac:	6839      	ldr	r1, [r7, #0]
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f000 f9de 	bl	800f370 <USBD_GetDescriptor>
          break;
 800efb4:	e024      	b.n	800f000 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800efb6:	6839      	ldr	r1, [r7, #0]
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f000 fb6d 	bl	800f698 <USBD_SetAddress>
          break;
 800efbe:	e01f      	b.n	800f000 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800efc0:	6839      	ldr	r1, [r7, #0]
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f000 fbac 	bl	800f720 <USBD_SetConfig>
 800efc8:	4603      	mov	r3, r0
 800efca:	73fb      	strb	r3, [r7, #15]
          break;
 800efcc:	e018      	b.n	800f000 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800efce:	6839      	ldr	r1, [r7, #0]
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f000 fc4b 	bl	800f86c <USBD_GetConfig>
          break;
 800efd6:	e013      	b.n	800f000 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800efd8:	6839      	ldr	r1, [r7, #0]
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f000 fc7c 	bl	800f8d8 <USBD_GetStatus>
          break;
 800efe0:	e00e      	b.n	800f000 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800efe2:	6839      	ldr	r1, [r7, #0]
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f000 fcab 	bl	800f940 <USBD_SetFeature>
          break;
 800efea:	e009      	b.n	800f000 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800efec:	6839      	ldr	r1, [r7, #0]
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f000 fcba 	bl	800f968 <USBD_ClrFeature>
          break;
 800eff4:	e004      	b.n	800f000 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800eff6:	6839      	ldr	r1, [r7, #0]
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f000 fd11 	bl	800fa20 <USBD_CtlError>
          break;
 800effe:	bf00      	nop
      }
      break;
 800f000:	e004      	b.n	800f00c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f002:	6839      	ldr	r1, [r7, #0]
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f000 fd0b 	bl	800fa20 <USBD_CtlError>
      break;
 800f00a:	bf00      	nop
  }

  return ret;
 800f00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f00e:	4618      	mov	r0, r3
 800f010:	3710      	adds	r7, #16
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop

0800f018 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b084      	sub	sp, #16
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f022:	2300      	movs	r3, #0
 800f024:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f02e:	2b40      	cmp	r3, #64	@ 0x40
 800f030:	d005      	beq.n	800f03e <USBD_StdItfReq+0x26>
 800f032:	2b40      	cmp	r3, #64	@ 0x40
 800f034:	d82f      	bhi.n	800f096 <USBD_StdItfReq+0x7e>
 800f036:	2b00      	cmp	r3, #0
 800f038:	d001      	beq.n	800f03e <USBD_StdItfReq+0x26>
 800f03a:	2b20      	cmp	r3, #32
 800f03c:	d12b      	bne.n	800f096 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f044:	b2db      	uxtb	r3, r3
 800f046:	3b01      	subs	r3, #1
 800f048:	2b02      	cmp	r3, #2
 800f04a:	d81d      	bhi.n	800f088 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	889b      	ldrh	r3, [r3, #4]
 800f050:	b2db      	uxtb	r3, r3
 800f052:	2b01      	cmp	r3, #1
 800f054:	d813      	bhi.n	800f07e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f05c:	689b      	ldr	r3, [r3, #8]
 800f05e:	6839      	ldr	r1, [r7, #0]
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	4798      	blx	r3
 800f064:	4603      	mov	r3, r0
 800f066:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	88db      	ldrh	r3, [r3, #6]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d110      	bne.n	800f092 <USBD_StdItfReq+0x7a>
 800f070:	7bfb      	ldrb	r3, [r7, #15]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d10d      	bne.n	800f092 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f000 fd9d 	bl	800fbb6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f07c:	e009      	b.n	800f092 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f07e:	6839      	ldr	r1, [r7, #0]
 800f080:	6878      	ldr	r0, [r7, #4]
 800f082:	f000 fccd 	bl	800fa20 <USBD_CtlError>
          break;
 800f086:	e004      	b.n	800f092 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f088:	6839      	ldr	r1, [r7, #0]
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f000 fcc8 	bl	800fa20 <USBD_CtlError>
          break;
 800f090:	e000      	b.n	800f094 <USBD_StdItfReq+0x7c>
          break;
 800f092:	bf00      	nop
      }
      break;
 800f094:	e004      	b.n	800f0a0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f096:	6839      	ldr	r1, [r7, #0]
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f000 fcc1 	bl	800fa20 <USBD_CtlError>
      break;
 800f09e:	bf00      	nop
  }

  return ret;
 800f0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}

0800f0aa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0aa:	b580      	push	{r7, lr}
 800f0ac:	b084      	sub	sp, #16
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]
 800f0b2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	889b      	ldrh	r3, [r3, #4]
 800f0bc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	781b      	ldrb	r3, [r3, #0]
 800f0c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f0c6:	2b40      	cmp	r3, #64	@ 0x40
 800f0c8:	d007      	beq.n	800f0da <USBD_StdEPReq+0x30>
 800f0ca:	2b40      	cmp	r3, #64	@ 0x40
 800f0cc:	f200 8145 	bhi.w	800f35a <USBD_StdEPReq+0x2b0>
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d00c      	beq.n	800f0ee <USBD_StdEPReq+0x44>
 800f0d4:	2b20      	cmp	r3, #32
 800f0d6:	f040 8140 	bne.w	800f35a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0e0:	689b      	ldr	r3, [r3, #8]
 800f0e2:	6839      	ldr	r1, [r7, #0]
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	4798      	blx	r3
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	73fb      	strb	r3, [r7, #15]
      break;
 800f0ec:	e13a      	b.n	800f364 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	785b      	ldrb	r3, [r3, #1]
 800f0f2:	2b03      	cmp	r3, #3
 800f0f4:	d007      	beq.n	800f106 <USBD_StdEPReq+0x5c>
 800f0f6:	2b03      	cmp	r3, #3
 800f0f8:	f300 8129 	bgt.w	800f34e <USBD_StdEPReq+0x2a4>
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d07f      	beq.n	800f200 <USBD_StdEPReq+0x156>
 800f100:	2b01      	cmp	r3, #1
 800f102:	d03c      	beq.n	800f17e <USBD_StdEPReq+0xd4>
 800f104:	e123      	b.n	800f34e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f10c:	b2db      	uxtb	r3, r3
 800f10e:	2b02      	cmp	r3, #2
 800f110:	d002      	beq.n	800f118 <USBD_StdEPReq+0x6e>
 800f112:	2b03      	cmp	r3, #3
 800f114:	d016      	beq.n	800f144 <USBD_StdEPReq+0x9a>
 800f116:	e02c      	b.n	800f172 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f118:	7bbb      	ldrb	r3, [r7, #14]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d00d      	beq.n	800f13a <USBD_StdEPReq+0x90>
 800f11e:	7bbb      	ldrb	r3, [r7, #14]
 800f120:	2b80      	cmp	r3, #128	@ 0x80
 800f122:	d00a      	beq.n	800f13a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f124:	7bbb      	ldrb	r3, [r7, #14]
 800f126:	4619      	mov	r1, r3
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f001 f92d 	bl	8010388 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f12e:	2180      	movs	r1, #128	@ 0x80
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f001 f929 	bl	8010388 <USBD_LL_StallEP>
 800f136:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f138:	e020      	b.n	800f17c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f13a:	6839      	ldr	r1, [r7, #0]
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f000 fc6f 	bl	800fa20 <USBD_CtlError>
              break;
 800f142:	e01b      	b.n	800f17c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	885b      	ldrh	r3, [r3, #2]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d10e      	bne.n	800f16a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f14c:	7bbb      	ldrb	r3, [r7, #14]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d00b      	beq.n	800f16a <USBD_StdEPReq+0xc0>
 800f152:	7bbb      	ldrb	r3, [r7, #14]
 800f154:	2b80      	cmp	r3, #128	@ 0x80
 800f156:	d008      	beq.n	800f16a <USBD_StdEPReq+0xc0>
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	88db      	ldrh	r3, [r3, #6]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d104      	bne.n	800f16a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f160:	7bbb      	ldrb	r3, [r7, #14]
 800f162:	4619      	mov	r1, r3
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f001 f90f 	bl	8010388 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f000 fd23 	bl	800fbb6 <USBD_CtlSendStatus>

              break;
 800f170:	e004      	b.n	800f17c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f172:	6839      	ldr	r1, [r7, #0]
 800f174:	6878      	ldr	r0, [r7, #4]
 800f176:	f000 fc53 	bl	800fa20 <USBD_CtlError>
              break;
 800f17a:	bf00      	nop
          }
          break;
 800f17c:	e0ec      	b.n	800f358 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f184:	b2db      	uxtb	r3, r3
 800f186:	2b02      	cmp	r3, #2
 800f188:	d002      	beq.n	800f190 <USBD_StdEPReq+0xe6>
 800f18a:	2b03      	cmp	r3, #3
 800f18c:	d016      	beq.n	800f1bc <USBD_StdEPReq+0x112>
 800f18e:	e030      	b.n	800f1f2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f190:	7bbb      	ldrb	r3, [r7, #14]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d00d      	beq.n	800f1b2 <USBD_StdEPReq+0x108>
 800f196:	7bbb      	ldrb	r3, [r7, #14]
 800f198:	2b80      	cmp	r3, #128	@ 0x80
 800f19a:	d00a      	beq.n	800f1b2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f19c:	7bbb      	ldrb	r3, [r7, #14]
 800f19e:	4619      	mov	r1, r3
 800f1a0:	6878      	ldr	r0, [r7, #4]
 800f1a2:	f001 f8f1 	bl	8010388 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f1a6:	2180      	movs	r1, #128	@ 0x80
 800f1a8:	6878      	ldr	r0, [r7, #4]
 800f1aa:	f001 f8ed 	bl	8010388 <USBD_LL_StallEP>
 800f1ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f1b0:	e025      	b.n	800f1fe <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f1b2:	6839      	ldr	r1, [r7, #0]
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f000 fc33 	bl	800fa20 <USBD_CtlError>
              break;
 800f1ba:	e020      	b.n	800f1fe <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f1bc:	683b      	ldr	r3, [r7, #0]
 800f1be:	885b      	ldrh	r3, [r3, #2]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d11b      	bne.n	800f1fc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f1c4:	7bbb      	ldrb	r3, [r7, #14]
 800f1c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d004      	beq.n	800f1d8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f1ce:	7bbb      	ldrb	r3, [r7, #14]
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f001 f8f7 	bl	80103c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f000 fcec 	bl	800fbb6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1e4:	689b      	ldr	r3, [r3, #8]
 800f1e6:	6839      	ldr	r1, [r7, #0]
 800f1e8:	6878      	ldr	r0, [r7, #4]
 800f1ea:	4798      	blx	r3
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f1f0:	e004      	b.n	800f1fc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f1f2:	6839      	ldr	r1, [r7, #0]
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 fc13 	bl	800fa20 <USBD_CtlError>
              break;
 800f1fa:	e000      	b.n	800f1fe <USBD_StdEPReq+0x154>
              break;
 800f1fc:	bf00      	nop
          }
          break;
 800f1fe:	e0ab      	b.n	800f358 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f206:	b2db      	uxtb	r3, r3
 800f208:	2b02      	cmp	r3, #2
 800f20a:	d002      	beq.n	800f212 <USBD_StdEPReq+0x168>
 800f20c:	2b03      	cmp	r3, #3
 800f20e:	d032      	beq.n	800f276 <USBD_StdEPReq+0x1cc>
 800f210:	e097      	b.n	800f342 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f212:	7bbb      	ldrb	r3, [r7, #14]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d007      	beq.n	800f228 <USBD_StdEPReq+0x17e>
 800f218:	7bbb      	ldrb	r3, [r7, #14]
 800f21a:	2b80      	cmp	r3, #128	@ 0x80
 800f21c:	d004      	beq.n	800f228 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f21e:	6839      	ldr	r1, [r7, #0]
 800f220:	6878      	ldr	r0, [r7, #4]
 800f222:	f000 fbfd 	bl	800fa20 <USBD_CtlError>
                break;
 800f226:	e091      	b.n	800f34c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f228:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	da0b      	bge.n	800f248 <USBD_StdEPReq+0x19e>
 800f230:	7bbb      	ldrb	r3, [r7, #14]
 800f232:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f236:	4613      	mov	r3, r2
 800f238:	009b      	lsls	r3, r3, #2
 800f23a:	4413      	add	r3, r2
 800f23c:	009b      	lsls	r3, r3, #2
 800f23e:	3310      	adds	r3, #16
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	4413      	add	r3, r2
 800f244:	3304      	adds	r3, #4
 800f246:	e00b      	b.n	800f260 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f248:	7bbb      	ldrb	r3, [r7, #14]
 800f24a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f24e:	4613      	mov	r3, r2
 800f250:	009b      	lsls	r3, r3, #2
 800f252:	4413      	add	r3, r2
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	4413      	add	r3, r2
 800f25e:	3304      	adds	r3, #4
 800f260:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	2200      	movs	r2, #0
 800f266:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	2202      	movs	r2, #2
 800f26c:	4619      	mov	r1, r3
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 fc47 	bl	800fb02 <USBD_CtlSendData>
              break;
 800f274:	e06a      	b.n	800f34c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f276:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	da11      	bge.n	800f2a2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f27e:	7bbb      	ldrb	r3, [r7, #14]
 800f280:	f003 020f 	and.w	r2, r3, #15
 800f284:	6879      	ldr	r1, [r7, #4]
 800f286:	4613      	mov	r3, r2
 800f288:	009b      	lsls	r3, r3, #2
 800f28a:	4413      	add	r3, r2
 800f28c:	009b      	lsls	r3, r3, #2
 800f28e:	440b      	add	r3, r1
 800f290:	3324      	adds	r3, #36	@ 0x24
 800f292:	881b      	ldrh	r3, [r3, #0]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d117      	bne.n	800f2c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f298:	6839      	ldr	r1, [r7, #0]
 800f29a:	6878      	ldr	r0, [r7, #4]
 800f29c:	f000 fbc0 	bl	800fa20 <USBD_CtlError>
                  break;
 800f2a0:	e054      	b.n	800f34c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f2a2:	7bbb      	ldrb	r3, [r7, #14]
 800f2a4:	f003 020f 	and.w	r2, r3, #15
 800f2a8:	6879      	ldr	r1, [r7, #4]
 800f2aa:	4613      	mov	r3, r2
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	4413      	add	r3, r2
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	440b      	add	r3, r1
 800f2b4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f2b8:	881b      	ldrh	r3, [r3, #0]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d104      	bne.n	800f2c8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f2be:	6839      	ldr	r1, [r7, #0]
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f000 fbad 	bl	800fa20 <USBD_CtlError>
                  break;
 800f2c6:	e041      	b.n	800f34c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	da0b      	bge.n	800f2e8 <USBD_StdEPReq+0x23e>
 800f2d0:	7bbb      	ldrb	r3, [r7, #14]
 800f2d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f2d6:	4613      	mov	r3, r2
 800f2d8:	009b      	lsls	r3, r3, #2
 800f2da:	4413      	add	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	3310      	adds	r3, #16
 800f2e0:	687a      	ldr	r2, [r7, #4]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	3304      	adds	r3, #4
 800f2e6:	e00b      	b.n	800f300 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f2e8:	7bbb      	ldrb	r3, [r7, #14]
 800f2ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2ee:	4613      	mov	r3, r2
 800f2f0:	009b      	lsls	r3, r3, #2
 800f2f2:	4413      	add	r3, r2
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	4413      	add	r3, r2
 800f2fe:	3304      	adds	r3, #4
 800f300:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f302:	7bbb      	ldrb	r3, [r7, #14]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d002      	beq.n	800f30e <USBD_StdEPReq+0x264>
 800f308:	7bbb      	ldrb	r3, [r7, #14]
 800f30a:	2b80      	cmp	r3, #128	@ 0x80
 800f30c:	d103      	bne.n	800f316 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	2200      	movs	r2, #0
 800f312:	601a      	str	r2, [r3, #0]
 800f314:	e00e      	b.n	800f334 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f316:	7bbb      	ldrb	r3, [r7, #14]
 800f318:	4619      	mov	r1, r3
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f001 f872 	bl	8010404 <USBD_LL_IsStallEP>
 800f320:	4603      	mov	r3, r0
 800f322:	2b00      	cmp	r3, #0
 800f324:	d003      	beq.n	800f32e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	2201      	movs	r2, #1
 800f32a:	601a      	str	r2, [r3, #0]
 800f32c:	e002      	b.n	800f334 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	2200      	movs	r2, #0
 800f332:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	2202      	movs	r2, #2
 800f338:	4619      	mov	r1, r3
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f000 fbe1 	bl	800fb02 <USBD_CtlSendData>
              break;
 800f340:	e004      	b.n	800f34c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f342:	6839      	ldr	r1, [r7, #0]
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f000 fb6b 	bl	800fa20 <USBD_CtlError>
              break;
 800f34a:	bf00      	nop
          }
          break;
 800f34c:	e004      	b.n	800f358 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f34e:	6839      	ldr	r1, [r7, #0]
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f000 fb65 	bl	800fa20 <USBD_CtlError>
          break;
 800f356:	bf00      	nop
      }
      break;
 800f358:	e004      	b.n	800f364 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f35a:	6839      	ldr	r1, [r7, #0]
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 fb5f 	bl	800fa20 <USBD_CtlError>
      break;
 800f362:	bf00      	nop
  }

  return ret;
 800f364:	7bfb      	ldrb	r3, [r7, #15]
}
 800f366:	4618      	mov	r0, r3
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
	...

0800f370 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b084      	sub	sp, #16
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f37a:	2300      	movs	r3, #0
 800f37c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f37e:	2300      	movs	r3, #0
 800f380:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f382:	2300      	movs	r3, #0
 800f384:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f386:	683b      	ldr	r3, [r7, #0]
 800f388:	885b      	ldrh	r3, [r3, #2]
 800f38a:	0a1b      	lsrs	r3, r3, #8
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	3b01      	subs	r3, #1
 800f390:	2b0e      	cmp	r3, #14
 800f392:	f200 8152 	bhi.w	800f63a <USBD_GetDescriptor+0x2ca>
 800f396:	a201      	add	r2, pc, #4	@ (adr r2, 800f39c <USBD_GetDescriptor+0x2c>)
 800f398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f39c:	0800f40d 	.word	0x0800f40d
 800f3a0:	0800f425 	.word	0x0800f425
 800f3a4:	0800f465 	.word	0x0800f465
 800f3a8:	0800f63b 	.word	0x0800f63b
 800f3ac:	0800f63b 	.word	0x0800f63b
 800f3b0:	0800f5db 	.word	0x0800f5db
 800f3b4:	0800f607 	.word	0x0800f607
 800f3b8:	0800f63b 	.word	0x0800f63b
 800f3bc:	0800f63b 	.word	0x0800f63b
 800f3c0:	0800f63b 	.word	0x0800f63b
 800f3c4:	0800f63b 	.word	0x0800f63b
 800f3c8:	0800f63b 	.word	0x0800f63b
 800f3cc:	0800f63b 	.word	0x0800f63b
 800f3d0:	0800f63b 	.word	0x0800f63b
 800f3d4:	0800f3d9 	.word	0x0800f3d9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f3de:	69db      	ldr	r3, [r3, #28]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d00b      	beq.n	800f3fc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f3ea:	69db      	ldr	r3, [r3, #28]
 800f3ec:	687a      	ldr	r2, [r7, #4]
 800f3ee:	7c12      	ldrb	r2, [r2, #16]
 800f3f0:	f107 0108 	add.w	r1, r7, #8
 800f3f4:	4610      	mov	r0, r2
 800f3f6:	4798      	blx	r3
 800f3f8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f3fa:	e126      	b.n	800f64a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f3fc:	6839      	ldr	r1, [r7, #0]
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f000 fb0e 	bl	800fa20 <USBD_CtlError>
        err++;
 800f404:	7afb      	ldrb	r3, [r7, #11]
 800f406:	3301      	adds	r3, #1
 800f408:	72fb      	strb	r3, [r7, #11]
      break;
 800f40a:	e11e      	b.n	800f64a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	7c12      	ldrb	r2, [r2, #16]
 800f418:	f107 0108 	add.w	r1, r7, #8
 800f41c:	4610      	mov	r0, r2
 800f41e:	4798      	blx	r3
 800f420:	60f8      	str	r0, [r7, #12]
      break;
 800f422:	e112      	b.n	800f64a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	7c1b      	ldrb	r3, [r3, #16]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d10d      	bne.n	800f448 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f434:	f107 0208 	add.w	r2, r7, #8
 800f438:	4610      	mov	r0, r2
 800f43a:	4798      	blx	r3
 800f43c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	3301      	adds	r3, #1
 800f442:	2202      	movs	r2, #2
 800f444:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f446:	e100      	b.n	800f64a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f450:	f107 0208 	add.w	r2, r7, #8
 800f454:	4610      	mov	r0, r2
 800f456:	4798      	blx	r3
 800f458:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	3301      	adds	r3, #1
 800f45e:	2202      	movs	r2, #2
 800f460:	701a      	strb	r2, [r3, #0]
      break;
 800f462:	e0f2      	b.n	800f64a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	885b      	ldrh	r3, [r3, #2]
 800f468:	b2db      	uxtb	r3, r3
 800f46a:	2b05      	cmp	r3, #5
 800f46c:	f200 80ac 	bhi.w	800f5c8 <USBD_GetDescriptor+0x258>
 800f470:	a201      	add	r2, pc, #4	@ (adr r2, 800f478 <USBD_GetDescriptor+0x108>)
 800f472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f476:	bf00      	nop
 800f478:	0800f491 	.word	0x0800f491
 800f47c:	0800f4c5 	.word	0x0800f4c5
 800f480:	0800f4f9 	.word	0x0800f4f9
 800f484:	0800f52d 	.word	0x0800f52d
 800f488:	0800f561 	.word	0x0800f561
 800f48c:	0800f595 	.word	0x0800f595
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d00b      	beq.n	800f4b4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	687a      	ldr	r2, [r7, #4]
 800f4a6:	7c12      	ldrb	r2, [r2, #16]
 800f4a8:	f107 0108 	add.w	r1, r7, #8
 800f4ac:	4610      	mov	r0, r2
 800f4ae:	4798      	blx	r3
 800f4b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4b2:	e091      	b.n	800f5d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f4b4:	6839      	ldr	r1, [r7, #0]
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f000 fab2 	bl	800fa20 <USBD_CtlError>
            err++;
 800f4bc:	7afb      	ldrb	r3, [r7, #11]
 800f4be:	3301      	adds	r3, #1
 800f4c0:	72fb      	strb	r3, [r7, #11]
          break;
 800f4c2:	e089      	b.n	800f5d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4ca:	689b      	ldr	r3, [r3, #8]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d00b      	beq.n	800f4e8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4d6:	689b      	ldr	r3, [r3, #8]
 800f4d8:	687a      	ldr	r2, [r7, #4]
 800f4da:	7c12      	ldrb	r2, [r2, #16]
 800f4dc:	f107 0108 	add.w	r1, r7, #8
 800f4e0:	4610      	mov	r0, r2
 800f4e2:	4798      	blx	r3
 800f4e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f4e6:	e077      	b.n	800f5d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f4e8:	6839      	ldr	r1, [r7, #0]
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f000 fa98 	bl	800fa20 <USBD_CtlError>
            err++;
 800f4f0:	7afb      	ldrb	r3, [r7, #11]
 800f4f2:	3301      	adds	r3, #1
 800f4f4:	72fb      	strb	r3, [r7, #11]
          break;
 800f4f6:	e06f      	b.n	800f5d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4fe:	68db      	ldr	r3, [r3, #12]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d00b      	beq.n	800f51c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f50a:	68db      	ldr	r3, [r3, #12]
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	7c12      	ldrb	r2, [r2, #16]
 800f510:	f107 0108 	add.w	r1, r7, #8
 800f514:	4610      	mov	r0, r2
 800f516:	4798      	blx	r3
 800f518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f51a:	e05d      	b.n	800f5d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f51c:	6839      	ldr	r1, [r7, #0]
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f000 fa7e 	bl	800fa20 <USBD_CtlError>
            err++;
 800f524:	7afb      	ldrb	r3, [r7, #11]
 800f526:	3301      	adds	r3, #1
 800f528:	72fb      	strb	r3, [r7, #11]
          break;
 800f52a:	e055      	b.n	800f5d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f532:	691b      	ldr	r3, [r3, #16]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d00b      	beq.n	800f550 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f53e:	691b      	ldr	r3, [r3, #16]
 800f540:	687a      	ldr	r2, [r7, #4]
 800f542:	7c12      	ldrb	r2, [r2, #16]
 800f544:	f107 0108 	add.w	r1, r7, #8
 800f548:	4610      	mov	r0, r2
 800f54a:	4798      	blx	r3
 800f54c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f54e:	e043      	b.n	800f5d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f550:	6839      	ldr	r1, [r7, #0]
 800f552:	6878      	ldr	r0, [r7, #4]
 800f554:	f000 fa64 	bl	800fa20 <USBD_CtlError>
            err++;
 800f558:	7afb      	ldrb	r3, [r7, #11]
 800f55a:	3301      	adds	r3, #1
 800f55c:	72fb      	strb	r3, [r7, #11]
          break;
 800f55e:	e03b      	b.n	800f5d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f566:	695b      	ldr	r3, [r3, #20]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d00b      	beq.n	800f584 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f572:	695b      	ldr	r3, [r3, #20]
 800f574:	687a      	ldr	r2, [r7, #4]
 800f576:	7c12      	ldrb	r2, [r2, #16]
 800f578:	f107 0108 	add.w	r1, r7, #8
 800f57c:	4610      	mov	r0, r2
 800f57e:	4798      	blx	r3
 800f580:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f582:	e029      	b.n	800f5d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f584:	6839      	ldr	r1, [r7, #0]
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	f000 fa4a 	bl	800fa20 <USBD_CtlError>
            err++;
 800f58c:	7afb      	ldrb	r3, [r7, #11]
 800f58e:	3301      	adds	r3, #1
 800f590:	72fb      	strb	r3, [r7, #11]
          break;
 800f592:	e021      	b.n	800f5d8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f59a:	699b      	ldr	r3, [r3, #24]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d00b      	beq.n	800f5b8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5a6:	699b      	ldr	r3, [r3, #24]
 800f5a8:	687a      	ldr	r2, [r7, #4]
 800f5aa:	7c12      	ldrb	r2, [r2, #16]
 800f5ac:	f107 0108 	add.w	r1, r7, #8
 800f5b0:	4610      	mov	r0, r2
 800f5b2:	4798      	blx	r3
 800f5b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5b6:	e00f      	b.n	800f5d8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f5b8:	6839      	ldr	r1, [r7, #0]
 800f5ba:	6878      	ldr	r0, [r7, #4]
 800f5bc:	f000 fa30 	bl	800fa20 <USBD_CtlError>
            err++;
 800f5c0:	7afb      	ldrb	r3, [r7, #11]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	72fb      	strb	r3, [r7, #11]
          break;
 800f5c6:	e007      	b.n	800f5d8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f5c8:	6839      	ldr	r1, [r7, #0]
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f000 fa28 	bl	800fa20 <USBD_CtlError>
          err++;
 800f5d0:	7afb      	ldrb	r3, [r7, #11]
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f5d6:	bf00      	nop
      }
      break;
 800f5d8:	e037      	b.n	800f64a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	7c1b      	ldrb	r3, [r3, #16]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d109      	bne.n	800f5f6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f5ea:	f107 0208 	add.w	r2, r7, #8
 800f5ee:	4610      	mov	r0, r2
 800f5f0:	4798      	blx	r3
 800f5f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f5f4:	e029      	b.n	800f64a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f5f6:	6839      	ldr	r1, [r7, #0]
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f000 fa11 	bl	800fa20 <USBD_CtlError>
        err++;
 800f5fe:	7afb      	ldrb	r3, [r7, #11]
 800f600:	3301      	adds	r3, #1
 800f602:	72fb      	strb	r3, [r7, #11]
      break;
 800f604:	e021      	b.n	800f64a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	7c1b      	ldrb	r3, [r3, #16]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d10d      	bne.n	800f62a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f616:	f107 0208 	add.w	r2, r7, #8
 800f61a:	4610      	mov	r0, r2
 800f61c:	4798      	blx	r3
 800f61e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	3301      	adds	r3, #1
 800f624:	2207      	movs	r2, #7
 800f626:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f628:	e00f      	b.n	800f64a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f62a:	6839      	ldr	r1, [r7, #0]
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f000 f9f7 	bl	800fa20 <USBD_CtlError>
        err++;
 800f632:	7afb      	ldrb	r3, [r7, #11]
 800f634:	3301      	adds	r3, #1
 800f636:	72fb      	strb	r3, [r7, #11]
      break;
 800f638:	e007      	b.n	800f64a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f63a:	6839      	ldr	r1, [r7, #0]
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f000 f9ef 	bl	800fa20 <USBD_CtlError>
      err++;
 800f642:	7afb      	ldrb	r3, [r7, #11]
 800f644:	3301      	adds	r3, #1
 800f646:	72fb      	strb	r3, [r7, #11]
      break;
 800f648:	bf00      	nop
  }

  if (err != 0U)
 800f64a:	7afb      	ldrb	r3, [r7, #11]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d11e      	bne.n	800f68e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	88db      	ldrh	r3, [r3, #6]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d016      	beq.n	800f686 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f658:	893b      	ldrh	r3, [r7, #8]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00e      	beq.n	800f67c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	88da      	ldrh	r2, [r3, #6]
 800f662:	893b      	ldrh	r3, [r7, #8]
 800f664:	4293      	cmp	r3, r2
 800f666:	bf28      	it	cs
 800f668:	4613      	movcs	r3, r2
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f66e:	893b      	ldrh	r3, [r7, #8]
 800f670:	461a      	mov	r2, r3
 800f672:	68f9      	ldr	r1, [r7, #12]
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f000 fa44 	bl	800fb02 <USBD_CtlSendData>
 800f67a:	e009      	b.n	800f690 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f67c:	6839      	ldr	r1, [r7, #0]
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f000 f9ce 	bl	800fa20 <USBD_CtlError>
 800f684:	e004      	b.n	800f690 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	f000 fa95 	bl	800fbb6 <USBD_CtlSendStatus>
 800f68c:	e000      	b.n	800f690 <USBD_GetDescriptor+0x320>
    return;
 800f68e:	bf00      	nop
  }
}
 800f690:	3710      	adds	r7, #16
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop

0800f698 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	889b      	ldrh	r3, [r3, #4]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d131      	bne.n	800f70e <USBD_SetAddress+0x76>
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	88db      	ldrh	r3, [r3, #6]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d12d      	bne.n	800f70e <USBD_SetAddress+0x76>
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	885b      	ldrh	r3, [r3, #2]
 800f6b6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f6b8:	d829      	bhi.n	800f70e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	885b      	ldrh	r3, [r3, #2]
 800f6be:	b2db      	uxtb	r3, r3
 800f6c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6cc:	b2db      	uxtb	r3, r3
 800f6ce:	2b03      	cmp	r3, #3
 800f6d0:	d104      	bne.n	800f6dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f6d2:	6839      	ldr	r1, [r7, #0]
 800f6d4:	6878      	ldr	r0, [r7, #4]
 800f6d6:	f000 f9a3 	bl	800fa20 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6da:	e01d      	b.n	800f718 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	7bfa      	ldrb	r2, [r7, #15]
 800f6e0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f6e4:	7bfb      	ldrb	r3, [r7, #15]
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f000 feb7 	bl	801045c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 fa61 	bl	800fbb6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f6f4:	7bfb      	ldrb	r3, [r7, #15]
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d004      	beq.n	800f704 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2202      	movs	r2, #2
 800f6fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f702:	e009      	b.n	800f718 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	2201      	movs	r2, #1
 800f708:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f70c:	e004      	b.n	800f718 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f70e:	6839      	ldr	r1, [r7, #0]
 800f710:	6878      	ldr	r0, [r7, #4]
 800f712:	f000 f985 	bl	800fa20 <USBD_CtlError>
  }
}
 800f716:	bf00      	nop
 800f718:	bf00      	nop
 800f71a:	3710      	adds	r7, #16
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f72a:	2300      	movs	r3, #0
 800f72c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	885b      	ldrh	r3, [r3, #2]
 800f732:	b2da      	uxtb	r2, r3
 800f734:	4b4c      	ldr	r3, [pc, #304]	@ (800f868 <USBD_SetConfig+0x148>)
 800f736:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f738:	4b4b      	ldr	r3, [pc, #300]	@ (800f868 <USBD_SetConfig+0x148>)
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	2b01      	cmp	r3, #1
 800f73e:	d905      	bls.n	800f74c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f740:	6839      	ldr	r1, [r7, #0]
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f000 f96c 	bl	800fa20 <USBD_CtlError>
    return USBD_FAIL;
 800f748:	2303      	movs	r3, #3
 800f74a:	e088      	b.n	800f85e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f752:	b2db      	uxtb	r3, r3
 800f754:	2b02      	cmp	r3, #2
 800f756:	d002      	beq.n	800f75e <USBD_SetConfig+0x3e>
 800f758:	2b03      	cmp	r3, #3
 800f75a:	d025      	beq.n	800f7a8 <USBD_SetConfig+0x88>
 800f75c:	e071      	b.n	800f842 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f75e:	4b42      	ldr	r3, [pc, #264]	@ (800f868 <USBD_SetConfig+0x148>)
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d01c      	beq.n	800f7a0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f766:	4b40      	ldr	r3, [pc, #256]	@ (800f868 <USBD_SetConfig+0x148>)
 800f768:	781b      	ldrb	r3, [r3, #0]
 800f76a:	461a      	mov	r2, r3
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f770:	4b3d      	ldr	r3, [pc, #244]	@ (800f868 <USBD_SetConfig+0x148>)
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	4619      	mov	r1, r3
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f7ff f992 	bl	800eaa0 <USBD_SetClassConfig>
 800f77c:	4603      	mov	r3, r0
 800f77e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f780:	7bfb      	ldrb	r3, [r7, #15]
 800f782:	2b00      	cmp	r3, #0
 800f784:	d004      	beq.n	800f790 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f786:	6839      	ldr	r1, [r7, #0]
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f000 f949 	bl	800fa20 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f78e:	e065      	b.n	800f85c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f000 fa10 	bl	800fbb6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	2203      	movs	r2, #3
 800f79a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f79e:	e05d      	b.n	800f85c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f000 fa08 	bl	800fbb6 <USBD_CtlSendStatus>
      break;
 800f7a6:	e059      	b.n	800f85c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f7a8:	4b2f      	ldr	r3, [pc, #188]	@ (800f868 <USBD_SetConfig+0x148>)
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d112      	bne.n	800f7d6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2202      	movs	r2, #2
 800f7b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f7b8:	4b2b      	ldr	r3, [pc, #172]	@ (800f868 <USBD_SetConfig+0x148>)
 800f7ba:	781b      	ldrb	r3, [r3, #0]
 800f7bc:	461a      	mov	r2, r3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f7c2:	4b29      	ldr	r3, [pc, #164]	@ (800f868 <USBD_SetConfig+0x148>)
 800f7c4:	781b      	ldrb	r3, [r3, #0]
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f7ff f985 	bl	800ead8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f7ce:	6878      	ldr	r0, [r7, #4]
 800f7d0:	f000 f9f1 	bl	800fbb6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f7d4:	e042      	b.n	800f85c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f7d6:	4b24      	ldr	r3, [pc, #144]	@ (800f868 <USBD_SetConfig+0x148>)
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	461a      	mov	r2, r3
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	685b      	ldr	r3, [r3, #4]
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d02a      	beq.n	800f83a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	685b      	ldr	r3, [r3, #4]
 800f7e8:	b2db      	uxtb	r3, r3
 800f7ea:	4619      	mov	r1, r3
 800f7ec:	6878      	ldr	r0, [r7, #4]
 800f7ee:	f7ff f973 	bl	800ead8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f7f2:	4b1d      	ldr	r3, [pc, #116]	@ (800f868 <USBD_SetConfig+0x148>)
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	461a      	mov	r2, r3
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f7fc:	4b1a      	ldr	r3, [pc, #104]	@ (800f868 <USBD_SetConfig+0x148>)
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	4619      	mov	r1, r3
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f7ff f94c 	bl	800eaa0 <USBD_SetClassConfig>
 800f808:	4603      	mov	r3, r0
 800f80a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f80c:	7bfb      	ldrb	r3, [r7, #15]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d00f      	beq.n	800f832 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f812:	6839      	ldr	r1, [r7, #0]
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f000 f903 	bl	800fa20 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	685b      	ldr	r3, [r3, #4]
 800f81e:	b2db      	uxtb	r3, r3
 800f820:	4619      	mov	r1, r3
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f7ff f958 	bl	800ead8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2202      	movs	r2, #2
 800f82c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f830:	e014      	b.n	800f85c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f000 f9bf 	bl	800fbb6 <USBD_CtlSendStatus>
      break;
 800f838:	e010      	b.n	800f85c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f83a:	6878      	ldr	r0, [r7, #4]
 800f83c:	f000 f9bb 	bl	800fbb6 <USBD_CtlSendStatus>
      break;
 800f840:	e00c      	b.n	800f85c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f842:	6839      	ldr	r1, [r7, #0]
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f000 f8eb 	bl	800fa20 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f84a:	4b07      	ldr	r3, [pc, #28]	@ (800f868 <USBD_SetConfig+0x148>)
 800f84c:	781b      	ldrb	r3, [r3, #0]
 800f84e:	4619      	mov	r1, r3
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f7ff f941 	bl	800ead8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f856:	2303      	movs	r3, #3
 800f858:	73fb      	strb	r3, [r7, #15]
      break;
 800f85a:	bf00      	nop
  }

  return ret;
 800f85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f85e:	4618      	mov	r0, r3
 800f860:	3710      	adds	r7, #16
 800f862:	46bd      	mov	sp, r7
 800f864:	bd80      	pop	{r7, pc}
 800f866:	bf00      	nop
 800f868:	20000b5c 	.word	0x20000b5c

0800f86c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b082      	sub	sp, #8
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
 800f874:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	88db      	ldrh	r3, [r3, #6]
 800f87a:	2b01      	cmp	r3, #1
 800f87c:	d004      	beq.n	800f888 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f87e:	6839      	ldr	r1, [r7, #0]
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f000 f8cd 	bl	800fa20 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f886:	e023      	b.n	800f8d0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f88e:	b2db      	uxtb	r3, r3
 800f890:	2b02      	cmp	r3, #2
 800f892:	dc02      	bgt.n	800f89a <USBD_GetConfig+0x2e>
 800f894:	2b00      	cmp	r3, #0
 800f896:	dc03      	bgt.n	800f8a0 <USBD_GetConfig+0x34>
 800f898:	e015      	b.n	800f8c6 <USBD_GetConfig+0x5a>
 800f89a:	2b03      	cmp	r3, #3
 800f89c:	d00b      	beq.n	800f8b6 <USBD_GetConfig+0x4a>
 800f89e:	e012      	b.n	800f8c6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	3308      	adds	r3, #8
 800f8aa:	2201      	movs	r2, #1
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	6878      	ldr	r0, [r7, #4]
 800f8b0:	f000 f927 	bl	800fb02 <USBD_CtlSendData>
        break;
 800f8b4:	e00c      	b.n	800f8d0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	3304      	adds	r3, #4
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	4619      	mov	r1, r3
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f000 f91f 	bl	800fb02 <USBD_CtlSendData>
        break;
 800f8c4:	e004      	b.n	800f8d0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f8c6:	6839      	ldr	r1, [r7, #0]
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f000 f8a9 	bl	800fa20 <USBD_CtlError>
        break;
 800f8ce:	bf00      	nop
}
 800f8d0:	bf00      	nop
 800f8d2:	3708      	adds	r7, #8
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b082      	sub	sp, #8
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8e8:	b2db      	uxtb	r3, r3
 800f8ea:	3b01      	subs	r3, #1
 800f8ec:	2b02      	cmp	r3, #2
 800f8ee:	d81e      	bhi.n	800f92e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	88db      	ldrh	r3, [r3, #6]
 800f8f4:	2b02      	cmp	r3, #2
 800f8f6:	d004      	beq.n	800f902 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f8f8:	6839      	ldr	r1, [r7, #0]
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f000 f890 	bl	800fa20 <USBD_CtlError>
        break;
 800f900:	e01a      	b.n	800f938 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2201      	movs	r2, #1
 800f906:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d005      	beq.n	800f91e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	68db      	ldr	r3, [r3, #12]
 800f916:	f043 0202 	orr.w	r2, r3, #2
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	330c      	adds	r3, #12
 800f922:	2202      	movs	r2, #2
 800f924:	4619      	mov	r1, r3
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f000 f8eb 	bl	800fb02 <USBD_CtlSendData>
      break;
 800f92c:	e004      	b.n	800f938 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f92e:	6839      	ldr	r1, [r7, #0]
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f000 f875 	bl	800fa20 <USBD_CtlError>
      break;
 800f936:	bf00      	nop
  }
}
 800f938:	bf00      	nop
 800f93a:	3708      	adds	r7, #8
 800f93c:	46bd      	mov	sp, r7
 800f93e:	bd80      	pop	{r7, pc}

0800f940 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	885b      	ldrh	r3, [r3, #2]
 800f94e:	2b01      	cmp	r3, #1
 800f950:	d106      	bne.n	800f960 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2201      	movs	r2, #1
 800f956:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f000 f92b 	bl	800fbb6 <USBD_CtlSendStatus>
  }
}
 800f960:	bf00      	nop
 800f962:	3708      	adds	r7, #8
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	3b01      	subs	r3, #1
 800f97c:	2b02      	cmp	r3, #2
 800f97e:	d80b      	bhi.n	800f998 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	885b      	ldrh	r3, [r3, #2]
 800f984:	2b01      	cmp	r3, #1
 800f986:	d10c      	bne.n	800f9a2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2200      	movs	r2, #0
 800f98c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f000 f910 	bl	800fbb6 <USBD_CtlSendStatus>
      }
      break;
 800f996:	e004      	b.n	800f9a2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f998:	6839      	ldr	r1, [r7, #0]
 800f99a:	6878      	ldr	r0, [r7, #4]
 800f99c:	f000 f840 	bl	800fa20 <USBD_CtlError>
      break;
 800f9a0:	e000      	b.n	800f9a4 <USBD_ClrFeature+0x3c>
      break;
 800f9a2:	bf00      	nop
  }
}
 800f9a4:	bf00      	nop
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b084      	sub	sp, #16
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
 800f9b4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	781a      	ldrb	r2, [r3, #0]
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	781a      	ldrb	r2, [r3, #0]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f9d6:	68f8      	ldr	r0, [r7, #12]
 800f9d8:	f7ff fa92 	bl	800ef00 <SWAPBYTE>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	461a      	mov	r2, r3
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	3301      	adds	r3, #1
 800f9ee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f9f0:	68f8      	ldr	r0, [r7, #12]
 800f9f2:	f7ff fa85 	bl	800ef00 <SWAPBYTE>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	3301      	adds	r3, #1
 800fa02:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	3301      	adds	r3, #1
 800fa08:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fa0a:	68f8      	ldr	r0, [r7, #12]
 800fa0c:	f7ff fa78 	bl	800ef00 <SWAPBYTE>
 800fa10:	4603      	mov	r3, r0
 800fa12:	461a      	mov	r2, r3
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	80da      	strh	r2, [r3, #6]
}
 800fa18:	bf00      	nop
 800fa1a:	3710      	adds	r7, #16
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b082      	sub	sp, #8
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
 800fa28:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa2a:	2180      	movs	r1, #128	@ 0x80
 800fa2c:	6878      	ldr	r0, [r7, #4]
 800fa2e:	f000 fcab 	bl	8010388 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fa32:	2100      	movs	r1, #0
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f000 fca7 	bl	8010388 <USBD_LL_StallEP>
}
 800fa3a:	bf00      	nop
 800fa3c:	3708      	adds	r7, #8
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}

0800fa42 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fa42:	b580      	push	{r7, lr}
 800fa44:	b086      	sub	sp, #24
 800fa46:	af00      	add	r7, sp, #0
 800fa48:	60f8      	str	r0, [r7, #12]
 800fa4a:	60b9      	str	r1, [r7, #8]
 800fa4c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d036      	beq.n	800fac6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fa5c:	6938      	ldr	r0, [r7, #16]
 800fa5e:	f000 f836 	bl	800face <USBD_GetLen>
 800fa62:	4603      	mov	r3, r0
 800fa64:	3301      	adds	r3, #1
 800fa66:	b29b      	uxth	r3, r3
 800fa68:	005b      	lsls	r3, r3, #1
 800fa6a:	b29a      	uxth	r2, r3
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fa70:	7dfb      	ldrb	r3, [r7, #23]
 800fa72:	68ba      	ldr	r2, [r7, #8]
 800fa74:	4413      	add	r3, r2
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	7812      	ldrb	r2, [r2, #0]
 800fa7a:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa7c:	7dfb      	ldrb	r3, [r7, #23]
 800fa7e:	3301      	adds	r3, #1
 800fa80:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fa82:	7dfb      	ldrb	r3, [r7, #23]
 800fa84:	68ba      	ldr	r2, [r7, #8]
 800fa86:	4413      	add	r3, r2
 800fa88:	2203      	movs	r2, #3
 800fa8a:	701a      	strb	r2, [r3, #0]
  idx++;
 800fa8c:	7dfb      	ldrb	r3, [r7, #23]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fa92:	e013      	b.n	800fabc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fa94:	7dfb      	ldrb	r3, [r7, #23]
 800fa96:	68ba      	ldr	r2, [r7, #8]
 800fa98:	4413      	add	r3, r2
 800fa9a:	693a      	ldr	r2, [r7, #16]
 800fa9c:	7812      	ldrb	r2, [r2, #0]
 800fa9e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	3301      	adds	r3, #1
 800faa4:	613b      	str	r3, [r7, #16]
    idx++;
 800faa6:	7dfb      	ldrb	r3, [r7, #23]
 800faa8:	3301      	adds	r3, #1
 800faaa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800faac:	7dfb      	ldrb	r3, [r7, #23]
 800faae:	68ba      	ldr	r2, [r7, #8]
 800fab0:	4413      	add	r3, r2
 800fab2:	2200      	movs	r2, #0
 800fab4:	701a      	strb	r2, [r3, #0]
    idx++;
 800fab6:	7dfb      	ldrb	r3, [r7, #23]
 800fab8:	3301      	adds	r3, #1
 800faba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d1e7      	bne.n	800fa94 <USBD_GetString+0x52>
 800fac4:	e000      	b.n	800fac8 <USBD_GetString+0x86>
    return;
 800fac6:	bf00      	nop
  }
}
 800fac8:	3718      	adds	r7, #24
 800faca:	46bd      	mov	sp, r7
 800facc:	bd80      	pop	{r7, pc}

0800face <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800face:	b480      	push	{r7}
 800fad0:	b085      	sub	sp, #20
 800fad2:	af00      	add	r7, sp, #0
 800fad4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fad6:	2300      	movs	r3, #0
 800fad8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fade:	e005      	b.n	800faec <USBD_GetLen+0x1e>
  {
    len++;
 800fae0:	7bfb      	ldrb	r3, [r7, #15]
 800fae2:	3301      	adds	r3, #1
 800fae4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	3301      	adds	r3, #1
 800faea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d1f5      	bne.n	800fae0 <USBD_GetLen+0x12>
  }

  return len;
 800faf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3714      	adds	r7, #20
 800fafa:	46bd      	mov	sp, r7
 800fafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb00:	4770      	bx	lr

0800fb02 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fb02:	b580      	push	{r7, lr}
 800fb04:	b084      	sub	sp, #16
 800fb06:	af00      	add	r7, sp, #0
 800fb08:	60f8      	str	r0, [r7, #12]
 800fb0a:	60b9      	str	r1, [r7, #8]
 800fb0c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2202      	movs	r2, #2
 800fb12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	687a      	ldr	r2, [r7, #4]
 800fb1a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	687a      	ldr	r2, [r7, #4]
 800fb20:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	68ba      	ldr	r2, [r7, #8]
 800fb26:	2100      	movs	r1, #0
 800fb28:	68f8      	ldr	r0, [r7, #12]
 800fb2a:	f000 fcb6 	bl	801049a <USBD_LL_Transmit>

  return USBD_OK;
 800fb2e:	2300      	movs	r3, #0
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3710      	adds	r7, #16
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}

0800fb38 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b084      	sub	sp, #16
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	60f8      	str	r0, [r7, #12]
 800fb40:	60b9      	str	r1, [r7, #8]
 800fb42:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	68ba      	ldr	r2, [r7, #8]
 800fb48:	2100      	movs	r1, #0
 800fb4a:	68f8      	ldr	r0, [r7, #12]
 800fb4c:	f000 fca5 	bl	801049a <USBD_LL_Transmit>

  return USBD_OK;
 800fb50:	2300      	movs	r3, #0
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3710      	adds	r7, #16
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}

0800fb5a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fb5a:	b580      	push	{r7, lr}
 800fb5c:	b084      	sub	sp, #16
 800fb5e:	af00      	add	r7, sp, #0
 800fb60:	60f8      	str	r0, [r7, #12]
 800fb62:	60b9      	str	r1, [r7, #8]
 800fb64:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2203      	movs	r2, #3
 800fb6a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	687a      	ldr	r2, [r7, #4]
 800fb72:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	687a      	ldr	r2, [r7, #4]
 800fb7a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	68ba      	ldr	r2, [r7, #8]
 800fb82:	2100      	movs	r1, #0
 800fb84:	68f8      	ldr	r0, [r7, #12]
 800fb86:	f000 fca9 	bl	80104dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fb8a:	2300      	movs	r3, #0
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3710      	adds	r7, #16
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b084      	sub	sp, #16
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	68ba      	ldr	r2, [r7, #8]
 800fba4:	2100      	movs	r1, #0
 800fba6:	68f8      	ldr	r0, [r7, #12]
 800fba8:	f000 fc98 	bl	80104dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbac:	2300      	movs	r3, #0
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	3710      	adds	r7, #16
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}

0800fbb6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fbb6:	b580      	push	{r7, lr}
 800fbb8:	b082      	sub	sp, #8
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2204      	movs	r2, #4
 800fbc2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	2200      	movs	r2, #0
 800fbca:	2100      	movs	r1, #0
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 fc64 	bl	801049a <USBD_LL_Transmit>

  return USBD_OK;
 800fbd2:	2300      	movs	r3, #0
}
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	3708      	adds	r7, #8
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	bd80      	pop	{r7, pc}

0800fbdc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2205      	movs	r2, #5
 800fbe8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fbec:	2300      	movs	r3, #0
 800fbee:	2200      	movs	r2, #0
 800fbf0:	2100      	movs	r1, #0
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 fc72 	bl	80104dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbf8:	2300      	movs	r3, #0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3708      	adds	r7, #8
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
	...

0800fc04 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800fc08:	2200      	movs	r2, #0
 800fc0a:	4912      	ldr	r1, [pc, #72]	@ (800fc54 <MX_USB_Device_Init+0x50>)
 800fc0c:	4812      	ldr	r0, [pc, #72]	@ (800fc58 <MX_USB_Device_Init+0x54>)
 800fc0e:	f7fe fed9 	bl	800e9c4 <USBD_Init>
 800fc12:	4603      	mov	r3, r0
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d001      	beq.n	800fc1c <MX_USB_Device_Init+0x18>
    Error_Handler();
 800fc18:	f7f3 fbc2 	bl	80033a0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800fc1c:	490f      	ldr	r1, [pc, #60]	@ (800fc5c <MX_USB_Device_Init+0x58>)
 800fc1e:	480e      	ldr	r0, [pc, #56]	@ (800fc58 <MX_USB_Device_Init+0x54>)
 800fc20:	f7fe ff00 	bl	800ea24 <USBD_RegisterClass>
 800fc24:	4603      	mov	r3, r0
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d001      	beq.n	800fc2e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800fc2a:	f7f3 fbb9 	bl	80033a0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800fc2e:	490c      	ldr	r1, [pc, #48]	@ (800fc60 <MX_USB_Device_Init+0x5c>)
 800fc30:	4809      	ldr	r0, [pc, #36]	@ (800fc58 <MX_USB_Device_Init+0x54>)
 800fc32:	f7fe fe21 	bl	800e878 <USBD_CDC_RegisterInterface>
 800fc36:	4603      	mov	r3, r0
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d001      	beq.n	800fc40 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800fc3c:	f7f3 fbb0 	bl	80033a0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800fc40:	4805      	ldr	r0, [pc, #20]	@ (800fc58 <MX_USB_Device_Init+0x54>)
 800fc42:	f7fe ff16 	bl	800ea72 <USBD_Start>
 800fc46:	4603      	mov	r3, r0
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d001      	beq.n	800fc50 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800fc4c:	f7f3 fba8 	bl	80033a0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800fc50:	bf00      	nop
 800fc52:	bd80      	pop	{r7, pc}
 800fc54:	2000014c 	.word	0x2000014c
 800fc58:	20000b60 	.word	0x20000b60
 800fc5c:	20000034 	.word	0x20000034
 800fc60:	20000138 	.word	0x20000138

0800fc64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fc68:	2200      	movs	r2, #0
 800fc6a:	4905      	ldr	r1, [pc, #20]	@ (800fc80 <CDC_Init_FS+0x1c>)
 800fc6c:	4805      	ldr	r0, [pc, #20]	@ (800fc84 <CDC_Init_FS+0x20>)
 800fc6e:	f7fe fe18 	bl	800e8a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fc72:	4905      	ldr	r1, [pc, #20]	@ (800fc88 <CDC_Init_FS+0x24>)
 800fc74:	4803      	ldr	r0, [pc, #12]	@ (800fc84 <CDC_Init_FS+0x20>)
 800fc76:	f7fe fe32 	bl	800e8de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fc7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	20001630 	.word	0x20001630
 800fc84:	20000b60 	.word	0x20000b60
 800fc88:	20000e30 	.word	0x20000e30

0800fc8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fc90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	46bd      	mov	sp, r7
 800fc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9a:	4770      	bx	lr

0800fc9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b083      	sub	sp, #12
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	4603      	mov	r3, r0
 800fca4:	6039      	str	r1, [r7, #0]
 800fca6:	71fb      	strb	r3, [r7, #7]
 800fca8:	4613      	mov	r3, r2
 800fcaa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fcac:	79fb      	ldrb	r3, [r7, #7]
 800fcae:	2b23      	cmp	r3, #35	@ 0x23
 800fcb0:	d84a      	bhi.n	800fd48 <CDC_Control_FS+0xac>
 800fcb2:	a201      	add	r2, pc, #4	@ (adr r2, 800fcb8 <CDC_Control_FS+0x1c>)
 800fcb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcb8:	0800fd49 	.word	0x0800fd49
 800fcbc:	0800fd49 	.word	0x0800fd49
 800fcc0:	0800fd49 	.word	0x0800fd49
 800fcc4:	0800fd49 	.word	0x0800fd49
 800fcc8:	0800fd49 	.word	0x0800fd49
 800fccc:	0800fd49 	.word	0x0800fd49
 800fcd0:	0800fd49 	.word	0x0800fd49
 800fcd4:	0800fd49 	.word	0x0800fd49
 800fcd8:	0800fd49 	.word	0x0800fd49
 800fcdc:	0800fd49 	.word	0x0800fd49
 800fce0:	0800fd49 	.word	0x0800fd49
 800fce4:	0800fd49 	.word	0x0800fd49
 800fce8:	0800fd49 	.word	0x0800fd49
 800fcec:	0800fd49 	.word	0x0800fd49
 800fcf0:	0800fd49 	.word	0x0800fd49
 800fcf4:	0800fd49 	.word	0x0800fd49
 800fcf8:	0800fd49 	.word	0x0800fd49
 800fcfc:	0800fd49 	.word	0x0800fd49
 800fd00:	0800fd49 	.word	0x0800fd49
 800fd04:	0800fd49 	.word	0x0800fd49
 800fd08:	0800fd49 	.word	0x0800fd49
 800fd0c:	0800fd49 	.word	0x0800fd49
 800fd10:	0800fd49 	.word	0x0800fd49
 800fd14:	0800fd49 	.word	0x0800fd49
 800fd18:	0800fd49 	.word	0x0800fd49
 800fd1c:	0800fd49 	.word	0x0800fd49
 800fd20:	0800fd49 	.word	0x0800fd49
 800fd24:	0800fd49 	.word	0x0800fd49
 800fd28:	0800fd49 	.word	0x0800fd49
 800fd2c:	0800fd49 	.word	0x0800fd49
 800fd30:	0800fd49 	.word	0x0800fd49
 800fd34:	0800fd49 	.word	0x0800fd49
 800fd38:	0800fd49 	.word	0x0800fd49
 800fd3c:	0800fd49 	.word	0x0800fd49
 800fd40:	0800fd49 	.word	0x0800fd49
 800fd44:	0800fd49 	.word	0x0800fd49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fd48:	bf00      	nop
  }

  return (USBD_OK);
 800fd4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fd4c:	4618      	mov	r0, r3
 800fd4e:	370c      	adds	r7, #12
 800fd50:	46bd      	mov	sp, r7
 800fd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd56:	4770      	bx	lr

0800fd58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b082      	sub	sp, #8
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > sizeof(USB_RX_Buffer)) {
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fd6a:	d903      	bls.n	800fd74 <CDC_Receive_FS+0x1c>
	          *Len = sizeof(USB_RX_Buffer);  // Prevent buffer overflow
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fd72:	601a      	str	r2, [r3, #0]
	      }
	      memcpy(USB_RX_Buffer, Buf, *Len);
 800fd74:	683b      	ldr	r3, [r7, #0]
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	461a      	mov	r2, r3
 800fd7a:	6879      	ldr	r1, [r7, #4]
 800fd7c:	4808      	ldr	r0, [pc, #32]	@ (800fda0 <CDC_Receive_FS+0x48>)
 800fd7e:	f001 fcb0 	bl	80116e2 <memcpy>

	      dataReceivedFlag = 1;
 800fd82:	4b08      	ldr	r3, [pc, #32]	@ (800fda4 <CDC_Receive_FS+0x4c>)
 800fd84:	2201      	movs	r2, #1
 800fd86:	601a      	str	r2, [r3, #0]

	      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fd88:	6879      	ldr	r1, [r7, #4]
 800fd8a:	4807      	ldr	r0, [pc, #28]	@ (800fda8 <CDC_Receive_FS+0x50>)
 800fd8c:	f7fe fda7 	bl	800e8de <USBD_CDC_SetRxBuffer>
	      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fd90:	4805      	ldr	r0, [pc, #20]	@ (800fda8 <CDC_Receive_FS+0x50>)
 800fd92:	f7fe fded 	bl	800e970 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fd96:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3708      	adds	r7, #8
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	20000a78 	.word	0x20000a78
 800fda4:	20000b38 	.word	0x20000b38
 800fda8:	20000b60 	.word	0x20000b60

0800fdac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fdb8:	2300      	movs	r3, #0
 800fdba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fdbc:	4b0d      	ldr	r3, [pc, #52]	@ (800fdf4 <CDC_Transmit_FS+0x48>)
 800fdbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fdc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d001      	beq.n	800fdd2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fdce:	2301      	movs	r3, #1
 800fdd0:	e00b      	b.n	800fdea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800fdd2:	887b      	ldrh	r3, [r7, #2]
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	6879      	ldr	r1, [r7, #4]
 800fdd8:	4806      	ldr	r0, [pc, #24]	@ (800fdf4 <CDC_Transmit_FS+0x48>)
 800fdda:	f7fe fd62 	bl	800e8a2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800fdde:	4805      	ldr	r0, [pc, #20]	@ (800fdf4 <CDC_Transmit_FS+0x48>)
 800fde0:	f7fe fd96 	bl	800e910 <USBD_CDC_TransmitPacket>
 800fde4:	4603      	mov	r3, r0
 800fde6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fde8:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3710      	adds	r7, #16
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	20000b60 	.word	0x20000b60

0800fdf8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b087      	sub	sp, #28
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	60f8      	str	r0, [r7, #12]
 800fe00:	60b9      	str	r1, [r7, #8]
 800fe02:	4613      	mov	r3, r2
 800fe04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fe06:	2300      	movs	r3, #0
 800fe08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fe0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fe0e:	4618      	mov	r0, r3
 800fe10:	371c      	adds	r7, #28
 800fe12:	46bd      	mov	sp, r7
 800fe14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe18:	4770      	bx	lr
	...

0800fe1c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b083      	sub	sp, #12
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	4603      	mov	r3, r0
 800fe24:	6039      	str	r1, [r7, #0]
 800fe26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	2212      	movs	r2, #18
 800fe2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800fe2e:	4b03      	ldr	r3, [pc, #12]	@ (800fe3c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800fe30:	4618      	mov	r0, r3
 800fe32:	370c      	adds	r7, #12
 800fe34:	46bd      	mov	sp, r7
 800fe36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3a:	4770      	bx	lr
 800fe3c:	2000016c 	.word	0x2000016c

0800fe40 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe40:	b480      	push	{r7}
 800fe42:	b083      	sub	sp, #12
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	4603      	mov	r3, r0
 800fe48:	6039      	str	r1, [r7, #0]
 800fe4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	2204      	movs	r2, #4
 800fe50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800fe52:	4b03      	ldr	r3, [pc, #12]	@ (800fe60 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	370c      	adds	r7, #12
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5e:	4770      	bx	lr
 800fe60:	20000180 	.word	0x20000180

0800fe64 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	6039      	str	r1, [r7, #0]
 800fe6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fe70:	79fb      	ldrb	r3, [r7, #7]
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d105      	bne.n	800fe82 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800fe76:	683a      	ldr	r2, [r7, #0]
 800fe78:	4907      	ldr	r1, [pc, #28]	@ (800fe98 <USBD_CDC_ProductStrDescriptor+0x34>)
 800fe7a:	4808      	ldr	r0, [pc, #32]	@ (800fe9c <USBD_CDC_ProductStrDescriptor+0x38>)
 800fe7c:	f7ff fde1 	bl	800fa42 <USBD_GetString>
 800fe80:	e004      	b.n	800fe8c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800fe82:	683a      	ldr	r2, [r7, #0]
 800fe84:	4904      	ldr	r1, [pc, #16]	@ (800fe98 <USBD_CDC_ProductStrDescriptor+0x34>)
 800fe86:	4805      	ldr	r0, [pc, #20]	@ (800fe9c <USBD_CDC_ProductStrDescriptor+0x38>)
 800fe88:	f7ff fddb 	bl	800fa42 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fe8c:	4b02      	ldr	r3, [pc, #8]	@ (800fe98 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	3708      	adds	r7, #8
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
 800fe96:	bf00      	nop
 800fe98:	20001e30 	.word	0x20001e30
 800fe9c:	08016cdc 	.word	0x08016cdc

0800fea0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b082      	sub	sp, #8
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	4603      	mov	r3, r0
 800fea8:	6039      	str	r1, [r7, #0]
 800feaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800feac:	683a      	ldr	r2, [r7, #0]
 800feae:	4904      	ldr	r1, [pc, #16]	@ (800fec0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800feb0:	4804      	ldr	r0, [pc, #16]	@ (800fec4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800feb2:	f7ff fdc6 	bl	800fa42 <USBD_GetString>
  return USBD_StrDesc;
 800feb6:	4b02      	ldr	r3, [pc, #8]	@ (800fec0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}
 800fec0:	20001e30 	.word	0x20001e30
 800fec4:	08016cf4 	.word	0x08016cf4

0800fec8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	4603      	mov	r3, r0
 800fed0:	6039      	str	r1, [r7, #0]
 800fed2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800fed4:	683b      	ldr	r3, [r7, #0]
 800fed6:	221a      	movs	r2, #26
 800fed8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800feda:	f000 f843 	bl	800ff64 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800fede:	4b02      	ldr	r3, [pc, #8]	@ (800fee8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3708      	adds	r7, #8
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	20000184 	.word	0x20000184

0800feec <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b082      	sub	sp, #8
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	4603      	mov	r3, r0
 800fef4:	6039      	str	r1, [r7, #0]
 800fef6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fef8:	79fb      	ldrb	r3, [r7, #7]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d105      	bne.n	800ff0a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800fefe:	683a      	ldr	r2, [r7, #0]
 800ff00:	4907      	ldr	r1, [pc, #28]	@ (800ff20 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ff02:	4808      	ldr	r0, [pc, #32]	@ (800ff24 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ff04:	f7ff fd9d 	bl	800fa42 <USBD_GetString>
 800ff08:	e004      	b.n	800ff14 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ff0a:	683a      	ldr	r2, [r7, #0]
 800ff0c:	4904      	ldr	r1, [pc, #16]	@ (800ff20 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ff0e:	4805      	ldr	r0, [pc, #20]	@ (800ff24 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ff10:	f7ff fd97 	bl	800fa42 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff14:	4b02      	ldr	r3, [pc, #8]	@ (800ff20 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	3708      	adds	r7, #8
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop
 800ff20:	20001e30 	.word	0x20001e30
 800ff24:	08016d08 	.word	0x08016d08

0800ff28 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	4603      	mov	r3, r0
 800ff30:	6039      	str	r1, [r7, #0]
 800ff32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff34:	79fb      	ldrb	r3, [r7, #7]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d105      	bne.n	800ff46 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ff3a:	683a      	ldr	r2, [r7, #0]
 800ff3c:	4907      	ldr	r1, [pc, #28]	@ (800ff5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ff3e:	4808      	ldr	r0, [pc, #32]	@ (800ff60 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ff40:	f7ff fd7f 	bl	800fa42 <USBD_GetString>
 800ff44:	e004      	b.n	800ff50 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ff46:	683a      	ldr	r2, [r7, #0]
 800ff48:	4904      	ldr	r1, [pc, #16]	@ (800ff5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ff4a:	4805      	ldr	r0, [pc, #20]	@ (800ff60 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ff4c:	f7ff fd79 	bl	800fa42 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff50:	4b02      	ldr	r3, [pc, #8]	@ (800ff5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	3708      	adds	r7, #8
 800ff56:	46bd      	mov	sp, r7
 800ff58:	bd80      	pop	{r7, pc}
 800ff5a:	bf00      	nop
 800ff5c:	20001e30 	.word	0x20001e30
 800ff60:	08016d14 	.word	0x08016d14

0800ff64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b084      	sub	sp, #16
 800ff68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ff6a:	4b0f      	ldr	r3, [pc, #60]	@ (800ffa8 <Get_SerialNum+0x44>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ff70:	4b0e      	ldr	r3, [pc, #56]	@ (800ffac <Get_SerialNum+0x48>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ff76:	4b0e      	ldr	r3, [pc, #56]	@ (800ffb0 <Get_SerialNum+0x4c>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ff7c:	68fa      	ldr	r2, [r7, #12]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	4413      	add	r3, r2
 800ff82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d009      	beq.n	800ff9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ff8a:	2208      	movs	r2, #8
 800ff8c:	4909      	ldr	r1, [pc, #36]	@ (800ffb4 <Get_SerialNum+0x50>)
 800ff8e:	68f8      	ldr	r0, [r7, #12]
 800ff90:	f000 f814 	bl	800ffbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ff94:	2204      	movs	r2, #4
 800ff96:	4908      	ldr	r1, [pc, #32]	@ (800ffb8 <Get_SerialNum+0x54>)
 800ff98:	68b8      	ldr	r0, [r7, #8]
 800ff9a:	f000 f80f 	bl	800ffbc <IntToUnicode>
  }
}
 800ff9e:	bf00      	nop
 800ffa0:	3710      	adds	r7, #16
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	1fff7590 	.word	0x1fff7590
 800ffac:	1fff7594 	.word	0x1fff7594
 800ffb0:	1fff7598 	.word	0x1fff7598
 800ffb4:	20000186 	.word	0x20000186
 800ffb8:	20000196 	.word	0x20000196

0800ffbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ffbc:	b480      	push	{r7}
 800ffbe:	b087      	sub	sp, #28
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	60b9      	str	r1, [r7, #8]
 800ffc6:	4613      	mov	r3, r2
 800ffc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ffce:	2300      	movs	r3, #0
 800ffd0:	75fb      	strb	r3, [r7, #23]
 800ffd2:	e027      	b.n	8010024 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	0f1b      	lsrs	r3, r3, #28
 800ffd8:	2b09      	cmp	r3, #9
 800ffda:	d80b      	bhi.n	800fff4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	0f1b      	lsrs	r3, r3, #28
 800ffe0:	b2da      	uxtb	r2, r3
 800ffe2:	7dfb      	ldrb	r3, [r7, #23]
 800ffe4:	005b      	lsls	r3, r3, #1
 800ffe6:	4619      	mov	r1, r3
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	440b      	add	r3, r1
 800ffec:	3230      	adds	r2, #48	@ 0x30
 800ffee:	b2d2      	uxtb	r2, r2
 800fff0:	701a      	strb	r2, [r3, #0]
 800fff2:	e00a      	b.n	801000a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	0f1b      	lsrs	r3, r3, #28
 800fff8:	b2da      	uxtb	r2, r3
 800fffa:	7dfb      	ldrb	r3, [r7, #23]
 800fffc:	005b      	lsls	r3, r3, #1
 800fffe:	4619      	mov	r1, r3
 8010000:	68bb      	ldr	r3, [r7, #8]
 8010002:	440b      	add	r3, r1
 8010004:	3237      	adds	r2, #55	@ 0x37
 8010006:	b2d2      	uxtb	r2, r2
 8010008:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	011b      	lsls	r3, r3, #4
 801000e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010010:	7dfb      	ldrb	r3, [r7, #23]
 8010012:	005b      	lsls	r3, r3, #1
 8010014:	3301      	adds	r3, #1
 8010016:	68ba      	ldr	r2, [r7, #8]
 8010018:	4413      	add	r3, r2
 801001a:	2200      	movs	r2, #0
 801001c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801001e:	7dfb      	ldrb	r3, [r7, #23]
 8010020:	3301      	adds	r3, #1
 8010022:	75fb      	strb	r3, [r7, #23]
 8010024:	7dfa      	ldrb	r2, [r7, #23]
 8010026:	79fb      	ldrb	r3, [r7, #7]
 8010028:	429a      	cmp	r2, r3
 801002a:	d3d3      	bcc.n	800ffd4 <IntToUnicode+0x18>
  }
}
 801002c:	bf00      	nop
 801002e:	bf00      	nop
 8010030:	371c      	adds	r7, #28
 8010032:	46bd      	mov	sp, r7
 8010034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010038:	4770      	bx	lr
	...

0801003c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b098      	sub	sp, #96	@ 0x60
 8010040:	af00      	add	r7, sp, #0
 8010042:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010044:	f107 030c 	add.w	r3, r7, #12
 8010048:	2254      	movs	r2, #84	@ 0x54
 801004a:	2100      	movs	r1, #0
 801004c:	4618      	mov	r0, r3
 801004e:	f001 fab6 	bl	80115be <memset>
  if(pcdHandle->Instance==USB)
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4a15      	ldr	r2, [pc, #84]	@ (80100ac <HAL_PCD_MspInit+0x70>)
 8010058:	4293      	cmp	r3, r2
 801005a:	d122      	bne.n	80100a2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801005c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010060:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010062:	2300      	movs	r3, #0
 8010064:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010066:	f107 030c 	add.w	r3, r7, #12
 801006a:	4618      	mov	r0, r3
 801006c:	f7f9 f8c6 	bl	80091fc <HAL_RCCEx_PeriphCLKConfig>
 8010070:	4603      	mov	r3, r0
 8010072:	2b00      	cmp	r3, #0
 8010074:	d001      	beq.n	801007a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8010076:	f7f3 f993 	bl	80033a0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801007a:	4b0d      	ldr	r3, [pc, #52]	@ (80100b0 <HAL_PCD_MspInit+0x74>)
 801007c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801007e:	4a0c      	ldr	r2, [pc, #48]	@ (80100b0 <HAL_PCD_MspInit+0x74>)
 8010080:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010084:	6593      	str	r3, [r2, #88]	@ 0x58
 8010086:	4b0a      	ldr	r3, [pc, #40]	@ (80100b0 <HAL_PCD_MspInit+0x74>)
 8010088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801008a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801008e:	60bb      	str	r3, [r7, #8]
 8010090:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8010092:	2200      	movs	r2, #0
 8010094:	2100      	movs	r1, #0
 8010096:	2014      	movs	r0, #20
 8010098:	f7f5 fe47 	bl	8005d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801009c:	2014      	movs	r0, #20
 801009e:	f7f5 fe5e 	bl	8005d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80100a2:	bf00      	nop
 80100a4:	3760      	adds	r7, #96	@ 0x60
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	40005c00 	.word	0x40005c00
 80100b0:	40021000 	.word	0x40021000

080100b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b082      	sub	sp, #8
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80100c8:	4619      	mov	r1, r3
 80100ca:	4610      	mov	r0, r2
 80100cc:	f7fe fd1c 	bl	800eb08 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80100d0:	bf00      	nop
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	460b      	mov	r3, r1
 80100e2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80100ea:	78fa      	ldrb	r2, [r7, #3]
 80100ec:	6879      	ldr	r1, [r7, #4]
 80100ee:	4613      	mov	r3, r2
 80100f0:	009b      	lsls	r3, r3, #2
 80100f2:	4413      	add	r3, r2
 80100f4:	00db      	lsls	r3, r3, #3
 80100f6:	440b      	add	r3, r1
 80100f8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80100fc:	681a      	ldr	r2, [r3, #0]
 80100fe:	78fb      	ldrb	r3, [r7, #3]
 8010100:	4619      	mov	r1, r3
 8010102:	f7fe fd56 	bl	800ebb2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8010106:	bf00      	nop
 8010108:	3708      	adds	r7, #8
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}

0801010e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801010e:	b580      	push	{r7, lr}
 8010110:	b082      	sub	sp, #8
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
 8010116:	460b      	mov	r3, r1
 8010118:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010120:	78fa      	ldrb	r2, [r7, #3]
 8010122:	6879      	ldr	r1, [r7, #4]
 8010124:	4613      	mov	r3, r2
 8010126:	009b      	lsls	r3, r3, #2
 8010128:	4413      	add	r3, r2
 801012a:	00db      	lsls	r3, r3, #3
 801012c:	440b      	add	r3, r1
 801012e:	3324      	adds	r3, #36	@ 0x24
 8010130:	681a      	ldr	r2, [r3, #0]
 8010132:	78fb      	ldrb	r3, [r7, #3]
 8010134:	4619      	mov	r1, r3
 8010136:	f7fe fd9f 	bl	800ec78 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801013a:	bf00      	nop
 801013c:	3708      	adds	r7, #8
 801013e:	46bd      	mov	sp, r7
 8010140:	bd80      	pop	{r7, pc}

08010142 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010142:	b580      	push	{r7, lr}
 8010144:	b082      	sub	sp, #8
 8010146:	af00      	add	r7, sp, #0
 8010148:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010150:	4618      	mov	r0, r3
 8010152:	f7fe feb3 	bl	800eebc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8010156:	bf00      	nop
 8010158:	3708      	adds	r7, #8
 801015a:	46bd      	mov	sp, r7
 801015c:	bd80      	pop	{r7, pc}

0801015e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801015e:	b580      	push	{r7, lr}
 8010160:	b084      	sub	sp, #16
 8010162:	af00      	add	r7, sp, #0
 8010164:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010166:	2301      	movs	r3, #1
 8010168:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	795b      	ldrb	r3, [r3, #5]
 801016e:	2b02      	cmp	r3, #2
 8010170:	d001      	beq.n	8010176 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010172:	f7f3 f915 	bl	80033a0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801017c:	7bfa      	ldrb	r2, [r7, #15]
 801017e:	4611      	mov	r1, r2
 8010180:	4618      	mov	r0, r3
 8010182:	f7fe fe5d 	bl	800ee40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801018c:	4618      	mov	r0, r3
 801018e:	f7fe fe09 	bl	800eda4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010192:	bf00      	nop
 8010194:	3710      	adds	r7, #16
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}
	...

0801019c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7fe fe58 	bl	800ee60 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	7a5b      	ldrb	r3, [r3, #9]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d005      	beq.n	80101c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80101b8:	4b04      	ldr	r3, [pc, #16]	@ (80101cc <HAL_PCD_SuspendCallback+0x30>)
 80101ba:	691b      	ldr	r3, [r3, #16]
 80101bc:	4a03      	ldr	r2, [pc, #12]	@ (80101cc <HAL_PCD_SuspendCallback+0x30>)
 80101be:	f043 0306 	orr.w	r3, r3, #6
 80101c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80101c4:	bf00      	nop
 80101c6:	3708      	adds	r7, #8
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	e000ed00 	.word	0xe000ed00

080101d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	7a5b      	ldrb	r3, [r3, #9]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d007      	beq.n	80101f0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80101e0:	4b08      	ldr	r3, [pc, #32]	@ (8010204 <HAL_PCD_ResumeCallback+0x34>)
 80101e2:	691b      	ldr	r3, [r3, #16]
 80101e4:	4a07      	ldr	r2, [pc, #28]	@ (8010204 <HAL_PCD_ResumeCallback+0x34>)
 80101e6:	f023 0306 	bic.w	r3, r3, #6
 80101ea:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80101ec:	f000 f9f8 	bl	80105e0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7fe fe48 	bl	800ee8c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80101fc:	bf00      	nop
 80101fe:	3708      	adds	r7, #8
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}
 8010204:	e000ed00 	.word	0xe000ed00

08010208 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010210:	4a2b      	ldr	r2, [pc, #172]	@ (80102c0 <USBD_LL_Init+0xb8>)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	4a29      	ldr	r2, [pc, #164]	@ (80102c0 <USBD_LL_Init+0xb8>)
 801021c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010220:	4b27      	ldr	r3, [pc, #156]	@ (80102c0 <USBD_LL_Init+0xb8>)
 8010222:	4a28      	ldr	r2, [pc, #160]	@ (80102c4 <USBD_LL_Init+0xbc>)
 8010224:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010226:	4b26      	ldr	r3, [pc, #152]	@ (80102c0 <USBD_LL_Init+0xb8>)
 8010228:	2208      	movs	r2, #8
 801022a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801022c:	4b24      	ldr	r3, [pc, #144]	@ (80102c0 <USBD_LL_Init+0xb8>)
 801022e:	2202      	movs	r2, #2
 8010230:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010232:	4b23      	ldr	r3, [pc, #140]	@ (80102c0 <USBD_LL_Init+0xb8>)
 8010234:	2202      	movs	r2, #2
 8010236:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010238:	4b21      	ldr	r3, [pc, #132]	@ (80102c0 <USBD_LL_Init+0xb8>)
 801023a:	2200      	movs	r2, #0
 801023c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801023e:	4b20      	ldr	r3, [pc, #128]	@ (80102c0 <USBD_LL_Init+0xb8>)
 8010240:	2200      	movs	r2, #0
 8010242:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010244:	4b1e      	ldr	r3, [pc, #120]	@ (80102c0 <USBD_LL_Init+0xb8>)
 8010246:	2200      	movs	r2, #0
 8010248:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801024a:	4b1d      	ldr	r3, [pc, #116]	@ (80102c0 <USBD_LL_Init+0xb8>)
 801024c:	2200      	movs	r2, #0
 801024e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010250:	481b      	ldr	r0, [pc, #108]	@ (80102c0 <USBD_LL_Init+0xb8>)
 8010252:	f7f6 fcbb 	bl	8006bcc <HAL_PCD_Init>
 8010256:	4603      	mov	r3, r0
 8010258:	2b00      	cmp	r3, #0
 801025a:	d001      	beq.n	8010260 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801025c:	f7f3 f8a0 	bl	80033a0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010266:	2318      	movs	r3, #24
 8010268:	2200      	movs	r2, #0
 801026a:	2100      	movs	r1, #0
 801026c:	f7f8 f976 	bl	800855c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010276:	2358      	movs	r3, #88	@ 0x58
 8010278:	2200      	movs	r2, #0
 801027a:	2180      	movs	r1, #128	@ 0x80
 801027c:	f7f8 f96e 	bl	800855c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010286:	23c0      	movs	r3, #192	@ 0xc0
 8010288:	2200      	movs	r2, #0
 801028a:	2181      	movs	r1, #129	@ 0x81
 801028c:	f7f8 f966 	bl	800855c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010296:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801029a:	2200      	movs	r2, #0
 801029c:	2101      	movs	r1, #1
 801029e:	f7f8 f95d 	bl	800855c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80102a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102ac:	2200      	movs	r2, #0
 80102ae:	2182      	movs	r1, #130	@ 0x82
 80102b0:	f7f8 f954 	bl	800855c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80102b4:	2300      	movs	r3, #0
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3708      	adds	r7, #8
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}
 80102be:	bf00      	nop
 80102c0:	20002030 	.word	0x20002030
 80102c4:	40005c00 	.word	0x40005c00

080102c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80102c8:	b580      	push	{r7, lr}
 80102ca:	b084      	sub	sp, #16
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80102d0:	2300      	movs	r3, #0
 80102d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80102d4:	2300      	movs	r3, #0
 80102d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80102de:	4618      	mov	r0, r3
 80102e0:	f7f6 fd42 	bl	8006d68 <HAL_PCD_Start>
 80102e4:	4603      	mov	r3, r0
 80102e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80102e8:	7bfb      	ldrb	r3, [r7, #15]
 80102ea:	4618      	mov	r0, r3
 80102ec:	f000 f97e 	bl	80105ec <USBD_Get_USB_Status>
 80102f0:	4603      	mov	r3, r0
 80102f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80102f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3710      	adds	r7, #16
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}

080102fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80102fe:	b580      	push	{r7, lr}
 8010300:	b084      	sub	sp, #16
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
 8010306:	4608      	mov	r0, r1
 8010308:	4611      	mov	r1, r2
 801030a:	461a      	mov	r2, r3
 801030c:	4603      	mov	r3, r0
 801030e:	70fb      	strb	r3, [r7, #3]
 8010310:	460b      	mov	r3, r1
 8010312:	70bb      	strb	r3, [r7, #2]
 8010314:	4613      	mov	r3, r2
 8010316:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010318:	2300      	movs	r3, #0
 801031a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801031c:	2300      	movs	r3, #0
 801031e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010326:	78bb      	ldrb	r3, [r7, #2]
 8010328:	883a      	ldrh	r2, [r7, #0]
 801032a:	78f9      	ldrb	r1, [r7, #3]
 801032c:	f7f6 fe89 	bl	8007042 <HAL_PCD_EP_Open>
 8010330:	4603      	mov	r3, r0
 8010332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010334:	7bfb      	ldrb	r3, [r7, #15]
 8010336:	4618      	mov	r0, r3
 8010338:	f000 f958 	bl	80105ec <USBD_Get_USB_Status>
 801033c:	4603      	mov	r3, r0
 801033e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010340:	7bbb      	ldrb	r3, [r7, #14]
}
 8010342:	4618      	mov	r0, r3
 8010344:	3710      	adds	r7, #16
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b084      	sub	sp, #16
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
 8010352:	460b      	mov	r3, r1
 8010354:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010356:	2300      	movs	r3, #0
 8010358:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801035a:	2300      	movs	r3, #0
 801035c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010364:	78fa      	ldrb	r2, [r7, #3]
 8010366:	4611      	mov	r1, r2
 8010368:	4618      	mov	r0, r3
 801036a:	f7f6 fec9 	bl	8007100 <HAL_PCD_EP_Close>
 801036e:	4603      	mov	r3, r0
 8010370:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010372:	7bfb      	ldrb	r3, [r7, #15]
 8010374:	4618      	mov	r0, r3
 8010376:	f000 f939 	bl	80105ec <USBD_Get_USB_Status>
 801037a:	4603      	mov	r3, r0
 801037c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801037e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010380:	4618      	mov	r0, r3
 8010382:	3710      	adds	r7, #16
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b084      	sub	sp, #16
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	460b      	mov	r3, r1
 8010392:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010394:	2300      	movs	r3, #0
 8010396:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010398:	2300      	movs	r3, #0
 801039a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80103a2:	78fa      	ldrb	r2, [r7, #3]
 80103a4:	4611      	mov	r1, r2
 80103a6:	4618      	mov	r0, r3
 80103a8:	f7f6 ff72 	bl	8007290 <HAL_PCD_EP_SetStall>
 80103ac:	4603      	mov	r3, r0
 80103ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103b0:	7bfb      	ldrb	r3, [r7, #15]
 80103b2:	4618      	mov	r0, r3
 80103b4:	f000 f91a 	bl	80105ec <USBD_Get_USB_Status>
 80103b8:	4603      	mov	r3, r0
 80103ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3710      	adds	r7, #16
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}

080103c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80103c6:	b580      	push	{r7, lr}
 80103c8:	b084      	sub	sp, #16
 80103ca:	af00      	add	r7, sp, #0
 80103cc:	6078      	str	r0, [r7, #4]
 80103ce:	460b      	mov	r3, r1
 80103d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103d2:	2300      	movs	r3, #0
 80103d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103d6:	2300      	movs	r3, #0
 80103d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80103e0:	78fa      	ldrb	r2, [r7, #3]
 80103e2:	4611      	mov	r1, r2
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7f6 ffa5 	bl	8007334 <HAL_PCD_EP_ClrStall>
 80103ea:	4603      	mov	r3, r0
 80103ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103ee:	7bfb      	ldrb	r3, [r7, #15]
 80103f0:	4618      	mov	r0, r3
 80103f2:	f000 f8fb 	bl	80105ec <USBD_Get_USB_Status>
 80103f6:	4603      	mov	r3, r0
 80103f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3710      	adds	r7, #16
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010404:	b480      	push	{r7}
 8010406:	b085      	sub	sp, #20
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	460b      	mov	r3, r1
 801040e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010416:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010418:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801041c:	2b00      	cmp	r3, #0
 801041e:	da0b      	bge.n	8010438 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010420:	78fb      	ldrb	r3, [r7, #3]
 8010422:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010426:	68f9      	ldr	r1, [r7, #12]
 8010428:	4613      	mov	r3, r2
 801042a:	009b      	lsls	r3, r3, #2
 801042c:	4413      	add	r3, r2
 801042e:	00db      	lsls	r3, r3, #3
 8010430:	440b      	add	r3, r1
 8010432:	3312      	adds	r3, #18
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	e00b      	b.n	8010450 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010438:	78fb      	ldrb	r3, [r7, #3]
 801043a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801043e:	68f9      	ldr	r1, [r7, #12]
 8010440:	4613      	mov	r3, r2
 8010442:	009b      	lsls	r3, r3, #2
 8010444:	4413      	add	r3, r2
 8010446:	00db      	lsls	r3, r3, #3
 8010448:	440b      	add	r3, r1
 801044a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801044e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010450:	4618      	mov	r0, r3
 8010452:	3714      	adds	r7, #20
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr

0801045c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b084      	sub	sp, #16
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
 8010464:	460b      	mov	r3, r1
 8010466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010468:	2300      	movs	r3, #0
 801046a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801046c:	2300      	movs	r3, #0
 801046e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010476:	78fa      	ldrb	r2, [r7, #3]
 8010478:	4611      	mov	r1, r2
 801047a:	4618      	mov	r0, r3
 801047c:	f7f6 fdbd 	bl	8006ffa <HAL_PCD_SetAddress>
 8010480:	4603      	mov	r3, r0
 8010482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010484:	7bfb      	ldrb	r3, [r7, #15]
 8010486:	4618      	mov	r0, r3
 8010488:	f000 f8b0 	bl	80105ec <USBD_Get_USB_Status>
 801048c:	4603      	mov	r3, r0
 801048e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010490:	7bbb      	ldrb	r3, [r7, #14]
}
 8010492:	4618      	mov	r0, r3
 8010494:	3710      	adds	r7, #16
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}

0801049a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801049a:	b580      	push	{r7, lr}
 801049c:	b086      	sub	sp, #24
 801049e:	af00      	add	r7, sp, #0
 80104a0:	60f8      	str	r0, [r7, #12]
 80104a2:	607a      	str	r2, [r7, #4]
 80104a4:	603b      	str	r3, [r7, #0]
 80104a6:	460b      	mov	r3, r1
 80104a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104aa:	2300      	movs	r3, #0
 80104ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104ae:	2300      	movs	r3, #0
 80104b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80104b8:	7af9      	ldrb	r1, [r7, #11]
 80104ba:	683b      	ldr	r3, [r7, #0]
 80104bc:	687a      	ldr	r2, [r7, #4]
 80104be:	f7f6 feb0 	bl	8007222 <HAL_PCD_EP_Transmit>
 80104c2:	4603      	mov	r3, r0
 80104c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104c6:	7dfb      	ldrb	r3, [r7, #23]
 80104c8:	4618      	mov	r0, r3
 80104ca:	f000 f88f 	bl	80105ec <USBD_Get_USB_Status>
 80104ce:	4603      	mov	r3, r0
 80104d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80104d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3718      	adds	r7, #24
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b086      	sub	sp, #24
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	607a      	str	r2, [r7, #4]
 80104e6:	603b      	str	r3, [r7, #0]
 80104e8:	460b      	mov	r3, r1
 80104ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104ec:	2300      	movs	r3, #0
 80104ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104f0:	2300      	movs	r3, #0
 80104f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80104fa:	7af9      	ldrb	r1, [r7, #11]
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	687a      	ldr	r2, [r7, #4]
 8010500:	f7f6 fe46 	bl	8007190 <HAL_PCD_EP_Receive>
 8010504:	4603      	mov	r3, r0
 8010506:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010508:	7dfb      	ldrb	r3, [r7, #23]
 801050a:	4618      	mov	r0, r3
 801050c:	f000 f86e 	bl	80105ec <USBD_Get_USB_Status>
 8010510:	4603      	mov	r3, r0
 8010512:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010514:	7dbb      	ldrb	r3, [r7, #22]
}
 8010516:	4618      	mov	r0, r3
 8010518:	3718      	adds	r7, #24
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}

0801051e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801051e:	b580      	push	{r7, lr}
 8010520:	b082      	sub	sp, #8
 8010522:	af00      	add	r7, sp, #0
 8010524:	6078      	str	r0, [r7, #4]
 8010526:	460b      	mov	r3, r1
 8010528:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010530:	78fa      	ldrb	r2, [r7, #3]
 8010532:	4611      	mov	r1, r2
 8010534:	4618      	mov	r0, r3
 8010536:	f7f6 fe5c 	bl	80071f2 <HAL_PCD_EP_GetRxCount>
 801053a:	4603      	mov	r3, r0
}
 801053c:	4618      	mov	r0, r3
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	460b      	mov	r3, r1
 801054e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010550:	78fb      	ldrb	r3, [r7, #3]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d002      	beq.n	801055c <HAL_PCDEx_LPM_Callback+0x18>
 8010556:	2b01      	cmp	r3, #1
 8010558:	d013      	beq.n	8010582 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801055a:	e023      	b.n	80105a4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	7a5b      	ldrb	r3, [r3, #9]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d007      	beq.n	8010574 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010564:	f000 f83c 	bl	80105e0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010568:	4b10      	ldr	r3, [pc, #64]	@ (80105ac <HAL_PCDEx_LPM_Callback+0x68>)
 801056a:	691b      	ldr	r3, [r3, #16]
 801056c:	4a0f      	ldr	r2, [pc, #60]	@ (80105ac <HAL_PCDEx_LPM_Callback+0x68>)
 801056e:	f023 0306 	bic.w	r3, r3, #6
 8010572:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801057a:	4618      	mov	r0, r3
 801057c:	f7fe fc86 	bl	800ee8c <USBD_LL_Resume>
    break;
 8010580:	e010      	b.n	80105a4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010588:	4618      	mov	r0, r3
 801058a:	f7fe fc69 	bl	800ee60 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	7a5b      	ldrb	r3, [r3, #9]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d005      	beq.n	80105a2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010596:	4b05      	ldr	r3, [pc, #20]	@ (80105ac <HAL_PCDEx_LPM_Callback+0x68>)
 8010598:	691b      	ldr	r3, [r3, #16]
 801059a:	4a04      	ldr	r2, [pc, #16]	@ (80105ac <HAL_PCDEx_LPM_Callback+0x68>)
 801059c:	f043 0306 	orr.w	r3, r3, #6
 80105a0:	6113      	str	r3, [r2, #16]
    break;
 80105a2:	bf00      	nop
}
 80105a4:	bf00      	nop
 80105a6:	3708      	adds	r7, #8
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}
 80105ac:	e000ed00 	.word	0xe000ed00

080105b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80105b0:	b480      	push	{r7}
 80105b2:	b083      	sub	sp, #12
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80105b8:	4b03      	ldr	r3, [pc, #12]	@ (80105c8 <USBD_static_malloc+0x18>)
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	370c      	adds	r7, #12
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop
 80105c8:	2000230c 	.word	0x2000230c

080105cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]

}
 80105d4:	bf00      	nop
 80105d6:	370c      	adds	r7, #12
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr

080105e0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80105e4:	f7f0 fea8 	bl	8001338 <SystemClock_Config>
}
 80105e8:	bf00      	nop
 80105ea:	bd80      	pop	{r7, pc}

080105ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b085      	sub	sp, #20
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	4603      	mov	r3, r0
 80105f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105f6:	2300      	movs	r3, #0
 80105f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80105fa:	79fb      	ldrb	r3, [r7, #7]
 80105fc:	2b03      	cmp	r3, #3
 80105fe:	d817      	bhi.n	8010630 <USBD_Get_USB_Status+0x44>
 8010600:	a201      	add	r2, pc, #4	@ (adr r2, 8010608 <USBD_Get_USB_Status+0x1c>)
 8010602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010606:	bf00      	nop
 8010608:	08010619 	.word	0x08010619
 801060c:	0801061f 	.word	0x0801061f
 8010610:	08010625 	.word	0x08010625
 8010614:	0801062b 	.word	0x0801062b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010618:	2300      	movs	r3, #0
 801061a:	73fb      	strb	r3, [r7, #15]
    break;
 801061c:	e00b      	b.n	8010636 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801061e:	2303      	movs	r3, #3
 8010620:	73fb      	strb	r3, [r7, #15]
    break;
 8010622:	e008      	b.n	8010636 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010624:	2301      	movs	r3, #1
 8010626:	73fb      	strb	r3, [r7, #15]
    break;
 8010628:	e005      	b.n	8010636 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801062a:	2303      	movs	r3, #3
 801062c:	73fb      	strb	r3, [r7, #15]
    break;
 801062e:	e002      	b.n	8010636 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010630:	2303      	movs	r3, #3
 8010632:	73fb      	strb	r3, [r7, #15]
    break;
 8010634:	bf00      	nop
  }
  return usb_status;
 8010636:	7bfb      	ldrb	r3, [r7, #15]
}
 8010638:	4618      	mov	r0, r3
 801063a:	3714      	adds	r7, #20
 801063c:	46bd      	mov	sp, r7
 801063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010642:	4770      	bx	lr

08010644 <__cvt>:
 8010644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010648:	ec57 6b10 	vmov	r6, r7, d0
 801064c:	2f00      	cmp	r7, #0
 801064e:	460c      	mov	r4, r1
 8010650:	4619      	mov	r1, r3
 8010652:	463b      	mov	r3, r7
 8010654:	bfbb      	ittet	lt
 8010656:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801065a:	461f      	movlt	r7, r3
 801065c:	2300      	movge	r3, #0
 801065e:	232d      	movlt	r3, #45	@ 0x2d
 8010660:	700b      	strb	r3, [r1, #0]
 8010662:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010664:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010668:	4691      	mov	r9, r2
 801066a:	f023 0820 	bic.w	r8, r3, #32
 801066e:	bfbc      	itt	lt
 8010670:	4632      	movlt	r2, r6
 8010672:	4616      	movlt	r6, r2
 8010674:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010678:	d005      	beq.n	8010686 <__cvt+0x42>
 801067a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801067e:	d100      	bne.n	8010682 <__cvt+0x3e>
 8010680:	3401      	adds	r4, #1
 8010682:	2102      	movs	r1, #2
 8010684:	e000      	b.n	8010688 <__cvt+0x44>
 8010686:	2103      	movs	r1, #3
 8010688:	ab03      	add	r3, sp, #12
 801068a:	9301      	str	r3, [sp, #4]
 801068c:	ab02      	add	r3, sp, #8
 801068e:	9300      	str	r3, [sp, #0]
 8010690:	ec47 6b10 	vmov	d0, r6, r7
 8010694:	4653      	mov	r3, sl
 8010696:	4622      	mov	r2, r4
 8010698:	f001 f8c2 	bl	8011820 <_dtoa_r>
 801069c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80106a0:	4605      	mov	r5, r0
 80106a2:	d119      	bne.n	80106d8 <__cvt+0x94>
 80106a4:	f019 0f01 	tst.w	r9, #1
 80106a8:	d00e      	beq.n	80106c8 <__cvt+0x84>
 80106aa:	eb00 0904 	add.w	r9, r0, r4
 80106ae:	2200      	movs	r2, #0
 80106b0:	2300      	movs	r3, #0
 80106b2:	4630      	mov	r0, r6
 80106b4:	4639      	mov	r1, r7
 80106b6:	f7f0 fa2f 	bl	8000b18 <__aeabi_dcmpeq>
 80106ba:	b108      	cbz	r0, 80106c0 <__cvt+0x7c>
 80106bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80106c0:	2230      	movs	r2, #48	@ 0x30
 80106c2:	9b03      	ldr	r3, [sp, #12]
 80106c4:	454b      	cmp	r3, r9
 80106c6:	d31e      	bcc.n	8010706 <__cvt+0xc2>
 80106c8:	9b03      	ldr	r3, [sp, #12]
 80106ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80106cc:	1b5b      	subs	r3, r3, r5
 80106ce:	4628      	mov	r0, r5
 80106d0:	6013      	str	r3, [r2, #0]
 80106d2:	b004      	add	sp, #16
 80106d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80106d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80106dc:	eb00 0904 	add.w	r9, r0, r4
 80106e0:	d1e5      	bne.n	80106ae <__cvt+0x6a>
 80106e2:	7803      	ldrb	r3, [r0, #0]
 80106e4:	2b30      	cmp	r3, #48	@ 0x30
 80106e6:	d10a      	bne.n	80106fe <__cvt+0xba>
 80106e8:	2200      	movs	r2, #0
 80106ea:	2300      	movs	r3, #0
 80106ec:	4630      	mov	r0, r6
 80106ee:	4639      	mov	r1, r7
 80106f0:	f7f0 fa12 	bl	8000b18 <__aeabi_dcmpeq>
 80106f4:	b918      	cbnz	r0, 80106fe <__cvt+0xba>
 80106f6:	f1c4 0401 	rsb	r4, r4, #1
 80106fa:	f8ca 4000 	str.w	r4, [sl]
 80106fe:	f8da 3000 	ldr.w	r3, [sl]
 8010702:	4499      	add	r9, r3
 8010704:	e7d3      	b.n	80106ae <__cvt+0x6a>
 8010706:	1c59      	adds	r1, r3, #1
 8010708:	9103      	str	r1, [sp, #12]
 801070a:	701a      	strb	r2, [r3, #0]
 801070c:	e7d9      	b.n	80106c2 <__cvt+0x7e>

0801070e <__exponent>:
 801070e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010710:	2900      	cmp	r1, #0
 8010712:	bfba      	itte	lt
 8010714:	4249      	neglt	r1, r1
 8010716:	232d      	movlt	r3, #45	@ 0x2d
 8010718:	232b      	movge	r3, #43	@ 0x2b
 801071a:	2909      	cmp	r1, #9
 801071c:	7002      	strb	r2, [r0, #0]
 801071e:	7043      	strb	r3, [r0, #1]
 8010720:	dd29      	ble.n	8010776 <__exponent+0x68>
 8010722:	f10d 0307 	add.w	r3, sp, #7
 8010726:	461d      	mov	r5, r3
 8010728:	270a      	movs	r7, #10
 801072a:	461a      	mov	r2, r3
 801072c:	fbb1 f6f7 	udiv	r6, r1, r7
 8010730:	fb07 1416 	mls	r4, r7, r6, r1
 8010734:	3430      	adds	r4, #48	@ 0x30
 8010736:	f802 4c01 	strb.w	r4, [r2, #-1]
 801073a:	460c      	mov	r4, r1
 801073c:	2c63      	cmp	r4, #99	@ 0x63
 801073e:	f103 33ff 	add.w	r3, r3, #4294967295
 8010742:	4631      	mov	r1, r6
 8010744:	dcf1      	bgt.n	801072a <__exponent+0x1c>
 8010746:	3130      	adds	r1, #48	@ 0x30
 8010748:	1e94      	subs	r4, r2, #2
 801074a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801074e:	1c41      	adds	r1, r0, #1
 8010750:	4623      	mov	r3, r4
 8010752:	42ab      	cmp	r3, r5
 8010754:	d30a      	bcc.n	801076c <__exponent+0x5e>
 8010756:	f10d 0309 	add.w	r3, sp, #9
 801075a:	1a9b      	subs	r3, r3, r2
 801075c:	42ac      	cmp	r4, r5
 801075e:	bf88      	it	hi
 8010760:	2300      	movhi	r3, #0
 8010762:	3302      	adds	r3, #2
 8010764:	4403      	add	r3, r0
 8010766:	1a18      	subs	r0, r3, r0
 8010768:	b003      	add	sp, #12
 801076a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801076c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010770:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010774:	e7ed      	b.n	8010752 <__exponent+0x44>
 8010776:	2330      	movs	r3, #48	@ 0x30
 8010778:	3130      	adds	r1, #48	@ 0x30
 801077a:	7083      	strb	r3, [r0, #2]
 801077c:	70c1      	strb	r1, [r0, #3]
 801077e:	1d03      	adds	r3, r0, #4
 8010780:	e7f1      	b.n	8010766 <__exponent+0x58>
	...

08010784 <_printf_float>:
 8010784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010788:	b08d      	sub	sp, #52	@ 0x34
 801078a:	460c      	mov	r4, r1
 801078c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010790:	4616      	mov	r6, r2
 8010792:	461f      	mov	r7, r3
 8010794:	4605      	mov	r5, r0
 8010796:	f000 ff2d 	bl	80115f4 <_localeconv_r>
 801079a:	6803      	ldr	r3, [r0, #0]
 801079c:	9304      	str	r3, [sp, #16]
 801079e:	4618      	mov	r0, r3
 80107a0:	f7ef fd8e 	bl	80002c0 <strlen>
 80107a4:	2300      	movs	r3, #0
 80107a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80107a8:	f8d8 3000 	ldr.w	r3, [r8]
 80107ac:	9005      	str	r0, [sp, #20]
 80107ae:	3307      	adds	r3, #7
 80107b0:	f023 0307 	bic.w	r3, r3, #7
 80107b4:	f103 0208 	add.w	r2, r3, #8
 80107b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80107bc:	f8d4 b000 	ldr.w	fp, [r4]
 80107c0:	f8c8 2000 	str.w	r2, [r8]
 80107c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80107c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80107cc:	9307      	str	r3, [sp, #28]
 80107ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80107d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80107d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80107da:	4b9c      	ldr	r3, [pc, #624]	@ (8010a4c <_printf_float+0x2c8>)
 80107dc:	f04f 32ff 	mov.w	r2, #4294967295
 80107e0:	f7f0 f9cc 	bl	8000b7c <__aeabi_dcmpun>
 80107e4:	bb70      	cbnz	r0, 8010844 <_printf_float+0xc0>
 80107e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80107ea:	4b98      	ldr	r3, [pc, #608]	@ (8010a4c <_printf_float+0x2c8>)
 80107ec:	f04f 32ff 	mov.w	r2, #4294967295
 80107f0:	f7f0 f9a6 	bl	8000b40 <__aeabi_dcmple>
 80107f4:	bb30      	cbnz	r0, 8010844 <_printf_float+0xc0>
 80107f6:	2200      	movs	r2, #0
 80107f8:	2300      	movs	r3, #0
 80107fa:	4640      	mov	r0, r8
 80107fc:	4649      	mov	r1, r9
 80107fe:	f7f0 f995 	bl	8000b2c <__aeabi_dcmplt>
 8010802:	b110      	cbz	r0, 801080a <_printf_float+0x86>
 8010804:	232d      	movs	r3, #45	@ 0x2d
 8010806:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801080a:	4a91      	ldr	r2, [pc, #580]	@ (8010a50 <_printf_float+0x2cc>)
 801080c:	4b91      	ldr	r3, [pc, #580]	@ (8010a54 <_printf_float+0x2d0>)
 801080e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010812:	bf94      	ite	ls
 8010814:	4690      	movls	r8, r2
 8010816:	4698      	movhi	r8, r3
 8010818:	2303      	movs	r3, #3
 801081a:	6123      	str	r3, [r4, #16]
 801081c:	f02b 0304 	bic.w	r3, fp, #4
 8010820:	6023      	str	r3, [r4, #0]
 8010822:	f04f 0900 	mov.w	r9, #0
 8010826:	9700      	str	r7, [sp, #0]
 8010828:	4633      	mov	r3, r6
 801082a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801082c:	4621      	mov	r1, r4
 801082e:	4628      	mov	r0, r5
 8010830:	f000 f9d2 	bl	8010bd8 <_printf_common>
 8010834:	3001      	adds	r0, #1
 8010836:	f040 808d 	bne.w	8010954 <_printf_float+0x1d0>
 801083a:	f04f 30ff 	mov.w	r0, #4294967295
 801083e:	b00d      	add	sp, #52	@ 0x34
 8010840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010844:	4642      	mov	r2, r8
 8010846:	464b      	mov	r3, r9
 8010848:	4640      	mov	r0, r8
 801084a:	4649      	mov	r1, r9
 801084c:	f7f0 f996 	bl	8000b7c <__aeabi_dcmpun>
 8010850:	b140      	cbz	r0, 8010864 <_printf_float+0xe0>
 8010852:	464b      	mov	r3, r9
 8010854:	2b00      	cmp	r3, #0
 8010856:	bfbc      	itt	lt
 8010858:	232d      	movlt	r3, #45	@ 0x2d
 801085a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801085e:	4a7e      	ldr	r2, [pc, #504]	@ (8010a58 <_printf_float+0x2d4>)
 8010860:	4b7e      	ldr	r3, [pc, #504]	@ (8010a5c <_printf_float+0x2d8>)
 8010862:	e7d4      	b.n	801080e <_printf_float+0x8a>
 8010864:	6863      	ldr	r3, [r4, #4]
 8010866:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801086a:	9206      	str	r2, [sp, #24]
 801086c:	1c5a      	adds	r2, r3, #1
 801086e:	d13b      	bne.n	80108e8 <_printf_float+0x164>
 8010870:	2306      	movs	r3, #6
 8010872:	6063      	str	r3, [r4, #4]
 8010874:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010878:	2300      	movs	r3, #0
 801087a:	6022      	str	r2, [r4, #0]
 801087c:	9303      	str	r3, [sp, #12]
 801087e:	ab0a      	add	r3, sp, #40	@ 0x28
 8010880:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010884:	ab09      	add	r3, sp, #36	@ 0x24
 8010886:	9300      	str	r3, [sp, #0]
 8010888:	6861      	ldr	r1, [r4, #4]
 801088a:	ec49 8b10 	vmov	d0, r8, r9
 801088e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010892:	4628      	mov	r0, r5
 8010894:	f7ff fed6 	bl	8010644 <__cvt>
 8010898:	9b06      	ldr	r3, [sp, #24]
 801089a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801089c:	2b47      	cmp	r3, #71	@ 0x47
 801089e:	4680      	mov	r8, r0
 80108a0:	d129      	bne.n	80108f6 <_printf_float+0x172>
 80108a2:	1cc8      	adds	r0, r1, #3
 80108a4:	db02      	blt.n	80108ac <_printf_float+0x128>
 80108a6:	6863      	ldr	r3, [r4, #4]
 80108a8:	4299      	cmp	r1, r3
 80108aa:	dd41      	ble.n	8010930 <_printf_float+0x1ac>
 80108ac:	f1aa 0a02 	sub.w	sl, sl, #2
 80108b0:	fa5f fa8a 	uxtb.w	sl, sl
 80108b4:	3901      	subs	r1, #1
 80108b6:	4652      	mov	r2, sl
 80108b8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80108bc:	9109      	str	r1, [sp, #36]	@ 0x24
 80108be:	f7ff ff26 	bl	801070e <__exponent>
 80108c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80108c4:	1813      	adds	r3, r2, r0
 80108c6:	2a01      	cmp	r2, #1
 80108c8:	4681      	mov	r9, r0
 80108ca:	6123      	str	r3, [r4, #16]
 80108cc:	dc02      	bgt.n	80108d4 <_printf_float+0x150>
 80108ce:	6822      	ldr	r2, [r4, #0]
 80108d0:	07d2      	lsls	r2, r2, #31
 80108d2:	d501      	bpl.n	80108d8 <_printf_float+0x154>
 80108d4:	3301      	adds	r3, #1
 80108d6:	6123      	str	r3, [r4, #16]
 80108d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80108dc:	2b00      	cmp	r3, #0
 80108de:	d0a2      	beq.n	8010826 <_printf_float+0xa2>
 80108e0:	232d      	movs	r3, #45	@ 0x2d
 80108e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80108e6:	e79e      	b.n	8010826 <_printf_float+0xa2>
 80108e8:	9a06      	ldr	r2, [sp, #24]
 80108ea:	2a47      	cmp	r2, #71	@ 0x47
 80108ec:	d1c2      	bne.n	8010874 <_printf_float+0xf0>
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d1c0      	bne.n	8010874 <_printf_float+0xf0>
 80108f2:	2301      	movs	r3, #1
 80108f4:	e7bd      	b.n	8010872 <_printf_float+0xee>
 80108f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80108fa:	d9db      	bls.n	80108b4 <_printf_float+0x130>
 80108fc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8010900:	d118      	bne.n	8010934 <_printf_float+0x1b0>
 8010902:	2900      	cmp	r1, #0
 8010904:	6863      	ldr	r3, [r4, #4]
 8010906:	dd0b      	ble.n	8010920 <_printf_float+0x19c>
 8010908:	6121      	str	r1, [r4, #16]
 801090a:	b913      	cbnz	r3, 8010912 <_printf_float+0x18e>
 801090c:	6822      	ldr	r2, [r4, #0]
 801090e:	07d0      	lsls	r0, r2, #31
 8010910:	d502      	bpl.n	8010918 <_printf_float+0x194>
 8010912:	3301      	adds	r3, #1
 8010914:	440b      	add	r3, r1
 8010916:	6123      	str	r3, [r4, #16]
 8010918:	65a1      	str	r1, [r4, #88]	@ 0x58
 801091a:	f04f 0900 	mov.w	r9, #0
 801091e:	e7db      	b.n	80108d8 <_printf_float+0x154>
 8010920:	b913      	cbnz	r3, 8010928 <_printf_float+0x1a4>
 8010922:	6822      	ldr	r2, [r4, #0]
 8010924:	07d2      	lsls	r2, r2, #31
 8010926:	d501      	bpl.n	801092c <_printf_float+0x1a8>
 8010928:	3302      	adds	r3, #2
 801092a:	e7f4      	b.n	8010916 <_printf_float+0x192>
 801092c:	2301      	movs	r3, #1
 801092e:	e7f2      	b.n	8010916 <_printf_float+0x192>
 8010930:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010934:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010936:	4299      	cmp	r1, r3
 8010938:	db05      	blt.n	8010946 <_printf_float+0x1c2>
 801093a:	6823      	ldr	r3, [r4, #0]
 801093c:	6121      	str	r1, [r4, #16]
 801093e:	07d8      	lsls	r0, r3, #31
 8010940:	d5ea      	bpl.n	8010918 <_printf_float+0x194>
 8010942:	1c4b      	adds	r3, r1, #1
 8010944:	e7e7      	b.n	8010916 <_printf_float+0x192>
 8010946:	2900      	cmp	r1, #0
 8010948:	bfd4      	ite	le
 801094a:	f1c1 0202 	rsble	r2, r1, #2
 801094e:	2201      	movgt	r2, #1
 8010950:	4413      	add	r3, r2
 8010952:	e7e0      	b.n	8010916 <_printf_float+0x192>
 8010954:	6823      	ldr	r3, [r4, #0]
 8010956:	055a      	lsls	r2, r3, #21
 8010958:	d407      	bmi.n	801096a <_printf_float+0x1e6>
 801095a:	6923      	ldr	r3, [r4, #16]
 801095c:	4642      	mov	r2, r8
 801095e:	4631      	mov	r1, r6
 8010960:	4628      	mov	r0, r5
 8010962:	47b8      	blx	r7
 8010964:	3001      	adds	r0, #1
 8010966:	d12b      	bne.n	80109c0 <_printf_float+0x23c>
 8010968:	e767      	b.n	801083a <_printf_float+0xb6>
 801096a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801096e:	f240 80dd 	bls.w	8010b2c <_printf_float+0x3a8>
 8010972:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010976:	2200      	movs	r2, #0
 8010978:	2300      	movs	r3, #0
 801097a:	f7f0 f8cd 	bl	8000b18 <__aeabi_dcmpeq>
 801097e:	2800      	cmp	r0, #0
 8010980:	d033      	beq.n	80109ea <_printf_float+0x266>
 8010982:	4a37      	ldr	r2, [pc, #220]	@ (8010a60 <_printf_float+0x2dc>)
 8010984:	2301      	movs	r3, #1
 8010986:	4631      	mov	r1, r6
 8010988:	4628      	mov	r0, r5
 801098a:	47b8      	blx	r7
 801098c:	3001      	adds	r0, #1
 801098e:	f43f af54 	beq.w	801083a <_printf_float+0xb6>
 8010992:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010996:	4543      	cmp	r3, r8
 8010998:	db02      	blt.n	80109a0 <_printf_float+0x21c>
 801099a:	6823      	ldr	r3, [r4, #0]
 801099c:	07d8      	lsls	r0, r3, #31
 801099e:	d50f      	bpl.n	80109c0 <_printf_float+0x23c>
 80109a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109a4:	4631      	mov	r1, r6
 80109a6:	4628      	mov	r0, r5
 80109a8:	47b8      	blx	r7
 80109aa:	3001      	adds	r0, #1
 80109ac:	f43f af45 	beq.w	801083a <_printf_float+0xb6>
 80109b0:	f04f 0900 	mov.w	r9, #0
 80109b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80109b8:	f104 0a1a 	add.w	sl, r4, #26
 80109bc:	45c8      	cmp	r8, r9
 80109be:	dc09      	bgt.n	80109d4 <_printf_float+0x250>
 80109c0:	6823      	ldr	r3, [r4, #0]
 80109c2:	079b      	lsls	r3, r3, #30
 80109c4:	f100 8103 	bmi.w	8010bce <_printf_float+0x44a>
 80109c8:	68e0      	ldr	r0, [r4, #12]
 80109ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80109cc:	4298      	cmp	r0, r3
 80109ce:	bfb8      	it	lt
 80109d0:	4618      	movlt	r0, r3
 80109d2:	e734      	b.n	801083e <_printf_float+0xba>
 80109d4:	2301      	movs	r3, #1
 80109d6:	4652      	mov	r2, sl
 80109d8:	4631      	mov	r1, r6
 80109da:	4628      	mov	r0, r5
 80109dc:	47b8      	blx	r7
 80109de:	3001      	adds	r0, #1
 80109e0:	f43f af2b 	beq.w	801083a <_printf_float+0xb6>
 80109e4:	f109 0901 	add.w	r9, r9, #1
 80109e8:	e7e8      	b.n	80109bc <_printf_float+0x238>
 80109ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	dc39      	bgt.n	8010a64 <_printf_float+0x2e0>
 80109f0:	4a1b      	ldr	r2, [pc, #108]	@ (8010a60 <_printf_float+0x2dc>)
 80109f2:	2301      	movs	r3, #1
 80109f4:	4631      	mov	r1, r6
 80109f6:	4628      	mov	r0, r5
 80109f8:	47b8      	blx	r7
 80109fa:	3001      	adds	r0, #1
 80109fc:	f43f af1d 	beq.w	801083a <_printf_float+0xb6>
 8010a00:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010a04:	ea59 0303 	orrs.w	r3, r9, r3
 8010a08:	d102      	bne.n	8010a10 <_printf_float+0x28c>
 8010a0a:	6823      	ldr	r3, [r4, #0]
 8010a0c:	07d9      	lsls	r1, r3, #31
 8010a0e:	d5d7      	bpl.n	80109c0 <_printf_float+0x23c>
 8010a10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a14:	4631      	mov	r1, r6
 8010a16:	4628      	mov	r0, r5
 8010a18:	47b8      	blx	r7
 8010a1a:	3001      	adds	r0, #1
 8010a1c:	f43f af0d 	beq.w	801083a <_printf_float+0xb6>
 8010a20:	f04f 0a00 	mov.w	sl, #0
 8010a24:	f104 0b1a 	add.w	fp, r4, #26
 8010a28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a2a:	425b      	negs	r3, r3
 8010a2c:	4553      	cmp	r3, sl
 8010a2e:	dc01      	bgt.n	8010a34 <_printf_float+0x2b0>
 8010a30:	464b      	mov	r3, r9
 8010a32:	e793      	b.n	801095c <_printf_float+0x1d8>
 8010a34:	2301      	movs	r3, #1
 8010a36:	465a      	mov	r2, fp
 8010a38:	4631      	mov	r1, r6
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	47b8      	blx	r7
 8010a3e:	3001      	adds	r0, #1
 8010a40:	f43f aefb 	beq.w	801083a <_printf_float+0xb6>
 8010a44:	f10a 0a01 	add.w	sl, sl, #1
 8010a48:	e7ee      	b.n	8010a28 <_printf_float+0x2a4>
 8010a4a:	bf00      	nop
 8010a4c:	7fefffff 	.word	0x7fefffff
 8010a50:	08016d70 	.word	0x08016d70
 8010a54:	08016d74 	.word	0x08016d74
 8010a58:	08016d78 	.word	0x08016d78
 8010a5c:	08016d7c 	.word	0x08016d7c
 8010a60:	08017110 	.word	0x08017110
 8010a64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010a66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010a6a:	4553      	cmp	r3, sl
 8010a6c:	bfa8      	it	ge
 8010a6e:	4653      	movge	r3, sl
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	4699      	mov	r9, r3
 8010a74:	dc36      	bgt.n	8010ae4 <_printf_float+0x360>
 8010a76:	f04f 0b00 	mov.w	fp, #0
 8010a7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010a7e:	f104 021a 	add.w	r2, r4, #26
 8010a82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010a84:	9306      	str	r3, [sp, #24]
 8010a86:	eba3 0309 	sub.w	r3, r3, r9
 8010a8a:	455b      	cmp	r3, fp
 8010a8c:	dc31      	bgt.n	8010af2 <_printf_float+0x36e>
 8010a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a90:	459a      	cmp	sl, r3
 8010a92:	dc3a      	bgt.n	8010b0a <_printf_float+0x386>
 8010a94:	6823      	ldr	r3, [r4, #0]
 8010a96:	07da      	lsls	r2, r3, #31
 8010a98:	d437      	bmi.n	8010b0a <_printf_float+0x386>
 8010a9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010a9c:	ebaa 0903 	sub.w	r9, sl, r3
 8010aa0:	9b06      	ldr	r3, [sp, #24]
 8010aa2:	ebaa 0303 	sub.w	r3, sl, r3
 8010aa6:	4599      	cmp	r9, r3
 8010aa8:	bfa8      	it	ge
 8010aaa:	4699      	movge	r9, r3
 8010aac:	f1b9 0f00 	cmp.w	r9, #0
 8010ab0:	dc33      	bgt.n	8010b1a <_printf_float+0x396>
 8010ab2:	f04f 0800 	mov.w	r8, #0
 8010ab6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010aba:	f104 0b1a 	add.w	fp, r4, #26
 8010abe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ac0:	ebaa 0303 	sub.w	r3, sl, r3
 8010ac4:	eba3 0309 	sub.w	r3, r3, r9
 8010ac8:	4543      	cmp	r3, r8
 8010aca:	f77f af79 	ble.w	80109c0 <_printf_float+0x23c>
 8010ace:	2301      	movs	r3, #1
 8010ad0:	465a      	mov	r2, fp
 8010ad2:	4631      	mov	r1, r6
 8010ad4:	4628      	mov	r0, r5
 8010ad6:	47b8      	blx	r7
 8010ad8:	3001      	adds	r0, #1
 8010ada:	f43f aeae 	beq.w	801083a <_printf_float+0xb6>
 8010ade:	f108 0801 	add.w	r8, r8, #1
 8010ae2:	e7ec      	b.n	8010abe <_printf_float+0x33a>
 8010ae4:	4642      	mov	r2, r8
 8010ae6:	4631      	mov	r1, r6
 8010ae8:	4628      	mov	r0, r5
 8010aea:	47b8      	blx	r7
 8010aec:	3001      	adds	r0, #1
 8010aee:	d1c2      	bne.n	8010a76 <_printf_float+0x2f2>
 8010af0:	e6a3      	b.n	801083a <_printf_float+0xb6>
 8010af2:	2301      	movs	r3, #1
 8010af4:	4631      	mov	r1, r6
 8010af6:	4628      	mov	r0, r5
 8010af8:	9206      	str	r2, [sp, #24]
 8010afa:	47b8      	blx	r7
 8010afc:	3001      	adds	r0, #1
 8010afe:	f43f ae9c 	beq.w	801083a <_printf_float+0xb6>
 8010b02:	9a06      	ldr	r2, [sp, #24]
 8010b04:	f10b 0b01 	add.w	fp, fp, #1
 8010b08:	e7bb      	b.n	8010a82 <_printf_float+0x2fe>
 8010b0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b0e:	4631      	mov	r1, r6
 8010b10:	4628      	mov	r0, r5
 8010b12:	47b8      	blx	r7
 8010b14:	3001      	adds	r0, #1
 8010b16:	d1c0      	bne.n	8010a9a <_printf_float+0x316>
 8010b18:	e68f      	b.n	801083a <_printf_float+0xb6>
 8010b1a:	9a06      	ldr	r2, [sp, #24]
 8010b1c:	464b      	mov	r3, r9
 8010b1e:	4442      	add	r2, r8
 8010b20:	4631      	mov	r1, r6
 8010b22:	4628      	mov	r0, r5
 8010b24:	47b8      	blx	r7
 8010b26:	3001      	adds	r0, #1
 8010b28:	d1c3      	bne.n	8010ab2 <_printf_float+0x32e>
 8010b2a:	e686      	b.n	801083a <_printf_float+0xb6>
 8010b2c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010b30:	f1ba 0f01 	cmp.w	sl, #1
 8010b34:	dc01      	bgt.n	8010b3a <_printf_float+0x3b6>
 8010b36:	07db      	lsls	r3, r3, #31
 8010b38:	d536      	bpl.n	8010ba8 <_printf_float+0x424>
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	4642      	mov	r2, r8
 8010b3e:	4631      	mov	r1, r6
 8010b40:	4628      	mov	r0, r5
 8010b42:	47b8      	blx	r7
 8010b44:	3001      	adds	r0, #1
 8010b46:	f43f ae78 	beq.w	801083a <_printf_float+0xb6>
 8010b4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010b4e:	4631      	mov	r1, r6
 8010b50:	4628      	mov	r0, r5
 8010b52:	47b8      	blx	r7
 8010b54:	3001      	adds	r0, #1
 8010b56:	f43f ae70 	beq.w	801083a <_printf_float+0xb6>
 8010b5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010b5e:	2200      	movs	r2, #0
 8010b60:	2300      	movs	r3, #0
 8010b62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010b66:	f7ef ffd7 	bl	8000b18 <__aeabi_dcmpeq>
 8010b6a:	b9c0      	cbnz	r0, 8010b9e <_printf_float+0x41a>
 8010b6c:	4653      	mov	r3, sl
 8010b6e:	f108 0201 	add.w	r2, r8, #1
 8010b72:	4631      	mov	r1, r6
 8010b74:	4628      	mov	r0, r5
 8010b76:	47b8      	blx	r7
 8010b78:	3001      	adds	r0, #1
 8010b7a:	d10c      	bne.n	8010b96 <_printf_float+0x412>
 8010b7c:	e65d      	b.n	801083a <_printf_float+0xb6>
 8010b7e:	2301      	movs	r3, #1
 8010b80:	465a      	mov	r2, fp
 8010b82:	4631      	mov	r1, r6
 8010b84:	4628      	mov	r0, r5
 8010b86:	47b8      	blx	r7
 8010b88:	3001      	adds	r0, #1
 8010b8a:	f43f ae56 	beq.w	801083a <_printf_float+0xb6>
 8010b8e:	f108 0801 	add.w	r8, r8, #1
 8010b92:	45d0      	cmp	r8, sl
 8010b94:	dbf3      	blt.n	8010b7e <_printf_float+0x3fa>
 8010b96:	464b      	mov	r3, r9
 8010b98:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010b9c:	e6df      	b.n	801095e <_printf_float+0x1da>
 8010b9e:	f04f 0800 	mov.w	r8, #0
 8010ba2:	f104 0b1a 	add.w	fp, r4, #26
 8010ba6:	e7f4      	b.n	8010b92 <_printf_float+0x40e>
 8010ba8:	2301      	movs	r3, #1
 8010baa:	4642      	mov	r2, r8
 8010bac:	e7e1      	b.n	8010b72 <_printf_float+0x3ee>
 8010bae:	2301      	movs	r3, #1
 8010bb0:	464a      	mov	r2, r9
 8010bb2:	4631      	mov	r1, r6
 8010bb4:	4628      	mov	r0, r5
 8010bb6:	47b8      	blx	r7
 8010bb8:	3001      	adds	r0, #1
 8010bba:	f43f ae3e 	beq.w	801083a <_printf_float+0xb6>
 8010bbe:	f108 0801 	add.w	r8, r8, #1
 8010bc2:	68e3      	ldr	r3, [r4, #12]
 8010bc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010bc6:	1a5b      	subs	r3, r3, r1
 8010bc8:	4543      	cmp	r3, r8
 8010bca:	dcf0      	bgt.n	8010bae <_printf_float+0x42a>
 8010bcc:	e6fc      	b.n	80109c8 <_printf_float+0x244>
 8010bce:	f04f 0800 	mov.w	r8, #0
 8010bd2:	f104 0919 	add.w	r9, r4, #25
 8010bd6:	e7f4      	b.n	8010bc2 <_printf_float+0x43e>

08010bd8 <_printf_common>:
 8010bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010bdc:	4616      	mov	r6, r2
 8010bde:	4698      	mov	r8, r3
 8010be0:	688a      	ldr	r2, [r1, #8]
 8010be2:	690b      	ldr	r3, [r1, #16]
 8010be4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010be8:	4293      	cmp	r3, r2
 8010bea:	bfb8      	it	lt
 8010bec:	4613      	movlt	r3, r2
 8010bee:	6033      	str	r3, [r6, #0]
 8010bf0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010bf4:	4607      	mov	r7, r0
 8010bf6:	460c      	mov	r4, r1
 8010bf8:	b10a      	cbz	r2, 8010bfe <_printf_common+0x26>
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	6033      	str	r3, [r6, #0]
 8010bfe:	6823      	ldr	r3, [r4, #0]
 8010c00:	0699      	lsls	r1, r3, #26
 8010c02:	bf42      	ittt	mi
 8010c04:	6833      	ldrmi	r3, [r6, #0]
 8010c06:	3302      	addmi	r3, #2
 8010c08:	6033      	strmi	r3, [r6, #0]
 8010c0a:	6825      	ldr	r5, [r4, #0]
 8010c0c:	f015 0506 	ands.w	r5, r5, #6
 8010c10:	d106      	bne.n	8010c20 <_printf_common+0x48>
 8010c12:	f104 0a19 	add.w	sl, r4, #25
 8010c16:	68e3      	ldr	r3, [r4, #12]
 8010c18:	6832      	ldr	r2, [r6, #0]
 8010c1a:	1a9b      	subs	r3, r3, r2
 8010c1c:	42ab      	cmp	r3, r5
 8010c1e:	dc26      	bgt.n	8010c6e <_printf_common+0x96>
 8010c20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010c24:	6822      	ldr	r2, [r4, #0]
 8010c26:	3b00      	subs	r3, #0
 8010c28:	bf18      	it	ne
 8010c2a:	2301      	movne	r3, #1
 8010c2c:	0692      	lsls	r2, r2, #26
 8010c2e:	d42b      	bmi.n	8010c88 <_printf_common+0xb0>
 8010c30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010c34:	4641      	mov	r1, r8
 8010c36:	4638      	mov	r0, r7
 8010c38:	47c8      	blx	r9
 8010c3a:	3001      	adds	r0, #1
 8010c3c:	d01e      	beq.n	8010c7c <_printf_common+0xa4>
 8010c3e:	6823      	ldr	r3, [r4, #0]
 8010c40:	6922      	ldr	r2, [r4, #16]
 8010c42:	f003 0306 	and.w	r3, r3, #6
 8010c46:	2b04      	cmp	r3, #4
 8010c48:	bf02      	ittt	eq
 8010c4a:	68e5      	ldreq	r5, [r4, #12]
 8010c4c:	6833      	ldreq	r3, [r6, #0]
 8010c4e:	1aed      	subeq	r5, r5, r3
 8010c50:	68a3      	ldr	r3, [r4, #8]
 8010c52:	bf0c      	ite	eq
 8010c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c58:	2500      	movne	r5, #0
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	bfc4      	itt	gt
 8010c5e:	1a9b      	subgt	r3, r3, r2
 8010c60:	18ed      	addgt	r5, r5, r3
 8010c62:	2600      	movs	r6, #0
 8010c64:	341a      	adds	r4, #26
 8010c66:	42b5      	cmp	r5, r6
 8010c68:	d11a      	bne.n	8010ca0 <_printf_common+0xc8>
 8010c6a:	2000      	movs	r0, #0
 8010c6c:	e008      	b.n	8010c80 <_printf_common+0xa8>
 8010c6e:	2301      	movs	r3, #1
 8010c70:	4652      	mov	r2, sl
 8010c72:	4641      	mov	r1, r8
 8010c74:	4638      	mov	r0, r7
 8010c76:	47c8      	blx	r9
 8010c78:	3001      	adds	r0, #1
 8010c7a:	d103      	bne.n	8010c84 <_printf_common+0xac>
 8010c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c84:	3501      	adds	r5, #1
 8010c86:	e7c6      	b.n	8010c16 <_printf_common+0x3e>
 8010c88:	18e1      	adds	r1, r4, r3
 8010c8a:	1c5a      	adds	r2, r3, #1
 8010c8c:	2030      	movs	r0, #48	@ 0x30
 8010c8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010c92:	4422      	add	r2, r4
 8010c94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010c98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010c9c:	3302      	adds	r3, #2
 8010c9e:	e7c7      	b.n	8010c30 <_printf_common+0x58>
 8010ca0:	2301      	movs	r3, #1
 8010ca2:	4622      	mov	r2, r4
 8010ca4:	4641      	mov	r1, r8
 8010ca6:	4638      	mov	r0, r7
 8010ca8:	47c8      	blx	r9
 8010caa:	3001      	adds	r0, #1
 8010cac:	d0e6      	beq.n	8010c7c <_printf_common+0xa4>
 8010cae:	3601      	adds	r6, #1
 8010cb0:	e7d9      	b.n	8010c66 <_printf_common+0x8e>
	...

08010cb4 <_printf_i>:
 8010cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010cb8:	7e0f      	ldrb	r7, [r1, #24]
 8010cba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010cbc:	2f78      	cmp	r7, #120	@ 0x78
 8010cbe:	4691      	mov	r9, r2
 8010cc0:	4680      	mov	r8, r0
 8010cc2:	460c      	mov	r4, r1
 8010cc4:	469a      	mov	sl, r3
 8010cc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010cca:	d807      	bhi.n	8010cdc <_printf_i+0x28>
 8010ccc:	2f62      	cmp	r7, #98	@ 0x62
 8010cce:	d80a      	bhi.n	8010ce6 <_printf_i+0x32>
 8010cd0:	2f00      	cmp	r7, #0
 8010cd2:	f000 80d2 	beq.w	8010e7a <_printf_i+0x1c6>
 8010cd6:	2f58      	cmp	r7, #88	@ 0x58
 8010cd8:	f000 80b9 	beq.w	8010e4e <_printf_i+0x19a>
 8010cdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010ce0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010ce4:	e03a      	b.n	8010d5c <_printf_i+0xa8>
 8010ce6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010cea:	2b15      	cmp	r3, #21
 8010cec:	d8f6      	bhi.n	8010cdc <_printf_i+0x28>
 8010cee:	a101      	add	r1, pc, #4	@ (adr r1, 8010cf4 <_printf_i+0x40>)
 8010cf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010cf4:	08010d4d 	.word	0x08010d4d
 8010cf8:	08010d61 	.word	0x08010d61
 8010cfc:	08010cdd 	.word	0x08010cdd
 8010d00:	08010cdd 	.word	0x08010cdd
 8010d04:	08010cdd 	.word	0x08010cdd
 8010d08:	08010cdd 	.word	0x08010cdd
 8010d0c:	08010d61 	.word	0x08010d61
 8010d10:	08010cdd 	.word	0x08010cdd
 8010d14:	08010cdd 	.word	0x08010cdd
 8010d18:	08010cdd 	.word	0x08010cdd
 8010d1c:	08010cdd 	.word	0x08010cdd
 8010d20:	08010e61 	.word	0x08010e61
 8010d24:	08010d8b 	.word	0x08010d8b
 8010d28:	08010e1b 	.word	0x08010e1b
 8010d2c:	08010cdd 	.word	0x08010cdd
 8010d30:	08010cdd 	.word	0x08010cdd
 8010d34:	08010e83 	.word	0x08010e83
 8010d38:	08010cdd 	.word	0x08010cdd
 8010d3c:	08010d8b 	.word	0x08010d8b
 8010d40:	08010cdd 	.word	0x08010cdd
 8010d44:	08010cdd 	.word	0x08010cdd
 8010d48:	08010e23 	.word	0x08010e23
 8010d4c:	6833      	ldr	r3, [r6, #0]
 8010d4e:	1d1a      	adds	r2, r3, #4
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	6032      	str	r2, [r6, #0]
 8010d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010d58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	e09d      	b.n	8010e9c <_printf_i+0x1e8>
 8010d60:	6833      	ldr	r3, [r6, #0]
 8010d62:	6820      	ldr	r0, [r4, #0]
 8010d64:	1d19      	adds	r1, r3, #4
 8010d66:	6031      	str	r1, [r6, #0]
 8010d68:	0606      	lsls	r6, r0, #24
 8010d6a:	d501      	bpl.n	8010d70 <_printf_i+0xbc>
 8010d6c:	681d      	ldr	r5, [r3, #0]
 8010d6e:	e003      	b.n	8010d78 <_printf_i+0xc4>
 8010d70:	0645      	lsls	r5, r0, #25
 8010d72:	d5fb      	bpl.n	8010d6c <_printf_i+0xb8>
 8010d74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010d78:	2d00      	cmp	r5, #0
 8010d7a:	da03      	bge.n	8010d84 <_printf_i+0xd0>
 8010d7c:	232d      	movs	r3, #45	@ 0x2d
 8010d7e:	426d      	negs	r5, r5
 8010d80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010d84:	4859      	ldr	r0, [pc, #356]	@ (8010eec <_printf_i+0x238>)
 8010d86:	230a      	movs	r3, #10
 8010d88:	e011      	b.n	8010dae <_printf_i+0xfa>
 8010d8a:	6821      	ldr	r1, [r4, #0]
 8010d8c:	6833      	ldr	r3, [r6, #0]
 8010d8e:	0608      	lsls	r0, r1, #24
 8010d90:	f853 5b04 	ldr.w	r5, [r3], #4
 8010d94:	d402      	bmi.n	8010d9c <_printf_i+0xe8>
 8010d96:	0649      	lsls	r1, r1, #25
 8010d98:	bf48      	it	mi
 8010d9a:	b2ad      	uxthmi	r5, r5
 8010d9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8010d9e:	4853      	ldr	r0, [pc, #332]	@ (8010eec <_printf_i+0x238>)
 8010da0:	6033      	str	r3, [r6, #0]
 8010da2:	bf14      	ite	ne
 8010da4:	230a      	movne	r3, #10
 8010da6:	2308      	moveq	r3, #8
 8010da8:	2100      	movs	r1, #0
 8010daa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010dae:	6866      	ldr	r6, [r4, #4]
 8010db0:	60a6      	str	r6, [r4, #8]
 8010db2:	2e00      	cmp	r6, #0
 8010db4:	bfa2      	ittt	ge
 8010db6:	6821      	ldrge	r1, [r4, #0]
 8010db8:	f021 0104 	bicge.w	r1, r1, #4
 8010dbc:	6021      	strge	r1, [r4, #0]
 8010dbe:	b90d      	cbnz	r5, 8010dc4 <_printf_i+0x110>
 8010dc0:	2e00      	cmp	r6, #0
 8010dc2:	d04b      	beq.n	8010e5c <_printf_i+0x1a8>
 8010dc4:	4616      	mov	r6, r2
 8010dc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8010dca:	fb03 5711 	mls	r7, r3, r1, r5
 8010dce:	5dc7      	ldrb	r7, [r0, r7]
 8010dd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010dd4:	462f      	mov	r7, r5
 8010dd6:	42bb      	cmp	r3, r7
 8010dd8:	460d      	mov	r5, r1
 8010dda:	d9f4      	bls.n	8010dc6 <_printf_i+0x112>
 8010ddc:	2b08      	cmp	r3, #8
 8010dde:	d10b      	bne.n	8010df8 <_printf_i+0x144>
 8010de0:	6823      	ldr	r3, [r4, #0]
 8010de2:	07df      	lsls	r7, r3, #31
 8010de4:	d508      	bpl.n	8010df8 <_printf_i+0x144>
 8010de6:	6923      	ldr	r3, [r4, #16]
 8010de8:	6861      	ldr	r1, [r4, #4]
 8010dea:	4299      	cmp	r1, r3
 8010dec:	bfde      	ittt	le
 8010dee:	2330      	movle	r3, #48	@ 0x30
 8010df0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010df4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010df8:	1b92      	subs	r2, r2, r6
 8010dfa:	6122      	str	r2, [r4, #16]
 8010dfc:	f8cd a000 	str.w	sl, [sp]
 8010e00:	464b      	mov	r3, r9
 8010e02:	aa03      	add	r2, sp, #12
 8010e04:	4621      	mov	r1, r4
 8010e06:	4640      	mov	r0, r8
 8010e08:	f7ff fee6 	bl	8010bd8 <_printf_common>
 8010e0c:	3001      	adds	r0, #1
 8010e0e:	d14a      	bne.n	8010ea6 <_printf_i+0x1f2>
 8010e10:	f04f 30ff 	mov.w	r0, #4294967295
 8010e14:	b004      	add	sp, #16
 8010e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e1a:	6823      	ldr	r3, [r4, #0]
 8010e1c:	f043 0320 	orr.w	r3, r3, #32
 8010e20:	6023      	str	r3, [r4, #0]
 8010e22:	4833      	ldr	r0, [pc, #204]	@ (8010ef0 <_printf_i+0x23c>)
 8010e24:	2778      	movs	r7, #120	@ 0x78
 8010e26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010e2a:	6823      	ldr	r3, [r4, #0]
 8010e2c:	6831      	ldr	r1, [r6, #0]
 8010e2e:	061f      	lsls	r7, r3, #24
 8010e30:	f851 5b04 	ldr.w	r5, [r1], #4
 8010e34:	d402      	bmi.n	8010e3c <_printf_i+0x188>
 8010e36:	065f      	lsls	r7, r3, #25
 8010e38:	bf48      	it	mi
 8010e3a:	b2ad      	uxthmi	r5, r5
 8010e3c:	6031      	str	r1, [r6, #0]
 8010e3e:	07d9      	lsls	r1, r3, #31
 8010e40:	bf44      	itt	mi
 8010e42:	f043 0320 	orrmi.w	r3, r3, #32
 8010e46:	6023      	strmi	r3, [r4, #0]
 8010e48:	b11d      	cbz	r5, 8010e52 <_printf_i+0x19e>
 8010e4a:	2310      	movs	r3, #16
 8010e4c:	e7ac      	b.n	8010da8 <_printf_i+0xf4>
 8010e4e:	4827      	ldr	r0, [pc, #156]	@ (8010eec <_printf_i+0x238>)
 8010e50:	e7e9      	b.n	8010e26 <_printf_i+0x172>
 8010e52:	6823      	ldr	r3, [r4, #0]
 8010e54:	f023 0320 	bic.w	r3, r3, #32
 8010e58:	6023      	str	r3, [r4, #0]
 8010e5a:	e7f6      	b.n	8010e4a <_printf_i+0x196>
 8010e5c:	4616      	mov	r6, r2
 8010e5e:	e7bd      	b.n	8010ddc <_printf_i+0x128>
 8010e60:	6833      	ldr	r3, [r6, #0]
 8010e62:	6825      	ldr	r5, [r4, #0]
 8010e64:	6961      	ldr	r1, [r4, #20]
 8010e66:	1d18      	adds	r0, r3, #4
 8010e68:	6030      	str	r0, [r6, #0]
 8010e6a:	062e      	lsls	r6, r5, #24
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	d501      	bpl.n	8010e74 <_printf_i+0x1c0>
 8010e70:	6019      	str	r1, [r3, #0]
 8010e72:	e002      	b.n	8010e7a <_printf_i+0x1c6>
 8010e74:	0668      	lsls	r0, r5, #25
 8010e76:	d5fb      	bpl.n	8010e70 <_printf_i+0x1bc>
 8010e78:	8019      	strh	r1, [r3, #0]
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	6123      	str	r3, [r4, #16]
 8010e7e:	4616      	mov	r6, r2
 8010e80:	e7bc      	b.n	8010dfc <_printf_i+0x148>
 8010e82:	6833      	ldr	r3, [r6, #0]
 8010e84:	1d1a      	adds	r2, r3, #4
 8010e86:	6032      	str	r2, [r6, #0]
 8010e88:	681e      	ldr	r6, [r3, #0]
 8010e8a:	6862      	ldr	r2, [r4, #4]
 8010e8c:	2100      	movs	r1, #0
 8010e8e:	4630      	mov	r0, r6
 8010e90:	f7ef f9c6 	bl	8000220 <memchr>
 8010e94:	b108      	cbz	r0, 8010e9a <_printf_i+0x1e6>
 8010e96:	1b80      	subs	r0, r0, r6
 8010e98:	6060      	str	r0, [r4, #4]
 8010e9a:	6863      	ldr	r3, [r4, #4]
 8010e9c:	6123      	str	r3, [r4, #16]
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ea4:	e7aa      	b.n	8010dfc <_printf_i+0x148>
 8010ea6:	6923      	ldr	r3, [r4, #16]
 8010ea8:	4632      	mov	r2, r6
 8010eaa:	4649      	mov	r1, r9
 8010eac:	4640      	mov	r0, r8
 8010eae:	47d0      	blx	sl
 8010eb0:	3001      	adds	r0, #1
 8010eb2:	d0ad      	beq.n	8010e10 <_printf_i+0x15c>
 8010eb4:	6823      	ldr	r3, [r4, #0]
 8010eb6:	079b      	lsls	r3, r3, #30
 8010eb8:	d413      	bmi.n	8010ee2 <_printf_i+0x22e>
 8010eba:	68e0      	ldr	r0, [r4, #12]
 8010ebc:	9b03      	ldr	r3, [sp, #12]
 8010ebe:	4298      	cmp	r0, r3
 8010ec0:	bfb8      	it	lt
 8010ec2:	4618      	movlt	r0, r3
 8010ec4:	e7a6      	b.n	8010e14 <_printf_i+0x160>
 8010ec6:	2301      	movs	r3, #1
 8010ec8:	4632      	mov	r2, r6
 8010eca:	4649      	mov	r1, r9
 8010ecc:	4640      	mov	r0, r8
 8010ece:	47d0      	blx	sl
 8010ed0:	3001      	adds	r0, #1
 8010ed2:	d09d      	beq.n	8010e10 <_printf_i+0x15c>
 8010ed4:	3501      	adds	r5, #1
 8010ed6:	68e3      	ldr	r3, [r4, #12]
 8010ed8:	9903      	ldr	r1, [sp, #12]
 8010eda:	1a5b      	subs	r3, r3, r1
 8010edc:	42ab      	cmp	r3, r5
 8010ede:	dcf2      	bgt.n	8010ec6 <_printf_i+0x212>
 8010ee0:	e7eb      	b.n	8010eba <_printf_i+0x206>
 8010ee2:	2500      	movs	r5, #0
 8010ee4:	f104 0619 	add.w	r6, r4, #25
 8010ee8:	e7f5      	b.n	8010ed6 <_printf_i+0x222>
 8010eea:	bf00      	nop
 8010eec:	08016d80 	.word	0x08016d80
 8010ef0:	08016d91 	.word	0x08016d91

08010ef4 <_scanf_float>:
 8010ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ef8:	b087      	sub	sp, #28
 8010efa:	4617      	mov	r7, r2
 8010efc:	9303      	str	r3, [sp, #12]
 8010efe:	688b      	ldr	r3, [r1, #8]
 8010f00:	1e5a      	subs	r2, r3, #1
 8010f02:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010f06:	bf81      	itttt	hi
 8010f08:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010f0c:	eb03 0b05 	addhi.w	fp, r3, r5
 8010f10:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010f14:	608b      	strhi	r3, [r1, #8]
 8010f16:	680b      	ldr	r3, [r1, #0]
 8010f18:	460a      	mov	r2, r1
 8010f1a:	f04f 0500 	mov.w	r5, #0
 8010f1e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8010f22:	f842 3b1c 	str.w	r3, [r2], #28
 8010f26:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010f2a:	4680      	mov	r8, r0
 8010f2c:	460c      	mov	r4, r1
 8010f2e:	bf98      	it	ls
 8010f30:	f04f 0b00 	movls.w	fp, #0
 8010f34:	9201      	str	r2, [sp, #4]
 8010f36:	4616      	mov	r6, r2
 8010f38:	46aa      	mov	sl, r5
 8010f3a:	46a9      	mov	r9, r5
 8010f3c:	9502      	str	r5, [sp, #8]
 8010f3e:	68a2      	ldr	r2, [r4, #8]
 8010f40:	b152      	cbz	r2, 8010f58 <_scanf_float+0x64>
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	781b      	ldrb	r3, [r3, #0]
 8010f46:	2b4e      	cmp	r3, #78	@ 0x4e
 8010f48:	d864      	bhi.n	8011014 <_scanf_float+0x120>
 8010f4a:	2b40      	cmp	r3, #64	@ 0x40
 8010f4c:	d83c      	bhi.n	8010fc8 <_scanf_float+0xd4>
 8010f4e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8010f52:	b2c8      	uxtb	r0, r1
 8010f54:	280e      	cmp	r0, #14
 8010f56:	d93a      	bls.n	8010fce <_scanf_float+0xda>
 8010f58:	f1b9 0f00 	cmp.w	r9, #0
 8010f5c:	d003      	beq.n	8010f66 <_scanf_float+0x72>
 8010f5e:	6823      	ldr	r3, [r4, #0]
 8010f60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010f64:	6023      	str	r3, [r4, #0]
 8010f66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010f6a:	f1ba 0f01 	cmp.w	sl, #1
 8010f6e:	f200 8117 	bhi.w	80111a0 <_scanf_float+0x2ac>
 8010f72:	9b01      	ldr	r3, [sp, #4]
 8010f74:	429e      	cmp	r6, r3
 8010f76:	f200 8108 	bhi.w	801118a <_scanf_float+0x296>
 8010f7a:	2001      	movs	r0, #1
 8010f7c:	b007      	add	sp, #28
 8010f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f82:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8010f86:	2a0d      	cmp	r2, #13
 8010f88:	d8e6      	bhi.n	8010f58 <_scanf_float+0x64>
 8010f8a:	a101      	add	r1, pc, #4	@ (adr r1, 8010f90 <_scanf_float+0x9c>)
 8010f8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010f90:	080110d7 	.word	0x080110d7
 8010f94:	08010f59 	.word	0x08010f59
 8010f98:	08010f59 	.word	0x08010f59
 8010f9c:	08010f59 	.word	0x08010f59
 8010fa0:	08011137 	.word	0x08011137
 8010fa4:	0801110f 	.word	0x0801110f
 8010fa8:	08010f59 	.word	0x08010f59
 8010fac:	08010f59 	.word	0x08010f59
 8010fb0:	080110e5 	.word	0x080110e5
 8010fb4:	08010f59 	.word	0x08010f59
 8010fb8:	08010f59 	.word	0x08010f59
 8010fbc:	08010f59 	.word	0x08010f59
 8010fc0:	08010f59 	.word	0x08010f59
 8010fc4:	0801109d 	.word	0x0801109d
 8010fc8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8010fcc:	e7db      	b.n	8010f86 <_scanf_float+0x92>
 8010fce:	290e      	cmp	r1, #14
 8010fd0:	d8c2      	bhi.n	8010f58 <_scanf_float+0x64>
 8010fd2:	a001      	add	r0, pc, #4	@ (adr r0, 8010fd8 <_scanf_float+0xe4>)
 8010fd4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010fd8:	0801108d 	.word	0x0801108d
 8010fdc:	08010f59 	.word	0x08010f59
 8010fe0:	0801108d 	.word	0x0801108d
 8010fe4:	08011123 	.word	0x08011123
 8010fe8:	08010f59 	.word	0x08010f59
 8010fec:	08011035 	.word	0x08011035
 8010ff0:	08011073 	.word	0x08011073
 8010ff4:	08011073 	.word	0x08011073
 8010ff8:	08011073 	.word	0x08011073
 8010ffc:	08011073 	.word	0x08011073
 8011000:	08011073 	.word	0x08011073
 8011004:	08011073 	.word	0x08011073
 8011008:	08011073 	.word	0x08011073
 801100c:	08011073 	.word	0x08011073
 8011010:	08011073 	.word	0x08011073
 8011014:	2b6e      	cmp	r3, #110	@ 0x6e
 8011016:	d809      	bhi.n	801102c <_scanf_float+0x138>
 8011018:	2b60      	cmp	r3, #96	@ 0x60
 801101a:	d8b2      	bhi.n	8010f82 <_scanf_float+0x8e>
 801101c:	2b54      	cmp	r3, #84	@ 0x54
 801101e:	d07b      	beq.n	8011118 <_scanf_float+0x224>
 8011020:	2b59      	cmp	r3, #89	@ 0x59
 8011022:	d199      	bne.n	8010f58 <_scanf_float+0x64>
 8011024:	2d07      	cmp	r5, #7
 8011026:	d197      	bne.n	8010f58 <_scanf_float+0x64>
 8011028:	2508      	movs	r5, #8
 801102a:	e02c      	b.n	8011086 <_scanf_float+0x192>
 801102c:	2b74      	cmp	r3, #116	@ 0x74
 801102e:	d073      	beq.n	8011118 <_scanf_float+0x224>
 8011030:	2b79      	cmp	r3, #121	@ 0x79
 8011032:	e7f6      	b.n	8011022 <_scanf_float+0x12e>
 8011034:	6821      	ldr	r1, [r4, #0]
 8011036:	05c8      	lsls	r0, r1, #23
 8011038:	d51b      	bpl.n	8011072 <_scanf_float+0x17e>
 801103a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801103e:	6021      	str	r1, [r4, #0]
 8011040:	f109 0901 	add.w	r9, r9, #1
 8011044:	f1bb 0f00 	cmp.w	fp, #0
 8011048:	d003      	beq.n	8011052 <_scanf_float+0x15e>
 801104a:	3201      	adds	r2, #1
 801104c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011050:	60a2      	str	r2, [r4, #8]
 8011052:	68a3      	ldr	r3, [r4, #8]
 8011054:	3b01      	subs	r3, #1
 8011056:	60a3      	str	r3, [r4, #8]
 8011058:	6923      	ldr	r3, [r4, #16]
 801105a:	3301      	adds	r3, #1
 801105c:	6123      	str	r3, [r4, #16]
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	3b01      	subs	r3, #1
 8011062:	2b00      	cmp	r3, #0
 8011064:	607b      	str	r3, [r7, #4]
 8011066:	f340 8087 	ble.w	8011178 <_scanf_float+0x284>
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	3301      	adds	r3, #1
 801106e:	603b      	str	r3, [r7, #0]
 8011070:	e765      	b.n	8010f3e <_scanf_float+0x4a>
 8011072:	eb1a 0105 	adds.w	r1, sl, r5
 8011076:	f47f af6f 	bne.w	8010f58 <_scanf_float+0x64>
 801107a:	6822      	ldr	r2, [r4, #0]
 801107c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011080:	6022      	str	r2, [r4, #0]
 8011082:	460d      	mov	r5, r1
 8011084:	468a      	mov	sl, r1
 8011086:	f806 3b01 	strb.w	r3, [r6], #1
 801108a:	e7e2      	b.n	8011052 <_scanf_float+0x15e>
 801108c:	6822      	ldr	r2, [r4, #0]
 801108e:	0610      	lsls	r0, r2, #24
 8011090:	f57f af62 	bpl.w	8010f58 <_scanf_float+0x64>
 8011094:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011098:	6022      	str	r2, [r4, #0]
 801109a:	e7f4      	b.n	8011086 <_scanf_float+0x192>
 801109c:	f1ba 0f00 	cmp.w	sl, #0
 80110a0:	d10e      	bne.n	80110c0 <_scanf_float+0x1cc>
 80110a2:	f1b9 0f00 	cmp.w	r9, #0
 80110a6:	d10e      	bne.n	80110c6 <_scanf_float+0x1d2>
 80110a8:	6822      	ldr	r2, [r4, #0]
 80110aa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80110ae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80110b2:	d108      	bne.n	80110c6 <_scanf_float+0x1d2>
 80110b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80110b8:	6022      	str	r2, [r4, #0]
 80110ba:	f04f 0a01 	mov.w	sl, #1
 80110be:	e7e2      	b.n	8011086 <_scanf_float+0x192>
 80110c0:	f1ba 0f02 	cmp.w	sl, #2
 80110c4:	d055      	beq.n	8011172 <_scanf_float+0x27e>
 80110c6:	2d01      	cmp	r5, #1
 80110c8:	d002      	beq.n	80110d0 <_scanf_float+0x1dc>
 80110ca:	2d04      	cmp	r5, #4
 80110cc:	f47f af44 	bne.w	8010f58 <_scanf_float+0x64>
 80110d0:	3501      	adds	r5, #1
 80110d2:	b2ed      	uxtb	r5, r5
 80110d4:	e7d7      	b.n	8011086 <_scanf_float+0x192>
 80110d6:	f1ba 0f01 	cmp.w	sl, #1
 80110da:	f47f af3d 	bne.w	8010f58 <_scanf_float+0x64>
 80110de:	f04f 0a02 	mov.w	sl, #2
 80110e2:	e7d0      	b.n	8011086 <_scanf_float+0x192>
 80110e4:	b97d      	cbnz	r5, 8011106 <_scanf_float+0x212>
 80110e6:	f1b9 0f00 	cmp.w	r9, #0
 80110ea:	f47f af38 	bne.w	8010f5e <_scanf_float+0x6a>
 80110ee:	6822      	ldr	r2, [r4, #0]
 80110f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80110f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80110f8:	f040 8108 	bne.w	801130c <_scanf_float+0x418>
 80110fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011100:	6022      	str	r2, [r4, #0]
 8011102:	2501      	movs	r5, #1
 8011104:	e7bf      	b.n	8011086 <_scanf_float+0x192>
 8011106:	2d03      	cmp	r5, #3
 8011108:	d0e2      	beq.n	80110d0 <_scanf_float+0x1dc>
 801110a:	2d05      	cmp	r5, #5
 801110c:	e7de      	b.n	80110cc <_scanf_float+0x1d8>
 801110e:	2d02      	cmp	r5, #2
 8011110:	f47f af22 	bne.w	8010f58 <_scanf_float+0x64>
 8011114:	2503      	movs	r5, #3
 8011116:	e7b6      	b.n	8011086 <_scanf_float+0x192>
 8011118:	2d06      	cmp	r5, #6
 801111a:	f47f af1d 	bne.w	8010f58 <_scanf_float+0x64>
 801111e:	2507      	movs	r5, #7
 8011120:	e7b1      	b.n	8011086 <_scanf_float+0x192>
 8011122:	6822      	ldr	r2, [r4, #0]
 8011124:	0591      	lsls	r1, r2, #22
 8011126:	f57f af17 	bpl.w	8010f58 <_scanf_float+0x64>
 801112a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801112e:	6022      	str	r2, [r4, #0]
 8011130:	f8cd 9008 	str.w	r9, [sp, #8]
 8011134:	e7a7      	b.n	8011086 <_scanf_float+0x192>
 8011136:	6822      	ldr	r2, [r4, #0]
 8011138:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801113c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011140:	d006      	beq.n	8011150 <_scanf_float+0x25c>
 8011142:	0550      	lsls	r0, r2, #21
 8011144:	f57f af08 	bpl.w	8010f58 <_scanf_float+0x64>
 8011148:	f1b9 0f00 	cmp.w	r9, #0
 801114c:	f000 80de 	beq.w	801130c <_scanf_float+0x418>
 8011150:	0591      	lsls	r1, r2, #22
 8011152:	bf58      	it	pl
 8011154:	9902      	ldrpl	r1, [sp, #8]
 8011156:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801115a:	bf58      	it	pl
 801115c:	eba9 0101 	subpl.w	r1, r9, r1
 8011160:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011164:	bf58      	it	pl
 8011166:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801116a:	6022      	str	r2, [r4, #0]
 801116c:	f04f 0900 	mov.w	r9, #0
 8011170:	e789      	b.n	8011086 <_scanf_float+0x192>
 8011172:	f04f 0a03 	mov.w	sl, #3
 8011176:	e786      	b.n	8011086 <_scanf_float+0x192>
 8011178:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801117c:	4639      	mov	r1, r7
 801117e:	4640      	mov	r0, r8
 8011180:	4798      	blx	r3
 8011182:	2800      	cmp	r0, #0
 8011184:	f43f aedb 	beq.w	8010f3e <_scanf_float+0x4a>
 8011188:	e6e6      	b.n	8010f58 <_scanf_float+0x64>
 801118a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801118e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011192:	463a      	mov	r2, r7
 8011194:	4640      	mov	r0, r8
 8011196:	4798      	blx	r3
 8011198:	6923      	ldr	r3, [r4, #16]
 801119a:	3b01      	subs	r3, #1
 801119c:	6123      	str	r3, [r4, #16]
 801119e:	e6e8      	b.n	8010f72 <_scanf_float+0x7e>
 80111a0:	1e6b      	subs	r3, r5, #1
 80111a2:	2b06      	cmp	r3, #6
 80111a4:	d824      	bhi.n	80111f0 <_scanf_float+0x2fc>
 80111a6:	2d02      	cmp	r5, #2
 80111a8:	d836      	bhi.n	8011218 <_scanf_float+0x324>
 80111aa:	9b01      	ldr	r3, [sp, #4]
 80111ac:	429e      	cmp	r6, r3
 80111ae:	f67f aee4 	bls.w	8010f7a <_scanf_float+0x86>
 80111b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80111b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80111ba:	463a      	mov	r2, r7
 80111bc:	4640      	mov	r0, r8
 80111be:	4798      	blx	r3
 80111c0:	6923      	ldr	r3, [r4, #16]
 80111c2:	3b01      	subs	r3, #1
 80111c4:	6123      	str	r3, [r4, #16]
 80111c6:	e7f0      	b.n	80111aa <_scanf_float+0x2b6>
 80111c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80111cc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80111d0:	463a      	mov	r2, r7
 80111d2:	4640      	mov	r0, r8
 80111d4:	4798      	blx	r3
 80111d6:	6923      	ldr	r3, [r4, #16]
 80111d8:	3b01      	subs	r3, #1
 80111da:	6123      	str	r3, [r4, #16]
 80111dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80111e0:	fa5f fa8a 	uxtb.w	sl, sl
 80111e4:	f1ba 0f02 	cmp.w	sl, #2
 80111e8:	d1ee      	bne.n	80111c8 <_scanf_float+0x2d4>
 80111ea:	3d03      	subs	r5, #3
 80111ec:	b2ed      	uxtb	r5, r5
 80111ee:	1b76      	subs	r6, r6, r5
 80111f0:	6823      	ldr	r3, [r4, #0]
 80111f2:	05da      	lsls	r2, r3, #23
 80111f4:	d530      	bpl.n	8011258 <_scanf_float+0x364>
 80111f6:	055b      	lsls	r3, r3, #21
 80111f8:	d511      	bpl.n	801121e <_scanf_float+0x32a>
 80111fa:	9b01      	ldr	r3, [sp, #4]
 80111fc:	429e      	cmp	r6, r3
 80111fe:	f67f aebc 	bls.w	8010f7a <_scanf_float+0x86>
 8011202:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011206:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801120a:	463a      	mov	r2, r7
 801120c:	4640      	mov	r0, r8
 801120e:	4798      	blx	r3
 8011210:	6923      	ldr	r3, [r4, #16]
 8011212:	3b01      	subs	r3, #1
 8011214:	6123      	str	r3, [r4, #16]
 8011216:	e7f0      	b.n	80111fa <_scanf_float+0x306>
 8011218:	46aa      	mov	sl, r5
 801121a:	46b3      	mov	fp, r6
 801121c:	e7de      	b.n	80111dc <_scanf_float+0x2e8>
 801121e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011222:	6923      	ldr	r3, [r4, #16]
 8011224:	2965      	cmp	r1, #101	@ 0x65
 8011226:	f103 33ff 	add.w	r3, r3, #4294967295
 801122a:	f106 35ff 	add.w	r5, r6, #4294967295
 801122e:	6123      	str	r3, [r4, #16]
 8011230:	d00c      	beq.n	801124c <_scanf_float+0x358>
 8011232:	2945      	cmp	r1, #69	@ 0x45
 8011234:	d00a      	beq.n	801124c <_scanf_float+0x358>
 8011236:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801123a:	463a      	mov	r2, r7
 801123c:	4640      	mov	r0, r8
 801123e:	4798      	blx	r3
 8011240:	6923      	ldr	r3, [r4, #16]
 8011242:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011246:	3b01      	subs	r3, #1
 8011248:	1eb5      	subs	r5, r6, #2
 801124a:	6123      	str	r3, [r4, #16]
 801124c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011250:	463a      	mov	r2, r7
 8011252:	4640      	mov	r0, r8
 8011254:	4798      	blx	r3
 8011256:	462e      	mov	r6, r5
 8011258:	6822      	ldr	r2, [r4, #0]
 801125a:	f012 0210 	ands.w	r2, r2, #16
 801125e:	d001      	beq.n	8011264 <_scanf_float+0x370>
 8011260:	2000      	movs	r0, #0
 8011262:	e68b      	b.n	8010f7c <_scanf_float+0x88>
 8011264:	7032      	strb	r2, [r6, #0]
 8011266:	6823      	ldr	r3, [r4, #0]
 8011268:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801126c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011270:	d11c      	bne.n	80112ac <_scanf_float+0x3b8>
 8011272:	9b02      	ldr	r3, [sp, #8]
 8011274:	454b      	cmp	r3, r9
 8011276:	eba3 0209 	sub.w	r2, r3, r9
 801127a:	d123      	bne.n	80112c4 <_scanf_float+0x3d0>
 801127c:	9901      	ldr	r1, [sp, #4]
 801127e:	2200      	movs	r2, #0
 8011280:	4640      	mov	r0, r8
 8011282:	f002 fc45 	bl	8013b10 <_strtod_r>
 8011286:	9b03      	ldr	r3, [sp, #12]
 8011288:	6821      	ldr	r1, [r4, #0]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	f011 0f02 	tst.w	r1, #2
 8011290:	ec57 6b10 	vmov	r6, r7, d0
 8011294:	f103 0204 	add.w	r2, r3, #4
 8011298:	d01f      	beq.n	80112da <_scanf_float+0x3e6>
 801129a:	9903      	ldr	r1, [sp, #12]
 801129c:	600a      	str	r2, [r1, #0]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	e9c3 6700 	strd	r6, r7, [r3]
 80112a4:	68e3      	ldr	r3, [r4, #12]
 80112a6:	3301      	adds	r3, #1
 80112a8:	60e3      	str	r3, [r4, #12]
 80112aa:	e7d9      	b.n	8011260 <_scanf_float+0x36c>
 80112ac:	9b04      	ldr	r3, [sp, #16]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d0e4      	beq.n	801127c <_scanf_float+0x388>
 80112b2:	9905      	ldr	r1, [sp, #20]
 80112b4:	230a      	movs	r3, #10
 80112b6:	3101      	adds	r1, #1
 80112b8:	4640      	mov	r0, r8
 80112ba:	f002 fca9 	bl	8013c10 <_strtol_r>
 80112be:	9b04      	ldr	r3, [sp, #16]
 80112c0:	9e05      	ldr	r6, [sp, #20]
 80112c2:	1ac2      	subs	r2, r0, r3
 80112c4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80112c8:	429e      	cmp	r6, r3
 80112ca:	bf28      	it	cs
 80112cc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80112d0:	4910      	ldr	r1, [pc, #64]	@ (8011314 <_scanf_float+0x420>)
 80112d2:	4630      	mov	r0, r6
 80112d4:	f000 f8e4 	bl	80114a0 <siprintf>
 80112d8:	e7d0      	b.n	801127c <_scanf_float+0x388>
 80112da:	f011 0f04 	tst.w	r1, #4
 80112de:	9903      	ldr	r1, [sp, #12]
 80112e0:	600a      	str	r2, [r1, #0]
 80112e2:	d1dc      	bne.n	801129e <_scanf_float+0x3aa>
 80112e4:	681d      	ldr	r5, [r3, #0]
 80112e6:	4632      	mov	r2, r6
 80112e8:	463b      	mov	r3, r7
 80112ea:	4630      	mov	r0, r6
 80112ec:	4639      	mov	r1, r7
 80112ee:	f7ef fc45 	bl	8000b7c <__aeabi_dcmpun>
 80112f2:	b128      	cbz	r0, 8011300 <_scanf_float+0x40c>
 80112f4:	4808      	ldr	r0, [pc, #32]	@ (8011318 <_scanf_float+0x424>)
 80112f6:	f000 fa03 	bl	8011700 <nanf>
 80112fa:	ed85 0a00 	vstr	s0, [r5]
 80112fe:	e7d1      	b.n	80112a4 <_scanf_float+0x3b0>
 8011300:	4630      	mov	r0, r6
 8011302:	4639      	mov	r1, r7
 8011304:	f7ef fc98 	bl	8000c38 <__aeabi_d2f>
 8011308:	6028      	str	r0, [r5, #0]
 801130a:	e7cb      	b.n	80112a4 <_scanf_float+0x3b0>
 801130c:	f04f 0900 	mov.w	r9, #0
 8011310:	e629      	b.n	8010f66 <_scanf_float+0x72>
 8011312:	bf00      	nop
 8011314:	08016da2 	.word	0x08016da2
 8011318:	08017158 	.word	0x08017158

0801131c <std>:
 801131c:	2300      	movs	r3, #0
 801131e:	b510      	push	{r4, lr}
 8011320:	4604      	mov	r4, r0
 8011322:	e9c0 3300 	strd	r3, r3, [r0]
 8011326:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801132a:	6083      	str	r3, [r0, #8]
 801132c:	8181      	strh	r1, [r0, #12]
 801132e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011330:	81c2      	strh	r2, [r0, #14]
 8011332:	6183      	str	r3, [r0, #24]
 8011334:	4619      	mov	r1, r3
 8011336:	2208      	movs	r2, #8
 8011338:	305c      	adds	r0, #92	@ 0x5c
 801133a:	f000 f940 	bl	80115be <memset>
 801133e:	4b0d      	ldr	r3, [pc, #52]	@ (8011374 <std+0x58>)
 8011340:	6263      	str	r3, [r4, #36]	@ 0x24
 8011342:	4b0d      	ldr	r3, [pc, #52]	@ (8011378 <std+0x5c>)
 8011344:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011346:	4b0d      	ldr	r3, [pc, #52]	@ (801137c <std+0x60>)
 8011348:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801134a:	4b0d      	ldr	r3, [pc, #52]	@ (8011380 <std+0x64>)
 801134c:	6323      	str	r3, [r4, #48]	@ 0x30
 801134e:	4b0d      	ldr	r3, [pc, #52]	@ (8011384 <std+0x68>)
 8011350:	6224      	str	r4, [r4, #32]
 8011352:	429c      	cmp	r4, r3
 8011354:	d006      	beq.n	8011364 <std+0x48>
 8011356:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801135a:	4294      	cmp	r4, r2
 801135c:	d002      	beq.n	8011364 <std+0x48>
 801135e:	33d0      	adds	r3, #208	@ 0xd0
 8011360:	429c      	cmp	r4, r3
 8011362:	d105      	bne.n	8011370 <std+0x54>
 8011364:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801136c:	f000 b9b6 	b.w	80116dc <__retarget_lock_init_recursive>
 8011370:	bd10      	pop	{r4, pc}
 8011372:	bf00      	nop
 8011374:	08011535 	.word	0x08011535
 8011378:	0801155b 	.word	0x0801155b
 801137c:	08011593 	.word	0x08011593
 8011380:	080115b7 	.word	0x080115b7
 8011384:	2000252c 	.word	0x2000252c

08011388 <stdio_exit_handler>:
 8011388:	4a02      	ldr	r2, [pc, #8]	@ (8011394 <stdio_exit_handler+0xc>)
 801138a:	4903      	ldr	r1, [pc, #12]	@ (8011398 <stdio_exit_handler+0x10>)
 801138c:	4803      	ldr	r0, [pc, #12]	@ (801139c <stdio_exit_handler+0x14>)
 801138e:	f000 b869 	b.w	8011464 <_fwalk_sglue>
 8011392:	bf00      	nop
 8011394:	200001a0 	.word	0x200001a0
 8011398:	08014601 	.word	0x08014601
 801139c:	200001b0 	.word	0x200001b0

080113a0 <cleanup_stdio>:
 80113a0:	6841      	ldr	r1, [r0, #4]
 80113a2:	4b0c      	ldr	r3, [pc, #48]	@ (80113d4 <cleanup_stdio+0x34>)
 80113a4:	4299      	cmp	r1, r3
 80113a6:	b510      	push	{r4, lr}
 80113a8:	4604      	mov	r4, r0
 80113aa:	d001      	beq.n	80113b0 <cleanup_stdio+0x10>
 80113ac:	f003 f928 	bl	8014600 <_fflush_r>
 80113b0:	68a1      	ldr	r1, [r4, #8]
 80113b2:	4b09      	ldr	r3, [pc, #36]	@ (80113d8 <cleanup_stdio+0x38>)
 80113b4:	4299      	cmp	r1, r3
 80113b6:	d002      	beq.n	80113be <cleanup_stdio+0x1e>
 80113b8:	4620      	mov	r0, r4
 80113ba:	f003 f921 	bl	8014600 <_fflush_r>
 80113be:	68e1      	ldr	r1, [r4, #12]
 80113c0:	4b06      	ldr	r3, [pc, #24]	@ (80113dc <cleanup_stdio+0x3c>)
 80113c2:	4299      	cmp	r1, r3
 80113c4:	d004      	beq.n	80113d0 <cleanup_stdio+0x30>
 80113c6:	4620      	mov	r0, r4
 80113c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113cc:	f003 b918 	b.w	8014600 <_fflush_r>
 80113d0:	bd10      	pop	{r4, pc}
 80113d2:	bf00      	nop
 80113d4:	2000252c 	.word	0x2000252c
 80113d8:	20002594 	.word	0x20002594
 80113dc:	200025fc 	.word	0x200025fc

080113e0 <global_stdio_init.part.0>:
 80113e0:	b510      	push	{r4, lr}
 80113e2:	4b0b      	ldr	r3, [pc, #44]	@ (8011410 <global_stdio_init.part.0+0x30>)
 80113e4:	4c0b      	ldr	r4, [pc, #44]	@ (8011414 <global_stdio_init.part.0+0x34>)
 80113e6:	4a0c      	ldr	r2, [pc, #48]	@ (8011418 <global_stdio_init.part.0+0x38>)
 80113e8:	601a      	str	r2, [r3, #0]
 80113ea:	4620      	mov	r0, r4
 80113ec:	2200      	movs	r2, #0
 80113ee:	2104      	movs	r1, #4
 80113f0:	f7ff ff94 	bl	801131c <std>
 80113f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80113f8:	2201      	movs	r2, #1
 80113fa:	2109      	movs	r1, #9
 80113fc:	f7ff ff8e 	bl	801131c <std>
 8011400:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011404:	2202      	movs	r2, #2
 8011406:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801140a:	2112      	movs	r1, #18
 801140c:	f7ff bf86 	b.w	801131c <std>
 8011410:	20002664 	.word	0x20002664
 8011414:	2000252c 	.word	0x2000252c
 8011418:	08011389 	.word	0x08011389

0801141c <__sfp_lock_acquire>:
 801141c:	4801      	ldr	r0, [pc, #4]	@ (8011424 <__sfp_lock_acquire+0x8>)
 801141e:	f000 b95e 	b.w	80116de <__retarget_lock_acquire_recursive>
 8011422:	bf00      	nop
 8011424:	2000266d 	.word	0x2000266d

08011428 <__sfp_lock_release>:
 8011428:	4801      	ldr	r0, [pc, #4]	@ (8011430 <__sfp_lock_release+0x8>)
 801142a:	f000 b959 	b.w	80116e0 <__retarget_lock_release_recursive>
 801142e:	bf00      	nop
 8011430:	2000266d 	.word	0x2000266d

08011434 <__sinit>:
 8011434:	b510      	push	{r4, lr}
 8011436:	4604      	mov	r4, r0
 8011438:	f7ff fff0 	bl	801141c <__sfp_lock_acquire>
 801143c:	6a23      	ldr	r3, [r4, #32]
 801143e:	b11b      	cbz	r3, 8011448 <__sinit+0x14>
 8011440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011444:	f7ff bff0 	b.w	8011428 <__sfp_lock_release>
 8011448:	4b04      	ldr	r3, [pc, #16]	@ (801145c <__sinit+0x28>)
 801144a:	6223      	str	r3, [r4, #32]
 801144c:	4b04      	ldr	r3, [pc, #16]	@ (8011460 <__sinit+0x2c>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d1f5      	bne.n	8011440 <__sinit+0xc>
 8011454:	f7ff ffc4 	bl	80113e0 <global_stdio_init.part.0>
 8011458:	e7f2      	b.n	8011440 <__sinit+0xc>
 801145a:	bf00      	nop
 801145c:	080113a1 	.word	0x080113a1
 8011460:	20002664 	.word	0x20002664

08011464 <_fwalk_sglue>:
 8011464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011468:	4607      	mov	r7, r0
 801146a:	4688      	mov	r8, r1
 801146c:	4614      	mov	r4, r2
 801146e:	2600      	movs	r6, #0
 8011470:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011474:	f1b9 0901 	subs.w	r9, r9, #1
 8011478:	d505      	bpl.n	8011486 <_fwalk_sglue+0x22>
 801147a:	6824      	ldr	r4, [r4, #0]
 801147c:	2c00      	cmp	r4, #0
 801147e:	d1f7      	bne.n	8011470 <_fwalk_sglue+0xc>
 8011480:	4630      	mov	r0, r6
 8011482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011486:	89ab      	ldrh	r3, [r5, #12]
 8011488:	2b01      	cmp	r3, #1
 801148a:	d907      	bls.n	801149c <_fwalk_sglue+0x38>
 801148c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011490:	3301      	adds	r3, #1
 8011492:	d003      	beq.n	801149c <_fwalk_sglue+0x38>
 8011494:	4629      	mov	r1, r5
 8011496:	4638      	mov	r0, r7
 8011498:	47c0      	blx	r8
 801149a:	4306      	orrs	r6, r0
 801149c:	3568      	adds	r5, #104	@ 0x68
 801149e:	e7e9      	b.n	8011474 <_fwalk_sglue+0x10>

080114a0 <siprintf>:
 80114a0:	b40e      	push	{r1, r2, r3}
 80114a2:	b500      	push	{lr}
 80114a4:	b09c      	sub	sp, #112	@ 0x70
 80114a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80114a8:	9002      	str	r0, [sp, #8]
 80114aa:	9006      	str	r0, [sp, #24]
 80114ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80114b0:	4809      	ldr	r0, [pc, #36]	@ (80114d8 <siprintf+0x38>)
 80114b2:	9107      	str	r1, [sp, #28]
 80114b4:	9104      	str	r1, [sp, #16]
 80114b6:	4909      	ldr	r1, [pc, #36]	@ (80114dc <siprintf+0x3c>)
 80114b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80114bc:	9105      	str	r1, [sp, #20]
 80114be:	6800      	ldr	r0, [r0, #0]
 80114c0:	9301      	str	r3, [sp, #4]
 80114c2:	a902      	add	r1, sp, #8
 80114c4:	f002 fc02 	bl	8013ccc <_svfiprintf_r>
 80114c8:	9b02      	ldr	r3, [sp, #8]
 80114ca:	2200      	movs	r2, #0
 80114cc:	701a      	strb	r2, [r3, #0]
 80114ce:	b01c      	add	sp, #112	@ 0x70
 80114d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80114d4:	b003      	add	sp, #12
 80114d6:	4770      	bx	lr
 80114d8:	200001ac 	.word	0x200001ac
 80114dc:	ffff0208 	.word	0xffff0208

080114e0 <siscanf>:
 80114e0:	b40e      	push	{r1, r2, r3}
 80114e2:	b530      	push	{r4, r5, lr}
 80114e4:	b09c      	sub	sp, #112	@ 0x70
 80114e6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80114e8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80114ec:	f854 5b04 	ldr.w	r5, [r4], #4
 80114f0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80114f4:	9002      	str	r0, [sp, #8]
 80114f6:	9006      	str	r0, [sp, #24]
 80114f8:	f7ee fee2 	bl	80002c0 <strlen>
 80114fc:	4b0b      	ldr	r3, [pc, #44]	@ (801152c <siscanf+0x4c>)
 80114fe:	9003      	str	r0, [sp, #12]
 8011500:	9007      	str	r0, [sp, #28]
 8011502:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011504:	480a      	ldr	r0, [pc, #40]	@ (8011530 <siscanf+0x50>)
 8011506:	9401      	str	r4, [sp, #4]
 8011508:	2300      	movs	r3, #0
 801150a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801150c:	9314      	str	r3, [sp, #80]	@ 0x50
 801150e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011512:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011516:	462a      	mov	r2, r5
 8011518:	4623      	mov	r3, r4
 801151a:	a902      	add	r1, sp, #8
 801151c:	6800      	ldr	r0, [r0, #0]
 801151e:	f002 fd29 	bl	8013f74 <__ssvfiscanf_r>
 8011522:	b01c      	add	sp, #112	@ 0x70
 8011524:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011528:	b003      	add	sp, #12
 801152a:	4770      	bx	lr
 801152c:	08011557 	.word	0x08011557
 8011530:	200001ac 	.word	0x200001ac

08011534 <__sread>:
 8011534:	b510      	push	{r4, lr}
 8011536:	460c      	mov	r4, r1
 8011538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801153c:	f000 f880 	bl	8011640 <_read_r>
 8011540:	2800      	cmp	r0, #0
 8011542:	bfab      	itete	ge
 8011544:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011546:	89a3      	ldrhlt	r3, [r4, #12]
 8011548:	181b      	addge	r3, r3, r0
 801154a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801154e:	bfac      	ite	ge
 8011550:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011552:	81a3      	strhlt	r3, [r4, #12]
 8011554:	bd10      	pop	{r4, pc}

08011556 <__seofread>:
 8011556:	2000      	movs	r0, #0
 8011558:	4770      	bx	lr

0801155a <__swrite>:
 801155a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801155e:	461f      	mov	r7, r3
 8011560:	898b      	ldrh	r3, [r1, #12]
 8011562:	05db      	lsls	r3, r3, #23
 8011564:	4605      	mov	r5, r0
 8011566:	460c      	mov	r4, r1
 8011568:	4616      	mov	r6, r2
 801156a:	d505      	bpl.n	8011578 <__swrite+0x1e>
 801156c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011570:	2302      	movs	r3, #2
 8011572:	2200      	movs	r2, #0
 8011574:	f000 f852 	bl	801161c <_lseek_r>
 8011578:	89a3      	ldrh	r3, [r4, #12]
 801157a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801157e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011582:	81a3      	strh	r3, [r4, #12]
 8011584:	4632      	mov	r2, r6
 8011586:	463b      	mov	r3, r7
 8011588:	4628      	mov	r0, r5
 801158a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801158e:	f000 b869 	b.w	8011664 <_write_r>

08011592 <__sseek>:
 8011592:	b510      	push	{r4, lr}
 8011594:	460c      	mov	r4, r1
 8011596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801159a:	f000 f83f 	bl	801161c <_lseek_r>
 801159e:	1c43      	adds	r3, r0, #1
 80115a0:	89a3      	ldrh	r3, [r4, #12]
 80115a2:	bf15      	itete	ne
 80115a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80115a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80115aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80115ae:	81a3      	strheq	r3, [r4, #12]
 80115b0:	bf18      	it	ne
 80115b2:	81a3      	strhne	r3, [r4, #12]
 80115b4:	bd10      	pop	{r4, pc}

080115b6 <__sclose>:
 80115b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115ba:	f000 b81f 	b.w	80115fc <_close_r>

080115be <memset>:
 80115be:	4402      	add	r2, r0
 80115c0:	4603      	mov	r3, r0
 80115c2:	4293      	cmp	r3, r2
 80115c4:	d100      	bne.n	80115c8 <memset+0xa>
 80115c6:	4770      	bx	lr
 80115c8:	f803 1b01 	strb.w	r1, [r3], #1
 80115cc:	e7f9      	b.n	80115c2 <memset+0x4>

080115ce <strncmp>:
 80115ce:	b510      	push	{r4, lr}
 80115d0:	b16a      	cbz	r2, 80115ee <strncmp+0x20>
 80115d2:	3901      	subs	r1, #1
 80115d4:	1884      	adds	r4, r0, r2
 80115d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80115da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80115de:	429a      	cmp	r2, r3
 80115e0:	d103      	bne.n	80115ea <strncmp+0x1c>
 80115e2:	42a0      	cmp	r0, r4
 80115e4:	d001      	beq.n	80115ea <strncmp+0x1c>
 80115e6:	2a00      	cmp	r2, #0
 80115e8:	d1f5      	bne.n	80115d6 <strncmp+0x8>
 80115ea:	1ad0      	subs	r0, r2, r3
 80115ec:	bd10      	pop	{r4, pc}
 80115ee:	4610      	mov	r0, r2
 80115f0:	e7fc      	b.n	80115ec <strncmp+0x1e>
	...

080115f4 <_localeconv_r>:
 80115f4:	4800      	ldr	r0, [pc, #0]	@ (80115f8 <_localeconv_r+0x4>)
 80115f6:	4770      	bx	lr
 80115f8:	200002ec 	.word	0x200002ec

080115fc <_close_r>:
 80115fc:	b538      	push	{r3, r4, r5, lr}
 80115fe:	4d06      	ldr	r5, [pc, #24]	@ (8011618 <_close_r+0x1c>)
 8011600:	2300      	movs	r3, #0
 8011602:	4604      	mov	r4, r0
 8011604:	4608      	mov	r0, r1
 8011606:	602b      	str	r3, [r5, #0]
 8011608:	f7f2 fc38 	bl	8003e7c <_close>
 801160c:	1c43      	adds	r3, r0, #1
 801160e:	d102      	bne.n	8011616 <_close_r+0x1a>
 8011610:	682b      	ldr	r3, [r5, #0]
 8011612:	b103      	cbz	r3, 8011616 <_close_r+0x1a>
 8011614:	6023      	str	r3, [r4, #0]
 8011616:	bd38      	pop	{r3, r4, r5, pc}
 8011618:	20002668 	.word	0x20002668

0801161c <_lseek_r>:
 801161c:	b538      	push	{r3, r4, r5, lr}
 801161e:	4d07      	ldr	r5, [pc, #28]	@ (801163c <_lseek_r+0x20>)
 8011620:	4604      	mov	r4, r0
 8011622:	4608      	mov	r0, r1
 8011624:	4611      	mov	r1, r2
 8011626:	2200      	movs	r2, #0
 8011628:	602a      	str	r2, [r5, #0]
 801162a:	461a      	mov	r2, r3
 801162c:	f7f2 fc4d 	bl	8003eca <_lseek>
 8011630:	1c43      	adds	r3, r0, #1
 8011632:	d102      	bne.n	801163a <_lseek_r+0x1e>
 8011634:	682b      	ldr	r3, [r5, #0]
 8011636:	b103      	cbz	r3, 801163a <_lseek_r+0x1e>
 8011638:	6023      	str	r3, [r4, #0]
 801163a:	bd38      	pop	{r3, r4, r5, pc}
 801163c:	20002668 	.word	0x20002668

08011640 <_read_r>:
 8011640:	b538      	push	{r3, r4, r5, lr}
 8011642:	4d07      	ldr	r5, [pc, #28]	@ (8011660 <_read_r+0x20>)
 8011644:	4604      	mov	r4, r0
 8011646:	4608      	mov	r0, r1
 8011648:	4611      	mov	r1, r2
 801164a:	2200      	movs	r2, #0
 801164c:	602a      	str	r2, [r5, #0]
 801164e:	461a      	mov	r2, r3
 8011650:	f7f2 fbdb 	bl	8003e0a <_read>
 8011654:	1c43      	adds	r3, r0, #1
 8011656:	d102      	bne.n	801165e <_read_r+0x1e>
 8011658:	682b      	ldr	r3, [r5, #0]
 801165a:	b103      	cbz	r3, 801165e <_read_r+0x1e>
 801165c:	6023      	str	r3, [r4, #0]
 801165e:	bd38      	pop	{r3, r4, r5, pc}
 8011660:	20002668 	.word	0x20002668

08011664 <_write_r>:
 8011664:	b538      	push	{r3, r4, r5, lr}
 8011666:	4d07      	ldr	r5, [pc, #28]	@ (8011684 <_write_r+0x20>)
 8011668:	4604      	mov	r4, r0
 801166a:	4608      	mov	r0, r1
 801166c:	4611      	mov	r1, r2
 801166e:	2200      	movs	r2, #0
 8011670:	602a      	str	r2, [r5, #0]
 8011672:	461a      	mov	r2, r3
 8011674:	f7f2 fbe6 	bl	8003e44 <_write>
 8011678:	1c43      	adds	r3, r0, #1
 801167a:	d102      	bne.n	8011682 <_write_r+0x1e>
 801167c:	682b      	ldr	r3, [r5, #0]
 801167e:	b103      	cbz	r3, 8011682 <_write_r+0x1e>
 8011680:	6023      	str	r3, [r4, #0]
 8011682:	bd38      	pop	{r3, r4, r5, pc}
 8011684:	20002668 	.word	0x20002668

08011688 <__errno>:
 8011688:	4b01      	ldr	r3, [pc, #4]	@ (8011690 <__errno+0x8>)
 801168a:	6818      	ldr	r0, [r3, #0]
 801168c:	4770      	bx	lr
 801168e:	bf00      	nop
 8011690:	200001ac 	.word	0x200001ac

08011694 <__libc_init_array>:
 8011694:	b570      	push	{r4, r5, r6, lr}
 8011696:	4d0d      	ldr	r5, [pc, #52]	@ (80116cc <__libc_init_array+0x38>)
 8011698:	4c0d      	ldr	r4, [pc, #52]	@ (80116d0 <__libc_init_array+0x3c>)
 801169a:	1b64      	subs	r4, r4, r5
 801169c:	10a4      	asrs	r4, r4, #2
 801169e:	2600      	movs	r6, #0
 80116a0:	42a6      	cmp	r6, r4
 80116a2:	d109      	bne.n	80116b8 <__libc_init_array+0x24>
 80116a4:	4d0b      	ldr	r5, [pc, #44]	@ (80116d4 <__libc_init_array+0x40>)
 80116a6:	4c0c      	ldr	r4, [pc, #48]	@ (80116d8 <__libc_init_array+0x44>)
 80116a8:	f005 f97e 	bl	80169a8 <_init>
 80116ac:	1b64      	subs	r4, r4, r5
 80116ae:	10a4      	asrs	r4, r4, #2
 80116b0:	2600      	movs	r6, #0
 80116b2:	42a6      	cmp	r6, r4
 80116b4:	d105      	bne.n	80116c2 <__libc_init_array+0x2e>
 80116b6:	bd70      	pop	{r4, r5, r6, pc}
 80116b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80116bc:	4798      	blx	r3
 80116be:	3601      	adds	r6, #1
 80116c0:	e7ee      	b.n	80116a0 <__libc_init_array+0xc>
 80116c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80116c6:	4798      	blx	r3
 80116c8:	3601      	adds	r6, #1
 80116ca:	e7f2      	b.n	80116b2 <__libc_init_array+0x1e>
 80116cc:	080171f8 	.word	0x080171f8
 80116d0:	080171f8 	.word	0x080171f8
 80116d4:	080171f8 	.word	0x080171f8
 80116d8:	080171fc 	.word	0x080171fc

080116dc <__retarget_lock_init_recursive>:
 80116dc:	4770      	bx	lr

080116de <__retarget_lock_acquire_recursive>:
 80116de:	4770      	bx	lr

080116e0 <__retarget_lock_release_recursive>:
 80116e0:	4770      	bx	lr

080116e2 <memcpy>:
 80116e2:	440a      	add	r2, r1
 80116e4:	4291      	cmp	r1, r2
 80116e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80116ea:	d100      	bne.n	80116ee <memcpy+0xc>
 80116ec:	4770      	bx	lr
 80116ee:	b510      	push	{r4, lr}
 80116f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80116f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80116f8:	4291      	cmp	r1, r2
 80116fa:	d1f9      	bne.n	80116f0 <memcpy+0xe>
 80116fc:	bd10      	pop	{r4, pc}
	...

08011700 <nanf>:
 8011700:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011708 <nanf+0x8>
 8011704:	4770      	bx	lr
 8011706:	bf00      	nop
 8011708:	7fc00000 	.word	0x7fc00000

0801170c <quorem>:
 801170c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011710:	6903      	ldr	r3, [r0, #16]
 8011712:	690c      	ldr	r4, [r1, #16]
 8011714:	42a3      	cmp	r3, r4
 8011716:	4607      	mov	r7, r0
 8011718:	db7e      	blt.n	8011818 <quorem+0x10c>
 801171a:	3c01      	subs	r4, #1
 801171c:	f101 0814 	add.w	r8, r1, #20
 8011720:	00a3      	lsls	r3, r4, #2
 8011722:	f100 0514 	add.w	r5, r0, #20
 8011726:	9300      	str	r3, [sp, #0]
 8011728:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801172c:	9301      	str	r3, [sp, #4]
 801172e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011732:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011736:	3301      	adds	r3, #1
 8011738:	429a      	cmp	r2, r3
 801173a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801173e:	fbb2 f6f3 	udiv	r6, r2, r3
 8011742:	d32e      	bcc.n	80117a2 <quorem+0x96>
 8011744:	f04f 0a00 	mov.w	sl, #0
 8011748:	46c4      	mov	ip, r8
 801174a:	46ae      	mov	lr, r5
 801174c:	46d3      	mov	fp, sl
 801174e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011752:	b298      	uxth	r0, r3
 8011754:	fb06 a000 	mla	r0, r6, r0, sl
 8011758:	0c02      	lsrs	r2, r0, #16
 801175a:	0c1b      	lsrs	r3, r3, #16
 801175c:	fb06 2303 	mla	r3, r6, r3, r2
 8011760:	f8de 2000 	ldr.w	r2, [lr]
 8011764:	b280      	uxth	r0, r0
 8011766:	b292      	uxth	r2, r2
 8011768:	1a12      	subs	r2, r2, r0
 801176a:	445a      	add	r2, fp
 801176c:	f8de 0000 	ldr.w	r0, [lr]
 8011770:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011774:	b29b      	uxth	r3, r3
 8011776:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801177a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801177e:	b292      	uxth	r2, r2
 8011780:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011784:	45e1      	cmp	r9, ip
 8011786:	f84e 2b04 	str.w	r2, [lr], #4
 801178a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801178e:	d2de      	bcs.n	801174e <quorem+0x42>
 8011790:	9b00      	ldr	r3, [sp, #0]
 8011792:	58eb      	ldr	r3, [r5, r3]
 8011794:	b92b      	cbnz	r3, 80117a2 <quorem+0x96>
 8011796:	9b01      	ldr	r3, [sp, #4]
 8011798:	3b04      	subs	r3, #4
 801179a:	429d      	cmp	r5, r3
 801179c:	461a      	mov	r2, r3
 801179e:	d32f      	bcc.n	8011800 <quorem+0xf4>
 80117a0:	613c      	str	r4, [r7, #16]
 80117a2:	4638      	mov	r0, r7
 80117a4:	f001 f9c4 	bl	8012b30 <__mcmp>
 80117a8:	2800      	cmp	r0, #0
 80117aa:	db25      	blt.n	80117f8 <quorem+0xec>
 80117ac:	4629      	mov	r1, r5
 80117ae:	2000      	movs	r0, #0
 80117b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80117b4:	f8d1 c000 	ldr.w	ip, [r1]
 80117b8:	fa1f fe82 	uxth.w	lr, r2
 80117bc:	fa1f f38c 	uxth.w	r3, ip
 80117c0:	eba3 030e 	sub.w	r3, r3, lr
 80117c4:	4403      	add	r3, r0
 80117c6:	0c12      	lsrs	r2, r2, #16
 80117c8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80117cc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80117d0:	b29b      	uxth	r3, r3
 80117d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80117d6:	45c1      	cmp	r9, r8
 80117d8:	f841 3b04 	str.w	r3, [r1], #4
 80117dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80117e0:	d2e6      	bcs.n	80117b0 <quorem+0xa4>
 80117e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80117e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80117ea:	b922      	cbnz	r2, 80117f6 <quorem+0xea>
 80117ec:	3b04      	subs	r3, #4
 80117ee:	429d      	cmp	r5, r3
 80117f0:	461a      	mov	r2, r3
 80117f2:	d30b      	bcc.n	801180c <quorem+0x100>
 80117f4:	613c      	str	r4, [r7, #16]
 80117f6:	3601      	adds	r6, #1
 80117f8:	4630      	mov	r0, r6
 80117fa:	b003      	add	sp, #12
 80117fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011800:	6812      	ldr	r2, [r2, #0]
 8011802:	3b04      	subs	r3, #4
 8011804:	2a00      	cmp	r2, #0
 8011806:	d1cb      	bne.n	80117a0 <quorem+0x94>
 8011808:	3c01      	subs	r4, #1
 801180a:	e7c6      	b.n	801179a <quorem+0x8e>
 801180c:	6812      	ldr	r2, [r2, #0]
 801180e:	3b04      	subs	r3, #4
 8011810:	2a00      	cmp	r2, #0
 8011812:	d1ef      	bne.n	80117f4 <quorem+0xe8>
 8011814:	3c01      	subs	r4, #1
 8011816:	e7ea      	b.n	80117ee <quorem+0xe2>
 8011818:	2000      	movs	r0, #0
 801181a:	e7ee      	b.n	80117fa <quorem+0xee>
 801181c:	0000      	movs	r0, r0
	...

08011820 <_dtoa_r>:
 8011820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011824:	69c7      	ldr	r7, [r0, #28]
 8011826:	b099      	sub	sp, #100	@ 0x64
 8011828:	ed8d 0b02 	vstr	d0, [sp, #8]
 801182c:	ec55 4b10 	vmov	r4, r5, d0
 8011830:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011832:	9109      	str	r1, [sp, #36]	@ 0x24
 8011834:	4683      	mov	fp, r0
 8011836:	920e      	str	r2, [sp, #56]	@ 0x38
 8011838:	9313      	str	r3, [sp, #76]	@ 0x4c
 801183a:	b97f      	cbnz	r7, 801185c <_dtoa_r+0x3c>
 801183c:	2010      	movs	r0, #16
 801183e:	f000 fdfd 	bl	801243c <malloc>
 8011842:	4602      	mov	r2, r0
 8011844:	f8cb 001c 	str.w	r0, [fp, #28]
 8011848:	b920      	cbnz	r0, 8011854 <_dtoa_r+0x34>
 801184a:	4ba7      	ldr	r3, [pc, #668]	@ (8011ae8 <_dtoa_r+0x2c8>)
 801184c:	21ef      	movs	r1, #239	@ 0xef
 801184e:	48a7      	ldr	r0, [pc, #668]	@ (8011aec <_dtoa_r+0x2cc>)
 8011850:	f002 ffa6 	bl	80147a0 <__assert_func>
 8011854:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011858:	6007      	str	r7, [r0, #0]
 801185a:	60c7      	str	r7, [r0, #12]
 801185c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011860:	6819      	ldr	r1, [r3, #0]
 8011862:	b159      	cbz	r1, 801187c <_dtoa_r+0x5c>
 8011864:	685a      	ldr	r2, [r3, #4]
 8011866:	604a      	str	r2, [r1, #4]
 8011868:	2301      	movs	r3, #1
 801186a:	4093      	lsls	r3, r2
 801186c:	608b      	str	r3, [r1, #8]
 801186e:	4658      	mov	r0, fp
 8011870:	f000 feda 	bl	8012628 <_Bfree>
 8011874:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011878:	2200      	movs	r2, #0
 801187a:	601a      	str	r2, [r3, #0]
 801187c:	1e2b      	subs	r3, r5, #0
 801187e:	bfb9      	ittee	lt
 8011880:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011884:	9303      	strlt	r3, [sp, #12]
 8011886:	2300      	movge	r3, #0
 8011888:	6033      	strge	r3, [r6, #0]
 801188a:	9f03      	ldr	r7, [sp, #12]
 801188c:	4b98      	ldr	r3, [pc, #608]	@ (8011af0 <_dtoa_r+0x2d0>)
 801188e:	bfbc      	itt	lt
 8011890:	2201      	movlt	r2, #1
 8011892:	6032      	strlt	r2, [r6, #0]
 8011894:	43bb      	bics	r3, r7
 8011896:	d112      	bne.n	80118be <_dtoa_r+0x9e>
 8011898:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801189a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801189e:	6013      	str	r3, [r2, #0]
 80118a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80118a4:	4323      	orrs	r3, r4
 80118a6:	f000 854d 	beq.w	8012344 <_dtoa_r+0xb24>
 80118aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80118ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011b04 <_dtoa_r+0x2e4>
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	f000 854f 	beq.w	8012354 <_dtoa_r+0xb34>
 80118b6:	f10a 0303 	add.w	r3, sl, #3
 80118ba:	f000 bd49 	b.w	8012350 <_dtoa_r+0xb30>
 80118be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80118c2:	2200      	movs	r2, #0
 80118c4:	ec51 0b17 	vmov	r0, r1, d7
 80118c8:	2300      	movs	r3, #0
 80118ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80118ce:	f7ef f923 	bl	8000b18 <__aeabi_dcmpeq>
 80118d2:	4680      	mov	r8, r0
 80118d4:	b158      	cbz	r0, 80118ee <_dtoa_r+0xce>
 80118d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80118d8:	2301      	movs	r3, #1
 80118da:	6013      	str	r3, [r2, #0]
 80118dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80118de:	b113      	cbz	r3, 80118e6 <_dtoa_r+0xc6>
 80118e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80118e2:	4b84      	ldr	r3, [pc, #528]	@ (8011af4 <_dtoa_r+0x2d4>)
 80118e4:	6013      	str	r3, [r2, #0]
 80118e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011b08 <_dtoa_r+0x2e8>
 80118ea:	f000 bd33 	b.w	8012354 <_dtoa_r+0xb34>
 80118ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80118f2:	aa16      	add	r2, sp, #88	@ 0x58
 80118f4:	a917      	add	r1, sp, #92	@ 0x5c
 80118f6:	4658      	mov	r0, fp
 80118f8:	f001 fa3a 	bl	8012d70 <__d2b>
 80118fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8011900:	4681      	mov	r9, r0
 8011902:	2e00      	cmp	r6, #0
 8011904:	d077      	beq.n	80119f6 <_dtoa_r+0x1d6>
 8011906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011908:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801190c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011914:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8011918:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801191c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8011920:	4619      	mov	r1, r3
 8011922:	2200      	movs	r2, #0
 8011924:	4b74      	ldr	r3, [pc, #464]	@ (8011af8 <_dtoa_r+0x2d8>)
 8011926:	f7ee fcd7 	bl	80002d8 <__aeabi_dsub>
 801192a:	a369      	add	r3, pc, #420	@ (adr r3, 8011ad0 <_dtoa_r+0x2b0>)
 801192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011930:	f7ee fe8a 	bl	8000648 <__aeabi_dmul>
 8011934:	a368      	add	r3, pc, #416	@ (adr r3, 8011ad8 <_dtoa_r+0x2b8>)
 8011936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801193a:	f7ee fccf 	bl	80002dc <__adddf3>
 801193e:	4604      	mov	r4, r0
 8011940:	4630      	mov	r0, r6
 8011942:	460d      	mov	r5, r1
 8011944:	f7ee fe16 	bl	8000574 <__aeabi_i2d>
 8011948:	a365      	add	r3, pc, #404	@ (adr r3, 8011ae0 <_dtoa_r+0x2c0>)
 801194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801194e:	f7ee fe7b 	bl	8000648 <__aeabi_dmul>
 8011952:	4602      	mov	r2, r0
 8011954:	460b      	mov	r3, r1
 8011956:	4620      	mov	r0, r4
 8011958:	4629      	mov	r1, r5
 801195a:	f7ee fcbf 	bl	80002dc <__adddf3>
 801195e:	4604      	mov	r4, r0
 8011960:	460d      	mov	r5, r1
 8011962:	f7ef f921 	bl	8000ba8 <__aeabi_d2iz>
 8011966:	2200      	movs	r2, #0
 8011968:	4607      	mov	r7, r0
 801196a:	2300      	movs	r3, #0
 801196c:	4620      	mov	r0, r4
 801196e:	4629      	mov	r1, r5
 8011970:	f7ef f8dc 	bl	8000b2c <__aeabi_dcmplt>
 8011974:	b140      	cbz	r0, 8011988 <_dtoa_r+0x168>
 8011976:	4638      	mov	r0, r7
 8011978:	f7ee fdfc 	bl	8000574 <__aeabi_i2d>
 801197c:	4622      	mov	r2, r4
 801197e:	462b      	mov	r3, r5
 8011980:	f7ef f8ca 	bl	8000b18 <__aeabi_dcmpeq>
 8011984:	b900      	cbnz	r0, 8011988 <_dtoa_r+0x168>
 8011986:	3f01      	subs	r7, #1
 8011988:	2f16      	cmp	r7, #22
 801198a:	d851      	bhi.n	8011a30 <_dtoa_r+0x210>
 801198c:	4b5b      	ldr	r3, [pc, #364]	@ (8011afc <_dtoa_r+0x2dc>)
 801198e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011996:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801199a:	f7ef f8c7 	bl	8000b2c <__aeabi_dcmplt>
 801199e:	2800      	cmp	r0, #0
 80119a0:	d048      	beq.n	8011a34 <_dtoa_r+0x214>
 80119a2:	3f01      	subs	r7, #1
 80119a4:	2300      	movs	r3, #0
 80119a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80119a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80119aa:	1b9b      	subs	r3, r3, r6
 80119ac:	1e5a      	subs	r2, r3, #1
 80119ae:	bf44      	itt	mi
 80119b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80119b4:	2300      	movmi	r3, #0
 80119b6:	9208      	str	r2, [sp, #32]
 80119b8:	bf54      	ite	pl
 80119ba:	f04f 0800 	movpl.w	r8, #0
 80119be:	9308      	strmi	r3, [sp, #32]
 80119c0:	2f00      	cmp	r7, #0
 80119c2:	db39      	blt.n	8011a38 <_dtoa_r+0x218>
 80119c4:	9b08      	ldr	r3, [sp, #32]
 80119c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80119c8:	443b      	add	r3, r7
 80119ca:	9308      	str	r3, [sp, #32]
 80119cc:	2300      	movs	r3, #0
 80119ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80119d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119d2:	2b09      	cmp	r3, #9
 80119d4:	d864      	bhi.n	8011aa0 <_dtoa_r+0x280>
 80119d6:	2b05      	cmp	r3, #5
 80119d8:	bfc4      	itt	gt
 80119da:	3b04      	subgt	r3, #4
 80119dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80119de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119e0:	f1a3 0302 	sub.w	r3, r3, #2
 80119e4:	bfcc      	ite	gt
 80119e6:	2400      	movgt	r4, #0
 80119e8:	2401      	movle	r4, #1
 80119ea:	2b03      	cmp	r3, #3
 80119ec:	d863      	bhi.n	8011ab6 <_dtoa_r+0x296>
 80119ee:	e8df f003 	tbb	[pc, r3]
 80119f2:	372a      	.short	0x372a
 80119f4:	5535      	.short	0x5535
 80119f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80119fa:	441e      	add	r6, r3
 80119fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011a00:	2b20      	cmp	r3, #32
 8011a02:	bfc1      	itttt	gt
 8011a04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011a08:	409f      	lslgt	r7, r3
 8011a0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011a0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011a12:	bfd6      	itet	le
 8011a14:	f1c3 0320 	rsble	r3, r3, #32
 8011a18:	ea47 0003 	orrgt.w	r0, r7, r3
 8011a1c:	fa04 f003 	lslle.w	r0, r4, r3
 8011a20:	f7ee fd98 	bl	8000554 <__aeabi_ui2d>
 8011a24:	2201      	movs	r2, #1
 8011a26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011a2a:	3e01      	subs	r6, #1
 8011a2c:	9214      	str	r2, [sp, #80]	@ 0x50
 8011a2e:	e777      	b.n	8011920 <_dtoa_r+0x100>
 8011a30:	2301      	movs	r3, #1
 8011a32:	e7b8      	b.n	80119a6 <_dtoa_r+0x186>
 8011a34:	9012      	str	r0, [sp, #72]	@ 0x48
 8011a36:	e7b7      	b.n	80119a8 <_dtoa_r+0x188>
 8011a38:	427b      	negs	r3, r7
 8011a3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	eba8 0807 	sub.w	r8, r8, r7
 8011a42:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011a44:	e7c4      	b.n	80119d0 <_dtoa_r+0x1b0>
 8011a46:	2300      	movs	r3, #0
 8011a48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	dc35      	bgt.n	8011abc <_dtoa_r+0x29c>
 8011a50:	2301      	movs	r3, #1
 8011a52:	9300      	str	r3, [sp, #0]
 8011a54:	9307      	str	r3, [sp, #28]
 8011a56:	461a      	mov	r2, r3
 8011a58:	920e      	str	r2, [sp, #56]	@ 0x38
 8011a5a:	e00b      	b.n	8011a74 <_dtoa_r+0x254>
 8011a5c:	2301      	movs	r3, #1
 8011a5e:	e7f3      	b.n	8011a48 <_dtoa_r+0x228>
 8011a60:	2300      	movs	r3, #0
 8011a62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011a66:	18fb      	adds	r3, r7, r3
 8011a68:	9300      	str	r3, [sp, #0]
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	2b01      	cmp	r3, #1
 8011a6e:	9307      	str	r3, [sp, #28]
 8011a70:	bfb8      	it	lt
 8011a72:	2301      	movlt	r3, #1
 8011a74:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011a78:	2100      	movs	r1, #0
 8011a7a:	2204      	movs	r2, #4
 8011a7c:	f102 0514 	add.w	r5, r2, #20
 8011a80:	429d      	cmp	r5, r3
 8011a82:	d91f      	bls.n	8011ac4 <_dtoa_r+0x2a4>
 8011a84:	6041      	str	r1, [r0, #4]
 8011a86:	4658      	mov	r0, fp
 8011a88:	f000 fd8e 	bl	80125a8 <_Balloc>
 8011a8c:	4682      	mov	sl, r0
 8011a8e:	2800      	cmp	r0, #0
 8011a90:	d13c      	bne.n	8011b0c <_dtoa_r+0x2ec>
 8011a92:	4b1b      	ldr	r3, [pc, #108]	@ (8011b00 <_dtoa_r+0x2e0>)
 8011a94:	4602      	mov	r2, r0
 8011a96:	f240 11af 	movw	r1, #431	@ 0x1af
 8011a9a:	e6d8      	b.n	801184e <_dtoa_r+0x2e>
 8011a9c:	2301      	movs	r3, #1
 8011a9e:	e7e0      	b.n	8011a62 <_dtoa_r+0x242>
 8011aa0:	2401      	movs	r4, #1
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8011aa6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8011aac:	9300      	str	r3, [sp, #0]
 8011aae:	9307      	str	r3, [sp, #28]
 8011ab0:	2200      	movs	r2, #0
 8011ab2:	2312      	movs	r3, #18
 8011ab4:	e7d0      	b.n	8011a58 <_dtoa_r+0x238>
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011aba:	e7f5      	b.n	8011aa8 <_dtoa_r+0x288>
 8011abc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011abe:	9300      	str	r3, [sp, #0]
 8011ac0:	9307      	str	r3, [sp, #28]
 8011ac2:	e7d7      	b.n	8011a74 <_dtoa_r+0x254>
 8011ac4:	3101      	adds	r1, #1
 8011ac6:	0052      	lsls	r2, r2, #1
 8011ac8:	e7d8      	b.n	8011a7c <_dtoa_r+0x25c>
 8011aca:	bf00      	nop
 8011acc:	f3af 8000 	nop.w
 8011ad0:	636f4361 	.word	0x636f4361
 8011ad4:	3fd287a7 	.word	0x3fd287a7
 8011ad8:	8b60c8b3 	.word	0x8b60c8b3
 8011adc:	3fc68a28 	.word	0x3fc68a28
 8011ae0:	509f79fb 	.word	0x509f79fb
 8011ae4:	3fd34413 	.word	0x3fd34413
 8011ae8:	08016db4 	.word	0x08016db4
 8011aec:	08016dcb 	.word	0x08016dcb
 8011af0:	7ff00000 	.word	0x7ff00000
 8011af4:	08017111 	.word	0x08017111
 8011af8:	3ff80000 	.word	0x3ff80000
 8011afc:	08016ec8 	.word	0x08016ec8
 8011b00:	08016e23 	.word	0x08016e23
 8011b04:	08016db0 	.word	0x08016db0
 8011b08:	08017110 	.word	0x08017110
 8011b0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011b10:	6018      	str	r0, [r3, #0]
 8011b12:	9b07      	ldr	r3, [sp, #28]
 8011b14:	2b0e      	cmp	r3, #14
 8011b16:	f200 80a4 	bhi.w	8011c62 <_dtoa_r+0x442>
 8011b1a:	2c00      	cmp	r4, #0
 8011b1c:	f000 80a1 	beq.w	8011c62 <_dtoa_r+0x442>
 8011b20:	2f00      	cmp	r7, #0
 8011b22:	dd33      	ble.n	8011b8c <_dtoa_r+0x36c>
 8011b24:	4bad      	ldr	r3, [pc, #692]	@ (8011ddc <_dtoa_r+0x5bc>)
 8011b26:	f007 020f 	and.w	r2, r7, #15
 8011b2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b2e:	ed93 7b00 	vldr	d7, [r3]
 8011b32:	05f8      	lsls	r0, r7, #23
 8011b34:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011b38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011b3c:	d516      	bpl.n	8011b6c <_dtoa_r+0x34c>
 8011b3e:	4ba8      	ldr	r3, [pc, #672]	@ (8011de0 <_dtoa_r+0x5c0>)
 8011b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011b44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011b48:	f7ee fea8 	bl	800089c <__aeabi_ddiv>
 8011b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b50:	f004 040f 	and.w	r4, r4, #15
 8011b54:	2603      	movs	r6, #3
 8011b56:	4da2      	ldr	r5, [pc, #648]	@ (8011de0 <_dtoa_r+0x5c0>)
 8011b58:	b954      	cbnz	r4, 8011b70 <_dtoa_r+0x350>
 8011b5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b62:	f7ee fe9b 	bl	800089c <__aeabi_ddiv>
 8011b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b6a:	e028      	b.n	8011bbe <_dtoa_r+0x39e>
 8011b6c:	2602      	movs	r6, #2
 8011b6e:	e7f2      	b.n	8011b56 <_dtoa_r+0x336>
 8011b70:	07e1      	lsls	r1, r4, #31
 8011b72:	d508      	bpl.n	8011b86 <_dtoa_r+0x366>
 8011b74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011b78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011b7c:	f7ee fd64 	bl	8000648 <__aeabi_dmul>
 8011b80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011b84:	3601      	adds	r6, #1
 8011b86:	1064      	asrs	r4, r4, #1
 8011b88:	3508      	adds	r5, #8
 8011b8a:	e7e5      	b.n	8011b58 <_dtoa_r+0x338>
 8011b8c:	f000 80d2 	beq.w	8011d34 <_dtoa_r+0x514>
 8011b90:	427c      	negs	r4, r7
 8011b92:	4b92      	ldr	r3, [pc, #584]	@ (8011ddc <_dtoa_r+0x5bc>)
 8011b94:	4d92      	ldr	r5, [pc, #584]	@ (8011de0 <_dtoa_r+0x5c0>)
 8011b96:	f004 020f 	and.w	r2, r4, #15
 8011b9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ba2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011ba6:	f7ee fd4f 	bl	8000648 <__aeabi_dmul>
 8011baa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011bae:	1124      	asrs	r4, r4, #4
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	2602      	movs	r6, #2
 8011bb4:	2c00      	cmp	r4, #0
 8011bb6:	f040 80b2 	bne.w	8011d1e <_dtoa_r+0x4fe>
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d1d3      	bne.n	8011b66 <_dtoa_r+0x346>
 8011bbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011bc0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	f000 80b7 	beq.w	8011d38 <_dtoa_r+0x518>
 8011bca:	4b86      	ldr	r3, [pc, #536]	@ (8011de4 <_dtoa_r+0x5c4>)
 8011bcc:	2200      	movs	r2, #0
 8011bce:	4620      	mov	r0, r4
 8011bd0:	4629      	mov	r1, r5
 8011bd2:	f7ee ffab 	bl	8000b2c <__aeabi_dcmplt>
 8011bd6:	2800      	cmp	r0, #0
 8011bd8:	f000 80ae 	beq.w	8011d38 <_dtoa_r+0x518>
 8011bdc:	9b07      	ldr	r3, [sp, #28]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	f000 80aa 	beq.w	8011d38 <_dtoa_r+0x518>
 8011be4:	9b00      	ldr	r3, [sp, #0]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	dd37      	ble.n	8011c5a <_dtoa_r+0x43a>
 8011bea:	1e7b      	subs	r3, r7, #1
 8011bec:	9304      	str	r3, [sp, #16]
 8011bee:	4620      	mov	r0, r4
 8011bf0:	4b7d      	ldr	r3, [pc, #500]	@ (8011de8 <_dtoa_r+0x5c8>)
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	4629      	mov	r1, r5
 8011bf6:	f7ee fd27 	bl	8000648 <__aeabi_dmul>
 8011bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011bfe:	9c00      	ldr	r4, [sp, #0]
 8011c00:	3601      	adds	r6, #1
 8011c02:	4630      	mov	r0, r6
 8011c04:	f7ee fcb6 	bl	8000574 <__aeabi_i2d>
 8011c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011c0c:	f7ee fd1c 	bl	8000648 <__aeabi_dmul>
 8011c10:	4b76      	ldr	r3, [pc, #472]	@ (8011dec <_dtoa_r+0x5cc>)
 8011c12:	2200      	movs	r2, #0
 8011c14:	f7ee fb62 	bl	80002dc <__adddf3>
 8011c18:	4605      	mov	r5, r0
 8011c1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011c1e:	2c00      	cmp	r4, #0
 8011c20:	f040 808d 	bne.w	8011d3e <_dtoa_r+0x51e>
 8011c24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c28:	4b71      	ldr	r3, [pc, #452]	@ (8011df0 <_dtoa_r+0x5d0>)
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	f7ee fb54 	bl	80002d8 <__aeabi_dsub>
 8011c30:	4602      	mov	r2, r0
 8011c32:	460b      	mov	r3, r1
 8011c34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011c38:	462a      	mov	r2, r5
 8011c3a:	4633      	mov	r3, r6
 8011c3c:	f7ee ff94 	bl	8000b68 <__aeabi_dcmpgt>
 8011c40:	2800      	cmp	r0, #0
 8011c42:	f040 828b 	bne.w	801215c <_dtoa_r+0x93c>
 8011c46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c4a:	462a      	mov	r2, r5
 8011c4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011c50:	f7ee ff6c 	bl	8000b2c <__aeabi_dcmplt>
 8011c54:	2800      	cmp	r0, #0
 8011c56:	f040 8128 	bne.w	8011eaa <_dtoa_r+0x68a>
 8011c5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011c5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011c62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	f2c0 815a 	blt.w	8011f1e <_dtoa_r+0x6fe>
 8011c6a:	2f0e      	cmp	r7, #14
 8011c6c:	f300 8157 	bgt.w	8011f1e <_dtoa_r+0x6fe>
 8011c70:	4b5a      	ldr	r3, [pc, #360]	@ (8011ddc <_dtoa_r+0x5bc>)
 8011c72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011c76:	ed93 7b00 	vldr	d7, [r3]
 8011c7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	ed8d 7b00 	vstr	d7, [sp]
 8011c82:	da03      	bge.n	8011c8c <_dtoa_r+0x46c>
 8011c84:	9b07      	ldr	r3, [sp, #28]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	f340 8101 	ble.w	8011e8e <_dtoa_r+0x66e>
 8011c8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011c90:	4656      	mov	r6, sl
 8011c92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c96:	4620      	mov	r0, r4
 8011c98:	4629      	mov	r1, r5
 8011c9a:	f7ee fdff 	bl	800089c <__aeabi_ddiv>
 8011c9e:	f7ee ff83 	bl	8000ba8 <__aeabi_d2iz>
 8011ca2:	4680      	mov	r8, r0
 8011ca4:	f7ee fc66 	bl	8000574 <__aeabi_i2d>
 8011ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cac:	f7ee fccc 	bl	8000648 <__aeabi_dmul>
 8011cb0:	4602      	mov	r2, r0
 8011cb2:	460b      	mov	r3, r1
 8011cb4:	4620      	mov	r0, r4
 8011cb6:	4629      	mov	r1, r5
 8011cb8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011cbc:	f7ee fb0c 	bl	80002d8 <__aeabi_dsub>
 8011cc0:	f806 4b01 	strb.w	r4, [r6], #1
 8011cc4:	9d07      	ldr	r5, [sp, #28]
 8011cc6:	eba6 040a 	sub.w	r4, r6, sl
 8011cca:	42a5      	cmp	r5, r4
 8011ccc:	4602      	mov	r2, r0
 8011cce:	460b      	mov	r3, r1
 8011cd0:	f040 8117 	bne.w	8011f02 <_dtoa_r+0x6e2>
 8011cd4:	f7ee fb02 	bl	80002dc <__adddf3>
 8011cd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cdc:	4604      	mov	r4, r0
 8011cde:	460d      	mov	r5, r1
 8011ce0:	f7ee ff42 	bl	8000b68 <__aeabi_dcmpgt>
 8011ce4:	2800      	cmp	r0, #0
 8011ce6:	f040 80f9 	bne.w	8011edc <_dtoa_r+0x6bc>
 8011cea:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cee:	4620      	mov	r0, r4
 8011cf0:	4629      	mov	r1, r5
 8011cf2:	f7ee ff11 	bl	8000b18 <__aeabi_dcmpeq>
 8011cf6:	b118      	cbz	r0, 8011d00 <_dtoa_r+0x4e0>
 8011cf8:	f018 0f01 	tst.w	r8, #1
 8011cfc:	f040 80ee 	bne.w	8011edc <_dtoa_r+0x6bc>
 8011d00:	4649      	mov	r1, r9
 8011d02:	4658      	mov	r0, fp
 8011d04:	f000 fc90 	bl	8012628 <_Bfree>
 8011d08:	2300      	movs	r3, #0
 8011d0a:	7033      	strb	r3, [r6, #0]
 8011d0c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011d0e:	3701      	adds	r7, #1
 8011d10:	601f      	str	r7, [r3, #0]
 8011d12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	f000 831d 	beq.w	8012354 <_dtoa_r+0xb34>
 8011d1a:	601e      	str	r6, [r3, #0]
 8011d1c:	e31a      	b.n	8012354 <_dtoa_r+0xb34>
 8011d1e:	07e2      	lsls	r2, r4, #31
 8011d20:	d505      	bpl.n	8011d2e <_dtoa_r+0x50e>
 8011d22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d26:	f7ee fc8f 	bl	8000648 <__aeabi_dmul>
 8011d2a:	3601      	adds	r6, #1
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	1064      	asrs	r4, r4, #1
 8011d30:	3508      	adds	r5, #8
 8011d32:	e73f      	b.n	8011bb4 <_dtoa_r+0x394>
 8011d34:	2602      	movs	r6, #2
 8011d36:	e742      	b.n	8011bbe <_dtoa_r+0x39e>
 8011d38:	9c07      	ldr	r4, [sp, #28]
 8011d3a:	9704      	str	r7, [sp, #16]
 8011d3c:	e761      	b.n	8011c02 <_dtoa_r+0x3e2>
 8011d3e:	4b27      	ldr	r3, [pc, #156]	@ (8011ddc <_dtoa_r+0x5bc>)
 8011d40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011d42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011d46:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011d4a:	4454      	add	r4, sl
 8011d4c:	2900      	cmp	r1, #0
 8011d4e:	d053      	beq.n	8011df8 <_dtoa_r+0x5d8>
 8011d50:	4928      	ldr	r1, [pc, #160]	@ (8011df4 <_dtoa_r+0x5d4>)
 8011d52:	2000      	movs	r0, #0
 8011d54:	f7ee fda2 	bl	800089c <__aeabi_ddiv>
 8011d58:	4633      	mov	r3, r6
 8011d5a:	462a      	mov	r2, r5
 8011d5c:	f7ee fabc 	bl	80002d8 <__aeabi_dsub>
 8011d60:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011d64:	4656      	mov	r6, sl
 8011d66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d6a:	f7ee ff1d 	bl	8000ba8 <__aeabi_d2iz>
 8011d6e:	4605      	mov	r5, r0
 8011d70:	f7ee fc00 	bl	8000574 <__aeabi_i2d>
 8011d74:	4602      	mov	r2, r0
 8011d76:	460b      	mov	r3, r1
 8011d78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d7c:	f7ee faac 	bl	80002d8 <__aeabi_dsub>
 8011d80:	3530      	adds	r5, #48	@ 0x30
 8011d82:	4602      	mov	r2, r0
 8011d84:	460b      	mov	r3, r1
 8011d86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011d8a:	f806 5b01 	strb.w	r5, [r6], #1
 8011d8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011d92:	f7ee fecb 	bl	8000b2c <__aeabi_dcmplt>
 8011d96:	2800      	cmp	r0, #0
 8011d98:	d171      	bne.n	8011e7e <_dtoa_r+0x65e>
 8011d9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011d9e:	4911      	ldr	r1, [pc, #68]	@ (8011de4 <_dtoa_r+0x5c4>)
 8011da0:	2000      	movs	r0, #0
 8011da2:	f7ee fa99 	bl	80002d8 <__aeabi_dsub>
 8011da6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011daa:	f7ee febf 	bl	8000b2c <__aeabi_dcmplt>
 8011dae:	2800      	cmp	r0, #0
 8011db0:	f040 8095 	bne.w	8011ede <_dtoa_r+0x6be>
 8011db4:	42a6      	cmp	r6, r4
 8011db6:	f43f af50 	beq.w	8011c5a <_dtoa_r+0x43a>
 8011dba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8011de8 <_dtoa_r+0x5c8>)
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	f7ee fc41 	bl	8000648 <__aeabi_dmul>
 8011dc6:	4b08      	ldr	r3, [pc, #32]	@ (8011de8 <_dtoa_r+0x5c8>)
 8011dc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011dcc:	2200      	movs	r2, #0
 8011dce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011dd2:	f7ee fc39 	bl	8000648 <__aeabi_dmul>
 8011dd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011dda:	e7c4      	b.n	8011d66 <_dtoa_r+0x546>
 8011ddc:	08016ec8 	.word	0x08016ec8
 8011de0:	08016ea0 	.word	0x08016ea0
 8011de4:	3ff00000 	.word	0x3ff00000
 8011de8:	40240000 	.word	0x40240000
 8011dec:	401c0000 	.word	0x401c0000
 8011df0:	40140000 	.word	0x40140000
 8011df4:	3fe00000 	.word	0x3fe00000
 8011df8:	4631      	mov	r1, r6
 8011dfa:	4628      	mov	r0, r5
 8011dfc:	f7ee fc24 	bl	8000648 <__aeabi_dmul>
 8011e00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011e04:	9415      	str	r4, [sp, #84]	@ 0x54
 8011e06:	4656      	mov	r6, sl
 8011e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e0c:	f7ee fecc 	bl	8000ba8 <__aeabi_d2iz>
 8011e10:	4605      	mov	r5, r0
 8011e12:	f7ee fbaf 	bl	8000574 <__aeabi_i2d>
 8011e16:	4602      	mov	r2, r0
 8011e18:	460b      	mov	r3, r1
 8011e1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e1e:	f7ee fa5b 	bl	80002d8 <__aeabi_dsub>
 8011e22:	3530      	adds	r5, #48	@ 0x30
 8011e24:	f806 5b01 	strb.w	r5, [r6], #1
 8011e28:	4602      	mov	r2, r0
 8011e2a:	460b      	mov	r3, r1
 8011e2c:	42a6      	cmp	r6, r4
 8011e2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011e32:	f04f 0200 	mov.w	r2, #0
 8011e36:	d124      	bne.n	8011e82 <_dtoa_r+0x662>
 8011e38:	4bac      	ldr	r3, [pc, #688]	@ (80120ec <_dtoa_r+0x8cc>)
 8011e3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011e3e:	f7ee fa4d 	bl	80002dc <__adddf3>
 8011e42:	4602      	mov	r2, r0
 8011e44:	460b      	mov	r3, r1
 8011e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e4a:	f7ee fe8d 	bl	8000b68 <__aeabi_dcmpgt>
 8011e4e:	2800      	cmp	r0, #0
 8011e50:	d145      	bne.n	8011ede <_dtoa_r+0x6be>
 8011e52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011e56:	49a5      	ldr	r1, [pc, #660]	@ (80120ec <_dtoa_r+0x8cc>)
 8011e58:	2000      	movs	r0, #0
 8011e5a:	f7ee fa3d 	bl	80002d8 <__aeabi_dsub>
 8011e5e:	4602      	mov	r2, r0
 8011e60:	460b      	mov	r3, r1
 8011e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e66:	f7ee fe61 	bl	8000b2c <__aeabi_dcmplt>
 8011e6a:	2800      	cmp	r0, #0
 8011e6c:	f43f aef5 	beq.w	8011c5a <_dtoa_r+0x43a>
 8011e70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011e72:	1e73      	subs	r3, r6, #1
 8011e74:	9315      	str	r3, [sp, #84]	@ 0x54
 8011e76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011e7a:	2b30      	cmp	r3, #48	@ 0x30
 8011e7c:	d0f8      	beq.n	8011e70 <_dtoa_r+0x650>
 8011e7e:	9f04      	ldr	r7, [sp, #16]
 8011e80:	e73e      	b.n	8011d00 <_dtoa_r+0x4e0>
 8011e82:	4b9b      	ldr	r3, [pc, #620]	@ (80120f0 <_dtoa_r+0x8d0>)
 8011e84:	f7ee fbe0 	bl	8000648 <__aeabi_dmul>
 8011e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e8c:	e7bc      	b.n	8011e08 <_dtoa_r+0x5e8>
 8011e8e:	d10c      	bne.n	8011eaa <_dtoa_r+0x68a>
 8011e90:	4b98      	ldr	r3, [pc, #608]	@ (80120f4 <_dtoa_r+0x8d4>)
 8011e92:	2200      	movs	r2, #0
 8011e94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e98:	f7ee fbd6 	bl	8000648 <__aeabi_dmul>
 8011e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ea0:	f7ee fe58 	bl	8000b54 <__aeabi_dcmpge>
 8011ea4:	2800      	cmp	r0, #0
 8011ea6:	f000 8157 	beq.w	8012158 <_dtoa_r+0x938>
 8011eaa:	2400      	movs	r4, #0
 8011eac:	4625      	mov	r5, r4
 8011eae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011eb0:	43db      	mvns	r3, r3
 8011eb2:	9304      	str	r3, [sp, #16]
 8011eb4:	4656      	mov	r6, sl
 8011eb6:	2700      	movs	r7, #0
 8011eb8:	4621      	mov	r1, r4
 8011eba:	4658      	mov	r0, fp
 8011ebc:	f000 fbb4 	bl	8012628 <_Bfree>
 8011ec0:	2d00      	cmp	r5, #0
 8011ec2:	d0dc      	beq.n	8011e7e <_dtoa_r+0x65e>
 8011ec4:	b12f      	cbz	r7, 8011ed2 <_dtoa_r+0x6b2>
 8011ec6:	42af      	cmp	r7, r5
 8011ec8:	d003      	beq.n	8011ed2 <_dtoa_r+0x6b2>
 8011eca:	4639      	mov	r1, r7
 8011ecc:	4658      	mov	r0, fp
 8011ece:	f000 fbab 	bl	8012628 <_Bfree>
 8011ed2:	4629      	mov	r1, r5
 8011ed4:	4658      	mov	r0, fp
 8011ed6:	f000 fba7 	bl	8012628 <_Bfree>
 8011eda:	e7d0      	b.n	8011e7e <_dtoa_r+0x65e>
 8011edc:	9704      	str	r7, [sp, #16]
 8011ede:	4633      	mov	r3, r6
 8011ee0:	461e      	mov	r6, r3
 8011ee2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011ee6:	2a39      	cmp	r2, #57	@ 0x39
 8011ee8:	d107      	bne.n	8011efa <_dtoa_r+0x6da>
 8011eea:	459a      	cmp	sl, r3
 8011eec:	d1f8      	bne.n	8011ee0 <_dtoa_r+0x6c0>
 8011eee:	9a04      	ldr	r2, [sp, #16]
 8011ef0:	3201      	adds	r2, #1
 8011ef2:	9204      	str	r2, [sp, #16]
 8011ef4:	2230      	movs	r2, #48	@ 0x30
 8011ef6:	f88a 2000 	strb.w	r2, [sl]
 8011efa:	781a      	ldrb	r2, [r3, #0]
 8011efc:	3201      	adds	r2, #1
 8011efe:	701a      	strb	r2, [r3, #0]
 8011f00:	e7bd      	b.n	8011e7e <_dtoa_r+0x65e>
 8011f02:	4b7b      	ldr	r3, [pc, #492]	@ (80120f0 <_dtoa_r+0x8d0>)
 8011f04:	2200      	movs	r2, #0
 8011f06:	f7ee fb9f 	bl	8000648 <__aeabi_dmul>
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	4604      	mov	r4, r0
 8011f10:	460d      	mov	r5, r1
 8011f12:	f7ee fe01 	bl	8000b18 <__aeabi_dcmpeq>
 8011f16:	2800      	cmp	r0, #0
 8011f18:	f43f aebb 	beq.w	8011c92 <_dtoa_r+0x472>
 8011f1c:	e6f0      	b.n	8011d00 <_dtoa_r+0x4e0>
 8011f1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011f20:	2a00      	cmp	r2, #0
 8011f22:	f000 80db 	beq.w	80120dc <_dtoa_r+0x8bc>
 8011f26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011f28:	2a01      	cmp	r2, #1
 8011f2a:	f300 80bf 	bgt.w	80120ac <_dtoa_r+0x88c>
 8011f2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8011f30:	2a00      	cmp	r2, #0
 8011f32:	f000 80b7 	beq.w	80120a4 <_dtoa_r+0x884>
 8011f36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8011f3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011f3c:	4646      	mov	r6, r8
 8011f3e:	9a08      	ldr	r2, [sp, #32]
 8011f40:	2101      	movs	r1, #1
 8011f42:	441a      	add	r2, r3
 8011f44:	4658      	mov	r0, fp
 8011f46:	4498      	add	r8, r3
 8011f48:	9208      	str	r2, [sp, #32]
 8011f4a:	f000 fc6b 	bl	8012824 <__i2b>
 8011f4e:	4605      	mov	r5, r0
 8011f50:	b15e      	cbz	r6, 8011f6a <_dtoa_r+0x74a>
 8011f52:	9b08      	ldr	r3, [sp, #32]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	dd08      	ble.n	8011f6a <_dtoa_r+0x74a>
 8011f58:	42b3      	cmp	r3, r6
 8011f5a:	9a08      	ldr	r2, [sp, #32]
 8011f5c:	bfa8      	it	ge
 8011f5e:	4633      	movge	r3, r6
 8011f60:	eba8 0803 	sub.w	r8, r8, r3
 8011f64:	1af6      	subs	r6, r6, r3
 8011f66:	1ad3      	subs	r3, r2, r3
 8011f68:	9308      	str	r3, [sp, #32]
 8011f6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f6c:	b1f3      	cbz	r3, 8011fac <_dtoa_r+0x78c>
 8011f6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	f000 80b7 	beq.w	80120e4 <_dtoa_r+0x8c4>
 8011f76:	b18c      	cbz	r4, 8011f9c <_dtoa_r+0x77c>
 8011f78:	4629      	mov	r1, r5
 8011f7a:	4622      	mov	r2, r4
 8011f7c:	4658      	mov	r0, fp
 8011f7e:	f000 fd11 	bl	80129a4 <__pow5mult>
 8011f82:	464a      	mov	r2, r9
 8011f84:	4601      	mov	r1, r0
 8011f86:	4605      	mov	r5, r0
 8011f88:	4658      	mov	r0, fp
 8011f8a:	f000 fc61 	bl	8012850 <__multiply>
 8011f8e:	4649      	mov	r1, r9
 8011f90:	9004      	str	r0, [sp, #16]
 8011f92:	4658      	mov	r0, fp
 8011f94:	f000 fb48 	bl	8012628 <_Bfree>
 8011f98:	9b04      	ldr	r3, [sp, #16]
 8011f9a:	4699      	mov	r9, r3
 8011f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f9e:	1b1a      	subs	r2, r3, r4
 8011fa0:	d004      	beq.n	8011fac <_dtoa_r+0x78c>
 8011fa2:	4649      	mov	r1, r9
 8011fa4:	4658      	mov	r0, fp
 8011fa6:	f000 fcfd 	bl	80129a4 <__pow5mult>
 8011faa:	4681      	mov	r9, r0
 8011fac:	2101      	movs	r1, #1
 8011fae:	4658      	mov	r0, fp
 8011fb0:	f000 fc38 	bl	8012824 <__i2b>
 8011fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011fb6:	4604      	mov	r4, r0
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	f000 81cf 	beq.w	801235c <_dtoa_r+0xb3c>
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	4601      	mov	r1, r0
 8011fc2:	4658      	mov	r0, fp
 8011fc4:	f000 fcee 	bl	80129a4 <__pow5mult>
 8011fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011fca:	2b01      	cmp	r3, #1
 8011fcc:	4604      	mov	r4, r0
 8011fce:	f300 8095 	bgt.w	80120fc <_dtoa_r+0x8dc>
 8011fd2:	9b02      	ldr	r3, [sp, #8]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	f040 8087 	bne.w	80120e8 <_dtoa_r+0x8c8>
 8011fda:	9b03      	ldr	r3, [sp, #12]
 8011fdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	f040 8089 	bne.w	80120f8 <_dtoa_r+0x8d8>
 8011fe6:	9b03      	ldr	r3, [sp, #12]
 8011fe8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8011fec:	0d1b      	lsrs	r3, r3, #20
 8011fee:	051b      	lsls	r3, r3, #20
 8011ff0:	b12b      	cbz	r3, 8011ffe <_dtoa_r+0x7de>
 8011ff2:	9b08      	ldr	r3, [sp, #32]
 8011ff4:	3301      	adds	r3, #1
 8011ff6:	9308      	str	r3, [sp, #32]
 8011ff8:	f108 0801 	add.w	r8, r8, #1
 8011ffc:	2301      	movs	r3, #1
 8011ffe:	930a      	str	r3, [sp, #40]	@ 0x28
 8012000:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012002:	2b00      	cmp	r3, #0
 8012004:	f000 81b0 	beq.w	8012368 <_dtoa_r+0xb48>
 8012008:	6923      	ldr	r3, [r4, #16]
 801200a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801200e:	6918      	ldr	r0, [r3, #16]
 8012010:	f000 fbbc 	bl	801278c <__hi0bits>
 8012014:	f1c0 0020 	rsb	r0, r0, #32
 8012018:	9b08      	ldr	r3, [sp, #32]
 801201a:	4418      	add	r0, r3
 801201c:	f010 001f 	ands.w	r0, r0, #31
 8012020:	d077      	beq.n	8012112 <_dtoa_r+0x8f2>
 8012022:	f1c0 0320 	rsb	r3, r0, #32
 8012026:	2b04      	cmp	r3, #4
 8012028:	dd6b      	ble.n	8012102 <_dtoa_r+0x8e2>
 801202a:	9b08      	ldr	r3, [sp, #32]
 801202c:	f1c0 001c 	rsb	r0, r0, #28
 8012030:	4403      	add	r3, r0
 8012032:	4480      	add	r8, r0
 8012034:	4406      	add	r6, r0
 8012036:	9308      	str	r3, [sp, #32]
 8012038:	f1b8 0f00 	cmp.w	r8, #0
 801203c:	dd05      	ble.n	801204a <_dtoa_r+0x82a>
 801203e:	4649      	mov	r1, r9
 8012040:	4642      	mov	r2, r8
 8012042:	4658      	mov	r0, fp
 8012044:	f000 fd08 	bl	8012a58 <__lshift>
 8012048:	4681      	mov	r9, r0
 801204a:	9b08      	ldr	r3, [sp, #32]
 801204c:	2b00      	cmp	r3, #0
 801204e:	dd05      	ble.n	801205c <_dtoa_r+0x83c>
 8012050:	4621      	mov	r1, r4
 8012052:	461a      	mov	r2, r3
 8012054:	4658      	mov	r0, fp
 8012056:	f000 fcff 	bl	8012a58 <__lshift>
 801205a:	4604      	mov	r4, r0
 801205c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801205e:	2b00      	cmp	r3, #0
 8012060:	d059      	beq.n	8012116 <_dtoa_r+0x8f6>
 8012062:	4621      	mov	r1, r4
 8012064:	4648      	mov	r0, r9
 8012066:	f000 fd63 	bl	8012b30 <__mcmp>
 801206a:	2800      	cmp	r0, #0
 801206c:	da53      	bge.n	8012116 <_dtoa_r+0x8f6>
 801206e:	1e7b      	subs	r3, r7, #1
 8012070:	9304      	str	r3, [sp, #16]
 8012072:	4649      	mov	r1, r9
 8012074:	2300      	movs	r3, #0
 8012076:	220a      	movs	r2, #10
 8012078:	4658      	mov	r0, fp
 801207a:	f000 faf7 	bl	801266c <__multadd>
 801207e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012080:	4681      	mov	r9, r0
 8012082:	2b00      	cmp	r3, #0
 8012084:	f000 8172 	beq.w	801236c <_dtoa_r+0xb4c>
 8012088:	2300      	movs	r3, #0
 801208a:	4629      	mov	r1, r5
 801208c:	220a      	movs	r2, #10
 801208e:	4658      	mov	r0, fp
 8012090:	f000 faec 	bl	801266c <__multadd>
 8012094:	9b00      	ldr	r3, [sp, #0]
 8012096:	2b00      	cmp	r3, #0
 8012098:	4605      	mov	r5, r0
 801209a:	dc67      	bgt.n	801216c <_dtoa_r+0x94c>
 801209c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801209e:	2b02      	cmp	r3, #2
 80120a0:	dc41      	bgt.n	8012126 <_dtoa_r+0x906>
 80120a2:	e063      	b.n	801216c <_dtoa_r+0x94c>
 80120a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80120a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80120aa:	e746      	b.n	8011f3a <_dtoa_r+0x71a>
 80120ac:	9b07      	ldr	r3, [sp, #28]
 80120ae:	1e5c      	subs	r4, r3, #1
 80120b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120b2:	42a3      	cmp	r3, r4
 80120b4:	bfbf      	itttt	lt
 80120b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80120b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80120ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80120bc:	1ae3      	sublt	r3, r4, r3
 80120be:	bfb4      	ite	lt
 80120c0:	18d2      	addlt	r2, r2, r3
 80120c2:	1b1c      	subge	r4, r3, r4
 80120c4:	9b07      	ldr	r3, [sp, #28]
 80120c6:	bfbc      	itt	lt
 80120c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80120ca:	2400      	movlt	r4, #0
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	bfb5      	itete	lt
 80120d0:	eba8 0603 	sublt.w	r6, r8, r3
 80120d4:	9b07      	ldrge	r3, [sp, #28]
 80120d6:	2300      	movlt	r3, #0
 80120d8:	4646      	movge	r6, r8
 80120da:	e730      	b.n	8011f3e <_dtoa_r+0x71e>
 80120dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80120de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80120e0:	4646      	mov	r6, r8
 80120e2:	e735      	b.n	8011f50 <_dtoa_r+0x730>
 80120e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80120e6:	e75c      	b.n	8011fa2 <_dtoa_r+0x782>
 80120e8:	2300      	movs	r3, #0
 80120ea:	e788      	b.n	8011ffe <_dtoa_r+0x7de>
 80120ec:	3fe00000 	.word	0x3fe00000
 80120f0:	40240000 	.word	0x40240000
 80120f4:	40140000 	.word	0x40140000
 80120f8:	9b02      	ldr	r3, [sp, #8]
 80120fa:	e780      	b.n	8011ffe <_dtoa_r+0x7de>
 80120fc:	2300      	movs	r3, #0
 80120fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8012100:	e782      	b.n	8012008 <_dtoa_r+0x7e8>
 8012102:	d099      	beq.n	8012038 <_dtoa_r+0x818>
 8012104:	9a08      	ldr	r2, [sp, #32]
 8012106:	331c      	adds	r3, #28
 8012108:	441a      	add	r2, r3
 801210a:	4498      	add	r8, r3
 801210c:	441e      	add	r6, r3
 801210e:	9208      	str	r2, [sp, #32]
 8012110:	e792      	b.n	8012038 <_dtoa_r+0x818>
 8012112:	4603      	mov	r3, r0
 8012114:	e7f6      	b.n	8012104 <_dtoa_r+0x8e4>
 8012116:	9b07      	ldr	r3, [sp, #28]
 8012118:	9704      	str	r7, [sp, #16]
 801211a:	2b00      	cmp	r3, #0
 801211c:	dc20      	bgt.n	8012160 <_dtoa_r+0x940>
 801211e:	9300      	str	r3, [sp, #0]
 8012120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012122:	2b02      	cmp	r3, #2
 8012124:	dd1e      	ble.n	8012164 <_dtoa_r+0x944>
 8012126:	9b00      	ldr	r3, [sp, #0]
 8012128:	2b00      	cmp	r3, #0
 801212a:	f47f aec0 	bne.w	8011eae <_dtoa_r+0x68e>
 801212e:	4621      	mov	r1, r4
 8012130:	2205      	movs	r2, #5
 8012132:	4658      	mov	r0, fp
 8012134:	f000 fa9a 	bl	801266c <__multadd>
 8012138:	4601      	mov	r1, r0
 801213a:	4604      	mov	r4, r0
 801213c:	4648      	mov	r0, r9
 801213e:	f000 fcf7 	bl	8012b30 <__mcmp>
 8012142:	2800      	cmp	r0, #0
 8012144:	f77f aeb3 	ble.w	8011eae <_dtoa_r+0x68e>
 8012148:	4656      	mov	r6, sl
 801214a:	2331      	movs	r3, #49	@ 0x31
 801214c:	f806 3b01 	strb.w	r3, [r6], #1
 8012150:	9b04      	ldr	r3, [sp, #16]
 8012152:	3301      	adds	r3, #1
 8012154:	9304      	str	r3, [sp, #16]
 8012156:	e6ae      	b.n	8011eb6 <_dtoa_r+0x696>
 8012158:	9c07      	ldr	r4, [sp, #28]
 801215a:	9704      	str	r7, [sp, #16]
 801215c:	4625      	mov	r5, r4
 801215e:	e7f3      	b.n	8012148 <_dtoa_r+0x928>
 8012160:	9b07      	ldr	r3, [sp, #28]
 8012162:	9300      	str	r3, [sp, #0]
 8012164:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012166:	2b00      	cmp	r3, #0
 8012168:	f000 8104 	beq.w	8012374 <_dtoa_r+0xb54>
 801216c:	2e00      	cmp	r6, #0
 801216e:	dd05      	ble.n	801217c <_dtoa_r+0x95c>
 8012170:	4629      	mov	r1, r5
 8012172:	4632      	mov	r2, r6
 8012174:	4658      	mov	r0, fp
 8012176:	f000 fc6f 	bl	8012a58 <__lshift>
 801217a:	4605      	mov	r5, r0
 801217c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801217e:	2b00      	cmp	r3, #0
 8012180:	d05a      	beq.n	8012238 <_dtoa_r+0xa18>
 8012182:	6869      	ldr	r1, [r5, #4]
 8012184:	4658      	mov	r0, fp
 8012186:	f000 fa0f 	bl	80125a8 <_Balloc>
 801218a:	4606      	mov	r6, r0
 801218c:	b928      	cbnz	r0, 801219a <_dtoa_r+0x97a>
 801218e:	4b84      	ldr	r3, [pc, #528]	@ (80123a0 <_dtoa_r+0xb80>)
 8012190:	4602      	mov	r2, r0
 8012192:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012196:	f7ff bb5a 	b.w	801184e <_dtoa_r+0x2e>
 801219a:	692a      	ldr	r2, [r5, #16]
 801219c:	3202      	adds	r2, #2
 801219e:	0092      	lsls	r2, r2, #2
 80121a0:	f105 010c 	add.w	r1, r5, #12
 80121a4:	300c      	adds	r0, #12
 80121a6:	f7ff fa9c 	bl	80116e2 <memcpy>
 80121aa:	2201      	movs	r2, #1
 80121ac:	4631      	mov	r1, r6
 80121ae:	4658      	mov	r0, fp
 80121b0:	f000 fc52 	bl	8012a58 <__lshift>
 80121b4:	f10a 0301 	add.w	r3, sl, #1
 80121b8:	9307      	str	r3, [sp, #28]
 80121ba:	9b00      	ldr	r3, [sp, #0]
 80121bc:	4453      	add	r3, sl
 80121be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121c0:	9b02      	ldr	r3, [sp, #8]
 80121c2:	f003 0301 	and.w	r3, r3, #1
 80121c6:	462f      	mov	r7, r5
 80121c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80121ca:	4605      	mov	r5, r0
 80121cc:	9b07      	ldr	r3, [sp, #28]
 80121ce:	4621      	mov	r1, r4
 80121d0:	3b01      	subs	r3, #1
 80121d2:	4648      	mov	r0, r9
 80121d4:	9300      	str	r3, [sp, #0]
 80121d6:	f7ff fa99 	bl	801170c <quorem>
 80121da:	4639      	mov	r1, r7
 80121dc:	9002      	str	r0, [sp, #8]
 80121de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80121e2:	4648      	mov	r0, r9
 80121e4:	f000 fca4 	bl	8012b30 <__mcmp>
 80121e8:	462a      	mov	r2, r5
 80121ea:	9008      	str	r0, [sp, #32]
 80121ec:	4621      	mov	r1, r4
 80121ee:	4658      	mov	r0, fp
 80121f0:	f000 fcba 	bl	8012b68 <__mdiff>
 80121f4:	68c2      	ldr	r2, [r0, #12]
 80121f6:	4606      	mov	r6, r0
 80121f8:	bb02      	cbnz	r2, 801223c <_dtoa_r+0xa1c>
 80121fa:	4601      	mov	r1, r0
 80121fc:	4648      	mov	r0, r9
 80121fe:	f000 fc97 	bl	8012b30 <__mcmp>
 8012202:	4602      	mov	r2, r0
 8012204:	4631      	mov	r1, r6
 8012206:	4658      	mov	r0, fp
 8012208:	920e      	str	r2, [sp, #56]	@ 0x38
 801220a:	f000 fa0d 	bl	8012628 <_Bfree>
 801220e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012210:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012212:	9e07      	ldr	r6, [sp, #28]
 8012214:	ea43 0102 	orr.w	r1, r3, r2
 8012218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801221a:	4319      	orrs	r1, r3
 801221c:	d110      	bne.n	8012240 <_dtoa_r+0xa20>
 801221e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012222:	d029      	beq.n	8012278 <_dtoa_r+0xa58>
 8012224:	9b08      	ldr	r3, [sp, #32]
 8012226:	2b00      	cmp	r3, #0
 8012228:	dd02      	ble.n	8012230 <_dtoa_r+0xa10>
 801222a:	9b02      	ldr	r3, [sp, #8]
 801222c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012230:	9b00      	ldr	r3, [sp, #0]
 8012232:	f883 8000 	strb.w	r8, [r3]
 8012236:	e63f      	b.n	8011eb8 <_dtoa_r+0x698>
 8012238:	4628      	mov	r0, r5
 801223a:	e7bb      	b.n	80121b4 <_dtoa_r+0x994>
 801223c:	2201      	movs	r2, #1
 801223e:	e7e1      	b.n	8012204 <_dtoa_r+0x9e4>
 8012240:	9b08      	ldr	r3, [sp, #32]
 8012242:	2b00      	cmp	r3, #0
 8012244:	db04      	blt.n	8012250 <_dtoa_r+0xa30>
 8012246:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012248:	430b      	orrs	r3, r1
 801224a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801224c:	430b      	orrs	r3, r1
 801224e:	d120      	bne.n	8012292 <_dtoa_r+0xa72>
 8012250:	2a00      	cmp	r2, #0
 8012252:	dded      	ble.n	8012230 <_dtoa_r+0xa10>
 8012254:	4649      	mov	r1, r9
 8012256:	2201      	movs	r2, #1
 8012258:	4658      	mov	r0, fp
 801225a:	f000 fbfd 	bl	8012a58 <__lshift>
 801225e:	4621      	mov	r1, r4
 8012260:	4681      	mov	r9, r0
 8012262:	f000 fc65 	bl	8012b30 <__mcmp>
 8012266:	2800      	cmp	r0, #0
 8012268:	dc03      	bgt.n	8012272 <_dtoa_r+0xa52>
 801226a:	d1e1      	bne.n	8012230 <_dtoa_r+0xa10>
 801226c:	f018 0f01 	tst.w	r8, #1
 8012270:	d0de      	beq.n	8012230 <_dtoa_r+0xa10>
 8012272:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012276:	d1d8      	bne.n	801222a <_dtoa_r+0xa0a>
 8012278:	9a00      	ldr	r2, [sp, #0]
 801227a:	2339      	movs	r3, #57	@ 0x39
 801227c:	7013      	strb	r3, [r2, #0]
 801227e:	4633      	mov	r3, r6
 8012280:	461e      	mov	r6, r3
 8012282:	3b01      	subs	r3, #1
 8012284:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012288:	2a39      	cmp	r2, #57	@ 0x39
 801228a:	d052      	beq.n	8012332 <_dtoa_r+0xb12>
 801228c:	3201      	adds	r2, #1
 801228e:	701a      	strb	r2, [r3, #0]
 8012290:	e612      	b.n	8011eb8 <_dtoa_r+0x698>
 8012292:	2a00      	cmp	r2, #0
 8012294:	dd07      	ble.n	80122a6 <_dtoa_r+0xa86>
 8012296:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801229a:	d0ed      	beq.n	8012278 <_dtoa_r+0xa58>
 801229c:	9a00      	ldr	r2, [sp, #0]
 801229e:	f108 0301 	add.w	r3, r8, #1
 80122a2:	7013      	strb	r3, [r2, #0]
 80122a4:	e608      	b.n	8011eb8 <_dtoa_r+0x698>
 80122a6:	9b07      	ldr	r3, [sp, #28]
 80122a8:	9a07      	ldr	r2, [sp, #28]
 80122aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80122ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122b0:	4293      	cmp	r3, r2
 80122b2:	d028      	beq.n	8012306 <_dtoa_r+0xae6>
 80122b4:	4649      	mov	r1, r9
 80122b6:	2300      	movs	r3, #0
 80122b8:	220a      	movs	r2, #10
 80122ba:	4658      	mov	r0, fp
 80122bc:	f000 f9d6 	bl	801266c <__multadd>
 80122c0:	42af      	cmp	r7, r5
 80122c2:	4681      	mov	r9, r0
 80122c4:	f04f 0300 	mov.w	r3, #0
 80122c8:	f04f 020a 	mov.w	r2, #10
 80122cc:	4639      	mov	r1, r7
 80122ce:	4658      	mov	r0, fp
 80122d0:	d107      	bne.n	80122e2 <_dtoa_r+0xac2>
 80122d2:	f000 f9cb 	bl	801266c <__multadd>
 80122d6:	4607      	mov	r7, r0
 80122d8:	4605      	mov	r5, r0
 80122da:	9b07      	ldr	r3, [sp, #28]
 80122dc:	3301      	adds	r3, #1
 80122de:	9307      	str	r3, [sp, #28]
 80122e0:	e774      	b.n	80121cc <_dtoa_r+0x9ac>
 80122e2:	f000 f9c3 	bl	801266c <__multadd>
 80122e6:	4629      	mov	r1, r5
 80122e8:	4607      	mov	r7, r0
 80122ea:	2300      	movs	r3, #0
 80122ec:	220a      	movs	r2, #10
 80122ee:	4658      	mov	r0, fp
 80122f0:	f000 f9bc 	bl	801266c <__multadd>
 80122f4:	4605      	mov	r5, r0
 80122f6:	e7f0      	b.n	80122da <_dtoa_r+0xaba>
 80122f8:	9b00      	ldr	r3, [sp, #0]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	bfcc      	ite	gt
 80122fe:	461e      	movgt	r6, r3
 8012300:	2601      	movle	r6, #1
 8012302:	4456      	add	r6, sl
 8012304:	2700      	movs	r7, #0
 8012306:	4649      	mov	r1, r9
 8012308:	2201      	movs	r2, #1
 801230a:	4658      	mov	r0, fp
 801230c:	f000 fba4 	bl	8012a58 <__lshift>
 8012310:	4621      	mov	r1, r4
 8012312:	4681      	mov	r9, r0
 8012314:	f000 fc0c 	bl	8012b30 <__mcmp>
 8012318:	2800      	cmp	r0, #0
 801231a:	dcb0      	bgt.n	801227e <_dtoa_r+0xa5e>
 801231c:	d102      	bne.n	8012324 <_dtoa_r+0xb04>
 801231e:	f018 0f01 	tst.w	r8, #1
 8012322:	d1ac      	bne.n	801227e <_dtoa_r+0xa5e>
 8012324:	4633      	mov	r3, r6
 8012326:	461e      	mov	r6, r3
 8012328:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801232c:	2a30      	cmp	r2, #48	@ 0x30
 801232e:	d0fa      	beq.n	8012326 <_dtoa_r+0xb06>
 8012330:	e5c2      	b.n	8011eb8 <_dtoa_r+0x698>
 8012332:	459a      	cmp	sl, r3
 8012334:	d1a4      	bne.n	8012280 <_dtoa_r+0xa60>
 8012336:	9b04      	ldr	r3, [sp, #16]
 8012338:	3301      	adds	r3, #1
 801233a:	9304      	str	r3, [sp, #16]
 801233c:	2331      	movs	r3, #49	@ 0x31
 801233e:	f88a 3000 	strb.w	r3, [sl]
 8012342:	e5b9      	b.n	8011eb8 <_dtoa_r+0x698>
 8012344:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012346:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80123a4 <_dtoa_r+0xb84>
 801234a:	b11b      	cbz	r3, 8012354 <_dtoa_r+0xb34>
 801234c:	f10a 0308 	add.w	r3, sl, #8
 8012350:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012352:	6013      	str	r3, [r2, #0]
 8012354:	4650      	mov	r0, sl
 8012356:	b019      	add	sp, #100	@ 0x64
 8012358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801235c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801235e:	2b01      	cmp	r3, #1
 8012360:	f77f ae37 	ble.w	8011fd2 <_dtoa_r+0x7b2>
 8012364:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012366:	930a      	str	r3, [sp, #40]	@ 0x28
 8012368:	2001      	movs	r0, #1
 801236a:	e655      	b.n	8012018 <_dtoa_r+0x7f8>
 801236c:	9b00      	ldr	r3, [sp, #0]
 801236e:	2b00      	cmp	r3, #0
 8012370:	f77f aed6 	ble.w	8012120 <_dtoa_r+0x900>
 8012374:	4656      	mov	r6, sl
 8012376:	4621      	mov	r1, r4
 8012378:	4648      	mov	r0, r9
 801237a:	f7ff f9c7 	bl	801170c <quorem>
 801237e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012382:	f806 8b01 	strb.w	r8, [r6], #1
 8012386:	9b00      	ldr	r3, [sp, #0]
 8012388:	eba6 020a 	sub.w	r2, r6, sl
 801238c:	4293      	cmp	r3, r2
 801238e:	ddb3      	ble.n	80122f8 <_dtoa_r+0xad8>
 8012390:	4649      	mov	r1, r9
 8012392:	2300      	movs	r3, #0
 8012394:	220a      	movs	r2, #10
 8012396:	4658      	mov	r0, fp
 8012398:	f000 f968 	bl	801266c <__multadd>
 801239c:	4681      	mov	r9, r0
 801239e:	e7ea      	b.n	8012376 <_dtoa_r+0xb56>
 80123a0:	08016e23 	.word	0x08016e23
 80123a4:	08016da7 	.word	0x08016da7

080123a8 <_free_r>:
 80123a8:	b538      	push	{r3, r4, r5, lr}
 80123aa:	4605      	mov	r5, r0
 80123ac:	2900      	cmp	r1, #0
 80123ae:	d041      	beq.n	8012434 <_free_r+0x8c>
 80123b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123b4:	1f0c      	subs	r4, r1, #4
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	bfb8      	it	lt
 80123ba:	18e4      	addlt	r4, r4, r3
 80123bc:	f000 f8e8 	bl	8012590 <__malloc_lock>
 80123c0:	4a1d      	ldr	r2, [pc, #116]	@ (8012438 <_free_r+0x90>)
 80123c2:	6813      	ldr	r3, [r2, #0]
 80123c4:	b933      	cbnz	r3, 80123d4 <_free_r+0x2c>
 80123c6:	6063      	str	r3, [r4, #4]
 80123c8:	6014      	str	r4, [r2, #0]
 80123ca:	4628      	mov	r0, r5
 80123cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123d0:	f000 b8e4 	b.w	801259c <__malloc_unlock>
 80123d4:	42a3      	cmp	r3, r4
 80123d6:	d908      	bls.n	80123ea <_free_r+0x42>
 80123d8:	6820      	ldr	r0, [r4, #0]
 80123da:	1821      	adds	r1, r4, r0
 80123dc:	428b      	cmp	r3, r1
 80123de:	bf01      	itttt	eq
 80123e0:	6819      	ldreq	r1, [r3, #0]
 80123e2:	685b      	ldreq	r3, [r3, #4]
 80123e4:	1809      	addeq	r1, r1, r0
 80123e6:	6021      	streq	r1, [r4, #0]
 80123e8:	e7ed      	b.n	80123c6 <_free_r+0x1e>
 80123ea:	461a      	mov	r2, r3
 80123ec:	685b      	ldr	r3, [r3, #4]
 80123ee:	b10b      	cbz	r3, 80123f4 <_free_r+0x4c>
 80123f0:	42a3      	cmp	r3, r4
 80123f2:	d9fa      	bls.n	80123ea <_free_r+0x42>
 80123f4:	6811      	ldr	r1, [r2, #0]
 80123f6:	1850      	adds	r0, r2, r1
 80123f8:	42a0      	cmp	r0, r4
 80123fa:	d10b      	bne.n	8012414 <_free_r+0x6c>
 80123fc:	6820      	ldr	r0, [r4, #0]
 80123fe:	4401      	add	r1, r0
 8012400:	1850      	adds	r0, r2, r1
 8012402:	4283      	cmp	r3, r0
 8012404:	6011      	str	r1, [r2, #0]
 8012406:	d1e0      	bne.n	80123ca <_free_r+0x22>
 8012408:	6818      	ldr	r0, [r3, #0]
 801240a:	685b      	ldr	r3, [r3, #4]
 801240c:	6053      	str	r3, [r2, #4]
 801240e:	4408      	add	r0, r1
 8012410:	6010      	str	r0, [r2, #0]
 8012412:	e7da      	b.n	80123ca <_free_r+0x22>
 8012414:	d902      	bls.n	801241c <_free_r+0x74>
 8012416:	230c      	movs	r3, #12
 8012418:	602b      	str	r3, [r5, #0]
 801241a:	e7d6      	b.n	80123ca <_free_r+0x22>
 801241c:	6820      	ldr	r0, [r4, #0]
 801241e:	1821      	adds	r1, r4, r0
 8012420:	428b      	cmp	r3, r1
 8012422:	bf04      	itt	eq
 8012424:	6819      	ldreq	r1, [r3, #0]
 8012426:	685b      	ldreq	r3, [r3, #4]
 8012428:	6063      	str	r3, [r4, #4]
 801242a:	bf04      	itt	eq
 801242c:	1809      	addeq	r1, r1, r0
 801242e:	6021      	streq	r1, [r4, #0]
 8012430:	6054      	str	r4, [r2, #4]
 8012432:	e7ca      	b.n	80123ca <_free_r+0x22>
 8012434:	bd38      	pop	{r3, r4, r5, pc}
 8012436:	bf00      	nop
 8012438:	20002674 	.word	0x20002674

0801243c <malloc>:
 801243c:	4b02      	ldr	r3, [pc, #8]	@ (8012448 <malloc+0xc>)
 801243e:	4601      	mov	r1, r0
 8012440:	6818      	ldr	r0, [r3, #0]
 8012442:	f000 b825 	b.w	8012490 <_malloc_r>
 8012446:	bf00      	nop
 8012448:	200001ac 	.word	0x200001ac

0801244c <sbrk_aligned>:
 801244c:	b570      	push	{r4, r5, r6, lr}
 801244e:	4e0f      	ldr	r6, [pc, #60]	@ (801248c <sbrk_aligned+0x40>)
 8012450:	460c      	mov	r4, r1
 8012452:	6831      	ldr	r1, [r6, #0]
 8012454:	4605      	mov	r5, r0
 8012456:	b911      	cbnz	r1, 801245e <sbrk_aligned+0x12>
 8012458:	f002 f988 	bl	801476c <_sbrk_r>
 801245c:	6030      	str	r0, [r6, #0]
 801245e:	4621      	mov	r1, r4
 8012460:	4628      	mov	r0, r5
 8012462:	f002 f983 	bl	801476c <_sbrk_r>
 8012466:	1c43      	adds	r3, r0, #1
 8012468:	d103      	bne.n	8012472 <sbrk_aligned+0x26>
 801246a:	f04f 34ff 	mov.w	r4, #4294967295
 801246e:	4620      	mov	r0, r4
 8012470:	bd70      	pop	{r4, r5, r6, pc}
 8012472:	1cc4      	adds	r4, r0, #3
 8012474:	f024 0403 	bic.w	r4, r4, #3
 8012478:	42a0      	cmp	r0, r4
 801247a:	d0f8      	beq.n	801246e <sbrk_aligned+0x22>
 801247c:	1a21      	subs	r1, r4, r0
 801247e:	4628      	mov	r0, r5
 8012480:	f002 f974 	bl	801476c <_sbrk_r>
 8012484:	3001      	adds	r0, #1
 8012486:	d1f2      	bne.n	801246e <sbrk_aligned+0x22>
 8012488:	e7ef      	b.n	801246a <sbrk_aligned+0x1e>
 801248a:	bf00      	nop
 801248c:	20002670 	.word	0x20002670

08012490 <_malloc_r>:
 8012490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012494:	1ccd      	adds	r5, r1, #3
 8012496:	f025 0503 	bic.w	r5, r5, #3
 801249a:	3508      	adds	r5, #8
 801249c:	2d0c      	cmp	r5, #12
 801249e:	bf38      	it	cc
 80124a0:	250c      	movcc	r5, #12
 80124a2:	2d00      	cmp	r5, #0
 80124a4:	4606      	mov	r6, r0
 80124a6:	db01      	blt.n	80124ac <_malloc_r+0x1c>
 80124a8:	42a9      	cmp	r1, r5
 80124aa:	d904      	bls.n	80124b6 <_malloc_r+0x26>
 80124ac:	230c      	movs	r3, #12
 80124ae:	6033      	str	r3, [r6, #0]
 80124b0:	2000      	movs	r0, #0
 80124b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801258c <_malloc_r+0xfc>
 80124ba:	f000 f869 	bl	8012590 <__malloc_lock>
 80124be:	f8d8 3000 	ldr.w	r3, [r8]
 80124c2:	461c      	mov	r4, r3
 80124c4:	bb44      	cbnz	r4, 8012518 <_malloc_r+0x88>
 80124c6:	4629      	mov	r1, r5
 80124c8:	4630      	mov	r0, r6
 80124ca:	f7ff ffbf 	bl	801244c <sbrk_aligned>
 80124ce:	1c43      	adds	r3, r0, #1
 80124d0:	4604      	mov	r4, r0
 80124d2:	d158      	bne.n	8012586 <_malloc_r+0xf6>
 80124d4:	f8d8 4000 	ldr.w	r4, [r8]
 80124d8:	4627      	mov	r7, r4
 80124da:	2f00      	cmp	r7, #0
 80124dc:	d143      	bne.n	8012566 <_malloc_r+0xd6>
 80124de:	2c00      	cmp	r4, #0
 80124e0:	d04b      	beq.n	801257a <_malloc_r+0xea>
 80124e2:	6823      	ldr	r3, [r4, #0]
 80124e4:	4639      	mov	r1, r7
 80124e6:	4630      	mov	r0, r6
 80124e8:	eb04 0903 	add.w	r9, r4, r3
 80124ec:	f002 f93e 	bl	801476c <_sbrk_r>
 80124f0:	4581      	cmp	r9, r0
 80124f2:	d142      	bne.n	801257a <_malloc_r+0xea>
 80124f4:	6821      	ldr	r1, [r4, #0]
 80124f6:	1a6d      	subs	r5, r5, r1
 80124f8:	4629      	mov	r1, r5
 80124fa:	4630      	mov	r0, r6
 80124fc:	f7ff ffa6 	bl	801244c <sbrk_aligned>
 8012500:	3001      	adds	r0, #1
 8012502:	d03a      	beq.n	801257a <_malloc_r+0xea>
 8012504:	6823      	ldr	r3, [r4, #0]
 8012506:	442b      	add	r3, r5
 8012508:	6023      	str	r3, [r4, #0]
 801250a:	f8d8 3000 	ldr.w	r3, [r8]
 801250e:	685a      	ldr	r2, [r3, #4]
 8012510:	bb62      	cbnz	r2, 801256c <_malloc_r+0xdc>
 8012512:	f8c8 7000 	str.w	r7, [r8]
 8012516:	e00f      	b.n	8012538 <_malloc_r+0xa8>
 8012518:	6822      	ldr	r2, [r4, #0]
 801251a:	1b52      	subs	r2, r2, r5
 801251c:	d420      	bmi.n	8012560 <_malloc_r+0xd0>
 801251e:	2a0b      	cmp	r2, #11
 8012520:	d917      	bls.n	8012552 <_malloc_r+0xc2>
 8012522:	1961      	adds	r1, r4, r5
 8012524:	42a3      	cmp	r3, r4
 8012526:	6025      	str	r5, [r4, #0]
 8012528:	bf18      	it	ne
 801252a:	6059      	strne	r1, [r3, #4]
 801252c:	6863      	ldr	r3, [r4, #4]
 801252e:	bf08      	it	eq
 8012530:	f8c8 1000 	streq.w	r1, [r8]
 8012534:	5162      	str	r2, [r4, r5]
 8012536:	604b      	str	r3, [r1, #4]
 8012538:	4630      	mov	r0, r6
 801253a:	f000 f82f 	bl	801259c <__malloc_unlock>
 801253e:	f104 000b 	add.w	r0, r4, #11
 8012542:	1d23      	adds	r3, r4, #4
 8012544:	f020 0007 	bic.w	r0, r0, #7
 8012548:	1ac2      	subs	r2, r0, r3
 801254a:	bf1c      	itt	ne
 801254c:	1a1b      	subne	r3, r3, r0
 801254e:	50a3      	strne	r3, [r4, r2]
 8012550:	e7af      	b.n	80124b2 <_malloc_r+0x22>
 8012552:	6862      	ldr	r2, [r4, #4]
 8012554:	42a3      	cmp	r3, r4
 8012556:	bf0c      	ite	eq
 8012558:	f8c8 2000 	streq.w	r2, [r8]
 801255c:	605a      	strne	r2, [r3, #4]
 801255e:	e7eb      	b.n	8012538 <_malloc_r+0xa8>
 8012560:	4623      	mov	r3, r4
 8012562:	6864      	ldr	r4, [r4, #4]
 8012564:	e7ae      	b.n	80124c4 <_malloc_r+0x34>
 8012566:	463c      	mov	r4, r7
 8012568:	687f      	ldr	r7, [r7, #4]
 801256a:	e7b6      	b.n	80124da <_malloc_r+0x4a>
 801256c:	461a      	mov	r2, r3
 801256e:	685b      	ldr	r3, [r3, #4]
 8012570:	42a3      	cmp	r3, r4
 8012572:	d1fb      	bne.n	801256c <_malloc_r+0xdc>
 8012574:	2300      	movs	r3, #0
 8012576:	6053      	str	r3, [r2, #4]
 8012578:	e7de      	b.n	8012538 <_malloc_r+0xa8>
 801257a:	230c      	movs	r3, #12
 801257c:	6033      	str	r3, [r6, #0]
 801257e:	4630      	mov	r0, r6
 8012580:	f000 f80c 	bl	801259c <__malloc_unlock>
 8012584:	e794      	b.n	80124b0 <_malloc_r+0x20>
 8012586:	6005      	str	r5, [r0, #0]
 8012588:	e7d6      	b.n	8012538 <_malloc_r+0xa8>
 801258a:	bf00      	nop
 801258c:	20002674 	.word	0x20002674

08012590 <__malloc_lock>:
 8012590:	4801      	ldr	r0, [pc, #4]	@ (8012598 <__malloc_lock+0x8>)
 8012592:	f7ff b8a4 	b.w	80116de <__retarget_lock_acquire_recursive>
 8012596:	bf00      	nop
 8012598:	2000266c 	.word	0x2000266c

0801259c <__malloc_unlock>:
 801259c:	4801      	ldr	r0, [pc, #4]	@ (80125a4 <__malloc_unlock+0x8>)
 801259e:	f7ff b89f 	b.w	80116e0 <__retarget_lock_release_recursive>
 80125a2:	bf00      	nop
 80125a4:	2000266c 	.word	0x2000266c

080125a8 <_Balloc>:
 80125a8:	b570      	push	{r4, r5, r6, lr}
 80125aa:	69c6      	ldr	r6, [r0, #28]
 80125ac:	4604      	mov	r4, r0
 80125ae:	460d      	mov	r5, r1
 80125b0:	b976      	cbnz	r6, 80125d0 <_Balloc+0x28>
 80125b2:	2010      	movs	r0, #16
 80125b4:	f7ff ff42 	bl	801243c <malloc>
 80125b8:	4602      	mov	r2, r0
 80125ba:	61e0      	str	r0, [r4, #28]
 80125bc:	b920      	cbnz	r0, 80125c8 <_Balloc+0x20>
 80125be:	4b18      	ldr	r3, [pc, #96]	@ (8012620 <_Balloc+0x78>)
 80125c0:	4818      	ldr	r0, [pc, #96]	@ (8012624 <_Balloc+0x7c>)
 80125c2:	216b      	movs	r1, #107	@ 0x6b
 80125c4:	f002 f8ec 	bl	80147a0 <__assert_func>
 80125c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80125cc:	6006      	str	r6, [r0, #0]
 80125ce:	60c6      	str	r6, [r0, #12]
 80125d0:	69e6      	ldr	r6, [r4, #28]
 80125d2:	68f3      	ldr	r3, [r6, #12]
 80125d4:	b183      	cbz	r3, 80125f8 <_Balloc+0x50>
 80125d6:	69e3      	ldr	r3, [r4, #28]
 80125d8:	68db      	ldr	r3, [r3, #12]
 80125da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80125de:	b9b8      	cbnz	r0, 8012610 <_Balloc+0x68>
 80125e0:	2101      	movs	r1, #1
 80125e2:	fa01 f605 	lsl.w	r6, r1, r5
 80125e6:	1d72      	adds	r2, r6, #5
 80125e8:	0092      	lsls	r2, r2, #2
 80125ea:	4620      	mov	r0, r4
 80125ec:	f002 f8f6 	bl	80147dc <_calloc_r>
 80125f0:	b160      	cbz	r0, 801260c <_Balloc+0x64>
 80125f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80125f6:	e00e      	b.n	8012616 <_Balloc+0x6e>
 80125f8:	2221      	movs	r2, #33	@ 0x21
 80125fa:	2104      	movs	r1, #4
 80125fc:	4620      	mov	r0, r4
 80125fe:	f002 f8ed 	bl	80147dc <_calloc_r>
 8012602:	69e3      	ldr	r3, [r4, #28]
 8012604:	60f0      	str	r0, [r6, #12]
 8012606:	68db      	ldr	r3, [r3, #12]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d1e4      	bne.n	80125d6 <_Balloc+0x2e>
 801260c:	2000      	movs	r0, #0
 801260e:	bd70      	pop	{r4, r5, r6, pc}
 8012610:	6802      	ldr	r2, [r0, #0]
 8012612:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012616:	2300      	movs	r3, #0
 8012618:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801261c:	e7f7      	b.n	801260e <_Balloc+0x66>
 801261e:	bf00      	nop
 8012620:	08016db4 	.word	0x08016db4
 8012624:	08016e34 	.word	0x08016e34

08012628 <_Bfree>:
 8012628:	b570      	push	{r4, r5, r6, lr}
 801262a:	69c6      	ldr	r6, [r0, #28]
 801262c:	4605      	mov	r5, r0
 801262e:	460c      	mov	r4, r1
 8012630:	b976      	cbnz	r6, 8012650 <_Bfree+0x28>
 8012632:	2010      	movs	r0, #16
 8012634:	f7ff ff02 	bl	801243c <malloc>
 8012638:	4602      	mov	r2, r0
 801263a:	61e8      	str	r0, [r5, #28]
 801263c:	b920      	cbnz	r0, 8012648 <_Bfree+0x20>
 801263e:	4b09      	ldr	r3, [pc, #36]	@ (8012664 <_Bfree+0x3c>)
 8012640:	4809      	ldr	r0, [pc, #36]	@ (8012668 <_Bfree+0x40>)
 8012642:	218f      	movs	r1, #143	@ 0x8f
 8012644:	f002 f8ac 	bl	80147a0 <__assert_func>
 8012648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801264c:	6006      	str	r6, [r0, #0]
 801264e:	60c6      	str	r6, [r0, #12]
 8012650:	b13c      	cbz	r4, 8012662 <_Bfree+0x3a>
 8012652:	69eb      	ldr	r3, [r5, #28]
 8012654:	6862      	ldr	r2, [r4, #4]
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801265c:	6021      	str	r1, [r4, #0]
 801265e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012662:	bd70      	pop	{r4, r5, r6, pc}
 8012664:	08016db4 	.word	0x08016db4
 8012668:	08016e34 	.word	0x08016e34

0801266c <__multadd>:
 801266c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012670:	690d      	ldr	r5, [r1, #16]
 8012672:	4607      	mov	r7, r0
 8012674:	460c      	mov	r4, r1
 8012676:	461e      	mov	r6, r3
 8012678:	f101 0c14 	add.w	ip, r1, #20
 801267c:	2000      	movs	r0, #0
 801267e:	f8dc 3000 	ldr.w	r3, [ip]
 8012682:	b299      	uxth	r1, r3
 8012684:	fb02 6101 	mla	r1, r2, r1, r6
 8012688:	0c1e      	lsrs	r6, r3, #16
 801268a:	0c0b      	lsrs	r3, r1, #16
 801268c:	fb02 3306 	mla	r3, r2, r6, r3
 8012690:	b289      	uxth	r1, r1
 8012692:	3001      	adds	r0, #1
 8012694:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012698:	4285      	cmp	r5, r0
 801269a:	f84c 1b04 	str.w	r1, [ip], #4
 801269e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80126a2:	dcec      	bgt.n	801267e <__multadd+0x12>
 80126a4:	b30e      	cbz	r6, 80126ea <__multadd+0x7e>
 80126a6:	68a3      	ldr	r3, [r4, #8]
 80126a8:	42ab      	cmp	r3, r5
 80126aa:	dc19      	bgt.n	80126e0 <__multadd+0x74>
 80126ac:	6861      	ldr	r1, [r4, #4]
 80126ae:	4638      	mov	r0, r7
 80126b0:	3101      	adds	r1, #1
 80126b2:	f7ff ff79 	bl	80125a8 <_Balloc>
 80126b6:	4680      	mov	r8, r0
 80126b8:	b928      	cbnz	r0, 80126c6 <__multadd+0x5a>
 80126ba:	4602      	mov	r2, r0
 80126bc:	4b0c      	ldr	r3, [pc, #48]	@ (80126f0 <__multadd+0x84>)
 80126be:	480d      	ldr	r0, [pc, #52]	@ (80126f4 <__multadd+0x88>)
 80126c0:	21ba      	movs	r1, #186	@ 0xba
 80126c2:	f002 f86d 	bl	80147a0 <__assert_func>
 80126c6:	6922      	ldr	r2, [r4, #16]
 80126c8:	3202      	adds	r2, #2
 80126ca:	f104 010c 	add.w	r1, r4, #12
 80126ce:	0092      	lsls	r2, r2, #2
 80126d0:	300c      	adds	r0, #12
 80126d2:	f7ff f806 	bl	80116e2 <memcpy>
 80126d6:	4621      	mov	r1, r4
 80126d8:	4638      	mov	r0, r7
 80126da:	f7ff ffa5 	bl	8012628 <_Bfree>
 80126de:	4644      	mov	r4, r8
 80126e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80126e4:	3501      	adds	r5, #1
 80126e6:	615e      	str	r6, [r3, #20]
 80126e8:	6125      	str	r5, [r4, #16]
 80126ea:	4620      	mov	r0, r4
 80126ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126f0:	08016e23 	.word	0x08016e23
 80126f4:	08016e34 	.word	0x08016e34

080126f8 <__s2b>:
 80126f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126fc:	460c      	mov	r4, r1
 80126fe:	4615      	mov	r5, r2
 8012700:	461f      	mov	r7, r3
 8012702:	2209      	movs	r2, #9
 8012704:	3308      	adds	r3, #8
 8012706:	4606      	mov	r6, r0
 8012708:	fb93 f3f2 	sdiv	r3, r3, r2
 801270c:	2100      	movs	r1, #0
 801270e:	2201      	movs	r2, #1
 8012710:	429a      	cmp	r2, r3
 8012712:	db09      	blt.n	8012728 <__s2b+0x30>
 8012714:	4630      	mov	r0, r6
 8012716:	f7ff ff47 	bl	80125a8 <_Balloc>
 801271a:	b940      	cbnz	r0, 801272e <__s2b+0x36>
 801271c:	4602      	mov	r2, r0
 801271e:	4b19      	ldr	r3, [pc, #100]	@ (8012784 <__s2b+0x8c>)
 8012720:	4819      	ldr	r0, [pc, #100]	@ (8012788 <__s2b+0x90>)
 8012722:	21d3      	movs	r1, #211	@ 0xd3
 8012724:	f002 f83c 	bl	80147a0 <__assert_func>
 8012728:	0052      	lsls	r2, r2, #1
 801272a:	3101      	adds	r1, #1
 801272c:	e7f0      	b.n	8012710 <__s2b+0x18>
 801272e:	9b08      	ldr	r3, [sp, #32]
 8012730:	6143      	str	r3, [r0, #20]
 8012732:	2d09      	cmp	r5, #9
 8012734:	f04f 0301 	mov.w	r3, #1
 8012738:	6103      	str	r3, [r0, #16]
 801273a:	dd16      	ble.n	801276a <__s2b+0x72>
 801273c:	f104 0909 	add.w	r9, r4, #9
 8012740:	46c8      	mov	r8, r9
 8012742:	442c      	add	r4, r5
 8012744:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012748:	4601      	mov	r1, r0
 801274a:	3b30      	subs	r3, #48	@ 0x30
 801274c:	220a      	movs	r2, #10
 801274e:	4630      	mov	r0, r6
 8012750:	f7ff ff8c 	bl	801266c <__multadd>
 8012754:	45a0      	cmp	r8, r4
 8012756:	d1f5      	bne.n	8012744 <__s2b+0x4c>
 8012758:	f1a5 0408 	sub.w	r4, r5, #8
 801275c:	444c      	add	r4, r9
 801275e:	1b2d      	subs	r5, r5, r4
 8012760:	1963      	adds	r3, r4, r5
 8012762:	42bb      	cmp	r3, r7
 8012764:	db04      	blt.n	8012770 <__s2b+0x78>
 8012766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801276a:	340a      	adds	r4, #10
 801276c:	2509      	movs	r5, #9
 801276e:	e7f6      	b.n	801275e <__s2b+0x66>
 8012770:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012774:	4601      	mov	r1, r0
 8012776:	3b30      	subs	r3, #48	@ 0x30
 8012778:	220a      	movs	r2, #10
 801277a:	4630      	mov	r0, r6
 801277c:	f7ff ff76 	bl	801266c <__multadd>
 8012780:	e7ee      	b.n	8012760 <__s2b+0x68>
 8012782:	bf00      	nop
 8012784:	08016e23 	.word	0x08016e23
 8012788:	08016e34 	.word	0x08016e34

0801278c <__hi0bits>:
 801278c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012790:	4603      	mov	r3, r0
 8012792:	bf36      	itet	cc
 8012794:	0403      	lslcc	r3, r0, #16
 8012796:	2000      	movcs	r0, #0
 8012798:	2010      	movcc	r0, #16
 801279a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801279e:	bf3c      	itt	cc
 80127a0:	021b      	lslcc	r3, r3, #8
 80127a2:	3008      	addcc	r0, #8
 80127a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80127a8:	bf3c      	itt	cc
 80127aa:	011b      	lslcc	r3, r3, #4
 80127ac:	3004      	addcc	r0, #4
 80127ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80127b2:	bf3c      	itt	cc
 80127b4:	009b      	lslcc	r3, r3, #2
 80127b6:	3002      	addcc	r0, #2
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	db05      	blt.n	80127c8 <__hi0bits+0x3c>
 80127bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80127c0:	f100 0001 	add.w	r0, r0, #1
 80127c4:	bf08      	it	eq
 80127c6:	2020      	moveq	r0, #32
 80127c8:	4770      	bx	lr

080127ca <__lo0bits>:
 80127ca:	6803      	ldr	r3, [r0, #0]
 80127cc:	4602      	mov	r2, r0
 80127ce:	f013 0007 	ands.w	r0, r3, #7
 80127d2:	d00b      	beq.n	80127ec <__lo0bits+0x22>
 80127d4:	07d9      	lsls	r1, r3, #31
 80127d6:	d421      	bmi.n	801281c <__lo0bits+0x52>
 80127d8:	0798      	lsls	r0, r3, #30
 80127da:	bf49      	itett	mi
 80127dc:	085b      	lsrmi	r3, r3, #1
 80127de:	089b      	lsrpl	r3, r3, #2
 80127e0:	2001      	movmi	r0, #1
 80127e2:	6013      	strmi	r3, [r2, #0]
 80127e4:	bf5c      	itt	pl
 80127e6:	6013      	strpl	r3, [r2, #0]
 80127e8:	2002      	movpl	r0, #2
 80127ea:	4770      	bx	lr
 80127ec:	b299      	uxth	r1, r3
 80127ee:	b909      	cbnz	r1, 80127f4 <__lo0bits+0x2a>
 80127f0:	0c1b      	lsrs	r3, r3, #16
 80127f2:	2010      	movs	r0, #16
 80127f4:	b2d9      	uxtb	r1, r3
 80127f6:	b909      	cbnz	r1, 80127fc <__lo0bits+0x32>
 80127f8:	3008      	adds	r0, #8
 80127fa:	0a1b      	lsrs	r3, r3, #8
 80127fc:	0719      	lsls	r1, r3, #28
 80127fe:	bf04      	itt	eq
 8012800:	091b      	lsreq	r3, r3, #4
 8012802:	3004      	addeq	r0, #4
 8012804:	0799      	lsls	r1, r3, #30
 8012806:	bf04      	itt	eq
 8012808:	089b      	lsreq	r3, r3, #2
 801280a:	3002      	addeq	r0, #2
 801280c:	07d9      	lsls	r1, r3, #31
 801280e:	d403      	bmi.n	8012818 <__lo0bits+0x4e>
 8012810:	085b      	lsrs	r3, r3, #1
 8012812:	f100 0001 	add.w	r0, r0, #1
 8012816:	d003      	beq.n	8012820 <__lo0bits+0x56>
 8012818:	6013      	str	r3, [r2, #0]
 801281a:	4770      	bx	lr
 801281c:	2000      	movs	r0, #0
 801281e:	4770      	bx	lr
 8012820:	2020      	movs	r0, #32
 8012822:	4770      	bx	lr

08012824 <__i2b>:
 8012824:	b510      	push	{r4, lr}
 8012826:	460c      	mov	r4, r1
 8012828:	2101      	movs	r1, #1
 801282a:	f7ff febd 	bl	80125a8 <_Balloc>
 801282e:	4602      	mov	r2, r0
 8012830:	b928      	cbnz	r0, 801283e <__i2b+0x1a>
 8012832:	4b05      	ldr	r3, [pc, #20]	@ (8012848 <__i2b+0x24>)
 8012834:	4805      	ldr	r0, [pc, #20]	@ (801284c <__i2b+0x28>)
 8012836:	f240 1145 	movw	r1, #325	@ 0x145
 801283a:	f001 ffb1 	bl	80147a0 <__assert_func>
 801283e:	2301      	movs	r3, #1
 8012840:	6144      	str	r4, [r0, #20]
 8012842:	6103      	str	r3, [r0, #16]
 8012844:	bd10      	pop	{r4, pc}
 8012846:	bf00      	nop
 8012848:	08016e23 	.word	0x08016e23
 801284c:	08016e34 	.word	0x08016e34

08012850 <__multiply>:
 8012850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012854:	4614      	mov	r4, r2
 8012856:	690a      	ldr	r2, [r1, #16]
 8012858:	6923      	ldr	r3, [r4, #16]
 801285a:	429a      	cmp	r2, r3
 801285c:	bfa8      	it	ge
 801285e:	4623      	movge	r3, r4
 8012860:	460f      	mov	r7, r1
 8012862:	bfa4      	itt	ge
 8012864:	460c      	movge	r4, r1
 8012866:	461f      	movge	r7, r3
 8012868:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801286c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012870:	68a3      	ldr	r3, [r4, #8]
 8012872:	6861      	ldr	r1, [r4, #4]
 8012874:	eb0a 0609 	add.w	r6, sl, r9
 8012878:	42b3      	cmp	r3, r6
 801287a:	b085      	sub	sp, #20
 801287c:	bfb8      	it	lt
 801287e:	3101      	addlt	r1, #1
 8012880:	f7ff fe92 	bl	80125a8 <_Balloc>
 8012884:	b930      	cbnz	r0, 8012894 <__multiply+0x44>
 8012886:	4602      	mov	r2, r0
 8012888:	4b44      	ldr	r3, [pc, #272]	@ (801299c <__multiply+0x14c>)
 801288a:	4845      	ldr	r0, [pc, #276]	@ (80129a0 <__multiply+0x150>)
 801288c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012890:	f001 ff86 	bl	80147a0 <__assert_func>
 8012894:	f100 0514 	add.w	r5, r0, #20
 8012898:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801289c:	462b      	mov	r3, r5
 801289e:	2200      	movs	r2, #0
 80128a0:	4543      	cmp	r3, r8
 80128a2:	d321      	bcc.n	80128e8 <__multiply+0x98>
 80128a4:	f107 0114 	add.w	r1, r7, #20
 80128a8:	f104 0214 	add.w	r2, r4, #20
 80128ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80128b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80128b4:	9302      	str	r3, [sp, #8]
 80128b6:	1b13      	subs	r3, r2, r4
 80128b8:	3b15      	subs	r3, #21
 80128ba:	f023 0303 	bic.w	r3, r3, #3
 80128be:	3304      	adds	r3, #4
 80128c0:	f104 0715 	add.w	r7, r4, #21
 80128c4:	42ba      	cmp	r2, r7
 80128c6:	bf38      	it	cc
 80128c8:	2304      	movcc	r3, #4
 80128ca:	9301      	str	r3, [sp, #4]
 80128cc:	9b02      	ldr	r3, [sp, #8]
 80128ce:	9103      	str	r1, [sp, #12]
 80128d0:	428b      	cmp	r3, r1
 80128d2:	d80c      	bhi.n	80128ee <__multiply+0x9e>
 80128d4:	2e00      	cmp	r6, #0
 80128d6:	dd03      	ble.n	80128e0 <__multiply+0x90>
 80128d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d05b      	beq.n	8012998 <__multiply+0x148>
 80128e0:	6106      	str	r6, [r0, #16]
 80128e2:	b005      	add	sp, #20
 80128e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e8:	f843 2b04 	str.w	r2, [r3], #4
 80128ec:	e7d8      	b.n	80128a0 <__multiply+0x50>
 80128ee:	f8b1 a000 	ldrh.w	sl, [r1]
 80128f2:	f1ba 0f00 	cmp.w	sl, #0
 80128f6:	d024      	beq.n	8012942 <__multiply+0xf2>
 80128f8:	f104 0e14 	add.w	lr, r4, #20
 80128fc:	46a9      	mov	r9, r5
 80128fe:	f04f 0c00 	mov.w	ip, #0
 8012902:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012906:	f8d9 3000 	ldr.w	r3, [r9]
 801290a:	fa1f fb87 	uxth.w	fp, r7
 801290e:	b29b      	uxth	r3, r3
 8012910:	fb0a 330b 	mla	r3, sl, fp, r3
 8012914:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8012918:	f8d9 7000 	ldr.w	r7, [r9]
 801291c:	4463      	add	r3, ip
 801291e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012922:	fb0a c70b 	mla	r7, sl, fp, ip
 8012926:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801292a:	b29b      	uxth	r3, r3
 801292c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012930:	4572      	cmp	r2, lr
 8012932:	f849 3b04 	str.w	r3, [r9], #4
 8012936:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801293a:	d8e2      	bhi.n	8012902 <__multiply+0xb2>
 801293c:	9b01      	ldr	r3, [sp, #4]
 801293e:	f845 c003 	str.w	ip, [r5, r3]
 8012942:	9b03      	ldr	r3, [sp, #12]
 8012944:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012948:	3104      	adds	r1, #4
 801294a:	f1b9 0f00 	cmp.w	r9, #0
 801294e:	d021      	beq.n	8012994 <__multiply+0x144>
 8012950:	682b      	ldr	r3, [r5, #0]
 8012952:	f104 0c14 	add.w	ip, r4, #20
 8012956:	46ae      	mov	lr, r5
 8012958:	f04f 0a00 	mov.w	sl, #0
 801295c:	f8bc b000 	ldrh.w	fp, [ip]
 8012960:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012964:	fb09 770b 	mla	r7, r9, fp, r7
 8012968:	4457      	add	r7, sl
 801296a:	b29b      	uxth	r3, r3
 801296c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012970:	f84e 3b04 	str.w	r3, [lr], #4
 8012974:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012978:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801297c:	f8be 3000 	ldrh.w	r3, [lr]
 8012980:	fb09 330a 	mla	r3, r9, sl, r3
 8012984:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012988:	4562      	cmp	r2, ip
 801298a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801298e:	d8e5      	bhi.n	801295c <__multiply+0x10c>
 8012990:	9f01      	ldr	r7, [sp, #4]
 8012992:	51eb      	str	r3, [r5, r7]
 8012994:	3504      	adds	r5, #4
 8012996:	e799      	b.n	80128cc <__multiply+0x7c>
 8012998:	3e01      	subs	r6, #1
 801299a:	e79b      	b.n	80128d4 <__multiply+0x84>
 801299c:	08016e23 	.word	0x08016e23
 80129a0:	08016e34 	.word	0x08016e34

080129a4 <__pow5mult>:
 80129a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129a8:	4615      	mov	r5, r2
 80129aa:	f012 0203 	ands.w	r2, r2, #3
 80129ae:	4607      	mov	r7, r0
 80129b0:	460e      	mov	r6, r1
 80129b2:	d007      	beq.n	80129c4 <__pow5mult+0x20>
 80129b4:	4c25      	ldr	r4, [pc, #148]	@ (8012a4c <__pow5mult+0xa8>)
 80129b6:	3a01      	subs	r2, #1
 80129b8:	2300      	movs	r3, #0
 80129ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80129be:	f7ff fe55 	bl	801266c <__multadd>
 80129c2:	4606      	mov	r6, r0
 80129c4:	10ad      	asrs	r5, r5, #2
 80129c6:	d03d      	beq.n	8012a44 <__pow5mult+0xa0>
 80129c8:	69fc      	ldr	r4, [r7, #28]
 80129ca:	b97c      	cbnz	r4, 80129ec <__pow5mult+0x48>
 80129cc:	2010      	movs	r0, #16
 80129ce:	f7ff fd35 	bl	801243c <malloc>
 80129d2:	4602      	mov	r2, r0
 80129d4:	61f8      	str	r0, [r7, #28]
 80129d6:	b928      	cbnz	r0, 80129e4 <__pow5mult+0x40>
 80129d8:	4b1d      	ldr	r3, [pc, #116]	@ (8012a50 <__pow5mult+0xac>)
 80129da:	481e      	ldr	r0, [pc, #120]	@ (8012a54 <__pow5mult+0xb0>)
 80129dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80129e0:	f001 fede 	bl	80147a0 <__assert_func>
 80129e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80129e8:	6004      	str	r4, [r0, #0]
 80129ea:	60c4      	str	r4, [r0, #12]
 80129ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80129f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80129f4:	b94c      	cbnz	r4, 8012a0a <__pow5mult+0x66>
 80129f6:	f240 2171 	movw	r1, #625	@ 0x271
 80129fa:	4638      	mov	r0, r7
 80129fc:	f7ff ff12 	bl	8012824 <__i2b>
 8012a00:	2300      	movs	r3, #0
 8012a02:	f8c8 0008 	str.w	r0, [r8, #8]
 8012a06:	4604      	mov	r4, r0
 8012a08:	6003      	str	r3, [r0, #0]
 8012a0a:	f04f 0900 	mov.w	r9, #0
 8012a0e:	07eb      	lsls	r3, r5, #31
 8012a10:	d50a      	bpl.n	8012a28 <__pow5mult+0x84>
 8012a12:	4631      	mov	r1, r6
 8012a14:	4622      	mov	r2, r4
 8012a16:	4638      	mov	r0, r7
 8012a18:	f7ff ff1a 	bl	8012850 <__multiply>
 8012a1c:	4631      	mov	r1, r6
 8012a1e:	4680      	mov	r8, r0
 8012a20:	4638      	mov	r0, r7
 8012a22:	f7ff fe01 	bl	8012628 <_Bfree>
 8012a26:	4646      	mov	r6, r8
 8012a28:	106d      	asrs	r5, r5, #1
 8012a2a:	d00b      	beq.n	8012a44 <__pow5mult+0xa0>
 8012a2c:	6820      	ldr	r0, [r4, #0]
 8012a2e:	b938      	cbnz	r0, 8012a40 <__pow5mult+0x9c>
 8012a30:	4622      	mov	r2, r4
 8012a32:	4621      	mov	r1, r4
 8012a34:	4638      	mov	r0, r7
 8012a36:	f7ff ff0b 	bl	8012850 <__multiply>
 8012a3a:	6020      	str	r0, [r4, #0]
 8012a3c:	f8c0 9000 	str.w	r9, [r0]
 8012a40:	4604      	mov	r4, r0
 8012a42:	e7e4      	b.n	8012a0e <__pow5mult+0x6a>
 8012a44:	4630      	mov	r0, r6
 8012a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a4a:	bf00      	nop
 8012a4c:	08016e90 	.word	0x08016e90
 8012a50:	08016db4 	.word	0x08016db4
 8012a54:	08016e34 	.word	0x08016e34

08012a58 <__lshift>:
 8012a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a5c:	460c      	mov	r4, r1
 8012a5e:	6849      	ldr	r1, [r1, #4]
 8012a60:	6923      	ldr	r3, [r4, #16]
 8012a62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012a66:	68a3      	ldr	r3, [r4, #8]
 8012a68:	4607      	mov	r7, r0
 8012a6a:	4691      	mov	r9, r2
 8012a6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012a70:	f108 0601 	add.w	r6, r8, #1
 8012a74:	42b3      	cmp	r3, r6
 8012a76:	db0b      	blt.n	8012a90 <__lshift+0x38>
 8012a78:	4638      	mov	r0, r7
 8012a7a:	f7ff fd95 	bl	80125a8 <_Balloc>
 8012a7e:	4605      	mov	r5, r0
 8012a80:	b948      	cbnz	r0, 8012a96 <__lshift+0x3e>
 8012a82:	4602      	mov	r2, r0
 8012a84:	4b28      	ldr	r3, [pc, #160]	@ (8012b28 <__lshift+0xd0>)
 8012a86:	4829      	ldr	r0, [pc, #164]	@ (8012b2c <__lshift+0xd4>)
 8012a88:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012a8c:	f001 fe88 	bl	80147a0 <__assert_func>
 8012a90:	3101      	adds	r1, #1
 8012a92:	005b      	lsls	r3, r3, #1
 8012a94:	e7ee      	b.n	8012a74 <__lshift+0x1c>
 8012a96:	2300      	movs	r3, #0
 8012a98:	f100 0114 	add.w	r1, r0, #20
 8012a9c:	f100 0210 	add.w	r2, r0, #16
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	4553      	cmp	r3, sl
 8012aa4:	db33      	blt.n	8012b0e <__lshift+0xb6>
 8012aa6:	6920      	ldr	r0, [r4, #16]
 8012aa8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012aac:	f104 0314 	add.w	r3, r4, #20
 8012ab0:	f019 091f 	ands.w	r9, r9, #31
 8012ab4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012ab8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012abc:	d02b      	beq.n	8012b16 <__lshift+0xbe>
 8012abe:	f1c9 0e20 	rsb	lr, r9, #32
 8012ac2:	468a      	mov	sl, r1
 8012ac4:	2200      	movs	r2, #0
 8012ac6:	6818      	ldr	r0, [r3, #0]
 8012ac8:	fa00 f009 	lsl.w	r0, r0, r9
 8012acc:	4310      	orrs	r0, r2
 8012ace:	f84a 0b04 	str.w	r0, [sl], #4
 8012ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ad6:	459c      	cmp	ip, r3
 8012ad8:	fa22 f20e 	lsr.w	r2, r2, lr
 8012adc:	d8f3      	bhi.n	8012ac6 <__lshift+0x6e>
 8012ade:	ebac 0304 	sub.w	r3, ip, r4
 8012ae2:	3b15      	subs	r3, #21
 8012ae4:	f023 0303 	bic.w	r3, r3, #3
 8012ae8:	3304      	adds	r3, #4
 8012aea:	f104 0015 	add.w	r0, r4, #21
 8012aee:	4584      	cmp	ip, r0
 8012af0:	bf38      	it	cc
 8012af2:	2304      	movcc	r3, #4
 8012af4:	50ca      	str	r2, [r1, r3]
 8012af6:	b10a      	cbz	r2, 8012afc <__lshift+0xa4>
 8012af8:	f108 0602 	add.w	r6, r8, #2
 8012afc:	3e01      	subs	r6, #1
 8012afe:	4638      	mov	r0, r7
 8012b00:	612e      	str	r6, [r5, #16]
 8012b02:	4621      	mov	r1, r4
 8012b04:	f7ff fd90 	bl	8012628 <_Bfree>
 8012b08:	4628      	mov	r0, r5
 8012b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012b12:	3301      	adds	r3, #1
 8012b14:	e7c5      	b.n	8012aa2 <__lshift+0x4a>
 8012b16:	3904      	subs	r1, #4
 8012b18:	f853 2b04 	ldr.w	r2, [r3], #4
 8012b1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012b20:	459c      	cmp	ip, r3
 8012b22:	d8f9      	bhi.n	8012b18 <__lshift+0xc0>
 8012b24:	e7ea      	b.n	8012afc <__lshift+0xa4>
 8012b26:	bf00      	nop
 8012b28:	08016e23 	.word	0x08016e23
 8012b2c:	08016e34 	.word	0x08016e34

08012b30 <__mcmp>:
 8012b30:	690a      	ldr	r2, [r1, #16]
 8012b32:	4603      	mov	r3, r0
 8012b34:	6900      	ldr	r0, [r0, #16]
 8012b36:	1a80      	subs	r0, r0, r2
 8012b38:	b530      	push	{r4, r5, lr}
 8012b3a:	d10e      	bne.n	8012b5a <__mcmp+0x2a>
 8012b3c:	3314      	adds	r3, #20
 8012b3e:	3114      	adds	r1, #20
 8012b40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012b44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012b48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012b4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012b50:	4295      	cmp	r5, r2
 8012b52:	d003      	beq.n	8012b5c <__mcmp+0x2c>
 8012b54:	d205      	bcs.n	8012b62 <__mcmp+0x32>
 8012b56:	f04f 30ff 	mov.w	r0, #4294967295
 8012b5a:	bd30      	pop	{r4, r5, pc}
 8012b5c:	42a3      	cmp	r3, r4
 8012b5e:	d3f3      	bcc.n	8012b48 <__mcmp+0x18>
 8012b60:	e7fb      	b.n	8012b5a <__mcmp+0x2a>
 8012b62:	2001      	movs	r0, #1
 8012b64:	e7f9      	b.n	8012b5a <__mcmp+0x2a>
	...

08012b68 <__mdiff>:
 8012b68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b6c:	4689      	mov	r9, r1
 8012b6e:	4606      	mov	r6, r0
 8012b70:	4611      	mov	r1, r2
 8012b72:	4648      	mov	r0, r9
 8012b74:	4614      	mov	r4, r2
 8012b76:	f7ff ffdb 	bl	8012b30 <__mcmp>
 8012b7a:	1e05      	subs	r5, r0, #0
 8012b7c:	d112      	bne.n	8012ba4 <__mdiff+0x3c>
 8012b7e:	4629      	mov	r1, r5
 8012b80:	4630      	mov	r0, r6
 8012b82:	f7ff fd11 	bl	80125a8 <_Balloc>
 8012b86:	4602      	mov	r2, r0
 8012b88:	b928      	cbnz	r0, 8012b96 <__mdiff+0x2e>
 8012b8a:	4b3f      	ldr	r3, [pc, #252]	@ (8012c88 <__mdiff+0x120>)
 8012b8c:	f240 2137 	movw	r1, #567	@ 0x237
 8012b90:	483e      	ldr	r0, [pc, #248]	@ (8012c8c <__mdiff+0x124>)
 8012b92:	f001 fe05 	bl	80147a0 <__assert_func>
 8012b96:	2301      	movs	r3, #1
 8012b98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012b9c:	4610      	mov	r0, r2
 8012b9e:	b003      	add	sp, #12
 8012ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ba4:	bfbc      	itt	lt
 8012ba6:	464b      	movlt	r3, r9
 8012ba8:	46a1      	movlt	r9, r4
 8012baa:	4630      	mov	r0, r6
 8012bac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012bb0:	bfba      	itte	lt
 8012bb2:	461c      	movlt	r4, r3
 8012bb4:	2501      	movlt	r5, #1
 8012bb6:	2500      	movge	r5, #0
 8012bb8:	f7ff fcf6 	bl	80125a8 <_Balloc>
 8012bbc:	4602      	mov	r2, r0
 8012bbe:	b918      	cbnz	r0, 8012bc8 <__mdiff+0x60>
 8012bc0:	4b31      	ldr	r3, [pc, #196]	@ (8012c88 <__mdiff+0x120>)
 8012bc2:	f240 2145 	movw	r1, #581	@ 0x245
 8012bc6:	e7e3      	b.n	8012b90 <__mdiff+0x28>
 8012bc8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012bcc:	6926      	ldr	r6, [r4, #16]
 8012bce:	60c5      	str	r5, [r0, #12]
 8012bd0:	f109 0310 	add.w	r3, r9, #16
 8012bd4:	f109 0514 	add.w	r5, r9, #20
 8012bd8:	f104 0e14 	add.w	lr, r4, #20
 8012bdc:	f100 0b14 	add.w	fp, r0, #20
 8012be0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012be4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012be8:	9301      	str	r3, [sp, #4]
 8012bea:	46d9      	mov	r9, fp
 8012bec:	f04f 0c00 	mov.w	ip, #0
 8012bf0:	9b01      	ldr	r3, [sp, #4]
 8012bf2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012bf6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012bfa:	9301      	str	r3, [sp, #4]
 8012bfc:	fa1f f38a 	uxth.w	r3, sl
 8012c00:	4619      	mov	r1, r3
 8012c02:	b283      	uxth	r3, r0
 8012c04:	1acb      	subs	r3, r1, r3
 8012c06:	0c00      	lsrs	r0, r0, #16
 8012c08:	4463      	add	r3, ip
 8012c0a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012c0e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012c18:	4576      	cmp	r6, lr
 8012c1a:	f849 3b04 	str.w	r3, [r9], #4
 8012c1e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012c22:	d8e5      	bhi.n	8012bf0 <__mdiff+0x88>
 8012c24:	1b33      	subs	r3, r6, r4
 8012c26:	3b15      	subs	r3, #21
 8012c28:	f023 0303 	bic.w	r3, r3, #3
 8012c2c:	3415      	adds	r4, #21
 8012c2e:	3304      	adds	r3, #4
 8012c30:	42a6      	cmp	r6, r4
 8012c32:	bf38      	it	cc
 8012c34:	2304      	movcc	r3, #4
 8012c36:	441d      	add	r5, r3
 8012c38:	445b      	add	r3, fp
 8012c3a:	461e      	mov	r6, r3
 8012c3c:	462c      	mov	r4, r5
 8012c3e:	4544      	cmp	r4, r8
 8012c40:	d30e      	bcc.n	8012c60 <__mdiff+0xf8>
 8012c42:	f108 0103 	add.w	r1, r8, #3
 8012c46:	1b49      	subs	r1, r1, r5
 8012c48:	f021 0103 	bic.w	r1, r1, #3
 8012c4c:	3d03      	subs	r5, #3
 8012c4e:	45a8      	cmp	r8, r5
 8012c50:	bf38      	it	cc
 8012c52:	2100      	movcc	r1, #0
 8012c54:	440b      	add	r3, r1
 8012c56:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012c5a:	b191      	cbz	r1, 8012c82 <__mdiff+0x11a>
 8012c5c:	6117      	str	r7, [r2, #16]
 8012c5e:	e79d      	b.n	8012b9c <__mdiff+0x34>
 8012c60:	f854 1b04 	ldr.w	r1, [r4], #4
 8012c64:	46e6      	mov	lr, ip
 8012c66:	0c08      	lsrs	r0, r1, #16
 8012c68:	fa1c fc81 	uxtah	ip, ip, r1
 8012c6c:	4471      	add	r1, lr
 8012c6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012c72:	b289      	uxth	r1, r1
 8012c74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012c78:	f846 1b04 	str.w	r1, [r6], #4
 8012c7c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012c80:	e7dd      	b.n	8012c3e <__mdiff+0xd6>
 8012c82:	3f01      	subs	r7, #1
 8012c84:	e7e7      	b.n	8012c56 <__mdiff+0xee>
 8012c86:	bf00      	nop
 8012c88:	08016e23 	.word	0x08016e23
 8012c8c:	08016e34 	.word	0x08016e34

08012c90 <__ulp>:
 8012c90:	b082      	sub	sp, #8
 8012c92:	ed8d 0b00 	vstr	d0, [sp]
 8012c96:	9a01      	ldr	r2, [sp, #4]
 8012c98:	4b0f      	ldr	r3, [pc, #60]	@ (8012cd8 <__ulp+0x48>)
 8012c9a:	4013      	ands	r3, r2
 8012c9c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	dc08      	bgt.n	8012cb6 <__ulp+0x26>
 8012ca4:	425b      	negs	r3, r3
 8012ca6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012caa:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012cae:	da04      	bge.n	8012cba <__ulp+0x2a>
 8012cb0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012cb4:	4113      	asrs	r3, r2
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	e008      	b.n	8012ccc <__ulp+0x3c>
 8012cba:	f1a2 0314 	sub.w	r3, r2, #20
 8012cbe:	2b1e      	cmp	r3, #30
 8012cc0:	bfda      	itte	le
 8012cc2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012cc6:	40da      	lsrle	r2, r3
 8012cc8:	2201      	movgt	r2, #1
 8012cca:	2300      	movs	r3, #0
 8012ccc:	4619      	mov	r1, r3
 8012cce:	4610      	mov	r0, r2
 8012cd0:	ec41 0b10 	vmov	d0, r0, r1
 8012cd4:	b002      	add	sp, #8
 8012cd6:	4770      	bx	lr
 8012cd8:	7ff00000 	.word	0x7ff00000

08012cdc <__b2d>:
 8012cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ce0:	6906      	ldr	r6, [r0, #16]
 8012ce2:	f100 0814 	add.w	r8, r0, #20
 8012ce6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012cea:	1f37      	subs	r7, r6, #4
 8012cec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012cf0:	4610      	mov	r0, r2
 8012cf2:	f7ff fd4b 	bl	801278c <__hi0bits>
 8012cf6:	f1c0 0320 	rsb	r3, r0, #32
 8012cfa:	280a      	cmp	r0, #10
 8012cfc:	600b      	str	r3, [r1, #0]
 8012cfe:	491b      	ldr	r1, [pc, #108]	@ (8012d6c <__b2d+0x90>)
 8012d00:	dc15      	bgt.n	8012d2e <__b2d+0x52>
 8012d02:	f1c0 0c0b 	rsb	ip, r0, #11
 8012d06:	fa22 f30c 	lsr.w	r3, r2, ip
 8012d0a:	45b8      	cmp	r8, r7
 8012d0c:	ea43 0501 	orr.w	r5, r3, r1
 8012d10:	bf34      	ite	cc
 8012d12:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012d16:	2300      	movcs	r3, #0
 8012d18:	3015      	adds	r0, #21
 8012d1a:	fa02 f000 	lsl.w	r0, r2, r0
 8012d1e:	fa23 f30c 	lsr.w	r3, r3, ip
 8012d22:	4303      	orrs	r3, r0
 8012d24:	461c      	mov	r4, r3
 8012d26:	ec45 4b10 	vmov	d0, r4, r5
 8012d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d2e:	45b8      	cmp	r8, r7
 8012d30:	bf3a      	itte	cc
 8012d32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012d36:	f1a6 0708 	subcc.w	r7, r6, #8
 8012d3a:	2300      	movcs	r3, #0
 8012d3c:	380b      	subs	r0, #11
 8012d3e:	d012      	beq.n	8012d66 <__b2d+0x8a>
 8012d40:	f1c0 0120 	rsb	r1, r0, #32
 8012d44:	fa23 f401 	lsr.w	r4, r3, r1
 8012d48:	4082      	lsls	r2, r0
 8012d4a:	4322      	orrs	r2, r4
 8012d4c:	4547      	cmp	r7, r8
 8012d4e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012d52:	bf8c      	ite	hi
 8012d54:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012d58:	2200      	movls	r2, #0
 8012d5a:	4083      	lsls	r3, r0
 8012d5c:	40ca      	lsrs	r2, r1
 8012d5e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012d62:	4313      	orrs	r3, r2
 8012d64:	e7de      	b.n	8012d24 <__b2d+0x48>
 8012d66:	ea42 0501 	orr.w	r5, r2, r1
 8012d6a:	e7db      	b.n	8012d24 <__b2d+0x48>
 8012d6c:	3ff00000 	.word	0x3ff00000

08012d70 <__d2b>:
 8012d70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012d74:	460f      	mov	r7, r1
 8012d76:	2101      	movs	r1, #1
 8012d78:	ec59 8b10 	vmov	r8, r9, d0
 8012d7c:	4616      	mov	r6, r2
 8012d7e:	f7ff fc13 	bl	80125a8 <_Balloc>
 8012d82:	4604      	mov	r4, r0
 8012d84:	b930      	cbnz	r0, 8012d94 <__d2b+0x24>
 8012d86:	4602      	mov	r2, r0
 8012d88:	4b23      	ldr	r3, [pc, #140]	@ (8012e18 <__d2b+0xa8>)
 8012d8a:	4824      	ldr	r0, [pc, #144]	@ (8012e1c <__d2b+0xac>)
 8012d8c:	f240 310f 	movw	r1, #783	@ 0x30f
 8012d90:	f001 fd06 	bl	80147a0 <__assert_func>
 8012d94:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012d98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012d9c:	b10d      	cbz	r5, 8012da2 <__d2b+0x32>
 8012d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012da2:	9301      	str	r3, [sp, #4]
 8012da4:	f1b8 0300 	subs.w	r3, r8, #0
 8012da8:	d023      	beq.n	8012df2 <__d2b+0x82>
 8012daa:	4668      	mov	r0, sp
 8012dac:	9300      	str	r3, [sp, #0]
 8012dae:	f7ff fd0c 	bl	80127ca <__lo0bits>
 8012db2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012db6:	b1d0      	cbz	r0, 8012dee <__d2b+0x7e>
 8012db8:	f1c0 0320 	rsb	r3, r0, #32
 8012dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8012dc0:	430b      	orrs	r3, r1
 8012dc2:	40c2      	lsrs	r2, r0
 8012dc4:	6163      	str	r3, [r4, #20]
 8012dc6:	9201      	str	r2, [sp, #4]
 8012dc8:	9b01      	ldr	r3, [sp, #4]
 8012dca:	61a3      	str	r3, [r4, #24]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	bf0c      	ite	eq
 8012dd0:	2201      	moveq	r2, #1
 8012dd2:	2202      	movne	r2, #2
 8012dd4:	6122      	str	r2, [r4, #16]
 8012dd6:	b1a5      	cbz	r5, 8012e02 <__d2b+0x92>
 8012dd8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012ddc:	4405      	add	r5, r0
 8012dde:	603d      	str	r5, [r7, #0]
 8012de0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012de4:	6030      	str	r0, [r6, #0]
 8012de6:	4620      	mov	r0, r4
 8012de8:	b003      	add	sp, #12
 8012dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012dee:	6161      	str	r1, [r4, #20]
 8012df0:	e7ea      	b.n	8012dc8 <__d2b+0x58>
 8012df2:	a801      	add	r0, sp, #4
 8012df4:	f7ff fce9 	bl	80127ca <__lo0bits>
 8012df8:	9b01      	ldr	r3, [sp, #4]
 8012dfa:	6163      	str	r3, [r4, #20]
 8012dfc:	3020      	adds	r0, #32
 8012dfe:	2201      	movs	r2, #1
 8012e00:	e7e8      	b.n	8012dd4 <__d2b+0x64>
 8012e02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012e06:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012e0a:	6038      	str	r0, [r7, #0]
 8012e0c:	6918      	ldr	r0, [r3, #16]
 8012e0e:	f7ff fcbd 	bl	801278c <__hi0bits>
 8012e12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012e16:	e7e5      	b.n	8012de4 <__d2b+0x74>
 8012e18:	08016e23 	.word	0x08016e23
 8012e1c:	08016e34 	.word	0x08016e34

08012e20 <__ratio>:
 8012e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e24:	b085      	sub	sp, #20
 8012e26:	e9cd 1000 	strd	r1, r0, [sp]
 8012e2a:	a902      	add	r1, sp, #8
 8012e2c:	f7ff ff56 	bl	8012cdc <__b2d>
 8012e30:	9800      	ldr	r0, [sp, #0]
 8012e32:	a903      	add	r1, sp, #12
 8012e34:	ec55 4b10 	vmov	r4, r5, d0
 8012e38:	f7ff ff50 	bl	8012cdc <__b2d>
 8012e3c:	9b01      	ldr	r3, [sp, #4]
 8012e3e:	6919      	ldr	r1, [r3, #16]
 8012e40:	9b00      	ldr	r3, [sp, #0]
 8012e42:	691b      	ldr	r3, [r3, #16]
 8012e44:	1ac9      	subs	r1, r1, r3
 8012e46:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012e4a:	1a9b      	subs	r3, r3, r2
 8012e4c:	ec5b ab10 	vmov	sl, fp, d0
 8012e50:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	bfce      	itee	gt
 8012e58:	462a      	movgt	r2, r5
 8012e5a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012e5e:	465a      	movle	r2, fp
 8012e60:	462f      	mov	r7, r5
 8012e62:	46d9      	mov	r9, fp
 8012e64:	bfcc      	ite	gt
 8012e66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012e6a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012e6e:	464b      	mov	r3, r9
 8012e70:	4652      	mov	r2, sl
 8012e72:	4620      	mov	r0, r4
 8012e74:	4639      	mov	r1, r7
 8012e76:	f7ed fd11 	bl	800089c <__aeabi_ddiv>
 8012e7a:	ec41 0b10 	vmov	d0, r0, r1
 8012e7e:	b005      	add	sp, #20
 8012e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012e84 <__copybits>:
 8012e84:	3901      	subs	r1, #1
 8012e86:	b570      	push	{r4, r5, r6, lr}
 8012e88:	1149      	asrs	r1, r1, #5
 8012e8a:	6914      	ldr	r4, [r2, #16]
 8012e8c:	3101      	adds	r1, #1
 8012e8e:	f102 0314 	add.w	r3, r2, #20
 8012e92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012e96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012e9a:	1f05      	subs	r5, r0, #4
 8012e9c:	42a3      	cmp	r3, r4
 8012e9e:	d30c      	bcc.n	8012eba <__copybits+0x36>
 8012ea0:	1aa3      	subs	r3, r4, r2
 8012ea2:	3b11      	subs	r3, #17
 8012ea4:	f023 0303 	bic.w	r3, r3, #3
 8012ea8:	3211      	adds	r2, #17
 8012eaa:	42a2      	cmp	r2, r4
 8012eac:	bf88      	it	hi
 8012eae:	2300      	movhi	r3, #0
 8012eb0:	4418      	add	r0, r3
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	4288      	cmp	r0, r1
 8012eb6:	d305      	bcc.n	8012ec4 <__copybits+0x40>
 8012eb8:	bd70      	pop	{r4, r5, r6, pc}
 8012eba:	f853 6b04 	ldr.w	r6, [r3], #4
 8012ebe:	f845 6f04 	str.w	r6, [r5, #4]!
 8012ec2:	e7eb      	b.n	8012e9c <__copybits+0x18>
 8012ec4:	f840 3b04 	str.w	r3, [r0], #4
 8012ec8:	e7f4      	b.n	8012eb4 <__copybits+0x30>

08012eca <__any_on>:
 8012eca:	f100 0214 	add.w	r2, r0, #20
 8012ece:	6900      	ldr	r0, [r0, #16]
 8012ed0:	114b      	asrs	r3, r1, #5
 8012ed2:	4298      	cmp	r0, r3
 8012ed4:	b510      	push	{r4, lr}
 8012ed6:	db11      	blt.n	8012efc <__any_on+0x32>
 8012ed8:	dd0a      	ble.n	8012ef0 <__any_on+0x26>
 8012eda:	f011 011f 	ands.w	r1, r1, #31
 8012ede:	d007      	beq.n	8012ef0 <__any_on+0x26>
 8012ee0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012ee4:	fa24 f001 	lsr.w	r0, r4, r1
 8012ee8:	fa00 f101 	lsl.w	r1, r0, r1
 8012eec:	428c      	cmp	r4, r1
 8012eee:	d10b      	bne.n	8012f08 <__any_on+0x3e>
 8012ef0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012ef4:	4293      	cmp	r3, r2
 8012ef6:	d803      	bhi.n	8012f00 <__any_on+0x36>
 8012ef8:	2000      	movs	r0, #0
 8012efa:	bd10      	pop	{r4, pc}
 8012efc:	4603      	mov	r3, r0
 8012efe:	e7f7      	b.n	8012ef0 <__any_on+0x26>
 8012f00:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012f04:	2900      	cmp	r1, #0
 8012f06:	d0f5      	beq.n	8012ef4 <__any_on+0x2a>
 8012f08:	2001      	movs	r0, #1
 8012f0a:	e7f6      	b.n	8012efa <__any_on+0x30>

08012f0c <sulp>:
 8012f0c:	b570      	push	{r4, r5, r6, lr}
 8012f0e:	4604      	mov	r4, r0
 8012f10:	460d      	mov	r5, r1
 8012f12:	ec45 4b10 	vmov	d0, r4, r5
 8012f16:	4616      	mov	r6, r2
 8012f18:	f7ff feba 	bl	8012c90 <__ulp>
 8012f1c:	ec51 0b10 	vmov	r0, r1, d0
 8012f20:	b17e      	cbz	r6, 8012f42 <sulp+0x36>
 8012f22:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012f26:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	dd09      	ble.n	8012f42 <sulp+0x36>
 8012f2e:	051b      	lsls	r3, r3, #20
 8012f30:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8012f34:	2400      	movs	r4, #0
 8012f36:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8012f3a:	4622      	mov	r2, r4
 8012f3c:	462b      	mov	r3, r5
 8012f3e:	f7ed fb83 	bl	8000648 <__aeabi_dmul>
 8012f42:	ec41 0b10 	vmov	d0, r0, r1
 8012f46:	bd70      	pop	{r4, r5, r6, pc}

08012f48 <_strtod_l>:
 8012f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f4c:	b09f      	sub	sp, #124	@ 0x7c
 8012f4e:	460c      	mov	r4, r1
 8012f50:	9217      	str	r2, [sp, #92]	@ 0x5c
 8012f52:	2200      	movs	r2, #0
 8012f54:	921a      	str	r2, [sp, #104]	@ 0x68
 8012f56:	9005      	str	r0, [sp, #20]
 8012f58:	f04f 0a00 	mov.w	sl, #0
 8012f5c:	f04f 0b00 	mov.w	fp, #0
 8012f60:	460a      	mov	r2, r1
 8012f62:	9219      	str	r2, [sp, #100]	@ 0x64
 8012f64:	7811      	ldrb	r1, [r2, #0]
 8012f66:	292b      	cmp	r1, #43	@ 0x2b
 8012f68:	d04a      	beq.n	8013000 <_strtod_l+0xb8>
 8012f6a:	d838      	bhi.n	8012fde <_strtod_l+0x96>
 8012f6c:	290d      	cmp	r1, #13
 8012f6e:	d832      	bhi.n	8012fd6 <_strtod_l+0x8e>
 8012f70:	2908      	cmp	r1, #8
 8012f72:	d832      	bhi.n	8012fda <_strtod_l+0x92>
 8012f74:	2900      	cmp	r1, #0
 8012f76:	d03b      	beq.n	8012ff0 <_strtod_l+0xa8>
 8012f78:	2200      	movs	r2, #0
 8012f7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8012f7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8012f7e:	782a      	ldrb	r2, [r5, #0]
 8012f80:	2a30      	cmp	r2, #48	@ 0x30
 8012f82:	f040 80b3 	bne.w	80130ec <_strtod_l+0x1a4>
 8012f86:	786a      	ldrb	r2, [r5, #1]
 8012f88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8012f8c:	2a58      	cmp	r2, #88	@ 0x58
 8012f8e:	d16e      	bne.n	801306e <_strtod_l+0x126>
 8012f90:	9302      	str	r3, [sp, #8]
 8012f92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012f94:	9301      	str	r3, [sp, #4]
 8012f96:	ab1a      	add	r3, sp, #104	@ 0x68
 8012f98:	9300      	str	r3, [sp, #0]
 8012f9a:	4a8e      	ldr	r2, [pc, #568]	@ (80131d4 <_strtod_l+0x28c>)
 8012f9c:	9805      	ldr	r0, [sp, #20]
 8012f9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8012fa0:	a919      	add	r1, sp, #100	@ 0x64
 8012fa2:	f001 fc97 	bl	80148d4 <__gethex>
 8012fa6:	f010 060f 	ands.w	r6, r0, #15
 8012faa:	4604      	mov	r4, r0
 8012fac:	d005      	beq.n	8012fba <_strtod_l+0x72>
 8012fae:	2e06      	cmp	r6, #6
 8012fb0:	d128      	bne.n	8013004 <_strtod_l+0xbc>
 8012fb2:	3501      	adds	r5, #1
 8012fb4:	2300      	movs	r3, #0
 8012fb6:	9519      	str	r5, [sp, #100]	@ 0x64
 8012fb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012fba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	f040 858e 	bne.w	8013ade <_strtod_l+0xb96>
 8012fc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012fc4:	b1cb      	cbz	r3, 8012ffa <_strtod_l+0xb2>
 8012fc6:	4652      	mov	r2, sl
 8012fc8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8012fcc:	ec43 2b10 	vmov	d0, r2, r3
 8012fd0:	b01f      	add	sp, #124	@ 0x7c
 8012fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fd6:	2920      	cmp	r1, #32
 8012fd8:	d1ce      	bne.n	8012f78 <_strtod_l+0x30>
 8012fda:	3201      	adds	r2, #1
 8012fdc:	e7c1      	b.n	8012f62 <_strtod_l+0x1a>
 8012fde:	292d      	cmp	r1, #45	@ 0x2d
 8012fe0:	d1ca      	bne.n	8012f78 <_strtod_l+0x30>
 8012fe2:	2101      	movs	r1, #1
 8012fe4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012fe6:	1c51      	adds	r1, r2, #1
 8012fe8:	9119      	str	r1, [sp, #100]	@ 0x64
 8012fea:	7852      	ldrb	r2, [r2, #1]
 8012fec:	2a00      	cmp	r2, #0
 8012fee:	d1c5      	bne.n	8012f7c <_strtod_l+0x34>
 8012ff0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012ff2:	9419      	str	r4, [sp, #100]	@ 0x64
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	f040 8570 	bne.w	8013ada <_strtod_l+0xb92>
 8012ffa:	4652      	mov	r2, sl
 8012ffc:	465b      	mov	r3, fp
 8012ffe:	e7e5      	b.n	8012fcc <_strtod_l+0x84>
 8013000:	2100      	movs	r1, #0
 8013002:	e7ef      	b.n	8012fe4 <_strtod_l+0x9c>
 8013004:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013006:	b13a      	cbz	r2, 8013018 <_strtod_l+0xd0>
 8013008:	2135      	movs	r1, #53	@ 0x35
 801300a:	a81c      	add	r0, sp, #112	@ 0x70
 801300c:	f7ff ff3a 	bl	8012e84 <__copybits>
 8013010:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013012:	9805      	ldr	r0, [sp, #20]
 8013014:	f7ff fb08 	bl	8012628 <_Bfree>
 8013018:	3e01      	subs	r6, #1
 801301a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801301c:	2e04      	cmp	r6, #4
 801301e:	d806      	bhi.n	801302e <_strtod_l+0xe6>
 8013020:	e8df f006 	tbb	[pc, r6]
 8013024:	201d0314 	.word	0x201d0314
 8013028:	14          	.byte	0x14
 8013029:	00          	.byte	0x00
 801302a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801302e:	05e1      	lsls	r1, r4, #23
 8013030:	bf48      	it	mi
 8013032:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013036:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801303a:	0d1b      	lsrs	r3, r3, #20
 801303c:	051b      	lsls	r3, r3, #20
 801303e:	2b00      	cmp	r3, #0
 8013040:	d1bb      	bne.n	8012fba <_strtod_l+0x72>
 8013042:	f7fe fb21 	bl	8011688 <__errno>
 8013046:	2322      	movs	r3, #34	@ 0x22
 8013048:	6003      	str	r3, [r0, #0]
 801304a:	e7b6      	b.n	8012fba <_strtod_l+0x72>
 801304c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013050:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013054:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013058:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801305c:	e7e7      	b.n	801302e <_strtod_l+0xe6>
 801305e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80131dc <_strtod_l+0x294>
 8013062:	e7e4      	b.n	801302e <_strtod_l+0xe6>
 8013064:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013068:	f04f 3aff 	mov.w	sl, #4294967295
 801306c:	e7df      	b.n	801302e <_strtod_l+0xe6>
 801306e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013070:	1c5a      	adds	r2, r3, #1
 8013072:	9219      	str	r2, [sp, #100]	@ 0x64
 8013074:	785b      	ldrb	r3, [r3, #1]
 8013076:	2b30      	cmp	r3, #48	@ 0x30
 8013078:	d0f9      	beq.n	801306e <_strtod_l+0x126>
 801307a:	2b00      	cmp	r3, #0
 801307c:	d09d      	beq.n	8012fba <_strtod_l+0x72>
 801307e:	2301      	movs	r3, #1
 8013080:	9309      	str	r3, [sp, #36]	@ 0x24
 8013082:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013084:	930c      	str	r3, [sp, #48]	@ 0x30
 8013086:	2300      	movs	r3, #0
 8013088:	9308      	str	r3, [sp, #32]
 801308a:	930a      	str	r3, [sp, #40]	@ 0x28
 801308c:	461f      	mov	r7, r3
 801308e:	220a      	movs	r2, #10
 8013090:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8013092:	7805      	ldrb	r5, [r0, #0]
 8013094:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013098:	b2d9      	uxtb	r1, r3
 801309a:	2909      	cmp	r1, #9
 801309c:	d928      	bls.n	80130f0 <_strtod_l+0x1a8>
 801309e:	494e      	ldr	r1, [pc, #312]	@ (80131d8 <_strtod_l+0x290>)
 80130a0:	2201      	movs	r2, #1
 80130a2:	f7fe fa94 	bl	80115ce <strncmp>
 80130a6:	2800      	cmp	r0, #0
 80130a8:	d032      	beq.n	8013110 <_strtod_l+0x1c8>
 80130aa:	2000      	movs	r0, #0
 80130ac:	462a      	mov	r2, r5
 80130ae:	4681      	mov	r9, r0
 80130b0:	463d      	mov	r5, r7
 80130b2:	4603      	mov	r3, r0
 80130b4:	2a65      	cmp	r2, #101	@ 0x65
 80130b6:	d001      	beq.n	80130bc <_strtod_l+0x174>
 80130b8:	2a45      	cmp	r2, #69	@ 0x45
 80130ba:	d114      	bne.n	80130e6 <_strtod_l+0x19e>
 80130bc:	b91d      	cbnz	r5, 80130c6 <_strtod_l+0x17e>
 80130be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80130c0:	4302      	orrs	r2, r0
 80130c2:	d095      	beq.n	8012ff0 <_strtod_l+0xa8>
 80130c4:	2500      	movs	r5, #0
 80130c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80130c8:	1c62      	adds	r2, r4, #1
 80130ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80130cc:	7862      	ldrb	r2, [r4, #1]
 80130ce:	2a2b      	cmp	r2, #43	@ 0x2b
 80130d0:	d077      	beq.n	80131c2 <_strtod_l+0x27a>
 80130d2:	2a2d      	cmp	r2, #45	@ 0x2d
 80130d4:	d07b      	beq.n	80131ce <_strtod_l+0x286>
 80130d6:	f04f 0c00 	mov.w	ip, #0
 80130da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80130de:	2909      	cmp	r1, #9
 80130e0:	f240 8082 	bls.w	80131e8 <_strtod_l+0x2a0>
 80130e4:	9419      	str	r4, [sp, #100]	@ 0x64
 80130e6:	f04f 0800 	mov.w	r8, #0
 80130ea:	e0a2      	b.n	8013232 <_strtod_l+0x2ea>
 80130ec:	2300      	movs	r3, #0
 80130ee:	e7c7      	b.n	8013080 <_strtod_l+0x138>
 80130f0:	2f08      	cmp	r7, #8
 80130f2:	bfd5      	itete	le
 80130f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80130f6:	9908      	ldrgt	r1, [sp, #32]
 80130f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80130fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013100:	f100 0001 	add.w	r0, r0, #1
 8013104:	bfd4      	ite	le
 8013106:	930a      	strle	r3, [sp, #40]	@ 0x28
 8013108:	9308      	strgt	r3, [sp, #32]
 801310a:	3701      	adds	r7, #1
 801310c:	9019      	str	r0, [sp, #100]	@ 0x64
 801310e:	e7bf      	b.n	8013090 <_strtod_l+0x148>
 8013110:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013112:	1c5a      	adds	r2, r3, #1
 8013114:	9219      	str	r2, [sp, #100]	@ 0x64
 8013116:	785a      	ldrb	r2, [r3, #1]
 8013118:	b37f      	cbz	r7, 801317a <_strtod_l+0x232>
 801311a:	4681      	mov	r9, r0
 801311c:	463d      	mov	r5, r7
 801311e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013122:	2b09      	cmp	r3, #9
 8013124:	d912      	bls.n	801314c <_strtod_l+0x204>
 8013126:	2301      	movs	r3, #1
 8013128:	e7c4      	b.n	80130b4 <_strtod_l+0x16c>
 801312a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801312c:	1c5a      	adds	r2, r3, #1
 801312e:	9219      	str	r2, [sp, #100]	@ 0x64
 8013130:	785a      	ldrb	r2, [r3, #1]
 8013132:	3001      	adds	r0, #1
 8013134:	2a30      	cmp	r2, #48	@ 0x30
 8013136:	d0f8      	beq.n	801312a <_strtod_l+0x1e2>
 8013138:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801313c:	2b08      	cmp	r3, #8
 801313e:	f200 84d3 	bhi.w	8013ae8 <_strtod_l+0xba0>
 8013142:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013144:	930c      	str	r3, [sp, #48]	@ 0x30
 8013146:	4681      	mov	r9, r0
 8013148:	2000      	movs	r0, #0
 801314a:	4605      	mov	r5, r0
 801314c:	3a30      	subs	r2, #48	@ 0x30
 801314e:	f100 0301 	add.w	r3, r0, #1
 8013152:	d02a      	beq.n	80131aa <_strtod_l+0x262>
 8013154:	4499      	add	r9, r3
 8013156:	eb00 0c05 	add.w	ip, r0, r5
 801315a:	462b      	mov	r3, r5
 801315c:	210a      	movs	r1, #10
 801315e:	4563      	cmp	r3, ip
 8013160:	d10d      	bne.n	801317e <_strtod_l+0x236>
 8013162:	1c69      	adds	r1, r5, #1
 8013164:	4401      	add	r1, r0
 8013166:	4428      	add	r0, r5
 8013168:	2808      	cmp	r0, #8
 801316a:	dc16      	bgt.n	801319a <_strtod_l+0x252>
 801316c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801316e:	230a      	movs	r3, #10
 8013170:	fb03 2300 	mla	r3, r3, r0, r2
 8013174:	930a      	str	r3, [sp, #40]	@ 0x28
 8013176:	2300      	movs	r3, #0
 8013178:	e018      	b.n	80131ac <_strtod_l+0x264>
 801317a:	4638      	mov	r0, r7
 801317c:	e7da      	b.n	8013134 <_strtod_l+0x1ec>
 801317e:	2b08      	cmp	r3, #8
 8013180:	f103 0301 	add.w	r3, r3, #1
 8013184:	dc03      	bgt.n	801318e <_strtod_l+0x246>
 8013186:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013188:	434e      	muls	r6, r1
 801318a:	960a      	str	r6, [sp, #40]	@ 0x28
 801318c:	e7e7      	b.n	801315e <_strtod_l+0x216>
 801318e:	2b10      	cmp	r3, #16
 8013190:	bfde      	ittt	le
 8013192:	9e08      	ldrle	r6, [sp, #32]
 8013194:	434e      	mulle	r6, r1
 8013196:	9608      	strle	r6, [sp, #32]
 8013198:	e7e1      	b.n	801315e <_strtod_l+0x216>
 801319a:	280f      	cmp	r0, #15
 801319c:	dceb      	bgt.n	8013176 <_strtod_l+0x22e>
 801319e:	9808      	ldr	r0, [sp, #32]
 80131a0:	230a      	movs	r3, #10
 80131a2:	fb03 2300 	mla	r3, r3, r0, r2
 80131a6:	9308      	str	r3, [sp, #32]
 80131a8:	e7e5      	b.n	8013176 <_strtod_l+0x22e>
 80131aa:	4629      	mov	r1, r5
 80131ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80131ae:	1c50      	adds	r0, r2, #1
 80131b0:	9019      	str	r0, [sp, #100]	@ 0x64
 80131b2:	7852      	ldrb	r2, [r2, #1]
 80131b4:	4618      	mov	r0, r3
 80131b6:	460d      	mov	r5, r1
 80131b8:	e7b1      	b.n	801311e <_strtod_l+0x1d6>
 80131ba:	f04f 0900 	mov.w	r9, #0
 80131be:	2301      	movs	r3, #1
 80131c0:	e77d      	b.n	80130be <_strtod_l+0x176>
 80131c2:	f04f 0c00 	mov.w	ip, #0
 80131c6:	1ca2      	adds	r2, r4, #2
 80131c8:	9219      	str	r2, [sp, #100]	@ 0x64
 80131ca:	78a2      	ldrb	r2, [r4, #2]
 80131cc:	e785      	b.n	80130da <_strtod_l+0x192>
 80131ce:	f04f 0c01 	mov.w	ip, #1
 80131d2:	e7f8      	b.n	80131c6 <_strtod_l+0x27e>
 80131d4:	08016fa8 	.word	0x08016fa8
 80131d8:	08016f90 	.word	0x08016f90
 80131dc:	7ff00000 	.word	0x7ff00000
 80131e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80131e2:	1c51      	adds	r1, r2, #1
 80131e4:	9119      	str	r1, [sp, #100]	@ 0x64
 80131e6:	7852      	ldrb	r2, [r2, #1]
 80131e8:	2a30      	cmp	r2, #48	@ 0x30
 80131ea:	d0f9      	beq.n	80131e0 <_strtod_l+0x298>
 80131ec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80131f0:	2908      	cmp	r1, #8
 80131f2:	f63f af78 	bhi.w	80130e6 <_strtod_l+0x19e>
 80131f6:	3a30      	subs	r2, #48	@ 0x30
 80131f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80131fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80131fc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80131fe:	f04f 080a 	mov.w	r8, #10
 8013202:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013204:	1c56      	adds	r6, r2, #1
 8013206:	9619      	str	r6, [sp, #100]	@ 0x64
 8013208:	7852      	ldrb	r2, [r2, #1]
 801320a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801320e:	f1be 0f09 	cmp.w	lr, #9
 8013212:	d939      	bls.n	8013288 <_strtod_l+0x340>
 8013214:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013216:	1a76      	subs	r6, r6, r1
 8013218:	2e08      	cmp	r6, #8
 801321a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801321e:	dc03      	bgt.n	8013228 <_strtod_l+0x2e0>
 8013220:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013222:	4588      	cmp	r8, r1
 8013224:	bfa8      	it	ge
 8013226:	4688      	movge	r8, r1
 8013228:	f1bc 0f00 	cmp.w	ip, #0
 801322c:	d001      	beq.n	8013232 <_strtod_l+0x2ea>
 801322e:	f1c8 0800 	rsb	r8, r8, #0
 8013232:	2d00      	cmp	r5, #0
 8013234:	d14e      	bne.n	80132d4 <_strtod_l+0x38c>
 8013236:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013238:	4308      	orrs	r0, r1
 801323a:	f47f aebe 	bne.w	8012fba <_strtod_l+0x72>
 801323e:	2b00      	cmp	r3, #0
 8013240:	f47f aed6 	bne.w	8012ff0 <_strtod_l+0xa8>
 8013244:	2a69      	cmp	r2, #105	@ 0x69
 8013246:	d028      	beq.n	801329a <_strtod_l+0x352>
 8013248:	dc25      	bgt.n	8013296 <_strtod_l+0x34e>
 801324a:	2a49      	cmp	r2, #73	@ 0x49
 801324c:	d025      	beq.n	801329a <_strtod_l+0x352>
 801324e:	2a4e      	cmp	r2, #78	@ 0x4e
 8013250:	f47f aece 	bne.w	8012ff0 <_strtod_l+0xa8>
 8013254:	499b      	ldr	r1, [pc, #620]	@ (80134c4 <_strtod_l+0x57c>)
 8013256:	a819      	add	r0, sp, #100	@ 0x64
 8013258:	f001 fd5e 	bl	8014d18 <__match>
 801325c:	2800      	cmp	r0, #0
 801325e:	f43f aec7 	beq.w	8012ff0 <_strtod_l+0xa8>
 8013262:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013264:	781b      	ldrb	r3, [r3, #0]
 8013266:	2b28      	cmp	r3, #40	@ 0x28
 8013268:	d12e      	bne.n	80132c8 <_strtod_l+0x380>
 801326a:	4997      	ldr	r1, [pc, #604]	@ (80134c8 <_strtod_l+0x580>)
 801326c:	aa1c      	add	r2, sp, #112	@ 0x70
 801326e:	a819      	add	r0, sp, #100	@ 0x64
 8013270:	f001 fd66 	bl	8014d40 <__hexnan>
 8013274:	2805      	cmp	r0, #5
 8013276:	d127      	bne.n	80132c8 <_strtod_l+0x380>
 8013278:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801327a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801327e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013282:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013286:	e698      	b.n	8012fba <_strtod_l+0x72>
 8013288:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801328a:	fb08 2101 	mla	r1, r8, r1, r2
 801328e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013292:	920e      	str	r2, [sp, #56]	@ 0x38
 8013294:	e7b5      	b.n	8013202 <_strtod_l+0x2ba>
 8013296:	2a6e      	cmp	r2, #110	@ 0x6e
 8013298:	e7da      	b.n	8013250 <_strtod_l+0x308>
 801329a:	498c      	ldr	r1, [pc, #560]	@ (80134cc <_strtod_l+0x584>)
 801329c:	a819      	add	r0, sp, #100	@ 0x64
 801329e:	f001 fd3b 	bl	8014d18 <__match>
 80132a2:	2800      	cmp	r0, #0
 80132a4:	f43f aea4 	beq.w	8012ff0 <_strtod_l+0xa8>
 80132a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132aa:	4989      	ldr	r1, [pc, #548]	@ (80134d0 <_strtod_l+0x588>)
 80132ac:	3b01      	subs	r3, #1
 80132ae:	a819      	add	r0, sp, #100	@ 0x64
 80132b0:	9319      	str	r3, [sp, #100]	@ 0x64
 80132b2:	f001 fd31 	bl	8014d18 <__match>
 80132b6:	b910      	cbnz	r0, 80132be <_strtod_l+0x376>
 80132b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80132ba:	3301      	adds	r3, #1
 80132bc:	9319      	str	r3, [sp, #100]	@ 0x64
 80132be:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80134e0 <_strtod_l+0x598>
 80132c2:	f04f 0a00 	mov.w	sl, #0
 80132c6:	e678      	b.n	8012fba <_strtod_l+0x72>
 80132c8:	4882      	ldr	r0, [pc, #520]	@ (80134d4 <_strtod_l+0x58c>)
 80132ca:	f001 fa61 	bl	8014790 <nan>
 80132ce:	ec5b ab10 	vmov	sl, fp, d0
 80132d2:	e672      	b.n	8012fba <_strtod_l+0x72>
 80132d4:	eba8 0309 	sub.w	r3, r8, r9
 80132d8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80132da:	9309      	str	r3, [sp, #36]	@ 0x24
 80132dc:	2f00      	cmp	r7, #0
 80132de:	bf08      	it	eq
 80132e0:	462f      	moveq	r7, r5
 80132e2:	2d10      	cmp	r5, #16
 80132e4:	462c      	mov	r4, r5
 80132e6:	bfa8      	it	ge
 80132e8:	2410      	movge	r4, #16
 80132ea:	f7ed f933 	bl	8000554 <__aeabi_ui2d>
 80132ee:	2d09      	cmp	r5, #9
 80132f0:	4682      	mov	sl, r0
 80132f2:	468b      	mov	fp, r1
 80132f4:	dc13      	bgt.n	801331e <_strtod_l+0x3d6>
 80132f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	f43f ae5e 	beq.w	8012fba <_strtod_l+0x72>
 80132fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013300:	dd78      	ble.n	80133f4 <_strtod_l+0x4ac>
 8013302:	2b16      	cmp	r3, #22
 8013304:	dc5f      	bgt.n	80133c6 <_strtod_l+0x47e>
 8013306:	4974      	ldr	r1, [pc, #464]	@ (80134d8 <_strtod_l+0x590>)
 8013308:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801330c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013310:	4652      	mov	r2, sl
 8013312:	465b      	mov	r3, fp
 8013314:	f7ed f998 	bl	8000648 <__aeabi_dmul>
 8013318:	4682      	mov	sl, r0
 801331a:	468b      	mov	fp, r1
 801331c:	e64d      	b.n	8012fba <_strtod_l+0x72>
 801331e:	4b6e      	ldr	r3, [pc, #440]	@ (80134d8 <_strtod_l+0x590>)
 8013320:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013324:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013328:	f7ed f98e 	bl	8000648 <__aeabi_dmul>
 801332c:	4682      	mov	sl, r0
 801332e:	9808      	ldr	r0, [sp, #32]
 8013330:	468b      	mov	fp, r1
 8013332:	f7ed f90f 	bl	8000554 <__aeabi_ui2d>
 8013336:	4602      	mov	r2, r0
 8013338:	460b      	mov	r3, r1
 801333a:	4650      	mov	r0, sl
 801333c:	4659      	mov	r1, fp
 801333e:	f7ec ffcd 	bl	80002dc <__adddf3>
 8013342:	2d0f      	cmp	r5, #15
 8013344:	4682      	mov	sl, r0
 8013346:	468b      	mov	fp, r1
 8013348:	ddd5      	ble.n	80132f6 <_strtod_l+0x3ae>
 801334a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801334c:	1b2c      	subs	r4, r5, r4
 801334e:	441c      	add	r4, r3
 8013350:	2c00      	cmp	r4, #0
 8013352:	f340 8096 	ble.w	8013482 <_strtod_l+0x53a>
 8013356:	f014 030f 	ands.w	r3, r4, #15
 801335a:	d00a      	beq.n	8013372 <_strtod_l+0x42a>
 801335c:	495e      	ldr	r1, [pc, #376]	@ (80134d8 <_strtod_l+0x590>)
 801335e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013362:	4652      	mov	r2, sl
 8013364:	465b      	mov	r3, fp
 8013366:	e9d1 0100 	ldrd	r0, r1, [r1]
 801336a:	f7ed f96d 	bl	8000648 <__aeabi_dmul>
 801336e:	4682      	mov	sl, r0
 8013370:	468b      	mov	fp, r1
 8013372:	f034 040f 	bics.w	r4, r4, #15
 8013376:	d073      	beq.n	8013460 <_strtod_l+0x518>
 8013378:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801337c:	dd48      	ble.n	8013410 <_strtod_l+0x4c8>
 801337e:	2400      	movs	r4, #0
 8013380:	46a0      	mov	r8, r4
 8013382:	940a      	str	r4, [sp, #40]	@ 0x28
 8013384:	46a1      	mov	r9, r4
 8013386:	9a05      	ldr	r2, [sp, #20]
 8013388:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80134e0 <_strtod_l+0x598>
 801338c:	2322      	movs	r3, #34	@ 0x22
 801338e:	6013      	str	r3, [r2, #0]
 8013390:	f04f 0a00 	mov.w	sl, #0
 8013394:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013396:	2b00      	cmp	r3, #0
 8013398:	f43f ae0f 	beq.w	8012fba <_strtod_l+0x72>
 801339c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801339e:	9805      	ldr	r0, [sp, #20]
 80133a0:	f7ff f942 	bl	8012628 <_Bfree>
 80133a4:	9805      	ldr	r0, [sp, #20]
 80133a6:	4649      	mov	r1, r9
 80133a8:	f7ff f93e 	bl	8012628 <_Bfree>
 80133ac:	9805      	ldr	r0, [sp, #20]
 80133ae:	4641      	mov	r1, r8
 80133b0:	f7ff f93a 	bl	8012628 <_Bfree>
 80133b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80133b6:	9805      	ldr	r0, [sp, #20]
 80133b8:	f7ff f936 	bl	8012628 <_Bfree>
 80133bc:	9805      	ldr	r0, [sp, #20]
 80133be:	4621      	mov	r1, r4
 80133c0:	f7ff f932 	bl	8012628 <_Bfree>
 80133c4:	e5f9      	b.n	8012fba <_strtod_l+0x72>
 80133c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80133c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80133cc:	4293      	cmp	r3, r2
 80133ce:	dbbc      	blt.n	801334a <_strtod_l+0x402>
 80133d0:	4c41      	ldr	r4, [pc, #260]	@ (80134d8 <_strtod_l+0x590>)
 80133d2:	f1c5 050f 	rsb	r5, r5, #15
 80133d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80133da:	4652      	mov	r2, sl
 80133dc:	465b      	mov	r3, fp
 80133de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133e2:	f7ed f931 	bl	8000648 <__aeabi_dmul>
 80133e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133e8:	1b5d      	subs	r5, r3, r5
 80133ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80133ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80133f2:	e78f      	b.n	8013314 <_strtod_l+0x3cc>
 80133f4:	3316      	adds	r3, #22
 80133f6:	dba8      	blt.n	801334a <_strtod_l+0x402>
 80133f8:	4b37      	ldr	r3, [pc, #220]	@ (80134d8 <_strtod_l+0x590>)
 80133fa:	eba9 0808 	sub.w	r8, r9, r8
 80133fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013402:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013406:	4650      	mov	r0, sl
 8013408:	4659      	mov	r1, fp
 801340a:	f7ed fa47 	bl	800089c <__aeabi_ddiv>
 801340e:	e783      	b.n	8013318 <_strtod_l+0x3d0>
 8013410:	4b32      	ldr	r3, [pc, #200]	@ (80134dc <_strtod_l+0x594>)
 8013412:	9308      	str	r3, [sp, #32]
 8013414:	2300      	movs	r3, #0
 8013416:	1124      	asrs	r4, r4, #4
 8013418:	4650      	mov	r0, sl
 801341a:	4659      	mov	r1, fp
 801341c:	461e      	mov	r6, r3
 801341e:	2c01      	cmp	r4, #1
 8013420:	dc21      	bgt.n	8013466 <_strtod_l+0x51e>
 8013422:	b10b      	cbz	r3, 8013428 <_strtod_l+0x4e0>
 8013424:	4682      	mov	sl, r0
 8013426:	468b      	mov	fp, r1
 8013428:	492c      	ldr	r1, [pc, #176]	@ (80134dc <_strtod_l+0x594>)
 801342a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801342e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013432:	4652      	mov	r2, sl
 8013434:	465b      	mov	r3, fp
 8013436:	e9d1 0100 	ldrd	r0, r1, [r1]
 801343a:	f7ed f905 	bl	8000648 <__aeabi_dmul>
 801343e:	4b28      	ldr	r3, [pc, #160]	@ (80134e0 <_strtod_l+0x598>)
 8013440:	460a      	mov	r2, r1
 8013442:	400b      	ands	r3, r1
 8013444:	4927      	ldr	r1, [pc, #156]	@ (80134e4 <_strtod_l+0x59c>)
 8013446:	428b      	cmp	r3, r1
 8013448:	4682      	mov	sl, r0
 801344a:	d898      	bhi.n	801337e <_strtod_l+0x436>
 801344c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013450:	428b      	cmp	r3, r1
 8013452:	bf86      	itte	hi
 8013454:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80134e8 <_strtod_l+0x5a0>
 8013458:	f04f 3aff 	movhi.w	sl, #4294967295
 801345c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013460:	2300      	movs	r3, #0
 8013462:	9308      	str	r3, [sp, #32]
 8013464:	e07a      	b.n	801355c <_strtod_l+0x614>
 8013466:	07e2      	lsls	r2, r4, #31
 8013468:	d505      	bpl.n	8013476 <_strtod_l+0x52e>
 801346a:	9b08      	ldr	r3, [sp, #32]
 801346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013470:	f7ed f8ea 	bl	8000648 <__aeabi_dmul>
 8013474:	2301      	movs	r3, #1
 8013476:	9a08      	ldr	r2, [sp, #32]
 8013478:	3208      	adds	r2, #8
 801347a:	3601      	adds	r6, #1
 801347c:	1064      	asrs	r4, r4, #1
 801347e:	9208      	str	r2, [sp, #32]
 8013480:	e7cd      	b.n	801341e <_strtod_l+0x4d6>
 8013482:	d0ed      	beq.n	8013460 <_strtod_l+0x518>
 8013484:	4264      	negs	r4, r4
 8013486:	f014 020f 	ands.w	r2, r4, #15
 801348a:	d00a      	beq.n	80134a2 <_strtod_l+0x55a>
 801348c:	4b12      	ldr	r3, [pc, #72]	@ (80134d8 <_strtod_l+0x590>)
 801348e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013492:	4650      	mov	r0, sl
 8013494:	4659      	mov	r1, fp
 8013496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801349a:	f7ed f9ff 	bl	800089c <__aeabi_ddiv>
 801349e:	4682      	mov	sl, r0
 80134a0:	468b      	mov	fp, r1
 80134a2:	1124      	asrs	r4, r4, #4
 80134a4:	d0dc      	beq.n	8013460 <_strtod_l+0x518>
 80134a6:	2c1f      	cmp	r4, #31
 80134a8:	dd20      	ble.n	80134ec <_strtod_l+0x5a4>
 80134aa:	2400      	movs	r4, #0
 80134ac:	46a0      	mov	r8, r4
 80134ae:	940a      	str	r4, [sp, #40]	@ 0x28
 80134b0:	46a1      	mov	r9, r4
 80134b2:	9a05      	ldr	r2, [sp, #20]
 80134b4:	2322      	movs	r3, #34	@ 0x22
 80134b6:	f04f 0a00 	mov.w	sl, #0
 80134ba:	f04f 0b00 	mov.w	fp, #0
 80134be:	6013      	str	r3, [r2, #0]
 80134c0:	e768      	b.n	8013394 <_strtod_l+0x44c>
 80134c2:	bf00      	nop
 80134c4:	08016d7d 	.word	0x08016d7d
 80134c8:	08016f94 	.word	0x08016f94
 80134cc:	08016d75 	.word	0x08016d75
 80134d0:	08016daa 	.word	0x08016daa
 80134d4:	08017158 	.word	0x08017158
 80134d8:	08016ec8 	.word	0x08016ec8
 80134dc:	08016ea0 	.word	0x08016ea0
 80134e0:	7ff00000 	.word	0x7ff00000
 80134e4:	7ca00000 	.word	0x7ca00000
 80134e8:	7fefffff 	.word	0x7fefffff
 80134ec:	f014 0310 	ands.w	r3, r4, #16
 80134f0:	bf18      	it	ne
 80134f2:	236a      	movne	r3, #106	@ 0x6a
 80134f4:	4ea9      	ldr	r6, [pc, #676]	@ (801379c <_strtod_l+0x854>)
 80134f6:	9308      	str	r3, [sp, #32]
 80134f8:	4650      	mov	r0, sl
 80134fa:	4659      	mov	r1, fp
 80134fc:	2300      	movs	r3, #0
 80134fe:	07e2      	lsls	r2, r4, #31
 8013500:	d504      	bpl.n	801350c <_strtod_l+0x5c4>
 8013502:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013506:	f7ed f89f 	bl	8000648 <__aeabi_dmul>
 801350a:	2301      	movs	r3, #1
 801350c:	1064      	asrs	r4, r4, #1
 801350e:	f106 0608 	add.w	r6, r6, #8
 8013512:	d1f4      	bne.n	80134fe <_strtod_l+0x5b6>
 8013514:	b10b      	cbz	r3, 801351a <_strtod_l+0x5d2>
 8013516:	4682      	mov	sl, r0
 8013518:	468b      	mov	fp, r1
 801351a:	9b08      	ldr	r3, [sp, #32]
 801351c:	b1b3      	cbz	r3, 801354c <_strtod_l+0x604>
 801351e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013522:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013526:	2b00      	cmp	r3, #0
 8013528:	4659      	mov	r1, fp
 801352a:	dd0f      	ble.n	801354c <_strtod_l+0x604>
 801352c:	2b1f      	cmp	r3, #31
 801352e:	dd55      	ble.n	80135dc <_strtod_l+0x694>
 8013530:	2b34      	cmp	r3, #52	@ 0x34
 8013532:	bfde      	ittt	le
 8013534:	f04f 33ff 	movle.w	r3, #4294967295
 8013538:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801353c:	4093      	lslle	r3, r2
 801353e:	f04f 0a00 	mov.w	sl, #0
 8013542:	bfcc      	ite	gt
 8013544:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013548:	ea03 0b01 	andle.w	fp, r3, r1
 801354c:	2200      	movs	r2, #0
 801354e:	2300      	movs	r3, #0
 8013550:	4650      	mov	r0, sl
 8013552:	4659      	mov	r1, fp
 8013554:	f7ed fae0 	bl	8000b18 <__aeabi_dcmpeq>
 8013558:	2800      	cmp	r0, #0
 801355a:	d1a6      	bne.n	80134aa <_strtod_l+0x562>
 801355c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801355e:	9300      	str	r3, [sp, #0]
 8013560:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013562:	9805      	ldr	r0, [sp, #20]
 8013564:	462b      	mov	r3, r5
 8013566:	463a      	mov	r2, r7
 8013568:	f7ff f8c6 	bl	80126f8 <__s2b>
 801356c:	900a      	str	r0, [sp, #40]	@ 0x28
 801356e:	2800      	cmp	r0, #0
 8013570:	f43f af05 	beq.w	801337e <_strtod_l+0x436>
 8013574:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013576:	2a00      	cmp	r2, #0
 8013578:	eba9 0308 	sub.w	r3, r9, r8
 801357c:	bfa8      	it	ge
 801357e:	2300      	movge	r3, #0
 8013580:	9312      	str	r3, [sp, #72]	@ 0x48
 8013582:	2400      	movs	r4, #0
 8013584:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013588:	9316      	str	r3, [sp, #88]	@ 0x58
 801358a:	46a0      	mov	r8, r4
 801358c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801358e:	9805      	ldr	r0, [sp, #20]
 8013590:	6859      	ldr	r1, [r3, #4]
 8013592:	f7ff f809 	bl	80125a8 <_Balloc>
 8013596:	4681      	mov	r9, r0
 8013598:	2800      	cmp	r0, #0
 801359a:	f43f aef4 	beq.w	8013386 <_strtod_l+0x43e>
 801359e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80135a0:	691a      	ldr	r2, [r3, #16]
 80135a2:	3202      	adds	r2, #2
 80135a4:	f103 010c 	add.w	r1, r3, #12
 80135a8:	0092      	lsls	r2, r2, #2
 80135aa:	300c      	adds	r0, #12
 80135ac:	f7fe f899 	bl	80116e2 <memcpy>
 80135b0:	ec4b ab10 	vmov	d0, sl, fp
 80135b4:	9805      	ldr	r0, [sp, #20]
 80135b6:	aa1c      	add	r2, sp, #112	@ 0x70
 80135b8:	a91b      	add	r1, sp, #108	@ 0x6c
 80135ba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80135be:	f7ff fbd7 	bl	8012d70 <__d2b>
 80135c2:	901a      	str	r0, [sp, #104]	@ 0x68
 80135c4:	2800      	cmp	r0, #0
 80135c6:	f43f aede 	beq.w	8013386 <_strtod_l+0x43e>
 80135ca:	9805      	ldr	r0, [sp, #20]
 80135cc:	2101      	movs	r1, #1
 80135ce:	f7ff f929 	bl	8012824 <__i2b>
 80135d2:	4680      	mov	r8, r0
 80135d4:	b948      	cbnz	r0, 80135ea <_strtod_l+0x6a2>
 80135d6:	f04f 0800 	mov.w	r8, #0
 80135da:	e6d4      	b.n	8013386 <_strtod_l+0x43e>
 80135dc:	f04f 32ff 	mov.w	r2, #4294967295
 80135e0:	fa02 f303 	lsl.w	r3, r2, r3
 80135e4:	ea03 0a0a 	and.w	sl, r3, sl
 80135e8:	e7b0      	b.n	801354c <_strtod_l+0x604>
 80135ea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80135ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80135ee:	2d00      	cmp	r5, #0
 80135f0:	bfab      	itete	ge
 80135f2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80135f4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80135f6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80135f8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80135fa:	bfac      	ite	ge
 80135fc:	18ef      	addge	r7, r5, r3
 80135fe:	1b5e      	sublt	r6, r3, r5
 8013600:	9b08      	ldr	r3, [sp, #32]
 8013602:	1aed      	subs	r5, r5, r3
 8013604:	4415      	add	r5, r2
 8013606:	4b66      	ldr	r3, [pc, #408]	@ (80137a0 <_strtod_l+0x858>)
 8013608:	3d01      	subs	r5, #1
 801360a:	429d      	cmp	r5, r3
 801360c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013610:	da50      	bge.n	80136b4 <_strtod_l+0x76c>
 8013612:	1b5b      	subs	r3, r3, r5
 8013614:	2b1f      	cmp	r3, #31
 8013616:	eba2 0203 	sub.w	r2, r2, r3
 801361a:	f04f 0101 	mov.w	r1, #1
 801361e:	dc3d      	bgt.n	801369c <_strtod_l+0x754>
 8013620:	fa01 f303 	lsl.w	r3, r1, r3
 8013624:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013626:	2300      	movs	r3, #0
 8013628:	9310      	str	r3, [sp, #64]	@ 0x40
 801362a:	18bd      	adds	r5, r7, r2
 801362c:	9b08      	ldr	r3, [sp, #32]
 801362e:	42af      	cmp	r7, r5
 8013630:	4416      	add	r6, r2
 8013632:	441e      	add	r6, r3
 8013634:	463b      	mov	r3, r7
 8013636:	bfa8      	it	ge
 8013638:	462b      	movge	r3, r5
 801363a:	42b3      	cmp	r3, r6
 801363c:	bfa8      	it	ge
 801363e:	4633      	movge	r3, r6
 8013640:	2b00      	cmp	r3, #0
 8013642:	bfc2      	ittt	gt
 8013644:	1aed      	subgt	r5, r5, r3
 8013646:	1af6      	subgt	r6, r6, r3
 8013648:	1aff      	subgt	r7, r7, r3
 801364a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801364c:	2b00      	cmp	r3, #0
 801364e:	dd16      	ble.n	801367e <_strtod_l+0x736>
 8013650:	4641      	mov	r1, r8
 8013652:	9805      	ldr	r0, [sp, #20]
 8013654:	461a      	mov	r2, r3
 8013656:	f7ff f9a5 	bl	80129a4 <__pow5mult>
 801365a:	4680      	mov	r8, r0
 801365c:	2800      	cmp	r0, #0
 801365e:	d0ba      	beq.n	80135d6 <_strtod_l+0x68e>
 8013660:	4601      	mov	r1, r0
 8013662:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013664:	9805      	ldr	r0, [sp, #20]
 8013666:	f7ff f8f3 	bl	8012850 <__multiply>
 801366a:	900e      	str	r0, [sp, #56]	@ 0x38
 801366c:	2800      	cmp	r0, #0
 801366e:	f43f ae8a 	beq.w	8013386 <_strtod_l+0x43e>
 8013672:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013674:	9805      	ldr	r0, [sp, #20]
 8013676:	f7fe ffd7 	bl	8012628 <_Bfree>
 801367a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801367c:	931a      	str	r3, [sp, #104]	@ 0x68
 801367e:	2d00      	cmp	r5, #0
 8013680:	dc1d      	bgt.n	80136be <_strtod_l+0x776>
 8013682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013684:	2b00      	cmp	r3, #0
 8013686:	dd23      	ble.n	80136d0 <_strtod_l+0x788>
 8013688:	4649      	mov	r1, r9
 801368a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801368c:	9805      	ldr	r0, [sp, #20]
 801368e:	f7ff f989 	bl	80129a4 <__pow5mult>
 8013692:	4681      	mov	r9, r0
 8013694:	b9e0      	cbnz	r0, 80136d0 <_strtod_l+0x788>
 8013696:	f04f 0900 	mov.w	r9, #0
 801369a:	e674      	b.n	8013386 <_strtod_l+0x43e>
 801369c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80136a0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80136a4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80136a8:	35e2      	adds	r5, #226	@ 0xe2
 80136aa:	fa01 f305 	lsl.w	r3, r1, r5
 80136ae:	9310      	str	r3, [sp, #64]	@ 0x40
 80136b0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80136b2:	e7ba      	b.n	801362a <_strtod_l+0x6e2>
 80136b4:	2300      	movs	r3, #0
 80136b6:	9310      	str	r3, [sp, #64]	@ 0x40
 80136b8:	2301      	movs	r3, #1
 80136ba:	9313      	str	r3, [sp, #76]	@ 0x4c
 80136bc:	e7b5      	b.n	801362a <_strtod_l+0x6e2>
 80136be:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80136c0:	9805      	ldr	r0, [sp, #20]
 80136c2:	462a      	mov	r2, r5
 80136c4:	f7ff f9c8 	bl	8012a58 <__lshift>
 80136c8:	901a      	str	r0, [sp, #104]	@ 0x68
 80136ca:	2800      	cmp	r0, #0
 80136cc:	d1d9      	bne.n	8013682 <_strtod_l+0x73a>
 80136ce:	e65a      	b.n	8013386 <_strtod_l+0x43e>
 80136d0:	2e00      	cmp	r6, #0
 80136d2:	dd07      	ble.n	80136e4 <_strtod_l+0x79c>
 80136d4:	4649      	mov	r1, r9
 80136d6:	9805      	ldr	r0, [sp, #20]
 80136d8:	4632      	mov	r2, r6
 80136da:	f7ff f9bd 	bl	8012a58 <__lshift>
 80136de:	4681      	mov	r9, r0
 80136e0:	2800      	cmp	r0, #0
 80136e2:	d0d8      	beq.n	8013696 <_strtod_l+0x74e>
 80136e4:	2f00      	cmp	r7, #0
 80136e6:	dd08      	ble.n	80136fa <_strtod_l+0x7b2>
 80136e8:	4641      	mov	r1, r8
 80136ea:	9805      	ldr	r0, [sp, #20]
 80136ec:	463a      	mov	r2, r7
 80136ee:	f7ff f9b3 	bl	8012a58 <__lshift>
 80136f2:	4680      	mov	r8, r0
 80136f4:	2800      	cmp	r0, #0
 80136f6:	f43f ae46 	beq.w	8013386 <_strtod_l+0x43e>
 80136fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80136fc:	9805      	ldr	r0, [sp, #20]
 80136fe:	464a      	mov	r2, r9
 8013700:	f7ff fa32 	bl	8012b68 <__mdiff>
 8013704:	4604      	mov	r4, r0
 8013706:	2800      	cmp	r0, #0
 8013708:	f43f ae3d 	beq.w	8013386 <_strtod_l+0x43e>
 801370c:	68c3      	ldr	r3, [r0, #12]
 801370e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013710:	2300      	movs	r3, #0
 8013712:	60c3      	str	r3, [r0, #12]
 8013714:	4641      	mov	r1, r8
 8013716:	f7ff fa0b 	bl	8012b30 <__mcmp>
 801371a:	2800      	cmp	r0, #0
 801371c:	da46      	bge.n	80137ac <_strtod_l+0x864>
 801371e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013720:	ea53 030a 	orrs.w	r3, r3, sl
 8013724:	d16c      	bne.n	8013800 <_strtod_l+0x8b8>
 8013726:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801372a:	2b00      	cmp	r3, #0
 801372c:	d168      	bne.n	8013800 <_strtod_l+0x8b8>
 801372e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013732:	0d1b      	lsrs	r3, r3, #20
 8013734:	051b      	lsls	r3, r3, #20
 8013736:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801373a:	d961      	bls.n	8013800 <_strtod_l+0x8b8>
 801373c:	6963      	ldr	r3, [r4, #20]
 801373e:	b913      	cbnz	r3, 8013746 <_strtod_l+0x7fe>
 8013740:	6923      	ldr	r3, [r4, #16]
 8013742:	2b01      	cmp	r3, #1
 8013744:	dd5c      	ble.n	8013800 <_strtod_l+0x8b8>
 8013746:	4621      	mov	r1, r4
 8013748:	2201      	movs	r2, #1
 801374a:	9805      	ldr	r0, [sp, #20]
 801374c:	f7ff f984 	bl	8012a58 <__lshift>
 8013750:	4641      	mov	r1, r8
 8013752:	4604      	mov	r4, r0
 8013754:	f7ff f9ec 	bl	8012b30 <__mcmp>
 8013758:	2800      	cmp	r0, #0
 801375a:	dd51      	ble.n	8013800 <_strtod_l+0x8b8>
 801375c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013760:	9a08      	ldr	r2, [sp, #32]
 8013762:	0d1b      	lsrs	r3, r3, #20
 8013764:	051b      	lsls	r3, r3, #20
 8013766:	2a00      	cmp	r2, #0
 8013768:	d06b      	beq.n	8013842 <_strtod_l+0x8fa>
 801376a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801376e:	d868      	bhi.n	8013842 <_strtod_l+0x8fa>
 8013770:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013774:	f67f ae9d 	bls.w	80134b2 <_strtod_l+0x56a>
 8013778:	4b0a      	ldr	r3, [pc, #40]	@ (80137a4 <_strtod_l+0x85c>)
 801377a:	4650      	mov	r0, sl
 801377c:	4659      	mov	r1, fp
 801377e:	2200      	movs	r2, #0
 8013780:	f7ec ff62 	bl	8000648 <__aeabi_dmul>
 8013784:	4b08      	ldr	r3, [pc, #32]	@ (80137a8 <_strtod_l+0x860>)
 8013786:	400b      	ands	r3, r1
 8013788:	4682      	mov	sl, r0
 801378a:	468b      	mov	fp, r1
 801378c:	2b00      	cmp	r3, #0
 801378e:	f47f ae05 	bne.w	801339c <_strtod_l+0x454>
 8013792:	9a05      	ldr	r2, [sp, #20]
 8013794:	2322      	movs	r3, #34	@ 0x22
 8013796:	6013      	str	r3, [r2, #0]
 8013798:	e600      	b.n	801339c <_strtod_l+0x454>
 801379a:	bf00      	nop
 801379c:	08016fc0 	.word	0x08016fc0
 80137a0:	fffffc02 	.word	0xfffffc02
 80137a4:	39500000 	.word	0x39500000
 80137a8:	7ff00000 	.word	0x7ff00000
 80137ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80137b0:	d165      	bne.n	801387e <_strtod_l+0x936>
 80137b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80137b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80137b8:	b35a      	cbz	r2, 8013812 <_strtod_l+0x8ca>
 80137ba:	4a9f      	ldr	r2, [pc, #636]	@ (8013a38 <_strtod_l+0xaf0>)
 80137bc:	4293      	cmp	r3, r2
 80137be:	d12b      	bne.n	8013818 <_strtod_l+0x8d0>
 80137c0:	9b08      	ldr	r3, [sp, #32]
 80137c2:	4651      	mov	r1, sl
 80137c4:	b303      	cbz	r3, 8013808 <_strtod_l+0x8c0>
 80137c6:	4b9d      	ldr	r3, [pc, #628]	@ (8013a3c <_strtod_l+0xaf4>)
 80137c8:	465a      	mov	r2, fp
 80137ca:	4013      	ands	r3, r2
 80137cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80137d0:	f04f 32ff 	mov.w	r2, #4294967295
 80137d4:	d81b      	bhi.n	801380e <_strtod_l+0x8c6>
 80137d6:	0d1b      	lsrs	r3, r3, #20
 80137d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80137dc:	fa02 f303 	lsl.w	r3, r2, r3
 80137e0:	4299      	cmp	r1, r3
 80137e2:	d119      	bne.n	8013818 <_strtod_l+0x8d0>
 80137e4:	4b96      	ldr	r3, [pc, #600]	@ (8013a40 <_strtod_l+0xaf8>)
 80137e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80137e8:	429a      	cmp	r2, r3
 80137ea:	d102      	bne.n	80137f2 <_strtod_l+0x8aa>
 80137ec:	3101      	adds	r1, #1
 80137ee:	f43f adca 	beq.w	8013386 <_strtod_l+0x43e>
 80137f2:	4b92      	ldr	r3, [pc, #584]	@ (8013a3c <_strtod_l+0xaf4>)
 80137f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80137f6:	401a      	ands	r2, r3
 80137f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80137fc:	f04f 0a00 	mov.w	sl, #0
 8013800:	9b08      	ldr	r3, [sp, #32]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d1b8      	bne.n	8013778 <_strtod_l+0x830>
 8013806:	e5c9      	b.n	801339c <_strtod_l+0x454>
 8013808:	f04f 33ff 	mov.w	r3, #4294967295
 801380c:	e7e8      	b.n	80137e0 <_strtod_l+0x898>
 801380e:	4613      	mov	r3, r2
 8013810:	e7e6      	b.n	80137e0 <_strtod_l+0x898>
 8013812:	ea53 030a 	orrs.w	r3, r3, sl
 8013816:	d0a1      	beq.n	801375c <_strtod_l+0x814>
 8013818:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801381a:	b1db      	cbz	r3, 8013854 <_strtod_l+0x90c>
 801381c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801381e:	4213      	tst	r3, r2
 8013820:	d0ee      	beq.n	8013800 <_strtod_l+0x8b8>
 8013822:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013824:	9a08      	ldr	r2, [sp, #32]
 8013826:	4650      	mov	r0, sl
 8013828:	4659      	mov	r1, fp
 801382a:	b1bb      	cbz	r3, 801385c <_strtod_l+0x914>
 801382c:	f7ff fb6e 	bl	8012f0c <sulp>
 8013830:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013834:	ec53 2b10 	vmov	r2, r3, d0
 8013838:	f7ec fd50 	bl	80002dc <__adddf3>
 801383c:	4682      	mov	sl, r0
 801383e:	468b      	mov	fp, r1
 8013840:	e7de      	b.n	8013800 <_strtod_l+0x8b8>
 8013842:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013846:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801384a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801384e:	f04f 3aff 	mov.w	sl, #4294967295
 8013852:	e7d5      	b.n	8013800 <_strtod_l+0x8b8>
 8013854:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013856:	ea13 0f0a 	tst.w	r3, sl
 801385a:	e7e1      	b.n	8013820 <_strtod_l+0x8d8>
 801385c:	f7ff fb56 	bl	8012f0c <sulp>
 8013860:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013864:	ec53 2b10 	vmov	r2, r3, d0
 8013868:	f7ec fd36 	bl	80002d8 <__aeabi_dsub>
 801386c:	2200      	movs	r2, #0
 801386e:	2300      	movs	r3, #0
 8013870:	4682      	mov	sl, r0
 8013872:	468b      	mov	fp, r1
 8013874:	f7ed f950 	bl	8000b18 <__aeabi_dcmpeq>
 8013878:	2800      	cmp	r0, #0
 801387a:	d0c1      	beq.n	8013800 <_strtod_l+0x8b8>
 801387c:	e619      	b.n	80134b2 <_strtod_l+0x56a>
 801387e:	4641      	mov	r1, r8
 8013880:	4620      	mov	r0, r4
 8013882:	f7ff facd 	bl	8012e20 <__ratio>
 8013886:	ec57 6b10 	vmov	r6, r7, d0
 801388a:	2200      	movs	r2, #0
 801388c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013890:	4630      	mov	r0, r6
 8013892:	4639      	mov	r1, r7
 8013894:	f7ed f954 	bl	8000b40 <__aeabi_dcmple>
 8013898:	2800      	cmp	r0, #0
 801389a:	d06f      	beq.n	801397c <_strtod_l+0xa34>
 801389c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d17a      	bne.n	8013998 <_strtod_l+0xa50>
 80138a2:	f1ba 0f00 	cmp.w	sl, #0
 80138a6:	d158      	bne.n	801395a <_strtod_l+0xa12>
 80138a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d15a      	bne.n	8013968 <_strtod_l+0xa20>
 80138b2:	4b64      	ldr	r3, [pc, #400]	@ (8013a44 <_strtod_l+0xafc>)
 80138b4:	2200      	movs	r2, #0
 80138b6:	4630      	mov	r0, r6
 80138b8:	4639      	mov	r1, r7
 80138ba:	f7ed f937 	bl	8000b2c <__aeabi_dcmplt>
 80138be:	2800      	cmp	r0, #0
 80138c0:	d159      	bne.n	8013976 <_strtod_l+0xa2e>
 80138c2:	4630      	mov	r0, r6
 80138c4:	4639      	mov	r1, r7
 80138c6:	4b60      	ldr	r3, [pc, #384]	@ (8013a48 <_strtod_l+0xb00>)
 80138c8:	2200      	movs	r2, #0
 80138ca:	f7ec febd 	bl	8000648 <__aeabi_dmul>
 80138ce:	4606      	mov	r6, r0
 80138d0:	460f      	mov	r7, r1
 80138d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80138d6:	9606      	str	r6, [sp, #24]
 80138d8:	9307      	str	r3, [sp, #28]
 80138da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80138de:	4d57      	ldr	r5, [pc, #348]	@ (8013a3c <_strtod_l+0xaf4>)
 80138e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80138e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138e6:	401d      	ands	r5, r3
 80138e8:	4b58      	ldr	r3, [pc, #352]	@ (8013a4c <_strtod_l+0xb04>)
 80138ea:	429d      	cmp	r5, r3
 80138ec:	f040 80b2 	bne.w	8013a54 <_strtod_l+0xb0c>
 80138f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80138f6:	ec4b ab10 	vmov	d0, sl, fp
 80138fa:	f7ff f9c9 	bl	8012c90 <__ulp>
 80138fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013902:	ec51 0b10 	vmov	r0, r1, d0
 8013906:	f7ec fe9f 	bl	8000648 <__aeabi_dmul>
 801390a:	4652      	mov	r2, sl
 801390c:	465b      	mov	r3, fp
 801390e:	f7ec fce5 	bl	80002dc <__adddf3>
 8013912:	460b      	mov	r3, r1
 8013914:	4949      	ldr	r1, [pc, #292]	@ (8013a3c <_strtod_l+0xaf4>)
 8013916:	4a4e      	ldr	r2, [pc, #312]	@ (8013a50 <_strtod_l+0xb08>)
 8013918:	4019      	ands	r1, r3
 801391a:	4291      	cmp	r1, r2
 801391c:	4682      	mov	sl, r0
 801391e:	d942      	bls.n	80139a6 <_strtod_l+0xa5e>
 8013920:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013922:	4b47      	ldr	r3, [pc, #284]	@ (8013a40 <_strtod_l+0xaf8>)
 8013924:	429a      	cmp	r2, r3
 8013926:	d103      	bne.n	8013930 <_strtod_l+0x9e8>
 8013928:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801392a:	3301      	adds	r3, #1
 801392c:	f43f ad2b 	beq.w	8013386 <_strtod_l+0x43e>
 8013930:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013a40 <_strtod_l+0xaf8>
 8013934:	f04f 3aff 	mov.w	sl, #4294967295
 8013938:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801393a:	9805      	ldr	r0, [sp, #20]
 801393c:	f7fe fe74 	bl	8012628 <_Bfree>
 8013940:	9805      	ldr	r0, [sp, #20]
 8013942:	4649      	mov	r1, r9
 8013944:	f7fe fe70 	bl	8012628 <_Bfree>
 8013948:	9805      	ldr	r0, [sp, #20]
 801394a:	4641      	mov	r1, r8
 801394c:	f7fe fe6c 	bl	8012628 <_Bfree>
 8013950:	9805      	ldr	r0, [sp, #20]
 8013952:	4621      	mov	r1, r4
 8013954:	f7fe fe68 	bl	8012628 <_Bfree>
 8013958:	e618      	b.n	801358c <_strtod_l+0x644>
 801395a:	f1ba 0f01 	cmp.w	sl, #1
 801395e:	d103      	bne.n	8013968 <_strtod_l+0xa20>
 8013960:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013962:	2b00      	cmp	r3, #0
 8013964:	f43f ada5 	beq.w	80134b2 <_strtod_l+0x56a>
 8013968:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8013a18 <_strtod_l+0xad0>
 801396c:	4f35      	ldr	r7, [pc, #212]	@ (8013a44 <_strtod_l+0xafc>)
 801396e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013972:	2600      	movs	r6, #0
 8013974:	e7b1      	b.n	80138da <_strtod_l+0x992>
 8013976:	4f34      	ldr	r7, [pc, #208]	@ (8013a48 <_strtod_l+0xb00>)
 8013978:	2600      	movs	r6, #0
 801397a:	e7aa      	b.n	80138d2 <_strtod_l+0x98a>
 801397c:	4b32      	ldr	r3, [pc, #200]	@ (8013a48 <_strtod_l+0xb00>)
 801397e:	4630      	mov	r0, r6
 8013980:	4639      	mov	r1, r7
 8013982:	2200      	movs	r2, #0
 8013984:	f7ec fe60 	bl	8000648 <__aeabi_dmul>
 8013988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801398a:	4606      	mov	r6, r0
 801398c:	460f      	mov	r7, r1
 801398e:	2b00      	cmp	r3, #0
 8013990:	d09f      	beq.n	80138d2 <_strtod_l+0x98a>
 8013992:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013996:	e7a0      	b.n	80138da <_strtod_l+0x992>
 8013998:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013a20 <_strtod_l+0xad8>
 801399c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80139a0:	ec57 6b17 	vmov	r6, r7, d7
 80139a4:	e799      	b.n	80138da <_strtod_l+0x992>
 80139a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80139aa:	9b08      	ldr	r3, [sp, #32]
 80139ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d1c1      	bne.n	8013938 <_strtod_l+0x9f0>
 80139b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80139b8:	0d1b      	lsrs	r3, r3, #20
 80139ba:	051b      	lsls	r3, r3, #20
 80139bc:	429d      	cmp	r5, r3
 80139be:	d1bb      	bne.n	8013938 <_strtod_l+0x9f0>
 80139c0:	4630      	mov	r0, r6
 80139c2:	4639      	mov	r1, r7
 80139c4:	f7ed f9a0 	bl	8000d08 <__aeabi_d2lz>
 80139c8:	f7ec fe10 	bl	80005ec <__aeabi_l2d>
 80139cc:	4602      	mov	r2, r0
 80139ce:	460b      	mov	r3, r1
 80139d0:	4630      	mov	r0, r6
 80139d2:	4639      	mov	r1, r7
 80139d4:	f7ec fc80 	bl	80002d8 <__aeabi_dsub>
 80139d8:	460b      	mov	r3, r1
 80139da:	4602      	mov	r2, r0
 80139dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80139e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80139e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80139e6:	ea46 060a 	orr.w	r6, r6, sl
 80139ea:	431e      	orrs	r6, r3
 80139ec:	d06f      	beq.n	8013ace <_strtod_l+0xb86>
 80139ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8013a28 <_strtod_l+0xae0>)
 80139f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f4:	f7ed f89a 	bl	8000b2c <__aeabi_dcmplt>
 80139f8:	2800      	cmp	r0, #0
 80139fa:	f47f accf 	bne.w	801339c <_strtod_l+0x454>
 80139fe:	a30c      	add	r3, pc, #48	@ (adr r3, 8013a30 <_strtod_l+0xae8>)
 8013a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013a08:	f7ed f8ae 	bl	8000b68 <__aeabi_dcmpgt>
 8013a0c:	2800      	cmp	r0, #0
 8013a0e:	d093      	beq.n	8013938 <_strtod_l+0x9f0>
 8013a10:	e4c4      	b.n	801339c <_strtod_l+0x454>
 8013a12:	bf00      	nop
 8013a14:	f3af 8000 	nop.w
 8013a18:	00000000 	.word	0x00000000
 8013a1c:	bff00000 	.word	0xbff00000
 8013a20:	00000000 	.word	0x00000000
 8013a24:	3ff00000 	.word	0x3ff00000
 8013a28:	94a03595 	.word	0x94a03595
 8013a2c:	3fdfffff 	.word	0x3fdfffff
 8013a30:	35afe535 	.word	0x35afe535
 8013a34:	3fe00000 	.word	0x3fe00000
 8013a38:	000fffff 	.word	0x000fffff
 8013a3c:	7ff00000 	.word	0x7ff00000
 8013a40:	7fefffff 	.word	0x7fefffff
 8013a44:	3ff00000 	.word	0x3ff00000
 8013a48:	3fe00000 	.word	0x3fe00000
 8013a4c:	7fe00000 	.word	0x7fe00000
 8013a50:	7c9fffff 	.word	0x7c9fffff
 8013a54:	9b08      	ldr	r3, [sp, #32]
 8013a56:	b323      	cbz	r3, 8013aa2 <_strtod_l+0xb5a>
 8013a58:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013a5c:	d821      	bhi.n	8013aa2 <_strtod_l+0xb5a>
 8013a5e:	a328      	add	r3, pc, #160	@ (adr r3, 8013b00 <_strtod_l+0xbb8>)
 8013a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a64:	4630      	mov	r0, r6
 8013a66:	4639      	mov	r1, r7
 8013a68:	f7ed f86a 	bl	8000b40 <__aeabi_dcmple>
 8013a6c:	b1a0      	cbz	r0, 8013a98 <_strtod_l+0xb50>
 8013a6e:	4639      	mov	r1, r7
 8013a70:	4630      	mov	r0, r6
 8013a72:	f7ed f8c1 	bl	8000bf8 <__aeabi_d2uiz>
 8013a76:	2801      	cmp	r0, #1
 8013a78:	bf38      	it	cc
 8013a7a:	2001      	movcc	r0, #1
 8013a7c:	f7ec fd6a 	bl	8000554 <__aeabi_ui2d>
 8013a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a82:	4606      	mov	r6, r0
 8013a84:	460f      	mov	r7, r1
 8013a86:	b9fb      	cbnz	r3, 8013ac8 <_strtod_l+0xb80>
 8013a88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013a8c:	9014      	str	r0, [sp, #80]	@ 0x50
 8013a8e:	9315      	str	r3, [sp, #84]	@ 0x54
 8013a90:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013a94:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013a98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013a9a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013a9e:	1b5b      	subs	r3, r3, r5
 8013aa0:	9311      	str	r3, [sp, #68]	@ 0x44
 8013aa2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013aa6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013aaa:	f7ff f8f1 	bl	8012c90 <__ulp>
 8013aae:	4650      	mov	r0, sl
 8013ab0:	ec53 2b10 	vmov	r2, r3, d0
 8013ab4:	4659      	mov	r1, fp
 8013ab6:	f7ec fdc7 	bl	8000648 <__aeabi_dmul>
 8013aba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013abe:	f7ec fc0d 	bl	80002dc <__adddf3>
 8013ac2:	4682      	mov	sl, r0
 8013ac4:	468b      	mov	fp, r1
 8013ac6:	e770      	b.n	80139aa <_strtod_l+0xa62>
 8013ac8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013acc:	e7e0      	b.n	8013a90 <_strtod_l+0xb48>
 8013ace:	a30e      	add	r3, pc, #56	@ (adr r3, 8013b08 <_strtod_l+0xbc0>)
 8013ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad4:	f7ed f82a 	bl	8000b2c <__aeabi_dcmplt>
 8013ad8:	e798      	b.n	8013a0c <_strtod_l+0xac4>
 8013ada:	2300      	movs	r3, #0
 8013adc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ade:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013ae0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013ae2:	6013      	str	r3, [r2, #0]
 8013ae4:	f7ff ba6d 	b.w	8012fc2 <_strtod_l+0x7a>
 8013ae8:	2a65      	cmp	r2, #101	@ 0x65
 8013aea:	f43f ab66 	beq.w	80131ba <_strtod_l+0x272>
 8013aee:	2a45      	cmp	r2, #69	@ 0x45
 8013af0:	f43f ab63 	beq.w	80131ba <_strtod_l+0x272>
 8013af4:	2301      	movs	r3, #1
 8013af6:	f7ff bb9e 	b.w	8013236 <_strtod_l+0x2ee>
 8013afa:	bf00      	nop
 8013afc:	f3af 8000 	nop.w
 8013b00:	ffc00000 	.word	0xffc00000
 8013b04:	41dfffff 	.word	0x41dfffff
 8013b08:	94a03595 	.word	0x94a03595
 8013b0c:	3fcfffff 	.word	0x3fcfffff

08013b10 <_strtod_r>:
 8013b10:	4b01      	ldr	r3, [pc, #4]	@ (8013b18 <_strtod_r+0x8>)
 8013b12:	f7ff ba19 	b.w	8012f48 <_strtod_l>
 8013b16:	bf00      	nop
 8013b18:	200001fc 	.word	0x200001fc

08013b1c <_strtol_l.constprop.0>:
 8013b1c:	2b24      	cmp	r3, #36	@ 0x24
 8013b1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b22:	4686      	mov	lr, r0
 8013b24:	4690      	mov	r8, r2
 8013b26:	d801      	bhi.n	8013b2c <_strtol_l.constprop.0+0x10>
 8013b28:	2b01      	cmp	r3, #1
 8013b2a:	d106      	bne.n	8013b3a <_strtol_l.constprop.0+0x1e>
 8013b2c:	f7fd fdac 	bl	8011688 <__errno>
 8013b30:	2316      	movs	r3, #22
 8013b32:	6003      	str	r3, [r0, #0]
 8013b34:	2000      	movs	r0, #0
 8013b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b3a:	4834      	ldr	r0, [pc, #208]	@ (8013c0c <_strtol_l.constprop.0+0xf0>)
 8013b3c:	460d      	mov	r5, r1
 8013b3e:	462a      	mov	r2, r5
 8013b40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013b44:	5d06      	ldrb	r6, [r0, r4]
 8013b46:	f016 0608 	ands.w	r6, r6, #8
 8013b4a:	d1f8      	bne.n	8013b3e <_strtol_l.constprop.0+0x22>
 8013b4c:	2c2d      	cmp	r4, #45	@ 0x2d
 8013b4e:	d12d      	bne.n	8013bac <_strtol_l.constprop.0+0x90>
 8013b50:	782c      	ldrb	r4, [r5, #0]
 8013b52:	2601      	movs	r6, #1
 8013b54:	1c95      	adds	r5, r2, #2
 8013b56:	f033 0210 	bics.w	r2, r3, #16
 8013b5a:	d109      	bne.n	8013b70 <_strtol_l.constprop.0+0x54>
 8013b5c:	2c30      	cmp	r4, #48	@ 0x30
 8013b5e:	d12a      	bne.n	8013bb6 <_strtol_l.constprop.0+0x9a>
 8013b60:	782a      	ldrb	r2, [r5, #0]
 8013b62:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013b66:	2a58      	cmp	r2, #88	@ 0x58
 8013b68:	d125      	bne.n	8013bb6 <_strtol_l.constprop.0+0x9a>
 8013b6a:	786c      	ldrb	r4, [r5, #1]
 8013b6c:	2310      	movs	r3, #16
 8013b6e:	3502      	adds	r5, #2
 8013b70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013b74:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013b78:	2200      	movs	r2, #0
 8013b7a:	fbbc f9f3 	udiv	r9, ip, r3
 8013b7e:	4610      	mov	r0, r2
 8013b80:	fb03 ca19 	mls	sl, r3, r9, ip
 8013b84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013b88:	2f09      	cmp	r7, #9
 8013b8a:	d81b      	bhi.n	8013bc4 <_strtol_l.constprop.0+0xa8>
 8013b8c:	463c      	mov	r4, r7
 8013b8e:	42a3      	cmp	r3, r4
 8013b90:	dd27      	ble.n	8013be2 <_strtol_l.constprop.0+0xc6>
 8013b92:	1c57      	adds	r7, r2, #1
 8013b94:	d007      	beq.n	8013ba6 <_strtol_l.constprop.0+0x8a>
 8013b96:	4581      	cmp	r9, r0
 8013b98:	d320      	bcc.n	8013bdc <_strtol_l.constprop.0+0xc0>
 8013b9a:	d101      	bne.n	8013ba0 <_strtol_l.constprop.0+0x84>
 8013b9c:	45a2      	cmp	sl, r4
 8013b9e:	db1d      	blt.n	8013bdc <_strtol_l.constprop.0+0xc0>
 8013ba0:	fb00 4003 	mla	r0, r0, r3, r4
 8013ba4:	2201      	movs	r2, #1
 8013ba6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013baa:	e7eb      	b.n	8013b84 <_strtol_l.constprop.0+0x68>
 8013bac:	2c2b      	cmp	r4, #43	@ 0x2b
 8013bae:	bf04      	itt	eq
 8013bb0:	782c      	ldrbeq	r4, [r5, #0]
 8013bb2:	1c95      	addeq	r5, r2, #2
 8013bb4:	e7cf      	b.n	8013b56 <_strtol_l.constprop.0+0x3a>
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d1da      	bne.n	8013b70 <_strtol_l.constprop.0+0x54>
 8013bba:	2c30      	cmp	r4, #48	@ 0x30
 8013bbc:	bf0c      	ite	eq
 8013bbe:	2308      	moveq	r3, #8
 8013bc0:	230a      	movne	r3, #10
 8013bc2:	e7d5      	b.n	8013b70 <_strtol_l.constprop.0+0x54>
 8013bc4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013bc8:	2f19      	cmp	r7, #25
 8013bca:	d801      	bhi.n	8013bd0 <_strtol_l.constprop.0+0xb4>
 8013bcc:	3c37      	subs	r4, #55	@ 0x37
 8013bce:	e7de      	b.n	8013b8e <_strtol_l.constprop.0+0x72>
 8013bd0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013bd4:	2f19      	cmp	r7, #25
 8013bd6:	d804      	bhi.n	8013be2 <_strtol_l.constprop.0+0xc6>
 8013bd8:	3c57      	subs	r4, #87	@ 0x57
 8013bda:	e7d8      	b.n	8013b8e <_strtol_l.constprop.0+0x72>
 8013bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8013be0:	e7e1      	b.n	8013ba6 <_strtol_l.constprop.0+0x8a>
 8013be2:	1c53      	adds	r3, r2, #1
 8013be4:	d108      	bne.n	8013bf8 <_strtol_l.constprop.0+0xdc>
 8013be6:	2322      	movs	r3, #34	@ 0x22
 8013be8:	f8ce 3000 	str.w	r3, [lr]
 8013bec:	4660      	mov	r0, ip
 8013bee:	f1b8 0f00 	cmp.w	r8, #0
 8013bf2:	d0a0      	beq.n	8013b36 <_strtol_l.constprop.0+0x1a>
 8013bf4:	1e69      	subs	r1, r5, #1
 8013bf6:	e006      	b.n	8013c06 <_strtol_l.constprop.0+0xea>
 8013bf8:	b106      	cbz	r6, 8013bfc <_strtol_l.constprop.0+0xe0>
 8013bfa:	4240      	negs	r0, r0
 8013bfc:	f1b8 0f00 	cmp.w	r8, #0
 8013c00:	d099      	beq.n	8013b36 <_strtol_l.constprop.0+0x1a>
 8013c02:	2a00      	cmp	r2, #0
 8013c04:	d1f6      	bne.n	8013bf4 <_strtol_l.constprop.0+0xd8>
 8013c06:	f8c8 1000 	str.w	r1, [r8]
 8013c0a:	e794      	b.n	8013b36 <_strtol_l.constprop.0+0x1a>
 8013c0c:	08016fe9 	.word	0x08016fe9

08013c10 <_strtol_r>:
 8013c10:	f7ff bf84 	b.w	8013b1c <_strtol_l.constprop.0>

08013c14 <__ssputs_r>:
 8013c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c18:	688e      	ldr	r6, [r1, #8]
 8013c1a:	461f      	mov	r7, r3
 8013c1c:	42be      	cmp	r6, r7
 8013c1e:	680b      	ldr	r3, [r1, #0]
 8013c20:	4682      	mov	sl, r0
 8013c22:	460c      	mov	r4, r1
 8013c24:	4690      	mov	r8, r2
 8013c26:	d82d      	bhi.n	8013c84 <__ssputs_r+0x70>
 8013c28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013c2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013c30:	d026      	beq.n	8013c80 <__ssputs_r+0x6c>
 8013c32:	6965      	ldr	r5, [r4, #20]
 8013c34:	6909      	ldr	r1, [r1, #16]
 8013c36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013c3a:	eba3 0901 	sub.w	r9, r3, r1
 8013c3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013c42:	1c7b      	adds	r3, r7, #1
 8013c44:	444b      	add	r3, r9
 8013c46:	106d      	asrs	r5, r5, #1
 8013c48:	429d      	cmp	r5, r3
 8013c4a:	bf38      	it	cc
 8013c4c:	461d      	movcc	r5, r3
 8013c4e:	0553      	lsls	r3, r2, #21
 8013c50:	d527      	bpl.n	8013ca2 <__ssputs_r+0x8e>
 8013c52:	4629      	mov	r1, r5
 8013c54:	f7fe fc1c 	bl	8012490 <_malloc_r>
 8013c58:	4606      	mov	r6, r0
 8013c5a:	b360      	cbz	r0, 8013cb6 <__ssputs_r+0xa2>
 8013c5c:	6921      	ldr	r1, [r4, #16]
 8013c5e:	464a      	mov	r2, r9
 8013c60:	f7fd fd3f 	bl	80116e2 <memcpy>
 8013c64:	89a3      	ldrh	r3, [r4, #12]
 8013c66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013c6e:	81a3      	strh	r3, [r4, #12]
 8013c70:	6126      	str	r6, [r4, #16]
 8013c72:	6165      	str	r5, [r4, #20]
 8013c74:	444e      	add	r6, r9
 8013c76:	eba5 0509 	sub.w	r5, r5, r9
 8013c7a:	6026      	str	r6, [r4, #0]
 8013c7c:	60a5      	str	r5, [r4, #8]
 8013c7e:	463e      	mov	r6, r7
 8013c80:	42be      	cmp	r6, r7
 8013c82:	d900      	bls.n	8013c86 <__ssputs_r+0x72>
 8013c84:	463e      	mov	r6, r7
 8013c86:	6820      	ldr	r0, [r4, #0]
 8013c88:	4632      	mov	r2, r6
 8013c8a:	4641      	mov	r1, r8
 8013c8c:	f000 fd53 	bl	8014736 <memmove>
 8013c90:	68a3      	ldr	r3, [r4, #8]
 8013c92:	1b9b      	subs	r3, r3, r6
 8013c94:	60a3      	str	r3, [r4, #8]
 8013c96:	6823      	ldr	r3, [r4, #0]
 8013c98:	4433      	add	r3, r6
 8013c9a:	6023      	str	r3, [r4, #0]
 8013c9c:	2000      	movs	r0, #0
 8013c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ca2:	462a      	mov	r2, r5
 8013ca4:	f001 f8f9 	bl	8014e9a <_realloc_r>
 8013ca8:	4606      	mov	r6, r0
 8013caa:	2800      	cmp	r0, #0
 8013cac:	d1e0      	bne.n	8013c70 <__ssputs_r+0x5c>
 8013cae:	6921      	ldr	r1, [r4, #16]
 8013cb0:	4650      	mov	r0, sl
 8013cb2:	f7fe fb79 	bl	80123a8 <_free_r>
 8013cb6:	230c      	movs	r3, #12
 8013cb8:	f8ca 3000 	str.w	r3, [sl]
 8013cbc:	89a3      	ldrh	r3, [r4, #12]
 8013cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013cc2:	81a3      	strh	r3, [r4, #12]
 8013cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8013cc8:	e7e9      	b.n	8013c9e <__ssputs_r+0x8a>
	...

08013ccc <_svfiprintf_r>:
 8013ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013cd0:	4698      	mov	r8, r3
 8013cd2:	898b      	ldrh	r3, [r1, #12]
 8013cd4:	061b      	lsls	r3, r3, #24
 8013cd6:	b09d      	sub	sp, #116	@ 0x74
 8013cd8:	4607      	mov	r7, r0
 8013cda:	460d      	mov	r5, r1
 8013cdc:	4614      	mov	r4, r2
 8013cde:	d510      	bpl.n	8013d02 <_svfiprintf_r+0x36>
 8013ce0:	690b      	ldr	r3, [r1, #16]
 8013ce2:	b973      	cbnz	r3, 8013d02 <_svfiprintf_r+0x36>
 8013ce4:	2140      	movs	r1, #64	@ 0x40
 8013ce6:	f7fe fbd3 	bl	8012490 <_malloc_r>
 8013cea:	6028      	str	r0, [r5, #0]
 8013cec:	6128      	str	r0, [r5, #16]
 8013cee:	b930      	cbnz	r0, 8013cfe <_svfiprintf_r+0x32>
 8013cf0:	230c      	movs	r3, #12
 8013cf2:	603b      	str	r3, [r7, #0]
 8013cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8013cf8:	b01d      	add	sp, #116	@ 0x74
 8013cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cfe:	2340      	movs	r3, #64	@ 0x40
 8013d00:	616b      	str	r3, [r5, #20]
 8013d02:	2300      	movs	r3, #0
 8013d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8013d06:	2320      	movs	r3, #32
 8013d08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013d0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d10:	2330      	movs	r3, #48	@ 0x30
 8013d12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013eb0 <_svfiprintf_r+0x1e4>
 8013d16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013d1a:	f04f 0901 	mov.w	r9, #1
 8013d1e:	4623      	mov	r3, r4
 8013d20:	469a      	mov	sl, r3
 8013d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d26:	b10a      	cbz	r2, 8013d2c <_svfiprintf_r+0x60>
 8013d28:	2a25      	cmp	r2, #37	@ 0x25
 8013d2a:	d1f9      	bne.n	8013d20 <_svfiprintf_r+0x54>
 8013d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8013d30:	d00b      	beq.n	8013d4a <_svfiprintf_r+0x7e>
 8013d32:	465b      	mov	r3, fp
 8013d34:	4622      	mov	r2, r4
 8013d36:	4629      	mov	r1, r5
 8013d38:	4638      	mov	r0, r7
 8013d3a:	f7ff ff6b 	bl	8013c14 <__ssputs_r>
 8013d3e:	3001      	adds	r0, #1
 8013d40:	f000 80a7 	beq.w	8013e92 <_svfiprintf_r+0x1c6>
 8013d44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d46:	445a      	add	r2, fp
 8013d48:	9209      	str	r2, [sp, #36]	@ 0x24
 8013d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	f000 809f 	beq.w	8013e92 <_svfiprintf_r+0x1c6>
 8013d54:	2300      	movs	r3, #0
 8013d56:	f04f 32ff 	mov.w	r2, #4294967295
 8013d5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013d5e:	f10a 0a01 	add.w	sl, sl, #1
 8013d62:	9304      	str	r3, [sp, #16]
 8013d64:	9307      	str	r3, [sp, #28]
 8013d66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013d6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8013d6c:	4654      	mov	r4, sl
 8013d6e:	2205      	movs	r2, #5
 8013d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013d74:	484e      	ldr	r0, [pc, #312]	@ (8013eb0 <_svfiprintf_r+0x1e4>)
 8013d76:	f7ec fa53 	bl	8000220 <memchr>
 8013d7a:	9a04      	ldr	r2, [sp, #16]
 8013d7c:	b9d8      	cbnz	r0, 8013db6 <_svfiprintf_r+0xea>
 8013d7e:	06d0      	lsls	r0, r2, #27
 8013d80:	bf44      	itt	mi
 8013d82:	2320      	movmi	r3, #32
 8013d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013d88:	0711      	lsls	r1, r2, #28
 8013d8a:	bf44      	itt	mi
 8013d8c:	232b      	movmi	r3, #43	@ 0x2b
 8013d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013d92:	f89a 3000 	ldrb.w	r3, [sl]
 8013d96:	2b2a      	cmp	r3, #42	@ 0x2a
 8013d98:	d015      	beq.n	8013dc6 <_svfiprintf_r+0xfa>
 8013d9a:	9a07      	ldr	r2, [sp, #28]
 8013d9c:	4654      	mov	r4, sl
 8013d9e:	2000      	movs	r0, #0
 8013da0:	f04f 0c0a 	mov.w	ip, #10
 8013da4:	4621      	mov	r1, r4
 8013da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013daa:	3b30      	subs	r3, #48	@ 0x30
 8013dac:	2b09      	cmp	r3, #9
 8013dae:	d94b      	bls.n	8013e48 <_svfiprintf_r+0x17c>
 8013db0:	b1b0      	cbz	r0, 8013de0 <_svfiprintf_r+0x114>
 8013db2:	9207      	str	r2, [sp, #28]
 8013db4:	e014      	b.n	8013de0 <_svfiprintf_r+0x114>
 8013db6:	eba0 0308 	sub.w	r3, r0, r8
 8013dba:	fa09 f303 	lsl.w	r3, r9, r3
 8013dbe:	4313      	orrs	r3, r2
 8013dc0:	9304      	str	r3, [sp, #16]
 8013dc2:	46a2      	mov	sl, r4
 8013dc4:	e7d2      	b.n	8013d6c <_svfiprintf_r+0xa0>
 8013dc6:	9b03      	ldr	r3, [sp, #12]
 8013dc8:	1d19      	adds	r1, r3, #4
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	9103      	str	r1, [sp, #12]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	bfbb      	ittet	lt
 8013dd2:	425b      	neglt	r3, r3
 8013dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8013dd8:	9307      	strge	r3, [sp, #28]
 8013dda:	9307      	strlt	r3, [sp, #28]
 8013ddc:	bfb8      	it	lt
 8013dde:	9204      	strlt	r2, [sp, #16]
 8013de0:	7823      	ldrb	r3, [r4, #0]
 8013de2:	2b2e      	cmp	r3, #46	@ 0x2e
 8013de4:	d10a      	bne.n	8013dfc <_svfiprintf_r+0x130>
 8013de6:	7863      	ldrb	r3, [r4, #1]
 8013de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8013dea:	d132      	bne.n	8013e52 <_svfiprintf_r+0x186>
 8013dec:	9b03      	ldr	r3, [sp, #12]
 8013dee:	1d1a      	adds	r2, r3, #4
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	9203      	str	r2, [sp, #12]
 8013df4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013df8:	3402      	adds	r4, #2
 8013dfa:	9305      	str	r3, [sp, #20]
 8013dfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013ec0 <_svfiprintf_r+0x1f4>
 8013e00:	7821      	ldrb	r1, [r4, #0]
 8013e02:	2203      	movs	r2, #3
 8013e04:	4650      	mov	r0, sl
 8013e06:	f7ec fa0b 	bl	8000220 <memchr>
 8013e0a:	b138      	cbz	r0, 8013e1c <_svfiprintf_r+0x150>
 8013e0c:	9b04      	ldr	r3, [sp, #16]
 8013e0e:	eba0 000a 	sub.w	r0, r0, sl
 8013e12:	2240      	movs	r2, #64	@ 0x40
 8013e14:	4082      	lsls	r2, r0
 8013e16:	4313      	orrs	r3, r2
 8013e18:	3401      	adds	r4, #1
 8013e1a:	9304      	str	r3, [sp, #16]
 8013e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e20:	4824      	ldr	r0, [pc, #144]	@ (8013eb4 <_svfiprintf_r+0x1e8>)
 8013e22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013e26:	2206      	movs	r2, #6
 8013e28:	f7ec f9fa 	bl	8000220 <memchr>
 8013e2c:	2800      	cmp	r0, #0
 8013e2e:	d036      	beq.n	8013e9e <_svfiprintf_r+0x1d2>
 8013e30:	4b21      	ldr	r3, [pc, #132]	@ (8013eb8 <_svfiprintf_r+0x1ec>)
 8013e32:	bb1b      	cbnz	r3, 8013e7c <_svfiprintf_r+0x1b0>
 8013e34:	9b03      	ldr	r3, [sp, #12]
 8013e36:	3307      	adds	r3, #7
 8013e38:	f023 0307 	bic.w	r3, r3, #7
 8013e3c:	3308      	adds	r3, #8
 8013e3e:	9303      	str	r3, [sp, #12]
 8013e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013e42:	4433      	add	r3, r6
 8013e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8013e46:	e76a      	b.n	8013d1e <_svfiprintf_r+0x52>
 8013e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8013e4c:	460c      	mov	r4, r1
 8013e4e:	2001      	movs	r0, #1
 8013e50:	e7a8      	b.n	8013da4 <_svfiprintf_r+0xd8>
 8013e52:	2300      	movs	r3, #0
 8013e54:	3401      	adds	r4, #1
 8013e56:	9305      	str	r3, [sp, #20]
 8013e58:	4619      	mov	r1, r3
 8013e5a:	f04f 0c0a 	mov.w	ip, #10
 8013e5e:	4620      	mov	r0, r4
 8013e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013e64:	3a30      	subs	r2, #48	@ 0x30
 8013e66:	2a09      	cmp	r2, #9
 8013e68:	d903      	bls.n	8013e72 <_svfiprintf_r+0x1a6>
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d0c6      	beq.n	8013dfc <_svfiprintf_r+0x130>
 8013e6e:	9105      	str	r1, [sp, #20]
 8013e70:	e7c4      	b.n	8013dfc <_svfiprintf_r+0x130>
 8013e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8013e76:	4604      	mov	r4, r0
 8013e78:	2301      	movs	r3, #1
 8013e7a:	e7f0      	b.n	8013e5e <_svfiprintf_r+0x192>
 8013e7c:	ab03      	add	r3, sp, #12
 8013e7e:	9300      	str	r3, [sp, #0]
 8013e80:	462a      	mov	r2, r5
 8013e82:	4b0e      	ldr	r3, [pc, #56]	@ (8013ebc <_svfiprintf_r+0x1f0>)
 8013e84:	a904      	add	r1, sp, #16
 8013e86:	4638      	mov	r0, r7
 8013e88:	f7fc fc7c 	bl	8010784 <_printf_float>
 8013e8c:	1c42      	adds	r2, r0, #1
 8013e8e:	4606      	mov	r6, r0
 8013e90:	d1d6      	bne.n	8013e40 <_svfiprintf_r+0x174>
 8013e92:	89ab      	ldrh	r3, [r5, #12]
 8013e94:	065b      	lsls	r3, r3, #25
 8013e96:	f53f af2d 	bmi.w	8013cf4 <_svfiprintf_r+0x28>
 8013e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013e9c:	e72c      	b.n	8013cf8 <_svfiprintf_r+0x2c>
 8013e9e:	ab03      	add	r3, sp, #12
 8013ea0:	9300      	str	r3, [sp, #0]
 8013ea2:	462a      	mov	r2, r5
 8013ea4:	4b05      	ldr	r3, [pc, #20]	@ (8013ebc <_svfiprintf_r+0x1f0>)
 8013ea6:	a904      	add	r1, sp, #16
 8013ea8:	4638      	mov	r0, r7
 8013eaa:	f7fc ff03 	bl	8010cb4 <_printf_i>
 8013eae:	e7ed      	b.n	8013e8c <_svfiprintf_r+0x1c0>
 8013eb0:	080170e9 	.word	0x080170e9
 8013eb4:	080170f3 	.word	0x080170f3
 8013eb8:	08010785 	.word	0x08010785
 8013ebc:	08013c15 	.word	0x08013c15
 8013ec0:	080170ef 	.word	0x080170ef

08013ec4 <_sungetc_r>:
 8013ec4:	b538      	push	{r3, r4, r5, lr}
 8013ec6:	1c4b      	adds	r3, r1, #1
 8013ec8:	4614      	mov	r4, r2
 8013eca:	d103      	bne.n	8013ed4 <_sungetc_r+0x10>
 8013ecc:	f04f 35ff 	mov.w	r5, #4294967295
 8013ed0:	4628      	mov	r0, r5
 8013ed2:	bd38      	pop	{r3, r4, r5, pc}
 8013ed4:	8993      	ldrh	r3, [r2, #12]
 8013ed6:	f023 0320 	bic.w	r3, r3, #32
 8013eda:	8193      	strh	r3, [r2, #12]
 8013edc:	6853      	ldr	r3, [r2, #4]
 8013ede:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8013ee0:	b2cd      	uxtb	r5, r1
 8013ee2:	b18a      	cbz	r2, 8013f08 <_sungetc_r+0x44>
 8013ee4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8013ee6:	429a      	cmp	r2, r3
 8013ee8:	dd08      	ble.n	8013efc <_sungetc_r+0x38>
 8013eea:	6823      	ldr	r3, [r4, #0]
 8013eec:	1e5a      	subs	r2, r3, #1
 8013eee:	6022      	str	r2, [r4, #0]
 8013ef0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013ef4:	6863      	ldr	r3, [r4, #4]
 8013ef6:	3301      	adds	r3, #1
 8013ef8:	6063      	str	r3, [r4, #4]
 8013efa:	e7e9      	b.n	8013ed0 <_sungetc_r+0xc>
 8013efc:	4621      	mov	r1, r4
 8013efe:	f000 fbe0 	bl	80146c2 <__submore>
 8013f02:	2800      	cmp	r0, #0
 8013f04:	d0f1      	beq.n	8013eea <_sungetc_r+0x26>
 8013f06:	e7e1      	b.n	8013ecc <_sungetc_r+0x8>
 8013f08:	6921      	ldr	r1, [r4, #16]
 8013f0a:	6822      	ldr	r2, [r4, #0]
 8013f0c:	b141      	cbz	r1, 8013f20 <_sungetc_r+0x5c>
 8013f0e:	4291      	cmp	r1, r2
 8013f10:	d206      	bcs.n	8013f20 <_sungetc_r+0x5c>
 8013f12:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8013f16:	42a9      	cmp	r1, r5
 8013f18:	d102      	bne.n	8013f20 <_sungetc_r+0x5c>
 8013f1a:	3a01      	subs	r2, #1
 8013f1c:	6022      	str	r2, [r4, #0]
 8013f1e:	e7ea      	b.n	8013ef6 <_sungetc_r+0x32>
 8013f20:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8013f24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013f28:	6363      	str	r3, [r4, #52]	@ 0x34
 8013f2a:	2303      	movs	r3, #3
 8013f2c:	63a3      	str	r3, [r4, #56]	@ 0x38
 8013f2e:	4623      	mov	r3, r4
 8013f30:	f803 5f46 	strb.w	r5, [r3, #70]!
 8013f34:	6023      	str	r3, [r4, #0]
 8013f36:	2301      	movs	r3, #1
 8013f38:	e7de      	b.n	8013ef8 <_sungetc_r+0x34>

08013f3a <__ssrefill_r>:
 8013f3a:	b510      	push	{r4, lr}
 8013f3c:	460c      	mov	r4, r1
 8013f3e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8013f40:	b169      	cbz	r1, 8013f5e <__ssrefill_r+0x24>
 8013f42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013f46:	4299      	cmp	r1, r3
 8013f48:	d001      	beq.n	8013f4e <__ssrefill_r+0x14>
 8013f4a:	f7fe fa2d 	bl	80123a8 <_free_r>
 8013f4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013f50:	6063      	str	r3, [r4, #4]
 8013f52:	2000      	movs	r0, #0
 8013f54:	6360      	str	r0, [r4, #52]	@ 0x34
 8013f56:	b113      	cbz	r3, 8013f5e <__ssrefill_r+0x24>
 8013f58:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8013f5a:	6023      	str	r3, [r4, #0]
 8013f5c:	bd10      	pop	{r4, pc}
 8013f5e:	6923      	ldr	r3, [r4, #16]
 8013f60:	6023      	str	r3, [r4, #0]
 8013f62:	2300      	movs	r3, #0
 8013f64:	6063      	str	r3, [r4, #4]
 8013f66:	89a3      	ldrh	r3, [r4, #12]
 8013f68:	f043 0320 	orr.w	r3, r3, #32
 8013f6c:	81a3      	strh	r3, [r4, #12]
 8013f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8013f72:	e7f3      	b.n	8013f5c <__ssrefill_r+0x22>

08013f74 <__ssvfiscanf_r>:
 8013f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f78:	460c      	mov	r4, r1
 8013f7a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8013f7e:	2100      	movs	r1, #0
 8013f80:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8013f84:	49a5      	ldr	r1, [pc, #660]	@ (801421c <__ssvfiscanf_r+0x2a8>)
 8013f86:	91a0      	str	r1, [sp, #640]	@ 0x280
 8013f88:	f10d 0804 	add.w	r8, sp, #4
 8013f8c:	49a4      	ldr	r1, [pc, #656]	@ (8014220 <__ssvfiscanf_r+0x2ac>)
 8013f8e:	4fa5      	ldr	r7, [pc, #660]	@ (8014224 <__ssvfiscanf_r+0x2b0>)
 8013f90:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8013f94:	4606      	mov	r6, r0
 8013f96:	91a1      	str	r1, [sp, #644]	@ 0x284
 8013f98:	9300      	str	r3, [sp, #0]
 8013f9a:	7813      	ldrb	r3, [r2, #0]
 8013f9c:	2b00      	cmp	r3, #0
 8013f9e:	f000 8158 	beq.w	8014252 <__ssvfiscanf_r+0x2de>
 8013fa2:	5cf9      	ldrb	r1, [r7, r3]
 8013fa4:	f011 0108 	ands.w	r1, r1, #8
 8013fa8:	f102 0501 	add.w	r5, r2, #1
 8013fac:	d019      	beq.n	8013fe2 <__ssvfiscanf_r+0x6e>
 8013fae:	6863      	ldr	r3, [r4, #4]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	dd0f      	ble.n	8013fd4 <__ssvfiscanf_r+0x60>
 8013fb4:	6823      	ldr	r3, [r4, #0]
 8013fb6:	781a      	ldrb	r2, [r3, #0]
 8013fb8:	5cba      	ldrb	r2, [r7, r2]
 8013fba:	0712      	lsls	r2, r2, #28
 8013fbc:	d401      	bmi.n	8013fc2 <__ssvfiscanf_r+0x4e>
 8013fbe:	462a      	mov	r2, r5
 8013fc0:	e7eb      	b.n	8013f9a <__ssvfiscanf_r+0x26>
 8013fc2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8013fc4:	3201      	adds	r2, #1
 8013fc6:	9245      	str	r2, [sp, #276]	@ 0x114
 8013fc8:	6862      	ldr	r2, [r4, #4]
 8013fca:	3301      	adds	r3, #1
 8013fcc:	3a01      	subs	r2, #1
 8013fce:	6062      	str	r2, [r4, #4]
 8013fd0:	6023      	str	r3, [r4, #0]
 8013fd2:	e7ec      	b.n	8013fae <__ssvfiscanf_r+0x3a>
 8013fd4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8013fd6:	4621      	mov	r1, r4
 8013fd8:	4630      	mov	r0, r6
 8013fda:	4798      	blx	r3
 8013fdc:	2800      	cmp	r0, #0
 8013fde:	d0e9      	beq.n	8013fb4 <__ssvfiscanf_r+0x40>
 8013fe0:	e7ed      	b.n	8013fbe <__ssvfiscanf_r+0x4a>
 8013fe2:	2b25      	cmp	r3, #37	@ 0x25
 8013fe4:	d012      	beq.n	801400c <__ssvfiscanf_r+0x98>
 8013fe6:	4699      	mov	r9, r3
 8013fe8:	6863      	ldr	r3, [r4, #4]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	f340 8093 	ble.w	8014116 <__ssvfiscanf_r+0x1a2>
 8013ff0:	6822      	ldr	r2, [r4, #0]
 8013ff2:	7813      	ldrb	r3, [r2, #0]
 8013ff4:	454b      	cmp	r3, r9
 8013ff6:	f040 812c 	bne.w	8014252 <__ssvfiscanf_r+0x2de>
 8013ffa:	6863      	ldr	r3, [r4, #4]
 8013ffc:	3b01      	subs	r3, #1
 8013ffe:	6063      	str	r3, [r4, #4]
 8014000:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8014002:	3201      	adds	r2, #1
 8014004:	3301      	adds	r3, #1
 8014006:	6022      	str	r2, [r4, #0]
 8014008:	9345      	str	r3, [sp, #276]	@ 0x114
 801400a:	e7d8      	b.n	8013fbe <__ssvfiscanf_r+0x4a>
 801400c:	9141      	str	r1, [sp, #260]	@ 0x104
 801400e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014010:	7853      	ldrb	r3, [r2, #1]
 8014012:	2b2a      	cmp	r3, #42	@ 0x2a
 8014014:	bf02      	ittt	eq
 8014016:	2310      	moveq	r3, #16
 8014018:	1c95      	addeq	r5, r2, #2
 801401a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801401c:	220a      	movs	r2, #10
 801401e:	46a9      	mov	r9, r5
 8014020:	f819 1b01 	ldrb.w	r1, [r9], #1
 8014024:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8014028:	2b09      	cmp	r3, #9
 801402a:	d91e      	bls.n	801406a <__ssvfiscanf_r+0xf6>
 801402c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8014228 <__ssvfiscanf_r+0x2b4>
 8014030:	2203      	movs	r2, #3
 8014032:	4650      	mov	r0, sl
 8014034:	f7ec f8f4 	bl	8000220 <memchr>
 8014038:	b138      	cbz	r0, 801404a <__ssvfiscanf_r+0xd6>
 801403a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801403c:	eba0 000a 	sub.w	r0, r0, sl
 8014040:	2301      	movs	r3, #1
 8014042:	4083      	lsls	r3, r0
 8014044:	4313      	orrs	r3, r2
 8014046:	9341      	str	r3, [sp, #260]	@ 0x104
 8014048:	464d      	mov	r5, r9
 801404a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801404e:	2b78      	cmp	r3, #120	@ 0x78
 8014050:	d806      	bhi.n	8014060 <__ssvfiscanf_r+0xec>
 8014052:	2b57      	cmp	r3, #87	@ 0x57
 8014054:	d810      	bhi.n	8014078 <__ssvfiscanf_r+0x104>
 8014056:	2b25      	cmp	r3, #37	@ 0x25
 8014058:	d0c5      	beq.n	8013fe6 <__ssvfiscanf_r+0x72>
 801405a:	d857      	bhi.n	801410c <__ssvfiscanf_r+0x198>
 801405c:	2b00      	cmp	r3, #0
 801405e:	d065      	beq.n	801412c <__ssvfiscanf_r+0x1b8>
 8014060:	2303      	movs	r3, #3
 8014062:	9347      	str	r3, [sp, #284]	@ 0x11c
 8014064:	230a      	movs	r3, #10
 8014066:	9342      	str	r3, [sp, #264]	@ 0x108
 8014068:	e078      	b.n	801415c <__ssvfiscanf_r+0x1e8>
 801406a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801406c:	fb02 1103 	mla	r1, r2, r3, r1
 8014070:	3930      	subs	r1, #48	@ 0x30
 8014072:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014074:	464d      	mov	r5, r9
 8014076:	e7d2      	b.n	801401e <__ssvfiscanf_r+0xaa>
 8014078:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801407c:	2a20      	cmp	r2, #32
 801407e:	d8ef      	bhi.n	8014060 <__ssvfiscanf_r+0xec>
 8014080:	a101      	add	r1, pc, #4	@ (adr r1, 8014088 <__ssvfiscanf_r+0x114>)
 8014082:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014086:	bf00      	nop
 8014088:	0801413b 	.word	0x0801413b
 801408c:	08014061 	.word	0x08014061
 8014090:	08014061 	.word	0x08014061
 8014094:	08014195 	.word	0x08014195
 8014098:	08014061 	.word	0x08014061
 801409c:	08014061 	.word	0x08014061
 80140a0:	08014061 	.word	0x08014061
 80140a4:	08014061 	.word	0x08014061
 80140a8:	08014061 	.word	0x08014061
 80140ac:	08014061 	.word	0x08014061
 80140b0:	08014061 	.word	0x08014061
 80140b4:	080141ab 	.word	0x080141ab
 80140b8:	08014191 	.word	0x08014191
 80140bc:	08014113 	.word	0x08014113
 80140c0:	08014113 	.word	0x08014113
 80140c4:	08014113 	.word	0x08014113
 80140c8:	08014061 	.word	0x08014061
 80140cc:	0801414d 	.word	0x0801414d
 80140d0:	08014061 	.word	0x08014061
 80140d4:	08014061 	.word	0x08014061
 80140d8:	08014061 	.word	0x08014061
 80140dc:	08014061 	.word	0x08014061
 80140e0:	080141bb 	.word	0x080141bb
 80140e4:	08014155 	.word	0x08014155
 80140e8:	08014133 	.word	0x08014133
 80140ec:	08014061 	.word	0x08014061
 80140f0:	08014061 	.word	0x08014061
 80140f4:	080141b7 	.word	0x080141b7
 80140f8:	08014061 	.word	0x08014061
 80140fc:	08014191 	.word	0x08014191
 8014100:	08014061 	.word	0x08014061
 8014104:	08014061 	.word	0x08014061
 8014108:	0801413b 	.word	0x0801413b
 801410c:	3b45      	subs	r3, #69	@ 0x45
 801410e:	2b02      	cmp	r3, #2
 8014110:	d8a6      	bhi.n	8014060 <__ssvfiscanf_r+0xec>
 8014112:	2305      	movs	r3, #5
 8014114:	e021      	b.n	801415a <__ssvfiscanf_r+0x1e6>
 8014116:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014118:	4621      	mov	r1, r4
 801411a:	4630      	mov	r0, r6
 801411c:	4798      	blx	r3
 801411e:	2800      	cmp	r0, #0
 8014120:	f43f af66 	beq.w	8013ff0 <__ssvfiscanf_r+0x7c>
 8014124:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014126:	2800      	cmp	r0, #0
 8014128:	f040 808b 	bne.w	8014242 <__ssvfiscanf_r+0x2ce>
 801412c:	f04f 30ff 	mov.w	r0, #4294967295
 8014130:	e08b      	b.n	801424a <__ssvfiscanf_r+0x2d6>
 8014132:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014134:	f042 0220 	orr.w	r2, r2, #32
 8014138:	9241      	str	r2, [sp, #260]	@ 0x104
 801413a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801413c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014140:	9241      	str	r2, [sp, #260]	@ 0x104
 8014142:	2210      	movs	r2, #16
 8014144:	2b6e      	cmp	r3, #110	@ 0x6e
 8014146:	9242      	str	r2, [sp, #264]	@ 0x108
 8014148:	d902      	bls.n	8014150 <__ssvfiscanf_r+0x1dc>
 801414a:	e005      	b.n	8014158 <__ssvfiscanf_r+0x1e4>
 801414c:	2300      	movs	r3, #0
 801414e:	9342      	str	r3, [sp, #264]	@ 0x108
 8014150:	2303      	movs	r3, #3
 8014152:	e002      	b.n	801415a <__ssvfiscanf_r+0x1e6>
 8014154:	2308      	movs	r3, #8
 8014156:	9342      	str	r3, [sp, #264]	@ 0x108
 8014158:	2304      	movs	r3, #4
 801415a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801415c:	6863      	ldr	r3, [r4, #4]
 801415e:	2b00      	cmp	r3, #0
 8014160:	dd39      	ble.n	80141d6 <__ssvfiscanf_r+0x262>
 8014162:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014164:	0659      	lsls	r1, r3, #25
 8014166:	d404      	bmi.n	8014172 <__ssvfiscanf_r+0x1fe>
 8014168:	6823      	ldr	r3, [r4, #0]
 801416a:	781a      	ldrb	r2, [r3, #0]
 801416c:	5cba      	ldrb	r2, [r7, r2]
 801416e:	0712      	lsls	r2, r2, #28
 8014170:	d438      	bmi.n	80141e4 <__ssvfiscanf_r+0x270>
 8014172:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8014174:	2b02      	cmp	r3, #2
 8014176:	dc47      	bgt.n	8014208 <__ssvfiscanf_r+0x294>
 8014178:	466b      	mov	r3, sp
 801417a:	4622      	mov	r2, r4
 801417c:	a941      	add	r1, sp, #260	@ 0x104
 801417e:	4630      	mov	r0, r6
 8014180:	f000 f86c 	bl	801425c <_scanf_chars>
 8014184:	2801      	cmp	r0, #1
 8014186:	d064      	beq.n	8014252 <__ssvfiscanf_r+0x2de>
 8014188:	2802      	cmp	r0, #2
 801418a:	f47f af18 	bne.w	8013fbe <__ssvfiscanf_r+0x4a>
 801418e:	e7c9      	b.n	8014124 <__ssvfiscanf_r+0x1b0>
 8014190:	220a      	movs	r2, #10
 8014192:	e7d7      	b.n	8014144 <__ssvfiscanf_r+0x1d0>
 8014194:	4629      	mov	r1, r5
 8014196:	4640      	mov	r0, r8
 8014198:	f000 fa5a 	bl	8014650 <__sccl>
 801419c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801419e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141a2:	9341      	str	r3, [sp, #260]	@ 0x104
 80141a4:	4605      	mov	r5, r0
 80141a6:	2301      	movs	r3, #1
 80141a8:	e7d7      	b.n	801415a <__ssvfiscanf_r+0x1e6>
 80141aa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80141ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141b0:	9341      	str	r3, [sp, #260]	@ 0x104
 80141b2:	2300      	movs	r3, #0
 80141b4:	e7d1      	b.n	801415a <__ssvfiscanf_r+0x1e6>
 80141b6:	2302      	movs	r3, #2
 80141b8:	e7cf      	b.n	801415a <__ssvfiscanf_r+0x1e6>
 80141ba:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80141bc:	06c3      	lsls	r3, r0, #27
 80141be:	f53f aefe 	bmi.w	8013fbe <__ssvfiscanf_r+0x4a>
 80141c2:	9b00      	ldr	r3, [sp, #0]
 80141c4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80141c6:	1d19      	adds	r1, r3, #4
 80141c8:	9100      	str	r1, [sp, #0]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	07c0      	lsls	r0, r0, #31
 80141ce:	bf4c      	ite	mi
 80141d0:	801a      	strhmi	r2, [r3, #0]
 80141d2:	601a      	strpl	r2, [r3, #0]
 80141d4:	e6f3      	b.n	8013fbe <__ssvfiscanf_r+0x4a>
 80141d6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80141d8:	4621      	mov	r1, r4
 80141da:	4630      	mov	r0, r6
 80141dc:	4798      	blx	r3
 80141de:	2800      	cmp	r0, #0
 80141e0:	d0bf      	beq.n	8014162 <__ssvfiscanf_r+0x1ee>
 80141e2:	e79f      	b.n	8014124 <__ssvfiscanf_r+0x1b0>
 80141e4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80141e6:	3201      	adds	r2, #1
 80141e8:	9245      	str	r2, [sp, #276]	@ 0x114
 80141ea:	6862      	ldr	r2, [r4, #4]
 80141ec:	3a01      	subs	r2, #1
 80141ee:	2a00      	cmp	r2, #0
 80141f0:	6062      	str	r2, [r4, #4]
 80141f2:	dd02      	ble.n	80141fa <__ssvfiscanf_r+0x286>
 80141f4:	3301      	adds	r3, #1
 80141f6:	6023      	str	r3, [r4, #0]
 80141f8:	e7b6      	b.n	8014168 <__ssvfiscanf_r+0x1f4>
 80141fa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80141fc:	4621      	mov	r1, r4
 80141fe:	4630      	mov	r0, r6
 8014200:	4798      	blx	r3
 8014202:	2800      	cmp	r0, #0
 8014204:	d0b0      	beq.n	8014168 <__ssvfiscanf_r+0x1f4>
 8014206:	e78d      	b.n	8014124 <__ssvfiscanf_r+0x1b0>
 8014208:	2b04      	cmp	r3, #4
 801420a:	dc0f      	bgt.n	801422c <__ssvfiscanf_r+0x2b8>
 801420c:	466b      	mov	r3, sp
 801420e:	4622      	mov	r2, r4
 8014210:	a941      	add	r1, sp, #260	@ 0x104
 8014212:	4630      	mov	r0, r6
 8014214:	f000 f87c 	bl	8014310 <_scanf_i>
 8014218:	e7b4      	b.n	8014184 <__ssvfiscanf_r+0x210>
 801421a:	bf00      	nop
 801421c:	08013ec5 	.word	0x08013ec5
 8014220:	08013f3b 	.word	0x08013f3b
 8014224:	08016fe9 	.word	0x08016fe9
 8014228:	080170ef 	.word	0x080170ef
 801422c:	4b0a      	ldr	r3, [pc, #40]	@ (8014258 <__ssvfiscanf_r+0x2e4>)
 801422e:	2b00      	cmp	r3, #0
 8014230:	f43f aec5 	beq.w	8013fbe <__ssvfiscanf_r+0x4a>
 8014234:	466b      	mov	r3, sp
 8014236:	4622      	mov	r2, r4
 8014238:	a941      	add	r1, sp, #260	@ 0x104
 801423a:	4630      	mov	r0, r6
 801423c:	f7fc fe5a 	bl	8010ef4 <_scanf_float>
 8014240:	e7a0      	b.n	8014184 <__ssvfiscanf_r+0x210>
 8014242:	89a3      	ldrh	r3, [r4, #12]
 8014244:	065b      	lsls	r3, r3, #25
 8014246:	f53f af71 	bmi.w	801412c <__ssvfiscanf_r+0x1b8>
 801424a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801424e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014252:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014254:	e7f9      	b.n	801424a <__ssvfiscanf_r+0x2d6>
 8014256:	bf00      	nop
 8014258:	08010ef5 	.word	0x08010ef5

0801425c <_scanf_chars>:
 801425c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014260:	4615      	mov	r5, r2
 8014262:	688a      	ldr	r2, [r1, #8]
 8014264:	4680      	mov	r8, r0
 8014266:	460c      	mov	r4, r1
 8014268:	b932      	cbnz	r2, 8014278 <_scanf_chars+0x1c>
 801426a:	698a      	ldr	r2, [r1, #24]
 801426c:	2a00      	cmp	r2, #0
 801426e:	bf14      	ite	ne
 8014270:	f04f 32ff 	movne.w	r2, #4294967295
 8014274:	2201      	moveq	r2, #1
 8014276:	608a      	str	r2, [r1, #8]
 8014278:	6822      	ldr	r2, [r4, #0]
 801427a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801430c <_scanf_chars+0xb0>
 801427e:	06d1      	lsls	r1, r2, #27
 8014280:	bf5f      	itttt	pl
 8014282:	681a      	ldrpl	r2, [r3, #0]
 8014284:	1d11      	addpl	r1, r2, #4
 8014286:	6019      	strpl	r1, [r3, #0]
 8014288:	6816      	ldrpl	r6, [r2, #0]
 801428a:	2700      	movs	r7, #0
 801428c:	69a0      	ldr	r0, [r4, #24]
 801428e:	b188      	cbz	r0, 80142b4 <_scanf_chars+0x58>
 8014290:	2801      	cmp	r0, #1
 8014292:	d107      	bne.n	80142a4 <_scanf_chars+0x48>
 8014294:	682b      	ldr	r3, [r5, #0]
 8014296:	781a      	ldrb	r2, [r3, #0]
 8014298:	6963      	ldr	r3, [r4, #20]
 801429a:	5c9b      	ldrb	r3, [r3, r2]
 801429c:	b953      	cbnz	r3, 80142b4 <_scanf_chars+0x58>
 801429e:	2f00      	cmp	r7, #0
 80142a0:	d031      	beq.n	8014306 <_scanf_chars+0xaa>
 80142a2:	e022      	b.n	80142ea <_scanf_chars+0x8e>
 80142a4:	2802      	cmp	r0, #2
 80142a6:	d120      	bne.n	80142ea <_scanf_chars+0x8e>
 80142a8:	682b      	ldr	r3, [r5, #0]
 80142aa:	781b      	ldrb	r3, [r3, #0]
 80142ac:	f819 3003 	ldrb.w	r3, [r9, r3]
 80142b0:	071b      	lsls	r3, r3, #28
 80142b2:	d41a      	bmi.n	80142ea <_scanf_chars+0x8e>
 80142b4:	6823      	ldr	r3, [r4, #0]
 80142b6:	06da      	lsls	r2, r3, #27
 80142b8:	bf5e      	ittt	pl
 80142ba:	682b      	ldrpl	r3, [r5, #0]
 80142bc:	781b      	ldrbpl	r3, [r3, #0]
 80142be:	f806 3b01 	strbpl.w	r3, [r6], #1
 80142c2:	682a      	ldr	r2, [r5, #0]
 80142c4:	686b      	ldr	r3, [r5, #4]
 80142c6:	3201      	adds	r2, #1
 80142c8:	602a      	str	r2, [r5, #0]
 80142ca:	68a2      	ldr	r2, [r4, #8]
 80142cc:	3b01      	subs	r3, #1
 80142ce:	3a01      	subs	r2, #1
 80142d0:	606b      	str	r3, [r5, #4]
 80142d2:	3701      	adds	r7, #1
 80142d4:	60a2      	str	r2, [r4, #8]
 80142d6:	b142      	cbz	r2, 80142ea <_scanf_chars+0x8e>
 80142d8:	2b00      	cmp	r3, #0
 80142da:	dcd7      	bgt.n	801428c <_scanf_chars+0x30>
 80142dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80142e0:	4629      	mov	r1, r5
 80142e2:	4640      	mov	r0, r8
 80142e4:	4798      	blx	r3
 80142e6:	2800      	cmp	r0, #0
 80142e8:	d0d0      	beq.n	801428c <_scanf_chars+0x30>
 80142ea:	6823      	ldr	r3, [r4, #0]
 80142ec:	f013 0310 	ands.w	r3, r3, #16
 80142f0:	d105      	bne.n	80142fe <_scanf_chars+0xa2>
 80142f2:	68e2      	ldr	r2, [r4, #12]
 80142f4:	3201      	adds	r2, #1
 80142f6:	60e2      	str	r2, [r4, #12]
 80142f8:	69a2      	ldr	r2, [r4, #24]
 80142fa:	b102      	cbz	r2, 80142fe <_scanf_chars+0xa2>
 80142fc:	7033      	strb	r3, [r6, #0]
 80142fe:	6923      	ldr	r3, [r4, #16]
 8014300:	443b      	add	r3, r7
 8014302:	6123      	str	r3, [r4, #16]
 8014304:	2000      	movs	r0, #0
 8014306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801430a:	bf00      	nop
 801430c:	08016fe9 	.word	0x08016fe9

08014310 <_scanf_i>:
 8014310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014314:	4698      	mov	r8, r3
 8014316:	4b74      	ldr	r3, [pc, #464]	@ (80144e8 <_scanf_i+0x1d8>)
 8014318:	460c      	mov	r4, r1
 801431a:	4682      	mov	sl, r0
 801431c:	4616      	mov	r6, r2
 801431e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014322:	b087      	sub	sp, #28
 8014324:	ab03      	add	r3, sp, #12
 8014326:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801432a:	4b70      	ldr	r3, [pc, #448]	@ (80144ec <_scanf_i+0x1dc>)
 801432c:	69a1      	ldr	r1, [r4, #24]
 801432e:	4a70      	ldr	r2, [pc, #448]	@ (80144f0 <_scanf_i+0x1e0>)
 8014330:	2903      	cmp	r1, #3
 8014332:	bf08      	it	eq
 8014334:	461a      	moveq	r2, r3
 8014336:	68a3      	ldr	r3, [r4, #8]
 8014338:	9201      	str	r2, [sp, #4]
 801433a:	1e5a      	subs	r2, r3, #1
 801433c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014340:	bf88      	it	hi
 8014342:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014346:	4627      	mov	r7, r4
 8014348:	bf82      	ittt	hi
 801434a:	eb03 0905 	addhi.w	r9, r3, r5
 801434e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014352:	60a3      	strhi	r3, [r4, #8]
 8014354:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014358:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801435c:	bf98      	it	ls
 801435e:	f04f 0900 	movls.w	r9, #0
 8014362:	6023      	str	r3, [r4, #0]
 8014364:	463d      	mov	r5, r7
 8014366:	f04f 0b00 	mov.w	fp, #0
 801436a:	6831      	ldr	r1, [r6, #0]
 801436c:	ab03      	add	r3, sp, #12
 801436e:	7809      	ldrb	r1, [r1, #0]
 8014370:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014374:	2202      	movs	r2, #2
 8014376:	f7eb ff53 	bl	8000220 <memchr>
 801437a:	b328      	cbz	r0, 80143c8 <_scanf_i+0xb8>
 801437c:	f1bb 0f01 	cmp.w	fp, #1
 8014380:	d159      	bne.n	8014436 <_scanf_i+0x126>
 8014382:	6862      	ldr	r2, [r4, #4]
 8014384:	b92a      	cbnz	r2, 8014392 <_scanf_i+0x82>
 8014386:	6822      	ldr	r2, [r4, #0]
 8014388:	2108      	movs	r1, #8
 801438a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801438e:	6061      	str	r1, [r4, #4]
 8014390:	6022      	str	r2, [r4, #0]
 8014392:	6822      	ldr	r2, [r4, #0]
 8014394:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8014398:	6022      	str	r2, [r4, #0]
 801439a:	68a2      	ldr	r2, [r4, #8]
 801439c:	1e51      	subs	r1, r2, #1
 801439e:	60a1      	str	r1, [r4, #8]
 80143a0:	b192      	cbz	r2, 80143c8 <_scanf_i+0xb8>
 80143a2:	6832      	ldr	r2, [r6, #0]
 80143a4:	1c51      	adds	r1, r2, #1
 80143a6:	6031      	str	r1, [r6, #0]
 80143a8:	7812      	ldrb	r2, [r2, #0]
 80143aa:	f805 2b01 	strb.w	r2, [r5], #1
 80143ae:	6872      	ldr	r2, [r6, #4]
 80143b0:	3a01      	subs	r2, #1
 80143b2:	2a00      	cmp	r2, #0
 80143b4:	6072      	str	r2, [r6, #4]
 80143b6:	dc07      	bgt.n	80143c8 <_scanf_i+0xb8>
 80143b8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80143bc:	4631      	mov	r1, r6
 80143be:	4650      	mov	r0, sl
 80143c0:	4790      	blx	r2
 80143c2:	2800      	cmp	r0, #0
 80143c4:	f040 8085 	bne.w	80144d2 <_scanf_i+0x1c2>
 80143c8:	f10b 0b01 	add.w	fp, fp, #1
 80143cc:	f1bb 0f03 	cmp.w	fp, #3
 80143d0:	d1cb      	bne.n	801436a <_scanf_i+0x5a>
 80143d2:	6863      	ldr	r3, [r4, #4]
 80143d4:	b90b      	cbnz	r3, 80143da <_scanf_i+0xca>
 80143d6:	230a      	movs	r3, #10
 80143d8:	6063      	str	r3, [r4, #4]
 80143da:	6863      	ldr	r3, [r4, #4]
 80143dc:	4945      	ldr	r1, [pc, #276]	@ (80144f4 <_scanf_i+0x1e4>)
 80143de:	6960      	ldr	r0, [r4, #20]
 80143e0:	1ac9      	subs	r1, r1, r3
 80143e2:	f000 f935 	bl	8014650 <__sccl>
 80143e6:	f04f 0b00 	mov.w	fp, #0
 80143ea:	68a3      	ldr	r3, [r4, #8]
 80143ec:	6822      	ldr	r2, [r4, #0]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d03d      	beq.n	801446e <_scanf_i+0x15e>
 80143f2:	6831      	ldr	r1, [r6, #0]
 80143f4:	6960      	ldr	r0, [r4, #20]
 80143f6:	f891 c000 	ldrb.w	ip, [r1]
 80143fa:	f810 000c 	ldrb.w	r0, [r0, ip]
 80143fe:	2800      	cmp	r0, #0
 8014400:	d035      	beq.n	801446e <_scanf_i+0x15e>
 8014402:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8014406:	d124      	bne.n	8014452 <_scanf_i+0x142>
 8014408:	0510      	lsls	r0, r2, #20
 801440a:	d522      	bpl.n	8014452 <_scanf_i+0x142>
 801440c:	f10b 0b01 	add.w	fp, fp, #1
 8014410:	f1b9 0f00 	cmp.w	r9, #0
 8014414:	d003      	beq.n	801441e <_scanf_i+0x10e>
 8014416:	3301      	adds	r3, #1
 8014418:	f109 39ff 	add.w	r9, r9, #4294967295
 801441c:	60a3      	str	r3, [r4, #8]
 801441e:	6873      	ldr	r3, [r6, #4]
 8014420:	3b01      	subs	r3, #1
 8014422:	2b00      	cmp	r3, #0
 8014424:	6073      	str	r3, [r6, #4]
 8014426:	dd1b      	ble.n	8014460 <_scanf_i+0x150>
 8014428:	6833      	ldr	r3, [r6, #0]
 801442a:	3301      	adds	r3, #1
 801442c:	6033      	str	r3, [r6, #0]
 801442e:	68a3      	ldr	r3, [r4, #8]
 8014430:	3b01      	subs	r3, #1
 8014432:	60a3      	str	r3, [r4, #8]
 8014434:	e7d9      	b.n	80143ea <_scanf_i+0xda>
 8014436:	f1bb 0f02 	cmp.w	fp, #2
 801443a:	d1ae      	bne.n	801439a <_scanf_i+0x8a>
 801443c:	6822      	ldr	r2, [r4, #0]
 801443e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8014442:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8014446:	d1bf      	bne.n	80143c8 <_scanf_i+0xb8>
 8014448:	2110      	movs	r1, #16
 801444a:	6061      	str	r1, [r4, #4]
 801444c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014450:	e7a2      	b.n	8014398 <_scanf_i+0x88>
 8014452:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8014456:	6022      	str	r2, [r4, #0]
 8014458:	780b      	ldrb	r3, [r1, #0]
 801445a:	f805 3b01 	strb.w	r3, [r5], #1
 801445e:	e7de      	b.n	801441e <_scanf_i+0x10e>
 8014460:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014464:	4631      	mov	r1, r6
 8014466:	4650      	mov	r0, sl
 8014468:	4798      	blx	r3
 801446a:	2800      	cmp	r0, #0
 801446c:	d0df      	beq.n	801442e <_scanf_i+0x11e>
 801446e:	6823      	ldr	r3, [r4, #0]
 8014470:	05d9      	lsls	r1, r3, #23
 8014472:	d50d      	bpl.n	8014490 <_scanf_i+0x180>
 8014474:	42bd      	cmp	r5, r7
 8014476:	d909      	bls.n	801448c <_scanf_i+0x17c>
 8014478:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801447c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014480:	4632      	mov	r2, r6
 8014482:	4650      	mov	r0, sl
 8014484:	4798      	blx	r3
 8014486:	f105 39ff 	add.w	r9, r5, #4294967295
 801448a:	464d      	mov	r5, r9
 801448c:	42bd      	cmp	r5, r7
 801448e:	d028      	beq.n	80144e2 <_scanf_i+0x1d2>
 8014490:	6822      	ldr	r2, [r4, #0]
 8014492:	f012 0210 	ands.w	r2, r2, #16
 8014496:	d113      	bne.n	80144c0 <_scanf_i+0x1b0>
 8014498:	702a      	strb	r2, [r5, #0]
 801449a:	6863      	ldr	r3, [r4, #4]
 801449c:	9e01      	ldr	r6, [sp, #4]
 801449e:	4639      	mov	r1, r7
 80144a0:	4650      	mov	r0, sl
 80144a2:	47b0      	blx	r6
 80144a4:	f8d8 3000 	ldr.w	r3, [r8]
 80144a8:	6821      	ldr	r1, [r4, #0]
 80144aa:	1d1a      	adds	r2, r3, #4
 80144ac:	f8c8 2000 	str.w	r2, [r8]
 80144b0:	f011 0f20 	tst.w	r1, #32
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	d00f      	beq.n	80144d8 <_scanf_i+0x1c8>
 80144b8:	6018      	str	r0, [r3, #0]
 80144ba:	68e3      	ldr	r3, [r4, #12]
 80144bc:	3301      	adds	r3, #1
 80144be:	60e3      	str	r3, [r4, #12]
 80144c0:	6923      	ldr	r3, [r4, #16]
 80144c2:	1bed      	subs	r5, r5, r7
 80144c4:	445d      	add	r5, fp
 80144c6:	442b      	add	r3, r5
 80144c8:	6123      	str	r3, [r4, #16]
 80144ca:	2000      	movs	r0, #0
 80144cc:	b007      	add	sp, #28
 80144ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144d2:	f04f 0b00 	mov.w	fp, #0
 80144d6:	e7ca      	b.n	801446e <_scanf_i+0x15e>
 80144d8:	07ca      	lsls	r2, r1, #31
 80144da:	bf4c      	ite	mi
 80144dc:	8018      	strhmi	r0, [r3, #0]
 80144de:	6018      	strpl	r0, [r3, #0]
 80144e0:	e7eb      	b.n	80144ba <_scanf_i+0x1aa>
 80144e2:	2001      	movs	r0, #1
 80144e4:	e7f2      	b.n	80144cc <_scanf_i+0x1bc>
 80144e6:	bf00      	nop
 80144e8:	08016d24 	.word	0x08016d24
 80144ec:	08013c11 	.word	0x08013c11
 80144f0:	08014fd5 	.word	0x08014fd5
 80144f4:	0801710a 	.word	0x0801710a

080144f8 <__sflush_r>:
 80144f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80144fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014500:	0716      	lsls	r6, r2, #28
 8014502:	4605      	mov	r5, r0
 8014504:	460c      	mov	r4, r1
 8014506:	d454      	bmi.n	80145b2 <__sflush_r+0xba>
 8014508:	684b      	ldr	r3, [r1, #4]
 801450a:	2b00      	cmp	r3, #0
 801450c:	dc02      	bgt.n	8014514 <__sflush_r+0x1c>
 801450e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014510:	2b00      	cmp	r3, #0
 8014512:	dd48      	ble.n	80145a6 <__sflush_r+0xae>
 8014514:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014516:	2e00      	cmp	r6, #0
 8014518:	d045      	beq.n	80145a6 <__sflush_r+0xae>
 801451a:	2300      	movs	r3, #0
 801451c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014520:	682f      	ldr	r7, [r5, #0]
 8014522:	6a21      	ldr	r1, [r4, #32]
 8014524:	602b      	str	r3, [r5, #0]
 8014526:	d030      	beq.n	801458a <__sflush_r+0x92>
 8014528:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801452a:	89a3      	ldrh	r3, [r4, #12]
 801452c:	0759      	lsls	r1, r3, #29
 801452e:	d505      	bpl.n	801453c <__sflush_r+0x44>
 8014530:	6863      	ldr	r3, [r4, #4]
 8014532:	1ad2      	subs	r2, r2, r3
 8014534:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014536:	b10b      	cbz	r3, 801453c <__sflush_r+0x44>
 8014538:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801453a:	1ad2      	subs	r2, r2, r3
 801453c:	2300      	movs	r3, #0
 801453e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014540:	6a21      	ldr	r1, [r4, #32]
 8014542:	4628      	mov	r0, r5
 8014544:	47b0      	blx	r6
 8014546:	1c43      	adds	r3, r0, #1
 8014548:	89a3      	ldrh	r3, [r4, #12]
 801454a:	d106      	bne.n	801455a <__sflush_r+0x62>
 801454c:	6829      	ldr	r1, [r5, #0]
 801454e:	291d      	cmp	r1, #29
 8014550:	d82b      	bhi.n	80145aa <__sflush_r+0xb2>
 8014552:	4a2a      	ldr	r2, [pc, #168]	@ (80145fc <__sflush_r+0x104>)
 8014554:	410a      	asrs	r2, r1
 8014556:	07d6      	lsls	r6, r2, #31
 8014558:	d427      	bmi.n	80145aa <__sflush_r+0xb2>
 801455a:	2200      	movs	r2, #0
 801455c:	6062      	str	r2, [r4, #4]
 801455e:	04d9      	lsls	r1, r3, #19
 8014560:	6922      	ldr	r2, [r4, #16]
 8014562:	6022      	str	r2, [r4, #0]
 8014564:	d504      	bpl.n	8014570 <__sflush_r+0x78>
 8014566:	1c42      	adds	r2, r0, #1
 8014568:	d101      	bne.n	801456e <__sflush_r+0x76>
 801456a:	682b      	ldr	r3, [r5, #0]
 801456c:	b903      	cbnz	r3, 8014570 <__sflush_r+0x78>
 801456e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014572:	602f      	str	r7, [r5, #0]
 8014574:	b1b9      	cbz	r1, 80145a6 <__sflush_r+0xae>
 8014576:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801457a:	4299      	cmp	r1, r3
 801457c:	d002      	beq.n	8014584 <__sflush_r+0x8c>
 801457e:	4628      	mov	r0, r5
 8014580:	f7fd ff12 	bl	80123a8 <_free_r>
 8014584:	2300      	movs	r3, #0
 8014586:	6363      	str	r3, [r4, #52]	@ 0x34
 8014588:	e00d      	b.n	80145a6 <__sflush_r+0xae>
 801458a:	2301      	movs	r3, #1
 801458c:	4628      	mov	r0, r5
 801458e:	47b0      	blx	r6
 8014590:	4602      	mov	r2, r0
 8014592:	1c50      	adds	r0, r2, #1
 8014594:	d1c9      	bne.n	801452a <__sflush_r+0x32>
 8014596:	682b      	ldr	r3, [r5, #0]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d0c6      	beq.n	801452a <__sflush_r+0x32>
 801459c:	2b1d      	cmp	r3, #29
 801459e:	d001      	beq.n	80145a4 <__sflush_r+0xac>
 80145a0:	2b16      	cmp	r3, #22
 80145a2:	d11e      	bne.n	80145e2 <__sflush_r+0xea>
 80145a4:	602f      	str	r7, [r5, #0]
 80145a6:	2000      	movs	r0, #0
 80145a8:	e022      	b.n	80145f0 <__sflush_r+0xf8>
 80145aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80145ae:	b21b      	sxth	r3, r3
 80145b0:	e01b      	b.n	80145ea <__sflush_r+0xf2>
 80145b2:	690f      	ldr	r7, [r1, #16]
 80145b4:	2f00      	cmp	r7, #0
 80145b6:	d0f6      	beq.n	80145a6 <__sflush_r+0xae>
 80145b8:	0793      	lsls	r3, r2, #30
 80145ba:	680e      	ldr	r6, [r1, #0]
 80145bc:	bf08      	it	eq
 80145be:	694b      	ldreq	r3, [r1, #20]
 80145c0:	600f      	str	r7, [r1, #0]
 80145c2:	bf18      	it	ne
 80145c4:	2300      	movne	r3, #0
 80145c6:	eba6 0807 	sub.w	r8, r6, r7
 80145ca:	608b      	str	r3, [r1, #8]
 80145cc:	f1b8 0f00 	cmp.w	r8, #0
 80145d0:	dde9      	ble.n	80145a6 <__sflush_r+0xae>
 80145d2:	6a21      	ldr	r1, [r4, #32]
 80145d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80145d6:	4643      	mov	r3, r8
 80145d8:	463a      	mov	r2, r7
 80145da:	4628      	mov	r0, r5
 80145dc:	47b0      	blx	r6
 80145de:	2800      	cmp	r0, #0
 80145e0:	dc08      	bgt.n	80145f4 <__sflush_r+0xfc>
 80145e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80145ea:	81a3      	strh	r3, [r4, #12]
 80145ec:	f04f 30ff 	mov.w	r0, #4294967295
 80145f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145f4:	4407      	add	r7, r0
 80145f6:	eba8 0800 	sub.w	r8, r8, r0
 80145fa:	e7e7      	b.n	80145cc <__sflush_r+0xd4>
 80145fc:	dfbffffe 	.word	0xdfbffffe

08014600 <_fflush_r>:
 8014600:	b538      	push	{r3, r4, r5, lr}
 8014602:	690b      	ldr	r3, [r1, #16]
 8014604:	4605      	mov	r5, r0
 8014606:	460c      	mov	r4, r1
 8014608:	b913      	cbnz	r3, 8014610 <_fflush_r+0x10>
 801460a:	2500      	movs	r5, #0
 801460c:	4628      	mov	r0, r5
 801460e:	bd38      	pop	{r3, r4, r5, pc}
 8014610:	b118      	cbz	r0, 801461a <_fflush_r+0x1a>
 8014612:	6a03      	ldr	r3, [r0, #32]
 8014614:	b90b      	cbnz	r3, 801461a <_fflush_r+0x1a>
 8014616:	f7fc ff0d 	bl	8011434 <__sinit>
 801461a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d0f3      	beq.n	801460a <_fflush_r+0xa>
 8014622:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014624:	07d0      	lsls	r0, r2, #31
 8014626:	d404      	bmi.n	8014632 <_fflush_r+0x32>
 8014628:	0599      	lsls	r1, r3, #22
 801462a:	d402      	bmi.n	8014632 <_fflush_r+0x32>
 801462c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801462e:	f7fd f856 	bl	80116de <__retarget_lock_acquire_recursive>
 8014632:	4628      	mov	r0, r5
 8014634:	4621      	mov	r1, r4
 8014636:	f7ff ff5f 	bl	80144f8 <__sflush_r>
 801463a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801463c:	07da      	lsls	r2, r3, #31
 801463e:	4605      	mov	r5, r0
 8014640:	d4e4      	bmi.n	801460c <_fflush_r+0xc>
 8014642:	89a3      	ldrh	r3, [r4, #12]
 8014644:	059b      	lsls	r3, r3, #22
 8014646:	d4e1      	bmi.n	801460c <_fflush_r+0xc>
 8014648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801464a:	f7fd f849 	bl	80116e0 <__retarget_lock_release_recursive>
 801464e:	e7dd      	b.n	801460c <_fflush_r+0xc>

08014650 <__sccl>:
 8014650:	b570      	push	{r4, r5, r6, lr}
 8014652:	780b      	ldrb	r3, [r1, #0]
 8014654:	4604      	mov	r4, r0
 8014656:	2b5e      	cmp	r3, #94	@ 0x5e
 8014658:	bf0b      	itete	eq
 801465a:	784b      	ldrbeq	r3, [r1, #1]
 801465c:	1c4a      	addne	r2, r1, #1
 801465e:	1c8a      	addeq	r2, r1, #2
 8014660:	2100      	movne	r1, #0
 8014662:	bf08      	it	eq
 8014664:	2101      	moveq	r1, #1
 8014666:	3801      	subs	r0, #1
 8014668:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801466c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014670:	42a8      	cmp	r0, r5
 8014672:	d1fb      	bne.n	801466c <__sccl+0x1c>
 8014674:	b90b      	cbnz	r3, 801467a <__sccl+0x2a>
 8014676:	1e50      	subs	r0, r2, #1
 8014678:	bd70      	pop	{r4, r5, r6, pc}
 801467a:	f081 0101 	eor.w	r1, r1, #1
 801467e:	54e1      	strb	r1, [r4, r3]
 8014680:	4610      	mov	r0, r2
 8014682:	4602      	mov	r2, r0
 8014684:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014688:	2d2d      	cmp	r5, #45	@ 0x2d
 801468a:	d005      	beq.n	8014698 <__sccl+0x48>
 801468c:	2d5d      	cmp	r5, #93	@ 0x5d
 801468e:	d016      	beq.n	80146be <__sccl+0x6e>
 8014690:	2d00      	cmp	r5, #0
 8014692:	d0f1      	beq.n	8014678 <__sccl+0x28>
 8014694:	462b      	mov	r3, r5
 8014696:	e7f2      	b.n	801467e <__sccl+0x2e>
 8014698:	7846      	ldrb	r6, [r0, #1]
 801469a:	2e5d      	cmp	r6, #93	@ 0x5d
 801469c:	d0fa      	beq.n	8014694 <__sccl+0x44>
 801469e:	42b3      	cmp	r3, r6
 80146a0:	dcf8      	bgt.n	8014694 <__sccl+0x44>
 80146a2:	3002      	adds	r0, #2
 80146a4:	461a      	mov	r2, r3
 80146a6:	3201      	adds	r2, #1
 80146a8:	4296      	cmp	r6, r2
 80146aa:	54a1      	strb	r1, [r4, r2]
 80146ac:	dcfb      	bgt.n	80146a6 <__sccl+0x56>
 80146ae:	1af2      	subs	r2, r6, r3
 80146b0:	3a01      	subs	r2, #1
 80146b2:	1c5d      	adds	r5, r3, #1
 80146b4:	42b3      	cmp	r3, r6
 80146b6:	bfa8      	it	ge
 80146b8:	2200      	movge	r2, #0
 80146ba:	18ab      	adds	r3, r5, r2
 80146bc:	e7e1      	b.n	8014682 <__sccl+0x32>
 80146be:	4610      	mov	r0, r2
 80146c0:	e7da      	b.n	8014678 <__sccl+0x28>

080146c2 <__submore>:
 80146c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146c6:	460c      	mov	r4, r1
 80146c8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80146ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80146ce:	4299      	cmp	r1, r3
 80146d0:	d11d      	bne.n	801470e <__submore+0x4c>
 80146d2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80146d6:	f7fd fedb 	bl	8012490 <_malloc_r>
 80146da:	b918      	cbnz	r0, 80146e4 <__submore+0x22>
 80146dc:	f04f 30ff 	mov.w	r0, #4294967295
 80146e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80146e8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80146ea:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80146ee:	6360      	str	r0, [r4, #52]	@ 0x34
 80146f0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80146f4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80146f8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80146fc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014700:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8014704:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8014708:	6020      	str	r0, [r4, #0]
 801470a:	2000      	movs	r0, #0
 801470c:	e7e8      	b.n	80146e0 <__submore+0x1e>
 801470e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8014710:	0077      	lsls	r7, r6, #1
 8014712:	463a      	mov	r2, r7
 8014714:	f000 fbc1 	bl	8014e9a <_realloc_r>
 8014718:	4605      	mov	r5, r0
 801471a:	2800      	cmp	r0, #0
 801471c:	d0de      	beq.n	80146dc <__submore+0x1a>
 801471e:	eb00 0806 	add.w	r8, r0, r6
 8014722:	4601      	mov	r1, r0
 8014724:	4632      	mov	r2, r6
 8014726:	4640      	mov	r0, r8
 8014728:	f7fc ffdb 	bl	80116e2 <memcpy>
 801472c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8014730:	f8c4 8000 	str.w	r8, [r4]
 8014734:	e7e9      	b.n	801470a <__submore+0x48>

08014736 <memmove>:
 8014736:	4288      	cmp	r0, r1
 8014738:	b510      	push	{r4, lr}
 801473a:	eb01 0402 	add.w	r4, r1, r2
 801473e:	d902      	bls.n	8014746 <memmove+0x10>
 8014740:	4284      	cmp	r4, r0
 8014742:	4623      	mov	r3, r4
 8014744:	d807      	bhi.n	8014756 <memmove+0x20>
 8014746:	1e43      	subs	r3, r0, #1
 8014748:	42a1      	cmp	r1, r4
 801474a:	d008      	beq.n	801475e <memmove+0x28>
 801474c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014750:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014754:	e7f8      	b.n	8014748 <memmove+0x12>
 8014756:	4402      	add	r2, r0
 8014758:	4601      	mov	r1, r0
 801475a:	428a      	cmp	r2, r1
 801475c:	d100      	bne.n	8014760 <memmove+0x2a>
 801475e:	bd10      	pop	{r4, pc}
 8014760:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014764:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014768:	e7f7      	b.n	801475a <memmove+0x24>
	...

0801476c <_sbrk_r>:
 801476c:	b538      	push	{r3, r4, r5, lr}
 801476e:	4d06      	ldr	r5, [pc, #24]	@ (8014788 <_sbrk_r+0x1c>)
 8014770:	2300      	movs	r3, #0
 8014772:	4604      	mov	r4, r0
 8014774:	4608      	mov	r0, r1
 8014776:	602b      	str	r3, [r5, #0]
 8014778:	f7ef fbb4 	bl	8003ee4 <_sbrk>
 801477c:	1c43      	adds	r3, r0, #1
 801477e:	d102      	bne.n	8014786 <_sbrk_r+0x1a>
 8014780:	682b      	ldr	r3, [r5, #0]
 8014782:	b103      	cbz	r3, 8014786 <_sbrk_r+0x1a>
 8014784:	6023      	str	r3, [r4, #0]
 8014786:	bd38      	pop	{r3, r4, r5, pc}
 8014788:	20002668 	.word	0x20002668
 801478c:	00000000 	.word	0x00000000

08014790 <nan>:
 8014790:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014798 <nan+0x8>
 8014794:	4770      	bx	lr
 8014796:	bf00      	nop
 8014798:	00000000 	.word	0x00000000
 801479c:	7ff80000 	.word	0x7ff80000

080147a0 <__assert_func>:
 80147a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80147a2:	4614      	mov	r4, r2
 80147a4:	461a      	mov	r2, r3
 80147a6:	4b09      	ldr	r3, [pc, #36]	@ (80147cc <__assert_func+0x2c>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	4605      	mov	r5, r0
 80147ac:	68d8      	ldr	r0, [r3, #12]
 80147ae:	b954      	cbnz	r4, 80147c6 <__assert_func+0x26>
 80147b0:	4b07      	ldr	r3, [pc, #28]	@ (80147d0 <__assert_func+0x30>)
 80147b2:	461c      	mov	r4, r3
 80147b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80147b8:	9100      	str	r1, [sp, #0]
 80147ba:	462b      	mov	r3, r5
 80147bc:	4905      	ldr	r1, [pc, #20]	@ (80147d4 <__assert_func+0x34>)
 80147be:	f000 fc19 	bl	8014ff4 <fiprintf>
 80147c2:	f000 fc29 	bl	8015018 <abort>
 80147c6:	4b04      	ldr	r3, [pc, #16]	@ (80147d8 <__assert_func+0x38>)
 80147c8:	e7f4      	b.n	80147b4 <__assert_func+0x14>
 80147ca:	bf00      	nop
 80147cc:	200001ac 	.word	0x200001ac
 80147d0:	08017158 	.word	0x08017158
 80147d4:	0801712a 	.word	0x0801712a
 80147d8:	0801711d 	.word	0x0801711d

080147dc <_calloc_r>:
 80147dc:	b570      	push	{r4, r5, r6, lr}
 80147de:	fba1 5402 	umull	r5, r4, r1, r2
 80147e2:	b93c      	cbnz	r4, 80147f4 <_calloc_r+0x18>
 80147e4:	4629      	mov	r1, r5
 80147e6:	f7fd fe53 	bl	8012490 <_malloc_r>
 80147ea:	4606      	mov	r6, r0
 80147ec:	b928      	cbnz	r0, 80147fa <_calloc_r+0x1e>
 80147ee:	2600      	movs	r6, #0
 80147f0:	4630      	mov	r0, r6
 80147f2:	bd70      	pop	{r4, r5, r6, pc}
 80147f4:	220c      	movs	r2, #12
 80147f6:	6002      	str	r2, [r0, #0]
 80147f8:	e7f9      	b.n	80147ee <_calloc_r+0x12>
 80147fa:	462a      	mov	r2, r5
 80147fc:	4621      	mov	r1, r4
 80147fe:	f7fc fede 	bl	80115be <memset>
 8014802:	e7f5      	b.n	80147f0 <_calloc_r+0x14>

08014804 <rshift>:
 8014804:	6903      	ldr	r3, [r0, #16]
 8014806:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801480a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801480e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014812:	f100 0414 	add.w	r4, r0, #20
 8014816:	dd45      	ble.n	80148a4 <rshift+0xa0>
 8014818:	f011 011f 	ands.w	r1, r1, #31
 801481c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014820:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014824:	d10c      	bne.n	8014840 <rshift+0x3c>
 8014826:	f100 0710 	add.w	r7, r0, #16
 801482a:	4629      	mov	r1, r5
 801482c:	42b1      	cmp	r1, r6
 801482e:	d334      	bcc.n	801489a <rshift+0x96>
 8014830:	1a9b      	subs	r3, r3, r2
 8014832:	009b      	lsls	r3, r3, #2
 8014834:	1eea      	subs	r2, r5, #3
 8014836:	4296      	cmp	r6, r2
 8014838:	bf38      	it	cc
 801483a:	2300      	movcc	r3, #0
 801483c:	4423      	add	r3, r4
 801483e:	e015      	b.n	801486c <rshift+0x68>
 8014840:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014844:	f1c1 0820 	rsb	r8, r1, #32
 8014848:	40cf      	lsrs	r7, r1
 801484a:	f105 0e04 	add.w	lr, r5, #4
 801484e:	46a1      	mov	r9, r4
 8014850:	4576      	cmp	r6, lr
 8014852:	46f4      	mov	ip, lr
 8014854:	d815      	bhi.n	8014882 <rshift+0x7e>
 8014856:	1a9a      	subs	r2, r3, r2
 8014858:	0092      	lsls	r2, r2, #2
 801485a:	3a04      	subs	r2, #4
 801485c:	3501      	adds	r5, #1
 801485e:	42ae      	cmp	r6, r5
 8014860:	bf38      	it	cc
 8014862:	2200      	movcc	r2, #0
 8014864:	18a3      	adds	r3, r4, r2
 8014866:	50a7      	str	r7, [r4, r2]
 8014868:	b107      	cbz	r7, 801486c <rshift+0x68>
 801486a:	3304      	adds	r3, #4
 801486c:	1b1a      	subs	r2, r3, r4
 801486e:	42a3      	cmp	r3, r4
 8014870:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014874:	bf08      	it	eq
 8014876:	2300      	moveq	r3, #0
 8014878:	6102      	str	r2, [r0, #16]
 801487a:	bf08      	it	eq
 801487c:	6143      	streq	r3, [r0, #20]
 801487e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014882:	f8dc c000 	ldr.w	ip, [ip]
 8014886:	fa0c fc08 	lsl.w	ip, ip, r8
 801488a:	ea4c 0707 	orr.w	r7, ip, r7
 801488e:	f849 7b04 	str.w	r7, [r9], #4
 8014892:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014896:	40cf      	lsrs	r7, r1
 8014898:	e7da      	b.n	8014850 <rshift+0x4c>
 801489a:	f851 cb04 	ldr.w	ip, [r1], #4
 801489e:	f847 cf04 	str.w	ip, [r7, #4]!
 80148a2:	e7c3      	b.n	801482c <rshift+0x28>
 80148a4:	4623      	mov	r3, r4
 80148a6:	e7e1      	b.n	801486c <rshift+0x68>

080148a8 <__hexdig_fun>:
 80148a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80148ac:	2b09      	cmp	r3, #9
 80148ae:	d802      	bhi.n	80148b6 <__hexdig_fun+0xe>
 80148b0:	3820      	subs	r0, #32
 80148b2:	b2c0      	uxtb	r0, r0
 80148b4:	4770      	bx	lr
 80148b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80148ba:	2b05      	cmp	r3, #5
 80148bc:	d801      	bhi.n	80148c2 <__hexdig_fun+0x1a>
 80148be:	3847      	subs	r0, #71	@ 0x47
 80148c0:	e7f7      	b.n	80148b2 <__hexdig_fun+0xa>
 80148c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80148c6:	2b05      	cmp	r3, #5
 80148c8:	d801      	bhi.n	80148ce <__hexdig_fun+0x26>
 80148ca:	3827      	subs	r0, #39	@ 0x27
 80148cc:	e7f1      	b.n	80148b2 <__hexdig_fun+0xa>
 80148ce:	2000      	movs	r0, #0
 80148d0:	4770      	bx	lr
	...

080148d4 <__gethex>:
 80148d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148d8:	b085      	sub	sp, #20
 80148da:	468a      	mov	sl, r1
 80148dc:	9302      	str	r3, [sp, #8]
 80148de:	680b      	ldr	r3, [r1, #0]
 80148e0:	9001      	str	r0, [sp, #4]
 80148e2:	4690      	mov	r8, r2
 80148e4:	1c9c      	adds	r4, r3, #2
 80148e6:	46a1      	mov	r9, r4
 80148e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80148ec:	2830      	cmp	r0, #48	@ 0x30
 80148ee:	d0fa      	beq.n	80148e6 <__gethex+0x12>
 80148f0:	eba9 0303 	sub.w	r3, r9, r3
 80148f4:	f1a3 0b02 	sub.w	fp, r3, #2
 80148f8:	f7ff ffd6 	bl	80148a8 <__hexdig_fun>
 80148fc:	4605      	mov	r5, r0
 80148fe:	2800      	cmp	r0, #0
 8014900:	d168      	bne.n	80149d4 <__gethex+0x100>
 8014902:	49a0      	ldr	r1, [pc, #640]	@ (8014b84 <__gethex+0x2b0>)
 8014904:	2201      	movs	r2, #1
 8014906:	4648      	mov	r0, r9
 8014908:	f7fc fe61 	bl	80115ce <strncmp>
 801490c:	4607      	mov	r7, r0
 801490e:	2800      	cmp	r0, #0
 8014910:	d167      	bne.n	80149e2 <__gethex+0x10e>
 8014912:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014916:	4626      	mov	r6, r4
 8014918:	f7ff ffc6 	bl	80148a8 <__hexdig_fun>
 801491c:	2800      	cmp	r0, #0
 801491e:	d062      	beq.n	80149e6 <__gethex+0x112>
 8014920:	4623      	mov	r3, r4
 8014922:	7818      	ldrb	r0, [r3, #0]
 8014924:	2830      	cmp	r0, #48	@ 0x30
 8014926:	4699      	mov	r9, r3
 8014928:	f103 0301 	add.w	r3, r3, #1
 801492c:	d0f9      	beq.n	8014922 <__gethex+0x4e>
 801492e:	f7ff ffbb 	bl	80148a8 <__hexdig_fun>
 8014932:	fab0 f580 	clz	r5, r0
 8014936:	096d      	lsrs	r5, r5, #5
 8014938:	f04f 0b01 	mov.w	fp, #1
 801493c:	464a      	mov	r2, r9
 801493e:	4616      	mov	r6, r2
 8014940:	3201      	adds	r2, #1
 8014942:	7830      	ldrb	r0, [r6, #0]
 8014944:	f7ff ffb0 	bl	80148a8 <__hexdig_fun>
 8014948:	2800      	cmp	r0, #0
 801494a:	d1f8      	bne.n	801493e <__gethex+0x6a>
 801494c:	498d      	ldr	r1, [pc, #564]	@ (8014b84 <__gethex+0x2b0>)
 801494e:	2201      	movs	r2, #1
 8014950:	4630      	mov	r0, r6
 8014952:	f7fc fe3c 	bl	80115ce <strncmp>
 8014956:	2800      	cmp	r0, #0
 8014958:	d13f      	bne.n	80149da <__gethex+0x106>
 801495a:	b944      	cbnz	r4, 801496e <__gethex+0x9a>
 801495c:	1c74      	adds	r4, r6, #1
 801495e:	4622      	mov	r2, r4
 8014960:	4616      	mov	r6, r2
 8014962:	3201      	adds	r2, #1
 8014964:	7830      	ldrb	r0, [r6, #0]
 8014966:	f7ff ff9f 	bl	80148a8 <__hexdig_fun>
 801496a:	2800      	cmp	r0, #0
 801496c:	d1f8      	bne.n	8014960 <__gethex+0x8c>
 801496e:	1ba4      	subs	r4, r4, r6
 8014970:	00a7      	lsls	r7, r4, #2
 8014972:	7833      	ldrb	r3, [r6, #0]
 8014974:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014978:	2b50      	cmp	r3, #80	@ 0x50
 801497a:	d13e      	bne.n	80149fa <__gethex+0x126>
 801497c:	7873      	ldrb	r3, [r6, #1]
 801497e:	2b2b      	cmp	r3, #43	@ 0x2b
 8014980:	d033      	beq.n	80149ea <__gethex+0x116>
 8014982:	2b2d      	cmp	r3, #45	@ 0x2d
 8014984:	d034      	beq.n	80149f0 <__gethex+0x11c>
 8014986:	1c71      	adds	r1, r6, #1
 8014988:	2400      	movs	r4, #0
 801498a:	7808      	ldrb	r0, [r1, #0]
 801498c:	f7ff ff8c 	bl	80148a8 <__hexdig_fun>
 8014990:	1e43      	subs	r3, r0, #1
 8014992:	b2db      	uxtb	r3, r3
 8014994:	2b18      	cmp	r3, #24
 8014996:	d830      	bhi.n	80149fa <__gethex+0x126>
 8014998:	f1a0 0210 	sub.w	r2, r0, #16
 801499c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80149a0:	f7ff ff82 	bl	80148a8 <__hexdig_fun>
 80149a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80149a8:	fa5f fc8c 	uxtb.w	ip, ip
 80149ac:	f1bc 0f18 	cmp.w	ip, #24
 80149b0:	f04f 030a 	mov.w	r3, #10
 80149b4:	d91e      	bls.n	80149f4 <__gethex+0x120>
 80149b6:	b104      	cbz	r4, 80149ba <__gethex+0xe6>
 80149b8:	4252      	negs	r2, r2
 80149ba:	4417      	add	r7, r2
 80149bc:	f8ca 1000 	str.w	r1, [sl]
 80149c0:	b1ed      	cbz	r5, 80149fe <__gethex+0x12a>
 80149c2:	f1bb 0f00 	cmp.w	fp, #0
 80149c6:	bf0c      	ite	eq
 80149c8:	2506      	moveq	r5, #6
 80149ca:	2500      	movne	r5, #0
 80149cc:	4628      	mov	r0, r5
 80149ce:	b005      	add	sp, #20
 80149d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80149d4:	2500      	movs	r5, #0
 80149d6:	462c      	mov	r4, r5
 80149d8:	e7b0      	b.n	801493c <__gethex+0x68>
 80149da:	2c00      	cmp	r4, #0
 80149dc:	d1c7      	bne.n	801496e <__gethex+0x9a>
 80149de:	4627      	mov	r7, r4
 80149e0:	e7c7      	b.n	8014972 <__gethex+0x9e>
 80149e2:	464e      	mov	r6, r9
 80149e4:	462f      	mov	r7, r5
 80149e6:	2501      	movs	r5, #1
 80149e8:	e7c3      	b.n	8014972 <__gethex+0x9e>
 80149ea:	2400      	movs	r4, #0
 80149ec:	1cb1      	adds	r1, r6, #2
 80149ee:	e7cc      	b.n	801498a <__gethex+0xb6>
 80149f0:	2401      	movs	r4, #1
 80149f2:	e7fb      	b.n	80149ec <__gethex+0x118>
 80149f4:	fb03 0002 	mla	r0, r3, r2, r0
 80149f8:	e7ce      	b.n	8014998 <__gethex+0xc4>
 80149fa:	4631      	mov	r1, r6
 80149fc:	e7de      	b.n	80149bc <__gethex+0xe8>
 80149fe:	eba6 0309 	sub.w	r3, r6, r9
 8014a02:	3b01      	subs	r3, #1
 8014a04:	4629      	mov	r1, r5
 8014a06:	2b07      	cmp	r3, #7
 8014a08:	dc0a      	bgt.n	8014a20 <__gethex+0x14c>
 8014a0a:	9801      	ldr	r0, [sp, #4]
 8014a0c:	f7fd fdcc 	bl	80125a8 <_Balloc>
 8014a10:	4604      	mov	r4, r0
 8014a12:	b940      	cbnz	r0, 8014a26 <__gethex+0x152>
 8014a14:	4b5c      	ldr	r3, [pc, #368]	@ (8014b88 <__gethex+0x2b4>)
 8014a16:	4602      	mov	r2, r0
 8014a18:	21e4      	movs	r1, #228	@ 0xe4
 8014a1a:	485c      	ldr	r0, [pc, #368]	@ (8014b8c <__gethex+0x2b8>)
 8014a1c:	f7ff fec0 	bl	80147a0 <__assert_func>
 8014a20:	3101      	adds	r1, #1
 8014a22:	105b      	asrs	r3, r3, #1
 8014a24:	e7ef      	b.n	8014a06 <__gethex+0x132>
 8014a26:	f100 0a14 	add.w	sl, r0, #20
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	4655      	mov	r5, sl
 8014a2e:	469b      	mov	fp, r3
 8014a30:	45b1      	cmp	r9, r6
 8014a32:	d337      	bcc.n	8014aa4 <__gethex+0x1d0>
 8014a34:	f845 bb04 	str.w	fp, [r5], #4
 8014a38:	eba5 050a 	sub.w	r5, r5, sl
 8014a3c:	10ad      	asrs	r5, r5, #2
 8014a3e:	6125      	str	r5, [r4, #16]
 8014a40:	4658      	mov	r0, fp
 8014a42:	f7fd fea3 	bl	801278c <__hi0bits>
 8014a46:	016d      	lsls	r5, r5, #5
 8014a48:	f8d8 6000 	ldr.w	r6, [r8]
 8014a4c:	1a2d      	subs	r5, r5, r0
 8014a4e:	42b5      	cmp	r5, r6
 8014a50:	dd54      	ble.n	8014afc <__gethex+0x228>
 8014a52:	1bad      	subs	r5, r5, r6
 8014a54:	4629      	mov	r1, r5
 8014a56:	4620      	mov	r0, r4
 8014a58:	f7fe fa37 	bl	8012eca <__any_on>
 8014a5c:	4681      	mov	r9, r0
 8014a5e:	b178      	cbz	r0, 8014a80 <__gethex+0x1ac>
 8014a60:	1e6b      	subs	r3, r5, #1
 8014a62:	1159      	asrs	r1, r3, #5
 8014a64:	f003 021f 	and.w	r2, r3, #31
 8014a68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014a6c:	f04f 0901 	mov.w	r9, #1
 8014a70:	fa09 f202 	lsl.w	r2, r9, r2
 8014a74:	420a      	tst	r2, r1
 8014a76:	d003      	beq.n	8014a80 <__gethex+0x1ac>
 8014a78:	454b      	cmp	r3, r9
 8014a7a:	dc36      	bgt.n	8014aea <__gethex+0x216>
 8014a7c:	f04f 0902 	mov.w	r9, #2
 8014a80:	4629      	mov	r1, r5
 8014a82:	4620      	mov	r0, r4
 8014a84:	f7ff febe 	bl	8014804 <rshift>
 8014a88:	442f      	add	r7, r5
 8014a8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014a8e:	42bb      	cmp	r3, r7
 8014a90:	da42      	bge.n	8014b18 <__gethex+0x244>
 8014a92:	9801      	ldr	r0, [sp, #4]
 8014a94:	4621      	mov	r1, r4
 8014a96:	f7fd fdc7 	bl	8012628 <_Bfree>
 8014a9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	6013      	str	r3, [r2, #0]
 8014aa0:	25a3      	movs	r5, #163	@ 0xa3
 8014aa2:	e793      	b.n	80149cc <__gethex+0xf8>
 8014aa4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014aa8:	2a2e      	cmp	r2, #46	@ 0x2e
 8014aaa:	d012      	beq.n	8014ad2 <__gethex+0x1fe>
 8014aac:	2b20      	cmp	r3, #32
 8014aae:	d104      	bne.n	8014aba <__gethex+0x1e6>
 8014ab0:	f845 bb04 	str.w	fp, [r5], #4
 8014ab4:	f04f 0b00 	mov.w	fp, #0
 8014ab8:	465b      	mov	r3, fp
 8014aba:	7830      	ldrb	r0, [r6, #0]
 8014abc:	9303      	str	r3, [sp, #12]
 8014abe:	f7ff fef3 	bl	80148a8 <__hexdig_fun>
 8014ac2:	9b03      	ldr	r3, [sp, #12]
 8014ac4:	f000 000f 	and.w	r0, r0, #15
 8014ac8:	4098      	lsls	r0, r3
 8014aca:	ea4b 0b00 	orr.w	fp, fp, r0
 8014ace:	3304      	adds	r3, #4
 8014ad0:	e7ae      	b.n	8014a30 <__gethex+0x15c>
 8014ad2:	45b1      	cmp	r9, r6
 8014ad4:	d8ea      	bhi.n	8014aac <__gethex+0x1d8>
 8014ad6:	492b      	ldr	r1, [pc, #172]	@ (8014b84 <__gethex+0x2b0>)
 8014ad8:	9303      	str	r3, [sp, #12]
 8014ada:	2201      	movs	r2, #1
 8014adc:	4630      	mov	r0, r6
 8014ade:	f7fc fd76 	bl	80115ce <strncmp>
 8014ae2:	9b03      	ldr	r3, [sp, #12]
 8014ae4:	2800      	cmp	r0, #0
 8014ae6:	d1e1      	bne.n	8014aac <__gethex+0x1d8>
 8014ae8:	e7a2      	b.n	8014a30 <__gethex+0x15c>
 8014aea:	1ea9      	subs	r1, r5, #2
 8014aec:	4620      	mov	r0, r4
 8014aee:	f7fe f9ec 	bl	8012eca <__any_on>
 8014af2:	2800      	cmp	r0, #0
 8014af4:	d0c2      	beq.n	8014a7c <__gethex+0x1a8>
 8014af6:	f04f 0903 	mov.w	r9, #3
 8014afa:	e7c1      	b.n	8014a80 <__gethex+0x1ac>
 8014afc:	da09      	bge.n	8014b12 <__gethex+0x23e>
 8014afe:	1b75      	subs	r5, r6, r5
 8014b00:	4621      	mov	r1, r4
 8014b02:	9801      	ldr	r0, [sp, #4]
 8014b04:	462a      	mov	r2, r5
 8014b06:	f7fd ffa7 	bl	8012a58 <__lshift>
 8014b0a:	1b7f      	subs	r7, r7, r5
 8014b0c:	4604      	mov	r4, r0
 8014b0e:	f100 0a14 	add.w	sl, r0, #20
 8014b12:	f04f 0900 	mov.w	r9, #0
 8014b16:	e7b8      	b.n	8014a8a <__gethex+0x1b6>
 8014b18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014b1c:	42bd      	cmp	r5, r7
 8014b1e:	dd6f      	ble.n	8014c00 <__gethex+0x32c>
 8014b20:	1bed      	subs	r5, r5, r7
 8014b22:	42ae      	cmp	r6, r5
 8014b24:	dc34      	bgt.n	8014b90 <__gethex+0x2bc>
 8014b26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014b2a:	2b02      	cmp	r3, #2
 8014b2c:	d022      	beq.n	8014b74 <__gethex+0x2a0>
 8014b2e:	2b03      	cmp	r3, #3
 8014b30:	d024      	beq.n	8014b7c <__gethex+0x2a8>
 8014b32:	2b01      	cmp	r3, #1
 8014b34:	d115      	bne.n	8014b62 <__gethex+0x28e>
 8014b36:	42ae      	cmp	r6, r5
 8014b38:	d113      	bne.n	8014b62 <__gethex+0x28e>
 8014b3a:	2e01      	cmp	r6, #1
 8014b3c:	d10b      	bne.n	8014b56 <__gethex+0x282>
 8014b3e:	9a02      	ldr	r2, [sp, #8]
 8014b40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014b44:	6013      	str	r3, [r2, #0]
 8014b46:	2301      	movs	r3, #1
 8014b48:	6123      	str	r3, [r4, #16]
 8014b4a:	f8ca 3000 	str.w	r3, [sl]
 8014b4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014b50:	2562      	movs	r5, #98	@ 0x62
 8014b52:	601c      	str	r4, [r3, #0]
 8014b54:	e73a      	b.n	80149cc <__gethex+0xf8>
 8014b56:	1e71      	subs	r1, r6, #1
 8014b58:	4620      	mov	r0, r4
 8014b5a:	f7fe f9b6 	bl	8012eca <__any_on>
 8014b5e:	2800      	cmp	r0, #0
 8014b60:	d1ed      	bne.n	8014b3e <__gethex+0x26a>
 8014b62:	9801      	ldr	r0, [sp, #4]
 8014b64:	4621      	mov	r1, r4
 8014b66:	f7fd fd5f 	bl	8012628 <_Bfree>
 8014b6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014b6c:	2300      	movs	r3, #0
 8014b6e:	6013      	str	r3, [r2, #0]
 8014b70:	2550      	movs	r5, #80	@ 0x50
 8014b72:	e72b      	b.n	80149cc <__gethex+0xf8>
 8014b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d1f3      	bne.n	8014b62 <__gethex+0x28e>
 8014b7a:	e7e0      	b.n	8014b3e <__gethex+0x26a>
 8014b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d1dd      	bne.n	8014b3e <__gethex+0x26a>
 8014b82:	e7ee      	b.n	8014b62 <__gethex+0x28e>
 8014b84:	08016f90 	.word	0x08016f90
 8014b88:	08016e23 	.word	0x08016e23
 8014b8c:	08017159 	.word	0x08017159
 8014b90:	1e6f      	subs	r7, r5, #1
 8014b92:	f1b9 0f00 	cmp.w	r9, #0
 8014b96:	d130      	bne.n	8014bfa <__gethex+0x326>
 8014b98:	b127      	cbz	r7, 8014ba4 <__gethex+0x2d0>
 8014b9a:	4639      	mov	r1, r7
 8014b9c:	4620      	mov	r0, r4
 8014b9e:	f7fe f994 	bl	8012eca <__any_on>
 8014ba2:	4681      	mov	r9, r0
 8014ba4:	117a      	asrs	r2, r7, #5
 8014ba6:	2301      	movs	r3, #1
 8014ba8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014bac:	f007 071f 	and.w	r7, r7, #31
 8014bb0:	40bb      	lsls	r3, r7
 8014bb2:	4213      	tst	r3, r2
 8014bb4:	4629      	mov	r1, r5
 8014bb6:	4620      	mov	r0, r4
 8014bb8:	bf18      	it	ne
 8014bba:	f049 0902 	orrne.w	r9, r9, #2
 8014bbe:	f7ff fe21 	bl	8014804 <rshift>
 8014bc2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014bc6:	1b76      	subs	r6, r6, r5
 8014bc8:	2502      	movs	r5, #2
 8014bca:	f1b9 0f00 	cmp.w	r9, #0
 8014bce:	d047      	beq.n	8014c60 <__gethex+0x38c>
 8014bd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014bd4:	2b02      	cmp	r3, #2
 8014bd6:	d015      	beq.n	8014c04 <__gethex+0x330>
 8014bd8:	2b03      	cmp	r3, #3
 8014bda:	d017      	beq.n	8014c0c <__gethex+0x338>
 8014bdc:	2b01      	cmp	r3, #1
 8014bde:	d109      	bne.n	8014bf4 <__gethex+0x320>
 8014be0:	f019 0f02 	tst.w	r9, #2
 8014be4:	d006      	beq.n	8014bf4 <__gethex+0x320>
 8014be6:	f8da 3000 	ldr.w	r3, [sl]
 8014bea:	ea49 0903 	orr.w	r9, r9, r3
 8014bee:	f019 0f01 	tst.w	r9, #1
 8014bf2:	d10e      	bne.n	8014c12 <__gethex+0x33e>
 8014bf4:	f045 0510 	orr.w	r5, r5, #16
 8014bf8:	e032      	b.n	8014c60 <__gethex+0x38c>
 8014bfa:	f04f 0901 	mov.w	r9, #1
 8014bfe:	e7d1      	b.n	8014ba4 <__gethex+0x2d0>
 8014c00:	2501      	movs	r5, #1
 8014c02:	e7e2      	b.n	8014bca <__gethex+0x2f6>
 8014c04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c06:	f1c3 0301 	rsb	r3, r3, #1
 8014c0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014c0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d0f0      	beq.n	8014bf4 <__gethex+0x320>
 8014c12:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014c16:	f104 0314 	add.w	r3, r4, #20
 8014c1a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014c1e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014c22:	f04f 0c00 	mov.w	ip, #0
 8014c26:	4618      	mov	r0, r3
 8014c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8014c2c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014c30:	d01b      	beq.n	8014c6a <__gethex+0x396>
 8014c32:	3201      	adds	r2, #1
 8014c34:	6002      	str	r2, [r0, #0]
 8014c36:	2d02      	cmp	r5, #2
 8014c38:	f104 0314 	add.w	r3, r4, #20
 8014c3c:	d13c      	bne.n	8014cb8 <__gethex+0x3e4>
 8014c3e:	f8d8 2000 	ldr.w	r2, [r8]
 8014c42:	3a01      	subs	r2, #1
 8014c44:	42b2      	cmp	r2, r6
 8014c46:	d109      	bne.n	8014c5c <__gethex+0x388>
 8014c48:	1171      	asrs	r1, r6, #5
 8014c4a:	2201      	movs	r2, #1
 8014c4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014c50:	f006 061f 	and.w	r6, r6, #31
 8014c54:	fa02 f606 	lsl.w	r6, r2, r6
 8014c58:	421e      	tst	r6, r3
 8014c5a:	d13a      	bne.n	8014cd2 <__gethex+0x3fe>
 8014c5c:	f045 0520 	orr.w	r5, r5, #32
 8014c60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c62:	601c      	str	r4, [r3, #0]
 8014c64:	9b02      	ldr	r3, [sp, #8]
 8014c66:	601f      	str	r7, [r3, #0]
 8014c68:	e6b0      	b.n	80149cc <__gethex+0xf8>
 8014c6a:	4299      	cmp	r1, r3
 8014c6c:	f843 cc04 	str.w	ip, [r3, #-4]
 8014c70:	d8d9      	bhi.n	8014c26 <__gethex+0x352>
 8014c72:	68a3      	ldr	r3, [r4, #8]
 8014c74:	459b      	cmp	fp, r3
 8014c76:	db17      	blt.n	8014ca8 <__gethex+0x3d4>
 8014c78:	6861      	ldr	r1, [r4, #4]
 8014c7a:	9801      	ldr	r0, [sp, #4]
 8014c7c:	3101      	adds	r1, #1
 8014c7e:	f7fd fc93 	bl	80125a8 <_Balloc>
 8014c82:	4681      	mov	r9, r0
 8014c84:	b918      	cbnz	r0, 8014c8e <__gethex+0x3ba>
 8014c86:	4b1a      	ldr	r3, [pc, #104]	@ (8014cf0 <__gethex+0x41c>)
 8014c88:	4602      	mov	r2, r0
 8014c8a:	2184      	movs	r1, #132	@ 0x84
 8014c8c:	e6c5      	b.n	8014a1a <__gethex+0x146>
 8014c8e:	6922      	ldr	r2, [r4, #16]
 8014c90:	3202      	adds	r2, #2
 8014c92:	f104 010c 	add.w	r1, r4, #12
 8014c96:	0092      	lsls	r2, r2, #2
 8014c98:	300c      	adds	r0, #12
 8014c9a:	f7fc fd22 	bl	80116e2 <memcpy>
 8014c9e:	4621      	mov	r1, r4
 8014ca0:	9801      	ldr	r0, [sp, #4]
 8014ca2:	f7fd fcc1 	bl	8012628 <_Bfree>
 8014ca6:	464c      	mov	r4, r9
 8014ca8:	6923      	ldr	r3, [r4, #16]
 8014caa:	1c5a      	adds	r2, r3, #1
 8014cac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014cb0:	6122      	str	r2, [r4, #16]
 8014cb2:	2201      	movs	r2, #1
 8014cb4:	615a      	str	r2, [r3, #20]
 8014cb6:	e7be      	b.n	8014c36 <__gethex+0x362>
 8014cb8:	6922      	ldr	r2, [r4, #16]
 8014cba:	455a      	cmp	r2, fp
 8014cbc:	dd0b      	ble.n	8014cd6 <__gethex+0x402>
 8014cbe:	2101      	movs	r1, #1
 8014cc0:	4620      	mov	r0, r4
 8014cc2:	f7ff fd9f 	bl	8014804 <rshift>
 8014cc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014cca:	3701      	adds	r7, #1
 8014ccc:	42bb      	cmp	r3, r7
 8014cce:	f6ff aee0 	blt.w	8014a92 <__gethex+0x1be>
 8014cd2:	2501      	movs	r5, #1
 8014cd4:	e7c2      	b.n	8014c5c <__gethex+0x388>
 8014cd6:	f016 061f 	ands.w	r6, r6, #31
 8014cda:	d0fa      	beq.n	8014cd2 <__gethex+0x3fe>
 8014cdc:	4453      	add	r3, sl
 8014cde:	f1c6 0620 	rsb	r6, r6, #32
 8014ce2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014ce6:	f7fd fd51 	bl	801278c <__hi0bits>
 8014cea:	42b0      	cmp	r0, r6
 8014cec:	dbe7      	blt.n	8014cbe <__gethex+0x3ea>
 8014cee:	e7f0      	b.n	8014cd2 <__gethex+0x3fe>
 8014cf0:	08016e23 	.word	0x08016e23

08014cf4 <L_shift>:
 8014cf4:	f1c2 0208 	rsb	r2, r2, #8
 8014cf8:	0092      	lsls	r2, r2, #2
 8014cfa:	b570      	push	{r4, r5, r6, lr}
 8014cfc:	f1c2 0620 	rsb	r6, r2, #32
 8014d00:	6843      	ldr	r3, [r0, #4]
 8014d02:	6804      	ldr	r4, [r0, #0]
 8014d04:	fa03 f506 	lsl.w	r5, r3, r6
 8014d08:	432c      	orrs	r4, r5
 8014d0a:	40d3      	lsrs	r3, r2
 8014d0c:	6004      	str	r4, [r0, #0]
 8014d0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8014d12:	4288      	cmp	r0, r1
 8014d14:	d3f4      	bcc.n	8014d00 <L_shift+0xc>
 8014d16:	bd70      	pop	{r4, r5, r6, pc}

08014d18 <__match>:
 8014d18:	b530      	push	{r4, r5, lr}
 8014d1a:	6803      	ldr	r3, [r0, #0]
 8014d1c:	3301      	adds	r3, #1
 8014d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d22:	b914      	cbnz	r4, 8014d2a <__match+0x12>
 8014d24:	6003      	str	r3, [r0, #0]
 8014d26:	2001      	movs	r0, #1
 8014d28:	bd30      	pop	{r4, r5, pc}
 8014d2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014d32:	2d19      	cmp	r5, #25
 8014d34:	bf98      	it	ls
 8014d36:	3220      	addls	r2, #32
 8014d38:	42a2      	cmp	r2, r4
 8014d3a:	d0f0      	beq.n	8014d1e <__match+0x6>
 8014d3c:	2000      	movs	r0, #0
 8014d3e:	e7f3      	b.n	8014d28 <__match+0x10>

08014d40 <__hexnan>:
 8014d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d44:	680b      	ldr	r3, [r1, #0]
 8014d46:	6801      	ldr	r1, [r0, #0]
 8014d48:	115e      	asrs	r6, r3, #5
 8014d4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014d4e:	f013 031f 	ands.w	r3, r3, #31
 8014d52:	b087      	sub	sp, #28
 8014d54:	bf18      	it	ne
 8014d56:	3604      	addne	r6, #4
 8014d58:	2500      	movs	r5, #0
 8014d5a:	1f37      	subs	r7, r6, #4
 8014d5c:	4682      	mov	sl, r0
 8014d5e:	4690      	mov	r8, r2
 8014d60:	9301      	str	r3, [sp, #4]
 8014d62:	f846 5c04 	str.w	r5, [r6, #-4]
 8014d66:	46b9      	mov	r9, r7
 8014d68:	463c      	mov	r4, r7
 8014d6a:	9502      	str	r5, [sp, #8]
 8014d6c:	46ab      	mov	fp, r5
 8014d6e:	784a      	ldrb	r2, [r1, #1]
 8014d70:	1c4b      	adds	r3, r1, #1
 8014d72:	9303      	str	r3, [sp, #12]
 8014d74:	b342      	cbz	r2, 8014dc8 <__hexnan+0x88>
 8014d76:	4610      	mov	r0, r2
 8014d78:	9105      	str	r1, [sp, #20]
 8014d7a:	9204      	str	r2, [sp, #16]
 8014d7c:	f7ff fd94 	bl	80148a8 <__hexdig_fun>
 8014d80:	2800      	cmp	r0, #0
 8014d82:	d151      	bne.n	8014e28 <__hexnan+0xe8>
 8014d84:	9a04      	ldr	r2, [sp, #16]
 8014d86:	9905      	ldr	r1, [sp, #20]
 8014d88:	2a20      	cmp	r2, #32
 8014d8a:	d818      	bhi.n	8014dbe <__hexnan+0x7e>
 8014d8c:	9b02      	ldr	r3, [sp, #8]
 8014d8e:	459b      	cmp	fp, r3
 8014d90:	dd13      	ble.n	8014dba <__hexnan+0x7a>
 8014d92:	454c      	cmp	r4, r9
 8014d94:	d206      	bcs.n	8014da4 <__hexnan+0x64>
 8014d96:	2d07      	cmp	r5, #7
 8014d98:	dc04      	bgt.n	8014da4 <__hexnan+0x64>
 8014d9a:	462a      	mov	r2, r5
 8014d9c:	4649      	mov	r1, r9
 8014d9e:	4620      	mov	r0, r4
 8014da0:	f7ff ffa8 	bl	8014cf4 <L_shift>
 8014da4:	4544      	cmp	r4, r8
 8014da6:	d952      	bls.n	8014e4e <__hexnan+0x10e>
 8014da8:	2300      	movs	r3, #0
 8014daa:	f1a4 0904 	sub.w	r9, r4, #4
 8014dae:	f844 3c04 	str.w	r3, [r4, #-4]
 8014db2:	f8cd b008 	str.w	fp, [sp, #8]
 8014db6:	464c      	mov	r4, r9
 8014db8:	461d      	mov	r5, r3
 8014dba:	9903      	ldr	r1, [sp, #12]
 8014dbc:	e7d7      	b.n	8014d6e <__hexnan+0x2e>
 8014dbe:	2a29      	cmp	r2, #41	@ 0x29
 8014dc0:	d157      	bne.n	8014e72 <__hexnan+0x132>
 8014dc2:	3102      	adds	r1, #2
 8014dc4:	f8ca 1000 	str.w	r1, [sl]
 8014dc8:	f1bb 0f00 	cmp.w	fp, #0
 8014dcc:	d051      	beq.n	8014e72 <__hexnan+0x132>
 8014dce:	454c      	cmp	r4, r9
 8014dd0:	d206      	bcs.n	8014de0 <__hexnan+0xa0>
 8014dd2:	2d07      	cmp	r5, #7
 8014dd4:	dc04      	bgt.n	8014de0 <__hexnan+0xa0>
 8014dd6:	462a      	mov	r2, r5
 8014dd8:	4649      	mov	r1, r9
 8014dda:	4620      	mov	r0, r4
 8014ddc:	f7ff ff8a 	bl	8014cf4 <L_shift>
 8014de0:	4544      	cmp	r4, r8
 8014de2:	d936      	bls.n	8014e52 <__hexnan+0x112>
 8014de4:	f1a8 0204 	sub.w	r2, r8, #4
 8014de8:	4623      	mov	r3, r4
 8014dea:	f853 1b04 	ldr.w	r1, [r3], #4
 8014dee:	f842 1f04 	str.w	r1, [r2, #4]!
 8014df2:	429f      	cmp	r7, r3
 8014df4:	d2f9      	bcs.n	8014dea <__hexnan+0xaa>
 8014df6:	1b3b      	subs	r3, r7, r4
 8014df8:	f023 0303 	bic.w	r3, r3, #3
 8014dfc:	3304      	adds	r3, #4
 8014dfe:	3401      	adds	r4, #1
 8014e00:	3e03      	subs	r6, #3
 8014e02:	42b4      	cmp	r4, r6
 8014e04:	bf88      	it	hi
 8014e06:	2304      	movhi	r3, #4
 8014e08:	4443      	add	r3, r8
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	f843 2b04 	str.w	r2, [r3], #4
 8014e10:	429f      	cmp	r7, r3
 8014e12:	d2fb      	bcs.n	8014e0c <__hexnan+0xcc>
 8014e14:	683b      	ldr	r3, [r7, #0]
 8014e16:	b91b      	cbnz	r3, 8014e20 <__hexnan+0xe0>
 8014e18:	4547      	cmp	r7, r8
 8014e1a:	d128      	bne.n	8014e6e <__hexnan+0x12e>
 8014e1c:	2301      	movs	r3, #1
 8014e1e:	603b      	str	r3, [r7, #0]
 8014e20:	2005      	movs	r0, #5
 8014e22:	b007      	add	sp, #28
 8014e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e28:	3501      	adds	r5, #1
 8014e2a:	2d08      	cmp	r5, #8
 8014e2c:	f10b 0b01 	add.w	fp, fp, #1
 8014e30:	dd06      	ble.n	8014e40 <__hexnan+0x100>
 8014e32:	4544      	cmp	r4, r8
 8014e34:	d9c1      	bls.n	8014dba <__hexnan+0x7a>
 8014e36:	2300      	movs	r3, #0
 8014e38:	f844 3c04 	str.w	r3, [r4, #-4]
 8014e3c:	2501      	movs	r5, #1
 8014e3e:	3c04      	subs	r4, #4
 8014e40:	6822      	ldr	r2, [r4, #0]
 8014e42:	f000 000f 	and.w	r0, r0, #15
 8014e46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014e4a:	6020      	str	r0, [r4, #0]
 8014e4c:	e7b5      	b.n	8014dba <__hexnan+0x7a>
 8014e4e:	2508      	movs	r5, #8
 8014e50:	e7b3      	b.n	8014dba <__hexnan+0x7a>
 8014e52:	9b01      	ldr	r3, [sp, #4]
 8014e54:	2b00      	cmp	r3, #0
 8014e56:	d0dd      	beq.n	8014e14 <__hexnan+0xd4>
 8014e58:	f1c3 0320 	rsb	r3, r3, #32
 8014e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8014e60:	40da      	lsrs	r2, r3
 8014e62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014e66:	4013      	ands	r3, r2
 8014e68:	f846 3c04 	str.w	r3, [r6, #-4]
 8014e6c:	e7d2      	b.n	8014e14 <__hexnan+0xd4>
 8014e6e:	3f04      	subs	r7, #4
 8014e70:	e7d0      	b.n	8014e14 <__hexnan+0xd4>
 8014e72:	2004      	movs	r0, #4
 8014e74:	e7d5      	b.n	8014e22 <__hexnan+0xe2>

08014e76 <__ascii_mbtowc>:
 8014e76:	b082      	sub	sp, #8
 8014e78:	b901      	cbnz	r1, 8014e7c <__ascii_mbtowc+0x6>
 8014e7a:	a901      	add	r1, sp, #4
 8014e7c:	b142      	cbz	r2, 8014e90 <__ascii_mbtowc+0x1a>
 8014e7e:	b14b      	cbz	r3, 8014e94 <__ascii_mbtowc+0x1e>
 8014e80:	7813      	ldrb	r3, [r2, #0]
 8014e82:	600b      	str	r3, [r1, #0]
 8014e84:	7812      	ldrb	r2, [r2, #0]
 8014e86:	1e10      	subs	r0, r2, #0
 8014e88:	bf18      	it	ne
 8014e8a:	2001      	movne	r0, #1
 8014e8c:	b002      	add	sp, #8
 8014e8e:	4770      	bx	lr
 8014e90:	4610      	mov	r0, r2
 8014e92:	e7fb      	b.n	8014e8c <__ascii_mbtowc+0x16>
 8014e94:	f06f 0001 	mvn.w	r0, #1
 8014e98:	e7f8      	b.n	8014e8c <__ascii_mbtowc+0x16>

08014e9a <_realloc_r>:
 8014e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e9e:	4680      	mov	r8, r0
 8014ea0:	4615      	mov	r5, r2
 8014ea2:	460c      	mov	r4, r1
 8014ea4:	b921      	cbnz	r1, 8014eb0 <_realloc_r+0x16>
 8014ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014eaa:	4611      	mov	r1, r2
 8014eac:	f7fd baf0 	b.w	8012490 <_malloc_r>
 8014eb0:	b92a      	cbnz	r2, 8014ebe <_realloc_r+0x24>
 8014eb2:	f7fd fa79 	bl	80123a8 <_free_r>
 8014eb6:	2400      	movs	r4, #0
 8014eb8:	4620      	mov	r0, r4
 8014eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ebe:	f000 f8b2 	bl	8015026 <_malloc_usable_size_r>
 8014ec2:	4285      	cmp	r5, r0
 8014ec4:	4606      	mov	r6, r0
 8014ec6:	d802      	bhi.n	8014ece <_realloc_r+0x34>
 8014ec8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014ecc:	d8f4      	bhi.n	8014eb8 <_realloc_r+0x1e>
 8014ece:	4629      	mov	r1, r5
 8014ed0:	4640      	mov	r0, r8
 8014ed2:	f7fd fadd 	bl	8012490 <_malloc_r>
 8014ed6:	4607      	mov	r7, r0
 8014ed8:	2800      	cmp	r0, #0
 8014eda:	d0ec      	beq.n	8014eb6 <_realloc_r+0x1c>
 8014edc:	42b5      	cmp	r5, r6
 8014ede:	462a      	mov	r2, r5
 8014ee0:	4621      	mov	r1, r4
 8014ee2:	bf28      	it	cs
 8014ee4:	4632      	movcs	r2, r6
 8014ee6:	f7fc fbfc 	bl	80116e2 <memcpy>
 8014eea:	4621      	mov	r1, r4
 8014eec:	4640      	mov	r0, r8
 8014eee:	f7fd fa5b 	bl	80123a8 <_free_r>
 8014ef2:	463c      	mov	r4, r7
 8014ef4:	e7e0      	b.n	8014eb8 <_realloc_r+0x1e>
	...

08014ef8 <_strtoul_l.constprop.0>:
 8014ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014efc:	4e34      	ldr	r6, [pc, #208]	@ (8014fd0 <_strtoul_l.constprop.0+0xd8>)
 8014efe:	4686      	mov	lr, r0
 8014f00:	460d      	mov	r5, r1
 8014f02:	4628      	mov	r0, r5
 8014f04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f08:	5d37      	ldrb	r7, [r6, r4]
 8014f0a:	f017 0708 	ands.w	r7, r7, #8
 8014f0e:	d1f8      	bne.n	8014f02 <_strtoul_l.constprop.0+0xa>
 8014f10:	2c2d      	cmp	r4, #45	@ 0x2d
 8014f12:	d12f      	bne.n	8014f74 <_strtoul_l.constprop.0+0x7c>
 8014f14:	782c      	ldrb	r4, [r5, #0]
 8014f16:	2701      	movs	r7, #1
 8014f18:	1c85      	adds	r5, r0, #2
 8014f1a:	f033 0010 	bics.w	r0, r3, #16
 8014f1e:	d109      	bne.n	8014f34 <_strtoul_l.constprop.0+0x3c>
 8014f20:	2c30      	cmp	r4, #48	@ 0x30
 8014f22:	d12c      	bne.n	8014f7e <_strtoul_l.constprop.0+0x86>
 8014f24:	7828      	ldrb	r0, [r5, #0]
 8014f26:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8014f2a:	2858      	cmp	r0, #88	@ 0x58
 8014f2c:	d127      	bne.n	8014f7e <_strtoul_l.constprop.0+0x86>
 8014f2e:	786c      	ldrb	r4, [r5, #1]
 8014f30:	2310      	movs	r3, #16
 8014f32:	3502      	adds	r5, #2
 8014f34:	f04f 38ff 	mov.w	r8, #4294967295
 8014f38:	2600      	movs	r6, #0
 8014f3a:	fbb8 f8f3 	udiv	r8, r8, r3
 8014f3e:	fb03 f908 	mul.w	r9, r3, r8
 8014f42:	ea6f 0909 	mvn.w	r9, r9
 8014f46:	4630      	mov	r0, r6
 8014f48:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8014f4c:	f1bc 0f09 	cmp.w	ip, #9
 8014f50:	d81c      	bhi.n	8014f8c <_strtoul_l.constprop.0+0x94>
 8014f52:	4664      	mov	r4, ip
 8014f54:	42a3      	cmp	r3, r4
 8014f56:	dd2a      	ble.n	8014fae <_strtoul_l.constprop.0+0xb6>
 8014f58:	f1b6 3fff 	cmp.w	r6, #4294967295
 8014f5c:	d007      	beq.n	8014f6e <_strtoul_l.constprop.0+0x76>
 8014f5e:	4580      	cmp	r8, r0
 8014f60:	d322      	bcc.n	8014fa8 <_strtoul_l.constprop.0+0xb0>
 8014f62:	d101      	bne.n	8014f68 <_strtoul_l.constprop.0+0x70>
 8014f64:	45a1      	cmp	r9, r4
 8014f66:	db1f      	blt.n	8014fa8 <_strtoul_l.constprop.0+0xb0>
 8014f68:	fb00 4003 	mla	r0, r0, r3, r4
 8014f6c:	2601      	movs	r6, #1
 8014f6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f72:	e7e9      	b.n	8014f48 <_strtoul_l.constprop.0+0x50>
 8014f74:	2c2b      	cmp	r4, #43	@ 0x2b
 8014f76:	bf04      	itt	eq
 8014f78:	782c      	ldrbeq	r4, [r5, #0]
 8014f7a:	1c85      	addeq	r5, r0, #2
 8014f7c:	e7cd      	b.n	8014f1a <_strtoul_l.constprop.0+0x22>
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d1d8      	bne.n	8014f34 <_strtoul_l.constprop.0+0x3c>
 8014f82:	2c30      	cmp	r4, #48	@ 0x30
 8014f84:	bf0c      	ite	eq
 8014f86:	2308      	moveq	r3, #8
 8014f88:	230a      	movne	r3, #10
 8014f8a:	e7d3      	b.n	8014f34 <_strtoul_l.constprop.0+0x3c>
 8014f8c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8014f90:	f1bc 0f19 	cmp.w	ip, #25
 8014f94:	d801      	bhi.n	8014f9a <_strtoul_l.constprop.0+0xa2>
 8014f96:	3c37      	subs	r4, #55	@ 0x37
 8014f98:	e7dc      	b.n	8014f54 <_strtoul_l.constprop.0+0x5c>
 8014f9a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8014f9e:	f1bc 0f19 	cmp.w	ip, #25
 8014fa2:	d804      	bhi.n	8014fae <_strtoul_l.constprop.0+0xb6>
 8014fa4:	3c57      	subs	r4, #87	@ 0x57
 8014fa6:	e7d5      	b.n	8014f54 <_strtoul_l.constprop.0+0x5c>
 8014fa8:	f04f 36ff 	mov.w	r6, #4294967295
 8014fac:	e7df      	b.n	8014f6e <_strtoul_l.constprop.0+0x76>
 8014fae:	1c73      	adds	r3, r6, #1
 8014fb0:	d106      	bne.n	8014fc0 <_strtoul_l.constprop.0+0xc8>
 8014fb2:	2322      	movs	r3, #34	@ 0x22
 8014fb4:	f8ce 3000 	str.w	r3, [lr]
 8014fb8:	4630      	mov	r0, r6
 8014fba:	b932      	cbnz	r2, 8014fca <_strtoul_l.constprop.0+0xd2>
 8014fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014fc0:	b107      	cbz	r7, 8014fc4 <_strtoul_l.constprop.0+0xcc>
 8014fc2:	4240      	negs	r0, r0
 8014fc4:	2a00      	cmp	r2, #0
 8014fc6:	d0f9      	beq.n	8014fbc <_strtoul_l.constprop.0+0xc4>
 8014fc8:	b106      	cbz	r6, 8014fcc <_strtoul_l.constprop.0+0xd4>
 8014fca:	1e69      	subs	r1, r5, #1
 8014fcc:	6011      	str	r1, [r2, #0]
 8014fce:	e7f5      	b.n	8014fbc <_strtoul_l.constprop.0+0xc4>
 8014fd0:	08016fe9 	.word	0x08016fe9

08014fd4 <_strtoul_r>:
 8014fd4:	f7ff bf90 	b.w	8014ef8 <_strtoul_l.constprop.0>

08014fd8 <__ascii_wctomb>:
 8014fd8:	4603      	mov	r3, r0
 8014fda:	4608      	mov	r0, r1
 8014fdc:	b141      	cbz	r1, 8014ff0 <__ascii_wctomb+0x18>
 8014fde:	2aff      	cmp	r2, #255	@ 0xff
 8014fe0:	d904      	bls.n	8014fec <__ascii_wctomb+0x14>
 8014fe2:	228a      	movs	r2, #138	@ 0x8a
 8014fe4:	601a      	str	r2, [r3, #0]
 8014fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8014fea:	4770      	bx	lr
 8014fec:	700a      	strb	r2, [r1, #0]
 8014fee:	2001      	movs	r0, #1
 8014ff0:	4770      	bx	lr
	...

08014ff4 <fiprintf>:
 8014ff4:	b40e      	push	{r1, r2, r3}
 8014ff6:	b503      	push	{r0, r1, lr}
 8014ff8:	4601      	mov	r1, r0
 8014ffa:	ab03      	add	r3, sp, #12
 8014ffc:	4805      	ldr	r0, [pc, #20]	@ (8015014 <fiprintf+0x20>)
 8014ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 8015002:	6800      	ldr	r0, [r0, #0]
 8015004:	9301      	str	r3, [sp, #4]
 8015006:	f000 f83f 	bl	8015088 <_vfiprintf_r>
 801500a:	b002      	add	sp, #8
 801500c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015010:	b003      	add	sp, #12
 8015012:	4770      	bx	lr
 8015014:	200001ac 	.word	0x200001ac

08015018 <abort>:
 8015018:	b508      	push	{r3, lr}
 801501a:	2006      	movs	r0, #6
 801501c:	f000 fa08 	bl	8015430 <raise>
 8015020:	2001      	movs	r0, #1
 8015022:	f7ee fee7 	bl	8003df4 <_exit>

08015026 <_malloc_usable_size_r>:
 8015026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801502a:	1f18      	subs	r0, r3, #4
 801502c:	2b00      	cmp	r3, #0
 801502e:	bfbc      	itt	lt
 8015030:	580b      	ldrlt	r3, [r1, r0]
 8015032:	18c0      	addlt	r0, r0, r3
 8015034:	4770      	bx	lr

08015036 <__sfputc_r>:
 8015036:	6893      	ldr	r3, [r2, #8]
 8015038:	3b01      	subs	r3, #1
 801503a:	2b00      	cmp	r3, #0
 801503c:	b410      	push	{r4}
 801503e:	6093      	str	r3, [r2, #8]
 8015040:	da08      	bge.n	8015054 <__sfputc_r+0x1e>
 8015042:	6994      	ldr	r4, [r2, #24]
 8015044:	42a3      	cmp	r3, r4
 8015046:	db01      	blt.n	801504c <__sfputc_r+0x16>
 8015048:	290a      	cmp	r1, #10
 801504a:	d103      	bne.n	8015054 <__sfputc_r+0x1e>
 801504c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015050:	f000 b932 	b.w	80152b8 <__swbuf_r>
 8015054:	6813      	ldr	r3, [r2, #0]
 8015056:	1c58      	adds	r0, r3, #1
 8015058:	6010      	str	r0, [r2, #0]
 801505a:	7019      	strb	r1, [r3, #0]
 801505c:	4608      	mov	r0, r1
 801505e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015062:	4770      	bx	lr

08015064 <__sfputs_r>:
 8015064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015066:	4606      	mov	r6, r0
 8015068:	460f      	mov	r7, r1
 801506a:	4614      	mov	r4, r2
 801506c:	18d5      	adds	r5, r2, r3
 801506e:	42ac      	cmp	r4, r5
 8015070:	d101      	bne.n	8015076 <__sfputs_r+0x12>
 8015072:	2000      	movs	r0, #0
 8015074:	e007      	b.n	8015086 <__sfputs_r+0x22>
 8015076:	f814 1b01 	ldrb.w	r1, [r4], #1
 801507a:	463a      	mov	r2, r7
 801507c:	4630      	mov	r0, r6
 801507e:	f7ff ffda 	bl	8015036 <__sfputc_r>
 8015082:	1c43      	adds	r3, r0, #1
 8015084:	d1f3      	bne.n	801506e <__sfputs_r+0xa>
 8015086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015088 <_vfiprintf_r>:
 8015088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801508c:	460d      	mov	r5, r1
 801508e:	b09d      	sub	sp, #116	@ 0x74
 8015090:	4614      	mov	r4, r2
 8015092:	4698      	mov	r8, r3
 8015094:	4606      	mov	r6, r0
 8015096:	b118      	cbz	r0, 80150a0 <_vfiprintf_r+0x18>
 8015098:	6a03      	ldr	r3, [r0, #32]
 801509a:	b90b      	cbnz	r3, 80150a0 <_vfiprintf_r+0x18>
 801509c:	f7fc f9ca 	bl	8011434 <__sinit>
 80150a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80150a2:	07d9      	lsls	r1, r3, #31
 80150a4:	d405      	bmi.n	80150b2 <_vfiprintf_r+0x2a>
 80150a6:	89ab      	ldrh	r3, [r5, #12]
 80150a8:	059a      	lsls	r2, r3, #22
 80150aa:	d402      	bmi.n	80150b2 <_vfiprintf_r+0x2a>
 80150ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80150ae:	f7fc fb16 	bl	80116de <__retarget_lock_acquire_recursive>
 80150b2:	89ab      	ldrh	r3, [r5, #12]
 80150b4:	071b      	lsls	r3, r3, #28
 80150b6:	d501      	bpl.n	80150bc <_vfiprintf_r+0x34>
 80150b8:	692b      	ldr	r3, [r5, #16]
 80150ba:	b99b      	cbnz	r3, 80150e4 <_vfiprintf_r+0x5c>
 80150bc:	4629      	mov	r1, r5
 80150be:	4630      	mov	r0, r6
 80150c0:	f000 f938 	bl	8015334 <__swsetup_r>
 80150c4:	b170      	cbz	r0, 80150e4 <_vfiprintf_r+0x5c>
 80150c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80150c8:	07dc      	lsls	r4, r3, #31
 80150ca:	d504      	bpl.n	80150d6 <_vfiprintf_r+0x4e>
 80150cc:	f04f 30ff 	mov.w	r0, #4294967295
 80150d0:	b01d      	add	sp, #116	@ 0x74
 80150d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150d6:	89ab      	ldrh	r3, [r5, #12]
 80150d8:	0598      	lsls	r0, r3, #22
 80150da:	d4f7      	bmi.n	80150cc <_vfiprintf_r+0x44>
 80150dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80150de:	f7fc faff 	bl	80116e0 <__retarget_lock_release_recursive>
 80150e2:	e7f3      	b.n	80150cc <_vfiprintf_r+0x44>
 80150e4:	2300      	movs	r3, #0
 80150e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80150e8:	2320      	movs	r3, #32
 80150ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80150ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80150f2:	2330      	movs	r3, #48	@ 0x30
 80150f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80152a4 <_vfiprintf_r+0x21c>
 80150f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80150fc:	f04f 0901 	mov.w	r9, #1
 8015100:	4623      	mov	r3, r4
 8015102:	469a      	mov	sl, r3
 8015104:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015108:	b10a      	cbz	r2, 801510e <_vfiprintf_r+0x86>
 801510a:	2a25      	cmp	r2, #37	@ 0x25
 801510c:	d1f9      	bne.n	8015102 <_vfiprintf_r+0x7a>
 801510e:	ebba 0b04 	subs.w	fp, sl, r4
 8015112:	d00b      	beq.n	801512c <_vfiprintf_r+0xa4>
 8015114:	465b      	mov	r3, fp
 8015116:	4622      	mov	r2, r4
 8015118:	4629      	mov	r1, r5
 801511a:	4630      	mov	r0, r6
 801511c:	f7ff ffa2 	bl	8015064 <__sfputs_r>
 8015120:	3001      	adds	r0, #1
 8015122:	f000 80a7 	beq.w	8015274 <_vfiprintf_r+0x1ec>
 8015126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015128:	445a      	add	r2, fp
 801512a:	9209      	str	r2, [sp, #36]	@ 0x24
 801512c:	f89a 3000 	ldrb.w	r3, [sl]
 8015130:	2b00      	cmp	r3, #0
 8015132:	f000 809f 	beq.w	8015274 <_vfiprintf_r+0x1ec>
 8015136:	2300      	movs	r3, #0
 8015138:	f04f 32ff 	mov.w	r2, #4294967295
 801513c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015140:	f10a 0a01 	add.w	sl, sl, #1
 8015144:	9304      	str	r3, [sp, #16]
 8015146:	9307      	str	r3, [sp, #28]
 8015148:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801514c:	931a      	str	r3, [sp, #104]	@ 0x68
 801514e:	4654      	mov	r4, sl
 8015150:	2205      	movs	r2, #5
 8015152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015156:	4853      	ldr	r0, [pc, #332]	@ (80152a4 <_vfiprintf_r+0x21c>)
 8015158:	f7eb f862 	bl	8000220 <memchr>
 801515c:	9a04      	ldr	r2, [sp, #16]
 801515e:	b9d8      	cbnz	r0, 8015198 <_vfiprintf_r+0x110>
 8015160:	06d1      	lsls	r1, r2, #27
 8015162:	bf44      	itt	mi
 8015164:	2320      	movmi	r3, #32
 8015166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801516a:	0713      	lsls	r3, r2, #28
 801516c:	bf44      	itt	mi
 801516e:	232b      	movmi	r3, #43	@ 0x2b
 8015170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015174:	f89a 3000 	ldrb.w	r3, [sl]
 8015178:	2b2a      	cmp	r3, #42	@ 0x2a
 801517a:	d015      	beq.n	80151a8 <_vfiprintf_r+0x120>
 801517c:	9a07      	ldr	r2, [sp, #28]
 801517e:	4654      	mov	r4, sl
 8015180:	2000      	movs	r0, #0
 8015182:	f04f 0c0a 	mov.w	ip, #10
 8015186:	4621      	mov	r1, r4
 8015188:	f811 3b01 	ldrb.w	r3, [r1], #1
 801518c:	3b30      	subs	r3, #48	@ 0x30
 801518e:	2b09      	cmp	r3, #9
 8015190:	d94b      	bls.n	801522a <_vfiprintf_r+0x1a2>
 8015192:	b1b0      	cbz	r0, 80151c2 <_vfiprintf_r+0x13a>
 8015194:	9207      	str	r2, [sp, #28]
 8015196:	e014      	b.n	80151c2 <_vfiprintf_r+0x13a>
 8015198:	eba0 0308 	sub.w	r3, r0, r8
 801519c:	fa09 f303 	lsl.w	r3, r9, r3
 80151a0:	4313      	orrs	r3, r2
 80151a2:	9304      	str	r3, [sp, #16]
 80151a4:	46a2      	mov	sl, r4
 80151a6:	e7d2      	b.n	801514e <_vfiprintf_r+0xc6>
 80151a8:	9b03      	ldr	r3, [sp, #12]
 80151aa:	1d19      	adds	r1, r3, #4
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	9103      	str	r1, [sp, #12]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	bfbb      	ittet	lt
 80151b4:	425b      	neglt	r3, r3
 80151b6:	f042 0202 	orrlt.w	r2, r2, #2
 80151ba:	9307      	strge	r3, [sp, #28]
 80151bc:	9307      	strlt	r3, [sp, #28]
 80151be:	bfb8      	it	lt
 80151c0:	9204      	strlt	r2, [sp, #16]
 80151c2:	7823      	ldrb	r3, [r4, #0]
 80151c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80151c6:	d10a      	bne.n	80151de <_vfiprintf_r+0x156>
 80151c8:	7863      	ldrb	r3, [r4, #1]
 80151ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80151cc:	d132      	bne.n	8015234 <_vfiprintf_r+0x1ac>
 80151ce:	9b03      	ldr	r3, [sp, #12]
 80151d0:	1d1a      	adds	r2, r3, #4
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	9203      	str	r2, [sp, #12]
 80151d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80151da:	3402      	adds	r4, #2
 80151dc:	9305      	str	r3, [sp, #20]
 80151de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80152b4 <_vfiprintf_r+0x22c>
 80151e2:	7821      	ldrb	r1, [r4, #0]
 80151e4:	2203      	movs	r2, #3
 80151e6:	4650      	mov	r0, sl
 80151e8:	f7eb f81a 	bl	8000220 <memchr>
 80151ec:	b138      	cbz	r0, 80151fe <_vfiprintf_r+0x176>
 80151ee:	9b04      	ldr	r3, [sp, #16]
 80151f0:	eba0 000a 	sub.w	r0, r0, sl
 80151f4:	2240      	movs	r2, #64	@ 0x40
 80151f6:	4082      	lsls	r2, r0
 80151f8:	4313      	orrs	r3, r2
 80151fa:	3401      	adds	r4, #1
 80151fc:	9304      	str	r3, [sp, #16]
 80151fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015202:	4829      	ldr	r0, [pc, #164]	@ (80152a8 <_vfiprintf_r+0x220>)
 8015204:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015208:	2206      	movs	r2, #6
 801520a:	f7eb f809 	bl	8000220 <memchr>
 801520e:	2800      	cmp	r0, #0
 8015210:	d03f      	beq.n	8015292 <_vfiprintf_r+0x20a>
 8015212:	4b26      	ldr	r3, [pc, #152]	@ (80152ac <_vfiprintf_r+0x224>)
 8015214:	bb1b      	cbnz	r3, 801525e <_vfiprintf_r+0x1d6>
 8015216:	9b03      	ldr	r3, [sp, #12]
 8015218:	3307      	adds	r3, #7
 801521a:	f023 0307 	bic.w	r3, r3, #7
 801521e:	3308      	adds	r3, #8
 8015220:	9303      	str	r3, [sp, #12]
 8015222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015224:	443b      	add	r3, r7
 8015226:	9309      	str	r3, [sp, #36]	@ 0x24
 8015228:	e76a      	b.n	8015100 <_vfiprintf_r+0x78>
 801522a:	fb0c 3202 	mla	r2, ip, r2, r3
 801522e:	460c      	mov	r4, r1
 8015230:	2001      	movs	r0, #1
 8015232:	e7a8      	b.n	8015186 <_vfiprintf_r+0xfe>
 8015234:	2300      	movs	r3, #0
 8015236:	3401      	adds	r4, #1
 8015238:	9305      	str	r3, [sp, #20]
 801523a:	4619      	mov	r1, r3
 801523c:	f04f 0c0a 	mov.w	ip, #10
 8015240:	4620      	mov	r0, r4
 8015242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015246:	3a30      	subs	r2, #48	@ 0x30
 8015248:	2a09      	cmp	r2, #9
 801524a:	d903      	bls.n	8015254 <_vfiprintf_r+0x1cc>
 801524c:	2b00      	cmp	r3, #0
 801524e:	d0c6      	beq.n	80151de <_vfiprintf_r+0x156>
 8015250:	9105      	str	r1, [sp, #20]
 8015252:	e7c4      	b.n	80151de <_vfiprintf_r+0x156>
 8015254:	fb0c 2101 	mla	r1, ip, r1, r2
 8015258:	4604      	mov	r4, r0
 801525a:	2301      	movs	r3, #1
 801525c:	e7f0      	b.n	8015240 <_vfiprintf_r+0x1b8>
 801525e:	ab03      	add	r3, sp, #12
 8015260:	9300      	str	r3, [sp, #0]
 8015262:	462a      	mov	r2, r5
 8015264:	4b12      	ldr	r3, [pc, #72]	@ (80152b0 <_vfiprintf_r+0x228>)
 8015266:	a904      	add	r1, sp, #16
 8015268:	4630      	mov	r0, r6
 801526a:	f7fb fa8b 	bl	8010784 <_printf_float>
 801526e:	4607      	mov	r7, r0
 8015270:	1c78      	adds	r0, r7, #1
 8015272:	d1d6      	bne.n	8015222 <_vfiprintf_r+0x19a>
 8015274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015276:	07d9      	lsls	r1, r3, #31
 8015278:	d405      	bmi.n	8015286 <_vfiprintf_r+0x1fe>
 801527a:	89ab      	ldrh	r3, [r5, #12]
 801527c:	059a      	lsls	r2, r3, #22
 801527e:	d402      	bmi.n	8015286 <_vfiprintf_r+0x1fe>
 8015280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015282:	f7fc fa2d 	bl	80116e0 <__retarget_lock_release_recursive>
 8015286:	89ab      	ldrh	r3, [r5, #12]
 8015288:	065b      	lsls	r3, r3, #25
 801528a:	f53f af1f 	bmi.w	80150cc <_vfiprintf_r+0x44>
 801528e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015290:	e71e      	b.n	80150d0 <_vfiprintf_r+0x48>
 8015292:	ab03      	add	r3, sp, #12
 8015294:	9300      	str	r3, [sp, #0]
 8015296:	462a      	mov	r2, r5
 8015298:	4b05      	ldr	r3, [pc, #20]	@ (80152b0 <_vfiprintf_r+0x228>)
 801529a:	a904      	add	r1, sp, #16
 801529c:	4630      	mov	r0, r6
 801529e:	f7fb fd09 	bl	8010cb4 <_printf_i>
 80152a2:	e7e4      	b.n	801526e <_vfiprintf_r+0x1e6>
 80152a4:	080170e9 	.word	0x080170e9
 80152a8:	080170f3 	.word	0x080170f3
 80152ac:	08010785 	.word	0x08010785
 80152b0:	08015065 	.word	0x08015065
 80152b4:	080170ef 	.word	0x080170ef

080152b8 <__swbuf_r>:
 80152b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ba:	460e      	mov	r6, r1
 80152bc:	4614      	mov	r4, r2
 80152be:	4605      	mov	r5, r0
 80152c0:	b118      	cbz	r0, 80152ca <__swbuf_r+0x12>
 80152c2:	6a03      	ldr	r3, [r0, #32]
 80152c4:	b90b      	cbnz	r3, 80152ca <__swbuf_r+0x12>
 80152c6:	f7fc f8b5 	bl	8011434 <__sinit>
 80152ca:	69a3      	ldr	r3, [r4, #24]
 80152cc:	60a3      	str	r3, [r4, #8]
 80152ce:	89a3      	ldrh	r3, [r4, #12]
 80152d0:	071a      	lsls	r2, r3, #28
 80152d2:	d501      	bpl.n	80152d8 <__swbuf_r+0x20>
 80152d4:	6923      	ldr	r3, [r4, #16]
 80152d6:	b943      	cbnz	r3, 80152ea <__swbuf_r+0x32>
 80152d8:	4621      	mov	r1, r4
 80152da:	4628      	mov	r0, r5
 80152dc:	f000 f82a 	bl	8015334 <__swsetup_r>
 80152e0:	b118      	cbz	r0, 80152ea <__swbuf_r+0x32>
 80152e2:	f04f 37ff 	mov.w	r7, #4294967295
 80152e6:	4638      	mov	r0, r7
 80152e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152ea:	6823      	ldr	r3, [r4, #0]
 80152ec:	6922      	ldr	r2, [r4, #16]
 80152ee:	1a98      	subs	r0, r3, r2
 80152f0:	6963      	ldr	r3, [r4, #20]
 80152f2:	b2f6      	uxtb	r6, r6
 80152f4:	4283      	cmp	r3, r0
 80152f6:	4637      	mov	r7, r6
 80152f8:	dc05      	bgt.n	8015306 <__swbuf_r+0x4e>
 80152fa:	4621      	mov	r1, r4
 80152fc:	4628      	mov	r0, r5
 80152fe:	f7ff f97f 	bl	8014600 <_fflush_r>
 8015302:	2800      	cmp	r0, #0
 8015304:	d1ed      	bne.n	80152e2 <__swbuf_r+0x2a>
 8015306:	68a3      	ldr	r3, [r4, #8]
 8015308:	3b01      	subs	r3, #1
 801530a:	60a3      	str	r3, [r4, #8]
 801530c:	6823      	ldr	r3, [r4, #0]
 801530e:	1c5a      	adds	r2, r3, #1
 8015310:	6022      	str	r2, [r4, #0]
 8015312:	701e      	strb	r6, [r3, #0]
 8015314:	6962      	ldr	r2, [r4, #20]
 8015316:	1c43      	adds	r3, r0, #1
 8015318:	429a      	cmp	r2, r3
 801531a:	d004      	beq.n	8015326 <__swbuf_r+0x6e>
 801531c:	89a3      	ldrh	r3, [r4, #12]
 801531e:	07db      	lsls	r3, r3, #31
 8015320:	d5e1      	bpl.n	80152e6 <__swbuf_r+0x2e>
 8015322:	2e0a      	cmp	r6, #10
 8015324:	d1df      	bne.n	80152e6 <__swbuf_r+0x2e>
 8015326:	4621      	mov	r1, r4
 8015328:	4628      	mov	r0, r5
 801532a:	f7ff f969 	bl	8014600 <_fflush_r>
 801532e:	2800      	cmp	r0, #0
 8015330:	d0d9      	beq.n	80152e6 <__swbuf_r+0x2e>
 8015332:	e7d6      	b.n	80152e2 <__swbuf_r+0x2a>

08015334 <__swsetup_r>:
 8015334:	b538      	push	{r3, r4, r5, lr}
 8015336:	4b29      	ldr	r3, [pc, #164]	@ (80153dc <__swsetup_r+0xa8>)
 8015338:	4605      	mov	r5, r0
 801533a:	6818      	ldr	r0, [r3, #0]
 801533c:	460c      	mov	r4, r1
 801533e:	b118      	cbz	r0, 8015348 <__swsetup_r+0x14>
 8015340:	6a03      	ldr	r3, [r0, #32]
 8015342:	b90b      	cbnz	r3, 8015348 <__swsetup_r+0x14>
 8015344:	f7fc f876 	bl	8011434 <__sinit>
 8015348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801534c:	0719      	lsls	r1, r3, #28
 801534e:	d422      	bmi.n	8015396 <__swsetup_r+0x62>
 8015350:	06da      	lsls	r2, r3, #27
 8015352:	d407      	bmi.n	8015364 <__swsetup_r+0x30>
 8015354:	2209      	movs	r2, #9
 8015356:	602a      	str	r2, [r5, #0]
 8015358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801535c:	81a3      	strh	r3, [r4, #12]
 801535e:	f04f 30ff 	mov.w	r0, #4294967295
 8015362:	e033      	b.n	80153cc <__swsetup_r+0x98>
 8015364:	0758      	lsls	r0, r3, #29
 8015366:	d512      	bpl.n	801538e <__swsetup_r+0x5a>
 8015368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801536a:	b141      	cbz	r1, 801537e <__swsetup_r+0x4a>
 801536c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015370:	4299      	cmp	r1, r3
 8015372:	d002      	beq.n	801537a <__swsetup_r+0x46>
 8015374:	4628      	mov	r0, r5
 8015376:	f7fd f817 	bl	80123a8 <_free_r>
 801537a:	2300      	movs	r3, #0
 801537c:	6363      	str	r3, [r4, #52]	@ 0x34
 801537e:	89a3      	ldrh	r3, [r4, #12]
 8015380:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015384:	81a3      	strh	r3, [r4, #12]
 8015386:	2300      	movs	r3, #0
 8015388:	6063      	str	r3, [r4, #4]
 801538a:	6923      	ldr	r3, [r4, #16]
 801538c:	6023      	str	r3, [r4, #0]
 801538e:	89a3      	ldrh	r3, [r4, #12]
 8015390:	f043 0308 	orr.w	r3, r3, #8
 8015394:	81a3      	strh	r3, [r4, #12]
 8015396:	6923      	ldr	r3, [r4, #16]
 8015398:	b94b      	cbnz	r3, 80153ae <__swsetup_r+0x7a>
 801539a:	89a3      	ldrh	r3, [r4, #12]
 801539c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80153a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80153a4:	d003      	beq.n	80153ae <__swsetup_r+0x7a>
 80153a6:	4621      	mov	r1, r4
 80153a8:	4628      	mov	r0, r5
 80153aa:	f000 f883 	bl	80154b4 <__smakebuf_r>
 80153ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153b2:	f013 0201 	ands.w	r2, r3, #1
 80153b6:	d00a      	beq.n	80153ce <__swsetup_r+0x9a>
 80153b8:	2200      	movs	r2, #0
 80153ba:	60a2      	str	r2, [r4, #8]
 80153bc:	6962      	ldr	r2, [r4, #20]
 80153be:	4252      	negs	r2, r2
 80153c0:	61a2      	str	r2, [r4, #24]
 80153c2:	6922      	ldr	r2, [r4, #16]
 80153c4:	b942      	cbnz	r2, 80153d8 <__swsetup_r+0xa4>
 80153c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80153ca:	d1c5      	bne.n	8015358 <__swsetup_r+0x24>
 80153cc:	bd38      	pop	{r3, r4, r5, pc}
 80153ce:	0799      	lsls	r1, r3, #30
 80153d0:	bf58      	it	pl
 80153d2:	6962      	ldrpl	r2, [r4, #20]
 80153d4:	60a2      	str	r2, [r4, #8]
 80153d6:	e7f4      	b.n	80153c2 <__swsetup_r+0x8e>
 80153d8:	2000      	movs	r0, #0
 80153da:	e7f7      	b.n	80153cc <__swsetup_r+0x98>
 80153dc:	200001ac 	.word	0x200001ac

080153e0 <_raise_r>:
 80153e0:	291f      	cmp	r1, #31
 80153e2:	b538      	push	{r3, r4, r5, lr}
 80153e4:	4605      	mov	r5, r0
 80153e6:	460c      	mov	r4, r1
 80153e8:	d904      	bls.n	80153f4 <_raise_r+0x14>
 80153ea:	2316      	movs	r3, #22
 80153ec:	6003      	str	r3, [r0, #0]
 80153ee:	f04f 30ff 	mov.w	r0, #4294967295
 80153f2:	bd38      	pop	{r3, r4, r5, pc}
 80153f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80153f6:	b112      	cbz	r2, 80153fe <_raise_r+0x1e>
 80153f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80153fc:	b94b      	cbnz	r3, 8015412 <_raise_r+0x32>
 80153fe:	4628      	mov	r0, r5
 8015400:	f000 f830 	bl	8015464 <_getpid_r>
 8015404:	4622      	mov	r2, r4
 8015406:	4601      	mov	r1, r0
 8015408:	4628      	mov	r0, r5
 801540a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801540e:	f000 b817 	b.w	8015440 <_kill_r>
 8015412:	2b01      	cmp	r3, #1
 8015414:	d00a      	beq.n	801542c <_raise_r+0x4c>
 8015416:	1c59      	adds	r1, r3, #1
 8015418:	d103      	bne.n	8015422 <_raise_r+0x42>
 801541a:	2316      	movs	r3, #22
 801541c:	6003      	str	r3, [r0, #0]
 801541e:	2001      	movs	r0, #1
 8015420:	e7e7      	b.n	80153f2 <_raise_r+0x12>
 8015422:	2100      	movs	r1, #0
 8015424:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015428:	4620      	mov	r0, r4
 801542a:	4798      	blx	r3
 801542c:	2000      	movs	r0, #0
 801542e:	e7e0      	b.n	80153f2 <_raise_r+0x12>

08015430 <raise>:
 8015430:	4b02      	ldr	r3, [pc, #8]	@ (801543c <raise+0xc>)
 8015432:	4601      	mov	r1, r0
 8015434:	6818      	ldr	r0, [r3, #0]
 8015436:	f7ff bfd3 	b.w	80153e0 <_raise_r>
 801543a:	bf00      	nop
 801543c:	200001ac 	.word	0x200001ac

08015440 <_kill_r>:
 8015440:	b538      	push	{r3, r4, r5, lr}
 8015442:	4d07      	ldr	r5, [pc, #28]	@ (8015460 <_kill_r+0x20>)
 8015444:	2300      	movs	r3, #0
 8015446:	4604      	mov	r4, r0
 8015448:	4608      	mov	r0, r1
 801544a:	4611      	mov	r1, r2
 801544c:	602b      	str	r3, [r5, #0]
 801544e:	f7ee fcc1 	bl	8003dd4 <_kill>
 8015452:	1c43      	adds	r3, r0, #1
 8015454:	d102      	bne.n	801545c <_kill_r+0x1c>
 8015456:	682b      	ldr	r3, [r5, #0]
 8015458:	b103      	cbz	r3, 801545c <_kill_r+0x1c>
 801545a:	6023      	str	r3, [r4, #0]
 801545c:	bd38      	pop	{r3, r4, r5, pc}
 801545e:	bf00      	nop
 8015460:	20002668 	.word	0x20002668

08015464 <_getpid_r>:
 8015464:	f7ee bcae 	b.w	8003dc4 <_getpid>

08015468 <__swhatbuf_r>:
 8015468:	b570      	push	{r4, r5, r6, lr}
 801546a:	460c      	mov	r4, r1
 801546c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015470:	2900      	cmp	r1, #0
 8015472:	b096      	sub	sp, #88	@ 0x58
 8015474:	4615      	mov	r5, r2
 8015476:	461e      	mov	r6, r3
 8015478:	da0d      	bge.n	8015496 <__swhatbuf_r+0x2e>
 801547a:	89a3      	ldrh	r3, [r4, #12]
 801547c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015480:	f04f 0100 	mov.w	r1, #0
 8015484:	bf14      	ite	ne
 8015486:	2340      	movne	r3, #64	@ 0x40
 8015488:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801548c:	2000      	movs	r0, #0
 801548e:	6031      	str	r1, [r6, #0]
 8015490:	602b      	str	r3, [r5, #0]
 8015492:	b016      	add	sp, #88	@ 0x58
 8015494:	bd70      	pop	{r4, r5, r6, pc}
 8015496:	466a      	mov	r2, sp
 8015498:	f000 f848 	bl	801552c <_fstat_r>
 801549c:	2800      	cmp	r0, #0
 801549e:	dbec      	blt.n	801547a <__swhatbuf_r+0x12>
 80154a0:	9901      	ldr	r1, [sp, #4]
 80154a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80154a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80154aa:	4259      	negs	r1, r3
 80154ac:	4159      	adcs	r1, r3
 80154ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80154b2:	e7eb      	b.n	801548c <__swhatbuf_r+0x24>

080154b4 <__smakebuf_r>:
 80154b4:	898b      	ldrh	r3, [r1, #12]
 80154b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80154b8:	079d      	lsls	r5, r3, #30
 80154ba:	4606      	mov	r6, r0
 80154bc:	460c      	mov	r4, r1
 80154be:	d507      	bpl.n	80154d0 <__smakebuf_r+0x1c>
 80154c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80154c4:	6023      	str	r3, [r4, #0]
 80154c6:	6123      	str	r3, [r4, #16]
 80154c8:	2301      	movs	r3, #1
 80154ca:	6163      	str	r3, [r4, #20]
 80154cc:	b003      	add	sp, #12
 80154ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80154d0:	ab01      	add	r3, sp, #4
 80154d2:	466a      	mov	r2, sp
 80154d4:	f7ff ffc8 	bl	8015468 <__swhatbuf_r>
 80154d8:	9f00      	ldr	r7, [sp, #0]
 80154da:	4605      	mov	r5, r0
 80154dc:	4639      	mov	r1, r7
 80154de:	4630      	mov	r0, r6
 80154e0:	f7fc ffd6 	bl	8012490 <_malloc_r>
 80154e4:	b948      	cbnz	r0, 80154fa <__smakebuf_r+0x46>
 80154e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154ea:	059a      	lsls	r2, r3, #22
 80154ec:	d4ee      	bmi.n	80154cc <__smakebuf_r+0x18>
 80154ee:	f023 0303 	bic.w	r3, r3, #3
 80154f2:	f043 0302 	orr.w	r3, r3, #2
 80154f6:	81a3      	strh	r3, [r4, #12]
 80154f8:	e7e2      	b.n	80154c0 <__smakebuf_r+0xc>
 80154fa:	89a3      	ldrh	r3, [r4, #12]
 80154fc:	6020      	str	r0, [r4, #0]
 80154fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015502:	81a3      	strh	r3, [r4, #12]
 8015504:	9b01      	ldr	r3, [sp, #4]
 8015506:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801550a:	b15b      	cbz	r3, 8015524 <__smakebuf_r+0x70>
 801550c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015510:	4630      	mov	r0, r6
 8015512:	f000 f81d 	bl	8015550 <_isatty_r>
 8015516:	b128      	cbz	r0, 8015524 <__smakebuf_r+0x70>
 8015518:	89a3      	ldrh	r3, [r4, #12]
 801551a:	f023 0303 	bic.w	r3, r3, #3
 801551e:	f043 0301 	orr.w	r3, r3, #1
 8015522:	81a3      	strh	r3, [r4, #12]
 8015524:	89a3      	ldrh	r3, [r4, #12]
 8015526:	431d      	orrs	r5, r3
 8015528:	81a5      	strh	r5, [r4, #12]
 801552a:	e7cf      	b.n	80154cc <__smakebuf_r+0x18>

0801552c <_fstat_r>:
 801552c:	b538      	push	{r3, r4, r5, lr}
 801552e:	4d07      	ldr	r5, [pc, #28]	@ (801554c <_fstat_r+0x20>)
 8015530:	2300      	movs	r3, #0
 8015532:	4604      	mov	r4, r0
 8015534:	4608      	mov	r0, r1
 8015536:	4611      	mov	r1, r2
 8015538:	602b      	str	r3, [r5, #0]
 801553a:	f7ee fcab 	bl	8003e94 <_fstat>
 801553e:	1c43      	adds	r3, r0, #1
 8015540:	d102      	bne.n	8015548 <_fstat_r+0x1c>
 8015542:	682b      	ldr	r3, [r5, #0]
 8015544:	b103      	cbz	r3, 8015548 <_fstat_r+0x1c>
 8015546:	6023      	str	r3, [r4, #0]
 8015548:	bd38      	pop	{r3, r4, r5, pc}
 801554a:	bf00      	nop
 801554c:	20002668 	.word	0x20002668

08015550 <_isatty_r>:
 8015550:	b538      	push	{r3, r4, r5, lr}
 8015552:	4d06      	ldr	r5, [pc, #24]	@ (801556c <_isatty_r+0x1c>)
 8015554:	2300      	movs	r3, #0
 8015556:	4604      	mov	r4, r0
 8015558:	4608      	mov	r0, r1
 801555a:	602b      	str	r3, [r5, #0]
 801555c:	f7ee fcaa 	bl	8003eb4 <_isatty>
 8015560:	1c43      	adds	r3, r0, #1
 8015562:	d102      	bne.n	801556a <_isatty_r+0x1a>
 8015564:	682b      	ldr	r3, [r5, #0]
 8015566:	b103      	cbz	r3, 801556a <_isatty_r+0x1a>
 8015568:	6023      	str	r3, [r4, #0]
 801556a:	bd38      	pop	{r3, r4, r5, pc}
 801556c:	20002668 	.word	0x20002668

08015570 <acos>:
 8015570:	b538      	push	{r3, r4, r5, lr}
 8015572:	ed2d 8b02 	vpush	{d8}
 8015576:	ec55 4b10 	vmov	r4, r5, d0
 801557a:	f000 f9b9 	bl	80158f0 <__ieee754_acos>
 801557e:	4622      	mov	r2, r4
 8015580:	462b      	mov	r3, r5
 8015582:	4620      	mov	r0, r4
 8015584:	4629      	mov	r1, r5
 8015586:	eeb0 8a40 	vmov.f32	s16, s0
 801558a:	eef0 8a60 	vmov.f32	s17, s1
 801558e:	f7eb faf5 	bl	8000b7c <__aeabi_dcmpun>
 8015592:	b9a8      	cbnz	r0, 80155c0 <acos+0x50>
 8015594:	ec45 4b10 	vmov	d0, r4, r5
 8015598:	f000 f8ba 	bl	8015710 <fabs>
 801559c:	4b0c      	ldr	r3, [pc, #48]	@ (80155d0 <acos+0x60>)
 801559e:	ec51 0b10 	vmov	r0, r1, d0
 80155a2:	2200      	movs	r2, #0
 80155a4:	f7eb fae0 	bl	8000b68 <__aeabi_dcmpgt>
 80155a8:	b150      	cbz	r0, 80155c0 <acos+0x50>
 80155aa:	f7fc f86d 	bl	8011688 <__errno>
 80155ae:	ecbd 8b02 	vpop	{d8}
 80155b2:	2321      	movs	r3, #33	@ 0x21
 80155b4:	6003      	str	r3, [r0, #0]
 80155b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80155ba:	4806      	ldr	r0, [pc, #24]	@ (80155d4 <acos+0x64>)
 80155bc:	f7ff b8e8 	b.w	8014790 <nan>
 80155c0:	eeb0 0a48 	vmov.f32	s0, s16
 80155c4:	eef0 0a68 	vmov.f32	s1, s17
 80155c8:	ecbd 8b02 	vpop	{d8}
 80155cc:	bd38      	pop	{r3, r4, r5, pc}
 80155ce:	bf00      	nop
 80155d0:	3ff00000 	.word	0x3ff00000
 80155d4:	08017158 	.word	0x08017158

080155d8 <pow>:
 80155d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80155da:	ed2d 8b02 	vpush	{d8}
 80155de:	eeb0 8a40 	vmov.f32	s16, s0
 80155e2:	eef0 8a60 	vmov.f32	s17, s1
 80155e6:	ec55 4b11 	vmov	r4, r5, d1
 80155ea:	f000 fbdd 	bl	8015da8 <__ieee754_pow>
 80155ee:	4622      	mov	r2, r4
 80155f0:	462b      	mov	r3, r5
 80155f2:	4620      	mov	r0, r4
 80155f4:	4629      	mov	r1, r5
 80155f6:	ec57 6b10 	vmov	r6, r7, d0
 80155fa:	f7eb fabf 	bl	8000b7c <__aeabi_dcmpun>
 80155fe:	2800      	cmp	r0, #0
 8015600:	d13b      	bne.n	801567a <pow+0xa2>
 8015602:	ec51 0b18 	vmov	r0, r1, d8
 8015606:	2200      	movs	r2, #0
 8015608:	2300      	movs	r3, #0
 801560a:	f7eb fa85 	bl	8000b18 <__aeabi_dcmpeq>
 801560e:	b1b8      	cbz	r0, 8015640 <pow+0x68>
 8015610:	2200      	movs	r2, #0
 8015612:	2300      	movs	r3, #0
 8015614:	4620      	mov	r0, r4
 8015616:	4629      	mov	r1, r5
 8015618:	f7eb fa7e 	bl	8000b18 <__aeabi_dcmpeq>
 801561c:	2800      	cmp	r0, #0
 801561e:	d146      	bne.n	80156ae <pow+0xd6>
 8015620:	ec45 4b10 	vmov	d0, r4, r5
 8015624:	f000 f87c 	bl	8015720 <finite>
 8015628:	b338      	cbz	r0, 801567a <pow+0xa2>
 801562a:	2200      	movs	r2, #0
 801562c:	2300      	movs	r3, #0
 801562e:	4620      	mov	r0, r4
 8015630:	4629      	mov	r1, r5
 8015632:	f7eb fa7b 	bl	8000b2c <__aeabi_dcmplt>
 8015636:	b300      	cbz	r0, 801567a <pow+0xa2>
 8015638:	f7fc f826 	bl	8011688 <__errno>
 801563c:	2322      	movs	r3, #34	@ 0x22
 801563e:	e01b      	b.n	8015678 <pow+0xa0>
 8015640:	ec47 6b10 	vmov	d0, r6, r7
 8015644:	f000 f86c 	bl	8015720 <finite>
 8015648:	b9e0      	cbnz	r0, 8015684 <pow+0xac>
 801564a:	eeb0 0a48 	vmov.f32	s0, s16
 801564e:	eef0 0a68 	vmov.f32	s1, s17
 8015652:	f000 f865 	bl	8015720 <finite>
 8015656:	b1a8      	cbz	r0, 8015684 <pow+0xac>
 8015658:	ec45 4b10 	vmov	d0, r4, r5
 801565c:	f000 f860 	bl	8015720 <finite>
 8015660:	b180      	cbz	r0, 8015684 <pow+0xac>
 8015662:	4632      	mov	r2, r6
 8015664:	463b      	mov	r3, r7
 8015666:	4630      	mov	r0, r6
 8015668:	4639      	mov	r1, r7
 801566a:	f7eb fa87 	bl	8000b7c <__aeabi_dcmpun>
 801566e:	2800      	cmp	r0, #0
 8015670:	d0e2      	beq.n	8015638 <pow+0x60>
 8015672:	f7fc f809 	bl	8011688 <__errno>
 8015676:	2321      	movs	r3, #33	@ 0x21
 8015678:	6003      	str	r3, [r0, #0]
 801567a:	ecbd 8b02 	vpop	{d8}
 801567e:	ec47 6b10 	vmov	d0, r6, r7
 8015682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015684:	2200      	movs	r2, #0
 8015686:	2300      	movs	r3, #0
 8015688:	4630      	mov	r0, r6
 801568a:	4639      	mov	r1, r7
 801568c:	f7eb fa44 	bl	8000b18 <__aeabi_dcmpeq>
 8015690:	2800      	cmp	r0, #0
 8015692:	d0f2      	beq.n	801567a <pow+0xa2>
 8015694:	eeb0 0a48 	vmov.f32	s0, s16
 8015698:	eef0 0a68 	vmov.f32	s1, s17
 801569c:	f000 f840 	bl	8015720 <finite>
 80156a0:	2800      	cmp	r0, #0
 80156a2:	d0ea      	beq.n	801567a <pow+0xa2>
 80156a4:	ec45 4b10 	vmov	d0, r4, r5
 80156a8:	f000 f83a 	bl	8015720 <finite>
 80156ac:	e7c3      	b.n	8015636 <pow+0x5e>
 80156ae:	4f01      	ldr	r7, [pc, #4]	@ (80156b4 <pow+0xdc>)
 80156b0:	2600      	movs	r6, #0
 80156b2:	e7e2      	b.n	801567a <pow+0xa2>
 80156b4:	3ff00000 	.word	0x3ff00000

080156b8 <sqrt>:
 80156b8:	b538      	push	{r3, r4, r5, lr}
 80156ba:	ed2d 8b02 	vpush	{d8}
 80156be:	ec55 4b10 	vmov	r4, r5, d0
 80156c2:	f000 f839 	bl	8015738 <__ieee754_sqrt>
 80156c6:	4622      	mov	r2, r4
 80156c8:	462b      	mov	r3, r5
 80156ca:	4620      	mov	r0, r4
 80156cc:	4629      	mov	r1, r5
 80156ce:	eeb0 8a40 	vmov.f32	s16, s0
 80156d2:	eef0 8a60 	vmov.f32	s17, s1
 80156d6:	f7eb fa51 	bl	8000b7c <__aeabi_dcmpun>
 80156da:	b990      	cbnz	r0, 8015702 <sqrt+0x4a>
 80156dc:	2200      	movs	r2, #0
 80156de:	2300      	movs	r3, #0
 80156e0:	4620      	mov	r0, r4
 80156e2:	4629      	mov	r1, r5
 80156e4:	f7eb fa22 	bl	8000b2c <__aeabi_dcmplt>
 80156e8:	b158      	cbz	r0, 8015702 <sqrt+0x4a>
 80156ea:	f7fb ffcd 	bl	8011688 <__errno>
 80156ee:	2321      	movs	r3, #33	@ 0x21
 80156f0:	6003      	str	r3, [r0, #0]
 80156f2:	2200      	movs	r2, #0
 80156f4:	2300      	movs	r3, #0
 80156f6:	4610      	mov	r0, r2
 80156f8:	4619      	mov	r1, r3
 80156fa:	f7eb f8cf 	bl	800089c <__aeabi_ddiv>
 80156fe:	ec41 0b18 	vmov	d8, r0, r1
 8015702:	eeb0 0a48 	vmov.f32	s0, s16
 8015706:	eef0 0a68 	vmov.f32	s1, s17
 801570a:	ecbd 8b02 	vpop	{d8}
 801570e:	bd38      	pop	{r3, r4, r5, pc}

08015710 <fabs>:
 8015710:	ec51 0b10 	vmov	r0, r1, d0
 8015714:	4602      	mov	r2, r0
 8015716:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801571a:	ec43 2b10 	vmov	d0, r2, r3
 801571e:	4770      	bx	lr

08015720 <finite>:
 8015720:	b082      	sub	sp, #8
 8015722:	ed8d 0b00 	vstr	d0, [sp]
 8015726:	9801      	ldr	r0, [sp, #4]
 8015728:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 801572c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015730:	0fc0      	lsrs	r0, r0, #31
 8015732:	b002      	add	sp, #8
 8015734:	4770      	bx	lr
	...

08015738 <__ieee754_sqrt>:
 8015738:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801573c:	4a68      	ldr	r2, [pc, #416]	@ (80158e0 <__ieee754_sqrt+0x1a8>)
 801573e:	ec55 4b10 	vmov	r4, r5, d0
 8015742:	43aa      	bics	r2, r5
 8015744:	462b      	mov	r3, r5
 8015746:	4621      	mov	r1, r4
 8015748:	d110      	bne.n	801576c <__ieee754_sqrt+0x34>
 801574a:	4622      	mov	r2, r4
 801574c:	4620      	mov	r0, r4
 801574e:	4629      	mov	r1, r5
 8015750:	f7ea ff7a 	bl	8000648 <__aeabi_dmul>
 8015754:	4602      	mov	r2, r0
 8015756:	460b      	mov	r3, r1
 8015758:	4620      	mov	r0, r4
 801575a:	4629      	mov	r1, r5
 801575c:	f7ea fdbe 	bl	80002dc <__adddf3>
 8015760:	4604      	mov	r4, r0
 8015762:	460d      	mov	r5, r1
 8015764:	ec45 4b10 	vmov	d0, r4, r5
 8015768:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801576c:	2d00      	cmp	r5, #0
 801576e:	dc0e      	bgt.n	801578e <__ieee754_sqrt+0x56>
 8015770:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8015774:	4322      	orrs	r2, r4
 8015776:	d0f5      	beq.n	8015764 <__ieee754_sqrt+0x2c>
 8015778:	b19d      	cbz	r5, 80157a2 <__ieee754_sqrt+0x6a>
 801577a:	4622      	mov	r2, r4
 801577c:	4620      	mov	r0, r4
 801577e:	4629      	mov	r1, r5
 8015780:	f7ea fdaa 	bl	80002d8 <__aeabi_dsub>
 8015784:	4602      	mov	r2, r0
 8015786:	460b      	mov	r3, r1
 8015788:	f7eb f888 	bl	800089c <__aeabi_ddiv>
 801578c:	e7e8      	b.n	8015760 <__ieee754_sqrt+0x28>
 801578e:	152a      	asrs	r2, r5, #20
 8015790:	d115      	bne.n	80157be <__ieee754_sqrt+0x86>
 8015792:	2000      	movs	r0, #0
 8015794:	e009      	b.n	80157aa <__ieee754_sqrt+0x72>
 8015796:	0acb      	lsrs	r3, r1, #11
 8015798:	3a15      	subs	r2, #21
 801579a:	0549      	lsls	r1, r1, #21
 801579c:	2b00      	cmp	r3, #0
 801579e:	d0fa      	beq.n	8015796 <__ieee754_sqrt+0x5e>
 80157a0:	e7f7      	b.n	8015792 <__ieee754_sqrt+0x5a>
 80157a2:	462a      	mov	r2, r5
 80157a4:	e7fa      	b.n	801579c <__ieee754_sqrt+0x64>
 80157a6:	005b      	lsls	r3, r3, #1
 80157a8:	3001      	adds	r0, #1
 80157aa:	02dc      	lsls	r4, r3, #11
 80157ac:	d5fb      	bpl.n	80157a6 <__ieee754_sqrt+0x6e>
 80157ae:	1e44      	subs	r4, r0, #1
 80157b0:	1b12      	subs	r2, r2, r4
 80157b2:	f1c0 0420 	rsb	r4, r0, #32
 80157b6:	fa21 f404 	lsr.w	r4, r1, r4
 80157ba:	4323      	orrs	r3, r4
 80157bc:	4081      	lsls	r1, r0
 80157be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157c2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 80157c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80157ca:	07d2      	lsls	r2, r2, #31
 80157cc:	bf5c      	itt	pl
 80157ce:	005b      	lslpl	r3, r3, #1
 80157d0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80157d4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80157d8:	bf58      	it	pl
 80157da:	0049      	lslpl	r1, r1, #1
 80157dc:	2600      	movs	r6, #0
 80157de:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80157e2:	106d      	asrs	r5, r5, #1
 80157e4:	0049      	lsls	r1, r1, #1
 80157e6:	2016      	movs	r0, #22
 80157e8:	4632      	mov	r2, r6
 80157ea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80157ee:	1917      	adds	r7, r2, r4
 80157f0:	429f      	cmp	r7, r3
 80157f2:	bfde      	ittt	le
 80157f4:	193a      	addle	r2, r7, r4
 80157f6:	1bdb      	suble	r3, r3, r7
 80157f8:	1936      	addle	r6, r6, r4
 80157fa:	0fcf      	lsrs	r7, r1, #31
 80157fc:	3801      	subs	r0, #1
 80157fe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8015802:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015806:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801580a:	d1f0      	bne.n	80157ee <__ieee754_sqrt+0xb6>
 801580c:	4604      	mov	r4, r0
 801580e:	2720      	movs	r7, #32
 8015810:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8015814:	429a      	cmp	r2, r3
 8015816:	eb00 0e0c 	add.w	lr, r0, ip
 801581a:	db02      	blt.n	8015822 <__ieee754_sqrt+0xea>
 801581c:	d113      	bne.n	8015846 <__ieee754_sqrt+0x10e>
 801581e:	458e      	cmp	lr, r1
 8015820:	d811      	bhi.n	8015846 <__ieee754_sqrt+0x10e>
 8015822:	f1be 0f00 	cmp.w	lr, #0
 8015826:	eb0e 000c 	add.w	r0, lr, ip
 801582a:	da42      	bge.n	80158b2 <__ieee754_sqrt+0x17a>
 801582c:	2800      	cmp	r0, #0
 801582e:	db40      	blt.n	80158b2 <__ieee754_sqrt+0x17a>
 8015830:	f102 0801 	add.w	r8, r2, #1
 8015834:	1a9b      	subs	r3, r3, r2
 8015836:	458e      	cmp	lr, r1
 8015838:	bf88      	it	hi
 801583a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801583e:	eba1 010e 	sub.w	r1, r1, lr
 8015842:	4464      	add	r4, ip
 8015844:	4642      	mov	r2, r8
 8015846:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 801584a:	3f01      	subs	r7, #1
 801584c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8015850:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015854:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8015858:	d1dc      	bne.n	8015814 <__ieee754_sqrt+0xdc>
 801585a:	4319      	orrs	r1, r3
 801585c:	d01b      	beq.n	8015896 <__ieee754_sqrt+0x15e>
 801585e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80158e4 <__ieee754_sqrt+0x1ac>
 8015862:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80158e8 <__ieee754_sqrt+0x1b0>
 8015866:	e9da 0100 	ldrd	r0, r1, [sl]
 801586a:	e9db 2300 	ldrd	r2, r3, [fp]
 801586e:	f7ea fd33 	bl	80002d8 <__aeabi_dsub>
 8015872:	e9da 8900 	ldrd	r8, r9, [sl]
 8015876:	4602      	mov	r2, r0
 8015878:	460b      	mov	r3, r1
 801587a:	4640      	mov	r0, r8
 801587c:	4649      	mov	r1, r9
 801587e:	f7eb f95f 	bl	8000b40 <__aeabi_dcmple>
 8015882:	b140      	cbz	r0, 8015896 <__ieee754_sqrt+0x15e>
 8015884:	f1b4 3fff 	cmp.w	r4, #4294967295
 8015888:	e9da 0100 	ldrd	r0, r1, [sl]
 801588c:	e9db 2300 	ldrd	r2, r3, [fp]
 8015890:	d111      	bne.n	80158b6 <__ieee754_sqrt+0x17e>
 8015892:	3601      	adds	r6, #1
 8015894:	463c      	mov	r4, r7
 8015896:	1072      	asrs	r2, r6, #1
 8015898:	0863      	lsrs	r3, r4, #1
 801589a:	07f1      	lsls	r1, r6, #31
 801589c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 80158a0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 80158a4:	bf48      	it	mi
 80158a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 80158aa:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 80158ae:	4618      	mov	r0, r3
 80158b0:	e756      	b.n	8015760 <__ieee754_sqrt+0x28>
 80158b2:	4690      	mov	r8, r2
 80158b4:	e7be      	b.n	8015834 <__ieee754_sqrt+0xfc>
 80158b6:	f7ea fd11 	bl	80002dc <__adddf3>
 80158ba:	e9da 8900 	ldrd	r8, r9, [sl]
 80158be:	4602      	mov	r2, r0
 80158c0:	460b      	mov	r3, r1
 80158c2:	4640      	mov	r0, r8
 80158c4:	4649      	mov	r1, r9
 80158c6:	f7eb f931 	bl	8000b2c <__aeabi_dcmplt>
 80158ca:	b120      	cbz	r0, 80158d6 <__ieee754_sqrt+0x19e>
 80158cc:	1ca0      	adds	r0, r4, #2
 80158ce:	bf08      	it	eq
 80158d0:	3601      	addeq	r6, #1
 80158d2:	3402      	adds	r4, #2
 80158d4:	e7df      	b.n	8015896 <__ieee754_sqrt+0x15e>
 80158d6:	1c63      	adds	r3, r4, #1
 80158d8:	f023 0401 	bic.w	r4, r3, #1
 80158dc:	e7db      	b.n	8015896 <__ieee754_sqrt+0x15e>
 80158de:	bf00      	nop
 80158e0:	7ff00000 	.word	0x7ff00000
 80158e4:	20000370 	.word	0x20000370
 80158e8:	20000368 	.word	0x20000368
 80158ec:	00000000 	.word	0x00000000

080158f0 <__ieee754_acos>:
 80158f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158f4:	ec55 4b10 	vmov	r4, r5, d0
 80158f8:	49b7      	ldr	r1, [pc, #732]	@ (8015bd8 <__ieee754_acos+0x2e8>)
 80158fa:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80158fe:	428b      	cmp	r3, r1
 8015900:	d919      	bls.n	8015936 <__ieee754_acos+0x46>
 8015902:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 8015906:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 801590a:	4323      	orrs	r3, r4
 801590c:	d106      	bne.n	801591c <__ieee754_acos+0x2c>
 801590e:	2d00      	cmp	r5, #0
 8015910:	f340 8210 	ble.w	8015d34 <__ieee754_acos+0x444>
 8015914:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8015b68 <__ieee754_acos+0x278>
 8015918:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801591c:	4622      	mov	r2, r4
 801591e:	462b      	mov	r3, r5
 8015920:	4620      	mov	r0, r4
 8015922:	4629      	mov	r1, r5
 8015924:	f7ea fcd8 	bl	80002d8 <__aeabi_dsub>
 8015928:	4602      	mov	r2, r0
 801592a:	460b      	mov	r3, r1
 801592c:	f7ea ffb6 	bl	800089c <__aeabi_ddiv>
 8015930:	ec41 0b10 	vmov	d0, r0, r1
 8015934:	e7f0      	b.n	8015918 <__ieee754_acos+0x28>
 8015936:	49a9      	ldr	r1, [pc, #676]	@ (8015bdc <__ieee754_acos+0x2ec>)
 8015938:	428b      	cmp	r3, r1
 801593a:	f200 8085 	bhi.w	8015a48 <__ieee754_acos+0x158>
 801593e:	4aa8      	ldr	r2, [pc, #672]	@ (8015be0 <__ieee754_acos+0x2f0>)
 8015940:	4293      	cmp	r3, r2
 8015942:	f240 81fa 	bls.w	8015d3a <__ieee754_acos+0x44a>
 8015946:	4622      	mov	r2, r4
 8015948:	462b      	mov	r3, r5
 801594a:	4620      	mov	r0, r4
 801594c:	4629      	mov	r1, r5
 801594e:	f7ea fe7b 	bl	8000648 <__aeabi_dmul>
 8015952:	a387      	add	r3, pc, #540	@ (adr r3, 8015b70 <__ieee754_acos+0x280>)
 8015954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015958:	4606      	mov	r6, r0
 801595a:	460f      	mov	r7, r1
 801595c:	f7ea fe74 	bl	8000648 <__aeabi_dmul>
 8015960:	a385      	add	r3, pc, #532	@ (adr r3, 8015b78 <__ieee754_acos+0x288>)
 8015962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015966:	f7ea fcb9 	bl	80002dc <__adddf3>
 801596a:	4632      	mov	r2, r6
 801596c:	463b      	mov	r3, r7
 801596e:	f7ea fe6b 	bl	8000648 <__aeabi_dmul>
 8015972:	a383      	add	r3, pc, #524	@ (adr r3, 8015b80 <__ieee754_acos+0x290>)
 8015974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015978:	f7ea fcae 	bl	80002d8 <__aeabi_dsub>
 801597c:	4632      	mov	r2, r6
 801597e:	463b      	mov	r3, r7
 8015980:	f7ea fe62 	bl	8000648 <__aeabi_dmul>
 8015984:	a380      	add	r3, pc, #512	@ (adr r3, 8015b88 <__ieee754_acos+0x298>)
 8015986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801598a:	f7ea fca7 	bl	80002dc <__adddf3>
 801598e:	4632      	mov	r2, r6
 8015990:	463b      	mov	r3, r7
 8015992:	f7ea fe59 	bl	8000648 <__aeabi_dmul>
 8015996:	a37e      	add	r3, pc, #504	@ (adr r3, 8015b90 <__ieee754_acos+0x2a0>)
 8015998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801599c:	f7ea fc9c 	bl	80002d8 <__aeabi_dsub>
 80159a0:	4632      	mov	r2, r6
 80159a2:	463b      	mov	r3, r7
 80159a4:	f7ea fe50 	bl	8000648 <__aeabi_dmul>
 80159a8:	a37b      	add	r3, pc, #492	@ (adr r3, 8015b98 <__ieee754_acos+0x2a8>)
 80159aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159ae:	f7ea fc95 	bl	80002dc <__adddf3>
 80159b2:	4632      	mov	r2, r6
 80159b4:	463b      	mov	r3, r7
 80159b6:	f7ea fe47 	bl	8000648 <__aeabi_dmul>
 80159ba:	a379      	add	r3, pc, #484	@ (adr r3, 8015ba0 <__ieee754_acos+0x2b0>)
 80159bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159c0:	4680      	mov	r8, r0
 80159c2:	4689      	mov	r9, r1
 80159c4:	4630      	mov	r0, r6
 80159c6:	4639      	mov	r1, r7
 80159c8:	f7ea fe3e 	bl	8000648 <__aeabi_dmul>
 80159cc:	a376      	add	r3, pc, #472	@ (adr r3, 8015ba8 <__ieee754_acos+0x2b8>)
 80159ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159d2:	f7ea fc81 	bl	80002d8 <__aeabi_dsub>
 80159d6:	4632      	mov	r2, r6
 80159d8:	463b      	mov	r3, r7
 80159da:	f7ea fe35 	bl	8000648 <__aeabi_dmul>
 80159de:	a374      	add	r3, pc, #464	@ (adr r3, 8015bb0 <__ieee754_acos+0x2c0>)
 80159e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159e4:	f7ea fc7a 	bl	80002dc <__adddf3>
 80159e8:	4632      	mov	r2, r6
 80159ea:	463b      	mov	r3, r7
 80159ec:	f7ea fe2c 	bl	8000648 <__aeabi_dmul>
 80159f0:	a371      	add	r3, pc, #452	@ (adr r3, 8015bb8 <__ieee754_acos+0x2c8>)
 80159f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159f6:	f7ea fc6f 	bl	80002d8 <__aeabi_dsub>
 80159fa:	4632      	mov	r2, r6
 80159fc:	463b      	mov	r3, r7
 80159fe:	f7ea fe23 	bl	8000648 <__aeabi_dmul>
 8015a02:	4b78      	ldr	r3, [pc, #480]	@ (8015be4 <__ieee754_acos+0x2f4>)
 8015a04:	2200      	movs	r2, #0
 8015a06:	f7ea fc69 	bl	80002dc <__adddf3>
 8015a0a:	4602      	mov	r2, r0
 8015a0c:	460b      	mov	r3, r1
 8015a0e:	4640      	mov	r0, r8
 8015a10:	4649      	mov	r1, r9
 8015a12:	f7ea ff43 	bl	800089c <__aeabi_ddiv>
 8015a16:	4622      	mov	r2, r4
 8015a18:	462b      	mov	r3, r5
 8015a1a:	f7ea fe15 	bl	8000648 <__aeabi_dmul>
 8015a1e:	4602      	mov	r2, r0
 8015a20:	460b      	mov	r3, r1
 8015a22:	a167      	add	r1, pc, #412	@ (adr r1, 8015bc0 <__ieee754_acos+0x2d0>)
 8015a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a28:	f7ea fc56 	bl	80002d8 <__aeabi_dsub>
 8015a2c:	4602      	mov	r2, r0
 8015a2e:	460b      	mov	r3, r1
 8015a30:	4620      	mov	r0, r4
 8015a32:	4629      	mov	r1, r5
 8015a34:	f7ea fc50 	bl	80002d8 <__aeabi_dsub>
 8015a38:	4602      	mov	r2, r0
 8015a3a:	460b      	mov	r3, r1
 8015a3c:	a162      	add	r1, pc, #392	@ (adr r1, 8015bc8 <__ieee754_acos+0x2d8>)
 8015a3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015a42:	f7ea fc49 	bl	80002d8 <__aeabi_dsub>
 8015a46:	e773      	b.n	8015930 <__ieee754_acos+0x40>
 8015a48:	2d00      	cmp	r5, #0
 8015a4a:	f280 80cf 	bge.w	8015bec <__ieee754_acos+0x2fc>
 8015a4e:	4b65      	ldr	r3, [pc, #404]	@ (8015be4 <__ieee754_acos+0x2f4>)
 8015a50:	2200      	movs	r2, #0
 8015a52:	4620      	mov	r0, r4
 8015a54:	4629      	mov	r1, r5
 8015a56:	f7ea fc41 	bl	80002dc <__adddf3>
 8015a5a:	4b63      	ldr	r3, [pc, #396]	@ (8015be8 <__ieee754_acos+0x2f8>)
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	f7ea fdf3 	bl	8000648 <__aeabi_dmul>
 8015a62:	a343      	add	r3, pc, #268	@ (adr r3, 8015b70 <__ieee754_acos+0x280>)
 8015a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a68:	4604      	mov	r4, r0
 8015a6a:	460d      	mov	r5, r1
 8015a6c:	f7ea fdec 	bl	8000648 <__aeabi_dmul>
 8015a70:	a341      	add	r3, pc, #260	@ (adr r3, 8015b78 <__ieee754_acos+0x288>)
 8015a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a76:	f7ea fc31 	bl	80002dc <__adddf3>
 8015a7a:	4622      	mov	r2, r4
 8015a7c:	462b      	mov	r3, r5
 8015a7e:	f7ea fde3 	bl	8000648 <__aeabi_dmul>
 8015a82:	a33f      	add	r3, pc, #252	@ (adr r3, 8015b80 <__ieee754_acos+0x290>)
 8015a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a88:	f7ea fc26 	bl	80002d8 <__aeabi_dsub>
 8015a8c:	4622      	mov	r2, r4
 8015a8e:	462b      	mov	r3, r5
 8015a90:	f7ea fdda 	bl	8000648 <__aeabi_dmul>
 8015a94:	a33c      	add	r3, pc, #240	@ (adr r3, 8015b88 <__ieee754_acos+0x298>)
 8015a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a9a:	f7ea fc1f 	bl	80002dc <__adddf3>
 8015a9e:	4622      	mov	r2, r4
 8015aa0:	462b      	mov	r3, r5
 8015aa2:	f7ea fdd1 	bl	8000648 <__aeabi_dmul>
 8015aa6:	a33a      	add	r3, pc, #232	@ (adr r3, 8015b90 <__ieee754_acos+0x2a0>)
 8015aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aac:	f7ea fc14 	bl	80002d8 <__aeabi_dsub>
 8015ab0:	4622      	mov	r2, r4
 8015ab2:	462b      	mov	r3, r5
 8015ab4:	f7ea fdc8 	bl	8000648 <__aeabi_dmul>
 8015ab8:	a337      	add	r3, pc, #220	@ (adr r3, 8015b98 <__ieee754_acos+0x2a8>)
 8015aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015abe:	f7ea fc0d 	bl	80002dc <__adddf3>
 8015ac2:	4622      	mov	r2, r4
 8015ac4:	462b      	mov	r3, r5
 8015ac6:	f7ea fdbf 	bl	8000648 <__aeabi_dmul>
 8015aca:	a335      	add	r3, pc, #212	@ (adr r3, 8015ba0 <__ieee754_acos+0x2b0>)
 8015acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ad0:	4606      	mov	r6, r0
 8015ad2:	460f      	mov	r7, r1
 8015ad4:	4620      	mov	r0, r4
 8015ad6:	4629      	mov	r1, r5
 8015ad8:	f7ea fdb6 	bl	8000648 <__aeabi_dmul>
 8015adc:	a332      	add	r3, pc, #200	@ (adr r3, 8015ba8 <__ieee754_acos+0x2b8>)
 8015ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ae2:	f7ea fbf9 	bl	80002d8 <__aeabi_dsub>
 8015ae6:	4622      	mov	r2, r4
 8015ae8:	462b      	mov	r3, r5
 8015aea:	f7ea fdad 	bl	8000648 <__aeabi_dmul>
 8015aee:	a330      	add	r3, pc, #192	@ (adr r3, 8015bb0 <__ieee754_acos+0x2c0>)
 8015af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015af4:	f7ea fbf2 	bl	80002dc <__adddf3>
 8015af8:	4622      	mov	r2, r4
 8015afa:	462b      	mov	r3, r5
 8015afc:	f7ea fda4 	bl	8000648 <__aeabi_dmul>
 8015b00:	a32d      	add	r3, pc, #180	@ (adr r3, 8015bb8 <__ieee754_acos+0x2c8>)
 8015b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b06:	f7ea fbe7 	bl	80002d8 <__aeabi_dsub>
 8015b0a:	4622      	mov	r2, r4
 8015b0c:	462b      	mov	r3, r5
 8015b0e:	f7ea fd9b 	bl	8000648 <__aeabi_dmul>
 8015b12:	4b34      	ldr	r3, [pc, #208]	@ (8015be4 <__ieee754_acos+0x2f4>)
 8015b14:	2200      	movs	r2, #0
 8015b16:	f7ea fbe1 	bl	80002dc <__adddf3>
 8015b1a:	ec45 4b10 	vmov	d0, r4, r5
 8015b1e:	4680      	mov	r8, r0
 8015b20:	4689      	mov	r9, r1
 8015b22:	f7ff fe09 	bl	8015738 <__ieee754_sqrt>
 8015b26:	ec55 4b10 	vmov	r4, r5, d0
 8015b2a:	4642      	mov	r2, r8
 8015b2c:	464b      	mov	r3, r9
 8015b2e:	4630      	mov	r0, r6
 8015b30:	4639      	mov	r1, r7
 8015b32:	f7ea feb3 	bl	800089c <__aeabi_ddiv>
 8015b36:	4622      	mov	r2, r4
 8015b38:	462b      	mov	r3, r5
 8015b3a:	f7ea fd85 	bl	8000648 <__aeabi_dmul>
 8015b3e:	a320      	add	r3, pc, #128	@ (adr r3, 8015bc0 <__ieee754_acos+0x2d0>)
 8015b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b44:	f7ea fbc8 	bl	80002d8 <__aeabi_dsub>
 8015b48:	4622      	mov	r2, r4
 8015b4a:	462b      	mov	r3, r5
 8015b4c:	f7ea fbc6 	bl	80002dc <__adddf3>
 8015b50:	4602      	mov	r2, r0
 8015b52:	460b      	mov	r3, r1
 8015b54:	f7ea fbc2 	bl	80002dc <__adddf3>
 8015b58:	4602      	mov	r2, r0
 8015b5a:	460b      	mov	r3, r1
 8015b5c:	a11c      	add	r1, pc, #112	@ (adr r1, 8015bd0 <__ieee754_acos+0x2e0>)
 8015b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b62:	e76e      	b.n	8015a42 <__ieee754_acos+0x152>
 8015b64:	f3af 8000 	nop.w
	...
 8015b70:	0dfdf709 	.word	0x0dfdf709
 8015b74:	3f023de1 	.word	0x3f023de1
 8015b78:	7501b288 	.word	0x7501b288
 8015b7c:	3f49efe0 	.word	0x3f49efe0
 8015b80:	b5688f3b 	.word	0xb5688f3b
 8015b84:	3fa48228 	.word	0x3fa48228
 8015b88:	0e884455 	.word	0x0e884455
 8015b8c:	3fc9c155 	.word	0x3fc9c155
 8015b90:	03eb6f7d 	.word	0x03eb6f7d
 8015b94:	3fd4d612 	.word	0x3fd4d612
 8015b98:	55555555 	.word	0x55555555
 8015b9c:	3fc55555 	.word	0x3fc55555
 8015ba0:	b12e9282 	.word	0xb12e9282
 8015ba4:	3fb3b8c5 	.word	0x3fb3b8c5
 8015ba8:	1b8d0159 	.word	0x1b8d0159
 8015bac:	3fe6066c 	.word	0x3fe6066c
 8015bb0:	9c598ac8 	.word	0x9c598ac8
 8015bb4:	40002ae5 	.word	0x40002ae5
 8015bb8:	1c8a2d4b 	.word	0x1c8a2d4b
 8015bbc:	40033a27 	.word	0x40033a27
 8015bc0:	33145c07 	.word	0x33145c07
 8015bc4:	3c91a626 	.word	0x3c91a626
 8015bc8:	54442d18 	.word	0x54442d18
 8015bcc:	3ff921fb 	.word	0x3ff921fb
 8015bd0:	54442d18 	.word	0x54442d18
 8015bd4:	400921fb 	.word	0x400921fb
 8015bd8:	3fefffff 	.word	0x3fefffff
 8015bdc:	3fdfffff 	.word	0x3fdfffff
 8015be0:	3c600000 	.word	0x3c600000
 8015be4:	3ff00000 	.word	0x3ff00000
 8015be8:	3fe00000 	.word	0x3fe00000
 8015bec:	4622      	mov	r2, r4
 8015bee:	462b      	mov	r3, r5
 8015bf0:	496b      	ldr	r1, [pc, #428]	@ (8015da0 <__ieee754_acos+0x4b0>)
 8015bf2:	2000      	movs	r0, #0
 8015bf4:	f7ea fb70 	bl	80002d8 <__aeabi_dsub>
 8015bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8015da4 <__ieee754_acos+0x4b4>)
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	f7ea fd24 	bl	8000648 <__aeabi_dmul>
 8015c00:	4604      	mov	r4, r0
 8015c02:	460d      	mov	r5, r1
 8015c04:	ec45 4b10 	vmov	d0, r4, r5
 8015c08:	f7ff fd96 	bl	8015738 <__ieee754_sqrt>
 8015c0c:	a34c      	add	r3, pc, #304	@ (adr r3, 8015d40 <__ieee754_acos+0x450>)
 8015c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c12:	4620      	mov	r0, r4
 8015c14:	4629      	mov	r1, r5
 8015c16:	ec59 8b10 	vmov	r8, r9, d0
 8015c1a:	f7ea fd15 	bl	8000648 <__aeabi_dmul>
 8015c1e:	a34a      	add	r3, pc, #296	@ (adr r3, 8015d48 <__ieee754_acos+0x458>)
 8015c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c24:	f7ea fb5a 	bl	80002dc <__adddf3>
 8015c28:	4622      	mov	r2, r4
 8015c2a:	462b      	mov	r3, r5
 8015c2c:	f7ea fd0c 	bl	8000648 <__aeabi_dmul>
 8015c30:	a347      	add	r3, pc, #284	@ (adr r3, 8015d50 <__ieee754_acos+0x460>)
 8015c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c36:	f7ea fb4f 	bl	80002d8 <__aeabi_dsub>
 8015c3a:	4622      	mov	r2, r4
 8015c3c:	462b      	mov	r3, r5
 8015c3e:	f7ea fd03 	bl	8000648 <__aeabi_dmul>
 8015c42:	a345      	add	r3, pc, #276	@ (adr r3, 8015d58 <__ieee754_acos+0x468>)
 8015c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c48:	f7ea fb48 	bl	80002dc <__adddf3>
 8015c4c:	4622      	mov	r2, r4
 8015c4e:	462b      	mov	r3, r5
 8015c50:	f7ea fcfa 	bl	8000648 <__aeabi_dmul>
 8015c54:	a342      	add	r3, pc, #264	@ (adr r3, 8015d60 <__ieee754_acos+0x470>)
 8015c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c5a:	f7ea fb3d 	bl	80002d8 <__aeabi_dsub>
 8015c5e:	4622      	mov	r2, r4
 8015c60:	462b      	mov	r3, r5
 8015c62:	f7ea fcf1 	bl	8000648 <__aeabi_dmul>
 8015c66:	a340      	add	r3, pc, #256	@ (adr r3, 8015d68 <__ieee754_acos+0x478>)
 8015c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c6c:	f7ea fb36 	bl	80002dc <__adddf3>
 8015c70:	4622      	mov	r2, r4
 8015c72:	462b      	mov	r3, r5
 8015c74:	f7ea fce8 	bl	8000648 <__aeabi_dmul>
 8015c78:	a33d      	add	r3, pc, #244	@ (adr r3, 8015d70 <__ieee754_acos+0x480>)
 8015c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c7e:	4682      	mov	sl, r0
 8015c80:	468b      	mov	fp, r1
 8015c82:	4620      	mov	r0, r4
 8015c84:	4629      	mov	r1, r5
 8015c86:	f7ea fcdf 	bl	8000648 <__aeabi_dmul>
 8015c8a:	a33b      	add	r3, pc, #236	@ (adr r3, 8015d78 <__ieee754_acos+0x488>)
 8015c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c90:	f7ea fb22 	bl	80002d8 <__aeabi_dsub>
 8015c94:	4622      	mov	r2, r4
 8015c96:	462b      	mov	r3, r5
 8015c98:	f7ea fcd6 	bl	8000648 <__aeabi_dmul>
 8015c9c:	a338      	add	r3, pc, #224	@ (adr r3, 8015d80 <__ieee754_acos+0x490>)
 8015c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ca2:	f7ea fb1b 	bl	80002dc <__adddf3>
 8015ca6:	4622      	mov	r2, r4
 8015ca8:	462b      	mov	r3, r5
 8015caa:	f7ea fccd 	bl	8000648 <__aeabi_dmul>
 8015cae:	a336      	add	r3, pc, #216	@ (adr r3, 8015d88 <__ieee754_acos+0x498>)
 8015cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cb4:	f7ea fb10 	bl	80002d8 <__aeabi_dsub>
 8015cb8:	4622      	mov	r2, r4
 8015cba:	462b      	mov	r3, r5
 8015cbc:	f7ea fcc4 	bl	8000648 <__aeabi_dmul>
 8015cc0:	4b37      	ldr	r3, [pc, #220]	@ (8015da0 <__ieee754_acos+0x4b0>)
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	f7ea fb0a 	bl	80002dc <__adddf3>
 8015cc8:	4602      	mov	r2, r0
 8015cca:	460b      	mov	r3, r1
 8015ccc:	4650      	mov	r0, sl
 8015cce:	4659      	mov	r1, fp
 8015cd0:	f7ea fde4 	bl	800089c <__aeabi_ddiv>
 8015cd4:	4642      	mov	r2, r8
 8015cd6:	464b      	mov	r3, r9
 8015cd8:	f7ea fcb6 	bl	8000648 <__aeabi_dmul>
 8015cdc:	2600      	movs	r6, #0
 8015cde:	4682      	mov	sl, r0
 8015ce0:	468b      	mov	fp, r1
 8015ce2:	4632      	mov	r2, r6
 8015ce4:	464b      	mov	r3, r9
 8015ce6:	4630      	mov	r0, r6
 8015ce8:	4649      	mov	r1, r9
 8015cea:	f7ea fcad 	bl	8000648 <__aeabi_dmul>
 8015cee:	4602      	mov	r2, r0
 8015cf0:	460b      	mov	r3, r1
 8015cf2:	4620      	mov	r0, r4
 8015cf4:	4629      	mov	r1, r5
 8015cf6:	f7ea faef 	bl	80002d8 <__aeabi_dsub>
 8015cfa:	4632      	mov	r2, r6
 8015cfc:	4604      	mov	r4, r0
 8015cfe:	460d      	mov	r5, r1
 8015d00:	464b      	mov	r3, r9
 8015d02:	4640      	mov	r0, r8
 8015d04:	4649      	mov	r1, r9
 8015d06:	f7ea fae9 	bl	80002dc <__adddf3>
 8015d0a:	4602      	mov	r2, r0
 8015d0c:	460b      	mov	r3, r1
 8015d0e:	4620      	mov	r0, r4
 8015d10:	4629      	mov	r1, r5
 8015d12:	f7ea fdc3 	bl	800089c <__aeabi_ddiv>
 8015d16:	4602      	mov	r2, r0
 8015d18:	460b      	mov	r3, r1
 8015d1a:	4650      	mov	r0, sl
 8015d1c:	4659      	mov	r1, fp
 8015d1e:	f7ea fadd 	bl	80002dc <__adddf3>
 8015d22:	4632      	mov	r2, r6
 8015d24:	464b      	mov	r3, r9
 8015d26:	f7ea fad9 	bl	80002dc <__adddf3>
 8015d2a:	4602      	mov	r2, r0
 8015d2c:	460b      	mov	r3, r1
 8015d2e:	f7ea fad5 	bl	80002dc <__adddf3>
 8015d32:	e5fd      	b.n	8015930 <__ieee754_acos+0x40>
 8015d34:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8015d90 <__ieee754_acos+0x4a0>
 8015d38:	e5ee      	b.n	8015918 <__ieee754_acos+0x28>
 8015d3a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8015d98 <__ieee754_acos+0x4a8>
 8015d3e:	e5eb      	b.n	8015918 <__ieee754_acos+0x28>
 8015d40:	0dfdf709 	.word	0x0dfdf709
 8015d44:	3f023de1 	.word	0x3f023de1
 8015d48:	7501b288 	.word	0x7501b288
 8015d4c:	3f49efe0 	.word	0x3f49efe0
 8015d50:	b5688f3b 	.word	0xb5688f3b
 8015d54:	3fa48228 	.word	0x3fa48228
 8015d58:	0e884455 	.word	0x0e884455
 8015d5c:	3fc9c155 	.word	0x3fc9c155
 8015d60:	03eb6f7d 	.word	0x03eb6f7d
 8015d64:	3fd4d612 	.word	0x3fd4d612
 8015d68:	55555555 	.word	0x55555555
 8015d6c:	3fc55555 	.word	0x3fc55555
 8015d70:	b12e9282 	.word	0xb12e9282
 8015d74:	3fb3b8c5 	.word	0x3fb3b8c5
 8015d78:	1b8d0159 	.word	0x1b8d0159
 8015d7c:	3fe6066c 	.word	0x3fe6066c
 8015d80:	9c598ac8 	.word	0x9c598ac8
 8015d84:	40002ae5 	.word	0x40002ae5
 8015d88:	1c8a2d4b 	.word	0x1c8a2d4b
 8015d8c:	40033a27 	.word	0x40033a27
 8015d90:	54442d18 	.word	0x54442d18
 8015d94:	400921fb 	.word	0x400921fb
 8015d98:	54442d18 	.word	0x54442d18
 8015d9c:	3ff921fb 	.word	0x3ff921fb
 8015da0:	3ff00000 	.word	0x3ff00000
 8015da4:	3fe00000 	.word	0x3fe00000

08015da8 <__ieee754_pow>:
 8015da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dac:	b091      	sub	sp, #68	@ 0x44
 8015dae:	ed8d 1b00 	vstr	d1, [sp]
 8015db2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8015db6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015dba:	ea5a 0001 	orrs.w	r0, sl, r1
 8015dbe:	ec57 6b10 	vmov	r6, r7, d0
 8015dc2:	d113      	bne.n	8015dec <__ieee754_pow+0x44>
 8015dc4:	19b3      	adds	r3, r6, r6
 8015dc6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015dca:	4152      	adcs	r2, r2
 8015dcc:	4298      	cmp	r0, r3
 8015dce:	4b98      	ldr	r3, [pc, #608]	@ (8016030 <__ieee754_pow+0x288>)
 8015dd0:	4193      	sbcs	r3, r2
 8015dd2:	f080 84ea 	bcs.w	80167aa <__ieee754_pow+0xa02>
 8015dd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015dda:	4630      	mov	r0, r6
 8015ddc:	4639      	mov	r1, r7
 8015dde:	f7ea fa7d 	bl	80002dc <__adddf3>
 8015de2:	ec41 0b10 	vmov	d0, r0, r1
 8015de6:	b011      	add	sp, #68	@ 0x44
 8015de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dec:	4a91      	ldr	r2, [pc, #580]	@ (8016034 <__ieee754_pow+0x28c>)
 8015dee:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8015df2:	4590      	cmp	r8, r2
 8015df4:	463d      	mov	r5, r7
 8015df6:	4633      	mov	r3, r6
 8015df8:	d806      	bhi.n	8015e08 <__ieee754_pow+0x60>
 8015dfa:	d101      	bne.n	8015e00 <__ieee754_pow+0x58>
 8015dfc:	2e00      	cmp	r6, #0
 8015dfe:	d1ea      	bne.n	8015dd6 <__ieee754_pow+0x2e>
 8015e00:	4592      	cmp	sl, r2
 8015e02:	d801      	bhi.n	8015e08 <__ieee754_pow+0x60>
 8015e04:	d10e      	bne.n	8015e24 <__ieee754_pow+0x7c>
 8015e06:	b169      	cbz	r1, 8015e24 <__ieee754_pow+0x7c>
 8015e08:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8015e0c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8015e10:	431d      	orrs	r5, r3
 8015e12:	d1e0      	bne.n	8015dd6 <__ieee754_pow+0x2e>
 8015e14:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015e18:	18db      	adds	r3, r3, r3
 8015e1a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015e1e:	4152      	adcs	r2, r2
 8015e20:	429d      	cmp	r5, r3
 8015e22:	e7d4      	b.n	8015dce <__ieee754_pow+0x26>
 8015e24:	2d00      	cmp	r5, #0
 8015e26:	46c3      	mov	fp, r8
 8015e28:	da3a      	bge.n	8015ea0 <__ieee754_pow+0xf8>
 8015e2a:	4a83      	ldr	r2, [pc, #524]	@ (8016038 <__ieee754_pow+0x290>)
 8015e2c:	4592      	cmp	sl, r2
 8015e2e:	d84d      	bhi.n	8015ecc <__ieee754_pow+0x124>
 8015e30:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8015e34:	4592      	cmp	sl, r2
 8015e36:	f240 84c7 	bls.w	80167c8 <__ieee754_pow+0xa20>
 8015e3a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8015e3e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015e42:	2a14      	cmp	r2, #20
 8015e44:	dd0f      	ble.n	8015e66 <__ieee754_pow+0xbe>
 8015e46:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8015e4a:	fa21 f402 	lsr.w	r4, r1, r2
 8015e4e:	fa04 f202 	lsl.w	r2, r4, r2
 8015e52:	428a      	cmp	r2, r1
 8015e54:	f040 84b8 	bne.w	80167c8 <__ieee754_pow+0xa20>
 8015e58:	f004 0401 	and.w	r4, r4, #1
 8015e5c:	f1c4 0402 	rsb	r4, r4, #2
 8015e60:	2900      	cmp	r1, #0
 8015e62:	d158      	bne.n	8015f16 <__ieee754_pow+0x16e>
 8015e64:	e00e      	b.n	8015e84 <__ieee754_pow+0xdc>
 8015e66:	2900      	cmp	r1, #0
 8015e68:	d154      	bne.n	8015f14 <__ieee754_pow+0x16c>
 8015e6a:	f1c2 0214 	rsb	r2, r2, #20
 8015e6e:	fa4a f402 	asr.w	r4, sl, r2
 8015e72:	fa04 f202 	lsl.w	r2, r4, r2
 8015e76:	4552      	cmp	r2, sl
 8015e78:	f040 84a3 	bne.w	80167c2 <__ieee754_pow+0xa1a>
 8015e7c:	f004 0401 	and.w	r4, r4, #1
 8015e80:	f1c4 0402 	rsb	r4, r4, #2
 8015e84:	4a6d      	ldr	r2, [pc, #436]	@ (801603c <__ieee754_pow+0x294>)
 8015e86:	4592      	cmp	sl, r2
 8015e88:	d12e      	bne.n	8015ee8 <__ieee754_pow+0x140>
 8015e8a:	f1b9 0f00 	cmp.w	r9, #0
 8015e8e:	f280 8494 	bge.w	80167ba <__ieee754_pow+0xa12>
 8015e92:	496a      	ldr	r1, [pc, #424]	@ (801603c <__ieee754_pow+0x294>)
 8015e94:	4632      	mov	r2, r6
 8015e96:	463b      	mov	r3, r7
 8015e98:	2000      	movs	r0, #0
 8015e9a:	f7ea fcff 	bl	800089c <__aeabi_ddiv>
 8015e9e:	e7a0      	b.n	8015de2 <__ieee754_pow+0x3a>
 8015ea0:	2400      	movs	r4, #0
 8015ea2:	bbc1      	cbnz	r1, 8015f16 <__ieee754_pow+0x16e>
 8015ea4:	4a63      	ldr	r2, [pc, #396]	@ (8016034 <__ieee754_pow+0x28c>)
 8015ea6:	4592      	cmp	sl, r2
 8015ea8:	d1ec      	bne.n	8015e84 <__ieee754_pow+0xdc>
 8015eaa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8015eae:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8015eb2:	431a      	orrs	r2, r3
 8015eb4:	f000 8479 	beq.w	80167aa <__ieee754_pow+0xa02>
 8015eb8:	4b61      	ldr	r3, [pc, #388]	@ (8016040 <__ieee754_pow+0x298>)
 8015eba:	4598      	cmp	r8, r3
 8015ebc:	d908      	bls.n	8015ed0 <__ieee754_pow+0x128>
 8015ebe:	f1b9 0f00 	cmp.w	r9, #0
 8015ec2:	f2c0 8476 	blt.w	80167b2 <__ieee754_pow+0xa0a>
 8015ec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015eca:	e78a      	b.n	8015de2 <__ieee754_pow+0x3a>
 8015ecc:	2402      	movs	r4, #2
 8015ece:	e7e8      	b.n	8015ea2 <__ieee754_pow+0xfa>
 8015ed0:	f1b9 0f00 	cmp.w	r9, #0
 8015ed4:	f04f 0000 	mov.w	r0, #0
 8015ed8:	f04f 0100 	mov.w	r1, #0
 8015edc:	da81      	bge.n	8015de2 <__ieee754_pow+0x3a>
 8015ede:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015ee2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8015ee6:	e77c      	b.n	8015de2 <__ieee754_pow+0x3a>
 8015ee8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8015eec:	d106      	bne.n	8015efc <__ieee754_pow+0x154>
 8015eee:	4632      	mov	r2, r6
 8015ef0:	463b      	mov	r3, r7
 8015ef2:	4630      	mov	r0, r6
 8015ef4:	4639      	mov	r1, r7
 8015ef6:	f7ea fba7 	bl	8000648 <__aeabi_dmul>
 8015efa:	e772      	b.n	8015de2 <__ieee754_pow+0x3a>
 8015efc:	4a51      	ldr	r2, [pc, #324]	@ (8016044 <__ieee754_pow+0x29c>)
 8015efe:	4591      	cmp	r9, r2
 8015f00:	d109      	bne.n	8015f16 <__ieee754_pow+0x16e>
 8015f02:	2d00      	cmp	r5, #0
 8015f04:	db07      	blt.n	8015f16 <__ieee754_pow+0x16e>
 8015f06:	ec47 6b10 	vmov	d0, r6, r7
 8015f0a:	b011      	add	sp, #68	@ 0x44
 8015f0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f10:	f7ff bc12 	b.w	8015738 <__ieee754_sqrt>
 8015f14:	2400      	movs	r4, #0
 8015f16:	ec47 6b10 	vmov	d0, r6, r7
 8015f1a:	9302      	str	r3, [sp, #8]
 8015f1c:	f7ff fbf8 	bl	8015710 <fabs>
 8015f20:	9b02      	ldr	r3, [sp, #8]
 8015f22:	ec51 0b10 	vmov	r0, r1, d0
 8015f26:	bb53      	cbnz	r3, 8015f7e <__ieee754_pow+0x1d6>
 8015f28:	4b44      	ldr	r3, [pc, #272]	@ (801603c <__ieee754_pow+0x294>)
 8015f2a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d002      	beq.n	8015f38 <__ieee754_pow+0x190>
 8015f32:	f1b8 0f00 	cmp.w	r8, #0
 8015f36:	d122      	bne.n	8015f7e <__ieee754_pow+0x1d6>
 8015f38:	f1b9 0f00 	cmp.w	r9, #0
 8015f3c:	da05      	bge.n	8015f4a <__ieee754_pow+0x1a2>
 8015f3e:	4602      	mov	r2, r0
 8015f40:	460b      	mov	r3, r1
 8015f42:	2000      	movs	r0, #0
 8015f44:	493d      	ldr	r1, [pc, #244]	@ (801603c <__ieee754_pow+0x294>)
 8015f46:	f7ea fca9 	bl	800089c <__aeabi_ddiv>
 8015f4a:	2d00      	cmp	r5, #0
 8015f4c:	f6bf af49 	bge.w	8015de2 <__ieee754_pow+0x3a>
 8015f50:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8015f54:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8015f58:	ea58 0804 	orrs.w	r8, r8, r4
 8015f5c:	d108      	bne.n	8015f70 <__ieee754_pow+0x1c8>
 8015f5e:	4602      	mov	r2, r0
 8015f60:	460b      	mov	r3, r1
 8015f62:	4610      	mov	r0, r2
 8015f64:	4619      	mov	r1, r3
 8015f66:	f7ea f9b7 	bl	80002d8 <__aeabi_dsub>
 8015f6a:	4602      	mov	r2, r0
 8015f6c:	460b      	mov	r3, r1
 8015f6e:	e794      	b.n	8015e9a <__ieee754_pow+0xf2>
 8015f70:	2c01      	cmp	r4, #1
 8015f72:	f47f af36 	bne.w	8015de2 <__ieee754_pow+0x3a>
 8015f76:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015f7a:	4619      	mov	r1, r3
 8015f7c:	e731      	b.n	8015de2 <__ieee754_pow+0x3a>
 8015f7e:	0feb      	lsrs	r3, r5, #31
 8015f80:	3b01      	subs	r3, #1
 8015f82:	ea53 0204 	orrs.w	r2, r3, r4
 8015f86:	d102      	bne.n	8015f8e <__ieee754_pow+0x1e6>
 8015f88:	4632      	mov	r2, r6
 8015f8a:	463b      	mov	r3, r7
 8015f8c:	e7e9      	b.n	8015f62 <__ieee754_pow+0x1ba>
 8015f8e:	3c01      	subs	r4, #1
 8015f90:	431c      	orrs	r4, r3
 8015f92:	d016      	beq.n	8015fc2 <__ieee754_pow+0x21a>
 8015f94:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8016020 <__ieee754_pow+0x278>
 8015f98:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8015f9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015fa0:	f240 8112 	bls.w	80161c8 <__ieee754_pow+0x420>
 8015fa4:	4b28      	ldr	r3, [pc, #160]	@ (8016048 <__ieee754_pow+0x2a0>)
 8015fa6:	459a      	cmp	sl, r3
 8015fa8:	4b25      	ldr	r3, [pc, #148]	@ (8016040 <__ieee754_pow+0x298>)
 8015faa:	d916      	bls.n	8015fda <__ieee754_pow+0x232>
 8015fac:	4598      	cmp	r8, r3
 8015fae:	d80b      	bhi.n	8015fc8 <__ieee754_pow+0x220>
 8015fb0:	f1b9 0f00 	cmp.w	r9, #0
 8015fb4:	da0b      	bge.n	8015fce <__ieee754_pow+0x226>
 8015fb6:	2000      	movs	r0, #0
 8015fb8:	b011      	add	sp, #68	@ 0x44
 8015fba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fbe:	f000 bceb 	b.w	8016998 <__math_oflow>
 8015fc2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8016028 <__ieee754_pow+0x280>
 8015fc6:	e7e7      	b.n	8015f98 <__ieee754_pow+0x1f0>
 8015fc8:	f1b9 0f00 	cmp.w	r9, #0
 8015fcc:	dcf3      	bgt.n	8015fb6 <__ieee754_pow+0x20e>
 8015fce:	2000      	movs	r0, #0
 8015fd0:	b011      	add	sp, #68	@ 0x44
 8015fd2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fd6:	f000 bcd7 	b.w	8016988 <__math_uflow>
 8015fda:	4598      	cmp	r8, r3
 8015fdc:	d20c      	bcs.n	8015ff8 <__ieee754_pow+0x250>
 8015fde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	f7ea fda1 	bl	8000b2c <__aeabi_dcmplt>
 8015fea:	3800      	subs	r0, #0
 8015fec:	bf18      	it	ne
 8015fee:	2001      	movne	r0, #1
 8015ff0:	f1b9 0f00 	cmp.w	r9, #0
 8015ff4:	daec      	bge.n	8015fd0 <__ieee754_pow+0x228>
 8015ff6:	e7df      	b.n	8015fb8 <__ieee754_pow+0x210>
 8015ff8:	4b10      	ldr	r3, [pc, #64]	@ (801603c <__ieee754_pow+0x294>)
 8015ffa:	4598      	cmp	r8, r3
 8015ffc:	f04f 0200 	mov.w	r2, #0
 8016000:	d924      	bls.n	801604c <__ieee754_pow+0x2a4>
 8016002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016006:	2300      	movs	r3, #0
 8016008:	f7ea fd90 	bl	8000b2c <__aeabi_dcmplt>
 801600c:	3800      	subs	r0, #0
 801600e:	bf18      	it	ne
 8016010:	2001      	movne	r0, #1
 8016012:	f1b9 0f00 	cmp.w	r9, #0
 8016016:	dccf      	bgt.n	8015fb8 <__ieee754_pow+0x210>
 8016018:	e7da      	b.n	8015fd0 <__ieee754_pow+0x228>
 801601a:	bf00      	nop
 801601c:	f3af 8000 	nop.w
 8016020:	00000000 	.word	0x00000000
 8016024:	3ff00000 	.word	0x3ff00000
 8016028:	00000000 	.word	0x00000000
 801602c:	bff00000 	.word	0xbff00000
 8016030:	fff00000 	.word	0xfff00000
 8016034:	7ff00000 	.word	0x7ff00000
 8016038:	433fffff 	.word	0x433fffff
 801603c:	3ff00000 	.word	0x3ff00000
 8016040:	3fefffff 	.word	0x3fefffff
 8016044:	3fe00000 	.word	0x3fe00000
 8016048:	43f00000 	.word	0x43f00000
 801604c:	4b5a      	ldr	r3, [pc, #360]	@ (80161b8 <__ieee754_pow+0x410>)
 801604e:	f7ea f943 	bl	80002d8 <__aeabi_dsub>
 8016052:	a351      	add	r3, pc, #324	@ (adr r3, 8016198 <__ieee754_pow+0x3f0>)
 8016054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016058:	4604      	mov	r4, r0
 801605a:	460d      	mov	r5, r1
 801605c:	f7ea faf4 	bl	8000648 <__aeabi_dmul>
 8016060:	a34f      	add	r3, pc, #316	@ (adr r3, 80161a0 <__ieee754_pow+0x3f8>)
 8016062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016066:	4606      	mov	r6, r0
 8016068:	460f      	mov	r7, r1
 801606a:	4620      	mov	r0, r4
 801606c:	4629      	mov	r1, r5
 801606e:	f7ea faeb 	bl	8000648 <__aeabi_dmul>
 8016072:	4b52      	ldr	r3, [pc, #328]	@ (80161bc <__ieee754_pow+0x414>)
 8016074:	4682      	mov	sl, r0
 8016076:	468b      	mov	fp, r1
 8016078:	2200      	movs	r2, #0
 801607a:	4620      	mov	r0, r4
 801607c:	4629      	mov	r1, r5
 801607e:	f7ea fae3 	bl	8000648 <__aeabi_dmul>
 8016082:	4602      	mov	r2, r0
 8016084:	460b      	mov	r3, r1
 8016086:	a148      	add	r1, pc, #288	@ (adr r1, 80161a8 <__ieee754_pow+0x400>)
 8016088:	e9d1 0100 	ldrd	r0, r1, [r1]
 801608c:	f7ea f924 	bl	80002d8 <__aeabi_dsub>
 8016090:	4622      	mov	r2, r4
 8016092:	462b      	mov	r3, r5
 8016094:	f7ea fad8 	bl	8000648 <__aeabi_dmul>
 8016098:	4602      	mov	r2, r0
 801609a:	460b      	mov	r3, r1
 801609c:	2000      	movs	r0, #0
 801609e:	4948      	ldr	r1, [pc, #288]	@ (80161c0 <__ieee754_pow+0x418>)
 80160a0:	f7ea f91a 	bl	80002d8 <__aeabi_dsub>
 80160a4:	4622      	mov	r2, r4
 80160a6:	4680      	mov	r8, r0
 80160a8:	4689      	mov	r9, r1
 80160aa:	462b      	mov	r3, r5
 80160ac:	4620      	mov	r0, r4
 80160ae:	4629      	mov	r1, r5
 80160b0:	f7ea faca 	bl	8000648 <__aeabi_dmul>
 80160b4:	4602      	mov	r2, r0
 80160b6:	460b      	mov	r3, r1
 80160b8:	4640      	mov	r0, r8
 80160ba:	4649      	mov	r1, r9
 80160bc:	f7ea fac4 	bl	8000648 <__aeabi_dmul>
 80160c0:	a33b      	add	r3, pc, #236	@ (adr r3, 80161b0 <__ieee754_pow+0x408>)
 80160c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160c6:	f7ea fabf 	bl	8000648 <__aeabi_dmul>
 80160ca:	4602      	mov	r2, r0
 80160cc:	460b      	mov	r3, r1
 80160ce:	4650      	mov	r0, sl
 80160d0:	4659      	mov	r1, fp
 80160d2:	f7ea f901 	bl	80002d8 <__aeabi_dsub>
 80160d6:	4602      	mov	r2, r0
 80160d8:	460b      	mov	r3, r1
 80160da:	4680      	mov	r8, r0
 80160dc:	4689      	mov	r9, r1
 80160de:	4630      	mov	r0, r6
 80160e0:	4639      	mov	r1, r7
 80160e2:	f7ea f8fb 	bl	80002dc <__adddf3>
 80160e6:	2400      	movs	r4, #0
 80160e8:	4632      	mov	r2, r6
 80160ea:	463b      	mov	r3, r7
 80160ec:	4620      	mov	r0, r4
 80160ee:	460d      	mov	r5, r1
 80160f0:	f7ea f8f2 	bl	80002d8 <__aeabi_dsub>
 80160f4:	4602      	mov	r2, r0
 80160f6:	460b      	mov	r3, r1
 80160f8:	4640      	mov	r0, r8
 80160fa:	4649      	mov	r1, r9
 80160fc:	f7ea f8ec 	bl	80002d8 <__aeabi_dsub>
 8016100:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016104:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016108:	2300      	movs	r3, #0
 801610a:	9304      	str	r3, [sp, #16]
 801610c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016110:	4606      	mov	r6, r0
 8016112:	460f      	mov	r7, r1
 8016114:	4652      	mov	r2, sl
 8016116:	465b      	mov	r3, fp
 8016118:	e9dd 0100 	ldrd	r0, r1, [sp]
 801611c:	f7ea f8dc 	bl	80002d8 <__aeabi_dsub>
 8016120:	4622      	mov	r2, r4
 8016122:	462b      	mov	r3, r5
 8016124:	f7ea fa90 	bl	8000648 <__aeabi_dmul>
 8016128:	e9dd 2300 	ldrd	r2, r3, [sp]
 801612c:	4680      	mov	r8, r0
 801612e:	4689      	mov	r9, r1
 8016130:	4630      	mov	r0, r6
 8016132:	4639      	mov	r1, r7
 8016134:	f7ea fa88 	bl	8000648 <__aeabi_dmul>
 8016138:	4602      	mov	r2, r0
 801613a:	460b      	mov	r3, r1
 801613c:	4640      	mov	r0, r8
 801613e:	4649      	mov	r1, r9
 8016140:	f7ea f8cc 	bl	80002dc <__adddf3>
 8016144:	4652      	mov	r2, sl
 8016146:	465b      	mov	r3, fp
 8016148:	4606      	mov	r6, r0
 801614a:	460f      	mov	r7, r1
 801614c:	4620      	mov	r0, r4
 801614e:	4629      	mov	r1, r5
 8016150:	f7ea fa7a 	bl	8000648 <__aeabi_dmul>
 8016154:	460b      	mov	r3, r1
 8016156:	4602      	mov	r2, r0
 8016158:	4680      	mov	r8, r0
 801615a:	4689      	mov	r9, r1
 801615c:	4630      	mov	r0, r6
 801615e:	4639      	mov	r1, r7
 8016160:	f7ea f8bc 	bl	80002dc <__adddf3>
 8016164:	4b17      	ldr	r3, [pc, #92]	@ (80161c4 <__ieee754_pow+0x41c>)
 8016166:	4299      	cmp	r1, r3
 8016168:	4604      	mov	r4, r0
 801616a:	460d      	mov	r5, r1
 801616c:	468a      	mov	sl, r1
 801616e:	468b      	mov	fp, r1
 8016170:	f340 82ef 	ble.w	8016752 <__ieee754_pow+0x9aa>
 8016174:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8016178:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801617c:	4303      	orrs	r3, r0
 801617e:	f000 81e8 	beq.w	8016552 <__ieee754_pow+0x7aa>
 8016182:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016186:	2200      	movs	r2, #0
 8016188:	2300      	movs	r3, #0
 801618a:	f7ea fccf 	bl	8000b2c <__aeabi_dcmplt>
 801618e:	3800      	subs	r0, #0
 8016190:	bf18      	it	ne
 8016192:	2001      	movne	r0, #1
 8016194:	e710      	b.n	8015fb8 <__ieee754_pow+0x210>
 8016196:	bf00      	nop
 8016198:	60000000 	.word	0x60000000
 801619c:	3ff71547 	.word	0x3ff71547
 80161a0:	f85ddf44 	.word	0xf85ddf44
 80161a4:	3e54ae0b 	.word	0x3e54ae0b
 80161a8:	55555555 	.word	0x55555555
 80161ac:	3fd55555 	.word	0x3fd55555
 80161b0:	652b82fe 	.word	0x652b82fe
 80161b4:	3ff71547 	.word	0x3ff71547
 80161b8:	3ff00000 	.word	0x3ff00000
 80161bc:	3fd00000 	.word	0x3fd00000
 80161c0:	3fe00000 	.word	0x3fe00000
 80161c4:	408fffff 	.word	0x408fffff
 80161c8:	4bd5      	ldr	r3, [pc, #852]	@ (8016520 <__ieee754_pow+0x778>)
 80161ca:	402b      	ands	r3, r5
 80161cc:	2200      	movs	r2, #0
 80161ce:	b92b      	cbnz	r3, 80161dc <__ieee754_pow+0x434>
 80161d0:	4bd4      	ldr	r3, [pc, #848]	@ (8016524 <__ieee754_pow+0x77c>)
 80161d2:	f7ea fa39 	bl	8000648 <__aeabi_dmul>
 80161d6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80161da:	468b      	mov	fp, r1
 80161dc:	ea4f 532b 	mov.w	r3, fp, asr #20
 80161e0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80161e4:	4413      	add	r3, r2
 80161e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80161e8:	4bcf      	ldr	r3, [pc, #828]	@ (8016528 <__ieee754_pow+0x780>)
 80161ea:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80161ee:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80161f2:	459b      	cmp	fp, r3
 80161f4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80161f8:	dd08      	ble.n	801620c <__ieee754_pow+0x464>
 80161fa:	4bcc      	ldr	r3, [pc, #816]	@ (801652c <__ieee754_pow+0x784>)
 80161fc:	459b      	cmp	fp, r3
 80161fe:	f340 81a5 	ble.w	801654c <__ieee754_pow+0x7a4>
 8016202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016204:	3301      	adds	r3, #1
 8016206:	930a      	str	r3, [sp, #40]	@ 0x28
 8016208:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801620c:	f04f 0a00 	mov.w	sl, #0
 8016210:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016214:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016216:	4bc6      	ldr	r3, [pc, #792]	@ (8016530 <__ieee754_pow+0x788>)
 8016218:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801621c:	ed93 7b00 	vldr	d7, [r3]
 8016220:	4629      	mov	r1, r5
 8016222:	ec53 2b17 	vmov	r2, r3, d7
 8016226:	ed8d 7b06 	vstr	d7, [sp, #24]
 801622a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801622e:	f7ea f853 	bl	80002d8 <__aeabi_dsub>
 8016232:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016236:	4606      	mov	r6, r0
 8016238:	460f      	mov	r7, r1
 801623a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801623e:	f7ea f84d 	bl	80002dc <__adddf3>
 8016242:	4602      	mov	r2, r0
 8016244:	460b      	mov	r3, r1
 8016246:	2000      	movs	r0, #0
 8016248:	49ba      	ldr	r1, [pc, #744]	@ (8016534 <__ieee754_pow+0x78c>)
 801624a:	f7ea fb27 	bl	800089c <__aeabi_ddiv>
 801624e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8016252:	4602      	mov	r2, r0
 8016254:	460b      	mov	r3, r1
 8016256:	4630      	mov	r0, r6
 8016258:	4639      	mov	r1, r7
 801625a:	f7ea f9f5 	bl	8000648 <__aeabi_dmul>
 801625e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016262:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8016266:	106d      	asrs	r5, r5, #1
 8016268:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801626c:	f04f 0b00 	mov.w	fp, #0
 8016270:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8016274:	4661      	mov	r1, ip
 8016276:	2200      	movs	r2, #0
 8016278:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801627c:	4658      	mov	r0, fp
 801627e:	46e1      	mov	r9, ip
 8016280:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8016284:	4614      	mov	r4, r2
 8016286:	461d      	mov	r5, r3
 8016288:	f7ea f9de 	bl	8000648 <__aeabi_dmul>
 801628c:	4602      	mov	r2, r0
 801628e:	460b      	mov	r3, r1
 8016290:	4630      	mov	r0, r6
 8016292:	4639      	mov	r1, r7
 8016294:	f7ea f820 	bl	80002d8 <__aeabi_dsub>
 8016298:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801629c:	4606      	mov	r6, r0
 801629e:	460f      	mov	r7, r1
 80162a0:	4620      	mov	r0, r4
 80162a2:	4629      	mov	r1, r5
 80162a4:	f7ea f818 	bl	80002d8 <__aeabi_dsub>
 80162a8:	4602      	mov	r2, r0
 80162aa:	460b      	mov	r3, r1
 80162ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80162b0:	f7ea f812 	bl	80002d8 <__aeabi_dsub>
 80162b4:	465a      	mov	r2, fp
 80162b6:	464b      	mov	r3, r9
 80162b8:	f7ea f9c6 	bl	8000648 <__aeabi_dmul>
 80162bc:	4602      	mov	r2, r0
 80162be:	460b      	mov	r3, r1
 80162c0:	4630      	mov	r0, r6
 80162c2:	4639      	mov	r1, r7
 80162c4:	f7ea f808 	bl	80002d8 <__aeabi_dsub>
 80162c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80162cc:	f7ea f9bc 	bl	8000648 <__aeabi_dmul>
 80162d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80162d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80162d8:	4610      	mov	r0, r2
 80162da:	4619      	mov	r1, r3
 80162dc:	f7ea f9b4 	bl	8000648 <__aeabi_dmul>
 80162e0:	a37d      	add	r3, pc, #500	@ (adr r3, 80164d8 <__ieee754_pow+0x730>)
 80162e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162e6:	4604      	mov	r4, r0
 80162e8:	460d      	mov	r5, r1
 80162ea:	f7ea f9ad 	bl	8000648 <__aeabi_dmul>
 80162ee:	a37c      	add	r3, pc, #496	@ (adr r3, 80164e0 <__ieee754_pow+0x738>)
 80162f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162f4:	f7e9 fff2 	bl	80002dc <__adddf3>
 80162f8:	4622      	mov	r2, r4
 80162fa:	462b      	mov	r3, r5
 80162fc:	f7ea f9a4 	bl	8000648 <__aeabi_dmul>
 8016300:	a379      	add	r3, pc, #484	@ (adr r3, 80164e8 <__ieee754_pow+0x740>)
 8016302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016306:	f7e9 ffe9 	bl	80002dc <__adddf3>
 801630a:	4622      	mov	r2, r4
 801630c:	462b      	mov	r3, r5
 801630e:	f7ea f99b 	bl	8000648 <__aeabi_dmul>
 8016312:	a377      	add	r3, pc, #476	@ (adr r3, 80164f0 <__ieee754_pow+0x748>)
 8016314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016318:	f7e9 ffe0 	bl	80002dc <__adddf3>
 801631c:	4622      	mov	r2, r4
 801631e:	462b      	mov	r3, r5
 8016320:	f7ea f992 	bl	8000648 <__aeabi_dmul>
 8016324:	a374      	add	r3, pc, #464	@ (adr r3, 80164f8 <__ieee754_pow+0x750>)
 8016326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801632a:	f7e9 ffd7 	bl	80002dc <__adddf3>
 801632e:	4622      	mov	r2, r4
 8016330:	462b      	mov	r3, r5
 8016332:	f7ea f989 	bl	8000648 <__aeabi_dmul>
 8016336:	a372      	add	r3, pc, #456	@ (adr r3, 8016500 <__ieee754_pow+0x758>)
 8016338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801633c:	f7e9 ffce 	bl	80002dc <__adddf3>
 8016340:	4622      	mov	r2, r4
 8016342:	4606      	mov	r6, r0
 8016344:	460f      	mov	r7, r1
 8016346:	462b      	mov	r3, r5
 8016348:	4620      	mov	r0, r4
 801634a:	4629      	mov	r1, r5
 801634c:	f7ea f97c 	bl	8000648 <__aeabi_dmul>
 8016350:	4602      	mov	r2, r0
 8016352:	460b      	mov	r3, r1
 8016354:	4630      	mov	r0, r6
 8016356:	4639      	mov	r1, r7
 8016358:	f7ea f976 	bl	8000648 <__aeabi_dmul>
 801635c:	465a      	mov	r2, fp
 801635e:	4604      	mov	r4, r0
 8016360:	460d      	mov	r5, r1
 8016362:	464b      	mov	r3, r9
 8016364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016368:	f7e9 ffb8 	bl	80002dc <__adddf3>
 801636c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016370:	f7ea f96a 	bl	8000648 <__aeabi_dmul>
 8016374:	4622      	mov	r2, r4
 8016376:	462b      	mov	r3, r5
 8016378:	f7e9 ffb0 	bl	80002dc <__adddf3>
 801637c:	465a      	mov	r2, fp
 801637e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016382:	464b      	mov	r3, r9
 8016384:	4658      	mov	r0, fp
 8016386:	4649      	mov	r1, r9
 8016388:	f7ea f95e 	bl	8000648 <__aeabi_dmul>
 801638c:	4b6a      	ldr	r3, [pc, #424]	@ (8016538 <__ieee754_pow+0x790>)
 801638e:	2200      	movs	r2, #0
 8016390:	4606      	mov	r6, r0
 8016392:	460f      	mov	r7, r1
 8016394:	f7e9 ffa2 	bl	80002dc <__adddf3>
 8016398:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801639c:	f7e9 ff9e 	bl	80002dc <__adddf3>
 80163a0:	46d8      	mov	r8, fp
 80163a2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80163a6:	460d      	mov	r5, r1
 80163a8:	465a      	mov	r2, fp
 80163aa:	460b      	mov	r3, r1
 80163ac:	4640      	mov	r0, r8
 80163ae:	4649      	mov	r1, r9
 80163b0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80163b4:	f7ea f948 	bl	8000648 <__aeabi_dmul>
 80163b8:	465c      	mov	r4, fp
 80163ba:	4680      	mov	r8, r0
 80163bc:	4689      	mov	r9, r1
 80163be:	4b5e      	ldr	r3, [pc, #376]	@ (8016538 <__ieee754_pow+0x790>)
 80163c0:	2200      	movs	r2, #0
 80163c2:	4620      	mov	r0, r4
 80163c4:	4629      	mov	r1, r5
 80163c6:	f7e9 ff87 	bl	80002d8 <__aeabi_dsub>
 80163ca:	4632      	mov	r2, r6
 80163cc:	463b      	mov	r3, r7
 80163ce:	f7e9 ff83 	bl	80002d8 <__aeabi_dsub>
 80163d2:	4602      	mov	r2, r0
 80163d4:	460b      	mov	r3, r1
 80163d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80163da:	f7e9 ff7d 	bl	80002d8 <__aeabi_dsub>
 80163de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163e2:	f7ea f931 	bl	8000648 <__aeabi_dmul>
 80163e6:	4622      	mov	r2, r4
 80163e8:	4606      	mov	r6, r0
 80163ea:	460f      	mov	r7, r1
 80163ec:	462b      	mov	r3, r5
 80163ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80163f2:	f7ea f929 	bl	8000648 <__aeabi_dmul>
 80163f6:	4602      	mov	r2, r0
 80163f8:	460b      	mov	r3, r1
 80163fa:	4630      	mov	r0, r6
 80163fc:	4639      	mov	r1, r7
 80163fe:	f7e9 ff6d 	bl	80002dc <__adddf3>
 8016402:	4606      	mov	r6, r0
 8016404:	460f      	mov	r7, r1
 8016406:	4602      	mov	r2, r0
 8016408:	460b      	mov	r3, r1
 801640a:	4640      	mov	r0, r8
 801640c:	4649      	mov	r1, r9
 801640e:	f7e9 ff65 	bl	80002dc <__adddf3>
 8016412:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8016416:	a33c      	add	r3, pc, #240	@ (adr r3, 8016508 <__ieee754_pow+0x760>)
 8016418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801641c:	4658      	mov	r0, fp
 801641e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8016422:	460d      	mov	r5, r1
 8016424:	f7ea f910 	bl	8000648 <__aeabi_dmul>
 8016428:	465c      	mov	r4, fp
 801642a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801642e:	4642      	mov	r2, r8
 8016430:	464b      	mov	r3, r9
 8016432:	4620      	mov	r0, r4
 8016434:	4629      	mov	r1, r5
 8016436:	f7e9 ff4f 	bl	80002d8 <__aeabi_dsub>
 801643a:	4602      	mov	r2, r0
 801643c:	460b      	mov	r3, r1
 801643e:	4630      	mov	r0, r6
 8016440:	4639      	mov	r1, r7
 8016442:	f7e9 ff49 	bl	80002d8 <__aeabi_dsub>
 8016446:	a332      	add	r3, pc, #200	@ (adr r3, 8016510 <__ieee754_pow+0x768>)
 8016448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801644c:	f7ea f8fc 	bl	8000648 <__aeabi_dmul>
 8016450:	a331      	add	r3, pc, #196	@ (adr r3, 8016518 <__ieee754_pow+0x770>)
 8016452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016456:	4606      	mov	r6, r0
 8016458:	460f      	mov	r7, r1
 801645a:	4620      	mov	r0, r4
 801645c:	4629      	mov	r1, r5
 801645e:	f7ea f8f3 	bl	8000648 <__aeabi_dmul>
 8016462:	4602      	mov	r2, r0
 8016464:	460b      	mov	r3, r1
 8016466:	4630      	mov	r0, r6
 8016468:	4639      	mov	r1, r7
 801646a:	f7e9 ff37 	bl	80002dc <__adddf3>
 801646e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016470:	4b32      	ldr	r3, [pc, #200]	@ (801653c <__ieee754_pow+0x794>)
 8016472:	4413      	add	r3, r2
 8016474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016478:	f7e9 ff30 	bl	80002dc <__adddf3>
 801647c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016480:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016482:	f7ea f877 	bl	8000574 <__aeabi_i2d>
 8016486:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016488:	4b2d      	ldr	r3, [pc, #180]	@ (8016540 <__ieee754_pow+0x798>)
 801648a:	4413      	add	r3, r2
 801648c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016490:	4606      	mov	r6, r0
 8016492:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016496:	460f      	mov	r7, r1
 8016498:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801649c:	f7e9 ff1e 	bl	80002dc <__adddf3>
 80164a0:	4642      	mov	r2, r8
 80164a2:	464b      	mov	r3, r9
 80164a4:	f7e9 ff1a 	bl	80002dc <__adddf3>
 80164a8:	4632      	mov	r2, r6
 80164aa:	463b      	mov	r3, r7
 80164ac:	f7e9 ff16 	bl	80002dc <__adddf3>
 80164b0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80164b4:	4632      	mov	r2, r6
 80164b6:	463b      	mov	r3, r7
 80164b8:	4658      	mov	r0, fp
 80164ba:	460d      	mov	r5, r1
 80164bc:	f7e9 ff0c 	bl	80002d8 <__aeabi_dsub>
 80164c0:	4642      	mov	r2, r8
 80164c2:	464b      	mov	r3, r9
 80164c4:	f7e9 ff08 	bl	80002d8 <__aeabi_dsub>
 80164c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80164cc:	f7e9 ff04 	bl	80002d8 <__aeabi_dsub>
 80164d0:	465c      	mov	r4, fp
 80164d2:	4602      	mov	r2, r0
 80164d4:	e036      	b.n	8016544 <__ieee754_pow+0x79c>
 80164d6:	bf00      	nop
 80164d8:	4a454eef 	.word	0x4a454eef
 80164dc:	3fca7e28 	.word	0x3fca7e28
 80164e0:	93c9db65 	.word	0x93c9db65
 80164e4:	3fcd864a 	.word	0x3fcd864a
 80164e8:	a91d4101 	.word	0xa91d4101
 80164ec:	3fd17460 	.word	0x3fd17460
 80164f0:	518f264d 	.word	0x518f264d
 80164f4:	3fd55555 	.word	0x3fd55555
 80164f8:	db6fabff 	.word	0xdb6fabff
 80164fc:	3fdb6db6 	.word	0x3fdb6db6
 8016500:	33333303 	.word	0x33333303
 8016504:	3fe33333 	.word	0x3fe33333
 8016508:	e0000000 	.word	0xe0000000
 801650c:	3feec709 	.word	0x3feec709
 8016510:	dc3a03fd 	.word	0xdc3a03fd
 8016514:	3feec709 	.word	0x3feec709
 8016518:	145b01f5 	.word	0x145b01f5
 801651c:	be3e2fe0 	.word	0xbe3e2fe0
 8016520:	7ff00000 	.word	0x7ff00000
 8016524:	43400000 	.word	0x43400000
 8016528:	0003988e 	.word	0x0003988e
 801652c:	000bb679 	.word	0x000bb679
 8016530:	080171e0 	.word	0x080171e0
 8016534:	3ff00000 	.word	0x3ff00000
 8016538:	40080000 	.word	0x40080000
 801653c:	080171c0 	.word	0x080171c0
 8016540:	080171d0 	.word	0x080171d0
 8016544:	460b      	mov	r3, r1
 8016546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801654a:	e5d7      	b.n	80160fc <__ieee754_pow+0x354>
 801654c:	f04f 0a01 	mov.w	sl, #1
 8016550:	e65e      	b.n	8016210 <__ieee754_pow+0x468>
 8016552:	a3b4      	add	r3, pc, #720	@ (adr r3, 8016824 <__ieee754_pow+0xa7c>)
 8016554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016558:	4630      	mov	r0, r6
 801655a:	4639      	mov	r1, r7
 801655c:	f7e9 febe 	bl	80002dc <__adddf3>
 8016560:	4642      	mov	r2, r8
 8016562:	e9cd 0100 	strd	r0, r1, [sp]
 8016566:	464b      	mov	r3, r9
 8016568:	4620      	mov	r0, r4
 801656a:	4629      	mov	r1, r5
 801656c:	f7e9 feb4 	bl	80002d8 <__aeabi_dsub>
 8016570:	4602      	mov	r2, r0
 8016572:	460b      	mov	r3, r1
 8016574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016578:	f7ea faf6 	bl	8000b68 <__aeabi_dcmpgt>
 801657c:	2800      	cmp	r0, #0
 801657e:	f47f ae00 	bne.w	8016182 <__ieee754_pow+0x3da>
 8016582:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8016586:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801658a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801658e:	fa43 fa0a 	asr.w	sl, r3, sl
 8016592:	44da      	add	sl, fp
 8016594:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8016598:	489d      	ldr	r0, [pc, #628]	@ (8016810 <__ieee754_pow+0xa68>)
 801659a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801659e:	4108      	asrs	r0, r1
 80165a0:	ea00 030a 	and.w	r3, r0, sl
 80165a4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80165a8:	f1c1 0114 	rsb	r1, r1, #20
 80165ac:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80165b0:	fa4a fa01 	asr.w	sl, sl, r1
 80165b4:	f1bb 0f00 	cmp.w	fp, #0
 80165b8:	4640      	mov	r0, r8
 80165ba:	4649      	mov	r1, r9
 80165bc:	f04f 0200 	mov.w	r2, #0
 80165c0:	bfb8      	it	lt
 80165c2:	f1ca 0a00 	rsblt	sl, sl, #0
 80165c6:	f7e9 fe87 	bl	80002d8 <__aeabi_dsub>
 80165ca:	4680      	mov	r8, r0
 80165cc:	4689      	mov	r9, r1
 80165ce:	4632      	mov	r2, r6
 80165d0:	463b      	mov	r3, r7
 80165d2:	4640      	mov	r0, r8
 80165d4:	4649      	mov	r1, r9
 80165d6:	f7e9 fe81 	bl	80002dc <__adddf3>
 80165da:	2400      	movs	r4, #0
 80165dc:	a37c      	add	r3, pc, #496	@ (adr r3, 80167d0 <__ieee754_pow+0xa28>)
 80165de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165e2:	4620      	mov	r0, r4
 80165e4:	460d      	mov	r5, r1
 80165e6:	f7ea f82f 	bl	8000648 <__aeabi_dmul>
 80165ea:	4642      	mov	r2, r8
 80165ec:	e9cd 0100 	strd	r0, r1, [sp]
 80165f0:	464b      	mov	r3, r9
 80165f2:	4620      	mov	r0, r4
 80165f4:	4629      	mov	r1, r5
 80165f6:	f7e9 fe6f 	bl	80002d8 <__aeabi_dsub>
 80165fa:	4602      	mov	r2, r0
 80165fc:	460b      	mov	r3, r1
 80165fe:	4630      	mov	r0, r6
 8016600:	4639      	mov	r1, r7
 8016602:	f7e9 fe69 	bl	80002d8 <__aeabi_dsub>
 8016606:	a374      	add	r3, pc, #464	@ (adr r3, 80167d8 <__ieee754_pow+0xa30>)
 8016608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801660c:	f7ea f81c 	bl	8000648 <__aeabi_dmul>
 8016610:	a373      	add	r3, pc, #460	@ (adr r3, 80167e0 <__ieee754_pow+0xa38>)
 8016612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016616:	4680      	mov	r8, r0
 8016618:	4689      	mov	r9, r1
 801661a:	4620      	mov	r0, r4
 801661c:	4629      	mov	r1, r5
 801661e:	f7ea f813 	bl	8000648 <__aeabi_dmul>
 8016622:	4602      	mov	r2, r0
 8016624:	460b      	mov	r3, r1
 8016626:	4640      	mov	r0, r8
 8016628:	4649      	mov	r1, r9
 801662a:	f7e9 fe57 	bl	80002dc <__adddf3>
 801662e:	4604      	mov	r4, r0
 8016630:	460d      	mov	r5, r1
 8016632:	4602      	mov	r2, r0
 8016634:	460b      	mov	r3, r1
 8016636:	e9dd 0100 	ldrd	r0, r1, [sp]
 801663a:	f7e9 fe4f 	bl	80002dc <__adddf3>
 801663e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016642:	4680      	mov	r8, r0
 8016644:	4689      	mov	r9, r1
 8016646:	f7e9 fe47 	bl	80002d8 <__aeabi_dsub>
 801664a:	4602      	mov	r2, r0
 801664c:	460b      	mov	r3, r1
 801664e:	4620      	mov	r0, r4
 8016650:	4629      	mov	r1, r5
 8016652:	f7e9 fe41 	bl	80002d8 <__aeabi_dsub>
 8016656:	4642      	mov	r2, r8
 8016658:	4606      	mov	r6, r0
 801665a:	460f      	mov	r7, r1
 801665c:	464b      	mov	r3, r9
 801665e:	4640      	mov	r0, r8
 8016660:	4649      	mov	r1, r9
 8016662:	f7e9 fff1 	bl	8000648 <__aeabi_dmul>
 8016666:	a360      	add	r3, pc, #384	@ (adr r3, 80167e8 <__ieee754_pow+0xa40>)
 8016668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801666c:	4604      	mov	r4, r0
 801666e:	460d      	mov	r5, r1
 8016670:	f7e9 ffea 	bl	8000648 <__aeabi_dmul>
 8016674:	a35e      	add	r3, pc, #376	@ (adr r3, 80167f0 <__ieee754_pow+0xa48>)
 8016676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801667a:	f7e9 fe2d 	bl	80002d8 <__aeabi_dsub>
 801667e:	4622      	mov	r2, r4
 8016680:	462b      	mov	r3, r5
 8016682:	f7e9 ffe1 	bl	8000648 <__aeabi_dmul>
 8016686:	a35c      	add	r3, pc, #368	@ (adr r3, 80167f8 <__ieee754_pow+0xa50>)
 8016688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801668c:	f7e9 fe26 	bl	80002dc <__adddf3>
 8016690:	4622      	mov	r2, r4
 8016692:	462b      	mov	r3, r5
 8016694:	f7e9 ffd8 	bl	8000648 <__aeabi_dmul>
 8016698:	a359      	add	r3, pc, #356	@ (adr r3, 8016800 <__ieee754_pow+0xa58>)
 801669a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801669e:	f7e9 fe1b 	bl	80002d8 <__aeabi_dsub>
 80166a2:	4622      	mov	r2, r4
 80166a4:	462b      	mov	r3, r5
 80166a6:	f7e9 ffcf 	bl	8000648 <__aeabi_dmul>
 80166aa:	a357      	add	r3, pc, #348	@ (adr r3, 8016808 <__ieee754_pow+0xa60>)
 80166ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166b0:	f7e9 fe14 	bl	80002dc <__adddf3>
 80166b4:	4622      	mov	r2, r4
 80166b6:	462b      	mov	r3, r5
 80166b8:	f7e9 ffc6 	bl	8000648 <__aeabi_dmul>
 80166bc:	4602      	mov	r2, r0
 80166be:	460b      	mov	r3, r1
 80166c0:	4640      	mov	r0, r8
 80166c2:	4649      	mov	r1, r9
 80166c4:	f7e9 fe08 	bl	80002d8 <__aeabi_dsub>
 80166c8:	4604      	mov	r4, r0
 80166ca:	460d      	mov	r5, r1
 80166cc:	4602      	mov	r2, r0
 80166ce:	460b      	mov	r3, r1
 80166d0:	4640      	mov	r0, r8
 80166d2:	4649      	mov	r1, r9
 80166d4:	f7e9 ffb8 	bl	8000648 <__aeabi_dmul>
 80166d8:	2200      	movs	r2, #0
 80166da:	e9cd 0100 	strd	r0, r1, [sp]
 80166de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80166e2:	4620      	mov	r0, r4
 80166e4:	4629      	mov	r1, r5
 80166e6:	f7e9 fdf7 	bl	80002d8 <__aeabi_dsub>
 80166ea:	4602      	mov	r2, r0
 80166ec:	460b      	mov	r3, r1
 80166ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80166f2:	f7ea f8d3 	bl	800089c <__aeabi_ddiv>
 80166f6:	4632      	mov	r2, r6
 80166f8:	4604      	mov	r4, r0
 80166fa:	460d      	mov	r5, r1
 80166fc:	463b      	mov	r3, r7
 80166fe:	4640      	mov	r0, r8
 8016700:	4649      	mov	r1, r9
 8016702:	f7e9 ffa1 	bl	8000648 <__aeabi_dmul>
 8016706:	4632      	mov	r2, r6
 8016708:	463b      	mov	r3, r7
 801670a:	f7e9 fde7 	bl	80002dc <__adddf3>
 801670e:	4602      	mov	r2, r0
 8016710:	460b      	mov	r3, r1
 8016712:	4620      	mov	r0, r4
 8016714:	4629      	mov	r1, r5
 8016716:	f7e9 fddf 	bl	80002d8 <__aeabi_dsub>
 801671a:	4642      	mov	r2, r8
 801671c:	464b      	mov	r3, r9
 801671e:	f7e9 fddb 	bl	80002d8 <__aeabi_dsub>
 8016722:	460b      	mov	r3, r1
 8016724:	4602      	mov	r2, r0
 8016726:	493b      	ldr	r1, [pc, #236]	@ (8016814 <__ieee754_pow+0xa6c>)
 8016728:	2000      	movs	r0, #0
 801672a:	f7e9 fdd5 	bl	80002d8 <__aeabi_dsub>
 801672e:	ec41 0b10 	vmov	d0, r0, r1
 8016732:	ee10 3a90 	vmov	r3, s1
 8016736:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801673a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801673e:	da30      	bge.n	80167a2 <__ieee754_pow+0x9fa>
 8016740:	4650      	mov	r0, sl
 8016742:	f000 f875 	bl	8016830 <scalbn>
 8016746:	ec51 0b10 	vmov	r0, r1, d0
 801674a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801674e:	f7ff bbd2 	b.w	8015ef6 <__ieee754_pow+0x14e>
 8016752:	4c31      	ldr	r4, [pc, #196]	@ (8016818 <__ieee754_pow+0xa70>)
 8016754:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016758:	42a3      	cmp	r3, r4
 801675a:	d91a      	bls.n	8016792 <__ieee754_pow+0x9ea>
 801675c:	4b2f      	ldr	r3, [pc, #188]	@ (801681c <__ieee754_pow+0xa74>)
 801675e:	440b      	add	r3, r1
 8016760:	4303      	orrs	r3, r0
 8016762:	d009      	beq.n	8016778 <__ieee754_pow+0x9d0>
 8016764:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016768:	2200      	movs	r2, #0
 801676a:	2300      	movs	r3, #0
 801676c:	f7ea f9de 	bl	8000b2c <__aeabi_dcmplt>
 8016770:	3800      	subs	r0, #0
 8016772:	bf18      	it	ne
 8016774:	2001      	movne	r0, #1
 8016776:	e42b      	b.n	8015fd0 <__ieee754_pow+0x228>
 8016778:	4642      	mov	r2, r8
 801677a:	464b      	mov	r3, r9
 801677c:	f7e9 fdac 	bl	80002d8 <__aeabi_dsub>
 8016780:	4632      	mov	r2, r6
 8016782:	463b      	mov	r3, r7
 8016784:	f7ea f9e6 	bl	8000b54 <__aeabi_dcmpge>
 8016788:	2800      	cmp	r0, #0
 801678a:	d1eb      	bne.n	8016764 <__ieee754_pow+0x9bc>
 801678c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801682c <__ieee754_pow+0xa84>
 8016790:	e6f7      	b.n	8016582 <__ieee754_pow+0x7da>
 8016792:	469a      	mov	sl, r3
 8016794:	4b22      	ldr	r3, [pc, #136]	@ (8016820 <__ieee754_pow+0xa78>)
 8016796:	459a      	cmp	sl, r3
 8016798:	f63f aef3 	bhi.w	8016582 <__ieee754_pow+0x7da>
 801679c:	f8dd a010 	ldr.w	sl, [sp, #16]
 80167a0:	e715      	b.n	80165ce <__ieee754_pow+0x826>
 80167a2:	ec51 0b10 	vmov	r0, r1, d0
 80167a6:	4619      	mov	r1, r3
 80167a8:	e7cf      	b.n	801674a <__ieee754_pow+0x9a2>
 80167aa:	491a      	ldr	r1, [pc, #104]	@ (8016814 <__ieee754_pow+0xa6c>)
 80167ac:	2000      	movs	r0, #0
 80167ae:	f7ff bb18 	b.w	8015de2 <__ieee754_pow+0x3a>
 80167b2:	2000      	movs	r0, #0
 80167b4:	2100      	movs	r1, #0
 80167b6:	f7ff bb14 	b.w	8015de2 <__ieee754_pow+0x3a>
 80167ba:	4630      	mov	r0, r6
 80167bc:	4639      	mov	r1, r7
 80167be:	f7ff bb10 	b.w	8015de2 <__ieee754_pow+0x3a>
 80167c2:	460c      	mov	r4, r1
 80167c4:	f7ff bb5e 	b.w	8015e84 <__ieee754_pow+0xdc>
 80167c8:	2400      	movs	r4, #0
 80167ca:	f7ff bb49 	b.w	8015e60 <__ieee754_pow+0xb8>
 80167ce:	bf00      	nop
 80167d0:	00000000 	.word	0x00000000
 80167d4:	3fe62e43 	.word	0x3fe62e43
 80167d8:	fefa39ef 	.word	0xfefa39ef
 80167dc:	3fe62e42 	.word	0x3fe62e42
 80167e0:	0ca86c39 	.word	0x0ca86c39
 80167e4:	be205c61 	.word	0xbe205c61
 80167e8:	72bea4d0 	.word	0x72bea4d0
 80167ec:	3e663769 	.word	0x3e663769
 80167f0:	c5d26bf1 	.word	0xc5d26bf1
 80167f4:	3ebbbd41 	.word	0x3ebbbd41
 80167f8:	af25de2c 	.word	0xaf25de2c
 80167fc:	3f11566a 	.word	0x3f11566a
 8016800:	16bebd93 	.word	0x16bebd93
 8016804:	3f66c16c 	.word	0x3f66c16c
 8016808:	5555553e 	.word	0x5555553e
 801680c:	3fc55555 	.word	0x3fc55555
 8016810:	fff00000 	.word	0xfff00000
 8016814:	3ff00000 	.word	0x3ff00000
 8016818:	4090cbff 	.word	0x4090cbff
 801681c:	3f6f3400 	.word	0x3f6f3400
 8016820:	3fe00000 	.word	0x3fe00000
 8016824:	652b82fe 	.word	0x652b82fe
 8016828:	3c971547 	.word	0x3c971547
 801682c:	4090cc00 	.word	0x4090cc00

08016830 <scalbn>:
 8016830:	b570      	push	{r4, r5, r6, lr}
 8016832:	ec55 4b10 	vmov	r4, r5, d0
 8016836:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801683a:	4606      	mov	r6, r0
 801683c:	462b      	mov	r3, r5
 801683e:	b991      	cbnz	r1, 8016866 <scalbn+0x36>
 8016840:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016844:	4323      	orrs	r3, r4
 8016846:	d03d      	beq.n	80168c4 <scalbn+0x94>
 8016848:	4b35      	ldr	r3, [pc, #212]	@ (8016920 <scalbn+0xf0>)
 801684a:	4620      	mov	r0, r4
 801684c:	4629      	mov	r1, r5
 801684e:	2200      	movs	r2, #0
 8016850:	f7e9 fefa 	bl	8000648 <__aeabi_dmul>
 8016854:	4b33      	ldr	r3, [pc, #204]	@ (8016924 <scalbn+0xf4>)
 8016856:	429e      	cmp	r6, r3
 8016858:	4604      	mov	r4, r0
 801685a:	460d      	mov	r5, r1
 801685c:	da0f      	bge.n	801687e <scalbn+0x4e>
 801685e:	a328      	add	r3, pc, #160	@ (adr r3, 8016900 <scalbn+0xd0>)
 8016860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016864:	e01e      	b.n	80168a4 <scalbn+0x74>
 8016866:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801686a:	4291      	cmp	r1, r2
 801686c:	d10b      	bne.n	8016886 <scalbn+0x56>
 801686e:	4622      	mov	r2, r4
 8016870:	4620      	mov	r0, r4
 8016872:	4629      	mov	r1, r5
 8016874:	f7e9 fd32 	bl	80002dc <__adddf3>
 8016878:	4604      	mov	r4, r0
 801687a:	460d      	mov	r5, r1
 801687c:	e022      	b.n	80168c4 <scalbn+0x94>
 801687e:	460b      	mov	r3, r1
 8016880:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016884:	3936      	subs	r1, #54	@ 0x36
 8016886:	f24c 3250 	movw	r2, #50000	@ 0xc350
 801688a:	4296      	cmp	r6, r2
 801688c:	dd0d      	ble.n	80168aa <scalbn+0x7a>
 801688e:	2d00      	cmp	r5, #0
 8016890:	a11d      	add	r1, pc, #116	@ (adr r1, 8016908 <scalbn+0xd8>)
 8016892:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016896:	da02      	bge.n	801689e <scalbn+0x6e>
 8016898:	a11d      	add	r1, pc, #116	@ (adr r1, 8016910 <scalbn+0xe0>)
 801689a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801689e:	a31a      	add	r3, pc, #104	@ (adr r3, 8016908 <scalbn+0xd8>)
 80168a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168a4:	f7e9 fed0 	bl	8000648 <__aeabi_dmul>
 80168a8:	e7e6      	b.n	8016878 <scalbn+0x48>
 80168aa:	1872      	adds	r2, r6, r1
 80168ac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80168b0:	428a      	cmp	r2, r1
 80168b2:	dcec      	bgt.n	801688e <scalbn+0x5e>
 80168b4:	2a00      	cmp	r2, #0
 80168b6:	dd08      	ble.n	80168ca <scalbn+0x9a>
 80168b8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80168bc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80168c0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80168c4:	ec45 4b10 	vmov	d0, r4, r5
 80168c8:	bd70      	pop	{r4, r5, r6, pc}
 80168ca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80168ce:	da08      	bge.n	80168e2 <scalbn+0xb2>
 80168d0:	2d00      	cmp	r5, #0
 80168d2:	a10b      	add	r1, pc, #44	@ (adr r1, 8016900 <scalbn+0xd0>)
 80168d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168d8:	dac1      	bge.n	801685e <scalbn+0x2e>
 80168da:	a10f      	add	r1, pc, #60	@ (adr r1, 8016918 <scalbn+0xe8>)
 80168dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168e0:	e7bd      	b.n	801685e <scalbn+0x2e>
 80168e2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80168e6:	3236      	adds	r2, #54	@ 0x36
 80168e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80168ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80168f0:	4620      	mov	r0, r4
 80168f2:	4b0d      	ldr	r3, [pc, #52]	@ (8016928 <scalbn+0xf8>)
 80168f4:	4629      	mov	r1, r5
 80168f6:	2200      	movs	r2, #0
 80168f8:	e7d4      	b.n	80168a4 <scalbn+0x74>
 80168fa:	bf00      	nop
 80168fc:	f3af 8000 	nop.w
 8016900:	c2f8f359 	.word	0xc2f8f359
 8016904:	01a56e1f 	.word	0x01a56e1f
 8016908:	8800759c 	.word	0x8800759c
 801690c:	7e37e43c 	.word	0x7e37e43c
 8016910:	8800759c 	.word	0x8800759c
 8016914:	fe37e43c 	.word	0xfe37e43c
 8016918:	c2f8f359 	.word	0xc2f8f359
 801691c:	81a56e1f 	.word	0x81a56e1f
 8016920:	43500000 	.word	0x43500000
 8016924:	ffff3cb0 	.word	0xffff3cb0
 8016928:	3c900000 	.word	0x3c900000

0801692c <with_errno>:
 801692c:	b510      	push	{r4, lr}
 801692e:	ed2d 8b02 	vpush	{d8}
 8016932:	eeb0 8a40 	vmov.f32	s16, s0
 8016936:	eef0 8a60 	vmov.f32	s17, s1
 801693a:	4604      	mov	r4, r0
 801693c:	f7fa fea4 	bl	8011688 <__errno>
 8016940:	eeb0 0a48 	vmov.f32	s0, s16
 8016944:	eef0 0a68 	vmov.f32	s1, s17
 8016948:	ecbd 8b02 	vpop	{d8}
 801694c:	6004      	str	r4, [r0, #0]
 801694e:	bd10      	pop	{r4, pc}

08016950 <xflow>:
 8016950:	4603      	mov	r3, r0
 8016952:	b507      	push	{r0, r1, r2, lr}
 8016954:	ec51 0b10 	vmov	r0, r1, d0
 8016958:	b183      	cbz	r3, 801697c <xflow+0x2c>
 801695a:	4602      	mov	r2, r0
 801695c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016960:	e9cd 2300 	strd	r2, r3, [sp]
 8016964:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016968:	f7e9 fe6e 	bl	8000648 <__aeabi_dmul>
 801696c:	ec41 0b10 	vmov	d0, r0, r1
 8016970:	2022      	movs	r0, #34	@ 0x22
 8016972:	b003      	add	sp, #12
 8016974:	f85d eb04 	ldr.w	lr, [sp], #4
 8016978:	f7ff bfd8 	b.w	801692c <with_errno>
 801697c:	4602      	mov	r2, r0
 801697e:	460b      	mov	r3, r1
 8016980:	e7ee      	b.n	8016960 <xflow+0x10>
 8016982:	0000      	movs	r0, r0
 8016984:	0000      	movs	r0, r0
	...

08016988 <__math_uflow>:
 8016988:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016990 <__math_uflow+0x8>
 801698c:	f7ff bfe0 	b.w	8016950 <xflow>
 8016990:	00000000 	.word	0x00000000
 8016994:	10000000 	.word	0x10000000

08016998 <__math_oflow>:
 8016998:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80169a0 <__math_oflow+0x8>
 801699c:	f7ff bfd8 	b.w	8016950 <xflow>
 80169a0:	00000000 	.word	0x00000000
 80169a4:	70000000 	.word	0x70000000

080169a8 <_init>:
 80169a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169aa:	bf00      	nop
 80169ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169ae:	bc08      	pop	{r3}
 80169b0:	469e      	mov	lr, r3
 80169b2:	4770      	bx	lr

080169b4 <_fini>:
 80169b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80169b6:	bf00      	nop
 80169b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80169ba:	bc08      	pop	{r3}
 80169bc:	469e      	mov	lr, r3
 80169be:	4770      	bx	lr
