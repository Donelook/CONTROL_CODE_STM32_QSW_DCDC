
Magisterka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000169b4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08016b98  08016b98  00017b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080173c8  080173c8  000193b0  2**0
                  CONTENTS
  4 .ARM          00000008  080173c8  080173c8  000183c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080173d0  080173d0  000193b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080173d0  080173d0  000183d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080173d4  080173d4  000183d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b0  20000000  080173d8  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002334  200003b0  08017788  000193b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026e4  08017788  000196e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000193b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025a54  00000000  00000000  000193e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004eb9  00000000  00000000  0003ee34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f38  00000000  00000000  00043cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000180f  00000000  00000000  00045c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d579  00000000  00000000  00047437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000267a8  00000000  00000000  000749b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f281  00000000  00000000  0009b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ba3d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fcc  00000000  00000000  001ba41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001c43e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003b0 	.word	0x200003b0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016b7c 	.word	0x08016b7c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003b4 	.word	0x200003b4
 800021c:	08016b7c 	.word	0x08016b7c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	0000      	movs	r0, r0
	...

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f003 fae8 	bl	8004612 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 fce3 	bl	8001a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f001 fb15 	bl	8002674 <MX_GPIO_Init>
  MX_DMA_Init();
 800104a:	f001 fac9 	bl	80025e0 <MX_DMA_Init>
  MX_ADC3_Init();
 800104e:	f000 fda3 	bl	8001b98 <MX_ADC3_Init>
  MX_ADC4_Init();
 8001052:	f000 fe6d 	bl	8001d30 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001056:	f000 fed1 	bl	8001dfc <MX_ADC5_Init>
  MX_DAC1_Init();
 800105a:	f000 ff55 	bl	8001f08 <MX_DAC1_Init>
  MX_DAC2_Init();
 800105e:	f000 ff9f 	bl	8001fa0 <MX_DAC2_Init>
  MX_TIM1_Init();
 8001062:	f000 ffd7 	bl	8002014 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001066:	f001 f95d 	bl	8002324 <MX_TIM8_Init>
  MX_UART4_Init();
 800106a:	f001 fa6d 	bl	8002548 <MX_UART4_Init>
  MX_ADC1_Init();
 800106e:	f000 fd1b 	bl	8001aa8 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001072:	f001 f869 	bl	8002148 <MX_TIM4_Init>
  MX_USB_Device_Init();
 8001076:	f00f f94f 	bl	8010318 <MX_USB_Device_Init>
  MX_TIM15_Init();
 800107a:	f001 f9ed 	bl	8002458 <MX_TIM15_Init>
  MX_TIM16_Init();
 800107e:	f001 fa3d 	bl	80024fc <MX_TIM16_Init>
  MX_TIM7_Init();
 8001082:	f001 f919 	bl	80022b8 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001086:	f001 f8d7 	bl	8002238 <MX_TIM6_Init>
  MX_CORDIC_Init();
 800108a:	f000 ff29 	bl	8001ee0 <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */

  sCordicConfig.Function   = CORDIC_FUNCTION_SQUAREROOT;       /* Compute sine (and cosine) */
 800108e:	4b85      	ldr	r3, [pc, #532]	@ (80012a4 <main+0x26c>)
 8001090:	2209      	movs	r2, #9
 8001092:	601a      	str	r2, [r3, #0]
  sCordicConfig.Precision  = CORDIC_PRECISION_6CYCLES;    /* Maximum precision (24 iterations) */
 8001094:	4b83      	ldr	r3, [pc, #524]	@ (80012a4 <main+0x26c>)
 8001096:	2260      	movs	r2, #96	@ 0x60
 8001098:	619a      	str	r2, [r3, #24]
  sCordicConfig.Scale      = CORDIC_SCALE_0;              /* No additional scaling */
 800109a:	4b82      	ldr	r3, [pc, #520]	@ (80012a4 <main+0x26c>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  sCordicConfig.NbWrite    = CORDIC_NBWRITE_1;            /* One input (angle); implicit modulus = 1 */
 80010a0:	4b80      	ldr	r3, [pc, #512]	@ (80012a4 <main+0x26c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  sCordicConfig.NbRead     = CORDIC_NBREAD_1;             /* Two outputs (sine and cosine) */
 80010a6:	4b7f      	ldr	r3, [pc, #508]	@ (80012a4 <main+0x26c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  sCordicConfig.InSize     = CORDIC_INSIZE_32BITS;        /* 32-bit input (Q1.31 format) */
 80010ac:	4b7d      	ldr	r3, [pc, #500]	@ (80012a4 <main+0x26c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  sCordicConfig.OutSize    = CORDIC_OUTSIZE_32BITS;       /* 32-bit output (Q1.31 format) */
 80010b2:	4b7c      	ldr	r3, [pc, #496]	@ (80012a4 <main+0x26c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]


  if (HAL_CORDIC_Configure(&hcordic, &sCordicConfig) != HAL_OK)
 80010b8:	497a      	ldr	r1, [pc, #488]	@ (80012a4 <main+0x26c>)
 80010ba:	487b      	ldr	r0, [pc, #492]	@ (80012a8 <main+0x270>)
 80010bc:	f004 ffdc 	bl	8006078 <HAL_CORDIC_Configure>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <main+0x92>
    {
      /* Configuration Error */
      Error_Handler();
 80010c6:	f002 fc9f 	bl	8003a08 <Error_Handler>

  while (1)
  {


	  	  	  	  checkfaults = Check_Faults();
 80010ca:	f001 fd5f 	bl	8002b8c <Check_Faults>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b76      	ldr	r3, [pc, #472]	@ (80012ac <main+0x274>)
 80010d4:	701a      	strb	r2, [r3, #0]

	  	  	  	  if (dataReceivedFlag) {
 80010d6:	4b76      	ldr	r3, [pc, #472]	@ (80012b0 <main+0x278>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <main+0xb2>
	  	  	  	      // Process the data
	  	  	  	      ParseUSBCommand();  // Function to handle the received command
 80010e0:	f002 f894 	bl	800320c <ParseUSBCommand>

	  	  	  	      // Clear the flag after processing
	  	  	  	      dataReceivedFlag = 0;
 80010e4:	4b72      	ldr	r3, [pc, #456]	@ (80012b0 <main+0x278>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
	  	  	  	  }

	  	  	  	  interlock = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 80010ea:	2104      	movs	r1, #4
 80010ec:	4871      	ldr	r0, [pc, #452]	@ (80012b4 <main+0x27c>)
 80010ee:	f006 f8ad 	bl	800724c <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b70      	ldr	r3, [pc, #448]	@ (80012b8 <main+0x280>)
 80010f8:	701a      	strb	r2, [r3, #0]

	  	          if (interlock &&  start_program && !(checkfaults)) {
 80010fa:	4b6f      	ldr	r3, [pc, #444]	@ (80012b8 <main+0x280>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00e      	beq.n	8001120 <main+0xe8>
 8001102:	4b6e      	ldr	r3, [pc, #440]	@ (80012bc <main+0x284>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00a      	beq.n	8001120 <main+0xe8>
 800110a:	4b68      	ldr	r3, [pc, #416]	@ (80012ac <main+0x274>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d106      	bne.n	8001120 <main+0xe8>
	  	        	//USB_SendString("State: EVENT start_program \r\n");
	  	              event = EVENT_START;
 8001112:	4b6b      	ldr	r3, [pc, #428]	@ (80012c0 <main+0x288>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
	  	              start_program = 0;
 8001118:	4b68      	ldr	r3, [pc, #416]	@ (80012bc <main+0x284>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	e019      	b.n	8001154 <main+0x11c>
	  	          }else if (interlock &&  stop_program && !(checkfaults)) {
 8001120:	4b65      	ldr	r3, [pc, #404]	@ (80012b8 <main+0x280>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00e      	beq.n	8001146 <main+0x10e>
 8001128:	4b66      	ldr	r3, [pc, #408]	@ (80012c4 <main+0x28c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00a      	beq.n	8001146 <main+0x10e>
 8001130:	4b5e      	ldr	r3, [pc, #376]	@ (80012ac <main+0x274>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d106      	bne.n	8001146 <main+0x10e>
		  	        	//USB_SendString("State: EVENT start_program \r\n");
		  	              event = EVENT_SHUTDOWN;
 8001138:	4b61      	ldr	r3, [pc, #388]	@ (80012c0 <main+0x288>)
 800113a:	2203      	movs	r2, #3
 800113c:	701a      	strb	r2, [r3, #0]
		  	              stop_program = 0;
 800113e:	4b61      	ldr	r3, [pc, #388]	@ (80012c4 <main+0x28c>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e006      	b.n	8001154 <main+0x11c>
		  	          }
	  	          else if (clear_fault) {
 8001146:	4b60      	ldr	r3, [pc, #384]	@ (80012c8 <main+0x290>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <main+0x11c>
	  	        	  /* clear fault condition */
	  	              event = EVENT_CLEAR_FAULT;
 800114e:	4b5c      	ldr	r3, [pc, #368]	@ (80012c0 <main+0x288>)
 8001150:	2202      	movs	r2, #2
 8001152:	701a      	strb	r2, [r3, #0]
	  	          }

	  	         if (!interlock || checkfaults /* fault condition */)
 8001154:	4b58      	ldr	r3, [pc, #352]	@ (80012b8 <main+0x280>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <main+0x12c>
 800115c:	4b53      	ldr	r3, [pc, #332]	@ (80012ac <main+0x274>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <main+0x132>
	  	       	 {
	  	       	  	event = EVENT_FAULT;
 8001164:	4b56      	ldr	r3, [pc, #344]	@ (80012c0 <main+0x288>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
	  	       	 }

	  	          // Handle the event and update the state
	  	          currentState = handle_event(currentState, event);
 800116a:	4b58      	ldr	r3, [pc, #352]	@ (80012cc <main+0x294>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4a54      	ldr	r2, [pc, #336]	@ (80012c0 <main+0x288>)
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f001 fbc9 	bl	800290c <handle_event>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <main+0x294>)
 8001180:	701a      	strb	r2, [r3, #0]

	  	          // Perform actions based on the current state
	  	          switch (currentState) {
 8001182:	4b52      	ldr	r3, [pc, #328]	@ (80012cc <main+0x294>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b04      	cmp	r3, #4
 8001188:	f200 83fc 	bhi.w	8001984 <main+0x94c>
 800118c:	a201      	add	r2, pc, #4	@ (adr r2, 8001194 <main+0x15c>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011a9 	.word	0x080011a9
 8001198:	08001267 	.word	0x08001267
 800119c:	08001315 	.word	0x08001315
 80011a0:	08001871 	.word	0x08001871
 80011a4:	080018e5 	.word	0x080018e5
	  	              {
	  	            	//GPIOs
	  	            	//CUrrent Sensors OCD pin needed to go low in reset condition after fault event
	  	            	//HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_SET);
	  	            	//HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 80011a8:	2201      	movs	r2, #1
 80011aa:	2104      	movs	r1, #4
 80011ac:	4848      	ldr	r0, [pc, #288]	@ (80012d0 <main+0x298>)
 80011ae:	f006 f865 	bl	800727c <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	483f      	ldr	r0, [pc, #252]	@ (80012b4 <main+0x27c>)
 80011b8:	f006 f860 	bl	800727c <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2120      	movs	r1, #32
 80011c0:	4844      	ldr	r0, [pc, #272]	@ (80012d4 <main+0x29c>)
 80011c2:	f006 f85b 	bl	800727c <HAL_GPIO_WritePin>
	  	            	HAL_Delay(1000);
 80011c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011ca:	f003 fa93 	bl	80046f4 <HAL_Delay>
	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2120      	movs	r1, #32
 80011d2:	4840      	ldr	r0, [pc, #256]	@ (80012d4 <main+0x29c>)
 80011d4:	f006 f852 	bl	800727c <HAL_GPIO_WritePin>
	  	            	  // Start PWM for delay time transfer to FPGA
	  	            	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011d8:	2100      	movs	r1, #0
 80011da:	483f      	ldr	r0, [pc, #252]	@ (80012d8 <main+0x2a0>)
 80011dc:	f008 ffac 	bl	800a138 <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80011e0:	2104      	movs	r1, #4
 80011e2:	483e      	ldr	r0, [pc, #248]	@ (80012dc <main+0x2a4>)
 80011e4:	f008 ffa8 	bl	800a138 <HAL_TIM_PWM_Start>

	  	            	  //DAC for  current reference
	  	            	  ///DAC1_OUT1 	- MAX1
	  	            	  //DAC1_OUT2 	- MAX2
	  	            	  //DAC2_OUT1	- MIN
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_1);
 80011e8:	2100      	movs	r1, #0
 80011ea:	483d      	ldr	r0, [pc, #244]	@ (80012e0 <main+0x2a8>)
 80011ec:	f005 f97e 	bl	80064ec <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_2);
 80011f0:	2110      	movs	r1, #16
 80011f2:	483b      	ldr	r0, [pc, #236]	@ (80012e0 <main+0x2a8>)
 80011f4:	f005 f97a 	bl	80064ec <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac2,DAC2_CHANNEL_1);
 80011f8:	2100      	movs	r1, #0
 80011fa:	483a      	ldr	r0, [pc, #232]	@ (80012e4 <main+0x2ac>)
 80011fc:	f005 f976 	bl	80064ec <HAL_DAC_Start>

	  	            	//if( HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R)!= HAL_OK) printf("error");
	  	            	//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);

	  	            	  // FAN PWM and 5s timer6 for check temperature and change duty cycle
	  	            	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001200:	2100      	movs	r1, #0
 8001202:	4839      	ldr	r0, [pc, #228]	@ (80012e8 <main+0x2b0>)
 8001204:	f008 ff98 	bl	800a138 <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_Base_Start_IT(&htim6);
 8001208:	4838      	ldr	r0, [pc, #224]	@ (80012ec <main+0x2b4>)
 800120a:	f008 fe97 	bl	8009f3c <HAL_TIM_Base_Start_IT>

	  	            	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800120e:	217f      	movs	r1, #127	@ 0x7f
 8001210:	4837      	ldr	r0, [pc, #220]	@ (80012f0 <main+0x2b8>)
 8001212:	f004 fd95 	bl	8005d40 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8001216:	217f      	movs	r1, #127	@ 0x7f
 8001218:	4836      	ldr	r0, [pc, #216]	@ (80012f4 <main+0x2bc>)
 800121a:	f004 fd91 	bl	8005d40 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 800121e:	217f      	movs	r1, #127	@ 0x7f
 8001220:	4835      	ldr	r0, [pc, #212]	@ (80012f8 <main+0x2c0>)
 8001222:	f004 fd8d 	bl	8005d40 <HAL_ADCEx_Calibration_Start>

	  	            	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_dma_buffer, 5);
 8001226:	2205      	movs	r2, #5
 8001228:	4934      	ldr	r1, [pc, #208]	@ (80012fc <main+0x2c4>)
 800122a:	4831      	ldr	r0, [pc, #196]	@ (80012f0 <main+0x2b8>)
 800122c:	f003 fe84 	bl	8004f38 <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4_dma_buffer, 2);
 8001230:	2202      	movs	r2, #2
 8001232:	4933      	ldr	r1, [pc, #204]	@ (8001300 <main+0x2c8>)
 8001234:	482f      	ldr	r0, [pc, #188]	@ (80012f4 <main+0x2bc>)
 8001236:	f003 fe7f 	bl	8004f38 <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_dma_buffer, 10);
 800123a:	220a      	movs	r2, #10
 800123c:	4931      	ldr	r1, [pc, #196]	@ (8001304 <main+0x2cc>)
 800123e:	482e      	ldr	r0, [pc, #184]	@ (80012f8 <main+0x2c0>)
 8001240:	f003 fe7a 	bl	8004f38 <HAL_ADC_Start_DMA>

	  	            	Set_PWM_DutyCycle(20);
 8001244:	2014      	movs	r0, #20
 8001246:	f001 fbbb 	bl	80029c0 <Set_PWM_DutyCycle>

	  	            	current_sensor1_vref = adc3_dma_buffer[0];// reference for imax imin
 800124a:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <main+0x2c4>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <main+0x2d0>)
 8001252:	801a      	strh	r2, [r3, #0]
	  	            	current_sensor2_vref = adc3_dma_buffer[1];// reference for imax imin
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <main+0x2c4>)
 8001256:	885b      	ldrh	r3, [r3, #2]
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b2c      	ldr	r3, [pc, #176]	@ (800130c <main+0x2d4>)
 800125c:	801a      	strh	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 800125e:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <main+0x294>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 8001264:	e395      	b.n	8001992 <main+0x95a>
	  	              case STATE_STANDBY:
	  	                  // Wait for start_program signal
	  	              {
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
	  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	            	checkreads = Check_Ready();
 8001266:	f001 fccb 	bl	8002c00 <Check_Ready>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <main+0x2d8>)
 8001270:	701a      	strb	r2, [r3, #0]
	  	            	  if(start_program && interlock &&  !(checkfaults)   && checkreads){
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <main+0x284>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8387 	beq.w	800198a <main+0x952>
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <main+0x280>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 8382 	beq.w	800198a <main+0x952>
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <main+0x274>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 837d 	bne.w	800198a <main+0x952>
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <main+0x2d8>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 8378 	beq.w	800198a <main+0x952>
	  	            		  currentState = STATE_REGULATION;//STATE_SOFT_START;
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <main+0x294>)
 800129c:	2202      	movs	r2, #2
 800129e:	701a      	strb	r2, [r3, #0]
		  	            	//once = 1;
		  	            	  }*/
	  	            	  }

	  	              }
	  	                  break;
 80012a0:	e373      	b.n	800198a <main+0x952>
 80012a2:	bf00      	nop
 80012a4:	20000b94 	.word	0x20000b94
 80012a8:	2000069c 	.word	0x2000069c
 80012ac:	20000b88 	.word	0x20000b88
 80012b0:	20000b74 	.word	0x20000b74
 80012b4:	48000800 	.word	0x48000800
 80012b8:	20000b90 	.word	0x20000b90
 80012bc:	20000b84 	.word	0x20000b84
 80012c0:	20000024 	.word	0x20000024
 80012c4:	20000b85 	.word	0x20000b85
 80012c8:	20000b86 	.word	0x20000b86
 80012cc:	20000b87 	.word	0x20000b87
 80012d0:	48001400 	.word	0x48001400
 80012d4:	48001000 	.word	0x48001000
 80012d8:	200007ac 	.word	0x200007ac
 80012dc:	200008dc 	.word	0x200008dc
 80012e0:	200006c4 	.word	0x200006c4
 80012e4:	200006d8 	.word	0x200006d8
 80012e8:	200007f8 	.word	0x200007f8
 80012ec:	20000844 	.word	0x20000844
 80012f0:	20000438 	.word	0x20000438
 80012f4:	200004a4 	.word	0x200004a4
 80012f8:	20000510 	.word	0x20000510
 80012fc:	20000a70 	.word	0x20000a70
 8001300:	20000a88 	.word	0x20000a88
 8001304:	20000a9c 	.word	0x20000a9c
 8001308:	20000a54 	.word	0x20000a54
 800130c:	20000a56 	.word	0x20000a56
 8001310:	20000b89 	.word	0x20000b89

	  	              case STATE_REGULATION:
	  	                  // Maintain output voltage/current
	  	            	  // 20khz sample time of regulators Timer 15
	  	                  {
	  	                	if(once == 0){
 8001314:	4b7e      	ldr	r3, [pc, #504]	@ (8001510 <main+0x4d8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d107      	bne.n	800132c <main+0x2f4>
	  	                		//Start timer that start_program ramp and pi regulation
	  	                		HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
 800131c:	2200      	movs	r2, #0
 800131e:	2104      	movs	r1, #4
 8001320:	487c      	ldr	r0, [pc, #496]	@ (8001514 <main+0x4dc>)
 8001322:	f005 ffab 	bl	800727c <HAL_GPIO_WritePin>
	  	                		HAL_TIM_Base_Start_IT(&htim15); // START TIM15 THATS IS MAIN CONTROL LOOP
 8001326:	487c      	ldr	r0, [pc, #496]	@ (8001518 <main+0x4e0>)
 8001328:	f008 fe08 	bl	8009f3c <HAL_TIM_Base_Start_IT>

	  	                		 }
	  	                	  if(flag_control)
 800132c:	4b7b      	ldr	r3, [pc, #492]	@ (800151c <main+0x4e4>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 832d 	beq.w	8001990 <main+0x958>
	  	                	  {
	  	                		// start_ticks = SysTick->VAL;

	  	                		  	  	input_vol = (int32_t)Low_pass_filter(input_voltage, input_vol, input_vol_x_n1, input_vol_y_n1); //input_voltage;
 8001336:	4b7a      	ldr	r3, [pc, #488]	@ (8001520 <main+0x4e8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	ee07 3a90 	vmov	s15, r3
 800133e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001342:	4b78      	ldr	r3, [pc, #480]	@ (8001524 <main+0x4ec>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	ee07 3a10 	vmov	s14, r3
 800134a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800134e:	4b76      	ldr	r3, [pc, #472]	@ (8001528 <main+0x4f0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	ee06 3a90 	vmov	s13, r3
 8001356:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800135a:	4b74      	ldr	r3, [pc, #464]	@ (800152c <main+0x4f4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	ee06 3a10 	vmov	s12, r3
 8001362:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8001366:	eef0 1a46 	vmov.f32	s3, s12
 800136a:	eeb0 1a66 	vmov.f32	s2, s13
 800136e:	eef0 0a47 	vmov.f32	s1, s14
 8001372:	eeb0 0a67 	vmov.f32	s0, s15
 8001376:	f001 fe4b 	bl	8003010 <Low_pass_filter>
 800137a:	eef0 7a40 	vmov.f32	s15, s0
 800137e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001382:	ee17 2a90 	vmov	r2, s15
 8001386:	4b67      	ldr	r3, [pc, #412]	@ (8001524 <main+0x4ec>)
 8001388:	601a      	str	r2, [r3, #0]
	  	                		  	  	output_vol = (int32_t)Low_pass_filter(output_voltage, output_vol, output_vol_x_n1, output_vol_y_n1); //output_voltage;
 800138a:	4b69      	ldr	r3, [pc, #420]	@ (8001530 <main+0x4f8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	ee07 3a90 	vmov	s15, r3
 8001392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001396:	4b67      	ldr	r3, [pc, #412]	@ (8001534 <main+0x4fc>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	ee07 3a10 	vmov	s14, r3
 800139e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80013a2:	4b65      	ldr	r3, [pc, #404]	@ (8001538 <main+0x500>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	ee06 3a90 	vmov	s13, r3
 80013aa:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80013ae:	4b63      	ldr	r3, [pc, #396]	@ (800153c <main+0x504>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	ee06 3a10 	vmov	s12, r3
 80013b6:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80013ba:	eef0 1a46 	vmov.f32	s3, s12
 80013be:	eeb0 1a66 	vmov.f32	s2, s13
 80013c2:	eef0 0a47 	vmov.f32	s1, s14
 80013c6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ca:	f001 fe21 	bl	8003010 <Low_pass_filter>
 80013ce:	eef0 7a40 	vmov.f32	s15, s0
 80013d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d6:	ee17 2a90 	vmov	r2, s15
 80013da:	4b56      	ldr	r3, [pc, #344]	@ (8001534 <main+0x4fc>)
 80013dc:	601a      	str	r2, [r3, #0]


	  	                		  	  	Gv = (float)output_vol/(float)input_vol;//output_voltage/input_voltage;
 80013de:	4b55      	ldr	r3, [pc, #340]	@ (8001534 <main+0x4fc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001524 <main+0x4ec>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	ee07 3a90 	vmov	s15, r3
 80013f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fa:	4b51      	ldr	r3, [pc, #324]	@ (8001540 <main+0x508>)
 80013fc:	edc3 7a00 	vstr	s15, [r3]

	  	                				if(Gv<2) //CZARY
 8001400:	4b4f      	ldr	r3, [pc, #316]	@ (8001540 <main+0x508>)
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800140a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001412:	f140 80a5 	bpl.w	8001560 <main+0x528>
	  	                				{

	  	                					delay_tr = approx_acos2((1-Gv))*INV_wr;
 8001416:	4b4a      	ldr	r3, [pc, #296]	@ (8001540 <main+0x508>)
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001424:	eeb0 0a67 	vmov.f32	s0, s15
 8001428:	f002 f9a8 	bl	800377c <approx_acos2>
 800142c:	ee10 3a10 	vmov	r3, s0
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff f8b1 	bl	8000598 <__aeabi_f2d>
 8001436:	a332      	add	r3, pc, #200	@ (adr r3, 8001500 <main+0x4c8>)
 8001438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143c:	f7ff f904 	bl	8000648 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	f7ff fbf6 	bl	8000c38 <__aeabi_d2f>
 800144c:	4603      	mov	r3, r0
 800144e:	4a3d      	ldr	r2, [pc, #244]	@ (8001544 <main+0x50c>)
 8001450:	6013      	str	r3, [r2, #0]
	  	                					 // start_ticks = SysTick->VAL;

	  	                					cordic_input = float_to_integer(((2-Gv)/Gv), 100, 32);
 8001452:	4b3b      	ldr	r3, [pc, #236]	@ (8001540 <main+0x508>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800145c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001460:	4b37      	ldr	r3, [pc, #220]	@ (8001540 <main+0x508>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800146a:	2120      	movs	r1, #32
 800146c:	2064      	movs	r0, #100	@ 0x64
 800146e:	eeb0 0a66 	vmov.f32	s0, s13
 8001472:	f002 f885 	bl	8003580 <float_to_integer>
 8001476:	4603      	mov	r3, r0
 8001478:	4a33      	ldr	r2, [pc, #204]	@ (8001548 <main+0x510>)
 800147a:	6013      	str	r3, [r2, #0]
	  	                					HAL_CORDIC_Calculate(&hcordic, &cordic_input, &result_q31, 1, 100);//sqrt((2-Gv)/Gv))
 800147c:	2364      	movs	r3, #100	@ 0x64
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	2301      	movs	r3, #1
 8001482:	4a32      	ldr	r2, [pc, #200]	@ (800154c <main+0x514>)
 8001484:	4930      	ldr	r1, [pc, #192]	@ (8001548 <main+0x510>)
 8001486:	4832      	ldr	r0, [pc, #200]	@ (8001550 <main+0x518>)
 8001488:	f004 fe32 	bl	80060f0 <HAL_CORDIC_Calculate>
	  	                					resultcordic = integer_to_float(result_q31, 10, 1, 32); // result of sqrt((((2-Gv)/Gv)) ) in float
 800148c:	4b2f      	ldr	r3, [pc, #188]	@ (800154c <main+0x514>)
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	2320      	movs	r3, #32
 8001492:	2201      	movs	r2, #1
 8001494:	210a      	movs	r1, #10
 8001496:	f002 f8f9 	bl	800368c <integer_to_float>
 800149a:	eef0 7a40 	vmov.f32	s15, s0
 800149e:	4b2d      	ldr	r3, [pc, #180]	@ (8001554 <main+0x51c>)
 80014a0:	edc3 7a00 	vstr	s15, [r3]


	  	                					imin = (int)(Imin_Factor*output_vol*resultcordic*INV_Z); //[mA] Negative current needed to Zero voltage switching in resonance
 80014a4:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <main+0x4fc>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	ee07 3a90 	vmov	s15, r3
 80014ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014b0:	4b29      	ldr	r3, [pc, #164]	@ (8001558 <main+0x520>)
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ba:	4b26      	ldr	r3, [pc, #152]	@ (8001554 <main+0x51c>)
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c4:	ee17 0a90 	vmov	r0, s15
 80014c8:	f7ff f866 	bl	8000598 <__aeabi_f2d>
 80014cc:	a30e      	add	r3, pc, #56	@ (adr r3, 8001508 <main+0x4d0>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f8b9 	bl	8000648 <__aeabi_dmul>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff fb63 	bl	8000ba8 <__aeabi_d2iz>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <main+0x524>)
 80014e8:	601a      	str	r2, [r3, #0]

	  	                					if(imin>4000) imin = 4000;
 80014ea:	4b1c      	ldr	r3, [pc, #112]	@ (800155c <main+0x524>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80014f2:	d96f      	bls.n	80015d4 <main+0x59c>
 80014f4:	4b19      	ldr	r3, [pc, #100]	@ (800155c <main+0x524>)
 80014f6:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e06a      	b.n	80015d4 <main+0x59c>
 80014fe:	bf00      	nop
 8001500:	155f05f7 	.word	0x155f05f7
 8001504:	3e4eb582 	.word	0x3e4eb582
 8001508:	411d99a8 	.word	0x411d99a8
 800150c:	3f7c9e24 	.word	0x3f7c9e24
 8001510:	20000b8c 	.word	0x20000b8c
 8001514:	48001400 	.word	0x48001400
 8001518:	20000928 	.word	0x20000928
 800151c:	20000b91 	.word	0x20000b91
 8001520:	20000a64 	.word	0x20000a64
 8001524:	20000030 	.word	0x20000030
 8001528:	20000038 	.word	0x20000038
 800152c:	2000003c 	.word	0x2000003c
 8001530:	20000a7c 	.word	0x20000a7c
 8001534:	20000034 	.word	0x20000034
 8001538:	20000040 	.word	0x20000040
 800153c:	20000044 	.word	0x20000044
 8001540:	20000014 	.word	0x20000014
 8001544:	20000004 	.word	0x20000004
 8001548:	20000050 	.word	0x20000050
 800154c:	20000048 	.word	0x20000048
 8001550:	2000069c 	.word	0x2000069c
 8001554:	2000004c 	.word	0x2000004c
 8001558:	2000002c 	.word	0x2000002c
 800155c:	20000a60 	.word	0x20000a60
	  	                				} else if(Gv >= 2)
 8001560:	4ba5      	ldr	r3, [pc, #660]	@ (80017f8 <main+0x7c0>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800156a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001572:	db2f      	blt.n	80015d4 <main+0x59c>
	  	                				{
	  	                					delay_tr = (M_PI-approx_acos2((1/(Gv-1)))) * INV_wr;
 8001574:	4ba0      	ldr	r3, [pc, #640]	@ (80017f8 <main+0x7c0>)
 8001576:	edd3 7a00 	vldr	s15, [r3]
 800157a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800157e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001582:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800158a:	eeb0 0a47 	vmov.f32	s0, s14
 800158e:	f002 f8f5 	bl	800377c <approx_acos2>
 8001592:	ee10 3a10 	vmov	r3, s0
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe fffe 	bl	8000598 <__aeabi_f2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	a18d      	add	r1, pc, #564	@ (adr r1, 80017d8 <main+0x7a0>)
 80015a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015a6:	f7fe fe97 	bl	80002d8 <__aeabi_dsub>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	a38b      	add	r3, pc, #556	@ (adr r3, 80017e0 <main+0x7a8>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7ff f846 	bl	8000648 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff fb38 	bl	8000c38 <__aeabi_d2f>
 80015c8:	4603      	mov	r3, r0
 80015ca:	4a8c      	ldr	r2, [pc, #560]	@ (80017fc <main+0x7c4>)
 80015cc:	6013      	str	r3, [r2, #0]
	  	                					imin = 0;
 80015ce:	4b8c      	ldr	r3, [pc, #560]	@ (8001800 <main+0x7c8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
	  	                				}
	  	                				if(/*once == 0*/delay_tr < 0.001){
 80015d4:	4b89      	ldr	r3, [pc, #548]	@ (80017fc <main+0x7c4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffdd 	bl	8000598 <__aeabi_f2d>
 80015de:	a382      	add	r3, pc, #520	@ (adr r3, 80017e8 <main+0x7b0>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7ff faa2 	bl	8000b2c <__aeabi_dcmplt>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d034      	beq.n	8001658 <main+0x620>

	  	                					int delay_tr_freq = (int)(1/delay_tr);
 80015ee:	4b83      	ldr	r3, [pc, #524]	@ (80017fc <main+0x7c4>)
 80015f0:	ed93 7a00 	vldr	s14, [r3]
 80015f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001600:	ee17 3a90 	vmov	r3, s15
 8001604:	607b      	str	r3, [r7, #4]

	  	                					if(delay_tr_freq>10000000) delay_tr_freq = 1000000;//10Mhz
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a7e      	ldr	r2, [pc, #504]	@ (8001804 <main+0x7cc>)
 800160a:	4293      	cmp	r3, r2
 800160c:	dd01      	ble.n	8001612 <main+0x5da>
 800160e:	4b7e      	ldr	r3, [pc, #504]	@ (8001808 <main+0x7d0>)
 8001610:	607b      	str	r3, [r7, #4]

	  	                					if(abs(delay_tr_freq_ACC-delay_tr_freq) >= 10000) {
 8001612:	4b7e      	ldr	r3, [pc, #504]	@ (800180c <main+0x7d4>)
 8001614:	ed93 7a00 	vldr	s14, [r3]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001622:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001626:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800162a:	ee17 3a90 	vmov	r3, s15
 800162e:	2b00      	cmp	r3, #0
 8001630:	bfb8      	it	lt
 8001632:	425b      	neglt	r3, r3
 8001634:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001638:	4293      	cmp	r3, r2
 800163a:	dd0d      	ble.n	8001658 <main+0x620>
	  	                						Update_PWM_Frequency(&htim1, TIM_CHANNEL_1, delay_tr_freq); // Set TIM1 CH1 to freq that is delay tr and send to fpga
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	461a      	mov	r2, r3
 8001640:	2100      	movs	r1, #0
 8001642:	4873      	ldr	r0, [pc, #460]	@ (8001810 <main+0x7d8>)
 8001644:	f001 fa32 	bl	8002aac <Update_PWM_Frequency>
	  	                						delay_tr_freq_ACC = delay_tr_freq;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	ee07 3a90 	vmov	s15, r3
 800164e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001652:	4b6e      	ldr	r3, [pc, #440]	@ (800180c <main+0x7d4>)
 8001654:	edc3 7a00 	vstr	s15, [r3]
	  	                					}
	  	                				}

	  	                				if(RAMP_FINISHED == 0) Vramp = RAMP(Vramp, 48000, 200000 , Ts); // Adding to Vramp stepping voltage to create starting ramp
 8001658:	4b6e      	ldr	r3, [pc, #440]	@ (8001814 <main+0x7dc>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10c      	bne.n	800167a <main+0x642>
 8001660:	4b6d      	ldr	r3, [pc, #436]	@ (8001818 <main+0x7e0>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	ed9f 0a6d 	vldr	s0, [pc, #436]	@ 800181c <main+0x7e4>
 8001668:	4a6d      	ldr	r2, [pc, #436]	@ (8001820 <main+0x7e8>)
 800166a:	f64b 3180 	movw	r1, #48000	@ 0xbb80
 800166e:	4618      	mov	r0, r3
 8001670:	f001 fbfe 	bl	8002e70 <RAMP>
 8001674:	4603      	mov	r3, r0
 8001676:	4a68      	ldr	r2, [pc, #416]	@ (8001818 <main+0x7e0>)
 8001678:	6013      	str	r3, [r2, #0]

	  	                				regulatorPI(&imax1, &Integral_I, output_vol, Vramp, LIM_PEAK_POS, LIM_PEAK_NEG, Kp, Ti, Ts);
 800167a:	4b6a      	ldr	r3, [pc, #424]	@ (8001824 <main+0x7ec>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	461c      	mov	r4, r3
 8001680:	4b65      	ldr	r3, [pc, #404]	@ (8001818 <main+0x7e0>)
 8001682:	6819      	ldr	r1, [r3, #0]
 8001684:	4b68      	ldr	r3, [pc, #416]	@ (8001828 <main+0x7f0>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a68      	ldr	r2, [pc, #416]	@ (800182c <main+0x7f4>)
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	4868      	ldr	r0, [pc, #416]	@ (8001830 <main+0x7f8>)
 800168e:	edd0 7a00 	vldr	s15, [r0]
 8001692:	4868      	ldr	r0, [pc, #416]	@ (8001834 <main+0x7fc>)
 8001694:	ed90 7a00 	vldr	s14, [r0]
 8001698:	9201      	str	r2, [sp, #4]
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 800181c <main+0x7e4>
 80016a0:	eef0 0a47 	vmov.f32	s1, s14
 80016a4:	eeb0 0a67 	vmov.f32	s0, s15
 80016a8:	460b      	mov	r3, r1
 80016aa:	4622      	mov	r2, r4
 80016ac:	4962      	ldr	r1, [pc, #392]	@ (8001838 <main+0x800>)
 80016ae:	4863      	ldr	r0, [pc, #396]	@ (800183c <main+0x804>)
 80016b0:	f001 fc30 	bl	8002f14 <regulatorPI>

	  	                				if(/*once == 0*/ output_vol > 40000)
 80016b4:	4b5b      	ldr	r3, [pc, #364]	@ (8001824 <main+0x7ec>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80016bc:	4293      	cmp	r3, r2
 80016be:	d962      	bls.n	8001786 <main+0x74e>
	  	                				{
	  	                					delay_hc = (2*C_CAP*output_vol) * (1/imax1);
 80016c0:	4b58      	ldr	r3, [pc, #352]	@ (8001824 <main+0x7ec>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff45 	bl	8000554 <__aeabi_ui2d>
 80016ca:	a349      	add	r3, pc, #292	@ (adr r3, 80017f0 <main+0x7b8>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ffba 	bl	8000648 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4614      	mov	r4, r2
 80016da:	461d      	mov	r5, r3
 80016dc:	4b57      	ldr	r3, [pc, #348]	@ (800183c <main+0x804>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	3201      	adds	r2, #1
 80016e4:	2a02      	cmp	r2, #2
 80016e6:	bf94      	ite	ls
 80016e8:	2201      	movls	r2, #1
 80016ea:	2200      	movhi	r2, #0
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	b252      	sxtb	r2, r2
 80016f0:	2a00      	cmp	r2, #0
 80016f2:	bf14      	ite	ne
 80016f4:	461b      	movne	r3, r3
 80016f6:	2300      	moveq	r3, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff3b 	bl	8000574 <__aeabi_i2d>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4620      	mov	r0, r4
 8001704:	4629      	mov	r1, r5
 8001706:	f7fe ff9f 	bl	8000648 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff fa91 	bl	8000c38 <__aeabi_d2f>
 8001716:	4603      	mov	r3, r0
 8001718:	4a49      	ldr	r2, [pc, #292]	@ (8001840 <main+0x808>)
 800171a:	6013      	str	r3, [r2, #0]
	  	                					int delay_hc_freq = (int)(1/delay_hc);
 800171c:	4b48      	ldr	r3, [pc, #288]	@ (8001840 <main+0x808>)
 800171e:	ed93 7a00 	vldr	s14, [r3]
 8001722:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800172a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172e:	ee17 3a90 	vmov	r3, s15
 8001732:	603b      	str	r3, [r7, #0]
	  	                					if(delay_hc_freq>10000000) delay_hc_freq = 1000000;//10Mhz jakis problem
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	4a33      	ldr	r2, [pc, #204]	@ (8001804 <main+0x7cc>)
 8001738:	4293      	cmp	r3, r2
 800173a:	dd01      	ble.n	8001740 <main+0x708>
 800173c:	4b32      	ldr	r3, [pc, #200]	@ (8001808 <main+0x7d0>)
 800173e:	603b      	str	r3, [r7, #0]

	  	                					if(abs(delay_hc_freq_ACC-delay_hc_freq) >= 10000) {
 8001740:	4b40      	ldr	r3, [pc, #256]	@ (8001844 <main+0x80c>)
 8001742:	ed93 7a00 	vldr	s14, [r3]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	ee07 3a90 	vmov	s15, r3
 800174c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001750:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001758:	ee17 3a90 	vmov	r3, s15
 800175c:	2b00      	cmp	r3, #0
 800175e:	bfb8      	it	lt
 8001760:	425b      	neglt	r3, r3
 8001762:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001766:	4293      	cmp	r3, r2
 8001768:	dd0d      	ble.n	8001786 <main+0x74e>
	  	                						Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, delay_hc_freq); // Set TIM8 CH1 o freq that is delay hc and send to fpga
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	2104      	movs	r1, #4
 8001770:	4835      	ldr	r0, [pc, #212]	@ (8001848 <main+0x810>)
 8001772:	f001 f99b 	bl	8002aac <Update_PWM_Frequency>
	  	                						delay_hc_freq_ACC = delay_hc_freq;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	ee07 3a90 	vmov	s15, r3
 800177c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001780:	4b30      	ldr	r3, [pc, #192]	@ (8001844 <main+0x80c>)
 8001782:	edc3 7a00 	vstr	s15, [r3]
	  	                					}
	  	                				}

	  	                				imax2 =  imax1 + imax2_sum;//
 8001786:	4b2d      	ldr	r3, [pc, #180]	@ (800183c <main+0x804>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	4b2f      	ldr	r3, [pc, #188]	@ (800184c <main+0x814>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4413      	add	r3, r2
 8001792:	461a      	mov	r2, r3
 8001794:	4b2e      	ldr	r3, [pc, #184]	@ (8001850 <main+0x818>)
 8001796:	601a      	str	r2, [r3, #0]

	  	                				if(once == 0){
 8001798:	4b2e      	ldr	r3, [pc, #184]	@ (8001854 <main+0x81c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10b      	bne.n	80017b8 <main+0x780>
	  	                					HAL_Delay(500);
 80017a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017a4:	f002 ffa6 	bl	80046f4 <HAL_Delay>
	  	                					HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
 80017a8:	2201      	movs	r2, #1
 80017aa:	2120      	movs	r1, #32
 80017ac:	482a      	ldr	r0, [pc, #168]	@ (8001858 <main+0x820>)
 80017ae:	f005 fd65 	bl	800727c <HAL_GPIO_WritePin>
	  	                					once = 1;
 80017b2:	4b28      	ldr	r3, [pc, #160]	@ (8001854 <main+0x81c>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]
	  	                				}

	  	                				flag_control = 0;
 80017b8:	4b28      	ldr	r3, [pc, #160]	@ (800185c <main+0x824>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
	  	                				stop_ticks = SysTick->VAL;
 80017be:	4b28      	ldr	r3, [pc, #160]	@ (8001860 <main+0x828>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b27      	ldr	r3, [pc, #156]	@ (8001864 <main+0x82c>)
 80017c6:	601a      	str	r2, [r3, #0]
	  	                				elapsed_ticks = start_ticks-stop_ticks;
 80017c8:	4b27      	ldr	r3, [pc, #156]	@ (8001868 <main+0x830>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b25      	ldr	r3, [pc, #148]	@ (8001864 <main+0x82c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	4a26      	ldr	r2, [pc, #152]	@ (800186c <main+0x834>)
 80017d4:	6013      	str	r3, [r2, #0]
	  	                	  }

	  	                  }
	  	                  break;
 80017d6:	e0db      	b.n	8001990 <main+0x958>
 80017d8:	54442d18 	.word	0x54442d18
 80017dc:	400921fb 	.word	0x400921fb
 80017e0:	155f05f7 	.word	0x155f05f7
 80017e4:	3e4eb582 	.word	0x3e4eb582
 80017e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017ec:	3f50624d 	.word	0x3f50624d
 80017f0:	e5c45270 	.word	0xe5c45270
 80017f4:	3e32e5d9 	.word	0x3e32e5d9
 80017f8:	20000014 	.word	0x20000014
 80017fc:	20000004 	.word	0x20000004
 8001800:	20000a60 	.word	0x20000a60
 8001804:	00989680 	.word	0x00989680
 8001808:	000f4240 	.word	0x000f4240
 800180c:	2000000c 	.word	0x2000000c
 8001810:	200007ac 	.word	0x200007ac
 8001814:	20000a8c 	.word	0x20000a8c
 8001818:	20000a84 	.word	0x20000a84
 800181c:	3851b717 	.word	0x3851b717
 8001820:	00030d40 	.word	0x00030d40
 8001824:	20000034 	.word	0x20000034
 8001828:	20000020 	.word	0x20000020
 800182c:	20000b78 	.word	0x20000b78
 8001830:	20000018 	.word	0x20000018
 8001834:	2000001c 	.word	0x2000001c
 8001838:	20000b7c 	.word	0x20000b7c
 800183c:	20000a58 	.word	0x20000a58
 8001840:	20000008 	.word	0x20000008
 8001844:	20000010 	.word	0x20000010
 8001848:	200008dc 	.word	0x200008dc
 800184c:	20000a98 	.word	0x20000a98
 8001850:	20000a5c 	.word	0x20000a5c
 8001854:	20000b8c 	.word	0x20000b8c
 8001858:	48000800 	.word	0x48000800
 800185c:	20000b91 	.word	0x20000b91
 8001860:	e000e010 	.word	0xe000e010
 8001864:	20000bb4 	.word	0x20000bb4
 8001868:	20000bb0 	.word	0x20000bb0
 800186c:	20000bb8 	.word	0x20000bb8
	  	              case STATE_FAULT:
	  	                  // Handle fault condition
	  	            	  // Turn off all gate drivers and stop FPGA
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP drives mosfet etc
 8001870:	2200      	movs	r2, #0
 8001872:	2120      	movs	r1, #32
 8001874:	4848      	ldr	r0, [pc, #288]	@ (8001998 <main+0x960>)
 8001876:	f005 fd01 	bl	800727c <HAL_GPIO_WritePin>

	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!


	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 800187a:	4848      	ldr	r0, [pc, #288]	@ (800199c <main+0x964>)
 800187c:	f008 fbd6 	bl	800a02c <HAL_TIM_Base_Stop_IT>

	  	            	HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port,NOT_RST_1_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	2180      	movs	r1, #128	@ 0x80
 8001884:	4846      	ldr	r0, [pc, #280]	@ (80019a0 <main+0x968>)
 8001886:	f005 fcf9 	bl	800727c <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_2_GPIO_Port,NOT_RST_2_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001890:	4844      	ldr	r0, [pc, #272]	@ (80019a4 <main+0x96c>)
 8001892:	f005 fcf3 	bl	800727c <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port,NOT_RST_3_Pin, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2101      	movs	r1, #1
 800189a:	4843      	ldr	r0, [pc, #268]	@ (80019a8 <main+0x970>)
 800189c:	f005 fcee 	bl	800727c <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port,NOT_RST_4_Pin, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2140      	movs	r1, #64	@ 0x40
 80018a4:	483c      	ldr	r0, [pc, #240]	@ (8001998 <main+0x960>)
 80018a6:	f005 fce9 	bl	800727c <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2102      	movs	r1, #2
 80018ae:	483d      	ldr	r0, [pc, #244]	@ (80019a4 <main+0x96c>)
 80018b0:	f005 fce4 	bl	800727c <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ba:	483c      	ldr	r0, [pc, #240]	@ (80019ac <main+0x974>)
 80018bc:	f005 fcde 	bl	800727c <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	2120      	movs	r1, #32
 80018c4:	4837      	ldr	r0, [pc, #220]	@ (80019a4 <main+0x96c>)
 80018c6:	f005 fcd9 	bl	800727c <HAL_GPIO_WritePin>

	  	            	HAL_TIM_Base_Start(&htim7); // timer for reset OCD and INTERLOCK reset turn off
 80018ca:	4839      	ldr	r0, [pc, #228]	@ (80019b0 <main+0x978>)
 80018cc:	f008 fac6 	bl	8009e5c <HAL_TIM_Base_Start>


	  	            	once = 0;
 80018d0:	4b38      	ldr	r3, [pc, #224]	@ (80019b4 <main+0x97c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
	  	            	start_program = 0;
 80018d6:	4b38      	ldr	r3, [pc, #224]	@ (80019b8 <main+0x980>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
	  	            	currentState = STATE_SHUTDOWN;
 80018dc:	4b37      	ldr	r3, [pc, #220]	@ (80019bc <main+0x984>)
 80018de:	2204      	movs	r2, #4
 80018e0:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 80018e2:	e056      	b.n	8001992 <main+0x95a>
	  	              case STATE_SHUTDOWN:
	  	                  // Safely shut down the converter
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2120      	movs	r1, #32
 80018e8:	482b      	ldr	r0, [pc, #172]	@ (8001998 <main+0x960>)
 80018ea:	f005 fcc7 	bl	800727c <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 80018ee:	2201      	movs	r2, #1
 80018f0:	2104      	movs	r1, #4
 80018f2:	482e      	ldr	r0, [pc, #184]	@ (80019ac <main+0x974>)
 80018f4:	f005 fcc2 	bl	800727c <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 80018f8:	4828      	ldr	r0, [pc, #160]	@ (800199c <main+0x964>)
 80018fa:	f008 fb97 	bl	800a02c <HAL_TIM_Base_Stop_IT>
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
	  	            	RAMP_FINISHED = 0;
 80018fe:	4b30      	ldr	r3, [pc, #192]	@ (80019c0 <main+0x988>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
						once = 0;
 8001904:	4b2b      	ldr	r3, [pc, #172]	@ (80019b4 <main+0x97c>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
	  	            	imax1 = 1;
 800190a:	4b2e      	ldr	r3, [pc, #184]	@ (80019c4 <main+0x98c>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]
						imax2 = 1;
 8001910:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <main+0x990>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]
						vout = 1;
 8001916:	4b2d      	ldr	r3, [pc, #180]	@ (80019cc <main+0x994>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]
						Vramp = 1;
 800191c:	4b2c      	ldr	r3, [pc, #176]	@ (80019d0 <main+0x998>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]
						delay_tr = 1;
 8001922:	4b2c      	ldr	r3, [pc, #176]	@ (80019d4 <main+0x99c>)
 8001924:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001928:	601a      	str	r2, [r3, #0]
						delay_hc = 1;
 800192a:	4b2b      	ldr	r3, [pc, #172]	@ (80019d8 <main+0x9a0>)
 800192c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001930:	601a      	str	r2, [r3, #0]
						Gv = 1;
 8001932:	4b2a      	ldr	r3, [pc, #168]	@ (80019dc <main+0x9a4>)
 8001934:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001938:	601a      	str	r2, [r3, #0]
						Integral_I = 1;
 800193a:	4b29      	ldr	r3, [pc, #164]	@ (80019e0 <main+0x9a8>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]
						prev_delta = 1;
 8001940:	4b28      	ldr	r3, [pc, #160]	@ (80019e4 <main+0x9ac>)
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]
						input_vol = 1;
 8001946:	4b28      	ldr	r3, [pc, #160]	@ (80019e8 <main+0x9b0>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]
						input_voltage =1;
 800194c:	4b27      	ldr	r3, [pc, #156]	@ (80019ec <main+0x9b4>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]
						output_vol = 1;
 8001952:	4b27      	ldr	r3, [pc, #156]	@ (80019f0 <main+0x9b8>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]
						output_voltage =1;
 8001958:	4b26      	ldr	r3, [pc, #152]	@ (80019f4 <main+0x9bc>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]
						input_vol_x_n1 = 1;
 800195e:	4b26      	ldr	r3, [pc, #152]	@ (80019f8 <main+0x9c0>)
 8001960:	2201      	movs	r2, #1
 8001962:	601a      	str	r2, [r3, #0]
						input_vol_y_n1 = 1;
 8001964:	4b25      	ldr	r3, [pc, #148]	@ (80019fc <main+0x9c4>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
						output_vol_x_n1 = 1;
 800196a:	4b25      	ldr	r3, [pc, #148]	@ (8001a00 <main+0x9c8>)
 800196c:	2201      	movs	r2, #1
 800196e:	601a      	str	r2, [r3, #0]
						output_vol_y_n1 = 1;
 8001970:	4b24      	ldr	r3, [pc, #144]	@ (8001a04 <main+0x9cc>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]
						imin = 1;
 8001976:	4b24      	ldr	r3, [pc, #144]	@ (8001a08 <main+0x9d0>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 800197c:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <main+0x984>)
 800197e:	2201      	movs	r2, #1
 8001980:	701a      	strb	r2, [r3, #0]
	  	              }

	  	                  break;
 8001982:	e006      	b.n	8001992 <main+0x95a>
	  	              default:
	  	                  break;
 8001984:	bf00      	nop
 8001986:	f7ff bba0 	b.w	80010ca <main+0x92>
	  	                  break;
 800198a:	bf00      	nop
 800198c:	f7ff bb9d 	b.w	80010ca <main+0x92>
	  	                  break;
 8001990:	bf00      	nop
	  	  	  	  checkfaults = Check_Faults();
 8001992:	f7ff bb9a 	b.w	80010ca <main+0x92>
 8001996:	bf00      	nop
 8001998:	48000800 	.word	0x48000800
 800199c:	20000928 	.word	0x20000928
 80019a0:	48000400 	.word	0x48000400
 80019a4:	48001000 	.word	0x48001000
 80019a8:	48000c00 	.word	0x48000c00
 80019ac:	48001400 	.word	0x48001400
 80019b0:	20000890 	.word	0x20000890
 80019b4:	20000b8c 	.word	0x20000b8c
 80019b8:	20000b84 	.word	0x20000b84
 80019bc:	20000b87 	.word	0x20000b87
 80019c0:	20000a8c 	.word	0x20000a8c
 80019c4:	20000a58 	.word	0x20000a58
 80019c8:	20000a5c 	.word	0x20000a5c
 80019cc:	20000a80 	.word	0x20000a80
 80019d0:	20000a84 	.word	0x20000a84
 80019d4:	20000004 	.word	0x20000004
 80019d8:	20000008 	.word	0x20000008
 80019dc:	20000014 	.word	0x20000014
 80019e0:	20000b7c 	.word	0x20000b7c
 80019e4:	20000b80 	.word	0x20000b80
 80019e8:	20000030 	.word	0x20000030
 80019ec:	20000a64 	.word	0x20000a64
 80019f0:	20000034 	.word	0x20000034
 80019f4:	20000a7c 	.word	0x20000a7c
 80019f8:	20000038 	.word	0x20000038
 80019fc:	2000003c 	.word	0x2000003c
 8001a00:	20000040 	.word	0x20000040
 8001a04:	20000044 	.word	0x20000044
 8001a08:	20000a60 	.word	0x20000a60

08001a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b094      	sub	sp, #80	@ 0x50
 8001a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a12:	f107 0318 	add.w	r3, r7, #24
 8001a16:	2238      	movs	r2, #56	@ 0x38
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f010 f959 	bl	8011cd2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a32:	f007 f98b 	bl	8008d4c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001a36:	2322      	movs	r3, #34	@ 0x22
 8001a38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a40:	2340      	movs	r3, #64	@ 0x40
 8001a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a44:	2301      	movs	r3, #1
 8001a46:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001a50:	2304      	movs	r3, #4
 8001a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001a54:	234b      	movs	r3, #75	@ 0x4b
 8001a56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a60:	2302      	movs	r3, #2
 8001a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a64:	f107 0318 	add.w	r3, r7, #24
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f007 fa23 	bl	8008eb4 <HAL_RCC_OscConfig>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001a74:	f001 ffc8 	bl	8003a08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a78:	230f      	movs	r3, #15
 8001a7a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	2104      	movs	r1, #4
 8001a90:	4618      	mov	r0, r3
 8001a92:	f007 fd21 	bl	80094d8 <HAL_RCC_ClockConfig>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a9c:	f001 ffb4 	bl	8003a08 <Error_Handler>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3750      	adds	r7, #80	@ 0x50
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08c      	sub	sp, #48	@ 0x30
 8001aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001aae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	2220      	movs	r2, #32
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f010 f906 	bl	8011cd2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ac6:	4b32      	ldr	r3, [pc, #200]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001ac8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001acc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ace:	4b30      	ldr	r3, [pc, #192]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001ad0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ad4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ad6:	4b2e      	ldr	r3, [pc, #184]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001adc:	4b2c      	ldr	r3, [pc, #176]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ae8:	4b29      	ldr	r3, [pc, #164]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aee:	4b28      	ldr	r3, [pc, #160]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001af0:	2204      	movs	r2, #4
 8001af2:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001af4:	4b26      	ldr	r3, [pc, #152]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001afa:	4b25      	ldr	r3, [pc, #148]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001b00:	4b23      	ldr	r3, [pc, #140]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b06:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b0e:	4b20      	ldr	r3, [pc, #128]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b14:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b22:	4b1b      	ldr	r3, [pc, #108]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001b28:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b30:	4817      	ldr	r0, [pc, #92]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001b32:	f003 f845 	bl	8004bc0 <HAL_ADC_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001b3c:	f001 ff64 	bl	8003a08 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4811      	ldr	r0, [pc, #68]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001b4c:	f004 f95a 	bl	8005e04 <HAL_ADCEx_MultiModeConfigChannel>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001b56:	f001 ff57 	bl	8003a08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <MX_ADC1_Init+0xec>)
 8001b5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b5e:	2306      	movs	r3, #6
 8001b60:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001b62:	2307      	movs	r3, #7
 8001b64:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b66:	237f      	movs	r3, #127	@ 0x7f
 8001b68:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	4619      	mov	r1, r3
 8001b76:	4806      	ldr	r0, [pc, #24]	@ (8001b90 <MX_ADC1_Init+0xe8>)
 8001b78:	f003 fac6 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001b82:	f001 ff41 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b86:	bf00      	nop
 8001b88:	3730      	adds	r7, #48	@ 0x30
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200003cc 	.word	0x200003cc
 8001b94:	cb840000 	.word	0xcb840000

08001b98 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	@ 0x30
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2220      	movs	r2, #32
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f010 f88e 	bl	8011cd2 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001bb6:	4b57      	ldr	r3, [pc, #348]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001bb8:	4a57      	ldr	r2, [pc, #348]	@ (8001d18 <MX_ADC3_Init+0x180>)
 8001bba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001bbc:	4b55      	ldr	r3, [pc, #340]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001bbe:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001bc2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001bc4:	4b53      	ldr	r3, [pc, #332]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bca:	4b52      	ldr	r3, [pc, #328]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001bd0:	4b50      	ldr	r3, [pc, #320]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001bd6:	4b4f      	ldr	r3, [pc, #316]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bdc:	4b4d      	ldr	r3, [pc, #308]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001bde:	2204      	movs	r2, #4
 8001be0:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001be2:	4b4c      	ldr	r3, [pc, #304]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001be8:	4b4a      	ldr	r3, [pc, #296]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 5;
 8001bee:	4b49      	ldr	r3, [pc, #292]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001bf0:	2205      	movs	r2, #5
 8001bf2:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001bf4:	4b47      	ldr	r3, [pc, #284]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bfc:	4b45      	ldr	r3, [pc, #276]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c02:	4b44      	ldr	r3, [pc, #272]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001c08:	4b42      	ldr	r3, [pc, #264]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001c10:	4b40      	ldr	r3, [pc, #256]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001c12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c16:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001c18:	4b3e      	ldr	r3, [pc, #248]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001c20:	483c      	ldr	r0, [pc, #240]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001c22:	f002 ffcd 	bl	8004bc0 <HAL_ADC_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8001c2c:	f001 feec 	bl	8003a08 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001c34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4836      	ldr	r0, [pc, #216]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001c3c:	f004 f8e2 	bl	8005e04 <HAL_ADCEx_MultiModeConfigChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001c46:	f001 fedf 	bl	8003a08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c4a:	4b34      	ldr	r3, [pc, #208]	@ (8001d1c <MX_ADC3_Init+0x184>)
 8001c4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c4e:	2306      	movs	r3, #6
 8001c50:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c56:	237f      	movs	r3, #127	@ 0x7f
 8001c58:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 38;
 8001c5e:	2326      	movs	r3, #38	@ 0x26
 8001c60:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8001c62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c66:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetSaturation = DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4828      	ldr	r0, [pc, #160]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001c74:	f003 fa48 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001c7e:	f001 fec3 	bl	8003a08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c82:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <MX_ADC3_Init+0x188>)
 8001c84:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c86:	230c      	movs	r3, #12
 8001c88:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_2;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 37;
 8001c8e:	2325      	movs	r3, #37	@ 0x25
 8001c90:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001c92:	1d3b      	adds	r3, r7, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	481f      	ldr	r0, [pc, #124]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001c98:	f003 fa36 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 8001ca2:	f001 feb1 	bl	8003a08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001ca6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d24 <MX_ADC3_Init+0x18c>)
 8001ca8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001caa:	2312      	movs	r3, #18
 8001cac:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_3;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 8;
 8001cb2:	2308      	movs	r3, #8
 8001cb4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cb6:	1d3b      	adds	r3, r7, #4
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4816      	ldr	r0, [pc, #88]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001cbc:	f003 fa24 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_ADC3_Init+0x132>
  {
    Error_Handler();
 8001cc6:	f001 fe9f 	bl	8003a08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001cca:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <MX_ADC3_Init+0x190>)
 8001ccc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001cce:	2318      	movs	r3, #24
 8001cd0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	480d      	ldr	r0, [pc, #52]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001ce0:	f003 fa12 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8001cea:	f001 fe8d 	bl	8003a08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001cee:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <MX_ADC3_Init+0x194>)
 8001cf0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001cf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cf6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4805      	ldr	r0, [pc, #20]	@ (8001d14 <MX_ADC3_Init+0x17c>)
 8001cfe:	f003 fa03 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8001d08:	f001 fe7e 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	3730      	adds	r7, #48	@ 0x30
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000438 	.word	0x20000438
 8001d18:	50000400 	.word	0x50000400
 8001d1c:	04300002 	.word	0x04300002
 8001d20:	08600004 	.word	0x08600004
 8001d24:	0c900008 	.word	0x0c900008
 8001d28:	10c00010 	.word	0x10c00010
 8001d2c:	14f00020 	.word	0x14f00020

08001d30 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d36:	463b      	mov	r3, r7
 8001d38:	2220      	movs	r2, #32
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f00f ffc8 	bl	8011cd2 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001d42:	4b2b      	ldr	r3, [pc, #172]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001d44:	4a2b      	ldr	r2, [pc, #172]	@ (8001df4 <MX_ADC4_Init+0xc4>)
 8001d46:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001d48:	4b29      	ldr	r3, [pc, #164]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001d4a:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001d4e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001d50:	4b27      	ldr	r3, [pc, #156]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d56:	4b26      	ldr	r3, [pc, #152]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001d5c:	4b24      	ldr	r3, [pc, #144]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d62:	4b23      	ldr	r3, [pc, #140]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d68:	4b21      	ldr	r3, [pc, #132]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001d6e:	4b20      	ldr	r3, [pc, #128]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001d74:	4b1e      	ldr	r3, [pc, #120]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001d80:	4b1b      	ldr	r3, [pc, #108]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d88:	4b19      	ldr	r3, [pc, #100]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d8e:	4b18      	ldr	r3, [pc, #96]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001d94:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001d9c:	4b14      	ldr	r3, [pc, #80]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001d9e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001da2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001da4:	4b12      	ldr	r3, [pc, #72]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001dac:	4810      	ldr	r0, [pc, #64]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001dae:	f002 ff07 	bl	8004bc0 <HAL_ADC_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8001db8:	f001 fe26 	bl	8003a08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001df8 <MX_ADC4_Init+0xc8>)
 8001dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dc0:	2306      	movs	r3, #6
 8001dc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001dc4:	2307      	movs	r3, #7
 8001dc6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001dc8:	237f      	movs	r3, #127	@ 0x7f
 8001dca:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dcc:	2304      	movs	r3, #4
 8001dce:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001dd4:	463b      	mov	r3, r7
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4805      	ldr	r0, [pc, #20]	@ (8001df0 <MX_ADC4_Init+0xc0>)
 8001dda:	f003 f995 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8001de4:	f001 fe10 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	200004a4 	.word	0x200004a4
 8001df4:	50000500 	.word	0x50000500
 8001df8:	04300002 	.word	0x04300002

08001dfc <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e02:	463b      	mov	r3, r7
 8001e04:	2220      	movs	r2, #32
 8001e06:	2100      	movs	r1, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f00f ff62 	bl	8011cd2 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001e0e:	4b31      	ldr	r3, [pc, #196]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e10:	4a31      	ldr	r2, [pc, #196]	@ (8001ed8 <MX_ADC5_Init+0xdc>)
 8001e12:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001e14:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e16:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001e1a:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e22:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001e28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e2e:	4b29      	ldr	r3, [pc, #164]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e34:	4b27      	ldr	r3, [pc, #156]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e36:	2204      	movs	r2, #4
 8001e38:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001e3a:	4b26      	ldr	r3, [pc, #152]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001e40:	4b24      	ldr	r3, [pc, #144]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001e46:	4b23      	ldr	r3, [pc, #140]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001e4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001e60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8001e6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001e76:	4b17      	ldr	r3, [pc, #92]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e78:	221c      	movs	r2, #28
 8001e7a:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8001e7c:	4b15      	ldr	r3, [pc, #84]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e82:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001e84:	4b13      	ldr	r3, [pc, #76]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001e8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001e90:	4810      	ldr	r0, [pc, #64]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001e92:	f002 fe95 	bl	8004bc0 <HAL_ADC_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_ADC5_Init+0xa4>
  {
    Error_Handler();
 8001e9c:	f001 fdb4 	bl	8003a08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <MX_ADC5_Init+0xe0>)
 8001ea2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ea4:	2306      	movs	r3, #6
 8001ea6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001eac:	237f      	movs	r3, #127	@ 0x7f
 8001eae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001eb0:	2304      	movs	r3, #4
 8001eb2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001eb8:	463b      	mov	r3, r7
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4805      	ldr	r0, [pc, #20]	@ (8001ed4 <MX_ADC5_Init+0xd8>)
 8001ebe:	f003 f923 	bl	8005108 <HAL_ADC_ConfigChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_ADC5_Init+0xd0>
  {
    Error_Handler();
 8001ec8:	f001 fd9e 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001ecc:	bf00      	nop
 8001ece:	3720      	adds	r7, #32
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000510 	.word	0x20000510
 8001ed8:	50000600 	.word	0x50000600
 8001edc:	04300002 	.word	0x04300002

08001ee0 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <MX_CORDIC_Init+0x20>)
 8001ee6:	4a07      	ldr	r2, [pc, #28]	@ (8001f04 <MX_CORDIC_Init+0x24>)
 8001ee8:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	@ (8001f00 <MX_CORDIC_Init+0x20>)
 8001eec:	f004 f892 	bl	8006014 <HAL_CORDIC_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001ef6:	f001 fd87 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000069c 	.word	0x2000069c
 8001f04:	40020c00 	.word	0x40020c00

08001f08 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08c      	sub	sp, #48	@ 0x30
 8001f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f0e:	463b      	mov	r3, r7
 8001f10:	2230      	movs	r2, #48	@ 0x30
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f00f fedc 	bl	8011cd2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f94 <MX_DAC1_Init+0x8c>)
 8001f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001f98 <MX_DAC1_Init+0x90>)
 8001f1e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001f20:	481c      	ldr	r0, [pc, #112]	@ (8001f94 <MX_DAC1_Init+0x8c>)
 8001f22:	f004 fac0 	bl	80064a6 <HAL_DAC_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001f2c:	f001 fd6c 	bl	8003a08 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001f30:	2302      	movs	r3, #2
 8001f32:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f54:	463b      	mov	r3, r7
 8001f56:	2200      	movs	r2, #0
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480e      	ldr	r0, [pc, #56]	@ (8001f94 <MX_DAC1_Init+0x8c>)
 8001f5c:	f004 fbc0 	bl	80066e0 <HAL_DAC_ConfigChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001f66:	f001 fd4f 	bl	8003a08 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	2210      	movs	r2, #16
 8001f6e:	4619      	mov	r1, r3
 8001f70:	4808      	ldr	r0, [pc, #32]	@ (8001f94 <MX_DAC1_Init+0x8c>)
 8001f72:	f004 fbb5 	bl	80066e0 <HAL_DAC_ConfigChannel>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8001f7c:	f001 fd44 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  __HAL_LINKDMA(&hdac1, DMA_Handle1, hdma_dac1_ch1);
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <MX_DAC1_Init+0x8c>)
 8001f82:	4a06      	ldr	r2, [pc, #24]	@ (8001f9c <MX_DAC1_Init+0x94>)
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	4b05      	ldr	r3, [pc, #20]	@ (8001f9c <MX_DAC1_Init+0x94>)
 8001f88:	4a02      	ldr	r2, [pc, #8]	@ (8001f94 <MX_DAC1_Init+0x8c>)
 8001f8a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END DAC1_Init 2 */

}
 8001f8c:	bf00      	nop
 8001f8e:	3730      	adds	r7, #48	@ 0x30
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	200006c4 	.word	0x200006c4
 8001f98:	50000800 	.word	0x50000800
 8001f9c:	200006ec 	.word	0x200006ec

08001fa0 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08c      	sub	sp, #48	@ 0x30
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	2230      	movs	r2, #48	@ 0x30
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f00f fe90 	bl	8011cd2 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001fb2:	4b16      	ldr	r3, [pc, #88]	@ (800200c <MX_DAC2_Init+0x6c>)
 8001fb4:	4a16      	ldr	r2, [pc, #88]	@ (8002010 <MX_DAC2_Init+0x70>)
 8001fb6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001fb8:	4814      	ldr	r0, [pc, #80]	@ (800200c <MX_DAC2_Init+0x6c>)
 8001fba:	f004 fa74 	bl	80064a6 <HAL_DAC_Init>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001fc4:	f001 fd20 	bl	8003a08 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001fec:	463b      	mov	r3, r7
 8001fee:	2200      	movs	r2, #0
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4806      	ldr	r0, [pc, #24]	@ (800200c <MX_DAC2_Init+0x6c>)
 8001ff4:	f004 fb74 	bl	80066e0 <HAL_DAC_ConfigChannel>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001ffe:	f001 fd03 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8002002:	bf00      	nop
 8002004:	3730      	adds	r7, #48	@ 0x30
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	200006d8 	.word	0x200006d8
 8002010:	50000c00 	.word	0x50000c00

08002014 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b098      	sub	sp, #96	@ 0x60
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800201a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002026:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800202a:	2200      	movs	r2, #0
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	605a      	str	r2, [r3, #4]
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	60da      	str	r2, [r3, #12]
 8002034:	611a      	str	r2, [r3, #16]
 8002036:	615a      	str	r2, [r3, #20]
 8002038:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	2234      	movs	r2, #52	@ 0x34
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f00f fe46 	bl	8011cd2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002046:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <MX_TIM1_Init+0x12c>)
 8002048:	4a3e      	ldr	r2, [pc, #248]	@ (8002144 <MX_TIM1_Init+0x130>)
 800204a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800204c:	4b3c      	ldr	r3, [pc, #240]	@ (8002140 <MX_TIM1_Init+0x12c>)
 800204e:	2200      	movs	r2, #0
 8002050:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002052:	4b3b      	ldr	r3, [pc, #236]	@ (8002140 <MX_TIM1_Init+0x12c>)
 8002054:	2200      	movs	r2, #0
 8002056:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210;
 8002058:	4b39      	ldr	r3, [pc, #228]	@ (8002140 <MX_TIM1_Init+0x12c>)
 800205a:	22d2      	movs	r2, #210	@ 0xd2
 800205c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205e:	4b38      	ldr	r3, [pc, #224]	@ (8002140 <MX_TIM1_Init+0x12c>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002064:	4b36      	ldr	r3, [pc, #216]	@ (8002140 <MX_TIM1_Init+0x12c>)
 8002066:	2200      	movs	r2, #0
 8002068:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206a:	4b35      	ldr	r3, [pc, #212]	@ (8002140 <MX_TIM1_Init+0x12c>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002070:	4833      	ldr	r0, [pc, #204]	@ (8002140 <MX_TIM1_Init+0x12c>)
 8002072:	f008 f80a 	bl	800a08a <HAL_TIM_PWM_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800207c:	f001 fcc4 	bl	8003a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002080:	2300      	movs	r3, #0
 8002082:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002084:	2300      	movs	r3, #0
 8002086:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002088:	2300      	movs	r3, #0
 800208a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800208c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002090:	4619      	mov	r1, r3
 8002092:	482b      	ldr	r0, [pc, #172]	@ (8002140 <MX_TIM1_Init+0x12c>)
 8002094:	f009 f9a4 	bl	800b3e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800209e:	f001 fcb3 	bl	8003a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020a2:	2360      	movs	r3, #96	@ 0x60
 80020a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020aa:	2300      	movs	r3, #0
 80020ac:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020ae:	2300      	movs	r3, #0
 80020b0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020be:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020c2:	2200      	movs	r2, #0
 80020c4:	4619      	mov	r1, r3
 80020c6:	481e      	ldr	r0, [pc, #120]	@ (8002140 <MX_TIM1_Init+0x12c>)
 80020c8:	f008 fa98 	bl	800a5fc <HAL_TIM_PWM_ConfigChannel>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80020d2:	f001 fc99 	bl	8003a08 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80020d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <MX_TIM1_Init+0x12c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699a      	ldr	r2, [r3, #24]
 80020dc:	4b18      	ldr	r3, [pc, #96]	@ (8002140 <MX_TIM1_Init+0x12c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f022 0208 	bic.w	r2, r2, #8
 80020e4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002100:	2300      	movs	r3, #0
 8002102:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002104:	2300      	movs	r3, #0
 8002106:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002108:	2300      	movs	r3, #0
 800210a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800210c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002110:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002116:	2300      	movs	r3, #0
 8002118:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	4619      	mov	r1, r3
 8002122:	4807      	ldr	r0, [pc, #28]	@ (8002140 <MX_TIM1_Init+0x12c>)
 8002124:	f009 f9f2 	bl	800b50c <HAL_TIMEx_ConfigBreakDeadTime>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 800212e:	f001 fc6b 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002132:	4803      	ldr	r0, [pc, #12]	@ (8002140 <MX_TIM1_Init+0x12c>)
 8002134:	f002 f808 	bl	8004148 <HAL_TIM_MspPostInit>

}
 8002138:	bf00      	nop
 800213a:	3760      	adds	r7, #96	@ 0x60
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	200007ac 	.word	0x200007ac
 8002144:	40012c00 	.word	0x40012c00

08002148 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08e      	sub	sp, #56	@ 0x38
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800214e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
 8002156:	605a      	str	r2, [r3, #4]
 8002158:	609a      	str	r2, [r3, #8]
 800215a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002168:	463b      	mov	r3, r7
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]
 8002174:	611a      	str	r2, [r3, #16]
 8002176:	615a      	str	r2, [r3, #20]
 8002178:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800217a:	4b2d      	ldr	r3, [pc, #180]	@ (8002230 <MX_TIM4_Init+0xe8>)
 800217c:	4a2d      	ldr	r2, [pc, #180]	@ (8002234 <MX_TIM4_Init+0xec>)
 800217e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002180:	4b2b      	ldr	r3, [pc, #172]	@ (8002230 <MX_TIM4_Init+0xe8>)
 8002182:	2200      	movs	r2, #0
 8002184:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002186:	4b2a      	ldr	r3, [pc, #168]	@ (8002230 <MX_TIM4_Init+0xe8>)
 8002188:	2200      	movs	r2, #0
 800218a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 679;
 800218c:	4b28      	ldr	r3, [pc, #160]	@ (8002230 <MX_TIM4_Init+0xe8>)
 800218e:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8002192:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002194:	4b26      	ldr	r3, [pc, #152]	@ (8002230 <MX_TIM4_Init+0xe8>)
 8002196:	2200      	movs	r2, #0
 8002198:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800219a:	4b25      	ldr	r3, [pc, #148]	@ (8002230 <MX_TIM4_Init+0xe8>)
 800219c:	2200      	movs	r2, #0
 800219e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021a0:	4823      	ldr	r0, [pc, #140]	@ (8002230 <MX_TIM4_Init+0xe8>)
 80021a2:	f007 fe03 	bl	8009dac <HAL_TIM_Base_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80021ac:	f001 fc2c 	bl	8003a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021ba:	4619      	mov	r1, r3
 80021bc:	481c      	ldr	r0, [pc, #112]	@ (8002230 <MX_TIM4_Init+0xe8>)
 80021be:	f008 fb31 	bl	800a824 <HAL_TIM_ConfigClockSource>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80021c8:	f001 fc1e 	bl	8003a08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021cc:	4818      	ldr	r0, [pc, #96]	@ (8002230 <MX_TIM4_Init+0xe8>)
 80021ce:	f007 ff5c 	bl	800a08a <HAL_TIM_PWM_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80021d8:	f001 fc16 	bl	8003a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021dc:	2300      	movs	r3, #0
 80021de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021e4:	f107 031c 	add.w	r3, r7, #28
 80021e8:	4619      	mov	r1, r3
 80021ea:	4811      	ldr	r0, [pc, #68]	@ (8002230 <MX_TIM4_Init+0xe8>)
 80021ec:	f009 f8f8 	bl	800b3e0 <HAL_TIMEx_MasterConfigSynchronization>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80021f6:	f001 fc07 	bl	8003a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021fa:	2360      	movs	r3, #96	@ 0x60
 80021fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800220a:	463b      	mov	r3, r7
 800220c:	2200      	movs	r2, #0
 800220e:	4619      	mov	r1, r3
 8002210:	4807      	ldr	r0, [pc, #28]	@ (8002230 <MX_TIM4_Init+0xe8>)
 8002212:	f008 f9f3 	bl	800a5fc <HAL_TIM_PWM_ConfigChannel>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 800221c:	f001 fbf4 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002220:	4803      	ldr	r0, [pc, #12]	@ (8002230 <MX_TIM4_Init+0xe8>)
 8002222:	f001 ff91 	bl	8004148 <HAL_TIM_MspPostInit>

}
 8002226:	bf00      	nop
 8002228:	3738      	adds	r7, #56	@ 0x38
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200007f8 	.word	0x200007f8
 8002234:	40000800 	.word	0x40000800

08002238 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b084      	sub	sp, #16
 800223c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800223e:	1d3b      	adds	r3, r7, #4
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002248:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <MX_TIM6_Init+0x78>)
 800224a:	4a1a      	ldr	r2, [pc, #104]	@ (80022b4 <MX_TIM6_Init+0x7c>)
 800224c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11549;
 800224e:	4b18      	ldr	r3, [pc, #96]	@ (80022b0 <MX_TIM6_Init+0x78>)
 8002250:	f642 521d 	movw	r2, #11549	@ 0x2d1d
 8002254:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002256:	4b16      	ldr	r3, [pc, #88]	@ (80022b0 <MX_TIM6_Init+0x78>)
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64934;
 800225c:	4b14      	ldr	r3, [pc, #80]	@ (80022b0 <MX_TIM6_Init+0x78>)
 800225e:	f64f 52a6 	movw	r2, #64934	@ 0xfda6
 8002262:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002264:	4b12      	ldr	r3, [pc, #72]	@ (80022b0 <MX_TIM6_Init+0x78>)
 8002266:	2200      	movs	r2, #0
 8002268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800226a:	4811      	ldr	r0, [pc, #68]	@ (80022b0 <MX_TIM6_Init+0x78>)
 800226c:	f007 fd9e 	bl	8009dac <HAL_TIM_Base_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002276:	f001 fbc7 	bl	8003a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	4619      	mov	r1, r3
 8002286:	480a      	ldr	r0, [pc, #40]	@ (80022b0 <MX_TIM6_Init+0x78>)
 8002288:	f009 f8aa 	bl	800b3e0 <HAL_TIMEx_MasterConfigSynchronization>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002292:	f001 fbb9 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	2036      	movs	r0, #54	@ 0x36
 800229c:	f004 f8cf 	bl	800643e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022a0:	2036      	movs	r0, #54	@ 0x36
 80022a2:	f004 f8e6 	bl	8006472 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	20000844 	.word	0x20000844
 80022b4:	40001000 	.word	0x40001000

080022b8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80022c8:	4b14      	ldr	r3, [pc, #80]	@ (800231c <MX_TIM7_Init+0x64>)
 80022ca:	4a15      	ldr	r2, [pc, #84]	@ (8002320 <MX_TIM7_Init+0x68>)
 80022cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 14999;
 80022ce:	4b13      	ldr	r3, [pc, #76]	@ (800231c <MX_TIM7_Init+0x64>)
 80022d0:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80022d4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	4b11      	ldr	r3, [pc, #68]	@ (800231c <MX_TIM7_Init+0x64>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80022dc:	4b0f      	ldr	r3, [pc, #60]	@ (800231c <MX_TIM7_Init+0x64>)
 80022de:	2209      	movs	r2, #9
 80022e0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e2:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <MX_TIM7_Init+0x64>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80022e8:	480c      	ldr	r0, [pc, #48]	@ (800231c <MX_TIM7_Init+0x64>)
 80022ea:	f007 fd5f 	bl	8009dac <HAL_TIM_Base_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80022f4:	f001 fb88 	bl	8003a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	4619      	mov	r1, r3
 8002304:	4805      	ldr	r0, [pc, #20]	@ (800231c <MX_TIM7_Init+0x64>)
 8002306:	f009 f86b 	bl	800b3e0 <HAL_TIMEx_MasterConfigSynchronization>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002310:	f001 fb7a 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000890 	.word	0x20000890
 8002320:	40001400 	.word	0x40001400

08002324 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b098      	sub	sp, #96	@ 0x60
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800232a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002336:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	609a      	str	r2, [r3, #8]
 8002342:	60da      	str	r2, [r3, #12]
 8002344:	611a      	str	r2, [r3, #16]
 8002346:	615a      	str	r2, [r3, #20]
 8002348:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	2234      	movs	r2, #52	@ 0x34
 800234e:	2100      	movs	r1, #0
 8002350:	4618      	mov	r0, r3
 8002352:	f00f fcbe 	bl	8011cd2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002356:	4b3e      	ldr	r3, [pc, #248]	@ (8002450 <MX_TIM8_Init+0x12c>)
 8002358:	4a3e      	ldr	r2, [pc, #248]	@ (8002454 <MX_TIM8_Init+0x130>)
 800235a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800235c:	4b3c      	ldr	r3, [pc, #240]	@ (8002450 <MX_TIM8_Init+0x12c>)
 800235e:	2200      	movs	r2, #0
 8002360:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002362:	4b3b      	ldr	r3, [pc, #236]	@ (8002450 <MX_TIM8_Init+0x12c>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 8002368:	4b39      	ldr	r3, [pc, #228]	@ (8002450 <MX_TIM8_Init+0x12c>)
 800236a:	22d2      	movs	r2, #210	@ 0xd2
 800236c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236e:	4b38      	ldr	r3, [pc, #224]	@ (8002450 <MX_TIM8_Init+0x12c>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002374:	4b36      	ldr	r3, [pc, #216]	@ (8002450 <MX_TIM8_Init+0x12c>)
 8002376:	2200      	movs	r2, #0
 8002378:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237a:	4b35      	ldr	r3, [pc, #212]	@ (8002450 <MX_TIM8_Init+0x12c>)
 800237c:	2200      	movs	r2, #0
 800237e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002380:	4833      	ldr	r0, [pc, #204]	@ (8002450 <MX_TIM8_Init+0x12c>)
 8002382:	f007 fe82 	bl	800a08a <HAL_TIM_PWM_Init>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800238c:	f001 fb3c 	bl	8003a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002390:	2300      	movs	r3, #0
 8002392:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002394:	2300      	movs	r3, #0
 8002396:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800239c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023a0:	4619      	mov	r1, r3
 80023a2:	482b      	ldr	r0, [pc, #172]	@ (8002450 <MX_TIM8_Init+0x12c>)
 80023a4:	f009 f81c 	bl	800b3e0 <HAL_TIMEx_MasterConfigSynchronization>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80023ae:	f001 fb2b 	bl	8003a08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023b2:	2360      	movs	r3, #96	@ 0x60
 80023b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ba:	2300      	movs	r3, #0
 80023bc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023be:	2300      	movs	r3, #0
 80023c0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023c2:	2300      	movs	r3, #0
 80023c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023d2:	2204      	movs	r2, #4
 80023d4:	4619      	mov	r1, r3
 80023d6:	481e      	ldr	r0, [pc, #120]	@ (8002450 <MX_TIM8_Init+0x12c>)
 80023d8:	f008 f910 	bl	800a5fc <HAL_TIM_PWM_ConfigChannel>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80023e2:	f001 fb11 	bl	8003a08 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_2);
 80023e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002450 <MX_TIM8_Init+0x12c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	699a      	ldr	r2, [r3, #24]
 80023ec:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <MX_TIM8_Init+0x12c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023f4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023fe:	2300      	movs	r3, #0
 8002400:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800240a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800240e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002414:	2300      	movs	r3, #0
 8002416:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800241c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002420:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002426:	2300      	movs	r3, #0
 8002428:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800242e:	1d3b      	adds	r3, r7, #4
 8002430:	4619      	mov	r1, r3
 8002432:	4807      	ldr	r0, [pc, #28]	@ (8002450 <MX_TIM8_Init+0x12c>)
 8002434:	f009 f86a 	bl	800b50c <HAL_TIMEx_ConfigBreakDeadTime>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 800243e:	f001 fae3 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002442:	4803      	ldr	r0, [pc, #12]	@ (8002450 <MX_TIM8_Init+0x12c>)
 8002444:	f001 fe80 	bl	8004148 <HAL_TIM_MspPostInit>

}
 8002448:	bf00      	nop
 800244a:	3760      	adds	r7, #96	@ 0x60
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200008dc 	.word	0x200008dc
 8002454:	40013400 	.word	0x40013400

08002458 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245e:	f107 0310 	add.w	r3, r7, #16
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002476:	4b1f      	ldr	r3, [pc, #124]	@ (80024f4 <MX_TIM15_Init+0x9c>)
 8002478:	4a1f      	ldr	r2, [pc, #124]	@ (80024f8 <MX_TIM15_Init+0xa0>)
 800247a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1499;
 800247c:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <MX_TIM15_Init+0x9c>)
 800247e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002482:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002484:	4b1b      	ldr	r3, [pc, #108]	@ (80024f4 <MX_TIM15_Init+0x9c>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4;
 800248a:	4b1a      	ldr	r3, [pc, #104]	@ (80024f4 <MX_TIM15_Init+0x9c>)
 800248c:	2204      	movs	r2, #4
 800248e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002490:	4b18      	ldr	r3, [pc, #96]	@ (80024f4 <MX_TIM15_Init+0x9c>)
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002496:	4b17      	ldr	r3, [pc, #92]	@ (80024f4 <MX_TIM15_Init+0x9c>)
 8002498:	2200      	movs	r2, #0
 800249a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800249c:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <MX_TIM15_Init+0x9c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80024a2:	4814      	ldr	r0, [pc, #80]	@ (80024f4 <MX_TIM15_Init+0x9c>)
 80024a4:	f007 fc82 	bl	8009dac <HAL_TIM_Base_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80024ae:	f001 faab 	bl	8003a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	4619      	mov	r1, r3
 80024be:	480d      	ldr	r0, [pc, #52]	@ (80024f4 <MX_TIM15_Init+0x9c>)
 80024c0:	f008 f9b0 	bl	800a824 <HAL_TIM_ConfigClockSource>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80024ca:	f001 fa9d 	bl	8003a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80024d6:	1d3b      	adds	r3, r7, #4
 80024d8:	4619      	mov	r1, r3
 80024da:	4806      	ldr	r0, [pc, #24]	@ (80024f4 <MX_TIM15_Init+0x9c>)
 80024dc:	f008 ff80 	bl	800b3e0 <HAL_TIMEx_MasterConfigSynchronization>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80024e6:	f001 fa8f 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80024ea:	bf00      	nop
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000928 	.word	0x20000928
 80024f8:	40014000 	.word	0x40014000

080024fc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002500:	4b0f      	ldr	r3, [pc, #60]	@ (8002540 <MX_TIM16_Init+0x44>)
 8002502:	4a10      	ldr	r2, [pc, #64]	@ (8002544 <MX_TIM16_Init+0x48>)
 8002504:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 14999;
 8002506:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <MX_TIM16_Init+0x44>)
 8002508:	f643 2297 	movw	r2, #14999	@ 0x3a97
 800250c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800250e:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <MX_TIM16_Init+0x44>)
 8002510:	2200      	movs	r2, #0
 8002512:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 8002514:	4b0a      	ldr	r3, [pc, #40]	@ (8002540 <MX_TIM16_Init+0x44>)
 8002516:	2209      	movs	r2, #9
 8002518:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251a:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <MX_TIM16_Init+0x44>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002520:	4b07      	ldr	r3, [pc, #28]	@ (8002540 <MX_TIM16_Init+0x44>)
 8002522:	2200      	movs	r2, #0
 8002524:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002526:	4b06      	ldr	r3, [pc, #24]	@ (8002540 <MX_TIM16_Init+0x44>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800252c:	4804      	ldr	r0, [pc, #16]	@ (8002540 <MX_TIM16_Init+0x44>)
 800252e:	f007 fc3d 	bl	8009dac <HAL_TIM_Base_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002538:	f001 fa66 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000974 	.word	0x20000974
 8002544:	40014400 	.word	0x40014400

08002548 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800254c:	4b22      	ldr	r3, [pc, #136]	@ (80025d8 <MX_UART4_Init+0x90>)
 800254e:	4a23      	ldr	r2, [pc, #140]	@ (80025dc <MX_UART4_Init+0x94>)
 8002550:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002552:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <MX_UART4_Init+0x90>)
 8002554:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002558:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800255a:	4b1f      	ldr	r3, [pc, #124]	@ (80025d8 <MX_UART4_Init+0x90>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002560:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <MX_UART4_Init+0x90>)
 8002562:	2200      	movs	r2, #0
 8002564:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002566:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <MX_UART4_Init+0x90>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800256c:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <MX_UART4_Init+0x90>)
 800256e:	220c      	movs	r2, #12
 8002570:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002572:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <MX_UART4_Init+0x90>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002578:	4b17      	ldr	r3, [pc, #92]	@ (80025d8 <MX_UART4_Init+0x90>)
 800257a:	2200      	movs	r2, #0
 800257c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800257e:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <MX_UART4_Init+0x90>)
 8002580:	2200      	movs	r2, #0
 8002582:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002584:	4b14      	ldr	r3, [pc, #80]	@ (80025d8 <MX_UART4_Init+0x90>)
 8002586:	2200      	movs	r2, #0
 8002588:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800258a:	4b13      	ldr	r3, [pc, #76]	@ (80025d8 <MX_UART4_Init+0x90>)
 800258c:	2200      	movs	r2, #0
 800258e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002590:	4811      	ldr	r0, [pc, #68]	@ (80025d8 <MX_UART4_Init+0x90>)
 8002592:	f009 f895 	bl	800b6c0 <HAL_UART_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800259c:	f001 fa34 	bl	8003a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025a0:	2100      	movs	r1, #0
 80025a2:	480d      	ldr	r0, [pc, #52]	@ (80025d8 <MX_UART4_Init+0x90>)
 80025a4:	f009 fe30 	bl	800c208 <HAL_UARTEx_SetTxFifoThreshold>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80025ae:	f001 fa2b 	bl	8003a08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025b2:	2100      	movs	r1, #0
 80025b4:	4808      	ldr	r0, [pc, #32]	@ (80025d8 <MX_UART4_Init+0x90>)
 80025b6:	f009 fe65 	bl	800c284 <HAL_UARTEx_SetRxFifoThreshold>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80025c0:	f001 fa22 	bl	8003a08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80025c4:	4804      	ldr	r0, [pc, #16]	@ (80025d8 <MX_UART4_Init+0x90>)
 80025c6:	f009 fde6 	bl	800c196 <HAL_UARTEx_DisableFifoMode>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80025d0:	f001 fa1a 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	200009c0 	.word	0x200009c0
 80025dc:	40004c00 	.word	0x40004c00

080025e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80025e6:	4b22      	ldr	r3, [pc, #136]	@ (8002670 <MX_DMA_Init+0x90>)
 80025e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ea:	4a21      	ldr	r2, [pc, #132]	@ (8002670 <MX_DMA_Init+0x90>)
 80025ec:	f043 0304 	orr.w	r3, r3, #4
 80025f0:	6493      	str	r3, [r2, #72]	@ 0x48
 80025f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002670 <MX_DMA_Init+0x90>)
 80025f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002670 <MX_DMA_Init+0x90>)
 8002600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002602:	4a1b      	ldr	r2, [pc, #108]	@ (8002670 <MX_DMA_Init+0x90>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6493      	str	r3, [r2, #72]	@ 0x48
 800260a:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <MX_DMA_Init+0x90>)
 800260c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002616:	2200      	movs	r2, #0
 8002618:	2100      	movs	r1, #0
 800261a:	200b      	movs	r0, #11
 800261c:	f003 ff0f 	bl	800643e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002620:	200b      	movs	r0, #11
 8002622:	f003 ff26 	bl	8006472 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002626:	2200      	movs	r2, #0
 8002628:	2100      	movs	r1, #0
 800262a:	200c      	movs	r0, #12
 800262c:	f003 ff07 	bl	800643e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002630:	200c      	movs	r0, #12
 8002632:	f003 ff1e 	bl	8006472 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	200d      	movs	r0, #13
 800263c:	f003 feff 	bl	800643e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002640:	200d      	movs	r0, #13
 8002642:	f003 ff16 	bl	8006472 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	200e      	movs	r0, #14
 800264c:	f003 fef7 	bl	800643e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002650:	200e      	movs	r0, #14
 8002652:	f003 ff0e 	bl	8006472 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002656:	2200      	movs	r2, #0
 8002658:	2100      	movs	r1, #0
 800265a:	200f      	movs	r0, #15
 800265c:	f003 feef 	bl	800643e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002660:	200f      	movs	r0, #15
 8002662:	f003 ff06 	bl	8006472 <HAL_NVIC_EnableIRQ>

}
 8002666:	bf00      	nop
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000

08002674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08c      	sub	sp, #48	@ 0x30
 8002678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267a:	f107 031c 	add.w	r3, r7, #28
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	605a      	str	r2, [r3, #4]
 8002684:	609a      	str	r2, [r3, #8]
 8002686:	60da      	str	r2, [r3, #12]
 8002688:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800268a:	4b9a      	ldr	r3, [pc, #616]	@ (80028f4 <MX_GPIO_Init+0x280>)
 800268c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800268e:	4a99      	ldr	r2, [pc, #612]	@ (80028f4 <MX_GPIO_Init+0x280>)
 8002690:	f043 0310 	orr.w	r3, r3, #16
 8002694:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002696:	4b97      	ldr	r3, [pc, #604]	@ (80028f4 <MX_GPIO_Init+0x280>)
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	61bb      	str	r3, [r7, #24]
 80026a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a2:	4b94      	ldr	r3, [pc, #592]	@ (80028f4 <MX_GPIO_Init+0x280>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a6:	4a93      	ldr	r2, [pc, #588]	@ (80028f4 <MX_GPIO_Init+0x280>)
 80026a8:	f043 0304 	orr.w	r3, r3, #4
 80026ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ae:	4b91      	ldr	r3, [pc, #580]	@ (80028f4 <MX_GPIO_Init+0x280>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b2:	f003 0304 	and.w	r3, r3, #4
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026ba:	4b8e      	ldr	r3, [pc, #568]	@ (80028f4 <MX_GPIO_Init+0x280>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026be:	4a8d      	ldr	r2, [pc, #564]	@ (80028f4 <MX_GPIO_Init+0x280>)
 80026c0:	f043 0320 	orr.w	r3, r3, #32
 80026c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026c6:	4b8b      	ldr	r3, [pc, #556]	@ (80028f4 <MX_GPIO_Init+0x280>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	4b88      	ldr	r3, [pc, #544]	@ (80028f4 <MX_GPIO_Init+0x280>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d6:	4a87      	ldr	r2, [pc, #540]	@ (80028f4 <MX_GPIO_Init+0x280>)
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026de:	4b85      	ldr	r3, [pc, #532]	@ (80028f4 <MX_GPIO_Init+0x280>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ea:	4b82      	ldr	r3, [pc, #520]	@ (80028f4 <MX_GPIO_Init+0x280>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ee:	4a81      	ldr	r2, [pc, #516]	@ (80028f4 <MX_GPIO_Init+0x280>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026f6:	4b7f      	ldr	r3, [pc, #508]	@ (80028f4 <MX_GPIO_Init+0x280>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002702:	4b7c      	ldr	r3, [pc, #496]	@ (80028f4 <MX_GPIO_Init+0x280>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002706:	4a7b      	ldr	r2, [pc, #492]	@ (80028f4 <MX_GPIO_Init+0x280>)
 8002708:	f043 0308 	orr.w	r3, r3, #8
 800270c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800270e:	4b79      	ldr	r3, [pc, #484]	@ (80028f4 <MX_GPIO_Init+0x280>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 800271a:	2200      	movs	r2, #0
 800271c:	2120      	movs	r1, #32
 800271e:	4876      	ldr	r0, [pc, #472]	@ (80028f8 <MX_GPIO_Init+0x284>)
 8002720:	f004 fdac 	bl	800727c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
 8002724:	2201      	movs	r2, #1
 8002726:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800272a:	4874      	ldr	r0, [pc, #464]	@ (80028fc <MX_GPIO_Init+0x288>)
 800272c:	f004 fda6 	bl	800727c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, GPIO_PIN_RESET);
 8002730:	2200      	movs	r2, #0
 8002732:	2104      	movs	r1, #4
 8002734:	4871      	ldr	r0, [pc, #452]	@ (80028fc <MX_GPIO_Init+0x288>)
 8002736:	f004 fda1 	bl	800727c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 800273a:	2200      	movs	r2, #0
 800273c:	2120      	movs	r1, #32
 800273e:	4870      	ldr	r0, [pc, #448]	@ (8002900 <MX_GPIO_Init+0x28c>)
 8002740:	f004 fd9c 	bl	800727c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_RST_2_Pin|CS_OCD_1_Pin, GPIO_PIN_SET);
 8002744:	2201      	movs	r2, #1
 8002746:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800274a:	486b      	ldr	r0, [pc, #428]	@ (80028f8 <MX_GPIO_Init+0x284>)
 800274c:	f004 fd96 	bl	800727c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port, NOT_RST_4_Pin, GPIO_PIN_SET);
 8002750:	2201      	movs	r2, #1
 8002752:	2140      	movs	r1, #64	@ 0x40
 8002754:	486a      	ldr	r0, [pc, #424]	@ (8002900 <MX_GPIO_Init+0x28c>)
 8002756:	f004 fd91 	bl	800727c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port, NOT_RST_3_Pin, GPIO_PIN_SET);
 800275a:	2201      	movs	r2, #1
 800275c:	2101      	movs	r1, #1
 800275e:	4869      	ldr	r0, [pc, #420]	@ (8002904 <MX_GPIO_Init+0x290>)
 8002760:	f004 fd8c 	bl	800727c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port, NOT_RST_1_Pin, GPIO_PIN_SET);
 8002764:	2201      	movs	r2, #1
 8002766:	2180      	movs	r1, #128	@ 0x80
 8002768:	4867      	ldr	r0, [pc, #412]	@ (8002908 <MX_GPIO_Init+0x294>)
 800276a:	f004 fd87 	bl	800727c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NOT_FAULT_1_Pin CS_FAULT_2_Pin NOT_FAULT_2_Pin CS_FAULT_1_Pin */
  GPIO_InitStruct.Pin = NOT_FAULT_1_Pin|CS_FAULT_2_Pin|NOT_FAULT_2_Pin|CS_FAULT_1_Pin;
 800276e:	f640 0315 	movw	r3, #2069	@ 0x815
 8002772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002774:	2300      	movs	r3, #0
 8002776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800277c:	f107 031c 	add.w	r3, r7, #28
 8002780:	4619      	mov	r1, r3
 8002782:	485d      	ldr	r0, [pc, #372]	@ (80028f8 <MX_GPIO_Init+0x284>)
 8002784:	f004 fbe0 	bl	8006f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_INTERLOCK_Pin */
  GPIO_InitStruct.Pin = RESET_INTERLOCK_Pin;
 8002788:	2320      	movs	r3, #32
 800278a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278c:	2301      	movs	r3, #1
 800278e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002794:	2300      	movs	r3, #0
 8002796:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 8002798:	f107 031c 	add.w	r3, r7, #28
 800279c:	4619      	mov	r1, r3
 800279e:	4856      	ldr	r0, [pc, #344]	@ (80028f8 <MX_GPIO_Init+0x284>)
 80027a0:	f004 fbd2 	bl	8006f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_OCD_2_Pin */
  GPIO_InitStruct.Pin = CS_OCD_2_Pin;
 80027a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80027aa:	2311      	movs	r3, #17
 80027ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_OCD_2_GPIO_Port, &GPIO_InitStruct);
 80027b6:	f107 031c 	add.w	r3, r7, #28
 80027ba:	4619      	mov	r1, r3
 80027bc:	484f      	ldr	r0, [pc, #316]	@ (80028fc <MX_GPIO_Init+0x288>)
 80027be:	f004 fbc3 	bl	8006f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_3_Pin */
  GPIO_InitStruct.Pin = READY_3_Pin;
 80027c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c8:	2300      	movs	r3, #0
 80027ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_3_GPIO_Port, &GPIO_InitStruct);
 80027d0:	f107 031c 	add.w	r3, r7, #28
 80027d4:	4619      	mov	r1, r3
 80027d6:	4849      	ldr	r0, [pc, #292]	@ (80028fc <MX_GPIO_Init+0x288>)
 80027d8:	f004 fbb6 	bl	8006f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERLOCK_Pin NOT_FAULT_4_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin|NOT_FAULT_4_Pin;
 80027dc:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80027e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	4619      	mov	r1, r3
 80027f0:	4843      	ldr	r0, [pc, #268]	@ (8002900 <MX_GPIO_Init+0x28c>)
 80027f2:	f004 fba9 	bl	8006f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_FPGA_Pin */
  GPIO_InitStruct.Pin = RESET_FPGA_Pin;
 80027f6:	2304      	movs	r3, #4
 80027f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027fa:	2301      	movs	r3, #1
 80027fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_FPGA_GPIO_Port, &GPIO_InitStruct);
 8002806:	f107 031c 	add.w	r3, r7, #28
 800280a:	4619      	mov	r1, r3
 800280c:	483b      	ldr	r0, [pc, #236]	@ (80028fc <MX_GPIO_Init+0x288>)
 800280e:	f004 fb9b 	bl	8006f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_STOP_FPGA_Pin */
  GPIO_InitStruct.Pin = START_STOP_FPGA_Pin;
 8002812:	2320      	movs	r3, #32
 8002814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002816:	2301      	movs	r3, #1
 8002818:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(START_STOP_FPGA_GPIO_Port, &GPIO_InitStruct);
 8002822:	f107 031c 	add.w	r3, r7, #28
 8002826:	4619      	mov	r1, r3
 8002828:	4835      	ldr	r0, [pc, #212]	@ (8002900 <MX_GPIO_Init+0x28c>)
 800282a:	f004 fb8d 	bl	8006f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_2_Pin */
  GPIO_InitStruct.Pin = READY_2_Pin;
 800282e:	2301      	movs	r3, #1
 8002830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002832:	2300      	movs	r3, #0
 8002834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002836:	2300      	movs	r3, #0
 8002838:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_2_GPIO_Port, &GPIO_InitStruct);
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	4619      	mov	r1, r3
 8002840:	4831      	ldr	r0, [pc, #196]	@ (8002908 <MX_GPIO_Init+0x294>)
 8002842:	f004 fb81 	bl	8006f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : NOT_RST_2_Pin CS_OCD_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_2_Pin|CS_OCD_1_Pin;
 8002846:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800284a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800284c:	2311      	movs	r3, #17
 800284e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2300      	movs	r3, #0
 8002856:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002858:	f107 031c 	add.w	r3, r7, #28
 800285c:	4619      	mov	r1, r3
 800285e:	4826      	ldr	r0, [pc, #152]	@ (80028f8 <MX_GPIO_Init+0x284>)
 8002860:	f004 fb72 	bl	8006f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_4_Pin */
  GPIO_InitStruct.Pin = NOT_RST_4_Pin;
 8002864:	2340      	movs	r3, #64	@ 0x40
 8002866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002868:	2311      	movs	r3, #17
 800286a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_4_GPIO_Port, &GPIO_InitStruct);
 8002874:	f107 031c 	add.w	r3, r7, #28
 8002878:	4619      	mov	r1, r3
 800287a:	4821      	ldr	r0, [pc, #132]	@ (8002900 <MX_GPIO_Init+0x28c>)
 800287c:	f004 fb64 	bl	8006f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_4_Pin */
  GPIO_InitStruct.Pin = READY_4_Pin;
 8002880:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002886:	2300      	movs	r3, #0
 8002888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_4_GPIO_Port, &GPIO_InitStruct);
 800288e:	f107 031c 	add.w	r3, r7, #28
 8002892:	4619      	mov	r1, r3
 8002894:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002898:	f004 fb56 	bl	8006f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_3_Pin */
  GPIO_InitStruct.Pin = NOT_RST_3_Pin;
 800289c:	2301      	movs	r3, #1
 800289e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028a0:	2311      	movs	r3, #17
 80028a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_3_GPIO_Port, &GPIO_InitStruct);
 80028ac:	f107 031c 	add.w	r3, r7, #28
 80028b0:	4619      	mov	r1, r3
 80028b2:	4814      	ldr	r0, [pc, #80]	@ (8002904 <MX_GPIO_Init+0x290>)
 80028b4:	f004 fb48 	bl	8006f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_1_Pin PD5 NOT_FAULT_3_Pin */
  GPIO_InitStruct.Pin = READY_1_Pin|GPIO_PIN_5|NOT_FAULT_3_Pin;
 80028b8:	2370      	movs	r3, #112	@ 0x70
 80028ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028bc:	2300      	movs	r3, #0
 80028be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	4619      	mov	r1, r3
 80028ca:	480e      	ldr	r0, [pc, #56]	@ (8002904 <MX_GPIO_Init+0x290>)
 80028cc:	f004 fb3c 	bl	8006f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_1_Pin;
 80028d0:	2380      	movs	r3, #128	@ 0x80
 80028d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028d4:	2311      	movs	r3, #17
 80028d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028dc:	2300      	movs	r3, #0
 80028de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_1_GPIO_Port, &GPIO_InitStruct);
 80028e0:	f107 031c 	add.w	r3, r7, #28
 80028e4:	4619      	mov	r1, r3
 80028e6:	4808      	ldr	r0, [pc, #32]	@ (8002908 <MX_GPIO_Init+0x294>)
 80028e8:	f004 fb2e 	bl	8006f48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028ec:	bf00      	nop
 80028ee:	3730      	adds	r7, #48	@ 0x30
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	48001000 	.word	0x48001000
 80028fc:	48001400 	.word	0x48001400
 8002900:	48000800 	.word	0x48000800
 8002904:	48000c00 	.word	0x48000c00
 8002908:	48000400 	.word	0x48000400

0800290c <handle_event>:

/* USER CODE BEGIN 4 */

ConverterState handle_event(ConverterState currentState, ConverterEvent event) {
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	460a      	mov	r2, r1
 8002916:	71fb      	strb	r3, [r7, #7]
 8002918:	4613      	mov	r3, r2
 800291a:	71bb      	strb	r3, [r7, #6]
    switch (currentState) {
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	2b04      	cmp	r3, #4
 8002920:	d839      	bhi.n	8002996 <handle_event+0x8a>
 8002922:	a201      	add	r2, pc, #4	@ (adr r2, 8002928 <handle_event+0x1c>)
 8002924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002928:	0800293d 	.word	0x0800293d
 800292c:	0800294b 	.word	0x0800294b
 8002930:	08002959 	.word	0x08002959
 8002934:	08002975 	.word	0x08002975
 8002938:	08002983 	.word	0x08002983
        case STATE_INIT:
            if (event == EVENT_START)
 800293c:	79bb      	ldrb	r3, [r7, #6]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d12b      	bne.n	800299a <handle_event+0x8e>
            {

            	currentState = STATE_STANDBY;
 8002942:	2301      	movs	r3, #1
 8002944:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 8002946:	2301      	movs	r3, #1
 8002948:	e031      	b.n	80029ae <handle_event+0xa2>
            }
            break;

        case STATE_STANDBY:
            if (event == EVENT_START)
 800294a:	79bb      	ldrb	r3, [r7, #6]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d126      	bne.n	800299e <handle_event+0x92>
            {
            	currentState = STATE_REGULATION;
 8002950:	2302      	movs	r3, #2
 8002952:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 8002954:	2302      	movs	r3, #2
 8002956:	e02a      	b.n	80029ae <handle_event+0xa2>
            }
            break;

        case STATE_REGULATION:
        	//USB_SendString("State: INIT -> RUNNING\r\n");
            if (event == EVENT_FAULT)
 8002958:	79bb      	ldrb	r3, [r7, #6]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d103      	bne.n	8002966 <handle_event+0x5a>
            {
            	currentState = STATE_FAULT;
 800295e:	2303      	movs	r3, #3
 8002960:	71fb      	strb	r3, [r7, #7]
                return STATE_FAULT;
 8002962:	2303      	movs	r3, #3
 8002964:	e023      	b.n	80029ae <handle_event+0xa2>

            } else if (event == EVENT_SHUTDOWN)
 8002966:	79bb      	ldrb	r3, [r7, #6]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d11a      	bne.n	80029a2 <handle_event+0x96>
            {
            	currentState = STATE_SHUTDOWN;
 800296c:	2304      	movs	r3, #4
 800296e:	71fb      	strb	r3, [r7, #7]
                return STATE_SHUTDOWN;
 8002970:	2304      	movs	r3, #4
 8002972:	e01c      	b.n	80029ae <handle_event+0xa2>
            }

            break;

        case STATE_FAULT:
            if (event == EVENT_CLEAR_FAULT)
 8002974:	79bb      	ldrb	r3, [r7, #6]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d115      	bne.n	80029a6 <handle_event+0x9a>
            {
            	currentState = STATE_STANDBY;
 800297a:	2301      	movs	r3, #1
 800297c:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 800297e:	2301      	movs	r3, #1
 8002980:	e015      	b.n	80029ae <handle_event+0xa2>
            }
            break;

        case STATE_SHUTDOWN:
            if (event == EVENT_START)
 8002982:	79bb      	ldrb	r3, [r7, #6]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d110      	bne.n	80029aa <handle_event+0x9e>
            {
            	once = 0;
 8002988:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <handle_event+0xb0>)
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
            	currentState = STATE_REGULATION;
 800298e:	2302      	movs	r3, #2
 8002990:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 8002992:	2302      	movs	r3, #2
 8002994:	e00b      	b.n	80029ae <handle_event+0xa2>
            }
            break;
        default:
            break;
 8002996:	bf00      	nop
 8002998:	e008      	b.n	80029ac <handle_event+0xa0>
            break;
 800299a:	bf00      	nop
 800299c:	e006      	b.n	80029ac <handle_event+0xa0>
            break;
 800299e:	bf00      	nop
 80029a0:	e004      	b.n	80029ac <handle_event+0xa0>
            break;
 80029a2:	bf00      	nop
 80029a4:	e002      	b.n	80029ac <handle_event+0xa0>
            break;
 80029a6:	bf00      	nop
 80029a8:	e000      	b.n	80029ac <handle_event+0xa0>
            break;
 80029aa:	bf00      	nop
    }
    return currentState; // No state change
 80029ac:	79fb      	ldrb	r3, [r7, #7]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	20000b8c 	.word	0x20000b8c

080029c0 <Set_PWM_DutyCycle>:
       // float TEMPERATURE_AFTER_CONVERSION_FROM_ADC = (((adc_value/4096.0f)*3.3f) - 0.4f)/0.0195f;
       // return TEMPERATURE_AFTER_CONVERSION_FROM_ADC;

}

void Set_PWM_DutyCycle(uint32_t dutyCycle) { // dutycyle for FAN SPEED CONTROl
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
    if (dutyCycle > 100) dutyCycle = 100;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b64      	cmp	r3, #100	@ 0x64
 80029cc:	d901      	bls.n	80029d2 <Set_PWM_DutyCycle+0x12>
 80029ce:	2364      	movs	r3, #100	@ 0x64
 80029d0:	607b      	str	r3, [r7, #4]
    uint32_t pulse = (htim4.Init.Period + 1) * dutyCycle / 100 - 1;
 80029d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a00 <Set_PWM_DutyCycle+0x40>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	3301      	adds	r3, #1
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	4a09      	ldr	r2, [pc, #36]	@ (8002a04 <Set_PWM_DutyCycle+0x44>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	3b01      	subs	r3, #1
 80029e8:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 80029ea:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <Set_PWM_DutyCycle+0x40>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	200007f8 	.word	0x200007f8
 8002a04:	51eb851f 	.word	0x51eb851f

08002a08 <HAL_ADC_ConvCpltCallback>:
//ADC save to array and moving average
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC5)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a20      	ldr	r2, [pc, #128]	@ (8002a98 <HAL_ADC_ConvCpltCallback+0x90>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d135      	bne.n	8002a86 <HAL_ADC_ConvCpltCallback+0x7e>
		    {
		        uint32_t sum = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60bb      	str	r3, [r7, #8]
 8002a22:	e00b      	b.n	8002a3c <HAL_ADC_ConvCpltCallback+0x34>
		        {
		            sum += adc5_dma_buffer[i];
 8002a24:	4a1d      	ldr	r2, [pc, #116]	@ (8002a9c <HAL_ADC_ConvCpltCallback+0x94>)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	461a      	mov	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4413      	add	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b09      	cmp	r3, #9
 8002a40:	ddf0      	ble.n	8002a24 <HAL_ADC_ConvCpltCallback+0x1c>
		        }
		        adc_moving_average = ((sum / MA_WINDOW_SIZE)*3300)/4096;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	4a16      	ldr	r2, [pc, #88]	@ (8002aa0 <HAL_ADC_ConvCpltCallback+0x98>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	08db      	lsrs	r3, r3, #3
 8002a4c:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002a50:	fb02 f303 	mul.w	r3, r2, r3
 8002a54:	0b1b      	lsrs	r3, r3, #12
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	4b12      	ldr	r3, [pc, #72]	@ (8002aa4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002a5a:	801a      	strh	r2, [r3, #0]
		        imax2_sum=(adc_moving_average-1450)*0.384;
 8002a5c:	4b11      	ldr	r3, [pc, #68]	@ (8002aa4 <HAL_ADC_ConvCpltCallback+0x9c>)
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	f2a3 53aa 	subw	r3, r3, #1450	@ 0x5aa
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7fd fd85 	bl	8000574 <__aeabi_i2d>
 8002a6a:	a309      	add	r3, pc, #36	@ (adr r3, 8002a90 <HAL_ADC_ConvCpltCallback+0x88>)
 8002a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a70:	f7fd fdea 	bl	8000648 <__aeabi_dmul>
 8002a74:	4602      	mov	r2, r0
 8002a76:	460b      	mov	r3, r1
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	f7fe f8bc 	bl	8000bf8 <__aeabi_d2uiz>
 8002a80:	4603      	mov	r3, r0
 8002a82:	4a09      	ldr	r2, [pc, #36]	@ (8002aa8 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002a84:	6013      	str	r3, [r2, #0]
		        // Restart the DMA transfer
		       // HAL_ADC_Start_DMA(hadc, (uint32_t*)adc5_dma_buffer, MA_WINDOW_SIZE);
		    }


}
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	bc6a7efa 	.word	0xbc6a7efa
 8002a94:	3fd89374 	.word	0x3fd89374
 8002a98:	50000600 	.word	0x50000600
 8002a9c:	20000a9c 	.word	0x20000a9c
 8002aa0:	cccccccd 	.word	0xcccccccd
 8002aa4:	20000ab0 	.word	0x20000ab0
 8002aa8:	20000a98 	.word	0x20000a98

08002aac <Update_PWM_Frequency>:
        }
    }
}

void Update_PWM_Frequency(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b089      	sub	sp, #36	@ 0x24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
	 uint32_t timer_clock = 150000000;  // Assuming a 150 MHz timer clock
 8002ab8:	4b33      	ldr	r3, [pc, #204]	@ (8002b88 <Update_PWM_Frequency+0xdc>)
 8002aba:	61bb      	str	r3, [r7, #24]
	    uint32_t prescaler = htim->Init.Prescaler + 1;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	617b      	str	r3, [r7, #20]
	    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	fb02 f303 	mul.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	61fb      	str	r3, [r7, #28]

	    // Ensure period is within valid range
	    if (period > 65535) {
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002adc:	d314      	bcc.n	8002b08 <Update_PWM_Frequency+0x5c>
	        // Adjust prescaler to bring period within range
	        prescaler = (prescaler * (period / 65536)) + 1;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	fb02 f303 	mul.w	r3, r2, r3
 8002ae8:	3301      	adds	r3, #1
 8002aea:	617b      	str	r3, [r7, #20]
	        period = (timer_clock / (prescaler * frequency)) - 1;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	fb02 f303 	mul.w	r3, r2, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]
	        __HAL_TIM_SET_PRESCALER(htim, prescaler - 1);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	3a01      	subs	r2, #1
 8002b06:	629a      	str	r2, [r3, #40]	@ 0x28
	    }

	    // Update the period register (ARR) with double buffering
	    __HAL_TIM_SET_AUTORELOAD(htim, period);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69fa      	ldr	r2, [r7, #28]
 8002b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	60da      	str	r2, [r3, #12]

	    // Set the duty cycle to approximately 50%
	    uint32_t pulse = period / 2;
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	085b      	lsrs	r3, r3, #1
 8002b1a:	613b      	str	r3, [r7, #16]
	    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d104      	bne.n	8002b2c <Update_PWM_Frequency+0x80>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b2a:	e023      	b.n	8002b74 <Update_PWM_Frequency+0xc8>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d104      	bne.n	8002b3c <Update_PWM_Frequency+0x90>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	6393      	str	r3, [r2, #56]	@ 0x38
 8002b3a:	e01b      	b.n	8002b74 <Update_PWM_Frequency+0xc8>
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d104      	bne.n	8002b4c <Update_PWM_Frequency+0xa0>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002b4a:	e013      	b.n	8002b74 <Update_PWM_Frequency+0xc8>
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	d104      	bne.n	8002b5c <Update_PWM_Frequency+0xb0>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5a:	e00b      	b.n	8002b74 <Update_PWM_Frequency+0xc8>
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	d104      	bne.n	8002b6c <Update_PWM_Frequency+0xc0>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b6a:	e003      	b.n	8002b74 <Update_PWM_Frequency+0xc8>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	64d3      	str	r3, [r2, #76]	@ 0x4c

	    // Manually generate an update event by setting the UG bit in the EGR register
	    htim->Instance->EGR = TIM_EGR_UG;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_AUTORELOAD(htim, period);

    // Restart the timer PWM generation
    HAL_TIM_PWM_Stop(htim, channel);
    HAL_TIM_PWM_Start(htim, channel);*/
}
 8002b7c:	bf00      	nop
 8002b7e:	3724      	adds	r7, #36	@ 0x24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	08f0d180 	.word	0x08f0d180

08002b8c <Check_Faults>:
	        dac_buffer[i] = (((1/3.3)*res12_b) + ((0.5/3.3)*res12_b) * sin(2 * M_PI * i/BUFFER_SIZE));
	    }
}

uint8_t Check_Faults()
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
	// Faults pins are from gate driver and they are active pull down
	// 4 fault pins from 4 gate driver + 2 fault pins from  2 currents sensors  = 6 pins
	if(HAL_GPIO_ReadPin(CS_FAULT_1_GPIO_Port, CS_FAULT_1_Pin) && HAL_GPIO_ReadPin(CS_FAULT_2_GPIO_Port, CS_FAULT_2_Pin)
 8002b90:	2101      	movs	r1, #1
 8002b92:	4818      	ldr	r0, [pc, #96]	@ (8002bf4 <Check_Faults+0x68>)
 8002b94:	f004 fb5a 	bl	800724c <HAL_GPIO_ReadPin>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d026      	beq.n	8002bec <Check_Faults+0x60>
 8002b9e:	2110      	movs	r1, #16
 8002ba0:	4814      	ldr	r0, [pc, #80]	@ (8002bf4 <Check_Faults+0x68>)
 8002ba2:	f004 fb53 	bl	800724c <HAL_GPIO_ReadPin>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01f      	beq.n	8002bec <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_1_GPIO_Port, NOT_FAULT_1_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_2_GPIO_Port, NOT_FAULT_2_Pin)
 8002bac:	2104      	movs	r1, #4
 8002bae:	4811      	ldr	r0, [pc, #68]	@ (8002bf4 <Check_Faults+0x68>)
 8002bb0:	f004 fb4c 	bl	800724c <HAL_GPIO_ReadPin>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d018      	beq.n	8002bec <Check_Faults+0x60>
 8002bba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002bbe:	480d      	ldr	r0, [pc, #52]	@ (8002bf4 <Check_Faults+0x68>)
 8002bc0:	f004 fb44 	bl	800724c <HAL_GPIO_ReadPin>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d010      	beq.n	8002bec <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_3_GPIO_Port, NOT_FAULT_3_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_4_GPIO_Port, NOT_FAULT_4_Pin) )
 8002bca:	2140      	movs	r1, #64	@ 0x40
 8002bcc:	480a      	ldr	r0, [pc, #40]	@ (8002bf8 <Check_Faults+0x6c>)
 8002bce:	f004 fb3d 	bl	800724c <HAL_GPIO_ReadPin>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d009      	beq.n	8002bec <Check_Faults+0x60>
 8002bd8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bdc:	4807      	ldr	r0, [pc, #28]	@ (8002bfc <Check_Faults+0x70>)
 8002bde:	f004 fb35 	bl	800724c <HAL_GPIO_ReadPin>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <Check_Faults+0x60>
		return 0; // if all pins is 1 then all is ready, there is not faults then return 0
 8002be8:	2300      	movs	r3, #0
 8002bea:	e000      	b.n	8002bee <Check_Faults+0x62>

	return 1;
 8002bec:	2301      	movs	r3, #1
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	48001000 	.word	0x48001000
 8002bf8:	48000c00 	.word	0x48000c00
 8002bfc:	48000800 	.word	0x48000800

08002c00 <Check_Ready>:

uint8_t Check_Ready()
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
	// Ready pins are from gate driver and they are active pull up
	// 4 ready pins from 4 gate drivers
	if(HAL_GPIO_ReadPin(READY_1_GPIO_Port, READY_1_Pin) && HAL_GPIO_ReadPin(READY_2_GPIO_Port, READY_2_Pin)
 8002c04:	2110      	movs	r1, #16
 8002c06:	4811      	ldr	r0, [pc, #68]	@ (8002c4c <Check_Ready+0x4c>)
 8002c08:	f004 fb20 	bl	800724c <HAL_GPIO_ReadPin>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d019      	beq.n	8002c46 <Check_Ready+0x46>
 8002c12:	2101      	movs	r1, #1
 8002c14:	480e      	ldr	r0, [pc, #56]	@ (8002c50 <Check_Ready+0x50>)
 8002c16:	f004 fb19 	bl	800724c <HAL_GPIO_ReadPin>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d012      	beq.n	8002c46 <Check_Ready+0x46>
			&& HAL_GPIO_ReadPin(READY_3_GPIO_Port, READY_3_Pin) && HAL_GPIO_ReadPin(READY_4_GPIO_Port, READY_4_Pin) )
 8002c20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c24:	480b      	ldr	r0, [pc, #44]	@ (8002c54 <Check_Ready+0x54>)
 8002c26:	f004 fb11 	bl	800724c <HAL_GPIO_ReadPin>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <Check_Ready+0x46>
 8002c30:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c38:	f004 fb08 	bl	800724c <HAL_GPIO_ReadPin>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <Check_Ready+0x46>
			return 1; // return 1 when is gate drivers ready
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <Check_Ready+0x48>

		return 0;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	48000c00 	.word	0x48000c00
 8002c50:	48000400 	.word	0x48000400
 8002c54:	48001400 	.word	0x48001400

08002c58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002c58:	b5b0      	push	{r4, r5, r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	// SOFT start_program RAMP REALISATION
	//  Ts 20khz
	if(htim->Instance == TIM15)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6e      	ldr	r2, [pc, #440]	@ (8002e20 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	f040 80b0 	bne.w	8002dcc <HAL_TIM_PeriodElapsedCallback+0x174>
	{
		//sythick1 =  HAL_GetTick();
		if(currentState == STATE_REGULATION )
 8002c6c:	4b6d      	ldr	r3, [pc, #436]	@ (8002e24 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	f040 80a8 	bne.w	8002dc6 <HAL_TIM_PeriodElapsedCallback+0x16e>
		{
		//current_sensor1_vref = adc3_dma_buffer[0]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[0], pcb_temp)/4096)*3.3;
		//current_sensor2_vref = adc3_dma_buffer[1]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[1], pcb_temp)/4096)*3.3;

		input_voltage = (int)((((adc3_dma_buffer[2])*3300)/4096-200)*18.81);//[mV]		((Low_pass_filter(adc3_dma_buffer[2], input_voltage)/4096)*3.3-0.2)*27.1;
 8002c76:	4b6c      	ldr	r3, [pc, #432]	@ (8002e28 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c78:	889b      	ldrh	r3, [r3, #4]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002c82:	fb02 f303 	mul.w	r3, r2, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da01      	bge.n	8002c8e <HAL_TIM_PeriodElapsedCallback+0x36>
 8002c8a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002c8e:	131b      	asrs	r3, r3, #12
 8002c90:	3bc8      	subs	r3, #200	@ 0xc8
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd fc6e 	bl	8000574 <__aeabi_i2d>
 8002c98:	a35d      	add	r3, pc, #372	@ (adr r3, 8002e10 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9e:	f7fd fcd3 	bl	8000648 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	4619      	mov	r1, r3
 8002caa:	f7fd ff7d 	bl	8000ba8 <__aeabi_d2iz>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4b5e      	ldr	r3, [pc, #376]	@ (8002e2c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002cb4:	601a      	str	r2, [r3, #0]
		output_voltage = (int)((((adc4_dma_buffer[1])*3300)/4096-200)*18.81);//[mV] 		((Low_pass_filter(adc4_dma_buffer, output_voltage)/4096)*3.3-0.2)*27.1;
 8002cb6:	4b5e      	ldr	r3, [pc, #376]	@ (8002e30 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002cb8:	885b      	ldrh	r3, [r3, #2]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	da01      	bge.n	8002cce <HAL_TIM_PeriodElapsedCallback+0x76>
 8002cca:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002cce:	131b      	asrs	r3, r3, #12
 8002cd0:	3bc8      	subs	r3, #200	@ 0xc8
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7fd fc4e 	bl	8000574 <__aeabi_i2d>
 8002cd8:	a34d      	add	r3, pc, #308	@ (adr r3, 8002e10 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cde:	f7fd fcb3 	bl	8000648 <__aeabi_dmul>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	4610      	mov	r0, r2
 8002ce8:	4619      	mov	r1, r3
 8002cea:	f7fd ff5d 	bl	8000ba8 <__aeabi_d2iz>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	4a50      	ldr	r2, [pc, #320]	@ (8002e34 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002cf2:	6013      	str	r3, [r2, #0]
		if(once == 0) Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, 7100000); // Set TIM8 CH1 o freq that is delay hc and send to fpga
		}

		imax2 = imax1 + imax2_sum; // imax2_sum signal from FPGA
		// imax1,2 each for branches to make 180 degree shift*/
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref+((int32_t)imax1*0.025)); // imax1  1.5V is 0A;  1A is 20mV; 1 bit is 0.8mV; imax[mA]*0.02 [V/A]/0.8[mV] = Value for DAC
 8002cf4:	4b50      	ldr	r3, [pc, #320]	@ (8002e38 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fd fc3b 	bl	8000574 <__aeabi_i2d>
 8002cfe:	4604      	mov	r4, r0
 8002d00:	460d      	mov	r5, r1
 8002d02:	4b4e      	ldr	r3, [pc, #312]	@ (8002e3c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fc34 	bl	8000574 <__aeabi_i2d>
 8002d0c:	a342      	add	r3, pc, #264	@ (adr r3, 8002e18 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d12:	f7fd fc99 	bl	8000648 <__aeabi_dmul>
 8002d16:	4602      	mov	r2, r0
 8002d18:	460b      	mov	r3, r1
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	4629      	mov	r1, r5
 8002d1e:	f7fd fadd 	bl	80002dc <__adddf3>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f7fd ff65 	bl	8000bf8 <__aeabi_d2uiz>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2200      	movs	r2, #0
 8002d32:	2100      	movs	r1, #0
 8002d34:	4842      	ldr	r0, [pc, #264]	@ (8002e40 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002d36:	f003 fc9b 	bl	8006670 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, current_sensor2_vref+((int32_t)imax2*0.025)); // imax2
 8002d3a:	4b42      	ldr	r3, [pc, #264]	@ (8002e44 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7fd fc18 	bl	8000574 <__aeabi_i2d>
 8002d44:	4604      	mov	r4, r0
 8002d46:	460d      	mov	r5, r1
 8002d48:	4b3f      	ldr	r3, [pc, #252]	@ (8002e48 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fd fc11 	bl	8000574 <__aeabi_i2d>
 8002d52:	a331      	add	r3, pc, #196	@ (adr r3, 8002e18 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d58:	f7fd fc76 	bl	8000648 <__aeabi_dmul>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4620      	mov	r0, r4
 8002d62:	4629      	mov	r1, r5
 8002d64:	f7fd faba 	bl	80002dc <__adddf3>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f7fd ff42 	bl	8000bf8 <__aeabi_d2uiz>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2200      	movs	r2, #0
 8002d78:	2110      	movs	r1, #16
 8002d7a:	4831      	ldr	r0, [pc, #196]	@ (8002e40 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002d7c:	f003 fc78 	bl	8006670 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref-((int32_t)imin*0.25)); // imin uzyto tutaj wzmacniacza 10x dla sygnalu z sensora pradu wiec ma wzmocnienie 200mv/A a nie 20mv/a
 8002d80:	4b2d      	ldr	r3, [pc, #180]	@ (8002e38 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002d82:	881b      	ldrh	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7fd fbf5 	bl	8000574 <__aeabi_i2d>
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	460d      	mov	r5, r1
 8002d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8002e4c <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd fbee 	bl	8000574 <__aeabi_i2d>
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	4b2c      	ldr	r3, [pc, #176]	@ (8002e50 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d9e:	f7fd fc53 	bl	8000648 <__aeabi_dmul>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4620      	mov	r0, r4
 8002da8:	4629      	mov	r1, r5
 8002daa:	f7fd fa95 	bl	80002d8 <__aeabi_dsub>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f7fd ff1f 	bl	8000bf8 <__aeabi_d2uiz>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	4824      	ldr	r0, [pc, #144]	@ (8002e54 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002dc2:	f003 fc55 	bl	8006670 <HAL_DAC_SetValue>
		//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
		//once = 1;
		//}

		//sythick2 =  HAL_GetTick() - sythick1;
		flag_control = 1;
 8002dc6:	4b24      	ldr	r3, [pc, #144]	@ (8002e58 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM6) // 5 sec period
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a22      	ldr	r2, [pc, #136]	@ (8002e5c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_TIM_PeriodElapsedCallback+0x182>
		    {
		//if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
				//{
				FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
 8002dd6:	f000 f957 	bl	8003088 <FAN_Drive>
				//}
		    }


	if (htim->Instance == TIM7)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a20      	ldr	r2, [pc, #128]	@ (8002e60 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d110      	bne.n	8002e06 <HAL_TIM_PeriodElapsedCallback+0x1ae>
	    {
	        // Turn off OCD pins of currents sensors to reset current sensor 1us

	        HAL_GPIO_TogglePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin);
 8002de4:	2102      	movs	r1, #2
 8002de6:	481f      	ldr	r0, [pc, #124]	@ (8002e64 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002de8:	f004 fa60 	bl	80072ac <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin);
 8002dec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002df0:	481d      	ldr	r0, [pc, #116]	@ (8002e68 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002df2:	f004 fa5b 	bl	80072ac <HAL_GPIO_TogglePin>
	        HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002df6:	2200      	movs	r2, #0
 8002df8:	2120      	movs	r1, #32
 8002dfa:	481a      	ldr	r0, [pc, #104]	@ (8002e64 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002dfc:	f004 fa3e 	bl	800727c <HAL_GPIO_WritePin>
	        // Stop the timer
	        HAL_TIM_Base_Stop_IT(&htim7);
 8002e00:	481a      	ldr	r0, [pc, #104]	@ (8002e6c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002e02:	f007 f913 	bl	800a02c <HAL_TIM_Base_Stop_IT>
	    }


}
 8002e06:	bf00      	nop
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	28f5c28f 	.word	0x28f5c28f
 8002e14:	4032cf5c 	.word	0x4032cf5c
 8002e18:	9999999a 	.word	0x9999999a
 8002e1c:	3f999999 	.word	0x3f999999
 8002e20:	40014000 	.word	0x40014000
 8002e24:	20000b87 	.word	0x20000b87
 8002e28:	20000a70 	.word	0x20000a70
 8002e2c:	20000a64 	.word	0x20000a64
 8002e30:	20000a88 	.word	0x20000a88
 8002e34:	20000a7c 	.word	0x20000a7c
 8002e38:	20000a54 	.word	0x20000a54
 8002e3c:	20000a58 	.word	0x20000a58
 8002e40:	200006c4 	.word	0x200006c4
 8002e44:	20000a56 	.word	0x20000a56
 8002e48:	20000a5c 	.word	0x20000a5c
 8002e4c:	20000a60 	.word	0x20000a60
 8002e50:	3fd00000 	.word	0x3fd00000
 8002e54:	200006d8 	.word	0x200006d8
 8002e58:	20000b91 	.word	0x20000b91
 8002e5c:	40001000 	.word	0x40001000
 8002e60:	40001400 	.word	0x40001400
 8002e64:	48001000 	.word	0x48001000
 8002e68:	48001400 	.word	0x48001400
 8002e6c:	20000890 	.word	0x20000890

08002e70 <RAMP>:

int32_t RAMP(int32_t Vout, int32_t Vref, int32_t Ramp_ratio, float period_loop)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
 8002e7c:	ed87 0a00 	vstr	s0, [r7]
	// RAMP Voltage to soft-start
				if(((int32_t)Vref - (int32_t)Vout) > 50)
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b32      	cmp	r3, #50	@ 0x32
 8002e88:	dd15      	ble.n	8002eb6 <RAMP+0x46>
				{

					Vout = (int32_t)(Vout + Ramp_ratio * period_loop); // 20khz loop - preferred 0.1V/Ts voltage ramp   that mean ramp ratio = 2000
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	ee07 3a90 	vmov	s15, r3
 8002e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	ee07 3a90 	vmov	s15, r3
 8002e9a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002e9e:	edd7 7a00 	vldr	s15, [r7]
 8002ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002eae:	ee17 3a90 	vmov	r3, s15
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	e01a      	b.n	8002eec <RAMP+0x7c>
					//RAMP_FINISHED = 0;
				}
				else if(((int32_t)Vref - (int32_t)Vout) < -50) // 100 = 100mV
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	f113 0f32 	cmn.w	r3, #50	@ 0x32
 8002ec0:	da14      	bge.n	8002eec <RAMP+0x7c>
				{
					Vout = (int32_t)(Vout - Ramp_ratio * period_loop);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	ee07 3a90 	vmov	s15, r3
 8002ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ed6:	edd7 7a00 	vldr	s15, [r7]
 8002eda:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ee6:	ee17 3a90 	vmov	r3, s15
 8002eea:	60fb      	str	r3, [r7, #12]
				}
				if(Vout >= 4750)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f241 228d 	movw	r2, #4749	@ 0x128d
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	dd05      	ble.n	8002f02 <RAMP+0x92>
				{
					Vout = 48000; // 48V
 8002ef6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8002efa:	60fb      	str	r3, [r7, #12]
					RAMP_FINISHED = 1;
 8002efc:	4b04      	ldr	r3, [pc, #16]	@ (8002f10 <RAMP+0xa0>)
 8002efe:	2201      	movs	r2, #1
 8002f00:	701a      	strb	r2, [r3, #0]
					//currentState = STATE_REGULATION;
				}

				return Vout;
 8002f02:	68fb      	ldr	r3, [r7, #12]
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr
 8002f10:	20000a8c 	.word	0x20000a8c

08002f14 <regulatorPI>:

void regulatorPI(int32_t *out, int32_t *integral, int32_t in, int32_t in_zad, int32_t limp, int32_t limn, float kp, float ti, float Ts1)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b089      	sub	sp, #36	@ 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	61f8      	str	r0, [r7, #28]
 8002f1c:	61b9      	str	r1, [r7, #24]
 8002f1e:	617a      	str	r2, [r7, #20]
 8002f20:	613b      	str	r3, [r7, #16]
 8002f22:	ed87 0a03 	vstr	s0, [r7, #12]
 8002f26:	edc7 0a02 	vstr	s1, [r7, #8]
 8002f2a:	ed87 1a01 	vstr	s2, [r7, #4]
	// Tustin transfrom of PI regulator s -> 2/T * (Z-1)/(Z+1)


    delta = in_zad - in; // error
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	4a32      	ldr	r2, [pc, #200]	@ (8003000 <regulatorPI+0xec>)
 8002f36:	6013      	str	r3, [r2, #0]
    *integral = (*integral + (int32_t)((delta + prev_delta) * ((kp / ti) * Ts1 * 0.5f))) ; // I part
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a30      	ldr	r2, [pc, #192]	@ (8003000 <regulatorPI+0xec>)
 8002f3e:	6811      	ldr	r1, [r2, #0]
 8002f40:	4a30      	ldr	r2, [pc, #192]	@ (8003004 <regulatorPI+0xf0>)
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	440a      	add	r2, r1
 8002f46:	ee07 2a90 	vmov	s15, r2
 8002f4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f52:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f56:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f62:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002f66:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f72:	ee17 2a90 	vmov	r2, s15
 8002f76:	441a      	add	r2, r3
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	601a      	str	r2, [r3, #0]
    prev_delta = delta;
 8002f7c:	4b20      	ldr	r3, [pc, #128]	@ (8003000 <regulatorPI+0xec>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a20      	ldr	r2, [pc, #128]	@ (8003004 <regulatorPI+0xf0>)
 8002f82:	6013      	str	r3, [r2, #0]
    prev_out = *out;
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a1f      	ldr	r2, [pc, #124]	@ (8003008 <regulatorPI+0xf4>)
 8002f8a:	6013      	str	r3, [r2, #0]
    if (*integral >= limp) // limit peak positive
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f92:	429a      	cmp	r2, r3
 8002f94:	dc02      	bgt.n	8002f9c <regulatorPI+0x88>
    {
        *integral = limp;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f9a:	601a      	str	r2, [r3, #0]
    }
    if (*integral <= limn)// limit peak negative
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	db02      	blt.n	8002fac <regulatorPI+0x98>
    {
        *integral = limn;
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002faa:	601a      	str	r2, [r3, #0]
    }
    *out = ((int32_t)((float)delta*kp) + *integral); // Sum of P and I
 8002fac:	4b14      	ldr	r3, [pc, #80]	@ (8003000 <regulatorPI+0xec>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	ee07 3a90 	vmov	s15, r3
 8002fb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fc4:	ee17 2a90 	vmov	r2, s15
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	441a      	add	r2, r3
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	601a      	str	r2, [r3, #0]
    if (*out >= limp) // limit peak positive
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	dc02      	bgt.n	8002fe2 <regulatorPI+0xce>
    {
        *out = limp;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fe0:	601a      	str	r2, [r3, #0]
    }
    if (*out <= limn)// limit peak negative
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	db02      	blt.n	8002ff2 <regulatorPI+0xde>
    {
        *out = limn;
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002ff0:	601a      	str	r2, [r3, #0]
    }
   // if((*out - prev_out) < 50 || (*out - prev_out) < -50) // histeresis to probably prevent jitter must be checked
   // {
    //	*out = prev_out;
   // }
}
 8002ff2:	bf00      	nop
 8002ff4:	3724      	adds	r7, #36	@ 0x24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000a94 	.word	0x20000a94
 8003004:	20000b80 	.word	0x20000b80
 8003008:	20000a90 	.word	0x20000a90
 800300c:	00000000 	.word	0x00000000

08003010 <Low_pass_filter>:

	    return y[0];
}*/

float Low_pass_filter(float new_sample, float old_sample, float old_sample_n1, float old_passed)
{
 8003010:	b5b0      	push	{r4, r5, r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	ed87 0a03 	vstr	s0, [r7, #12]
 800301a:	edc7 0a02 	vstr	s1, [r7, #8]
 800301e:	ed87 1a01 	vstr	s2, [r7, #4]
 8003022:	edc7 1a00 	vstr	s3, [r7]

	//Low_passed_sample = (float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;
	//(1-ALPHA)*0.5*(new_sample+old_sample_n1+ALPHA*old_passed);//(float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;
	return ((1-ALPHA) * old_sample + ALPHA * new_sample) ;//(float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;
 8003026:	68b8      	ldr	r0, [r7, #8]
 8003028:	f7fd fab6 	bl	8000598 <__aeabi_f2d>
 800302c:	a312      	add	r3, pc, #72	@ (adr r3, 8003078 <Low_pass_filter+0x68>)
 800302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003032:	f7fd fb09 	bl	8000648 <__aeabi_dmul>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4614      	mov	r4, r2
 800303c:	461d      	mov	r5, r3
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f7fd faaa 	bl	8000598 <__aeabi_f2d>
 8003044:	a30e      	add	r3, pc, #56	@ (adr r3, 8003080 <Low_pass_filter+0x70>)
 8003046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304a:	f7fd fafd 	bl	8000648 <__aeabi_dmul>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4620      	mov	r0, r4
 8003054:	4629      	mov	r1, r5
 8003056:	f7fd f941 	bl	80002dc <__adddf3>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4610      	mov	r0, r2
 8003060:	4619      	mov	r1, r3
 8003062:	f7fd fde9 	bl	8000c38 <__aeabi_d2f>
 8003066:	4603      	mov	r3, r0
 8003068:	ee07 3a90 	vmov	s15, r3

}
 800306c:	eeb0 0a67 	vmov.f32	s0, s15
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bdb0      	pop	{r4, r5, r7, pc}
 8003076:	bf00      	nop
 8003078:	66666666 	.word	0x66666666
 800307c:	3fee6666 	.word	0x3fee6666
 8003080:	9999999a 	.word	0x9999999a
 8003084:	3fa99999 	.word	0x3fa99999

08003088 <FAN_Drive>:
void FAN_Drive()
{ //@ToDo poprawic ogarnac zeby a intach bylo
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
		pcb_temp = (adc3_dma_buffer[3]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[3], pcb_temp)/4096)*3.3;
 800308e:	4b44      	ldr	r3, [pc, #272]	@ (80031a0 <FAN_Drive+0x118>)
 8003090:	88db      	ldrh	r3, [r3, #6]
 8003092:	b29b      	uxth	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	da01      	bge.n	80030a6 <FAN_Drive+0x1e>
 80030a2:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80030a6:	131b      	asrs	r3, r3, #12
 80030a8:	461a      	mov	r2, r3
 80030aa:	4b3e      	ldr	r3, [pc, #248]	@ (80031a4 <FAN_Drive+0x11c>)
 80030ac:	601a      	str	r2, [r3, #0]
		heat_sink_temp = (adc3_dma_buffer[4]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[4], heat_sink_temp)/4096)*3.3;
 80030ae:	4b3c      	ldr	r3, [pc, #240]	@ (80031a0 <FAN_Drive+0x118>)
 80030b0:	891b      	ldrh	r3, [r3, #8]
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80030ba:	fb02 f303 	mul.w	r3, r2, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	da01      	bge.n	80030c6 <FAN_Drive+0x3e>
 80030c2:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80030c6:	131b      	asrs	r3, r3, #12
 80030c8:	461a      	mov	r2, r3
 80030ca:	4b37      	ldr	r3, [pc, #220]	@ (80031a8 <FAN_Drive+0x120>)
 80030cc:	601a      	str	r2, [r3, #0]

		uint32_t temperature = 20;
 80030ce:	2314      	movs	r3, #20
 80030d0:	603b      	str	r3, [r7, #0]

		pcb_temp = (pcb_temp-400)/20;
 80030d2:	4b34      	ldr	r3, [pc, #208]	@ (80031a4 <FAN_Drive+0x11c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80030da:	4a34      	ldr	r2, [pc, #208]	@ (80031ac <FAN_Drive+0x124>)
 80030dc:	fba2 2303 	umull	r2, r3, r2, r3
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	4a30      	ldr	r2, [pc, #192]	@ (80031a4 <FAN_Drive+0x11c>)
 80030e4:	6013      	str	r3, [r2, #0]
		heat_sink_temp = (heat_sink_temp-500)/10;
 80030e6:	4b30      	ldr	r3, [pc, #192]	@ (80031a8 <FAN_Drive+0x120>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80030ee:	4a2f      	ldr	r2, [pc, #188]	@ (80031ac <FAN_Drive+0x124>)
 80030f0:	fba2 2303 	umull	r2, r3, r2, r3
 80030f4:	08db      	lsrs	r3, r3, #3
 80030f6:	4a2c      	ldr	r2, [pc, #176]	@ (80031a8 <FAN_Drive+0x120>)
 80030f8:	6013      	str	r3, [r2, #0]
		// Choose the higher of the two temperatures
		temperature = (pcb_temp > heat_sink_temp) ? pcb_temp : heat_sink_temp;
 80030fa:	4b2b      	ldr	r3, [pc, #172]	@ (80031a8 <FAN_Drive+0x120>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b29      	ldr	r3, [pc, #164]	@ (80031a4 <FAN_Drive+0x11c>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4293      	cmp	r3, r2
 8003104:	bf38      	it	cc
 8003106:	4613      	movcc	r3, r2
 8003108:	603b      	str	r3, [r7, #0]
		// Apply a non-linear (exponential) scaling for the fan speed
		// This scales the temperature to a value between 0 and 1, then applies an exponential curve
		uint32_t normalized_temp = ((temperature - 20) *100)/ 80;  // Normalizing between 0 (20°C) and 1000 (100°C)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2264      	movs	r2, #100	@ 0x64
 800310e:	fb02 f303 	mul.w	r3, r2, r3
 8003112:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8003116:	4a25      	ldr	r2, [pc, #148]	@ (80031ac <FAN_Drive+0x124>)
 8003118:	fba2 2303 	umull	r2, r3, r2, r3
 800311c:	099b      	lsrs	r3, r3, #6
 800311e:	607b      	str	r3, [r7, #4]
		if (normalized_temp > 100) normalized_temp = 100;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b64      	cmp	r3, #100	@ 0x64
 8003124:	d901      	bls.n	800312a <FAN_Drive+0xa2>
 8003126:	2364      	movs	r3, #100	@ 0x64
 8003128:	607b      	str	r3, [r7, #4]
		if (normalized_temp < 0) normalized_temp = 0;

		duty_cycle = 20 + ((int)(pow(normalized_temp, 3) * 79))/1000000;  // Cubic curve for fan speed control
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fd fa12 	bl	8000554 <__aeabi_ui2d>
 8003130:	4602      	mov	r2, r0
 8003132:	460b      	mov	r3, r1
 8003134:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8003190 <FAN_Drive+0x108>
 8003138:	ec43 2b10 	vmov	d0, r2, r3
 800313c:	f012 fda0 	bl	8015c80 <pow>
 8003140:	ec51 0b10 	vmov	r0, r1, d0
 8003144:	a314      	add	r3, pc, #80	@ (adr r3, 8003198 <FAN_Drive+0x110>)
 8003146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314a:	f7fd fa7d 	bl	8000648 <__aeabi_dmul>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4610      	mov	r0, r2
 8003154:	4619      	mov	r1, r3
 8003156:	f7fd fd27 	bl	8000ba8 <__aeabi_d2iz>
 800315a:	4603      	mov	r3, r0
 800315c:	4a14      	ldr	r2, [pc, #80]	@ (80031b0 <FAN_Drive+0x128>)
 800315e:	fb82 1203 	smull	r1, r2, r2, r3
 8003162:	1492      	asrs	r2, r2, #18
 8003164:	17db      	asrs	r3, r3, #31
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	3314      	adds	r3, #20
 800316a:	4a12      	ldr	r2, [pc, #72]	@ (80031b4 <FAN_Drive+0x12c>)
 800316c:	6013      	str	r3, [r2, #0]

		// Enforce minimum and maximum duty cycles
		if (temperature < 20) {
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b13      	cmp	r3, #19
 8003172:	d803      	bhi.n	800317c <FAN_Drive+0xf4>
		        duty_cycle = 20;
 8003174:	4b0f      	ldr	r3, [pc, #60]	@ (80031b4 <FAN_Drive+0x12c>)
 8003176:	2214      	movs	r2, #20
 8003178:	601a      	str	r2, [r3, #0]
		    	duty_cycle = 99;
		}

		//Set_PWM_DutyCycle(duty_cycle);

}
 800317a:	e005      	b.n	8003188 <FAN_Drive+0x100>
		} else if (temperature > 100) {
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	2b64      	cmp	r3, #100	@ 0x64
 8003180:	d902      	bls.n	8003188 <FAN_Drive+0x100>
		    	duty_cycle = 99;
 8003182:	4b0c      	ldr	r3, [pc, #48]	@ (80031b4 <FAN_Drive+0x12c>)
 8003184:	2263      	movs	r2, #99	@ 0x63
 8003186:	601a      	str	r2, [r3, #0]
}
 8003188:	bf00      	nop
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	00000000 	.word	0x00000000
 8003194:	40080000 	.word	0x40080000
 8003198:	00000000 	.word	0x00000000
 800319c:	4053c000 	.word	0x4053c000
 80031a0:	20000a70 	.word	0x20000a70
 80031a4:	20000a68 	.word	0x20000a68
 80031a8:	20000a6c 	.word	0x20000a6c
 80031ac:	cccccccd 	.word	0xcccccccd
 80031b0:	431bde83 	.word	0x431bde83
 80031b4:	20000028 	.word	0x20000028

080031b8 <SendUSBMessage>:



void SendUSBMessage(const char* message) {
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f7fd f87d 	bl	80002c0 <strlen>
 80031c6:	4603      	mov	r3, r0
 80031c8:	81fb      	strh	r3, [r7, #14]
    if (len > 127) len = 127;  // Limit to buffer size
 80031ca:	89fb      	ldrh	r3, [r7, #14]
 80031cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80031ce:	d901      	bls.n	80031d4 <SendUSBMessage+0x1c>
 80031d0:	237f      	movs	r3, #127	@ 0x7f
 80031d2:	81fb      	strh	r3, [r7, #14]
    memcpy(USB_TX_Buffer, message, len);
 80031d4:	89fb      	ldrh	r3, [r7, #14]
 80031d6:	461a      	mov	r2, r3
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	480b      	ldr	r0, [pc, #44]	@ (8003208 <SendUSBMessage+0x50>)
 80031dc:	f00e fe0b 	bl	8011df6 <memcpy>
    USB_TX_Buffer[len] = '\0';  // Ensure null-terminated string
 80031e0:	89fb      	ldrh	r3, [r7, #14]
 80031e2:	4a09      	ldr	r2, [pc, #36]	@ (8003208 <SendUSBMessage+0x50>)
 80031e4:	2100      	movs	r1, #0
 80031e6:	54d1      	strb	r1, [r2, r3]
            break;
        }
      // HAL_Delay(10);  // Small delay before retrying
    } while (retry_count-- > 0);*/
    do {
            result = CDC_Transmit_FS((uint8_t*)message, len);
 80031e8:	89fb      	ldrh	r3, [r7, #14]
 80031ea:	4619      	mov	r1, r3
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f00d f967 	bl	80104c0 <CDC_Transmit_FS>
 80031f2:	4603      	mov	r3, r0
 80031f4:	737b      	strb	r3, [r7, #13]
        } while (result == USBD_BUSY); // Retry while USB is busy
 80031f6:	7b7b      	ldrb	r3, [r7, #13]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d0f5      	beq.n	80031e8 <SendUSBMessage+0x30>


}
 80031fc:	bf00      	nop
 80031fe:	bf00      	nop
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	20000af4 	.word	0x20000af4

0800320c <ParseUSBCommand>:

void ParseUSBCommand(void) {
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
	 if (dataReceivedFlag) {
 8003210:	4ba6      	ldr	r3, [pc, #664]	@ (80034ac <ParseUSBCommand+0x2a0>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8146 	beq.w	80034a8 <ParseUSBCommand+0x29c>
	        if (strncmp((char*)USB_RX_Buffer, "SET_KP", 6) == 0) {
 800321c:	2206      	movs	r2, #6
 800321e:	49a4      	ldr	r1, [pc, #656]	@ (80034b0 <ParseUSBCommand+0x2a4>)
 8003220:	48a4      	ldr	r0, [pc, #656]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003222:	f00e fd5e 	bl	8011ce2 <strncmp>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d108      	bne.n	800323e <ParseUSBCommand+0x32>
	            sscanf((char*)USB_RX_Buffer, "SET_KP %f", &Kp);
 800322c:	4aa2      	ldr	r2, [pc, #648]	@ (80034b8 <ParseUSBCommand+0x2ac>)
 800322e:	49a3      	ldr	r1, [pc, #652]	@ (80034bc <ParseUSBCommand+0x2b0>)
 8003230:	48a0      	ldr	r0, [pc, #640]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003232:	f00e fcdf 	bl	8011bf4 <siscanf>
	            SendUSBMessage("KP Updated\n");
 8003236:	48a2      	ldr	r0, [pc, #648]	@ (80034c0 <ParseUSBCommand+0x2b4>)
 8003238:	f7ff ffbe 	bl	80031b8 <SendUSBMessage>
 800323c:	e12c      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_Ti", 6) == 0) {
 800323e:	2206      	movs	r2, #6
 8003240:	49a0      	ldr	r1, [pc, #640]	@ (80034c4 <ParseUSBCommand+0x2b8>)
 8003242:	489c      	ldr	r0, [pc, #624]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003244:	f00e fd4d 	bl	8011ce2 <strncmp>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d108      	bne.n	8003260 <ParseUSBCommand+0x54>
	            sscanf((char*)USB_RX_Buffer, "SET_Ti %f", &Ti);
 800324e:	4a9e      	ldr	r2, [pc, #632]	@ (80034c8 <ParseUSBCommand+0x2bc>)
 8003250:	499e      	ldr	r1, [pc, #632]	@ (80034cc <ParseUSBCommand+0x2c0>)
 8003252:	4898      	ldr	r0, [pc, #608]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003254:	f00e fcce 	bl	8011bf4 <siscanf>
	            SendUSBMessage("Ti Updated\n");
 8003258:	489d      	ldr	r0, [pc, #628]	@ (80034d0 <ParseUSBCommand+0x2c4>)
 800325a:	f7ff ffad 	bl	80031b8 <SendUSBMessage>
 800325e:	e11b      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_VREF", 8) == 0) {
 8003260:	2208      	movs	r2, #8
 8003262:	499c      	ldr	r1, [pc, #624]	@ (80034d4 <ParseUSBCommand+0x2c8>)
 8003264:	4893      	ldr	r0, [pc, #588]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003266:	f00e fd3c 	bl	8011ce2 <strncmp>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d108      	bne.n	8003282 <ParseUSBCommand+0x76>
	            sscanf((char*)USB_RX_Buffer, "SET_VREF %hu", &vref);
 8003270:	4a99      	ldr	r2, [pc, #612]	@ (80034d8 <ParseUSBCommand+0x2cc>)
 8003272:	499a      	ldr	r1, [pc, #616]	@ (80034dc <ParseUSBCommand+0x2d0>)
 8003274:	488f      	ldr	r0, [pc, #572]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003276:	f00e fcbd 	bl	8011bf4 <siscanf>
	            SendUSBMessage("vref Updated\n");
 800327a:	4899      	ldr	r0, [pc, #612]	@ (80034e0 <ParseUSBCommand+0x2d4>)
 800327c:	f7ff ff9c 	bl	80031b8 <SendUSBMessage>
 8003280:	e10a      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS1_VREF", 12) == 0) {
 8003282:	220c      	movs	r2, #12
 8003284:	4997      	ldr	r1, [pc, #604]	@ (80034e4 <ParseUSBCommand+0x2d8>)
 8003286:	488b      	ldr	r0, [pc, #556]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003288:	f00e fd2b 	bl	8011ce2 <strncmp>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d108      	bne.n	80032a4 <ParseUSBCommand+0x98>
	            sscanf((char*)USB_RX_Buffer, "SET_CS1_VREF %d", &current_sensor1_vref);
 8003292:	4a95      	ldr	r2, [pc, #596]	@ (80034e8 <ParseUSBCommand+0x2dc>)
 8003294:	4995      	ldr	r1, [pc, #596]	@ (80034ec <ParseUSBCommand+0x2e0>)
 8003296:	4887      	ldr	r0, [pc, #540]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003298:	f00e fcac 	bl	8011bf4 <siscanf>
	            SendUSBMessage("current_sensor1_vref Updated\n");
 800329c:	4894      	ldr	r0, [pc, #592]	@ (80034f0 <ParseUSBCommand+0x2e4>)
 800329e:	f7ff ff8b 	bl	80031b8 <SendUSBMessage>
 80032a2:	e0f9      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS2_VREF", 12) == 0) {
 80032a4:	220c      	movs	r2, #12
 80032a6:	4993      	ldr	r1, [pc, #588]	@ (80034f4 <ParseUSBCommand+0x2e8>)
 80032a8:	4882      	ldr	r0, [pc, #520]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 80032aa:	f00e fd1a 	bl	8011ce2 <strncmp>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d108      	bne.n	80032c6 <ParseUSBCommand+0xba>
	            sscanf((char*)USB_RX_Buffer, "SET_CS2_VREF %d", &current_sensor2_vref);
 80032b4:	4a90      	ldr	r2, [pc, #576]	@ (80034f8 <ParseUSBCommand+0x2ec>)
 80032b6:	4991      	ldr	r1, [pc, #580]	@ (80034fc <ParseUSBCommand+0x2f0>)
 80032b8:	487e      	ldr	r0, [pc, #504]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 80032ba:	f00e fc9b 	bl	8011bf4 <siscanf>
	            SendUSBMessage("current_sensor2_vref Updated\n");
 80032be:	4890      	ldr	r0, [pc, #576]	@ (8003500 <ParseUSBCommand+0x2f4>)
 80032c0:	f7ff ff7a 	bl	80031b8 <SendUSBMessage>
 80032c4:	e0e8      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_IMAX2_SUM", 13) == 0) {
 80032c6:	220d      	movs	r2, #13
 80032c8:	498e      	ldr	r1, [pc, #568]	@ (8003504 <ParseUSBCommand+0x2f8>)
 80032ca:	487a      	ldr	r0, [pc, #488]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 80032cc:	f00e fd09 	bl	8011ce2 <strncmp>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d108      	bne.n	80032e8 <ParseUSBCommand+0xdc>
	            sscanf((char*)USB_RX_Buffer, "SET_IMAX2_SUM %d", &imax2_sum);
 80032d6:	4a8c      	ldr	r2, [pc, #560]	@ (8003508 <ParseUSBCommand+0x2fc>)
 80032d8:	498c      	ldr	r1, [pc, #560]	@ (800350c <ParseUSBCommand+0x300>)
 80032da:	4876      	ldr	r0, [pc, #472]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 80032dc:	f00e fc8a 	bl	8011bf4 <siscanf>
	            SendUSBMessage("imax2_sum Updated\n");
 80032e0:	488b      	ldr	r0, [pc, #556]	@ (8003510 <ParseUSBCommand+0x304>)
 80032e2:	f7ff ff69 	bl	80031b8 <SendUSBMessage>
 80032e6:	e0d7      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_TR", 12) == 0) {
 80032e8:	220c      	movs	r2, #12
 80032ea:	498a      	ldr	r1, [pc, #552]	@ (8003514 <ParseUSBCommand+0x308>)
 80032ec:	4871      	ldr	r0, [pc, #452]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 80032ee:	f00e fcf8 	bl	8011ce2 <strncmp>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d108      	bne.n	800330a <ParseUSBCommand+0xfe>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_TR %f", &delay_tr);
 80032f8:	4a87      	ldr	r2, [pc, #540]	@ (8003518 <ParseUSBCommand+0x30c>)
 80032fa:	4988      	ldr	r1, [pc, #544]	@ (800351c <ParseUSBCommand+0x310>)
 80032fc:	486d      	ldr	r0, [pc, #436]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 80032fe:	f00e fc79 	bl	8011bf4 <siscanf>
	            SendUSBMessage("delay_tr Updated\n");
 8003302:	4887      	ldr	r0, [pc, #540]	@ (8003520 <ParseUSBCommand+0x314>)
 8003304:	f7ff ff58 	bl	80031b8 <SendUSBMessage>
 8003308:	e0c6      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_HC", 12) == 0) {
 800330a:	220c      	movs	r2, #12
 800330c:	4985      	ldr	r1, [pc, #532]	@ (8003524 <ParseUSBCommand+0x318>)
 800330e:	4869      	ldr	r0, [pc, #420]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003310:	f00e fce7 	bl	8011ce2 <strncmp>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d108      	bne.n	800332c <ParseUSBCommand+0x120>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_HC %f", &delay_hc);
 800331a:	4a83      	ldr	r2, [pc, #524]	@ (8003528 <ParseUSBCommand+0x31c>)
 800331c:	4983      	ldr	r1, [pc, #524]	@ (800352c <ParseUSBCommand+0x320>)
 800331e:	4865      	ldr	r0, [pc, #404]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003320:	f00e fc68 	bl	8011bf4 <siscanf>
	            SendUSBMessage("delay_hc Updated\n");
 8003324:	4882      	ldr	r0, [pc, #520]	@ (8003530 <ParseUSBCommand+0x324>)
 8003326:	f7ff ff47 	bl	80031b8 <SendUSBMessage>
 800332a:	e0b5      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_KP", 6) == 0) {
 800332c:	2206      	movs	r2, #6
 800332e:	4981      	ldr	r1, [pc, #516]	@ (8003534 <ParseUSBCommand+0x328>)
 8003330:	4860      	ldr	r0, [pc, #384]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003332:	f00e fcd6 	bl	8011ce2 <strncmp>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d10e      	bne.n	800335a <ParseUSBCommand+0x14e>
	            sprintf((char*)USB_TX_Buffer, "KP = %f\n", Kp);
 800333c:	4b5e      	ldr	r3, [pc, #376]	@ (80034b8 <ParseUSBCommand+0x2ac>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd f929 	bl	8000598 <__aeabi_f2d>
 8003346:	4602      	mov	r2, r0
 8003348:	460b      	mov	r3, r1
 800334a:	497b      	ldr	r1, [pc, #492]	@ (8003538 <ParseUSBCommand+0x32c>)
 800334c:	487b      	ldr	r0, [pc, #492]	@ (800353c <ParseUSBCommand+0x330>)
 800334e:	f00e fc31 	bl	8011bb4 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003352:	487a      	ldr	r0, [pc, #488]	@ (800353c <ParseUSBCommand+0x330>)
 8003354:	f7ff ff30 	bl	80031b8 <SendUSBMessage>
 8003358:	e09e      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_Ti", 6) == 0) {
 800335a:	2206      	movs	r2, #6
 800335c:	4978      	ldr	r1, [pc, #480]	@ (8003540 <ParseUSBCommand+0x334>)
 800335e:	4855      	ldr	r0, [pc, #340]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003360:	f00e fcbf 	bl	8011ce2 <strncmp>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10e      	bne.n	8003388 <ParseUSBCommand+0x17c>
	            sprintf((char*)USB_TX_Buffer, "Ti = %f\n", Ti);
 800336a:	4b57      	ldr	r3, [pc, #348]	@ (80034c8 <ParseUSBCommand+0x2bc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd f912 	bl	8000598 <__aeabi_f2d>
 8003374:	4602      	mov	r2, r0
 8003376:	460b      	mov	r3, r1
 8003378:	4972      	ldr	r1, [pc, #456]	@ (8003544 <ParseUSBCommand+0x338>)
 800337a:	4870      	ldr	r0, [pc, #448]	@ (800353c <ParseUSBCommand+0x330>)
 800337c:	f00e fc1a 	bl	8011bb4 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003380:	486e      	ldr	r0, [pc, #440]	@ (800353c <ParseUSBCommand+0x330>)
 8003382:	f7ff ff19 	bl	80031b8 <SendUSBMessage>
 8003386:	e087      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_VREF", 8) == 0) {
 8003388:	2208      	movs	r2, #8
 800338a:	496f      	ldr	r1, [pc, #444]	@ (8003548 <ParseUSBCommand+0x33c>)
 800338c:	4849      	ldr	r0, [pc, #292]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 800338e:	f00e fca8 	bl	8011ce2 <strncmp>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10a      	bne.n	80033ae <ParseUSBCommand+0x1a2>
	            sprintf((char*)USB_TX_Buffer, "vref = %hu\n", vref);
 8003398:	4b4f      	ldr	r3, [pc, #316]	@ (80034d8 <ParseUSBCommand+0x2cc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	496b      	ldr	r1, [pc, #428]	@ (800354c <ParseUSBCommand+0x340>)
 80033a0:	4866      	ldr	r0, [pc, #408]	@ (800353c <ParseUSBCommand+0x330>)
 80033a2:	f00e fc07 	bl	8011bb4 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80033a6:	4865      	ldr	r0, [pc, #404]	@ (800353c <ParseUSBCommand+0x330>)
 80033a8:	f7ff ff06 	bl	80031b8 <SendUSBMessage>
 80033ac:	e074      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS1_VREF", 12) == 0) {
 80033ae:	220c      	movs	r2, #12
 80033b0:	4967      	ldr	r1, [pc, #412]	@ (8003550 <ParseUSBCommand+0x344>)
 80033b2:	4840      	ldr	r0, [pc, #256]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 80033b4:	f00e fc95 	bl	8011ce2 <strncmp>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10a      	bne.n	80033d4 <ParseUSBCommand+0x1c8>
	            sprintf((char*)USB_TX_Buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 80033be:	4b4a      	ldr	r3, [pc, #296]	@ (80034e8 <ParseUSBCommand+0x2dc>)
 80033c0:	881b      	ldrh	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	4963      	ldr	r1, [pc, #396]	@ (8003554 <ParseUSBCommand+0x348>)
 80033c6:	485d      	ldr	r0, [pc, #372]	@ (800353c <ParseUSBCommand+0x330>)
 80033c8:	f00e fbf4 	bl	8011bb4 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80033cc:	485b      	ldr	r0, [pc, #364]	@ (800353c <ParseUSBCommand+0x330>)
 80033ce:	f7ff fef3 	bl	80031b8 <SendUSBMessage>
 80033d2:	e061      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS2_VREF", 12) == 0) {
 80033d4:	220c      	movs	r2, #12
 80033d6:	4960      	ldr	r1, [pc, #384]	@ (8003558 <ParseUSBCommand+0x34c>)
 80033d8:	4836      	ldr	r0, [pc, #216]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 80033da:	f00e fc82 	bl	8011ce2 <strncmp>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10a      	bne.n	80033fa <ParseUSBCommand+0x1ee>
	            sprintf((char*)USB_TX_Buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 80033e4:	4b44      	ldr	r3, [pc, #272]	@ (80034f8 <ParseUSBCommand+0x2ec>)
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	461a      	mov	r2, r3
 80033ea:	495c      	ldr	r1, [pc, #368]	@ (800355c <ParseUSBCommand+0x350>)
 80033ec:	4853      	ldr	r0, [pc, #332]	@ (800353c <ParseUSBCommand+0x330>)
 80033ee:	f00e fbe1 	bl	8011bb4 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80033f2:	4852      	ldr	r0, [pc, #328]	@ (800353c <ParseUSBCommand+0x330>)
 80033f4:	f7ff fee0 	bl	80031b8 <SendUSBMessage>
 80033f8:	e04e      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_IMAX2_SUM", 13) == 0) {
 80033fa:	220d      	movs	r2, #13
 80033fc:	4958      	ldr	r1, [pc, #352]	@ (8003560 <ParseUSBCommand+0x354>)
 80033fe:	482d      	ldr	r0, [pc, #180]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003400:	f00e fc6f 	bl	8011ce2 <strncmp>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10a      	bne.n	8003420 <ParseUSBCommand+0x214>
	            sprintf((char*)USB_TX_Buffer, "imax2_sum = %f\n", imax2_sum);
 800340a:	4b3f      	ldr	r3, [pc, #252]	@ (8003508 <ParseUSBCommand+0x2fc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	4954      	ldr	r1, [pc, #336]	@ (8003564 <ParseUSBCommand+0x358>)
 8003412:	484a      	ldr	r0, [pc, #296]	@ (800353c <ParseUSBCommand+0x330>)
 8003414:	f00e fbce 	bl	8011bb4 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003418:	4848      	ldr	r0, [pc, #288]	@ (800353c <ParseUSBCommand+0x330>)
 800341a:	f7ff fecd 	bl	80031b8 <SendUSBMessage>
 800341e:	e03b      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_TR", 12) == 0) {
 8003420:	220c      	movs	r2, #12
 8003422:	4951      	ldr	r1, [pc, #324]	@ (8003568 <ParseUSBCommand+0x35c>)
 8003424:	4823      	ldr	r0, [pc, #140]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003426:	f00e fc5c 	bl	8011ce2 <strncmp>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10e      	bne.n	800344e <ParseUSBCommand+0x242>
	            sprintf((char*)USB_TX_Buffer, "delay_tr = %f\n", delay_tr);
 8003430:	4b39      	ldr	r3, [pc, #228]	@ (8003518 <ParseUSBCommand+0x30c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f7fd f8af 	bl	8000598 <__aeabi_f2d>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	494b      	ldr	r1, [pc, #300]	@ (800356c <ParseUSBCommand+0x360>)
 8003440:	483e      	ldr	r0, [pc, #248]	@ (800353c <ParseUSBCommand+0x330>)
 8003442:	f00e fbb7 	bl	8011bb4 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003446:	483d      	ldr	r0, [pc, #244]	@ (800353c <ParseUSBCommand+0x330>)
 8003448:	f7ff feb6 	bl	80031b8 <SendUSBMessage>
 800344c:	e024      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_HC", 12) == 0) {
 800344e:	220c      	movs	r2, #12
 8003450:	4947      	ldr	r1, [pc, #284]	@ (8003570 <ParseUSBCommand+0x364>)
 8003452:	4818      	ldr	r0, [pc, #96]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003454:	f00e fc45 	bl	8011ce2 <strncmp>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10e      	bne.n	800347c <ParseUSBCommand+0x270>
	            sprintf((char*)USB_TX_Buffer, "delay_hc = %f\n", delay_hc);
 800345e:	4b32      	ldr	r3, [pc, #200]	@ (8003528 <ParseUSBCommand+0x31c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f7fd f898 	bl	8000598 <__aeabi_f2d>
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	4941      	ldr	r1, [pc, #260]	@ (8003574 <ParseUSBCommand+0x368>)
 800346e:	4833      	ldr	r0, [pc, #204]	@ (800353c <ParseUSBCommand+0x330>)
 8003470:	f00e fba0 	bl	8011bb4 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003474:	4831      	ldr	r0, [pc, #196]	@ (800353c <ParseUSBCommand+0x330>)
 8003476:	f7ff fe9f 	bl	80031b8 <SendUSBMessage>
 800347a:	e00d      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "DISPLAY_ALL", 11) == 0) {
 800347c:	220b      	movs	r2, #11
 800347e:	493e      	ldr	r1, [pc, #248]	@ (8003578 <ParseUSBCommand+0x36c>)
 8003480:	480c      	ldr	r0, [pc, #48]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 8003482:	f00e fc2e 	bl	8011ce2 <strncmp>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d102      	bne.n	8003492 <ParseUSBCommand+0x286>
	            DisplayAllVariables();
 800348c:	f000 f9c2 	bl	8003814 <DisplayAllVariables>
 8003490:	e002      	b.n	8003498 <ParseUSBCommand+0x28c>

	        } else {
	            SendUSBMessage("Unknown Command\n");
 8003492:	483a      	ldr	r0, [pc, #232]	@ (800357c <ParseUSBCommand+0x370>)
 8003494:	f7ff fe90 	bl	80031b8 <SendUSBMessage>
	        }
	        memset(USB_RX_Buffer, 0, sizeof(USB_RX_Buffer));  // Clear buffer
 8003498:	2240      	movs	r2, #64	@ 0x40
 800349a:	2100      	movs	r1, #0
 800349c:	4805      	ldr	r0, [pc, #20]	@ (80034b4 <ParseUSBCommand+0x2a8>)
 800349e:	f00e fc18 	bl	8011cd2 <memset>
	        dataReceivedFlag = 0;
 80034a2:	4b02      	ldr	r3, [pc, #8]	@ (80034ac <ParseUSBCommand+0x2a0>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
	    }
}
 80034a8:	bf00      	nop
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	20000b74 	.word	0x20000b74
 80034b0:	08016b98 	.word	0x08016b98
 80034b4:	20000ab4 	.word	0x20000ab4
 80034b8:	20000018 	.word	0x20000018
 80034bc:	08016ba0 	.word	0x08016ba0
 80034c0:	08016bac 	.word	0x08016bac
 80034c4:	08016bb8 	.word	0x08016bb8
 80034c8:	2000001c 	.word	0x2000001c
 80034cc:	08016bc0 	.word	0x08016bc0
 80034d0:	08016bcc 	.word	0x08016bcc
 80034d4:	08016bd8 	.word	0x08016bd8
 80034d8:	20000000 	.word	0x20000000
 80034dc:	08016be4 	.word	0x08016be4
 80034e0:	08016bf4 	.word	0x08016bf4
 80034e4:	08016c04 	.word	0x08016c04
 80034e8:	20000a54 	.word	0x20000a54
 80034ec:	08016c14 	.word	0x08016c14
 80034f0:	08016c24 	.word	0x08016c24
 80034f4:	08016c44 	.word	0x08016c44
 80034f8:	20000a56 	.word	0x20000a56
 80034fc:	08016c54 	.word	0x08016c54
 8003500:	08016c64 	.word	0x08016c64
 8003504:	08016c84 	.word	0x08016c84
 8003508:	20000a98 	.word	0x20000a98
 800350c:	08016c94 	.word	0x08016c94
 8003510:	08016ca8 	.word	0x08016ca8
 8003514:	08016cbc 	.word	0x08016cbc
 8003518:	20000004 	.word	0x20000004
 800351c:	08016ccc 	.word	0x08016ccc
 8003520:	08016cdc 	.word	0x08016cdc
 8003524:	08016cf0 	.word	0x08016cf0
 8003528:	20000008 	.word	0x20000008
 800352c:	08016d00 	.word	0x08016d00
 8003530:	08016d10 	.word	0x08016d10
 8003534:	08016d24 	.word	0x08016d24
 8003538:	08016d2c 	.word	0x08016d2c
 800353c:	20000af4 	.word	0x20000af4
 8003540:	08016d38 	.word	0x08016d38
 8003544:	08016d40 	.word	0x08016d40
 8003548:	08016d4c 	.word	0x08016d4c
 800354c:	08016d58 	.word	0x08016d58
 8003550:	08016d64 	.word	0x08016d64
 8003554:	08016d74 	.word	0x08016d74
 8003558:	08016d90 	.word	0x08016d90
 800355c:	08016da0 	.word	0x08016da0
 8003560:	08016dbc 	.word	0x08016dbc
 8003564:	08016dcc 	.word	0x08016dcc
 8003568:	08016ddc 	.word	0x08016ddc
 800356c:	08016dec 	.word	0x08016dec
 8003570:	08016dfc 	.word	0x08016dfc
 8003574:	08016e0c 	.word	0x08016e0c
 8003578:	08016e1c 	.word	0x08016e1c
 800357c:	08016e28 	.word	0x08016e28

08003580 <float_to_integer>:

// CORDIC
int32_t float_to_integer(float in, int scaling_factor, uint8_t bits){
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	ed87 0a03 	vstr	s0, [r7, #12]
 800358a:	60b8      	str	r0, [r7, #8]
 800358c:	460b      	mov	r3, r1
 800358e:	71fb      	strb	r3, [r7, #7]

	int32_t acc;
	if(bits == 32){
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	2b20      	cmp	r3, #32
 8003594:	d135      	bne.n	8003602 <float_to_integer+0x82>
	if(in <= 1){
 8003596:	edd7 7a03 	vldr	s15, [r7, #12]
 800359a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800359e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a6:	d811      	bhi.n	80035cc <float_to_integer+0x4c>
		 acc = (uint32_t)(in*scaling_factor*2147483648);
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	ee07 3a90 	vmov	s15, r3
 80035ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80035b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ba:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003684 <float_to_integer+0x104>
 80035be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035c6:	ee17 3a90 	vmov	r3, s15
 80035ca:	617b      	str	r3, [r7, #20]
	}

	if(in > 1){
 80035cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80035d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80035d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035dc:	dd11      	ble.n	8003602 <float_to_integer+0x82>
		 acc = (uint32_t)((in/scaling_factor)*2147483648);
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	ee07 3a90 	vmov	s15, r3
 80035e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035e8:	edd7 6a03 	vldr	s13, [r7, #12]
 80035ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f0:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8003684 <float_to_integer+0x104>
 80035f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035fc:	ee17 3a90 	vmov	r3, s15
 8003600:	617b      	str	r3, [r7, #20]
		}
}
	if(bits == 16){
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	2b10      	cmp	r3, #16
 8003606:	d135      	bne.n	8003674 <float_to_integer+0xf4>
		if(in <= 1){
 8003608:	edd7 7a03 	vldr	s15, [r7, #12]
 800360c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003610:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003618:	d811      	bhi.n	800363e <float_to_integer+0xbe>
			 acc = (uint32_t)(in*scaling_factor*32767);
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	ee07 3a90 	vmov	s15, r3
 8003620:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003624:	edd7 7a03 	vldr	s15, [r7, #12]
 8003628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800362c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003688 <float_to_integer+0x108>
 8003630:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003638:	ee17 3a90 	vmov	r3, s15
 800363c:	617b      	str	r3, [r7, #20]
		}

		if(in > 1){
 800363e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003642:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800364a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364e:	dd11      	ble.n	8003674 <float_to_integer+0xf4>
			 acc = (uint32_t)((in/scaling_factor)*32767);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	ee07 3a90 	vmov	s15, r3
 8003656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800365a:	edd7 6a03 	vldr	s13, [r7, #12]
 800365e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003662:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003688 <float_to_integer+0x108>
 8003666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800366a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800366e:	ee17 3a90 	vmov	r3, s15
 8003672:	617b      	str	r3, [r7, #20]
			}
	}


	return acc;
 8003674:	697b      	ldr	r3, [r7, #20]
}
 8003676:	4618      	mov	r0, r3
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	4f000000 	.word	0x4f000000
 8003688:	46fffe00 	.word	0x46fffe00

0800368c <integer_to_float>:

float integer_to_float(int32_t result_cordic_integer, int squarted_scaling_factor, int8_t mode, uint8_t bits){
 800368c:	b480      	push	{r7}
 800368e:	b087      	sub	sp, #28
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	4611      	mov	r1, r2
 8003698:	461a      	mov	r2, r3
 800369a:	460b      	mov	r3, r1
 800369c:	71fb      	strb	r3, [r7, #7]
 800369e:	4613      	mov	r3, r2
 80036a0:	71bb      	strb	r3, [r7, #6]
	float acc;

	if(bits == 32){
 80036a2:	79bb      	ldrb	r3, [r7, #6]
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d12b      	bne.n	8003700 <integer_to_float+0x74>
		// mode = 1 when float_to_integer() in is  <= 1
		if(mode){
 80036a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d011      	beq.n	80036d4 <integer_to_float+0x48>
			acc = (float)((result_cordic_integer/2147483648.0f)/squarted_scaling_factor);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ba:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003774 <integer_to_float+0xe8>
 80036be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036d0:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		// mode = 0 when float_to_integer() in is > 1
		if(!mode){
 80036d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d111      	bne.n	8003700 <integer_to_float+0x74>
			acc = (float)((result_cordic_integer/2147483648.0f)*squarted_scaling_factor);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	ee07 3a90 	vmov	s15, r3
 80036e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036e6:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8003774 <integer_to_float+0xe8>
 80036ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fc:	edc7 7a05 	vstr	s15, [r7, #20]
		}
	}

	if(bits == 16){
 8003700:	79bb      	ldrb	r3, [r7, #6]
 8003702:	2b10      	cmp	r3, #16
 8003704:	d12b      	bne.n	800375e <integer_to_float+0xd2>
		// mode = 1 when float_to_integer() in is  <= 1
		if(mode){
 8003706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d011      	beq.n	8003732 <integer_to_float+0xa6>
			acc = (float)((result_cordic_integer/32767.0f)/squarted_scaling_factor);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003718:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003778 <integer_to_float+0xec>
 800371c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	ee07 3a90 	vmov	s15, r3
 8003726:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800372a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800372e:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		// mode = 0 when float_to_integer() in is > 1
		if(!mode){
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d111      	bne.n	800375e <integer_to_float+0xd2>
			acc = (float)((result_cordic_integer/32767.0f)*squarted_scaling_factor);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	ee07 3a90 	vmov	s15, r3
 8003740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003744:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003778 <integer_to_float+0xec>
 8003748:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800375a:	edc7 7a05 	vstr	s15, [r7, #20]
		}
	}

	return acc;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	ee07 3a90 	vmov	s15, r3

}
 8003764:	eeb0 0a67 	vmov.f32	s0, s15
 8003768:	371c      	adds	r7, #28
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	4f000000 	.word	0x4f000000
 8003778:	46fffe00 	.word	0x46fffe00

0800377c <approx_acos2>:
    // Example coefficients – you would need to adjust these for your range and precision.
    float a0 = 1.5708f;  // ~pi/2
    float a1 = -1.5700f;
    return a0 + a1 * x;
}
static inline float approx_acos2(float x) {
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	ed87 0a01 	vstr	s0, [r7, #4]
    // Example coefficients – you would need to adjust these for your range and precision.
	if (x < -1.0f) x = -1.0f;
 8003786:	edd7 7a01 	vldr	s15, [r7, #4]
 800378a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800378e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003796:	d502      	bpl.n	800379e <approx_acos2+0x22>
 8003798:	4b1a      	ldr	r3, [pc, #104]	@ (8003804 <approx_acos2+0x88>)
 800379a:	607b      	str	r3, [r7, #4]
 800379c:	e00b      	b.n	80037b6 <approx_acos2+0x3a>
	    else if (x > 1.0f) x = 1.0f;
 800379e:	edd7 7a01 	vldr	s15, [r7, #4]
 80037a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80037a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ae:	dd02      	ble.n	80037b6 <approx_acos2+0x3a>
 80037b0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80037b4:	607b      	str	r3, [r7, #4]
	    float sqrt_val = sqrtf(1.0f - x);
 80037b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80037ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80037be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037c2:	eeb0 0a67 	vmov.f32	s0, s15
 80037c6:	f012 facb 	bl	8015d60 <sqrtf>
 80037ca:	ed87 0a03 	vstr	s0, [r7, #12]
	    return sqrt_val * (1.5707963050f + x * (-0.2145988016f + 0.0889789874f * x));
 80037ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80037d2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003808 <approx_acos2+0x8c>
 80037d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037da:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 800380c <approx_acos2+0x90>
 80037de:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80037e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80037e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ea:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003810 <approx_acos2+0x94>
 80037ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80037f6:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80037fa:	eeb0 0a67 	vmov.f32	s0, s15
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	bf800000 	.word	0xbf800000
 8003808:	3db63a9e 	.word	0x3db63a9e
 800380c:	3e5bbfca 	.word	0x3e5bbfca
 8003810:	3fc90fda 	.word	0x3fc90fda

08003814 <DisplayAllVariables>:

	    // Return the corresponding LUT entry.
	    return acos_lut[index - 1];
}

void DisplayAllVariables(void) {
 8003814:	b580      	push	{r7, lr}
 8003816:	b0a0      	sub	sp, #128	@ 0x80
 8003818:	af00      	add	r7, sp, #0
    char buffer[128];

    sprintf(buffer, "KP = %f\n", Kp);
 800381a:	4b5d      	ldr	r3, [pc, #372]	@ (8003990 <DisplayAllVariables+0x17c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4618      	mov	r0, r3
 8003820:	f7fc feba 	bl	8000598 <__aeabi_f2d>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4638      	mov	r0, r7
 800382a:	495a      	ldr	r1, [pc, #360]	@ (8003994 <DisplayAllVariables+0x180>)
 800382c:	f00e f9c2 	bl	8011bb4 <siprintf>
        SendUSBMessage(buffer);
 8003830:	463b      	mov	r3, r7
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fcc0 	bl	80031b8 <SendUSBMessage>

        sprintf(buffer, "Ti = %f\n", Ti);
 8003838:	4b57      	ldr	r3, [pc, #348]	@ (8003998 <DisplayAllVariables+0x184>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7fc feab 	bl	8000598 <__aeabi_f2d>
 8003842:	4602      	mov	r2, r0
 8003844:	460b      	mov	r3, r1
 8003846:	4638      	mov	r0, r7
 8003848:	4954      	ldr	r1, [pc, #336]	@ (800399c <DisplayAllVariables+0x188>)
 800384a:	f00e f9b3 	bl	8011bb4 <siprintf>
        SendUSBMessage(buffer);
 800384e:	463b      	mov	r3, r7
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff fcb1 	bl	80031b8 <SendUSBMessage>

        sprintf(buffer, "vref = %hu\n", vref);
 8003856:	4b52      	ldr	r3, [pc, #328]	@ (80039a0 <DisplayAllVariables+0x18c>)
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	463b      	mov	r3, r7
 800385c:	4951      	ldr	r1, [pc, #324]	@ (80039a4 <DisplayAllVariables+0x190>)
 800385e:	4618      	mov	r0, r3
 8003860:	f00e f9a8 	bl	8011bb4 <siprintf>
        SendUSBMessage(buffer);
 8003864:	463b      	mov	r3, r7
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff fca6 	bl	80031b8 <SendUSBMessage>

        sprintf(buffer, "imax1 = %f\n", imax1);
 800386c:	4b4e      	ldr	r3, [pc, #312]	@ (80039a8 <DisplayAllVariables+0x194>)
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	463b      	mov	r3, r7
 8003872:	494e      	ldr	r1, [pc, #312]	@ (80039ac <DisplayAllVariables+0x198>)
 8003874:	4618      	mov	r0, r3
 8003876:	f00e f99d 	bl	8011bb4 <siprintf>
        SendUSBMessage(buffer);
 800387a:	463b      	mov	r3, r7
 800387c:	4618      	mov	r0, r3
 800387e:	f7ff fc9b 	bl	80031b8 <SendUSBMessage>

        sprintf(buffer, "imax2 = %f\n", imax2);
 8003882:	4b4b      	ldr	r3, [pc, #300]	@ (80039b0 <DisplayAllVariables+0x19c>)
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	463b      	mov	r3, r7
 8003888:	494a      	ldr	r1, [pc, #296]	@ (80039b4 <DisplayAllVariables+0x1a0>)
 800388a:	4618      	mov	r0, r3
 800388c:	f00e f992 	bl	8011bb4 <siprintf>
        SendUSBMessage(buffer);
 8003890:	463b      	mov	r3, r7
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fc90 	bl	80031b8 <SendUSBMessage>

        sprintf(buffer, "imin = %f\n", imin);
 8003898:	4b47      	ldr	r3, [pc, #284]	@ (80039b8 <DisplayAllVariables+0x1a4>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	463b      	mov	r3, r7
 800389e:	4947      	ldr	r1, [pc, #284]	@ (80039bc <DisplayAllVariables+0x1a8>)
 80038a0:	4618      	mov	r0, r3
 80038a2:	f00e f987 	bl	8011bb4 <siprintf>
        SendUSBMessage(buffer);
 80038a6:	463b      	mov	r3, r7
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fc85 	bl	80031b8 <SendUSBMessage>

        sprintf(buffer, "input_voltage = %f\n", input_voltage);
 80038ae:	4b44      	ldr	r3, [pc, #272]	@ (80039c0 <DisplayAllVariables+0x1ac>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	463b      	mov	r3, r7
 80038b4:	4943      	ldr	r1, [pc, #268]	@ (80039c4 <DisplayAllVariables+0x1b0>)
 80038b6:	4618      	mov	r0, r3
 80038b8:	f00e f97c 	bl	8011bb4 <siprintf>
        SendUSBMessage(buffer);
 80038bc:	463b      	mov	r3, r7
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff fc7a 	bl	80031b8 <SendUSBMessage>

        sprintf(buffer, "output_voltage = %f\n", output_voltage);
 80038c4:	4b40      	ldr	r3, [pc, #256]	@ (80039c8 <DisplayAllVariables+0x1b4>)
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	463b      	mov	r3, r7
 80038ca:	4940      	ldr	r1, [pc, #256]	@ (80039cc <DisplayAllVariables+0x1b8>)
 80038cc:	4618      	mov	r0, r3
 80038ce:	f00e f971 	bl	8011bb4 <siprintf>
        SendUSBMessage(buffer);
 80038d2:	463b      	mov	r3, r7
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fc6f 	bl	80031b8 <SendUSBMessage>

        sprintf(buffer, "pcb_temp = %f\n", pcb_temp);
 80038da:	4b3d      	ldr	r3, [pc, #244]	@ (80039d0 <DisplayAllVariables+0x1bc>)
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	463b      	mov	r3, r7
 80038e0:	493c      	ldr	r1, [pc, #240]	@ (80039d4 <DisplayAllVariables+0x1c0>)
 80038e2:	4618      	mov	r0, r3
 80038e4:	f00e f966 	bl	8011bb4 <siprintf>
        SendUSBMessage(buffer);
 80038e8:	463b      	mov	r3, r7
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7ff fc64 	bl	80031b8 <SendUSBMessage>

        sprintf(buffer, "heat_sink_temp = %f\n", heat_sink_temp);
 80038f0:	4b39      	ldr	r3, [pc, #228]	@ (80039d8 <DisplayAllVariables+0x1c4>)
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	463b      	mov	r3, r7
 80038f6:	4939      	ldr	r1, [pc, #228]	@ (80039dc <DisplayAllVariables+0x1c8>)
 80038f8:	4618      	mov	r0, r3
 80038fa:	f00e f95b 	bl	8011bb4 <siprintf>
        SendUSBMessage(buffer);
 80038fe:	463b      	mov	r3, r7
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff fc59 	bl	80031b8 <SendUSBMessage>

        sprintf(buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 8003906:	4b36      	ldr	r3, [pc, #216]	@ (80039e0 <DisplayAllVariables+0x1cc>)
 8003908:	881b      	ldrh	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	463b      	mov	r3, r7
 800390e:	4935      	ldr	r1, [pc, #212]	@ (80039e4 <DisplayAllVariables+0x1d0>)
 8003910:	4618      	mov	r0, r3
 8003912:	f00e f94f 	bl	8011bb4 <siprintf>
        SendUSBMessage(buffer);
 8003916:	463b      	mov	r3, r7
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fc4d 	bl	80031b8 <SendUSBMessage>

        sprintf(buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 800391e:	4b32      	ldr	r3, [pc, #200]	@ (80039e8 <DisplayAllVariables+0x1d4>)
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	463b      	mov	r3, r7
 8003926:	4931      	ldr	r1, [pc, #196]	@ (80039ec <DisplayAllVariables+0x1d8>)
 8003928:	4618      	mov	r0, r3
 800392a:	f00e f943 	bl	8011bb4 <siprintf>
        SendUSBMessage(buffer);
 800392e:	463b      	mov	r3, r7
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff fc41 	bl	80031b8 <SendUSBMessage>

        sprintf(buffer, "imax2_sum = %f\n", imax2_sum);
 8003936:	4b2e      	ldr	r3, [pc, #184]	@ (80039f0 <DisplayAllVariables+0x1dc>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	463b      	mov	r3, r7
 800393c:	492d      	ldr	r1, [pc, #180]	@ (80039f4 <DisplayAllVariables+0x1e0>)
 800393e:	4618      	mov	r0, r3
 8003940:	f00e f938 	bl	8011bb4 <siprintf>
        SendUSBMessage(buffer);
 8003944:	463b      	mov	r3, r7
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff fc36 	bl	80031b8 <SendUSBMessage>

        sprintf(buffer, "delay_tr = %f\n", delay_tr);
 800394c:	4b2a      	ldr	r3, [pc, #168]	@ (80039f8 <DisplayAllVariables+0x1e4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4618      	mov	r0, r3
 8003952:	f7fc fe21 	bl	8000598 <__aeabi_f2d>
 8003956:	4602      	mov	r2, r0
 8003958:	460b      	mov	r3, r1
 800395a:	4638      	mov	r0, r7
 800395c:	4927      	ldr	r1, [pc, #156]	@ (80039fc <DisplayAllVariables+0x1e8>)
 800395e:	f00e f929 	bl	8011bb4 <siprintf>
        SendUSBMessage(buffer);
 8003962:	463b      	mov	r3, r7
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff fc27 	bl	80031b8 <SendUSBMessage>

        sprintf(buffer, "delay_hc = %f\n", delay_hc);
 800396a:	4b25      	ldr	r3, [pc, #148]	@ (8003a00 <DisplayAllVariables+0x1ec>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fc fe12 	bl	8000598 <__aeabi_f2d>
 8003974:	4602      	mov	r2, r0
 8003976:	460b      	mov	r3, r1
 8003978:	4638      	mov	r0, r7
 800397a:	4922      	ldr	r1, [pc, #136]	@ (8003a04 <DisplayAllVariables+0x1f0>)
 800397c:	f00e f91a 	bl	8011bb4 <siprintf>
        SendUSBMessage(buffer);
 8003980:	463b      	mov	r3, r7
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff fc18 	bl	80031b8 <SendUSBMessage>
}
 8003988:	bf00      	nop
 800398a:	3780      	adds	r7, #128	@ 0x80
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20000018 	.word	0x20000018
 8003994:	08016d2c 	.word	0x08016d2c
 8003998:	2000001c 	.word	0x2000001c
 800399c:	08016d40 	.word	0x08016d40
 80039a0:	20000000 	.word	0x20000000
 80039a4:	08016d58 	.word	0x08016d58
 80039a8:	20000a58 	.word	0x20000a58
 80039ac:	08016e3c 	.word	0x08016e3c
 80039b0:	20000a5c 	.word	0x20000a5c
 80039b4:	08016e48 	.word	0x08016e48
 80039b8:	20000a60 	.word	0x20000a60
 80039bc:	08016e54 	.word	0x08016e54
 80039c0:	20000a64 	.word	0x20000a64
 80039c4:	08016e60 	.word	0x08016e60
 80039c8:	20000a7c 	.word	0x20000a7c
 80039cc:	08016e74 	.word	0x08016e74
 80039d0:	20000a68 	.word	0x20000a68
 80039d4:	08016e8c 	.word	0x08016e8c
 80039d8:	20000a6c 	.word	0x20000a6c
 80039dc:	08016e9c 	.word	0x08016e9c
 80039e0:	20000a54 	.word	0x20000a54
 80039e4:	08016d74 	.word	0x08016d74
 80039e8:	20000a56 	.word	0x20000a56
 80039ec:	08016da0 	.word	0x08016da0
 80039f0:	20000a98 	.word	0x20000a98
 80039f4:	08016dcc 	.word	0x08016dcc
 80039f8:	20000004 	.word	0x20000004
 80039fc:	08016dec 	.word	0x08016dec
 8003a00:	20000008 	.word	0x20000008
 8003a04:	08016e0c 	.word	0x08016e0c

08003a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a0c:	b672      	cpsid	i
}
 8003a0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a10:	bf00      	nop
 8003a12:	e7fd      	b.n	8003a10 <Error_Handler+0x8>

08003a14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a58 <HAL_MspInit+0x44>)
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8003a58 <HAL_MspInit+0x44>)
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a26:	4b0c      	ldr	r3, [pc, #48]	@ (8003a58 <HAL_MspInit+0x44>)
 8003a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a32:	4b09      	ldr	r3, [pc, #36]	@ (8003a58 <HAL_MspInit+0x44>)
 8003a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a36:	4a08      	ldr	r2, [pc, #32]	@ (8003a58 <HAL_MspInit+0x44>)
 8003a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a3e:	4b06      	ldr	r3, [pc, #24]	@ (8003a58 <HAL_MspInit+0x44>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003a4a:	f005 fa23 	bl	8008e94 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	40021000 	.word	0x40021000

08003a5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b0a4      	sub	sp, #144	@ 0x90
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a78:	2254      	movs	r2, #84	@ 0x54
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f00e f928 	bl	8011cd2 <memset>
  if(hadc->Instance==ADC1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a8a:	d11c      	bne.n	8003ac6 <HAL_ADC_MspInit+0x6a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003a8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a90:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003a92:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003a96:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f005 ff37 	bl	8009910 <HAL_RCCEx_PeriphCLKConfig>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003aa8:	f7ff ffae 	bl	8003a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003aac:	4b86      	ldr	r3, [pc, #536]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab0:	4a85      	ldr	r2, [pc, #532]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003ab2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ab8:	4b83      	ldr	r3, [pc, #524]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8003ac4:	e185      	b.n	8003dd2 <HAL_ADC_MspInit+0x376>
  else if(hadc->Instance==ADC3)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a80      	ldr	r2, [pc, #512]	@ (8003ccc <HAL_ADC_MspInit+0x270>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	f040 8087 	bne.w	8003be0 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003ad2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003ad8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003adc:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ade:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f005 ff14 	bl	8009910 <HAL_RCCEx_PeriphCLKConfig>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_ADC_MspInit+0x96>
      Error_Handler();
 8003aee:	f7ff ff8b 	bl	8003a08 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003af2:	4b77      	ldr	r3, [pc, #476]	@ (8003cd0 <HAL_ADC_MspInit+0x274>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3301      	adds	r3, #1
 8003af8:	4a75      	ldr	r2, [pc, #468]	@ (8003cd0 <HAL_ADC_MspInit+0x274>)
 8003afa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003afc:	4b74      	ldr	r3, [pc, #464]	@ (8003cd0 <HAL_ADC_MspInit+0x274>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d10b      	bne.n	8003b1c <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003b04:	4b70      	ldr	r3, [pc, #448]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b08:	4a6f      	ldr	r2, [pc, #444]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003b0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b10:	4b6d      	ldr	r3, [pc, #436]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b18:	623b      	str	r3, [r7, #32]
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b1c:	4b6a      	ldr	r3, [pc, #424]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b20:	4a69      	ldr	r2, [pc, #420]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b28:	4b67      	ldr	r3, [pc, #412]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b34:	4b64      	ldr	r3, [pc, #400]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b38:	4a63      	ldr	r2, [pc, #396]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003b3a:	f043 0310 	orr.w	r3, r3, #16
 8003b3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b40:	4b61      	ldr	r3, [pc, #388]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	61bb      	str	r3, [r7, #24]
 8003b4a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS_VREF_1_Pin|HEATSINK_TEMP_Pin;
 8003b4c:	f242 0302 	movw	r3, #8194	@ 0x2002
 8003b50:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b52:	2303      	movs	r3, #3
 8003b54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b5e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003b62:	4619      	mov	r1, r3
 8003b64:	485b      	ldr	r0, [pc, #364]	@ (8003cd4 <HAL_ADC_MspInit+0x278>)
 8003b66:	f003 f9ef 	bl	8006f48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PCB_TEMP_Pin|CS_VREF_2_Pin|INPUT_V_ADC_Pin;
 8003b6a:	f44f 530a 	mov.w	r3, #8832	@ 0x2280
 8003b6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b70:	2303      	movs	r3, #3
 8003b72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b7c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003b80:	4619      	mov	r1, r3
 8003b82:	4855      	ldr	r0, [pc, #340]	@ (8003cd8 <HAL_ADC_MspInit+0x27c>)
 8003b84:	f003 f9e0 	bl	8006f48 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel1;
 8003b88:	4b54      	ldr	r3, [pc, #336]	@ (8003cdc <HAL_ADC_MspInit+0x280>)
 8003b8a:	4a55      	ldr	r2, [pc, #340]	@ (8003ce0 <HAL_ADC_MspInit+0x284>)
 8003b8c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003b8e:	4b53      	ldr	r3, [pc, #332]	@ (8003cdc <HAL_ADC_MspInit+0x280>)
 8003b90:	2225      	movs	r2, #37	@ 0x25
 8003b92:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b94:	4b51      	ldr	r3, [pc, #324]	@ (8003cdc <HAL_ADC_MspInit+0x280>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b9a:	4b50      	ldr	r3, [pc, #320]	@ (8003cdc <HAL_ADC_MspInit+0x280>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003ba0:	4b4e      	ldr	r3, [pc, #312]	@ (8003cdc <HAL_ADC_MspInit+0x280>)
 8003ba2:	2280      	movs	r2, #128	@ 0x80
 8003ba4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ba6:	4b4d      	ldr	r3, [pc, #308]	@ (8003cdc <HAL_ADC_MspInit+0x280>)
 8003ba8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bac:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003bae:	4b4b      	ldr	r3, [pc, #300]	@ (8003cdc <HAL_ADC_MspInit+0x280>)
 8003bb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bb4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003bb6:	4b49      	ldr	r3, [pc, #292]	@ (8003cdc <HAL_ADC_MspInit+0x280>)
 8003bb8:	2220      	movs	r2, #32
 8003bba:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003bbc:	4b47      	ldr	r3, [pc, #284]	@ (8003cdc <HAL_ADC_MspInit+0x280>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003bc2:	4846      	ldr	r0, [pc, #280]	@ (8003cdc <HAL_ADC_MspInit+0x280>)
 8003bc4:	f002 ff4e 	bl	8006a64 <HAL_DMA_Init>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_ADC_MspInit+0x176>
      Error_Handler();
 8003bce:	f7ff ff1b 	bl	8003a08 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a41      	ldr	r2, [pc, #260]	@ (8003cdc <HAL_ADC_MspInit+0x280>)
 8003bd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bd8:	4a40      	ldr	r2, [pc, #256]	@ (8003cdc <HAL_ADC_MspInit+0x280>)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003bde:	e0f8      	b.n	8003dd2 <HAL_ADC_MspInit+0x376>
  else if(hadc->Instance==ADC4)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a3f      	ldr	r2, [pc, #252]	@ (8003ce4 <HAL_ADC_MspInit+0x288>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	f040 8082 	bne.w	8003cf0 <HAL_ADC_MspInit+0x294>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003bec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003bf2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003bf6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bf8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f005 fe87 	bl	8009910 <HAL_RCCEx_PeriphCLKConfig>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8003c08:	f7ff fefe 	bl	8003a08 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003c0c:	4b30      	ldr	r3, [pc, #192]	@ (8003cd0 <HAL_ADC_MspInit+0x274>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3301      	adds	r3, #1
 8003c12:	4a2f      	ldr	r2, [pc, #188]	@ (8003cd0 <HAL_ADC_MspInit+0x274>)
 8003c14:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003c16:	4b2e      	ldr	r3, [pc, #184]	@ (8003cd0 <HAL_ADC_MspInit+0x274>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d10b      	bne.n	8003c36 <HAL_ADC_MspInit+0x1da>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c22:	4a29      	ldr	r2, [pc, #164]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c2a:	4b27      	ldr	r3, [pc, #156]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c36:	4b24      	ldr	r3, [pc, #144]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c3a:	4a23      	ldr	r2, [pc, #140]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003c3c:	f043 0310 	orr.w	r3, r3, #16
 8003c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c42:	4b21      	ldr	r3, [pc, #132]	@ (8003cc8 <HAL_ADC_MspInit+0x26c>)
 8003c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c46:	f003 0310 	and.w	r3, r3, #16
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT_V_ADC_Pin;
 8003c4e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c52:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c54:	2303      	movs	r3, #3
 8003c56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(OUTPUT_V_ADC_GPIO_Port, &GPIO_InitStruct);
 8003c60:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003c64:	4619      	mov	r1, r3
 8003c66:	481c      	ldr	r0, [pc, #112]	@ (8003cd8 <HAL_ADC_MspInit+0x27c>)
 8003c68:	f003 f96e 	bl	8006f48 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel2;
 8003c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce8 <HAL_ADC_MspInit+0x28c>)
 8003c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003cec <HAL_ADC_MspInit+0x290>)
 8003c70:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8003c72:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce8 <HAL_ADC_MspInit+0x28c>)
 8003c74:	2226      	movs	r2, #38	@ 0x26
 8003c76:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c78:	4b1b      	ldr	r3, [pc, #108]	@ (8003ce8 <HAL_ADC_MspInit+0x28c>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ce8 <HAL_ADC_MspInit+0x28c>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8003c84:	4b18      	ldr	r3, [pc, #96]	@ (8003ce8 <HAL_ADC_MspInit+0x28c>)
 8003c86:	2280      	movs	r2, #128	@ 0x80
 8003c88:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c8a:	4b17      	ldr	r3, [pc, #92]	@ (8003ce8 <HAL_ADC_MspInit+0x28c>)
 8003c8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c90:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c92:	4b15      	ldr	r3, [pc, #84]	@ (8003ce8 <HAL_ADC_MspInit+0x28c>)
 8003c94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c98:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8003c9a:	4b13      	ldr	r3, [pc, #76]	@ (8003ce8 <HAL_ADC_MspInit+0x28c>)
 8003c9c:	2220      	movs	r2, #32
 8003c9e:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003ca0:	4b11      	ldr	r3, [pc, #68]	@ (8003ce8 <HAL_ADC_MspInit+0x28c>)
 8003ca2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003ca6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8003ca8:	480f      	ldr	r0, [pc, #60]	@ (8003ce8 <HAL_ADC_MspInit+0x28c>)
 8003caa:	f002 fedb 	bl	8006a64 <HAL_DMA_Init>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_ADC_MspInit+0x25c>
      Error_Handler();
 8003cb4:	f7ff fea8 	bl	8003a08 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a0b      	ldr	r2, [pc, #44]	@ (8003ce8 <HAL_ADC_MspInit+0x28c>)
 8003cbc:	655a      	str	r2, [r3, #84]	@ 0x54
 8003cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce8 <HAL_ADC_MspInit+0x28c>)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003cc4:	e085      	b.n	8003dd2 <HAL_ADC_MspInit+0x376>
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	50000400 	.word	0x50000400
 8003cd0:	20000bbc 	.word	0x20000bbc
 8003cd4:	48000400 	.word	0x48000400
 8003cd8:	48001000 	.word	0x48001000
 8003cdc:	2000057c 	.word	0x2000057c
 8003ce0:	40020008 	.word	0x40020008
 8003ce4:	50000500 	.word	0x50000500
 8003ce8:	200005dc 	.word	0x200005dc
 8003cec:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC5)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a39      	ldr	r2, [pc, #228]	@ (8003ddc <HAL_ADC_MspInit+0x380>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d16b      	bne.n	8003dd2 <HAL_ADC_MspInit+0x376>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003cfa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003d00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003d04:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f005 fe00 	bl	8009910 <HAL_RCCEx_PeriphCLKConfig>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <HAL_ADC_MspInit+0x2be>
      Error_Handler();
 8003d16:	f7ff fe77 	bl	8003a08 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003d1a:	4b31      	ldr	r3, [pc, #196]	@ (8003de0 <HAL_ADC_MspInit+0x384>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	3301      	adds	r3, #1
 8003d20:	4a2f      	ldr	r2, [pc, #188]	@ (8003de0 <HAL_ADC_MspInit+0x384>)
 8003d22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003d24:	4b2e      	ldr	r3, [pc, #184]	@ (8003de0 <HAL_ADC_MspInit+0x384>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d10b      	bne.n	8003d44 <HAL_ADC_MspInit+0x2e8>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003de4 <HAL_ADC_MspInit+0x388>)
 8003d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d30:	4a2c      	ldr	r2, [pc, #176]	@ (8003de4 <HAL_ADC_MspInit+0x388>)
 8003d32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d38:	4b2a      	ldr	r3, [pc, #168]	@ (8003de4 <HAL_ADC_MspInit+0x388>)
 8003d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d44:	4b27      	ldr	r3, [pc, #156]	@ (8003de4 <HAL_ADC_MspInit+0x388>)
 8003d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d48:	4a26      	ldr	r2, [pc, #152]	@ (8003de4 <HAL_ADC_MspInit+0x388>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d50:	4b24      	ldr	r3, [pc, #144]	@ (8003de4 <HAL_ADC_MspInit+0x388>)
 8003d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMAX2_SUM_Pin;
 8003d5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d60:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d62:	2303      	movs	r3, #3
 8003d64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(IMAX2_SUM_GPIO_Port, &GPIO_InitStruct);
 8003d6e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003d72:	4619      	mov	r1, r3
 8003d74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d78:	f003 f8e6 	bl	8006f48 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel3;
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003de8 <HAL_ADC_MspInit+0x38c>)
 8003d7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dec <HAL_ADC_MspInit+0x390>)
 8003d80:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003d82:	4b19      	ldr	r3, [pc, #100]	@ (8003de8 <HAL_ADC_MspInit+0x38c>)
 8003d84:	2227      	movs	r2, #39	@ 0x27
 8003d86:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d88:	4b17      	ldr	r3, [pc, #92]	@ (8003de8 <HAL_ADC_MspInit+0x38c>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d8e:	4b16      	ldr	r3, [pc, #88]	@ (8003de8 <HAL_ADC_MspInit+0x38c>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003d94:	4b14      	ldr	r3, [pc, #80]	@ (8003de8 <HAL_ADC_MspInit+0x38c>)
 8003d96:	2280      	movs	r2, #128	@ 0x80
 8003d98:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d9a:	4b13      	ldr	r3, [pc, #76]	@ (8003de8 <HAL_ADC_MspInit+0x38c>)
 8003d9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003da0:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003da2:	4b11      	ldr	r3, [pc, #68]	@ (8003de8 <HAL_ADC_MspInit+0x38c>)
 8003da4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003da8:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8003daa:	4b0f      	ldr	r3, [pc, #60]	@ (8003de8 <HAL_ADC_MspInit+0x38c>)
 8003dac:	2220      	movs	r2, #32
 8003dae:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003db0:	4b0d      	ldr	r3, [pc, #52]	@ (8003de8 <HAL_ADC_MspInit+0x38c>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8003db6:	480c      	ldr	r0, [pc, #48]	@ (8003de8 <HAL_ADC_MspInit+0x38c>)
 8003db8:	f002 fe54 	bl	8006a64 <HAL_DMA_Init>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_ADC_MspInit+0x36a>
      Error_Handler();
 8003dc2:	f7ff fe21 	bl	8003a08 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a07      	ldr	r2, [pc, #28]	@ (8003de8 <HAL_ADC_MspInit+0x38c>)
 8003dca:	655a      	str	r2, [r3, #84]	@ 0x54
 8003dcc:	4a06      	ldr	r2, [pc, #24]	@ (8003de8 <HAL_ADC_MspInit+0x38c>)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003dd2:	bf00      	nop
 8003dd4:	3790      	adds	r7, #144	@ 0x90
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	50000600 	.word	0x50000600
 8003de0:	20000bbc 	.word	0x20000bbc
 8003de4:	40021000 	.word	0x40021000
 8003de8:	2000063c 	.word	0x2000063c
 8003dec:	40020030 	.word	0x40020030

08003df0 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8003e28 <HAL_CORDIC_MspInit+0x38>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d10b      	bne.n	8003e1a <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003e02:	4b0a      	ldr	r3, [pc, #40]	@ (8003e2c <HAL_CORDIC_MspInit+0x3c>)
 8003e04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e06:	4a09      	ldr	r2, [pc, #36]	@ (8003e2c <HAL_CORDIC_MspInit+0x3c>)
 8003e08:	f043 0308 	orr.w	r3, r3, #8
 8003e0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8003e0e:	4b07      	ldr	r3, [pc, #28]	@ (8003e2c <HAL_CORDIC_MspInit+0x3c>)
 8003e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8003e1a:	bf00      	nop
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40020c00 	.word	0x40020c00
 8003e2c:	40021000 	.word	0x40021000

08003e30 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08c      	sub	sp, #48	@ 0x30
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e38:	f107 031c 	add.w	r3, r7, #28
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	609a      	str	r2, [r3, #8]
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a5b      	ldr	r2, [pc, #364]	@ (8003fbc <HAL_DAC_MspInit+0x18c>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d159      	bne.n	8003f06 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003e52:	4b5b      	ldr	r3, [pc, #364]	@ (8003fc0 <HAL_DAC_MspInit+0x190>)
 8003e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e56:	4a5a      	ldr	r2, [pc, #360]	@ (8003fc0 <HAL_DAC_MspInit+0x190>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e5e:	4b58      	ldr	r3, [pc, #352]	@ (8003fc0 <HAL_DAC_MspInit+0x190>)
 8003e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e66:	61bb      	str	r3, [r7, #24]
 8003e68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e6a:	4b55      	ldr	r3, [pc, #340]	@ (8003fc0 <HAL_DAC_MspInit+0x190>)
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6e:	4a54      	ldr	r2, [pc, #336]	@ (8003fc0 <HAL_DAC_MspInit+0x190>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e76:	4b52      	ldr	r3, [pc, #328]	@ (8003fc0 <HAL_DAC_MspInit+0x190>)
 8003e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = IMAX_Pin|IMAX2_Pin;
 8003e82:	2330      	movs	r3, #48	@ 0x30
 8003e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e86:	2303      	movs	r3, #3
 8003e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e8e:	f107 031c 	add.w	r3, r7, #28
 8003e92:	4619      	mov	r1, r3
 8003e94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e98:	f003 f856 	bl	8006f48 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 8003e9c:	4b49      	ldr	r3, [pc, #292]	@ (8003fc4 <HAL_DAC_MspInit+0x194>)
 8003e9e:	4a4a      	ldr	r2, [pc, #296]	@ (8003fc8 <HAL_DAC_MspInit+0x198>)
 8003ea0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003ea2:	4b48      	ldr	r3, [pc, #288]	@ (8003fc4 <HAL_DAC_MspInit+0x194>)
 8003ea4:	2206      	movs	r2, #6
 8003ea6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ea8:	4b46      	ldr	r3, [pc, #280]	@ (8003fc4 <HAL_DAC_MspInit+0x194>)
 8003eaa:	2210      	movs	r2, #16
 8003eac:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003eae:	4b45      	ldr	r3, [pc, #276]	@ (8003fc4 <HAL_DAC_MspInit+0x194>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003eb4:	4b43      	ldr	r3, [pc, #268]	@ (8003fc4 <HAL_DAC_MspInit+0x194>)
 8003eb6:	2280      	movs	r2, #128	@ 0x80
 8003eb8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003eba:	4b42      	ldr	r3, [pc, #264]	@ (8003fc4 <HAL_DAC_MspInit+0x194>)
 8003ebc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ec0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003ec2:	4b40      	ldr	r3, [pc, #256]	@ (8003fc4 <HAL_DAC_MspInit+0x194>)
 8003ec4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ec8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003eca:	4b3e      	ldr	r3, [pc, #248]	@ (8003fc4 <HAL_DAC_MspInit+0x194>)
 8003ecc:	2220      	movs	r2, #32
 8003ece:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003ed0:	4b3c      	ldr	r3, [pc, #240]	@ (8003fc4 <HAL_DAC_MspInit+0x194>)
 8003ed2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003ed6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003ed8:	483a      	ldr	r0, [pc, #232]	@ (8003fc4 <HAL_DAC_MspInit+0x194>)
 8003eda:	f002 fdc3 	bl	8006a64 <HAL_DMA_Init>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d001      	beq.n	8003ee8 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8003ee4:	f7ff fd90 	bl	8003a08 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a36      	ldr	r2, [pc, #216]	@ (8003fc4 <HAL_DAC_MspInit+0x194>)
 8003eec:	609a      	str	r2, [r3, #8]
 8003eee:	4a35      	ldr	r2, [pc, #212]	@ (8003fc4 <HAL_DAC_MspInit+0x194>)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	2036      	movs	r0, #54	@ 0x36
 8003efa:	f002 faa0 	bl	800643e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003efe:	2036      	movs	r0, #54	@ 0x36
 8003f00:	f002 fab7 	bl	8006472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8003f04:	e055      	b.n	8003fb2 <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC2)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a30      	ldr	r2, [pc, #192]	@ (8003fcc <HAL_DAC_MspInit+0x19c>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d150      	bne.n	8003fb2 <HAL_DAC_MspInit+0x182>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003f10:	4b2b      	ldr	r3, [pc, #172]	@ (8003fc0 <HAL_DAC_MspInit+0x190>)
 8003f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f14:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc0 <HAL_DAC_MspInit+0x190>)
 8003f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f1c:	4b28      	ldr	r3, [pc, #160]	@ (8003fc0 <HAL_DAC_MspInit+0x190>)
 8003f1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f24:	613b      	str	r3, [r7, #16]
 8003f26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f28:	4b25      	ldr	r3, [pc, #148]	@ (8003fc0 <HAL_DAC_MspInit+0x190>)
 8003f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2c:	4a24      	ldr	r2, [pc, #144]	@ (8003fc0 <HAL_DAC_MspInit+0x190>)
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f34:	4b22      	ldr	r3, [pc, #136]	@ (8003fc0 <HAL_DAC_MspInit+0x190>)
 8003f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMIN_Pin;
 8003f40:	2340      	movs	r3, #64	@ 0x40
 8003f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f44:	2303      	movs	r3, #3
 8003f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMIN_GPIO_Port, &GPIO_InitStruct);
 8003f4c:	f107 031c 	add.w	r3, r7, #28
 8003f50:	4619      	mov	r1, r3
 8003f52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f56:	f002 fff7 	bl	8006f48 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel5;
 8003f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd0 <HAL_DAC_MspInit+0x1a0>)
 8003f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8003fd4 <HAL_DAC_MspInit+0x1a4>)
 8003f5e:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8003f60:	4b1b      	ldr	r3, [pc, #108]	@ (8003fd0 <HAL_DAC_MspInit+0x1a0>)
 8003f62:	2229      	movs	r2, #41	@ 0x29
 8003f64:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f66:	4b1a      	ldr	r3, [pc, #104]	@ (8003fd0 <HAL_DAC_MspInit+0x1a0>)
 8003f68:	2210      	movs	r2, #16
 8003f6a:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f6c:	4b18      	ldr	r3, [pc, #96]	@ (8003fd0 <HAL_DAC_MspInit+0x1a0>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003f72:	4b17      	ldr	r3, [pc, #92]	@ (8003fd0 <HAL_DAC_MspInit+0x1a0>)
 8003f74:	2280      	movs	r2, #128	@ 0x80
 8003f76:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f78:	4b15      	ldr	r3, [pc, #84]	@ (8003fd0 <HAL_DAC_MspInit+0x1a0>)
 8003f7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f7e:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f80:	4b13      	ldr	r3, [pc, #76]	@ (8003fd0 <HAL_DAC_MspInit+0x1a0>)
 8003f82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f86:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8003f88:	4b11      	ldr	r3, [pc, #68]	@ (8003fd0 <HAL_DAC_MspInit+0x1a0>)
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003f8e:	4b10      	ldr	r3, [pc, #64]	@ (8003fd0 <HAL_DAC_MspInit+0x1a0>)
 8003f90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8003f96:	480e      	ldr	r0, [pc, #56]	@ (8003fd0 <HAL_DAC_MspInit+0x1a0>)
 8003f98:	f002 fd64 	bl	8006a64 <HAL_DMA_Init>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_DAC_MspInit+0x176>
      Error_Handler();
 8003fa2:	f7ff fd31 	bl	8003a08 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a09      	ldr	r2, [pc, #36]	@ (8003fd0 <HAL_DAC_MspInit+0x1a0>)
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	4a08      	ldr	r2, [pc, #32]	@ (8003fd0 <HAL_DAC_MspInit+0x1a0>)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003fb2:	bf00      	nop
 8003fb4:	3730      	adds	r7, #48	@ 0x30
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	50000800 	.word	0x50000800
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	200006ec 	.word	0x200006ec
 8003fc8:	40020044 	.word	0x40020044
 8003fcc:	50000c00 	.word	0x50000c00
 8003fd0:	2000074c 	.word	0x2000074c
 8003fd4:	40020058 	.word	0x40020058

08003fd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a16      	ldr	r2, [pc, #88]	@ (8004040 <HAL_TIM_PWM_MspInit+0x68>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d114      	bne.n	8004014 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003fea:	4b16      	ldr	r3, [pc, #88]	@ (8004044 <HAL_TIM_PWM_MspInit+0x6c>)
 8003fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fee:	4a15      	ldr	r2, [pc, #84]	@ (8004044 <HAL_TIM_PWM_MspInit+0x6c>)
 8003ff0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003ff4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ff6:	4b13      	ldr	r3, [pc, #76]	@ (8004044 <HAL_TIM_PWM_MspInit+0x6c>)
 8003ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ffa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ffe:	60fb      	str	r3, [r7, #12]
 8004000:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004002:	2200      	movs	r2, #0
 8004004:	2100      	movs	r1, #0
 8004006:	2018      	movs	r0, #24
 8004008:	f002 fa19 	bl	800643e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800400c:	2018      	movs	r0, #24
 800400e:	f002 fa30 	bl	8006472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004012:	e010      	b.n	8004036 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a0b      	ldr	r2, [pc, #44]	@ (8004048 <HAL_TIM_PWM_MspInit+0x70>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d10b      	bne.n	8004036 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800401e:	4b09      	ldr	r3, [pc, #36]	@ (8004044 <HAL_TIM_PWM_MspInit+0x6c>)
 8004020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004022:	4a08      	ldr	r2, [pc, #32]	@ (8004044 <HAL_TIM_PWM_MspInit+0x6c>)
 8004024:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004028:	6613      	str	r3, [r2, #96]	@ 0x60
 800402a:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <HAL_TIM_PWM_MspInit+0x6c>)
 800402c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004032:	60bb      	str	r3, [r7, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]
}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40012c00 	.word	0x40012c00
 8004044:	40021000 	.word	0x40021000
 8004048:	40013400 	.word	0x40013400

0800404c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b088      	sub	sp, #32
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a35      	ldr	r2, [pc, #212]	@ (8004130 <HAL_TIM_Base_MspInit+0xe4>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d10c      	bne.n	8004078 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800405e:	4b35      	ldr	r3, [pc, #212]	@ (8004134 <HAL_TIM_Base_MspInit+0xe8>)
 8004060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004062:	4a34      	ldr	r2, [pc, #208]	@ (8004134 <HAL_TIM_Base_MspInit+0xe8>)
 8004064:	f043 0304 	orr.w	r3, r3, #4
 8004068:	6593      	str	r3, [r2, #88]	@ 0x58
 800406a:	4b32      	ldr	r3, [pc, #200]	@ (8004134 <HAL_TIM_Base_MspInit+0xe8>)
 800406c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	61fb      	str	r3, [r7, #28]
 8004074:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004076:	e056      	b.n	8004126 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2e      	ldr	r2, [pc, #184]	@ (8004138 <HAL_TIM_Base_MspInit+0xec>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d114      	bne.n	80040ac <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004082:	4b2c      	ldr	r3, [pc, #176]	@ (8004134 <HAL_TIM_Base_MspInit+0xe8>)
 8004084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004086:	4a2b      	ldr	r2, [pc, #172]	@ (8004134 <HAL_TIM_Base_MspInit+0xe8>)
 8004088:	f043 0310 	orr.w	r3, r3, #16
 800408c:	6593      	str	r3, [r2, #88]	@ 0x58
 800408e:	4b29      	ldr	r3, [pc, #164]	@ (8004134 <HAL_TIM_Base_MspInit+0xe8>)
 8004090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800409a:	2200      	movs	r2, #0
 800409c:	2100      	movs	r1, #0
 800409e:	2036      	movs	r0, #54	@ 0x36
 80040a0:	f002 f9cd 	bl	800643e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80040a4:	2036      	movs	r0, #54	@ 0x36
 80040a6:	f002 f9e4 	bl	8006472 <HAL_NVIC_EnableIRQ>
}
 80040aa:	e03c      	b.n	8004126 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM7)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a22      	ldr	r2, [pc, #136]	@ (800413c <HAL_TIM_Base_MspInit+0xf0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d10c      	bne.n	80040d0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80040b6:	4b1f      	ldr	r3, [pc, #124]	@ (8004134 <HAL_TIM_Base_MspInit+0xe8>)
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004134 <HAL_TIM_Base_MspInit+0xe8>)
 80040bc:	f043 0320 	orr.w	r3, r3, #32
 80040c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80040c2:	4b1c      	ldr	r3, [pc, #112]	@ (8004134 <HAL_TIM_Base_MspInit+0xe8>)
 80040c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c6:	f003 0320 	and.w	r3, r3, #32
 80040ca:	617b      	str	r3, [r7, #20]
 80040cc:	697b      	ldr	r3, [r7, #20]
}
 80040ce:	e02a      	b.n	8004126 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM15)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004140 <HAL_TIM_Base_MspInit+0xf4>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d114      	bne.n	8004104 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80040da:	4b16      	ldr	r3, [pc, #88]	@ (8004134 <HAL_TIM_Base_MspInit+0xe8>)
 80040dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040de:	4a15      	ldr	r2, [pc, #84]	@ (8004134 <HAL_TIM_Base_MspInit+0xe8>)
 80040e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80040e6:	4b13      	ldr	r3, [pc, #76]	@ (8004134 <HAL_TIM_Base_MspInit+0xe8>)
 80040e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80040f2:	2200      	movs	r2, #0
 80040f4:	2100      	movs	r1, #0
 80040f6:	2018      	movs	r0, #24
 80040f8:	f002 f9a1 	bl	800643e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80040fc:	2018      	movs	r0, #24
 80040fe:	f002 f9b8 	bl	8006472 <HAL_NVIC_EnableIRQ>
}
 8004102:	e010      	b.n	8004126 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM16)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a0e      	ldr	r2, [pc, #56]	@ (8004144 <HAL_TIM_Base_MspInit+0xf8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d10b      	bne.n	8004126 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800410e:	4b09      	ldr	r3, [pc, #36]	@ (8004134 <HAL_TIM_Base_MspInit+0xe8>)
 8004110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004112:	4a08      	ldr	r2, [pc, #32]	@ (8004134 <HAL_TIM_Base_MspInit+0xe8>)
 8004114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004118:	6613      	str	r3, [r2, #96]	@ 0x60
 800411a:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <HAL_TIM_Base_MspInit+0xe8>)
 800411c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800411e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004122:	60fb      	str	r3, [r7, #12]
 8004124:	68fb      	ldr	r3, [r7, #12]
}
 8004126:	bf00      	nop
 8004128:	3720      	adds	r7, #32
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40000800 	.word	0x40000800
 8004134:	40021000 	.word	0x40021000
 8004138:	40001000 	.word	0x40001000
 800413c:	40001400 	.word	0x40001400
 8004140:	40014000 	.word	0x40014000
 8004144:	40014400 	.word	0x40014400

08004148 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b08a      	sub	sp, #40	@ 0x28
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004150:	f107 0314 	add.w	r3, r7, #20
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	605a      	str	r2, [r3, #4]
 800415a:	609a      	str	r2, [r3, #8]
 800415c:	60da      	str	r2, [r3, #12]
 800415e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a33      	ldr	r2, [pc, #204]	@ (8004234 <HAL_TIM_MspPostInit+0xec>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d11c      	bne.n	80041a4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800416a:	4b33      	ldr	r3, [pc, #204]	@ (8004238 <HAL_TIM_MspPostInit+0xf0>)
 800416c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800416e:	4a32      	ldr	r2, [pc, #200]	@ (8004238 <HAL_TIM_MspPostInit+0xf0>)
 8004170:	f043 0304 	orr.w	r3, r3, #4
 8004174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004176:	4b30      	ldr	r3, [pc, #192]	@ (8004238 <HAL_TIM_MspPostInit+0xf0>)
 8004178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	613b      	str	r3, [r7, #16]
 8004180:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DEADTIME_TR_Pin;
 8004182:	2301      	movs	r3, #1
 8004184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004186:	2302      	movs	r3, #2
 8004188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800418e:	2302      	movs	r3, #2
 8004190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004192:	2302      	movs	r3, #2
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_TR_GPIO_Port, &GPIO_InitStruct);
 8004196:	f107 0314 	add.w	r3, r7, #20
 800419a:	4619      	mov	r1, r3
 800419c:	4827      	ldr	r0, [pc, #156]	@ (800423c <HAL_TIM_MspPostInit+0xf4>)
 800419e:	f002 fed3 	bl	8006f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80041a2:	e043      	b.n	800422c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a25      	ldr	r2, [pc, #148]	@ (8004240 <HAL_TIM_MspPostInit+0xf8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d11d      	bne.n	80041ea <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041ae:	4b22      	ldr	r3, [pc, #136]	@ (8004238 <HAL_TIM_MspPostInit+0xf0>)
 80041b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041b2:	4a21      	ldr	r2, [pc, #132]	@ (8004238 <HAL_TIM_MspPostInit+0xf0>)
 80041b4:	f043 0308 	orr.w	r3, r3, #8
 80041b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004238 <HAL_TIM_MspPostInit+0xf0>)
 80041bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041be:	f003 0308 	and.w	r3, r3, #8
 80041c2:	60fb      	str	r3, [r7, #12]
 80041c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 80041c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041cc:	2302      	movs	r3, #2
 80041ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041d4:	2300      	movs	r3, #0
 80041d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80041d8:	2302      	movs	r3, #2
 80041da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 80041dc:	f107 0314 	add.w	r3, r7, #20
 80041e0:	4619      	mov	r1, r3
 80041e2:	4818      	ldr	r0, [pc, #96]	@ (8004244 <HAL_TIM_MspPostInit+0xfc>)
 80041e4:	f002 feb0 	bl	8006f48 <HAL_GPIO_Init>
}
 80041e8:	e020      	b.n	800422c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a16      	ldr	r2, [pc, #88]	@ (8004248 <HAL_TIM_MspPostInit+0x100>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d11b      	bne.n	800422c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041f4:	4b10      	ldr	r3, [pc, #64]	@ (8004238 <HAL_TIM_MspPostInit+0xf0>)
 80041f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f8:	4a0f      	ldr	r2, [pc, #60]	@ (8004238 <HAL_TIM_MspPostInit+0xf0>)
 80041fa:	f043 0304 	orr.w	r3, r3, #4
 80041fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004200:	4b0d      	ldr	r3, [pc, #52]	@ (8004238 <HAL_TIM_MspPostInit+0xf0>)
 8004202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	60bb      	str	r3, [r7, #8]
 800420a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEADTIME_HC_Pin;
 800420c:	2380      	movs	r3, #128	@ 0x80
 800420e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004210:	2302      	movs	r3, #2
 8004212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004214:	2300      	movs	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004218:	2302      	movs	r3, #2
 800421a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800421c:	2304      	movs	r3, #4
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_HC_GPIO_Port, &GPIO_InitStruct);
 8004220:	f107 0314 	add.w	r3, r7, #20
 8004224:	4619      	mov	r1, r3
 8004226:	4805      	ldr	r0, [pc, #20]	@ (800423c <HAL_TIM_MspPostInit+0xf4>)
 8004228:	f002 fe8e 	bl	8006f48 <HAL_GPIO_Init>
}
 800422c:	bf00      	nop
 800422e:	3728      	adds	r7, #40	@ 0x28
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40012c00 	.word	0x40012c00
 8004238:	40021000 	.word	0x40021000
 800423c:	48000800 	.word	0x48000800
 8004240:	40000800 	.word	0x40000800
 8004244:	48000c00 	.word	0x48000c00
 8004248:	40013400 	.word	0x40013400

0800424c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b09e      	sub	sp, #120	@ 0x78
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004254:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	60da      	str	r2, [r3, #12]
 8004262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004264:	f107 0310 	add.w	r3, r7, #16
 8004268:	2254      	movs	r2, #84	@ 0x54
 800426a:	2100      	movs	r1, #0
 800426c:	4618      	mov	r0, r3
 800426e:	f00d fd30 	bl	8011cd2 <memset>
  if(huart->Instance==UART4)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a1f      	ldr	r2, [pc, #124]	@ (80042f4 <HAL_UART_MspInit+0xa8>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d136      	bne.n	80042ea <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800427c:	2308      	movs	r3, #8
 800427e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_HSI;
 8004280:	2380      	movs	r3, #128	@ 0x80
 8004282:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004284:	f107 0310 	add.w	r3, r7, #16
 8004288:	4618      	mov	r0, r3
 800428a:	f005 fb41 	bl	8009910 <HAL_RCCEx_PeriphCLKConfig>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004294:	f7ff fbb8 	bl	8003a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004298:	4b17      	ldr	r3, [pc, #92]	@ (80042f8 <HAL_UART_MspInit+0xac>)
 800429a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429c:	4a16      	ldr	r2, [pc, #88]	@ (80042f8 <HAL_UART_MspInit+0xac>)
 800429e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80042a4:	4b14      	ldr	r3, [pc, #80]	@ (80042f8 <HAL_UART_MspInit+0xac>)
 80042a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042b0:	4b11      	ldr	r3, [pc, #68]	@ (80042f8 <HAL_UART_MspInit+0xac>)
 80042b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042b4:	4a10      	ldr	r2, [pc, #64]	@ (80042f8 <HAL_UART_MspInit+0xac>)
 80042b6:	f043 0304 	orr.w	r3, r3, #4
 80042ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042bc:	4b0e      	ldr	r3, [pc, #56]	@ (80042f8 <HAL_UART_MspInit+0xac>)
 80042be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	60bb      	str	r3, [r7, #8]
 80042c6:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80042c8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80042cc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ce:	2302      	movs	r3, #2
 80042d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d2:	2300      	movs	r3, #0
 80042d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d6:	2300      	movs	r3, #0
 80042d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80042da:	2305      	movs	r3, #5
 80042dc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042de:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80042e2:	4619      	mov	r1, r3
 80042e4:	4805      	ldr	r0, [pc, #20]	@ (80042fc <HAL_UART_MspInit+0xb0>)
 80042e6:	f002 fe2f 	bl	8006f48 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80042ea:	bf00      	nop
 80042ec:	3778      	adds	r7, #120	@ 0x78
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	bf00      	nop
 80042f4:	40004c00 	.word	0x40004c00
 80042f8:	40021000 	.word	0x40021000
 80042fc:	48000800 	.word	0x48000800

08004300 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004304:	bf00      	nop
 8004306:	e7fd      	b.n	8004304 <NMI_Handler+0x4>

08004308 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800430c:	bf00      	nop
 800430e:	e7fd      	b.n	800430c <HardFault_Handler+0x4>

08004310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004314:	bf00      	nop
 8004316:	e7fd      	b.n	8004314 <MemManage_Handler+0x4>

08004318 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800431c:	bf00      	nop
 800431e:	e7fd      	b.n	800431c <BusFault_Handler+0x4>

08004320 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004320:	b480      	push	{r7}
 8004322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <UsageFault_Handler+0x4>

08004328 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004336:	b480      	push	{r7}
 8004338:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004356:	f000 f9af 	bl	80046b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800435a:	bf00      	nop
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004364:	4802      	ldr	r0, [pc, #8]	@ (8004370 <DMA1_Channel1_IRQHandler+0x10>)
 8004366:	f002 fca0 	bl	8006caa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800436a:	bf00      	nop
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	2000057c 	.word	0x2000057c

08004374 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8004378:	4802      	ldr	r0, [pc, #8]	@ (8004384 <DMA1_Channel2_IRQHandler+0x10>)
 800437a:	f002 fc96 	bl	8006caa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800437e:	bf00      	nop
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	200005dc 	.word	0x200005dc

08004388 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 800438c:	4802      	ldr	r0, [pc, #8]	@ (8004398 <DMA1_Channel3_IRQHandler+0x10>)
 800438e:	f002 fc8c 	bl	8006caa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004392:	bf00      	nop
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	2000063c 	.word	0x2000063c

0800439c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80043a0:	4802      	ldr	r0, [pc, #8]	@ (80043ac <DMA1_Channel4_IRQHandler+0x10>)
 80043a2:	f002 fc82 	bl	8006caa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	200006ec 	.word	0x200006ec

080043b0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80043b4:	4802      	ldr	r0, [pc, #8]	@ (80043c0 <DMA1_Channel5_IRQHandler+0x10>)
 80043b6:	f002 fc78 	bl	8006caa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	2000074c 	.word	0x2000074c

080043c4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80043c8:	4802      	ldr	r0, [pc, #8]	@ (80043d4 <USB_LP_IRQHandler+0x10>)
 80043ca:	f003 f879 	bl	80074c0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80043ce:	bf00      	nop
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	2000209c 	.word	0x2000209c

080043d8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80043dc:	4803      	ldr	r0, [pc, #12]	@ (80043ec <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80043de:	f005 ffbd 	bl	800a35c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80043e2:	4803      	ldr	r0, [pc, #12]	@ (80043f0 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80043e4:	f005 ffba 	bl	800a35c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80043e8:	bf00      	nop
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	200007ac 	.word	0x200007ac
 80043f0:	20000928 	.word	0x20000928

080043f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
					HEAT_SINK_TEMP = (ADC3_DMA_BUFFER[4]/4096)*3.3;//(Low_pass_filter(ADC3_DMA_BUFFER[4], HEAT_SINK_TEMP)/4096)*3.3;
					FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
					}*/

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80043f8:	4803      	ldr	r0, [pc, #12]	@ (8004408 <TIM6_DAC_IRQHandler+0x14>)
 80043fa:	f005 ffaf 	bl	800a35c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80043fe:	4803      	ldr	r0, [pc, #12]	@ (800440c <TIM6_DAC_IRQHandler+0x18>)
 8004400:	f002 f8e0 	bl	80065c4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004404:	bf00      	nop
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20000844 	.word	0x20000844
 800440c:	200006c4 	.word	0x200006c4

08004410 <_getpid>:
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
 8004414:	2301      	movs	r3, #1
 8004416:	4618      	mov	r0, r3
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <_kill>:
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	6039      	str	r1, [r7, #0]
 800442a:	f00d fcb7 	bl	8011d9c <__errno>
 800442e:	4603      	mov	r3, r0
 8004430:	2216      	movs	r2, #22
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	f04f 33ff 	mov.w	r3, #4294967295
 8004438:	4618      	mov	r0, r3
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <_exit>:
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	f04f 31ff 	mov.w	r1, #4294967295
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f7ff ffe7 	bl	8004420 <_kill>
 8004452:	bf00      	nop
 8004454:	e7fd      	b.n	8004452 <_exit+0x12>

08004456 <_read>:
 8004456:	b580      	push	{r7, lr}
 8004458:	b086      	sub	sp, #24
 800445a:	af00      	add	r7, sp, #0
 800445c:	60f8      	str	r0, [r7, #12]
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	e00a      	b.n	800447e <_read+0x28>
 8004468:	f3af 8000 	nop.w
 800446c:	4601      	mov	r1, r0
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	1c5a      	adds	r2, r3, #1
 8004472:	60ba      	str	r2, [r7, #8]
 8004474:	b2ca      	uxtb	r2, r1
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	3301      	adds	r3, #1
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	429a      	cmp	r2, r3
 8004484:	dbf0      	blt.n	8004468 <_read+0x12>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <_write>:
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	e009      	b.n	80044b6 <_write+0x26>
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	60ba      	str	r2, [r7, #8]
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	4618      	mov	r0, r3
 80044ac:	f3af 8000 	nop.w
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	3301      	adds	r3, #1
 80044b4:	617b      	str	r3, [r7, #20]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	dbf1      	blt.n	80044a2 <_write+0x12>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <_close>:
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	f04f 33ff 	mov.w	r3, #4294967295
 80044d4:	4618      	mov	r0, r3
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <_fstat>:
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	2300      	movs	r3, #0
 80044f4:	4618      	mov	r0, r3
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <_isatty>:
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	2301      	movs	r3, #1
 800450a:	4618      	mov	r0, r3
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <_lseek>:
 8004516:	b480      	push	{r7}
 8004518:	b085      	sub	sp, #20
 800451a:	af00      	add	r7, sp, #0
 800451c:	60f8      	str	r0, [r7, #12]
 800451e:	60b9      	str	r1, [r7, #8]
 8004520:	607a      	str	r2, [r7, #4]
 8004522:	2300      	movs	r3, #0
 8004524:	4618      	mov	r0, r3
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <_sbrk>:
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	4a14      	ldr	r2, [pc, #80]	@ (800458c <_sbrk+0x5c>)
 800453a:	4b15      	ldr	r3, [pc, #84]	@ (8004590 <_sbrk+0x60>)
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	4b13      	ldr	r3, [pc, #76]	@ (8004594 <_sbrk+0x64>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d102      	bne.n	8004552 <_sbrk+0x22>
 800454c:	4b11      	ldr	r3, [pc, #68]	@ (8004594 <_sbrk+0x64>)
 800454e:	4a12      	ldr	r2, [pc, #72]	@ (8004598 <_sbrk+0x68>)
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	4b10      	ldr	r3, [pc, #64]	@ (8004594 <_sbrk+0x64>)
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4413      	add	r3, r2
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	429a      	cmp	r2, r3
 800455e:	d207      	bcs.n	8004570 <_sbrk+0x40>
 8004560:	f00d fc1c 	bl	8011d9c <__errno>
 8004564:	4603      	mov	r3, r0
 8004566:	220c      	movs	r2, #12
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	f04f 33ff 	mov.w	r3, #4294967295
 800456e:	e009      	b.n	8004584 <_sbrk+0x54>
 8004570:	4b08      	ldr	r3, [pc, #32]	@ (8004594 <_sbrk+0x64>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	60fb      	str	r3, [r7, #12]
 8004576:	4b07      	ldr	r3, [pc, #28]	@ (8004594 <_sbrk+0x64>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4413      	add	r3, r2
 800457e:	4a05      	ldr	r2, [pc, #20]	@ (8004594 <_sbrk+0x64>)
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4618      	mov	r0, r3
 8004586:	3718      	adds	r7, #24
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20020000 	.word	0x20020000
 8004590:	00000400 	.word	0x00000400
 8004594:	20000bc0 	.word	0x20000bc0
 8004598:	200026e8 	.word	0x200026e8

0800459c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80045a0:	4b06      	ldr	r3, [pc, #24]	@ (80045bc <SystemInit+0x20>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a6:	4a05      	ldr	r2, [pc, #20]	@ (80045bc <SystemInit+0x20>)
 80045a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045b0:	bf00      	nop
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <Reset_Handler>:
 80045c0:	480d      	ldr	r0, [pc, #52]	@ (80045f8 <LoopForever+0x2>)
 80045c2:	4685      	mov	sp, r0
 80045c4:	f7ff ffea 	bl	800459c <SystemInit>
 80045c8:	480c      	ldr	r0, [pc, #48]	@ (80045fc <LoopForever+0x6>)
 80045ca:	490d      	ldr	r1, [pc, #52]	@ (8004600 <LoopForever+0xa>)
 80045cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004604 <LoopForever+0xe>)
 80045ce:	2300      	movs	r3, #0
 80045d0:	e002      	b.n	80045d8 <LoopCopyDataInit>

080045d2 <CopyDataInit>:
 80045d2:	58d4      	ldr	r4, [r2, r3]
 80045d4:	50c4      	str	r4, [r0, r3]
 80045d6:	3304      	adds	r3, #4

080045d8 <LoopCopyDataInit>:
 80045d8:	18c4      	adds	r4, r0, r3
 80045da:	428c      	cmp	r4, r1
 80045dc:	d3f9      	bcc.n	80045d2 <CopyDataInit>
 80045de:	4a0a      	ldr	r2, [pc, #40]	@ (8004608 <LoopForever+0x12>)
 80045e0:	4c0a      	ldr	r4, [pc, #40]	@ (800460c <LoopForever+0x16>)
 80045e2:	2300      	movs	r3, #0
 80045e4:	e001      	b.n	80045ea <LoopFillZerobss>

080045e6 <FillZerobss>:
 80045e6:	6013      	str	r3, [r2, #0]
 80045e8:	3204      	adds	r2, #4

080045ea <LoopFillZerobss>:
 80045ea:	42a2      	cmp	r2, r4
 80045ec:	d3fb      	bcc.n	80045e6 <FillZerobss>
 80045ee:	f00d fbdb 	bl	8011da8 <__libc_init_array>
 80045f2:	f7fc fd21 	bl	8001038 <main>

080045f6 <LoopForever>:
 80045f6:	e7fe      	b.n	80045f6 <LoopForever>
 80045f8:	20020000 	.word	0x20020000
 80045fc:	20000000 	.word	0x20000000
 8004600:	200003b0 	.word	0x200003b0
 8004604:	080173d8 	.word	0x080173d8
 8004608:	200003b0 	.word	0x200003b0
 800460c:	200026e4 	.word	0x200026e4

08004610 <ADC1_2_IRQHandler>:
 8004610:	e7fe      	b.n	8004610 <ADC1_2_IRQHandler>

08004612 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b082      	sub	sp, #8
 8004616:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800461c:	2003      	movs	r0, #3
 800461e:	f001 ff03 	bl	8006428 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004622:	2000      	movs	r0, #0
 8004624:	f000 f80e 	bl	8004644 <HAL_InitTick>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	71fb      	strb	r3, [r7, #7]
 8004632:	e001      	b.n	8004638 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004634:	f7ff f9ee 	bl	8003a14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004638:	79fb      	ldrb	r3, [r7, #7]

}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800464c:	2300      	movs	r3, #0
 800464e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004650:	4b16      	ldr	r3, [pc, #88]	@ (80046ac <HAL_InitTick+0x68>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d022      	beq.n	800469e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004658:	4b15      	ldr	r3, [pc, #84]	@ (80046b0 <HAL_InitTick+0x6c>)
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	4b13      	ldr	r3, [pc, #76]	@ (80046ac <HAL_InitTick+0x68>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004664:	fbb1 f3f3 	udiv	r3, r1, r3
 8004668:	fbb2 f3f3 	udiv	r3, r2, r3
 800466c:	4618      	mov	r0, r3
 800466e:	f001 ff0e 	bl	800648e <HAL_SYSTICK_Config>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10f      	bne.n	8004698 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b0f      	cmp	r3, #15
 800467c:	d809      	bhi.n	8004692 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800467e:	2200      	movs	r2, #0
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	f04f 30ff 	mov.w	r0, #4294967295
 8004686:	f001 feda 	bl	800643e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800468a:	4a0a      	ldr	r2, [pc, #40]	@ (80046b4 <HAL_InitTick+0x70>)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6013      	str	r3, [r2, #0]
 8004690:	e007      	b.n	80046a2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	73fb      	strb	r3, [r7, #15]
 8004696:	e004      	b.n	80046a2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
 800469c:	e001      	b.n	80046a2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	2000005c 	.word	0x2000005c
 80046b0:	20000054 	.word	0x20000054
 80046b4:	20000058 	.word	0x20000058

080046b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046bc:	4b05      	ldr	r3, [pc, #20]	@ (80046d4 <HAL_IncTick+0x1c>)
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	4b05      	ldr	r3, [pc, #20]	@ (80046d8 <HAL_IncTick+0x20>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4413      	add	r3, r2
 80046c6:	4a03      	ldr	r2, [pc, #12]	@ (80046d4 <HAL_IncTick+0x1c>)
 80046c8:	6013      	str	r3, [r2, #0]
}
 80046ca:	bf00      	nop
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	20000bc4 	.word	0x20000bc4
 80046d8:	2000005c 	.word	0x2000005c

080046dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  return uwTick;
 80046e0:	4b03      	ldr	r3, [pc, #12]	@ (80046f0 <HAL_GetTick+0x14>)
 80046e2:	681b      	ldr	r3, [r3, #0]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20000bc4 	.word	0x20000bc4

080046f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80046fc:	f7ff ffee 	bl	80046dc <HAL_GetTick>
 8004700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d004      	beq.n	8004718 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800470e:	4b09      	ldr	r3, [pc, #36]	@ (8004734 <HAL_Delay+0x40>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004718:	bf00      	nop
 800471a:	f7ff ffdf 	bl	80046dc <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	429a      	cmp	r2, r3
 8004728:	d8f7      	bhi.n	800471a <HAL_Delay+0x26>
  {
  }
}
 800472a:	bf00      	nop
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	2000005c 	.word	0x2000005c

08004738 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	609a      	str	r2, [r3, #8]
}
 8004752:	bf00      	nop
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr

0800475e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800475e:	b480      	push	{r7}
 8004760:	b083      	sub	sp, #12
 8004762:	af00      	add	r7, sp, #0
 8004764:	6078      	str	r0, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	609a      	str	r2, [r3, #8]
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004794:	4618      	mov	r0, r3
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	3360      	adds	r3, #96	@ 0x60
 80047b2:	461a      	mov	r2, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4413      	add	r3, r2
 80047ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b08      	ldr	r3, [pc, #32]	@ (80047e4 <LL_ADC_SetOffset+0x44>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	4313      	orrs	r3, r2
 80047d0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80047d8:	bf00      	nop
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr
 80047e4:	03fff000 	.word	0x03fff000

080047e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b085      	sub	sp, #20
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3360      	adds	r3, #96	@ 0x60
 80047f6:	461a      	mov	r2, r3
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004808:	4618      	mov	r0, r3
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3360      	adds	r3, #96	@ 0x60
 8004824:	461a      	mov	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	431a      	orrs	r2, r3
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800483e:	bf00      	nop
 8004840:	371c      	adds	r7, #28
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800484a:	b480      	push	{r7}
 800484c:	b087      	sub	sp, #28
 800484e:	af00      	add	r7, sp, #0
 8004850:	60f8      	str	r0, [r7, #12]
 8004852:	60b9      	str	r1, [r7, #8]
 8004854:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3360      	adds	r3, #96	@ 0x60
 800485a:	461a      	mov	r2, r3
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4413      	add	r3, r2
 8004862:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	431a      	orrs	r2, r3
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004874:	bf00      	nop
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	3360      	adds	r3, #96	@ 0x60
 8004890:	461a      	mov	r2, r3
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	431a      	orrs	r2, r3
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80048aa:	bf00      	nop
 80048ac:	371c      	adds	r7, #28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	615a      	str	r2, [r3, #20]
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d101      	bne.n	80048f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004902:	b480      	push	{r7}
 8004904:	b087      	sub	sp, #28
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3330      	adds	r3, #48	@ 0x30
 8004912:	461a      	mov	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	f003 030c 	and.w	r3, r3, #12
 800491e:	4413      	add	r3, r2
 8004920:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f003 031f 	and.w	r3, r3, #31
 800492c:	211f      	movs	r1, #31
 800492e:	fa01 f303 	lsl.w	r3, r1, r3
 8004932:	43db      	mvns	r3, r3
 8004934:	401a      	ands	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0e9b      	lsrs	r3, r3, #26
 800493a:	f003 011f 	and.w	r1, r3, #31
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	fa01 f303 	lsl.w	r3, r1, r3
 8004948:	431a      	orrs	r2, r3
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800494e:	bf00      	nop
 8004950:	371c      	adds	r7, #28
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800495a:	b480      	push	{r7}
 800495c:	b087      	sub	sp, #28
 800495e:	af00      	add	r7, sp, #0
 8004960:	60f8      	str	r0, [r7, #12]
 8004962:	60b9      	str	r1, [r7, #8]
 8004964:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	3314      	adds	r3, #20
 800496a:	461a      	mov	r2, r3
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	0e5b      	lsrs	r3, r3, #25
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	f003 0304 	and.w	r3, r3, #4
 8004976:	4413      	add	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	0d1b      	lsrs	r3, r3, #20
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	2107      	movs	r1, #7
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	401a      	ands	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	0d1b      	lsrs	r3, r3, #20
 8004994:	f003 031f 	and.w	r3, r3, #31
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	fa01 f303 	lsl.w	r3, r1, r3
 800499e:	431a      	orrs	r2, r3
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80049a4:	bf00      	nop
 80049a6:	371c      	adds	r7, #28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c8:	43db      	mvns	r3, r3
 80049ca:	401a      	ands	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f003 0318 	and.w	r3, r3, #24
 80049d2:	4908      	ldr	r1, [pc, #32]	@ (80049f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80049d4:	40d9      	lsrs	r1, r3
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	400b      	ands	r3, r1
 80049da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049de:	431a      	orrs	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80049e6:	bf00      	nop
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	0007ffff 	.word	0x0007ffff

080049f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 031f 	and.w	r3, r3, #31
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004a24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	6093      	str	r3, [r2, #8]
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a4c:	d101      	bne.n	8004a52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004a70:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a74:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a9c:	d101      	bne.n	8004aa2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ac0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ac4:	f043 0201 	orr.w	r2, r3, #1
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004ae8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004aec:	f043 0202 	orr.w	r2, r3, #2
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d101      	bne.n	8004b18 <LL_ADC_IsEnabled+0x18>
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <LL_ADC_IsEnabled+0x1a>
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	370c      	adds	r7, #12
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d101      	bne.n	8004b3e <LL_ADC_IsDisableOngoing+0x18>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e000      	b.n	8004b40 <LL_ADC_IsDisableOngoing+0x1a>
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b60:	f043 0204 	orr.w	r2, r3, #4
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0304 	and.w	r3, r3, #4
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d101      	bne.n	8004b8c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	370c      	adds	r7, #12
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b083      	sub	sp, #12
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b08      	cmp	r3, #8
 8004bac:	d101      	bne.n	8004bb2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004bb2:	2300      	movs	r3, #0
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004bc0:	b590      	push	{r4, r7, lr}
 8004bc2:	b089      	sub	sp, #36	@ 0x24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d101      	bne.n	8004bda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e1a9      	b.n	8004f2e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d109      	bne.n	8004bfc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fe ff37 	bl	8003a5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff ff19 	bl	8004a38 <LL_ADC_IsDeepPowerDownEnabled>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d004      	beq.n	8004c16 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff feff 	bl	8004a14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff ff34 	bl	8004a88 <LL_ADC_IsInternalRegulatorEnabled>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d115      	bne.n	8004c52 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff ff18 	bl	8004a60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c30:	4b9c      	ldr	r3, [pc, #624]	@ (8004ea4 <HAL_ADC_Init+0x2e4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	099b      	lsrs	r3, r3, #6
 8004c36:	4a9c      	ldr	r2, [pc, #624]	@ (8004ea8 <HAL_ADC_Init+0x2e8>)
 8004c38:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3c:	099b      	lsrs	r3, r3, #6
 8004c3e:	3301      	adds	r3, #1
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004c44:	e002      	b.n	8004c4c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f9      	bne.n	8004c46 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff ff16 	bl	8004a88 <LL_ADC_IsInternalRegulatorEnabled>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10d      	bne.n	8004c7e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c66:	f043 0210 	orr.w	r2, r3, #16
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c72:	f043 0201 	orr.w	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7ff ff76 	bl	8004b74 <LL_ADC_REG_IsConversionOngoing>
 8004c88:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c8e:	f003 0310 	and.w	r3, r3, #16
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f040 8142 	bne.w	8004f1c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f040 813e 	bne.w	8004f1c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004ca8:	f043 0202 	orr.w	r2, r3, #2
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff ff23 	bl	8004b00 <LL_ADC_IsEnabled>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d141      	bne.n	8004d44 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004cc8:	d004      	beq.n	8004cd4 <HAL_ADC_Init+0x114>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a77      	ldr	r2, [pc, #476]	@ (8004eac <HAL_ADC_Init+0x2ec>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d10f      	bne.n	8004cf4 <HAL_ADC_Init+0x134>
 8004cd4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004cd8:	f7ff ff12 	bl	8004b00 <LL_ADC_IsEnabled>
 8004cdc:	4604      	mov	r4, r0
 8004cde:	4873      	ldr	r0, [pc, #460]	@ (8004eac <HAL_ADC_Init+0x2ec>)
 8004ce0:	f7ff ff0e 	bl	8004b00 <LL_ADC_IsEnabled>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	4323      	orrs	r3, r4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf0c      	ite	eq
 8004cec:	2301      	moveq	r3, #1
 8004cee:	2300      	movne	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	e012      	b.n	8004d1a <HAL_ADC_Init+0x15a>
 8004cf4:	486e      	ldr	r0, [pc, #440]	@ (8004eb0 <HAL_ADC_Init+0x2f0>)
 8004cf6:	f7ff ff03 	bl	8004b00 <LL_ADC_IsEnabled>
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	486d      	ldr	r0, [pc, #436]	@ (8004eb4 <HAL_ADC_Init+0x2f4>)
 8004cfe:	f7ff feff 	bl	8004b00 <LL_ADC_IsEnabled>
 8004d02:	4603      	mov	r3, r0
 8004d04:	431c      	orrs	r4, r3
 8004d06:	486c      	ldr	r0, [pc, #432]	@ (8004eb8 <HAL_ADC_Init+0x2f8>)
 8004d08:	f7ff fefa 	bl	8004b00 <LL_ADC_IsEnabled>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4323      	orrs	r3, r4
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bf0c      	ite	eq
 8004d14:	2301      	moveq	r3, #1
 8004d16:	2300      	movne	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d012      	beq.n	8004d44 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d26:	d004      	beq.n	8004d32 <HAL_ADC_Init+0x172>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a5f      	ldr	r2, [pc, #380]	@ (8004eac <HAL_ADC_Init+0x2ec>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d101      	bne.n	8004d36 <HAL_ADC_Init+0x176>
 8004d32:	4a62      	ldr	r2, [pc, #392]	@ (8004ebc <HAL_ADC_Init+0x2fc>)
 8004d34:	e000      	b.n	8004d38 <HAL_ADC_Init+0x178>
 8004d36:	4a62      	ldr	r2, [pc, #392]	@ (8004ec0 <HAL_ADC_Init+0x300>)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f7ff fcfa 	bl	8004738 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	7f5b      	ldrb	r3, [r3, #29]
 8004d48:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d4e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004d54:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004d5a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d62:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d64:	4313      	orrs	r3, r2
 8004d66:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d106      	bne.n	8004d80 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d76:	3b01      	subs	r3, #1
 8004d78:	045b      	lsls	r3, r3, #17
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d009      	beq.n	8004d9c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d94:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	4b48      	ldr	r3, [pc, #288]	@ (8004ec4 <HAL_ADC_Init+0x304>)
 8004da4:	4013      	ands	r3, r2
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	69b9      	ldr	r1, [r7, #24]
 8004dac:	430b      	orrs	r3, r1
 8004dae:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7ff fee5 	bl	8004b9a <LL_ADC_INJ_IsConversionOngoing>
 8004dd0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d17f      	bne.n	8004ed8 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d17c      	bne.n	8004ed8 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004de2:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004dea:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004dec:	4313      	orrs	r3, r2
 8004dee:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dfa:	f023 0302 	bic.w	r3, r3, #2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6812      	ldr	r2, [r2, #0]
 8004e02:	69b9      	ldr	r1, [r7, #24]
 8004e04:	430b      	orrs	r3, r1
 8004e06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d017      	beq.n	8004e40 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004e1e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e28:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004e2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e30:	687a      	ldr	r2, [r7, #4]
 8004e32:	6911      	ldr	r1, [r2, #16]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004e3e:	e013      	b.n	8004e68 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004e4e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6812      	ldr	r2, [r2, #0]
 8004e5c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004e60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e64:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d12a      	bne.n	8004ec8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004e7c:	f023 0304 	bic.w	r3, r3, #4
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e88:	4311      	orrs	r1, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004e8e:	4311      	orrs	r1, r2
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004e94:	430a      	orrs	r2, r1
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	611a      	str	r2, [r3, #16]
 8004ea2:	e019      	b.n	8004ed8 <HAL_ADC_Init+0x318>
 8004ea4:	20000054 	.word	0x20000054
 8004ea8:	053e2d63 	.word	0x053e2d63
 8004eac:	50000100 	.word	0x50000100
 8004eb0:	50000400 	.word	0x50000400
 8004eb4:	50000500 	.word	0x50000500
 8004eb8:	50000600 	.word	0x50000600
 8004ebc:	50000300 	.word	0x50000300
 8004ec0:	50000700 	.word	0x50000700
 8004ec4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0201 	bic.w	r2, r2, #1
 8004ed6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d10c      	bne.n	8004efa <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee6:	f023 010f 	bic.w	r1, r3, #15
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	1e5a      	subs	r2, r3, #1
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ef8:	e007      	b.n	8004f0a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f022 020f 	bic.w	r2, r2, #15
 8004f08:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f0e:	f023 0303 	bic.w	r3, r3, #3
 8004f12:	f043 0201 	orr.w	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f1a:	e007      	b.n	8004f2c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f20:	f043 0210 	orr.w	r2, r3, #16
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3724      	adds	r7, #36	@ 0x24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd90      	pop	{r4, r7, pc}
 8004f36:	bf00      	nop

08004f38 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f4c:	d004      	beq.n	8004f58 <HAL_ADC_Start_DMA+0x20>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a5a      	ldr	r2, [pc, #360]	@ (80050bc <HAL_ADC_Start_DMA+0x184>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d101      	bne.n	8004f5c <HAL_ADC_Start_DMA+0x24>
 8004f58:	4b59      	ldr	r3, [pc, #356]	@ (80050c0 <HAL_ADC_Start_DMA+0x188>)
 8004f5a:	e000      	b.n	8004f5e <HAL_ADC_Start_DMA+0x26>
 8004f5c:	4b59      	ldr	r3, [pc, #356]	@ (80050c4 <HAL_ADC_Start_DMA+0x18c>)
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fd4a 	bl	80049f8 <LL_ADC_GetMultimode>
 8004f64:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7ff fe02 	bl	8004b74 <LL_ADC_REG_IsConversionOngoing>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f040 809b 	bne.w	80050ae <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_ADC_Start_DMA+0x4e>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e096      	b.n	80050b4 <HAL_ADC_Start_DMA+0x17c>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a4d      	ldr	r2, [pc, #308]	@ (80050c8 <HAL_ADC_Start_DMA+0x190>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d008      	beq.n	8004faa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d005      	beq.n	8004faa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b05      	cmp	r3, #5
 8004fa2:	d002      	beq.n	8004faa <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	2b09      	cmp	r3, #9
 8004fa8:	d17a      	bne.n	80050a0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 fcec 	bl	8005988 <ADC_Enable>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d16d      	bne.n	8005096 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fbe:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a3a      	ldr	r2, [pc, #232]	@ (80050bc <HAL_ADC_Start_DMA+0x184>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d009      	beq.n	8004fec <HAL_ADC_Start_DMA+0xb4>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a3b      	ldr	r2, [pc, #236]	@ (80050cc <HAL_ADC_Start_DMA+0x194>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d002      	beq.n	8004fe8 <HAL_ADC_Start_DMA+0xb0>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	e003      	b.n	8004ff0 <HAL_ADC_Start_DMA+0xb8>
 8004fe8:	4b39      	ldr	r3, [pc, #228]	@ (80050d0 <HAL_ADC_Start_DMA+0x198>)
 8004fea:	e001      	b.n	8004ff0 <HAL_ADC_Start_DMA+0xb8>
 8004fec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d002      	beq.n	8004ffe <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d105      	bne.n	800500a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005002:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800500e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d006      	beq.n	8005024 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800501a:	f023 0206 	bic.w	r2, r3, #6
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	661a      	str	r2, [r3, #96]	@ 0x60
 8005022:	e002      	b.n	800502a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800502e:	4a29      	ldr	r2, [pc, #164]	@ (80050d4 <HAL_ADC_Start_DMA+0x19c>)
 8005030:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005036:	4a28      	ldr	r2, [pc, #160]	@ (80050d8 <HAL_ADC_Start_DMA+0x1a0>)
 8005038:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800503e:	4a27      	ldr	r2, [pc, #156]	@ (80050dc <HAL_ADC_Start_DMA+0x1a4>)
 8005040:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	221c      	movs	r2, #28
 8005048:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0210 	orr.w	r2, r2, #16
 8005060:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3340      	adds	r3, #64	@ 0x40
 800507c:	4619      	mov	r1, r3
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f001 fd97 	bl	8006bb4 <HAL_DMA_Start_IT>
 8005086:	4603      	mov	r3, r0
 8005088:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff fd5c 	bl	8004b4c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005094:	e00d      	b.n	80050b2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 800509e:	e008      	b.n	80050b2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80050ac:	e001      	b.n	80050b2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80050ae:	2302      	movs	r3, #2
 80050b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80050b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3718      	adds	r7, #24
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	50000100 	.word	0x50000100
 80050c0:	50000300 	.word	0x50000300
 80050c4:	50000700 	.word	0x50000700
 80050c8:	50000600 	.word	0x50000600
 80050cc:	50000500 	.word	0x50000500
 80050d0:	50000400 	.word	0x50000400
 80050d4:	08005b73 	.word	0x08005b73
 80050d8:	08005c4b 	.word	0x08005c4b
 80050dc:	08005c67 	.word	0x08005c67

080050e0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b0b6      	sub	sp, #216	@ 0xd8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005112:	2300      	movs	r3, #0
 8005114:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005122:	2b01      	cmp	r3, #1
 8005124:	d102      	bne.n	800512c <HAL_ADC_ConfigChannel+0x24>
 8005126:	2302      	movs	r3, #2
 8005128:	f000 bc13 	b.w	8005952 <HAL_ADC_ConfigChannel+0x84a>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4618      	mov	r0, r3
 800513a:	f7ff fd1b 	bl	8004b74 <LL_ADC_REG_IsConversionOngoing>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	f040 83f3 	bne.w	800592c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6818      	ldr	r0, [r3, #0]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	6859      	ldr	r1, [r3, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	f7ff fbd5 	bl	8004902 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4618      	mov	r0, r3
 800515e:	f7ff fd09 	bl	8004b74 <LL_ADC_REG_IsConversionOngoing>
 8005162:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f7ff fd15 	bl	8004b9a <LL_ADC_INJ_IsConversionOngoing>
 8005170:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005174:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005178:	2b00      	cmp	r3, #0
 800517a:	f040 81d9 	bne.w	8005530 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800517e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005182:	2b00      	cmp	r3, #0
 8005184:	f040 81d4 	bne.w	8005530 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005190:	d10f      	bne.n	80051b2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2200      	movs	r2, #0
 800519c:	4619      	mov	r1, r3
 800519e:	f7ff fbdc 	bl	800495a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff fb83 	bl	80048b6 <LL_ADC_SetSamplingTimeCommonConfig>
 80051b0:	e00e      	b.n	80051d0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6819      	ldr	r1, [r3, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	461a      	mov	r2, r3
 80051c0:	f7ff fbcb 	bl	800495a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2100      	movs	r1, #0
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff fb73 	bl	80048b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	695a      	ldr	r2, [r3, #20]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	08db      	lsrs	r3, r3, #3
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d022      	beq.n	8005238 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6818      	ldr	r0, [r3, #0]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6919      	ldr	r1, [r3, #16]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005202:	f7ff facd 	bl	80047a0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6919      	ldr	r1, [r3, #16]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	461a      	mov	r2, r3
 8005214:	f7ff fb19 	bl	800484a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005224:	2b01      	cmp	r3, #1
 8005226:	d102      	bne.n	800522e <HAL_ADC_ConfigChannel+0x126>
 8005228:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800522c:	e000      	b.n	8005230 <HAL_ADC_ConfigChannel+0x128>
 800522e:	2300      	movs	r3, #0
 8005230:	461a      	mov	r2, r3
 8005232:	f7ff fb25 	bl	8004880 <LL_ADC_SetOffsetSaturation>
 8005236:	e17b      	b.n	8005530 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2100      	movs	r1, #0
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff fad2 	bl	80047e8 <LL_ADC_GetOffsetChannel>
 8005244:	4603      	mov	r3, r0
 8005246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10a      	bne.n	8005264 <HAL_ADC_ConfigChannel+0x15c>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2100      	movs	r1, #0
 8005254:	4618      	mov	r0, r3
 8005256:	f7ff fac7 	bl	80047e8 <LL_ADC_GetOffsetChannel>
 800525a:	4603      	mov	r3, r0
 800525c:	0e9b      	lsrs	r3, r3, #26
 800525e:	f003 021f 	and.w	r2, r3, #31
 8005262:	e01e      	b.n	80052a2 <HAL_ADC_ConfigChannel+0x19a>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2100      	movs	r1, #0
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff fabc 	bl	80047e8 <LL_ADC_GetOffsetChannel>
 8005270:	4603      	mov	r3, r0
 8005272:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005276:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800527a:	fa93 f3a3 	rbit	r3, r3
 800527e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005286:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800528a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005292:	2320      	movs	r3, #32
 8005294:	e004      	b.n	80052a0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005296:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800529a:	fab3 f383 	clz	r3, r3
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d105      	bne.n	80052ba <HAL_ADC_ConfigChannel+0x1b2>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	0e9b      	lsrs	r3, r3, #26
 80052b4:	f003 031f 	and.w	r3, r3, #31
 80052b8:	e018      	b.n	80052ec <HAL_ADC_ConfigChannel+0x1e4>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80052c6:	fa93 f3a3 	rbit	r3, r3
 80052ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80052ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80052d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80052d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80052de:	2320      	movs	r3, #32
 80052e0:	e004      	b.n	80052ec <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80052e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80052e6:	fab3 f383 	clz	r3, r3
 80052ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d106      	bne.n	80052fe <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2200      	movs	r2, #0
 80052f6:	2100      	movs	r1, #0
 80052f8:	4618      	mov	r0, r3
 80052fa:	f7ff fa8b 	bl	8004814 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2101      	movs	r1, #1
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff fa6f 	bl	80047e8 <LL_ADC_GetOffsetChannel>
 800530a:	4603      	mov	r3, r0
 800530c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <HAL_ADC_ConfigChannel+0x222>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2101      	movs	r1, #1
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff fa64 	bl	80047e8 <LL_ADC_GetOffsetChannel>
 8005320:	4603      	mov	r3, r0
 8005322:	0e9b      	lsrs	r3, r3, #26
 8005324:	f003 021f 	and.w	r2, r3, #31
 8005328:	e01e      	b.n	8005368 <HAL_ADC_ConfigChannel+0x260>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2101      	movs	r1, #1
 8005330:	4618      	mov	r0, r3
 8005332:	f7ff fa59 	bl	80047e8 <LL_ADC_GetOffsetChannel>
 8005336:	4603      	mov	r3, r0
 8005338:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005340:	fa93 f3a3 	rbit	r3, r3
 8005344:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005348:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800534c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005350:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d101      	bne.n	800535c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005358:	2320      	movs	r3, #32
 800535a:	e004      	b.n	8005366 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800535c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005360:	fab3 f383 	clz	r3, r3
 8005364:	b2db      	uxtb	r3, r3
 8005366:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <HAL_ADC_ConfigChannel+0x278>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	0e9b      	lsrs	r3, r3, #26
 800537a:	f003 031f 	and.w	r3, r3, #31
 800537e:	e018      	b.n	80053b2 <HAL_ADC_ConfigChannel+0x2aa>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005388:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800538c:	fa93 f3a3 	rbit	r3, r3
 8005390:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005394:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005398:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800539c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80053a4:	2320      	movs	r3, #32
 80053a6:	e004      	b.n	80053b2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80053a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053ac:	fab3 f383 	clz	r3, r3
 80053b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d106      	bne.n	80053c4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2200      	movs	r2, #0
 80053bc:	2101      	movs	r1, #1
 80053be:	4618      	mov	r0, r3
 80053c0:	f7ff fa28 	bl	8004814 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2102      	movs	r1, #2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7ff fa0c 	bl	80047e8 <LL_ADC_GetOffsetChannel>
 80053d0:	4603      	mov	r3, r0
 80053d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10a      	bne.n	80053f0 <HAL_ADC_ConfigChannel+0x2e8>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2102      	movs	r1, #2
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7ff fa01 	bl	80047e8 <LL_ADC_GetOffsetChannel>
 80053e6:	4603      	mov	r3, r0
 80053e8:	0e9b      	lsrs	r3, r3, #26
 80053ea:	f003 021f 	and.w	r2, r3, #31
 80053ee:	e01e      	b.n	800542e <HAL_ADC_ConfigChannel+0x326>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2102      	movs	r1, #2
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff f9f6 	bl	80047e8 <LL_ADC_GetOffsetChannel>
 80053fc:	4603      	mov	r3, r0
 80053fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005402:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005406:	fa93 f3a3 	rbit	r3, r3
 800540a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800540e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005412:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005416:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800541e:	2320      	movs	r3, #32
 8005420:	e004      	b.n	800542c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005422:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005426:	fab3 f383 	clz	r3, r3
 800542a:	b2db      	uxtb	r3, r3
 800542c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005436:	2b00      	cmp	r3, #0
 8005438:	d105      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x33e>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	0e9b      	lsrs	r3, r3, #26
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	e016      	b.n	8005474 <HAL_ADC_ConfigChannel+0x36c>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800544e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005452:	fa93 f3a3 	rbit	r3, r3
 8005456:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005458:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800545a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800545e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005462:	2b00      	cmp	r3, #0
 8005464:	d101      	bne.n	800546a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005466:	2320      	movs	r3, #32
 8005468:	e004      	b.n	8005474 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800546a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800546e:	fab3 f383 	clz	r3, r3
 8005472:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005474:	429a      	cmp	r2, r3
 8005476:	d106      	bne.n	8005486 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2200      	movs	r2, #0
 800547e:	2102      	movs	r1, #2
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff f9c7 	bl	8004814 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2103      	movs	r1, #3
 800548c:	4618      	mov	r0, r3
 800548e:	f7ff f9ab 	bl	80047e8 <LL_ADC_GetOffsetChannel>
 8005492:	4603      	mov	r3, r0
 8005494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <HAL_ADC_ConfigChannel+0x3aa>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2103      	movs	r1, #3
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff f9a0 	bl	80047e8 <LL_ADC_GetOffsetChannel>
 80054a8:	4603      	mov	r3, r0
 80054aa:	0e9b      	lsrs	r3, r3, #26
 80054ac:	f003 021f 	and.w	r2, r3, #31
 80054b0:	e017      	b.n	80054e2 <HAL_ADC_ConfigChannel+0x3da>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2103      	movs	r1, #3
 80054b8:	4618      	mov	r0, r3
 80054ba:	f7ff f995 	bl	80047e8 <LL_ADC_GetOffsetChannel>
 80054be:	4603      	mov	r3, r0
 80054c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054c4:	fa93 f3a3 	rbit	r3, r3
 80054c8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80054ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054cc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80054ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80054d4:	2320      	movs	r3, #32
 80054d6:	e003      	b.n	80054e0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80054d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054da:	fab3 f383 	clz	r3, r3
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d105      	bne.n	80054fa <HAL_ADC_ConfigChannel+0x3f2>
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	0e9b      	lsrs	r3, r3, #26
 80054f4:	f003 031f 	and.w	r3, r3, #31
 80054f8:	e011      	b.n	800551e <HAL_ADC_ConfigChannel+0x416>
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005500:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005502:	fa93 f3a3 	rbit	r3, r3
 8005506:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005508:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800550a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800550c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005512:	2320      	movs	r3, #32
 8005514:	e003      	b.n	800551e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005516:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005518:	fab3 f383 	clz	r3, r3
 800551c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800551e:	429a      	cmp	r2, r3
 8005520:	d106      	bne.n	8005530 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2200      	movs	r2, #0
 8005528:	2103      	movs	r1, #3
 800552a:	4618      	mov	r0, r3
 800552c:	f7ff f972 	bl	8004814 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4618      	mov	r0, r3
 8005536:	f7ff fae3 	bl	8004b00 <LL_ADC_IsEnabled>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	f040 813d 	bne.w	80057bc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	6819      	ldr	r1, [r3, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	461a      	mov	r2, r3
 8005550:	f7ff fa2e 	bl	80049b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	4aa2      	ldr	r2, [pc, #648]	@ (80057e4 <HAL_ADC_ConfigChannel+0x6dc>)
 800555a:	4293      	cmp	r3, r2
 800555c:	f040 812e 	bne.w	80057bc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10b      	bne.n	8005588 <HAL_ADC_ConfigChannel+0x480>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	0e9b      	lsrs	r3, r3, #26
 8005576:	3301      	adds	r3, #1
 8005578:	f003 031f 	and.w	r3, r3, #31
 800557c:	2b09      	cmp	r3, #9
 800557e:	bf94      	ite	ls
 8005580:	2301      	movls	r3, #1
 8005582:	2300      	movhi	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	e019      	b.n	80055bc <HAL_ADC_ConfigChannel+0x4b4>
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800558e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005590:	fa93 f3a3 	rbit	r3, r3
 8005594:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005596:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005598:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800559a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80055a0:	2320      	movs	r3, #32
 80055a2:	e003      	b.n	80055ac <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80055a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055a6:	fab3 f383 	clz	r3, r3
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	3301      	adds	r3, #1
 80055ae:	f003 031f 	and.w	r3, r3, #31
 80055b2:	2b09      	cmp	r3, #9
 80055b4:	bf94      	ite	ls
 80055b6:	2301      	movls	r3, #1
 80055b8:	2300      	movhi	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d079      	beq.n	80056b4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d107      	bne.n	80055dc <HAL_ADC_ConfigChannel+0x4d4>
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	0e9b      	lsrs	r3, r3, #26
 80055d2:	3301      	adds	r3, #1
 80055d4:	069b      	lsls	r3, r3, #26
 80055d6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055da:	e015      	b.n	8005608 <HAL_ADC_ConfigChannel+0x500>
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055e4:	fa93 f3a3 	rbit	r3, r3
 80055e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80055ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80055ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80055f4:	2320      	movs	r3, #32
 80055f6:	e003      	b.n	8005600 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80055f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055fa:	fab3 f383 	clz	r3, r3
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	3301      	adds	r3, #1
 8005602:	069b      	lsls	r3, r3, #26
 8005604:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005610:	2b00      	cmp	r3, #0
 8005612:	d109      	bne.n	8005628 <HAL_ADC_ConfigChannel+0x520>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	0e9b      	lsrs	r3, r3, #26
 800561a:	3301      	adds	r3, #1
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	2101      	movs	r1, #1
 8005622:	fa01 f303 	lsl.w	r3, r1, r3
 8005626:	e017      	b.n	8005658 <HAL_ADC_ConfigChannel+0x550>
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005630:	fa93 f3a3 	rbit	r3, r3
 8005634:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005638:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800563a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800563c:	2b00      	cmp	r3, #0
 800563e:	d101      	bne.n	8005644 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005640:	2320      	movs	r3, #32
 8005642:	e003      	b.n	800564c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005646:	fab3 f383 	clz	r3, r3
 800564a:	b2db      	uxtb	r3, r3
 800564c:	3301      	adds	r3, #1
 800564e:	f003 031f 	and.w	r3, r3, #31
 8005652:	2101      	movs	r1, #1
 8005654:	fa01 f303 	lsl.w	r3, r1, r3
 8005658:	ea42 0103 	orr.w	r1, r2, r3
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10a      	bne.n	800567e <HAL_ADC_ConfigChannel+0x576>
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	0e9b      	lsrs	r3, r3, #26
 800566e:	3301      	adds	r3, #1
 8005670:	f003 021f 	and.w	r2, r3, #31
 8005674:	4613      	mov	r3, r2
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	4413      	add	r3, r2
 800567a:	051b      	lsls	r3, r3, #20
 800567c:	e018      	b.n	80056b0 <HAL_ADC_ConfigChannel+0x5a8>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005686:	fa93 f3a3 	rbit	r3, r3
 800568a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800568c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8005696:	2320      	movs	r3, #32
 8005698:	e003      	b.n	80056a2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800569a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800569c:	fab3 f383 	clz	r3, r3
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	3301      	adds	r3, #1
 80056a4:	f003 021f 	and.w	r2, r3, #31
 80056a8:	4613      	mov	r3, r2
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	4413      	add	r3, r2
 80056ae:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056b0:	430b      	orrs	r3, r1
 80056b2:	e07e      	b.n	80057b2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d107      	bne.n	80056d0 <HAL_ADC_ConfigChannel+0x5c8>
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	0e9b      	lsrs	r3, r3, #26
 80056c6:	3301      	adds	r3, #1
 80056c8:	069b      	lsls	r3, r3, #26
 80056ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056ce:	e015      	b.n	80056fc <HAL_ADC_ConfigChannel+0x5f4>
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d8:	fa93 f3a3 	rbit	r3, r3
 80056dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80056de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80056e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d101      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80056e8:	2320      	movs	r3, #32
 80056ea:	e003      	b.n	80056f4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80056ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ee:	fab3 f383 	clz	r3, r3
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	3301      	adds	r3, #1
 80056f6:	069b      	lsls	r3, r3, #26
 80056f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005704:	2b00      	cmp	r3, #0
 8005706:	d109      	bne.n	800571c <HAL_ADC_ConfigChannel+0x614>
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	0e9b      	lsrs	r3, r3, #26
 800570e:	3301      	adds	r3, #1
 8005710:	f003 031f 	and.w	r3, r3, #31
 8005714:	2101      	movs	r1, #1
 8005716:	fa01 f303 	lsl.w	r3, r1, r3
 800571a:	e017      	b.n	800574c <HAL_ADC_ConfigChannel+0x644>
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005722:	6a3b      	ldr	r3, [r7, #32]
 8005724:	fa93 f3a3 	rbit	r3, r3
 8005728:	61fb      	str	r3, [r7, #28]
  return result;
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800572e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005730:	2b00      	cmp	r3, #0
 8005732:	d101      	bne.n	8005738 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005734:	2320      	movs	r3, #32
 8005736:	e003      	b.n	8005740 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573a:	fab3 f383 	clz	r3, r3
 800573e:	b2db      	uxtb	r3, r3
 8005740:	3301      	adds	r3, #1
 8005742:	f003 031f 	and.w	r3, r3, #31
 8005746:	2101      	movs	r1, #1
 8005748:	fa01 f303 	lsl.w	r3, r1, r3
 800574c:	ea42 0103 	orr.w	r1, r2, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10d      	bne.n	8005778 <HAL_ADC_ConfigChannel+0x670>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	0e9b      	lsrs	r3, r3, #26
 8005762:	3301      	adds	r3, #1
 8005764:	f003 021f 	and.w	r2, r3, #31
 8005768:	4613      	mov	r3, r2
 800576a:	005b      	lsls	r3, r3, #1
 800576c:	4413      	add	r3, r2
 800576e:	3b1e      	subs	r3, #30
 8005770:	051b      	lsls	r3, r3, #20
 8005772:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005776:	e01b      	b.n	80057b0 <HAL_ADC_ConfigChannel+0x6a8>
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	fa93 f3a3 	rbit	r3, r3
 8005784:	613b      	str	r3, [r7, #16]
  return result;
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005790:	2320      	movs	r3, #32
 8005792:	e003      	b.n	800579c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	fab3 f383 	clz	r3, r3
 800579a:	b2db      	uxtb	r3, r3
 800579c:	3301      	adds	r3, #1
 800579e:	f003 021f 	and.w	r2, r3, #31
 80057a2:	4613      	mov	r3, r2
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	4413      	add	r3, r2
 80057a8:	3b1e      	subs	r3, #30
 80057aa:	051b      	lsls	r3, r3, #20
 80057ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057b0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057b6:	4619      	mov	r1, r3
 80057b8:	f7ff f8cf 	bl	800495a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	4b09      	ldr	r3, [pc, #36]	@ (80057e8 <HAL_ADC_ConfigChannel+0x6e0>)
 80057c2:	4013      	ands	r3, r2
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 80be 	beq.w	8005946 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057d2:	d004      	beq.n	80057de <HAL_ADC_ConfigChannel+0x6d6>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a04      	ldr	r2, [pc, #16]	@ (80057ec <HAL_ADC_ConfigChannel+0x6e4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d10a      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x6ec>
 80057de:	4b04      	ldr	r3, [pc, #16]	@ (80057f0 <HAL_ADC_ConfigChannel+0x6e8>)
 80057e0:	e009      	b.n	80057f6 <HAL_ADC_ConfigChannel+0x6ee>
 80057e2:	bf00      	nop
 80057e4:	407f0000 	.word	0x407f0000
 80057e8:	80080000 	.word	0x80080000
 80057ec:	50000100 	.word	0x50000100
 80057f0:	50000300 	.word	0x50000300
 80057f4:	4b59      	ldr	r3, [pc, #356]	@ (800595c <HAL_ADC_ConfigChannel+0x854>)
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7fe ffc4 	bl	8004784 <LL_ADC_GetCommonPathInternalCh>
 80057fc:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a56      	ldr	r2, [pc, #344]	@ (8005960 <HAL_ADC_ConfigChannel+0x858>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d004      	beq.n	8005814 <HAL_ADC_ConfigChannel+0x70c>
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a55      	ldr	r2, [pc, #340]	@ (8005964 <HAL_ADC_ConfigChannel+0x85c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d13a      	bne.n	800588a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005814:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005818:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d134      	bne.n	800588a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005828:	d005      	beq.n	8005836 <HAL_ADC_ConfigChannel+0x72e>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a4e      	ldr	r2, [pc, #312]	@ (8005968 <HAL_ADC_ConfigChannel+0x860>)
 8005830:	4293      	cmp	r3, r2
 8005832:	f040 8085 	bne.w	8005940 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800583e:	d004      	beq.n	800584a <HAL_ADC_ConfigChannel+0x742>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a49      	ldr	r2, [pc, #292]	@ (800596c <HAL_ADC_ConfigChannel+0x864>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d101      	bne.n	800584e <HAL_ADC_ConfigChannel+0x746>
 800584a:	4a49      	ldr	r2, [pc, #292]	@ (8005970 <HAL_ADC_ConfigChannel+0x868>)
 800584c:	e000      	b.n	8005850 <HAL_ADC_ConfigChannel+0x748>
 800584e:	4a43      	ldr	r2, [pc, #268]	@ (800595c <HAL_ADC_ConfigChannel+0x854>)
 8005850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005854:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005858:	4619      	mov	r1, r3
 800585a:	4610      	mov	r0, r2
 800585c:	f7fe ff7f 	bl	800475e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005860:	4b44      	ldr	r3, [pc, #272]	@ (8005974 <HAL_ADC_ConfigChannel+0x86c>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	099b      	lsrs	r3, r3, #6
 8005866:	4a44      	ldr	r2, [pc, #272]	@ (8005978 <HAL_ADC_ConfigChannel+0x870>)
 8005868:	fba2 2303 	umull	r2, r3, r2, r3
 800586c:	099b      	lsrs	r3, r3, #6
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	4613      	mov	r3, r2
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800587a:	e002      	b.n	8005882 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3b01      	subs	r3, #1
 8005880:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1f9      	bne.n	800587c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005888:	e05a      	b.n	8005940 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a3b      	ldr	r2, [pc, #236]	@ (800597c <HAL_ADC_ConfigChannel+0x874>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d125      	bne.n	80058e0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005894:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005898:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d11f      	bne.n	80058e0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a31      	ldr	r2, [pc, #196]	@ (800596c <HAL_ADC_ConfigChannel+0x864>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d104      	bne.n	80058b4 <HAL_ADC_ConfigChannel+0x7ac>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a34      	ldr	r2, [pc, #208]	@ (8005980 <HAL_ADC_ConfigChannel+0x878>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d047      	beq.n	8005944 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058bc:	d004      	beq.n	80058c8 <HAL_ADC_ConfigChannel+0x7c0>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a2a      	ldr	r2, [pc, #168]	@ (800596c <HAL_ADC_ConfigChannel+0x864>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d101      	bne.n	80058cc <HAL_ADC_ConfigChannel+0x7c4>
 80058c8:	4a29      	ldr	r2, [pc, #164]	@ (8005970 <HAL_ADC_ConfigChannel+0x868>)
 80058ca:	e000      	b.n	80058ce <HAL_ADC_ConfigChannel+0x7c6>
 80058cc:	4a23      	ldr	r2, [pc, #140]	@ (800595c <HAL_ADC_ConfigChannel+0x854>)
 80058ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058d6:	4619      	mov	r1, r3
 80058d8:	4610      	mov	r0, r2
 80058da:	f7fe ff40 	bl	800475e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058de:	e031      	b.n	8005944 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a27      	ldr	r2, [pc, #156]	@ (8005984 <HAL_ADC_ConfigChannel+0x87c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d12d      	bne.n	8005946 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80058ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d127      	bne.n	8005946 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1c      	ldr	r2, [pc, #112]	@ (800596c <HAL_ADC_ConfigChannel+0x864>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d022      	beq.n	8005946 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005908:	d004      	beq.n	8005914 <HAL_ADC_ConfigChannel+0x80c>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a17      	ldr	r2, [pc, #92]	@ (800596c <HAL_ADC_ConfigChannel+0x864>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d101      	bne.n	8005918 <HAL_ADC_ConfigChannel+0x810>
 8005914:	4a16      	ldr	r2, [pc, #88]	@ (8005970 <HAL_ADC_ConfigChannel+0x868>)
 8005916:	e000      	b.n	800591a <HAL_ADC_ConfigChannel+0x812>
 8005918:	4a10      	ldr	r2, [pc, #64]	@ (800595c <HAL_ADC_ConfigChannel+0x854>)
 800591a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800591e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005922:	4619      	mov	r1, r3
 8005924:	4610      	mov	r0, r2
 8005926:	f7fe ff1a 	bl	800475e <LL_ADC_SetCommonPathInternalCh>
 800592a:	e00c      	b.n	8005946 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005930:	f043 0220 	orr.w	r2, r3, #32
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800593e:	e002      	b.n	8005946 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005940:	bf00      	nop
 8005942:	e000      	b.n	8005946 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005944:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800594e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005952:	4618      	mov	r0, r3
 8005954:	37d8      	adds	r7, #216	@ 0xd8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	50000700 	.word	0x50000700
 8005960:	c3210000 	.word	0xc3210000
 8005964:	90c00010 	.word	0x90c00010
 8005968:	50000600 	.word	0x50000600
 800596c:	50000100 	.word	0x50000100
 8005970:	50000300 	.word	0x50000300
 8005974:	20000054 	.word	0x20000054
 8005978:	053e2d63 	.word	0x053e2d63
 800597c:	c7520000 	.word	0xc7520000
 8005980:	50000500 	.word	0x50000500
 8005984:	cb840000 	.word	0xcb840000

08005988 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005990:	2300      	movs	r3, #0
 8005992:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff f8b1 	bl	8004b00 <LL_ADC_IsEnabled>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d176      	bne.n	8005a92 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	4b3c      	ldr	r3, [pc, #240]	@ (8005a9c <ADC_Enable+0x114>)
 80059ac:	4013      	ands	r3, r2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00d      	beq.n	80059ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b6:	f043 0210 	orr.w	r2, r3, #16
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059c2:	f043 0201 	orr.w	r2, r3, #1
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e062      	b.n	8005a94 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff f86c 	bl	8004ab0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059e0:	d004      	beq.n	80059ec <ADC_Enable+0x64>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a2e      	ldr	r2, [pc, #184]	@ (8005aa0 <ADC_Enable+0x118>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d101      	bne.n	80059f0 <ADC_Enable+0x68>
 80059ec:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa4 <ADC_Enable+0x11c>)
 80059ee:	e000      	b.n	80059f2 <ADC_Enable+0x6a>
 80059f0:	4b2d      	ldr	r3, [pc, #180]	@ (8005aa8 <ADC_Enable+0x120>)
 80059f2:	4618      	mov	r0, r3
 80059f4:	f7fe fec6 	bl	8004784 <LL_ADC_GetCommonPathInternalCh>
 80059f8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80059fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d013      	beq.n	8005a2a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a02:	4b2a      	ldr	r3, [pc, #168]	@ (8005aac <ADC_Enable+0x124>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	099b      	lsrs	r3, r3, #6
 8005a08:	4a29      	ldr	r2, [pc, #164]	@ (8005ab0 <ADC_Enable+0x128>)
 8005a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0e:	099b      	lsrs	r3, r3, #6
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	4613      	mov	r3, r2
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a1c:	e002      	b.n	8005a24 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	3b01      	subs	r3, #1
 8005a22:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1f9      	bne.n	8005a1e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005a2a:	f7fe fe57 	bl	80046dc <HAL_GetTick>
 8005a2e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a30:	e028      	b.n	8005a84 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7ff f862 	bl	8004b00 <LL_ADC_IsEnabled>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d104      	bne.n	8005a4c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f7ff f832 	bl	8004ab0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a4c:	f7fe fe46 	bl	80046dc <HAL_GetTick>
 8005a50:	4602      	mov	r2, r0
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	1ad3      	subs	r3, r2, r3
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d914      	bls.n	8005a84 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0301 	and.w	r3, r3, #1
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d00d      	beq.n	8005a84 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a6c:	f043 0210 	orr.w	r2, r3, #16
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a78:	f043 0201 	orr.w	r2, r3, #1
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e007      	b.n	8005a94 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f003 0301 	and.w	r3, r3, #1
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d1cf      	bne.n	8005a32 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	8000003f 	.word	0x8000003f
 8005aa0:	50000100 	.word	0x50000100
 8005aa4:	50000300 	.word	0x50000300
 8005aa8:	50000700 	.word	0x50000700
 8005aac:	20000054 	.word	0x20000054
 8005ab0:	053e2d63 	.word	0x053e2d63

08005ab4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7ff f830 	bl	8004b26 <LL_ADC_IsDisableOngoing>
 8005ac6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7ff f817 	bl	8004b00 <LL_ADC_IsEnabled>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d047      	beq.n	8005b68 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d144      	bne.n	8005b68 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f003 030d 	and.w	r3, r3, #13
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d10c      	bne.n	8005b06 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fe fff1 	bl	8004ad8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2203      	movs	r2, #3
 8005afc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005afe:	f7fe fded 	bl	80046dc <HAL_GetTick>
 8005b02:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b04:	e029      	b.n	8005b5a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b0a:	f043 0210 	orr.w	r2, r3, #16
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b16:	f043 0201 	orr.w	r2, r3, #1
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e023      	b.n	8005b6a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b22:	f7fe fddb 	bl	80046dc <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d914      	bls.n	8005b5a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00d      	beq.n	8005b5a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b42:	f043 0210 	orr.w	r2, r3, #16
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b4e:	f043 0201 	orr.w	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e007      	b.n	8005b6a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1dc      	bne.n	8005b22 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b84:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d14b      	bne.n	8005c24 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d021      	beq.n	8005bea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7fe fe96 	bl	80048dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d032      	beq.n	8005c1c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d12b      	bne.n	8005c1c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d11f      	bne.n	8005c1c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005be0:	f043 0201 	orr.w	r2, r3, #1
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005be8:	e018      	b.n	8005c1c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d111      	bne.n	8005c1c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bfc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c08:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d105      	bne.n	8005c1c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c14:	f043 0201 	orr.w	r2, r3, #1
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f7fc fef3 	bl	8002a08 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005c22:	e00e      	b.n	8005c42 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005c30:	68f8      	ldr	r0, [r7, #12]
 8005c32:	f7ff fa5f 	bl	80050f4 <HAL_ADC_ErrorCallback>
}
 8005c36:	e004      	b.n	8005c42 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	4798      	blx	r3
}
 8005c42:	bf00      	nop
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7ff fa41 	bl	80050e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c5e:	bf00      	nop
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b084      	sub	sp, #16
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c78:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c84:	f043 0204 	orr.w	r2, r3, #4
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005c8c:	68f8      	ldr	r0, [r7, #12]
 8005c8e:	f7ff fa31 	bl	80050f4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c92:	bf00      	nop
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <LL_ADC_IsEnabled>:
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d101      	bne.n	8005cb2 <LL_ADC_IsEnabled+0x18>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <LL_ADC_IsEnabled+0x1a>
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	370c      	adds	r7, #12
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <LL_ADC_StartCalibration>:
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005cd2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005cd6:	683a      	ldr	r2, [r7, #0]
 8005cd8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	609a      	str	r2, [r3, #8]
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr

08005cf2 <LL_ADC_IsCalibrationOnGoing>:
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b083      	sub	sp, #12
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d06:	d101      	bne.n	8005d0c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr

08005d1a <LL_ADC_REG_IsConversionOngoing>:
{
 8005d1a:	b480      	push	{r7}
 8005d1c:	b083      	sub	sp, #12
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f003 0304 	and.w	r3, r3, #4
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d101      	bne.n	8005d32 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_ADCEx_Calibration_Start+0x1c>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e04d      	b.n	8005df8 <HAL_ADCEx_Calibration_Start+0xb8>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7ff fea5 	bl	8005ab4 <ADC_Disable>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d136      	bne.n	8005de2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d78:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005d7c:	f023 0302 	bic.w	r3, r3, #2
 8005d80:	f043 0202 	orr.w	r2, r3, #2
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff ff96 	bl	8005cc0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d94:	e014      	b.n	8005dc0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	4a18      	ldr	r2, [pc, #96]	@ (8005e00 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d90d      	bls.n	8005dc0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005da8:	f023 0312 	bic.w	r3, r3, #18
 8005dac:	f043 0210 	orr.w	r2, r3, #16
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e01b      	b.n	8005df8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7ff ff94 	bl	8005cf2 <LL_ADC_IsCalibrationOnGoing>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1e2      	bne.n	8005d96 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd4:	f023 0303 	bic.w	r3, r3, #3
 8005dd8:	f043 0201 	orr.w	r2, r3, #1
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005de0:	e005      	b.n	8005dee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de6:	f043 0210 	orr.w	r2, r3, #16
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	0004de01 	.word	0x0004de01

08005e04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005e04:	b590      	push	{r4, r7, lr}
 8005e06:	b0a1      	sub	sp, #132	@ 0x84
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e0e7      	b.n	8005ff2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005e2e:	2300      	movs	r3, #0
 8005e30:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e3a:	d102      	bne.n	8005e42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8005ffc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e3e:	60bb      	str	r3, [r7, #8]
 8005e40:	e009      	b.n	8005e56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a6e      	ldr	r2, [pc, #440]	@ (8006000 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d102      	bne.n	8005e52 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005e4c:	4b6d      	ldr	r3, [pc, #436]	@ (8006004 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005e4e:	60bb      	str	r3, [r7, #8]
 8005e50:	e001      	b.n	8005e56 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005e52:	2300      	movs	r3, #0
 8005e54:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10b      	bne.n	8005e74 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e60:	f043 0220 	orr.w	r2, r3, #32
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e0be      	b.n	8005ff2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4618      	mov	r0, r3
 8005e78:	f7ff ff4f 	bl	8005d1a <LL_ADC_REG_IsConversionOngoing>
 8005e7c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7ff ff49 	bl	8005d1a <LL_ADC_REG_IsConversionOngoing>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f040 80a0 	bne.w	8005fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005e90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f040 809c 	bne.w	8005fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ea0:	d004      	beq.n	8005eac <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a55      	ldr	r2, [pc, #340]	@ (8005ffc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d101      	bne.n	8005eb0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005eac:	4b56      	ldr	r3, [pc, #344]	@ (8006008 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005eae:	e000      	b.n	8005eb2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005eb0:	4b56      	ldr	r3, [pc, #344]	@ (800600c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005eb2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d04b      	beq.n	8005f54 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005ebc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	6859      	ldr	r1, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ece:	035b      	lsls	r3, r3, #13
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	431a      	orrs	r2, r3
 8005ed4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ed6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ee0:	d004      	beq.n	8005eec <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a45      	ldr	r2, [pc, #276]	@ (8005ffc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d10f      	bne.n	8005f0c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005eec:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005ef0:	f7ff fed3 	bl	8005c9a <LL_ADC_IsEnabled>
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	4841      	ldr	r0, [pc, #260]	@ (8005ffc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ef8:	f7ff fecf 	bl	8005c9a <LL_ADC_IsEnabled>
 8005efc:	4603      	mov	r3, r0
 8005efe:	4323      	orrs	r3, r4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	bf0c      	ite	eq
 8005f04:	2301      	moveq	r3, #1
 8005f06:	2300      	movne	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	e012      	b.n	8005f32 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005f0c:	483c      	ldr	r0, [pc, #240]	@ (8006000 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005f0e:	f7ff fec4 	bl	8005c9a <LL_ADC_IsEnabled>
 8005f12:	4604      	mov	r4, r0
 8005f14:	483b      	ldr	r0, [pc, #236]	@ (8006004 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005f16:	f7ff fec0 	bl	8005c9a <LL_ADC_IsEnabled>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	431c      	orrs	r4, r3
 8005f1e:	483c      	ldr	r0, [pc, #240]	@ (8006010 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005f20:	f7ff febb 	bl	8005c9a <LL_ADC_IsEnabled>
 8005f24:	4603      	mov	r3, r0
 8005f26:	4323      	orrs	r3, r4
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	bf0c      	ite	eq
 8005f2c:	2301      	moveq	r3, #1
 8005f2e:	2300      	movne	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d056      	beq.n	8005fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005f36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005f3e:	f023 030f 	bic.w	r3, r3, #15
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	6811      	ldr	r1, [r2, #0]
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	6892      	ldr	r2, [r2, #8]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f50:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f52:	e047      	b.n	8005fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005f54:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f5c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f68:	d004      	beq.n	8005f74 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a23      	ldr	r2, [pc, #140]	@ (8005ffc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d10f      	bne.n	8005f94 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005f74:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005f78:	f7ff fe8f 	bl	8005c9a <LL_ADC_IsEnabled>
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	481f      	ldr	r0, [pc, #124]	@ (8005ffc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f80:	f7ff fe8b 	bl	8005c9a <LL_ADC_IsEnabled>
 8005f84:	4603      	mov	r3, r0
 8005f86:	4323      	orrs	r3, r4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	bf0c      	ite	eq
 8005f8c:	2301      	moveq	r3, #1
 8005f8e:	2300      	movne	r3, #0
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	e012      	b.n	8005fba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005f94:	481a      	ldr	r0, [pc, #104]	@ (8006000 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005f96:	f7ff fe80 	bl	8005c9a <LL_ADC_IsEnabled>
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	4819      	ldr	r0, [pc, #100]	@ (8006004 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005f9e:	f7ff fe7c 	bl	8005c9a <LL_ADC_IsEnabled>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	431c      	orrs	r4, r3
 8005fa6:	481a      	ldr	r0, [pc, #104]	@ (8006010 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005fa8:	f7ff fe77 	bl	8005c9a <LL_ADC_IsEnabled>
 8005fac:	4603      	mov	r3, r0
 8005fae:	4323      	orrs	r3, r4
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2301      	moveq	r3, #1
 8005fb6:	2300      	movne	r3, #0
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d012      	beq.n	8005fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005fbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005fc6:	f023 030f 	bic.w	r3, r3, #15
 8005fca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005fcc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005fce:	e009      	b.n	8005fe4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd4:	f043 0220 	orr.w	r2, r3, #32
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005fe2:	e000      	b.n	8005fe6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005fe4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005fee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3784      	adds	r7, #132	@ 0x84
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd90      	pop	{r4, r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	50000100 	.word	0x50000100
 8006000:	50000400 	.word	0x50000400
 8006004:	50000500 	.word	0x50000500
 8006008:	50000300 	.word	0x50000300
 800600c:	50000700 	.word	0x50000700
 8006010:	50000600 	.word	0x50000600

08006014 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e023      	b.n	800606e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fd fed8 	bl	8003df0 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3708      	adds	r7, #8
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, const CORDIC_ConfigTypeDef *sConfig)
{
 8006078:	b480      	push	{r7}
 800607a:	b085      	sub	sp, #20
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006082:	2300      	movs	r3, #0
 8006084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b01      	cmp	r3, #1
 8006090:	d11d      	bne.n	80060ce <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	4b14      	ldr	r3, [pc, #80]	@ (80060ec <HAL_CORDIC_Configure+0x74>)
 800609a:	4013      	ands	r3, r2
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	6811      	ldr	r1, [r2, #0]
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	6992      	ldr	r2, [r2, #24]
 80060a4:	4311      	orrs	r1, r2
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	6852      	ldr	r2, [r2, #4]
 80060aa:	4311      	orrs	r1, r2
 80060ac:	683a      	ldr	r2, [r7, #0]
 80060ae:	6912      	ldr	r2, [r2, #16]
 80060b0:	4311      	orrs	r1, r2
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	6952      	ldr	r2, [r2, #20]
 80060b6:	4311      	orrs	r1, r2
 80060b8:	683a      	ldr	r2, [r7, #0]
 80060ba:	6892      	ldr	r2, [r2, #8]
 80060bc:	4311      	orrs	r1, r2
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	68d2      	ldr	r2, [r2, #12]
 80060c2:	4311      	orrs	r1, r2
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6812      	ldr	r2, [r2, #0]
 80060c8:	430b      	orrs	r3, r1
 80060ca:	6013      	str	r3, [r2, #0]
 80060cc:	e007      	b.n	80060de <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d2:	f043 0202 	orr.w	r2, r3, #2
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	ff87f800 	.word	0xff87f800

080060f0 <HAL_CORDIC_Calculate>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate(CORDIC_HandleTypeDef *hcordic, const int32_t *pInBuff, int32_t *pOutBuff,
                                       uint32_t NbCalc, uint32_t Timeout)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b088      	sub	sp, #32
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  const int32_t *p_tmp_in_buff = pInBuff;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d005      	beq.n	8006118 <HAL_CORDIC_Calculate+0x28>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <HAL_CORDIC_Calculate+0x28>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d107      	bne.n	8006128 <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611c:	f043 0201 	orr.w	r2, r3, #1
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    return HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	e058      	b.n	80061da <HAL_CORDIC_Calculate+0xea>
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b01      	cmp	r3, #1
 8006132:	d14b      	bne.n	80061cc <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2202      	movs	r2, #2
 800613e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 8006142:	f7fe facb 	bl	80046dc <HAL_GetTick>
 8006146:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8006148:	f107 0314 	add.w	r3, r7, #20
 800614c:	4619      	mov	r1, r3
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f847 	bl	80061e2 <CORDIC_WriteInDataIncrementPtr>

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	3b01      	subs	r3, #1
 8006158:	61fb      	str	r3, [r7, #28]
 800615a:	e028      	b.n	80061ae <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 800615c:	f107 0314 	add.w	r3, r7, #20
 8006160:	4619      	mov	r1, r3
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 f83d 	bl	80061e2 <CORDIC_WriteInDataIncrementPtr>

      /* Wait for RRDY flag to be raised */
      do
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
 8006168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616e:	d010      	beq.n	8006192 <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 8006170:	f7fe fab4 	bl	80046dc <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800617c:	429a      	cmp	r2, r3
 800617e:	d208      	bcs.n	8006192 <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2204      	movs	r2, #4
 8006184:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Return function status */
            return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e023      	b.n	80061da <HAL_CORDIC_Calculate+0xea>
          }
        }
      } while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	dae5      	bge.n	8006168 <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 800619c:	f107 0310 	add.w	r3, r7, #16
 80061a0:	4619      	mov	r1, r3
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 f846 	bl	8006234 <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	61fb      	str	r3, [r7, #28]
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1d3      	bne.n	800615c <HAL_CORDIC_Calculate+0x6c>
    }

    /* Read output data from Read Data register, and increment output buffer pointer */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 80061b4:	f107 0310 	add.w	r3, r7, #16
 80061b8:	4619      	mov	r1, r3
 80061ba:	68f8      	ldr	r0, [r7, #12]
 80061bc:	f000 f83a 	bl	8006234 <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Return function status */
    return HAL_OK;
 80061c8:	2300      	movs	r3, #0
 80061ca:	e006      	b.n	80061da <HAL_CORDIC_Calculate+0xea>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d0:	f043 0202 	orr.w	r2, r3, #2
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
  }
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3720      	adds	r7, #32
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	1d1a      	adds	r2, r3, #4
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800620c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006210:	d10a      	bne.n	8006228 <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	1d1a      	adds	r2, r3, #4
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	601a      	str	r2, [r3, #0]
  }
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	1d1a      	adds	r2, r3, #4
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800625e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006262:	d10a      	bne.n	800627a <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689a      	ldr	r2, [r3, #8]
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	1d1a      	adds	r2, r3, #4
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	601a      	str	r2, [r3, #0]
  }
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
	...

08006288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006298:	4b0c      	ldr	r3, [pc, #48]	@ (80062cc <__NVIC_SetPriorityGrouping+0x44>)
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80062a4:	4013      	ands	r3, r2
 80062a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80062b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062ba:	4a04      	ldr	r2, [pc, #16]	@ (80062cc <__NVIC_SetPriorityGrouping+0x44>)
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	60d3      	str	r3, [r2, #12]
}
 80062c0:	bf00      	nop
 80062c2:	3714      	adds	r7, #20
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr
 80062cc:	e000ed00 	.word	0xe000ed00

080062d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062d4:	4b04      	ldr	r3, [pc, #16]	@ (80062e8 <__NVIC_GetPriorityGrouping+0x18>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	0a1b      	lsrs	r3, r3, #8
 80062da:	f003 0307 	and.w	r3, r3, #7
}
 80062de:	4618      	mov	r0, r3
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr
 80062e8:	e000ed00 	.word	0xe000ed00

080062ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	4603      	mov	r3, r0
 80062f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	db0b      	blt.n	8006316 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062fe:	79fb      	ldrb	r3, [r7, #7]
 8006300:	f003 021f 	and.w	r2, r3, #31
 8006304:	4907      	ldr	r1, [pc, #28]	@ (8006324 <__NVIC_EnableIRQ+0x38>)
 8006306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	2001      	movs	r0, #1
 800630e:	fa00 f202 	lsl.w	r2, r0, r2
 8006312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	e000e100 	.word	0xe000e100

08006328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	6039      	str	r1, [r7, #0]
 8006332:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006338:	2b00      	cmp	r3, #0
 800633a:	db0a      	blt.n	8006352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	b2da      	uxtb	r2, r3
 8006340:	490c      	ldr	r1, [pc, #48]	@ (8006374 <__NVIC_SetPriority+0x4c>)
 8006342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006346:	0112      	lsls	r2, r2, #4
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	440b      	add	r3, r1
 800634c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006350:	e00a      	b.n	8006368 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	b2da      	uxtb	r2, r3
 8006356:	4908      	ldr	r1, [pc, #32]	@ (8006378 <__NVIC_SetPriority+0x50>)
 8006358:	79fb      	ldrb	r3, [r7, #7]
 800635a:	f003 030f 	and.w	r3, r3, #15
 800635e:	3b04      	subs	r3, #4
 8006360:	0112      	lsls	r2, r2, #4
 8006362:	b2d2      	uxtb	r2, r2
 8006364:	440b      	add	r3, r1
 8006366:	761a      	strb	r2, [r3, #24]
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	e000e100 	.word	0xe000e100
 8006378:	e000ed00 	.word	0xe000ed00

0800637c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800637c:	b480      	push	{r7}
 800637e:	b089      	sub	sp, #36	@ 0x24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f003 0307 	and.w	r3, r3, #7
 800638e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	f1c3 0307 	rsb	r3, r3, #7
 8006396:	2b04      	cmp	r3, #4
 8006398:	bf28      	it	cs
 800639a:	2304      	movcs	r3, #4
 800639c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	3304      	adds	r3, #4
 80063a2:	2b06      	cmp	r3, #6
 80063a4:	d902      	bls.n	80063ac <NVIC_EncodePriority+0x30>
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	3b03      	subs	r3, #3
 80063aa:	e000      	b.n	80063ae <NVIC_EncodePriority+0x32>
 80063ac:	2300      	movs	r3, #0
 80063ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063b0:	f04f 32ff 	mov.w	r2, #4294967295
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	43da      	mvns	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	401a      	ands	r2, r3
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063c4:	f04f 31ff 	mov.w	r1, #4294967295
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	fa01 f303 	lsl.w	r3, r1, r3
 80063ce:	43d9      	mvns	r1, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063d4:	4313      	orrs	r3, r2
         );
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3724      	adds	r7, #36	@ 0x24
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
	...

080063e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063f4:	d301      	bcc.n	80063fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80063f6:	2301      	movs	r3, #1
 80063f8:	e00f      	b.n	800641a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80063fa:	4a0a      	ldr	r2, [pc, #40]	@ (8006424 <SysTick_Config+0x40>)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3b01      	subs	r3, #1
 8006400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006402:	210f      	movs	r1, #15
 8006404:	f04f 30ff 	mov.w	r0, #4294967295
 8006408:	f7ff ff8e 	bl	8006328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800640c:	4b05      	ldr	r3, [pc, #20]	@ (8006424 <SysTick_Config+0x40>)
 800640e:	2200      	movs	r2, #0
 8006410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006412:	4b04      	ldr	r3, [pc, #16]	@ (8006424 <SysTick_Config+0x40>)
 8006414:	2207      	movs	r2, #7
 8006416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	e000e010 	.word	0xe000e010

08006428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f7ff ff29 	bl	8006288 <__NVIC_SetPriorityGrouping>
}
 8006436:	bf00      	nop
 8006438:	3708      	adds	r7, #8
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b086      	sub	sp, #24
 8006442:	af00      	add	r7, sp, #0
 8006444:	4603      	mov	r3, r0
 8006446:	60b9      	str	r1, [r7, #8]
 8006448:	607a      	str	r2, [r7, #4]
 800644a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800644c:	f7ff ff40 	bl	80062d0 <__NVIC_GetPriorityGrouping>
 8006450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	68b9      	ldr	r1, [r7, #8]
 8006456:	6978      	ldr	r0, [r7, #20]
 8006458:	f7ff ff90 	bl	800637c <NVIC_EncodePriority>
 800645c:	4602      	mov	r2, r0
 800645e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006462:	4611      	mov	r1, r2
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff ff5f 	bl	8006328 <__NVIC_SetPriority>
}
 800646a:	bf00      	nop
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	4603      	mov	r3, r0
 800647a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800647c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006480:	4618      	mov	r0, r3
 8006482:	f7ff ff33 	bl	80062ec <__NVIC_EnableIRQ>
}
 8006486:	bf00      	nop
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b082      	sub	sp, #8
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7ff ffa4 	bl	80063e4 <SysTick_Config>
 800649c:	4603      	mov	r3, r0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b082      	sub	sp, #8
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e014      	b.n	80064e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	791b      	ldrb	r3, [r3, #4]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d105      	bne.n	80064ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f7fd fcb1 	bl	8003e30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2202      	movs	r2, #2
 80064d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
	...

080064ec <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e056      	b.n	80065ae <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	795b      	ldrb	r3, [r3, #5]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_DAC_Start+0x20>
 8006508:	2302      	movs	r3, #2
 800650a:	e050      	b.n	80065ae <HAL_DAC_Start+0xc2>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2202      	movs	r2, #2
 8006516:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6819      	ldr	r1, [r3, #0]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	f003 0310 	and.w	r3, r3, #16
 8006524:	2201      	movs	r2, #1
 8006526:	409a      	lsls	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006530:	4b22      	ldr	r3, [pc, #136]	@ (80065bc <HAL_DAC_Start+0xd0>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	099b      	lsrs	r3, r3, #6
 8006536:	4a22      	ldr	r2, [pc, #136]	@ (80065c0 <HAL_DAC_Start+0xd4>)
 8006538:	fba2 2303 	umull	r2, r3, r2, r3
 800653c:	099b      	lsrs	r3, r3, #6
 800653e:	3301      	adds	r3, #1
 8006540:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8006542:	e002      	b.n	800654a <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3b01      	subs	r3, #1
 8006548:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1f9      	bne.n	8006544 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10f      	bne.n	8006576 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8006560:	2b02      	cmp	r3, #2
 8006562:	d11d      	bne.n	80065a0 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f042 0201 	orr.w	r2, r2, #1
 8006572:	605a      	str	r2, [r3, #4]
 8006574:	e014      	b.n	80065a0 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	f003 0310 	and.w	r3, r3, #16
 8006586:	2102      	movs	r1, #2
 8006588:	fa01 f303 	lsl.w	r3, r1, r3
 800658c:	429a      	cmp	r2, r3
 800658e:	d107      	bne.n	80065a0 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f042 0202 	orr.w	r2, r2, #2
 800659e:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	20000054 	.word	0x20000054
 80065c0:	053e2d63 	.word	0x053e2d63

080065c4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065da:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d01d      	beq.n	8006622 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d018      	beq.n	8006622 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2204      	movs	r2, #4
 80065f4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f043 0201 	orr.w	r2, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800660a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800661a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f854 	bl	80066ca <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01d      	beq.n	8006668 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d018      	beq.n	8006668 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2204      	movs	r2, #4
 800663a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f043 0202 	orr.w	r2, r3, #2
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006650:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8006660:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 f9f4 	bl	8006a50 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8006668:	bf00      	nop
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
 800667c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800667e:	2300      	movs	r3, #0
 8006680:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e018      	b.n	80066be <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d105      	bne.n	80066aa <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4413      	add	r3, r2
 80066a4:	3308      	adds	r3, #8
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	e004      	b.n	80066b4 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4413      	add	r3, r2
 80066b0:	3314      	adds	r3, #20
 80066b2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	461a      	mov	r2, r3
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80066d2:	bf00      	nop
 80066d4:	370c      	adds	r7, #12
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
	...

080066e0 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b08a      	sub	sp, #40	@ 0x28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066ec:	2300      	movs	r3, #0
 80066ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <HAL_DAC_ConfigChannel+0x1c>
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d101      	bne.n	8006700 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e19e      	b.n	8006a3e <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	795b      	ldrb	r3, [r3, #5]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_DAC_ConfigChannel+0x2c>
 8006708:	2302      	movs	r3, #2
 800670a:	e198      	b.n	8006a3e <HAL_DAC_ConfigChannel+0x35e>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2201      	movs	r2, #1
 8006710:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2202      	movs	r2, #2
 8006716:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b04      	cmp	r3, #4
 800671e:	d17a      	bne.n	8006816 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006720:	f7fd ffdc 	bl	80046dc <HAL_GetTick>
 8006724:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d13d      	bne.n	80067a8 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800672c:	e018      	b.n	8006760 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800672e:	f7fd ffd5 	bl	80046dc <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b01      	cmp	r3, #1
 800673a:	d911      	bls.n	8006760 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006742:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	f043 0208 	orr.w	r2, r3, #8
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2203      	movs	r2, #3
 800675a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e16e      	b.n	8006a3e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1df      	bne.n	800672e <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006776:	641a      	str	r2, [r3, #64]	@ 0x40
 8006778:	e020      	b.n	80067bc <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800677a:	f7fd ffaf 	bl	80046dc <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b01      	cmp	r3, #1
 8006786:	d90f      	bls.n	80067a8 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800678e:	2b00      	cmp	r3, #0
 8006790:	da0a      	bge.n	80067a8 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f043 0208 	orr.w	r2, r3, #8
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2203      	movs	r2, #3
 80067a2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e14a      	b.n	8006a3e <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	dbe3      	blt.n	800677a <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f003 0310 	and.w	r3, r3, #16
 80067c8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80067cc:	fa01 f303 	lsl.w	r3, r1, r3
 80067d0:	43db      	mvns	r3, r3
 80067d2:	ea02 0103 	and.w	r1, r2, r3
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	409a      	lsls	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f003 0310 	and.w	r3, r3, #16
 80067f6:	21ff      	movs	r1, #255	@ 0xff
 80067f8:	fa01 f303 	lsl.w	r3, r1, r3
 80067fc:	43db      	mvns	r3, r3
 80067fe:	ea02 0103 	and.w	r1, r2, r3
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	409a      	lsls	r2, r3
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d11d      	bne.n	800685a <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006824:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f003 0310 	and.w	r3, r3, #16
 800682c:	221f      	movs	r2, #31
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	43db      	mvns	r3, r3
 8006834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006836:	4013      	ands	r3, r2
 8006838:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	6a1b      	ldr	r3, [r3, #32]
 800683e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f003 0310 	and.w	r3, r3, #16
 8006846:	697a      	ldr	r2, [r7, #20]
 8006848:	fa02 f303 	lsl.w	r3, r2, r3
 800684c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800684e:	4313      	orrs	r3, r2
 8006850:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006858:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006860:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	2207      	movs	r2, #7
 800686a:	fa02 f303 	lsl.w	r3, r2, r3
 800686e:	43db      	mvns	r3, r3
 8006870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006872:	4013      	ands	r3, r2
 8006874:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d102      	bne.n	8006884 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 800687e:	2300      	movs	r3, #0
 8006880:	623b      	str	r3, [r7, #32]
 8006882:	e00f      	b.n	80068a4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d102      	bne.n	8006892 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800688c:	2301      	movs	r3, #1
 800688e:	623b      	str	r3, [r7, #32]
 8006890:	e008      	b.n	80068a4 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d102      	bne.n	80068a0 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800689a:	2301      	movs	r3, #1
 800689c:	623b      	str	r3, [r7, #32]
 800689e:	e001      	b.n	80068a4 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	689a      	ldr	r2, [r3, #8]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	6a3a      	ldr	r2, [r7, #32]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f003 0310 	and.w	r3, r3, #16
 80068ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068be:	fa02 f303 	lsl.w	r3, r2, r3
 80068c2:	43db      	mvns	r3, r3
 80068c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068c6:	4013      	ands	r3, r2
 80068c8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	791b      	ldrb	r3, [r3, #4]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d102      	bne.n	80068d8 <HAL_DAC_ConfigChannel+0x1f8>
 80068d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80068d6:	e000      	b.n	80068da <HAL_DAC_ConfigChannel+0x1fa>
 80068d8:	2300      	movs	r3, #0
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f003 0310 	and.w	r3, r3, #16
 80068e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068ea:	fa02 f303 	lsl.w	r3, r2, r3
 80068ee:	43db      	mvns	r3, r3
 80068f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068f2:	4013      	ands	r3, r2
 80068f4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	795b      	ldrb	r3, [r3, #5]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d102      	bne.n	8006904 <HAL_DAC_ConfigChannel+0x224>
 80068fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006902:	e000      	b.n	8006906 <HAL_DAC_ConfigChannel+0x226>
 8006904:	2300      	movs	r3, #0
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800690c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006912:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b02      	cmp	r3, #2
 800691a:	d114      	bne.n	8006946 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800691c:	f002 ff7a 	bl	8009814 <HAL_RCC_GetHCLKFreq>
 8006920:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	4a48      	ldr	r2, [pc, #288]	@ (8006a48 <HAL_DAC_ConfigChannel+0x368>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d904      	bls.n	8006934 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006930:	627b      	str	r3, [r7, #36]	@ 0x24
 8006932:	e00f      	b.n	8006954 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	4a45      	ldr	r2, [pc, #276]	@ (8006a4c <HAL_DAC_ConfigChannel+0x36c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d90a      	bls.n	8006952 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800693c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800693e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006942:	627b      	str	r3, [r7, #36]	@ 0x24
 8006944:	e006      	b.n	8006954 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800694c:	4313      	orrs	r3, r2
 800694e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006950:	e000      	b.n	8006954 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006952:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f003 0310 	and.w	r3, r3, #16
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006962:	4313      	orrs	r3, r2
 8006964:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800696c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6819      	ldr	r1, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f003 0310 	and.w	r3, r3, #16
 800697a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800697e:	fa02 f303 	lsl.w	r3, r2, r3
 8006982:	43da      	mvns	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	400a      	ands	r2, r1
 800698a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f003 0310 	and.w	r3, r3, #16
 800699a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800699e:	fa02 f303 	lsl.w	r3, r2, r3
 80069a2:	43db      	mvns	r3, r3
 80069a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069a6:	4013      	ands	r3, r2
 80069a8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f003 0310 	and.w	r3, r3, #16
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	fa02 f303 	lsl.w	r3, r2, r3
 80069bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069be:	4313      	orrs	r3, r2
 80069c0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069c8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	6819      	ldr	r1, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f003 0310 	and.w	r3, r3, #16
 80069d6:	22c0      	movs	r2, #192	@ 0xc0
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	43da      	mvns	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	400a      	ands	r2, r1
 80069e4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	089b      	lsrs	r3, r3, #2
 80069ec:	f003 030f 	and.w	r3, r3, #15
 80069f0:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	089b      	lsrs	r3, r3, #2
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8006a14:	fa01 f303 	lsl.w	r3, r1, r3
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	ea02 0103 	and.w	r1, r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f003 0310 	and.w	r3, r3, #16
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	409a      	lsls	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	430a      	orrs	r2, r1
 8006a2e:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2201      	movs	r2, #1
 8006a34:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006a3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3728      	adds	r7, #40	@ 0x28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	09896800 	.word	0x09896800
 8006a4c:	04c4b400 	.word	0x04c4b400

08006a50 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e08d      	b.n	8006b92 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	4b47      	ldr	r3, [pc, #284]	@ (8006b9c <HAL_DMA_Init+0x138>)
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d80f      	bhi.n	8006aa2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	461a      	mov	r2, r3
 8006a88:	4b45      	ldr	r3, [pc, #276]	@ (8006ba0 <HAL_DMA_Init+0x13c>)
 8006a8a:	4413      	add	r3, r2
 8006a8c:	4a45      	ldr	r2, [pc, #276]	@ (8006ba4 <HAL_DMA_Init+0x140>)
 8006a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a92:	091b      	lsrs	r3, r3, #4
 8006a94:	009a      	lsls	r2, r3, #2
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a42      	ldr	r2, [pc, #264]	@ (8006ba8 <HAL_DMA_Init+0x144>)
 8006a9e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006aa0:	e00e      	b.n	8006ac0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	4b40      	ldr	r3, [pc, #256]	@ (8006bac <HAL_DMA_Init+0x148>)
 8006aaa:	4413      	add	r3, r2
 8006aac:	4a3d      	ldr	r2, [pc, #244]	@ (8006ba4 <HAL_DMA_Init+0x140>)
 8006aae:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab2:	091b      	lsrs	r3, r3, #4
 8006ab4:	009a      	lsls	r2, r3, #2
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a3c      	ldr	r2, [pc, #240]	@ (8006bb0 <HAL_DMA_Init+0x14c>)
 8006abe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ada:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006ae4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006af0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	699b      	ldr	r3, [r3, #24]
 8006af6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006afc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 f9b6 	bl	8006e84 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b20:	d102      	bne.n	8006b28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b30:	b2d2      	uxtb	r2, r2
 8006b32:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b3c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d010      	beq.n	8006b68 <HAL_DMA_Init+0x104>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d80c      	bhi.n	8006b68 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f9d6 	bl	8006f00 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006b64:	605a      	str	r2, [r3, #4]
 8006b66:	e008      	b.n	8006b7a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	40020407 	.word	0x40020407
 8006ba0:	bffdfff8 	.word	0xbffdfff8
 8006ba4:	cccccccd 	.word	0xcccccccd
 8006ba8:	40020000 	.word	0x40020000
 8006bac:	bffdfbf8 	.word	0xbffdfbf8
 8006bb0:	40020400 	.word	0x40020400

08006bb4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	60f8      	str	r0, [r7, #12]
 8006bbc:	60b9      	str	r1, [r7, #8]
 8006bbe:	607a      	str	r2, [r7, #4]
 8006bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_DMA_Start_IT+0x20>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e066      	b.n	8006ca2 <HAL_DMA_Start_IT+0xee>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d155      	bne.n	8006c94 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681a      	ldr	r2, [r3, #0]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0201 	bic.w	r2, r2, #1
 8006c04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f8fb 	bl	8006e08 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d008      	beq.n	8006c2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681a      	ldr	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f042 020e 	orr.w	r2, r2, #14
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	e00f      	b.n	8006c4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f022 0204 	bic.w	r2, r2, #4
 8006c3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f042 020a 	orr.w	r2, r2, #10
 8006c4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d007      	beq.n	8006c6a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c68:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c80:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f042 0201 	orr.w	r2, r2, #1
 8006c90:	601a      	str	r2, [r3, #0]
 8006c92:	e005      	b.n	8006ca0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006c9c:	2302      	movs	r3, #2
 8006c9e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b084      	sub	sp, #16
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cc6:	f003 031f 	and.w	r3, r3, #31
 8006cca:	2204      	movs	r2, #4
 8006ccc:	409a      	lsls	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d026      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x7a>
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	f003 0304 	and.w	r3, r3, #4
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d021      	beq.n	8006d24 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d107      	bne.n	8006cfe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0204 	bic.w	r2, r2, #4
 8006cfc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d02:	f003 021f 	and.w	r2, r3, #31
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0a:	2104      	movs	r1, #4
 8006d0c:	fa01 f202 	lsl.w	r2, r1, r2
 8006d10:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d071      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006d22:	e06c      	b.n	8006dfe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	409a      	lsls	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4013      	ands	r3, r2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d02e      	beq.n	8006d96 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f003 0302 	and.w	r3, r3, #2
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d029      	beq.n	8006d96 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f003 0320 	and.w	r3, r3, #32
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10b      	bne.n	8006d68 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 020a 	bic.w	r2, r2, #10
 8006d5e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d6c:	f003 021f 	and.w	r2, r3, #31
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d74:	2102      	movs	r1, #2
 8006d76:	fa01 f202 	lsl.w	r2, r1, r2
 8006d7a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d038      	beq.n	8006dfe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006d94:	e033      	b.n	8006dfe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d9a:	f003 031f 	and.w	r3, r3, #31
 8006d9e:	2208      	movs	r2, #8
 8006da0:	409a      	lsls	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4013      	ands	r3, r2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d02a      	beq.n	8006e00 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	f003 0308 	and.w	r3, r3, #8
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d025      	beq.n	8006e00 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 020e 	bic.w	r2, r2, #14
 8006dc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dc8:	f003 021f 	and.w	r2, r3, #31
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8006dd6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2201      	movs	r2, #1
 8006de2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d004      	beq.n	8006e00 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006dfe:	bf00      	nop
 8006e00:	bf00      	nop
}
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006e1e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d004      	beq.n	8006e32 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006e30:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e36:	f003 021f 	and.w	r2, r3, #31
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e3e:	2101      	movs	r1, #1
 8006e40:	fa01 f202 	lsl.w	r2, r1, r2
 8006e44:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	2b10      	cmp	r3, #16
 8006e54:	d108      	bne.n	8006e68 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006e66:	e007      	b.n	8006e78 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	60da      	str	r2, [r3, #12]
}
 8006e78:	bf00      	nop
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	461a      	mov	r2, r3
 8006e92:	4b16      	ldr	r3, [pc, #88]	@ (8006eec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d802      	bhi.n	8006e9e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006e98:	4b15      	ldr	r3, [pc, #84]	@ (8006ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006e9a:	617b      	str	r3, [r7, #20]
 8006e9c:	e001      	b.n	8006ea2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006e9e:	4b15      	ldr	r3, [pc, #84]	@ (8006ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006ea0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	3b08      	subs	r3, #8
 8006eae:	4a12      	ldr	r2, [pc, #72]	@ (8006ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb4:	091b      	lsrs	r3, r3, #4
 8006eb6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ebc:	089b      	lsrs	r3, r3, #2
 8006ebe:	009a      	lsls	r2, r3, #2
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a0b      	ldr	r2, [pc, #44]	@ (8006efc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006ece:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	409a      	lsls	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006ede:	bf00      	nop
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	40020407 	.word	0x40020407
 8006ef0:	40020800 	.word	0x40020800
 8006ef4:	40020820 	.word	0x40020820
 8006ef8:	cccccccd 	.word	0xcccccccd
 8006efc:	40020880 	.word	0x40020880

08006f00 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b085      	sub	sp, #20
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	4b0b      	ldr	r3, [pc, #44]	@ (8006f40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	461a      	mov	r2, r3
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a08      	ldr	r2, [pc, #32]	@ (8006f44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006f22:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	f003 031f 	and.w	r3, r3, #31
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	409a      	lsls	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006f34:	bf00      	nop
 8006f36:	3714      	adds	r7, #20
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	1000823f 	.word	0x1000823f
 8006f44:	40020940 	.word	0x40020940

08006f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b087      	sub	sp, #28
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006f56:	e15a      	b.n	800720e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	fa01 f303 	lsl.w	r3, r1, r3
 8006f64:	4013      	ands	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 814c 	beq.w	8007208 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	f003 0303 	and.w	r3, r3, #3
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d005      	beq.n	8006f88 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d130      	bne.n	8006fea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	2203      	movs	r2, #3
 8006f94:	fa02 f303 	lsl.w	r3, r2, r3
 8006f98:	43db      	mvns	r3, r3
 8006f9a:	693a      	ldr	r2, [r7, #16]
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	005b      	lsls	r3, r3, #1
 8006fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc6:	43db      	mvns	r3, r3
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	091b      	lsrs	r3, r3, #4
 8006fd4:	f003 0201 	and.w	r2, r3, #1
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	fa02 f303 	lsl.w	r3, r2, r3
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	d017      	beq.n	8007026 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	005b      	lsls	r3, r3, #1
 8007000:	2203      	movs	r2, #3
 8007002:	fa02 f303 	lsl.w	r3, r2, r3
 8007006:	43db      	mvns	r3, r3
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	4013      	ands	r3, r2
 800700c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	2b02      	cmp	r3, #2
 8007030:	d123      	bne.n	800707a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	08da      	lsrs	r2, r3, #3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	3208      	adds	r2, #8
 800703a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800703e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	f003 0307 	and.w	r3, r3, #7
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	220f      	movs	r2, #15
 800704a:	fa02 f303 	lsl.w	r3, r2, r3
 800704e:	43db      	mvns	r3, r3
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	4013      	ands	r3, r2
 8007054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	691a      	ldr	r2, [r3, #16]
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f003 0307 	and.w	r3, r3, #7
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	fa02 f303 	lsl.w	r3, r2, r3
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	4313      	orrs	r3, r2
 800706a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	08da      	lsrs	r2, r3, #3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	3208      	adds	r2, #8
 8007074:	6939      	ldr	r1, [r7, #16]
 8007076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	005b      	lsls	r3, r3, #1
 8007084:	2203      	movs	r2, #3
 8007086:	fa02 f303 	lsl.w	r3, r2, r3
 800708a:	43db      	mvns	r3, r3
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	4013      	ands	r3, r2
 8007090:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f003 0203 	and.w	r2, r3, #3
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	005b      	lsls	r3, r3, #1
 800709e:	fa02 f303 	lsl.w	r3, r2, r3
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	693a      	ldr	r2, [r7, #16]
 80070ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 80a6 	beq.w	8007208 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070bc:	4b5b      	ldr	r3, [pc, #364]	@ (800722c <HAL_GPIO_Init+0x2e4>)
 80070be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070c0:	4a5a      	ldr	r2, [pc, #360]	@ (800722c <HAL_GPIO_Init+0x2e4>)
 80070c2:	f043 0301 	orr.w	r3, r3, #1
 80070c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80070c8:	4b58      	ldr	r3, [pc, #352]	@ (800722c <HAL_GPIO_Init+0x2e4>)
 80070ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	60bb      	str	r3, [r7, #8]
 80070d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80070d4:	4a56      	ldr	r2, [pc, #344]	@ (8007230 <HAL_GPIO_Init+0x2e8>)
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	089b      	lsrs	r3, r3, #2
 80070da:	3302      	adds	r3, #2
 80070dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f003 0303 	and.w	r3, r3, #3
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	220f      	movs	r2, #15
 80070ec:	fa02 f303 	lsl.w	r3, r2, r3
 80070f0:	43db      	mvns	r3, r3
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	4013      	ands	r3, r2
 80070f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80070fe:	d01f      	beq.n	8007140 <HAL_GPIO_Init+0x1f8>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a4c      	ldr	r2, [pc, #304]	@ (8007234 <HAL_GPIO_Init+0x2ec>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d019      	beq.n	800713c <HAL_GPIO_Init+0x1f4>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a4b      	ldr	r2, [pc, #300]	@ (8007238 <HAL_GPIO_Init+0x2f0>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d013      	beq.n	8007138 <HAL_GPIO_Init+0x1f0>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a4a      	ldr	r2, [pc, #296]	@ (800723c <HAL_GPIO_Init+0x2f4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00d      	beq.n	8007134 <HAL_GPIO_Init+0x1ec>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a49      	ldr	r2, [pc, #292]	@ (8007240 <HAL_GPIO_Init+0x2f8>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d007      	beq.n	8007130 <HAL_GPIO_Init+0x1e8>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a48      	ldr	r2, [pc, #288]	@ (8007244 <HAL_GPIO_Init+0x2fc>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d101      	bne.n	800712c <HAL_GPIO_Init+0x1e4>
 8007128:	2305      	movs	r3, #5
 800712a:	e00a      	b.n	8007142 <HAL_GPIO_Init+0x1fa>
 800712c:	2306      	movs	r3, #6
 800712e:	e008      	b.n	8007142 <HAL_GPIO_Init+0x1fa>
 8007130:	2304      	movs	r3, #4
 8007132:	e006      	b.n	8007142 <HAL_GPIO_Init+0x1fa>
 8007134:	2303      	movs	r3, #3
 8007136:	e004      	b.n	8007142 <HAL_GPIO_Init+0x1fa>
 8007138:	2302      	movs	r3, #2
 800713a:	e002      	b.n	8007142 <HAL_GPIO_Init+0x1fa>
 800713c:	2301      	movs	r3, #1
 800713e:	e000      	b.n	8007142 <HAL_GPIO_Init+0x1fa>
 8007140:	2300      	movs	r3, #0
 8007142:	697a      	ldr	r2, [r7, #20]
 8007144:	f002 0203 	and.w	r2, r2, #3
 8007148:	0092      	lsls	r2, r2, #2
 800714a:	4093      	lsls	r3, r2
 800714c:	693a      	ldr	r2, [r7, #16]
 800714e:	4313      	orrs	r3, r2
 8007150:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007152:	4937      	ldr	r1, [pc, #220]	@ (8007230 <HAL_GPIO_Init+0x2e8>)
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	089b      	lsrs	r3, r3, #2
 8007158:	3302      	adds	r3, #2
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007160:	4b39      	ldr	r3, [pc, #228]	@ (8007248 <HAL_GPIO_Init+0x300>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	43db      	mvns	r3, r3
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	4013      	ands	r3, r2
 800716e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d003      	beq.n	8007184 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800717c:	693a      	ldr	r2, [r7, #16]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4313      	orrs	r3, r2
 8007182:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007184:	4a30      	ldr	r2, [pc, #192]	@ (8007248 <HAL_GPIO_Init+0x300>)
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800718a:	4b2f      	ldr	r3, [pc, #188]	@ (8007248 <HAL_GPIO_Init+0x300>)
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	43db      	mvns	r3, r3
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	4013      	ands	r3, r2
 8007198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d003      	beq.n	80071ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80071ae:	4a26      	ldr	r2, [pc, #152]	@ (8007248 <HAL_GPIO_Init+0x300>)
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80071b4:	4b24      	ldr	r3, [pc, #144]	@ (8007248 <HAL_GPIO_Init+0x300>)
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	43db      	mvns	r3, r3
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4013      	ands	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4313      	orrs	r3, r2
 80071d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80071d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007248 <HAL_GPIO_Init+0x300>)
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80071de:	4b1a      	ldr	r3, [pc, #104]	@ (8007248 <HAL_GPIO_Init+0x300>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	43db      	mvns	r3, r3
 80071e8:	693a      	ldr	r2, [r7, #16]
 80071ea:	4013      	ands	r3, r2
 80071ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d003      	beq.n	8007202 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007202:	4a11      	ldr	r2, [pc, #68]	@ (8007248 <HAL_GPIO_Init+0x300>)
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	3301      	adds	r3, #1
 800720c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	681a      	ldr	r2, [r3, #0]
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	f47f ae9d 	bne.w	8006f58 <HAL_GPIO_Init+0x10>
  }
}
 800721e:	bf00      	nop
 8007220:	bf00      	nop
 8007222:	371c      	adds	r7, #28
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr
 800722c:	40021000 	.word	0x40021000
 8007230:	40010000 	.word	0x40010000
 8007234:	48000400 	.word	0x48000400
 8007238:	48000800 	.word	0x48000800
 800723c:	48000c00 	.word	0x48000c00
 8007240:	48001000 	.word	0x48001000
 8007244:	48001400 	.word	0x48001400
 8007248:	40010400 	.word	0x40010400

0800724c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	691a      	ldr	r2, [r3, #16]
 800725c:	887b      	ldrh	r3, [r7, #2]
 800725e:	4013      	ands	r3, r2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007264:	2301      	movs	r3, #1
 8007266:	73fb      	strb	r3, [r7, #15]
 8007268:	e001      	b.n	800726e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800726a:	2300      	movs	r3, #0
 800726c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800726e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007270:	4618      	mov	r0, r3
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	807b      	strh	r3, [r7, #2]
 8007288:	4613      	mov	r3, r2
 800728a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800728c:	787b      	ldrb	r3, [r7, #1]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007292:	887a      	ldrh	r2, [r7, #2]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007298:	e002      	b.n	80072a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800729a:	887a      	ldrh	r2, [r7, #2]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	460b      	mov	r3, r1
 80072b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	695b      	ldr	r3, [r3, #20]
 80072bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80072be:	887a      	ldrh	r2, [r7, #2]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4013      	ands	r3, r2
 80072c4:	041a      	lsls	r2, r3, #16
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	43d9      	mvns	r1, r3
 80072ca:	887b      	ldrh	r3, [r7, #2]
 80072cc:	400b      	ands	r3, r1
 80072ce:	431a      	orrs	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	619a      	str	r2, [r3, #24]
}
 80072d4:	bf00      	nop
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e0c0      	b.n	8007474 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d106      	bne.n	800730c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f009 fa22 	bl	8010750 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2203      	movs	r2, #3
 8007310:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4618      	mov	r0, r3
 800731a:	f005 f856 	bl	800c3ca <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]
 8007322:	e03e      	b.n	80073a2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007324:	7bfa      	ldrb	r2, [r7, #15]
 8007326:	6879      	ldr	r1, [r7, #4]
 8007328:	4613      	mov	r3, r2
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	440b      	add	r3, r1
 8007332:	3311      	adds	r3, #17
 8007334:	2201      	movs	r2, #1
 8007336:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007338:	7bfa      	ldrb	r2, [r7, #15]
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	4613      	mov	r3, r2
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	440b      	add	r3, r1
 8007346:	3310      	adds	r3, #16
 8007348:	7bfa      	ldrb	r2, [r7, #15]
 800734a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800734c:	7bfa      	ldrb	r2, [r7, #15]
 800734e:	6879      	ldr	r1, [r7, #4]
 8007350:	4613      	mov	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	440b      	add	r3, r1
 800735a:	3313      	adds	r3, #19
 800735c:	2200      	movs	r2, #0
 800735e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007360:	7bfa      	ldrb	r2, [r7, #15]
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	440b      	add	r3, r1
 800736e:	3320      	adds	r3, #32
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007374:	7bfa      	ldrb	r2, [r7, #15]
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	4613      	mov	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	440b      	add	r3, r1
 8007382:	3324      	adds	r3, #36	@ 0x24
 8007384:	2200      	movs	r2, #0
 8007386:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	440b      	add	r3, r1
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	3301      	adds	r3, #1
 80073a0:	73fb      	strb	r3, [r7, #15]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	791b      	ldrb	r3, [r3, #4]
 80073a6:	7bfa      	ldrb	r2, [r7, #15]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d3bb      	bcc.n	8007324 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073ac:	2300      	movs	r3, #0
 80073ae:	73fb      	strb	r3, [r7, #15]
 80073b0:	e044      	b.n	800743c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80073b2:	7bfa      	ldrb	r2, [r7, #15]
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	4613      	mov	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4413      	add	r3, r2
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	440b      	add	r3, r1
 80073c0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80073c4:	2200      	movs	r2, #0
 80073c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80073c8:	7bfa      	ldrb	r2, [r7, #15]
 80073ca:	6879      	ldr	r1, [r7, #4]
 80073cc:	4613      	mov	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	440b      	add	r3, r1
 80073d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073da:	7bfa      	ldrb	r2, [r7, #15]
 80073dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80073de:	7bfa      	ldrb	r2, [r7, #15]
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	4613      	mov	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	00db      	lsls	r3, r3, #3
 80073ea:	440b      	add	r3, r1
 80073ec:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80073f0:	2200      	movs	r2, #0
 80073f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80073f4:	7bfa      	ldrb	r2, [r7, #15]
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	440b      	add	r3, r1
 8007402:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007406:	2200      	movs	r2, #0
 8007408:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800740a:	7bfa      	ldrb	r2, [r7, #15]
 800740c:	6879      	ldr	r1, [r7, #4]
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	00db      	lsls	r3, r3, #3
 8007416:	440b      	add	r3, r1
 8007418:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800741c:	2200      	movs	r2, #0
 800741e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007420:	7bfa      	ldrb	r2, [r7, #15]
 8007422:	6879      	ldr	r1, [r7, #4]
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	440b      	add	r3, r1
 800742e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007432:	2200      	movs	r2, #0
 8007434:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007436:	7bfb      	ldrb	r3, [r7, #15]
 8007438:	3301      	adds	r3, #1
 800743a:	73fb      	strb	r3, [r7, #15]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	791b      	ldrb	r3, [r3, #4]
 8007440:	7bfa      	ldrb	r2, [r7, #15]
 8007442:	429a      	cmp	r2, r3
 8007444:	d3b5      	bcc.n	80073b2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3304      	adds	r3, #4
 800744e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007452:	f004 ffd5 	bl	800c400 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	7a9b      	ldrb	r3, [r3, #10]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d102      	bne.n	8007472 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 fc42 	bl	8008cf6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007472:	2300      	movs	r3, #0
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800748a:	2b01      	cmp	r3, #1
 800748c:	d101      	bne.n	8007492 <HAL_PCD_Start+0x16>
 800748e:	2302      	movs	r3, #2
 8007490:	e012      	b.n	80074b8 <HAL_PCD_Start+0x3c>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2201      	movs	r2, #1
 8007496:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	4618      	mov	r0, r3
 80074a0:	f004 ff7c 	bl	800c39c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f007 fa3d 	bl	800e928 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}

080074c0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f007 fa42 	bl	800e956 <USB_ReadInterrupts>
 80074d2:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fb06 	bl	8007af0 <PCD_EP_ISR_Handler>

    return;
 80074e4:	e110      	b.n	8007708 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d013      	beq.n	8007518 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007502:	b292      	uxth	r2, r2
 8007504:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f009 f9b2 	bl	8010872 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800750e:	2100      	movs	r1, #0
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f8fc 	bl	800770e <HAL_PCD_SetAddress>

    return;
 8007516:	e0f7      	b.n	8007708 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00c      	beq.n	800753c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800752a:	b29a      	uxth	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007534:	b292      	uxth	r2, r2
 8007536:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800753a:	e0e5      	b.n	8007708 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00c      	beq.n	8007560 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800754e:	b29a      	uxth	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007558:	b292      	uxth	r2, r2
 800755a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800755e:	e0d3      	b.n	8007708 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d034      	beq.n	80075d4 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007572:	b29a      	uxth	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 0204 	bic.w	r2, r2, #4
 800757c:	b292      	uxth	r2, r2
 800757e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800758a:	b29a      	uxth	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0208 	bic.w	r2, r2, #8
 8007594:	b292      	uxth	r2, r2
 8007596:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d107      	bne.n	80075b4 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80075ac:	2100      	movs	r1, #0
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f009 fb52 	bl	8010c58 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f009 f995 	bl	80108e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80075cc:	b292      	uxth	r2, r2
 80075ce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80075d2:	e099      	b.n	8007708 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d027      	beq.n	800762e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f042 0208 	orr.w	r2, r2, #8
 80075f0:	b292      	uxth	r2, r2
 80075f2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80075fe:	b29a      	uxth	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007608:	b292      	uxth	r2, r2
 800760a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007616:	b29a      	uxth	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0204 	orr.w	r2, r2, #4
 8007620:	b292      	uxth	r2, r2
 8007622:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f009 f942 	bl	80108b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800762c:	e06c      	b.n	8007708 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007634:	2b00      	cmp	r3, #0
 8007636:	d040      	beq.n	80076ba <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007640:	b29a      	uxth	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800764a:	b292      	uxth	r2, r2
 800764c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8007656:	2b00      	cmp	r3, #0
 8007658:	d12b      	bne.n	80076b2 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007662:	b29a      	uxth	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f042 0204 	orr.w	r2, r2, #4
 800766c:	b292      	uxth	r2, r2
 800766e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800767a:	b29a      	uxth	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0208 	orr.w	r2, r2, #8
 8007684:	b292      	uxth	r2, r2
 8007686:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800769a:	b29b      	uxth	r3, r3
 800769c:	089b      	lsrs	r3, r3, #2
 800769e:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80076a8:	2101      	movs	r1, #1
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f009 fad4 	bl	8010c58 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80076b0:	e02a      	b.n	8007708 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f009 f8fc 	bl	80108b0 <HAL_PCD_SuspendCallback>
    return;
 80076b8:	e026      	b.n	8007708 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00f      	beq.n	80076e4 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80076d6:	b292      	uxth	r2, r2
 80076d8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f009 f8ba 	bl	8010856 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80076e2:	e011      	b.n	8007708 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00c      	beq.n	8007708 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80076f6:	b29a      	uxth	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007700:	b292      	uxth	r2, r2
 8007702:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007706:	bf00      	nop
  }
}
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b082      	sub	sp, #8
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	460b      	mov	r3, r1
 8007718:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007720:	2b01      	cmp	r3, #1
 8007722:	d101      	bne.n	8007728 <HAL_PCD_SetAddress+0x1a>
 8007724:	2302      	movs	r3, #2
 8007726:	e012      	b.n	800774e <HAL_PCD_SetAddress+0x40>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	78fa      	ldrb	r2, [r7, #3]
 8007734:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	78fa      	ldrb	r2, [r7, #3]
 800773c:	4611      	mov	r1, r2
 800773e:	4618      	mov	r0, r3
 8007740:	f007 f8de 	bl	800e900 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	4608      	mov	r0, r1
 8007760:	4611      	mov	r1, r2
 8007762:	461a      	mov	r2, r3
 8007764:	4603      	mov	r3, r0
 8007766:	70fb      	strb	r3, [r7, #3]
 8007768:	460b      	mov	r3, r1
 800776a:	803b      	strh	r3, [r7, #0]
 800776c:	4613      	mov	r3, r2
 800776e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007778:	2b00      	cmp	r3, #0
 800777a:	da0e      	bge.n	800779a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800777c:	78fb      	ldrb	r3, [r7, #3]
 800777e:	f003 0207 	and.w	r2, r3, #7
 8007782:	4613      	mov	r3, r2
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	00db      	lsls	r3, r3, #3
 800778a:	3310      	adds	r3, #16
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	4413      	add	r3, r2
 8007790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2201      	movs	r2, #1
 8007796:	705a      	strb	r2, [r3, #1]
 8007798:	e00e      	b.n	80077b8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800779a:	78fb      	ldrb	r3, [r7, #3]
 800779c:	f003 0207 	and.w	r2, r3, #7
 80077a0:	4613      	mov	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	00db      	lsls	r3, r3, #3
 80077a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	4413      	add	r3, r2
 80077b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	f003 0307 	and.w	r3, r3, #7
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80077c4:	883b      	ldrh	r3, [r7, #0]
 80077c6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	78ba      	ldrb	r2, [r7, #2]
 80077d2:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80077d4:	78bb      	ldrb	r3, [r7, #2]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d102      	bne.n	80077e0 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d101      	bne.n	80077ee <HAL_PCD_EP_Open+0x98>
 80077ea:	2302      	movs	r3, #2
 80077ec:	e00e      	b.n	800780c <HAL_PCD_EP_Open+0xb6>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68f9      	ldr	r1, [r7, #12]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f004 fe1d 	bl	800c43c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800780a:	7afb      	ldrb	r3, [r7, #11]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007820:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007824:	2b00      	cmp	r3, #0
 8007826:	da0e      	bge.n	8007846 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007828:	78fb      	ldrb	r3, [r7, #3]
 800782a:	f003 0207 	and.w	r2, r3, #7
 800782e:	4613      	mov	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	4413      	add	r3, r2
 8007834:	00db      	lsls	r3, r3, #3
 8007836:	3310      	adds	r3, #16
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	4413      	add	r3, r2
 800783c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2201      	movs	r2, #1
 8007842:	705a      	strb	r2, [r3, #1]
 8007844:	e00e      	b.n	8007864 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007846:	78fb      	ldrb	r3, [r7, #3]
 8007848:	f003 0207 	and.w	r2, r3, #7
 800784c:	4613      	mov	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	4413      	add	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	b2da      	uxtb	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007876:	2b01      	cmp	r3, #1
 8007878:	d101      	bne.n	800787e <HAL_PCD_EP_Close+0x6a>
 800787a:	2302      	movs	r3, #2
 800787c:	e00e      	b.n	800789c <HAL_PCD_EP_Close+0x88>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68f9      	ldr	r1, [r7, #12]
 800788c:	4618      	mov	r0, r3
 800788e:	f005 f999 	bl	800cbc4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	607a      	str	r2, [r7, #4]
 80078ae:	603b      	str	r3, [r7, #0]
 80078b0:	460b      	mov	r3, r1
 80078b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	f003 0207 	and.w	r2, r3, #7
 80078ba:	4613      	mov	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	00db      	lsls	r3, r3, #3
 80078c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	683a      	ldr	r2, [r7, #0]
 80078d6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	2200      	movs	r2, #0
 80078dc:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	2200      	movs	r2, #0
 80078e2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80078e4:	7afb      	ldrb	r3, [r7, #11]
 80078e6:	f003 0307 	and.w	r3, r3, #7
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6979      	ldr	r1, [r7, #20]
 80078f6:	4618      	mov	r0, r3
 80078f8:	f005 fb51 	bl	800cf9e <USB_EPStartXfer>

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3718      	adds	r7, #24
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007906:	b480      	push	{r7}
 8007908:	b083      	sub	sp, #12
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
 800790e:	460b      	mov	r3, r1
 8007910:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007912:	78fb      	ldrb	r3, [r7, #3]
 8007914:	f003 0207 	and.w	r2, r3, #7
 8007918:	6879      	ldr	r1, [r7, #4]
 800791a:	4613      	mov	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	00db      	lsls	r3, r3, #3
 8007922:	440b      	add	r3, r1
 8007924:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007928:	681b      	ldr	r3, [r3, #0]
}
 800792a:	4618      	mov	r0, r3
 800792c:	370c      	adds	r7, #12
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b086      	sub	sp, #24
 800793a:	af00      	add	r7, sp, #0
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	607a      	str	r2, [r7, #4]
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	460b      	mov	r3, r1
 8007944:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007946:	7afb      	ldrb	r3, [r7, #11]
 8007948:	f003 0207 	and.w	r2, r3, #7
 800794c:	4613      	mov	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	3310      	adds	r3, #16
 8007956:	68fa      	ldr	r2, [r7, #12]
 8007958:	4413      	add	r3, r2
 800795a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	683a      	ldr	r2, [r7, #0]
 8007974:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2200      	movs	r2, #0
 800797a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	2201      	movs	r2, #1
 8007980:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007982:	7afb      	ldrb	r3, [r7, #11]
 8007984:	f003 0307 	and.w	r3, r3, #7
 8007988:	b2da      	uxtb	r2, r3
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6979      	ldr	r1, [r7, #20]
 8007994:	4618      	mov	r0, r3
 8007996:	f005 fb02 	bl	800cf9e <USB_EPStartXfer>

  return HAL_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3718      	adds	r7, #24
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	460b      	mov	r3, r1
 80079ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	f003 0307 	and.w	r3, r3, #7
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	7912      	ldrb	r2, [r2, #4]
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d901      	bls.n	80079c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e03e      	b.n	8007a40 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80079c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	da0e      	bge.n	80079e8 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079ca:	78fb      	ldrb	r3, [r7, #3]
 80079cc:	f003 0207 	and.w	r2, r3, #7
 80079d0:	4613      	mov	r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	4413      	add	r3, r2
 80079d6:	00db      	lsls	r3, r3, #3
 80079d8:	3310      	adds	r3, #16
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	4413      	add	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2201      	movs	r2, #1
 80079e4:	705a      	strb	r2, [r3, #1]
 80079e6:	e00c      	b.n	8007a02 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80079e8:	78fa      	ldrb	r2, [r7, #3]
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	00db      	lsls	r3, r3, #3
 80079f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	4413      	add	r3, r2
 80079fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2201      	movs	r2, #1
 8007a06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a08:	78fb      	ldrb	r3, [r7, #3]
 8007a0a:	f003 0307 	and.w	r3, r3, #7
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <HAL_PCD_EP_SetStall+0x7e>
 8007a1e:	2302      	movs	r3, #2
 8007a20:	e00e      	b.n	8007a40 <HAL_PCD_EP_SetStall+0x9c>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f006 fe66 	bl	800e702 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}

08007a48 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	460b      	mov	r3, r1
 8007a52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007a54:	78fb      	ldrb	r3, [r7, #3]
 8007a56:	f003 030f 	and.w	r3, r3, #15
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	7912      	ldrb	r2, [r2, #4]
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d901      	bls.n	8007a66 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007a62:	2301      	movs	r3, #1
 8007a64:	e040      	b.n	8007ae8 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	da0e      	bge.n	8007a8c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a6e:	78fb      	ldrb	r3, [r7, #3]
 8007a70:	f003 0207 	and.w	r2, r3, #7
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	3310      	adds	r3, #16
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	4413      	add	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2201      	movs	r2, #1
 8007a88:	705a      	strb	r2, [r3, #1]
 8007a8a:	e00e      	b.n	8007aaa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a8c:	78fb      	ldrb	r3, [r7, #3]
 8007a8e:	f003 0207 	and.w	r2, r3, #7
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ab0:	78fb      	ldrb	r3, [r7, #3]
 8007ab2:	f003 0307 	and.w	r3, r3, #7
 8007ab6:	b2da      	uxtb	r2, r3
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d101      	bne.n	8007aca <HAL_PCD_EP_ClrStall+0x82>
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	e00e      	b.n	8007ae8 <HAL_PCD_EP_ClrStall+0xa0>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68f9      	ldr	r1, [r7, #12]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f006 fe63 	bl	800e7a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b096      	sub	sp, #88	@ 0x58
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007af8:	e3ad      	b.n	8008256 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007b02:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007b06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	f003 030f 	and.w	r3, r3, #15
 8007b10:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8007b14:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f040 816f 	bne.w	8007dfc <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007b1e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007b22:	f003 0310 	and.w	r3, r3, #16
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d14c      	bne.n	8007bc4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007b36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b3a:	81fb      	strh	r3, [r7, #14]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	89fb      	ldrh	r3, [r7, #14]
 8007b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	3310      	adds	r3, #16
 8007b52:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	461a      	mov	r2, r3
 8007b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	00db      	lsls	r3, r3, #3
 8007b66:	4413      	add	r3, r2
 8007b68:	687a      	ldr	r2, [r7, #4]
 8007b6a:	6812      	ldr	r2, [r2, #0]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007b72:	881b      	ldrh	r3, [r3, #0]
 8007b74:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b7a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b7e:	695a      	ldr	r2, [r3, #20]
 8007b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b82:	69db      	ldr	r3, [r3, #28]
 8007b84:	441a      	add	r2, r3
 8007b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b88:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f008 fe48 	bl	8010822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	7b1b      	ldrb	r3, [r3, #12]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 835c 	beq.w	8008256 <PCD_EP_ISR_Handler+0x766>
 8007b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	f040 8357 	bne.w	8008256 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	7b1b      	ldrb	r3, [r3, #12]
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	731a      	strb	r2, [r3, #12]
 8007bc2:	e348      	b.n	8008256 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007bca:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	881b      	ldrh	r3, [r3, #0]
 8007bd2:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007bd6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007bda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d032      	beq.n	8007c48 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	461a      	mov	r2, r3
 8007bee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	00db      	lsls	r3, r3, #3
 8007bf4:	4413      	add	r3, r2
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	6812      	ldr	r2, [r2, #0]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c00:	881b      	ldrh	r3, [r3, #0]
 8007c02:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007c06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c08:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6818      	ldr	r0, [r3, #0]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c16:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c1a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	f006 feec 	bl	800e9fa <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007c2e:	4013      	ands	r3, r2
 8007c30:	823b      	strh	r3, [r7, #16]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	8a3a      	ldrh	r2, [r7, #16]
 8007c38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007c3c:	b292      	uxth	r2, r2
 8007c3e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f008 fdc1 	bl	80107c8 <HAL_PCD_SetupStageCallback>
 8007c46:	e306      	b.n	8008256 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007c48:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f280 8302 	bge.w	8008256 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007c5e:	4013      	ands	r3, r2
 8007c60:	83fb      	strh	r3, [r7, #30]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	8bfa      	ldrh	r2, [r7, #30]
 8007c68:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007c6c:	b292      	uxth	r2, r2
 8007c6e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	00db      	lsls	r3, r3, #3
 8007c82:	4413      	add	r3, r2
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	6812      	ldr	r2, [r2, #0]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c8e:	881b      	ldrh	r3, [r3, #0]
 8007c90:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007c94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c96:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c9a:	69db      	ldr	r3, [r3, #28]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d019      	beq.n	8007cd4 <PCD_EP_ISR_Handler+0x1e4>
 8007ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d015      	beq.n	8007cd4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6818      	ldr	r0, [r3, #0]
 8007cac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cae:	6959      	ldr	r1, [r3, #20]
 8007cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cb2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007cb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cb6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f006 fe9e 	bl	800e9fa <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cc0:	695a      	ldr	r2, [r3, #20]
 8007cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	441a      	add	r2, r3
 8007cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007ccc:	2100      	movs	r1, #0
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f008 fd8c 	bl	80107ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	881b      	ldrh	r3, [r3, #0]
 8007cda:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007cde:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007ce2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f040 82b5 	bne.w	8008256 <PCD_EP_ISR_Handler+0x766>
 8007cec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007cf0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007cf4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007cf8:	f000 82ad 	beq.w	8008256 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	61bb      	str	r3, [r7, #24]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	4413      	add	r3, r2
 8007d12:	61bb      	str	r3, [r7, #24]
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	881b      	ldrh	r3, [r3, #0]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d26:	b29a      	uxth	r2, r3
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	801a      	strh	r2, [r3, #0]
 8007d2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10a      	bne.n	8007d4a <PCD_EP_ISR_Handler+0x25a>
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	881b      	ldrh	r3, [r3, #0]
 8007d38:	b29b      	uxth	r3, r3
 8007d3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	801a      	strh	r2, [r3, #0]
 8007d48:	e039      	b.n	8007dbe <PCD_EP_ISR_Handler+0x2ce>
 8007d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d50:	d818      	bhi.n	8007d84 <PCD_EP_ISR_Handler+0x294>
 8007d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	085b      	lsrs	r3, r3, #1
 8007d58:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <PCD_EP_ISR_Handler+0x27c>
 8007d66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d68:	3301      	adds	r3, #1
 8007d6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	881b      	ldrh	r3, [r3, #0]
 8007d70:	b29a      	uxth	r2, r3
 8007d72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	029b      	lsls	r3, r3, #10
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	801a      	strh	r2, [r3, #0]
 8007d82:	e01c      	b.n	8007dbe <PCD_EP_ISR_Handler+0x2ce>
 8007d84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	095b      	lsrs	r3, r3, #5
 8007d8a:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	f003 031f 	and.w	r3, r3, #31
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d102      	bne.n	8007d9e <PCD_EP_ISR_Handler+0x2ae>
 8007d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	881b      	ldrh	r3, [r3, #0]
 8007da2:	b29a      	uxth	r2, r3
 8007da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	029b      	lsls	r3, r3, #10
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	4313      	orrs	r3, r2
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007db4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	881b      	ldrh	r3, [r3, #0]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dce:	827b      	strh	r3, [r7, #18]
 8007dd0:	8a7b      	ldrh	r3, [r7, #18]
 8007dd2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007dd6:	827b      	strh	r3, [r7, #18]
 8007dd8:	8a7b      	ldrh	r3, [r7, #18]
 8007dda:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007dde:	827b      	strh	r3, [r7, #18]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	8a7b      	ldrh	r3, [r7, #18]
 8007de6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007df2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	8013      	strh	r3, [r2, #0]
 8007dfa:	e22c      	b.n	8008256 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	881b      	ldrh	r3, [r3, #0]
 8007e0c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007e10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f280 80f6 	bge.w	8008006 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	881b      	ldrh	r3, [r3, #0]
 8007e2a:	b29a      	uxth	r2, r3
 8007e2c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007e30:	4013      	ands	r3, r2
 8007e32:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8007e48:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007e4c:	b292      	uxth	r2, r2
 8007e4e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007e50:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	00db      	lsls	r3, r3, #3
 8007e5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	4413      	add	r3, r2
 8007e64:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e68:	7b1b      	ldrb	r3, [r3, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d123      	bne.n	8007eb6 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	461a      	mov	r2, r3
 8007e7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	00db      	lsls	r3, r3, #3
 8007e80:	4413      	add	r3, r2
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	6812      	ldr	r2, [r2, #0]
 8007e86:	4413      	add	r3, r2
 8007e88:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e92:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8007e96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f000 808e 	beq.w	8007fbc <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6818      	ldr	r0, [r3, #0]
 8007ea4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ea6:	6959      	ldr	r1, [r3, #20]
 8007ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eaa:	88da      	ldrh	r2, [r3, #6]
 8007eac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007eb0:	f006 fda3 	bl	800e9fa <USB_ReadPMA>
 8007eb4:	e082      	b.n	8007fbc <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eb8:	78db      	ldrb	r3, [r3, #3]
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d10a      	bne.n	8007ed4 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007ebe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f9d3 	bl	8008272 <HAL_PCD_EP_DB_Receive>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8007ed2:	e073      	b.n	8007fbc <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eee:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	441a      	add	r2, r3
 8007f00:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8007f04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f14:	b29b      	uxth	r3, r3
 8007f16:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f20:	781b      	ldrb	r3, [r3, #0]
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	4413      	add	r3, r2
 8007f26:	881b      	ldrh	r3, [r3, #0]
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d022      	beq.n	8007f78 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	00db      	lsls	r3, r3, #3
 8007f44:	4413      	add	r3, r2
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	6812      	ldr	r2, [r2, #0]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007f50:	881b      	ldrh	r3, [r3, #0]
 8007f52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f56:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007f5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d02c      	beq.n	8007fbc <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6818      	ldr	r0, [r3, #0]
 8007f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f68:	6959      	ldr	r1, [r3, #20]
 8007f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f6c:	891a      	ldrh	r2, [r3, #8]
 8007f6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007f72:	f006 fd42 	bl	800e9fa <USB_ReadPMA>
 8007f76:	e021      	b.n	8007fbc <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	461a      	mov	r2, r3
 8007f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	00db      	lsls	r3, r3, #3
 8007f8a:	4413      	add	r3, r2
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	6812      	ldr	r2, [r2, #0]
 8007f90:	4413      	add	r3, r2
 8007f92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f96:	881b      	ldrh	r3, [r3, #0]
 8007f98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f9c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007fa0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d009      	beq.n	8007fbc <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6818      	ldr	r0, [r3, #0]
 8007fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fae:	6959      	ldr	r1, [r3, #20]
 8007fb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fb2:	895a      	ldrh	r2, [r3, #10]
 8007fb4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007fb8:	f006 fd1f 	bl	800e9fa <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007fbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fbe:	69da      	ldr	r2, [r3, #28]
 8007fc0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007fc4:	441a      	add	r2, r3
 8007fc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fc8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fcc:	695a      	ldr	r2, [r3, #20]
 8007fce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007fd2:	441a      	add	r2, r3
 8007fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fd6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d005      	beq.n	8007fec <PCD_EP_ISR_Handler+0x4fc>
 8007fe0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8007fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d206      	bcs.n	8007ffa <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f008 fbfa 	bl	80107ec <HAL_PCD_DataOutStageCallback>
 8007ff8:	e005      	b.n	8008006 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008000:	4618      	mov	r0, r3
 8008002:	f004 ffcc 	bl	800cf9e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008006:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800800a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 8121 	beq.w	8008256 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8008014:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008018:	4613      	mov	r3, r2
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	4413      	add	r3, r2
 800801e:	00db      	lsls	r3, r3, #3
 8008020:	3310      	adds	r3, #16
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	4413      	add	r3, r2
 8008026:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	461a      	mov	r2, r3
 800802e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	4413      	add	r3, r2
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	b29b      	uxth	r3, r3
 800803a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800803e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008042:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	461a      	mov	r2, r3
 800804c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008050:	009b      	lsls	r3, r3, #2
 8008052:	441a      	add	r2, r3
 8008054:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008058:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800805c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008060:	b29b      	uxth	r3, r3
 8008062:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008066:	78db      	ldrb	r3, [r3, #3]
 8008068:	2b01      	cmp	r3, #1
 800806a:	f040 80a2 	bne.w	80081b2 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 800806e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008070:	2200      	movs	r2, #0
 8008072:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008076:	7b1b      	ldrb	r3, [r3, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	f000 8093 	beq.w	80081a4 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800807e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	d046      	beq.n	8008118 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800808a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800808c:	785b      	ldrb	r3, [r3, #1]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d126      	bne.n	80080e0 <PCD_EP_ISR_Handler+0x5f0>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	627b      	str	r3, [r7, #36]	@ 0x24
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	461a      	mov	r2, r3
 80080a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a6:	4413      	add	r3, r2
 80080a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80080aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	00da      	lsls	r2, r3, #3
 80080b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b2:	4413      	add	r3, r2
 80080b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080b8:	623b      	str	r3, [r7, #32]
 80080ba:	6a3b      	ldr	r3, [r7, #32]
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	b29b      	uxth	r3, r3
 80080c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	801a      	strh	r2, [r3, #0]
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80080d8:	b29a      	uxth	r2, r3
 80080da:	6a3b      	ldr	r3, [r7, #32]
 80080dc:	801a      	strh	r2, [r3, #0]
 80080de:	e061      	b.n	80081a4 <PCD_EP_ISR_Handler+0x6b4>
 80080e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080e2:	785b      	ldrb	r3, [r3, #1]
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d15d      	bne.n	80081a4 <PCD_EP_ISR_Handler+0x6b4>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	461a      	mov	r2, r3
 80080fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fc:	4413      	add	r3, r2
 80080fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008100:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	00da      	lsls	r2, r3, #3
 8008106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008108:	4413      	add	r3, r2
 800810a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800810e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008112:	2200      	movs	r2, #0
 8008114:	801a      	strh	r2, [r3, #0]
 8008116:	e045      	b.n	80081a4 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800811e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008120:	785b      	ldrb	r3, [r3, #1]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d126      	bne.n	8008174 <PCD_EP_ISR_Handler+0x684>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	637b      	str	r3, [r7, #52]	@ 0x34
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008134:	b29b      	uxth	r3, r3
 8008136:	461a      	mov	r2, r3
 8008138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813a:	4413      	add	r3, r2
 800813c:	637b      	str	r3, [r7, #52]	@ 0x34
 800813e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	00da      	lsls	r2, r3, #3
 8008144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008146:	4413      	add	r3, r2
 8008148:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800814c:	633b      	str	r3, [r7, #48]	@ 0x30
 800814e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008150:	881b      	ldrh	r3, [r3, #0]
 8008152:	b29b      	uxth	r3, r3
 8008154:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008158:	b29a      	uxth	r2, r3
 800815a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815c:	801a      	strh	r2, [r3, #0]
 800815e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008160:	881b      	ldrh	r3, [r3, #0]
 8008162:	b29b      	uxth	r3, r3
 8008164:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008168:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800816c:	b29a      	uxth	r2, r3
 800816e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008170:	801a      	strh	r2, [r3, #0]
 8008172:	e017      	b.n	80081a4 <PCD_EP_ISR_Handler+0x6b4>
 8008174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008176:	785b      	ldrb	r3, [r3, #1]
 8008178:	2b01      	cmp	r3, #1
 800817a:	d113      	bne.n	80081a4 <PCD_EP_ISR_Handler+0x6b4>
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008184:	b29b      	uxth	r3, r3
 8008186:	461a      	mov	r2, r3
 8008188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800818a:	4413      	add	r3, r2
 800818c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800818e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	00da      	lsls	r2, r3, #3
 8008194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008196:	4413      	add	r3, r2
 8008198:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800819c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800819e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a0:	2200      	movs	r2, #0
 80081a2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80081a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	4619      	mov	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f008 fb39 	bl	8010822 <HAL_PCD_DataInStageCallback>
 80081b0:	e051      	b.n	8008256 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80081b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80081b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d144      	bne.n	8008248 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081c6:	b29b      	uxth	r3, r3
 80081c8:	461a      	mov	r2, r3
 80081ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	00db      	lsls	r3, r3, #3
 80081d0:	4413      	add	r3, r2
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	6812      	ldr	r2, [r2, #0]
 80081d6:	4413      	add	r3, r2
 80081d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081dc:	881b      	ldrh	r3, [r3, #0]
 80081de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80081e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d907      	bls.n	8008202 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80081f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081f4:	699a      	ldr	r2, [r3, #24]
 80081f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80081fa:	1ad2      	subs	r2, r2, r3
 80081fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081fe:	619a      	str	r2, [r3, #24]
 8008200:	e002      	b.n	8008208 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8008202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008204:	2200      	movs	r2, #0
 8008206:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d106      	bne.n	800821e <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	4619      	mov	r1, r3
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f008 fb03 	bl	8010822 <HAL_PCD_DataInStageCallback>
 800821c:	e01b      	b.n	8008256 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800821e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008220:	695a      	ldr	r2, [r3, #20]
 8008222:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008226:	441a      	add	r2, r3
 8008228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800822a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800822c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800822e:	69da      	ldr	r2, [r3, #28]
 8008230:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008234:	441a      	add	r2, r3
 8008236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008238:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008240:	4618      	mov	r0, r3
 8008242:	f004 feac 	bl	800cf9e <USB_EPStartXfer>
 8008246:	e006      	b.n	8008256 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008248:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800824c:	461a      	mov	r2, r3
 800824e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f000 f917 	bl	8008484 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800825e:	b29b      	uxth	r3, r3
 8008260:	b21b      	sxth	r3, r3
 8008262:	2b00      	cmp	r3, #0
 8008264:	f6ff ac49 	blt.w	8007afa <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3758      	adds	r7, #88	@ 0x58
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b088      	sub	sp, #32
 8008276:	af00      	add	r7, sp, #0
 8008278:	60f8      	str	r0, [r7, #12]
 800827a:	60b9      	str	r1, [r7, #8]
 800827c:	4613      	mov	r3, r2
 800827e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008280:	88fb      	ldrh	r3, [r7, #6]
 8008282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008286:	2b00      	cmp	r3, #0
 8008288:	d07c      	beq.n	8008384 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008292:	b29b      	uxth	r3, r3
 8008294:	461a      	mov	r2, r3
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	00db      	lsls	r3, r3, #3
 800829c:	4413      	add	r3, r2
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	6812      	ldr	r2, [r2, #0]
 80082a2:	4413      	add	r3, r2
 80082a4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80082a8:	881b      	ldrh	r3, [r3, #0]
 80082aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	699a      	ldr	r2, [r3, #24]
 80082b4:	8b7b      	ldrh	r3, [r7, #26]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d306      	bcc.n	80082c8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	8b7b      	ldrh	r3, [r7, #26]
 80082c0:	1ad2      	subs	r2, r2, r3
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	619a      	str	r2, [r3, #24]
 80082c6:	e002      	b.n	80082ce <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2200      	movs	r2, #0
 80082cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	699b      	ldr	r3, [r3, #24]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d123      	bne.n	800831e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80082ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082f0:	833b      	strh	r3, [r7, #24]
 80082f2:	8b3b      	ldrh	r3, [r7, #24]
 80082f4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80082f8:	833b      	strh	r3, [r7, #24]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	009b      	lsls	r3, r3, #2
 8008306:	441a      	add	r2, r3
 8008308:	8b3b      	ldrh	r3, [r7, #24]
 800830a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800830e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008312:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800831a:	b29b      	uxth	r3, r3
 800831c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800831e:	88fb      	ldrh	r3, [r7, #6]
 8008320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008324:	2b00      	cmp	r3, #0
 8008326:	d01f      	beq.n	8008368 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	461a      	mov	r2, r3
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	881b      	ldrh	r3, [r3, #0]
 8008338:	b29b      	uxth	r3, r3
 800833a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800833e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008342:	82fb      	strh	r3, [r7, #22]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	461a      	mov	r2, r3
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	441a      	add	r2, r3
 8008352:	8afb      	ldrh	r3, [r7, #22]
 8008354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800835c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008360:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008364:	b29b      	uxth	r3, r3
 8008366:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008368:	8b7b      	ldrh	r3, [r7, #26]
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 8085 	beq.w	800847a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	6818      	ldr	r0, [r3, #0]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	6959      	ldr	r1, [r3, #20]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	891a      	ldrh	r2, [r3, #8]
 800837c:	8b7b      	ldrh	r3, [r7, #26]
 800837e:	f006 fb3c 	bl	800e9fa <USB_ReadPMA>
 8008382:	e07a      	b.n	800847a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800838c:	b29b      	uxth	r3, r3
 800838e:	461a      	mov	r2, r3
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	00db      	lsls	r3, r3, #3
 8008396:	4413      	add	r3, r2
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	6812      	ldr	r2, [r2, #0]
 800839c:	4413      	add	r3, r2
 800839e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80083a2:	881b      	ldrh	r3, [r3, #0]
 80083a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083a8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	699a      	ldr	r2, [r3, #24]
 80083ae:	8b7b      	ldrh	r3, [r7, #26]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d306      	bcc.n	80083c2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	699a      	ldr	r2, [r3, #24]
 80083b8:	8b7b      	ldrh	r3, [r7, #26]
 80083ba:	1ad2      	subs	r2, r2, r3
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	619a      	str	r2, [r3, #24]
 80083c0:	e002      	b.n	80083c8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2200      	movs	r2, #0
 80083c6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	699b      	ldr	r3, [r3, #24]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d123      	bne.n	8008418 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	461a      	mov	r2, r3
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4413      	add	r3, r2
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	b29b      	uxth	r3, r3
 80083e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ea:	83fb      	strh	r3, [r7, #30]
 80083ec:	8bfb      	ldrh	r3, [r7, #30]
 80083ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80083f2:	83fb      	strh	r3, [r7, #30]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	009b      	lsls	r3, r3, #2
 8008400:	441a      	add	r2, r3
 8008402:	8bfb      	ldrh	r3, [r7, #30]
 8008404:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008408:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800840c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008414:	b29b      	uxth	r3, r3
 8008416:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008418:	88fb      	ldrh	r3, [r7, #6]
 800841a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	d11f      	bne.n	8008462 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	881b      	ldrh	r3, [r3, #0]
 8008432:	b29b      	uxth	r3, r3
 8008434:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008438:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800843c:	83bb      	strh	r3, [r7, #28]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	441a      	add	r2, r3
 800844c:	8bbb      	ldrh	r3, [r7, #28]
 800844e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008452:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800845a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800845e:	b29b      	uxth	r3, r3
 8008460:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008462:	8b7b      	ldrh	r3, [r7, #26]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d008      	beq.n	800847a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6818      	ldr	r0, [r3, #0]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	6959      	ldr	r1, [r3, #20]
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	895a      	ldrh	r2, [r3, #10]
 8008474:	8b7b      	ldrh	r3, [r7, #26]
 8008476:	f006 fac0 	bl	800e9fa <USB_ReadPMA>
    }
  }

  return count;
 800847a:	8b7b      	ldrh	r3, [r7, #26]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3720      	adds	r7, #32
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b0a4      	sub	sp, #144	@ 0x90
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	4613      	mov	r3, r2
 8008490:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008492:	88fb      	ldrh	r3, [r7, #6]
 8008494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 81db 	beq.w	8008854 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	461a      	mov	r2, r3
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	4413      	add	r3, r2
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	6812      	ldr	r2, [r2, #0]
 80084b6:	4413      	add	r3, r2
 80084b8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084c2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	699a      	ldr	r2, [r3, #24]
 80084ca:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d907      	bls.n	80084e2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	699a      	ldr	r2, [r3, #24]
 80084d6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80084da:	1ad2      	subs	r2, r2, r3
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	619a      	str	r2, [r3, #24]
 80084e0:	e002      	b.n	80084e8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	2200      	movs	r2, #0
 80084e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	699b      	ldr	r3, [r3, #24]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f040 80b9 	bne.w	8008664 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	785b      	ldrb	r3, [r3, #1]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d126      	bne.n	8008548 <HAL_PCD_EP_DB_Transmit+0xc4>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008508:	b29b      	uxth	r3, r3
 800850a:	461a      	mov	r2, r3
 800850c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850e:	4413      	add	r3, r2
 8008510:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	00da      	lsls	r2, r3, #3
 8008518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800851a:	4413      	add	r3, r2
 800851c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008520:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008524:	881b      	ldrh	r3, [r3, #0]
 8008526:	b29b      	uxth	r3, r3
 8008528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800852c:	b29a      	uxth	r2, r3
 800852e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008530:	801a      	strh	r2, [r3, #0]
 8008532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	b29b      	uxth	r3, r3
 8008538:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800853c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008540:	b29a      	uxth	r2, r3
 8008542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008544:	801a      	strh	r2, [r3, #0]
 8008546:	e01a      	b.n	800857e <HAL_PCD_EP_DB_Transmit+0xfa>
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	785b      	ldrb	r3, [r3, #1]
 800854c:	2b01      	cmp	r3, #1
 800854e:	d116      	bne.n	800857e <HAL_PCD_EP_DB_Transmit+0xfa>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	637b      	str	r3, [r7, #52]	@ 0x34
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800855e:	b29b      	uxth	r3, r3
 8008560:	461a      	mov	r2, r3
 8008562:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008564:	4413      	add	r3, r2
 8008566:	637b      	str	r3, [r7, #52]	@ 0x34
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	00da      	lsls	r2, r3, #3
 800856e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008570:	4413      	add	r3, r2
 8008572:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008576:	633b      	str	r3, [r7, #48]	@ 0x30
 8008578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800857a:	2200      	movs	r2, #0
 800857c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	627b      	str	r3, [r7, #36]	@ 0x24
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	785b      	ldrb	r3, [r3, #1]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d126      	bne.n	80085da <HAL_PCD_EP_DB_Transmit+0x156>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	61fb      	str	r3, [r7, #28]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800859a:	b29b      	uxth	r3, r3
 800859c:	461a      	mov	r2, r3
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	4413      	add	r3, r2
 80085a2:	61fb      	str	r3, [r7, #28]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	00da      	lsls	r2, r3, #3
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	4413      	add	r3, r2
 80085ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80085b2:	61bb      	str	r3, [r7, #24]
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	881b      	ldrh	r3, [r3, #0]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085be:	b29a      	uxth	r2, r3
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	801a      	strh	r2, [r3, #0]
 80085c4:	69bb      	ldr	r3, [r7, #24]
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085d2:	b29a      	uxth	r2, r3
 80085d4:	69bb      	ldr	r3, [r7, #24]
 80085d6:	801a      	strh	r2, [r3, #0]
 80085d8:	e017      	b.n	800860a <HAL_PCD_EP_DB_Transmit+0x186>
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	785b      	ldrb	r3, [r3, #1]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d113      	bne.n	800860a <HAL_PCD_EP_DB_Transmit+0x186>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	461a      	mov	r2, r3
 80085ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085f0:	4413      	add	r3, r2
 80085f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	00da      	lsls	r2, r3, #3
 80085fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fc:	4413      	add	r3, r2
 80085fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008602:	623b      	str	r3, [r7, #32]
 8008604:	6a3b      	ldr	r3, [r7, #32]
 8008606:	2200      	movs	r2, #0
 8008608:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	4619      	mov	r1, r3
 8008610:	68f8      	ldr	r0, [r7, #12]
 8008612:	f008 f906 	bl	8010822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008616:	88fb      	ldrh	r3, [r7, #6]
 8008618:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 82fa 	beq.w	8008c16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	461a      	mov	r2, r3
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	881b      	ldrh	r3, [r3, #0]
 8008632:	b29b      	uxth	r3, r3
 8008634:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008638:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800863c:	82fb      	strh	r3, [r7, #22]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	461a      	mov	r2, r3
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	441a      	add	r2, r3
 800864c:	8afb      	ldrh	r3, [r7, #22]
 800864e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008656:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800865a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800865e:	b29b      	uxth	r3, r3
 8008660:	8013      	strh	r3, [r2, #0]
 8008662:	e2d8      	b.n	8008c16 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008664:	88fb      	ldrh	r3, [r7, #6]
 8008666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d021      	beq.n	80086b2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	461a      	mov	r2, r3
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	881b      	ldrh	r3, [r3, #0]
 800867e:	b29b      	uxth	r3, r3
 8008680:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008688:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	461a      	mov	r2, r3
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	441a      	add	r2, r3
 800869a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800869e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	f040 82ac 	bne.w	8008c16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	695a      	ldr	r2, [r3, #20]
 80086c2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80086c6:	441a      	add	r2, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	69da      	ldr	r2, [r3, #28]
 80086d0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80086d4:	441a      	add	r2, r3
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	6a1a      	ldr	r2, [r3, #32]
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d30b      	bcc.n	80086fe <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	6a1a      	ldr	r2, [r3, #32]
 80086f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80086f6:	1ad2      	subs	r2, r2, r3
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	621a      	str	r2, [r3, #32]
 80086fc:	e017      	b.n	800872e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	6a1b      	ldr	r3, [r3, #32]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d108      	bne.n	8008718 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8008706:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800870a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008716:	e00a      	b.n	800872e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	6a1b      	ldr	r3, [r3, #32]
 8008724:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	2200      	movs	r2, #0
 800872c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	785b      	ldrb	r3, [r3, #1]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d165      	bne.n	8008802 <HAL_PCD_EP_DB_Transmit+0x37e>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008744:	b29b      	uxth	r3, r3
 8008746:	461a      	mov	r2, r3
 8008748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800874a:	4413      	add	r3, r2
 800874c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	00da      	lsls	r2, r3, #3
 8008754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008756:	4413      	add	r3, r2
 8008758:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800875c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800875e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008760:	881b      	ldrh	r3, [r3, #0]
 8008762:	b29b      	uxth	r3, r3
 8008764:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008768:	b29a      	uxth	r2, r3
 800876a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876c:	801a      	strh	r2, [r3, #0]
 800876e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008772:	2b00      	cmp	r3, #0
 8008774:	d10a      	bne.n	800878c <HAL_PCD_EP_DB_Transmit+0x308>
 8008776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008778:	881b      	ldrh	r3, [r3, #0]
 800877a:	b29b      	uxth	r3, r3
 800877c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008784:	b29a      	uxth	r2, r3
 8008786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008788:	801a      	strh	r2, [r3, #0]
 800878a:	e057      	b.n	800883c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800878c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008790:	2b3e      	cmp	r3, #62	@ 0x3e
 8008792:	d818      	bhi.n	80087c6 <HAL_PCD_EP_DB_Transmit+0x342>
 8008794:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008798:	085b      	lsrs	r3, r3, #1
 800879a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800879c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087a0:	f003 0301 	and.w	r3, r3, #1
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d002      	beq.n	80087ae <HAL_PCD_EP_DB_Transmit+0x32a>
 80087a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087aa:	3301      	adds	r3, #1
 80087ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b0:	881b      	ldrh	r3, [r3, #0]
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	029b      	lsls	r3, r3, #10
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	4313      	orrs	r3, r2
 80087be:	b29a      	uxth	r2, r3
 80087c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c2:	801a      	strh	r2, [r3, #0]
 80087c4:	e03a      	b.n	800883c <HAL_PCD_EP_DB_Transmit+0x3b8>
 80087c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087ca:	095b      	lsrs	r3, r3, #5
 80087cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087d2:	f003 031f 	and.w	r3, r3, #31
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d102      	bne.n	80087e0 <HAL_PCD_EP_DB_Transmit+0x35c>
 80087da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087dc:	3b01      	subs	r3, #1
 80087de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	029b      	lsls	r3, r3, #10
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	4313      	orrs	r3, r2
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fe:	801a      	strh	r2, [r3, #0]
 8008800:	e01c      	b.n	800883c <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	785b      	ldrb	r3, [r3, #1]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d118      	bne.n	800883c <HAL_PCD_EP_DB_Transmit+0x3b8>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008818:	b29b      	uxth	r3, r3
 800881a:	461a      	mov	r2, r3
 800881c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800881e:	4413      	add	r3, r2
 8008820:	647b      	str	r3, [r7, #68]	@ 0x44
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	00da      	lsls	r2, r3, #3
 8008828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800882a:	4413      	add	r3, r2
 800882c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008830:	643b      	str	r3, [r7, #64]	@ 0x40
 8008832:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008836:	b29a      	uxth	r2, r3
 8008838:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800883a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6818      	ldr	r0, [r3, #0]
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	6959      	ldr	r1, [r3, #20]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	891a      	ldrh	r2, [r3, #8]
 8008848:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800884c:	b29b      	uxth	r3, r3
 800884e:	f006 f892 	bl	800e976 <USB_WritePMA>
 8008852:	e1e0      	b.n	8008c16 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800885c:	b29b      	uxth	r3, r3
 800885e:	461a      	mov	r2, r3
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	00db      	lsls	r3, r3, #3
 8008866:	4413      	add	r3, r2
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	6812      	ldr	r2, [r2, #0]
 800886c:	4413      	add	r3, r2
 800886e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008872:	881b      	ldrh	r3, [r3, #0]
 8008874:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008878:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	699a      	ldr	r2, [r3, #24]
 8008880:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008884:	429a      	cmp	r2, r3
 8008886:	d307      	bcc.n	8008898 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	699a      	ldr	r2, [r3, #24]
 800888c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008890:	1ad2      	subs	r2, r2, r3
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	619a      	str	r2, [r3, #24]
 8008896:	e002      	b.n	800889e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2200      	movs	r2, #0
 800889c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f040 80c0 	bne.w	8008a28 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	785b      	ldrb	r3, [r3, #1]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d126      	bne.n	80088fe <HAL_PCD_EP_DB_Transmit+0x47a>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088be:	b29b      	uxth	r3, r3
 80088c0:	461a      	mov	r2, r3
 80088c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80088c4:	4413      	add	r3, r2
 80088c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	00da      	lsls	r2, r3, #3
 80088ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80088d0:	4413      	add	r3, r2
 80088d2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80088d6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088da:	881b      	ldrh	r3, [r3, #0]
 80088dc:	b29b      	uxth	r3, r3
 80088de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088e6:	801a      	strh	r2, [r3, #0]
 80088e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088ea:	881b      	ldrh	r3, [r3, #0]
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088f6:	b29a      	uxth	r2, r3
 80088f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088fa:	801a      	strh	r2, [r3, #0]
 80088fc:	e01a      	b.n	8008934 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	785b      	ldrb	r3, [r3, #1]
 8008902:	2b01      	cmp	r3, #1
 8008904:	d116      	bne.n	8008934 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	667b      	str	r3, [r7, #100]	@ 0x64
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008914:	b29b      	uxth	r3, r3
 8008916:	461a      	mov	r2, r3
 8008918:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800891a:	4413      	add	r3, r2
 800891c:	667b      	str	r3, [r7, #100]	@ 0x64
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	00da      	lsls	r2, r3, #3
 8008924:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008926:	4413      	add	r3, r2
 8008928:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800892c:	663b      	str	r3, [r7, #96]	@ 0x60
 800892e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008930:	2200      	movs	r2, #0
 8008932:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	677b      	str	r3, [r7, #116]	@ 0x74
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	785b      	ldrb	r3, [r3, #1]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d12b      	bne.n	800899a <HAL_PCD_EP_DB_Transmit+0x516>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008950:	b29b      	uxth	r3, r3
 8008952:	461a      	mov	r2, r3
 8008954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008956:	4413      	add	r3, r2
 8008958:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	00da      	lsls	r2, r3, #3
 8008960:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008962:	4413      	add	r3, r2
 8008964:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008968:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800896c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008970:	881b      	ldrh	r3, [r3, #0]
 8008972:	b29b      	uxth	r3, r3
 8008974:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008978:	b29a      	uxth	r2, r3
 800897a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800897e:	801a      	strh	r2, [r3, #0]
 8008980:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008984:	881b      	ldrh	r3, [r3, #0]
 8008986:	b29b      	uxth	r3, r3
 8008988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800898c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008990:	b29a      	uxth	r2, r3
 8008992:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008996:	801a      	strh	r2, [r3, #0]
 8008998:	e017      	b.n	80089ca <HAL_PCD_EP_DB_Transmit+0x546>
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	785b      	ldrb	r3, [r3, #1]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d113      	bne.n	80089ca <HAL_PCD_EP_DB_Transmit+0x546>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	461a      	mov	r2, r3
 80089ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089b0:	4413      	add	r3, r2
 80089b2:	677b      	str	r3, [r7, #116]	@ 0x74
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	00da      	lsls	r2, r3, #3
 80089ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089bc:	4413      	add	r3, r2
 80089be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80089c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80089c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80089c6:	2200      	movs	r2, #0
 80089c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	4619      	mov	r1, r3
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f007 ff26 	bl	8010822 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80089d6:	88fb      	ldrh	r3, [r7, #6]
 80089d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	f040 811a 	bne.w	8008c16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4413      	add	r3, r2
 80089f0:	881b      	ldrh	r3, [r3, #0]
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089fc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	461a      	mov	r2, r3
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	441a      	add	r2, r3
 8008a0e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008a12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a22:	b29b      	uxth	r3, r3
 8008a24:	8013      	strh	r3, [r2, #0]
 8008a26:	e0f6      	b.n	8008c16 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008a28:	88fb      	ldrh	r3, [r7, #6]
 8008a2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d121      	bne.n	8008a76 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	781b      	ldrb	r3, [r3, #0]
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	881b      	ldrh	r3, [r3, #0]
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a4c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	461a      	mov	r2, r3
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	441a      	add	r2, r3
 8008a5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008a62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	f040 80ca 	bne.w	8008c16 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	695a      	ldr	r2, [r3, #20]
 8008a86:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008a8a:	441a      	add	r2, r3
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	69da      	ldr	r2, [r3, #28]
 8008a94:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008a98:	441a      	add	r2, r3
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	6a1a      	ldr	r2, [r3, #32]
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d30b      	bcc.n	8008ac2 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	6a1a      	ldr	r2, [r3, #32]
 8008ab6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008aba:	1ad2      	subs	r2, r2, r3
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	621a      	str	r2, [r3, #32]
 8008ac0:	e017      	b.n	8008af2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d108      	bne.n	8008adc <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8008aca:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008ace:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008ada:	e00a      	b.n	8008af2 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	657b      	str	r3, [r7, #84]	@ 0x54
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	785b      	ldrb	r3, [r3, #1]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d165      	bne.n	8008bcc <HAL_PCD_EP_DB_Transmit+0x748>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	461a      	mov	r2, r3
 8008b12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b14:	4413      	add	r3, r2
 8008b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	00da      	lsls	r2, r3, #3
 8008b1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b20:	4413      	add	r3, r2
 8008b22:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b2a:	881b      	ldrh	r3, [r3, #0]
 8008b2c:	b29b      	uxth	r3, r3
 8008b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b36:	801a      	strh	r2, [r3, #0]
 8008b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10a      	bne.n	8008b56 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8008b40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b4e:	b29a      	uxth	r2, r3
 8008b50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b52:	801a      	strh	r2, [r3, #0]
 8008b54:	e054      	b.n	8008c00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b5a:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b5c:	d818      	bhi.n	8008b90 <HAL_PCD_EP_DB_Transmit+0x70c>
 8008b5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b62:	085b      	lsrs	r3, r3, #1
 8008b64:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d002      	beq.n	8008b78 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8008b72:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b74:	3301      	adds	r3, #1
 8008b76:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	029b      	lsls	r3, r3, #10
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	4313      	orrs	r3, r2
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b8c:	801a      	strh	r2, [r3, #0]
 8008b8e:	e037      	b.n	8008c00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008b90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b94:	095b      	lsrs	r3, r3, #5
 8008b96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b9c:	f003 031f 	and.w	r3, r3, #31
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d102      	bne.n	8008baa <HAL_PCD_EP_DB_Transmit+0x726>
 8008ba4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ba6:	3b01      	subs	r3, #1
 8008ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008baa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bac:	881b      	ldrh	r3, [r3, #0]
 8008bae:	b29a      	uxth	r2, r3
 8008bb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	029b      	lsls	r3, r3, #10
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bc8:	801a      	strh	r2, [r3, #0]
 8008bca:	e019      	b.n	8008c00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	785b      	ldrb	r3, [r3, #1]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d115      	bne.n	8008c00 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008bdc:	b29b      	uxth	r3, r3
 8008bde:	461a      	mov	r2, r3
 8008be0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008be2:	4413      	add	r3, r2
 8008be4:	657b      	str	r3, [r7, #84]	@ 0x54
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	00da      	lsls	r2, r3, #3
 8008bec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bee:	4413      	add	r3, r2
 8008bf0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008bf4:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bfa:	b29a      	uxth	r2, r3
 8008bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bfe:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	6818      	ldr	r0, [r3, #0]
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	6959      	ldr	r1, [r3, #20]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	895a      	ldrh	r2, [r3, #10]
 8008c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c10:	b29b      	uxth	r3, r3
 8008c12:	f005 feb0 	bl	800e976 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	4413      	add	r3, r2
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c30:	82bb      	strh	r3, [r7, #20]
 8008c32:	8abb      	ldrh	r3, [r7, #20]
 8008c34:	f083 0310 	eor.w	r3, r3, #16
 8008c38:	82bb      	strh	r3, [r7, #20]
 8008c3a:	8abb      	ldrh	r3, [r7, #20]
 8008c3c:	f083 0320 	eor.w	r3, r3, #32
 8008c40:	82bb      	strh	r3, [r7, #20]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	461a      	mov	r2, r3
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	441a      	add	r2, r3
 8008c50:	8abb      	ldrh	r3, [r7, #20]
 8008c52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3790      	adds	r7, #144	@ 0x90
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008c70:	b480      	push	{r7}
 8008c72:	b087      	sub	sp, #28
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	607b      	str	r3, [r7, #4]
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	817b      	strh	r3, [r7, #10]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008c82:	897b      	ldrh	r3, [r7, #10]
 8008c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00b      	beq.n	8008ca6 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c8e:	897b      	ldrh	r3, [r7, #10]
 8008c90:	f003 0207 	and.w	r2, r3, #7
 8008c94:	4613      	mov	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	00db      	lsls	r3, r3, #3
 8008c9c:	3310      	adds	r3, #16
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	617b      	str	r3, [r7, #20]
 8008ca4:	e009      	b.n	8008cba <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008ca6:	897a      	ldrh	r2, [r7, #10]
 8008ca8:	4613      	mov	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4413      	add	r3, r2
 8008cae:	00db      	lsls	r3, r3, #3
 8008cb0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008cba:	893b      	ldrh	r3, [r7, #8]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d107      	bne.n	8008cd0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	80da      	strh	r2, [r3, #6]
 8008cce:	e00b      	b.n	8008ce8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	b29a      	uxth	r2, r3
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	0c1b      	lsrs	r3, r3, #16
 8008ce2:	b29a      	uxth	r2, r3
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008ce8:	2300      	movs	r3, #0
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b085      	sub	sp, #20
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	f043 0301 	orr.w	r3, r3, #1
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	f043 0302 	orr.w	r3, r3, #2
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3714      	adds	r7, #20
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr
	...

08008d4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d141      	bne.n	8008dde <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008d5a:	4b4b      	ldr	r3, [pc, #300]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008d62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d66:	d131      	bne.n	8008dcc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008d68:	4b47      	ldr	r3, [pc, #284]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d6e:	4a46      	ldr	r2, [pc, #280]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d74:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d78:	4b43      	ldr	r3, [pc, #268]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008d80:	4a41      	ldr	r2, [pc, #260]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008d86:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008d88:	4b40      	ldr	r3, [pc, #256]	@ (8008e8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2232      	movs	r2, #50	@ 0x32
 8008d8e:	fb02 f303 	mul.w	r3, r2, r3
 8008d92:	4a3f      	ldr	r2, [pc, #252]	@ (8008e90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008d94:	fba2 2303 	umull	r2, r3, r2, r3
 8008d98:	0c9b      	lsrs	r3, r3, #18
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008d9e:	e002      	b.n	8008da6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	3b01      	subs	r3, #1
 8008da4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008da6:	4b38      	ldr	r3, [pc, #224]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008db2:	d102      	bne.n	8008dba <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1f2      	bne.n	8008da0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008dba:	4b33      	ldr	r3, [pc, #204]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dc2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dc6:	d158      	bne.n	8008e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e057      	b.n	8008e7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd2:	4a2d      	ldr	r2, [pc, #180]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008dd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008ddc:	e04d      	b.n	8008e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008de4:	d141      	bne.n	8008e6a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008de6:	4b28      	ldr	r3, [pc, #160]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008df2:	d131      	bne.n	8008e58 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008df4:	4b24      	ldr	r3, [pc, #144]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dfa:	4a23      	ldr	r2, [pc, #140]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e00:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e04:	4b20      	ldr	r3, [pc, #128]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008e12:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008e14:	4b1d      	ldr	r3, [pc, #116]	@ (8008e8c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	2232      	movs	r2, #50	@ 0x32
 8008e1a:	fb02 f303 	mul.w	r3, r2, r3
 8008e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8008e90 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008e20:	fba2 2303 	umull	r2, r3, r2, r3
 8008e24:	0c9b      	lsrs	r3, r3, #18
 8008e26:	3301      	adds	r3, #1
 8008e28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e2a:	e002      	b.n	8008e32 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e32:	4b15      	ldr	r3, [pc, #84]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e3e:	d102      	bne.n	8008e46 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1f2      	bne.n	8008e2c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008e46:	4b10      	ldr	r3, [pc, #64]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e52:	d112      	bne.n	8008e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008e54:	2303      	movs	r3, #3
 8008e56:	e011      	b.n	8008e7c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e58:	4b0b      	ldr	r3, [pc, #44]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e64:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008e68:	e007      	b.n	8008e7a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008e6a:	4b07      	ldr	r3, [pc, #28]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008e72:	4a05      	ldr	r2, [pc, #20]	@ (8008e88 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e74:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008e78:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3714      	adds	r7, #20
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	40007000 	.word	0x40007000
 8008e8c:	20000054 	.word	0x20000054
 8008e90:	431bde83 	.word	0x431bde83

08008e94 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008e94:	b480      	push	{r7}
 8008e96:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008e98:	4b05      	ldr	r3, [pc, #20]	@ (8008eb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	4a04      	ldr	r2, [pc, #16]	@ (8008eb0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008e9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008ea2:	6093      	str	r3, [r2, #8]
}
 8008ea4:	bf00      	nop
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	40007000 	.word	0x40007000

08008eb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b088      	sub	sp, #32
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d101      	bne.n	8008ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e2fe      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0301 	and.w	r3, r3, #1
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d075      	beq.n	8008fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ed2:	4b97      	ldr	r3, [pc, #604]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008ed4:	689b      	ldr	r3, [r3, #8]
 8008ed6:	f003 030c 	and.w	r3, r3, #12
 8008eda:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008edc:	4b94      	ldr	r3, [pc, #592]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	f003 0303 	and.w	r3, r3, #3
 8008ee4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	2b0c      	cmp	r3, #12
 8008eea:	d102      	bne.n	8008ef2 <HAL_RCC_OscConfig+0x3e>
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d002      	beq.n	8008ef8 <HAL_RCC_OscConfig+0x44>
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	2b08      	cmp	r3, #8
 8008ef6:	d10b      	bne.n	8008f10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ef8:	4b8d      	ldr	r3, [pc, #564]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d05b      	beq.n	8008fbc <HAL_RCC_OscConfig+0x108>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d157      	bne.n	8008fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e2d9      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f18:	d106      	bne.n	8008f28 <HAL_RCC_OscConfig+0x74>
 8008f1a:	4b85      	ldr	r3, [pc, #532]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a84      	ldr	r2, [pc, #528]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	e01d      	b.n	8008f64 <HAL_RCC_OscConfig+0xb0>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f30:	d10c      	bne.n	8008f4c <HAL_RCC_OscConfig+0x98>
 8008f32:	4b7f      	ldr	r3, [pc, #508]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a7e      	ldr	r2, [pc, #504]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f3c:	6013      	str	r3, [r2, #0]
 8008f3e:	4b7c      	ldr	r3, [pc, #496]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a7b      	ldr	r2, [pc, #492]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f48:	6013      	str	r3, [r2, #0]
 8008f4a:	e00b      	b.n	8008f64 <HAL_RCC_OscConfig+0xb0>
 8008f4c:	4b78      	ldr	r3, [pc, #480]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a77      	ldr	r2, [pc, #476]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f56:	6013      	str	r3, [r2, #0]
 8008f58:	4b75      	ldr	r3, [pc, #468]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a74      	ldr	r2, [pc, #464]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d013      	beq.n	8008f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f6c:	f7fb fbb6 	bl	80046dc <HAL_GetTick>
 8008f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f72:	e008      	b.n	8008f86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f74:	f7fb fbb2 	bl	80046dc <HAL_GetTick>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	2b64      	cmp	r3, #100	@ 0x64
 8008f80:	d901      	bls.n	8008f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	e29e      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f86:	4b6a      	ldr	r3, [pc, #424]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d0f0      	beq.n	8008f74 <HAL_RCC_OscConfig+0xc0>
 8008f92:	e014      	b.n	8008fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f94:	f7fb fba2 	bl	80046dc <HAL_GetTick>
 8008f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f9a:	e008      	b.n	8008fae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f9c:	f7fb fb9e 	bl	80046dc <HAL_GetTick>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	2b64      	cmp	r3, #100	@ 0x64
 8008fa8:	d901      	bls.n	8008fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e28a      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008fae:	4b60      	ldr	r3, [pc, #384]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1f0      	bne.n	8008f9c <HAL_RCC_OscConfig+0xe8>
 8008fba:	e000      	b.n	8008fbe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 0302 	and.w	r3, r3, #2
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d075      	beq.n	80090b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fca:	4b59      	ldr	r3, [pc, #356]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f003 030c 	and.w	r3, r3, #12
 8008fd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008fd4:	4b56      	ldr	r3, [pc, #344]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f003 0303 	and.w	r3, r3, #3
 8008fdc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008fde:	69bb      	ldr	r3, [r7, #24]
 8008fe0:	2b0c      	cmp	r3, #12
 8008fe2:	d102      	bne.n	8008fea <HAL_RCC_OscConfig+0x136>
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d002      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x13c>
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	2b04      	cmp	r3, #4
 8008fee:	d11f      	bne.n	8009030 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008ff0:	4b4f      	ldr	r3, [pc, #316]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <HAL_RCC_OscConfig+0x154>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	68db      	ldr	r3, [r3, #12]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e25d      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009008:	4b49      	ldr	r3, [pc, #292]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	061b      	lsls	r3, r3, #24
 8009016:	4946      	ldr	r1, [pc, #280]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8009018:	4313      	orrs	r3, r2
 800901a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800901c:	4b45      	ldr	r3, [pc, #276]	@ (8009134 <HAL_RCC_OscConfig+0x280>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4618      	mov	r0, r3
 8009022:	f7fb fb0f 	bl	8004644 <HAL_InitTick>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d043      	beq.n	80090b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e249      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d023      	beq.n	8009080 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009038:	4b3d      	ldr	r3, [pc, #244]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a3c      	ldr	r2, [pc, #240]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 800903e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009044:	f7fb fb4a 	bl	80046dc <HAL_GetTick>
 8009048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800904a:	e008      	b.n	800905e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800904c:	f7fb fb46 	bl	80046dc <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	2b02      	cmp	r3, #2
 8009058:	d901      	bls.n	800905e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e232      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800905e:	4b34      	ldr	r3, [pc, #208]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009066:	2b00      	cmp	r3, #0
 8009068:	d0f0      	beq.n	800904c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800906a:	4b31      	ldr	r3, [pc, #196]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	061b      	lsls	r3, r3, #24
 8009078:	492d      	ldr	r1, [pc, #180]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 800907a:	4313      	orrs	r3, r2
 800907c:	604b      	str	r3, [r1, #4]
 800907e:	e01a      	b.n	80090b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009080:	4b2b      	ldr	r3, [pc, #172]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a2a      	ldr	r2, [pc, #168]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8009086:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800908a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800908c:	f7fb fb26 	bl	80046dc <HAL_GetTick>
 8009090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009092:	e008      	b.n	80090a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009094:	f7fb fb22 	bl	80046dc <HAL_GetTick>
 8009098:	4602      	mov	r2, r0
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d901      	bls.n	80090a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e20e      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80090a6:	4b22      	ldr	r3, [pc, #136]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d1f0      	bne.n	8009094 <HAL_RCC_OscConfig+0x1e0>
 80090b2:	e000      	b.n	80090b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f003 0308 	and.w	r3, r3, #8
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d041      	beq.n	8009146 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	695b      	ldr	r3, [r3, #20]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d01c      	beq.n	8009104 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090ca:	4b19      	ldr	r3, [pc, #100]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 80090cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090d0:	4a17      	ldr	r2, [pc, #92]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 80090d2:	f043 0301 	orr.w	r3, r3, #1
 80090d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090da:	f7fb faff 	bl	80046dc <HAL_GetTick>
 80090de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80090e0:	e008      	b.n	80090f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090e2:	f7fb fafb 	bl	80046dc <HAL_GetTick>
 80090e6:	4602      	mov	r2, r0
 80090e8:	693b      	ldr	r3, [r7, #16]
 80090ea:	1ad3      	subs	r3, r2, r3
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d901      	bls.n	80090f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e1e7      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80090f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 80090f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d0ef      	beq.n	80090e2 <HAL_RCC_OscConfig+0x22e>
 8009102:	e020      	b.n	8009146 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009104:	4b0a      	ldr	r3, [pc, #40]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 8009106:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800910a:	4a09      	ldr	r2, [pc, #36]	@ (8009130 <HAL_RCC_OscConfig+0x27c>)
 800910c:	f023 0301 	bic.w	r3, r3, #1
 8009110:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009114:	f7fb fae2 	bl	80046dc <HAL_GetTick>
 8009118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800911a:	e00d      	b.n	8009138 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800911c:	f7fb fade 	bl	80046dc <HAL_GetTick>
 8009120:	4602      	mov	r2, r0
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	2b02      	cmp	r3, #2
 8009128:	d906      	bls.n	8009138 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800912a:	2303      	movs	r3, #3
 800912c:	e1ca      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
 800912e:	bf00      	nop
 8009130:	40021000 	.word	0x40021000
 8009134:	20000058 	.word	0x20000058
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009138:	4b8c      	ldr	r3, [pc, #560]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 800913a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800913e:	f003 0302 	and.w	r3, r3, #2
 8009142:	2b00      	cmp	r3, #0
 8009144:	d1ea      	bne.n	800911c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0304 	and.w	r3, r3, #4
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 80a6 	beq.w	80092a0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009154:	2300      	movs	r3, #0
 8009156:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009158:	4b84      	ldr	r3, [pc, #528]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 800915a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800915c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009160:	2b00      	cmp	r3, #0
 8009162:	d101      	bne.n	8009168 <HAL_RCC_OscConfig+0x2b4>
 8009164:	2301      	movs	r3, #1
 8009166:	e000      	b.n	800916a <HAL_RCC_OscConfig+0x2b6>
 8009168:	2300      	movs	r3, #0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00d      	beq.n	800918a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800916e:	4b7f      	ldr	r3, [pc, #508]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 8009170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009172:	4a7e      	ldr	r2, [pc, #504]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 8009174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009178:	6593      	str	r3, [r2, #88]	@ 0x58
 800917a:	4b7c      	ldr	r3, [pc, #496]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 800917c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800917e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009182:	60fb      	str	r3, [r7, #12]
 8009184:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009186:	2301      	movs	r3, #1
 8009188:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800918a:	4b79      	ldr	r3, [pc, #484]	@ (8009370 <HAL_RCC_OscConfig+0x4bc>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009192:	2b00      	cmp	r3, #0
 8009194:	d118      	bne.n	80091c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009196:	4b76      	ldr	r3, [pc, #472]	@ (8009370 <HAL_RCC_OscConfig+0x4bc>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a75      	ldr	r2, [pc, #468]	@ (8009370 <HAL_RCC_OscConfig+0x4bc>)
 800919c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80091a2:	f7fb fa9b 	bl	80046dc <HAL_GetTick>
 80091a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091a8:	e008      	b.n	80091bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091aa:	f7fb fa97 	bl	80046dc <HAL_GetTick>
 80091ae:	4602      	mov	r2, r0
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d901      	bls.n	80091bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e183      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091bc:	4b6c      	ldr	r3, [pc, #432]	@ (8009370 <HAL_RCC_OscConfig+0x4bc>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d0f0      	beq.n	80091aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	2b01      	cmp	r3, #1
 80091ce:	d108      	bne.n	80091e2 <HAL_RCC_OscConfig+0x32e>
 80091d0:	4b66      	ldr	r3, [pc, #408]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 80091d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091d6:	4a65      	ldr	r2, [pc, #404]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 80091d8:	f043 0301 	orr.w	r3, r3, #1
 80091dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80091e0:	e024      	b.n	800922c <HAL_RCC_OscConfig+0x378>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	2b05      	cmp	r3, #5
 80091e8:	d110      	bne.n	800920c <HAL_RCC_OscConfig+0x358>
 80091ea:	4b60      	ldr	r3, [pc, #384]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 80091ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091f0:	4a5e      	ldr	r2, [pc, #376]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 80091f2:	f043 0304 	orr.w	r3, r3, #4
 80091f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80091fa:	4b5c      	ldr	r3, [pc, #368]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 80091fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009200:	4a5a      	ldr	r2, [pc, #360]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 8009202:	f043 0301 	orr.w	r3, r3, #1
 8009206:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800920a:	e00f      	b.n	800922c <HAL_RCC_OscConfig+0x378>
 800920c:	4b57      	ldr	r3, [pc, #348]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 800920e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009212:	4a56      	ldr	r2, [pc, #344]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 8009214:	f023 0301 	bic.w	r3, r3, #1
 8009218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800921c:	4b53      	ldr	r3, [pc, #332]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 800921e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009222:	4a52      	ldr	r2, [pc, #328]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 8009224:	f023 0304 	bic.w	r3, r3, #4
 8009228:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d016      	beq.n	8009262 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009234:	f7fb fa52 	bl	80046dc <HAL_GetTick>
 8009238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800923a:	e00a      	b.n	8009252 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800923c:	f7fb fa4e 	bl	80046dc <HAL_GetTick>
 8009240:	4602      	mov	r2, r0
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	1ad3      	subs	r3, r2, r3
 8009246:	f241 3288 	movw	r2, #5000	@ 0x1388
 800924a:	4293      	cmp	r3, r2
 800924c:	d901      	bls.n	8009252 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	e138      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009252:	4b46      	ldr	r3, [pc, #280]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 8009254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	2b00      	cmp	r3, #0
 800925e:	d0ed      	beq.n	800923c <HAL_RCC_OscConfig+0x388>
 8009260:	e015      	b.n	800928e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009262:	f7fb fa3b 	bl	80046dc <HAL_GetTick>
 8009266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009268:	e00a      	b.n	8009280 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800926a:	f7fb fa37 	bl	80046dc <HAL_GetTick>
 800926e:	4602      	mov	r2, r0
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009278:	4293      	cmp	r3, r2
 800927a:	d901      	bls.n	8009280 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e121      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009280:	4b3a      	ldr	r3, [pc, #232]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 8009282:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009286:	f003 0302 	and.w	r3, r3, #2
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1ed      	bne.n	800926a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800928e:	7ffb      	ldrb	r3, [r7, #31]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d105      	bne.n	80092a0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009294:	4b35      	ldr	r3, [pc, #212]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 8009296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009298:	4a34      	ldr	r2, [pc, #208]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 800929a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800929e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0320 	and.w	r3, r3, #32
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d03c      	beq.n	8009326 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	699b      	ldr	r3, [r3, #24]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d01c      	beq.n	80092ee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80092b4:	4b2d      	ldr	r3, [pc, #180]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 80092b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092ba:	4a2c      	ldr	r2, [pc, #176]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 80092bc:	f043 0301 	orr.w	r3, r3, #1
 80092c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092c4:	f7fb fa0a 	bl	80046dc <HAL_GetTick>
 80092c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80092ca:	e008      	b.n	80092de <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092cc:	f7fb fa06 	bl	80046dc <HAL_GetTick>
 80092d0:	4602      	mov	r2, r0
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	1ad3      	subs	r3, r2, r3
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d901      	bls.n	80092de <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80092da:	2303      	movs	r3, #3
 80092dc:	e0f2      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80092de:	4b23      	ldr	r3, [pc, #140]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 80092e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d0ef      	beq.n	80092cc <HAL_RCC_OscConfig+0x418>
 80092ec:	e01b      	b.n	8009326 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092ee:	4b1f      	ldr	r3, [pc, #124]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 80092f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092f4:	4a1d      	ldr	r2, [pc, #116]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 80092f6:	f023 0301 	bic.w	r3, r3, #1
 80092fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092fe:	f7fb f9ed 	bl	80046dc <HAL_GetTick>
 8009302:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009304:	e008      	b.n	8009318 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009306:	f7fb f9e9 	bl	80046dc <HAL_GetTick>
 800930a:	4602      	mov	r2, r0
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	1ad3      	subs	r3, r2, r3
 8009310:	2b02      	cmp	r3, #2
 8009312:	d901      	bls.n	8009318 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009314:	2303      	movs	r3, #3
 8009316:	e0d5      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009318:	4b14      	ldr	r3, [pc, #80]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 800931a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800931e:	f003 0302 	and.w	r3, r3, #2
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1ef      	bne.n	8009306 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 80c9 	beq.w	80094c2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009330:	4b0e      	ldr	r3, [pc, #56]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	f003 030c 	and.w	r3, r3, #12
 8009338:	2b0c      	cmp	r3, #12
 800933a:	f000 8083 	beq.w	8009444 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	2b02      	cmp	r3, #2
 8009344:	d15e      	bne.n	8009404 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009346:	4b09      	ldr	r3, [pc, #36]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a08      	ldr	r2, [pc, #32]	@ (800936c <HAL_RCC_OscConfig+0x4b8>)
 800934c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009352:	f7fb f9c3 	bl	80046dc <HAL_GetTick>
 8009356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009358:	e00c      	b.n	8009374 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800935a:	f7fb f9bf 	bl	80046dc <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	2b02      	cmp	r3, #2
 8009366:	d905      	bls.n	8009374 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8009368:	2303      	movs	r3, #3
 800936a:	e0ab      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
 800936c:	40021000 	.word	0x40021000
 8009370:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009374:	4b55      	ldr	r3, [pc, #340]	@ (80094cc <HAL_RCC_OscConfig+0x618>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1ec      	bne.n	800935a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009380:	4b52      	ldr	r3, [pc, #328]	@ (80094cc <HAL_RCC_OscConfig+0x618>)
 8009382:	68da      	ldr	r2, [r3, #12]
 8009384:	4b52      	ldr	r3, [pc, #328]	@ (80094d0 <HAL_RCC_OscConfig+0x61c>)
 8009386:	4013      	ands	r3, r2
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	6a11      	ldr	r1, [r2, #32]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009390:	3a01      	subs	r2, #1
 8009392:	0112      	lsls	r2, r2, #4
 8009394:	4311      	orrs	r1, r2
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800939a:	0212      	lsls	r2, r2, #8
 800939c:	4311      	orrs	r1, r2
 800939e:	687a      	ldr	r2, [r7, #4]
 80093a0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80093a2:	0852      	lsrs	r2, r2, #1
 80093a4:	3a01      	subs	r2, #1
 80093a6:	0552      	lsls	r2, r2, #21
 80093a8:	4311      	orrs	r1, r2
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80093ae:	0852      	lsrs	r2, r2, #1
 80093b0:	3a01      	subs	r2, #1
 80093b2:	0652      	lsls	r2, r2, #25
 80093b4:	4311      	orrs	r1, r2
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80093ba:	06d2      	lsls	r2, r2, #27
 80093bc:	430a      	orrs	r2, r1
 80093be:	4943      	ldr	r1, [pc, #268]	@ (80094cc <HAL_RCC_OscConfig+0x618>)
 80093c0:	4313      	orrs	r3, r2
 80093c2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093c4:	4b41      	ldr	r3, [pc, #260]	@ (80094cc <HAL_RCC_OscConfig+0x618>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	4a40      	ldr	r2, [pc, #256]	@ (80094cc <HAL_RCC_OscConfig+0x618>)
 80093ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80093ce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80093d0:	4b3e      	ldr	r3, [pc, #248]	@ (80094cc <HAL_RCC_OscConfig+0x618>)
 80093d2:	68db      	ldr	r3, [r3, #12]
 80093d4:	4a3d      	ldr	r2, [pc, #244]	@ (80094cc <HAL_RCC_OscConfig+0x618>)
 80093d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80093da:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093dc:	f7fb f97e 	bl	80046dc <HAL_GetTick>
 80093e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093e2:	e008      	b.n	80093f6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093e4:	f7fb f97a 	bl	80046dc <HAL_GetTick>
 80093e8:	4602      	mov	r2, r0
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	1ad3      	subs	r3, r2, r3
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d901      	bls.n	80093f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	e066      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093f6:	4b35      	ldr	r3, [pc, #212]	@ (80094cc <HAL_RCC_OscConfig+0x618>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d0f0      	beq.n	80093e4 <HAL_RCC_OscConfig+0x530>
 8009402:	e05e      	b.n	80094c2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009404:	4b31      	ldr	r3, [pc, #196]	@ (80094cc <HAL_RCC_OscConfig+0x618>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a30      	ldr	r2, [pc, #192]	@ (80094cc <HAL_RCC_OscConfig+0x618>)
 800940a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800940e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009410:	f7fb f964 	bl	80046dc <HAL_GetTick>
 8009414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009416:	e008      	b.n	800942a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009418:	f7fb f960 	bl	80046dc <HAL_GetTick>
 800941c:	4602      	mov	r2, r0
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	2b02      	cmp	r3, #2
 8009424:	d901      	bls.n	800942a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009426:	2303      	movs	r3, #3
 8009428:	e04c      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800942a:	4b28      	ldr	r3, [pc, #160]	@ (80094cc <HAL_RCC_OscConfig+0x618>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009432:	2b00      	cmp	r3, #0
 8009434:	d1f0      	bne.n	8009418 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009436:	4b25      	ldr	r3, [pc, #148]	@ (80094cc <HAL_RCC_OscConfig+0x618>)
 8009438:	68da      	ldr	r2, [r3, #12]
 800943a:	4924      	ldr	r1, [pc, #144]	@ (80094cc <HAL_RCC_OscConfig+0x618>)
 800943c:	4b25      	ldr	r3, [pc, #148]	@ (80094d4 <HAL_RCC_OscConfig+0x620>)
 800943e:	4013      	ands	r3, r2
 8009440:	60cb      	str	r3, [r1, #12]
 8009442:	e03e      	b.n	80094c2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	69db      	ldr	r3, [r3, #28]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d101      	bne.n	8009450 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800944c:	2301      	movs	r3, #1
 800944e:	e039      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009450:	4b1e      	ldr	r3, [pc, #120]	@ (80094cc <HAL_RCC_OscConfig+0x618>)
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	f003 0203 	and.w	r2, r3, #3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	429a      	cmp	r2, r3
 8009462:	d12c      	bne.n	80094be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800946e:	3b01      	subs	r3, #1
 8009470:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009472:	429a      	cmp	r2, r3
 8009474:	d123      	bne.n	80094be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009480:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009482:	429a      	cmp	r2, r3
 8009484:	d11b      	bne.n	80094be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009486:	697b      	ldr	r3, [r7, #20]
 8009488:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009490:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009492:	429a      	cmp	r2, r3
 8009494:	d113      	bne.n	80094be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094a0:	085b      	lsrs	r3, r3, #1
 80094a2:	3b01      	subs	r3, #1
 80094a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d109      	bne.n	80094be <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094b4:	085b      	lsrs	r3, r3, #1
 80094b6:	3b01      	subs	r3, #1
 80094b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d001      	beq.n	80094c2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80094be:	2301      	movs	r3, #1
 80094c0:	e000      	b.n	80094c4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80094c2:	2300      	movs	r3, #0
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3720      	adds	r7, #32
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	40021000 	.word	0x40021000
 80094d0:	019f800c 	.word	0x019f800c
 80094d4:	feeefffc 	.word	0xfeeefffc

080094d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b086      	sub	sp, #24
 80094dc:	af00      	add	r7, sp, #0
 80094de:	6078      	str	r0, [r7, #4]
 80094e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80094e2:	2300      	movs	r3, #0
 80094e4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d101      	bne.n	80094f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e11e      	b.n	800972e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80094f0:	4b91      	ldr	r3, [pc, #580]	@ (8009738 <HAL_RCC_ClockConfig+0x260>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 030f 	and.w	r3, r3, #15
 80094f8:	683a      	ldr	r2, [r7, #0]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d910      	bls.n	8009520 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094fe:	4b8e      	ldr	r3, [pc, #568]	@ (8009738 <HAL_RCC_ClockConfig+0x260>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f023 020f 	bic.w	r2, r3, #15
 8009506:	498c      	ldr	r1, [pc, #560]	@ (8009738 <HAL_RCC_ClockConfig+0x260>)
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	4313      	orrs	r3, r2
 800950c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800950e:	4b8a      	ldr	r3, [pc, #552]	@ (8009738 <HAL_RCC_ClockConfig+0x260>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f003 030f 	and.w	r3, r3, #15
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	429a      	cmp	r2, r3
 800951a:	d001      	beq.n	8009520 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800951c:	2301      	movs	r3, #1
 800951e:	e106      	b.n	800972e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	2b00      	cmp	r3, #0
 800952a:	d073      	beq.n	8009614 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	2b03      	cmp	r3, #3
 8009532:	d129      	bne.n	8009588 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009534:	4b81      	ldr	r3, [pc, #516]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800953c:	2b00      	cmp	r3, #0
 800953e:	d101      	bne.n	8009544 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009540:	2301      	movs	r3, #1
 8009542:	e0f4      	b.n	800972e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009544:	f000 f99e 	bl	8009884 <RCC_GetSysClockFreqFromPLLSource>
 8009548:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	4a7c      	ldr	r2, [pc, #496]	@ (8009740 <HAL_RCC_ClockConfig+0x268>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d93f      	bls.n	80095d2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009552:	4b7a      	ldr	r3, [pc, #488]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d009      	beq.n	8009572 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009566:	2b00      	cmp	r3, #0
 8009568:	d033      	beq.n	80095d2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800956e:	2b00      	cmp	r3, #0
 8009570:	d12f      	bne.n	80095d2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009572:	4b72      	ldr	r3, [pc, #456]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800957a:	4a70      	ldr	r2, [pc, #448]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 800957c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009580:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009582:	2380      	movs	r3, #128	@ 0x80
 8009584:	617b      	str	r3, [r7, #20]
 8009586:	e024      	b.n	80095d2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	2b02      	cmp	r3, #2
 800958e:	d107      	bne.n	80095a0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009590:	4b6a      	ldr	r3, [pc, #424]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d109      	bne.n	80095b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e0c6      	b.n	800972e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80095a0:	4b66      	ldr	r3, [pc, #408]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d101      	bne.n	80095b0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e0be      	b.n	800972e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80095b0:	f000 f8ce 	bl	8009750 <HAL_RCC_GetSysClockFreq>
 80095b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	4a61      	ldr	r2, [pc, #388]	@ (8009740 <HAL_RCC_ClockConfig+0x268>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d909      	bls.n	80095d2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80095be:	4b5f      	ldr	r3, [pc, #380]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 80095c0:	689b      	ldr	r3, [r3, #8]
 80095c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095c6:	4a5d      	ldr	r2, [pc, #372]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 80095c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095cc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80095ce:	2380      	movs	r3, #128	@ 0x80
 80095d0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095d2:	4b5a      	ldr	r3, [pc, #360]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	f023 0203 	bic.w	r2, r3, #3
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	685b      	ldr	r3, [r3, #4]
 80095de:	4957      	ldr	r1, [pc, #348]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 80095e0:	4313      	orrs	r3, r2
 80095e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095e4:	f7fb f87a 	bl	80046dc <HAL_GetTick>
 80095e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095ea:	e00a      	b.n	8009602 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095ec:	f7fb f876 	bl	80046dc <HAL_GetTick>
 80095f0:	4602      	mov	r2, r0
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	1ad3      	subs	r3, r2, r3
 80095f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d901      	bls.n	8009602 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80095fe:	2303      	movs	r3, #3
 8009600:	e095      	b.n	800972e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009602:	4b4e      	ldr	r3, [pc, #312]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	f003 020c 	and.w	r2, r3, #12
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	429a      	cmp	r2, r3
 8009612:	d1eb      	bne.n	80095ec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0302 	and.w	r3, r3, #2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d023      	beq.n	8009668 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 0304 	and.w	r3, r3, #4
 8009628:	2b00      	cmp	r3, #0
 800962a:	d005      	beq.n	8009638 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800962c:	4b43      	ldr	r3, [pc, #268]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	4a42      	ldr	r2, [pc, #264]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 8009632:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009636:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0308 	and.w	r3, r3, #8
 8009640:	2b00      	cmp	r3, #0
 8009642:	d007      	beq.n	8009654 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009644:	4b3d      	ldr	r3, [pc, #244]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800964c:	4a3b      	ldr	r2, [pc, #236]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 800964e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009652:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009654:	4b39      	ldr	r3, [pc, #228]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	4936      	ldr	r1, [pc, #216]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 8009662:	4313      	orrs	r3, r2
 8009664:	608b      	str	r3, [r1, #8]
 8009666:	e008      	b.n	800967a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	2b80      	cmp	r3, #128	@ 0x80
 800966c:	d105      	bne.n	800967a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800966e:	4b33      	ldr	r3, [pc, #204]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	4a32      	ldr	r2, [pc, #200]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 8009674:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009678:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800967a:	4b2f      	ldr	r3, [pc, #188]	@ (8009738 <HAL_RCC_ClockConfig+0x260>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 030f 	and.w	r3, r3, #15
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	d21d      	bcs.n	80096c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009688:	4b2b      	ldr	r3, [pc, #172]	@ (8009738 <HAL_RCC_ClockConfig+0x260>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f023 020f 	bic.w	r2, r3, #15
 8009690:	4929      	ldr	r1, [pc, #164]	@ (8009738 <HAL_RCC_ClockConfig+0x260>)
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	4313      	orrs	r3, r2
 8009696:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009698:	f7fb f820 	bl	80046dc <HAL_GetTick>
 800969c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800969e:	e00a      	b.n	80096b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096a0:	f7fb f81c 	bl	80046dc <HAL_GetTick>
 80096a4:	4602      	mov	r2, r0
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d901      	bls.n	80096b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e03b      	b.n	800972e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096b6:	4b20      	ldr	r3, [pc, #128]	@ (8009738 <HAL_RCC_ClockConfig+0x260>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 030f 	and.w	r3, r3, #15
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d1ed      	bne.n	80096a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0304 	and.w	r3, r3, #4
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d008      	beq.n	80096e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80096d0:	4b1a      	ldr	r3, [pc, #104]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	4917      	ldr	r1, [pc, #92]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 80096de:	4313      	orrs	r3, r2
 80096e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 0308 	and.w	r3, r3, #8
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d009      	beq.n	8009702 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80096ee:	4b13      	ldr	r3, [pc, #76]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	490f      	ldr	r1, [pc, #60]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 80096fe:	4313      	orrs	r3, r2
 8009700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009702:	f000 f825 	bl	8009750 <HAL_RCC_GetSysClockFreq>
 8009706:	4602      	mov	r2, r0
 8009708:	4b0c      	ldr	r3, [pc, #48]	@ (800973c <HAL_RCC_ClockConfig+0x264>)
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	091b      	lsrs	r3, r3, #4
 800970e:	f003 030f 	and.w	r3, r3, #15
 8009712:	490c      	ldr	r1, [pc, #48]	@ (8009744 <HAL_RCC_ClockConfig+0x26c>)
 8009714:	5ccb      	ldrb	r3, [r1, r3]
 8009716:	f003 031f 	and.w	r3, r3, #31
 800971a:	fa22 f303 	lsr.w	r3, r2, r3
 800971e:	4a0a      	ldr	r2, [pc, #40]	@ (8009748 <HAL_RCC_ClockConfig+0x270>)
 8009720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009722:	4b0a      	ldr	r3, [pc, #40]	@ (800974c <HAL_RCC_ClockConfig+0x274>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4618      	mov	r0, r3
 8009728:	f7fa ff8c 	bl	8004644 <HAL_InitTick>
 800972c:	4603      	mov	r3, r0
}
 800972e:	4618      	mov	r0, r3
 8009730:	3718      	adds	r7, #24
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	40022000 	.word	0x40022000
 800973c:	40021000 	.word	0x40021000
 8009740:	04c4b400 	.word	0x04c4b400
 8009744:	08016f08 	.word	0x08016f08
 8009748:	20000054 	.word	0x20000054
 800974c:	20000058 	.word	0x20000058

08009750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009750:	b480      	push	{r7}
 8009752:	b087      	sub	sp, #28
 8009754:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009756:	4b2c      	ldr	r3, [pc, #176]	@ (8009808 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	f003 030c 	and.w	r3, r3, #12
 800975e:	2b04      	cmp	r3, #4
 8009760:	d102      	bne.n	8009768 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009762:	4b2a      	ldr	r3, [pc, #168]	@ (800980c <HAL_RCC_GetSysClockFreq+0xbc>)
 8009764:	613b      	str	r3, [r7, #16]
 8009766:	e047      	b.n	80097f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009768:	4b27      	ldr	r3, [pc, #156]	@ (8009808 <HAL_RCC_GetSysClockFreq+0xb8>)
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	f003 030c 	and.w	r3, r3, #12
 8009770:	2b08      	cmp	r3, #8
 8009772:	d102      	bne.n	800977a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009774:	4b26      	ldr	r3, [pc, #152]	@ (8009810 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009776:	613b      	str	r3, [r7, #16]
 8009778:	e03e      	b.n	80097f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800977a:	4b23      	ldr	r3, [pc, #140]	@ (8009808 <HAL_RCC_GetSysClockFreq+0xb8>)
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	f003 030c 	and.w	r3, r3, #12
 8009782:	2b0c      	cmp	r3, #12
 8009784:	d136      	bne.n	80097f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009786:	4b20      	ldr	r3, [pc, #128]	@ (8009808 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	f003 0303 	and.w	r3, r3, #3
 800978e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009790:	4b1d      	ldr	r3, [pc, #116]	@ (8009808 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009792:	68db      	ldr	r3, [r3, #12]
 8009794:	091b      	lsrs	r3, r3, #4
 8009796:	f003 030f 	and.w	r3, r3, #15
 800979a:	3301      	adds	r3, #1
 800979c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2b03      	cmp	r3, #3
 80097a2:	d10c      	bne.n	80097be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80097a4:	4a1a      	ldr	r2, [pc, #104]	@ (8009810 <HAL_RCC_GetSysClockFreq+0xc0>)
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ac:	4a16      	ldr	r2, [pc, #88]	@ (8009808 <HAL_RCC_GetSysClockFreq+0xb8>)
 80097ae:	68d2      	ldr	r2, [r2, #12]
 80097b0:	0a12      	lsrs	r2, r2, #8
 80097b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80097b6:	fb02 f303 	mul.w	r3, r2, r3
 80097ba:	617b      	str	r3, [r7, #20]
      break;
 80097bc:	e00c      	b.n	80097d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80097be:	4a13      	ldr	r2, [pc, #76]	@ (800980c <HAL_RCC_GetSysClockFreq+0xbc>)
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80097c6:	4a10      	ldr	r2, [pc, #64]	@ (8009808 <HAL_RCC_GetSysClockFreq+0xb8>)
 80097c8:	68d2      	ldr	r2, [r2, #12]
 80097ca:	0a12      	lsrs	r2, r2, #8
 80097cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80097d0:	fb02 f303 	mul.w	r3, r2, r3
 80097d4:	617b      	str	r3, [r7, #20]
      break;
 80097d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80097d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009808 <HAL_RCC_GetSysClockFreq+0xb8>)
 80097da:	68db      	ldr	r3, [r3, #12]
 80097dc:	0e5b      	lsrs	r3, r3, #25
 80097de:	f003 0303 	and.w	r3, r3, #3
 80097e2:	3301      	adds	r3, #1
 80097e4:	005b      	lsls	r3, r3, #1
 80097e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f0:	613b      	str	r3, [r7, #16]
 80097f2:	e001      	b.n	80097f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80097f4:	2300      	movs	r3, #0
 80097f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80097f8:	693b      	ldr	r3, [r7, #16]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	40021000 	.word	0x40021000
 800980c:	00f42400 	.word	0x00f42400
 8009810:	016e3600 	.word	0x016e3600

08009814 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009814:	b480      	push	{r7}
 8009816:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009818:	4b03      	ldr	r3, [pc, #12]	@ (8009828 <HAL_RCC_GetHCLKFreq+0x14>)
 800981a:	681b      	ldr	r3, [r3, #0]
}
 800981c:	4618      	mov	r0, r3
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop
 8009828:	20000054 	.word	0x20000054

0800982c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009830:	f7ff fff0 	bl	8009814 <HAL_RCC_GetHCLKFreq>
 8009834:	4602      	mov	r2, r0
 8009836:	4b06      	ldr	r3, [pc, #24]	@ (8009850 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009838:	689b      	ldr	r3, [r3, #8]
 800983a:	0a1b      	lsrs	r3, r3, #8
 800983c:	f003 0307 	and.w	r3, r3, #7
 8009840:	4904      	ldr	r1, [pc, #16]	@ (8009854 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009842:	5ccb      	ldrb	r3, [r1, r3]
 8009844:	f003 031f 	and.w	r3, r3, #31
 8009848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800984c:	4618      	mov	r0, r3
 800984e:	bd80      	pop	{r7, pc}
 8009850:	40021000 	.word	0x40021000
 8009854:	08016f18 	.word	0x08016f18

08009858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800985c:	f7ff ffda 	bl	8009814 <HAL_RCC_GetHCLKFreq>
 8009860:	4602      	mov	r2, r0
 8009862:	4b06      	ldr	r3, [pc, #24]	@ (800987c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	0adb      	lsrs	r3, r3, #11
 8009868:	f003 0307 	and.w	r3, r3, #7
 800986c:	4904      	ldr	r1, [pc, #16]	@ (8009880 <HAL_RCC_GetPCLK2Freq+0x28>)
 800986e:	5ccb      	ldrb	r3, [r1, r3]
 8009870:	f003 031f 	and.w	r3, r3, #31
 8009874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009878:	4618      	mov	r0, r3
 800987a:	bd80      	pop	{r7, pc}
 800987c:	40021000 	.word	0x40021000
 8009880:	08016f18 	.word	0x08016f18

08009884 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009884:	b480      	push	{r7}
 8009886:	b087      	sub	sp, #28
 8009888:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800988a:	4b1e      	ldr	r3, [pc, #120]	@ (8009904 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800988c:	68db      	ldr	r3, [r3, #12]
 800988e:	f003 0303 	and.w	r3, r3, #3
 8009892:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009894:	4b1b      	ldr	r3, [pc, #108]	@ (8009904 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	091b      	lsrs	r3, r3, #4
 800989a:	f003 030f 	and.w	r3, r3, #15
 800989e:	3301      	adds	r3, #1
 80098a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	2b03      	cmp	r3, #3
 80098a6:	d10c      	bne.n	80098c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80098a8:	4a17      	ldr	r2, [pc, #92]	@ (8009908 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80098b0:	4a14      	ldr	r2, [pc, #80]	@ (8009904 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80098b2:	68d2      	ldr	r2, [r2, #12]
 80098b4:	0a12      	lsrs	r2, r2, #8
 80098b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80098ba:	fb02 f303 	mul.w	r3, r2, r3
 80098be:	617b      	str	r3, [r7, #20]
    break;
 80098c0:	e00c      	b.n	80098dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80098c2:	4a12      	ldr	r2, [pc, #72]	@ (800990c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ca:	4a0e      	ldr	r2, [pc, #56]	@ (8009904 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80098cc:	68d2      	ldr	r2, [r2, #12]
 80098ce:	0a12      	lsrs	r2, r2, #8
 80098d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80098d4:	fb02 f303 	mul.w	r3, r2, r3
 80098d8:	617b      	str	r3, [r7, #20]
    break;
 80098da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80098dc:	4b09      	ldr	r3, [pc, #36]	@ (8009904 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	0e5b      	lsrs	r3, r3, #25
 80098e2:	f003 0303 	and.w	r3, r3, #3
 80098e6:	3301      	adds	r3, #1
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80098ec:	697a      	ldr	r2, [r7, #20]
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80098f6:	687b      	ldr	r3, [r7, #4]
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	371c      	adds	r7, #28
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	40021000 	.word	0x40021000
 8009908:	016e3600 	.word	0x016e3600
 800990c:	00f42400 	.word	0x00f42400

08009910 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009918:	2300      	movs	r3, #0
 800991a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800991c:	2300      	movs	r3, #0
 800991e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 8098 	beq.w	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800992e:	2300      	movs	r3, #0
 8009930:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009932:	4b43      	ldr	r3, [pc, #268]	@ (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10d      	bne.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800993e:	4b40      	ldr	r3, [pc, #256]	@ (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009940:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009942:	4a3f      	ldr	r2, [pc, #252]	@ (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009948:	6593      	str	r3, [r2, #88]	@ 0x58
 800994a:	4b3d      	ldr	r3, [pc, #244]	@ (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800994c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800994e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009952:	60bb      	str	r3, [r7, #8]
 8009954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009956:	2301      	movs	r3, #1
 8009958:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800995a:	4b3a      	ldr	r3, [pc, #232]	@ (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a39      	ldr	r2, [pc, #228]	@ (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009964:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009966:	f7fa feb9 	bl	80046dc <HAL_GetTick>
 800996a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800996c:	e009      	b.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800996e:	f7fa feb5 	bl	80046dc <HAL_GetTick>
 8009972:	4602      	mov	r2, r0
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	2b02      	cmp	r3, #2
 800997a:	d902      	bls.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800997c:	2303      	movs	r3, #3
 800997e:	74fb      	strb	r3, [r7, #19]
        break;
 8009980:	e005      	b.n	800998e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009982:	4b30      	ldr	r3, [pc, #192]	@ (8009a44 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0ef      	beq.n	800996e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800998e:	7cfb      	ldrb	r3, [r7, #19]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d159      	bne.n	8009a48 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009994:	4b2a      	ldr	r3, [pc, #168]	@ (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800999a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800999e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d01e      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d019      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80099b0:	4b23      	ldr	r3, [pc, #140]	@ (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80099bc:	4b20      	ldr	r3, [pc, #128]	@ (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099c2:	4a1f      	ldr	r2, [pc, #124]	@ (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80099cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099d2:	4a1b      	ldr	r2, [pc, #108]	@ (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80099d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80099dc:	4a18      	ldr	r2, [pc, #96]	@ (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	f003 0301 	and.w	r3, r3, #1
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d016      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ee:	f7fa fe75 	bl	80046dc <HAL_GetTick>
 80099f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099f4:	e00b      	b.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80099f6:	f7fa fe71 	bl	80046dc <HAL_GetTick>
 80099fa:	4602      	mov	r2, r0
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d902      	bls.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009a08:	2303      	movs	r3, #3
 8009a0a:	74fb      	strb	r3, [r7, #19]
            break;
 8009a0c:	e006      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a14:	f003 0302 	and.w	r3, r3, #2
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d0ec      	beq.n	80099f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009a1c:	7cfb      	ldrb	r3, [r7, #19]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10b      	bne.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a22:	4b07      	ldr	r3, [pc, #28]	@ (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a30:	4903      	ldr	r1, [pc, #12]	@ (8009a40 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a32:	4313      	orrs	r3, r2
 8009a34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009a38:	e008      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a3a:	7cfb      	ldrb	r3, [r7, #19]
 8009a3c:	74bb      	strb	r3, [r7, #18]
 8009a3e:	e005      	b.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009a40:	40021000 	.word	0x40021000
 8009a44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a48:	7cfb      	ldrb	r3, [r7, #19]
 8009a4a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a4c:	7c7b      	ldrb	r3, [r7, #17]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d105      	bne.n	8009a5e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a52:	4ba7      	ldr	r3, [pc, #668]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a56:	4aa6      	ldr	r2, [pc, #664]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a5c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f003 0301 	and.w	r3, r3, #1
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d00a      	beq.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a6a:	4ba1      	ldr	r3, [pc, #644]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a70:	f023 0203 	bic.w	r2, r3, #3
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	685b      	ldr	r3, [r3, #4]
 8009a78:	499d      	ldr	r1, [pc, #628]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 0302 	and.w	r3, r3, #2
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00a      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009a8c:	4b98      	ldr	r3, [pc, #608]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a92:	f023 020c 	bic.w	r2, r3, #12
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	4995      	ldr	r1, [pc, #596]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 0304 	and.w	r3, r3, #4
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00a      	beq.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009aae:	4b90      	ldr	r3, [pc, #576]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ab4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	498c      	ldr	r1, [pc, #560]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f003 0308 	and.w	r3, r3, #8
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00a      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009ad0:	4b87      	ldr	r3, [pc, #540]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ad6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	4984      	ldr	r1, [pc, #528]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f003 0310 	and.w	r3, r3, #16
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00a      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009af2:	4b7f      	ldr	r3, [pc, #508]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009af8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	497b      	ldr	r1, [pc, #492]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b02:	4313      	orrs	r3, r2
 8009b04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f003 0320 	and.w	r3, r3, #32
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d00a      	beq.n	8009b2a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b14:	4b76      	ldr	r3, [pc, #472]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b1a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	4973      	ldr	r1, [pc, #460]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b24:	4313      	orrs	r3, r2
 8009b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009b36:	4b6e      	ldr	r3, [pc, #440]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b3c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	69db      	ldr	r3, [r3, #28]
 8009b44:	496a      	ldr	r1, [pc, #424]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b46:	4313      	orrs	r3, r2
 8009b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00a      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009b58:	4b65      	ldr	r3, [pc, #404]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b5e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	4962      	ldr	r1, [pc, #392]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009b7a:	4b5d      	ldr	r3, [pc, #372]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b80:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b88:	4959      	ldr	r1, [pc, #356]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d00a      	beq.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009b9c:	4b54      	ldr	r3, [pc, #336]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009ba2:	f023 0203 	bic.w	r2, r3, #3
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009baa:	4951      	ldr	r1, [pc, #324]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bac:	4313      	orrs	r3, r2
 8009bae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d00a      	beq.n	8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009bbe:	4b4c      	ldr	r3, [pc, #304]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bc4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bcc:	4948      	ldr	r1, [pc, #288]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d015      	beq.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009be0:	4b43      	ldr	r3, [pc, #268]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009be6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bee:	4940      	ldr	r1, [pc, #256]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bf0:	4313      	orrs	r3, r2
 8009bf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bfa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bfe:	d105      	bne.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c00:	4b3b      	ldr	r3, [pc, #236]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	4a3a      	ldr	r2, [pc, #232]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c0a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d015      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009c18:	4b35      	ldr	r3, [pc, #212]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c26:	4932      	ldr	r1, [pc, #200]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c36:	d105      	bne.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c38:	4b2d      	ldr	r3, [pc, #180]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	4a2c      	ldr	r2, [pc, #176]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c42:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d015      	beq.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c50:	4b27      	ldr	r3, [pc, #156]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c56:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c5e:	4924      	ldr	r1, [pc, #144]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c60:	4313      	orrs	r3, r2
 8009c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c6e:	d105      	bne.n	8009c7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c70:	4b1f      	ldr	r3, [pc, #124]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	4a1e      	ldr	r2, [pc, #120]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c7a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d015      	beq.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c88:	4b19      	ldr	r3, [pc, #100]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c8e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c96:	4916      	ldr	r1, [pc, #88]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ca2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ca6:	d105      	bne.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ca8:	4b11      	ldr	r3, [pc, #68]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	4a10      	ldr	r2, [pc, #64]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cb2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d019      	beq.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cc6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cce:	4908      	ldr	r1, [pc, #32]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009cde:	d109      	bne.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ce0:	4b03      	ldr	r3, [pc, #12]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ce2:	68db      	ldr	r3, [r3, #12]
 8009ce4:	4a02      	ldr	r2, [pc, #8]	@ (8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cea:	60d3      	str	r3, [r2, #12]
 8009cec:	e002      	b.n	8009cf4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009cee:	bf00      	nop
 8009cf0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d015      	beq.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009d00:	4b29      	ldr	r3, [pc, #164]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d0e:	4926      	ldr	r1, [pc, #152]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d10:	4313      	orrs	r3, r2
 8009d12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d1e:	d105      	bne.n	8009d2c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009d20:	4b21      	ldr	r3, [pc, #132]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	4a20      	ldr	r2, [pc, #128]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d2a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d015      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009d38:	4b1b      	ldr	r3, [pc, #108]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d3e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d46:	4918      	ldr	r1, [pc, #96]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d56:	d105      	bne.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009d58:	4b13      	ldr	r3, [pc, #76]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	4a12      	ldr	r2, [pc, #72]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d62:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d015      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009d70:	4b0d      	ldr	r3, [pc, #52]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d7e:	490a      	ldr	r1, [pc, #40]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d80:	4313      	orrs	r3, r2
 8009d82:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d8a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d8e:	d105      	bne.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d90:	4b05      	ldr	r3, [pc, #20]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d92:	68db      	ldr	r3, [r3, #12]
 8009d94:	4a04      	ldr	r2, [pc, #16]	@ (8009da8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d9a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009d9c:	7cbb      	ldrb	r3, [r7, #18]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3718      	adds	r7, #24
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	40021000 	.word	0x40021000

08009dac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b082      	sub	sp, #8
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e049      	b.n	8009e52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dc4:	b2db      	uxtb	r3, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d106      	bne.n	8009dd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f7fa f93a 	bl	800404c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	3304      	adds	r3, #4
 8009de8:	4619      	mov	r1, r3
 8009dea:	4610      	mov	r0, r2
 8009dec:	f000 fe58 	bl	800aaa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2201      	movs	r2, #1
 8009e24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
	...

08009e5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d001      	beq.n	8009e74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009e70:	2301      	movs	r3, #1
 8009e72:	e04c      	b.n	8009f0e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a26      	ldr	r2, [pc, #152]	@ (8009f1c <HAL_TIM_Base_Start+0xc0>)
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d022      	beq.n	8009ecc <HAL_TIM_Base_Start+0x70>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e8e:	d01d      	beq.n	8009ecc <HAL_TIM_Base_Start+0x70>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	4a22      	ldr	r2, [pc, #136]	@ (8009f20 <HAL_TIM_Base_Start+0xc4>)
 8009e96:	4293      	cmp	r3, r2
 8009e98:	d018      	beq.n	8009ecc <HAL_TIM_Base_Start+0x70>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a21      	ldr	r2, [pc, #132]	@ (8009f24 <HAL_TIM_Base_Start+0xc8>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d013      	beq.n	8009ecc <HAL_TIM_Base_Start+0x70>
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	4a1f      	ldr	r2, [pc, #124]	@ (8009f28 <HAL_TIM_Base_Start+0xcc>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d00e      	beq.n	8009ecc <HAL_TIM_Base_Start+0x70>
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8009f2c <HAL_TIM_Base_Start+0xd0>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d009      	beq.n	8009ecc <HAL_TIM_Base_Start+0x70>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a1c      	ldr	r2, [pc, #112]	@ (8009f30 <HAL_TIM_Base_Start+0xd4>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d004      	beq.n	8009ecc <HAL_TIM_Base_Start+0x70>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a1b      	ldr	r2, [pc, #108]	@ (8009f34 <HAL_TIM_Base_Start+0xd8>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d115      	bne.n	8009ef8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	689a      	ldr	r2, [r3, #8]
 8009ed2:	4b19      	ldr	r3, [pc, #100]	@ (8009f38 <HAL_TIM_Base_Start+0xdc>)
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	2b06      	cmp	r3, #6
 8009edc:	d015      	beq.n	8009f0a <HAL_TIM_Base_Start+0xae>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ee4:	d011      	beq.n	8009f0a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	681a      	ldr	r2, [r3, #0]
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f042 0201 	orr.w	r2, r2, #1
 8009ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ef6:	e008      	b.n	8009f0a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f042 0201 	orr.w	r2, r2, #1
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	e000      	b.n	8009f0c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	40012c00 	.word	0x40012c00
 8009f20:	40000400 	.word	0x40000400
 8009f24:	40000800 	.word	0x40000800
 8009f28:	40000c00 	.word	0x40000c00
 8009f2c:	40013400 	.word	0x40013400
 8009f30:	40014000 	.word	0x40014000
 8009f34:	40015000 	.word	0x40015000
 8009f38:	00010007 	.word	0x00010007

08009f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d001      	beq.n	8009f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e054      	b.n	8009ffe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2202      	movs	r2, #2
 8009f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68da      	ldr	r2, [r3, #12]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f042 0201 	orr.w	r2, r2, #1
 8009f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a26      	ldr	r2, [pc, #152]	@ (800a00c <HAL_TIM_Base_Start_IT+0xd0>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d022      	beq.n	8009fbc <HAL_TIM_Base_Start_IT+0x80>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f7e:	d01d      	beq.n	8009fbc <HAL_TIM_Base_Start_IT+0x80>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a22      	ldr	r2, [pc, #136]	@ (800a010 <HAL_TIM_Base_Start_IT+0xd4>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d018      	beq.n	8009fbc <HAL_TIM_Base_Start_IT+0x80>
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a21      	ldr	r2, [pc, #132]	@ (800a014 <HAL_TIM_Base_Start_IT+0xd8>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d013      	beq.n	8009fbc <HAL_TIM_Base_Start_IT+0x80>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4a1f      	ldr	r2, [pc, #124]	@ (800a018 <HAL_TIM_Base_Start_IT+0xdc>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d00e      	beq.n	8009fbc <HAL_TIM_Base_Start_IT+0x80>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4a1e      	ldr	r2, [pc, #120]	@ (800a01c <HAL_TIM_Base_Start_IT+0xe0>)
 8009fa4:	4293      	cmp	r3, r2
 8009fa6:	d009      	beq.n	8009fbc <HAL_TIM_Base_Start_IT+0x80>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a1c      	ldr	r2, [pc, #112]	@ (800a020 <HAL_TIM_Base_Start_IT+0xe4>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d004      	beq.n	8009fbc <HAL_TIM_Base_Start_IT+0x80>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	4a1b      	ldr	r2, [pc, #108]	@ (800a024 <HAL_TIM_Base_Start_IT+0xe8>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d115      	bne.n	8009fe8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	689a      	ldr	r2, [r3, #8]
 8009fc2:	4b19      	ldr	r3, [pc, #100]	@ (800a028 <HAL_TIM_Base_Start_IT+0xec>)
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2b06      	cmp	r3, #6
 8009fcc:	d015      	beq.n	8009ffa <HAL_TIM_Base_Start_IT+0xbe>
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fd4:	d011      	beq.n	8009ffa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f042 0201 	orr.w	r2, r2, #1
 8009fe4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fe6:	e008      	b.n	8009ffa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f042 0201 	orr.w	r2, r2, #1
 8009ff6:	601a      	str	r2, [r3, #0]
 8009ff8:	e000      	b.n	8009ffc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ffa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3714      	adds	r7, #20
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	40012c00 	.word	0x40012c00
 800a010:	40000400 	.word	0x40000400
 800a014:	40000800 	.word	0x40000800
 800a018:	40000c00 	.word	0x40000c00
 800a01c:	40013400 	.word	0x40013400
 800a020:	40014000 	.word	0x40014000
 800a024:	40015000 	.word	0x40015000
 800a028:	00010007 	.word	0x00010007

0800a02c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	68da      	ldr	r2, [r3, #12]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f022 0201 	bic.w	r2, r2, #1
 800a042:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	6a1a      	ldr	r2, [r3, #32]
 800a04a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a04e:	4013      	ands	r3, r2
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10f      	bne.n	800a074 <HAL_TIM_Base_Stop_IT+0x48>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	6a1a      	ldr	r2, [r3, #32]
 800a05a:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a05e:	4013      	ands	r3, r2
 800a060:	2b00      	cmp	r3, #0
 800a062:	d107      	bne.n	800a074 <HAL_TIM_Base_Stop_IT+0x48>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f022 0201 	bic.w	r2, r2, #1
 800a072:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b082      	sub	sp, #8
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d101      	bne.n	800a09c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e049      	b.n	800a130 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d106      	bne.n	800a0b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f7f9 ff91 	bl	8003fd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2202      	movs	r2, #2
 800a0ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	3304      	adds	r3, #4
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	4610      	mov	r0, r2
 800a0ca:	f000 fce9 	bl	800aaa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2201      	movs	r2, #1
 800a0fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2201      	movs	r2, #1
 800a102:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3708      	adds	r7, #8
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d109      	bne.n	800a15c <HAL_TIM_PWM_Start+0x24>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a14e:	b2db      	uxtb	r3, r3
 800a150:	2b01      	cmp	r3, #1
 800a152:	bf14      	ite	ne
 800a154:	2301      	movne	r3, #1
 800a156:	2300      	moveq	r3, #0
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	e03c      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x9e>
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	2b04      	cmp	r3, #4
 800a160:	d109      	bne.n	800a176 <HAL_TIM_PWM_Start+0x3e>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a168:	b2db      	uxtb	r3, r3
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	bf14      	ite	ne
 800a16e:	2301      	movne	r3, #1
 800a170:	2300      	moveq	r3, #0
 800a172:	b2db      	uxtb	r3, r3
 800a174:	e02f      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x9e>
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d109      	bne.n	800a190 <HAL_TIM_PWM_Start+0x58>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a182:	b2db      	uxtb	r3, r3
 800a184:	2b01      	cmp	r3, #1
 800a186:	bf14      	ite	ne
 800a188:	2301      	movne	r3, #1
 800a18a:	2300      	moveq	r3, #0
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	e022      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x9e>
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	2b0c      	cmp	r3, #12
 800a194:	d109      	bne.n	800a1aa <HAL_TIM_PWM_Start+0x72>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	bf14      	ite	ne
 800a1a2:	2301      	movne	r3, #1
 800a1a4:	2300      	moveq	r3, #0
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	e015      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x9e>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2b10      	cmp	r3, #16
 800a1ae:	d109      	bne.n	800a1c4 <HAL_TIM_PWM_Start+0x8c>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	2b01      	cmp	r3, #1
 800a1ba:	bf14      	ite	ne
 800a1bc:	2301      	movne	r3, #1
 800a1be:	2300      	moveq	r3, #0
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	e008      	b.n	800a1d6 <HAL_TIM_PWM_Start+0x9e>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	bf14      	ite	ne
 800a1d0:	2301      	movne	r3, #1
 800a1d2:	2300      	moveq	r3, #0
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a1da:	2301      	movs	r3, #1
 800a1dc:	e0a6      	b.n	800a32c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d104      	bne.n	800a1ee <HAL_TIM_PWM_Start+0xb6>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2202      	movs	r2, #2
 800a1e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a1ec:	e023      	b.n	800a236 <HAL_TIM_PWM_Start+0xfe>
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d104      	bne.n	800a1fe <HAL_TIM_PWM_Start+0xc6>
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2202      	movs	r2, #2
 800a1f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a1fc:	e01b      	b.n	800a236 <HAL_TIM_PWM_Start+0xfe>
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	2b08      	cmp	r3, #8
 800a202:	d104      	bne.n	800a20e <HAL_TIM_PWM_Start+0xd6>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2202      	movs	r2, #2
 800a208:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a20c:	e013      	b.n	800a236 <HAL_TIM_PWM_Start+0xfe>
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	2b0c      	cmp	r3, #12
 800a212:	d104      	bne.n	800a21e <HAL_TIM_PWM_Start+0xe6>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a21c:	e00b      	b.n	800a236 <HAL_TIM_PWM_Start+0xfe>
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	2b10      	cmp	r3, #16
 800a222:	d104      	bne.n	800a22e <HAL_TIM_PWM_Start+0xf6>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2202      	movs	r2, #2
 800a228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a22c:	e003      	b.n	800a236 <HAL_TIM_PWM_Start+0xfe>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2202      	movs	r2, #2
 800a232:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2201      	movs	r2, #1
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	4618      	mov	r0, r3
 800a240:	f001 f8a8 	bl	800b394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4a3a      	ldr	r2, [pc, #232]	@ (800a334 <HAL_TIM_PWM_Start+0x1fc>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d018      	beq.n	800a280 <HAL_TIM_PWM_Start+0x148>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a39      	ldr	r2, [pc, #228]	@ (800a338 <HAL_TIM_PWM_Start+0x200>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d013      	beq.n	800a280 <HAL_TIM_PWM_Start+0x148>
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a37      	ldr	r2, [pc, #220]	@ (800a33c <HAL_TIM_PWM_Start+0x204>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d00e      	beq.n	800a280 <HAL_TIM_PWM_Start+0x148>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a36      	ldr	r2, [pc, #216]	@ (800a340 <HAL_TIM_PWM_Start+0x208>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d009      	beq.n	800a280 <HAL_TIM_PWM_Start+0x148>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	4a34      	ldr	r2, [pc, #208]	@ (800a344 <HAL_TIM_PWM_Start+0x20c>)
 800a272:	4293      	cmp	r3, r2
 800a274:	d004      	beq.n	800a280 <HAL_TIM_PWM_Start+0x148>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a33      	ldr	r2, [pc, #204]	@ (800a348 <HAL_TIM_PWM_Start+0x210>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d101      	bne.n	800a284 <HAL_TIM_PWM_Start+0x14c>
 800a280:	2301      	movs	r3, #1
 800a282:	e000      	b.n	800a286 <HAL_TIM_PWM_Start+0x14e>
 800a284:	2300      	movs	r3, #0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d007      	beq.n	800a29a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a298:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	4a25      	ldr	r2, [pc, #148]	@ (800a334 <HAL_TIM_PWM_Start+0x1fc>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d022      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x1b2>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2ac:	d01d      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x1b2>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	4a26      	ldr	r2, [pc, #152]	@ (800a34c <HAL_TIM_PWM_Start+0x214>)
 800a2b4:	4293      	cmp	r3, r2
 800a2b6:	d018      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x1b2>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a24      	ldr	r2, [pc, #144]	@ (800a350 <HAL_TIM_PWM_Start+0x218>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d013      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x1b2>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a23      	ldr	r2, [pc, #140]	@ (800a354 <HAL_TIM_PWM_Start+0x21c>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d00e      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x1b2>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a19      	ldr	r2, [pc, #100]	@ (800a338 <HAL_TIM_PWM_Start+0x200>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d009      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x1b2>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a18      	ldr	r2, [pc, #96]	@ (800a33c <HAL_TIM_PWM_Start+0x204>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d004      	beq.n	800a2ea <HAL_TIM_PWM_Start+0x1b2>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a18      	ldr	r2, [pc, #96]	@ (800a348 <HAL_TIM_PWM_Start+0x210>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d115      	bne.n	800a316 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	689a      	ldr	r2, [r3, #8]
 800a2f0:	4b19      	ldr	r3, [pc, #100]	@ (800a358 <HAL_TIM_PWM_Start+0x220>)
 800a2f2:	4013      	ands	r3, r2
 800a2f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2b06      	cmp	r3, #6
 800a2fa:	d015      	beq.n	800a328 <HAL_TIM_PWM_Start+0x1f0>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a302:	d011      	beq.n	800a328 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f042 0201 	orr.w	r2, r2, #1
 800a312:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a314:	e008      	b.n	800a328 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	681a      	ldr	r2, [r3, #0]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f042 0201 	orr.w	r2, r2, #1
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	e000      	b.n	800a32a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a328:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	40012c00 	.word	0x40012c00
 800a338:	40013400 	.word	0x40013400
 800a33c:	40014000 	.word	0x40014000
 800a340:	40014400 	.word	0x40014400
 800a344:	40014800 	.word	0x40014800
 800a348:	40015000 	.word	0x40015000
 800a34c:	40000400 	.word	0x40000400
 800a350:	40000800 	.word	0x40000800
 800a354:	40000c00 	.word	0x40000c00
 800a358:	00010007 	.word	0x00010007

0800a35c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b084      	sub	sp, #16
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	f003 0302 	and.w	r3, r3, #2
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d020      	beq.n	800a3c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f003 0302 	and.w	r3, r3, #2
 800a384:	2b00      	cmp	r3, #0
 800a386:	d01b      	beq.n	800a3c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f06f 0202 	mvn.w	r2, #2
 800a390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2201      	movs	r2, #1
 800a396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	f003 0303 	and.w	r3, r3, #3
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d003      	beq.n	800a3ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 fb5c 	bl	800aa64 <HAL_TIM_IC_CaptureCallback>
 800a3ac:	e005      	b.n	800a3ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 fb4e 	bl	800aa50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fb5f 	bl	800aa78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	f003 0304 	and.w	r3, r3, #4
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d020      	beq.n	800a40c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	f003 0304 	and.w	r3, r3, #4
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d01b      	beq.n	800a40c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f06f 0204 	mvn.w	r2, #4
 800a3dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2202      	movs	r2, #2
 800a3e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	699b      	ldr	r3, [r3, #24]
 800a3ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d003      	beq.n	800a3fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f000 fb36 	bl	800aa64 <HAL_TIM_IC_CaptureCallback>
 800a3f8:	e005      	b.n	800a406 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fb28 	bl	800aa50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 fb39 	bl	800aa78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	f003 0308 	and.w	r3, r3, #8
 800a412:	2b00      	cmp	r3, #0
 800a414:	d020      	beq.n	800a458 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f003 0308 	and.w	r3, r3, #8
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d01b      	beq.n	800a458 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f06f 0208 	mvn.w	r2, #8
 800a428:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2204      	movs	r2, #4
 800a42e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	69db      	ldr	r3, [r3, #28]
 800a436:	f003 0303 	and.w	r3, r3, #3
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d003      	beq.n	800a446 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fb10 	bl	800aa64 <HAL_TIM_IC_CaptureCallback>
 800a444:	e005      	b.n	800a452 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f000 fb02 	bl	800aa50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fb13 	bl	800aa78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	f003 0310 	and.w	r3, r3, #16
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d020      	beq.n	800a4a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	f003 0310 	and.w	r3, r3, #16
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d01b      	beq.n	800a4a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f06f 0210 	mvn.w	r2, #16
 800a474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2208      	movs	r2, #8
 800a47a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a486:	2b00      	cmp	r3, #0
 800a488:	d003      	beq.n	800a492 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 faea 	bl	800aa64 <HAL_TIM_IC_CaptureCallback>
 800a490:	e005      	b.n	800a49e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f000 fadc 	bl	800aa50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f000 faed 	bl	800aa78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	f003 0301 	and.w	r3, r3, #1
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00c      	beq.n	800a4c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	f003 0301 	and.w	r3, r3, #1
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d007      	beq.n	800a4c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f06f 0201 	mvn.w	r2, #1
 800a4c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a4c2:	6878      	ldr	r0, [r7, #4]
 800a4c4:	f7f8 fbc8 	bl	8002c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d104      	bne.n	800a4dc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00c      	beq.n	800a4f6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d007      	beq.n	800a4f6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a4ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f001 f8a9 	bl	800b648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00c      	beq.n	800a51a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a506:	2b00      	cmp	r3, #0
 800a508:	d007      	beq.n	800a51a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f001 f8a1 	bl	800b65c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00c      	beq.n	800a53e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d007      	beq.n	800a53e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 faa7 	bl	800aa8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	f003 0320 	and.w	r3, r3, #32
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00c      	beq.n	800a562 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f003 0320 	and.w	r3, r3, #32
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d007      	beq.n	800a562 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f06f 0220 	mvn.w	r2, #32
 800a55a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f001 f869 	bl	800b634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00c      	beq.n	800a586 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d007      	beq.n	800a586 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a57e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	f001 f875 	bl	800b670 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00c      	beq.n	800a5aa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a596:	2b00      	cmp	r3, #0
 800a598:	d007      	beq.n	800a5aa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a5a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f001 f86d 	bl	800b684 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00c      	beq.n	800a5ce <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d007      	beq.n	800a5ce <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a5c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f001 f865 	bl	800b698 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a5ce:	68bb      	ldr	r3, [r7, #8]
 800a5d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00c      	beq.n	800a5f2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d007      	beq.n	800a5f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a5ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f001 f85d 	bl	800b6ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a5f2:	bf00      	nop
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
	...

0800a5fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a608:	2300      	movs	r3, #0
 800a60a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a612:	2b01      	cmp	r3, #1
 800a614:	d101      	bne.n	800a61a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a616:	2302      	movs	r3, #2
 800a618:	e0ff      	b.n	800a81a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2b14      	cmp	r3, #20
 800a626:	f200 80f0 	bhi.w	800a80a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a62a:	a201      	add	r2, pc, #4	@ (adr r2, 800a630 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a630:	0800a685 	.word	0x0800a685
 800a634:	0800a80b 	.word	0x0800a80b
 800a638:	0800a80b 	.word	0x0800a80b
 800a63c:	0800a80b 	.word	0x0800a80b
 800a640:	0800a6c5 	.word	0x0800a6c5
 800a644:	0800a80b 	.word	0x0800a80b
 800a648:	0800a80b 	.word	0x0800a80b
 800a64c:	0800a80b 	.word	0x0800a80b
 800a650:	0800a707 	.word	0x0800a707
 800a654:	0800a80b 	.word	0x0800a80b
 800a658:	0800a80b 	.word	0x0800a80b
 800a65c:	0800a80b 	.word	0x0800a80b
 800a660:	0800a747 	.word	0x0800a747
 800a664:	0800a80b 	.word	0x0800a80b
 800a668:	0800a80b 	.word	0x0800a80b
 800a66c:	0800a80b 	.word	0x0800a80b
 800a670:	0800a789 	.word	0x0800a789
 800a674:	0800a80b 	.word	0x0800a80b
 800a678:	0800a80b 	.word	0x0800a80b
 800a67c:	0800a80b 	.word	0x0800a80b
 800a680:	0800a7c9 	.word	0x0800a7c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68b9      	ldr	r1, [r7, #8]
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 fabc 	bl	800ac08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	699a      	ldr	r2, [r3, #24]
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f042 0208 	orr.w	r2, r2, #8
 800a69e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	699a      	ldr	r2, [r3, #24]
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f022 0204 	bic.w	r2, r2, #4
 800a6ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	6999      	ldr	r1, [r3, #24]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	691a      	ldr	r2, [r3, #16]
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	430a      	orrs	r2, r1
 800a6c0:	619a      	str	r2, [r3, #24]
      break;
 800a6c2:	e0a5      	b.n	800a810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68b9      	ldr	r1, [r7, #8]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 fb36 	bl	800ad3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	699a      	ldr	r2, [r3, #24]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a6de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	699a      	ldr	r2, [r3, #24]
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	6999      	ldr	r1, [r3, #24]
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	021a      	lsls	r2, r3, #8
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	430a      	orrs	r2, r1
 800a702:	619a      	str	r2, [r3, #24]
      break;
 800a704:	e084      	b.n	800a810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	68b9      	ldr	r1, [r7, #8]
 800a70c:	4618      	mov	r0, r3
 800a70e:	f000 fba9 	bl	800ae64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	69da      	ldr	r2, [r3, #28]
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f042 0208 	orr.w	r2, r2, #8
 800a720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	69da      	ldr	r2, [r3, #28]
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f022 0204 	bic.w	r2, r2, #4
 800a730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	69d9      	ldr	r1, [r3, #28]
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	691a      	ldr	r2, [r3, #16]
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	430a      	orrs	r2, r1
 800a742:	61da      	str	r2, [r3, #28]
      break;
 800a744:	e064      	b.n	800a810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68b9      	ldr	r1, [r7, #8]
 800a74c:	4618      	mov	r0, r3
 800a74e:	f000 fc1b 	bl	800af88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	69da      	ldr	r2, [r3, #28]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a760:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	69da      	ldr	r2, [r3, #28]
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a770:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	69d9      	ldr	r1, [r3, #28]
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	021a      	lsls	r2, r3, #8
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	430a      	orrs	r2, r1
 800a784:	61da      	str	r2, [r3, #28]
      break;
 800a786:	e043      	b.n	800a810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68b9      	ldr	r1, [r7, #8]
 800a78e:	4618      	mov	r0, r3
 800a790:	f000 fc8e 	bl	800b0b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f042 0208 	orr.w	r2, r2, #8
 800a7a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f022 0204 	bic.w	r2, r2, #4
 800a7b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	691a      	ldr	r2, [r3, #16]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	430a      	orrs	r2, r1
 800a7c4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a7c6:	e023      	b.n	800a810 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	68b9      	ldr	r1, [r7, #8]
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 fcd8 	bl	800b184 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a7f2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	021a      	lsls	r2, r3, #8
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	430a      	orrs	r2, r1
 800a806:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a808:	e002      	b.n	800a810 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	75fb      	strb	r3, [r7, #23]
      break;
 800a80e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a818:	7dfb      	ldrb	r3, [r7, #23]
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3718      	adds	r7, #24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}
 800a822:	bf00      	nop

0800a824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a82e:	2300      	movs	r3, #0
 800a830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d101      	bne.n	800a840 <HAL_TIM_ConfigClockSource+0x1c>
 800a83c:	2302      	movs	r3, #2
 800a83e:	e0f6      	b.n	800aa2e <HAL_TIM_ConfigClockSource+0x20a>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2202      	movs	r2, #2
 800a84c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	689b      	ldr	r3, [r3, #8]
 800a856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a85e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a862:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a86a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a6f      	ldr	r2, [pc, #444]	@ (800aa38 <HAL_TIM_ConfigClockSource+0x214>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	f000 80c1 	beq.w	800aa02 <HAL_TIM_ConfigClockSource+0x1de>
 800a880:	4a6d      	ldr	r2, [pc, #436]	@ (800aa38 <HAL_TIM_ConfigClockSource+0x214>)
 800a882:	4293      	cmp	r3, r2
 800a884:	f200 80c6 	bhi.w	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a888:	4a6c      	ldr	r2, [pc, #432]	@ (800aa3c <HAL_TIM_ConfigClockSource+0x218>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	f000 80b9 	beq.w	800aa02 <HAL_TIM_ConfigClockSource+0x1de>
 800a890:	4a6a      	ldr	r2, [pc, #424]	@ (800aa3c <HAL_TIM_ConfigClockSource+0x218>)
 800a892:	4293      	cmp	r3, r2
 800a894:	f200 80be 	bhi.w	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a898:	4a69      	ldr	r2, [pc, #420]	@ (800aa40 <HAL_TIM_ConfigClockSource+0x21c>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	f000 80b1 	beq.w	800aa02 <HAL_TIM_ConfigClockSource+0x1de>
 800a8a0:	4a67      	ldr	r2, [pc, #412]	@ (800aa40 <HAL_TIM_ConfigClockSource+0x21c>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	f200 80b6 	bhi.w	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a8a8:	4a66      	ldr	r2, [pc, #408]	@ (800aa44 <HAL_TIM_ConfigClockSource+0x220>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	f000 80a9 	beq.w	800aa02 <HAL_TIM_ConfigClockSource+0x1de>
 800a8b0:	4a64      	ldr	r2, [pc, #400]	@ (800aa44 <HAL_TIM_ConfigClockSource+0x220>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	f200 80ae 	bhi.w	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a8b8:	4a63      	ldr	r2, [pc, #396]	@ (800aa48 <HAL_TIM_ConfigClockSource+0x224>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	f000 80a1 	beq.w	800aa02 <HAL_TIM_ConfigClockSource+0x1de>
 800a8c0:	4a61      	ldr	r2, [pc, #388]	@ (800aa48 <HAL_TIM_ConfigClockSource+0x224>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	f200 80a6 	bhi.w	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a8c8:	4a60      	ldr	r2, [pc, #384]	@ (800aa4c <HAL_TIM_ConfigClockSource+0x228>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	f000 8099 	beq.w	800aa02 <HAL_TIM_ConfigClockSource+0x1de>
 800a8d0:	4a5e      	ldr	r2, [pc, #376]	@ (800aa4c <HAL_TIM_ConfigClockSource+0x228>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	f200 809e 	bhi.w	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a8d8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a8dc:	f000 8091 	beq.w	800aa02 <HAL_TIM_ConfigClockSource+0x1de>
 800a8e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a8e4:	f200 8096 	bhi.w	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a8e8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8ec:	f000 8089 	beq.w	800aa02 <HAL_TIM_ConfigClockSource+0x1de>
 800a8f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a8f4:	f200 808e 	bhi.w	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a8f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8fc:	d03e      	beq.n	800a97c <HAL_TIM_ConfigClockSource+0x158>
 800a8fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a902:	f200 8087 	bhi.w	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a90a:	f000 8086 	beq.w	800aa1a <HAL_TIM_ConfigClockSource+0x1f6>
 800a90e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a912:	d87f      	bhi.n	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a914:	2b70      	cmp	r3, #112	@ 0x70
 800a916:	d01a      	beq.n	800a94e <HAL_TIM_ConfigClockSource+0x12a>
 800a918:	2b70      	cmp	r3, #112	@ 0x70
 800a91a:	d87b      	bhi.n	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a91c:	2b60      	cmp	r3, #96	@ 0x60
 800a91e:	d050      	beq.n	800a9c2 <HAL_TIM_ConfigClockSource+0x19e>
 800a920:	2b60      	cmp	r3, #96	@ 0x60
 800a922:	d877      	bhi.n	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a924:	2b50      	cmp	r3, #80	@ 0x50
 800a926:	d03c      	beq.n	800a9a2 <HAL_TIM_ConfigClockSource+0x17e>
 800a928:	2b50      	cmp	r3, #80	@ 0x50
 800a92a:	d873      	bhi.n	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a92c:	2b40      	cmp	r3, #64	@ 0x40
 800a92e:	d058      	beq.n	800a9e2 <HAL_TIM_ConfigClockSource+0x1be>
 800a930:	2b40      	cmp	r3, #64	@ 0x40
 800a932:	d86f      	bhi.n	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a934:	2b30      	cmp	r3, #48	@ 0x30
 800a936:	d064      	beq.n	800aa02 <HAL_TIM_ConfigClockSource+0x1de>
 800a938:	2b30      	cmp	r3, #48	@ 0x30
 800a93a:	d86b      	bhi.n	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a93c:	2b20      	cmp	r3, #32
 800a93e:	d060      	beq.n	800aa02 <HAL_TIM_ConfigClockSource+0x1de>
 800a940:	2b20      	cmp	r3, #32
 800a942:	d867      	bhi.n	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
 800a944:	2b00      	cmp	r3, #0
 800a946:	d05c      	beq.n	800aa02 <HAL_TIM_ConfigClockSource+0x1de>
 800a948:	2b10      	cmp	r3, #16
 800a94a:	d05a      	beq.n	800aa02 <HAL_TIM_ConfigClockSource+0x1de>
 800a94c:	e062      	b.n	800aa14 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a95e:	f000 fcf9 	bl	800b354 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a970:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	68ba      	ldr	r2, [r7, #8]
 800a978:	609a      	str	r2, [r3, #8]
      break;
 800a97a:	e04f      	b.n	800aa1c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a98c:	f000 fce2 	bl	800b354 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	689a      	ldr	r2, [r3, #8]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a99e:	609a      	str	r2, [r3, #8]
      break;
 800a9a0:	e03c      	b.n	800aa1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f000 fc54 	bl	800b25c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2150      	movs	r1, #80	@ 0x50
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 fcad 	bl	800b31a <TIM_ITRx_SetConfig>
      break;
 800a9c0:	e02c      	b.n	800aa1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	f000 fc73 	bl	800b2ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2160      	movs	r1, #96	@ 0x60
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 fc9d 	bl	800b31a <TIM_ITRx_SetConfig>
      break;
 800a9e0:	e01c      	b.n	800aa1c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9ee:	461a      	mov	r2, r3
 800a9f0:	f000 fc34 	bl	800b25c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2140      	movs	r1, #64	@ 0x40
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f000 fc8d 	bl	800b31a <TIM_ITRx_SetConfig>
      break;
 800aa00:	e00c      	b.n	800aa1c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	4610      	mov	r0, r2
 800aa0e:	f000 fc84 	bl	800b31a <TIM_ITRx_SetConfig>
      break;
 800aa12:	e003      	b.n	800aa1c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800aa14:	2301      	movs	r3, #1
 800aa16:	73fb      	strb	r3, [r7, #15]
      break;
 800aa18:	e000      	b.n	800aa1c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800aa1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	00100070 	.word	0x00100070
 800aa3c:	00100060 	.word	0x00100060
 800aa40:	00100050 	.word	0x00100050
 800aa44:	00100040 	.word	0x00100040
 800aa48:	00100030 	.word	0x00100030
 800aa4c:	00100020 	.word	0x00100020

0800aa50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b083      	sub	sp, #12
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aa58:	bf00      	nop
 800aa5a:	370c      	adds	r7, #12
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa6c:	bf00      	nop
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa80:	bf00      	nop
 800aa82:	370c      	adds	r7, #12
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b083      	sub	sp, #12
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b085      	sub	sp, #20
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a4c      	ldr	r2, [pc, #304]	@ (800abe4 <TIM_Base_SetConfig+0x144>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d017      	beq.n	800aae8 <TIM_Base_SetConfig+0x48>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aabe:	d013      	beq.n	800aae8 <TIM_Base_SetConfig+0x48>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4a49      	ldr	r2, [pc, #292]	@ (800abe8 <TIM_Base_SetConfig+0x148>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d00f      	beq.n	800aae8 <TIM_Base_SetConfig+0x48>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a48      	ldr	r2, [pc, #288]	@ (800abec <TIM_Base_SetConfig+0x14c>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d00b      	beq.n	800aae8 <TIM_Base_SetConfig+0x48>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a47      	ldr	r2, [pc, #284]	@ (800abf0 <TIM_Base_SetConfig+0x150>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d007      	beq.n	800aae8 <TIM_Base_SetConfig+0x48>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	4a46      	ldr	r2, [pc, #280]	@ (800abf4 <TIM_Base_SetConfig+0x154>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d003      	beq.n	800aae8 <TIM_Base_SetConfig+0x48>
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	4a45      	ldr	r2, [pc, #276]	@ (800abf8 <TIM_Base_SetConfig+0x158>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d108      	bne.n	800aafa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	4a39      	ldr	r2, [pc, #228]	@ (800abe4 <TIM_Base_SetConfig+0x144>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d023      	beq.n	800ab4a <TIM_Base_SetConfig+0xaa>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab08:	d01f      	beq.n	800ab4a <TIM_Base_SetConfig+0xaa>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4a36      	ldr	r2, [pc, #216]	@ (800abe8 <TIM_Base_SetConfig+0x148>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d01b      	beq.n	800ab4a <TIM_Base_SetConfig+0xaa>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	4a35      	ldr	r2, [pc, #212]	@ (800abec <TIM_Base_SetConfig+0x14c>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d017      	beq.n	800ab4a <TIM_Base_SetConfig+0xaa>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	4a34      	ldr	r2, [pc, #208]	@ (800abf0 <TIM_Base_SetConfig+0x150>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d013      	beq.n	800ab4a <TIM_Base_SetConfig+0xaa>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	4a33      	ldr	r2, [pc, #204]	@ (800abf4 <TIM_Base_SetConfig+0x154>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d00f      	beq.n	800ab4a <TIM_Base_SetConfig+0xaa>
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	4a33      	ldr	r2, [pc, #204]	@ (800abfc <TIM_Base_SetConfig+0x15c>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d00b      	beq.n	800ab4a <TIM_Base_SetConfig+0xaa>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	4a32      	ldr	r2, [pc, #200]	@ (800ac00 <TIM_Base_SetConfig+0x160>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d007      	beq.n	800ab4a <TIM_Base_SetConfig+0xaa>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a31      	ldr	r2, [pc, #196]	@ (800ac04 <TIM_Base_SetConfig+0x164>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d003      	beq.n	800ab4a <TIM_Base_SetConfig+0xaa>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a2c      	ldr	r2, [pc, #176]	@ (800abf8 <TIM_Base_SetConfig+0x158>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d108      	bne.n	800ab5c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ab50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	68db      	ldr	r3, [r3, #12]
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	695b      	ldr	r3, [r3, #20]
 800ab66:	4313      	orrs	r3, r2
 800ab68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	689a      	ldr	r2, [r3, #8]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a18      	ldr	r2, [pc, #96]	@ (800abe4 <TIM_Base_SetConfig+0x144>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d013      	beq.n	800abb0 <TIM_Base_SetConfig+0x110>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	4a1a      	ldr	r2, [pc, #104]	@ (800abf4 <TIM_Base_SetConfig+0x154>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d00f      	beq.n	800abb0 <TIM_Base_SetConfig+0x110>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4a1a      	ldr	r2, [pc, #104]	@ (800abfc <TIM_Base_SetConfig+0x15c>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d00b      	beq.n	800abb0 <TIM_Base_SetConfig+0x110>
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	4a19      	ldr	r2, [pc, #100]	@ (800ac00 <TIM_Base_SetConfig+0x160>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d007      	beq.n	800abb0 <TIM_Base_SetConfig+0x110>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	4a18      	ldr	r2, [pc, #96]	@ (800ac04 <TIM_Base_SetConfig+0x164>)
 800aba4:	4293      	cmp	r3, r2
 800aba6:	d003      	beq.n	800abb0 <TIM_Base_SetConfig+0x110>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	4a13      	ldr	r2, [pc, #76]	@ (800abf8 <TIM_Base_SetConfig+0x158>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d103      	bne.n	800abb8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	691a      	ldr	r2, [r3, #16]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2201      	movs	r2, #1
 800abbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	f003 0301 	and.w	r3, r3, #1
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d105      	bne.n	800abd6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	f023 0201 	bic.w	r2, r3, #1
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	611a      	str	r2, [r3, #16]
  }
}
 800abd6:	bf00      	nop
 800abd8:	3714      	adds	r7, #20
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	40012c00 	.word	0x40012c00
 800abe8:	40000400 	.word	0x40000400
 800abec:	40000800 	.word	0x40000800
 800abf0:	40000c00 	.word	0x40000c00
 800abf4:	40013400 	.word	0x40013400
 800abf8:	40015000 	.word	0x40015000
 800abfc:	40014000 	.word	0x40014000
 800ac00:	40014400 	.word	0x40014400
 800ac04:	40014800 	.word	0x40014800

0800ac08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b087      	sub	sp, #28
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	f023 0201 	bic.w	r2, r3, #1
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	699b      	ldr	r3, [r3, #24]
 800ac2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f023 0303 	bic.w	r3, r3, #3
 800ac42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	f023 0302 	bic.w	r3, r3, #2
 800ac54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	697a      	ldr	r2, [r7, #20]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4a30      	ldr	r2, [pc, #192]	@ (800ad24 <TIM_OC1_SetConfig+0x11c>)
 800ac64:	4293      	cmp	r3, r2
 800ac66:	d013      	beq.n	800ac90 <TIM_OC1_SetConfig+0x88>
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	4a2f      	ldr	r2, [pc, #188]	@ (800ad28 <TIM_OC1_SetConfig+0x120>)
 800ac6c:	4293      	cmp	r3, r2
 800ac6e:	d00f      	beq.n	800ac90 <TIM_OC1_SetConfig+0x88>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	4a2e      	ldr	r2, [pc, #184]	@ (800ad2c <TIM_OC1_SetConfig+0x124>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d00b      	beq.n	800ac90 <TIM_OC1_SetConfig+0x88>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4a2d      	ldr	r2, [pc, #180]	@ (800ad30 <TIM_OC1_SetConfig+0x128>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d007      	beq.n	800ac90 <TIM_OC1_SetConfig+0x88>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4a2c      	ldr	r2, [pc, #176]	@ (800ad34 <TIM_OC1_SetConfig+0x12c>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d003      	beq.n	800ac90 <TIM_OC1_SetConfig+0x88>
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a2b      	ldr	r2, [pc, #172]	@ (800ad38 <TIM_OC1_SetConfig+0x130>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d10c      	bne.n	800acaa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	f023 0308 	bic.w	r3, r3, #8
 800ac96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	68db      	ldr	r3, [r3, #12]
 800ac9c:	697a      	ldr	r2, [r7, #20]
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	f023 0304 	bic.w	r3, r3, #4
 800aca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	4a1d      	ldr	r2, [pc, #116]	@ (800ad24 <TIM_OC1_SetConfig+0x11c>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d013      	beq.n	800acda <TIM_OC1_SetConfig+0xd2>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4a1c      	ldr	r2, [pc, #112]	@ (800ad28 <TIM_OC1_SetConfig+0x120>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d00f      	beq.n	800acda <TIM_OC1_SetConfig+0xd2>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	4a1b      	ldr	r2, [pc, #108]	@ (800ad2c <TIM_OC1_SetConfig+0x124>)
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d00b      	beq.n	800acda <TIM_OC1_SetConfig+0xd2>
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	4a1a      	ldr	r2, [pc, #104]	@ (800ad30 <TIM_OC1_SetConfig+0x128>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d007      	beq.n	800acda <TIM_OC1_SetConfig+0xd2>
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	4a19      	ldr	r2, [pc, #100]	@ (800ad34 <TIM_OC1_SetConfig+0x12c>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d003      	beq.n	800acda <TIM_OC1_SetConfig+0xd2>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	4a18      	ldr	r2, [pc, #96]	@ (800ad38 <TIM_OC1_SetConfig+0x130>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d111      	bne.n	800acfe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ace0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ace8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	693a      	ldr	r2, [r7, #16]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	693a      	ldr	r2, [r7, #16]
 800acfa:	4313      	orrs	r3, r2
 800acfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	693a      	ldr	r2, [r7, #16]
 800ad02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	685a      	ldr	r2, [r3, #4]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	697a      	ldr	r2, [r7, #20]
 800ad16:	621a      	str	r2, [r3, #32]
}
 800ad18:	bf00      	nop
 800ad1a:	371c      	adds	r7, #28
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad22:	4770      	bx	lr
 800ad24:	40012c00 	.word	0x40012c00
 800ad28:	40013400 	.word	0x40013400
 800ad2c:	40014000 	.word	0x40014000
 800ad30:	40014400 	.word	0x40014400
 800ad34:	40014800 	.word	0x40014800
 800ad38:	40015000 	.word	0x40015000

0800ad3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b087      	sub	sp, #28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6a1b      	ldr	r3, [r3, #32]
 800ad4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a1b      	ldr	r3, [r3, #32]
 800ad50:	f023 0210 	bic.w	r2, r3, #16
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	699b      	ldr	r3, [r3, #24]
 800ad62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ad6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	021b      	lsls	r3, r3, #8
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	4313      	orrs	r3, r2
 800ad82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	f023 0320 	bic.w	r3, r3, #32
 800ad8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	011b      	lsls	r3, r3, #4
 800ad92:	697a      	ldr	r2, [r7, #20]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a2c      	ldr	r2, [pc, #176]	@ (800ae4c <TIM_OC2_SetConfig+0x110>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d007      	beq.n	800adb0 <TIM_OC2_SetConfig+0x74>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a2b      	ldr	r2, [pc, #172]	@ (800ae50 <TIM_OC2_SetConfig+0x114>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d003      	beq.n	800adb0 <TIM_OC2_SetConfig+0x74>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a2a      	ldr	r2, [pc, #168]	@ (800ae54 <TIM_OC2_SetConfig+0x118>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d10d      	bne.n	800adcc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	011b      	lsls	r3, r3, #4
 800adbe:	697a      	ldr	r2, [r7, #20]
 800adc0:	4313      	orrs	r3, r2
 800adc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800adc4:	697b      	ldr	r3, [r7, #20]
 800adc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	4a1f      	ldr	r2, [pc, #124]	@ (800ae4c <TIM_OC2_SetConfig+0x110>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d013      	beq.n	800adfc <TIM_OC2_SetConfig+0xc0>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a1e      	ldr	r2, [pc, #120]	@ (800ae50 <TIM_OC2_SetConfig+0x114>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d00f      	beq.n	800adfc <TIM_OC2_SetConfig+0xc0>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a1e      	ldr	r2, [pc, #120]	@ (800ae58 <TIM_OC2_SetConfig+0x11c>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d00b      	beq.n	800adfc <TIM_OC2_SetConfig+0xc0>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a1d      	ldr	r2, [pc, #116]	@ (800ae5c <TIM_OC2_SetConfig+0x120>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d007      	beq.n	800adfc <TIM_OC2_SetConfig+0xc0>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a1c      	ldr	r2, [pc, #112]	@ (800ae60 <TIM_OC2_SetConfig+0x124>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d003      	beq.n	800adfc <TIM_OC2_SetConfig+0xc0>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a17      	ldr	r2, [pc, #92]	@ (800ae54 <TIM_OC2_SetConfig+0x118>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d113      	bne.n	800ae24 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ae02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ae0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	695b      	ldr	r3, [r3, #20]
 800ae10:	009b      	lsls	r3, r3, #2
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	699b      	ldr	r3, [r3, #24]
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	693a      	ldr	r2, [r7, #16]
 800ae20:	4313      	orrs	r3, r2
 800ae22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	693a      	ldr	r2, [r7, #16]
 800ae28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	68fa      	ldr	r2, [r7, #12]
 800ae2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	685a      	ldr	r2, [r3, #4]
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	697a      	ldr	r2, [r7, #20]
 800ae3c:	621a      	str	r2, [r3, #32]
}
 800ae3e:	bf00      	nop
 800ae40:	371c      	adds	r7, #28
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	40012c00 	.word	0x40012c00
 800ae50:	40013400 	.word	0x40013400
 800ae54:	40015000 	.word	0x40015000
 800ae58:	40014000 	.word	0x40014000
 800ae5c:	40014400 	.word	0x40014400
 800ae60:	40014800 	.word	0x40014800

0800ae64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b087      	sub	sp, #28
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a1b      	ldr	r3, [r3, #32]
 800ae72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6a1b      	ldr	r3, [r3, #32]
 800ae78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f023 0303 	bic.w	r3, r3, #3
 800ae9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800aeb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	021b      	lsls	r3, r3, #8
 800aeb8:	697a      	ldr	r2, [r7, #20]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a2b      	ldr	r2, [pc, #172]	@ (800af70 <TIM_OC3_SetConfig+0x10c>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d007      	beq.n	800aed6 <TIM_OC3_SetConfig+0x72>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4a2a      	ldr	r2, [pc, #168]	@ (800af74 <TIM_OC3_SetConfig+0x110>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d003      	beq.n	800aed6 <TIM_OC3_SetConfig+0x72>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a29      	ldr	r2, [pc, #164]	@ (800af78 <TIM_OC3_SetConfig+0x114>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d10d      	bne.n	800aef2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aedc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	021b      	lsls	r3, r3, #8
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aeea:	697b      	ldr	r3, [r7, #20]
 800aeec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aef0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a1e      	ldr	r2, [pc, #120]	@ (800af70 <TIM_OC3_SetConfig+0x10c>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d013      	beq.n	800af22 <TIM_OC3_SetConfig+0xbe>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4a1d      	ldr	r2, [pc, #116]	@ (800af74 <TIM_OC3_SetConfig+0x110>)
 800aefe:	4293      	cmp	r3, r2
 800af00:	d00f      	beq.n	800af22 <TIM_OC3_SetConfig+0xbe>
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	4a1d      	ldr	r2, [pc, #116]	@ (800af7c <TIM_OC3_SetConfig+0x118>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d00b      	beq.n	800af22 <TIM_OC3_SetConfig+0xbe>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4a1c      	ldr	r2, [pc, #112]	@ (800af80 <TIM_OC3_SetConfig+0x11c>)
 800af0e:	4293      	cmp	r3, r2
 800af10:	d007      	beq.n	800af22 <TIM_OC3_SetConfig+0xbe>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4a1b      	ldr	r2, [pc, #108]	@ (800af84 <TIM_OC3_SetConfig+0x120>)
 800af16:	4293      	cmp	r3, r2
 800af18:	d003      	beq.n	800af22 <TIM_OC3_SetConfig+0xbe>
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	4a16      	ldr	r2, [pc, #88]	@ (800af78 <TIM_OC3_SetConfig+0x114>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d113      	bne.n	800af4a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800af28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800af30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	695b      	ldr	r3, [r3, #20]
 800af36:	011b      	lsls	r3, r3, #4
 800af38:	693a      	ldr	r2, [r7, #16]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	699b      	ldr	r3, [r3, #24]
 800af42:	011b      	lsls	r3, r3, #4
 800af44:	693a      	ldr	r2, [r7, #16]
 800af46:	4313      	orrs	r3, r2
 800af48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	693a      	ldr	r2, [r7, #16]
 800af4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	68fa      	ldr	r2, [r7, #12]
 800af54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	685a      	ldr	r2, [r3, #4]
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	697a      	ldr	r2, [r7, #20]
 800af62:	621a      	str	r2, [r3, #32]
}
 800af64:	bf00      	nop
 800af66:	371c      	adds	r7, #28
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr
 800af70:	40012c00 	.word	0x40012c00
 800af74:	40013400 	.word	0x40013400
 800af78:	40015000 	.word	0x40015000
 800af7c:	40014000 	.word	0x40014000
 800af80:	40014400 	.word	0x40014400
 800af84:	40014800 	.word	0x40014800

0800af88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af88:	b480      	push	{r7}
 800af8a:	b087      	sub	sp, #28
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a1b      	ldr	r3, [r3, #32]
 800af9c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	69db      	ldr	r3, [r3, #28]
 800afae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800afb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	021b      	lsls	r3, r3, #8
 800afca:	68fa      	ldr	r2, [r7, #12]
 800afcc:	4313      	orrs	r3, r2
 800afce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800afd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	031b      	lsls	r3, r3, #12
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	4313      	orrs	r3, r2
 800afe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a2c      	ldr	r2, [pc, #176]	@ (800b098 <TIM_OC4_SetConfig+0x110>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d007      	beq.n	800affc <TIM_OC4_SetConfig+0x74>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	4a2b      	ldr	r2, [pc, #172]	@ (800b09c <TIM_OC4_SetConfig+0x114>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d003      	beq.n	800affc <TIM_OC4_SetConfig+0x74>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4a2a      	ldr	r2, [pc, #168]	@ (800b0a0 <TIM_OC4_SetConfig+0x118>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d10d      	bne.n	800b018 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	68db      	ldr	r3, [r3, #12]
 800b008:	031b      	lsls	r3, r3, #12
 800b00a:	697a      	ldr	r2, [r7, #20]
 800b00c:	4313      	orrs	r3, r2
 800b00e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b016:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a1f      	ldr	r2, [pc, #124]	@ (800b098 <TIM_OC4_SetConfig+0x110>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d013      	beq.n	800b048 <TIM_OC4_SetConfig+0xc0>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a1e      	ldr	r2, [pc, #120]	@ (800b09c <TIM_OC4_SetConfig+0x114>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d00f      	beq.n	800b048 <TIM_OC4_SetConfig+0xc0>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a1e      	ldr	r2, [pc, #120]	@ (800b0a4 <TIM_OC4_SetConfig+0x11c>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d00b      	beq.n	800b048 <TIM_OC4_SetConfig+0xc0>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a1d      	ldr	r2, [pc, #116]	@ (800b0a8 <TIM_OC4_SetConfig+0x120>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d007      	beq.n	800b048 <TIM_OC4_SetConfig+0xc0>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a1c      	ldr	r2, [pc, #112]	@ (800b0ac <TIM_OC4_SetConfig+0x124>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d003      	beq.n	800b048 <TIM_OC4_SetConfig+0xc0>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a17      	ldr	r2, [pc, #92]	@ (800b0a0 <TIM_OC4_SetConfig+0x118>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d113      	bne.n	800b070 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b04e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b056:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	695b      	ldr	r3, [r3, #20]
 800b05c:	019b      	lsls	r3, r3, #6
 800b05e:	693a      	ldr	r2, [r7, #16]
 800b060:	4313      	orrs	r3, r2
 800b062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	699b      	ldr	r3, [r3, #24]
 800b068:	019b      	lsls	r3, r3, #6
 800b06a:	693a      	ldr	r2, [r7, #16]
 800b06c:	4313      	orrs	r3, r2
 800b06e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	693a      	ldr	r2, [r7, #16]
 800b074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	685a      	ldr	r2, [r3, #4]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	697a      	ldr	r2, [r7, #20]
 800b088:	621a      	str	r2, [r3, #32]
}
 800b08a:	bf00      	nop
 800b08c:	371c      	adds	r7, #28
 800b08e:	46bd      	mov	sp, r7
 800b090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	40012c00 	.word	0x40012c00
 800b09c:	40013400 	.word	0x40013400
 800b0a0:	40015000 	.word	0x40015000
 800b0a4:	40014000 	.word	0x40014000
 800b0a8:	40014400 	.word	0x40014400
 800b0ac:	40014800 	.word	0x40014800

0800b0b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b0b0:	b480      	push	{r7}
 800b0b2:	b087      	sub	sp, #28
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a1b      	ldr	r3, [r3, #32]
 800b0be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6a1b      	ldr	r3, [r3, #32]
 800b0c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b0d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b0de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b0f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	041b      	lsls	r3, r3, #16
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a19      	ldr	r2, [pc, #100]	@ (800b16c <TIM_OC5_SetConfig+0xbc>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d013      	beq.n	800b132 <TIM_OC5_SetConfig+0x82>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a18      	ldr	r2, [pc, #96]	@ (800b170 <TIM_OC5_SetConfig+0xc0>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d00f      	beq.n	800b132 <TIM_OC5_SetConfig+0x82>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a17      	ldr	r2, [pc, #92]	@ (800b174 <TIM_OC5_SetConfig+0xc4>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d00b      	beq.n	800b132 <TIM_OC5_SetConfig+0x82>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a16      	ldr	r2, [pc, #88]	@ (800b178 <TIM_OC5_SetConfig+0xc8>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d007      	beq.n	800b132 <TIM_OC5_SetConfig+0x82>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4a15      	ldr	r2, [pc, #84]	@ (800b17c <TIM_OC5_SetConfig+0xcc>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d003      	beq.n	800b132 <TIM_OC5_SetConfig+0x82>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a14      	ldr	r2, [pc, #80]	@ (800b180 <TIM_OC5_SetConfig+0xd0>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d109      	bne.n	800b146 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b138:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	695b      	ldr	r3, [r3, #20]
 800b13e:	021b      	lsls	r3, r3, #8
 800b140:	697a      	ldr	r2, [r7, #20]
 800b142:	4313      	orrs	r3, r2
 800b144:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	697a      	ldr	r2, [r7, #20]
 800b14a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	685a      	ldr	r2, [r3, #4]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	693a      	ldr	r2, [r7, #16]
 800b15e:	621a      	str	r2, [r3, #32]
}
 800b160:	bf00      	nop
 800b162:	371c      	adds	r7, #28
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	40012c00 	.word	0x40012c00
 800b170:	40013400 	.word	0x40013400
 800b174:	40014000 	.word	0x40014000
 800b178:	40014400 	.word	0x40014400
 800b17c:	40014800 	.word	0x40014800
 800b180:	40015000 	.word	0x40015000

0800b184 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b184:	b480      	push	{r7}
 800b186:	b087      	sub	sp, #28
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a1b      	ldr	r3, [r3, #32]
 800b192:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a1b      	ldr	r3, [r3, #32]
 800b198:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b1b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	021b      	lsls	r3, r3, #8
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b1ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	051b      	lsls	r3, r3, #20
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a1a      	ldr	r2, [pc, #104]	@ (800b244 <TIM_OC6_SetConfig+0xc0>)
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d013      	beq.n	800b208 <TIM_OC6_SetConfig+0x84>
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a19      	ldr	r2, [pc, #100]	@ (800b248 <TIM_OC6_SetConfig+0xc4>)
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d00f      	beq.n	800b208 <TIM_OC6_SetConfig+0x84>
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a18      	ldr	r2, [pc, #96]	@ (800b24c <TIM_OC6_SetConfig+0xc8>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d00b      	beq.n	800b208 <TIM_OC6_SetConfig+0x84>
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a17      	ldr	r2, [pc, #92]	@ (800b250 <TIM_OC6_SetConfig+0xcc>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d007      	beq.n	800b208 <TIM_OC6_SetConfig+0x84>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4a16      	ldr	r2, [pc, #88]	@ (800b254 <TIM_OC6_SetConfig+0xd0>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d003      	beq.n	800b208 <TIM_OC6_SetConfig+0x84>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	4a15      	ldr	r2, [pc, #84]	@ (800b258 <TIM_OC6_SetConfig+0xd4>)
 800b204:	4293      	cmp	r3, r2
 800b206:	d109      	bne.n	800b21c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b20e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	695b      	ldr	r3, [r3, #20]
 800b214:	029b      	lsls	r3, r3, #10
 800b216:	697a      	ldr	r2, [r7, #20]
 800b218:	4313      	orrs	r3, r2
 800b21a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	697a      	ldr	r2, [r7, #20]
 800b220:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	693a      	ldr	r2, [r7, #16]
 800b234:	621a      	str	r2, [r3, #32]
}
 800b236:	bf00      	nop
 800b238:	371c      	adds	r7, #28
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	40012c00 	.word	0x40012c00
 800b248:	40013400 	.word	0x40013400
 800b24c:	40014000 	.word	0x40014000
 800b250:	40014400 	.word	0x40014400
 800b254:	40014800 	.word	0x40014800
 800b258:	40015000 	.word	0x40015000

0800b25c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b087      	sub	sp, #28
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	6a1b      	ldr	r3, [r3, #32]
 800b26c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	6a1b      	ldr	r3, [r3, #32]
 800b272:	f023 0201 	bic.w	r2, r3, #1
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	699b      	ldr	r3, [r3, #24]
 800b27e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b286:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	011b      	lsls	r3, r3, #4
 800b28c:	693a      	ldr	r2, [r7, #16]
 800b28e:	4313      	orrs	r3, r2
 800b290:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f023 030a 	bic.w	r3, r3, #10
 800b298:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b29a:	697a      	ldr	r2, [r7, #20]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	697a      	ldr	r2, [r7, #20]
 800b2ac:	621a      	str	r2, [r3, #32]
}
 800b2ae:	bf00      	nop
 800b2b0:	371c      	adds	r7, #28
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b087      	sub	sp, #28
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	60f8      	str	r0, [r7, #12]
 800b2c2:	60b9      	str	r1, [r7, #8]
 800b2c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6a1b      	ldr	r3, [r3, #32]
 800b2ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	6a1b      	ldr	r3, [r3, #32]
 800b2d0:	f023 0210 	bic.w	r2, r3, #16
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	699b      	ldr	r3, [r3, #24]
 800b2dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b2e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	031b      	lsls	r3, r3, #12
 800b2ea:	693a      	ldr	r2, [r7, #16]
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b2f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	011b      	lsls	r3, r3, #4
 800b2fc:	697a      	ldr	r2, [r7, #20]
 800b2fe:	4313      	orrs	r3, r2
 800b300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	693a      	ldr	r2, [r7, #16]
 800b306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	621a      	str	r2, [r3, #32]
}
 800b30e:	bf00      	nop
 800b310:	371c      	adds	r7, #28
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b085      	sub	sp, #20
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b336:	683a      	ldr	r2, [r7, #0]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	4313      	orrs	r3, r2
 800b33c:	f043 0307 	orr.w	r3, r3, #7
 800b340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	609a      	str	r2, [r3, #8]
}
 800b348:	bf00      	nop
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr

0800b354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b354:	b480      	push	{r7}
 800b356:	b087      	sub	sp, #28
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	607a      	str	r2, [r7, #4]
 800b360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b36e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	021a      	lsls	r2, r3, #8
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	431a      	orrs	r2, r3
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	697a      	ldr	r2, [r7, #20]
 800b37e:	4313      	orrs	r3, r2
 800b380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	697a      	ldr	r2, [r7, #20]
 800b386:	609a      	str	r2, [r3, #8]
}
 800b388:	bf00      	nop
 800b38a:	371c      	adds	r7, #28
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b394:	b480      	push	{r7}
 800b396:	b087      	sub	sp, #28
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	f003 031f 	and.w	r3, r3, #31
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6a1a      	ldr	r2, [r3, #32]
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	43db      	mvns	r3, r3
 800b3b6:	401a      	ands	r2, r3
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6a1a      	ldr	r2, [r3, #32]
 800b3c0:	68bb      	ldr	r3, [r7, #8]
 800b3c2:	f003 031f 	and.w	r3, r3, #31
 800b3c6:	6879      	ldr	r1, [r7, #4]
 800b3c8:	fa01 f303 	lsl.w	r3, r1, r3
 800b3cc:	431a      	orrs	r2, r3
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	621a      	str	r2, [r3, #32]
}
 800b3d2:	bf00      	nop
 800b3d4:	371c      	adds	r7, #28
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr
	...

0800b3e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d101      	bne.n	800b3f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3f4:	2302      	movs	r3, #2
 800b3f6:	e074      	b.n	800b4e2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2202      	movs	r2, #2
 800b404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a34      	ldr	r2, [pc, #208]	@ (800b4f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d009      	beq.n	800b436 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a33      	ldr	r2, [pc, #204]	@ (800b4f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d004      	beq.n	800b436 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4a31      	ldr	r2, [pc, #196]	@ (800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b432:	4293      	cmp	r3, r2
 800b434:	d108      	bne.n	800b448 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b43c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	68fa      	ldr	r2, [r7, #12]
 800b444:	4313      	orrs	r3, r2
 800b446:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b44e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	68fa      	ldr	r2, [r7, #12]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a21      	ldr	r2, [pc, #132]	@ (800b4f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d022      	beq.n	800b4b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b478:	d01d      	beq.n	800b4b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	4a1f      	ldr	r2, [pc, #124]	@ (800b4fc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d018      	beq.n	800b4b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a1d      	ldr	r2, [pc, #116]	@ (800b500 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d013      	beq.n	800b4b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	4a1c      	ldr	r2, [pc, #112]	@ (800b504 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d00e      	beq.n	800b4b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	4a15      	ldr	r2, [pc, #84]	@ (800b4f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d009      	beq.n	800b4b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	4a18      	ldr	r2, [pc, #96]	@ (800b508 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d004      	beq.n	800b4b6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a11      	ldr	r2, [pc, #68]	@ (800b4f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d10c      	bne.n	800b4d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b4bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	4313      	orrs	r3, r2
 800b4c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	68ba      	ldr	r2, [r7, #8]
 800b4ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2200      	movs	r2, #0
 800b4dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr
 800b4ee:	bf00      	nop
 800b4f0:	40012c00 	.word	0x40012c00
 800b4f4:	40013400 	.word	0x40013400
 800b4f8:	40015000 	.word	0x40015000
 800b4fc:	40000400 	.word	0x40000400
 800b500:	40000800 	.word	0x40000800
 800b504:	40000c00 	.word	0x40000c00
 800b508:	40014000 	.word	0x40014000

0800b50c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b085      	sub	sp, #20
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b516:	2300      	movs	r3, #0
 800b518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b520:	2b01      	cmp	r3, #1
 800b522:	d101      	bne.n	800b528 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b524:	2302      	movs	r3, #2
 800b526:	e078      	b.n	800b61a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	4313      	orrs	r3, r2
 800b53c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	4313      	orrs	r3, r2
 800b54a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	4313      	orrs	r3, r2
 800b558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4313      	orrs	r3, r2
 800b566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	4313      	orrs	r3, r2
 800b574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	695b      	ldr	r3, [r3, #20]
 800b580:	4313      	orrs	r3, r2
 800b582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b58e:	4313      	orrs	r3, r2
 800b590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	041b      	lsls	r3, r3, #16
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	69db      	ldr	r3, [r3, #28]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a1c      	ldr	r2, [pc, #112]	@ (800b628 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d009      	beq.n	800b5ce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a1b      	ldr	r2, [pc, #108]	@ (800b62c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d004      	beq.n	800b5ce <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a19      	ldr	r2, [pc, #100]	@ (800b630 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d11c      	bne.n	800b608 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b5d4:	683b      	ldr	r3, [r7, #0]
 800b5d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5d8:	051b      	lsls	r3, r3, #20
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	6a1b      	ldr	r3, [r3, #32]
 800b5e8:	4313      	orrs	r3, r2
 800b5ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b5f2:	683b      	ldr	r3, [r7, #0]
 800b5f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b604:	4313      	orrs	r3, r2
 800b606:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3714      	adds	r7, #20
 800b61e:	46bd      	mov	sp, r7
 800b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	40012c00 	.word	0x40012c00
 800b62c:	40013400 	.word	0x40013400
 800b630:	40015000 	.word	0x40015000

0800b634 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b648:	b480      	push	{r7}
 800b64a:	b083      	sub	sp, #12
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b650:	bf00      	nop
 800b652:	370c      	adds	r7, #12
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b664:	bf00      	nop
 800b666:	370c      	adds	r7, #12
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b678:	bf00      	nop
 800b67a:	370c      	adds	r7, #12
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b698:	b480      	push	{r7}
 800b69a:	b083      	sub	sp, #12
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b6a0:	bf00      	nop
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b6b4:	bf00      	nop
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr

0800b6c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b082      	sub	sp, #8
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d101      	bne.n	800b6d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e042      	b.n	800b758 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d106      	bne.n	800b6ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f7f8 fdb1 	bl	800424c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2224      	movs	r2, #36	@ 0x24
 800b6ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f022 0201 	bic.w	r2, r2, #1
 800b700:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b706:	2b00      	cmp	r3, #0
 800b708:	d002      	beq.n	800b710 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 fb24 	bl	800bd58 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 f825 	bl	800b760 <UART_SetConfig>
 800b716:	4603      	mov	r3, r0
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d101      	bne.n	800b720 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b71c:	2301      	movs	r3, #1
 800b71e:	e01b      	b.n	800b758 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	685a      	ldr	r2, [r3, #4]
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b72e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	689a      	ldr	r2, [r3, #8]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b73e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f042 0201 	orr.w	r2, r2, #1
 800b74e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 fba3 	bl	800be9c <UART_CheckIdleState>
 800b756:	4603      	mov	r3, r0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b764:	b08c      	sub	sp, #48	@ 0x30
 800b766:	af00      	add	r7, sp, #0
 800b768:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b76a:	2300      	movs	r3, #0
 800b76c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	689a      	ldr	r2, [r3, #8]
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	431a      	orrs	r2, r3
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	431a      	orrs	r2, r3
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	69db      	ldr	r3, [r3, #28]
 800b784:	4313      	orrs	r3, r2
 800b786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	4baa      	ldr	r3, [pc, #680]	@ (800ba38 <UART_SetConfig+0x2d8>)
 800b790:	4013      	ands	r3, r2
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	6812      	ldr	r2, [r2, #0]
 800b796:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b798:	430b      	orrs	r3, r1
 800b79a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b79c:	697b      	ldr	r3, [r7, #20]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	68da      	ldr	r2, [r3, #12]
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	430a      	orrs	r2, r1
 800b7b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	699b      	ldr	r3, [r3, #24]
 800b7b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b7b8:	697b      	ldr	r3, [r7, #20]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a9f      	ldr	r2, [pc, #636]	@ (800ba3c <UART_SetConfig+0x2dc>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d004      	beq.n	800b7cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	6a1b      	ldr	r3, [r3, #32]
 800b7c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b7c8:	4313      	orrs	r3, r2
 800b7ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b7d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b7da:	697a      	ldr	r2, [r7, #20]
 800b7dc:	6812      	ldr	r2, [r2, #0]
 800b7de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b7e0:	430b      	orrs	r3, r1
 800b7e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ea:	f023 010f 	bic.w	r1, r3, #15
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	430a      	orrs	r2, r1
 800b7f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4a90      	ldr	r2, [pc, #576]	@ (800ba40 <UART_SetConfig+0x2e0>)
 800b800:	4293      	cmp	r3, r2
 800b802:	d125      	bne.n	800b850 <UART_SetConfig+0xf0>
 800b804:	4b8f      	ldr	r3, [pc, #572]	@ (800ba44 <UART_SetConfig+0x2e4>)
 800b806:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b80a:	f003 0303 	and.w	r3, r3, #3
 800b80e:	2b03      	cmp	r3, #3
 800b810:	d81a      	bhi.n	800b848 <UART_SetConfig+0xe8>
 800b812:	a201      	add	r2, pc, #4	@ (adr r2, 800b818 <UART_SetConfig+0xb8>)
 800b814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b818:	0800b829 	.word	0x0800b829
 800b81c:	0800b839 	.word	0x0800b839
 800b820:	0800b831 	.word	0x0800b831
 800b824:	0800b841 	.word	0x0800b841
 800b828:	2301      	movs	r3, #1
 800b82a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b82e:	e116      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b830:	2302      	movs	r3, #2
 800b832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b836:	e112      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b838:	2304      	movs	r3, #4
 800b83a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b83e:	e10e      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b840:	2308      	movs	r3, #8
 800b842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b846:	e10a      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b848:	2310      	movs	r3, #16
 800b84a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b84e:	e106      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4a7c      	ldr	r2, [pc, #496]	@ (800ba48 <UART_SetConfig+0x2e8>)
 800b856:	4293      	cmp	r3, r2
 800b858:	d138      	bne.n	800b8cc <UART_SetConfig+0x16c>
 800b85a:	4b7a      	ldr	r3, [pc, #488]	@ (800ba44 <UART_SetConfig+0x2e4>)
 800b85c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b860:	f003 030c 	and.w	r3, r3, #12
 800b864:	2b0c      	cmp	r3, #12
 800b866:	d82d      	bhi.n	800b8c4 <UART_SetConfig+0x164>
 800b868:	a201      	add	r2, pc, #4	@ (adr r2, 800b870 <UART_SetConfig+0x110>)
 800b86a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b86e:	bf00      	nop
 800b870:	0800b8a5 	.word	0x0800b8a5
 800b874:	0800b8c5 	.word	0x0800b8c5
 800b878:	0800b8c5 	.word	0x0800b8c5
 800b87c:	0800b8c5 	.word	0x0800b8c5
 800b880:	0800b8b5 	.word	0x0800b8b5
 800b884:	0800b8c5 	.word	0x0800b8c5
 800b888:	0800b8c5 	.word	0x0800b8c5
 800b88c:	0800b8c5 	.word	0x0800b8c5
 800b890:	0800b8ad 	.word	0x0800b8ad
 800b894:	0800b8c5 	.word	0x0800b8c5
 800b898:	0800b8c5 	.word	0x0800b8c5
 800b89c:	0800b8c5 	.word	0x0800b8c5
 800b8a0:	0800b8bd 	.word	0x0800b8bd
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8aa:	e0d8      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b8ac:	2302      	movs	r3, #2
 800b8ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8b2:	e0d4      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b8b4:	2304      	movs	r3, #4
 800b8b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ba:	e0d0      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b8bc:	2308      	movs	r3, #8
 800b8be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8c2:	e0cc      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b8c4:	2310      	movs	r3, #16
 800b8c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b8ca:	e0c8      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a5e      	ldr	r2, [pc, #376]	@ (800ba4c <UART_SetConfig+0x2ec>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d125      	bne.n	800b922 <UART_SetConfig+0x1c2>
 800b8d6:	4b5b      	ldr	r3, [pc, #364]	@ (800ba44 <UART_SetConfig+0x2e4>)
 800b8d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b8dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b8e0:	2b30      	cmp	r3, #48	@ 0x30
 800b8e2:	d016      	beq.n	800b912 <UART_SetConfig+0x1b2>
 800b8e4:	2b30      	cmp	r3, #48	@ 0x30
 800b8e6:	d818      	bhi.n	800b91a <UART_SetConfig+0x1ba>
 800b8e8:	2b20      	cmp	r3, #32
 800b8ea:	d00a      	beq.n	800b902 <UART_SetConfig+0x1a2>
 800b8ec:	2b20      	cmp	r3, #32
 800b8ee:	d814      	bhi.n	800b91a <UART_SetConfig+0x1ba>
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <UART_SetConfig+0x19a>
 800b8f4:	2b10      	cmp	r3, #16
 800b8f6:	d008      	beq.n	800b90a <UART_SetConfig+0x1aa>
 800b8f8:	e00f      	b.n	800b91a <UART_SetConfig+0x1ba>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b900:	e0ad      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b902:	2302      	movs	r3, #2
 800b904:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b908:	e0a9      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b90a:	2304      	movs	r3, #4
 800b90c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b910:	e0a5      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b912:	2308      	movs	r3, #8
 800b914:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b918:	e0a1      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b91a:	2310      	movs	r3, #16
 800b91c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b920:	e09d      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a4a      	ldr	r2, [pc, #296]	@ (800ba50 <UART_SetConfig+0x2f0>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d125      	bne.n	800b978 <UART_SetConfig+0x218>
 800b92c:	4b45      	ldr	r3, [pc, #276]	@ (800ba44 <UART_SetConfig+0x2e4>)
 800b92e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b932:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b936:	2bc0      	cmp	r3, #192	@ 0xc0
 800b938:	d016      	beq.n	800b968 <UART_SetConfig+0x208>
 800b93a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b93c:	d818      	bhi.n	800b970 <UART_SetConfig+0x210>
 800b93e:	2b80      	cmp	r3, #128	@ 0x80
 800b940:	d00a      	beq.n	800b958 <UART_SetConfig+0x1f8>
 800b942:	2b80      	cmp	r3, #128	@ 0x80
 800b944:	d814      	bhi.n	800b970 <UART_SetConfig+0x210>
 800b946:	2b00      	cmp	r3, #0
 800b948:	d002      	beq.n	800b950 <UART_SetConfig+0x1f0>
 800b94a:	2b40      	cmp	r3, #64	@ 0x40
 800b94c:	d008      	beq.n	800b960 <UART_SetConfig+0x200>
 800b94e:	e00f      	b.n	800b970 <UART_SetConfig+0x210>
 800b950:	2300      	movs	r3, #0
 800b952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b956:	e082      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b958:	2302      	movs	r3, #2
 800b95a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b95e:	e07e      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b960:	2304      	movs	r3, #4
 800b962:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b966:	e07a      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b968:	2308      	movs	r3, #8
 800b96a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b96e:	e076      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b970:	2310      	movs	r3, #16
 800b972:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b976:	e072      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a35      	ldr	r2, [pc, #212]	@ (800ba54 <UART_SetConfig+0x2f4>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d12a      	bne.n	800b9d8 <UART_SetConfig+0x278>
 800b982:	4b30      	ldr	r3, [pc, #192]	@ (800ba44 <UART_SetConfig+0x2e4>)
 800b984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b988:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b98c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b990:	d01a      	beq.n	800b9c8 <UART_SetConfig+0x268>
 800b992:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b996:	d81b      	bhi.n	800b9d0 <UART_SetConfig+0x270>
 800b998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b99c:	d00c      	beq.n	800b9b8 <UART_SetConfig+0x258>
 800b99e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9a2:	d815      	bhi.n	800b9d0 <UART_SetConfig+0x270>
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d003      	beq.n	800b9b0 <UART_SetConfig+0x250>
 800b9a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b9ac:	d008      	beq.n	800b9c0 <UART_SetConfig+0x260>
 800b9ae:	e00f      	b.n	800b9d0 <UART_SetConfig+0x270>
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9b6:	e052      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9be:	e04e      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b9c0:	2304      	movs	r3, #4
 800b9c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9c6:	e04a      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b9c8:	2308      	movs	r3, #8
 800b9ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9ce:	e046      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b9d0:	2310      	movs	r3, #16
 800b9d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9d6:	e042      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4a17      	ldr	r2, [pc, #92]	@ (800ba3c <UART_SetConfig+0x2dc>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	d13a      	bne.n	800ba58 <UART_SetConfig+0x2f8>
 800b9e2:	4b18      	ldr	r3, [pc, #96]	@ (800ba44 <UART_SetConfig+0x2e4>)
 800b9e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b9ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b9f0:	d01a      	beq.n	800ba28 <UART_SetConfig+0x2c8>
 800b9f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b9f6:	d81b      	bhi.n	800ba30 <UART_SetConfig+0x2d0>
 800b9f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9fc:	d00c      	beq.n	800ba18 <UART_SetConfig+0x2b8>
 800b9fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba02:	d815      	bhi.n	800ba30 <UART_SetConfig+0x2d0>
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d003      	beq.n	800ba10 <UART_SetConfig+0x2b0>
 800ba08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba0c:	d008      	beq.n	800ba20 <UART_SetConfig+0x2c0>
 800ba0e:	e00f      	b.n	800ba30 <UART_SetConfig+0x2d0>
 800ba10:	2300      	movs	r3, #0
 800ba12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba16:	e022      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800ba18:	2302      	movs	r3, #2
 800ba1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba1e:	e01e      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800ba20:	2304      	movs	r3, #4
 800ba22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba26:	e01a      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800ba28:	2308      	movs	r3, #8
 800ba2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba2e:	e016      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800ba30:	2310      	movs	r3, #16
 800ba32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba36:	e012      	b.n	800ba5e <UART_SetConfig+0x2fe>
 800ba38:	cfff69f3 	.word	0xcfff69f3
 800ba3c:	40008000 	.word	0x40008000
 800ba40:	40013800 	.word	0x40013800
 800ba44:	40021000 	.word	0x40021000
 800ba48:	40004400 	.word	0x40004400
 800ba4c:	40004800 	.word	0x40004800
 800ba50:	40004c00 	.word	0x40004c00
 800ba54:	40005000 	.word	0x40005000
 800ba58:	2310      	movs	r3, #16
 800ba5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4aae      	ldr	r2, [pc, #696]	@ (800bd1c <UART_SetConfig+0x5bc>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	f040 8097 	bne.w	800bb98 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ba6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ba6e:	2b08      	cmp	r3, #8
 800ba70:	d823      	bhi.n	800baba <UART_SetConfig+0x35a>
 800ba72:	a201      	add	r2, pc, #4	@ (adr r2, 800ba78 <UART_SetConfig+0x318>)
 800ba74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba78:	0800ba9d 	.word	0x0800ba9d
 800ba7c:	0800babb 	.word	0x0800babb
 800ba80:	0800baa5 	.word	0x0800baa5
 800ba84:	0800babb 	.word	0x0800babb
 800ba88:	0800baab 	.word	0x0800baab
 800ba8c:	0800babb 	.word	0x0800babb
 800ba90:	0800babb 	.word	0x0800babb
 800ba94:	0800babb 	.word	0x0800babb
 800ba98:	0800bab3 	.word	0x0800bab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba9c:	f7fd fec6 	bl	800982c <HAL_RCC_GetPCLK1Freq>
 800baa0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800baa2:	e010      	b.n	800bac6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800baa4:	4b9e      	ldr	r3, [pc, #632]	@ (800bd20 <UART_SetConfig+0x5c0>)
 800baa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800baa8:	e00d      	b.n	800bac6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800baaa:	f7fd fe51 	bl	8009750 <HAL_RCC_GetSysClockFreq>
 800baae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bab0:	e009      	b.n	800bac6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bab2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bab6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bab8:	e005      	b.n	800bac6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800baba:	2300      	movs	r3, #0
 800babc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800babe:	2301      	movs	r3, #1
 800bac0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bac4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac8:	2b00      	cmp	r3, #0
 800baca:	f000 8130 	beq.w	800bd2e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bad2:	4a94      	ldr	r2, [pc, #592]	@ (800bd24 <UART_SetConfig+0x5c4>)
 800bad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bad8:	461a      	mov	r2, r3
 800bada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800badc:	fbb3 f3f2 	udiv	r3, r3, r2
 800bae0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	685a      	ldr	r2, [r3, #4]
 800bae6:	4613      	mov	r3, r2
 800bae8:	005b      	lsls	r3, r3, #1
 800baea:	4413      	add	r3, r2
 800baec:	69ba      	ldr	r2, [r7, #24]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d305      	bcc.n	800bafe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800baf8:	69ba      	ldr	r2, [r7, #24]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d903      	bls.n	800bb06 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bafe:	2301      	movs	r3, #1
 800bb00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bb04:	e113      	b.n	800bd2e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bb06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb08:	2200      	movs	r2, #0
 800bb0a:	60bb      	str	r3, [r7, #8]
 800bb0c:	60fa      	str	r2, [r7, #12]
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb12:	4a84      	ldr	r2, [pc, #528]	@ (800bd24 <UART_SetConfig+0x5c4>)
 800bb14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	603b      	str	r3, [r7, #0]
 800bb1e:	607a      	str	r2, [r7, #4]
 800bb20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bb28:	f7f5 f8d6 	bl	8000cd8 <__aeabi_uldivmod>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	460b      	mov	r3, r1
 800bb30:	4610      	mov	r0, r2
 800bb32:	4619      	mov	r1, r3
 800bb34:	f04f 0200 	mov.w	r2, #0
 800bb38:	f04f 0300 	mov.w	r3, #0
 800bb3c:	020b      	lsls	r3, r1, #8
 800bb3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bb42:	0202      	lsls	r2, r0, #8
 800bb44:	6979      	ldr	r1, [r7, #20]
 800bb46:	6849      	ldr	r1, [r1, #4]
 800bb48:	0849      	lsrs	r1, r1, #1
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	460c      	mov	r4, r1
 800bb4e:	4605      	mov	r5, r0
 800bb50:	eb12 0804 	adds.w	r8, r2, r4
 800bb54:	eb43 0905 	adc.w	r9, r3, r5
 800bb58:	697b      	ldr	r3, [r7, #20]
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	469a      	mov	sl, r3
 800bb60:	4693      	mov	fp, r2
 800bb62:	4652      	mov	r2, sl
 800bb64:	465b      	mov	r3, fp
 800bb66:	4640      	mov	r0, r8
 800bb68:	4649      	mov	r1, r9
 800bb6a:	f7f5 f8b5 	bl	8000cd8 <__aeabi_uldivmod>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	460b      	mov	r3, r1
 800bb72:	4613      	mov	r3, r2
 800bb74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb76:	6a3b      	ldr	r3, [r7, #32]
 800bb78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb7c:	d308      	bcc.n	800bb90 <UART_SetConfig+0x430>
 800bb7e:	6a3b      	ldr	r3, [r7, #32]
 800bb80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb84:	d204      	bcs.n	800bb90 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	6a3a      	ldr	r2, [r7, #32]
 800bb8c:	60da      	str	r2, [r3, #12]
 800bb8e:	e0ce      	b.n	800bd2e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bb90:	2301      	movs	r3, #1
 800bb92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bb96:	e0ca      	b.n	800bd2e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	69db      	ldr	r3, [r3, #28]
 800bb9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bba0:	d166      	bne.n	800bc70 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bba2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bba6:	2b08      	cmp	r3, #8
 800bba8:	d827      	bhi.n	800bbfa <UART_SetConfig+0x49a>
 800bbaa:	a201      	add	r2, pc, #4	@ (adr r2, 800bbb0 <UART_SetConfig+0x450>)
 800bbac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb0:	0800bbd5 	.word	0x0800bbd5
 800bbb4:	0800bbdd 	.word	0x0800bbdd
 800bbb8:	0800bbe5 	.word	0x0800bbe5
 800bbbc:	0800bbfb 	.word	0x0800bbfb
 800bbc0:	0800bbeb 	.word	0x0800bbeb
 800bbc4:	0800bbfb 	.word	0x0800bbfb
 800bbc8:	0800bbfb 	.word	0x0800bbfb
 800bbcc:	0800bbfb 	.word	0x0800bbfb
 800bbd0:	0800bbf3 	.word	0x0800bbf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbd4:	f7fd fe2a 	bl	800982c <HAL_RCC_GetPCLK1Freq>
 800bbd8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bbda:	e014      	b.n	800bc06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bbdc:	f7fd fe3c 	bl	8009858 <HAL_RCC_GetPCLK2Freq>
 800bbe0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bbe2:	e010      	b.n	800bc06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbe4:	4b4e      	ldr	r3, [pc, #312]	@ (800bd20 <UART_SetConfig+0x5c0>)
 800bbe6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bbe8:	e00d      	b.n	800bc06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbea:	f7fd fdb1 	bl	8009750 <HAL_RCC_GetSysClockFreq>
 800bbee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bbf0:	e009      	b.n	800bc06 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bbf6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bbf8:	e005      	b.n	800bc06 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bbfe:	2301      	movs	r3, #1
 800bc00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bc04:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	f000 8090 	beq.w	800bd2e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc12:	4a44      	ldr	r2, [pc, #272]	@ (800bd24 <UART_SetConfig+0x5c4>)
 800bc14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc18:	461a      	mov	r2, r3
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc20:	005a      	lsls	r2, r3, #1
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	085b      	lsrs	r3, r3, #1
 800bc28:	441a      	add	r2, r3
 800bc2a:	697b      	ldr	r3, [r7, #20]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc32:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc34:	6a3b      	ldr	r3, [r7, #32]
 800bc36:	2b0f      	cmp	r3, #15
 800bc38:	d916      	bls.n	800bc68 <UART_SetConfig+0x508>
 800bc3a:	6a3b      	ldr	r3, [r7, #32]
 800bc3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc40:	d212      	bcs.n	800bc68 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bc42:	6a3b      	ldr	r3, [r7, #32]
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	f023 030f 	bic.w	r3, r3, #15
 800bc4a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bc4c:	6a3b      	ldr	r3, [r7, #32]
 800bc4e:	085b      	lsrs	r3, r3, #1
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	f003 0307 	and.w	r3, r3, #7
 800bc56:	b29a      	uxth	r2, r3
 800bc58:	8bfb      	ldrh	r3, [r7, #30]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	8bfa      	ldrh	r2, [r7, #30]
 800bc64:	60da      	str	r2, [r3, #12]
 800bc66:	e062      	b.n	800bd2e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bc6e:	e05e      	b.n	800bd2e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bc70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bc74:	2b08      	cmp	r3, #8
 800bc76:	d828      	bhi.n	800bcca <UART_SetConfig+0x56a>
 800bc78:	a201      	add	r2, pc, #4	@ (adr r2, 800bc80 <UART_SetConfig+0x520>)
 800bc7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc7e:	bf00      	nop
 800bc80:	0800bca5 	.word	0x0800bca5
 800bc84:	0800bcad 	.word	0x0800bcad
 800bc88:	0800bcb5 	.word	0x0800bcb5
 800bc8c:	0800bccb 	.word	0x0800bccb
 800bc90:	0800bcbb 	.word	0x0800bcbb
 800bc94:	0800bccb 	.word	0x0800bccb
 800bc98:	0800bccb 	.word	0x0800bccb
 800bc9c:	0800bccb 	.word	0x0800bccb
 800bca0:	0800bcc3 	.word	0x0800bcc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bca4:	f7fd fdc2 	bl	800982c <HAL_RCC_GetPCLK1Freq>
 800bca8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bcaa:	e014      	b.n	800bcd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bcac:	f7fd fdd4 	bl	8009858 <HAL_RCC_GetPCLK2Freq>
 800bcb0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bcb2:	e010      	b.n	800bcd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bcb4:	4b1a      	ldr	r3, [pc, #104]	@ (800bd20 <UART_SetConfig+0x5c0>)
 800bcb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bcb8:	e00d      	b.n	800bcd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bcba:	f7fd fd49 	bl	8009750 <HAL_RCC_GetSysClockFreq>
 800bcbe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bcc0:	e009      	b.n	800bcd6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bcc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bcc8:	e005      	b.n	800bcd6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bcca:	2300      	movs	r3, #0
 800bccc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bcce:	2301      	movs	r3, #1
 800bcd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bcd4:	bf00      	nop
    }

    if (pclk != 0U)
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d028      	beq.n	800bd2e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bce0:	4a10      	ldr	r2, [pc, #64]	@ (800bd24 <UART_SetConfig+0x5c4>)
 800bce2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bce6:	461a      	mov	r2, r3
 800bce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcea:	fbb3 f2f2 	udiv	r2, r3, r2
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	685b      	ldr	r3, [r3, #4]
 800bcf2:	085b      	lsrs	r3, r3, #1
 800bcf4:	441a      	add	r2, r3
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcfe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd00:	6a3b      	ldr	r3, [r7, #32]
 800bd02:	2b0f      	cmp	r3, #15
 800bd04:	d910      	bls.n	800bd28 <UART_SetConfig+0x5c8>
 800bd06:	6a3b      	ldr	r3, [r7, #32]
 800bd08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd0c:	d20c      	bcs.n	800bd28 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	b29a      	uxth	r2, r3
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	60da      	str	r2, [r3, #12]
 800bd18:	e009      	b.n	800bd2e <UART_SetConfig+0x5ce>
 800bd1a:	bf00      	nop
 800bd1c:	40008000 	.word	0x40008000
 800bd20:	00f42400 	.word	0x00f42400
 800bd24:	08016f20 	.word	0x08016f20
      }
      else
      {
        ret = HAL_ERROR;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	2201      	movs	r2, #1
 800bd32:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	2201      	movs	r2, #1
 800bd3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	2200      	movs	r2, #0
 800bd42:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	2200      	movs	r2, #0
 800bd48:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bd4a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3730      	adds	r7, #48	@ 0x30
 800bd52:	46bd      	mov	sp, r7
 800bd54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bd58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	b083      	sub	sp, #12
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd64:	f003 0308 	and.w	r3, r3, #8
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00a      	beq.n	800bd82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	430a      	orrs	r2, r1
 800bd80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd86:	f003 0301 	and.w	r3, r3, #1
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00a      	beq.n	800bda4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	430a      	orrs	r2, r1
 800bda2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda8:	f003 0302 	and.w	r3, r3, #2
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d00a      	beq.n	800bdc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	430a      	orrs	r2, r1
 800bdc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdca:	f003 0304 	and.w	r3, r3, #4
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00a      	beq.n	800bde8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	430a      	orrs	r2, r1
 800bde6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdec:	f003 0310 	and.w	r3, r3, #16
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d00a      	beq.n	800be0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	430a      	orrs	r2, r1
 800be08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be0e:	f003 0320 	and.w	r3, r3, #32
 800be12:	2b00      	cmp	r3, #0
 800be14:	d00a      	beq.n	800be2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	430a      	orrs	r2, r1
 800be2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be34:	2b00      	cmp	r3, #0
 800be36:	d01a      	beq.n	800be6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	430a      	orrs	r2, r1
 800be4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be56:	d10a      	bne.n	800be6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	430a      	orrs	r2, r1
 800be6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be76:	2b00      	cmp	r3, #0
 800be78:	d00a      	beq.n	800be90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	430a      	orrs	r2, r1
 800be8e:	605a      	str	r2, [r3, #4]
  }
}
 800be90:	bf00      	nop
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b098      	sub	sp, #96	@ 0x60
 800bea0:	af02      	add	r7, sp, #8
 800bea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2200      	movs	r2, #0
 800bea8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800beac:	f7f8 fc16 	bl	80046dc <HAL_GetTick>
 800beb0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f003 0308 	and.w	r3, r3, #8
 800bebc:	2b08      	cmp	r3, #8
 800bebe:	d12f      	bne.n	800bf20 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bec0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bec4:	9300      	str	r3, [sp, #0]
 800bec6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bec8:	2200      	movs	r2, #0
 800beca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f88e 	bl	800bff0 <UART_WaitOnFlagUntilTimeout>
 800bed4:	4603      	mov	r3, r0
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d022      	beq.n	800bf20 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bee2:	e853 3f00 	ldrex	r3, [r3]
 800bee6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800beea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800beee:	653b      	str	r3, [r7, #80]	@ 0x50
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	461a      	mov	r2, r3
 800bef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bef8:	647b      	str	r3, [r7, #68]	@ 0x44
 800befa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800befc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800befe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bf00:	e841 2300 	strex	r3, r2, [r1]
 800bf04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bf06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d1e6      	bne.n	800beda <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2220      	movs	r2, #32
 800bf10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bf1c:	2303      	movs	r3, #3
 800bf1e:	e063      	b.n	800bfe8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	f003 0304 	and.w	r3, r3, #4
 800bf2a:	2b04      	cmp	r3, #4
 800bf2c:	d149      	bne.n	800bfc2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf2e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bf32:	9300      	str	r3, [sp, #0]
 800bf34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bf36:	2200      	movs	r2, #0
 800bf38:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 f857 	bl	800bff0 <UART_WaitOnFlagUntilTimeout>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d03c      	beq.n	800bfc2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf50:	e853 3f00 	ldrex	r3, [r3]
 800bf54:	623b      	str	r3, [r7, #32]
   return(result);
 800bf56:	6a3b      	ldr	r3, [r7, #32]
 800bf58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	461a      	mov	r2, r3
 800bf64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf66:	633b      	str	r3, [r7, #48]	@ 0x30
 800bf68:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf6e:	e841 2300 	strex	r3, r2, [r1]
 800bf72:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bf74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d1e6      	bne.n	800bf48 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	3308      	adds	r3, #8
 800bf80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	e853 3f00 	ldrex	r3, [r3]
 800bf88:	60fb      	str	r3, [r7, #12]
   return(result);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f023 0301 	bic.w	r3, r3, #1
 800bf90:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	3308      	adds	r3, #8
 800bf98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf9a:	61fa      	str	r2, [r7, #28]
 800bf9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf9e:	69b9      	ldr	r1, [r7, #24]
 800bfa0:	69fa      	ldr	r2, [r7, #28]
 800bfa2:	e841 2300 	strex	r3, r2, [r1]
 800bfa6:	617b      	str	r3, [r7, #20]
   return(result);
 800bfa8:	697b      	ldr	r3, [r7, #20]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d1e5      	bne.n	800bf7a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2220      	movs	r2, #32
 800bfb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2200      	movs	r2, #0
 800bfba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	e012      	b.n	800bfe8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2220      	movs	r2, #32
 800bfc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2220      	movs	r2, #32
 800bfce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	2200      	movs	r2, #0
 800bfe2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3758      	adds	r7, #88	@ 0x58
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b084      	sub	sp, #16
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	60f8      	str	r0, [r7, #12]
 800bff8:	60b9      	str	r1, [r7, #8]
 800bffa:	603b      	str	r3, [r7, #0]
 800bffc:	4613      	mov	r3, r2
 800bffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c000:	e04f      	b.n	800c0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c008:	d04b      	beq.n	800c0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c00a:	f7f8 fb67 	bl	80046dc <HAL_GetTick>
 800c00e:	4602      	mov	r2, r0
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	1ad3      	subs	r3, r2, r3
 800c014:	69ba      	ldr	r2, [r7, #24]
 800c016:	429a      	cmp	r2, r3
 800c018:	d302      	bcc.n	800c020 <UART_WaitOnFlagUntilTimeout+0x30>
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c020:	2303      	movs	r3, #3
 800c022:	e04e      	b.n	800c0c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f003 0304 	and.w	r3, r3, #4
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d037      	beq.n	800c0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	2b80      	cmp	r3, #128	@ 0x80
 800c036:	d034      	beq.n	800c0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	2b40      	cmp	r3, #64	@ 0x40
 800c03c:	d031      	beq.n	800c0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	69db      	ldr	r3, [r3, #28]
 800c044:	f003 0308 	and.w	r3, r3, #8
 800c048:	2b08      	cmp	r3, #8
 800c04a:	d110      	bne.n	800c06e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	2208      	movs	r2, #8
 800c052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f000 f838 	bl	800c0ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2208      	movs	r2, #8
 800c05e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2200      	movs	r2, #0
 800c066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c06a:	2301      	movs	r3, #1
 800c06c:	e029      	b.n	800c0c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	69db      	ldr	r3, [r3, #28]
 800c074:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c07c:	d111      	bne.n	800c0a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c086:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c088:	68f8      	ldr	r0, [r7, #12]
 800c08a:	f000 f81e 	bl	800c0ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	2220      	movs	r2, #32
 800c092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2200      	movs	r2, #0
 800c09a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	e00f      	b.n	800c0c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	69da      	ldr	r2, [r3, #28]
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	4013      	ands	r3, r2
 800c0ac:	68ba      	ldr	r2, [r7, #8]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	bf0c      	ite	eq
 800c0b2:	2301      	moveq	r3, #1
 800c0b4:	2300      	movne	r3, #0
 800c0b6:	b2db      	uxtb	r3, r3
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	79fb      	ldrb	r3, [r7, #7]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d0a0      	beq.n	800c002 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c0c0:	2300      	movs	r3, #0
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3710      	adds	r7, #16
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}

0800c0ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c0ca:	b480      	push	{r7}
 800c0cc:	b095      	sub	sp, #84	@ 0x54
 800c0ce:	af00      	add	r7, sp, #0
 800c0d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c0da:	e853 3f00 	ldrex	r3, [r3]
 800c0de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	461a      	mov	r2, r3
 800c0ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800c0f2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c0f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c0f8:	e841 2300 	strex	r3, r2, [r1]
 800c0fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c0fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c100:	2b00      	cmp	r3, #0
 800c102:	d1e6      	bne.n	800c0d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	3308      	adds	r3, #8
 800c10a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10c:	6a3b      	ldr	r3, [r7, #32]
 800c10e:	e853 3f00 	ldrex	r3, [r3]
 800c112:	61fb      	str	r3, [r7, #28]
   return(result);
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c11a:	f023 0301 	bic.w	r3, r3, #1
 800c11e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	3308      	adds	r3, #8
 800c126:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c128:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c12a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c12e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c130:	e841 2300 	strex	r3, r2, [r1]
 800c134:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d1e3      	bne.n	800c104 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c140:	2b01      	cmp	r3, #1
 800c142:	d118      	bne.n	800c176 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	e853 3f00 	ldrex	r3, [r3]
 800c150:	60bb      	str	r3, [r7, #8]
   return(result);
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	f023 0310 	bic.w	r3, r3, #16
 800c158:	647b      	str	r3, [r7, #68]	@ 0x44
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	461a      	mov	r2, r3
 800c160:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c162:	61bb      	str	r3, [r7, #24]
 800c164:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c166:	6979      	ldr	r1, [r7, #20]
 800c168:	69ba      	ldr	r2, [r7, #24]
 800c16a:	e841 2300 	strex	r3, r2, [r1]
 800c16e:	613b      	str	r3, [r7, #16]
   return(result);
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1e6      	bne.n	800c144 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	2220      	movs	r2, #32
 800c17a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2200      	movs	r2, #0
 800c182:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c18a:	bf00      	nop
 800c18c:	3754      	adds	r7, #84	@ 0x54
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr

0800c196 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c196:	b480      	push	{r7}
 800c198:	b085      	sub	sp, #20
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d101      	bne.n	800c1ac <HAL_UARTEx_DisableFifoMode+0x16>
 800c1a8:	2302      	movs	r3, #2
 800c1aa:	e027      	b.n	800c1fc <HAL_UARTEx_DisableFifoMode+0x66>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2224      	movs	r2, #36	@ 0x24
 800c1b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	681a      	ldr	r2, [r3, #0]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f022 0201 	bic.w	r2, r2, #1
 800c1d2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c1da:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2200      	movs	r2, #0
 800c1e0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	68fa      	ldr	r2, [r7, #12]
 800c1e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2220      	movs	r2, #32
 800c1ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c1fa:	2300      	movs	r3, #0
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3714      	adds	r7, #20
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d101      	bne.n	800c220 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c21c:	2302      	movs	r3, #2
 800c21e:	e02d      	b.n	800c27c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2201      	movs	r2, #1
 800c224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	2224      	movs	r2, #36	@ 0x24
 800c22c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f022 0201 	bic.w	r2, r2, #1
 800c246:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	689b      	ldr	r3, [r3, #8]
 800c24e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	683a      	ldr	r2, [r7, #0]
 800c258:	430a      	orrs	r2, r1
 800c25a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 f84f 	bl	800c300 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	68fa      	ldr	r2, [r7, #12]
 800c268:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2220      	movs	r2, #32
 800c26e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c27a:	2300      	movs	r3, #0
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c294:	2b01      	cmp	r3, #1
 800c296:	d101      	bne.n	800c29c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c298:	2302      	movs	r3, #2
 800c29a:	e02d      	b.n	800c2f8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2224      	movs	r2, #36	@ 0x24
 800c2a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f022 0201 	bic.w	r2, r2, #1
 800c2c2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	689b      	ldr	r3, [r3, #8]
 800c2ca:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	683a      	ldr	r2, [r7, #0]
 800c2d4:	430a      	orrs	r2, r1
 800c2d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 f811 	bl	800c300 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	68fa      	ldr	r2, [r7, #12]
 800c2e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2220      	movs	r2, #32
 800c2ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c2f6:	2300      	movs	r3, #0
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	3710      	adds	r7, #16
 800c2fc:	46bd      	mov	sp, r7
 800c2fe:	bd80      	pop	{r7, pc}

0800c300 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d108      	bne.n	800c322 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2201      	movs	r2, #1
 800c314:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2201      	movs	r2, #1
 800c31c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c320:	e031      	b.n	800c386 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c322:	2308      	movs	r3, #8
 800c324:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c326:	2308      	movs	r3, #8
 800c328:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	0e5b      	lsrs	r3, r3, #25
 800c332:	b2db      	uxtb	r3, r3
 800c334:	f003 0307 	and.w	r3, r3, #7
 800c338:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	0f5b      	lsrs	r3, r3, #29
 800c342:	b2db      	uxtb	r3, r3
 800c344:	f003 0307 	and.w	r3, r3, #7
 800c348:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c34a:	7bbb      	ldrb	r3, [r7, #14]
 800c34c:	7b3a      	ldrb	r2, [r7, #12]
 800c34e:	4911      	ldr	r1, [pc, #68]	@ (800c394 <UARTEx_SetNbDataToProcess+0x94>)
 800c350:	5c8a      	ldrb	r2, [r1, r2]
 800c352:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c356:	7b3a      	ldrb	r2, [r7, #12]
 800c358:	490f      	ldr	r1, [pc, #60]	@ (800c398 <UARTEx_SetNbDataToProcess+0x98>)
 800c35a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c35c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c360:	b29a      	uxth	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c368:	7bfb      	ldrb	r3, [r7, #15]
 800c36a:	7b7a      	ldrb	r2, [r7, #13]
 800c36c:	4909      	ldr	r1, [pc, #36]	@ (800c394 <UARTEx_SetNbDataToProcess+0x94>)
 800c36e:	5c8a      	ldrb	r2, [r1, r2]
 800c370:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c374:	7b7a      	ldrb	r2, [r7, #13]
 800c376:	4908      	ldr	r1, [pc, #32]	@ (800c398 <UARTEx_SetNbDataToProcess+0x98>)
 800c378:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c37a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c37e:	b29a      	uxth	r2, r3
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c386:	bf00      	nop
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	08016f38 	.word	0x08016f38
 800c398:	08016f40 	.word	0x08016f40

0800c39c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c39c:	b480      	push	{r7}
 800c39e:	b085      	sub	sp, #20
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2200      	movs	r2, #0
 800c3a8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c3ac:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c3b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	b29a      	uxth	r2, r3
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c3bc:	2300      	movs	r3, #0
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3714      	adds	r7, #20
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr

0800c3ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c3ca:	b480      	push	{r7}
 800c3cc:	b085      	sub	sp, #20
 800c3ce:	af00      	add	r7, sp, #0
 800c3d0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c3d2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c3d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	43db      	mvns	r3, r3
 800c3e6:	b29b      	uxth	r3, r3
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	b29a      	uxth	r2, r3
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3714      	adds	r7, #20
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	1d3b      	adds	r3, r7, #4
 800c40a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2201      	movs	r2, #1
 800c412:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2200      	movs	r2, #0
 800c422:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2200      	movs	r2, #0
 800c42a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b09d      	sub	sp, #116	@ 0x74
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c446:	2300      	movs	r3, #0
 800c448:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	881b      	ldrh	r3, [r3, #0]
 800c458:	b29b      	uxth	r3, r3
 800c45a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800c45e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c462:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	78db      	ldrb	r3, [r3, #3]
 800c46a:	2b03      	cmp	r3, #3
 800c46c:	d81f      	bhi.n	800c4ae <USB_ActivateEndpoint+0x72>
 800c46e:	a201      	add	r2, pc, #4	@ (adr r2, 800c474 <USB_ActivateEndpoint+0x38>)
 800c470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c474:	0800c485 	.word	0x0800c485
 800c478:	0800c4a1 	.word	0x0800c4a1
 800c47c:	0800c4b7 	.word	0x0800c4b7
 800c480:	0800c493 	.word	0x0800c493
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c484:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c488:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c48c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c490:	e012      	b.n	800c4b8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c492:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c496:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c49a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c49e:	e00b      	b.n	800c4b8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c4a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c4a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c4a8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c4ac:	e004      	b.n	800c4b8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800c4b4:	e000      	b.n	800c4b8 <USB_ActivateEndpoint+0x7c>
      break;
 800c4b6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c4b8:	687a      	ldr	r2, [r7, #4]
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	781b      	ldrb	r3, [r3, #0]
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	441a      	add	r2, r3
 800c4c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c4c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	4413      	add	r3, r2
 800c4e4:	881b      	ldrh	r3, [r3, #0]
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	b21b      	sxth	r3, r3
 800c4ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4f2:	b21a      	sxth	r2, r3
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	b21b      	sxth	r3, r3
 800c4fa:	4313      	orrs	r3, r2
 800c4fc:	b21b      	sxth	r3, r3
 800c4fe:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c502:	687a      	ldr	r2, [r7, #4]
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	009b      	lsls	r3, r3, #2
 800c50a:	441a      	add	r2, r3
 800c50c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c510:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c514:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c518:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c51c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c520:	b29b      	uxth	r3, r3
 800c522:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c524:	683b      	ldr	r3, [r7, #0]
 800c526:	7b1b      	ldrb	r3, [r3, #12]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	f040 8178 	bne.w	800c81e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	785b      	ldrb	r3, [r3, #1]
 800c532:	2b00      	cmp	r3, #0
 800c534:	f000 8084 	beq.w	800c640 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	61bb      	str	r3, [r7, #24]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c542:	b29b      	uxth	r3, r3
 800c544:	461a      	mov	r2, r3
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	4413      	add	r3, r2
 800c54a:	61bb      	str	r3, [r7, #24]
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	00da      	lsls	r2, r3, #3
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	4413      	add	r3, r2
 800c556:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c55a:	617b      	str	r3, [r7, #20]
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	88db      	ldrh	r3, [r3, #6]
 800c560:	085b      	lsrs	r3, r3, #1
 800c562:	b29b      	uxth	r3, r3
 800c564:	005b      	lsls	r3, r3, #1
 800c566:	b29a      	uxth	r2, r3
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	4413      	add	r3, r2
 800c576:	881b      	ldrh	r3, [r3, #0]
 800c578:	827b      	strh	r3, [r7, #18]
 800c57a:	8a7b      	ldrh	r3, [r7, #18]
 800c57c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c580:	2b00      	cmp	r3, #0
 800c582:	d01b      	beq.n	800c5bc <USB_ActivateEndpoint+0x180>
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	4413      	add	r3, r2
 800c58e:	881b      	ldrh	r3, [r3, #0]
 800c590:	b29b      	uxth	r3, r3
 800c592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c59a:	823b      	strh	r3, [r7, #16]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	441a      	add	r2, r3
 800c5a6:	8a3b      	ldrh	r3, [r7, #16]
 800c5a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c5b8:	b29b      	uxth	r3, r3
 800c5ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	78db      	ldrb	r3, [r3, #3]
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	d020      	beq.n	800c606 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	4413      	add	r3, r2
 800c5ce:	881b      	ldrh	r3, [r3, #0]
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5da:	81bb      	strh	r3, [r7, #12]
 800c5dc:	89bb      	ldrh	r3, [r7, #12]
 800c5de:	f083 0320 	eor.w	r3, r3, #32
 800c5e2:	81bb      	strh	r3, [r7, #12]
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	009b      	lsls	r3, r3, #2
 800c5ec:	441a      	add	r2, r3
 800c5ee:	89bb      	ldrh	r3, [r7, #12]
 800c5f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c600:	b29b      	uxth	r3, r3
 800c602:	8013      	strh	r3, [r2, #0]
 800c604:	e2d5      	b.n	800cbb2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c606:	687a      	ldr	r2, [r7, #4]
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	009b      	lsls	r3, r3, #2
 800c60e:	4413      	add	r3, r2
 800c610:	881b      	ldrh	r3, [r3, #0]
 800c612:	b29b      	uxth	r3, r3
 800c614:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c618:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c61c:	81fb      	strh	r3, [r7, #14]
 800c61e:	687a      	ldr	r2, [r7, #4]
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	441a      	add	r2, r3
 800c628:	89fb      	ldrh	r3, [r7, #14]
 800c62a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c62e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	8013      	strh	r3, [r2, #0]
 800c63e:	e2b8      	b.n	800cbb2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	633b      	str	r3, [r7, #48]	@ 0x30
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	461a      	mov	r2, r3
 800c64e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c650:	4413      	add	r3, r2
 800c652:	633b      	str	r3, [r7, #48]	@ 0x30
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	00da      	lsls	r2, r3, #3
 800c65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c65c:	4413      	add	r3, r2
 800c65e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c662:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	88db      	ldrh	r3, [r3, #6]
 800c668:	085b      	lsrs	r3, r3, #1
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	005b      	lsls	r3, r3, #1
 800c66e:	b29a      	uxth	r2, r3
 800c670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c672:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c67e:	b29b      	uxth	r3, r3
 800c680:	461a      	mov	r2, r3
 800c682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c684:	4413      	add	r3, r2
 800c686:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	781b      	ldrb	r3, [r3, #0]
 800c68c:	00da      	lsls	r2, r3, #3
 800c68e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c690:	4413      	add	r3, r2
 800c692:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c696:	627b      	str	r3, [r7, #36]	@ 0x24
 800c698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69a:	881b      	ldrh	r3, [r3, #0]
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c6a2:	b29a      	uxth	r2, r3
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6a6:	801a      	strh	r2, [r3, #0]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10a      	bne.n	800c6c6 <USB_ActivateEndpoint+0x28a>
 800c6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b2:	881b      	ldrh	r3, [r3, #0]
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c2:	801a      	strh	r2, [r3, #0]
 800c6c4:	e039      	b.n	800c73a <USB_ActivateEndpoint+0x2fe>
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	691b      	ldr	r3, [r3, #16]
 800c6ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800c6cc:	d818      	bhi.n	800c700 <USB_ActivateEndpoint+0x2c4>
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	691b      	ldr	r3, [r3, #16]
 800c6d2:	085b      	lsrs	r3, r3, #1
 800c6d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c6d6:	683b      	ldr	r3, [r7, #0]
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	f003 0301 	and.w	r3, r3, #1
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d002      	beq.n	800c6e8 <USB_ActivateEndpoint+0x2ac>
 800c6e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c6e4:	3301      	adds	r3, #1
 800c6e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ea:	881b      	ldrh	r3, [r3, #0]
 800c6ec:	b29a      	uxth	r2, r3
 800c6ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c6f0:	b29b      	uxth	r3, r3
 800c6f2:	029b      	lsls	r3, r3, #10
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fc:	801a      	strh	r2, [r3, #0]
 800c6fe:	e01c      	b.n	800c73a <USB_ActivateEndpoint+0x2fe>
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	691b      	ldr	r3, [r3, #16]
 800c704:	095b      	lsrs	r3, r3, #5
 800c706:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	691b      	ldr	r3, [r3, #16]
 800c70c:	f003 031f 	and.w	r3, r3, #31
 800c710:	2b00      	cmp	r3, #0
 800c712:	d102      	bne.n	800c71a <USB_ActivateEndpoint+0x2de>
 800c714:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c716:	3b01      	subs	r3, #1
 800c718:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	b29a      	uxth	r2, r3
 800c720:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c722:	b29b      	uxth	r3, r3
 800c724:	029b      	lsls	r3, r3, #10
 800c726:	b29b      	uxth	r3, r3
 800c728:	4313      	orrs	r3, r2
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c730:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c734:	b29a      	uxth	r2, r3
 800c736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c738:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	4413      	add	r3, r2
 800c744:	881b      	ldrh	r3, [r3, #0]
 800c746:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c748:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c74a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d01b      	beq.n	800c78a <USB_ActivateEndpoint+0x34e>
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	4413      	add	r3, r2
 800c75c:	881b      	ldrh	r3, [r3, #0]
 800c75e:	b29b      	uxth	r3, r3
 800c760:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c764:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c768:	843b      	strh	r3, [r7, #32]
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	441a      	add	r2, r3
 800c774:	8c3b      	ldrh	r3, [r7, #32]
 800c776:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c77a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c77e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c786:	b29b      	uxth	r3, r3
 800c788:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d124      	bne.n	800c7dc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	4413      	add	r3, r2
 800c79c:	881b      	ldrh	r3, [r3, #0]
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c7a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7a8:	83bb      	strh	r3, [r7, #28]
 800c7aa:	8bbb      	ldrh	r3, [r7, #28]
 800c7ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c7b0:	83bb      	strh	r3, [r7, #28]
 800c7b2:	8bbb      	ldrh	r3, [r7, #28]
 800c7b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c7b8:	83bb      	strh	r3, [r7, #28]
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	009b      	lsls	r3, r3, #2
 800c7c2:	441a      	add	r2, r3
 800c7c4:	8bbb      	ldrh	r3, [r7, #28]
 800c7c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	8013      	strh	r3, [r2, #0]
 800c7da:	e1ea      	b.n	800cbb2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	781b      	ldrb	r3, [r3, #0]
 800c7e2:	009b      	lsls	r3, r3, #2
 800c7e4:	4413      	add	r3, r2
 800c7e6:	881b      	ldrh	r3, [r3, #0]
 800c7e8:	b29b      	uxth	r3, r3
 800c7ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c7ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7f2:	83fb      	strh	r3, [r7, #30]
 800c7f4:	8bfb      	ldrh	r3, [r7, #30]
 800c7f6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c7fa:	83fb      	strh	r3, [r7, #30]
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	441a      	add	r2, r3
 800c806:	8bfb      	ldrh	r3, [r7, #30]
 800c808:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c80c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c810:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c818:	b29b      	uxth	r3, r3
 800c81a:	8013      	strh	r3, [r2, #0]
 800c81c:	e1c9      	b.n	800cbb2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	78db      	ldrb	r3, [r3, #3]
 800c822:	2b02      	cmp	r3, #2
 800c824:	d11e      	bne.n	800c864 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c826:	687a      	ldr	r2, [r7, #4]
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	781b      	ldrb	r3, [r3, #0]
 800c82c:	009b      	lsls	r3, r3, #2
 800c82e:	4413      	add	r3, r2
 800c830:	881b      	ldrh	r3, [r3, #0]
 800c832:	b29b      	uxth	r3, r3
 800c834:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c83c:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	441a      	add	r2, r3
 800c84a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c84e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c852:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c856:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c85a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c85e:	b29b      	uxth	r3, r3
 800c860:	8013      	strh	r3, [r2, #0]
 800c862:	e01d      	b.n	800c8a0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	4413      	add	r3, r2
 800c86e:	881b      	ldrh	r3, [r3, #0]
 800c870:	b29b      	uxth	r3, r3
 800c872:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c87a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c87e:	687a      	ldr	r2, [r7, #4]
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	009b      	lsls	r3, r3, #2
 800c886:	441a      	add	r2, r3
 800c888:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c88c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c890:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c894:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c89c:	b29b      	uxth	r3, r3
 800c89e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c8aa:	b29b      	uxth	r3, r3
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8b0:	4413      	add	r3, r2
 800c8b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	00da      	lsls	r2, r3, #3
 800c8ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c8bc:	4413      	add	r3, r2
 800c8be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c8c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	891b      	ldrh	r3, [r3, #8]
 800c8c8:	085b      	lsrs	r3, r3, #1
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	005b      	lsls	r3, r3, #1
 800c8ce:	b29a      	uxth	r2, r3
 800c8d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8d2:	801a      	strh	r2, [r3, #0]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	657b      	str	r3, [r7, #84]	@ 0x54
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c8de:	b29b      	uxth	r3, r3
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8e4:	4413      	add	r3, r2
 800c8e6:	657b      	str	r3, [r7, #84]	@ 0x54
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	00da      	lsls	r2, r3, #3
 800c8ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8f0:	4413      	add	r3, r2
 800c8f2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c8f6:	653b      	str	r3, [r7, #80]	@ 0x50
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	895b      	ldrh	r3, [r3, #10]
 800c8fc:	085b      	lsrs	r3, r3, #1
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	005b      	lsls	r3, r3, #1
 800c902:	b29a      	uxth	r2, r3
 800c904:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c906:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	785b      	ldrb	r3, [r3, #1]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f040 8093 	bne.w	800ca38 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	009b      	lsls	r3, r3, #2
 800c91a:	4413      	add	r3, r2
 800c91c:	881b      	ldrh	r3, [r3, #0]
 800c91e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c922:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c926:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d01b      	beq.n	800c966 <USB_ActivateEndpoint+0x52a>
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	4413      	add	r3, r2
 800c938:	881b      	ldrh	r3, [r3, #0]
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c940:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c944:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	441a      	add	r2, r3
 800c950:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c952:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c956:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c95a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c95e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c962:	b29b      	uxth	r3, r3
 800c964:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	009b      	lsls	r3, r3, #2
 800c96e:	4413      	add	r3, r2
 800c970:	881b      	ldrh	r3, [r3, #0]
 800c972:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c974:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d01b      	beq.n	800c9b6 <USB_ActivateEndpoint+0x57a>
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	781b      	ldrb	r3, [r3, #0]
 800c984:	009b      	lsls	r3, r3, #2
 800c986:	4413      	add	r3, r2
 800c988:	881b      	ldrh	r3, [r3, #0]
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c990:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c994:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	441a      	add	r2, r3
 800c9a0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c9a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9ae:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c9b2:	b29b      	uxth	r3, r3
 800c9b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c9b6:	687a      	ldr	r2, [r7, #4]
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	781b      	ldrb	r3, [r3, #0]
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	4413      	add	r3, r2
 800c9c0:	881b      	ldrh	r3, [r3, #0]
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c9c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9cc:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c9ce:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c9d0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c9d4:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c9d6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c9d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c9dc:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	441a      	add	r2, r3
 800c9e8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c9ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c9fe:	687a      	ldr	r2, [r7, #4]
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	009b      	lsls	r3, r3, #2
 800ca06:	4413      	add	r3, r2
 800ca08:	881b      	ldrh	r3, [r3, #0]
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ca14:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	441a      	add	r2, r3
 800ca20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ca22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	8013      	strh	r3, [r2, #0]
 800ca36:	e0bc      	b.n	800cbb2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	4413      	add	r3, r2
 800ca42:	881b      	ldrh	r3, [r3, #0]
 800ca44:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ca48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ca4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d01d      	beq.n	800ca90 <USB_ActivateEndpoint+0x654>
 800ca54:	687a      	ldr	r2, [r7, #4]
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	4413      	add	r3, r2
 800ca5e:	881b      	ldrh	r3, [r3, #0]
 800ca60:	b29b      	uxth	r3, r3
 800ca62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca6a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	441a      	add	r2, r3
 800ca78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ca7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ca88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	009b      	lsls	r3, r3, #2
 800ca98:	4413      	add	r3, r2
 800ca9a:	881b      	ldrh	r3, [r3, #0]
 800ca9c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800caa0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800caa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d01d      	beq.n	800cae8 <USB_ActivateEndpoint+0x6ac>
 800caac:	687a      	ldr	r2, [r7, #4]
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	4413      	add	r3, r2
 800cab6:	881b      	ldrh	r3, [r3, #0]
 800cab8:	b29b      	uxth	r3, r3
 800caba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cabe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cac2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	009b      	lsls	r3, r3, #2
 800cace:	441a      	add	r2, r3
 800cad0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800cad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cad8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cadc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cae0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	78db      	ldrb	r3, [r3, #3]
 800caec:	2b01      	cmp	r3, #1
 800caee:	d024      	beq.n	800cb3a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	4413      	add	r3, r2
 800cafa:	881b      	ldrh	r3, [r3, #0]
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb06:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800cb0a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cb0e:	f083 0320 	eor.w	r3, r3, #32
 800cb12:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800cb16:	687a      	ldr	r2, [r7, #4]
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	009b      	lsls	r3, r3, #2
 800cb1e:	441a      	add	r2, r3
 800cb20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cb24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	8013      	strh	r3, [r2, #0]
 800cb38:	e01d      	b.n	800cb76 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	781b      	ldrb	r3, [r3, #0]
 800cb40:	009b      	lsls	r3, r3, #2
 800cb42:	4413      	add	r3, r2
 800cb44:	881b      	ldrh	r3, [r3, #0]
 800cb46:	b29b      	uxth	r3, r3
 800cb48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb50:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	441a      	add	r2, r3
 800cb5e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cb62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	781b      	ldrb	r3, [r3, #0]
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	4413      	add	r3, r2
 800cb80:	881b      	ldrh	r3, [r3, #0]
 800cb82:	b29b      	uxth	r3, r3
 800cb84:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb8c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	009b      	lsls	r3, r3, #2
 800cb98:	441a      	add	r2, r3
 800cb9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cb9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cba2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cba6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbae:	b29b      	uxth	r3, r3
 800cbb0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800cbb2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3774      	adds	r7, #116	@ 0x74
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc0:	4770      	bx	lr
 800cbc2:	bf00      	nop

0800cbc4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b08d      	sub	sp, #52	@ 0x34
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	7b1b      	ldrb	r3, [r3, #12]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f040 808e 	bne.w	800ccf4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	785b      	ldrb	r3, [r3, #1]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d044      	beq.n	800cc6a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cbe0:	687a      	ldr	r2, [r7, #4]
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	781b      	ldrb	r3, [r3, #0]
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	4413      	add	r3, r2
 800cbea:	881b      	ldrh	r3, [r3, #0]
 800cbec:	81bb      	strh	r3, [r7, #12]
 800cbee:	89bb      	ldrh	r3, [r7, #12]
 800cbf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d01b      	beq.n	800cc30 <USB_DeactivateEndpoint+0x6c>
 800cbf8:	687a      	ldr	r2, [r7, #4]
 800cbfa:	683b      	ldr	r3, [r7, #0]
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	4413      	add	r3, r2
 800cc02:	881b      	ldrh	r3, [r3, #0]
 800cc04:	b29b      	uxth	r3, r3
 800cc06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc0e:	817b      	strh	r3, [r7, #10]
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	009b      	lsls	r3, r3, #2
 800cc18:	441a      	add	r2, r3
 800cc1a:	897b      	ldrh	r3, [r7, #10]
 800cc1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc30:	687a      	ldr	r2, [r7, #4]
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	781b      	ldrb	r3, [r3, #0]
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	4413      	add	r3, r2
 800cc3a:	881b      	ldrh	r3, [r3, #0]
 800cc3c:	b29b      	uxth	r3, r3
 800cc3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc46:	813b      	strh	r3, [r7, #8]
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	781b      	ldrb	r3, [r3, #0]
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	441a      	add	r2, r3
 800cc52:	893b      	ldrh	r3, [r7, #8]
 800cc54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	8013      	strh	r3, [r2, #0]
 800cc68:	e192      	b.n	800cf90 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	4413      	add	r3, r2
 800cc74:	881b      	ldrh	r3, [r3, #0]
 800cc76:	827b      	strh	r3, [r7, #18]
 800cc78:	8a7b      	ldrh	r3, [r7, #18]
 800cc7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d01b      	beq.n	800ccba <USB_DeactivateEndpoint+0xf6>
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	4413      	add	r3, r2
 800cc8c:	881b      	ldrh	r3, [r3, #0]
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc98:	823b      	strh	r3, [r7, #16]
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	683b      	ldr	r3, [r7, #0]
 800cc9e:	781b      	ldrb	r3, [r3, #0]
 800cca0:	009b      	lsls	r3, r3, #2
 800cca2:	441a      	add	r2, r3
 800cca4:	8a3b      	ldrh	r3, [r7, #16]
 800cca6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ccae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ccb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccb6:	b29b      	uxth	r3, r3
 800ccb8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	781b      	ldrb	r3, [r3, #0]
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	4413      	add	r3, r2
 800ccc4:	881b      	ldrh	r3, [r3, #0]
 800ccc6:	b29b      	uxth	r3, r3
 800ccc8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cccc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ccd0:	81fb      	strh	r3, [r7, #14]
 800ccd2:	687a      	ldr	r2, [r7, #4]
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	781b      	ldrb	r3, [r3, #0]
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	441a      	add	r2, r3
 800ccdc:	89fb      	ldrh	r3, [r7, #14]
 800ccde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cce2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cce6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ccea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	8013      	strh	r3, [r2, #0]
 800ccf2:	e14d      	b.n	800cf90 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	785b      	ldrb	r3, [r3, #1]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	f040 80a5 	bne.w	800ce48 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	4413      	add	r3, r2
 800cd08:	881b      	ldrh	r3, [r3, #0]
 800cd0a:	843b      	strh	r3, [r7, #32]
 800cd0c:	8c3b      	ldrh	r3, [r7, #32]
 800cd0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d01b      	beq.n	800cd4e <USB_DeactivateEndpoint+0x18a>
 800cd16:	687a      	ldr	r2, [r7, #4]
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	4413      	add	r3, r2
 800cd20:	881b      	ldrh	r3, [r3, #0]
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd2c:	83fb      	strh	r3, [r7, #30]
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	441a      	add	r2, r3
 800cd38:	8bfb      	ldrh	r3, [r7, #30]
 800cd3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd42:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cd46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	781b      	ldrb	r3, [r3, #0]
 800cd54:	009b      	lsls	r3, r3, #2
 800cd56:	4413      	add	r3, r2
 800cd58:	881b      	ldrh	r3, [r3, #0]
 800cd5a:	83bb      	strh	r3, [r7, #28]
 800cd5c:	8bbb      	ldrh	r3, [r7, #28]
 800cd5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d01b      	beq.n	800cd9e <USB_DeactivateEndpoint+0x1da>
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	781b      	ldrb	r3, [r3, #0]
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	4413      	add	r3, r2
 800cd70:	881b      	ldrh	r3, [r3, #0]
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd7c:	837b      	strh	r3, [r7, #26]
 800cd7e:	687a      	ldr	r2, [r7, #4]
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	441a      	add	r2, r3
 800cd88:	8b7b      	ldrh	r3, [r7, #26]
 800cd8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd96:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800cd9e:	687a      	ldr	r2, [r7, #4]
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	4413      	add	r3, r2
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdb4:	833b      	strh	r3, [r7, #24]
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	441a      	add	r2, r3
 800cdc0:	8b3b      	ldrh	r3, [r7, #24]
 800cdc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdce:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	781b      	ldrb	r3, [r3, #0]
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	4413      	add	r3, r2
 800cde0:	881b      	ldrh	r3, [r3, #0]
 800cde2:	b29b      	uxth	r3, r3
 800cde4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cde8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cdec:	82fb      	strh	r3, [r7, #22]
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	683b      	ldr	r3, [r7, #0]
 800cdf2:	781b      	ldrb	r3, [r3, #0]
 800cdf4:	009b      	lsls	r3, r3, #2
 800cdf6:	441a      	add	r2, r3
 800cdf8:	8afb      	ldrh	r3, [r7, #22]
 800cdfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	4413      	add	r3, r2
 800ce18:	881b      	ldrh	r3, [r3, #0]
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ce24:	82bb      	strh	r3, [r7, #20]
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	781b      	ldrb	r3, [r3, #0]
 800ce2c:	009b      	lsls	r3, r3, #2
 800ce2e:	441a      	add	r2, r3
 800ce30:	8abb      	ldrh	r3, [r7, #20]
 800ce32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	8013      	strh	r3, [r2, #0]
 800ce46:	e0a3      	b.n	800cf90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	683b      	ldr	r3, [r7, #0]
 800ce4c:	781b      	ldrb	r3, [r3, #0]
 800ce4e:	009b      	lsls	r3, r3, #2
 800ce50:	4413      	add	r3, r2
 800ce52:	881b      	ldrh	r3, [r3, #0]
 800ce54:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800ce56:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ce58:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d01b      	beq.n	800ce98 <USB_DeactivateEndpoint+0x2d4>
 800ce60:	687a      	ldr	r2, [r7, #4]
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	009b      	lsls	r3, r3, #2
 800ce68:	4413      	add	r3, r2
 800ce6a:	881b      	ldrh	r3, [r3, #0]
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce76:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	009b      	lsls	r3, r3, #2
 800ce80:	441a      	add	r2, r3
 800ce82:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800ce84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ce90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce98:	687a      	ldr	r2, [r7, #4]
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	4413      	add	r3, r2
 800cea2:	881b      	ldrh	r3, [r3, #0]
 800cea4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cea6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d01b      	beq.n	800cee8 <USB_DeactivateEndpoint+0x324>
 800ceb0:	687a      	ldr	r2, [r7, #4]
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	4413      	add	r3, r2
 800ceba:	881b      	ldrh	r3, [r3, #0]
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cec6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	009b      	lsls	r3, r3, #2
 800ced0:	441a      	add	r2, r3
 800ced2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ced4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ced8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cedc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cee0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cee4:	b29b      	uxth	r3, r3
 800cee6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	009b      	lsls	r3, r3, #2
 800cef0:	4413      	add	r3, r2
 800cef2:	881b      	ldrh	r3, [r3, #0]
 800cef4:	b29b      	uxth	r3, r3
 800cef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cefa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cefe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800cf00:	687a      	ldr	r2, [r7, #4]
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	781b      	ldrb	r3, [r3, #0]
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	441a      	add	r2, r3
 800cf0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cf0c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf10:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf14:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cf18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	4413      	add	r3, r2
 800cf2a:	881b      	ldrh	r3, [r3, #0]
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf36:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cf38:	687a      	ldr	r2, [r7, #4]
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	009b      	lsls	r3, r3, #2
 800cf40:	441a      	add	r2, r3
 800cf42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cf44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cf58:	687a      	ldr	r2, [r7, #4]
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	009b      	lsls	r3, r3, #2
 800cf60:	4413      	add	r3, r2
 800cf62:	881b      	ldrh	r3, [r3, #0]
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cf6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf6e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cf70:	687a      	ldr	r2, [r7, #4]
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	009b      	lsls	r3, r3, #2
 800cf78:	441a      	add	r2, r3
 800cf7a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cf7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cf90:	2300      	movs	r3, #0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3734      	adds	r7, #52	@ 0x34
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr

0800cf9e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b0c2      	sub	sp, #264	@ 0x108
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfac:	6018      	str	r0, [r3, #0]
 800cfae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfb6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cfb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	785b      	ldrb	r3, [r3, #1]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	f040 86b7 	bne.w	800dd38 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800cfca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	699a      	ldr	r2, [r3, #24]
 800cfd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	691b      	ldr	r3, [r3, #16]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d908      	bls.n	800cff8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800cfe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	691b      	ldr	r3, [r3, #16]
 800cff2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800cff6:	e007      	b.n	800d008 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800cff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	699b      	ldr	r3, [r3, #24]
 800d004:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d00c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	7b1b      	ldrb	r3, [r3, #12]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d13a      	bne.n	800d08e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d01c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	6959      	ldr	r1, [r3, #20]
 800d024:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d028:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	88da      	ldrh	r2, [r3, #6]
 800d030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d034:	b29b      	uxth	r3, r3
 800d036:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d03a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d03e:	6800      	ldr	r0, [r0, #0]
 800d040:	f001 fc99 	bl	800e976 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d048:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	613b      	str	r3, [r7, #16]
 800d050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d054:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d05e:	b29b      	uxth	r3, r3
 800d060:	461a      	mov	r2, r3
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	4413      	add	r3, r2
 800d066:	613b      	str	r3, [r7, #16]
 800d068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d06c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	00da      	lsls	r2, r3, #3
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	4413      	add	r3, r2
 800d07a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d07e:	60fb      	str	r3, [r7, #12]
 800d080:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d084:	b29a      	uxth	r2, r3
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	801a      	strh	r2, [r3, #0]
 800d08a:	f000 be1f 	b.w	800dccc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d08e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	78db      	ldrb	r3, [r3, #3]
 800d09a:	2b02      	cmp	r3, #2
 800d09c:	f040 8462 	bne.w	800d964 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d0a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	6a1a      	ldr	r2, [r3, #32]
 800d0ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	f240 83df 	bls.w	800d87c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d0be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0c6:	681a      	ldr	r2, [r3, #0]
 800d0c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	781b      	ldrb	r3, [r3, #0]
 800d0d4:	009b      	lsls	r3, r3, #2
 800d0d6:	4413      	add	r3, r2
 800d0d8:	881b      	ldrh	r3, [r3, #0]
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0e4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800d0e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0f0:	681a      	ldr	r2, [r3, #0]
 800d0f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	441a      	add	r2, r3
 800d102:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d106:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d10a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d10e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d116:	b29b      	uxth	r3, r3
 800d118:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d11a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d11e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	6a1a      	ldr	r2, [r3, #32]
 800d126:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d12a:	1ad2      	subs	r2, r2, r3
 800d12c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d138:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d13c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d140:	681a      	ldr	r2, [r3, #0]
 800d142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d146:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	4413      	add	r3, r2
 800d152:	881b      	ldrh	r3, [r3, #0]
 800d154:	b29b      	uxth	r3, r3
 800d156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f000 81c7 	beq.w	800d4ee <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d160:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d164:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d16c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	785b      	ldrb	r3, [r3, #1]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d177      	bne.n	800d26c <USB_EPStartXfer+0x2ce>
 800d17c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d180:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d18c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d196:	b29b      	uxth	r3, r3
 800d198:	461a      	mov	r2, r3
 800d19a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d19c:	4413      	add	r3, r2
 800d19e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d1a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	00da      	lsls	r2, r3, #3
 800d1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b0:	4413      	add	r3, r2
 800d1b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d1b6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ba:	881b      	ldrh	r3, [r3, #0]
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1c2:	b29a      	uxth	r2, r3
 800d1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c6:	801a      	strh	r2, [r3, #0]
 800d1c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10a      	bne.n	800d1e6 <USB_EPStartXfer+0x248>
 800d1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1d2:	881b      	ldrh	r3, [r3, #0]
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e2:	801a      	strh	r2, [r3, #0]
 800d1e4:	e067      	b.n	800d2b6 <USB_EPStartXfer+0x318>
 800d1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1ea:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1ec:	d81c      	bhi.n	800d228 <USB_EPStartXfer+0x28a>
 800d1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1f2:	085b      	lsrs	r3, r3, #1
 800d1f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1fc:	f003 0301 	and.w	r3, r3, #1
 800d200:	2b00      	cmp	r3, #0
 800d202:	d004      	beq.n	800d20e <USB_EPStartXfer+0x270>
 800d204:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d208:	3301      	adds	r3, #1
 800d20a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d210:	881b      	ldrh	r3, [r3, #0]
 800d212:	b29a      	uxth	r2, r3
 800d214:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d218:	b29b      	uxth	r3, r3
 800d21a:	029b      	lsls	r3, r3, #10
 800d21c:	b29b      	uxth	r3, r3
 800d21e:	4313      	orrs	r3, r2
 800d220:	b29a      	uxth	r2, r3
 800d222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d224:	801a      	strh	r2, [r3, #0]
 800d226:	e046      	b.n	800d2b6 <USB_EPStartXfer+0x318>
 800d228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d22c:	095b      	lsrs	r3, r3, #5
 800d22e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d236:	f003 031f 	and.w	r3, r3, #31
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d104      	bne.n	800d248 <USB_EPStartXfer+0x2aa>
 800d23e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d242:	3b01      	subs	r3, #1
 800d244:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d24a:	881b      	ldrh	r3, [r3, #0]
 800d24c:	b29a      	uxth	r2, r3
 800d24e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d252:	b29b      	uxth	r3, r3
 800d254:	029b      	lsls	r3, r3, #10
 800d256:	b29b      	uxth	r3, r3
 800d258:	4313      	orrs	r3, r2
 800d25a:	b29b      	uxth	r3, r3
 800d25c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d264:	b29a      	uxth	r2, r3
 800d266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d268:	801a      	strh	r2, [r3, #0]
 800d26a:	e024      	b.n	800d2b6 <USB_EPStartXfer+0x318>
 800d26c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	785b      	ldrb	r3, [r3, #1]
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d11c      	bne.n	800d2b6 <USB_EPStartXfer+0x318>
 800d27c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d280:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	461a      	mov	r2, r3
 800d28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d290:	4413      	add	r3, r2
 800d292:	633b      	str	r3, [r7, #48]	@ 0x30
 800d294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d298:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	781b      	ldrb	r3, [r3, #0]
 800d2a0:	00da      	lsls	r2, r3, #3
 800d2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d2a4:	4413      	add	r3, r2
 800d2a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d2aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2b0:	b29a      	uxth	r2, r3
 800d2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	895b      	ldrh	r3, [r3, #10]
 800d2c2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d2c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	6959      	ldr	r1, [r3, #20]
 800d2d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d2dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d2e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d2e4:	6800      	ldr	r0, [r0, #0]
 800d2e6:	f001 fb46 	bl	800e976 <USB_WritePMA>
            ep->xfer_buff += len;
 800d2ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	695a      	ldr	r2, [r3, #20]
 800d2f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2fa:	441a      	add	r2, r3
 800d2fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d30c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	6a1a      	ldr	r2, [r3, #32]
 800d314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	691b      	ldr	r3, [r3, #16]
 800d320:	429a      	cmp	r2, r3
 800d322:	d90f      	bls.n	800d344 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	6a1a      	ldr	r2, [r3, #32]
 800d330:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d334:	1ad2      	subs	r2, r2, r3
 800d336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d33a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	621a      	str	r2, [r3, #32]
 800d342:	e00e      	b.n	800d362 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	6a1b      	ldr	r3, [r3, #32]
 800d350:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	2200      	movs	r2, #0
 800d360:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	785b      	ldrb	r3, [r3, #1]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d177      	bne.n	800d462 <USB_EPStartXfer+0x4c4>
 800d372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d376:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	61bb      	str	r3, [r7, #24]
 800d37e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d382:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	461a      	mov	r2, r3
 800d390:	69bb      	ldr	r3, [r7, #24]
 800d392:	4413      	add	r3, r2
 800d394:	61bb      	str	r3, [r7, #24]
 800d396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d39a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	781b      	ldrb	r3, [r3, #0]
 800d3a2:	00da      	lsls	r2, r3, #3
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	4413      	add	r3, r2
 800d3a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d3ac:	617b      	str	r3, [r7, #20]
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	881b      	ldrh	r3, [r3, #0]
 800d3b2:	b29b      	uxth	r3, r3
 800d3b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3b8:	b29a      	uxth	r2, r3
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	801a      	strh	r2, [r3, #0]
 800d3be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d10a      	bne.n	800d3dc <USB_EPStartXfer+0x43e>
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	881b      	ldrh	r3, [r3, #0]
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3d4:	b29a      	uxth	r2, r3
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	801a      	strh	r2, [r3, #0]
 800d3da:	e06d      	b.n	800d4b8 <USB_EPStartXfer+0x51a>
 800d3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3e0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d3e2:	d81c      	bhi.n	800d41e <USB_EPStartXfer+0x480>
 800d3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3e8:	085b      	lsrs	r3, r3, #1
 800d3ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3f2:	f003 0301 	and.w	r3, r3, #1
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d004      	beq.n	800d404 <USB_EPStartXfer+0x466>
 800d3fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d3fe:	3301      	adds	r3, #1
 800d400:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	881b      	ldrh	r3, [r3, #0]
 800d408:	b29a      	uxth	r2, r3
 800d40a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d40e:	b29b      	uxth	r3, r3
 800d410:	029b      	lsls	r3, r3, #10
 800d412:	b29b      	uxth	r3, r3
 800d414:	4313      	orrs	r3, r2
 800d416:	b29a      	uxth	r2, r3
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	801a      	strh	r2, [r3, #0]
 800d41c:	e04c      	b.n	800d4b8 <USB_EPStartXfer+0x51a>
 800d41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d422:	095b      	lsrs	r3, r3, #5
 800d424:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d42c:	f003 031f 	and.w	r3, r3, #31
 800d430:	2b00      	cmp	r3, #0
 800d432:	d104      	bne.n	800d43e <USB_EPStartXfer+0x4a0>
 800d434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d438:	3b01      	subs	r3, #1
 800d43a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	881b      	ldrh	r3, [r3, #0]
 800d442:	b29a      	uxth	r2, r3
 800d444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d448:	b29b      	uxth	r3, r3
 800d44a:	029b      	lsls	r3, r3, #10
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	4313      	orrs	r3, r2
 800d450:	b29b      	uxth	r3, r3
 800d452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	801a      	strh	r2, [r3, #0]
 800d460:	e02a      	b.n	800d4b8 <USB_EPStartXfer+0x51a>
 800d462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	785b      	ldrb	r3, [r3, #1]
 800d46e:	2b01      	cmp	r3, #1
 800d470:	d122      	bne.n	800d4b8 <USB_EPStartXfer+0x51a>
 800d472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d476:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	623b      	str	r3, [r7, #32]
 800d47e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d48c:	b29b      	uxth	r3, r3
 800d48e:	461a      	mov	r2, r3
 800d490:	6a3b      	ldr	r3, [r7, #32]
 800d492:	4413      	add	r3, r2
 800d494:	623b      	str	r3, [r7, #32]
 800d496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d49a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	781b      	ldrb	r3, [r3, #0]
 800d4a2:	00da      	lsls	r2, r3, #3
 800d4a4:	6a3b      	ldr	r3, [r7, #32]
 800d4a6:	4413      	add	r3, r2
 800d4a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d4ac:	61fb      	str	r3, [r7, #28]
 800d4ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4b2:	b29a      	uxth	r2, r3
 800d4b4:	69fb      	ldr	r3, [r7, #28]
 800d4b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	891b      	ldrh	r3, [r3, #8]
 800d4c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	6959      	ldr	r1, [r3, #20]
 800d4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4d8:	b29b      	uxth	r3, r3
 800d4da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d4de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d4e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d4e6:	6800      	ldr	r0, [r0, #0]
 800d4e8:	f001 fa45 	bl	800e976 <USB_WritePMA>
 800d4ec:	e3ee      	b.n	800dccc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d4ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	785b      	ldrb	r3, [r3, #1]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d177      	bne.n	800d5ee <USB_EPStartXfer+0x650>
 800d4fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d502:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d50a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d50e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d518:	b29b      	uxth	r3, r3
 800d51a:	461a      	mov	r2, r3
 800d51c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d51e:	4413      	add	r3, r2
 800d520:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	00da      	lsls	r2, r3, #3
 800d530:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d532:	4413      	add	r3, r2
 800d534:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d538:	647b      	str	r3, [r7, #68]	@ 0x44
 800d53a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d53c:	881b      	ldrh	r3, [r3, #0]
 800d53e:	b29b      	uxth	r3, r3
 800d540:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d544:	b29a      	uxth	r2, r3
 800d546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d548:	801a      	strh	r2, [r3, #0]
 800d54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d10a      	bne.n	800d568 <USB_EPStartXfer+0x5ca>
 800d552:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d554:	881b      	ldrh	r3, [r3, #0]
 800d556:	b29b      	uxth	r3, r3
 800d558:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d55c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d560:	b29a      	uxth	r2, r3
 800d562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d564:	801a      	strh	r2, [r3, #0]
 800d566:	e06d      	b.n	800d644 <USB_EPStartXfer+0x6a6>
 800d568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d56c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d56e:	d81c      	bhi.n	800d5aa <USB_EPStartXfer+0x60c>
 800d570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d574:	085b      	lsrs	r3, r3, #1
 800d576:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d57e:	f003 0301 	and.w	r3, r3, #1
 800d582:	2b00      	cmp	r3, #0
 800d584:	d004      	beq.n	800d590 <USB_EPStartXfer+0x5f2>
 800d586:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d58a:	3301      	adds	r3, #1
 800d58c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d590:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d592:	881b      	ldrh	r3, [r3, #0]
 800d594:	b29a      	uxth	r2, r3
 800d596:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	029b      	lsls	r3, r3, #10
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	4313      	orrs	r3, r2
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5a6:	801a      	strh	r2, [r3, #0]
 800d5a8:	e04c      	b.n	800d644 <USB_EPStartXfer+0x6a6>
 800d5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5ae:	095b      	lsrs	r3, r3, #5
 800d5b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5b8:	f003 031f 	and.w	r3, r3, #31
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d104      	bne.n	800d5ca <USB_EPStartXfer+0x62c>
 800d5c0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d5c4:	3b01      	subs	r3, #1
 800d5c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d5ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5cc:	881b      	ldrh	r3, [r3, #0]
 800d5ce:	b29a      	uxth	r2, r3
 800d5d0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	029b      	lsls	r3, r3, #10
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5e6:	b29a      	uxth	r2, r3
 800d5e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d5ea:	801a      	strh	r2, [r3, #0]
 800d5ec:	e02a      	b.n	800d644 <USB_EPStartXfer+0x6a6>
 800d5ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	785b      	ldrb	r3, [r3, #1]
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d122      	bne.n	800d644 <USB_EPStartXfer+0x6a6>
 800d5fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d602:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	653b      	str	r3, [r7, #80]	@ 0x50
 800d60a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d60e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d618:	b29b      	uxth	r3, r3
 800d61a:	461a      	mov	r2, r3
 800d61c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d61e:	4413      	add	r3, r2
 800d620:	653b      	str	r3, [r7, #80]	@ 0x50
 800d622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	00da      	lsls	r2, r3, #3
 800d630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d632:	4413      	add	r3, r2
 800d634:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d638:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d63e:	b29a      	uxth	r2, r3
 800d640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d642:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	891b      	ldrh	r3, [r3, #8]
 800d650:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	6959      	ldr	r1, [r3, #20]
 800d660:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d664:	b29b      	uxth	r3, r3
 800d666:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d66a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d66e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d672:	6800      	ldr	r0, [r0, #0]
 800d674:	f001 f97f 	bl	800e976 <USB_WritePMA>
            ep->xfer_buff += len;
 800d678:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d67c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	695a      	ldr	r2, [r3, #20]
 800d684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d688:	441a      	add	r2, r3
 800d68a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d68e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d69a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	6a1a      	ldr	r2, [r3, #32]
 800d6a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	691b      	ldr	r3, [r3, #16]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d90f      	bls.n	800d6d2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d6b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	6a1a      	ldr	r2, [r3, #32]
 800d6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6c2:	1ad2      	subs	r2, r2, r3
 800d6c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	621a      	str	r2, [r3, #32]
 800d6d0:	e00e      	b.n	800d6f0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d6d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	6a1b      	ldr	r3, [r3, #32]
 800d6de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d6e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d6f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	785b      	ldrb	r3, [r3, #1]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d177      	bne.n	800d7fc <USB_EPStartXfer+0x85e>
 800d70c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d710:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d71c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d726:	b29b      	uxth	r3, r3
 800d728:	461a      	mov	r2, r3
 800d72a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d72c:	4413      	add	r3, r2
 800d72e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	00da      	lsls	r2, r3, #3
 800d73e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d740:	4413      	add	r3, r2
 800d742:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d746:	637b      	str	r3, [r7, #52]	@ 0x34
 800d748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d74a:	881b      	ldrh	r3, [r3, #0]
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d752:	b29a      	uxth	r2, r3
 800d754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d756:	801a      	strh	r2, [r3, #0]
 800d758:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d10a      	bne.n	800d776 <USB_EPStartXfer+0x7d8>
 800d760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d762:	881b      	ldrh	r3, [r3, #0]
 800d764:	b29b      	uxth	r3, r3
 800d766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d76a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d76e:	b29a      	uxth	r2, r3
 800d770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d772:	801a      	strh	r2, [r3, #0]
 800d774:	e067      	b.n	800d846 <USB_EPStartXfer+0x8a8>
 800d776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d77a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d77c:	d81c      	bhi.n	800d7b8 <USB_EPStartXfer+0x81a>
 800d77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d782:	085b      	lsrs	r3, r3, #1
 800d784:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d78c:	f003 0301 	and.w	r3, r3, #1
 800d790:	2b00      	cmp	r3, #0
 800d792:	d004      	beq.n	800d79e <USB_EPStartXfer+0x800>
 800d794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d798:	3301      	adds	r3, #1
 800d79a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d79e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7a0:	881b      	ldrh	r3, [r3, #0]
 800d7a2:	b29a      	uxth	r2, r3
 800d7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d7a8:	b29b      	uxth	r3, r3
 800d7aa:	029b      	lsls	r3, r3, #10
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	b29a      	uxth	r2, r3
 800d7b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7b4:	801a      	strh	r2, [r3, #0]
 800d7b6:	e046      	b.n	800d846 <USB_EPStartXfer+0x8a8>
 800d7b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7bc:	095b      	lsrs	r3, r3, #5
 800d7be:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d7c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7c6:	f003 031f 	and.w	r3, r3, #31
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d104      	bne.n	800d7d8 <USB_EPStartXfer+0x83a>
 800d7ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d7d2:	3b01      	subs	r3, #1
 800d7d4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d7d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7da:	881b      	ldrh	r3, [r3, #0]
 800d7dc:	b29a      	uxth	r2, r3
 800d7de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	029b      	lsls	r3, r3, #10
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7f8:	801a      	strh	r2, [r3, #0]
 800d7fa:	e024      	b.n	800d846 <USB_EPStartXfer+0x8a8>
 800d7fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	785b      	ldrb	r3, [r3, #1]
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d11c      	bne.n	800d846 <USB_EPStartXfer+0x8a8>
 800d80c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d810:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d81a:	b29b      	uxth	r3, r3
 800d81c:	461a      	mov	r2, r3
 800d81e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d820:	4413      	add	r3, r2
 800d822:	643b      	str	r3, [r7, #64]	@ 0x40
 800d824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	781b      	ldrb	r3, [r3, #0]
 800d830:	00da      	lsls	r2, r3, #3
 800d832:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d834:	4413      	add	r3, r2
 800d836:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d83a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d840:	b29a      	uxth	r2, r3
 800d842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d844:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d84a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	895b      	ldrh	r3, [r3, #10]
 800d852:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d85a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	6959      	ldr	r1, [r3, #20]
 800d862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d866:	b29b      	uxth	r3, r3
 800d868:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d86c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d870:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d874:	6800      	ldr	r0, [r0, #0]
 800d876:	f001 f87e 	bl	800e976 <USB_WritePMA>
 800d87a:	e227      	b.n	800dccc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d87c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	6a1b      	ldr	r3, [r3, #32]
 800d888:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d88c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d890:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d89a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	009b      	lsls	r3, r3, #2
 800d8a4:	4413      	add	r3, r2
 800d8a6:	881b      	ldrh	r3, [r3, #0]
 800d8a8:	b29b      	uxth	r3, r3
 800d8aa:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d8ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8b2:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d8b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8be:	681a      	ldr	r2, [r3, #0]
 800d8c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	781b      	ldrb	r3, [r3, #0]
 800d8cc:	009b      	lsls	r3, r3, #2
 800d8ce:	441a      	add	r2, r3
 800d8d0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d8d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d8e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d8f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d902:	b29b      	uxth	r3, r3
 800d904:	461a      	mov	r2, r3
 800d906:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d908:	4413      	add	r3, r2
 800d90a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d90c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	00da      	lsls	r2, r3, #3
 800d91a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d91c:	4413      	add	r3, r2
 800d91e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d922:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d928:	b29a      	uxth	r2, r3
 800d92a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d92c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d92e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	891b      	ldrh	r3, [r3, #8]
 800d93a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d93e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	6959      	ldr	r1, [r3, #20]
 800d94a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d94e:	b29b      	uxth	r3, r3
 800d950:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d954:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d958:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d95c:	6800      	ldr	r0, [r0, #0]
 800d95e:	f001 f80a 	bl	800e976 <USB_WritePMA>
 800d962:	e1b3      	b.n	800dccc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	6a1a      	ldr	r2, [r3, #32]
 800d970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d974:	1ad2      	subs	r2, r2, r3
 800d976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d97a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d986:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d98a:	681a      	ldr	r2, [r3, #0]
 800d98c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	4413      	add	r3, r2
 800d99c:	881b      	ldrh	r3, [r3, #0]
 800d99e:	b29b      	uxth	r3, r3
 800d9a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	f000 80c6 	beq.w	800db36 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d9aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	673b      	str	r3, [r7, #112]	@ 0x70
 800d9b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	785b      	ldrb	r3, [r3, #1]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d177      	bne.n	800dab6 <USB_EPStartXfer+0xb18>
 800d9c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d9d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	461a      	mov	r2, r3
 800d9e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d9e6:	4413      	add	r3, r2
 800d9e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d9ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	00da      	lsls	r2, r3, #3
 800d9f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d9fa:	4413      	add	r3, r2
 800d9fc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800da00:	667b      	str	r3, [r7, #100]	@ 0x64
 800da02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da04:	881b      	ldrh	r3, [r3, #0]
 800da06:	b29b      	uxth	r3, r3
 800da08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da0c:	b29a      	uxth	r2, r3
 800da0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da10:	801a      	strh	r2, [r3, #0]
 800da12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da16:	2b00      	cmp	r3, #0
 800da18:	d10a      	bne.n	800da30 <USB_EPStartXfer+0xa92>
 800da1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da1c:	881b      	ldrh	r3, [r3, #0]
 800da1e:	b29b      	uxth	r3, r3
 800da20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da28:	b29a      	uxth	r2, r3
 800da2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da2c:	801a      	strh	r2, [r3, #0]
 800da2e:	e067      	b.n	800db00 <USB_EPStartXfer+0xb62>
 800da30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da34:	2b3e      	cmp	r3, #62	@ 0x3e
 800da36:	d81c      	bhi.n	800da72 <USB_EPStartXfer+0xad4>
 800da38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da3c:	085b      	lsrs	r3, r3, #1
 800da3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800da42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da46:	f003 0301 	and.w	r3, r3, #1
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d004      	beq.n	800da58 <USB_EPStartXfer+0xaba>
 800da4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800da52:	3301      	adds	r3, #1
 800da54:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800da58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da5a:	881b      	ldrh	r3, [r3, #0]
 800da5c:	b29a      	uxth	r2, r3
 800da5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800da62:	b29b      	uxth	r3, r3
 800da64:	029b      	lsls	r3, r3, #10
 800da66:	b29b      	uxth	r3, r3
 800da68:	4313      	orrs	r3, r2
 800da6a:	b29a      	uxth	r2, r3
 800da6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da6e:	801a      	strh	r2, [r3, #0]
 800da70:	e046      	b.n	800db00 <USB_EPStartXfer+0xb62>
 800da72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da76:	095b      	lsrs	r3, r3, #5
 800da78:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800da7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da80:	f003 031f 	and.w	r3, r3, #31
 800da84:	2b00      	cmp	r3, #0
 800da86:	d104      	bne.n	800da92 <USB_EPStartXfer+0xaf4>
 800da88:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800da8c:	3b01      	subs	r3, #1
 800da8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800da92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da94:	881b      	ldrh	r3, [r3, #0]
 800da96:	b29a      	uxth	r2, r3
 800da98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800da9c:	b29b      	uxth	r3, r3
 800da9e:	029b      	lsls	r3, r3, #10
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	4313      	orrs	r3, r2
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800daaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800daae:	b29a      	uxth	r2, r3
 800dab0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dab2:	801a      	strh	r2, [r3, #0]
 800dab4:	e024      	b.n	800db00 <USB_EPStartXfer+0xb62>
 800dab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	785b      	ldrb	r3, [r3, #1]
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d11c      	bne.n	800db00 <USB_EPStartXfer+0xb62>
 800dac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dad4:	b29b      	uxth	r3, r3
 800dad6:	461a      	mov	r2, r3
 800dad8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dada:	4413      	add	r3, r2
 800dadc:	673b      	str	r3, [r7, #112]	@ 0x70
 800dade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	00da      	lsls	r2, r3, #3
 800daec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800daee:	4413      	add	r3, r2
 800daf0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800daf4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800daf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dafa:	b29a      	uxth	r2, r3
 800dafc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dafe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800db00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	895b      	ldrh	r3, [r3, #10]
 800db0c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800db10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	6959      	ldr	r1, [r3, #20]
 800db1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db20:	b29b      	uxth	r3, r3
 800db22:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800db26:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800db2a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800db2e:	6800      	ldr	r0, [r0, #0]
 800db30:	f000 ff21 	bl	800e976 <USB_WritePMA>
 800db34:	e0ca      	b.n	800dccc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800db36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	785b      	ldrb	r3, [r3, #1]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d177      	bne.n	800dc36 <USB_EPStartXfer+0xc98>
 800db46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800db52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db60:	b29b      	uxth	r3, r3
 800db62:	461a      	mov	r2, r3
 800db64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db66:	4413      	add	r3, r2
 800db68:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800db6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	00da      	lsls	r2, r3, #3
 800db78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800db7a:	4413      	add	r3, r2
 800db7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800db80:	67bb      	str	r3, [r7, #120]	@ 0x78
 800db82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800db84:	881b      	ldrh	r3, [r3, #0]
 800db86:	b29b      	uxth	r3, r3
 800db88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db8c:	b29a      	uxth	r2, r3
 800db8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800db90:	801a      	strh	r2, [r3, #0]
 800db92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db96:	2b00      	cmp	r3, #0
 800db98:	d10a      	bne.n	800dbb0 <USB_EPStartXfer+0xc12>
 800db9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800db9c:	881b      	ldrh	r3, [r3, #0]
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dba8:	b29a      	uxth	r2, r3
 800dbaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbac:	801a      	strh	r2, [r3, #0]
 800dbae:	e073      	b.n	800dc98 <USB_EPStartXfer+0xcfa>
 800dbb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbb4:	2b3e      	cmp	r3, #62	@ 0x3e
 800dbb6:	d81c      	bhi.n	800dbf2 <USB_EPStartXfer+0xc54>
 800dbb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbbc:	085b      	lsrs	r3, r3, #1
 800dbbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dbc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbc6:	f003 0301 	and.w	r3, r3, #1
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d004      	beq.n	800dbd8 <USB_EPStartXfer+0xc3a>
 800dbce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dbd2:	3301      	adds	r3, #1
 800dbd4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dbd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbda:	881b      	ldrh	r3, [r3, #0]
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dbe2:	b29b      	uxth	r3, r3
 800dbe4:	029b      	lsls	r3, r3, #10
 800dbe6:	b29b      	uxth	r3, r3
 800dbe8:	4313      	orrs	r3, r2
 800dbea:	b29a      	uxth	r2, r3
 800dbec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dbee:	801a      	strh	r2, [r3, #0]
 800dbf0:	e052      	b.n	800dc98 <USB_EPStartXfer+0xcfa>
 800dbf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbf6:	095b      	lsrs	r3, r3, #5
 800dbf8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dbfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc00:	f003 031f 	and.w	r3, r3, #31
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d104      	bne.n	800dc12 <USB_EPStartXfer+0xc74>
 800dc08:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dc0c:	3b01      	subs	r3, #1
 800dc0e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dc12:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc14:	881b      	ldrh	r3, [r3, #0]
 800dc16:	b29a      	uxth	r2, r3
 800dc18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dc1c:	b29b      	uxth	r3, r3
 800dc1e:	029b      	lsls	r3, r3, #10
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	4313      	orrs	r3, r2
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc2e:	b29a      	uxth	r2, r3
 800dc30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dc32:	801a      	strh	r2, [r3, #0]
 800dc34:	e030      	b.n	800dc98 <USB_EPStartXfer+0xcfa>
 800dc36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	785b      	ldrb	r3, [r3, #1]
 800dc42:	2b01      	cmp	r3, #1
 800dc44:	d128      	bne.n	800dc98 <USB_EPStartXfer+0xcfa>
 800dc46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dc54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	461a      	mov	r2, r3
 800dc66:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dc6a:	4413      	add	r3, r2
 800dc6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dc70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	00da      	lsls	r2, r3, #3
 800dc7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dc82:	4413      	add	r3, r2
 800dc84:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dc88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dc8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc90:	b29a      	uxth	r2, r3
 800dc92:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800dc96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800dc98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	891b      	ldrh	r3, [r3, #8]
 800dca4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	6959      	ldr	r1, [r3, #20]
 800dcb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dcbe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dcc2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dcc6:	6800      	ldr	r0, [r0, #0]
 800dcc8:	f000 fe55 	bl	800e976 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800dccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcd4:	681a      	ldr	r2, [r3, #0]
 800dcd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	4413      	add	r3, r2
 800dce6:	881b      	ldrh	r3, [r3, #0]
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dcee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dcf2:	817b      	strh	r3, [r7, #10]
 800dcf4:	897b      	ldrh	r3, [r7, #10]
 800dcf6:	f083 0310 	eor.w	r3, r3, #16
 800dcfa:	817b      	strh	r3, [r7, #10]
 800dcfc:	897b      	ldrh	r3, [r7, #10]
 800dcfe:	f083 0320 	eor.w	r3, r3, #32
 800dd02:	817b      	strh	r3, [r7, #10]
 800dd04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	441a      	add	r2, r3
 800dd1e:	897b      	ldrh	r3, [r7, #10]
 800dd20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd30:	b29b      	uxth	r3, r3
 800dd32:	8013      	strh	r3, [r2, #0]
 800dd34:	f000 bcdf 	b.w	800e6f6 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800dd38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	7b1b      	ldrb	r3, [r3, #12]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	f040 80bc 	bne.w	800dec2 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800dd4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	699a      	ldr	r2, [r3, #24]
 800dd56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	691b      	ldr	r3, [r3, #16]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d917      	bls.n	800dd96 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800dd66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800dd76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	699a      	ldr	r2, [r3, #24]
 800dd82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd86:	1ad2      	subs	r2, r2, r3
 800dd88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	619a      	str	r2, [r3, #24]
 800dd94:	e00e      	b.n	800ddb4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800dd96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd9a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	699b      	ldr	r3, [r3, #24]
 800dda2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800dda6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ddb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddb8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ddc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ddd0:	b29b      	uxth	r3, r3
 800ddd2:	461a      	mov	r2, r3
 800ddd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ddd8:	4413      	add	r3, r2
 800ddda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ddde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dde2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	00da      	lsls	r2, r3, #3
 800ddec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ddf0:	4413      	add	r3, r2
 800ddf2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ddf6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ddfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ddfe:	881b      	ldrh	r3, [r3, #0]
 800de00:	b29b      	uxth	r3, r3
 800de02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800de06:	b29a      	uxth	r2, r3
 800de08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de0c:	801a      	strh	r2, [r3, #0]
 800de0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de12:	2b00      	cmp	r3, #0
 800de14:	d10d      	bne.n	800de32 <USB_EPStartXfer+0xe94>
 800de16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de1a:	881b      	ldrh	r3, [r3, #0]
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de26:	b29a      	uxth	r2, r3
 800de28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de2c:	801a      	strh	r2, [r3, #0]
 800de2e:	f000 bc28 	b.w	800e682 <USB_EPStartXfer+0x16e4>
 800de32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de36:	2b3e      	cmp	r3, #62	@ 0x3e
 800de38:	d81f      	bhi.n	800de7a <USB_EPStartXfer+0xedc>
 800de3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de3e:	085b      	lsrs	r3, r3, #1
 800de40:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800de44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de48:	f003 0301 	and.w	r3, r3, #1
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d004      	beq.n	800de5a <USB_EPStartXfer+0xebc>
 800de50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800de54:	3301      	adds	r3, #1
 800de56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800de5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de5e:	881b      	ldrh	r3, [r3, #0]
 800de60:	b29a      	uxth	r2, r3
 800de62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800de66:	b29b      	uxth	r3, r3
 800de68:	029b      	lsls	r3, r3, #10
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	4313      	orrs	r3, r2
 800de6e:	b29a      	uxth	r2, r3
 800de70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de74:	801a      	strh	r2, [r3, #0]
 800de76:	f000 bc04 	b.w	800e682 <USB_EPStartXfer+0x16e4>
 800de7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de7e:	095b      	lsrs	r3, r3, #5
 800de80:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800de84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de88:	f003 031f 	and.w	r3, r3, #31
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d104      	bne.n	800de9a <USB_EPStartXfer+0xefc>
 800de90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800de94:	3b01      	subs	r3, #1
 800de96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800de9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800de9e:	881b      	ldrh	r3, [r3, #0]
 800dea0:	b29a      	uxth	r2, r3
 800dea2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800dea6:	b29b      	uxth	r3, r3
 800dea8:	029b      	lsls	r3, r3, #10
 800deaa:	b29b      	uxth	r3, r3
 800deac:	4313      	orrs	r3, r2
 800deae:	b29b      	uxth	r3, r3
 800deb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800deb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800deb8:	b29a      	uxth	r2, r3
 800deba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800debe:	801a      	strh	r2, [r3, #0]
 800dec0:	e3df      	b.n	800e682 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800dec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	78db      	ldrb	r3, [r3, #3]
 800dece:	2b02      	cmp	r3, #2
 800ded0:	f040 8218 	bne.w	800e304 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ded4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ded8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	785b      	ldrb	r3, [r3, #1]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	f040 809d 	bne.w	800e020 <USB_EPStartXfer+0x1082>
 800dee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800def4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800def8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df02:	b29b      	uxth	r3, r3
 800df04:	461a      	mov	r2, r3
 800df06:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df0a:	4413      	add	r3, r2
 800df0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800df10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	00da      	lsls	r2, r3, #3
 800df1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df22:	4413      	add	r3, r2
 800df24:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800df28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800df2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df30:	881b      	ldrh	r3, [r3, #0]
 800df32:	b29b      	uxth	r3, r3
 800df34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df38:	b29a      	uxth	r2, r3
 800df3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df3e:	801a      	strh	r2, [r3, #0]
 800df40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	691b      	ldr	r3, [r3, #16]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d10c      	bne.n	800df6a <USB_EPStartXfer+0xfcc>
 800df50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df54:	881b      	ldrh	r3, [r3, #0]
 800df56:	b29b      	uxth	r3, r3
 800df58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df60:	b29a      	uxth	r2, r3
 800df62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800df66:	801a      	strh	r2, [r3, #0]
 800df68:	e08f      	b.n	800e08a <USB_EPStartXfer+0x10ec>
 800df6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	691b      	ldr	r3, [r3, #16]
 800df76:	2b3e      	cmp	r3, #62	@ 0x3e
 800df78:	d826      	bhi.n	800dfc8 <USB_EPStartXfer+0x102a>
 800df7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	691b      	ldr	r3, [r3, #16]
 800df86:	085b      	lsrs	r3, r3, #1
 800df88:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800df8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	691b      	ldr	r3, [r3, #16]
 800df98:	f003 0301 	and.w	r3, r3, #1
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d004      	beq.n	800dfaa <USB_EPStartXfer+0x100c>
 800dfa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dfa4:	3301      	adds	r3, #1
 800dfa6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dfaa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dfae:	881b      	ldrh	r3, [r3, #0]
 800dfb0:	b29a      	uxth	r2, r3
 800dfb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	029b      	lsls	r3, r3, #10
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dfc4:	801a      	strh	r2, [r3, #0]
 800dfc6:	e060      	b.n	800e08a <USB_EPStartXfer+0x10ec>
 800dfc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	691b      	ldr	r3, [r3, #16]
 800dfd4:	095b      	lsrs	r3, r3, #5
 800dfd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dfda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	691b      	ldr	r3, [r3, #16]
 800dfe6:	f003 031f 	and.w	r3, r3, #31
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d104      	bne.n	800dff8 <USB_EPStartXfer+0x105a>
 800dfee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800dff2:	3b01      	subs	r3, #1
 800dff4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800dff8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dffc:	881b      	ldrh	r3, [r3, #0]
 800dffe:	b29a      	uxth	r2, r3
 800e000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e004:	b29b      	uxth	r3, r3
 800e006:	029b      	lsls	r3, r3, #10
 800e008:	b29b      	uxth	r3, r3
 800e00a:	4313      	orrs	r3, r2
 800e00c:	b29b      	uxth	r3, r3
 800e00e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e016:	b29a      	uxth	r2, r3
 800e018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e01c:	801a      	strh	r2, [r3, #0]
 800e01e:	e034      	b.n	800e08a <USB_EPStartXfer+0x10ec>
 800e020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	785b      	ldrb	r3, [r3, #1]
 800e02c:	2b01      	cmp	r3, #1
 800e02e:	d12c      	bne.n	800e08a <USB_EPStartXfer+0x10ec>
 800e030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e034:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e03e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e042:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	461a      	mov	r2, r3
 800e050:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e054:	4413      	add	r3, r2
 800e056:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e05e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	00da      	lsls	r2, r3, #3
 800e068:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e06c:	4413      	add	r3, r2
 800e06e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e072:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e07a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	691b      	ldr	r3, [r3, #16]
 800e082:	b29a      	uxth	r2, r3
 800e084:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e088:	801a      	strh	r2, [r3, #0]
 800e08a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e08e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e098:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e09c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	785b      	ldrb	r3, [r3, #1]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	f040 809d 	bne.w	800e1e4 <USB_EPStartXfer+0x1246>
 800e0aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e0b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e0ce:	4413      	add	r3, r2
 800e0d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e0d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	00da      	lsls	r2, r3, #3
 800e0e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e0e6:	4413      	add	r3, r2
 800e0e8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e0ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e0f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e0f4:	881b      	ldrh	r3, [r3, #0]
 800e0f6:	b29b      	uxth	r3, r3
 800e0f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e0fc:	b29a      	uxth	r2, r3
 800e0fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e102:	801a      	strh	r2, [r3, #0]
 800e104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	691b      	ldr	r3, [r3, #16]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d10c      	bne.n	800e12e <USB_EPStartXfer+0x1190>
 800e114:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e118:	881b      	ldrh	r3, [r3, #0]
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e120:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e124:	b29a      	uxth	r2, r3
 800e126:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e12a:	801a      	strh	r2, [r3, #0]
 800e12c:	e088      	b.n	800e240 <USB_EPStartXfer+0x12a2>
 800e12e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e132:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	691b      	ldr	r3, [r3, #16]
 800e13a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e13c:	d826      	bhi.n	800e18c <USB_EPStartXfer+0x11ee>
 800e13e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	691b      	ldr	r3, [r3, #16]
 800e14a:	085b      	lsrs	r3, r3, #1
 800e14c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	691b      	ldr	r3, [r3, #16]
 800e15c:	f003 0301 	and.w	r3, r3, #1
 800e160:	2b00      	cmp	r3, #0
 800e162:	d004      	beq.n	800e16e <USB_EPStartXfer+0x11d0>
 800e164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e168:	3301      	adds	r3, #1
 800e16a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e16e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e172:	881b      	ldrh	r3, [r3, #0]
 800e174:	b29a      	uxth	r2, r3
 800e176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e17a:	b29b      	uxth	r3, r3
 800e17c:	029b      	lsls	r3, r3, #10
 800e17e:	b29b      	uxth	r3, r3
 800e180:	4313      	orrs	r3, r2
 800e182:	b29a      	uxth	r2, r3
 800e184:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e188:	801a      	strh	r2, [r3, #0]
 800e18a:	e059      	b.n	800e240 <USB_EPStartXfer+0x12a2>
 800e18c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	691b      	ldr	r3, [r3, #16]
 800e198:	095b      	lsrs	r3, r3, #5
 800e19a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e19e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	691b      	ldr	r3, [r3, #16]
 800e1aa:	f003 031f 	and.w	r3, r3, #31
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d104      	bne.n	800e1bc <USB_EPStartXfer+0x121e>
 800e1b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e1bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e1c0:	881b      	ldrh	r3, [r3, #0]
 800e1c2:	b29a      	uxth	r2, r3
 800e1c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	029b      	lsls	r3, r3, #10
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e1e0:	801a      	strh	r2, [r3, #0]
 800e1e2:	e02d      	b.n	800e240 <USB_EPStartXfer+0x12a2>
 800e1e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	785b      	ldrb	r3, [r3, #1]
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d125      	bne.n	800e240 <USB_EPStartXfer+0x12a2>
 800e1f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e202:	b29b      	uxth	r3, r3
 800e204:	461a      	mov	r2, r3
 800e206:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e20a:	4413      	add	r3, r2
 800e20c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	00da      	lsls	r2, r3, #3
 800e21e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e222:	4413      	add	r3, r2
 800e224:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e228:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e22c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	691b      	ldr	r3, [r3, #16]
 800e238:	b29a      	uxth	r2, r3
 800e23a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e23e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	69db      	ldr	r3, [r3, #28]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	f000 8218 	beq.w	800e682 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e252:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e256:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e260:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	4413      	add	r3, r2
 800e26c:	881b      	ldrh	r3, [r3, #0]
 800e26e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e272:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e276:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d005      	beq.n	800e28a <USB_EPStartXfer+0x12ec>
 800e27e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e286:	2b00      	cmp	r3, #0
 800e288:	d10d      	bne.n	800e2a6 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e28a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e28e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e292:	2b00      	cmp	r3, #0
 800e294:	f040 81f5 	bne.w	800e682 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e298:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e29c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	f040 81ee 	bne.w	800e682 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e2a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	4413      	add	r3, r2
 800e2c0:	881b      	ldrh	r3, [r3, #0]
 800e2c2:	b29b      	uxth	r3, r3
 800e2c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e2c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e2cc:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800e2d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	441a      	add	r2, r3
 800e2ea:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e2ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e2f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e2f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e2fe:	b29b      	uxth	r3, r3
 800e300:	8013      	strh	r3, [r2, #0]
 800e302:	e1be      	b.n	800e682 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	78db      	ldrb	r3, [r3, #3]
 800e310:	2b01      	cmp	r3, #1
 800e312:	f040 81b4 	bne.w	800e67e <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e31a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	699a      	ldr	r2, [r3, #24]
 800e322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e326:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	691b      	ldr	r3, [r3, #16]
 800e32e:	429a      	cmp	r2, r3
 800e330:	d917      	bls.n	800e362 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800e332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	691b      	ldr	r3, [r3, #16]
 800e33e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800e342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	699a      	ldr	r2, [r3, #24]
 800e34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e352:	1ad2      	subs	r2, r2, r3
 800e354:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e358:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	619a      	str	r2, [r3, #24]
 800e360:	e00e      	b.n	800e380 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800e362:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e366:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	699b      	ldr	r3, [r3, #24]
 800e36e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800e372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e376:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	2200      	movs	r2, #0
 800e37e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	785b      	ldrb	r3, [r3, #1]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	f040 8085 	bne.w	800e49c <USB_EPStartXfer+0x14fe>
 800e392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e396:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e3a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e3b6:	4413      	add	r3, r2
 800e3b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e3bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	00da      	lsls	r2, r3, #3
 800e3ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e3ce:	4413      	add	r3, r2
 800e3d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e3d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e3d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e3dc:	881b      	ldrh	r3, [r3, #0]
 800e3de:	b29b      	uxth	r3, r3
 800e3e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e3e4:	b29a      	uxth	r2, r3
 800e3e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e3ea:	801a      	strh	r2, [r3, #0]
 800e3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d10c      	bne.n	800e40e <USB_EPStartXfer+0x1470>
 800e3f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e3f8:	881b      	ldrh	r3, [r3, #0]
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e400:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e404:	b29a      	uxth	r2, r3
 800e406:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e40a:	801a      	strh	r2, [r3, #0]
 800e40c:	e077      	b.n	800e4fe <USB_EPStartXfer+0x1560>
 800e40e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e412:	2b3e      	cmp	r3, #62	@ 0x3e
 800e414:	d81e      	bhi.n	800e454 <USB_EPStartXfer+0x14b6>
 800e416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e41a:	085b      	lsrs	r3, r3, #1
 800e41c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e424:	f003 0301 	and.w	r3, r3, #1
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d004      	beq.n	800e436 <USB_EPStartXfer+0x1498>
 800e42c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e430:	3301      	adds	r3, #1
 800e432:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e436:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e43a:	881b      	ldrh	r3, [r3, #0]
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e442:	b29b      	uxth	r3, r3
 800e444:	029b      	lsls	r3, r3, #10
 800e446:	b29b      	uxth	r3, r3
 800e448:	4313      	orrs	r3, r2
 800e44a:	b29a      	uxth	r2, r3
 800e44c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e450:	801a      	strh	r2, [r3, #0]
 800e452:	e054      	b.n	800e4fe <USB_EPStartXfer+0x1560>
 800e454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e458:	095b      	lsrs	r3, r3, #5
 800e45a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e462:	f003 031f 	and.w	r3, r3, #31
 800e466:	2b00      	cmp	r3, #0
 800e468:	d104      	bne.n	800e474 <USB_EPStartXfer+0x14d6>
 800e46a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e46e:	3b01      	subs	r3, #1
 800e470:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e474:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e478:	881b      	ldrh	r3, [r3, #0]
 800e47a:	b29a      	uxth	r2, r3
 800e47c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e480:	b29b      	uxth	r3, r3
 800e482:	029b      	lsls	r3, r3, #10
 800e484:	b29b      	uxth	r3, r3
 800e486:	4313      	orrs	r3, r2
 800e488:	b29b      	uxth	r3, r3
 800e48a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e48e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e492:	b29a      	uxth	r2, r3
 800e494:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e498:	801a      	strh	r2, [r3, #0]
 800e49a:	e030      	b.n	800e4fe <USB_EPStartXfer+0x1560>
 800e49c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	785b      	ldrb	r3, [r3, #1]
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	d128      	bne.n	800e4fe <USB_EPStartXfer+0x1560>
 800e4ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e4ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e4c8:	b29b      	uxth	r3, r3
 800e4ca:	461a      	mov	r2, r3
 800e4cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e4d0:	4413      	add	r3, r2
 800e4d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e4d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	00da      	lsls	r2, r3, #3
 800e4e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e4e8:	4413      	add	r3, r2
 800e4ea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e4ee:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e4f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4f6:	b29a      	uxth	r2, r3
 800e4f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e4fc:	801a      	strh	r2, [r3, #0]
 800e4fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e502:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e50c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	785b      	ldrb	r3, [r3, #1]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	f040 8085 	bne.w	800e628 <USB_EPStartXfer+0x168a>
 800e51e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e522:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e52c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e530:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	461a      	mov	r2, r3
 800e53e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e542:	4413      	add	r3, r2
 800e544:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e54c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	00da      	lsls	r2, r3, #3
 800e556:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e55a:	4413      	add	r3, r2
 800e55c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e560:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e564:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e568:	881b      	ldrh	r3, [r3, #0]
 800e56a:	b29b      	uxth	r3, r3
 800e56c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e570:	b29a      	uxth	r2, r3
 800e572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e576:	801a      	strh	r2, [r3, #0]
 800e578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d10c      	bne.n	800e59a <USB_EPStartXfer+0x15fc>
 800e580:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e584:	881b      	ldrh	r3, [r3, #0]
 800e586:	b29b      	uxth	r3, r3
 800e588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e58c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e590:	b29a      	uxth	r2, r3
 800e592:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e596:	801a      	strh	r2, [r3, #0]
 800e598:	e073      	b.n	800e682 <USB_EPStartXfer+0x16e4>
 800e59a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e59e:	2b3e      	cmp	r3, #62	@ 0x3e
 800e5a0:	d81e      	bhi.n	800e5e0 <USB_EPStartXfer+0x1642>
 800e5a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5a6:	085b      	lsrs	r3, r3, #1
 800e5a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5b0:	f003 0301 	and.w	r3, r3, #1
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d004      	beq.n	800e5c2 <USB_EPStartXfer+0x1624>
 800e5b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e5bc:	3301      	adds	r3, #1
 800e5be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e5c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e5c6:	881b      	ldrh	r3, [r3, #0]
 800e5c8:	b29a      	uxth	r2, r3
 800e5ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	029b      	lsls	r3, r3, #10
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	4313      	orrs	r3, r2
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e5dc:	801a      	strh	r2, [r3, #0]
 800e5de:	e050      	b.n	800e682 <USB_EPStartXfer+0x16e4>
 800e5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5e4:	095b      	lsrs	r3, r3, #5
 800e5e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ee:	f003 031f 	and.w	r3, r3, #31
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d104      	bne.n	800e600 <USB_EPStartXfer+0x1662>
 800e5f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e5fa:	3b01      	subs	r3, #1
 800e5fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e600:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e604:	881b      	ldrh	r3, [r3, #0]
 800e606:	b29a      	uxth	r2, r3
 800e608:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e60c:	b29b      	uxth	r3, r3
 800e60e:	029b      	lsls	r3, r3, #10
 800e610:	b29b      	uxth	r3, r3
 800e612:	4313      	orrs	r3, r2
 800e614:	b29b      	uxth	r3, r3
 800e616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e61a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e61e:	b29a      	uxth	r2, r3
 800e620:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e624:	801a      	strh	r2, [r3, #0]
 800e626:	e02c      	b.n	800e682 <USB_EPStartXfer+0x16e4>
 800e628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e62c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	785b      	ldrb	r3, [r3, #1]
 800e634:	2b01      	cmp	r3, #1
 800e636:	d124      	bne.n	800e682 <USB_EPStartXfer+0x16e4>
 800e638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e63c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e646:	b29b      	uxth	r3, r3
 800e648:	461a      	mov	r2, r3
 800e64a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e64e:	4413      	add	r3, r2
 800e650:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	00da      	lsls	r2, r3, #3
 800e662:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e666:	4413      	add	r3, r2
 800e668:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e66c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e674:	b29a      	uxth	r2, r3
 800e676:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e67a:	801a      	strh	r2, [r3, #0]
 800e67c:	e001      	b.n	800e682 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800e67e:	2301      	movs	r3, #1
 800e680:	e03a      	b.n	800e6f8 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e686:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	781b      	ldrb	r3, [r3, #0]
 800e698:	009b      	lsls	r3, r3, #2
 800e69a:	4413      	add	r3, r2
 800e69c:	881b      	ldrh	r3, [r3, #0]
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e6a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e6a8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e6ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e6b0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e6b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e6b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e6bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e6c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e6c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	009b      	lsls	r3, r3, #2
 800e6dc:	441a      	add	r2, r3
 800e6de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e6e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e6e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e6ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e6ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e6f6:	2300      	movs	r3, #0
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e6fe:	46bd      	mov	sp, r7
 800e700:	bd80      	pop	{r7, pc}

0800e702 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e702:	b480      	push	{r7}
 800e704:	b085      	sub	sp, #20
 800e706:	af00      	add	r7, sp, #0
 800e708:	6078      	str	r0, [r7, #4]
 800e70a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	785b      	ldrb	r3, [r3, #1]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d020      	beq.n	800e756 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e714:	687a      	ldr	r2, [r7, #4]
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	009b      	lsls	r3, r3, #2
 800e71c:	4413      	add	r3, r2
 800e71e:	881b      	ldrh	r3, [r3, #0]
 800e720:	b29b      	uxth	r3, r3
 800e722:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e726:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e72a:	81bb      	strh	r3, [r7, #12]
 800e72c:	89bb      	ldrh	r3, [r7, #12]
 800e72e:	f083 0310 	eor.w	r3, r3, #16
 800e732:	81bb      	strh	r3, [r7, #12]
 800e734:	687a      	ldr	r2, [r7, #4]
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	009b      	lsls	r3, r3, #2
 800e73c:	441a      	add	r2, r3
 800e73e:	89bb      	ldrh	r3, [r7, #12]
 800e740:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e744:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e748:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e74c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e750:	b29b      	uxth	r3, r3
 800e752:	8013      	strh	r3, [r2, #0]
 800e754:	e01f      	b.n	800e796 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e756:	687a      	ldr	r2, [r7, #4]
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	4413      	add	r3, r2
 800e760:	881b      	ldrh	r3, [r3, #0]
 800e762:	b29b      	uxth	r3, r3
 800e764:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e768:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e76c:	81fb      	strh	r3, [r7, #14]
 800e76e:	89fb      	ldrh	r3, [r7, #14]
 800e770:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e774:	81fb      	strh	r3, [r7, #14]
 800e776:	687a      	ldr	r2, [r7, #4]
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	781b      	ldrb	r3, [r3, #0]
 800e77c:	009b      	lsls	r3, r3, #2
 800e77e:	441a      	add	r2, r3
 800e780:	89fb      	ldrh	r3, [r7, #14]
 800e782:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e786:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e78a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e78e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e792:	b29b      	uxth	r3, r3
 800e794:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e796:	2300      	movs	r3, #0
}
 800e798:	4618      	mov	r0, r3
 800e79a:	3714      	adds	r7, #20
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr

0800e7a4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b087      	sub	sp, #28
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e7ae:	683b      	ldr	r3, [r7, #0]
 800e7b0:	7b1b      	ldrb	r3, [r3, #12]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	f040 809d 	bne.w	800e8f2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	785b      	ldrb	r3, [r3, #1]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d04c      	beq.n	800e85a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e7c0:	687a      	ldr	r2, [r7, #4]
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	4413      	add	r3, r2
 800e7ca:	881b      	ldrh	r3, [r3, #0]
 800e7cc:	823b      	strh	r3, [r7, #16]
 800e7ce:	8a3b      	ldrh	r3, [r7, #16]
 800e7d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d01b      	beq.n	800e810 <USB_EPClearStall+0x6c>
 800e7d8:	687a      	ldr	r2, [r7, #4]
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	781b      	ldrb	r3, [r3, #0]
 800e7de:	009b      	lsls	r3, r3, #2
 800e7e0:	4413      	add	r3, r2
 800e7e2:	881b      	ldrh	r3, [r3, #0]
 800e7e4:	b29b      	uxth	r3, r3
 800e7e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e7ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e7ee:	81fb      	strh	r3, [r7, #14]
 800e7f0:	687a      	ldr	r2, [r7, #4]
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	009b      	lsls	r3, r3, #2
 800e7f8:	441a      	add	r2, r3
 800e7fa:	89fb      	ldrh	r3, [r7, #14]
 800e7fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e800:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e804:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e808:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	78db      	ldrb	r3, [r3, #3]
 800e814:	2b01      	cmp	r3, #1
 800e816:	d06c      	beq.n	800e8f2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e818:	687a      	ldr	r2, [r7, #4]
 800e81a:	683b      	ldr	r3, [r7, #0]
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	009b      	lsls	r3, r3, #2
 800e820:	4413      	add	r3, r2
 800e822:	881b      	ldrh	r3, [r3, #0]
 800e824:	b29b      	uxth	r3, r3
 800e826:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e82a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e82e:	81bb      	strh	r3, [r7, #12]
 800e830:	89bb      	ldrh	r3, [r7, #12]
 800e832:	f083 0320 	eor.w	r3, r3, #32
 800e836:	81bb      	strh	r3, [r7, #12]
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	009b      	lsls	r3, r3, #2
 800e840:	441a      	add	r2, r3
 800e842:	89bb      	ldrh	r3, [r7, #12]
 800e844:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e848:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e84c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e854:	b29b      	uxth	r3, r3
 800e856:	8013      	strh	r3, [r2, #0]
 800e858:	e04b      	b.n	800e8f2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e85a:	687a      	ldr	r2, [r7, #4]
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	781b      	ldrb	r3, [r3, #0]
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	4413      	add	r3, r2
 800e864:	881b      	ldrh	r3, [r3, #0]
 800e866:	82fb      	strh	r3, [r7, #22]
 800e868:	8afb      	ldrh	r3, [r7, #22]
 800e86a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d01b      	beq.n	800e8aa <USB_EPClearStall+0x106>
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	683b      	ldr	r3, [r7, #0]
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	009b      	lsls	r3, r3, #2
 800e87a:	4413      	add	r3, r2
 800e87c:	881b      	ldrh	r3, [r3, #0]
 800e87e:	b29b      	uxth	r3, r3
 800e880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e888:	82bb      	strh	r3, [r7, #20]
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	009b      	lsls	r3, r3, #2
 800e892:	441a      	add	r2, r3
 800e894:	8abb      	ldrh	r3, [r7, #20]
 800e896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e89a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e89e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e8a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	009b      	lsls	r3, r3, #2
 800e8b2:	4413      	add	r3, r2
 800e8b4:	881b      	ldrh	r3, [r3, #0]
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e8bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8c0:	827b      	strh	r3, [r7, #18]
 800e8c2:	8a7b      	ldrh	r3, [r7, #18]
 800e8c4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e8c8:	827b      	strh	r3, [r7, #18]
 800e8ca:	8a7b      	ldrh	r3, [r7, #18]
 800e8cc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e8d0:	827b      	strh	r3, [r7, #18]
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	683b      	ldr	r3, [r7, #0]
 800e8d6:	781b      	ldrb	r3, [r3, #0]
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	441a      	add	r2, r3
 800e8dc:	8a7b      	ldrh	r3, [r7, #18]
 800e8de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8ee:	b29b      	uxth	r3, r3
 800e8f0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e8f2:	2300      	movs	r3, #0
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	371c      	adds	r7, #28
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	460b      	mov	r3, r1
 800e90a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e90c:	78fb      	ldrb	r3, [r7, #3]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d103      	bne.n	800e91a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2280      	movs	r2, #128	@ 0x80
 800e916:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e91a:	2300      	movs	r3, #0
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	370c      	adds	r7, #12
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr

0800e928 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e928:	b480      	push	{r7}
 800e92a:	b083      	sub	sp, #12
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e936:	b29b      	uxth	r3, r3
 800e938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e93c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e940:	b29a      	uxth	r2, r3
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e948:	2300      	movs	r3, #0
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	370c      	adds	r7, #12
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr

0800e956 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e956:	b480      	push	{r7}
 800e958:	b085      	sub	sp, #20
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e964:	b29b      	uxth	r3, r3
 800e966:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e968:	68fb      	ldr	r3, [r7, #12]
}
 800e96a:	4618      	mov	r0, r3
 800e96c:	3714      	adds	r7, #20
 800e96e:	46bd      	mov	sp, r7
 800e970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e974:	4770      	bx	lr

0800e976 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e976:	b480      	push	{r7}
 800e978:	b08b      	sub	sp, #44	@ 0x2c
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	60f8      	str	r0, [r7, #12]
 800e97e:	60b9      	str	r1, [r7, #8]
 800e980:	4611      	mov	r1, r2
 800e982:	461a      	mov	r2, r3
 800e984:	460b      	mov	r3, r1
 800e986:	80fb      	strh	r3, [r7, #6]
 800e988:	4613      	mov	r3, r2
 800e98a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e98c:	88bb      	ldrh	r3, [r7, #4]
 800e98e:	3301      	adds	r3, #1
 800e990:	085b      	lsrs	r3, r3, #1
 800e992:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e99c:	88fa      	ldrh	r2, [r7, #6]
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	4413      	add	r3, r2
 800e9a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e9a6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e9a8:	69bb      	ldr	r3, [r7, #24]
 800e9aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9ac:	e01b      	b.n	800e9e6 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	021b      	lsls	r3, r3, #8
 800e9bc:	b21a      	sxth	r2, r3
 800e9be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e9c2:	4313      	orrs	r3, r2
 800e9c4:	b21b      	sxth	r3, r3
 800e9c6:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e9c8:	6a3b      	ldr	r3, [r7, #32]
 800e9ca:	8a7a      	ldrh	r2, [r7, #18]
 800e9cc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e9ce:	6a3b      	ldr	r3, [r7, #32]
 800e9d0:	3302      	adds	r3, #2
 800e9d2:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e9d4:	69fb      	ldr	r3, [r7, #28]
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e9da:	69fb      	ldr	r3, [r7, #28]
 800e9dc:	3301      	adds	r3, #1
 800e9de:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e2:	3b01      	subs	r3, #1
 800e9e4:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d1e0      	bne.n	800e9ae <USB_WritePMA+0x38>
  }
}
 800e9ec:	bf00      	nop
 800e9ee:	bf00      	nop
 800e9f0:	372c      	adds	r7, #44	@ 0x2c
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr

0800e9fa <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e9fa:	b480      	push	{r7}
 800e9fc:	b08b      	sub	sp, #44	@ 0x2c
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	60f8      	str	r0, [r7, #12]
 800ea02:	60b9      	str	r1, [r7, #8]
 800ea04:	4611      	mov	r1, r2
 800ea06:	461a      	mov	r2, r3
 800ea08:	460b      	mov	r3, r1
 800ea0a:	80fb      	strh	r3, [r7, #6]
 800ea0c:	4613      	mov	r3, r2
 800ea0e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ea10:	88bb      	ldrh	r3, [r7, #4]
 800ea12:	085b      	lsrs	r3, r3, #1
 800ea14:	b29b      	uxth	r3, r3
 800ea16:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ea20:	88fa      	ldrh	r2, [r7, #6]
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	4413      	add	r3, r2
 800ea26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ea2a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ea2c:	69bb      	ldr	r3, [r7, #24]
 800ea2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea30:	e018      	b.n	800ea64 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ea32:	6a3b      	ldr	r3, [r7, #32]
 800ea34:	881b      	ldrh	r3, [r3, #0]
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ea3a:	6a3b      	ldr	r3, [r7, #32]
 800ea3c:	3302      	adds	r3, #2
 800ea3e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ea40:	693b      	ldr	r3, [r7, #16]
 800ea42:	b2da      	uxtb	r2, r3
 800ea44:	69fb      	ldr	r3, [r7, #28]
 800ea46:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ea4e:	693b      	ldr	r3, [r7, #16]
 800ea50:	0a1b      	lsrs	r3, r3, #8
 800ea52:	b2da      	uxtb	r2, r3
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ea58:	69fb      	ldr	r3, [r7, #28]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ea5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea60:	3b01      	subs	r3, #1
 800ea62:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d1e3      	bne.n	800ea32 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ea6a:	88bb      	ldrh	r3, [r7, #4]
 800ea6c:	f003 0301 	and.w	r3, r3, #1
 800ea70:	b29b      	uxth	r3, r3
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d007      	beq.n	800ea86 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ea76:	6a3b      	ldr	r3, [r7, #32]
 800ea78:	881b      	ldrh	r3, [r3, #0]
 800ea7a:	b29b      	uxth	r3, r3
 800ea7c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ea7e:	693b      	ldr	r3, [r7, #16]
 800ea80:	b2da      	uxtb	r2, r3
 800ea82:	69fb      	ldr	r3, [r7, #28]
 800ea84:	701a      	strb	r2, [r3, #0]
  }
}
 800ea86:	bf00      	nop
 800ea88:	372c      	adds	r7, #44	@ 0x2c
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea90:	4770      	bx	lr

0800ea92 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea92:	b580      	push	{r7, lr}
 800ea94:	b084      	sub	sp, #16
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	6078      	str	r0, [r7, #4]
 800ea9a:	460b      	mov	r3, r1
 800ea9c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ea9e:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800eaa2:	f002 f90f 	bl	8010cc4 <USBD_static_malloc>
 800eaa6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d105      	bne.n	800eaba <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2200      	movs	r2, #0
 800eab2:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800eab6:	2302      	movs	r3, #2
 800eab8:	e066      	b.n	800eb88 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	7c1b      	ldrb	r3, [r3, #16]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d119      	bne.n	800eafe <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800eaca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eace:	2202      	movs	r2, #2
 800ead0:	2181      	movs	r1, #129	@ 0x81
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f001 ff9d 	bl	8010a12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2201      	movs	r2, #1
 800eadc:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eade:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eae2:	2202      	movs	r2, #2
 800eae4:	2101      	movs	r1, #1
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f001 ff93 	bl	8010a12 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2201      	movs	r2, #1
 800eaf0:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2210      	movs	r2, #16
 800eaf8:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800eafc:	e016      	b.n	800eb2c <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800eafe:	2340      	movs	r3, #64	@ 0x40
 800eb00:	2202      	movs	r2, #2
 800eb02:	2181      	movs	r1, #129	@ 0x81
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f001 ff84 	bl	8010a12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800eb10:	2340      	movs	r3, #64	@ 0x40
 800eb12:	2202      	movs	r2, #2
 800eb14:	2101      	movs	r1, #1
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f001 ff7b 	bl	8010a12 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2201      	movs	r2, #1
 800eb20:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2210      	movs	r2, #16
 800eb28:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800eb2c:	2308      	movs	r3, #8
 800eb2e:	2203      	movs	r2, #3
 800eb30:	2182      	movs	r1, #130	@ 0x82
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f001 ff6d 	bl	8010a12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2200      	movs	r2, #0
 800eb56:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	7c1b      	ldrb	r3, [r3, #16]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d109      	bne.n	800eb76 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eb68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eb6c:	2101      	movs	r1, #1
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f002 f83e 	bl	8010bf0 <USBD_LL_PrepareReceive>
 800eb74:	e007      	b.n	800eb86 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eb7c:	2340      	movs	r3, #64	@ 0x40
 800eb7e:	2101      	movs	r1, #1
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f002 f835 	bl	8010bf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800eb86:	2300      	movs	r3, #0
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3710      	adds	r7, #16
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b082      	sub	sp, #8
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800eb9c:	2181      	movs	r1, #129	@ 0x81
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	f001 ff5d 	bl	8010a5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	2200      	movs	r2, #0
 800eba8:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ebaa:	2101      	movs	r1, #1
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f001 ff56 	bl	8010a5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ebba:	2182      	movs	r1, #130	@ 0x82
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	f001 ff4e 	bl	8010a5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d00e      	beq.n	800ebfa <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ebec:	4618      	mov	r0, r3
 800ebee:	f002 f877 	bl	8010ce0 <USBD_static_free>
    pdev->pClassData = NULL;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2200      	movs	r2, #0
 800ebf6:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ebfa:	2300      	movs	r3, #0
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3708      	adds	r7, #8
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b086      	sub	sp, #24
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ec14:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ec16:	2300      	movs	r3, #0
 800ec18:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec1e:	2300      	movs	r3, #0
 800ec20:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d101      	bne.n	800ec2c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ec28:	2303      	movs	r3, #3
 800ec2a:	e0af      	b.n	800ed8c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d03f      	beq.n	800ecb8 <USBD_CDC_Setup+0xb4>
 800ec38:	2b20      	cmp	r3, #32
 800ec3a:	f040 809f 	bne.w	800ed7c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	88db      	ldrh	r3, [r3, #6]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d02e      	beq.n	800eca4 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	b25b      	sxtb	r3, r3
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	da16      	bge.n	800ec7e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ec56:	689b      	ldr	r3, [r3, #8]
 800ec58:	683a      	ldr	r2, [r7, #0]
 800ec5a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ec5c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ec5e:	683a      	ldr	r2, [r7, #0]
 800ec60:	88d2      	ldrh	r2, [r2, #6]
 800ec62:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ec64:	683b      	ldr	r3, [r7, #0]
 800ec66:	88db      	ldrh	r3, [r3, #6]
 800ec68:	2b07      	cmp	r3, #7
 800ec6a:	bf28      	it	cs
 800ec6c:	2307      	movcs	r3, #7
 800ec6e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	89fa      	ldrh	r2, [r7, #14]
 800ec74:	4619      	mov	r1, r3
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f001 facd 	bl	8010216 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ec7c:	e085      	b.n	800ed8a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	785a      	ldrb	r2, [r3, #1]
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	88db      	ldrh	r3, [r3, #6]
 800ec8c:	b2da      	uxtb	r2, r3
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ec94:	6939      	ldr	r1, [r7, #16]
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	88db      	ldrh	r3, [r3, #6]
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f001 fae6 	bl	801026e <USBD_CtlPrepareRx>
      break;
 800eca2:	e072      	b.n	800ed8a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ecaa:	689b      	ldr	r3, [r3, #8]
 800ecac:	683a      	ldr	r2, [r7, #0]
 800ecae:	7850      	ldrb	r0, [r2, #1]
 800ecb0:	2200      	movs	r2, #0
 800ecb2:	6839      	ldr	r1, [r7, #0]
 800ecb4:	4798      	blx	r3
      break;
 800ecb6:	e068      	b.n	800ed8a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	785b      	ldrb	r3, [r3, #1]
 800ecbc:	2b0b      	cmp	r3, #11
 800ecbe:	d852      	bhi.n	800ed66 <USBD_CDC_Setup+0x162>
 800ecc0:	a201      	add	r2, pc, #4	@ (adr r2, 800ecc8 <USBD_CDC_Setup+0xc4>)
 800ecc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ecc6:	bf00      	nop
 800ecc8:	0800ecf9 	.word	0x0800ecf9
 800eccc:	0800ed75 	.word	0x0800ed75
 800ecd0:	0800ed67 	.word	0x0800ed67
 800ecd4:	0800ed67 	.word	0x0800ed67
 800ecd8:	0800ed67 	.word	0x0800ed67
 800ecdc:	0800ed67 	.word	0x0800ed67
 800ece0:	0800ed67 	.word	0x0800ed67
 800ece4:	0800ed67 	.word	0x0800ed67
 800ece8:	0800ed67 	.word	0x0800ed67
 800ecec:	0800ed67 	.word	0x0800ed67
 800ecf0:	0800ed23 	.word	0x0800ed23
 800ecf4:	0800ed4d 	.word	0x0800ed4d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	2b03      	cmp	r3, #3
 800ed02:	d107      	bne.n	800ed14 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ed04:	f107 030a 	add.w	r3, r7, #10
 800ed08:	2202      	movs	r2, #2
 800ed0a:	4619      	mov	r1, r3
 800ed0c:	6878      	ldr	r0, [r7, #4]
 800ed0e:	f001 fa82 	bl	8010216 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ed12:	e032      	b.n	800ed7a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ed14:	6839      	ldr	r1, [r7, #0]
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f001 fa0c 	bl	8010134 <USBD_CtlError>
            ret = USBD_FAIL;
 800ed1c:	2303      	movs	r3, #3
 800ed1e:	75fb      	strb	r3, [r7, #23]
          break;
 800ed20:	e02b      	b.n	800ed7a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed28:	b2db      	uxtb	r3, r3
 800ed2a:	2b03      	cmp	r3, #3
 800ed2c:	d107      	bne.n	800ed3e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ed2e:	f107 030d 	add.w	r3, r7, #13
 800ed32:	2201      	movs	r2, #1
 800ed34:	4619      	mov	r1, r3
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f001 fa6d 	bl	8010216 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ed3c:	e01d      	b.n	800ed7a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ed3e:	6839      	ldr	r1, [r7, #0]
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f001 f9f7 	bl	8010134 <USBD_CtlError>
            ret = USBD_FAIL;
 800ed46:	2303      	movs	r3, #3
 800ed48:	75fb      	strb	r3, [r7, #23]
          break;
 800ed4a:	e016      	b.n	800ed7a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed52:	b2db      	uxtb	r3, r3
 800ed54:	2b03      	cmp	r3, #3
 800ed56:	d00f      	beq.n	800ed78 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800ed58:	6839      	ldr	r1, [r7, #0]
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f001 f9ea 	bl	8010134 <USBD_CtlError>
            ret = USBD_FAIL;
 800ed60:	2303      	movs	r3, #3
 800ed62:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ed64:	e008      	b.n	800ed78 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ed66:	6839      	ldr	r1, [r7, #0]
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f001 f9e3 	bl	8010134 <USBD_CtlError>
          ret = USBD_FAIL;
 800ed6e:	2303      	movs	r3, #3
 800ed70:	75fb      	strb	r3, [r7, #23]
          break;
 800ed72:	e002      	b.n	800ed7a <USBD_CDC_Setup+0x176>
          break;
 800ed74:	bf00      	nop
 800ed76:	e008      	b.n	800ed8a <USBD_CDC_Setup+0x186>
          break;
 800ed78:	bf00      	nop
      }
      break;
 800ed7a:	e006      	b.n	800ed8a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800ed7c:	6839      	ldr	r1, [r7, #0]
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f001 f9d8 	bl	8010134 <USBD_CtlError>
      ret = USBD_FAIL;
 800ed84:	2303      	movs	r3, #3
 800ed86:	75fb      	strb	r3, [r7, #23]
      break;
 800ed88:	bf00      	nop
  }

  return (uint8_t)ret;
 800ed8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	3718      	adds	r7, #24
 800ed90:	46bd      	mov	sp, r7
 800ed92:	bd80      	pop	{r7, pc}

0800ed94 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b084      	sub	sp, #16
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
 800ed9c:	460b      	mov	r3, r1
 800ed9e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800eda6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d101      	bne.n	800edb6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800edb2:	2303      	movs	r3, #3
 800edb4:	e04f      	b.n	800ee56 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800edbc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800edbe:	78fa      	ldrb	r2, [r7, #3]
 800edc0:	6879      	ldr	r1, [r7, #4]
 800edc2:	4613      	mov	r3, r2
 800edc4:	009b      	lsls	r3, r3, #2
 800edc6:	4413      	add	r3, r2
 800edc8:	009b      	lsls	r3, r3, #2
 800edca:	440b      	add	r3, r1
 800edcc:	3318      	adds	r3, #24
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d029      	beq.n	800ee28 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800edd4:	78fa      	ldrb	r2, [r7, #3]
 800edd6:	6879      	ldr	r1, [r7, #4]
 800edd8:	4613      	mov	r3, r2
 800edda:	009b      	lsls	r3, r3, #2
 800eddc:	4413      	add	r3, r2
 800edde:	009b      	lsls	r3, r3, #2
 800ede0:	440b      	add	r3, r1
 800ede2:	3318      	adds	r3, #24
 800ede4:	681a      	ldr	r2, [r3, #0]
 800ede6:	78f9      	ldrb	r1, [r7, #3]
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	460b      	mov	r3, r1
 800edec:	009b      	lsls	r3, r3, #2
 800edee:	440b      	add	r3, r1
 800edf0:	00db      	lsls	r3, r3, #3
 800edf2:	4403      	add	r3, r0
 800edf4:	3320      	adds	r3, #32
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	fbb2 f1f3 	udiv	r1, r2, r3
 800edfc:	fb01 f303 	mul.w	r3, r1, r3
 800ee00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d110      	bne.n	800ee28 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ee06:	78fa      	ldrb	r2, [r7, #3]
 800ee08:	6879      	ldr	r1, [r7, #4]
 800ee0a:	4613      	mov	r3, r2
 800ee0c:	009b      	lsls	r3, r3, #2
 800ee0e:	4413      	add	r3, r2
 800ee10:	009b      	lsls	r3, r3, #2
 800ee12:	440b      	add	r3, r1
 800ee14:	3318      	adds	r3, #24
 800ee16:	2200      	movs	r2, #0
 800ee18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ee1a:	78f9      	ldrb	r1, [r7, #3]
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	2200      	movs	r2, #0
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f001 fec4 	bl	8010bae <USBD_LL_Transmit>
 800ee26:	e015      	b.n	800ee54 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee36:	691b      	ldr	r3, [r3, #16]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d00b      	beq.n	800ee54 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee42:	691b      	ldr	r3, [r3, #16]
 800ee44:	68ba      	ldr	r2, [r7, #8]
 800ee46:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800ee4a:	68ba      	ldr	r2, [r7, #8]
 800ee4c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800ee50:	78fa      	ldrb	r2, [r7, #3]
 800ee52:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ee54:	2300      	movs	r3, #0
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3710      	adds	r7, #16
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}

0800ee5e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ee5e:	b580      	push	{r7, lr}
 800ee60:	b084      	sub	sp, #16
 800ee62:	af00      	add	r7, sp, #0
 800ee64:	6078      	str	r0, [r7, #4]
 800ee66:	460b      	mov	r3, r1
 800ee68:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee70:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d101      	bne.n	800ee80 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ee7c:	2303      	movs	r3, #3
 800ee7e:	e015      	b.n	800eeac <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ee80:	78fb      	ldrb	r3, [r7, #3]
 800ee82:	4619      	mov	r1, r3
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f001 fed4 	bl	8010c32 <USBD_LL_GetRxDataSize>
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee98:	68db      	ldr	r3, [r3, #12]
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800eea0:	68fa      	ldr	r2, [r7, #12]
 800eea2:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800eea6:	4611      	mov	r1, r2
 800eea8:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800eeaa:	2300      	movs	r3, #0
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3710      	adds	r7, #16
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eec2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d101      	bne.n	800eece <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800eeca:	2303      	movs	r3, #3
 800eecc:	e01a      	b.n	800ef04 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d014      	beq.n	800ef02 <USBD_CDC_EP0_RxReady+0x4e>
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800eede:	2bff      	cmp	r3, #255	@ 0xff
 800eee0:	d00f      	beq.n	800ef02 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eee8:	689b      	ldr	r3, [r3, #8]
 800eeea:	68fa      	ldr	r2, [r7, #12]
 800eeec:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800eef0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800eef2:	68fa      	ldr	r2, [r7, #12]
 800eef4:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800eef8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	22ff      	movs	r2, #255	@ 0xff
 800eefe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ef02:	2300      	movs	r3, #0
}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3710      	adds	r7, #16
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b083      	sub	sp, #12
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	2243      	movs	r2, #67	@ 0x43
 800ef18:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ef1a:	4b03      	ldr	r3, [pc, #12]	@ (800ef28 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	370c      	adds	r7, #12
 800ef20:	46bd      	mov	sp, r7
 800ef22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef26:	4770      	bx	lr
 800ef28:	200000e8 	.word	0x200000e8

0800ef2c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b083      	sub	sp, #12
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2243      	movs	r2, #67	@ 0x43
 800ef38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ef3a:	4b03      	ldr	r3, [pc, #12]	@ (800ef48 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	370c      	adds	r7, #12
 800ef40:	46bd      	mov	sp, r7
 800ef42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef46:	4770      	bx	lr
 800ef48:	200000a4 	.word	0x200000a4

0800ef4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b083      	sub	sp, #12
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2243      	movs	r2, #67	@ 0x43
 800ef58:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ef5a:	4b03      	ldr	r3, [pc, #12]	@ (800ef68 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	2000012c 	.word	0x2000012c

0800ef6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	220a      	movs	r2, #10
 800ef78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ef7a:	4b03      	ldr	r3, [pc, #12]	@ (800ef88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr
 800ef88:	20000060 	.word	0x20000060

0800ef8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d101      	bne.n	800efa0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ef9c:	2303      	movs	r3, #3
 800ef9e:	e004      	b.n	800efaa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	683a      	ldr	r2, [r7, #0]
 800efa4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800efa8:	2300      	movs	r3, #0
}
 800efaa:	4618      	mov	r0, r3
 800efac:	370c      	adds	r7, #12
 800efae:	46bd      	mov	sp, r7
 800efb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb4:	4770      	bx	lr

0800efb6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800efb6:	b480      	push	{r7}
 800efb8:	b087      	sub	sp, #28
 800efba:	af00      	add	r7, sp, #0
 800efbc:	60f8      	str	r0, [r7, #12]
 800efbe:	60b9      	str	r1, [r7, #8]
 800efc0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800efc8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d101      	bne.n	800efd4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800efd0:	2303      	movs	r3, #3
 800efd2:	e008      	b.n	800efe6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800efd4:	697b      	ldr	r3, [r7, #20]
 800efd6:	68ba      	ldr	r2, [r7, #8]
 800efd8:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	687a      	ldr	r2, [r7, #4]
 800efe0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800efe4:	2300      	movs	r3, #0
}
 800efe6:	4618      	mov	r0, r3
 800efe8:	371c      	adds	r7, #28
 800efea:	46bd      	mov	sp, r7
 800efec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff0:	4770      	bx	lr

0800eff2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800eff2:	b480      	push	{r7}
 800eff4:	b085      	sub	sp, #20
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	6078      	str	r0, [r7, #4]
 800effa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f002:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	2b00      	cmp	r3, #0
 800f008:	d101      	bne.n	800f00e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f00a:	2303      	movs	r3, #3
 800f00c:	e004      	b.n	800f018 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	683a      	ldr	r2, [r7, #0]
 800f012:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f016:	2300      	movs	r3, #0
}
 800f018:	4618      	mov	r0, r3
 800f01a:	3714      	adds	r7, #20
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr

0800f024 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f024:	b580      	push	{r7, lr}
 800f026:	b084      	sub	sp, #16
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f032:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f034:	2301      	movs	r3, #1
 800f036:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d101      	bne.n	800f046 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f042:	2303      	movs	r3, #3
 800f044:	e01a      	b.n	800f07c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d114      	bne.n	800f07a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	2201      	movs	r2, #1
 800f054:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f068:	68bb      	ldr	r3, [r7, #8]
 800f06a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f06e:	2181      	movs	r1, #129	@ 0x81
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f001 fd9c 	bl	8010bae <USBD_LL_Transmit>

    ret = USBD_OK;
 800f076:	2300      	movs	r3, #0
 800f078:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3710      	adds	r7, #16
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f092:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d101      	bne.n	800f0a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f09e:	2303      	movs	r3, #3
 800f0a0:	e016      	b.n	800f0d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	7c1b      	ldrb	r3, [r3, #16]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d109      	bne.n	800f0be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f0b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f0b4:	2101      	movs	r1, #1
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f001 fd9a 	bl	8010bf0 <USBD_LL_PrepareReceive>
 800f0bc:	e007      	b.n	800f0ce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f0c4:	2340      	movs	r3, #64	@ 0x40
 800f0c6:	2101      	movs	r1, #1
 800f0c8:	6878      	ldr	r0, [r7, #4]
 800f0ca:	f001 fd91 	bl	8010bf0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f0ce:	2300      	movs	r3, #0
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3710      	adds	r7, #16
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}

0800f0d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b086      	sub	sp, #24
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	4613      	mov	r3, r2
 800f0e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d101      	bne.n	800f0f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f0ec:	2303      	movs	r3, #3
 800f0ee:	e01f      	b.n	800f130 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	2200      	movs	r2, #0
 800f104:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d003      	beq.n	800f116 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	68ba      	ldr	r2, [r7, #8]
 800f112:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2201      	movs	r2, #1
 800f11a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	79fa      	ldrb	r2, [r7, #7]
 800f122:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f124:	68f8      	ldr	r0, [r7, #12]
 800f126:	f001 fbf9 	bl	801091c <USBD_LL_Init>
 800f12a:	4603      	mov	r3, r0
 800f12c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f12e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f130:	4618      	mov	r0, r3
 800f132:	3718      	adds	r7, #24
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f142:	2300      	movs	r3, #0
 800f144:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d101      	bne.n	800f150 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f14c:	2303      	movs	r3, #3
 800f14e:	e016      	b.n	800f17e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	683a      	ldr	r2, [r7, #0]
 800f154:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f160:	2b00      	cmp	r3, #0
 800f162:	d00b      	beq.n	800f17c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f16a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f16c:	f107 020e 	add.w	r2, r7, #14
 800f170:	4610      	mov	r0, r2
 800f172:	4798      	blx	r3
 800f174:	4602      	mov	r2, r0
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f17c:	2300      	movs	r3, #0
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3710      	adds	r7, #16
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}

0800f186 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f186:	b580      	push	{r7, lr}
 800f188:	b082      	sub	sp, #8
 800f18a:	af00      	add	r7, sp, #0
 800f18c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f18e:	6878      	ldr	r0, [r7, #4]
 800f190:	f001 fc24 	bl	80109dc <USBD_LL_Start>
 800f194:	4603      	mov	r3, r0
}
 800f196:	4618      	mov	r0, r3
 800f198:	3708      	adds	r7, #8
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}

0800f19e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f19e:	b480      	push	{r7}
 800f1a0:	b083      	sub	sp, #12
 800f1a2:	af00      	add	r7, sp, #0
 800f1a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f1a6:	2300      	movs	r3, #0
}
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	370c      	adds	r7, #12
 800f1ac:	46bd      	mov	sp, r7
 800f1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b2:	4770      	bx	lr

0800f1b4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b084      	sub	sp, #16
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	460b      	mov	r3, r1
 800f1be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f1c0:	2303      	movs	r3, #3
 800f1c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d009      	beq.n	800f1e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	78fa      	ldrb	r2, [r7, #3]
 800f1d8:	4611      	mov	r1, r2
 800f1da:	6878      	ldr	r0, [r7, #4]
 800f1dc:	4798      	blx	r3
 800f1de:	4603      	mov	r3, r0
 800f1e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3710      	adds	r7, #16
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b082      	sub	sp, #8
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d007      	beq.n	800f212 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	78fa      	ldrb	r2, [r7, #3]
 800f20c:	4611      	mov	r1, r2
 800f20e:	6878      	ldr	r0, [r7, #4]
 800f210:	4798      	blx	r3
  }

  return USBD_OK;
 800f212:	2300      	movs	r3, #0
}
 800f214:	4618      	mov	r0, r3
 800f216:	3708      	adds	r7, #8
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}

0800f21c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b084      	sub	sp, #16
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f22c:	6839      	ldr	r1, [r7, #0]
 800f22e:	4618      	mov	r0, r3
 800f230:	f000 ff46 	bl	80100c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2201      	movs	r2, #1
 800f238:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f242:	461a      	mov	r2, r3
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f250:	f003 031f 	and.w	r3, r3, #31
 800f254:	2b02      	cmp	r3, #2
 800f256:	d01a      	beq.n	800f28e <USBD_LL_SetupStage+0x72>
 800f258:	2b02      	cmp	r3, #2
 800f25a:	d822      	bhi.n	800f2a2 <USBD_LL_SetupStage+0x86>
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d002      	beq.n	800f266 <USBD_LL_SetupStage+0x4a>
 800f260:	2b01      	cmp	r3, #1
 800f262:	d00a      	beq.n	800f27a <USBD_LL_SetupStage+0x5e>
 800f264:	e01d      	b.n	800f2a2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f26c:	4619      	mov	r1, r3
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f000 f9ee 	bl	800f650 <USBD_StdDevReq>
 800f274:	4603      	mov	r3, r0
 800f276:	73fb      	strb	r3, [r7, #15]
      break;
 800f278:	e020      	b.n	800f2bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f280:	4619      	mov	r1, r3
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f000 fa52 	bl	800f72c <USBD_StdItfReq>
 800f288:	4603      	mov	r3, r0
 800f28a:	73fb      	strb	r3, [r7, #15]
      break;
 800f28c:	e016      	b.n	800f2bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f294:	4619      	mov	r1, r3
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f000 fa91 	bl	800f7be <USBD_StdEPReq>
 800f29c:	4603      	mov	r3, r0
 800f29e:	73fb      	strb	r3, [r7, #15]
      break;
 800f2a0:	e00c      	b.n	800f2bc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f2a8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f2ac:	b2db      	uxtb	r3, r3
 800f2ae:	4619      	mov	r1, r3
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f001 fbf3 	bl	8010a9c <USBD_LL_StallEP>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	73fb      	strb	r3, [r7, #15]
      break;
 800f2ba:	bf00      	nop
  }

  return ret;
 800f2bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3710      	adds	r7, #16
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}

0800f2c6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f2c6:	b580      	push	{r7, lr}
 800f2c8:	b086      	sub	sp, #24
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	60f8      	str	r0, [r7, #12]
 800f2ce:	460b      	mov	r3, r1
 800f2d0:	607a      	str	r2, [r7, #4]
 800f2d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f2d4:	7afb      	ldrb	r3, [r7, #11]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d138      	bne.n	800f34c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f2e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f2e8:	2b03      	cmp	r3, #3
 800f2ea:	d14a      	bne.n	800f382 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f2ec:	693b      	ldr	r3, [r7, #16]
 800f2ee:	689a      	ldr	r2, [r3, #8]
 800f2f0:	693b      	ldr	r3, [r7, #16]
 800f2f2:	68db      	ldr	r3, [r3, #12]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d913      	bls.n	800f320 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f2f8:	693b      	ldr	r3, [r7, #16]
 800f2fa:	689a      	ldr	r2, [r3, #8]
 800f2fc:	693b      	ldr	r3, [r7, #16]
 800f2fe:	68db      	ldr	r3, [r3, #12]
 800f300:	1ad2      	subs	r2, r2, r3
 800f302:	693b      	ldr	r3, [r7, #16]
 800f304:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f306:	693b      	ldr	r3, [r7, #16]
 800f308:	68da      	ldr	r2, [r3, #12]
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	689b      	ldr	r3, [r3, #8]
 800f30e:	4293      	cmp	r3, r2
 800f310:	bf28      	it	cs
 800f312:	4613      	movcs	r3, r2
 800f314:	461a      	mov	r2, r3
 800f316:	6879      	ldr	r1, [r7, #4]
 800f318:	68f8      	ldr	r0, [r7, #12]
 800f31a:	f000 ffc5 	bl	80102a8 <USBD_CtlContinueRx>
 800f31e:	e030      	b.n	800f382 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f326:	b2db      	uxtb	r3, r3
 800f328:	2b03      	cmp	r3, #3
 800f32a:	d10b      	bne.n	800f344 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f332:	691b      	ldr	r3, [r3, #16]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d005      	beq.n	800f344 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f33e:	691b      	ldr	r3, [r3, #16]
 800f340:	68f8      	ldr	r0, [r7, #12]
 800f342:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f344:	68f8      	ldr	r0, [r7, #12]
 800f346:	f000 ffc0 	bl	80102ca <USBD_CtlSendStatus>
 800f34a:	e01a      	b.n	800f382 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f352:	b2db      	uxtb	r3, r3
 800f354:	2b03      	cmp	r3, #3
 800f356:	d114      	bne.n	800f382 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f35e:	699b      	ldr	r3, [r3, #24]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d00e      	beq.n	800f382 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f36a:	699b      	ldr	r3, [r3, #24]
 800f36c:	7afa      	ldrb	r2, [r7, #11]
 800f36e:	4611      	mov	r1, r2
 800f370:	68f8      	ldr	r0, [r7, #12]
 800f372:	4798      	blx	r3
 800f374:	4603      	mov	r3, r0
 800f376:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f378:	7dfb      	ldrb	r3, [r7, #23]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d001      	beq.n	800f382 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f37e:	7dfb      	ldrb	r3, [r7, #23]
 800f380:	e000      	b.n	800f384 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f382:	2300      	movs	r3, #0
}
 800f384:	4618      	mov	r0, r3
 800f386:	3718      	adds	r7, #24
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}

0800f38c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b086      	sub	sp, #24
 800f390:	af00      	add	r7, sp, #0
 800f392:	60f8      	str	r0, [r7, #12]
 800f394:	460b      	mov	r3, r1
 800f396:	607a      	str	r2, [r7, #4]
 800f398:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f39a:	7afb      	ldrb	r3, [r7, #11]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d16b      	bne.n	800f478 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	3314      	adds	r3, #20
 800f3a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f3ac:	2b02      	cmp	r3, #2
 800f3ae:	d156      	bne.n	800f45e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	689a      	ldr	r2, [r3, #8]
 800f3b4:	693b      	ldr	r3, [r7, #16]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	429a      	cmp	r2, r3
 800f3ba:	d914      	bls.n	800f3e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	689a      	ldr	r2, [r3, #8]
 800f3c0:	693b      	ldr	r3, [r7, #16]
 800f3c2:	68db      	ldr	r3, [r3, #12]
 800f3c4:	1ad2      	subs	r2, r2, r3
 800f3c6:	693b      	ldr	r3, [r7, #16]
 800f3c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f3ca:	693b      	ldr	r3, [r7, #16]
 800f3cc:	689b      	ldr	r3, [r3, #8]
 800f3ce:	461a      	mov	r2, r3
 800f3d0:	6879      	ldr	r1, [r7, #4]
 800f3d2:	68f8      	ldr	r0, [r7, #12]
 800f3d4:	f000 ff3a 	bl	801024c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f3d8:	2300      	movs	r3, #0
 800f3da:	2200      	movs	r2, #0
 800f3dc:	2100      	movs	r1, #0
 800f3de:	68f8      	ldr	r0, [r7, #12]
 800f3e0:	f001 fc06 	bl	8010bf0 <USBD_LL_PrepareReceive>
 800f3e4:	e03b      	b.n	800f45e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	68da      	ldr	r2, [r3, #12]
 800f3ea:	693b      	ldr	r3, [r7, #16]
 800f3ec:	689b      	ldr	r3, [r3, #8]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	d11c      	bne.n	800f42c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f3f2:	693b      	ldr	r3, [r7, #16]
 800f3f4:	685a      	ldr	r2, [r3, #4]
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f3fa:	429a      	cmp	r2, r3
 800f3fc:	d316      	bcc.n	800f42c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	685a      	ldr	r2, [r3, #4]
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f408:	429a      	cmp	r2, r3
 800f40a:	d20f      	bcs.n	800f42c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f40c:	2200      	movs	r2, #0
 800f40e:	2100      	movs	r1, #0
 800f410:	68f8      	ldr	r0, [r7, #12]
 800f412:	f000 ff1b 	bl	801024c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	2200      	movs	r2, #0
 800f41a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f41e:	2300      	movs	r3, #0
 800f420:	2200      	movs	r2, #0
 800f422:	2100      	movs	r1, #0
 800f424:	68f8      	ldr	r0, [r7, #12]
 800f426:	f001 fbe3 	bl	8010bf0 <USBD_LL_PrepareReceive>
 800f42a:	e018      	b.n	800f45e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f432:	b2db      	uxtb	r3, r3
 800f434:	2b03      	cmp	r3, #3
 800f436:	d10b      	bne.n	800f450 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f43e:	68db      	ldr	r3, [r3, #12]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d005      	beq.n	800f450 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f44a:	68db      	ldr	r3, [r3, #12]
 800f44c:	68f8      	ldr	r0, [r7, #12]
 800f44e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f450:	2180      	movs	r1, #128	@ 0x80
 800f452:	68f8      	ldr	r0, [r7, #12]
 800f454:	f001 fb22 	bl	8010a9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f458:	68f8      	ldr	r0, [r7, #12]
 800f45a:	f000 ff49 	bl	80102f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f464:	2b01      	cmp	r3, #1
 800f466:	d122      	bne.n	800f4ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f468:	68f8      	ldr	r0, [r7, #12]
 800f46a:	f7ff fe98 	bl	800f19e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	2200      	movs	r2, #0
 800f472:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f476:	e01a      	b.n	800f4ae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f47e:	b2db      	uxtb	r3, r3
 800f480:	2b03      	cmp	r3, #3
 800f482:	d114      	bne.n	800f4ae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f48a:	695b      	ldr	r3, [r3, #20]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d00e      	beq.n	800f4ae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f496:	695b      	ldr	r3, [r3, #20]
 800f498:	7afa      	ldrb	r2, [r7, #11]
 800f49a:	4611      	mov	r1, r2
 800f49c:	68f8      	ldr	r0, [r7, #12]
 800f49e:	4798      	blx	r3
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f4a4:	7dfb      	ldrb	r3, [r7, #23]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d001      	beq.n	800f4ae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f4aa:	7dfb      	ldrb	r3, [r7, #23]
 800f4ac:	e000      	b.n	800f4b0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f4ae:	2300      	movs	r3, #0
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3718      	adds	r7, #24
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	2200      	movs	r2, #0
 800f4cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2200      	movs	r2, #0
 800f4da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d101      	bne.n	800f4ec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f4e8:	2303      	movs	r3, #3
 800f4ea:	e02f      	b.n	800f54c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d00f      	beq.n	800f516 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4fc:	685b      	ldr	r3, [r3, #4]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d009      	beq.n	800f516 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f508:	685b      	ldr	r3, [r3, #4]
 800f50a:	687a      	ldr	r2, [r7, #4]
 800f50c:	6852      	ldr	r2, [r2, #4]
 800f50e:	b2d2      	uxtb	r2, r2
 800f510:	4611      	mov	r1, r2
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f516:	2340      	movs	r3, #64	@ 0x40
 800f518:	2200      	movs	r2, #0
 800f51a:	2100      	movs	r1, #0
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f001 fa78 	bl	8010a12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2201      	movs	r2, #1
 800f526:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2240      	movs	r2, #64	@ 0x40
 800f52e:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f532:	2340      	movs	r3, #64	@ 0x40
 800f534:	2200      	movs	r2, #0
 800f536:	2180      	movs	r1, #128	@ 0x80
 800f538:	6878      	ldr	r0, [r7, #4]
 800f53a:	f001 fa6a 	bl	8010a12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	2201      	movs	r2, #1
 800f542:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2240      	movs	r2, #64	@ 0x40
 800f548:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f54a:	2300      	movs	r3, #0
}
 800f54c:	4618      	mov	r0, r3
 800f54e:	3708      	adds	r7, #8
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}

0800f554 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f554:	b480      	push	{r7}
 800f556:	b083      	sub	sp, #12
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	460b      	mov	r3, r1
 800f55e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	78fa      	ldrb	r2, [r7, #3]
 800f564:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f566:	2300      	movs	r3, #0
}
 800f568:	4618      	mov	r0, r3
 800f56a:	370c      	adds	r7, #12
 800f56c:	46bd      	mov	sp, r7
 800f56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f572:	4770      	bx	lr

0800f574 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f574:	b480      	push	{r7}
 800f576:	b083      	sub	sp, #12
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f582:	b2da      	uxtb	r2, r3
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	2204      	movs	r2, #4
 800f58e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f592:	2300      	movs	r3, #0
}
 800f594:	4618      	mov	r0, r3
 800f596:	370c      	adds	r7, #12
 800f598:	46bd      	mov	sp, r7
 800f59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f59e:	4770      	bx	lr

0800f5a0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f5a0:	b480      	push	{r7}
 800f5a2:	b083      	sub	sp, #12
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	2b04      	cmp	r3, #4
 800f5b2:	d106      	bne.n	800f5c2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f5ba:	b2da      	uxtb	r2, r3
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f5c2:	2300      	movs	r3, #0
}
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d101      	bne.n	800f5e6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f5e2:	2303      	movs	r3, #3
 800f5e4:	e012      	b.n	800f60c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5ec:	b2db      	uxtb	r3, r3
 800f5ee:	2b03      	cmp	r3, #3
 800f5f0:	d10b      	bne.n	800f60a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5f8:	69db      	ldr	r3, [r3, #28]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d005      	beq.n	800f60a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f604:	69db      	ldr	r3, [r3, #28]
 800f606:	6878      	ldr	r0, [r7, #4]
 800f608:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f60a:	2300      	movs	r3, #0
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3708      	adds	r7, #8
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f614:	b480      	push	{r7}
 800f616:	b087      	sub	sp, #28
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f620:	697b      	ldr	r3, [r7, #20]
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	3301      	adds	r3, #1
 800f62a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f62c:	697b      	ldr	r3, [r7, #20]
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f632:	8a3b      	ldrh	r3, [r7, #16]
 800f634:	021b      	lsls	r3, r3, #8
 800f636:	b21a      	sxth	r2, r3
 800f638:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f63c:	4313      	orrs	r3, r2
 800f63e:	b21b      	sxth	r3, r3
 800f640:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f642:	89fb      	ldrh	r3, [r7, #14]
}
 800f644:	4618      	mov	r0, r3
 800f646:	371c      	adds	r7, #28
 800f648:	46bd      	mov	sp, r7
 800f64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f64e:	4770      	bx	lr

0800f650 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b084      	sub	sp, #16
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
 800f658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f65a:	2300      	movs	r3, #0
 800f65c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f65e:	683b      	ldr	r3, [r7, #0]
 800f660:	781b      	ldrb	r3, [r3, #0]
 800f662:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f666:	2b40      	cmp	r3, #64	@ 0x40
 800f668:	d005      	beq.n	800f676 <USBD_StdDevReq+0x26>
 800f66a:	2b40      	cmp	r3, #64	@ 0x40
 800f66c:	d853      	bhi.n	800f716 <USBD_StdDevReq+0xc6>
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d00b      	beq.n	800f68a <USBD_StdDevReq+0x3a>
 800f672:	2b20      	cmp	r3, #32
 800f674:	d14f      	bne.n	800f716 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f67c:	689b      	ldr	r3, [r3, #8]
 800f67e:	6839      	ldr	r1, [r7, #0]
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	4798      	blx	r3
 800f684:	4603      	mov	r3, r0
 800f686:	73fb      	strb	r3, [r7, #15]
      break;
 800f688:	e04a      	b.n	800f720 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	785b      	ldrb	r3, [r3, #1]
 800f68e:	2b09      	cmp	r3, #9
 800f690:	d83b      	bhi.n	800f70a <USBD_StdDevReq+0xba>
 800f692:	a201      	add	r2, pc, #4	@ (adr r2, 800f698 <USBD_StdDevReq+0x48>)
 800f694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f698:	0800f6ed 	.word	0x0800f6ed
 800f69c:	0800f701 	.word	0x0800f701
 800f6a0:	0800f70b 	.word	0x0800f70b
 800f6a4:	0800f6f7 	.word	0x0800f6f7
 800f6a8:	0800f70b 	.word	0x0800f70b
 800f6ac:	0800f6cb 	.word	0x0800f6cb
 800f6b0:	0800f6c1 	.word	0x0800f6c1
 800f6b4:	0800f70b 	.word	0x0800f70b
 800f6b8:	0800f6e3 	.word	0x0800f6e3
 800f6bc:	0800f6d5 	.word	0x0800f6d5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f6c0:	6839      	ldr	r1, [r7, #0]
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 f9de 	bl	800fa84 <USBD_GetDescriptor>
          break;
 800f6c8:	e024      	b.n	800f714 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f6ca:	6839      	ldr	r1, [r7, #0]
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f000 fb6d 	bl	800fdac <USBD_SetAddress>
          break;
 800f6d2:	e01f      	b.n	800f714 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f6d4:	6839      	ldr	r1, [r7, #0]
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f000 fbac 	bl	800fe34 <USBD_SetConfig>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	73fb      	strb	r3, [r7, #15]
          break;
 800f6e0:	e018      	b.n	800f714 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f6e2:	6839      	ldr	r1, [r7, #0]
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f000 fc4b 	bl	800ff80 <USBD_GetConfig>
          break;
 800f6ea:	e013      	b.n	800f714 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f6ec:	6839      	ldr	r1, [r7, #0]
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 fc7c 	bl	800ffec <USBD_GetStatus>
          break;
 800f6f4:	e00e      	b.n	800f714 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f6f6:	6839      	ldr	r1, [r7, #0]
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f000 fcab 	bl	8010054 <USBD_SetFeature>
          break;
 800f6fe:	e009      	b.n	800f714 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f700:	6839      	ldr	r1, [r7, #0]
 800f702:	6878      	ldr	r0, [r7, #4]
 800f704:	f000 fcba 	bl	801007c <USBD_ClrFeature>
          break;
 800f708:	e004      	b.n	800f714 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f70a:	6839      	ldr	r1, [r7, #0]
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f000 fd11 	bl	8010134 <USBD_CtlError>
          break;
 800f712:	bf00      	nop
      }
      break;
 800f714:	e004      	b.n	800f720 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f716:	6839      	ldr	r1, [r7, #0]
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f000 fd0b 	bl	8010134 <USBD_CtlError>
      break;
 800f71e:	bf00      	nop
  }

  return ret;
 800f720:	7bfb      	ldrb	r3, [r7, #15]
}
 800f722:	4618      	mov	r0, r3
 800f724:	3710      	adds	r7, #16
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}
 800f72a:	bf00      	nop

0800f72c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f736:	2300      	movs	r3, #0
 800f738:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f73a:	683b      	ldr	r3, [r7, #0]
 800f73c:	781b      	ldrb	r3, [r3, #0]
 800f73e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f742:	2b40      	cmp	r3, #64	@ 0x40
 800f744:	d005      	beq.n	800f752 <USBD_StdItfReq+0x26>
 800f746:	2b40      	cmp	r3, #64	@ 0x40
 800f748:	d82f      	bhi.n	800f7aa <USBD_StdItfReq+0x7e>
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d001      	beq.n	800f752 <USBD_StdItfReq+0x26>
 800f74e:	2b20      	cmp	r3, #32
 800f750:	d12b      	bne.n	800f7aa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f758:	b2db      	uxtb	r3, r3
 800f75a:	3b01      	subs	r3, #1
 800f75c:	2b02      	cmp	r3, #2
 800f75e:	d81d      	bhi.n	800f79c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f760:	683b      	ldr	r3, [r7, #0]
 800f762:	889b      	ldrh	r3, [r3, #4]
 800f764:	b2db      	uxtb	r3, r3
 800f766:	2b01      	cmp	r3, #1
 800f768:	d813      	bhi.n	800f792 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f770:	689b      	ldr	r3, [r3, #8]
 800f772:	6839      	ldr	r1, [r7, #0]
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	4798      	blx	r3
 800f778:	4603      	mov	r3, r0
 800f77a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	88db      	ldrh	r3, [r3, #6]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d110      	bne.n	800f7a6 <USBD_StdItfReq+0x7a>
 800f784:	7bfb      	ldrb	r3, [r7, #15]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d10d      	bne.n	800f7a6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f000 fd9d 	bl	80102ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f790:	e009      	b.n	800f7a6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f792:	6839      	ldr	r1, [r7, #0]
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f000 fccd 	bl	8010134 <USBD_CtlError>
          break;
 800f79a:	e004      	b.n	800f7a6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f79c:	6839      	ldr	r1, [r7, #0]
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f000 fcc8 	bl	8010134 <USBD_CtlError>
          break;
 800f7a4:	e000      	b.n	800f7a8 <USBD_StdItfReq+0x7c>
          break;
 800f7a6:	bf00      	nop
      }
      break;
 800f7a8:	e004      	b.n	800f7b4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f7aa:	6839      	ldr	r1, [r7, #0]
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f000 fcc1 	bl	8010134 <USBD_CtlError>
      break;
 800f7b2:	bf00      	nop
  }

  return ret;
 800f7b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	3710      	adds	r7, #16
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}

0800f7be <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7be:	b580      	push	{r7, lr}
 800f7c0:	b084      	sub	sp, #16
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
 800f7c6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	889b      	ldrh	r3, [r3, #4]
 800f7d0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f7da:	2b40      	cmp	r3, #64	@ 0x40
 800f7dc:	d007      	beq.n	800f7ee <USBD_StdEPReq+0x30>
 800f7de:	2b40      	cmp	r3, #64	@ 0x40
 800f7e0:	f200 8145 	bhi.w	800fa6e <USBD_StdEPReq+0x2b0>
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d00c      	beq.n	800f802 <USBD_StdEPReq+0x44>
 800f7e8:	2b20      	cmp	r3, #32
 800f7ea:	f040 8140 	bne.w	800fa6e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7f4:	689b      	ldr	r3, [r3, #8]
 800f7f6:	6839      	ldr	r1, [r7, #0]
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	4798      	blx	r3
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800f800:	e13a      	b.n	800fa78 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	785b      	ldrb	r3, [r3, #1]
 800f806:	2b03      	cmp	r3, #3
 800f808:	d007      	beq.n	800f81a <USBD_StdEPReq+0x5c>
 800f80a:	2b03      	cmp	r3, #3
 800f80c:	f300 8129 	bgt.w	800fa62 <USBD_StdEPReq+0x2a4>
 800f810:	2b00      	cmp	r3, #0
 800f812:	d07f      	beq.n	800f914 <USBD_StdEPReq+0x156>
 800f814:	2b01      	cmp	r3, #1
 800f816:	d03c      	beq.n	800f892 <USBD_StdEPReq+0xd4>
 800f818:	e123      	b.n	800fa62 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f820:	b2db      	uxtb	r3, r3
 800f822:	2b02      	cmp	r3, #2
 800f824:	d002      	beq.n	800f82c <USBD_StdEPReq+0x6e>
 800f826:	2b03      	cmp	r3, #3
 800f828:	d016      	beq.n	800f858 <USBD_StdEPReq+0x9a>
 800f82a:	e02c      	b.n	800f886 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f82c:	7bbb      	ldrb	r3, [r7, #14]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d00d      	beq.n	800f84e <USBD_StdEPReq+0x90>
 800f832:	7bbb      	ldrb	r3, [r7, #14]
 800f834:	2b80      	cmp	r3, #128	@ 0x80
 800f836:	d00a      	beq.n	800f84e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f838:	7bbb      	ldrb	r3, [r7, #14]
 800f83a:	4619      	mov	r1, r3
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f001 f92d 	bl	8010a9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f842:	2180      	movs	r1, #128	@ 0x80
 800f844:	6878      	ldr	r0, [r7, #4]
 800f846:	f001 f929 	bl	8010a9c <USBD_LL_StallEP>
 800f84a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f84c:	e020      	b.n	800f890 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f84e:	6839      	ldr	r1, [r7, #0]
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f000 fc6f 	bl	8010134 <USBD_CtlError>
              break;
 800f856:	e01b      	b.n	800f890 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	885b      	ldrh	r3, [r3, #2]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d10e      	bne.n	800f87e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f860:	7bbb      	ldrb	r3, [r7, #14]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d00b      	beq.n	800f87e <USBD_StdEPReq+0xc0>
 800f866:	7bbb      	ldrb	r3, [r7, #14]
 800f868:	2b80      	cmp	r3, #128	@ 0x80
 800f86a:	d008      	beq.n	800f87e <USBD_StdEPReq+0xc0>
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	88db      	ldrh	r3, [r3, #6]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d104      	bne.n	800f87e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f874:	7bbb      	ldrb	r3, [r7, #14]
 800f876:	4619      	mov	r1, r3
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f001 f90f 	bl	8010a9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f000 fd23 	bl	80102ca <USBD_CtlSendStatus>

              break;
 800f884:	e004      	b.n	800f890 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f886:	6839      	ldr	r1, [r7, #0]
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 fc53 	bl	8010134 <USBD_CtlError>
              break;
 800f88e:	bf00      	nop
          }
          break;
 800f890:	e0ec      	b.n	800fa6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f898:	b2db      	uxtb	r3, r3
 800f89a:	2b02      	cmp	r3, #2
 800f89c:	d002      	beq.n	800f8a4 <USBD_StdEPReq+0xe6>
 800f89e:	2b03      	cmp	r3, #3
 800f8a0:	d016      	beq.n	800f8d0 <USBD_StdEPReq+0x112>
 800f8a2:	e030      	b.n	800f906 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f8a4:	7bbb      	ldrb	r3, [r7, #14]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00d      	beq.n	800f8c6 <USBD_StdEPReq+0x108>
 800f8aa:	7bbb      	ldrb	r3, [r7, #14]
 800f8ac:	2b80      	cmp	r3, #128	@ 0x80
 800f8ae:	d00a      	beq.n	800f8c6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f8b0:	7bbb      	ldrb	r3, [r7, #14]
 800f8b2:	4619      	mov	r1, r3
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f001 f8f1 	bl	8010a9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f8ba:	2180      	movs	r1, #128	@ 0x80
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f001 f8ed 	bl	8010a9c <USBD_LL_StallEP>
 800f8c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f8c4:	e025      	b.n	800f912 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f8c6:	6839      	ldr	r1, [r7, #0]
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f000 fc33 	bl	8010134 <USBD_CtlError>
              break;
 800f8ce:	e020      	b.n	800f912 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f8d0:	683b      	ldr	r3, [r7, #0]
 800f8d2:	885b      	ldrh	r3, [r3, #2]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d11b      	bne.n	800f910 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f8d8:	7bbb      	ldrb	r3, [r7, #14]
 800f8da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d004      	beq.n	800f8ec <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f8e2:	7bbb      	ldrb	r3, [r7, #14]
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f001 f8f7 	bl	8010ada <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f000 fcec 	bl	80102ca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8f8:	689b      	ldr	r3, [r3, #8]
 800f8fa:	6839      	ldr	r1, [r7, #0]
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	4798      	blx	r3
 800f900:	4603      	mov	r3, r0
 800f902:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f904:	e004      	b.n	800f910 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f906:	6839      	ldr	r1, [r7, #0]
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 fc13 	bl	8010134 <USBD_CtlError>
              break;
 800f90e:	e000      	b.n	800f912 <USBD_StdEPReq+0x154>
              break;
 800f910:	bf00      	nop
          }
          break;
 800f912:	e0ab      	b.n	800fa6c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	2b02      	cmp	r3, #2
 800f91e:	d002      	beq.n	800f926 <USBD_StdEPReq+0x168>
 800f920:	2b03      	cmp	r3, #3
 800f922:	d032      	beq.n	800f98a <USBD_StdEPReq+0x1cc>
 800f924:	e097      	b.n	800fa56 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f926:	7bbb      	ldrb	r3, [r7, #14]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d007      	beq.n	800f93c <USBD_StdEPReq+0x17e>
 800f92c:	7bbb      	ldrb	r3, [r7, #14]
 800f92e:	2b80      	cmp	r3, #128	@ 0x80
 800f930:	d004      	beq.n	800f93c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f932:	6839      	ldr	r1, [r7, #0]
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f000 fbfd 	bl	8010134 <USBD_CtlError>
                break;
 800f93a:	e091      	b.n	800fa60 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f93c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f940:	2b00      	cmp	r3, #0
 800f942:	da0b      	bge.n	800f95c <USBD_StdEPReq+0x19e>
 800f944:	7bbb      	ldrb	r3, [r7, #14]
 800f946:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f94a:	4613      	mov	r3, r2
 800f94c:	009b      	lsls	r3, r3, #2
 800f94e:	4413      	add	r3, r2
 800f950:	009b      	lsls	r3, r3, #2
 800f952:	3310      	adds	r3, #16
 800f954:	687a      	ldr	r2, [r7, #4]
 800f956:	4413      	add	r3, r2
 800f958:	3304      	adds	r3, #4
 800f95a:	e00b      	b.n	800f974 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f95c:	7bbb      	ldrb	r3, [r7, #14]
 800f95e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f962:	4613      	mov	r3, r2
 800f964:	009b      	lsls	r3, r3, #2
 800f966:	4413      	add	r3, r2
 800f968:	009b      	lsls	r3, r3, #2
 800f96a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	4413      	add	r3, r2
 800f972:	3304      	adds	r3, #4
 800f974:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	2200      	movs	r2, #0
 800f97a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f97c:	68bb      	ldr	r3, [r7, #8]
 800f97e:	2202      	movs	r2, #2
 800f980:	4619      	mov	r1, r3
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f000 fc47 	bl	8010216 <USBD_CtlSendData>
              break;
 800f988:	e06a      	b.n	800fa60 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f98a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	da11      	bge.n	800f9b6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f992:	7bbb      	ldrb	r3, [r7, #14]
 800f994:	f003 020f 	and.w	r2, r3, #15
 800f998:	6879      	ldr	r1, [r7, #4]
 800f99a:	4613      	mov	r3, r2
 800f99c:	009b      	lsls	r3, r3, #2
 800f99e:	4413      	add	r3, r2
 800f9a0:	009b      	lsls	r3, r3, #2
 800f9a2:	440b      	add	r3, r1
 800f9a4:	3324      	adds	r3, #36	@ 0x24
 800f9a6:	881b      	ldrh	r3, [r3, #0]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d117      	bne.n	800f9dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f9ac:	6839      	ldr	r1, [r7, #0]
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 fbc0 	bl	8010134 <USBD_CtlError>
                  break;
 800f9b4:	e054      	b.n	800fa60 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f9b6:	7bbb      	ldrb	r3, [r7, #14]
 800f9b8:	f003 020f 	and.w	r2, r3, #15
 800f9bc:	6879      	ldr	r1, [r7, #4]
 800f9be:	4613      	mov	r3, r2
 800f9c0:	009b      	lsls	r3, r3, #2
 800f9c2:	4413      	add	r3, r2
 800f9c4:	009b      	lsls	r3, r3, #2
 800f9c6:	440b      	add	r3, r1
 800f9c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f9cc:	881b      	ldrh	r3, [r3, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d104      	bne.n	800f9dc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f9d2:	6839      	ldr	r1, [r7, #0]
 800f9d4:	6878      	ldr	r0, [r7, #4]
 800f9d6:	f000 fbad 	bl	8010134 <USBD_CtlError>
                  break;
 800f9da:	e041      	b.n	800fa60 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f9dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	da0b      	bge.n	800f9fc <USBD_StdEPReq+0x23e>
 800f9e4:	7bbb      	ldrb	r3, [r7, #14]
 800f9e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	009b      	lsls	r3, r3, #2
 800f9ee:	4413      	add	r3, r2
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	3310      	adds	r3, #16
 800f9f4:	687a      	ldr	r2, [r7, #4]
 800f9f6:	4413      	add	r3, r2
 800f9f8:	3304      	adds	r3, #4
 800f9fa:	e00b      	b.n	800fa14 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f9fc:	7bbb      	ldrb	r3, [r7, #14]
 800f9fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa02:	4613      	mov	r3, r2
 800fa04:	009b      	lsls	r3, r3, #2
 800fa06:	4413      	add	r3, r2
 800fa08:	009b      	lsls	r3, r3, #2
 800fa0a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fa0e:	687a      	ldr	r2, [r7, #4]
 800fa10:	4413      	add	r3, r2
 800fa12:	3304      	adds	r3, #4
 800fa14:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fa16:	7bbb      	ldrb	r3, [r7, #14]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d002      	beq.n	800fa22 <USBD_StdEPReq+0x264>
 800fa1c:	7bbb      	ldrb	r3, [r7, #14]
 800fa1e:	2b80      	cmp	r3, #128	@ 0x80
 800fa20:	d103      	bne.n	800fa2a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	2200      	movs	r2, #0
 800fa26:	601a      	str	r2, [r3, #0]
 800fa28:	e00e      	b.n	800fa48 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fa2a:	7bbb      	ldrb	r3, [r7, #14]
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f001 f872 	bl	8010b18 <USBD_LL_IsStallEP>
 800fa34:	4603      	mov	r3, r0
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d003      	beq.n	800fa42 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	601a      	str	r2, [r3, #0]
 800fa40:	e002      	b.n	800fa48 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	2200      	movs	r2, #0
 800fa46:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	2202      	movs	r2, #2
 800fa4c:	4619      	mov	r1, r3
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f000 fbe1 	bl	8010216 <USBD_CtlSendData>
              break;
 800fa54:	e004      	b.n	800fa60 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800fa56:	6839      	ldr	r1, [r7, #0]
 800fa58:	6878      	ldr	r0, [r7, #4]
 800fa5a:	f000 fb6b 	bl	8010134 <USBD_CtlError>
              break;
 800fa5e:	bf00      	nop
          }
          break;
 800fa60:	e004      	b.n	800fa6c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800fa62:	6839      	ldr	r1, [r7, #0]
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 fb65 	bl	8010134 <USBD_CtlError>
          break;
 800fa6a:	bf00      	nop
      }
      break;
 800fa6c:	e004      	b.n	800fa78 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800fa6e:	6839      	ldr	r1, [r7, #0]
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	f000 fb5f 	bl	8010134 <USBD_CtlError>
      break;
 800fa76:	bf00      	nop
  }

  return ret;
 800fa78:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3710      	adds	r7, #16
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
	...

0800fa84 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b084      	sub	sp, #16
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fa8e:	2300      	movs	r3, #0
 800fa90:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fa92:	2300      	movs	r3, #0
 800fa94:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fa96:	2300      	movs	r3, #0
 800fa98:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	885b      	ldrh	r3, [r3, #2]
 800fa9e:	0a1b      	lsrs	r3, r3, #8
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	3b01      	subs	r3, #1
 800faa4:	2b0e      	cmp	r3, #14
 800faa6:	f200 8152 	bhi.w	800fd4e <USBD_GetDescriptor+0x2ca>
 800faaa:	a201      	add	r2, pc, #4	@ (adr r2, 800fab0 <USBD_GetDescriptor+0x2c>)
 800faac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab0:	0800fb21 	.word	0x0800fb21
 800fab4:	0800fb39 	.word	0x0800fb39
 800fab8:	0800fb79 	.word	0x0800fb79
 800fabc:	0800fd4f 	.word	0x0800fd4f
 800fac0:	0800fd4f 	.word	0x0800fd4f
 800fac4:	0800fcef 	.word	0x0800fcef
 800fac8:	0800fd1b 	.word	0x0800fd1b
 800facc:	0800fd4f 	.word	0x0800fd4f
 800fad0:	0800fd4f 	.word	0x0800fd4f
 800fad4:	0800fd4f 	.word	0x0800fd4f
 800fad8:	0800fd4f 	.word	0x0800fd4f
 800fadc:	0800fd4f 	.word	0x0800fd4f
 800fae0:	0800fd4f 	.word	0x0800fd4f
 800fae4:	0800fd4f 	.word	0x0800fd4f
 800fae8:	0800faed 	.word	0x0800faed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800faf2:	69db      	ldr	r3, [r3, #28]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d00b      	beq.n	800fb10 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fafe:	69db      	ldr	r3, [r3, #28]
 800fb00:	687a      	ldr	r2, [r7, #4]
 800fb02:	7c12      	ldrb	r2, [r2, #16]
 800fb04:	f107 0108 	add.w	r1, r7, #8
 800fb08:	4610      	mov	r0, r2
 800fb0a:	4798      	blx	r3
 800fb0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb0e:	e126      	b.n	800fd5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fb10:	6839      	ldr	r1, [r7, #0]
 800fb12:	6878      	ldr	r0, [r7, #4]
 800fb14:	f000 fb0e 	bl	8010134 <USBD_CtlError>
        err++;
 800fb18:	7afb      	ldrb	r3, [r7, #11]
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	72fb      	strb	r3, [r7, #11]
      break;
 800fb1e:	e11e      	b.n	800fd5e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	687a      	ldr	r2, [r7, #4]
 800fb2a:	7c12      	ldrb	r2, [r2, #16]
 800fb2c:	f107 0108 	add.w	r1, r7, #8
 800fb30:	4610      	mov	r0, r2
 800fb32:	4798      	blx	r3
 800fb34:	60f8      	str	r0, [r7, #12]
      break;
 800fb36:	e112      	b.n	800fd5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	7c1b      	ldrb	r3, [r3, #16]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d10d      	bne.n	800fb5c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb48:	f107 0208 	add.w	r2, r7, #8
 800fb4c:	4610      	mov	r0, r2
 800fb4e:	4798      	blx	r3
 800fb50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	3301      	adds	r3, #1
 800fb56:	2202      	movs	r2, #2
 800fb58:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fb5a:	e100      	b.n	800fd5e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb64:	f107 0208 	add.w	r2, r7, #8
 800fb68:	4610      	mov	r0, r2
 800fb6a:	4798      	blx	r3
 800fb6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	3301      	adds	r3, #1
 800fb72:	2202      	movs	r2, #2
 800fb74:	701a      	strb	r2, [r3, #0]
      break;
 800fb76:	e0f2      	b.n	800fd5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	885b      	ldrh	r3, [r3, #2]
 800fb7c:	b2db      	uxtb	r3, r3
 800fb7e:	2b05      	cmp	r3, #5
 800fb80:	f200 80ac 	bhi.w	800fcdc <USBD_GetDescriptor+0x258>
 800fb84:	a201      	add	r2, pc, #4	@ (adr r2, 800fb8c <USBD_GetDescriptor+0x108>)
 800fb86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb8a:	bf00      	nop
 800fb8c:	0800fba5 	.word	0x0800fba5
 800fb90:	0800fbd9 	.word	0x0800fbd9
 800fb94:	0800fc0d 	.word	0x0800fc0d
 800fb98:	0800fc41 	.word	0x0800fc41
 800fb9c:	0800fc75 	.word	0x0800fc75
 800fba0:	0800fca9 	.word	0x0800fca9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d00b      	beq.n	800fbc8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbb6:	685b      	ldr	r3, [r3, #4]
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	7c12      	ldrb	r2, [r2, #16]
 800fbbc:	f107 0108 	add.w	r1, r7, #8
 800fbc0:	4610      	mov	r0, r2
 800fbc2:	4798      	blx	r3
 800fbc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbc6:	e091      	b.n	800fcec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fbc8:	6839      	ldr	r1, [r7, #0]
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f000 fab2 	bl	8010134 <USBD_CtlError>
            err++;
 800fbd0:	7afb      	ldrb	r3, [r7, #11]
 800fbd2:	3301      	adds	r3, #1
 800fbd4:	72fb      	strb	r3, [r7, #11]
          break;
 800fbd6:	e089      	b.n	800fcec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbde:	689b      	ldr	r3, [r3, #8]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d00b      	beq.n	800fbfc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbea:	689b      	ldr	r3, [r3, #8]
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	7c12      	ldrb	r2, [r2, #16]
 800fbf0:	f107 0108 	add.w	r1, r7, #8
 800fbf4:	4610      	mov	r0, r2
 800fbf6:	4798      	blx	r3
 800fbf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbfa:	e077      	b.n	800fcec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fbfc:	6839      	ldr	r1, [r7, #0]
 800fbfe:	6878      	ldr	r0, [r7, #4]
 800fc00:	f000 fa98 	bl	8010134 <USBD_CtlError>
            err++;
 800fc04:	7afb      	ldrb	r3, [r7, #11]
 800fc06:	3301      	adds	r3, #1
 800fc08:	72fb      	strb	r3, [r7, #11]
          break;
 800fc0a:	e06f      	b.n	800fcec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc12:	68db      	ldr	r3, [r3, #12]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d00b      	beq.n	800fc30 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc1e:	68db      	ldr	r3, [r3, #12]
 800fc20:	687a      	ldr	r2, [r7, #4]
 800fc22:	7c12      	ldrb	r2, [r2, #16]
 800fc24:	f107 0108 	add.w	r1, r7, #8
 800fc28:	4610      	mov	r0, r2
 800fc2a:	4798      	blx	r3
 800fc2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc2e:	e05d      	b.n	800fcec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc30:	6839      	ldr	r1, [r7, #0]
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f000 fa7e 	bl	8010134 <USBD_CtlError>
            err++;
 800fc38:	7afb      	ldrb	r3, [r7, #11]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	72fb      	strb	r3, [r7, #11]
          break;
 800fc3e:	e055      	b.n	800fcec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc46:	691b      	ldr	r3, [r3, #16]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d00b      	beq.n	800fc64 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc52:	691b      	ldr	r3, [r3, #16]
 800fc54:	687a      	ldr	r2, [r7, #4]
 800fc56:	7c12      	ldrb	r2, [r2, #16]
 800fc58:	f107 0108 	add.w	r1, r7, #8
 800fc5c:	4610      	mov	r0, r2
 800fc5e:	4798      	blx	r3
 800fc60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc62:	e043      	b.n	800fcec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc64:	6839      	ldr	r1, [r7, #0]
 800fc66:	6878      	ldr	r0, [r7, #4]
 800fc68:	f000 fa64 	bl	8010134 <USBD_CtlError>
            err++;
 800fc6c:	7afb      	ldrb	r3, [r7, #11]
 800fc6e:	3301      	adds	r3, #1
 800fc70:	72fb      	strb	r3, [r7, #11]
          break;
 800fc72:	e03b      	b.n	800fcec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc7a:	695b      	ldr	r3, [r3, #20]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d00b      	beq.n	800fc98 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc86:	695b      	ldr	r3, [r3, #20]
 800fc88:	687a      	ldr	r2, [r7, #4]
 800fc8a:	7c12      	ldrb	r2, [r2, #16]
 800fc8c:	f107 0108 	add.w	r1, r7, #8
 800fc90:	4610      	mov	r0, r2
 800fc92:	4798      	blx	r3
 800fc94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc96:	e029      	b.n	800fcec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc98:	6839      	ldr	r1, [r7, #0]
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f000 fa4a 	bl	8010134 <USBD_CtlError>
            err++;
 800fca0:	7afb      	ldrb	r3, [r7, #11]
 800fca2:	3301      	adds	r3, #1
 800fca4:	72fb      	strb	r3, [r7, #11]
          break;
 800fca6:	e021      	b.n	800fcec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fcae:	699b      	ldr	r3, [r3, #24]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d00b      	beq.n	800fccc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fcba:	699b      	ldr	r3, [r3, #24]
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	7c12      	ldrb	r2, [r2, #16]
 800fcc0:	f107 0108 	add.w	r1, r7, #8
 800fcc4:	4610      	mov	r0, r2
 800fcc6:	4798      	blx	r3
 800fcc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcca:	e00f      	b.n	800fcec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fccc:	6839      	ldr	r1, [r7, #0]
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f000 fa30 	bl	8010134 <USBD_CtlError>
            err++;
 800fcd4:	7afb      	ldrb	r3, [r7, #11]
 800fcd6:	3301      	adds	r3, #1
 800fcd8:	72fb      	strb	r3, [r7, #11]
          break;
 800fcda:	e007      	b.n	800fcec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fcdc:	6839      	ldr	r1, [r7, #0]
 800fcde:	6878      	ldr	r0, [r7, #4]
 800fce0:	f000 fa28 	bl	8010134 <USBD_CtlError>
          err++;
 800fce4:	7afb      	ldrb	r3, [r7, #11]
 800fce6:	3301      	adds	r3, #1
 800fce8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800fcea:	bf00      	nop
      }
      break;
 800fcec:	e037      	b.n	800fd5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	7c1b      	ldrb	r3, [r3, #16]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d109      	bne.n	800fd0a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fcfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fcfe:	f107 0208 	add.w	r2, r7, #8
 800fd02:	4610      	mov	r0, r2
 800fd04:	4798      	blx	r3
 800fd06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd08:	e029      	b.n	800fd5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fd0a:	6839      	ldr	r1, [r7, #0]
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f000 fa11 	bl	8010134 <USBD_CtlError>
        err++;
 800fd12:	7afb      	ldrb	r3, [r7, #11]
 800fd14:	3301      	adds	r3, #1
 800fd16:	72fb      	strb	r3, [r7, #11]
      break;
 800fd18:	e021      	b.n	800fd5e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	7c1b      	ldrb	r3, [r3, #16]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d10d      	bne.n	800fd3e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd2a:	f107 0208 	add.w	r2, r7, #8
 800fd2e:	4610      	mov	r0, r2
 800fd30:	4798      	blx	r3
 800fd32:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	3301      	adds	r3, #1
 800fd38:	2207      	movs	r2, #7
 800fd3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd3c:	e00f      	b.n	800fd5e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fd3e:	6839      	ldr	r1, [r7, #0]
 800fd40:	6878      	ldr	r0, [r7, #4]
 800fd42:	f000 f9f7 	bl	8010134 <USBD_CtlError>
        err++;
 800fd46:	7afb      	ldrb	r3, [r7, #11]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	72fb      	strb	r3, [r7, #11]
      break;
 800fd4c:	e007      	b.n	800fd5e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fd4e:	6839      	ldr	r1, [r7, #0]
 800fd50:	6878      	ldr	r0, [r7, #4]
 800fd52:	f000 f9ef 	bl	8010134 <USBD_CtlError>
      err++;
 800fd56:	7afb      	ldrb	r3, [r7, #11]
 800fd58:	3301      	adds	r3, #1
 800fd5a:	72fb      	strb	r3, [r7, #11]
      break;
 800fd5c:	bf00      	nop
  }

  if (err != 0U)
 800fd5e:	7afb      	ldrb	r3, [r7, #11]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d11e      	bne.n	800fda2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	88db      	ldrh	r3, [r3, #6]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d016      	beq.n	800fd9a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fd6c:	893b      	ldrh	r3, [r7, #8]
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d00e      	beq.n	800fd90 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	88da      	ldrh	r2, [r3, #6]
 800fd76:	893b      	ldrh	r3, [r7, #8]
 800fd78:	4293      	cmp	r3, r2
 800fd7a:	bf28      	it	cs
 800fd7c:	4613      	movcs	r3, r2
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fd82:	893b      	ldrh	r3, [r7, #8]
 800fd84:	461a      	mov	r2, r3
 800fd86:	68f9      	ldr	r1, [r7, #12]
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f000 fa44 	bl	8010216 <USBD_CtlSendData>
 800fd8e:	e009      	b.n	800fda4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fd90:	6839      	ldr	r1, [r7, #0]
 800fd92:	6878      	ldr	r0, [r7, #4]
 800fd94:	f000 f9ce 	bl	8010134 <USBD_CtlError>
 800fd98:	e004      	b.n	800fda4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 fa95 	bl	80102ca <USBD_CtlSendStatus>
 800fda0:	e000      	b.n	800fda4 <USBD_GetDescriptor+0x320>
    return;
 800fda2:	bf00      	nop
  }
}
 800fda4:	3710      	adds	r7, #16
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}
 800fdaa:	bf00      	nop

0800fdac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	889b      	ldrh	r3, [r3, #4]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d131      	bne.n	800fe22 <USBD_SetAddress+0x76>
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	88db      	ldrh	r3, [r3, #6]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d12d      	bne.n	800fe22 <USBD_SetAddress+0x76>
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	885b      	ldrh	r3, [r3, #2]
 800fdca:	2b7f      	cmp	r3, #127	@ 0x7f
 800fdcc:	d829      	bhi.n	800fe22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	885b      	ldrh	r3, [r3, #2]
 800fdd2:	b2db      	uxtb	r3, r3
 800fdd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fdd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	2b03      	cmp	r3, #3
 800fde4:	d104      	bne.n	800fdf0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fde6:	6839      	ldr	r1, [r7, #0]
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f000 f9a3 	bl	8010134 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdee:	e01d      	b.n	800fe2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	7bfa      	ldrb	r2, [r7, #15]
 800fdf4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fdf8:	7bfb      	ldrb	r3, [r7, #15]
 800fdfa:	4619      	mov	r1, r3
 800fdfc:	6878      	ldr	r0, [r7, #4]
 800fdfe:	f000 feb7 	bl	8010b70 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 fa61 	bl	80102ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fe08:	7bfb      	ldrb	r3, [r7, #15]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d004      	beq.n	800fe18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2202      	movs	r2, #2
 800fe12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe16:	e009      	b.n	800fe2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2201      	movs	r2, #1
 800fe1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe20:	e004      	b.n	800fe2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fe22:	6839      	ldr	r1, [r7, #0]
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f000 f985 	bl	8010134 <USBD_CtlError>
  }
}
 800fe2a:	bf00      	nop
 800fe2c:	bf00      	nop
 800fe2e:	3710      	adds	r7, #16
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}

0800fe34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b084      	sub	sp, #16
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	885b      	ldrh	r3, [r3, #2]
 800fe46:	b2da      	uxtb	r2, r3
 800fe48:	4b4c      	ldr	r3, [pc, #304]	@ (800ff7c <USBD_SetConfig+0x148>)
 800fe4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fe4c:	4b4b      	ldr	r3, [pc, #300]	@ (800ff7c <USBD_SetConfig+0x148>)
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d905      	bls.n	800fe60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fe54:	6839      	ldr	r1, [r7, #0]
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f000 f96c 	bl	8010134 <USBD_CtlError>
    return USBD_FAIL;
 800fe5c:	2303      	movs	r3, #3
 800fe5e:	e088      	b.n	800ff72 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe66:	b2db      	uxtb	r3, r3
 800fe68:	2b02      	cmp	r3, #2
 800fe6a:	d002      	beq.n	800fe72 <USBD_SetConfig+0x3e>
 800fe6c:	2b03      	cmp	r3, #3
 800fe6e:	d025      	beq.n	800febc <USBD_SetConfig+0x88>
 800fe70:	e071      	b.n	800ff56 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fe72:	4b42      	ldr	r3, [pc, #264]	@ (800ff7c <USBD_SetConfig+0x148>)
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d01c      	beq.n	800feb4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800fe7a:	4b40      	ldr	r3, [pc, #256]	@ (800ff7c <USBD_SetConfig+0x148>)
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	461a      	mov	r2, r3
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fe84:	4b3d      	ldr	r3, [pc, #244]	@ (800ff7c <USBD_SetConfig+0x148>)
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	4619      	mov	r1, r3
 800fe8a:	6878      	ldr	r0, [r7, #4]
 800fe8c:	f7ff f992 	bl	800f1b4 <USBD_SetClassConfig>
 800fe90:	4603      	mov	r3, r0
 800fe92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fe94:	7bfb      	ldrb	r3, [r7, #15]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d004      	beq.n	800fea4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800fe9a:	6839      	ldr	r1, [r7, #0]
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f000 f949 	bl	8010134 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fea2:	e065      	b.n	800ff70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f000 fa10 	bl	80102ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2203      	movs	r2, #3
 800feae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800feb2:	e05d      	b.n	800ff70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f000 fa08 	bl	80102ca <USBD_CtlSendStatus>
      break;
 800feba:	e059      	b.n	800ff70 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800febc:	4b2f      	ldr	r3, [pc, #188]	@ (800ff7c <USBD_SetConfig+0x148>)
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d112      	bne.n	800feea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2202      	movs	r2, #2
 800fec8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fecc:	4b2b      	ldr	r3, [pc, #172]	@ (800ff7c <USBD_SetConfig+0x148>)
 800fece:	781b      	ldrb	r3, [r3, #0]
 800fed0:	461a      	mov	r2, r3
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fed6:	4b29      	ldr	r3, [pc, #164]	@ (800ff7c <USBD_SetConfig+0x148>)
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	4619      	mov	r1, r3
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f7ff f985 	bl	800f1ec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 f9f1 	bl	80102ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fee8:	e042      	b.n	800ff70 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800feea:	4b24      	ldr	r3, [pc, #144]	@ (800ff7c <USBD_SetConfig+0x148>)
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	461a      	mov	r2, r3
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	429a      	cmp	r2, r3
 800fef6:	d02a      	beq.n	800ff4e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	685b      	ldr	r3, [r3, #4]
 800fefc:	b2db      	uxtb	r3, r3
 800fefe:	4619      	mov	r1, r3
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f7ff f973 	bl	800f1ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ff06:	4b1d      	ldr	r3, [pc, #116]	@ (800ff7c <USBD_SetConfig+0x148>)
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	461a      	mov	r2, r3
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff10:	4b1a      	ldr	r3, [pc, #104]	@ (800ff7c <USBD_SetConfig+0x148>)
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	4619      	mov	r1, r3
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f7ff f94c 	bl	800f1b4 <USBD_SetClassConfig>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ff20:	7bfb      	ldrb	r3, [r7, #15]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d00f      	beq.n	800ff46 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ff26:	6839      	ldr	r1, [r7, #0]
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f000 f903 	bl	8010134 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	685b      	ldr	r3, [r3, #4]
 800ff32:	b2db      	uxtb	r3, r3
 800ff34:	4619      	mov	r1, r3
 800ff36:	6878      	ldr	r0, [r7, #4]
 800ff38:	f7ff f958 	bl	800f1ec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	2202      	movs	r2, #2
 800ff40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ff44:	e014      	b.n	800ff70 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f000 f9bf 	bl	80102ca <USBD_CtlSendStatus>
      break;
 800ff4c:	e010      	b.n	800ff70 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 f9bb 	bl	80102ca <USBD_CtlSendStatus>
      break;
 800ff54:	e00c      	b.n	800ff70 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ff56:	6839      	ldr	r1, [r7, #0]
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f000 f8eb 	bl	8010134 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff5e:	4b07      	ldr	r3, [pc, #28]	@ (800ff7c <USBD_SetConfig+0x148>)
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	4619      	mov	r1, r3
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f7ff f941 	bl	800f1ec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ff6a:	2303      	movs	r3, #3
 800ff6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ff6e:	bf00      	nop
  }

  return ret;
 800ff70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	3710      	adds	r7, #16
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	20000bc8 	.word	0x20000bc8

0800ff80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	88db      	ldrh	r3, [r3, #6]
 800ff8e:	2b01      	cmp	r3, #1
 800ff90:	d004      	beq.n	800ff9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ff92:	6839      	ldr	r1, [r7, #0]
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f000 f8cd 	bl	8010134 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ff9a:	e023      	b.n	800ffe4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffa2:	b2db      	uxtb	r3, r3
 800ffa4:	2b02      	cmp	r3, #2
 800ffa6:	dc02      	bgt.n	800ffae <USBD_GetConfig+0x2e>
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	dc03      	bgt.n	800ffb4 <USBD_GetConfig+0x34>
 800ffac:	e015      	b.n	800ffda <USBD_GetConfig+0x5a>
 800ffae:	2b03      	cmp	r3, #3
 800ffb0:	d00b      	beq.n	800ffca <USBD_GetConfig+0x4a>
 800ffb2:	e012      	b.n	800ffda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	3308      	adds	r3, #8
 800ffbe:	2201      	movs	r2, #1
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f000 f927 	bl	8010216 <USBD_CtlSendData>
        break;
 800ffc8:	e00c      	b.n	800ffe4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	3304      	adds	r3, #4
 800ffce:	2201      	movs	r2, #1
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	f000 f91f 	bl	8010216 <USBD_CtlSendData>
        break;
 800ffd8:	e004      	b.n	800ffe4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ffda:	6839      	ldr	r1, [r7, #0]
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f000 f8a9 	bl	8010134 <USBD_CtlError>
        break;
 800ffe2:	bf00      	nop
}
 800ffe4:	bf00      	nop
 800ffe6:	3708      	adds	r7, #8
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}

0800ffec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fffc:	b2db      	uxtb	r3, r3
 800fffe:	3b01      	subs	r3, #1
 8010000:	2b02      	cmp	r3, #2
 8010002:	d81e      	bhi.n	8010042 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	88db      	ldrh	r3, [r3, #6]
 8010008:	2b02      	cmp	r3, #2
 801000a:	d004      	beq.n	8010016 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801000c:	6839      	ldr	r1, [r7, #0]
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f000 f890 	bl	8010134 <USBD_CtlError>
        break;
 8010014:	e01a      	b.n	801004c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	2201      	movs	r2, #1
 801001a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010022:	2b00      	cmp	r3, #0
 8010024:	d005      	beq.n	8010032 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	68db      	ldr	r3, [r3, #12]
 801002a:	f043 0202 	orr.w	r2, r3, #2
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	330c      	adds	r3, #12
 8010036:	2202      	movs	r2, #2
 8010038:	4619      	mov	r1, r3
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f000 f8eb 	bl	8010216 <USBD_CtlSendData>
      break;
 8010040:	e004      	b.n	801004c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010042:	6839      	ldr	r1, [r7, #0]
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f000 f875 	bl	8010134 <USBD_CtlError>
      break;
 801004a:	bf00      	nop
  }
}
 801004c:	bf00      	nop
 801004e:	3708      	adds	r7, #8
 8010050:	46bd      	mov	sp, r7
 8010052:	bd80      	pop	{r7, pc}

08010054 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010054:	b580      	push	{r7, lr}
 8010056:	b082      	sub	sp, #8
 8010058:	af00      	add	r7, sp, #0
 801005a:	6078      	str	r0, [r7, #4]
 801005c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801005e:	683b      	ldr	r3, [r7, #0]
 8010060:	885b      	ldrh	r3, [r3, #2]
 8010062:	2b01      	cmp	r3, #1
 8010064:	d106      	bne.n	8010074 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2201      	movs	r2, #1
 801006a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f000 f92b 	bl	80102ca <USBD_CtlSendStatus>
  }
}
 8010074:	bf00      	nop
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}

0801007c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801008c:	b2db      	uxtb	r3, r3
 801008e:	3b01      	subs	r3, #1
 8010090:	2b02      	cmp	r3, #2
 8010092:	d80b      	bhi.n	80100ac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	885b      	ldrh	r3, [r3, #2]
 8010098:	2b01      	cmp	r3, #1
 801009a:	d10c      	bne.n	80100b6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 f910 	bl	80102ca <USBD_CtlSendStatus>
      }
      break;
 80100aa:	e004      	b.n	80100b6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80100ac:	6839      	ldr	r1, [r7, #0]
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 f840 	bl	8010134 <USBD_CtlError>
      break;
 80100b4:	e000      	b.n	80100b8 <USBD_ClrFeature+0x3c>
      break;
 80100b6:	bf00      	nop
  }
}
 80100b8:	bf00      	nop
 80100ba:	3708      	adds	r7, #8
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b084      	sub	sp, #16
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	781a      	ldrb	r2, [r3, #0]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	3301      	adds	r3, #1
 80100da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	781a      	ldrb	r2, [r3, #0]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	3301      	adds	r3, #1
 80100e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80100ea:	68f8      	ldr	r0, [r7, #12]
 80100ec:	f7ff fa92 	bl	800f614 <SWAPBYTE>
 80100f0:	4603      	mov	r3, r0
 80100f2:	461a      	mov	r2, r3
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	3301      	adds	r3, #1
 80100fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	3301      	adds	r3, #1
 8010102:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010104:	68f8      	ldr	r0, [r7, #12]
 8010106:	f7ff fa85 	bl	800f614 <SWAPBYTE>
 801010a:	4603      	mov	r3, r0
 801010c:	461a      	mov	r2, r3
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	3301      	adds	r3, #1
 8010116:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	3301      	adds	r3, #1
 801011c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801011e:	68f8      	ldr	r0, [r7, #12]
 8010120:	f7ff fa78 	bl	800f614 <SWAPBYTE>
 8010124:	4603      	mov	r3, r0
 8010126:	461a      	mov	r2, r3
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	80da      	strh	r2, [r3, #6]
}
 801012c:	bf00      	nop
 801012e:	3710      	adds	r7, #16
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}

08010134 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b082      	sub	sp, #8
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801013e:	2180      	movs	r1, #128	@ 0x80
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f000 fcab 	bl	8010a9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010146:	2100      	movs	r1, #0
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f000 fca7 	bl	8010a9c <USBD_LL_StallEP>
}
 801014e:	bf00      	nop
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}

08010156 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010156:	b580      	push	{r7, lr}
 8010158:	b086      	sub	sp, #24
 801015a:	af00      	add	r7, sp, #0
 801015c:	60f8      	str	r0, [r7, #12]
 801015e:	60b9      	str	r1, [r7, #8]
 8010160:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010162:	2300      	movs	r3, #0
 8010164:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d036      	beq.n	80101da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010170:	6938      	ldr	r0, [r7, #16]
 8010172:	f000 f836 	bl	80101e2 <USBD_GetLen>
 8010176:	4603      	mov	r3, r0
 8010178:	3301      	adds	r3, #1
 801017a:	b29b      	uxth	r3, r3
 801017c:	005b      	lsls	r3, r3, #1
 801017e:	b29a      	uxth	r2, r3
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010184:	7dfb      	ldrb	r3, [r7, #23]
 8010186:	68ba      	ldr	r2, [r7, #8]
 8010188:	4413      	add	r3, r2
 801018a:	687a      	ldr	r2, [r7, #4]
 801018c:	7812      	ldrb	r2, [r2, #0]
 801018e:	701a      	strb	r2, [r3, #0]
  idx++;
 8010190:	7dfb      	ldrb	r3, [r7, #23]
 8010192:	3301      	adds	r3, #1
 8010194:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010196:	7dfb      	ldrb	r3, [r7, #23]
 8010198:	68ba      	ldr	r2, [r7, #8]
 801019a:	4413      	add	r3, r2
 801019c:	2203      	movs	r2, #3
 801019e:	701a      	strb	r2, [r3, #0]
  idx++;
 80101a0:	7dfb      	ldrb	r3, [r7, #23]
 80101a2:	3301      	adds	r3, #1
 80101a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80101a6:	e013      	b.n	80101d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80101a8:	7dfb      	ldrb	r3, [r7, #23]
 80101aa:	68ba      	ldr	r2, [r7, #8]
 80101ac:	4413      	add	r3, r2
 80101ae:	693a      	ldr	r2, [r7, #16]
 80101b0:	7812      	ldrb	r2, [r2, #0]
 80101b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	3301      	adds	r3, #1
 80101b8:	613b      	str	r3, [r7, #16]
    idx++;
 80101ba:	7dfb      	ldrb	r3, [r7, #23]
 80101bc:	3301      	adds	r3, #1
 80101be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80101c0:	7dfb      	ldrb	r3, [r7, #23]
 80101c2:	68ba      	ldr	r2, [r7, #8]
 80101c4:	4413      	add	r3, r2
 80101c6:	2200      	movs	r2, #0
 80101c8:	701a      	strb	r2, [r3, #0]
    idx++;
 80101ca:	7dfb      	ldrb	r3, [r7, #23]
 80101cc:	3301      	adds	r3, #1
 80101ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80101d0:	693b      	ldr	r3, [r7, #16]
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d1e7      	bne.n	80101a8 <USBD_GetString+0x52>
 80101d8:	e000      	b.n	80101dc <USBD_GetString+0x86>
    return;
 80101da:	bf00      	nop
  }
}
 80101dc:	3718      	adds	r7, #24
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}

080101e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80101e2:	b480      	push	{r7}
 80101e4:	b085      	sub	sp, #20
 80101e6:	af00      	add	r7, sp, #0
 80101e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80101ea:	2300      	movs	r3, #0
 80101ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80101f2:	e005      	b.n	8010200 <USBD_GetLen+0x1e>
  {
    len++;
 80101f4:	7bfb      	ldrb	r3, [r7, #15]
 80101f6:	3301      	adds	r3, #1
 80101f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	3301      	adds	r3, #1
 80101fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010200:	68bb      	ldr	r3, [r7, #8]
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d1f5      	bne.n	80101f4 <USBD_GetLen+0x12>
  }

  return len;
 8010208:	7bfb      	ldrb	r3, [r7, #15]
}
 801020a:	4618      	mov	r0, r3
 801020c:	3714      	adds	r7, #20
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr

08010216 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010216:	b580      	push	{r7, lr}
 8010218:	b084      	sub	sp, #16
 801021a:	af00      	add	r7, sp, #0
 801021c:	60f8      	str	r0, [r7, #12]
 801021e:	60b9      	str	r1, [r7, #8]
 8010220:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2202      	movs	r2, #2
 8010226:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	687a      	ldr	r2, [r7, #4]
 801022e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	687a      	ldr	r2, [r7, #4]
 8010234:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	68ba      	ldr	r2, [r7, #8]
 801023a:	2100      	movs	r1, #0
 801023c:	68f8      	ldr	r0, [r7, #12]
 801023e:	f000 fcb6 	bl	8010bae <USBD_LL_Transmit>

  return USBD_OK;
 8010242:	2300      	movs	r3, #0
}
 8010244:	4618      	mov	r0, r3
 8010246:	3710      	adds	r7, #16
 8010248:	46bd      	mov	sp, r7
 801024a:	bd80      	pop	{r7, pc}

0801024c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b084      	sub	sp, #16
 8010250:	af00      	add	r7, sp, #0
 8010252:	60f8      	str	r0, [r7, #12]
 8010254:	60b9      	str	r1, [r7, #8]
 8010256:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	68ba      	ldr	r2, [r7, #8]
 801025c:	2100      	movs	r1, #0
 801025e:	68f8      	ldr	r0, [r7, #12]
 8010260:	f000 fca5 	bl	8010bae <USBD_LL_Transmit>

  return USBD_OK;
 8010264:	2300      	movs	r3, #0
}
 8010266:	4618      	mov	r0, r3
 8010268:	3710      	adds	r7, #16
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}

0801026e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801026e:	b580      	push	{r7, lr}
 8010270:	b084      	sub	sp, #16
 8010272:	af00      	add	r7, sp, #0
 8010274:	60f8      	str	r0, [r7, #12]
 8010276:	60b9      	str	r1, [r7, #8]
 8010278:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	2203      	movs	r2, #3
 801027e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	687a      	ldr	r2, [r7, #4]
 8010286:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	687a      	ldr	r2, [r7, #4]
 801028e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	68ba      	ldr	r2, [r7, #8]
 8010296:	2100      	movs	r1, #0
 8010298:	68f8      	ldr	r0, [r7, #12]
 801029a:	f000 fca9 	bl	8010bf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801029e:	2300      	movs	r3, #0
}
 80102a0:	4618      	mov	r0, r3
 80102a2:	3710      	adds	r7, #16
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}

080102a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b084      	sub	sp, #16
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	68ba      	ldr	r2, [r7, #8]
 80102b8:	2100      	movs	r1, #0
 80102ba:	68f8      	ldr	r0, [r7, #12]
 80102bc:	f000 fc98 	bl	8010bf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80102c0:	2300      	movs	r3, #0
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3710      	adds	r7, #16
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}

080102ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80102ca:	b580      	push	{r7, lr}
 80102cc:	b082      	sub	sp, #8
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	2204      	movs	r2, #4
 80102d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80102da:	2300      	movs	r3, #0
 80102dc:	2200      	movs	r2, #0
 80102de:	2100      	movs	r1, #0
 80102e0:	6878      	ldr	r0, [r7, #4]
 80102e2:	f000 fc64 	bl	8010bae <USBD_LL_Transmit>

  return USBD_OK;
 80102e6:	2300      	movs	r3, #0
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	3708      	adds	r7, #8
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b082      	sub	sp, #8
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2205      	movs	r2, #5
 80102fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010300:	2300      	movs	r3, #0
 8010302:	2200      	movs	r2, #0
 8010304:	2100      	movs	r1, #0
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f000 fc72 	bl	8010bf0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801030c:	2300      	movs	r3, #0
}
 801030e:	4618      	mov	r0, r3
 8010310:	3708      	adds	r7, #8
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
	...

08010318 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 801031c:	2200      	movs	r2, #0
 801031e:	4912      	ldr	r1, [pc, #72]	@ (8010368 <MX_USB_Device_Init+0x50>)
 8010320:	4812      	ldr	r0, [pc, #72]	@ (801036c <MX_USB_Device_Init+0x54>)
 8010322:	f7fe fed9 	bl	800f0d8 <USBD_Init>
 8010326:	4603      	mov	r3, r0
 8010328:	2b00      	cmp	r3, #0
 801032a:	d001      	beq.n	8010330 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801032c:	f7f3 fb6c 	bl	8003a08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010330:	490f      	ldr	r1, [pc, #60]	@ (8010370 <MX_USB_Device_Init+0x58>)
 8010332:	480e      	ldr	r0, [pc, #56]	@ (801036c <MX_USB_Device_Init+0x54>)
 8010334:	f7fe ff00 	bl	800f138 <USBD_RegisterClass>
 8010338:	4603      	mov	r3, r0
 801033a:	2b00      	cmp	r3, #0
 801033c:	d001      	beq.n	8010342 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801033e:	f7f3 fb63 	bl	8003a08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8010342:	490c      	ldr	r1, [pc, #48]	@ (8010374 <MX_USB_Device_Init+0x5c>)
 8010344:	4809      	ldr	r0, [pc, #36]	@ (801036c <MX_USB_Device_Init+0x54>)
 8010346:	f7fe fe21 	bl	800ef8c <USBD_CDC_RegisterInterface>
 801034a:	4603      	mov	r3, r0
 801034c:	2b00      	cmp	r3, #0
 801034e:	d001      	beq.n	8010354 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010350:	f7f3 fb5a 	bl	8003a08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010354:	4805      	ldr	r0, [pc, #20]	@ (801036c <MX_USB_Device_Init+0x54>)
 8010356:	f7fe ff16 	bl	800f186 <USBD_Start>
 801035a:	4603      	mov	r3, r0
 801035c:	2b00      	cmp	r3, #0
 801035e:	d001      	beq.n	8010364 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010360:	f7f3 fb52 	bl	8003a08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010364:	bf00      	nop
 8010366:	bd80      	pop	{r7, pc}
 8010368:	20000184 	.word	0x20000184
 801036c:	20000bcc 	.word	0x20000bcc
 8010370:	2000006c 	.word	0x2000006c
 8010374:	20000170 	.word	0x20000170

08010378 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801037c:	2200      	movs	r2, #0
 801037e:	4905      	ldr	r1, [pc, #20]	@ (8010394 <CDC_Init_FS+0x1c>)
 8010380:	4805      	ldr	r0, [pc, #20]	@ (8010398 <CDC_Init_FS+0x20>)
 8010382:	f7fe fe18 	bl	800efb6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010386:	4905      	ldr	r1, [pc, #20]	@ (801039c <CDC_Init_FS+0x24>)
 8010388:	4803      	ldr	r0, [pc, #12]	@ (8010398 <CDC_Init_FS+0x20>)
 801038a:	f7fe fe32 	bl	800eff2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801038e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010390:	4618      	mov	r0, r3
 8010392:	bd80      	pop	{r7, pc}
 8010394:	2000169c 	.word	0x2000169c
 8010398:	20000bcc 	.word	0x20000bcc
 801039c:	20000e9c 	.word	0x20000e9c

080103a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80103a0:	b480      	push	{r7}
 80103a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80103a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	46bd      	mov	sp, r7
 80103aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ae:	4770      	bx	lr

080103b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80103b0:	b480      	push	{r7}
 80103b2:	b083      	sub	sp, #12
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	4603      	mov	r3, r0
 80103b8:	6039      	str	r1, [r7, #0]
 80103ba:	71fb      	strb	r3, [r7, #7]
 80103bc:	4613      	mov	r3, r2
 80103be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80103c0:	79fb      	ldrb	r3, [r7, #7]
 80103c2:	2b23      	cmp	r3, #35	@ 0x23
 80103c4:	d84a      	bhi.n	801045c <CDC_Control_FS+0xac>
 80103c6:	a201      	add	r2, pc, #4	@ (adr r2, 80103cc <CDC_Control_FS+0x1c>)
 80103c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103cc:	0801045d 	.word	0x0801045d
 80103d0:	0801045d 	.word	0x0801045d
 80103d4:	0801045d 	.word	0x0801045d
 80103d8:	0801045d 	.word	0x0801045d
 80103dc:	0801045d 	.word	0x0801045d
 80103e0:	0801045d 	.word	0x0801045d
 80103e4:	0801045d 	.word	0x0801045d
 80103e8:	0801045d 	.word	0x0801045d
 80103ec:	0801045d 	.word	0x0801045d
 80103f0:	0801045d 	.word	0x0801045d
 80103f4:	0801045d 	.word	0x0801045d
 80103f8:	0801045d 	.word	0x0801045d
 80103fc:	0801045d 	.word	0x0801045d
 8010400:	0801045d 	.word	0x0801045d
 8010404:	0801045d 	.word	0x0801045d
 8010408:	0801045d 	.word	0x0801045d
 801040c:	0801045d 	.word	0x0801045d
 8010410:	0801045d 	.word	0x0801045d
 8010414:	0801045d 	.word	0x0801045d
 8010418:	0801045d 	.word	0x0801045d
 801041c:	0801045d 	.word	0x0801045d
 8010420:	0801045d 	.word	0x0801045d
 8010424:	0801045d 	.word	0x0801045d
 8010428:	0801045d 	.word	0x0801045d
 801042c:	0801045d 	.word	0x0801045d
 8010430:	0801045d 	.word	0x0801045d
 8010434:	0801045d 	.word	0x0801045d
 8010438:	0801045d 	.word	0x0801045d
 801043c:	0801045d 	.word	0x0801045d
 8010440:	0801045d 	.word	0x0801045d
 8010444:	0801045d 	.word	0x0801045d
 8010448:	0801045d 	.word	0x0801045d
 801044c:	0801045d 	.word	0x0801045d
 8010450:	0801045d 	.word	0x0801045d
 8010454:	0801045d 	.word	0x0801045d
 8010458:	0801045d 	.word	0x0801045d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801045c:	bf00      	nop
  }

  return (USBD_OK);
 801045e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010460:	4618      	mov	r0, r3
 8010462:	370c      	adds	r7, #12
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr

0801046c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b082      	sub	sp, #8
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > sizeof(USB_RX_Buffer)) {
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801047e:	d903      	bls.n	8010488 <CDC_Receive_FS+0x1c>
	          *Len = sizeof(USB_RX_Buffer);  // Prevent buffer overflow
 8010480:	683b      	ldr	r3, [r7, #0]
 8010482:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010486:	601a      	str	r2, [r3, #0]
	      }
	      memcpy(USB_RX_Buffer, Buf, *Len);
 8010488:	683b      	ldr	r3, [r7, #0]
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	461a      	mov	r2, r3
 801048e:	6879      	ldr	r1, [r7, #4]
 8010490:	4808      	ldr	r0, [pc, #32]	@ (80104b4 <CDC_Receive_FS+0x48>)
 8010492:	f001 fcb0 	bl	8011df6 <memcpy>

	      dataReceivedFlag = 1;
 8010496:	4b08      	ldr	r3, [pc, #32]	@ (80104b8 <CDC_Receive_FS+0x4c>)
 8010498:	2201      	movs	r2, #1
 801049a:	601a      	str	r2, [r3, #0]

	      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801049c:	6879      	ldr	r1, [r7, #4]
 801049e:	4807      	ldr	r0, [pc, #28]	@ (80104bc <CDC_Receive_FS+0x50>)
 80104a0:	f7fe fda7 	bl	800eff2 <USBD_CDC_SetRxBuffer>
	      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80104a4:	4805      	ldr	r0, [pc, #20]	@ (80104bc <CDC_Receive_FS+0x50>)
 80104a6:	f7fe fded 	bl	800f084 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80104aa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80104ac:	4618      	mov	r0, r3
 80104ae:	3708      	adds	r7, #8
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	20000ab4 	.word	0x20000ab4
 80104b8:	20000b74 	.word	0x20000b74
 80104bc:	20000bcc 	.word	0x20000bcc

080104c0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b084      	sub	sp, #16
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	460b      	mov	r3, r1
 80104ca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80104cc:	2300      	movs	r3, #0
 80104ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80104d0:	4b0d      	ldr	r3, [pc, #52]	@ (8010508 <CDC_Transmit_FS+0x48>)
 80104d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80104d6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d001      	beq.n	80104e6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80104e2:	2301      	movs	r3, #1
 80104e4:	e00b      	b.n	80104fe <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80104e6:	887b      	ldrh	r3, [r7, #2]
 80104e8:	461a      	mov	r2, r3
 80104ea:	6879      	ldr	r1, [r7, #4]
 80104ec:	4806      	ldr	r0, [pc, #24]	@ (8010508 <CDC_Transmit_FS+0x48>)
 80104ee:	f7fe fd62 	bl	800efb6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80104f2:	4805      	ldr	r0, [pc, #20]	@ (8010508 <CDC_Transmit_FS+0x48>)
 80104f4:	f7fe fd96 	bl	800f024 <USBD_CDC_TransmitPacket>
 80104f8:	4603      	mov	r3, r0
 80104fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80104fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3710      	adds	r7, #16
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
 8010506:	bf00      	nop
 8010508:	20000bcc 	.word	0x20000bcc

0801050c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801050c:	b480      	push	{r7}
 801050e:	b087      	sub	sp, #28
 8010510:	af00      	add	r7, sp, #0
 8010512:	60f8      	str	r0, [r7, #12]
 8010514:	60b9      	str	r1, [r7, #8]
 8010516:	4613      	mov	r3, r2
 8010518:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801051a:	2300      	movs	r3, #0
 801051c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801051e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010522:	4618      	mov	r0, r3
 8010524:	371c      	adds	r7, #28
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr
	...

08010530 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010530:	b480      	push	{r7}
 8010532:	b083      	sub	sp, #12
 8010534:	af00      	add	r7, sp, #0
 8010536:	4603      	mov	r3, r0
 8010538:	6039      	str	r1, [r7, #0]
 801053a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801053c:	683b      	ldr	r3, [r7, #0]
 801053e:	2212      	movs	r2, #18
 8010540:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8010542:	4b03      	ldr	r3, [pc, #12]	@ (8010550 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8010544:	4618      	mov	r0, r3
 8010546:	370c      	adds	r7, #12
 8010548:	46bd      	mov	sp, r7
 801054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054e:	4770      	bx	lr
 8010550:	200001a4 	.word	0x200001a4

08010554 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010554:	b480      	push	{r7}
 8010556:	b083      	sub	sp, #12
 8010558:	af00      	add	r7, sp, #0
 801055a:	4603      	mov	r3, r0
 801055c:	6039      	str	r1, [r7, #0]
 801055e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010560:	683b      	ldr	r3, [r7, #0]
 8010562:	2204      	movs	r2, #4
 8010564:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010566:	4b03      	ldr	r3, [pc, #12]	@ (8010574 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8010568:	4618      	mov	r0, r3
 801056a:	370c      	adds	r7, #12
 801056c:	46bd      	mov	sp, r7
 801056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010572:	4770      	bx	lr
 8010574:	200001b8 	.word	0x200001b8

08010578 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b082      	sub	sp, #8
 801057c:	af00      	add	r7, sp, #0
 801057e:	4603      	mov	r3, r0
 8010580:	6039      	str	r1, [r7, #0]
 8010582:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010584:	79fb      	ldrb	r3, [r7, #7]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d105      	bne.n	8010596 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801058a:	683a      	ldr	r2, [r7, #0]
 801058c:	4907      	ldr	r1, [pc, #28]	@ (80105ac <USBD_CDC_ProductStrDescriptor+0x34>)
 801058e:	4808      	ldr	r0, [pc, #32]	@ (80105b0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010590:	f7ff fde1 	bl	8010156 <USBD_GetString>
 8010594:	e004      	b.n	80105a0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010596:	683a      	ldr	r2, [r7, #0]
 8010598:	4904      	ldr	r1, [pc, #16]	@ (80105ac <USBD_CDC_ProductStrDescriptor+0x34>)
 801059a:	4805      	ldr	r0, [pc, #20]	@ (80105b0 <USBD_CDC_ProductStrDescriptor+0x38>)
 801059c:	f7ff fddb 	bl	8010156 <USBD_GetString>
  }
  return USBD_StrDesc;
 80105a0:	4b02      	ldr	r3, [pc, #8]	@ (80105ac <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3708      	adds	r7, #8
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}
 80105aa:	bf00      	nop
 80105ac:	20001e9c 	.word	0x20001e9c
 80105b0:	08016eb4 	.word	0x08016eb4

080105b4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b082      	sub	sp, #8
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	4603      	mov	r3, r0
 80105bc:	6039      	str	r1, [r7, #0]
 80105be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80105c0:	683a      	ldr	r2, [r7, #0]
 80105c2:	4904      	ldr	r1, [pc, #16]	@ (80105d4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80105c4:	4804      	ldr	r0, [pc, #16]	@ (80105d8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80105c6:	f7ff fdc6 	bl	8010156 <USBD_GetString>
  return USBD_StrDesc;
 80105ca:	4b02      	ldr	r3, [pc, #8]	@ (80105d4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3708      	adds	r7, #8
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}
 80105d4:	20001e9c 	.word	0x20001e9c
 80105d8:	08016ecc 	.word	0x08016ecc

080105dc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	4603      	mov	r3, r0
 80105e4:	6039      	str	r1, [r7, #0]
 80105e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	221a      	movs	r2, #26
 80105ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80105ee:	f000 f843 	bl	8010678 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80105f2:	4b02      	ldr	r3, [pc, #8]	@ (80105fc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3708      	adds	r7, #8
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}
 80105fc:	200001bc 	.word	0x200001bc

08010600 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b082      	sub	sp, #8
 8010604:	af00      	add	r7, sp, #0
 8010606:	4603      	mov	r3, r0
 8010608:	6039      	str	r1, [r7, #0]
 801060a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801060c:	79fb      	ldrb	r3, [r7, #7]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d105      	bne.n	801061e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010612:	683a      	ldr	r2, [r7, #0]
 8010614:	4907      	ldr	r1, [pc, #28]	@ (8010634 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010616:	4808      	ldr	r0, [pc, #32]	@ (8010638 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010618:	f7ff fd9d 	bl	8010156 <USBD_GetString>
 801061c:	e004      	b.n	8010628 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801061e:	683a      	ldr	r2, [r7, #0]
 8010620:	4904      	ldr	r1, [pc, #16]	@ (8010634 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010622:	4805      	ldr	r0, [pc, #20]	@ (8010638 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010624:	f7ff fd97 	bl	8010156 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010628:	4b02      	ldr	r3, [pc, #8]	@ (8010634 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801062a:	4618      	mov	r0, r3
 801062c:	3708      	adds	r7, #8
 801062e:	46bd      	mov	sp, r7
 8010630:	bd80      	pop	{r7, pc}
 8010632:	bf00      	nop
 8010634:	20001e9c 	.word	0x20001e9c
 8010638:	08016ee0 	.word	0x08016ee0

0801063c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b082      	sub	sp, #8
 8010640:	af00      	add	r7, sp, #0
 8010642:	4603      	mov	r3, r0
 8010644:	6039      	str	r1, [r7, #0]
 8010646:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010648:	79fb      	ldrb	r3, [r7, #7]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d105      	bne.n	801065a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801064e:	683a      	ldr	r2, [r7, #0]
 8010650:	4907      	ldr	r1, [pc, #28]	@ (8010670 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010652:	4808      	ldr	r0, [pc, #32]	@ (8010674 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010654:	f7ff fd7f 	bl	8010156 <USBD_GetString>
 8010658:	e004      	b.n	8010664 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801065a:	683a      	ldr	r2, [r7, #0]
 801065c:	4904      	ldr	r1, [pc, #16]	@ (8010670 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801065e:	4805      	ldr	r0, [pc, #20]	@ (8010674 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010660:	f7ff fd79 	bl	8010156 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010664:	4b02      	ldr	r3, [pc, #8]	@ (8010670 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8010666:	4618      	mov	r0, r3
 8010668:	3708      	adds	r7, #8
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop
 8010670:	20001e9c 	.word	0x20001e9c
 8010674:	08016eec 	.word	0x08016eec

08010678 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010678:	b580      	push	{r7, lr}
 801067a:	b084      	sub	sp, #16
 801067c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801067e:	4b0f      	ldr	r3, [pc, #60]	@ (80106bc <Get_SerialNum+0x44>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010684:	4b0e      	ldr	r3, [pc, #56]	@ (80106c0 <Get_SerialNum+0x48>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801068a:	4b0e      	ldr	r3, [pc, #56]	@ (80106c4 <Get_SerialNum+0x4c>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010690:	68fa      	ldr	r2, [r7, #12]
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	4413      	add	r3, r2
 8010696:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d009      	beq.n	80106b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801069e:	2208      	movs	r2, #8
 80106a0:	4909      	ldr	r1, [pc, #36]	@ (80106c8 <Get_SerialNum+0x50>)
 80106a2:	68f8      	ldr	r0, [r7, #12]
 80106a4:	f000 f814 	bl	80106d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80106a8:	2204      	movs	r2, #4
 80106aa:	4908      	ldr	r1, [pc, #32]	@ (80106cc <Get_SerialNum+0x54>)
 80106ac:	68b8      	ldr	r0, [r7, #8]
 80106ae:	f000 f80f 	bl	80106d0 <IntToUnicode>
  }
}
 80106b2:	bf00      	nop
 80106b4:	3710      	adds	r7, #16
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	1fff7590 	.word	0x1fff7590
 80106c0:	1fff7594 	.word	0x1fff7594
 80106c4:	1fff7598 	.word	0x1fff7598
 80106c8:	200001be 	.word	0x200001be
 80106cc:	200001ce 	.word	0x200001ce

080106d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80106d0:	b480      	push	{r7}
 80106d2:	b087      	sub	sp, #28
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	60f8      	str	r0, [r7, #12]
 80106d8:	60b9      	str	r1, [r7, #8]
 80106da:	4613      	mov	r3, r2
 80106dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80106de:	2300      	movs	r3, #0
 80106e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80106e2:	2300      	movs	r3, #0
 80106e4:	75fb      	strb	r3, [r7, #23]
 80106e6:	e027      	b.n	8010738 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	0f1b      	lsrs	r3, r3, #28
 80106ec:	2b09      	cmp	r3, #9
 80106ee:	d80b      	bhi.n	8010708 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	0f1b      	lsrs	r3, r3, #28
 80106f4:	b2da      	uxtb	r2, r3
 80106f6:	7dfb      	ldrb	r3, [r7, #23]
 80106f8:	005b      	lsls	r3, r3, #1
 80106fa:	4619      	mov	r1, r3
 80106fc:	68bb      	ldr	r3, [r7, #8]
 80106fe:	440b      	add	r3, r1
 8010700:	3230      	adds	r2, #48	@ 0x30
 8010702:	b2d2      	uxtb	r2, r2
 8010704:	701a      	strb	r2, [r3, #0]
 8010706:	e00a      	b.n	801071e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	0f1b      	lsrs	r3, r3, #28
 801070c:	b2da      	uxtb	r2, r3
 801070e:	7dfb      	ldrb	r3, [r7, #23]
 8010710:	005b      	lsls	r3, r3, #1
 8010712:	4619      	mov	r1, r3
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	440b      	add	r3, r1
 8010718:	3237      	adds	r2, #55	@ 0x37
 801071a:	b2d2      	uxtb	r2, r2
 801071c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	011b      	lsls	r3, r3, #4
 8010722:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010724:	7dfb      	ldrb	r3, [r7, #23]
 8010726:	005b      	lsls	r3, r3, #1
 8010728:	3301      	adds	r3, #1
 801072a:	68ba      	ldr	r2, [r7, #8]
 801072c:	4413      	add	r3, r2
 801072e:	2200      	movs	r2, #0
 8010730:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010732:	7dfb      	ldrb	r3, [r7, #23]
 8010734:	3301      	adds	r3, #1
 8010736:	75fb      	strb	r3, [r7, #23]
 8010738:	7dfa      	ldrb	r2, [r7, #23]
 801073a:	79fb      	ldrb	r3, [r7, #7]
 801073c:	429a      	cmp	r2, r3
 801073e:	d3d3      	bcc.n	80106e8 <IntToUnicode+0x18>
  }
}
 8010740:	bf00      	nop
 8010742:	bf00      	nop
 8010744:	371c      	adds	r7, #28
 8010746:	46bd      	mov	sp, r7
 8010748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074c:	4770      	bx	lr
	...

08010750 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b098      	sub	sp, #96	@ 0x60
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010758:	f107 030c 	add.w	r3, r7, #12
 801075c:	2254      	movs	r2, #84	@ 0x54
 801075e:	2100      	movs	r1, #0
 8010760:	4618      	mov	r0, r3
 8010762:	f001 fab6 	bl	8011cd2 <memset>
  if(pcdHandle->Instance==USB)
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	4a15      	ldr	r2, [pc, #84]	@ (80107c0 <HAL_PCD_MspInit+0x70>)
 801076c:	4293      	cmp	r3, r2
 801076e:	d122      	bne.n	80107b6 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010774:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010776:	2300      	movs	r3, #0
 8010778:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801077a:	f107 030c 	add.w	r3, r7, #12
 801077e:	4618      	mov	r0, r3
 8010780:	f7f9 f8c6 	bl	8009910 <HAL_RCCEx_PeriphCLKConfig>
 8010784:	4603      	mov	r3, r0
 8010786:	2b00      	cmp	r3, #0
 8010788:	d001      	beq.n	801078e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801078a:	f7f3 f93d 	bl	8003a08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801078e:	4b0d      	ldr	r3, [pc, #52]	@ (80107c4 <HAL_PCD_MspInit+0x74>)
 8010790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010792:	4a0c      	ldr	r2, [pc, #48]	@ (80107c4 <HAL_PCD_MspInit+0x74>)
 8010794:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8010798:	6593      	str	r3, [r2, #88]	@ 0x58
 801079a:	4b0a      	ldr	r3, [pc, #40]	@ (80107c4 <HAL_PCD_MspInit+0x74>)
 801079c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801079e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80107a2:	60bb      	str	r3, [r7, #8]
 80107a4:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80107a6:	2200      	movs	r2, #0
 80107a8:	2100      	movs	r1, #0
 80107aa:	2014      	movs	r0, #20
 80107ac:	f7f5 fe47 	bl	800643e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80107b0:	2014      	movs	r0, #20
 80107b2:	f7f5 fe5e 	bl	8006472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80107b6:	bf00      	nop
 80107b8:	3760      	adds	r7, #96	@ 0x60
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}
 80107be:	bf00      	nop
 80107c0:	40005c00 	.word	0x40005c00
 80107c4:	40021000 	.word	0x40021000

080107c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b082      	sub	sp, #8
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80107dc:	4619      	mov	r1, r3
 80107de:	4610      	mov	r0, r2
 80107e0:	f7fe fd1c 	bl	800f21c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80107e4:	bf00      	nop
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}

080107ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b082      	sub	sp, #8
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	460b      	mov	r3, r1
 80107f6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80107fe:	78fa      	ldrb	r2, [r7, #3]
 8010800:	6879      	ldr	r1, [r7, #4]
 8010802:	4613      	mov	r3, r2
 8010804:	009b      	lsls	r3, r3, #2
 8010806:	4413      	add	r3, r2
 8010808:	00db      	lsls	r3, r3, #3
 801080a:	440b      	add	r3, r1
 801080c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010810:	681a      	ldr	r2, [r3, #0]
 8010812:	78fb      	ldrb	r3, [r7, #3]
 8010814:	4619      	mov	r1, r3
 8010816:	f7fe fd56 	bl	800f2c6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801081a:	bf00      	nop
 801081c:	3708      	adds	r7, #8
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}

08010822 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010822:	b580      	push	{r7, lr}
 8010824:	b082      	sub	sp, #8
 8010826:	af00      	add	r7, sp, #0
 8010828:	6078      	str	r0, [r7, #4]
 801082a:	460b      	mov	r3, r1
 801082c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010834:	78fa      	ldrb	r2, [r7, #3]
 8010836:	6879      	ldr	r1, [r7, #4]
 8010838:	4613      	mov	r3, r2
 801083a:	009b      	lsls	r3, r3, #2
 801083c:	4413      	add	r3, r2
 801083e:	00db      	lsls	r3, r3, #3
 8010840:	440b      	add	r3, r1
 8010842:	3324      	adds	r3, #36	@ 0x24
 8010844:	681a      	ldr	r2, [r3, #0]
 8010846:	78fb      	ldrb	r3, [r7, #3]
 8010848:	4619      	mov	r1, r3
 801084a:	f7fe fd9f 	bl	800f38c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801084e:	bf00      	nop
 8010850:	3708      	adds	r7, #8
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}

08010856 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010856:	b580      	push	{r7, lr}
 8010858:	b082      	sub	sp, #8
 801085a:	af00      	add	r7, sp, #0
 801085c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010864:	4618      	mov	r0, r3
 8010866:	f7fe feb3 	bl	800f5d0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801086a:	bf00      	nop
 801086c:	3708      	adds	r7, #8
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}

08010872 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010872:	b580      	push	{r7, lr}
 8010874:	b084      	sub	sp, #16
 8010876:	af00      	add	r7, sp, #0
 8010878:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801087a:	2301      	movs	r3, #1
 801087c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	795b      	ldrb	r3, [r3, #5]
 8010882:	2b02      	cmp	r3, #2
 8010884:	d001      	beq.n	801088a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010886:	f7f3 f8bf 	bl	8003a08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010890:	7bfa      	ldrb	r2, [r7, #15]
 8010892:	4611      	mov	r1, r2
 8010894:	4618      	mov	r0, r3
 8010896:	f7fe fe5d 	bl	800f554 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80108a0:	4618      	mov	r0, r3
 80108a2:	f7fe fe09 	bl	800f4b8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80108a6:	bf00      	nop
 80108a8:	3710      	adds	r7, #16
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}
	...

080108b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80108be:	4618      	mov	r0, r3
 80108c0:	f7fe fe58 	bl	800f574 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	7a5b      	ldrb	r3, [r3, #9]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d005      	beq.n	80108d8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80108cc:	4b04      	ldr	r3, [pc, #16]	@ (80108e0 <HAL_PCD_SuspendCallback+0x30>)
 80108ce:	691b      	ldr	r3, [r3, #16]
 80108d0:	4a03      	ldr	r2, [pc, #12]	@ (80108e0 <HAL_PCD_SuspendCallback+0x30>)
 80108d2:	f043 0306 	orr.w	r3, r3, #6
 80108d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80108d8:	bf00      	nop
 80108da:	3708      	adds	r7, #8
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}
 80108e0:	e000ed00 	.word	0xe000ed00

080108e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	7a5b      	ldrb	r3, [r3, #9]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d007      	beq.n	8010904 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80108f4:	4b08      	ldr	r3, [pc, #32]	@ (8010918 <HAL_PCD_ResumeCallback+0x34>)
 80108f6:	691b      	ldr	r3, [r3, #16]
 80108f8:	4a07      	ldr	r2, [pc, #28]	@ (8010918 <HAL_PCD_ResumeCallback+0x34>)
 80108fa:	f023 0306 	bic.w	r3, r3, #6
 80108fe:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010900:	f000 f9f8 	bl	8010cf4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801090a:	4618      	mov	r0, r3
 801090c:	f7fe fe48 	bl	800f5a0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010910:	bf00      	nop
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}
 8010918:	e000ed00 	.word	0xe000ed00

0801091c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010924:	4a2b      	ldr	r2, [pc, #172]	@ (80109d4 <USBD_LL_Init+0xb8>)
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	4a29      	ldr	r2, [pc, #164]	@ (80109d4 <USBD_LL_Init+0xb8>)
 8010930:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010934:	4b27      	ldr	r3, [pc, #156]	@ (80109d4 <USBD_LL_Init+0xb8>)
 8010936:	4a28      	ldr	r2, [pc, #160]	@ (80109d8 <USBD_LL_Init+0xbc>)
 8010938:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801093a:	4b26      	ldr	r3, [pc, #152]	@ (80109d4 <USBD_LL_Init+0xb8>)
 801093c:	2208      	movs	r2, #8
 801093e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010940:	4b24      	ldr	r3, [pc, #144]	@ (80109d4 <USBD_LL_Init+0xb8>)
 8010942:	2202      	movs	r2, #2
 8010944:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010946:	4b23      	ldr	r3, [pc, #140]	@ (80109d4 <USBD_LL_Init+0xb8>)
 8010948:	2202      	movs	r2, #2
 801094a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801094c:	4b21      	ldr	r3, [pc, #132]	@ (80109d4 <USBD_LL_Init+0xb8>)
 801094e:	2200      	movs	r2, #0
 8010950:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010952:	4b20      	ldr	r3, [pc, #128]	@ (80109d4 <USBD_LL_Init+0xb8>)
 8010954:	2200      	movs	r2, #0
 8010956:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010958:	4b1e      	ldr	r3, [pc, #120]	@ (80109d4 <USBD_LL_Init+0xb8>)
 801095a:	2200      	movs	r2, #0
 801095c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801095e:	4b1d      	ldr	r3, [pc, #116]	@ (80109d4 <USBD_LL_Init+0xb8>)
 8010960:	2200      	movs	r2, #0
 8010962:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010964:	481b      	ldr	r0, [pc, #108]	@ (80109d4 <USBD_LL_Init+0xb8>)
 8010966:	f7f6 fcbb 	bl	80072e0 <HAL_PCD_Init>
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d001      	beq.n	8010974 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8010970:	f7f3 f84a 	bl	8003a08 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801097a:	2318      	movs	r3, #24
 801097c:	2200      	movs	r2, #0
 801097e:	2100      	movs	r1, #0
 8010980:	f7f8 f976 	bl	8008c70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801098a:	2358      	movs	r3, #88	@ 0x58
 801098c:	2200      	movs	r2, #0
 801098e:	2180      	movs	r1, #128	@ 0x80
 8010990:	f7f8 f96e 	bl	8008c70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801099a:	23c0      	movs	r3, #192	@ 0xc0
 801099c:	2200      	movs	r2, #0
 801099e:	2181      	movs	r1, #129	@ 0x81
 80109a0:	f7f8 f966 	bl	8008c70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80109aa:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80109ae:	2200      	movs	r2, #0
 80109b0:	2101      	movs	r1, #1
 80109b2:	f7f8 f95d 	bl	8008c70 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80109bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80109c0:	2200      	movs	r2, #0
 80109c2:	2182      	movs	r1, #130	@ 0x82
 80109c4:	f7f8 f954 	bl	8008c70 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80109c8:	2300      	movs	r3, #0
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	3708      	adds	r7, #8
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	2000209c 	.word	0x2000209c
 80109d8:	40005c00 	.word	0x40005c00

080109dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b084      	sub	sp, #16
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80109e4:	2300      	movs	r3, #0
 80109e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80109e8:	2300      	movs	r3, #0
 80109ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7f6 fd42 	bl	800747c <HAL_PCD_Start>
 80109f8:	4603      	mov	r3, r0
 80109fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80109fc:	7bfb      	ldrb	r3, [r7, #15]
 80109fe:	4618      	mov	r0, r3
 8010a00:	f000 f97e 	bl	8010d00 <USBD_Get_USB_Status>
 8010a04:	4603      	mov	r3, r0
 8010a06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a08:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	3710      	adds	r7, #16
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd80      	pop	{r7, pc}

08010a12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010a12:	b580      	push	{r7, lr}
 8010a14:	b084      	sub	sp, #16
 8010a16:	af00      	add	r7, sp, #0
 8010a18:	6078      	str	r0, [r7, #4]
 8010a1a:	4608      	mov	r0, r1
 8010a1c:	4611      	mov	r1, r2
 8010a1e:	461a      	mov	r2, r3
 8010a20:	4603      	mov	r3, r0
 8010a22:	70fb      	strb	r3, [r7, #3]
 8010a24:	460b      	mov	r3, r1
 8010a26:	70bb      	strb	r3, [r7, #2]
 8010a28:	4613      	mov	r3, r2
 8010a2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a30:	2300      	movs	r3, #0
 8010a32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010a3a:	78bb      	ldrb	r3, [r7, #2]
 8010a3c:	883a      	ldrh	r2, [r7, #0]
 8010a3e:	78f9      	ldrb	r1, [r7, #3]
 8010a40:	f7f6 fe89 	bl	8007756 <HAL_PCD_EP_Open>
 8010a44:	4603      	mov	r3, r0
 8010a46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a48:	7bfb      	ldrb	r3, [r7, #15]
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f000 f958 	bl	8010d00 <USBD_Get_USB_Status>
 8010a50:	4603      	mov	r3, r0
 8010a52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a54:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3710      	adds	r7, #16
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}

08010a5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a5e:	b580      	push	{r7, lr}
 8010a60:	b084      	sub	sp, #16
 8010a62:	af00      	add	r7, sp, #0
 8010a64:	6078      	str	r0, [r7, #4]
 8010a66:	460b      	mov	r3, r1
 8010a68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a6e:	2300      	movs	r3, #0
 8010a70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010a78:	78fa      	ldrb	r2, [r7, #3]
 8010a7a:	4611      	mov	r1, r2
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7f6 fec9 	bl	8007814 <HAL_PCD_EP_Close>
 8010a82:	4603      	mov	r3, r0
 8010a84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a86:	7bfb      	ldrb	r3, [r7, #15]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f000 f939 	bl	8010d00 <USBD_Get_USB_Status>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a92:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3710      	adds	r7, #16
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b084      	sub	sp, #16
 8010aa0:	af00      	add	r7, sp, #0
 8010aa2:	6078      	str	r0, [r7, #4]
 8010aa4:	460b      	mov	r3, r1
 8010aa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010aac:	2300      	movs	r3, #0
 8010aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010ab6:	78fa      	ldrb	r2, [r7, #3]
 8010ab8:	4611      	mov	r1, r2
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7f6 ff72 	bl	80079a4 <HAL_PCD_EP_SetStall>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ac4:	7bfb      	ldrb	r3, [r7, #15]
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f000 f91a 	bl	8010d00 <USBD_Get_USB_Status>
 8010acc:	4603      	mov	r3, r0
 8010ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3710      	adds	r7, #16
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}

08010ada <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ada:	b580      	push	{r7, lr}
 8010adc:	b084      	sub	sp, #16
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
 8010ae2:	460b      	mov	r3, r1
 8010ae4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010aea:	2300      	movs	r3, #0
 8010aec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010af4:	78fa      	ldrb	r2, [r7, #3]
 8010af6:	4611      	mov	r1, r2
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7f6 ffa5 	bl	8007a48 <HAL_PCD_EP_ClrStall>
 8010afe:	4603      	mov	r3, r0
 8010b00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b02:	7bfb      	ldrb	r3, [r7, #15]
 8010b04:	4618      	mov	r0, r3
 8010b06:	f000 f8fb 	bl	8010d00 <USBD_Get_USB_Status>
 8010b0a:	4603      	mov	r3, r0
 8010b0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b10:	4618      	mov	r0, r3
 8010b12:	3710      	adds	r7, #16
 8010b14:	46bd      	mov	sp, r7
 8010b16:	bd80      	pop	{r7, pc}

08010b18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	b085      	sub	sp, #20
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	6078      	str	r0, [r7, #4]
 8010b20:	460b      	mov	r3, r1
 8010b22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b2a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010b2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	da0b      	bge.n	8010b4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010b34:	78fb      	ldrb	r3, [r7, #3]
 8010b36:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b3a:	68f9      	ldr	r1, [r7, #12]
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	009b      	lsls	r3, r3, #2
 8010b40:	4413      	add	r3, r2
 8010b42:	00db      	lsls	r3, r3, #3
 8010b44:	440b      	add	r3, r1
 8010b46:	3312      	adds	r3, #18
 8010b48:	781b      	ldrb	r3, [r3, #0]
 8010b4a:	e00b      	b.n	8010b64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010b4c:	78fb      	ldrb	r3, [r7, #3]
 8010b4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b52:	68f9      	ldr	r1, [r7, #12]
 8010b54:	4613      	mov	r3, r2
 8010b56:	009b      	lsls	r3, r3, #2
 8010b58:	4413      	add	r3, r2
 8010b5a:	00db      	lsls	r3, r3, #3
 8010b5c:	440b      	add	r3, r1
 8010b5e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010b62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3714      	adds	r7, #20
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr

08010b70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b084      	sub	sp, #16
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	460b      	mov	r3, r1
 8010b7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b80:	2300      	movs	r3, #0
 8010b82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b8a:	78fa      	ldrb	r2, [r7, #3]
 8010b8c:	4611      	mov	r1, r2
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7f6 fdbd 	bl	800770e <HAL_PCD_SetAddress>
 8010b94:	4603      	mov	r3, r0
 8010b96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b98:	7bfb      	ldrb	r3, [r7, #15]
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	f000 f8b0 	bl	8010d00 <USBD_Get_USB_Status>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ba4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3710      	adds	r7, #16
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}

08010bae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010bae:	b580      	push	{r7, lr}
 8010bb0:	b086      	sub	sp, #24
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	60f8      	str	r0, [r7, #12]
 8010bb6:	607a      	str	r2, [r7, #4]
 8010bb8:	603b      	str	r3, [r7, #0]
 8010bba:	460b      	mov	r3, r1
 8010bbc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010bcc:	7af9      	ldrb	r1, [r7, #11]
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	f7f6 feb0 	bl	8007936 <HAL_PCD_EP_Transmit>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bda:	7dfb      	ldrb	r3, [r7, #23]
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f000 f88f 	bl	8010d00 <USBD_Get_USB_Status>
 8010be2:	4603      	mov	r3, r0
 8010be4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010be6:	7dbb      	ldrb	r3, [r7, #22]
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3718      	adds	r7, #24
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b086      	sub	sp, #24
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	607a      	str	r2, [r7, #4]
 8010bfa:	603b      	str	r3, [r7, #0]
 8010bfc:	460b      	mov	r3, r1
 8010bfe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c00:	2300      	movs	r3, #0
 8010c02:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c04:	2300      	movs	r3, #0
 8010c06:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010c0e:	7af9      	ldrb	r1, [r7, #11]
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	687a      	ldr	r2, [r7, #4]
 8010c14:	f7f6 fe46 	bl	80078a4 <HAL_PCD_EP_Receive>
 8010c18:	4603      	mov	r3, r0
 8010c1a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c1c:	7dfb      	ldrb	r3, [r7, #23]
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f000 f86e 	bl	8010d00 <USBD_Get_USB_Status>
 8010c24:	4603      	mov	r3, r0
 8010c26:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010c28:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	3718      	adds	r7, #24
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	bd80      	pop	{r7, pc}

08010c32 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c32:	b580      	push	{r7, lr}
 8010c34:	b082      	sub	sp, #8
 8010c36:	af00      	add	r7, sp, #0
 8010c38:	6078      	str	r0, [r7, #4]
 8010c3a:	460b      	mov	r3, r1
 8010c3c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010c44:	78fa      	ldrb	r2, [r7, #3]
 8010c46:	4611      	mov	r1, r2
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f7f6 fe5c 	bl	8007906 <HAL_PCD_EP_GetRxCount>
 8010c4e:	4603      	mov	r3, r0
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3708      	adds	r7, #8
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}

08010c58 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	460b      	mov	r3, r1
 8010c62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010c64:	78fb      	ldrb	r3, [r7, #3]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d002      	beq.n	8010c70 <HAL_PCDEx_LPM_Callback+0x18>
 8010c6a:	2b01      	cmp	r3, #1
 8010c6c:	d013      	beq.n	8010c96 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010c6e:	e023      	b.n	8010cb8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	7a5b      	ldrb	r3, [r3, #9]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d007      	beq.n	8010c88 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010c78:	f000 f83c 	bl	8010cf4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010c7c:	4b10      	ldr	r3, [pc, #64]	@ (8010cc0 <HAL_PCDEx_LPM_Callback+0x68>)
 8010c7e:	691b      	ldr	r3, [r3, #16]
 8010c80:	4a0f      	ldr	r2, [pc, #60]	@ (8010cc0 <HAL_PCDEx_LPM_Callback+0x68>)
 8010c82:	f023 0306 	bic.w	r3, r3, #6
 8010c86:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f7fe fc86 	bl	800f5a0 <USBD_LL_Resume>
    break;
 8010c94:	e010      	b.n	8010cb8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7fe fc69 	bl	800f574 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	7a5b      	ldrb	r3, [r3, #9]
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d005      	beq.n	8010cb6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010caa:	4b05      	ldr	r3, [pc, #20]	@ (8010cc0 <HAL_PCDEx_LPM_Callback+0x68>)
 8010cac:	691b      	ldr	r3, [r3, #16]
 8010cae:	4a04      	ldr	r2, [pc, #16]	@ (8010cc0 <HAL_PCDEx_LPM_Callback+0x68>)
 8010cb0:	f043 0306 	orr.w	r3, r3, #6
 8010cb4:	6113      	str	r3, [r2, #16]
    break;
 8010cb6:	bf00      	nop
}
 8010cb8:	bf00      	nop
 8010cba:	3708      	adds	r7, #8
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}
 8010cc0:	e000ed00 	.word	0xe000ed00

08010cc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010cc4:	b480      	push	{r7}
 8010cc6:	b083      	sub	sp, #12
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010ccc:	4b03      	ldr	r3, [pc, #12]	@ (8010cdc <USBD_static_malloc+0x18>)
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	370c      	adds	r7, #12
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd8:	4770      	bx	lr
 8010cda:	bf00      	nop
 8010cdc:	20002378 	.word	0x20002378

08010ce0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b083      	sub	sp, #12
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]

}
 8010ce8:	bf00      	nop
 8010cea:	370c      	adds	r7, #12
 8010cec:	46bd      	mov	sp, r7
 8010cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf2:	4770      	bx	lr

08010cf4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010cf8:	f7f0 fe88 	bl	8001a0c <SystemClock_Config>
}
 8010cfc:	bf00      	nop
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b085      	sub	sp, #20
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	4603      	mov	r3, r0
 8010d08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010d0e:	79fb      	ldrb	r3, [r7, #7]
 8010d10:	2b03      	cmp	r3, #3
 8010d12:	d817      	bhi.n	8010d44 <USBD_Get_USB_Status+0x44>
 8010d14:	a201      	add	r2, pc, #4	@ (adr r2, 8010d1c <USBD_Get_USB_Status+0x1c>)
 8010d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d1a:	bf00      	nop
 8010d1c:	08010d2d 	.word	0x08010d2d
 8010d20:	08010d33 	.word	0x08010d33
 8010d24:	08010d39 	.word	0x08010d39
 8010d28:	08010d3f 	.word	0x08010d3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8010d30:	e00b      	b.n	8010d4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010d32:	2303      	movs	r3, #3
 8010d34:	73fb      	strb	r3, [r7, #15]
    break;
 8010d36:	e008      	b.n	8010d4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010d38:	2301      	movs	r3, #1
 8010d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8010d3c:	e005      	b.n	8010d4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010d3e:	2303      	movs	r3, #3
 8010d40:	73fb      	strb	r3, [r7, #15]
    break;
 8010d42:	e002      	b.n	8010d4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010d44:	2303      	movs	r3, #3
 8010d46:	73fb      	strb	r3, [r7, #15]
    break;
 8010d48:	bf00      	nop
  }
  return usb_status;
 8010d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3714      	adds	r7, #20
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <__cvt>:
 8010d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d5c:	ec57 6b10 	vmov	r6, r7, d0
 8010d60:	2f00      	cmp	r7, #0
 8010d62:	460c      	mov	r4, r1
 8010d64:	4619      	mov	r1, r3
 8010d66:	463b      	mov	r3, r7
 8010d68:	bfbb      	ittet	lt
 8010d6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010d6e:	461f      	movlt	r7, r3
 8010d70:	2300      	movge	r3, #0
 8010d72:	232d      	movlt	r3, #45	@ 0x2d
 8010d74:	700b      	strb	r3, [r1, #0]
 8010d76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010d7c:	4691      	mov	r9, r2
 8010d7e:	f023 0820 	bic.w	r8, r3, #32
 8010d82:	bfbc      	itt	lt
 8010d84:	4632      	movlt	r2, r6
 8010d86:	4616      	movlt	r6, r2
 8010d88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010d8c:	d005      	beq.n	8010d9a <__cvt+0x42>
 8010d8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010d92:	d100      	bne.n	8010d96 <__cvt+0x3e>
 8010d94:	3401      	adds	r4, #1
 8010d96:	2102      	movs	r1, #2
 8010d98:	e000      	b.n	8010d9c <__cvt+0x44>
 8010d9a:	2103      	movs	r1, #3
 8010d9c:	ab03      	add	r3, sp, #12
 8010d9e:	9301      	str	r3, [sp, #4]
 8010da0:	ab02      	add	r3, sp, #8
 8010da2:	9300      	str	r3, [sp, #0]
 8010da4:	ec47 6b10 	vmov	d0, r6, r7
 8010da8:	4653      	mov	r3, sl
 8010daa:	4622      	mov	r2, r4
 8010dac:	f001 f8c0 	bl	8011f30 <_dtoa_r>
 8010db0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010db4:	4605      	mov	r5, r0
 8010db6:	d119      	bne.n	8010dec <__cvt+0x94>
 8010db8:	f019 0f01 	tst.w	r9, #1
 8010dbc:	d00e      	beq.n	8010ddc <__cvt+0x84>
 8010dbe:	eb00 0904 	add.w	r9, r0, r4
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	2300      	movs	r3, #0
 8010dc6:	4630      	mov	r0, r6
 8010dc8:	4639      	mov	r1, r7
 8010dca:	f7ef fea5 	bl	8000b18 <__aeabi_dcmpeq>
 8010dce:	b108      	cbz	r0, 8010dd4 <__cvt+0x7c>
 8010dd0:	f8cd 900c 	str.w	r9, [sp, #12]
 8010dd4:	2230      	movs	r2, #48	@ 0x30
 8010dd6:	9b03      	ldr	r3, [sp, #12]
 8010dd8:	454b      	cmp	r3, r9
 8010dda:	d31e      	bcc.n	8010e1a <__cvt+0xc2>
 8010ddc:	9b03      	ldr	r3, [sp, #12]
 8010dde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010de0:	1b5b      	subs	r3, r3, r5
 8010de2:	4628      	mov	r0, r5
 8010de4:	6013      	str	r3, [r2, #0]
 8010de6:	b004      	add	sp, #16
 8010de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010df0:	eb00 0904 	add.w	r9, r0, r4
 8010df4:	d1e5      	bne.n	8010dc2 <__cvt+0x6a>
 8010df6:	7803      	ldrb	r3, [r0, #0]
 8010df8:	2b30      	cmp	r3, #48	@ 0x30
 8010dfa:	d10a      	bne.n	8010e12 <__cvt+0xba>
 8010dfc:	2200      	movs	r2, #0
 8010dfe:	2300      	movs	r3, #0
 8010e00:	4630      	mov	r0, r6
 8010e02:	4639      	mov	r1, r7
 8010e04:	f7ef fe88 	bl	8000b18 <__aeabi_dcmpeq>
 8010e08:	b918      	cbnz	r0, 8010e12 <__cvt+0xba>
 8010e0a:	f1c4 0401 	rsb	r4, r4, #1
 8010e0e:	f8ca 4000 	str.w	r4, [sl]
 8010e12:	f8da 3000 	ldr.w	r3, [sl]
 8010e16:	4499      	add	r9, r3
 8010e18:	e7d3      	b.n	8010dc2 <__cvt+0x6a>
 8010e1a:	1c59      	adds	r1, r3, #1
 8010e1c:	9103      	str	r1, [sp, #12]
 8010e1e:	701a      	strb	r2, [r3, #0]
 8010e20:	e7d9      	b.n	8010dd6 <__cvt+0x7e>

08010e22 <__exponent>:
 8010e22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010e24:	2900      	cmp	r1, #0
 8010e26:	bfba      	itte	lt
 8010e28:	4249      	neglt	r1, r1
 8010e2a:	232d      	movlt	r3, #45	@ 0x2d
 8010e2c:	232b      	movge	r3, #43	@ 0x2b
 8010e2e:	2909      	cmp	r1, #9
 8010e30:	7002      	strb	r2, [r0, #0]
 8010e32:	7043      	strb	r3, [r0, #1]
 8010e34:	dd29      	ble.n	8010e8a <__exponent+0x68>
 8010e36:	f10d 0307 	add.w	r3, sp, #7
 8010e3a:	461d      	mov	r5, r3
 8010e3c:	270a      	movs	r7, #10
 8010e3e:	461a      	mov	r2, r3
 8010e40:	fbb1 f6f7 	udiv	r6, r1, r7
 8010e44:	fb07 1416 	mls	r4, r7, r6, r1
 8010e48:	3430      	adds	r4, #48	@ 0x30
 8010e4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010e4e:	460c      	mov	r4, r1
 8010e50:	2c63      	cmp	r4, #99	@ 0x63
 8010e52:	f103 33ff 	add.w	r3, r3, #4294967295
 8010e56:	4631      	mov	r1, r6
 8010e58:	dcf1      	bgt.n	8010e3e <__exponent+0x1c>
 8010e5a:	3130      	adds	r1, #48	@ 0x30
 8010e5c:	1e94      	subs	r4, r2, #2
 8010e5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010e62:	1c41      	adds	r1, r0, #1
 8010e64:	4623      	mov	r3, r4
 8010e66:	42ab      	cmp	r3, r5
 8010e68:	d30a      	bcc.n	8010e80 <__exponent+0x5e>
 8010e6a:	f10d 0309 	add.w	r3, sp, #9
 8010e6e:	1a9b      	subs	r3, r3, r2
 8010e70:	42ac      	cmp	r4, r5
 8010e72:	bf88      	it	hi
 8010e74:	2300      	movhi	r3, #0
 8010e76:	3302      	adds	r3, #2
 8010e78:	4403      	add	r3, r0
 8010e7a:	1a18      	subs	r0, r3, r0
 8010e7c:	b003      	add	sp, #12
 8010e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e80:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010e84:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010e88:	e7ed      	b.n	8010e66 <__exponent+0x44>
 8010e8a:	2330      	movs	r3, #48	@ 0x30
 8010e8c:	3130      	adds	r1, #48	@ 0x30
 8010e8e:	7083      	strb	r3, [r0, #2]
 8010e90:	70c1      	strb	r1, [r0, #3]
 8010e92:	1d03      	adds	r3, r0, #4
 8010e94:	e7f1      	b.n	8010e7a <__exponent+0x58>
	...

08010e98 <_printf_float>:
 8010e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e9c:	b08d      	sub	sp, #52	@ 0x34
 8010e9e:	460c      	mov	r4, r1
 8010ea0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010ea4:	4616      	mov	r6, r2
 8010ea6:	461f      	mov	r7, r3
 8010ea8:	4605      	mov	r5, r0
 8010eaa:	f000 ff2d 	bl	8011d08 <_localeconv_r>
 8010eae:	6803      	ldr	r3, [r0, #0]
 8010eb0:	9304      	str	r3, [sp, #16]
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7ef fa04 	bl	80002c0 <strlen>
 8010eb8:	2300      	movs	r3, #0
 8010eba:	930a      	str	r3, [sp, #40]	@ 0x28
 8010ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8010ec0:	9005      	str	r0, [sp, #20]
 8010ec2:	3307      	adds	r3, #7
 8010ec4:	f023 0307 	bic.w	r3, r3, #7
 8010ec8:	f103 0208 	add.w	r2, r3, #8
 8010ecc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010ed0:	f8d4 b000 	ldr.w	fp, [r4]
 8010ed4:	f8c8 2000 	str.w	r2, [r8]
 8010ed8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010edc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8010ee0:	9307      	str	r3, [sp, #28]
 8010ee2:	f8cd 8018 	str.w	r8, [sp, #24]
 8010ee6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8010eea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010eee:	4b9c      	ldr	r3, [pc, #624]	@ (8011160 <_printf_float+0x2c8>)
 8010ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ef4:	f7ef fe42 	bl	8000b7c <__aeabi_dcmpun>
 8010ef8:	bb70      	cbnz	r0, 8010f58 <_printf_float+0xc0>
 8010efa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010efe:	4b98      	ldr	r3, [pc, #608]	@ (8011160 <_printf_float+0x2c8>)
 8010f00:	f04f 32ff 	mov.w	r2, #4294967295
 8010f04:	f7ef fe1c 	bl	8000b40 <__aeabi_dcmple>
 8010f08:	bb30      	cbnz	r0, 8010f58 <_printf_float+0xc0>
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	4640      	mov	r0, r8
 8010f10:	4649      	mov	r1, r9
 8010f12:	f7ef fe0b 	bl	8000b2c <__aeabi_dcmplt>
 8010f16:	b110      	cbz	r0, 8010f1e <_printf_float+0x86>
 8010f18:	232d      	movs	r3, #45	@ 0x2d
 8010f1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f1e:	4a91      	ldr	r2, [pc, #580]	@ (8011164 <_printf_float+0x2cc>)
 8010f20:	4b91      	ldr	r3, [pc, #580]	@ (8011168 <_printf_float+0x2d0>)
 8010f22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8010f26:	bf94      	ite	ls
 8010f28:	4690      	movls	r8, r2
 8010f2a:	4698      	movhi	r8, r3
 8010f2c:	2303      	movs	r3, #3
 8010f2e:	6123      	str	r3, [r4, #16]
 8010f30:	f02b 0304 	bic.w	r3, fp, #4
 8010f34:	6023      	str	r3, [r4, #0]
 8010f36:	f04f 0900 	mov.w	r9, #0
 8010f3a:	9700      	str	r7, [sp, #0]
 8010f3c:	4633      	mov	r3, r6
 8010f3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010f40:	4621      	mov	r1, r4
 8010f42:	4628      	mov	r0, r5
 8010f44:	f000 f9d2 	bl	80112ec <_printf_common>
 8010f48:	3001      	adds	r0, #1
 8010f4a:	f040 808d 	bne.w	8011068 <_printf_float+0x1d0>
 8010f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f52:	b00d      	add	sp, #52	@ 0x34
 8010f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f58:	4642      	mov	r2, r8
 8010f5a:	464b      	mov	r3, r9
 8010f5c:	4640      	mov	r0, r8
 8010f5e:	4649      	mov	r1, r9
 8010f60:	f7ef fe0c 	bl	8000b7c <__aeabi_dcmpun>
 8010f64:	b140      	cbz	r0, 8010f78 <_printf_float+0xe0>
 8010f66:	464b      	mov	r3, r9
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	bfbc      	itt	lt
 8010f6c:	232d      	movlt	r3, #45	@ 0x2d
 8010f6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010f72:	4a7e      	ldr	r2, [pc, #504]	@ (801116c <_printf_float+0x2d4>)
 8010f74:	4b7e      	ldr	r3, [pc, #504]	@ (8011170 <_printf_float+0x2d8>)
 8010f76:	e7d4      	b.n	8010f22 <_printf_float+0x8a>
 8010f78:	6863      	ldr	r3, [r4, #4]
 8010f7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010f7e:	9206      	str	r2, [sp, #24]
 8010f80:	1c5a      	adds	r2, r3, #1
 8010f82:	d13b      	bne.n	8010ffc <_printf_float+0x164>
 8010f84:	2306      	movs	r3, #6
 8010f86:	6063      	str	r3, [r4, #4]
 8010f88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	6022      	str	r2, [r4, #0]
 8010f90:	9303      	str	r3, [sp, #12]
 8010f92:	ab0a      	add	r3, sp, #40	@ 0x28
 8010f94:	e9cd a301 	strd	sl, r3, [sp, #4]
 8010f98:	ab09      	add	r3, sp, #36	@ 0x24
 8010f9a:	9300      	str	r3, [sp, #0]
 8010f9c:	6861      	ldr	r1, [r4, #4]
 8010f9e:	ec49 8b10 	vmov	d0, r8, r9
 8010fa2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8010fa6:	4628      	mov	r0, r5
 8010fa8:	f7ff fed6 	bl	8010d58 <__cvt>
 8010fac:	9b06      	ldr	r3, [sp, #24]
 8010fae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010fb0:	2b47      	cmp	r3, #71	@ 0x47
 8010fb2:	4680      	mov	r8, r0
 8010fb4:	d129      	bne.n	801100a <_printf_float+0x172>
 8010fb6:	1cc8      	adds	r0, r1, #3
 8010fb8:	db02      	blt.n	8010fc0 <_printf_float+0x128>
 8010fba:	6863      	ldr	r3, [r4, #4]
 8010fbc:	4299      	cmp	r1, r3
 8010fbe:	dd41      	ble.n	8011044 <_printf_float+0x1ac>
 8010fc0:	f1aa 0a02 	sub.w	sl, sl, #2
 8010fc4:	fa5f fa8a 	uxtb.w	sl, sl
 8010fc8:	3901      	subs	r1, #1
 8010fca:	4652      	mov	r2, sl
 8010fcc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010fd0:	9109      	str	r1, [sp, #36]	@ 0x24
 8010fd2:	f7ff ff26 	bl	8010e22 <__exponent>
 8010fd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010fd8:	1813      	adds	r3, r2, r0
 8010fda:	2a01      	cmp	r2, #1
 8010fdc:	4681      	mov	r9, r0
 8010fde:	6123      	str	r3, [r4, #16]
 8010fe0:	dc02      	bgt.n	8010fe8 <_printf_float+0x150>
 8010fe2:	6822      	ldr	r2, [r4, #0]
 8010fe4:	07d2      	lsls	r2, r2, #31
 8010fe6:	d501      	bpl.n	8010fec <_printf_float+0x154>
 8010fe8:	3301      	adds	r3, #1
 8010fea:	6123      	str	r3, [r4, #16]
 8010fec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d0a2      	beq.n	8010f3a <_printf_float+0xa2>
 8010ff4:	232d      	movs	r3, #45	@ 0x2d
 8010ff6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010ffa:	e79e      	b.n	8010f3a <_printf_float+0xa2>
 8010ffc:	9a06      	ldr	r2, [sp, #24]
 8010ffe:	2a47      	cmp	r2, #71	@ 0x47
 8011000:	d1c2      	bne.n	8010f88 <_printf_float+0xf0>
 8011002:	2b00      	cmp	r3, #0
 8011004:	d1c0      	bne.n	8010f88 <_printf_float+0xf0>
 8011006:	2301      	movs	r3, #1
 8011008:	e7bd      	b.n	8010f86 <_printf_float+0xee>
 801100a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801100e:	d9db      	bls.n	8010fc8 <_printf_float+0x130>
 8011010:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011014:	d118      	bne.n	8011048 <_printf_float+0x1b0>
 8011016:	2900      	cmp	r1, #0
 8011018:	6863      	ldr	r3, [r4, #4]
 801101a:	dd0b      	ble.n	8011034 <_printf_float+0x19c>
 801101c:	6121      	str	r1, [r4, #16]
 801101e:	b913      	cbnz	r3, 8011026 <_printf_float+0x18e>
 8011020:	6822      	ldr	r2, [r4, #0]
 8011022:	07d0      	lsls	r0, r2, #31
 8011024:	d502      	bpl.n	801102c <_printf_float+0x194>
 8011026:	3301      	adds	r3, #1
 8011028:	440b      	add	r3, r1
 801102a:	6123      	str	r3, [r4, #16]
 801102c:	65a1      	str	r1, [r4, #88]	@ 0x58
 801102e:	f04f 0900 	mov.w	r9, #0
 8011032:	e7db      	b.n	8010fec <_printf_float+0x154>
 8011034:	b913      	cbnz	r3, 801103c <_printf_float+0x1a4>
 8011036:	6822      	ldr	r2, [r4, #0]
 8011038:	07d2      	lsls	r2, r2, #31
 801103a:	d501      	bpl.n	8011040 <_printf_float+0x1a8>
 801103c:	3302      	adds	r3, #2
 801103e:	e7f4      	b.n	801102a <_printf_float+0x192>
 8011040:	2301      	movs	r3, #1
 8011042:	e7f2      	b.n	801102a <_printf_float+0x192>
 8011044:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801104a:	4299      	cmp	r1, r3
 801104c:	db05      	blt.n	801105a <_printf_float+0x1c2>
 801104e:	6823      	ldr	r3, [r4, #0]
 8011050:	6121      	str	r1, [r4, #16]
 8011052:	07d8      	lsls	r0, r3, #31
 8011054:	d5ea      	bpl.n	801102c <_printf_float+0x194>
 8011056:	1c4b      	adds	r3, r1, #1
 8011058:	e7e7      	b.n	801102a <_printf_float+0x192>
 801105a:	2900      	cmp	r1, #0
 801105c:	bfd4      	ite	le
 801105e:	f1c1 0202 	rsble	r2, r1, #2
 8011062:	2201      	movgt	r2, #1
 8011064:	4413      	add	r3, r2
 8011066:	e7e0      	b.n	801102a <_printf_float+0x192>
 8011068:	6823      	ldr	r3, [r4, #0]
 801106a:	055a      	lsls	r2, r3, #21
 801106c:	d407      	bmi.n	801107e <_printf_float+0x1e6>
 801106e:	6923      	ldr	r3, [r4, #16]
 8011070:	4642      	mov	r2, r8
 8011072:	4631      	mov	r1, r6
 8011074:	4628      	mov	r0, r5
 8011076:	47b8      	blx	r7
 8011078:	3001      	adds	r0, #1
 801107a:	d12b      	bne.n	80110d4 <_printf_float+0x23c>
 801107c:	e767      	b.n	8010f4e <_printf_float+0xb6>
 801107e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011082:	f240 80dd 	bls.w	8011240 <_printf_float+0x3a8>
 8011086:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801108a:	2200      	movs	r2, #0
 801108c:	2300      	movs	r3, #0
 801108e:	f7ef fd43 	bl	8000b18 <__aeabi_dcmpeq>
 8011092:	2800      	cmp	r0, #0
 8011094:	d033      	beq.n	80110fe <_printf_float+0x266>
 8011096:	4a37      	ldr	r2, [pc, #220]	@ (8011174 <_printf_float+0x2dc>)
 8011098:	2301      	movs	r3, #1
 801109a:	4631      	mov	r1, r6
 801109c:	4628      	mov	r0, r5
 801109e:	47b8      	blx	r7
 80110a0:	3001      	adds	r0, #1
 80110a2:	f43f af54 	beq.w	8010f4e <_printf_float+0xb6>
 80110a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80110aa:	4543      	cmp	r3, r8
 80110ac:	db02      	blt.n	80110b4 <_printf_float+0x21c>
 80110ae:	6823      	ldr	r3, [r4, #0]
 80110b0:	07d8      	lsls	r0, r3, #31
 80110b2:	d50f      	bpl.n	80110d4 <_printf_float+0x23c>
 80110b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80110b8:	4631      	mov	r1, r6
 80110ba:	4628      	mov	r0, r5
 80110bc:	47b8      	blx	r7
 80110be:	3001      	adds	r0, #1
 80110c0:	f43f af45 	beq.w	8010f4e <_printf_float+0xb6>
 80110c4:	f04f 0900 	mov.w	r9, #0
 80110c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80110cc:	f104 0a1a 	add.w	sl, r4, #26
 80110d0:	45c8      	cmp	r8, r9
 80110d2:	dc09      	bgt.n	80110e8 <_printf_float+0x250>
 80110d4:	6823      	ldr	r3, [r4, #0]
 80110d6:	079b      	lsls	r3, r3, #30
 80110d8:	f100 8103 	bmi.w	80112e2 <_printf_float+0x44a>
 80110dc:	68e0      	ldr	r0, [r4, #12]
 80110de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80110e0:	4298      	cmp	r0, r3
 80110e2:	bfb8      	it	lt
 80110e4:	4618      	movlt	r0, r3
 80110e6:	e734      	b.n	8010f52 <_printf_float+0xba>
 80110e8:	2301      	movs	r3, #1
 80110ea:	4652      	mov	r2, sl
 80110ec:	4631      	mov	r1, r6
 80110ee:	4628      	mov	r0, r5
 80110f0:	47b8      	blx	r7
 80110f2:	3001      	adds	r0, #1
 80110f4:	f43f af2b 	beq.w	8010f4e <_printf_float+0xb6>
 80110f8:	f109 0901 	add.w	r9, r9, #1
 80110fc:	e7e8      	b.n	80110d0 <_printf_float+0x238>
 80110fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011100:	2b00      	cmp	r3, #0
 8011102:	dc39      	bgt.n	8011178 <_printf_float+0x2e0>
 8011104:	4a1b      	ldr	r2, [pc, #108]	@ (8011174 <_printf_float+0x2dc>)
 8011106:	2301      	movs	r3, #1
 8011108:	4631      	mov	r1, r6
 801110a:	4628      	mov	r0, r5
 801110c:	47b8      	blx	r7
 801110e:	3001      	adds	r0, #1
 8011110:	f43f af1d 	beq.w	8010f4e <_printf_float+0xb6>
 8011114:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011118:	ea59 0303 	orrs.w	r3, r9, r3
 801111c:	d102      	bne.n	8011124 <_printf_float+0x28c>
 801111e:	6823      	ldr	r3, [r4, #0]
 8011120:	07d9      	lsls	r1, r3, #31
 8011122:	d5d7      	bpl.n	80110d4 <_printf_float+0x23c>
 8011124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011128:	4631      	mov	r1, r6
 801112a:	4628      	mov	r0, r5
 801112c:	47b8      	blx	r7
 801112e:	3001      	adds	r0, #1
 8011130:	f43f af0d 	beq.w	8010f4e <_printf_float+0xb6>
 8011134:	f04f 0a00 	mov.w	sl, #0
 8011138:	f104 0b1a 	add.w	fp, r4, #26
 801113c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801113e:	425b      	negs	r3, r3
 8011140:	4553      	cmp	r3, sl
 8011142:	dc01      	bgt.n	8011148 <_printf_float+0x2b0>
 8011144:	464b      	mov	r3, r9
 8011146:	e793      	b.n	8011070 <_printf_float+0x1d8>
 8011148:	2301      	movs	r3, #1
 801114a:	465a      	mov	r2, fp
 801114c:	4631      	mov	r1, r6
 801114e:	4628      	mov	r0, r5
 8011150:	47b8      	blx	r7
 8011152:	3001      	adds	r0, #1
 8011154:	f43f aefb 	beq.w	8010f4e <_printf_float+0xb6>
 8011158:	f10a 0a01 	add.w	sl, sl, #1
 801115c:	e7ee      	b.n	801113c <_printf_float+0x2a4>
 801115e:	bf00      	nop
 8011160:	7fefffff 	.word	0x7fefffff
 8011164:	08016f48 	.word	0x08016f48
 8011168:	08016f4c 	.word	0x08016f4c
 801116c:	08016f50 	.word	0x08016f50
 8011170:	08016f54 	.word	0x08016f54
 8011174:	080172e8 	.word	0x080172e8
 8011178:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801117a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801117e:	4553      	cmp	r3, sl
 8011180:	bfa8      	it	ge
 8011182:	4653      	movge	r3, sl
 8011184:	2b00      	cmp	r3, #0
 8011186:	4699      	mov	r9, r3
 8011188:	dc36      	bgt.n	80111f8 <_printf_float+0x360>
 801118a:	f04f 0b00 	mov.w	fp, #0
 801118e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011192:	f104 021a 	add.w	r2, r4, #26
 8011196:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011198:	9306      	str	r3, [sp, #24]
 801119a:	eba3 0309 	sub.w	r3, r3, r9
 801119e:	455b      	cmp	r3, fp
 80111a0:	dc31      	bgt.n	8011206 <_printf_float+0x36e>
 80111a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111a4:	459a      	cmp	sl, r3
 80111a6:	dc3a      	bgt.n	801121e <_printf_float+0x386>
 80111a8:	6823      	ldr	r3, [r4, #0]
 80111aa:	07da      	lsls	r2, r3, #31
 80111ac:	d437      	bmi.n	801121e <_printf_float+0x386>
 80111ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111b0:	ebaa 0903 	sub.w	r9, sl, r3
 80111b4:	9b06      	ldr	r3, [sp, #24]
 80111b6:	ebaa 0303 	sub.w	r3, sl, r3
 80111ba:	4599      	cmp	r9, r3
 80111bc:	bfa8      	it	ge
 80111be:	4699      	movge	r9, r3
 80111c0:	f1b9 0f00 	cmp.w	r9, #0
 80111c4:	dc33      	bgt.n	801122e <_printf_float+0x396>
 80111c6:	f04f 0800 	mov.w	r8, #0
 80111ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80111ce:	f104 0b1a 	add.w	fp, r4, #26
 80111d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80111d4:	ebaa 0303 	sub.w	r3, sl, r3
 80111d8:	eba3 0309 	sub.w	r3, r3, r9
 80111dc:	4543      	cmp	r3, r8
 80111de:	f77f af79 	ble.w	80110d4 <_printf_float+0x23c>
 80111e2:	2301      	movs	r3, #1
 80111e4:	465a      	mov	r2, fp
 80111e6:	4631      	mov	r1, r6
 80111e8:	4628      	mov	r0, r5
 80111ea:	47b8      	blx	r7
 80111ec:	3001      	adds	r0, #1
 80111ee:	f43f aeae 	beq.w	8010f4e <_printf_float+0xb6>
 80111f2:	f108 0801 	add.w	r8, r8, #1
 80111f6:	e7ec      	b.n	80111d2 <_printf_float+0x33a>
 80111f8:	4642      	mov	r2, r8
 80111fa:	4631      	mov	r1, r6
 80111fc:	4628      	mov	r0, r5
 80111fe:	47b8      	blx	r7
 8011200:	3001      	adds	r0, #1
 8011202:	d1c2      	bne.n	801118a <_printf_float+0x2f2>
 8011204:	e6a3      	b.n	8010f4e <_printf_float+0xb6>
 8011206:	2301      	movs	r3, #1
 8011208:	4631      	mov	r1, r6
 801120a:	4628      	mov	r0, r5
 801120c:	9206      	str	r2, [sp, #24]
 801120e:	47b8      	blx	r7
 8011210:	3001      	adds	r0, #1
 8011212:	f43f ae9c 	beq.w	8010f4e <_printf_float+0xb6>
 8011216:	9a06      	ldr	r2, [sp, #24]
 8011218:	f10b 0b01 	add.w	fp, fp, #1
 801121c:	e7bb      	b.n	8011196 <_printf_float+0x2fe>
 801121e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011222:	4631      	mov	r1, r6
 8011224:	4628      	mov	r0, r5
 8011226:	47b8      	blx	r7
 8011228:	3001      	adds	r0, #1
 801122a:	d1c0      	bne.n	80111ae <_printf_float+0x316>
 801122c:	e68f      	b.n	8010f4e <_printf_float+0xb6>
 801122e:	9a06      	ldr	r2, [sp, #24]
 8011230:	464b      	mov	r3, r9
 8011232:	4442      	add	r2, r8
 8011234:	4631      	mov	r1, r6
 8011236:	4628      	mov	r0, r5
 8011238:	47b8      	blx	r7
 801123a:	3001      	adds	r0, #1
 801123c:	d1c3      	bne.n	80111c6 <_printf_float+0x32e>
 801123e:	e686      	b.n	8010f4e <_printf_float+0xb6>
 8011240:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011244:	f1ba 0f01 	cmp.w	sl, #1
 8011248:	dc01      	bgt.n	801124e <_printf_float+0x3b6>
 801124a:	07db      	lsls	r3, r3, #31
 801124c:	d536      	bpl.n	80112bc <_printf_float+0x424>
 801124e:	2301      	movs	r3, #1
 8011250:	4642      	mov	r2, r8
 8011252:	4631      	mov	r1, r6
 8011254:	4628      	mov	r0, r5
 8011256:	47b8      	blx	r7
 8011258:	3001      	adds	r0, #1
 801125a:	f43f ae78 	beq.w	8010f4e <_printf_float+0xb6>
 801125e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011262:	4631      	mov	r1, r6
 8011264:	4628      	mov	r0, r5
 8011266:	47b8      	blx	r7
 8011268:	3001      	adds	r0, #1
 801126a:	f43f ae70 	beq.w	8010f4e <_printf_float+0xb6>
 801126e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011272:	2200      	movs	r2, #0
 8011274:	2300      	movs	r3, #0
 8011276:	f10a 3aff 	add.w	sl, sl, #4294967295
 801127a:	f7ef fc4d 	bl	8000b18 <__aeabi_dcmpeq>
 801127e:	b9c0      	cbnz	r0, 80112b2 <_printf_float+0x41a>
 8011280:	4653      	mov	r3, sl
 8011282:	f108 0201 	add.w	r2, r8, #1
 8011286:	4631      	mov	r1, r6
 8011288:	4628      	mov	r0, r5
 801128a:	47b8      	blx	r7
 801128c:	3001      	adds	r0, #1
 801128e:	d10c      	bne.n	80112aa <_printf_float+0x412>
 8011290:	e65d      	b.n	8010f4e <_printf_float+0xb6>
 8011292:	2301      	movs	r3, #1
 8011294:	465a      	mov	r2, fp
 8011296:	4631      	mov	r1, r6
 8011298:	4628      	mov	r0, r5
 801129a:	47b8      	blx	r7
 801129c:	3001      	adds	r0, #1
 801129e:	f43f ae56 	beq.w	8010f4e <_printf_float+0xb6>
 80112a2:	f108 0801 	add.w	r8, r8, #1
 80112a6:	45d0      	cmp	r8, sl
 80112a8:	dbf3      	blt.n	8011292 <_printf_float+0x3fa>
 80112aa:	464b      	mov	r3, r9
 80112ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80112b0:	e6df      	b.n	8011072 <_printf_float+0x1da>
 80112b2:	f04f 0800 	mov.w	r8, #0
 80112b6:	f104 0b1a 	add.w	fp, r4, #26
 80112ba:	e7f4      	b.n	80112a6 <_printf_float+0x40e>
 80112bc:	2301      	movs	r3, #1
 80112be:	4642      	mov	r2, r8
 80112c0:	e7e1      	b.n	8011286 <_printf_float+0x3ee>
 80112c2:	2301      	movs	r3, #1
 80112c4:	464a      	mov	r2, r9
 80112c6:	4631      	mov	r1, r6
 80112c8:	4628      	mov	r0, r5
 80112ca:	47b8      	blx	r7
 80112cc:	3001      	adds	r0, #1
 80112ce:	f43f ae3e 	beq.w	8010f4e <_printf_float+0xb6>
 80112d2:	f108 0801 	add.w	r8, r8, #1
 80112d6:	68e3      	ldr	r3, [r4, #12]
 80112d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80112da:	1a5b      	subs	r3, r3, r1
 80112dc:	4543      	cmp	r3, r8
 80112de:	dcf0      	bgt.n	80112c2 <_printf_float+0x42a>
 80112e0:	e6fc      	b.n	80110dc <_printf_float+0x244>
 80112e2:	f04f 0800 	mov.w	r8, #0
 80112e6:	f104 0919 	add.w	r9, r4, #25
 80112ea:	e7f4      	b.n	80112d6 <_printf_float+0x43e>

080112ec <_printf_common>:
 80112ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112f0:	4616      	mov	r6, r2
 80112f2:	4698      	mov	r8, r3
 80112f4:	688a      	ldr	r2, [r1, #8]
 80112f6:	690b      	ldr	r3, [r1, #16]
 80112f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80112fc:	4293      	cmp	r3, r2
 80112fe:	bfb8      	it	lt
 8011300:	4613      	movlt	r3, r2
 8011302:	6033      	str	r3, [r6, #0]
 8011304:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011308:	4607      	mov	r7, r0
 801130a:	460c      	mov	r4, r1
 801130c:	b10a      	cbz	r2, 8011312 <_printf_common+0x26>
 801130e:	3301      	adds	r3, #1
 8011310:	6033      	str	r3, [r6, #0]
 8011312:	6823      	ldr	r3, [r4, #0]
 8011314:	0699      	lsls	r1, r3, #26
 8011316:	bf42      	ittt	mi
 8011318:	6833      	ldrmi	r3, [r6, #0]
 801131a:	3302      	addmi	r3, #2
 801131c:	6033      	strmi	r3, [r6, #0]
 801131e:	6825      	ldr	r5, [r4, #0]
 8011320:	f015 0506 	ands.w	r5, r5, #6
 8011324:	d106      	bne.n	8011334 <_printf_common+0x48>
 8011326:	f104 0a19 	add.w	sl, r4, #25
 801132a:	68e3      	ldr	r3, [r4, #12]
 801132c:	6832      	ldr	r2, [r6, #0]
 801132e:	1a9b      	subs	r3, r3, r2
 8011330:	42ab      	cmp	r3, r5
 8011332:	dc26      	bgt.n	8011382 <_printf_common+0x96>
 8011334:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011338:	6822      	ldr	r2, [r4, #0]
 801133a:	3b00      	subs	r3, #0
 801133c:	bf18      	it	ne
 801133e:	2301      	movne	r3, #1
 8011340:	0692      	lsls	r2, r2, #26
 8011342:	d42b      	bmi.n	801139c <_printf_common+0xb0>
 8011344:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011348:	4641      	mov	r1, r8
 801134a:	4638      	mov	r0, r7
 801134c:	47c8      	blx	r9
 801134e:	3001      	adds	r0, #1
 8011350:	d01e      	beq.n	8011390 <_printf_common+0xa4>
 8011352:	6823      	ldr	r3, [r4, #0]
 8011354:	6922      	ldr	r2, [r4, #16]
 8011356:	f003 0306 	and.w	r3, r3, #6
 801135a:	2b04      	cmp	r3, #4
 801135c:	bf02      	ittt	eq
 801135e:	68e5      	ldreq	r5, [r4, #12]
 8011360:	6833      	ldreq	r3, [r6, #0]
 8011362:	1aed      	subeq	r5, r5, r3
 8011364:	68a3      	ldr	r3, [r4, #8]
 8011366:	bf0c      	ite	eq
 8011368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801136c:	2500      	movne	r5, #0
 801136e:	4293      	cmp	r3, r2
 8011370:	bfc4      	itt	gt
 8011372:	1a9b      	subgt	r3, r3, r2
 8011374:	18ed      	addgt	r5, r5, r3
 8011376:	2600      	movs	r6, #0
 8011378:	341a      	adds	r4, #26
 801137a:	42b5      	cmp	r5, r6
 801137c:	d11a      	bne.n	80113b4 <_printf_common+0xc8>
 801137e:	2000      	movs	r0, #0
 8011380:	e008      	b.n	8011394 <_printf_common+0xa8>
 8011382:	2301      	movs	r3, #1
 8011384:	4652      	mov	r2, sl
 8011386:	4641      	mov	r1, r8
 8011388:	4638      	mov	r0, r7
 801138a:	47c8      	blx	r9
 801138c:	3001      	adds	r0, #1
 801138e:	d103      	bne.n	8011398 <_printf_common+0xac>
 8011390:	f04f 30ff 	mov.w	r0, #4294967295
 8011394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011398:	3501      	adds	r5, #1
 801139a:	e7c6      	b.n	801132a <_printf_common+0x3e>
 801139c:	18e1      	adds	r1, r4, r3
 801139e:	1c5a      	adds	r2, r3, #1
 80113a0:	2030      	movs	r0, #48	@ 0x30
 80113a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80113a6:	4422      	add	r2, r4
 80113a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80113ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80113b0:	3302      	adds	r3, #2
 80113b2:	e7c7      	b.n	8011344 <_printf_common+0x58>
 80113b4:	2301      	movs	r3, #1
 80113b6:	4622      	mov	r2, r4
 80113b8:	4641      	mov	r1, r8
 80113ba:	4638      	mov	r0, r7
 80113bc:	47c8      	blx	r9
 80113be:	3001      	adds	r0, #1
 80113c0:	d0e6      	beq.n	8011390 <_printf_common+0xa4>
 80113c2:	3601      	adds	r6, #1
 80113c4:	e7d9      	b.n	801137a <_printf_common+0x8e>
	...

080113c8 <_printf_i>:
 80113c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80113cc:	7e0f      	ldrb	r7, [r1, #24]
 80113ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80113d0:	2f78      	cmp	r7, #120	@ 0x78
 80113d2:	4691      	mov	r9, r2
 80113d4:	4680      	mov	r8, r0
 80113d6:	460c      	mov	r4, r1
 80113d8:	469a      	mov	sl, r3
 80113da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80113de:	d807      	bhi.n	80113f0 <_printf_i+0x28>
 80113e0:	2f62      	cmp	r7, #98	@ 0x62
 80113e2:	d80a      	bhi.n	80113fa <_printf_i+0x32>
 80113e4:	2f00      	cmp	r7, #0
 80113e6:	f000 80d2 	beq.w	801158e <_printf_i+0x1c6>
 80113ea:	2f58      	cmp	r7, #88	@ 0x58
 80113ec:	f000 80b9 	beq.w	8011562 <_printf_i+0x19a>
 80113f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80113f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80113f8:	e03a      	b.n	8011470 <_printf_i+0xa8>
 80113fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80113fe:	2b15      	cmp	r3, #21
 8011400:	d8f6      	bhi.n	80113f0 <_printf_i+0x28>
 8011402:	a101      	add	r1, pc, #4	@ (adr r1, 8011408 <_printf_i+0x40>)
 8011404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011408:	08011461 	.word	0x08011461
 801140c:	08011475 	.word	0x08011475
 8011410:	080113f1 	.word	0x080113f1
 8011414:	080113f1 	.word	0x080113f1
 8011418:	080113f1 	.word	0x080113f1
 801141c:	080113f1 	.word	0x080113f1
 8011420:	08011475 	.word	0x08011475
 8011424:	080113f1 	.word	0x080113f1
 8011428:	080113f1 	.word	0x080113f1
 801142c:	080113f1 	.word	0x080113f1
 8011430:	080113f1 	.word	0x080113f1
 8011434:	08011575 	.word	0x08011575
 8011438:	0801149f 	.word	0x0801149f
 801143c:	0801152f 	.word	0x0801152f
 8011440:	080113f1 	.word	0x080113f1
 8011444:	080113f1 	.word	0x080113f1
 8011448:	08011597 	.word	0x08011597
 801144c:	080113f1 	.word	0x080113f1
 8011450:	0801149f 	.word	0x0801149f
 8011454:	080113f1 	.word	0x080113f1
 8011458:	080113f1 	.word	0x080113f1
 801145c:	08011537 	.word	0x08011537
 8011460:	6833      	ldr	r3, [r6, #0]
 8011462:	1d1a      	adds	r2, r3, #4
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	6032      	str	r2, [r6, #0]
 8011468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801146c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011470:	2301      	movs	r3, #1
 8011472:	e09d      	b.n	80115b0 <_printf_i+0x1e8>
 8011474:	6833      	ldr	r3, [r6, #0]
 8011476:	6820      	ldr	r0, [r4, #0]
 8011478:	1d19      	adds	r1, r3, #4
 801147a:	6031      	str	r1, [r6, #0]
 801147c:	0606      	lsls	r6, r0, #24
 801147e:	d501      	bpl.n	8011484 <_printf_i+0xbc>
 8011480:	681d      	ldr	r5, [r3, #0]
 8011482:	e003      	b.n	801148c <_printf_i+0xc4>
 8011484:	0645      	lsls	r5, r0, #25
 8011486:	d5fb      	bpl.n	8011480 <_printf_i+0xb8>
 8011488:	f9b3 5000 	ldrsh.w	r5, [r3]
 801148c:	2d00      	cmp	r5, #0
 801148e:	da03      	bge.n	8011498 <_printf_i+0xd0>
 8011490:	232d      	movs	r3, #45	@ 0x2d
 8011492:	426d      	negs	r5, r5
 8011494:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011498:	4859      	ldr	r0, [pc, #356]	@ (8011600 <_printf_i+0x238>)
 801149a:	230a      	movs	r3, #10
 801149c:	e011      	b.n	80114c2 <_printf_i+0xfa>
 801149e:	6821      	ldr	r1, [r4, #0]
 80114a0:	6833      	ldr	r3, [r6, #0]
 80114a2:	0608      	lsls	r0, r1, #24
 80114a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80114a8:	d402      	bmi.n	80114b0 <_printf_i+0xe8>
 80114aa:	0649      	lsls	r1, r1, #25
 80114ac:	bf48      	it	mi
 80114ae:	b2ad      	uxthmi	r5, r5
 80114b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80114b2:	4853      	ldr	r0, [pc, #332]	@ (8011600 <_printf_i+0x238>)
 80114b4:	6033      	str	r3, [r6, #0]
 80114b6:	bf14      	ite	ne
 80114b8:	230a      	movne	r3, #10
 80114ba:	2308      	moveq	r3, #8
 80114bc:	2100      	movs	r1, #0
 80114be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80114c2:	6866      	ldr	r6, [r4, #4]
 80114c4:	60a6      	str	r6, [r4, #8]
 80114c6:	2e00      	cmp	r6, #0
 80114c8:	bfa2      	ittt	ge
 80114ca:	6821      	ldrge	r1, [r4, #0]
 80114cc:	f021 0104 	bicge.w	r1, r1, #4
 80114d0:	6021      	strge	r1, [r4, #0]
 80114d2:	b90d      	cbnz	r5, 80114d8 <_printf_i+0x110>
 80114d4:	2e00      	cmp	r6, #0
 80114d6:	d04b      	beq.n	8011570 <_printf_i+0x1a8>
 80114d8:	4616      	mov	r6, r2
 80114da:	fbb5 f1f3 	udiv	r1, r5, r3
 80114de:	fb03 5711 	mls	r7, r3, r1, r5
 80114e2:	5dc7      	ldrb	r7, [r0, r7]
 80114e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80114e8:	462f      	mov	r7, r5
 80114ea:	42bb      	cmp	r3, r7
 80114ec:	460d      	mov	r5, r1
 80114ee:	d9f4      	bls.n	80114da <_printf_i+0x112>
 80114f0:	2b08      	cmp	r3, #8
 80114f2:	d10b      	bne.n	801150c <_printf_i+0x144>
 80114f4:	6823      	ldr	r3, [r4, #0]
 80114f6:	07df      	lsls	r7, r3, #31
 80114f8:	d508      	bpl.n	801150c <_printf_i+0x144>
 80114fa:	6923      	ldr	r3, [r4, #16]
 80114fc:	6861      	ldr	r1, [r4, #4]
 80114fe:	4299      	cmp	r1, r3
 8011500:	bfde      	ittt	le
 8011502:	2330      	movle	r3, #48	@ 0x30
 8011504:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011508:	f106 36ff 	addle.w	r6, r6, #4294967295
 801150c:	1b92      	subs	r2, r2, r6
 801150e:	6122      	str	r2, [r4, #16]
 8011510:	f8cd a000 	str.w	sl, [sp]
 8011514:	464b      	mov	r3, r9
 8011516:	aa03      	add	r2, sp, #12
 8011518:	4621      	mov	r1, r4
 801151a:	4640      	mov	r0, r8
 801151c:	f7ff fee6 	bl	80112ec <_printf_common>
 8011520:	3001      	adds	r0, #1
 8011522:	d14a      	bne.n	80115ba <_printf_i+0x1f2>
 8011524:	f04f 30ff 	mov.w	r0, #4294967295
 8011528:	b004      	add	sp, #16
 801152a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801152e:	6823      	ldr	r3, [r4, #0]
 8011530:	f043 0320 	orr.w	r3, r3, #32
 8011534:	6023      	str	r3, [r4, #0]
 8011536:	4833      	ldr	r0, [pc, #204]	@ (8011604 <_printf_i+0x23c>)
 8011538:	2778      	movs	r7, #120	@ 0x78
 801153a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801153e:	6823      	ldr	r3, [r4, #0]
 8011540:	6831      	ldr	r1, [r6, #0]
 8011542:	061f      	lsls	r7, r3, #24
 8011544:	f851 5b04 	ldr.w	r5, [r1], #4
 8011548:	d402      	bmi.n	8011550 <_printf_i+0x188>
 801154a:	065f      	lsls	r7, r3, #25
 801154c:	bf48      	it	mi
 801154e:	b2ad      	uxthmi	r5, r5
 8011550:	6031      	str	r1, [r6, #0]
 8011552:	07d9      	lsls	r1, r3, #31
 8011554:	bf44      	itt	mi
 8011556:	f043 0320 	orrmi.w	r3, r3, #32
 801155a:	6023      	strmi	r3, [r4, #0]
 801155c:	b11d      	cbz	r5, 8011566 <_printf_i+0x19e>
 801155e:	2310      	movs	r3, #16
 8011560:	e7ac      	b.n	80114bc <_printf_i+0xf4>
 8011562:	4827      	ldr	r0, [pc, #156]	@ (8011600 <_printf_i+0x238>)
 8011564:	e7e9      	b.n	801153a <_printf_i+0x172>
 8011566:	6823      	ldr	r3, [r4, #0]
 8011568:	f023 0320 	bic.w	r3, r3, #32
 801156c:	6023      	str	r3, [r4, #0]
 801156e:	e7f6      	b.n	801155e <_printf_i+0x196>
 8011570:	4616      	mov	r6, r2
 8011572:	e7bd      	b.n	80114f0 <_printf_i+0x128>
 8011574:	6833      	ldr	r3, [r6, #0]
 8011576:	6825      	ldr	r5, [r4, #0]
 8011578:	6961      	ldr	r1, [r4, #20]
 801157a:	1d18      	adds	r0, r3, #4
 801157c:	6030      	str	r0, [r6, #0]
 801157e:	062e      	lsls	r6, r5, #24
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	d501      	bpl.n	8011588 <_printf_i+0x1c0>
 8011584:	6019      	str	r1, [r3, #0]
 8011586:	e002      	b.n	801158e <_printf_i+0x1c6>
 8011588:	0668      	lsls	r0, r5, #25
 801158a:	d5fb      	bpl.n	8011584 <_printf_i+0x1bc>
 801158c:	8019      	strh	r1, [r3, #0]
 801158e:	2300      	movs	r3, #0
 8011590:	6123      	str	r3, [r4, #16]
 8011592:	4616      	mov	r6, r2
 8011594:	e7bc      	b.n	8011510 <_printf_i+0x148>
 8011596:	6833      	ldr	r3, [r6, #0]
 8011598:	1d1a      	adds	r2, r3, #4
 801159a:	6032      	str	r2, [r6, #0]
 801159c:	681e      	ldr	r6, [r3, #0]
 801159e:	6862      	ldr	r2, [r4, #4]
 80115a0:	2100      	movs	r1, #0
 80115a2:	4630      	mov	r0, r6
 80115a4:	f7ee fe3c 	bl	8000220 <memchr>
 80115a8:	b108      	cbz	r0, 80115ae <_printf_i+0x1e6>
 80115aa:	1b80      	subs	r0, r0, r6
 80115ac:	6060      	str	r0, [r4, #4]
 80115ae:	6863      	ldr	r3, [r4, #4]
 80115b0:	6123      	str	r3, [r4, #16]
 80115b2:	2300      	movs	r3, #0
 80115b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80115b8:	e7aa      	b.n	8011510 <_printf_i+0x148>
 80115ba:	6923      	ldr	r3, [r4, #16]
 80115bc:	4632      	mov	r2, r6
 80115be:	4649      	mov	r1, r9
 80115c0:	4640      	mov	r0, r8
 80115c2:	47d0      	blx	sl
 80115c4:	3001      	adds	r0, #1
 80115c6:	d0ad      	beq.n	8011524 <_printf_i+0x15c>
 80115c8:	6823      	ldr	r3, [r4, #0]
 80115ca:	079b      	lsls	r3, r3, #30
 80115cc:	d413      	bmi.n	80115f6 <_printf_i+0x22e>
 80115ce:	68e0      	ldr	r0, [r4, #12]
 80115d0:	9b03      	ldr	r3, [sp, #12]
 80115d2:	4298      	cmp	r0, r3
 80115d4:	bfb8      	it	lt
 80115d6:	4618      	movlt	r0, r3
 80115d8:	e7a6      	b.n	8011528 <_printf_i+0x160>
 80115da:	2301      	movs	r3, #1
 80115dc:	4632      	mov	r2, r6
 80115de:	4649      	mov	r1, r9
 80115e0:	4640      	mov	r0, r8
 80115e2:	47d0      	blx	sl
 80115e4:	3001      	adds	r0, #1
 80115e6:	d09d      	beq.n	8011524 <_printf_i+0x15c>
 80115e8:	3501      	adds	r5, #1
 80115ea:	68e3      	ldr	r3, [r4, #12]
 80115ec:	9903      	ldr	r1, [sp, #12]
 80115ee:	1a5b      	subs	r3, r3, r1
 80115f0:	42ab      	cmp	r3, r5
 80115f2:	dcf2      	bgt.n	80115da <_printf_i+0x212>
 80115f4:	e7eb      	b.n	80115ce <_printf_i+0x206>
 80115f6:	2500      	movs	r5, #0
 80115f8:	f104 0619 	add.w	r6, r4, #25
 80115fc:	e7f5      	b.n	80115ea <_printf_i+0x222>
 80115fe:	bf00      	nop
 8011600:	08016f58 	.word	0x08016f58
 8011604:	08016f69 	.word	0x08016f69

08011608 <_scanf_float>:
 8011608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801160c:	b087      	sub	sp, #28
 801160e:	4617      	mov	r7, r2
 8011610:	9303      	str	r3, [sp, #12]
 8011612:	688b      	ldr	r3, [r1, #8]
 8011614:	1e5a      	subs	r2, r3, #1
 8011616:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801161a:	bf81      	itttt	hi
 801161c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011620:	eb03 0b05 	addhi.w	fp, r3, r5
 8011624:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011628:	608b      	strhi	r3, [r1, #8]
 801162a:	680b      	ldr	r3, [r1, #0]
 801162c:	460a      	mov	r2, r1
 801162e:	f04f 0500 	mov.w	r5, #0
 8011632:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8011636:	f842 3b1c 	str.w	r3, [r2], #28
 801163a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801163e:	4680      	mov	r8, r0
 8011640:	460c      	mov	r4, r1
 8011642:	bf98      	it	ls
 8011644:	f04f 0b00 	movls.w	fp, #0
 8011648:	9201      	str	r2, [sp, #4]
 801164a:	4616      	mov	r6, r2
 801164c:	46aa      	mov	sl, r5
 801164e:	46a9      	mov	r9, r5
 8011650:	9502      	str	r5, [sp, #8]
 8011652:	68a2      	ldr	r2, [r4, #8]
 8011654:	b152      	cbz	r2, 801166c <_scanf_float+0x64>
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	781b      	ldrb	r3, [r3, #0]
 801165a:	2b4e      	cmp	r3, #78	@ 0x4e
 801165c:	d864      	bhi.n	8011728 <_scanf_float+0x120>
 801165e:	2b40      	cmp	r3, #64	@ 0x40
 8011660:	d83c      	bhi.n	80116dc <_scanf_float+0xd4>
 8011662:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8011666:	b2c8      	uxtb	r0, r1
 8011668:	280e      	cmp	r0, #14
 801166a:	d93a      	bls.n	80116e2 <_scanf_float+0xda>
 801166c:	f1b9 0f00 	cmp.w	r9, #0
 8011670:	d003      	beq.n	801167a <_scanf_float+0x72>
 8011672:	6823      	ldr	r3, [r4, #0]
 8011674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011678:	6023      	str	r3, [r4, #0]
 801167a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801167e:	f1ba 0f01 	cmp.w	sl, #1
 8011682:	f200 8117 	bhi.w	80118b4 <_scanf_float+0x2ac>
 8011686:	9b01      	ldr	r3, [sp, #4]
 8011688:	429e      	cmp	r6, r3
 801168a:	f200 8108 	bhi.w	801189e <_scanf_float+0x296>
 801168e:	2001      	movs	r0, #1
 8011690:	b007      	add	sp, #28
 8011692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011696:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801169a:	2a0d      	cmp	r2, #13
 801169c:	d8e6      	bhi.n	801166c <_scanf_float+0x64>
 801169e:	a101      	add	r1, pc, #4	@ (adr r1, 80116a4 <_scanf_float+0x9c>)
 80116a0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80116a4:	080117eb 	.word	0x080117eb
 80116a8:	0801166d 	.word	0x0801166d
 80116ac:	0801166d 	.word	0x0801166d
 80116b0:	0801166d 	.word	0x0801166d
 80116b4:	0801184b 	.word	0x0801184b
 80116b8:	08011823 	.word	0x08011823
 80116bc:	0801166d 	.word	0x0801166d
 80116c0:	0801166d 	.word	0x0801166d
 80116c4:	080117f9 	.word	0x080117f9
 80116c8:	0801166d 	.word	0x0801166d
 80116cc:	0801166d 	.word	0x0801166d
 80116d0:	0801166d 	.word	0x0801166d
 80116d4:	0801166d 	.word	0x0801166d
 80116d8:	080117b1 	.word	0x080117b1
 80116dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80116e0:	e7db      	b.n	801169a <_scanf_float+0x92>
 80116e2:	290e      	cmp	r1, #14
 80116e4:	d8c2      	bhi.n	801166c <_scanf_float+0x64>
 80116e6:	a001      	add	r0, pc, #4	@ (adr r0, 80116ec <_scanf_float+0xe4>)
 80116e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80116ec:	080117a1 	.word	0x080117a1
 80116f0:	0801166d 	.word	0x0801166d
 80116f4:	080117a1 	.word	0x080117a1
 80116f8:	08011837 	.word	0x08011837
 80116fc:	0801166d 	.word	0x0801166d
 8011700:	08011749 	.word	0x08011749
 8011704:	08011787 	.word	0x08011787
 8011708:	08011787 	.word	0x08011787
 801170c:	08011787 	.word	0x08011787
 8011710:	08011787 	.word	0x08011787
 8011714:	08011787 	.word	0x08011787
 8011718:	08011787 	.word	0x08011787
 801171c:	08011787 	.word	0x08011787
 8011720:	08011787 	.word	0x08011787
 8011724:	08011787 	.word	0x08011787
 8011728:	2b6e      	cmp	r3, #110	@ 0x6e
 801172a:	d809      	bhi.n	8011740 <_scanf_float+0x138>
 801172c:	2b60      	cmp	r3, #96	@ 0x60
 801172e:	d8b2      	bhi.n	8011696 <_scanf_float+0x8e>
 8011730:	2b54      	cmp	r3, #84	@ 0x54
 8011732:	d07b      	beq.n	801182c <_scanf_float+0x224>
 8011734:	2b59      	cmp	r3, #89	@ 0x59
 8011736:	d199      	bne.n	801166c <_scanf_float+0x64>
 8011738:	2d07      	cmp	r5, #7
 801173a:	d197      	bne.n	801166c <_scanf_float+0x64>
 801173c:	2508      	movs	r5, #8
 801173e:	e02c      	b.n	801179a <_scanf_float+0x192>
 8011740:	2b74      	cmp	r3, #116	@ 0x74
 8011742:	d073      	beq.n	801182c <_scanf_float+0x224>
 8011744:	2b79      	cmp	r3, #121	@ 0x79
 8011746:	e7f6      	b.n	8011736 <_scanf_float+0x12e>
 8011748:	6821      	ldr	r1, [r4, #0]
 801174a:	05c8      	lsls	r0, r1, #23
 801174c:	d51b      	bpl.n	8011786 <_scanf_float+0x17e>
 801174e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011752:	6021      	str	r1, [r4, #0]
 8011754:	f109 0901 	add.w	r9, r9, #1
 8011758:	f1bb 0f00 	cmp.w	fp, #0
 801175c:	d003      	beq.n	8011766 <_scanf_float+0x15e>
 801175e:	3201      	adds	r2, #1
 8011760:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011764:	60a2      	str	r2, [r4, #8]
 8011766:	68a3      	ldr	r3, [r4, #8]
 8011768:	3b01      	subs	r3, #1
 801176a:	60a3      	str	r3, [r4, #8]
 801176c:	6923      	ldr	r3, [r4, #16]
 801176e:	3301      	adds	r3, #1
 8011770:	6123      	str	r3, [r4, #16]
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	3b01      	subs	r3, #1
 8011776:	2b00      	cmp	r3, #0
 8011778:	607b      	str	r3, [r7, #4]
 801177a:	f340 8087 	ble.w	801188c <_scanf_float+0x284>
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	3301      	adds	r3, #1
 8011782:	603b      	str	r3, [r7, #0]
 8011784:	e765      	b.n	8011652 <_scanf_float+0x4a>
 8011786:	eb1a 0105 	adds.w	r1, sl, r5
 801178a:	f47f af6f 	bne.w	801166c <_scanf_float+0x64>
 801178e:	6822      	ldr	r2, [r4, #0]
 8011790:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011794:	6022      	str	r2, [r4, #0]
 8011796:	460d      	mov	r5, r1
 8011798:	468a      	mov	sl, r1
 801179a:	f806 3b01 	strb.w	r3, [r6], #1
 801179e:	e7e2      	b.n	8011766 <_scanf_float+0x15e>
 80117a0:	6822      	ldr	r2, [r4, #0]
 80117a2:	0610      	lsls	r0, r2, #24
 80117a4:	f57f af62 	bpl.w	801166c <_scanf_float+0x64>
 80117a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80117ac:	6022      	str	r2, [r4, #0]
 80117ae:	e7f4      	b.n	801179a <_scanf_float+0x192>
 80117b0:	f1ba 0f00 	cmp.w	sl, #0
 80117b4:	d10e      	bne.n	80117d4 <_scanf_float+0x1cc>
 80117b6:	f1b9 0f00 	cmp.w	r9, #0
 80117ba:	d10e      	bne.n	80117da <_scanf_float+0x1d2>
 80117bc:	6822      	ldr	r2, [r4, #0]
 80117be:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80117c2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80117c6:	d108      	bne.n	80117da <_scanf_float+0x1d2>
 80117c8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80117cc:	6022      	str	r2, [r4, #0]
 80117ce:	f04f 0a01 	mov.w	sl, #1
 80117d2:	e7e2      	b.n	801179a <_scanf_float+0x192>
 80117d4:	f1ba 0f02 	cmp.w	sl, #2
 80117d8:	d055      	beq.n	8011886 <_scanf_float+0x27e>
 80117da:	2d01      	cmp	r5, #1
 80117dc:	d002      	beq.n	80117e4 <_scanf_float+0x1dc>
 80117de:	2d04      	cmp	r5, #4
 80117e0:	f47f af44 	bne.w	801166c <_scanf_float+0x64>
 80117e4:	3501      	adds	r5, #1
 80117e6:	b2ed      	uxtb	r5, r5
 80117e8:	e7d7      	b.n	801179a <_scanf_float+0x192>
 80117ea:	f1ba 0f01 	cmp.w	sl, #1
 80117ee:	f47f af3d 	bne.w	801166c <_scanf_float+0x64>
 80117f2:	f04f 0a02 	mov.w	sl, #2
 80117f6:	e7d0      	b.n	801179a <_scanf_float+0x192>
 80117f8:	b97d      	cbnz	r5, 801181a <_scanf_float+0x212>
 80117fa:	f1b9 0f00 	cmp.w	r9, #0
 80117fe:	f47f af38 	bne.w	8011672 <_scanf_float+0x6a>
 8011802:	6822      	ldr	r2, [r4, #0]
 8011804:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011808:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801180c:	f040 8108 	bne.w	8011a20 <_scanf_float+0x418>
 8011810:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011814:	6022      	str	r2, [r4, #0]
 8011816:	2501      	movs	r5, #1
 8011818:	e7bf      	b.n	801179a <_scanf_float+0x192>
 801181a:	2d03      	cmp	r5, #3
 801181c:	d0e2      	beq.n	80117e4 <_scanf_float+0x1dc>
 801181e:	2d05      	cmp	r5, #5
 8011820:	e7de      	b.n	80117e0 <_scanf_float+0x1d8>
 8011822:	2d02      	cmp	r5, #2
 8011824:	f47f af22 	bne.w	801166c <_scanf_float+0x64>
 8011828:	2503      	movs	r5, #3
 801182a:	e7b6      	b.n	801179a <_scanf_float+0x192>
 801182c:	2d06      	cmp	r5, #6
 801182e:	f47f af1d 	bne.w	801166c <_scanf_float+0x64>
 8011832:	2507      	movs	r5, #7
 8011834:	e7b1      	b.n	801179a <_scanf_float+0x192>
 8011836:	6822      	ldr	r2, [r4, #0]
 8011838:	0591      	lsls	r1, r2, #22
 801183a:	f57f af17 	bpl.w	801166c <_scanf_float+0x64>
 801183e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011842:	6022      	str	r2, [r4, #0]
 8011844:	f8cd 9008 	str.w	r9, [sp, #8]
 8011848:	e7a7      	b.n	801179a <_scanf_float+0x192>
 801184a:	6822      	ldr	r2, [r4, #0]
 801184c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011850:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011854:	d006      	beq.n	8011864 <_scanf_float+0x25c>
 8011856:	0550      	lsls	r0, r2, #21
 8011858:	f57f af08 	bpl.w	801166c <_scanf_float+0x64>
 801185c:	f1b9 0f00 	cmp.w	r9, #0
 8011860:	f000 80de 	beq.w	8011a20 <_scanf_float+0x418>
 8011864:	0591      	lsls	r1, r2, #22
 8011866:	bf58      	it	pl
 8011868:	9902      	ldrpl	r1, [sp, #8]
 801186a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801186e:	bf58      	it	pl
 8011870:	eba9 0101 	subpl.w	r1, r9, r1
 8011874:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011878:	bf58      	it	pl
 801187a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801187e:	6022      	str	r2, [r4, #0]
 8011880:	f04f 0900 	mov.w	r9, #0
 8011884:	e789      	b.n	801179a <_scanf_float+0x192>
 8011886:	f04f 0a03 	mov.w	sl, #3
 801188a:	e786      	b.n	801179a <_scanf_float+0x192>
 801188c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011890:	4639      	mov	r1, r7
 8011892:	4640      	mov	r0, r8
 8011894:	4798      	blx	r3
 8011896:	2800      	cmp	r0, #0
 8011898:	f43f aedb 	beq.w	8011652 <_scanf_float+0x4a>
 801189c:	e6e6      	b.n	801166c <_scanf_float+0x64>
 801189e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80118a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80118a6:	463a      	mov	r2, r7
 80118a8:	4640      	mov	r0, r8
 80118aa:	4798      	blx	r3
 80118ac:	6923      	ldr	r3, [r4, #16]
 80118ae:	3b01      	subs	r3, #1
 80118b0:	6123      	str	r3, [r4, #16]
 80118b2:	e6e8      	b.n	8011686 <_scanf_float+0x7e>
 80118b4:	1e6b      	subs	r3, r5, #1
 80118b6:	2b06      	cmp	r3, #6
 80118b8:	d824      	bhi.n	8011904 <_scanf_float+0x2fc>
 80118ba:	2d02      	cmp	r5, #2
 80118bc:	d836      	bhi.n	801192c <_scanf_float+0x324>
 80118be:	9b01      	ldr	r3, [sp, #4]
 80118c0:	429e      	cmp	r6, r3
 80118c2:	f67f aee4 	bls.w	801168e <_scanf_float+0x86>
 80118c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80118ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80118ce:	463a      	mov	r2, r7
 80118d0:	4640      	mov	r0, r8
 80118d2:	4798      	blx	r3
 80118d4:	6923      	ldr	r3, [r4, #16]
 80118d6:	3b01      	subs	r3, #1
 80118d8:	6123      	str	r3, [r4, #16]
 80118da:	e7f0      	b.n	80118be <_scanf_float+0x2b6>
 80118dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80118e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80118e4:	463a      	mov	r2, r7
 80118e6:	4640      	mov	r0, r8
 80118e8:	4798      	blx	r3
 80118ea:	6923      	ldr	r3, [r4, #16]
 80118ec:	3b01      	subs	r3, #1
 80118ee:	6123      	str	r3, [r4, #16]
 80118f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80118f4:	fa5f fa8a 	uxtb.w	sl, sl
 80118f8:	f1ba 0f02 	cmp.w	sl, #2
 80118fc:	d1ee      	bne.n	80118dc <_scanf_float+0x2d4>
 80118fe:	3d03      	subs	r5, #3
 8011900:	b2ed      	uxtb	r5, r5
 8011902:	1b76      	subs	r6, r6, r5
 8011904:	6823      	ldr	r3, [r4, #0]
 8011906:	05da      	lsls	r2, r3, #23
 8011908:	d530      	bpl.n	801196c <_scanf_float+0x364>
 801190a:	055b      	lsls	r3, r3, #21
 801190c:	d511      	bpl.n	8011932 <_scanf_float+0x32a>
 801190e:	9b01      	ldr	r3, [sp, #4]
 8011910:	429e      	cmp	r6, r3
 8011912:	f67f aebc 	bls.w	801168e <_scanf_float+0x86>
 8011916:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801191a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801191e:	463a      	mov	r2, r7
 8011920:	4640      	mov	r0, r8
 8011922:	4798      	blx	r3
 8011924:	6923      	ldr	r3, [r4, #16]
 8011926:	3b01      	subs	r3, #1
 8011928:	6123      	str	r3, [r4, #16]
 801192a:	e7f0      	b.n	801190e <_scanf_float+0x306>
 801192c:	46aa      	mov	sl, r5
 801192e:	46b3      	mov	fp, r6
 8011930:	e7de      	b.n	80118f0 <_scanf_float+0x2e8>
 8011932:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011936:	6923      	ldr	r3, [r4, #16]
 8011938:	2965      	cmp	r1, #101	@ 0x65
 801193a:	f103 33ff 	add.w	r3, r3, #4294967295
 801193e:	f106 35ff 	add.w	r5, r6, #4294967295
 8011942:	6123      	str	r3, [r4, #16]
 8011944:	d00c      	beq.n	8011960 <_scanf_float+0x358>
 8011946:	2945      	cmp	r1, #69	@ 0x45
 8011948:	d00a      	beq.n	8011960 <_scanf_float+0x358>
 801194a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801194e:	463a      	mov	r2, r7
 8011950:	4640      	mov	r0, r8
 8011952:	4798      	blx	r3
 8011954:	6923      	ldr	r3, [r4, #16]
 8011956:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801195a:	3b01      	subs	r3, #1
 801195c:	1eb5      	subs	r5, r6, #2
 801195e:	6123      	str	r3, [r4, #16]
 8011960:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011964:	463a      	mov	r2, r7
 8011966:	4640      	mov	r0, r8
 8011968:	4798      	blx	r3
 801196a:	462e      	mov	r6, r5
 801196c:	6822      	ldr	r2, [r4, #0]
 801196e:	f012 0210 	ands.w	r2, r2, #16
 8011972:	d001      	beq.n	8011978 <_scanf_float+0x370>
 8011974:	2000      	movs	r0, #0
 8011976:	e68b      	b.n	8011690 <_scanf_float+0x88>
 8011978:	7032      	strb	r2, [r6, #0]
 801197a:	6823      	ldr	r3, [r4, #0]
 801197c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011984:	d11c      	bne.n	80119c0 <_scanf_float+0x3b8>
 8011986:	9b02      	ldr	r3, [sp, #8]
 8011988:	454b      	cmp	r3, r9
 801198a:	eba3 0209 	sub.w	r2, r3, r9
 801198e:	d123      	bne.n	80119d8 <_scanf_float+0x3d0>
 8011990:	9901      	ldr	r1, [sp, #4]
 8011992:	2200      	movs	r2, #0
 8011994:	4640      	mov	r0, r8
 8011996:	f002 fc43 	bl	8014220 <_strtod_r>
 801199a:	9b03      	ldr	r3, [sp, #12]
 801199c:	6821      	ldr	r1, [r4, #0]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	f011 0f02 	tst.w	r1, #2
 80119a4:	ec57 6b10 	vmov	r6, r7, d0
 80119a8:	f103 0204 	add.w	r2, r3, #4
 80119ac:	d01f      	beq.n	80119ee <_scanf_float+0x3e6>
 80119ae:	9903      	ldr	r1, [sp, #12]
 80119b0:	600a      	str	r2, [r1, #0]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	e9c3 6700 	strd	r6, r7, [r3]
 80119b8:	68e3      	ldr	r3, [r4, #12]
 80119ba:	3301      	adds	r3, #1
 80119bc:	60e3      	str	r3, [r4, #12]
 80119be:	e7d9      	b.n	8011974 <_scanf_float+0x36c>
 80119c0:	9b04      	ldr	r3, [sp, #16]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d0e4      	beq.n	8011990 <_scanf_float+0x388>
 80119c6:	9905      	ldr	r1, [sp, #20]
 80119c8:	230a      	movs	r3, #10
 80119ca:	3101      	adds	r1, #1
 80119cc:	4640      	mov	r0, r8
 80119ce:	f002 fca7 	bl	8014320 <_strtol_r>
 80119d2:	9b04      	ldr	r3, [sp, #16]
 80119d4:	9e05      	ldr	r6, [sp, #20]
 80119d6:	1ac2      	subs	r2, r0, r3
 80119d8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80119dc:	429e      	cmp	r6, r3
 80119de:	bf28      	it	cs
 80119e0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80119e4:	4910      	ldr	r1, [pc, #64]	@ (8011a28 <_scanf_float+0x420>)
 80119e6:	4630      	mov	r0, r6
 80119e8:	f000 f8e4 	bl	8011bb4 <siprintf>
 80119ec:	e7d0      	b.n	8011990 <_scanf_float+0x388>
 80119ee:	f011 0f04 	tst.w	r1, #4
 80119f2:	9903      	ldr	r1, [sp, #12]
 80119f4:	600a      	str	r2, [r1, #0]
 80119f6:	d1dc      	bne.n	80119b2 <_scanf_float+0x3aa>
 80119f8:	681d      	ldr	r5, [r3, #0]
 80119fa:	4632      	mov	r2, r6
 80119fc:	463b      	mov	r3, r7
 80119fe:	4630      	mov	r0, r6
 8011a00:	4639      	mov	r1, r7
 8011a02:	f7ef f8bb 	bl	8000b7c <__aeabi_dcmpun>
 8011a06:	b128      	cbz	r0, 8011a14 <_scanf_float+0x40c>
 8011a08:	4808      	ldr	r0, [pc, #32]	@ (8011a2c <_scanf_float+0x424>)
 8011a0a:	f000 fa03 	bl	8011e14 <nanf>
 8011a0e:	ed85 0a00 	vstr	s0, [r5]
 8011a12:	e7d1      	b.n	80119b8 <_scanf_float+0x3b0>
 8011a14:	4630      	mov	r0, r6
 8011a16:	4639      	mov	r1, r7
 8011a18:	f7ef f90e 	bl	8000c38 <__aeabi_d2f>
 8011a1c:	6028      	str	r0, [r5, #0]
 8011a1e:	e7cb      	b.n	80119b8 <_scanf_float+0x3b0>
 8011a20:	f04f 0900 	mov.w	r9, #0
 8011a24:	e629      	b.n	801167a <_scanf_float+0x72>
 8011a26:	bf00      	nop
 8011a28:	08016f7a 	.word	0x08016f7a
 8011a2c:	08017330 	.word	0x08017330

08011a30 <std>:
 8011a30:	2300      	movs	r3, #0
 8011a32:	b510      	push	{r4, lr}
 8011a34:	4604      	mov	r4, r0
 8011a36:	e9c0 3300 	strd	r3, r3, [r0]
 8011a3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011a3e:	6083      	str	r3, [r0, #8]
 8011a40:	8181      	strh	r1, [r0, #12]
 8011a42:	6643      	str	r3, [r0, #100]	@ 0x64
 8011a44:	81c2      	strh	r2, [r0, #14]
 8011a46:	6183      	str	r3, [r0, #24]
 8011a48:	4619      	mov	r1, r3
 8011a4a:	2208      	movs	r2, #8
 8011a4c:	305c      	adds	r0, #92	@ 0x5c
 8011a4e:	f000 f940 	bl	8011cd2 <memset>
 8011a52:	4b0d      	ldr	r3, [pc, #52]	@ (8011a88 <std+0x58>)
 8011a54:	6263      	str	r3, [r4, #36]	@ 0x24
 8011a56:	4b0d      	ldr	r3, [pc, #52]	@ (8011a8c <std+0x5c>)
 8011a58:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8011a90 <std+0x60>)
 8011a5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8011a94 <std+0x64>)
 8011a60:	6323      	str	r3, [r4, #48]	@ 0x30
 8011a62:	4b0d      	ldr	r3, [pc, #52]	@ (8011a98 <std+0x68>)
 8011a64:	6224      	str	r4, [r4, #32]
 8011a66:	429c      	cmp	r4, r3
 8011a68:	d006      	beq.n	8011a78 <std+0x48>
 8011a6a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011a6e:	4294      	cmp	r4, r2
 8011a70:	d002      	beq.n	8011a78 <std+0x48>
 8011a72:	33d0      	adds	r3, #208	@ 0xd0
 8011a74:	429c      	cmp	r4, r3
 8011a76:	d105      	bne.n	8011a84 <std+0x54>
 8011a78:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a80:	f000 b9b6 	b.w	8011df0 <__retarget_lock_init_recursive>
 8011a84:	bd10      	pop	{r4, pc}
 8011a86:	bf00      	nop
 8011a88:	08011c49 	.word	0x08011c49
 8011a8c:	08011c6f 	.word	0x08011c6f
 8011a90:	08011ca7 	.word	0x08011ca7
 8011a94:	08011ccb 	.word	0x08011ccb
 8011a98:	20002598 	.word	0x20002598

08011a9c <stdio_exit_handler>:
 8011a9c:	4a02      	ldr	r2, [pc, #8]	@ (8011aa8 <stdio_exit_handler+0xc>)
 8011a9e:	4903      	ldr	r1, [pc, #12]	@ (8011aac <stdio_exit_handler+0x10>)
 8011aa0:	4803      	ldr	r0, [pc, #12]	@ (8011ab0 <stdio_exit_handler+0x14>)
 8011aa2:	f000 b869 	b.w	8011b78 <_fwalk_sglue>
 8011aa6:	bf00      	nop
 8011aa8:	200001d8 	.word	0x200001d8
 8011aac:	08014d11 	.word	0x08014d11
 8011ab0:	200001e8 	.word	0x200001e8

08011ab4 <cleanup_stdio>:
 8011ab4:	6841      	ldr	r1, [r0, #4]
 8011ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8011ae8 <cleanup_stdio+0x34>)
 8011ab8:	4299      	cmp	r1, r3
 8011aba:	b510      	push	{r4, lr}
 8011abc:	4604      	mov	r4, r0
 8011abe:	d001      	beq.n	8011ac4 <cleanup_stdio+0x10>
 8011ac0:	f003 f926 	bl	8014d10 <_fflush_r>
 8011ac4:	68a1      	ldr	r1, [r4, #8]
 8011ac6:	4b09      	ldr	r3, [pc, #36]	@ (8011aec <cleanup_stdio+0x38>)
 8011ac8:	4299      	cmp	r1, r3
 8011aca:	d002      	beq.n	8011ad2 <cleanup_stdio+0x1e>
 8011acc:	4620      	mov	r0, r4
 8011ace:	f003 f91f 	bl	8014d10 <_fflush_r>
 8011ad2:	68e1      	ldr	r1, [r4, #12]
 8011ad4:	4b06      	ldr	r3, [pc, #24]	@ (8011af0 <cleanup_stdio+0x3c>)
 8011ad6:	4299      	cmp	r1, r3
 8011ad8:	d004      	beq.n	8011ae4 <cleanup_stdio+0x30>
 8011ada:	4620      	mov	r0, r4
 8011adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ae0:	f003 b916 	b.w	8014d10 <_fflush_r>
 8011ae4:	bd10      	pop	{r4, pc}
 8011ae6:	bf00      	nop
 8011ae8:	20002598 	.word	0x20002598
 8011aec:	20002600 	.word	0x20002600
 8011af0:	20002668 	.word	0x20002668

08011af4 <global_stdio_init.part.0>:
 8011af4:	b510      	push	{r4, lr}
 8011af6:	4b0b      	ldr	r3, [pc, #44]	@ (8011b24 <global_stdio_init.part.0+0x30>)
 8011af8:	4c0b      	ldr	r4, [pc, #44]	@ (8011b28 <global_stdio_init.part.0+0x34>)
 8011afa:	4a0c      	ldr	r2, [pc, #48]	@ (8011b2c <global_stdio_init.part.0+0x38>)
 8011afc:	601a      	str	r2, [r3, #0]
 8011afe:	4620      	mov	r0, r4
 8011b00:	2200      	movs	r2, #0
 8011b02:	2104      	movs	r1, #4
 8011b04:	f7ff ff94 	bl	8011a30 <std>
 8011b08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011b0c:	2201      	movs	r2, #1
 8011b0e:	2109      	movs	r1, #9
 8011b10:	f7ff ff8e 	bl	8011a30 <std>
 8011b14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011b18:	2202      	movs	r2, #2
 8011b1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b1e:	2112      	movs	r1, #18
 8011b20:	f7ff bf86 	b.w	8011a30 <std>
 8011b24:	200026d0 	.word	0x200026d0
 8011b28:	20002598 	.word	0x20002598
 8011b2c:	08011a9d 	.word	0x08011a9d

08011b30 <__sfp_lock_acquire>:
 8011b30:	4801      	ldr	r0, [pc, #4]	@ (8011b38 <__sfp_lock_acquire+0x8>)
 8011b32:	f000 b95e 	b.w	8011df2 <__retarget_lock_acquire_recursive>
 8011b36:	bf00      	nop
 8011b38:	200026d9 	.word	0x200026d9

08011b3c <__sfp_lock_release>:
 8011b3c:	4801      	ldr	r0, [pc, #4]	@ (8011b44 <__sfp_lock_release+0x8>)
 8011b3e:	f000 b959 	b.w	8011df4 <__retarget_lock_release_recursive>
 8011b42:	bf00      	nop
 8011b44:	200026d9 	.word	0x200026d9

08011b48 <__sinit>:
 8011b48:	b510      	push	{r4, lr}
 8011b4a:	4604      	mov	r4, r0
 8011b4c:	f7ff fff0 	bl	8011b30 <__sfp_lock_acquire>
 8011b50:	6a23      	ldr	r3, [r4, #32]
 8011b52:	b11b      	cbz	r3, 8011b5c <__sinit+0x14>
 8011b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011b58:	f7ff bff0 	b.w	8011b3c <__sfp_lock_release>
 8011b5c:	4b04      	ldr	r3, [pc, #16]	@ (8011b70 <__sinit+0x28>)
 8011b5e:	6223      	str	r3, [r4, #32]
 8011b60:	4b04      	ldr	r3, [pc, #16]	@ (8011b74 <__sinit+0x2c>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d1f5      	bne.n	8011b54 <__sinit+0xc>
 8011b68:	f7ff ffc4 	bl	8011af4 <global_stdio_init.part.0>
 8011b6c:	e7f2      	b.n	8011b54 <__sinit+0xc>
 8011b6e:	bf00      	nop
 8011b70:	08011ab5 	.word	0x08011ab5
 8011b74:	200026d0 	.word	0x200026d0

08011b78 <_fwalk_sglue>:
 8011b78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b7c:	4607      	mov	r7, r0
 8011b7e:	4688      	mov	r8, r1
 8011b80:	4614      	mov	r4, r2
 8011b82:	2600      	movs	r6, #0
 8011b84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b88:	f1b9 0901 	subs.w	r9, r9, #1
 8011b8c:	d505      	bpl.n	8011b9a <_fwalk_sglue+0x22>
 8011b8e:	6824      	ldr	r4, [r4, #0]
 8011b90:	2c00      	cmp	r4, #0
 8011b92:	d1f7      	bne.n	8011b84 <_fwalk_sglue+0xc>
 8011b94:	4630      	mov	r0, r6
 8011b96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b9a:	89ab      	ldrh	r3, [r5, #12]
 8011b9c:	2b01      	cmp	r3, #1
 8011b9e:	d907      	bls.n	8011bb0 <_fwalk_sglue+0x38>
 8011ba0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	d003      	beq.n	8011bb0 <_fwalk_sglue+0x38>
 8011ba8:	4629      	mov	r1, r5
 8011baa:	4638      	mov	r0, r7
 8011bac:	47c0      	blx	r8
 8011bae:	4306      	orrs	r6, r0
 8011bb0:	3568      	adds	r5, #104	@ 0x68
 8011bb2:	e7e9      	b.n	8011b88 <_fwalk_sglue+0x10>

08011bb4 <siprintf>:
 8011bb4:	b40e      	push	{r1, r2, r3}
 8011bb6:	b500      	push	{lr}
 8011bb8:	b09c      	sub	sp, #112	@ 0x70
 8011bba:	ab1d      	add	r3, sp, #116	@ 0x74
 8011bbc:	9002      	str	r0, [sp, #8]
 8011bbe:	9006      	str	r0, [sp, #24]
 8011bc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011bc4:	4809      	ldr	r0, [pc, #36]	@ (8011bec <siprintf+0x38>)
 8011bc6:	9107      	str	r1, [sp, #28]
 8011bc8:	9104      	str	r1, [sp, #16]
 8011bca:	4909      	ldr	r1, [pc, #36]	@ (8011bf0 <siprintf+0x3c>)
 8011bcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8011bd0:	9105      	str	r1, [sp, #20]
 8011bd2:	6800      	ldr	r0, [r0, #0]
 8011bd4:	9301      	str	r3, [sp, #4]
 8011bd6:	a902      	add	r1, sp, #8
 8011bd8:	f002 fc00 	bl	80143dc <_svfiprintf_r>
 8011bdc:	9b02      	ldr	r3, [sp, #8]
 8011bde:	2200      	movs	r2, #0
 8011be0:	701a      	strb	r2, [r3, #0]
 8011be2:	b01c      	add	sp, #112	@ 0x70
 8011be4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011be8:	b003      	add	sp, #12
 8011bea:	4770      	bx	lr
 8011bec:	200001e4 	.word	0x200001e4
 8011bf0:	ffff0208 	.word	0xffff0208

08011bf4 <siscanf>:
 8011bf4:	b40e      	push	{r1, r2, r3}
 8011bf6:	b530      	push	{r4, r5, lr}
 8011bf8:	b09c      	sub	sp, #112	@ 0x70
 8011bfa:	ac1f      	add	r4, sp, #124	@ 0x7c
 8011bfc:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011c00:	f854 5b04 	ldr.w	r5, [r4], #4
 8011c04:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011c08:	9002      	str	r0, [sp, #8]
 8011c0a:	9006      	str	r0, [sp, #24]
 8011c0c:	f7ee fb58 	bl	80002c0 <strlen>
 8011c10:	4b0b      	ldr	r3, [pc, #44]	@ (8011c40 <siscanf+0x4c>)
 8011c12:	9003      	str	r0, [sp, #12]
 8011c14:	9007      	str	r0, [sp, #28]
 8011c16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011c18:	480a      	ldr	r0, [pc, #40]	@ (8011c44 <siscanf+0x50>)
 8011c1a:	9401      	str	r4, [sp, #4]
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011c20:	9314      	str	r3, [sp, #80]	@ 0x50
 8011c22:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011c26:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011c2a:	462a      	mov	r2, r5
 8011c2c:	4623      	mov	r3, r4
 8011c2e:	a902      	add	r1, sp, #8
 8011c30:	6800      	ldr	r0, [r0, #0]
 8011c32:	f002 fd27 	bl	8014684 <__ssvfiscanf_r>
 8011c36:	b01c      	add	sp, #112	@ 0x70
 8011c38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011c3c:	b003      	add	sp, #12
 8011c3e:	4770      	bx	lr
 8011c40:	08011c6b 	.word	0x08011c6b
 8011c44:	200001e4 	.word	0x200001e4

08011c48 <__sread>:
 8011c48:	b510      	push	{r4, lr}
 8011c4a:	460c      	mov	r4, r1
 8011c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c50:	f000 f880 	bl	8011d54 <_read_r>
 8011c54:	2800      	cmp	r0, #0
 8011c56:	bfab      	itete	ge
 8011c58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011c5a:	89a3      	ldrhlt	r3, [r4, #12]
 8011c5c:	181b      	addge	r3, r3, r0
 8011c5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011c62:	bfac      	ite	ge
 8011c64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011c66:	81a3      	strhlt	r3, [r4, #12]
 8011c68:	bd10      	pop	{r4, pc}

08011c6a <__seofread>:
 8011c6a:	2000      	movs	r0, #0
 8011c6c:	4770      	bx	lr

08011c6e <__swrite>:
 8011c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c72:	461f      	mov	r7, r3
 8011c74:	898b      	ldrh	r3, [r1, #12]
 8011c76:	05db      	lsls	r3, r3, #23
 8011c78:	4605      	mov	r5, r0
 8011c7a:	460c      	mov	r4, r1
 8011c7c:	4616      	mov	r6, r2
 8011c7e:	d505      	bpl.n	8011c8c <__swrite+0x1e>
 8011c80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c84:	2302      	movs	r3, #2
 8011c86:	2200      	movs	r2, #0
 8011c88:	f000 f852 	bl	8011d30 <_lseek_r>
 8011c8c:	89a3      	ldrh	r3, [r4, #12]
 8011c8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c92:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011c96:	81a3      	strh	r3, [r4, #12]
 8011c98:	4632      	mov	r2, r6
 8011c9a:	463b      	mov	r3, r7
 8011c9c:	4628      	mov	r0, r5
 8011c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ca2:	f000 b869 	b.w	8011d78 <_write_r>

08011ca6 <__sseek>:
 8011ca6:	b510      	push	{r4, lr}
 8011ca8:	460c      	mov	r4, r1
 8011caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cae:	f000 f83f 	bl	8011d30 <_lseek_r>
 8011cb2:	1c43      	adds	r3, r0, #1
 8011cb4:	89a3      	ldrh	r3, [r4, #12]
 8011cb6:	bf15      	itete	ne
 8011cb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011cba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011cbe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011cc2:	81a3      	strheq	r3, [r4, #12]
 8011cc4:	bf18      	it	ne
 8011cc6:	81a3      	strhne	r3, [r4, #12]
 8011cc8:	bd10      	pop	{r4, pc}

08011cca <__sclose>:
 8011cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cce:	f000 b81f 	b.w	8011d10 <_close_r>

08011cd2 <memset>:
 8011cd2:	4402      	add	r2, r0
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	4293      	cmp	r3, r2
 8011cd8:	d100      	bne.n	8011cdc <memset+0xa>
 8011cda:	4770      	bx	lr
 8011cdc:	f803 1b01 	strb.w	r1, [r3], #1
 8011ce0:	e7f9      	b.n	8011cd6 <memset+0x4>

08011ce2 <strncmp>:
 8011ce2:	b510      	push	{r4, lr}
 8011ce4:	b16a      	cbz	r2, 8011d02 <strncmp+0x20>
 8011ce6:	3901      	subs	r1, #1
 8011ce8:	1884      	adds	r4, r0, r2
 8011cea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d103      	bne.n	8011cfe <strncmp+0x1c>
 8011cf6:	42a0      	cmp	r0, r4
 8011cf8:	d001      	beq.n	8011cfe <strncmp+0x1c>
 8011cfa:	2a00      	cmp	r2, #0
 8011cfc:	d1f5      	bne.n	8011cea <strncmp+0x8>
 8011cfe:	1ad0      	subs	r0, r2, r3
 8011d00:	bd10      	pop	{r4, pc}
 8011d02:	4610      	mov	r0, r2
 8011d04:	e7fc      	b.n	8011d00 <strncmp+0x1e>
	...

08011d08 <_localeconv_r>:
 8011d08:	4800      	ldr	r0, [pc, #0]	@ (8011d0c <_localeconv_r+0x4>)
 8011d0a:	4770      	bx	lr
 8011d0c:	20000324 	.word	0x20000324

08011d10 <_close_r>:
 8011d10:	b538      	push	{r3, r4, r5, lr}
 8011d12:	4d06      	ldr	r5, [pc, #24]	@ (8011d2c <_close_r+0x1c>)
 8011d14:	2300      	movs	r3, #0
 8011d16:	4604      	mov	r4, r0
 8011d18:	4608      	mov	r0, r1
 8011d1a:	602b      	str	r3, [r5, #0]
 8011d1c:	f7f2 fbd4 	bl	80044c8 <_close>
 8011d20:	1c43      	adds	r3, r0, #1
 8011d22:	d102      	bne.n	8011d2a <_close_r+0x1a>
 8011d24:	682b      	ldr	r3, [r5, #0]
 8011d26:	b103      	cbz	r3, 8011d2a <_close_r+0x1a>
 8011d28:	6023      	str	r3, [r4, #0]
 8011d2a:	bd38      	pop	{r3, r4, r5, pc}
 8011d2c:	200026d4 	.word	0x200026d4

08011d30 <_lseek_r>:
 8011d30:	b538      	push	{r3, r4, r5, lr}
 8011d32:	4d07      	ldr	r5, [pc, #28]	@ (8011d50 <_lseek_r+0x20>)
 8011d34:	4604      	mov	r4, r0
 8011d36:	4608      	mov	r0, r1
 8011d38:	4611      	mov	r1, r2
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	602a      	str	r2, [r5, #0]
 8011d3e:	461a      	mov	r2, r3
 8011d40:	f7f2 fbe9 	bl	8004516 <_lseek>
 8011d44:	1c43      	adds	r3, r0, #1
 8011d46:	d102      	bne.n	8011d4e <_lseek_r+0x1e>
 8011d48:	682b      	ldr	r3, [r5, #0]
 8011d4a:	b103      	cbz	r3, 8011d4e <_lseek_r+0x1e>
 8011d4c:	6023      	str	r3, [r4, #0]
 8011d4e:	bd38      	pop	{r3, r4, r5, pc}
 8011d50:	200026d4 	.word	0x200026d4

08011d54 <_read_r>:
 8011d54:	b538      	push	{r3, r4, r5, lr}
 8011d56:	4d07      	ldr	r5, [pc, #28]	@ (8011d74 <_read_r+0x20>)
 8011d58:	4604      	mov	r4, r0
 8011d5a:	4608      	mov	r0, r1
 8011d5c:	4611      	mov	r1, r2
 8011d5e:	2200      	movs	r2, #0
 8011d60:	602a      	str	r2, [r5, #0]
 8011d62:	461a      	mov	r2, r3
 8011d64:	f7f2 fb77 	bl	8004456 <_read>
 8011d68:	1c43      	adds	r3, r0, #1
 8011d6a:	d102      	bne.n	8011d72 <_read_r+0x1e>
 8011d6c:	682b      	ldr	r3, [r5, #0]
 8011d6e:	b103      	cbz	r3, 8011d72 <_read_r+0x1e>
 8011d70:	6023      	str	r3, [r4, #0]
 8011d72:	bd38      	pop	{r3, r4, r5, pc}
 8011d74:	200026d4 	.word	0x200026d4

08011d78 <_write_r>:
 8011d78:	b538      	push	{r3, r4, r5, lr}
 8011d7a:	4d07      	ldr	r5, [pc, #28]	@ (8011d98 <_write_r+0x20>)
 8011d7c:	4604      	mov	r4, r0
 8011d7e:	4608      	mov	r0, r1
 8011d80:	4611      	mov	r1, r2
 8011d82:	2200      	movs	r2, #0
 8011d84:	602a      	str	r2, [r5, #0]
 8011d86:	461a      	mov	r2, r3
 8011d88:	f7f2 fb82 	bl	8004490 <_write>
 8011d8c:	1c43      	adds	r3, r0, #1
 8011d8e:	d102      	bne.n	8011d96 <_write_r+0x1e>
 8011d90:	682b      	ldr	r3, [r5, #0]
 8011d92:	b103      	cbz	r3, 8011d96 <_write_r+0x1e>
 8011d94:	6023      	str	r3, [r4, #0]
 8011d96:	bd38      	pop	{r3, r4, r5, pc}
 8011d98:	200026d4 	.word	0x200026d4

08011d9c <__errno>:
 8011d9c:	4b01      	ldr	r3, [pc, #4]	@ (8011da4 <__errno+0x8>)
 8011d9e:	6818      	ldr	r0, [r3, #0]
 8011da0:	4770      	bx	lr
 8011da2:	bf00      	nop
 8011da4:	200001e4 	.word	0x200001e4

08011da8 <__libc_init_array>:
 8011da8:	b570      	push	{r4, r5, r6, lr}
 8011daa:	4d0d      	ldr	r5, [pc, #52]	@ (8011de0 <__libc_init_array+0x38>)
 8011dac:	4c0d      	ldr	r4, [pc, #52]	@ (8011de4 <__libc_init_array+0x3c>)
 8011dae:	1b64      	subs	r4, r4, r5
 8011db0:	10a4      	asrs	r4, r4, #2
 8011db2:	2600      	movs	r6, #0
 8011db4:	42a6      	cmp	r6, r4
 8011db6:	d109      	bne.n	8011dcc <__libc_init_array+0x24>
 8011db8:	4d0b      	ldr	r5, [pc, #44]	@ (8011de8 <__libc_init_array+0x40>)
 8011dba:	4c0c      	ldr	r4, [pc, #48]	@ (8011dec <__libc_init_array+0x44>)
 8011dbc:	f004 fede 	bl	8016b7c <_init>
 8011dc0:	1b64      	subs	r4, r4, r5
 8011dc2:	10a4      	asrs	r4, r4, #2
 8011dc4:	2600      	movs	r6, #0
 8011dc6:	42a6      	cmp	r6, r4
 8011dc8:	d105      	bne.n	8011dd6 <__libc_init_array+0x2e>
 8011dca:	bd70      	pop	{r4, r5, r6, pc}
 8011dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dd0:	4798      	blx	r3
 8011dd2:	3601      	adds	r6, #1
 8011dd4:	e7ee      	b.n	8011db4 <__libc_init_array+0xc>
 8011dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8011dda:	4798      	blx	r3
 8011ddc:	3601      	adds	r6, #1
 8011dde:	e7f2      	b.n	8011dc6 <__libc_init_array+0x1e>
 8011de0:	080173d0 	.word	0x080173d0
 8011de4:	080173d0 	.word	0x080173d0
 8011de8:	080173d0 	.word	0x080173d0
 8011dec:	080173d4 	.word	0x080173d4

08011df0 <__retarget_lock_init_recursive>:
 8011df0:	4770      	bx	lr

08011df2 <__retarget_lock_acquire_recursive>:
 8011df2:	4770      	bx	lr

08011df4 <__retarget_lock_release_recursive>:
 8011df4:	4770      	bx	lr

08011df6 <memcpy>:
 8011df6:	440a      	add	r2, r1
 8011df8:	4291      	cmp	r1, r2
 8011dfa:	f100 33ff 	add.w	r3, r0, #4294967295
 8011dfe:	d100      	bne.n	8011e02 <memcpy+0xc>
 8011e00:	4770      	bx	lr
 8011e02:	b510      	push	{r4, lr}
 8011e04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011e08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011e0c:	4291      	cmp	r1, r2
 8011e0e:	d1f9      	bne.n	8011e04 <memcpy+0xe>
 8011e10:	bd10      	pop	{r4, pc}
	...

08011e14 <nanf>:
 8011e14:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011e1c <nanf+0x8>
 8011e18:	4770      	bx	lr
 8011e1a:	bf00      	nop
 8011e1c:	7fc00000 	.word	0x7fc00000

08011e20 <quorem>:
 8011e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e24:	6903      	ldr	r3, [r0, #16]
 8011e26:	690c      	ldr	r4, [r1, #16]
 8011e28:	42a3      	cmp	r3, r4
 8011e2a:	4607      	mov	r7, r0
 8011e2c:	db7e      	blt.n	8011f2c <quorem+0x10c>
 8011e2e:	3c01      	subs	r4, #1
 8011e30:	f101 0814 	add.w	r8, r1, #20
 8011e34:	00a3      	lsls	r3, r4, #2
 8011e36:	f100 0514 	add.w	r5, r0, #20
 8011e3a:	9300      	str	r3, [sp, #0]
 8011e3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e40:	9301      	str	r3, [sp, #4]
 8011e42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011e46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e4a:	3301      	adds	r3, #1
 8011e4c:	429a      	cmp	r2, r3
 8011e4e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011e52:	fbb2 f6f3 	udiv	r6, r2, r3
 8011e56:	d32e      	bcc.n	8011eb6 <quorem+0x96>
 8011e58:	f04f 0a00 	mov.w	sl, #0
 8011e5c:	46c4      	mov	ip, r8
 8011e5e:	46ae      	mov	lr, r5
 8011e60:	46d3      	mov	fp, sl
 8011e62:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011e66:	b298      	uxth	r0, r3
 8011e68:	fb06 a000 	mla	r0, r6, r0, sl
 8011e6c:	0c02      	lsrs	r2, r0, #16
 8011e6e:	0c1b      	lsrs	r3, r3, #16
 8011e70:	fb06 2303 	mla	r3, r6, r3, r2
 8011e74:	f8de 2000 	ldr.w	r2, [lr]
 8011e78:	b280      	uxth	r0, r0
 8011e7a:	b292      	uxth	r2, r2
 8011e7c:	1a12      	subs	r2, r2, r0
 8011e7e:	445a      	add	r2, fp
 8011e80:	f8de 0000 	ldr.w	r0, [lr]
 8011e84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e88:	b29b      	uxth	r3, r3
 8011e8a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011e8e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011e92:	b292      	uxth	r2, r2
 8011e94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8011e98:	45e1      	cmp	r9, ip
 8011e9a:	f84e 2b04 	str.w	r2, [lr], #4
 8011e9e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011ea2:	d2de      	bcs.n	8011e62 <quorem+0x42>
 8011ea4:	9b00      	ldr	r3, [sp, #0]
 8011ea6:	58eb      	ldr	r3, [r5, r3]
 8011ea8:	b92b      	cbnz	r3, 8011eb6 <quorem+0x96>
 8011eaa:	9b01      	ldr	r3, [sp, #4]
 8011eac:	3b04      	subs	r3, #4
 8011eae:	429d      	cmp	r5, r3
 8011eb0:	461a      	mov	r2, r3
 8011eb2:	d32f      	bcc.n	8011f14 <quorem+0xf4>
 8011eb4:	613c      	str	r4, [r7, #16]
 8011eb6:	4638      	mov	r0, r7
 8011eb8:	f001 f9c2 	bl	8013240 <__mcmp>
 8011ebc:	2800      	cmp	r0, #0
 8011ebe:	db25      	blt.n	8011f0c <quorem+0xec>
 8011ec0:	4629      	mov	r1, r5
 8011ec2:	2000      	movs	r0, #0
 8011ec4:	f858 2b04 	ldr.w	r2, [r8], #4
 8011ec8:	f8d1 c000 	ldr.w	ip, [r1]
 8011ecc:	fa1f fe82 	uxth.w	lr, r2
 8011ed0:	fa1f f38c 	uxth.w	r3, ip
 8011ed4:	eba3 030e 	sub.w	r3, r3, lr
 8011ed8:	4403      	add	r3, r0
 8011eda:	0c12      	lsrs	r2, r2, #16
 8011edc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8011ee0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011eea:	45c1      	cmp	r9, r8
 8011eec:	f841 3b04 	str.w	r3, [r1], #4
 8011ef0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011ef4:	d2e6      	bcs.n	8011ec4 <quorem+0xa4>
 8011ef6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011efa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011efe:	b922      	cbnz	r2, 8011f0a <quorem+0xea>
 8011f00:	3b04      	subs	r3, #4
 8011f02:	429d      	cmp	r5, r3
 8011f04:	461a      	mov	r2, r3
 8011f06:	d30b      	bcc.n	8011f20 <quorem+0x100>
 8011f08:	613c      	str	r4, [r7, #16]
 8011f0a:	3601      	adds	r6, #1
 8011f0c:	4630      	mov	r0, r6
 8011f0e:	b003      	add	sp, #12
 8011f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f14:	6812      	ldr	r2, [r2, #0]
 8011f16:	3b04      	subs	r3, #4
 8011f18:	2a00      	cmp	r2, #0
 8011f1a:	d1cb      	bne.n	8011eb4 <quorem+0x94>
 8011f1c:	3c01      	subs	r4, #1
 8011f1e:	e7c6      	b.n	8011eae <quorem+0x8e>
 8011f20:	6812      	ldr	r2, [r2, #0]
 8011f22:	3b04      	subs	r3, #4
 8011f24:	2a00      	cmp	r2, #0
 8011f26:	d1ef      	bne.n	8011f08 <quorem+0xe8>
 8011f28:	3c01      	subs	r4, #1
 8011f2a:	e7ea      	b.n	8011f02 <quorem+0xe2>
 8011f2c:	2000      	movs	r0, #0
 8011f2e:	e7ee      	b.n	8011f0e <quorem+0xee>

08011f30 <_dtoa_r>:
 8011f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f34:	69c7      	ldr	r7, [r0, #28]
 8011f36:	b099      	sub	sp, #100	@ 0x64
 8011f38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011f3c:	ec55 4b10 	vmov	r4, r5, d0
 8011f40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8011f42:	9109      	str	r1, [sp, #36]	@ 0x24
 8011f44:	4683      	mov	fp, r0
 8011f46:	920e      	str	r2, [sp, #56]	@ 0x38
 8011f48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011f4a:	b97f      	cbnz	r7, 8011f6c <_dtoa_r+0x3c>
 8011f4c:	2010      	movs	r0, #16
 8011f4e:	f000 fdfd 	bl	8012b4c <malloc>
 8011f52:	4602      	mov	r2, r0
 8011f54:	f8cb 001c 	str.w	r0, [fp, #28]
 8011f58:	b920      	cbnz	r0, 8011f64 <_dtoa_r+0x34>
 8011f5a:	4ba7      	ldr	r3, [pc, #668]	@ (80121f8 <_dtoa_r+0x2c8>)
 8011f5c:	21ef      	movs	r1, #239	@ 0xef
 8011f5e:	48a7      	ldr	r0, [pc, #668]	@ (80121fc <_dtoa_r+0x2cc>)
 8011f60:	f002 ffa6 	bl	8014eb0 <__assert_func>
 8011f64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011f68:	6007      	str	r7, [r0, #0]
 8011f6a:	60c7      	str	r7, [r0, #12]
 8011f6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011f70:	6819      	ldr	r1, [r3, #0]
 8011f72:	b159      	cbz	r1, 8011f8c <_dtoa_r+0x5c>
 8011f74:	685a      	ldr	r2, [r3, #4]
 8011f76:	604a      	str	r2, [r1, #4]
 8011f78:	2301      	movs	r3, #1
 8011f7a:	4093      	lsls	r3, r2
 8011f7c:	608b      	str	r3, [r1, #8]
 8011f7e:	4658      	mov	r0, fp
 8011f80:	f000 feda 	bl	8012d38 <_Bfree>
 8011f84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011f88:	2200      	movs	r2, #0
 8011f8a:	601a      	str	r2, [r3, #0]
 8011f8c:	1e2b      	subs	r3, r5, #0
 8011f8e:	bfb9      	ittee	lt
 8011f90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8011f94:	9303      	strlt	r3, [sp, #12]
 8011f96:	2300      	movge	r3, #0
 8011f98:	6033      	strge	r3, [r6, #0]
 8011f9a:	9f03      	ldr	r7, [sp, #12]
 8011f9c:	4b98      	ldr	r3, [pc, #608]	@ (8012200 <_dtoa_r+0x2d0>)
 8011f9e:	bfbc      	itt	lt
 8011fa0:	2201      	movlt	r2, #1
 8011fa2:	6032      	strlt	r2, [r6, #0]
 8011fa4:	43bb      	bics	r3, r7
 8011fa6:	d112      	bne.n	8011fce <_dtoa_r+0x9e>
 8011fa8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011faa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011fae:	6013      	str	r3, [r2, #0]
 8011fb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011fb4:	4323      	orrs	r3, r4
 8011fb6:	f000 854d 	beq.w	8012a54 <_dtoa_r+0xb24>
 8011fba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011fbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012214 <_dtoa_r+0x2e4>
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	f000 854f 	beq.w	8012a64 <_dtoa_r+0xb34>
 8011fc6:	f10a 0303 	add.w	r3, sl, #3
 8011fca:	f000 bd49 	b.w	8012a60 <_dtoa_r+0xb30>
 8011fce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	ec51 0b17 	vmov	r0, r1, d7
 8011fd8:	2300      	movs	r3, #0
 8011fda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8011fde:	f7ee fd9b 	bl	8000b18 <__aeabi_dcmpeq>
 8011fe2:	4680      	mov	r8, r0
 8011fe4:	b158      	cbz	r0, 8011ffe <_dtoa_r+0xce>
 8011fe6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011fe8:	2301      	movs	r3, #1
 8011fea:	6013      	str	r3, [r2, #0]
 8011fec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011fee:	b113      	cbz	r3, 8011ff6 <_dtoa_r+0xc6>
 8011ff0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8011ff2:	4b84      	ldr	r3, [pc, #528]	@ (8012204 <_dtoa_r+0x2d4>)
 8011ff4:	6013      	str	r3, [r2, #0]
 8011ff6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012218 <_dtoa_r+0x2e8>
 8011ffa:	f000 bd33 	b.w	8012a64 <_dtoa_r+0xb34>
 8011ffe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012002:	aa16      	add	r2, sp, #88	@ 0x58
 8012004:	a917      	add	r1, sp, #92	@ 0x5c
 8012006:	4658      	mov	r0, fp
 8012008:	f001 fa3a 	bl	8013480 <__d2b>
 801200c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012010:	4681      	mov	r9, r0
 8012012:	2e00      	cmp	r6, #0
 8012014:	d077      	beq.n	8012106 <_dtoa_r+0x1d6>
 8012016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012018:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801201c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012024:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012028:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801202c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012030:	4619      	mov	r1, r3
 8012032:	2200      	movs	r2, #0
 8012034:	4b74      	ldr	r3, [pc, #464]	@ (8012208 <_dtoa_r+0x2d8>)
 8012036:	f7ee f94f 	bl	80002d8 <__aeabi_dsub>
 801203a:	a369      	add	r3, pc, #420	@ (adr r3, 80121e0 <_dtoa_r+0x2b0>)
 801203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012040:	f7ee fb02 	bl	8000648 <__aeabi_dmul>
 8012044:	a368      	add	r3, pc, #416	@ (adr r3, 80121e8 <_dtoa_r+0x2b8>)
 8012046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801204a:	f7ee f947 	bl	80002dc <__adddf3>
 801204e:	4604      	mov	r4, r0
 8012050:	4630      	mov	r0, r6
 8012052:	460d      	mov	r5, r1
 8012054:	f7ee fa8e 	bl	8000574 <__aeabi_i2d>
 8012058:	a365      	add	r3, pc, #404	@ (adr r3, 80121f0 <_dtoa_r+0x2c0>)
 801205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205e:	f7ee faf3 	bl	8000648 <__aeabi_dmul>
 8012062:	4602      	mov	r2, r0
 8012064:	460b      	mov	r3, r1
 8012066:	4620      	mov	r0, r4
 8012068:	4629      	mov	r1, r5
 801206a:	f7ee f937 	bl	80002dc <__adddf3>
 801206e:	4604      	mov	r4, r0
 8012070:	460d      	mov	r5, r1
 8012072:	f7ee fd99 	bl	8000ba8 <__aeabi_d2iz>
 8012076:	2200      	movs	r2, #0
 8012078:	4607      	mov	r7, r0
 801207a:	2300      	movs	r3, #0
 801207c:	4620      	mov	r0, r4
 801207e:	4629      	mov	r1, r5
 8012080:	f7ee fd54 	bl	8000b2c <__aeabi_dcmplt>
 8012084:	b140      	cbz	r0, 8012098 <_dtoa_r+0x168>
 8012086:	4638      	mov	r0, r7
 8012088:	f7ee fa74 	bl	8000574 <__aeabi_i2d>
 801208c:	4622      	mov	r2, r4
 801208e:	462b      	mov	r3, r5
 8012090:	f7ee fd42 	bl	8000b18 <__aeabi_dcmpeq>
 8012094:	b900      	cbnz	r0, 8012098 <_dtoa_r+0x168>
 8012096:	3f01      	subs	r7, #1
 8012098:	2f16      	cmp	r7, #22
 801209a:	d851      	bhi.n	8012140 <_dtoa_r+0x210>
 801209c:	4b5b      	ldr	r3, [pc, #364]	@ (801220c <_dtoa_r+0x2dc>)
 801209e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80120a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80120aa:	f7ee fd3f 	bl	8000b2c <__aeabi_dcmplt>
 80120ae:	2800      	cmp	r0, #0
 80120b0:	d048      	beq.n	8012144 <_dtoa_r+0x214>
 80120b2:	3f01      	subs	r7, #1
 80120b4:	2300      	movs	r3, #0
 80120b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80120b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80120ba:	1b9b      	subs	r3, r3, r6
 80120bc:	1e5a      	subs	r2, r3, #1
 80120be:	bf44      	itt	mi
 80120c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80120c4:	2300      	movmi	r3, #0
 80120c6:	9208      	str	r2, [sp, #32]
 80120c8:	bf54      	ite	pl
 80120ca:	f04f 0800 	movpl.w	r8, #0
 80120ce:	9308      	strmi	r3, [sp, #32]
 80120d0:	2f00      	cmp	r7, #0
 80120d2:	db39      	blt.n	8012148 <_dtoa_r+0x218>
 80120d4:	9b08      	ldr	r3, [sp, #32]
 80120d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80120d8:	443b      	add	r3, r7
 80120da:	9308      	str	r3, [sp, #32]
 80120dc:	2300      	movs	r3, #0
 80120de:	930a      	str	r3, [sp, #40]	@ 0x28
 80120e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120e2:	2b09      	cmp	r3, #9
 80120e4:	d864      	bhi.n	80121b0 <_dtoa_r+0x280>
 80120e6:	2b05      	cmp	r3, #5
 80120e8:	bfc4      	itt	gt
 80120ea:	3b04      	subgt	r3, #4
 80120ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80120ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120f0:	f1a3 0302 	sub.w	r3, r3, #2
 80120f4:	bfcc      	ite	gt
 80120f6:	2400      	movgt	r4, #0
 80120f8:	2401      	movle	r4, #1
 80120fa:	2b03      	cmp	r3, #3
 80120fc:	d863      	bhi.n	80121c6 <_dtoa_r+0x296>
 80120fe:	e8df f003 	tbb	[pc, r3]
 8012102:	372a      	.short	0x372a
 8012104:	5535      	.short	0x5535
 8012106:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801210a:	441e      	add	r6, r3
 801210c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012110:	2b20      	cmp	r3, #32
 8012112:	bfc1      	itttt	gt
 8012114:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012118:	409f      	lslgt	r7, r3
 801211a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801211e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012122:	bfd6      	itet	le
 8012124:	f1c3 0320 	rsble	r3, r3, #32
 8012128:	ea47 0003 	orrgt.w	r0, r7, r3
 801212c:	fa04 f003 	lslle.w	r0, r4, r3
 8012130:	f7ee fa10 	bl	8000554 <__aeabi_ui2d>
 8012134:	2201      	movs	r2, #1
 8012136:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801213a:	3e01      	subs	r6, #1
 801213c:	9214      	str	r2, [sp, #80]	@ 0x50
 801213e:	e777      	b.n	8012030 <_dtoa_r+0x100>
 8012140:	2301      	movs	r3, #1
 8012142:	e7b8      	b.n	80120b6 <_dtoa_r+0x186>
 8012144:	9012      	str	r0, [sp, #72]	@ 0x48
 8012146:	e7b7      	b.n	80120b8 <_dtoa_r+0x188>
 8012148:	427b      	negs	r3, r7
 801214a:	930a      	str	r3, [sp, #40]	@ 0x28
 801214c:	2300      	movs	r3, #0
 801214e:	eba8 0807 	sub.w	r8, r8, r7
 8012152:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012154:	e7c4      	b.n	80120e0 <_dtoa_r+0x1b0>
 8012156:	2300      	movs	r3, #0
 8012158:	930b      	str	r3, [sp, #44]	@ 0x2c
 801215a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801215c:	2b00      	cmp	r3, #0
 801215e:	dc35      	bgt.n	80121cc <_dtoa_r+0x29c>
 8012160:	2301      	movs	r3, #1
 8012162:	9300      	str	r3, [sp, #0]
 8012164:	9307      	str	r3, [sp, #28]
 8012166:	461a      	mov	r2, r3
 8012168:	920e      	str	r2, [sp, #56]	@ 0x38
 801216a:	e00b      	b.n	8012184 <_dtoa_r+0x254>
 801216c:	2301      	movs	r3, #1
 801216e:	e7f3      	b.n	8012158 <_dtoa_r+0x228>
 8012170:	2300      	movs	r3, #0
 8012172:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012176:	18fb      	adds	r3, r7, r3
 8012178:	9300      	str	r3, [sp, #0]
 801217a:	3301      	adds	r3, #1
 801217c:	2b01      	cmp	r3, #1
 801217e:	9307      	str	r3, [sp, #28]
 8012180:	bfb8      	it	lt
 8012182:	2301      	movlt	r3, #1
 8012184:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012188:	2100      	movs	r1, #0
 801218a:	2204      	movs	r2, #4
 801218c:	f102 0514 	add.w	r5, r2, #20
 8012190:	429d      	cmp	r5, r3
 8012192:	d91f      	bls.n	80121d4 <_dtoa_r+0x2a4>
 8012194:	6041      	str	r1, [r0, #4]
 8012196:	4658      	mov	r0, fp
 8012198:	f000 fd8e 	bl	8012cb8 <_Balloc>
 801219c:	4682      	mov	sl, r0
 801219e:	2800      	cmp	r0, #0
 80121a0:	d13c      	bne.n	801221c <_dtoa_r+0x2ec>
 80121a2:	4b1b      	ldr	r3, [pc, #108]	@ (8012210 <_dtoa_r+0x2e0>)
 80121a4:	4602      	mov	r2, r0
 80121a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80121aa:	e6d8      	b.n	8011f5e <_dtoa_r+0x2e>
 80121ac:	2301      	movs	r3, #1
 80121ae:	e7e0      	b.n	8012172 <_dtoa_r+0x242>
 80121b0:	2401      	movs	r4, #1
 80121b2:	2300      	movs	r3, #0
 80121b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80121b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80121b8:	f04f 33ff 	mov.w	r3, #4294967295
 80121bc:	9300      	str	r3, [sp, #0]
 80121be:	9307      	str	r3, [sp, #28]
 80121c0:	2200      	movs	r2, #0
 80121c2:	2312      	movs	r3, #18
 80121c4:	e7d0      	b.n	8012168 <_dtoa_r+0x238>
 80121c6:	2301      	movs	r3, #1
 80121c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80121ca:	e7f5      	b.n	80121b8 <_dtoa_r+0x288>
 80121cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80121ce:	9300      	str	r3, [sp, #0]
 80121d0:	9307      	str	r3, [sp, #28]
 80121d2:	e7d7      	b.n	8012184 <_dtoa_r+0x254>
 80121d4:	3101      	adds	r1, #1
 80121d6:	0052      	lsls	r2, r2, #1
 80121d8:	e7d8      	b.n	801218c <_dtoa_r+0x25c>
 80121da:	bf00      	nop
 80121dc:	f3af 8000 	nop.w
 80121e0:	636f4361 	.word	0x636f4361
 80121e4:	3fd287a7 	.word	0x3fd287a7
 80121e8:	8b60c8b3 	.word	0x8b60c8b3
 80121ec:	3fc68a28 	.word	0x3fc68a28
 80121f0:	509f79fb 	.word	0x509f79fb
 80121f4:	3fd34413 	.word	0x3fd34413
 80121f8:	08016f8c 	.word	0x08016f8c
 80121fc:	08016fa3 	.word	0x08016fa3
 8012200:	7ff00000 	.word	0x7ff00000
 8012204:	080172e9 	.word	0x080172e9
 8012208:	3ff80000 	.word	0x3ff80000
 801220c:	080170a0 	.word	0x080170a0
 8012210:	08016ffb 	.word	0x08016ffb
 8012214:	08016f88 	.word	0x08016f88
 8012218:	080172e8 	.word	0x080172e8
 801221c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012220:	6018      	str	r0, [r3, #0]
 8012222:	9b07      	ldr	r3, [sp, #28]
 8012224:	2b0e      	cmp	r3, #14
 8012226:	f200 80a4 	bhi.w	8012372 <_dtoa_r+0x442>
 801222a:	2c00      	cmp	r4, #0
 801222c:	f000 80a1 	beq.w	8012372 <_dtoa_r+0x442>
 8012230:	2f00      	cmp	r7, #0
 8012232:	dd33      	ble.n	801229c <_dtoa_r+0x36c>
 8012234:	4bad      	ldr	r3, [pc, #692]	@ (80124ec <_dtoa_r+0x5bc>)
 8012236:	f007 020f 	and.w	r2, r7, #15
 801223a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801223e:	ed93 7b00 	vldr	d7, [r3]
 8012242:	05f8      	lsls	r0, r7, #23
 8012244:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012248:	ea4f 1427 	mov.w	r4, r7, asr #4
 801224c:	d516      	bpl.n	801227c <_dtoa_r+0x34c>
 801224e:	4ba8      	ldr	r3, [pc, #672]	@ (80124f0 <_dtoa_r+0x5c0>)
 8012250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012254:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012258:	f7ee fb20 	bl	800089c <__aeabi_ddiv>
 801225c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012260:	f004 040f 	and.w	r4, r4, #15
 8012264:	2603      	movs	r6, #3
 8012266:	4da2      	ldr	r5, [pc, #648]	@ (80124f0 <_dtoa_r+0x5c0>)
 8012268:	b954      	cbnz	r4, 8012280 <_dtoa_r+0x350>
 801226a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801226e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012272:	f7ee fb13 	bl	800089c <__aeabi_ddiv>
 8012276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801227a:	e028      	b.n	80122ce <_dtoa_r+0x39e>
 801227c:	2602      	movs	r6, #2
 801227e:	e7f2      	b.n	8012266 <_dtoa_r+0x336>
 8012280:	07e1      	lsls	r1, r4, #31
 8012282:	d508      	bpl.n	8012296 <_dtoa_r+0x366>
 8012284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012288:	e9d5 2300 	ldrd	r2, r3, [r5]
 801228c:	f7ee f9dc 	bl	8000648 <__aeabi_dmul>
 8012290:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012294:	3601      	adds	r6, #1
 8012296:	1064      	asrs	r4, r4, #1
 8012298:	3508      	adds	r5, #8
 801229a:	e7e5      	b.n	8012268 <_dtoa_r+0x338>
 801229c:	f000 80d2 	beq.w	8012444 <_dtoa_r+0x514>
 80122a0:	427c      	negs	r4, r7
 80122a2:	4b92      	ldr	r3, [pc, #584]	@ (80124ec <_dtoa_r+0x5bc>)
 80122a4:	4d92      	ldr	r5, [pc, #584]	@ (80124f0 <_dtoa_r+0x5c0>)
 80122a6:	f004 020f 	and.w	r2, r4, #15
 80122aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80122ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80122b6:	f7ee f9c7 	bl	8000648 <__aeabi_dmul>
 80122ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80122be:	1124      	asrs	r4, r4, #4
 80122c0:	2300      	movs	r3, #0
 80122c2:	2602      	movs	r6, #2
 80122c4:	2c00      	cmp	r4, #0
 80122c6:	f040 80b2 	bne.w	801242e <_dtoa_r+0x4fe>
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d1d3      	bne.n	8012276 <_dtoa_r+0x346>
 80122ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80122d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	f000 80b7 	beq.w	8012448 <_dtoa_r+0x518>
 80122da:	4b86      	ldr	r3, [pc, #536]	@ (80124f4 <_dtoa_r+0x5c4>)
 80122dc:	2200      	movs	r2, #0
 80122de:	4620      	mov	r0, r4
 80122e0:	4629      	mov	r1, r5
 80122e2:	f7ee fc23 	bl	8000b2c <__aeabi_dcmplt>
 80122e6:	2800      	cmp	r0, #0
 80122e8:	f000 80ae 	beq.w	8012448 <_dtoa_r+0x518>
 80122ec:	9b07      	ldr	r3, [sp, #28]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	f000 80aa 	beq.w	8012448 <_dtoa_r+0x518>
 80122f4:	9b00      	ldr	r3, [sp, #0]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	dd37      	ble.n	801236a <_dtoa_r+0x43a>
 80122fa:	1e7b      	subs	r3, r7, #1
 80122fc:	9304      	str	r3, [sp, #16]
 80122fe:	4620      	mov	r0, r4
 8012300:	4b7d      	ldr	r3, [pc, #500]	@ (80124f8 <_dtoa_r+0x5c8>)
 8012302:	2200      	movs	r2, #0
 8012304:	4629      	mov	r1, r5
 8012306:	f7ee f99f 	bl	8000648 <__aeabi_dmul>
 801230a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801230e:	9c00      	ldr	r4, [sp, #0]
 8012310:	3601      	adds	r6, #1
 8012312:	4630      	mov	r0, r6
 8012314:	f7ee f92e 	bl	8000574 <__aeabi_i2d>
 8012318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801231c:	f7ee f994 	bl	8000648 <__aeabi_dmul>
 8012320:	4b76      	ldr	r3, [pc, #472]	@ (80124fc <_dtoa_r+0x5cc>)
 8012322:	2200      	movs	r2, #0
 8012324:	f7ed ffda 	bl	80002dc <__adddf3>
 8012328:	4605      	mov	r5, r0
 801232a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801232e:	2c00      	cmp	r4, #0
 8012330:	f040 808d 	bne.w	801244e <_dtoa_r+0x51e>
 8012334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012338:	4b71      	ldr	r3, [pc, #452]	@ (8012500 <_dtoa_r+0x5d0>)
 801233a:	2200      	movs	r2, #0
 801233c:	f7ed ffcc 	bl	80002d8 <__aeabi_dsub>
 8012340:	4602      	mov	r2, r0
 8012342:	460b      	mov	r3, r1
 8012344:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012348:	462a      	mov	r2, r5
 801234a:	4633      	mov	r3, r6
 801234c:	f7ee fc0c 	bl	8000b68 <__aeabi_dcmpgt>
 8012350:	2800      	cmp	r0, #0
 8012352:	f040 828b 	bne.w	801286c <_dtoa_r+0x93c>
 8012356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801235a:	462a      	mov	r2, r5
 801235c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012360:	f7ee fbe4 	bl	8000b2c <__aeabi_dcmplt>
 8012364:	2800      	cmp	r0, #0
 8012366:	f040 8128 	bne.w	80125ba <_dtoa_r+0x68a>
 801236a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801236e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012372:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012374:	2b00      	cmp	r3, #0
 8012376:	f2c0 815a 	blt.w	801262e <_dtoa_r+0x6fe>
 801237a:	2f0e      	cmp	r7, #14
 801237c:	f300 8157 	bgt.w	801262e <_dtoa_r+0x6fe>
 8012380:	4b5a      	ldr	r3, [pc, #360]	@ (80124ec <_dtoa_r+0x5bc>)
 8012382:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012386:	ed93 7b00 	vldr	d7, [r3]
 801238a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801238c:	2b00      	cmp	r3, #0
 801238e:	ed8d 7b00 	vstr	d7, [sp]
 8012392:	da03      	bge.n	801239c <_dtoa_r+0x46c>
 8012394:	9b07      	ldr	r3, [sp, #28]
 8012396:	2b00      	cmp	r3, #0
 8012398:	f340 8101 	ble.w	801259e <_dtoa_r+0x66e>
 801239c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80123a0:	4656      	mov	r6, sl
 80123a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123a6:	4620      	mov	r0, r4
 80123a8:	4629      	mov	r1, r5
 80123aa:	f7ee fa77 	bl	800089c <__aeabi_ddiv>
 80123ae:	f7ee fbfb 	bl	8000ba8 <__aeabi_d2iz>
 80123b2:	4680      	mov	r8, r0
 80123b4:	f7ee f8de 	bl	8000574 <__aeabi_i2d>
 80123b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123bc:	f7ee f944 	bl	8000648 <__aeabi_dmul>
 80123c0:	4602      	mov	r2, r0
 80123c2:	460b      	mov	r3, r1
 80123c4:	4620      	mov	r0, r4
 80123c6:	4629      	mov	r1, r5
 80123c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80123cc:	f7ed ff84 	bl	80002d8 <__aeabi_dsub>
 80123d0:	f806 4b01 	strb.w	r4, [r6], #1
 80123d4:	9d07      	ldr	r5, [sp, #28]
 80123d6:	eba6 040a 	sub.w	r4, r6, sl
 80123da:	42a5      	cmp	r5, r4
 80123dc:	4602      	mov	r2, r0
 80123de:	460b      	mov	r3, r1
 80123e0:	f040 8117 	bne.w	8012612 <_dtoa_r+0x6e2>
 80123e4:	f7ed ff7a 	bl	80002dc <__adddf3>
 80123e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123ec:	4604      	mov	r4, r0
 80123ee:	460d      	mov	r5, r1
 80123f0:	f7ee fbba 	bl	8000b68 <__aeabi_dcmpgt>
 80123f4:	2800      	cmp	r0, #0
 80123f6:	f040 80f9 	bne.w	80125ec <_dtoa_r+0x6bc>
 80123fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123fe:	4620      	mov	r0, r4
 8012400:	4629      	mov	r1, r5
 8012402:	f7ee fb89 	bl	8000b18 <__aeabi_dcmpeq>
 8012406:	b118      	cbz	r0, 8012410 <_dtoa_r+0x4e0>
 8012408:	f018 0f01 	tst.w	r8, #1
 801240c:	f040 80ee 	bne.w	80125ec <_dtoa_r+0x6bc>
 8012410:	4649      	mov	r1, r9
 8012412:	4658      	mov	r0, fp
 8012414:	f000 fc90 	bl	8012d38 <_Bfree>
 8012418:	2300      	movs	r3, #0
 801241a:	7033      	strb	r3, [r6, #0]
 801241c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801241e:	3701      	adds	r7, #1
 8012420:	601f      	str	r7, [r3, #0]
 8012422:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012424:	2b00      	cmp	r3, #0
 8012426:	f000 831d 	beq.w	8012a64 <_dtoa_r+0xb34>
 801242a:	601e      	str	r6, [r3, #0]
 801242c:	e31a      	b.n	8012a64 <_dtoa_r+0xb34>
 801242e:	07e2      	lsls	r2, r4, #31
 8012430:	d505      	bpl.n	801243e <_dtoa_r+0x50e>
 8012432:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012436:	f7ee f907 	bl	8000648 <__aeabi_dmul>
 801243a:	3601      	adds	r6, #1
 801243c:	2301      	movs	r3, #1
 801243e:	1064      	asrs	r4, r4, #1
 8012440:	3508      	adds	r5, #8
 8012442:	e73f      	b.n	80122c4 <_dtoa_r+0x394>
 8012444:	2602      	movs	r6, #2
 8012446:	e742      	b.n	80122ce <_dtoa_r+0x39e>
 8012448:	9c07      	ldr	r4, [sp, #28]
 801244a:	9704      	str	r7, [sp, #16]
 801244c:	e761      	b.n	8012312 <_dtoa_r+0x3e2>
 801244e:	4b27      	ldr	r3, [pc, #156]	@ (80124ec <_dtoa_r+0x5bc>)
 8012450:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012452:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012456:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801245a:	4454      	add	r4, sl
 801245c:	2900      	cmp	r1, #0
 801245e:	d053      	beq.n	8012508 <_dtoa_r+0x5d8>
 8012460:	4928      	ldr	r1, [pc, #160]	@ (8012504 <_dtoa_r+0x5d4>)
 8012462:	2000      	movs	r0, #0
 8012464:	f7ee fa1a 	bl	800089c <__aeabi_ddiv>
 8012468:	4633      	mov	r3, r6
 801246a:	462a      	mov	r2, r5
 801246c:	f7ed ff34 	bl	80002d8 <__aeabi_dsub>
 8012470:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012474:	4656      	mov	r6, sl
 8012476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801247a:	f7ee fb95 	bl	8000ba8 <__aeabi_d2iz>
 801247e:	4605      	mov	r5, r0
 8012480:	f7ee f878 	bl	8000574 <__aeabi_i2d>
 8012484:	4602      	mov	r2, r0
 8012486:	460b      	mov	r3, r1
 8012488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801248c:	f7ed ff24 	bl	80002d8 <__aeabi_dsub>
 8012490:	3530      	adds	r5, #48	@ 0x30
 8012492:	4602      	mov	r2, r0
 8012494:	460b      	mov	r3, r1
 8012496:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801249a:	f806 5b01 	strb.w	r5, [r6], #1
 801249e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80124a2:	f7ee fb43 	bl	8000b2c <__aeabi_dcmplt>
 80124a6:	2800      	cmp	r0, #0
 80124a8:	d171      	bne.n	801258e <_dtoa_r+0x65e>
 80124aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80124ae:	4911      	ldr	r1, [pc, #68]	@ (80124f4 <_dtoa_r+0x5c4>)
 80124b0:	2000      	movs	r0, #0
 80124b2:	f7ed ff11 	bl	80002d8 <__aeabi_dsub>
 80124b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80124ba:	f7ee fb37 	bl	8000b2c <__aeabi_dcmplt>
 80124be:	2800      	cmp	r0, #0
 80124c0:	f040 8095 	bne.w	80125ee <_dtoa_r+0x6be>
 80124c4:	42a6      	cmp	r6, r4
 80124c6:	f43f af50 	beq.w	801236a <_dtoa_r+0x43a>
 80124ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80124ce:	4b0a      	ldr	r3, [pc, #40]	@ (80124f8 <_dtoa_r+0x5c8>)
 80124d0:	2200      	movs	r2, #0
 80124d2:	f7ee f8b9 	bl	8000648 <__aeabi_dmul>
 80124d6:	4b08      	ldr	r3, [pc, #32]	@ (80124f8 <_dtoa_r+0x5c8>)
 80124d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80124dc:	2200      	movs	r2, #0
 80124de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124e2:	f7ee f8b1 	bl	8000648 <__aeabi_dmul>
 80124e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124ea:	e7c4      	b.n	8012476 <_dtoa_r+0x546>
 80124ec:	080170a0 	.word	0x080170a0
 80124f0:	08017078 	.word	0x08017078
 80124f4:	3ff00000 	.word	0x3ff00000
 80124f8:	40240000 	.word	0x40240000
 80124fc:	401c0000 	.word	0x401c0000
 8012500:	40140000 	.word	0x40140000
 8012504:	3fe00000 	.word	0x3fe00000
 8012508:	4631      	mov	r1, r6
 801250a:	4628      	mov	r0, r5
 801250c:	f7ee f89c 	bl	8000648 <__aeabi_dmul>
 8012510:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012514:	9415      	str	r4, [sp, #84]	@ 0x54
 8012516:	4656      	mov	r6, sl
 8012518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801251c:	f7ee fb44 	bl	8000ba8 <__aeabi_d2iz>
 8012520:	4605      	mov	r5, r0
 8012522:	f7ee f827 	bl	8000574 <__aeabi_i2d>
 8012526:	4602      	mov	r2, r0
 8012528:	460b      	mov	r3, r1
 801252a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801252e:	f7ed fed3 	bl	80002d8 <__aeabi_dsub>
 8012532:	3530      	adds	r5, #48	@ 0x30
 8012534:	f806 5b01 	strb.w	r5, [r6], #1
 8012538:	4602      	mov	r2, r0
 801253a:	460b      	mov	r3, r1
 801253c:	42a6      	cmp	r6, r4
 801253e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012542:	f04f 0200 	mov.w	r2, #0
 8012546:	d124      	bne.n	8012592 <_dtoa_r+0x662>
 8012548:	4bac      	ldr	r3, [pc, #688]	@ (80127fc <_dtoa_r+0x8cc>)
 801254a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801254e:	f7ed fec5 	bl	80002dc <__adddf3>
 8012552:	4602      	mov	r2, r0
 8012554:	460b      	mov	r3, r1
 8012556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801255a:	f7ee fb05 	bl	8000b68 <__aeabi_dcmpgt>
 801255e:	2800      	cmp	r0, #0
 8012560:	d145      	bne.n	80125ee <_dtoa_r+0x6be>
 8012562:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012566:	49a5      	ldr	r1, [pc, #660]	@ (80127fc <_dtoa_r+0x8cc>)
 8012568:	2000      	movs	r0, #0
 801256a:	f7ed feb5 	bl	80002d8 <__aeabi_dsub>
 801256e:	4602      	mov	r2, r0
 8012570:	460b      	mov	r3, r1
 8012572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012576:	f7ee fad9 	bl	8000b2c <__aeabi_dcmplt>
 801257a:	2800      	cmp	r0, #0
 801257c:	f43f aef5 	beq.w	801236a <_dtoa_r+0x43a>
 8012580:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012582:	1e73      	subs	r3, r6, #1
 8012584:	9315      	str	r3, [sp, #84]	@ 0x54
 8012586:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801258a:	2b30      	cmp	r3, #48	@ 0x30
 801258c:	d0f8      	beq.n	8012580 <_dtoa_r+0x650>
 801258e:	9f04      	ldr	r7, [sp, #16]
 8012590:	e73e      	b.n	8012410 <_dtoa_r+0x4e0>
 8012592:	4b9b      	ldr	r3, [pc, #620]	@ (8012800 <_dtoa_r+0x8d0>)
 8012594:	f7ee f858 	bl	8000648 <__aeabi_dmul>
 8012598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801259c:	e7bc      	b.n	8012518 <_dtoa_r+0x5e8>
 801259e:	d10c      	bne.n	80125ba <_dtoa_r+0x68a>
 80125a0:	4b98      	ldr	r3, [pc, #608]	@ (8012804 <_dtoa_r+0x8d4>)
 80125a2:	2200      	movs	r2, #0
 80125a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125a8:	f7ee f84e 	bl	8000648 <__aeabi_dmul>
 80125ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80125b0:	f7ee fad0 	bl	8000b54 <__aeabi_dcmpge>
 80125b4:	2800      	cmp	r0, #0
 80125b6:	f000 8157 	beq.w	8012868 <_dtoa_r+0x938>
 80125ba:	2400      	movs	r4, #0
 80125bc:	4625      	mov	r5, r4
 80125be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125c0:	43db      	mvns	r3, r3
 80125c2:	9304      	str	r3, [sp, #16]
 80125c4:	4656      	mov	r6, sl
 80125c6:	2700      	movs	r7, #0
 80125c8:	4621      	mov	r1, r4
 80125ca:	4658      	mov	r0, fp
 80125cc:	f000 fbb4 	bl	8012d38 <_Bfree>
 80125d0:	2d00      	cmp	r5, #0
 80125d2:	d0dc      	beq.n	801258e <_dtoa_r+0x65e>
 80125d4:	b12f      	cbz	r7, 80125e2 <_dtoa_r+0x6b2>
 80125d6:	42af      	cmp	r7, r5
 80125d8:	d003      	beq.n	80125e2 <_dtoa_r+0x6b2>
 80125da:	4639      	mov	r1, r7
 80125dc:	4658      	mov	r0, fp
 80125de:	f000 fbab 	bl	8012d38 <_Bfree>
 80125e2:	4629      	mov	r1, r5
 80125e4:	4658      	mov	r0, fp
 80125e6:	f000 fba7 	bl	8012d38 <_Bfree>
 80125ea:	e7d0      	b.n	801258e <_dtoa_r+0x65e>
 80125ec:	9704      	str	r7, [sp, #16]
 80125ee:	4633      	mov	r3, r6
 80125f0:	461e      	mov	r6, r3
 80125f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80125f6:	2a39      	cmp	r2, #57	@ 0x39
 80125f8:	d107      	bne.n	801260a <_dtoa_r+0x6da>
 80125fa:	459a      	cmp	sl, r3
 80125fc:	d1f8      	bne.n	80125f0 <_dtoa_r+0x6c0>
 80125fe:	9a04      	ldr	r2, [sp, #16]
 8012600:	3201      	adds	r2, #1
 8012602:	9204      	str	r2, [sp, #16]
 8012604:	2230      	movs	r2, #48	@ 0x30
 8012606:	f88a 2000 	strb.w	r2, [sl]
 801260a:	781a      	ldrb	r2, [r3, #0]
 801260c:	3201      	adds	r2, #1
 801260e:	701a      	strb	r2, [r3, #0]
 8012610:	e7bd      	b.n	801258e <_dtoa_r+0x65e>
 8012612:	4b7b      	ldr	r3, [pc, #492]	@ (8012800 <_dtoa_r+0x8d0>)
 8012614:	2200      	movs	r2, #0
 8012616:	f7ee f817 	bl	8000648 <__aeabi_dmul>
 801261a:	2200      	movs	r2, #0
 801261c:	2300      	movs	r3, #0
 801261e:	4604      	mov	r4, r0
 8012620:	460d      	mov	r5, r1
 8012622:	f7ee fa79 	bl	8000b18 <__aeabi_dcmpeq>
 8012626:	2800      	cmp	r0, #0
 8012628:	f43f aebb 	beq.w	80123a2 <_dtoa_r+0x472>
 801262c:	e6f0      	b.n	8012410 <_dtoa_r+0x4e0>
 801262e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012630:	2a00      	cmp	r2, #0
 8012632:	f000 80db 	beq.w	80127ec <_dtoa_r+0x8bc>
 8012636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012638:	2a01      	cmp	r2, #1
 801263a:	f300 80bf 	bgt.w	80127bc <_dtoa_r+0x88c>
 801263e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012640:	2a00      	cmp	r2, #0
 8012642:	f000 80b7 	beq.w	80127b4 <_dtoa_r+0x884>
 8012646:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801264a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801264c:	4646      	mov	r6, r8
 801264e:	9a08      	ldr	r2, [sp, #32]
 8012650:	2101      	movs	r1, #1
 8012652:	441a      	add	r2, r3
 8012654:	4658      	mov	r0, fp
 8012656:	4498      	add	r8, r3
 8012658:	9208      	str	r2, [sp, #32]
 801265a:	f000 fc6b 	bl	8012f34 <__i2b>
 801265e:	4605      	mov	r5, r0
 8012660:	b15e      	cbz	r6, 801267a <_dtoa_r+0x74a>
 8012662:	9b08      	ldr	r3, [sp, #32]
 8012664:	2b00      	cmp	r3, #0
 8012666:	dd08      	ble.n	801267a <_dtoa_r+0x74a>
 8012668:	42b3      	cmp	r3, r6
 801266a:	9a08      	ldr	r2, [sp, #32]
 801266c:	bfa8      	it	ge
 801266e:	4633      	movge	r3, r6
 8012670:	eba8 0803 	sub.w	r8, r8, r3
 8012674:	1af6      	subs	r6, r6, r3
 8012676:	1ad3      	subs	r3, r2, r3
 8012678:	9308      	str	r3, [sp, #32]
 801267a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801267c:	b1f3      	cbz	r3, 80126bc <_dtoa_r+0x78c>
 801267e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012680:	2b00      	cmp	r3, #0
 8012682:	f000 80b7 	beq.w	80127f4 <_dtoa_r+0x8c4>
 8012686:	b18c      	cbz	r4, 80126ac <_dtoa_r+0x77c>
 8012688:	4629      	mov	r1, r5
 801268a:	4622      	mov	r2, r4
 801268c:	4658      	mov	r0, fp
 801268e:	f000 fd11 	bl	80130b4 <__pow5mult>
 8012692:	464a      	mov	r2, r9
 8012694:	4601      	mov	r1, r0
 8012696:	4605      	mov	r5, r0
 8012698:	4658      	mov	r0, fp
 801269a:	f000 fc61 	bl	8012f60 <__multiply>
 801269e:	4649      	mov	r1, r9
 80126a0:	9004      	str	r0, [sp, #16]
 80126a2:	4658      	mov	r0, fp
 80126a4:	f000 fb48 	bl	8012d38 <_Bfree>
 80126a8:	9b04      	ldr	r3, [sp, #16]
 80126aa:	4699      	mov	r9, r3
 80126ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80126ae:	1b1a      	subs	r2, r3, r4
 80126b0:	d004      	beq.n	80126bc <_dtoa_r+0x78c>
 80126b2:	4649      	mov	r1, r9
 80126b4:	4658      	mov	r0, fp
 80126b6:	f000 fcfd 	bl	80130b4 <__pow5mult>
 80126ba:	4681      	mov	r9, r0
 80126bc:	2101      	movs	r1, #1
 80126be:	4658      	mov	r0, fp
 80126c0:	f000 fc38 	bl	8012f34 <__i2b>
 80126c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80126c6:	4604      	mov	r4, r0
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	f000 81cf 	beq.w	8012a6c <_dtoa_r+0xb3c>
 80126ce:	461a      	mov	r2, r3
 80126d0:	4601      	mov	r1, r0
 80126d2:	4658      	mov	r0, fp
 80126d4:	f000 fcee 	bl	80130b4 <__pow5mult>
 80126d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126da:	2b01      	cmp	r3, #1
 80126dc:	4604      	mov	r4, r0
 80126de:	f300 8095 	bgt.w	801280c <_dtoa_r+0x8dc>
 80126e2:	9b02      	ldr	r3, [sp, #8]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	f040 8087 	bne.w	80127f8 <_dtoa_r+0x8c8>
 80126ea:	9b03      	ldr	r3, [sp, #12]
 80126ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	f040 8089 	bne.w	8012808 <_dtoa_r+0x8d8>
 80126f6:	9b03      	ldr	r3, [sp, #12]
 80126f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80126fc:	0d1b      	lsrs	r3, r3, #20
 80126fe:	051b      	lsls	r3, r3, #20
 8012700:	b12b      	cbz	r3, 801270e <_dtoa_r+0x7de>
 8012702:	9b08      	ldr	r3, [sp, #32]
 8012704:	3301      	adds	r3, #1
 8012706:	9308      	str	r3, [sp, #32]
 8012708:	f108 0801 	add.w	r8, r8, #1
 801270c:	2301      	movs	r3, #1
 801270e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012710:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012712:	2b00      	cmp	r3, #0
 8012714:	f000 81b0 	beq.w	8012a78 <_dtoa_r+0xb48>
 8012718:	6923      	ldr	r3, [r4, #16]
 801271a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801271e:	6918      	ldr	r0, [r3, #16]
 8012720:	f000 fbbc 	bl	8012e9c <__hi0bits>
 8012724:	f1c0 0020 	rsb	r0, r0, #32
 8012728:	9b08      	ldr	r3, [sp, #32]
 801272a:	4418      	add	r0, r3
 801272c:	f010 001f 	ands.w	r0, r0, #31
 8012730:	d077      	beq.n	8012822 <_dtoa_r+0x8f2>
 8012732:	f1c0 0320 	rsb	r3, r0, #32
 8012736:	2b04      	cmp	r3, #4
 8012738:	dd6b      	ble.n	8012812 <_dtoa_r+0x8e2>
 801273a:	9b08      	ldr	r3, [sp, #32]
 801273c:	f1c0 001c 	rsb	r0, r0, #28
 8012740:	4403      	add	r3, r0
 8012742:	4480      	add	r8, r0
 8012744:	4406      	add	r6, r0
 8012746:	9308      	str	r3, [sp, #32]
 8012748:	f1b8 0f00 	cmp.w	r8, #0
 801274c:	dd05      	ble.n	801275a <_dtoa_r+0x82a>
 801274e:	4649      	mov	r1, r9
 8012750:	4642      	mov	r2, r8
 8012752:	4658      	mov	r0, fp
 8012754:	f000 fd08 	bl	8013168 <__lshift>
 8012758:	4681      	mov	r9, r0
 801275a:	9b08      	ldr	r3, [sp, #32]
 801275c:	2b00      	cmp	r3, #0
 801275e:	dd05      	ble.n	801276c <_dtoa_r+0x83c>
 8012760:	4621      	mov	r1, r4
 8012762:	461a      	mov	r2, r3
 8012764:	4658      	mov	r0, fp
 8012766:	f000 fcff 	bl	8013168 <__lshift>
 801276a:	4604      	mov	r4, r0
 801276c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801276e:	2b00      	cmp	r3, #0
 8012770:	d059      	beq.n	8012826 <_dtoa_r+0x8f6>
 8012772:	4621      	mov	r1, r4
 8012774:	4648      	mov	r0, r9
 8012776:	f000 fd63 	bl	8013240 <__mcmp>
 801277a:	2800      	cmp	r0, #0
 801277c:	da53      	bge.n	8012826 <_dtoa_r+0x8f6>
 801277e:	1e7b      	subs	r3, r7, #1
 8012780:	9304      	str	r3, [sp, #16]
 8012782:	4649      	mov	r1, r9
 8012784:	2300      	movs	r3, #0
 8012786:	220a      	movs	r2, #10
 8012788:	4658      	mov	r0, fp
 801278a:	f000 faf7 	bl	8012d7c <__multadd>
 801278e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012790:	4681      	mov	r9, r0
 8012792:	2b00      	cmp	r3, #0
 8012794:	f000 8172 	beq.w	8012a7c <_dtoa_r+0xb4c>
 8012798:	2300      	movs	r3, #0
 801279a:	4629      	mov	r1, r5
 801279c:	220a      	movs	r2, #10
 801279e:	4658      	mov	r0, fp
 80127a0:	f000 faec 	bl	8012d7c <__multadd>
 80127a4:	9b00      	ldr	r3, [sp, #0]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	4605      	mov	r5, r0
 80127aa:	dc67      	bgt.n	801287c <_dtoa_r+0x94c>
 80127ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80127ae:	2b02      	cmp	r3, #2
 80127b0:	dc41      	bgt.n	8012836 <_dtoa_r+0x906>
 80127b2:	e063      	b.n	801287c <_dtoa_r+0x94c>
 80127b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80127b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80127ba:	e746      	b.n	801264a <_dtoa_r+0x71a>
 80127bc:	9b07      	ldr	r3, [sp, #28]
 80127be:	1e5c      	subs	r4, r3, #1
 80127c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127c2:	42a3      	cmp	r3, r4
 80127c4:	bfbf      	itttt	lt
 80127c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80127c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80127ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80127cc:	1ae3      	sublt	r3, r4, r3
 80127ce:	bfb4      	ite	lt
 80127d0:	18d2      	addlt	r2, r2, r3
 80127d2:	1b1c      	subge	r4, r3, r4
 80127d4:	9b07      	ldr	r3, [sp, #28]
 80127d6:	bfbc      	itt	lt
 80127d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80127da:	2400      	movlt	r4, #0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	bfb5      	itete	lt
 80127e0:	eba8 0603 	sublt.w	r6, r8, r3
 80127e4:	9b07      	ldrge	r3, [sp, #28]
 80127e6:	2300      	movlt	r3, #0
 80127e8:	4646      	movge	r6, r8
 80127ea:	e730      	b.n	801264e <_dtoa_r+0x71e>
 80127ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80127ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80127f0:	4646      	mov	r6, r8
 80127f2:	e735      	b.n	8012660 <_dtoa_r+0x730>
 80127f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80127f6:	e75c      	b.n	80126b2 <_dtoa_r+0x782>
 80127f8:	2300      	movs	r3, #0
 80127fa:	e788      	b.n	801270e <_dtoa_r+0x7de>
 80127fc:	3fe00000 	.word	0x3fe00000
 8012800:	40240000 	.word	0x40240000
 8012804:	40140000 	.word	0x40140000
 8012808:	9b02      	ldr	r3, [sp, #8]
 801280a:	e780      	b.n	801270e <_dtoa_r+0x7de>
 801280c:	2300      	movs	r3, #0
 801280e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012810:	e782      	b.n	8012718 <_dtoa_r+0x7e8>
 8012812:	d099      	beq.n	8012748 <_dtoa_r+0x818>
 8012814:	9a08      	ldr	r2, [sp, #32]
 8012816:	331c      	adds	r3, #28
 8012818:	441a      	add	r2, r3
 801281a:	4498      	add	r8, r3
 801281c:	441e      	add	r6, r3
 801281e:	9208      	str	r2, [sp, #32]
 8012820:	e792      	b.n	8012748 <_dtoa_r+0x818>
 8012822:	4603      	mov	r3, r0
 8012824:	e7f6      	b.n	8012814 <_dtoa_r+0x8e4>
 8012826:	9b07      	ldr	r3, [sp, #28]
 8012828:	9704      	str	r7, [sp, #16]
 801282a:	2b00      	cmp	r3, #0
 801282c:	dc20      	bgt.n	8012870 <_dtoa_r+0x940>
 801282e:	9300      	str	r3, [sp, #0]
 8012830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012832:	2b02      	cmp	r3, #2
 8012834:	dd1e      	ble.n	8012874 <_dtoa_r+0x944>
 8012836:	9b00      	ldr	r3, [sp, #0]
 8012838:	2b00      	cmp	r3, #0
 801283a:	f47f aec0 	bne.w	80125be <_dtoa_r+0x68e>
 801283e:	4621      	mov	r1, r4
 8012840:	2205      	movs	r2, #5
 8012842:	4658      	mov	r0, fp
 8012844:	f000 fa9a 	bl	8012d7c <__multadd>
 8012848:	4601      	mov	r1, r0
 801284a:	4604      	mov	r4, r0
 801284c:	4648      	mov	r0, r9
 801284e:	f000 fcf7 	bl	8013240 <__mcmp>
 8012852:	2800      	cmp	r0, #0
 8012854:	f77f aeb3 	ble.w	80125be <_dtoa_r+0x68e>
 8012858:	4656      	mov	r6, sl
 801285a:	2331      	movs	r3, #49	@ 0x31
 801285c:	f806 3b01 	strb.w	r3, [r6], #1
 8012860:	9b04      	ldr	r3, [sp, #16]
 8012862:	3301      	adds	r3, #1
 8012864:	9304      	str	r3, [sp, #16]
 8012866:	e6ae      	b.n	80125c6 <_dtoa_r+0x696>
 8012868:	9c07      	ldr	r4, [sp, #28]
 801286a:	9704      	str	r7, [sp, #16]
 801286c:	4625      	mov	r5, r4
 801286e:	e7f3      	b.n	8012858 <_dtoa_r+0x928>
 8012870:	9b07      	ldr	r3, [sp, #28]
 8012872:	9300      	str	r3, [sp, #0]
 8012874:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012876:	2b00      	cmp	r3, #0
 8012878:	f000 8104 	beq.w	8012a84 <_dtoa_r+0xb54>
 801287c:	2e00      	cmp	r6, #0
 801287e:	dd05      	ble.n	801288c <_dtoa_r+0x95c>
 8012880:	4629      	mov	r1, r5
 8012882:	4632      	mov	r2, r6
 8012884:	4658      	mov	r0, fp
 8012886:	f000 fc6f 	bl	8013168 <__lshift>
 801288a:	4605      	mov	r5, r0
 801288c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801288e:	2b00      	cmp	r3, #0
 8012890:	d05a      	beq.n	8012948 <_dtoa_r+0xa18>
 8012892:	6869      	ldr	r1, [r5, #4]
 8012894:	4658      	mov	r0, fp
 8012896:	f000 fa0f 	bl	8012cb8 <_Balloc>
 801289a:	4606      	mov	r6, r0
 801289c:	b928      	cbnz	r0, 80128aa <_dtoa_r+0x97a>
 801289e:	4b84      	ldr	r3, [pc, #528]	@ (8012ab0 <_dtoa_r+0xb80>)
 80128a0:	4602      	mov	r2, r0
 80128a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80128a6:	f7ff bb5a 	b.w	8011f5e <_dtoa_r+0x2e>
 80128aa:	692a      	ldr	r2, [r5, #16]
 80128ac:	3202      	adds	r2, #2
 80128ae:	0092      	lsls	r2, r2, #2
 80128b0:	f105 010c 	add.w	r1, r5, #12
 80128b4:	300c      	adds	r0, #12
 80128b6:	f7ff fa9e 	bl	8011df6 <memcpy>
 80128ba:	2201      	movs	r2, #1
 80128bc:	4631      	mov	r1, r6
 80128be:	4658      	mov	r0, fp
 80128c0:	f000 fc52 	bl	8013168 <__lshift>
 80128c4:	f10a 0301 	add.w	r3, sl, #1
 80128c8:	9307      	str	r3, [sp, #28]
 80128ca:	9b00      	ldr	r3, [sp, #0]
 80128cc:	4453      	add	r3, sl
 80128ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80128d0:	9b02      	ldr	r3, [sp, #8]
 80128d2:	f003 0301 	and.w	r3, r3, #1
 80128d6:	462f      	mov	r7, r5
 80128d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80128da:	4605      	mov	r5, r0
 80128dc:	9b07      	ldr	r3, [sp, #28]
 80128de:	4621      	mov	r1, r4
 80128e0:	3b01      	subs	r3, #1
 80128e2:	4648      	mov	r0, r9
 80128e4:	9300      	str	r3, [sp, #0]
 80128e6:	f7ff fa9b 	bl	8011e20 <quorem>
 80128ea:	4639      	mov	r1, r7
 80128ec:	9002      	str	r0, [sp, #8]
 80128ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80128f2:	4648      	mov	r0, r9
 80128f4:	f000 fca4 	bl	8013240 <__mcmp>
 80128f8:	462a      	mov	r2, r5
 80128fa:	9008      	str	r0, [sp, #32]
 80128fc:	4621      	mov	r1, r4
 80128fe:	4658      	mov	r0, fp
 8012900:	f000 fcba 	bl	8013278 <__mdiff>
 8012904:	68c2      	ldr	r2, [r0, #12]
 8012906:	4606      	mov	r6, r0
 8012908:	bb02      	cbnz	r2, 801294c <_dtoa_r+0xa1c>
 801290a:	4601      	mov	r1, r0
 801290c:	4648      	mov	r0, r9
 801290e:	f000 fc97 	bl	8013240 <__mcmp>
 8012912:	4602      	mov	r2, r0
 8012914:	4631      	mov	r1, r6
 8012916:	4658      	mov	r0, fp
 8012918:	920e      	str	r2, [sp, #56]	@ 0x38
 801291a:	f000 fa0d 	bl	8012d38 <_Bfree>
 801291e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012920:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012922:	9e07      	ldr	r6, [sp, #28]
 8012924:	ea43 0102 	orr.w	r1, r3, r2
 8012928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801292a:	4319      	orrs	r1, r3
 801292c:	d110      	bne.n	8012950 <_dtoa_r+0xa20>
 801292e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012932:	d029      	beq.n	8012988 <_dtoa_r+0xa58>
 8012934:	9b08      	ldr	r3, [sp, #32]
 8012936:	2b00      	cmp	r3, #0
 8012938:	dd02      	ble.n	8012940 <_dtoa_r+0xa10>
 801293a:	9b02      	ldr	r3, [sp, #8]
 801293c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012940:	9b00      	ldr	r3, [sp, #0]
 8012942:	f883 8000 	strb.w	r8, [r3]
 8012946:	e63f      	b.n	80125c8 <_dtoa_r+0x698>
 8012948:	4628      	mov	r0, r5
 801294a:	e7bb      	b.n	80128c4 <_dtoa_r+0x994>
 801294c:	2201      	movs	r2, #1
 801294e:	e7e1      	b.n	8012914 <_dtoa_r+0x9e4>
 8012950:	9b08      	ldr	r3, [sp, #32]
 8012952:	2b00      	cmp	r3, #0
 8012954:	db04      	blt.n	8012960 <_dtoa_r+0xa30>
 8012956:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012958:	430b      	orrs	r3, r1
 801295a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801295c:	430b      	orrs	r3, r1
 801295e:	d120      	bne.n	80129a2 <_dtoa_r+0xa72>
 8012960:	2a00      	cmp	r2, #0
 8012962:	dded      	ble.n	8012940 <_dtoa_r+0xa10>
 8012964:	4649      	mov	r1, r9
 8012966:	2201      	movs	r2, #1
 8012968:	4658      	mov	r0, fp
 801296a:	f000 fbfd 	bl	8013168 <__lshift>
 801296e:	4621      	mov	r1, r4
 8012970:	4681      	mov	r9, r0
 8012972:	f000 fc65 	bl	8013240 <__mcmp>
 8012976:	2800      	cmp	r0, #0
 8012978:	dc03      	bgt.n	8012982 <_dtoa_r+0xa52>
 801297a:	d1e1      	bne.n	8012940 <_dtoa_r+0xa10>
 801297c:	f018 0f01 	tst.w	r8, #1
 8012980:	d0de      	beq.n	8012940 <_dtoa_r+0xa10>
 8012982:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012986:	d1d8      	bne.n	801293a <_dtoa_r+0xa0a>
 8012988:	9a00      	ldr	r2, [sp, #0]
 801298a:	2339      	movs	r3, #57	@ 0x39
 801298c:	7013      	strb	r3, [r2, #0]
 801298e:	4633      	mov	r3, r6
 8012990:	461e      	mov	r6, r3
 8012992:	3b01      	subs	r3, #1
 8012994:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012998:	2a39      	cmp	r2, #57	@ 0x39
 801299a:	d052      	beq.n	8012a42 <_dtoa_r+0xb12>
 801299c:	3201      	adds	r2, #1
 801299e:	701a      	strb	r2, [r3, #0]
 80129a0:	e612      	b.n	80125c8 <_dtoa_r+0x698>
 80129a2:	2a00      	cmp	r2, #0
 80129a4:	dd07      	ble.n	80129b6 <_dtoa_r+0xa86>
 80129a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80129aa:	d0ed      	beq.n	8012988 <_dtoa_r+0xa58>
 80129ac:	9a00      	ldr	r2, [sp, #0]
 80129ae:	f108 0301 	add.w	r3, r8, #1
 80129b2:	7013      	strb	r3, [r2, #0]
 80129b4:	e608      	b.n	80125c8 <_dtoa_r+0x698>
 80129b6:	9b07      	ldr	r3, [sp, #28]
 80129b8:	9a07      	ldr	r2, [sp, #28]
 80129ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80129be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80129c0:	4293      	cmp	r3, r2
 80129c2:	d028      	beq.n	8012a16 <_dtoa_r+0xae6>
 80129c4:	4649      	mov	r1, r9
 80129c6:	2300      	movs	r3, #0
 80129c8:	220a      	movs	r2, #10
 80129ca:	4658      	mov	r0, fp
 80129cc:	f000 f9d6 	bl	8012d7c <__multadd>
 80129d0:	42af      	cmp	r7, r5
 80129d2:	4681      	mov	r9, r0
 80129d4:	f04f 0300 	mov.w	r3, #0
 80129d8:	f04f 020a 	mov.w	r2, #10
 80129dc:	4639      	mov	r1, r7
 80129de:	4658      	mov	r0, fp
 80129e0:	d107      	bne.n	80129f2 <_dtoa_r+0xac2>
 80129e2:	f000 f9cb 	bl	8012d7c <__multadd>
 80129e6:	4607      	mov	r7, r0
 80129e8:	4605      	mov	r5, r0
 80129ea:	9b07      	ldr	r3, [sp, #28]
 80129ec:	3301      	adds	r3, #1
 80129ee:	9307      	str	r3, [sp, #28]
 80129f0:	e774      	b.n	80128dc <_dtoa_r+0x9ac>
 80129f2:	f000 f9c3 	bl	8012d7c <__multadd>
 80129f6:	4629      	mov	r1, r5
 80129f8:	4607      	mov	r7, r0
 80129fa:	2300      	movs	r3, #0
 80129fc:	220a      	movs	r2, #10
 80129fe:	4658      	mov	r0, fp
 8012a00:	f000 f9bc 	bl	8012d7c <__multadd>
 8012a04:	4605      	mov	r5, r0
 8012a06:	e7f0      	b.n	80129ea <_dtoa_r+0xaba>
 8012a08:	9b00      	ldr	r3, [sp, #0]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	bfcc      	ite	gt
 8012a0e:	461e      	movgt	r6, r3
 8012a10:	2601      	movle	r6, #1
 8012a12:	4456      	add	r6, sl
 8012a14:	2700      	movs	r7, #0
 8012a16:	4649      	mov	r1, r9
 8012a18:	2201      	movs	r2, #1
 8012a1a:	4658      	mov	r0, fp
 8012a1c:	f000 fba4 	bl	8013168 <__lshift>
 8012a20:	4621      	mov	r1, r4
 8012a22:	4681      	mov	r9, r0
 8012a24:	f000 fc0c 	bl	8013240 <__mcmp>
 8012a28:	2800      	cmp	r0, #0
 8012a2a:	dcb0      	bgt.n	801298e <_dtoa_r+0xa5e>
 8012a2c:	d102      	bne.n	8012a34 <_dtoa_r+0xb04>
 8012a2e:	f018 0f01 	tst.w	r8, #1
 8012a32:	d1ac      	bne.n	801298e <_dtoa_r+0xa5e>
 8012a34:	4633      	mov	r3, r6
 8012a36:	461e      	mov	r6, r3
 8012a38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012a3c:	2a30      	cmp	r2, #48	@ 0x30
 8012a3e:	d0fa      	beq.n	8012a36 <_dtoa_r+0xb06>
 8012a40:	e5c2      	b.n	80125c8 <_dtoa_r+0x698>
 8012a42:	459a      	cmp	sl, r3
 8012a44:	d1a4      	bne.n	8012990 <_dtoa_r+0xa60>
 8012a46:	9b04      	ldr	r3, [sp, #16]
 8012a48:	3301      	adds	r3, #1
 8012a4a:	9304      	str	r3, [sp, #16]
 8012a4c:	2331      	movs	r3, #49	@ 0x31
 8012a4e:	f88a 3000 	strb.w	r3, [sl]
 8012a52:	e5b9      	b.n	80125c8 <_dtoa_r+0x698>
 8012a54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012a56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012ab4 <_dtoa_r+0xb84>
 8012a5a:	b11b      	cbz	r3, 8012a64 <_dtoa_r+0xb34>
 8012a5c:	f10a 0308 	add.w	r3, sl, #8
 8012a60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012a62:	6013      	str	r3, [r2, #0]
 8012a64:	4650      	mov	r0, sl
 8012a66:	b019      	add	sp, #100	@ 0x64
 8012a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	f77f ae37 	ble.w	80126e2 <_dtoa_r+0x7b2>
 8012a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012a76:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a78:	2001      	movs	r0, #1
 8012a7a:	e655      	b.n	8012728 <_dtoa_r+0x7f8>
 8012a7c:	9b00      	ldr	r3, [sp, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	f77f aed6 	ble.w	8012830 <_dtoa_r+0x900>
 8012a84:	4656      	mov	r6, sl
 8012a86:	4621      	mov	r1, r4
 8012a88:	4648      	mov	r0, r9
 8012a8a:	f7ff f9c9 	bl	8011e20 <quorem>
 8012a8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012a92:	f806 8b01 	strb.w	r8, [r6], #1
 8012a96:	9b00      	ldr	r3, [sp, #0]
 8012a98:	eba6 020a 	sub.w	r2, r6, sl
 8012a9c:	4293      	cmp	r3, r2
 8012a9e:	ddb3      	ble.n	8012a08 <_dtoa_r+0xad8>
 8012aa0:	4649      	mov	r1, r9
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	220a      	movs	r2, #10
 8012aa6:	4658      	mov	r0, fp
 8012aa8:	f000 f968 	bl	8012d7c <__multadd>
 8012aac:	4681      	mov	r9, r0
 8012aae:	e7ea      	b.n	8012a86 <_dtoa_r+0xb56>
 8012ab0:	08016ffb 	.word	0x08016ffb
 8012ab4:	08016f7f 	.word	0x08016f7f

08012ab8 <_free_r>:
 8012ab8:	b538      	push	{r3, r4, r5, lr}
 8012aba:	4605      	mov	r5, r0
 8012abc:	2900      	cmp	r1, #0
 8012abe:	d041      	beq.n	8012b44 <_free_r+0x8c>
 8012ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ac4:	1f0c      	subs	r4, r1, #4
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	bfb8      	it	lt
 8012aca:	18e4      	addlt	r4, r4, r3
 8012acc:	f000 f8e8 	bl	8012ca0 <__malloc_lock>
 8012ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8012b48 <_free_r+0x90>)
 8012ad2:	6813      	ldr	r3, [r2, #0]
 8012ad4:	b933      	cbnz	r3, 8012ae4 <_free_r+0x2c>
 8012ad6:	6063      	str	r3, [r4, #4]
 8012ad8:	6014      	str	r4, [r2, #0]
 8012ada:	4628      	mov	r0, r5
 8012adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ae0:	f000 b8e4 	b.w	8012cac <__malloc_unlock>
 8012ae4:	42a3      	cmp	r3, r4
 8012ae6:	d908      	bls.n	8012afa <_free_r+0x42>
 8012ae8:	6820      	ldr	r0, [r4, #0]
 8012aea:	1821      	adds	r1, r4, r0
 8012aec:	428b      	cmp	r3, r1
 8012aee:	bf01      	itttt	eq
 8012af0:	6819      	ldreq	r1, [r3, #0]
 8012af2:	685b      	ldreq	r3, [r3, #4]
 8012af4:	1809      	addeq	r1, r1, r0
 8012af6:	6021      	streq	r1, [r4, #0]
 8012af8:	e7ed      	b.n	8012ad6 <_free_r+0x1e>
 8012afa:	461a      	mov	r2, r3
 8012afc:	685b      	ldr	r3, [r3, #4]
 8012afe:	b10b      	cbz	r3, 8012b04 <_free_r+0x4c>
 8012b00:	42a3      	cmp	r3, r4
 8012b02:	d9fa      	bls.n	8012afa <_free_r+0x42>
 8012b04:	6811      	ldr	r1, [r2, #0]
 8012b06:	1850      	adds	r0, r2, r1
 8012b08:	42a0      	cmp	r0, r4
 8012b0a:	d10b      	bne.n	8012b24 <_free_r+0x6c>
 8012b0c:	6820      	ldr	r0, [r4, #0]
 8012b0e:	4401      	add	r1, r0
 8012b10:	1850      	adds	r0, r2, r1
 8012b12:	4283      	cmp	r3, r0
 8012b14:	6011      	str	r1, [r2, #0]
 8012b16:	d1e0      	bne.n	8012ada <_free_r+0x22>
 8012b18:	6818      	ldr	r0, [r3, #0]
 8012b1a:	685b      	ldr	r3, [r3, #4]
 8012b1c:	6053      	str	r3, [r2, #4]
 8012b1e:	4408      	add	r0, r1
 8012b20:	6010      	str	r0, [r2, #0]
 8012b22:	e7da      	b.n	8012ada <_free_r+0x22>
 8012b24:	d902      	bls.n	8012b2c <_free_r+0x74>
 8012b26:	230c      	movs	r3, #12
 8012b28:	602b      	str	r3, [r5, #0]
 8012b2a:	e7d6      	b.n	8012ada <_free_r+0x22>
 8012b2c:	6820      	ldr	r0, [r4, #0]
 8012b2e:	1821      	adds	r1, r4, r0
 8012b30:	428b      	cmp	r3, r1
 8012b32:	bf04      	itt	eq
 8012b34:	6819      	ldreq	r1, [r3, #0]
 8012b36:	685b      	ldreq	r3, [r3, #4]
 8012b38:	6063      	str	r3, [r4, #4]
 8012b3a:	bf04      	itt	eq
 8012b3c:	1809      	addeq	r1, r1, r0
 8012b3e:	6021      	streq	r1, [r4, #0]
 8012b40:	6054      	str	r4, [r2, #4]
 8012b42:	e7ca      	b.n	8012ada <_free_r+0x22>
 8012b44:	bd38      	pop	{r3, r4, r5, pc}
 8012b46:	bf00      	nop
 8012b48:	200026e0 	.word	0x200026e0

08012b4c <malloc>:
 8012b4c:	4b02      	ldr	r3, [pc, #8]	@ (8012b58 <malloc+0xc>)
 8012b4e:	4601      	mov	r1, r0
 8012b50:	6818      	ldr	r0, [r3, #0]
 8012b52:	f000 b825 	b.w	8012ba0 <_malloc_r>
 8012b56:	bf00      	nop
 8012b58:	200001e4 	.word	0x200001e4

08012b5c <sbrk_aligned>:
 8012b5c:	b570      	push	{r4, r5, r6, lr}
 8012b5e:	4e0f      	ldr	r6, [pc, #60]	@ (8012b9c <sbrk_aligned+0x40>)
 8012b60:	460c      	mov	r4, r1
 8012b62:	6831      	ldr	r1, [r6, #0]
 8012b64:	4605      	mov	r5, r0
 8012b66:	b911      	cbnz	r1, 8012b6e <sbrk_aligned+0x12>
 8012b68:	f002 f988 	bl	8014e7c <_sbrk_r>
 8012b6c:	6030      	str	r0, [r6, #0]
 8012b6e:	4621      	mov	r1, r4
 8012b70:	4628      	mov	r0, r5
 8012b72:	f002 f983 	bl	8014e7c <_sbrk_r>
 8012b76:	1c43      	adds	r3, r0, #1
 8012b78:	d103      	bne.n	8012b82 <sbrk_aligned+0x26>
 8012b7a:	f04f 34ff 	mov.w	r4, #4294967295
 8012b7e:	4620      	mov	r0, r4
 8012b80:	bd70      	pop	{r4, r5, r6, pc}
 8012b82:	1cc4      	adds	r4, r0, #3
 8012b84:	f024 0403 	bic.w	r4, r4, #3
 8012b88:	42a0      	cmp	r0, r4
 8012b8a:	d0f8      	beq.n	8012b7e <sbrk_aligned+0x22>
 8012b8c:	1a21      	subs	r1, r4, r0
 8012b8e:	4628      	mov	r0, r5
 8012b90:	f002 f974 	bl	8014e7c <_sbrk_r>
 8012b94:	3001      	adds	r0, #1
 8012b96:	d1f2      	bne.n	8012b7e <sbrk_aligned+0x22>
 8012b98:	e7ef      	b.n	8012b7a <sbrk_aligned+0x1e>
 8012b9a:	bf00      	nop
 8012b9c:	200026dc 	.word	0x200026dc

08012ba0 <_malloc_r>:
 8012ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ba4:	1ccd      	adds	r5, r1, #3
 8012ba6:	f025 0503 	bic.w	r5, r5, #3
 8012baa:	3508      	adds	r5, #8
 8012bac:	2d0c      	cmp	r5, #12
 8012bae:	bf38      	it	cc
 8012bb0:	250c      	movcc	r5, #12
 8012bb2:	2d00      	cmp	r5, #0
 8012bb4:	4606      	mov	r6, r0
 8012bb6:	db01      	blt.n	8012bbc <_malloc_r+0x1c>
 8012bb8:	42a9      	cmp	r1, r5
 8012bba:	d904      	bls.n	8012bc6 <_malloc_r+0x26>
 8012bbc:	230c      	movs	r3, #12
 8012bbe:	6033      	str	r3, [r6, #0]
 8012bc0:	2000      	movs	r0, #0
 8012bc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012c9c <_malloc_r+0xfc>
 8012bca:	f000 f869 	bl	8012ca0 <__malloc_lock>
 8012bce:	f8d8 3000 	ldr.w	r3, [r8]
 8012bd2:	461c      	mov	r4, r3
 8012bd4:	bb44      	cbnz	r4, 8012c28 <_malloc_r+0x88>
 8012bd6:	4629      	mov	r1, r5
 8012bd8:	4630      	mov	r0, r6
 8012bda:	f7ff ffbf 	bl	8012b5c <sbrk_aligned>
 8012bde:	1c43      	adds	r3, r0, #1
 8012be0:	4604      	mov	r4, r0
 8012be2:	d158      	bne.n	8012c96 <_malloc_r+0xf6>
 8012be4:	f8d8 4000 	ldr.w	r4, [r8]
 8012be8:	4627      	mov	r7, r4
 8012bea:	2f00      	cmp	r7, #0
 8012bec:	d143      	bne.n	8012c76 <_malloc_r+0xd6>
 8012bee:	2c00      	cmp	r4, #0
 8012bf0:	d04b      	beq.n	8012c8a <_malloc_r+0xea>
 8012bf2:	6823      	ldr	r3, [r4, #0]
 8012bf4:	4639      	mov	r1, r7
 8012bf6:	4630      	mov	r0, r6
 8012bf8:	eb04 0903 	add.w	r9, r4, r3
 8012bfc:	f002 f93e 	bl	8014e7c <_sbrk_r>
 8012c00:	4581      	cmp	r9, r0
 8012c02:	d142      	bne.n	8012c8a <_malloc_r+0xea>
 8012c04:	6821      	ldr	r1, [r4, #0]
 8012c06:	1a6d      	subs	r5, r5, r1
 8012c08:	4629      	mov	r1, r5
 8012c0a:	4630      	mov	r0, r6
 8012c0c:	f7ff ffa6 	bl	8012b5c <sbrk_aligned>
 8012c10:	3001      	adds	r0, #1
 8012c12:	d03a      	beq.n	8012c8a <_malloc_r+0xea>
 8012c14:	6823      	ldr	r3, [r4, #0]
 8012c16:	442b      	add	r3, r5
 8012c18:	6023      	str	r3, [r4, #0]
 8012c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8012c1e:	685a      	ldr	r2, [r3, #4]
 8012c20:	bb62      	cbnz	r2, 8012c7c <_malloc_r+0xdc>
 8012c22:	f8c8 7000 	str.w	r7, [r8]
 8012c26:	e00f      	b.n	8012c48 <_malloc_r+0xa8>
 8012c28:	6822      	ldr	r2, [r4, #0]
 8012c2a:	1b52      	subs	r2, r2, r5
 8012c2c:	d420      	bmi.n	8012c70 <_malloc_r+0xd0>
 8012c2e:	2a0b      	cmp	r2, #11
 8012c30:	d917      	bls.n	8012c62 <_malloc_r+0xc2>
 8012c32:	1961      	adds	r1, r4, r5
 8012c34:	42a3      	cmp	r3, r4
 8012c36:	6025      	str	r5, [r4, #0]
 8012c38:	bf18      	it	ne
 8012c3a:	6059      	strne	r1, [r3, #4]
 8012c3c:	6863      	ldr	r3, [r4, #4]
 8012c3e:	bf08      	it	eq
 8012c40:	f8c8 1000 	streq.w	r1, [r8]
 8012c44:	5162      	str	r2, [r4, r5]
 8012c46:	604b      	str	r3, [r1, #4]
 8012c48:	4630      	mov	r0, r6
 8012c4a:	f000 f82f 	bl	8012cac <__malloc_unlock>
 8012c4e:	f104 000b 	add.w	r0, r4, #11
 8012c52:	1d23      	adds	r3, r4, #4
 8012c54:	f020 0007 	bic.w	r0, r0, #7
 8012c58:	1ac2      	subs	r2, r0, r3
 8012c5a:	bf1c      	itt	ne
 8012c5c:	1a1b      	subne	r3, r3, r0
 8012c5e:	50a3      	strne	r3, [r4, r2]
 8012c60:	e7af      	b.n	8012bc2 <_malloc_r+0x22>
 8012c62:	6862      	ldr	r2, [r4, #4]
 8012c64:	42a3      	cmp	r3, r4
 8012c66:	bf0c      	ite	eq
 8012c68:	f8c8 2000 	streq.w	r2, [r8]
 8012c6c:	605a      	strne	r2, [r3, #4]
 8012c6e:	e7eb      	b.n	8012c48 <_malloc_r+0xa8>
 8012c70:	4623      	mov	r3, r4
 8012c72:	6864      	ldr	r4, [r4, #4]
 8012c74:	e7ae      	b.n	8012bd4 <_malloc_r+0x34>
 8012c76:	463c      	mov	r4, r7
 8012c78:	687f      	ldr	r7, [r7, #4]
 8012c7a:	e7b6      	b.n	8012bea <_malloc_r+0x4a>
 8012c7c:	461a      	mov	r2, r3
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	42a3      	cmp	r3, r4
 8012c82:	d1fb      	bne.n	8012c7c <_malloc_r+0xdc>
 8012c84:	2300      	movs	r3, #0
 8012c86:	6053      	str	r3, [r2, #4]
 8012c88:	e7de      	b.n	8012c48 <_malloc_r+0xa8>
 8012c8a:	230c      	movs	r3, #12
 8012c8c:	6033      	str	r3, [r6, #0]
 8012c8e:	4630      	mov	r0, r6
 8012c90:	f000 f80c 	bl	8012cac <__malloc_unlock>
 8012c94:	e794      	b.n	8012bc0 <_malloc_r+0x20>
 8012c96:	6005      	str	r5, [r0, #0]
 8012c98:	e7d6      	b.n	8012c48 <_malloc_r+0xa8>
 8012c9a:	bf00      	nop
 8012c9c:	200026e0 	.word	0x200026e0

08012ca0 <__malloc_lock>:
 8012ca0:	4801      	ldr	r0, [pc, #4]	@ (8012ca8 <__malloc_lock+0x8>)
 8012ca2:	f7ff b8a6 	b.w	8011df2 <__retarget_lock_acquire_recursive>
 8012ca6:	bf00      	nop
 8012ca8:	200026d8 	.word	0x200026d8

08012cac <__malloc_unlock>:
 8012cac:	4801      	ldr	r0, [pc, #4]	@ (8012cb4 <__malloc_unlock+0x8>)
 8012cae:	f7ff b8a1 	b.w	8011df4 <__retarget_lock_release_recursive>
 8012cb2:	bf00      	nop
 8012cb4:	200026d8 	.word	0x200026d8

08012cb8 <_Balloc>:
 8012cb8:	b570      	push	{r4, r5, r6, lr}
 8012cba:	69c6      	ldr	r6, [r0, #28]
 8012cbc:	4604      	mov	r4, r0
 8012cbe:	460d      	mov	r5, r1
 8012cc0:	b976      	cbnz	r6, 8012ce0 <_Balloc+0x28>
 8012cc2:	2010      	movs	r0, #16
 8012cc4:	f7ff ff42 	bl	8012b4c <malloc>
 8012cc8:	4602      	mov	r2, r0
 8012cca:	61e0      	str	r0, [r4, #28]
 8012ccc:	b920      	cbnz	r0, 8012cd8 <_Balloc+0x20>
 8012cce:	4b18      	ldr	r3, [pc, #96]	@ (8012d30 <_Balloc+0x78>)
 8012cd0:	4818      	ldr	r0, [pc, #96]	@ (8012d34 <_Balloc+0x7c>)
 8012cd2:	216b      	movs	r1, #107	@ 0x6b
 8012cd4:	f002 f8ec 	bl	8014eb0 <__assert_func>
 8012cd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012cdc:	6006      	str	r6, [r0, #0]
 8012cde:	60c6      	str	r6, [r0, #12]
 8012ce0:	69e6      	ldr	r6, [r4, #28]
 8012ce2:	68f3      	ldr	r3, [r6, #12]
 8012ce4:	b183      	cbz	r3, 8012d08 <_Balloc+0x50>
 8012ce6:	69e3      	ldr	r3, [r4, #28]
 8012ce8:	68db      	ldr	r3, [r3, #12]
 8012cea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012cee:	b9b8      	cbnz	r0, 8012d20 <_Balloc+0x68>
 8012cf0:	2101      	movs	r1, #1
 8012cf2:	fa01 f605 	lsl.w	r6, r1, r5
 8012cf6:	1d72      	adds	r2, r6, #5
 8012cf8:	0092      	lsls	r2, r2, #2
 8012cfa:	4620      	mov	r0, r4
 8012cfc:	f002 f8f6 	bl	8014eec <_calloc_r>
 8012d00:	b160      	cbz	r0, 8012d1c <_Balloc+0x64>
 8012d02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012d06:	e00e      	b.n	8012d26 <_Balloc+0x6e>
 8012d08:	2221      	movs	r2, #33	@ 0x21
 8012d0a:	2104      	movs	r1, #4
 8012d0c:	4620      	mov	r0, r4
 8012d0e:	f002 f8ed 	bl	8014eec <_calloc_r>
 8012d12:	69e3      	ldr	r3, [r4, #28]
 8012d14:	60f0      	str	r0, [r6, #12]
 8012d16:	68db      	ldr	r3, [r3, #12]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d1e4      	bne.n	8012ce6 <_Balloc+0x2e>
 8012d1c:	2000      	movs	r0, #0
 8012d1e:	bd70      	pop	{r4, r5, r6, pc}
 8012d20:	6802      	ldr	r2, [r0, #0]
 8012d22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012d26:	2300      	movs	r3, #0
 8012d28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012d2c:	e7f7      	b.n	8012d1e <_Balloc+0x66>
 8012d2e:	bf00      	nop
 8012d30:	08016f8c 	.word	0x08016f8c
 8012d34:	0801700c 	.word	0x0801700c

08012d38 <_Bfree>:
 8012d38:	b570      	push	{r4, r5, r6, lr}
 8012d3a:	69c6      	ldr	r6, [r0, #28]
 8012d3c:	4605      	mov	r5, r0
 8012d3e:	460c      	mov	r4, r1
 8012d40:	b976      	cbnz	r6, 8012d60 <_Bfree+0x28>
 8012d42:	2010      	movs	r0, #16
 8012d44:	f7ff ff02 	bl	8012b4c <malloc>
 8012d48:	4602      	mov	r2, r0
 8012d4a:	61e8      	str	r0, [r5, #28]
 8012d4c:	b920      	cbnz	r0, 8012d58 <_Bfree+0x20>
 8012d4e:	4b09      	ldr	r3, [pc, #36]	@ (8012d74 <_Bfree+0x3c>)
 8012d50:	4809      	ldr	r0, [pc, #36]	@ (8012d78 <_Bfree+0x40>)
 8012d52:	218f      	movs	r1, #143	@ 0x8f
 8012d54:	f002 f8ac 	bl	8014eb0 <__assert_func>
 8012d58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012d5c:	6006      	str	r6, [r0, #0]
 8012d5e:	60c6      	str	r6, [r0, #12]
 8012d60:	b13c      	cbz	r4, 8012d72 <_Bfree+0x3a>
 8012d62:	69eb      	ldr	r3, [r5, #28]
 8012d64:	6862      	ldr	r2, [r4, #4]
 8012d66:	68db      	ldr	r3, [r3, #12]
 8012d68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012d6c:	6021      	str	r1, [r4, #0]
 8012d6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012d72:	bd70      	pop	{r4, r5, r6, pc}
 8012d74:	08016f8c 	.word	0x08016f8c
 8012d78:	0801700c 	.word	0x0801700c

08012d7c <__multadd>:
 8012d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d80:	690d      	ldr	r5, [r1, #16]
 8012d82:	4607      	mov	r7, r0
 8012d84:	460c      	mov	r4, r1
 8012d86:	461e      	mov	r6, r3
 8012d88:	f101 0c14 	add.w	ip, r1, #20
 8012d8c:	2000      	movs	r0, #0
 8012d8e:	f8dc 3000 	ldr.w	r3, [ip]
 8012d92:	b299      	uxth	r1, r3
 8012d94:	fb02 6101 	mla	r1, r2, r1, r6
 8012d98:	0c1e      	lsrs	r6, r3, #16
 8012d9a:	0c0b      	lsrs	r3, r1, #16
 8012d9c:	fb02 3306 	mla	r3, r2, r6, r3
 8012da0:	b289      	uxth	r1, r1
 8012da2:	3001      	adds	r0, #1
 8012da4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012da8:	4285      	cmp	r5, r0
 8012daa:	f84c 1b04 	str.w	r1, [ip], #4
 8012dae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012db2:	dcec      	bgt.n	8012d8e <__multadd+0x12>
 8012db4:	b30e      	cbz	r6, 8012dfa <__multadd+0x7e>
 8012db6:	68a3      	ldr	r3, [r4, #8]
 8012db8:	42ab      	cmp	r3, r5
 8012dba:	dc19      	bgt.n	8012df0 <__multadd+0x74>
 8012dbc:	6861      	ldr	r1, [r4, #4]
 8012dbe:	4638      	mov	r0, r7
 8012dc0:	3101      	adds	r1, #1
 8012dc2:	f7ff ff79 	bl	8012cb8 <_Balloc>
 8012dc6:	4680      	mov	r8, r0
 8012dc8:	b928      	cbnz	r0, 8012dd6 <__multadd+0x5a>
 8012dca:	4602      	mov	r2, r0
 8012dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8012e00 <__multadd+0x84>)
 8012dce:	480d      	ldr	r0, [pc, #52]	@ (8012e04 <__multadd+0x88>)
 8012dd0:	21ba      	movs	r1, #186	@ 0xba
 8012dd2:	f002 f86d 	bl	8014eb0 <__assert_func>
 8012dd6:	6922      	ldr	r2, [r4, #16]
 8012dd8:	3202      	adds	r2, #2
 8012dda:	f104 010c 	add.w	r1, r4, #12
 8012dde:	0092      	lsls	r2, r2, #2
 8012de0:	300c      	adds	r0, #12
 8012de2:	f7ff f808 	bl	8011df6 <memcpy>
 8012de6:	4621      	mov	r1, r4
 8012de8:	4638      	mov	r0, r7
 8012dea:	f7ff ffa5 	bl	8012d38 <_Bfree>
 8012dee:	4644      	mov	r4, r8
 8012df0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012df4:	3501      	adds	r5, #1
 8012df6:	615e      	str	r6, [r3, #20]
 8012df8:	6125      	str	r5, [r4, #16]
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e00:	08016ffb 	.word	0x08016ffb
 8012e04:	0801700c 	.word	0x0801700c

08012e08 <__s2b>:
 8012e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e0c:	460c      	mov	r4, r1
 8012e0e:	4615      	mov	r5, r2
 8012e10:	461f      	mov	r7, r3
 8012e12:	2209      	movs	r2, #9
 8012e14:	3308      	adds	r3, #8
 8012e16:	4606      	mov	r6, r0
 8012e18:	fb93 f3f2 	sdiv	r3, r3, r2
 8012e1c:	2100      	movs	r1, #0
 8012e1e:	2201      	movs	r2, #1
 8012e20:	429a      	cmp	r2, r3
 8012e22:	db09      	blt.n	8012e38 <__s2b+0x30>
 8012e24:	4630      	mov	r0, r6
 8012e26:	f7ff ff47 	bl	8012cb8 <_Balloc>
 8012e2a:	b940      	cbnz	r0, 8012e3e <__s2b+0x36>
 8012e2c:	4602      	mov	r2, r0
 8012e2e:	4b19      	ldr	r3, [pc, #100]	@ (8012e94 <__s2b+0x8c>)
 8012e30:	4819      	ldr	r0, [pc, #100]	@ (8012e98 <__s2b+0x90>)
 8012e32:	21d3      	movs	r1, #211	@ 0xd3
 8012e34:	f002 f83c 	bl	8014eb0 <__assert_func>
 8012e38:	0052      	lsls	r2, r2, #1
 8012e3a:	3101      	adds	r1, #1
 8012e3c:	e7f0      	b.n	8012e20 <__s2b+0x18>
 8012e3e:	9b08      	ldr	r3, [sp, #32]
 8012e40:	6143      	str	r3, [r0, #20]
 8012e42:	2d09      	cmp	r5, #9
 8012e44:	f04f 0301 	mov.w	r3, #1
 8012e48:	6103      	str	r3, [r0, #16]
 8012e4a:	dd16      	ble.n	8012e7a <__s2b+0x72>
 8012e4c:	f104 0909 	add.w	r9, r4, #9
 8012e50:	46c8      	mov	r8, r9
 8012e52:	442c      	add	r4, r5
 8012e54:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012e58:	4601      	mov	r1, r0
 8012e5a:	3b30      	subs	r3, #48	@ 0x30
 8012e5c:	220a      	movs	r2, #10
 8012e5e:	4630      	mov	r0, r6
 8012e60:	f7ff ff8c 	bl	8012d7c <__multadd>
 8012e64:	45a0      	cmp	r8, r4
 8012e66:	d1f5      	bne.n	8012e54 <__s2b+0x4c>
 8012e68:	f1a5 0408 	sub.w	r4, r5, #8
 8012e6c:	444c      	add	r4, r9
 8012e6e:	1b2d      	subs	r5, r5, r4
 8012e70:	1963      	adds	r3, r4, r5
 8012e72:	42bb      	cmp	r3, r7
 8012e74:	db04      	blt.n	8012e80 <__s2b+0x78>
 8012e76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e7a:	340a      	adds	r4, #10
 8012e7c:	2509      	movs	r5, #9
 8012e7e:	e7f6      	b.n	8012e6e <__s2b+0x66>
 8012e80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012e84:	4601      	mov	r1, r0
 8012e86:	3b30      	subs	r3, #48	@ 0x30
 8012e88:	220a      	movs	r2, #10
 8012e8a:	4630      	mov	r0, r6
 8012e8c:	f7ff ff76 	bl	8012d7c <__multadd>
 8012e90:	e7ee      	b.n	8012e70 <__s2b+0x68>
 8012e92:	bf00      	nop
 8012e94:	08016ffb 	.word	0x08016ffb
 8012e98:	0801700c 	.word	0x0801700c

08012e9c <__hi0bits>:
 8012e9c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	bf36      	itet	cc
 8012ea4:	0403      	lslcc	r3, r0, #16
 8012ea6:	2000      	movcs	r0, #0
 8012ea8:	2010      	movcc	r0, #16
 8012eaa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012eae:	bf3c      	itt	cc
 8012eb0:	021b      	lslcc	r3, r3, #8
 8012eb2:	3008      	addcc	r0, #8
 8012eb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012eb8:	bf3c      	itt	cc
 8012eba:	011b      	lslcc	r3, r3, #4
 8012ebc:	3004      	addcc	r0, #4
 8012ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012ec2:	bf3c      	itt	cc
 8012ec4:	009b      	lslcc	r3, r3, #2
 8012ec6:	3002      	addcc	r0, #2
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	db05      	blt.n	8012ed8 <__hi0bits+0x3c>
 8012ecc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012ed0:	f100 0001 	add.w	r0, r0, #1
 8012ed4:	bf08      	it	eq
 8012ed6:	2020      	moveq	r0, #32
 8012ed8:	4770      	bx	lr

08012eda <__lo0bits>:
 8012eda:	6803      	ldr	r3, [r0, #0]
 8012edc:	4602      	mov	r2, r0
 8012ede:	f013 0007 	ands.w	r0, r3, #7
 8012ee2:	d00b      	beq.n	8012efc <__lo0bits+0x22>
 8012ee4:	07d9      	lsls	r1, r3, #31
 8012ee6:	d421      	bmi.n	8012f2c <__lo0bits+0x52>
 8012ee8:	0798      	lsls	r0, r3, #30
 8012eea:	bf49      	itett	mi
 8012eec:	085b      	lsrmi	r3, r3, #1
 8012eee:	089b      	lsrpl	r3, r3, #2
 8012ef0:	2001      	movmi	r0, #1
 8012ef2:	6013      	strmi	r3, [r2, #0]
 8012ef4:	bf5c      	itt	pl
 8012ef6:	6013      	strpl	r3, [r2, #0]
 8012ef8:	2002      	movpl	r0, #2
 8012efa:	4770      	bx	lr
 8012efc:	b299      	uxth	r1, r3
 8012efe:	b909      	cbnz	r1, 8012f04 <__lo0bits+0x2a>
 8012f00:	0c1b      	lsrs	r3, r3, #16
 8012f02:	2010      	movs	r0, #16
 8012f04:	b2d9      	uxtb	r1, r3
 8012f06:	b909      	cbnz	r1, 8012f0c <__lo0bits+0x32>
 8012f08:	3008      	adds	r0, #8
 8012f0a:	0a1b      	lsrs	r3, r3, #8
 8012f0c:	0719      	lsls	r1, r3, #28
 8012f0e:	bf04      	itt	eq
 8012f10:	091b      	lsreq	r3, r3, #4
 8012f12:	3004      	addeq	r0, #4
 8012f14:	0799      	lsls	r1, r3, #30
 8012f16:	bf04      	itt	eq
 8012f18:	089b      	lsreq	r3, r3, #2
 8012f1a:	3002      	addeq	r0, #2
 8012f1c:	07d9      	lsls	r1, r3, #31
 8012f1e:	d403      	bmi.n	8012f28 <__lo0bits+0x4e>
 8012f20:	085b      	lsrs	r3, r3, #1
 8012f22:	f100 0001 	add.w	r0, r0, #1
 8012f26:	d003      	beq.n	8012f30 <__lo0bits+0x56>
 8012f28:	6013      	str	r3, [r2, #0]
 8012f2a:	4770      	bx	lr
 8012f2c:	2000      	movs	r0, #0
 8012f2e:	4770      	bx	lr
 8012f30:	2020      	movs	r0, #32
 8012f32:	4770      	bx	lr

08012f34 <__i2b>:
 8012f34:	b510      	push	{r4, lr}
 8012f36:	460c      	mov	r4, r1
 8012f38:	2101      	movs	r1, #1
 8012f3a:	f7ff febd 	bl	8012cb8 <_Balloc>
 8012f3e:	4602      	mov	r2, r0
 8012f40:	b928      	cbnz	r0, 8012f4e <__i2b+0x1a>
 8012f42:	4b05      	ldr	r3, [pc, #20]	@ (8012f58 <__i2b+0x24>)
 8012f44:	4805      	ldr	r0, [pc, #20]	@ (8012f5c <__i2b+0x28>)
 8012f46:	f240 1145 	movw	r1, #325	@ 0x145
 8012f4a:	f001 ffb1 	bl	8014eb0 <__assert_func>
 8012f4e:	2301      	movs	r3, #1
 8012f50:	6144      	str	r4, [r0, #20]
 8012f52:	6103      	str	r3, [r0, #16]
 8012f54:	bd10      	pop	{r4, pc}
 8012f56:	bf00      	nop
 8012f58:	08016ffb 	.word	0x08016ffb
 8012f5c:	0801700c 	.word	0x0801700c

08012f60 <__multiply>:
 8012f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f64:	4614      	mov	r4, r2
 8012f66:	690a      	ldr	r2, [r1, #16]
 8012f68:	6923      	ldr	r3, [r4, #16]
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	bfa8      	it	ge
 8012f6e:	4623      	movge	r3, r4
 8012f70:	460f      	mov	r7, r1
 8012f72:	bfa4      	itt	ge
 8012f74:	460c      	movge	r4, r1
 8012f76:	461f      	movge	r7, r3
 8012f78:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012f7c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012f80:	68a3      	ldr	r3, [r4, #8]
 8012f82:	6861      	ldr	r1, [r4, #4]
 8012f84:	eb0a 0609 	add.w	r6, sl, r9
 8012f88:	42b3      	cmp	r3, r6
 8012f8a:	b085      	sub	sp, #20
 8012f8c:	bfb8      	it	lt
 8012f8e:	3101      	addlt	r1, #1
 8012f90:	f7ff fe92 	bl	8012cb8 <_Balloc>
 8012f94:	b930      	cbnz	r0, 8012fa4 <__multiply+0x44>
 8012f96:	4602      	mov	r2, r0
 8012f98:	4b44      	ldr	r3, [pc, #272]	@ (80130ac <__multiply+0x14c>)
 8012f9a:	4845      	ldr	r0, [pc, #276]	@ (80130b0 <__multiply+0x150>)
 8012f9c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012fa0:	f001 ff86 	bl	8014eb0 <__assert_func>
 8012fa4:	f100 0514 	add.w	r5, r0, #20
 8012fa8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012fac:	462b      	mov	r3, r5
 8012fae:	2200      	movs	r2, #0
 8012fb0:	4543      	cmp	r3, r8
 8012fb2:	d321      	bcc.n	8012ff8 <__multiply+0x98>
 8012fb4:	f107 0114 	add.w	r1, r7, #20
 8012fb8:	f104 0214 	add.w	r2, r4, #20
 8012fbc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012fc0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8012fc4:	9302      	str	r3, [sp, #8]
 8012fc6:	1b13      	subs	r3, r2, r4
 8012fc8:	3b15      	subs	r3, #21
 8012fca:	f023 0303 	bic.w	r3, r3, #3
 8012fce:	3304      	adds	r3, #4
 8012fd0:	f104 0715 	add.w	r7, r4, #21
 8012fd4:	42ba      	cmp	r2, r7
 8012fd6:	bf38      	it	cc
 8012fd8:	2304      	movcc	r3, #4
 8012fda:	9301      	str	r3, [sp, #4]
 8012fdc:	9b02      	ldr	r3, [sp, #8]
 8012fde:	9103      	str	r1, [sp, #12]
 8012fe0:	428b      	cmp	r3, r1
 8012fe2:	d80c      	bhi.n	8012ffe <__multiply+0x9e>
 8012fe4:	2e00      	cmp	r6, #0
 8012fe6:	dd03      	ble.n	8012ff0 <__multiply+0x90>
 8012fe8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d05b      	beq.n	80130a8 <__multiply+0x148>
 8012ff0:	6106      	str	r6, [r0, #16]
 8012ff2:	b005      	add	sp, #20
 8012ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ff8:	f843 2b04 	str.w	r2, [r3], #4
 8012ffc:	e7d8      	b.n	8012fb0 <__multiply+0x50>
 8012ffe:	f8b1 a000 	ldrh.w	sl, [r1]
 8013002:	f1ba 0f00 	cmp.w	sl, #0
 8013006:	d024      	beq.n	8013052 <__multiply+0xf2>
 8013008:	f104 0e14 	add.w	lr, r4, #20
 801300c:	46a9      	mov	r9, r5
 801300e:	f04f 0c00 	mov.w	ip, #0
 8013012:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013016:	f8d9 3000 	ldr.w	r3, [r9]
 801301a:	fa1f fb87 	uxth.w	fp, r7
 801301e:	b29b      	uxth	r3, r3
 8013020:	fb0a 330b 	mla	r3, sl, fp, r3
 8013024:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013028:	f8d9 7000 	ldr.w	r7, [r9]
 801302c:	4463      	add	r3, ip
 801302e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013032:	fb0a c70b 	mla	r7, sl, fp, ip
 8013036:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801303a:	b29b      	uxth	r3, r3
 801303c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013040:	4572      	cmp	r2, lr
 8013042:	f849 3b04 	str.w	r3, [r9], #4
 8013046:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801304a:	d8e2      	bhi.n	8013012 <__multiply+0xb2>
 801304c:	9b01      	ldr	r3, [sp, #4]
 801304e:	f845 c003 	str.w	ip, [r5, r3]
 8013052:	9b03      	ldr	r3, [sp, #12]
 8013054:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013058:	3104      	adds	r1, #4
 801305a:	f1b9 0f00 	cmp.w	r9, #0
 801305e:	d021      	beq.n	80130a4 <__multiply+0x144>
 8013060:	682b      	ldr	r3, [r5, #0]
 8013062:	f104 0c14 	add.w	ip, r4, #20
 8013066:	46ae      	mov	lr, r5
 8013068:	f04f 0a00 	mov.w	sl, #0
 801306c:	f8bc b000 	ldrh.w	fp, [ip]
 8013070:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013074:	fb09 770b 	mla	r7, r9, fp, r7
 8013078:	4457      	add	r7, sl
 801307a:	b29b      	uxth	r3, r3
 801307c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013080:	f84e 3b04 	str.w	r3, [lr], #4
 8013084:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013088:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801308c:	f8be 3000 	ldrh.w	r3, [lr]
 8013090:	fb09 330a 	mla	r3, r9, sl, r3
 8013094:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013098:	4562      	cmp	r2, ip
 801309a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801309e:	d8e5      	bhi.n	801306c <__multiply+0x10c>
 80130a0:	9f01      	ldr	r7, [sp, #4]
 80130a2:	51eb      	str	r3, [r5, r7]
 80130a4:	3504      	adds	r5, #4
 80130a6:	e799      	b.n	8012fdc <__multiply+0x7c>
 80130a8:	3e01      	subs	r6, #1
 80130aa:	e79b      	b.n	8012fe4 <__multiply+0x84>
 80130ac:	08016ffb 	.word	0x08016ffb
 80130b0:	0801700c 	.word	0x0801700c

080130b4 <__pow5mult>:
 80130b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130b8:	4615      	mov	r5, r2
 80130ba:	f012 0203 	ands.w	r2, r2, #3
 80130be:	4607      	mov	r7, r0
 80130c0:	460e      	mov	r6, r1
 80130c2:	d007      	beq.n	80130d4 <__pow5mult+0x20>
 80130c4:	4c25      	ldr	r4, [pc, #148]	@ (801315c <__pow5mult+0xa8>)
 80130c6:	3a01      	subs	r2, #1
 80130c8:	2300      	movs	r3, #0
 80130ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80130ce:	f7ff fe55 	bl	8012d7c <__multadd>
 80130d2:	4606      	mov	r6, r0
 80130d4:	10ad      	asrs	r5, r5, #2
 80130d6:	d03d      	beq.n	8013154 <__pow5mult+0xa0>
 80130d8:	69fc      	ldr	r4, [r7, #28]
 80130da:	b97c      	cbnz	r4, 80130fc <__pow5mult+0x48>
 80130dc:	2010      	movs	r0, #16
 80130de:	f7ff fd35 	bl	8012b4c <malloc>
 80130e2:	4602      	mov	r2, r0
 80130e4:	61f8      	str	r0, [r7, #28]
 80130e6:	b928      	cbnz	r0, 80130f4 <__pow5mult+0x40>
 80130e8:	4b1d      	ldr	r3, [pc, #116]	@ (8013160 <__pow5mult+0xac>)
 80130ea:	481e      	ldr	r0, [pc, #120]	@ (8013164 <__pow5mult+0xb0>)
 80130ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80130f0:	f001 fede 	bl	8014eb0 <__assert_func>
 80130f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80130f8:	6004      	str	r4, [r0, #0]
 80130fa:	60c4      	str	r4, [r0, #12]
 80130fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013100:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013104:	b94c      	cbnz	r4, 801311a <__pow5mult+0x66>
 8013106:	f240 2171 	movw	r1, #625	@ 0x271
 801310a:	4638      	mov	r0, r7
 801310c:	f7ff ff12 	bl	8012f34 <__i2b>
 8013110:	2300      	movs	r3, #0
 8013112:	f8c8 0008 	str.w	r0, [r8, #8]
 8013116:	4604      	mov	r4, r0
 8013118:	6003      	str	r3, [r0, #0]
 801311a:	f04f 0900 	mov.w	r9, #0
 801311e:	07eb      	lsls	r3, r5, #31
 8013120:	d50a      	bpl.n	8013138 <__pow5mult+0x84>
 8013122:	4631      	mov	r1, r6
 8013124:	4622      	mov	r2, r4
 8013126:	4638      	mov	r0, r7
 8013128:	f7ff ff1a 	bl	8012f60 <__multiply>
 801312c:	4631      	mov	r1, r6
 801312e:	4680      	mov	r8, r0
 8013130:	4638      	mov	r0, r7
 8013132:	f7ff fe01 	bl	8012d38 <_Bfree>
 8013136:	4646      	mov	r6, r8
 8013138:	106d      	asrs	r5, r5, #1
 801313a:	d00b      	beq.n	8013154 <__pow5mult+0xa0>
 801313c:	6820      	ldr	r0, [r4, #0]
 801313e:	b938      	cbnz	r0, 8013150 <__pow5mult+0x9c>
 8013140:	4622      	mov	r2, r4
 8013142:	4621      	mov	r1, r4
 8013144:	4638      	mov	r0, r7
 8013146:	f7ff ff0b 	bl	8012f60 <__multiply>
 801314a:	6020      	str	r0, [r4, #0]
 801314c:	f8c0 9000 	str.w	r9, [r0]
 8013150:	4604      	mov	r4, r0
 8013152:	e7e4      	b.n	801311e <__pow5mult+0x6a>
 8013154:	4630      	mov	r0, r6
 8013156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801315a:	bf00      	nop
 801315c:	08017068 	.word	0x08017068
 8013160:	08016f8c 	.word	0x08016f8c
 8013164:	0801700c 	.word	0x0801700c

08013168 <__lshift>:
 8013168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801316c:	460c      	mov	r4, r1
 801316e:	6849      	ldr	r1, [r1, #4]
 8013170:	6923      	ldr	r3, [r4, #16]
 8013172:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013176:	68a3      	ldr	r3, [r4, #8]
 8013178:	4607      	mov	r7, r0
 801317a:	4691      	mov	r9, r2
 801317c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013180:	f108 0601 	add.w	r6, r8, #1
 8013184:	42b3      	cmp	r3, r6
 8013186:	db0b      	blt.n	80131a0 <__lshift+0x38>
 8013188:	4638      	mov	r0, r7
 801318a:	f7ff fd95 	bl	8012cb8 <_Balloc>
 801318e:	4605      	mov	r5, r0
 8013190:	b948      	cbnz	r0, 80131a6 <__lshift+0x3e>
 8013192:	4602      	mov	r2, r0
 8013194:	4b28      	ldr	r3, [pc, #160]	@ (8013238 <__lshift+0xd0>)
 8013196:	4829      	ldr	r0, [pc, #164]	@ (801323c <__lshift+0xd4>)
 8013198:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801319c:	f001 fe88 	bl	8014eb0 <__assert_func>
 80131a0:	3101      	adds	r1, #1
 80131a2:	005b      	lsls	r3, r3, #1
 80131a4:	e7ee      	b.n	8013184 <__lshift+0x1c>
 80131a6:	2300      	movs	r3, #0
 80131a8:	f100 0114 	add.w	r1, r0, #20
 80131ac:	f100 0210 	add.w	r2, r0, #16
 80131b0:	4618      	mov	r0, r3
 80131b2:	4553      	cmp	r3, sl
 80131b4:	db33      	blt.n	801321e <__lshift+0xb6>
 80131b6:	6920      	ldr	r0, [r4, #16]
 80131b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80131bc:	f104 0314 	add.w	r3, r4, #20
 80131c0:	f019 091f 	ands.w	r9, r9, #31
 80131c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80131c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80131cc:	d02b      	beq.n	8013226 <__lshift+0xbe>
 80131ce:	f1c9 0e20 	rsb	lr, r9, #32
 80131d2:	468a      	mov	sl, r1
 80131d4:	2200      	movs	r2, #0
 80131d6:	6818      	ldr	r0, [r3, #0]
 80131d8:	fa00 f009 	lsl.w	r0, r0, r9
 80131dc:	4310      	orrs	r0, r2
 80131de:	f84a 0b04 	str.w	r0, [sl], #4
 80131e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80131e6:	459c      	cmp	ip, r3
 80131e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80131ec:	d8f3      	bhi.n	80131d6 <__lshift+0x6e>
 80131ee:	ebac 0304 	sub.w	r3, ip, r4
 80131f2:	3b15      	subs	r3, #21
 80131f4:	f023 0303 	bic.w	r3, r3, #3
 80131f8:	3304      	adds	r3, #4
 80131fa:	f104 0015 	add.w	r0, r4, #21
 80131fe:	4584      	cmp	ip, r0
 8013200:	bf38      	it	cc
 8013202:	2304      	movcc	r3, #4
 8013204:	50ca      	str	r2, [r1, r3]
 8013206:	b10a      	cbz	r2, 801320c <__lshift+0xa4>
 8013208:	f108 0602 	add.w	r6, r8, #2
 801320c:	3e01      	subs	r6, #1
 801320e:	4638      	mov	r0, r7
 8013210:	612e      	str	r6, [r5, #16]
 8013212:	4621      	mov	r1, r4
 8013214:	f7ff fd90 	bl	8012d38 <_Bfree>
 8013218:	4628      	mov	r0, r5
 801321a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801321e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013222:	3301      	adds	r3, #1
 8013224:	e7c5      	b.n	80131b2 <__lshift+0x4a>
 8013226:	3904      	subs	r1, #4
 8013228:	f853 2b04 	ldr.w	r2, [r3], #4
 801322c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013230:	459c      	cmp	ip, r3
 8013232:	d8f9      	bhi.n	8013228 <__lshift+0xc0>
 8013234:	e7ea      	b.n	801320c <__lshift+0xa4>
 8013236:	bf00      	nop
 8013238:	08016ffb 	.word	0x08016ffb
 801323c:	0801700c 	.word	0x0801700c

08013240 <__mcmp>:
 8013240:	690a      	ldr	r2, [r1, #16]
 8013242:	4603      	mov	r3, r0
 8013244:	6900      	ldr	r0, [r0, #16]
 8013246:	1a80      	subs	r0, r0, r2
 8013248:	b530      	push	{r4, r5, lr}
 801324a:	d10e      	bne.n	801326a <__mcmp+0x2a>
 801324c:	3314      	adds	r3, #20
 801324e:	3114      	adds	r1, #20
 8013250:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013254:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013258:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801325c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013260:	4295      	cmp	r5, r2
 8013262:	d003      	beq.n	801326c <__mcmp+0x2c>
 8013264:	d205      	bcs.n	8013272 <__mcmp+0x32>
 8013266:	f04f 30ff 	mov.w	r0, #4294967295
 801326a:	bd30      	pop	{r4, r5, pc}
 801326c:	42a3      	cmp	r3, r4
 801326e:	d3f3      	bcc.n	8013258 <__mcmp+0x18>
 8013270:	e7fb      	b.n	801326a <__mcmp+0x2a>
 8013272:	2001      	movs	r0, #1
 8013274:	e7f9      	b.n	801326a <__mcmp+0x2a>
	...

08013278 <__mdiff>:
 8013278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801327c:	4689      	mov	r9, r1
 801327e:	4606      	mov	r6, r0
 8013280:	4611      	mov	r1, r2
 8013282:	4648      	mov	r0, r9
 8013284:	4614      	mov	r4, r2
 8013286:	f7ff ffdb 	bl	8013240 <__mcmp>
 801328a:	1e05      	subs	r5, r0, #0
 801328c:	d112      	bne.n	80132b4 <__mdiff+0x3c>
 801328e:	4629      	mov	r1, r5
 8013290:	4630      	mov	r0, r6
 8013292:	f7ff fd11 	bl	8012cb8 <_Balloc>
 8013296:	4602      	mov	r2, r0
 8013298:	b928      	cbnz	r0, 80132a6 <__mdiff+0x2e>
 801329a:	4b3f      	ldr	r3, [pc, #252]	@ (8013398 <__mdiff+0x120>)
 801329c:	f240 2137 	movw	r1, #567	@ 0x237
 80132a0:	483e      	ldr	r0, [pc, #248]	@ (801339c <__mdiff+0x124>)
 80132a2:	f001 fe05 	bl	8014eb0 <__assert_func>
 80132a6:	2301      	movs	r3, #1
 80132a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80132ac:	4610      	mov	r0, r2
 80132ae:	b003      	add	sp, #12
 80132b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132b4:	bfbc      	itt	lt
 80132b6:	464b      	movlt	r3, r9
 80132b8:	46a1      	movlt	r9, r4
 80132ba:	4630      	mov	r0, r6
 80132bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80132c0:	bfba      	itte	lt
 80132c2:	461c      	movlt	r4, r3
 80132c4:	2501      	movlt	r5, #1
 80132c6:	2500      	movge	r5, #0
 80132c8:	f7ff fcf6 	bl	8012cb8 <_Balloc>
 80132cc:	4602      	mov	r2, r0
 80132ce:	b918      	cbnz	r0, 80132d8 <__mdiff+0x60>
 80132d0:	4b31      	ldr	r3, [pc, #196]	@ (8013398 <__mdiff+0x120>)
 80132d2:	f240 2145 	movw	r1, #581	@ 0x245
 80132d6:	e7e3      	b.n	80132a0 <__mdiff+0x28>
 80132d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80132dc:	6926      	ldr	r6, [r4, #16]
 80132de:	60c5      	str	r5, [r0, #12]
 80132e0:	f109 0310 	add.w	r3, r9, #16
 80132e4:	f109 0514 	add.w	r5, r9, #20
 80132e8:	f104 0e14 	add.w	lr, r4, #20
 80132ec:	f100 0b14 	add.w	fp, r0, #20
 80132f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80132f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80132f8:	9301      	str	r3, [sp, #4]
 80132fa:	46d9      	mov	r9, fp
 80132fc:	f04f 0c00 	mov.w	ip, #0
 8013300:	9b01      	ldr	r3, [sp, #4]
 8013302:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013306:	f853 af04 	ldr.w	sl, [r3, #4]!
 801330a:	9301      	str	r3, [sp, #4]
 801330c:	fa1f f38a 	uxth.w	r3, sl
 8013310:	4619      	mov	r1, r3
 8013312:	b283      	uxth	r3, r0
 8013314:	1acb      	subs	r3, r1, r3
 8013316:	0c00      	lsrs	r0, r0, #16
 8013318:	4463      	add	r3, ip
 801331a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801331e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013322:	b29b      	uxth	r3, r3
 8013324:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013328:	4576      	cmp	r6, lr
 801332a:	f849 3b04 	str.w	r3, [r9], #4
 801332e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013332:	d8e5      	bhi.n	8013300 <__mdiff+0x88>
 8013334:	1b33      	subs	r3, r6, r4
 8013336:	3b15      	subs	r3, #21
 8013338:	f023 0303 	bic.w	r3, r3, #3
 801333c:	3415      	adds	r4, #21
 801333e:	3304      	adds	r3, #4
 8013340:	42a6      	cmp	r6, r4
 8013342:	bf38      	it	cc
 8013344:	2304      	movcc	r3, #4
 8013346:	441d      	add	r5, r3
 8013348:	445b      	add	r3, fp
 801334a:	461e      	mov	r6, r3
 801334c:	462c      	mov	r4, r5
 801334e:	4544      	cmp	r4, r8
 8013350:	d30e      	bcc.n	8013370 <__mdiff+0xf8>
 8013352:	f108 0103 	add.w	r1, r8, #3
 8013356:	1b49      	subs	r1, r1, r5
 8013358:	f021 0103 	bic.w	r1, r1, #3
 801335c:	3d03      	subs	r5, #3
 801335e:	45a8      	cmp	r8, r5
 8013360:	bf38      	it	cc
 8013362:	2100      	movcc	r1, #0
 8013364:	440b      	add	r3, r1
 8013366:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801336a:	b191      	cbz	r1, 8013392 <__mdiff+0x11a>
 801336c:	6117      	str	r7, [r2, #16]
 801336e:	e79d      	b.n	80132ac <__mdiff+0x34>
 8013370:	f854 1b04 	ldr.w	r1, [r4], #4
 8013374:	46e6      	mov	lr, ip
 8013376:	0c08      	lsrs	r0, r1, #16
 8013378:	fa1c fc81 	uxtah	ip, ip, r1
 801337c:	4471      	add	r1, lr
 801337e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013382:	b289      	uxth	r1, r1
 8013384:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013388:	f846 1b04 	str.w	r1, [r6], #4
 801338c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013390:	e7dd      	b.n	801334e <__mdiff+0xd6>
 8013392:	3f01      	subs	r7, #1
 8013394:	e7e7      	b.n	8013366 <__mdiff+0xee>
 8013396:	bf00      	nop
 8013398:	08016ffb 	.word	0x08016ffb
 801339c:	0801700c 	.word	0x0801700c

080133a0 <__ulp>:
 80133a0:	b082      	sub	sp, #8
 80133a2:	ed8d 0b00 	vstr	d0, [sp]
 80133a6:	9a01      	ldr	r2, [sp, #4]
 80133a8:	4b0f      	ldr	r3, [pc, #60]	@ (80133e8 <__ulp+0x48>)
 80133aa:	4013      	ands	r3, r2
 80133ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	dc08      	bgt.n	80133c6 <__ulp+0x26>
 80133b4:	425b      	negs	r3, r3
 80133b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80133ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 80133be:	da04      	bge.n	80133ca <__ulp+0x2a>
 80133c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80133c4:	4113      	asrs	r3, r2
 80133c6:	2200      	movs	r2, #0
 80133c8:	e008      	b.n	80133dc <__ulp+0x3c>
 80133ca:	f1a2 0314 	sub.w	r3, r2, #20
 80133ce:	2b1e      	cmp	r3, #30
 80133d0:	bfda      	itte	le
 80133d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80133d6:	40da      	lsrle	r2, r3
 80133d8:	2201      	movgt	r2, #1
 80133da:	2300      	movs	r3, #0
 80133dc:	4619      	mov	r1, r3
 80133de:	4610      	mov	r0, r2
 80133e0:	ec41 0b10 	vmov	d0, r0, r1
 80133e4:	b002      	add	sp, #8
 80133e6:	4770      	bx	lr
 80133e8:	7ff00000 	.word	0x7ff00000

080133ec <__b2d>:
 80133ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133f0:	6906      	ldr	r6, [r0, #16]
 80133f2:	f100 0814 	add.w	r8, r0, #20
 80133f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80133fa:	1f37      	subs	r7, r6, #4
 80133fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013400:	4610      	mov	r0, r2
 8013402:	f7ff fd4b 	bl	8012e9c <__hi0bits>
 8013406:	f1c0 0320 	rsb	r3, r0, #32
 801340a:	280a      	cmp	r0, #10
 801340c:	600b      	str	r3, [r1, #0]
 801340e:	491b      	ldr	r1, [pc, #108]	@ (801347c <__b2d+0x90>)
 8013410:	dc15      	bgt.n	801343e <__b2d+0x52>
 8013412:	f1c0 0c0b 	rsb	ip, r0, #11
 8013416:	fa22 f30c 	lsr.w	r3, r2, ip
 801341a:	45b8      	cmp	r8, r7
 801341c:	ea43 0501 	orr.w	r5, r3, r1
 8013420:	bf34      	ite	cc
 8013422:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013426:	2300      	movcs	r3, #0
 8013428:	3015      	adds	r0, #21
 801342a:	fa02 f000 	lsl.w	r0, r2, r0
 801342e:	fa23 f30c 	lsr.w	r3, r3, ip
 8013432:	4303      	orrs	r3, r0
 8013434:	461c      	mov	r4, r3
 8013436:	ec45 4b10 	vmov	d0, r4, r5
 801343a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801343e:	45b8      	cmp	r8, r7
 8013440:	bf3a      	itte	cc
 8013442:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013446:	f1a6 0708 	subcc.w	r7, r6, #8
 801344a:	2300      	movcs	r3, #0
 801344c:	380b      	subs	r0, #11
 801344e:	d012      	beq.n	8013476 <__b2d+0x8a>
 8013450:	f1c0 0120 	rsb	r1, r0, #32
 8013454:	fa23 f401 	lsr.w	r4, r3, r1
 8013458:	4082      	lsls	r2, r0
 801345a:	4322      	orrs	r2, r4
 801345c:	4547      	cmp	r7, r8
 801345e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8013462:	bf8c      	ite	hi
 8013464:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8013468:	2200      	movls	r2, #0
 801346a:	4083      	lsls	r3, r0
 801346c:	40ca      	lsrs	r2, r1
 801346e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8013472:	4313      	orrs	r3, r2
 8013474:	e7de      	b.n	8013434 <__b2d+0x48>
 8013476:	ea42 0501 	orr.w	r5, r2, r1
 801347a:	e7db      	b.n	8013434 <__b2d+0x48>
 801347c:	3ff00000 	.word	0x3ff00000

08013480 <__d2b>:
 8013480:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013484:	460f      	mov	r7, r1
 8013486:	2101      	movs	r1, #1
 8013488:	ec59 8b10 	vmov	r8, r9, d0
 801348c:	4616      	mov	r6, r2
 801348e:	f7ff fc13 	bl	8012cb8 <_Balloc>
 8013492:	4604      	mov	r4, r0
 8013494:	b930      	cbnz	r0, 80134a4 <__d2b+0x24>
 8013496:	4602      	mov	r2, r0
 8013498:	4b23      	ldr	r3, [pc, #140]	@ (8013528 <__d2b+0xa8>)
 801349a:	4824      	ldr	r0, [pc, #144]	@ (801352c <__d2b+0xac>)
 801349c:	f240 310f 	movw	r1, #783	@ 0x30f
 80134a0:	f001 fd06 	bl	8014eb0 <__assert_func>
 80134a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80134a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80134ac:	b10d      	cbz	r5, 80134b2 <__d2b+0x32>
 80134ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80134b2:	9301      	str	r3, [sp, #4]
 80134b4:	f1b8 0300 	subs.w	r3, r8, #0
 80134b8:	d023      	beq.n	8013502 <__d2b+0x82>
 80134ba:	4668      	mov	r0, sp
 80134bc:	9300      	str	r3, [sp, #0]
 80134be:	f7ff fd0c 	bl	8012eda <__lo0bits>
 80134c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80134c6:	b1d0      	cbz	r0, 80134fe <__d2b+0x7e>
 80134c8:	f1c0 0320 	rsb	r3, r0, #32
 80134cc:	fa02 f303 	lsl.w	r3, r2, r3
 80134d0:	430b      	orrs	r3, r1
 80134d2:	40c2      	lsrs	r2, r0
 80134d4:	6163      	str	r3, [r4, #20]
 80134d6:	9201      	str	r2, [sp, #4]
 80134d8:	9b01      	ldr	r3, [sp, #4]
 80134da:	61a3      	str	r3, [r4, #24]
 80134dc:	2b00      	cmp	r3, #0
 80134de:	bf0c      	ite	eq
 80134e0:	2201      	moveq	r2, #1
 80134e2:	2202      	movne	r2, #2
 80134e4:	6122      	str	r2, [r4, #16]
 80134e6:	b1a5      	cbz	r5, 8013512 <__d2b+0x92>
 80134e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80134ec:	4405      	add	r5, r0
 80134ee:	603d      	str	r5, [r7, #0]
 80134f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80134f4:	6030      	str	r0, [r6, #0]
 80134f6:	4620      	mov	r0, r4
 80134f8:	b003      	add	sp, #12
 80134fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80134fe:	6161      	str	r1, [r4, #20]
 8013500:	e7ea      	b.n	80134d8 <__d2b+0x58>
 8013502:	a801      	add	r0, sp, #4
 8013504:	f7ff fce9 	bl	8012eda <__lo0bits>
 8013508:	9b01      	ldr	r3, [sp, #4]
 801350a:	6163      	str	r3, [r4, #20]
 801350c:	3020      	adds	r0, #32
 801350e:	2201      	movs	r2, #1
 8013510:	e7e8      	b.n	80134e4 <__d2b+0x64>
 8013512:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013516:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801351a:	6038      	str	r0, [r7, #0]
 801351c:	6918      	ldr	r0, [r3, #16]
 801351e:	f7ff fcbd 	bl	8012e9c <__hi0bits>
 8013522:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013526:	e7e5      	b.n	80134f4 <__d2b+0x74>
 8013528:	08016ffb 	.word	0x08016ffb
 801352c:	0801700c 	.word	0x0801700c

08013530 <__ratio>:
 8013530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013534:	b085      	sub	sp, #20
 8013536:	e9cd 1000 	strd	r1, r0, [sp]
 801353a:	a902      	add	r1, sp, #8
 801353c:	f7ff ff56 	bl	80133ec <__b2d>
 8013540:	9800      	ldr	r0, [sp, #0]
 8013542:	a903      	add	r1, sp, #12
 8013544:	ec55 4b10 	vmov	r4, r5, d0
 8013548:	f7ff ff50 	bl	80133ec <__b2d>
 801354c:	9b01      	ldr	r3, [sp, #4]
 801354e:	6919      	ldr	r1, [r3, #16]
 8013550:	9b00      	ldr	r3, [sp, #0]
 8013552:	691b      	ldr	r3, [r3, #16]
 8013554:	1ac9      	subs	r1, r1, r3
 8013556:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801355a:	1a9b      	subs	r3, r3, r2
 801355c:	ec5b ab10 	vmov	sl, fp, d0
 8013560:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8013564:	2b00      	cmp	r3, #0
 8013566:	bfce      	itee	gt
 8013568:	462a      	movgt	r2, r5
 801356a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801356e:	465a      	movle	r2, fp
 8013570:	462f      	mov	r7, r5
 8013572:	46d9      	mov	r9, fp
 8013574:	bfcc      	ite	gt
 8013576:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801357a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801357e:	464b      	mov	r3, r9
 8013580:	4652      	mov	r2, sl
 8013582:	4620      	mov	r0, r4
 8013584:	4639      	mov	r1, r7
 8013586:	f7ed f989 	bl	800089c <__aeabi_ddiv>
 801358a:	ec41 0b10 	vmov	d0, r0, r1
 801358e:	b005      	add	sp, #20
 8013590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013594 <__copybits>:
 8013594:	3901      	subs	r1, #1
 8013596:	b570      	push	{r4, r5, r6, lr}
 8013598:	1149      	asrs	r1, r1, #5
 801359a:	6914      	ldr	r4, [r2, #16]
 801359c:	3101      	adds	r1, #1
 801359e:	f102 0314 	add.w	r3, r2, #20
 80135a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80135a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80135aa:	1f05      	subs	r5, r0, #4
 80135ac:	42a3      	cmp	r3, r4
 80135ae:	d30c      	bcc.n	80135ca <__copybits+0x36>
 80135b0:	1aa3      	subs	r3, r4, r2
 80135b2:	3b11      	subs	r3, #17
 80135b4:	f023 0303 	bic.w	r3, r3, #3
 80135b8:	3211      	adds	r2, #17
 80135ba:	42a2      	cmp	r2, r4
 80135bc:	bf88      	it	hi
 80135be:	2300      	movhi	r3, #0
 80135c0:	4418      	add	r0, r3
 80135c2:	2300      	movs	r3, #0
 80135c4:	4288      	cmp	r0, r1
 80135c6:	d305      	bcc.n	80135d4 <__copybits+0x40>
 80135c8:	bd70      	pop	{r4, r5, r6, pc}
 80135ca:	f853 6b04 	ldr.w	r6, [r3], #4
 80135ce:	f845 6f04 	str.w	r6, [r5, #4]!
 80135d2:	e7eb      	b.n	80135ac <__copybits+0x18>
 80135d4:	f840 3b04 	str.w	r3, [r0], #4
 80135d8:	e7f4      	b.n	80135c4 <__copybits+0x30>

080135da <__any_on>:
 80135da:	f100 0214 	add.w	r2, r0, #20
 80135de:	6900      	ldr	r0, [r0, #16]
 80135e0:	114b      	asrs	r3, r1, #5
 80135e2:	4298      	cmp	r0, r3
 80135e4:	b510      	push	{r4, lr}
 80135e6:	db11      	blt.n	801360c <__any_on+0x32>
 80135e8:	dd0a      	ble.n	8013600 <__any_on+0x26>
 80135ea:	f011 011f 	ands.w	r1, r1, #31
 80135ee:	d007      	beq.n	8013600 <__any_on+0x26>
 80135f0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80135f4:	fa24 f001 	lsr.w	r0, r4, r1
 80135f8:	fa00 f101 	lsl.w	r1, r0, r1
 80135fc:	428c      	cmp	r4, r1
 80135fe:	d10b      	bne.n	8013618 <__any_on+0x3e>
 8013600:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013604:	4293      	cmp	r3, r2
 8013606:	d803      	bhi.n	8013610 <__any_on+0x36>
 8013608:	2000      	movs	r0, #0
 801360a:	bd10      	pop	{r4, pc}
 801360c:	4603      	mov	r3, r0
 801360e:	e7f7      	b.n	8013600 <__any_on+0x26>
 8013610:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013614:	2900      	cmp	r1, #0
 8013616:	d0f5      	beq.n	8013604 <__any_on+0x2a>
 8013618:	2001      	movs	r0, #1
 801361a:	e7f6      	b.n	801360a <__any_on+0x30>

0801361c <sulp>:
 801361c:	b570      	push	{r4, r5, r6, lr}
 801361e:	4604      	mov	r4, r0
 8013620:	460d      	mov	r5, r1
 8013622:	ec45 4b10 	vmov	d0, r4, r5
 8013626:	4616      	mov	r6, r2
 8013628:	f7ff feba 	bl	80133a0 <__ulp>
 801362c:	ec51 0b10 	vmov	r0, r1, d0
 8013630:	b17e      	cbz	r6, 8013652 <sulp+0x36>
 8013632:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013636:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801363a:	2b00      	cmp	r3, #0
 801363c:	dd09      	ble.n	8013652 <sulp+0x36>
 801363e:	051b      	lsls	r3, r3, #20
 8013640:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8013644:	2400      	movs	r4, #0
 8013646:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801364a:	4622      	mov	r2, r4
 801364c:	462b      	mov	r3, r5
 801364e:	f7ec fffb 	bl	8000648 <__aeabi_dmul>
 8013652:	ec41 0b10 	vmov	d0, r0, r1
 8013656:	bd70      	pop	{r4, r5, r6, pc}

08013658 <_strtod_l>:
 8013658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801365c:	b09f      	sub	sp, #124	@ 0x7c
 801365e:	460c      	mov	r4, r1
 8013660:	9217      	str	r2, [sp, #92]	@ 0x5c
 8013662:	2200      	movs	r2, #0
 8013664:	921a      	str	r2, [sp, #104]	@ 0x68
 8013666:	9005      	str	r0, [sp, #20]
 8013668:	f04f 0a00 	mov.w	sl, #0
 801366c:	f04f 0b00 	mov.w	fp, #0
 8013670:	460a      	mov	r2, r1
 8013672:	9219      	str	r2, [sp, #100]	@ 0x64
 8013674:	7811      	ldrb	r1, [r2, #0]
 8013676:	292b      	cmp	r1, #43	@ 0x2b
 8013678:	d04a      	beq.n	8013710 <_strtod_l+0xb8>
 801367a:	d838      	bhi.n	80136ee <_strtod_l+0x96>
 801367c:	290d      	cmp	r1, #13
 801367e:	d832      	bhi.n	80136e6 <_strtod_l+0x8e>
 8013680:	2908      	cmp	r1, #8
 8013682:	d832      	bhi.n	80136ea <_strtod_l+0x92>
 8013684:	2900      	cmp	r1, #0
 8013686:	d03b      	beq.n	8013700 <_strtod_l+0xa8>
 8013688:	2200      	movs	r2, #0
 801368a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801368c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801368e:	782a      	ldrb	r2, [r5, #0]
 8013690:	2a30      	cmp	r2, #48	@ 0x30
 8013692:	f040 80b3 	bne.w	80137fc <_strtod_l+0x1a4>
 8013696:	786a      	ldrb	r2, [r5, #1]
 8013698:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801369c:	2a58      	cmp	r2, #88	@ 0x58
 801369e:	d16e      	bne.n	801377e <_strtod_l+0x126>
 80136a0:	9302      	str	r3, [sp, #8]
 80136a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80136a4:	9301      	str	r3, [sp, #4]
 80136a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80136a8:	9300      	str	r3, [sp, #0]
 80136aa:	4a8e      	ldr	r2, [pc, #568]	@ (80138e4 <_strtod_l+0x28c>)
 80136ac:	9805      	ldr	r0, [sp, #20]
 80136ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80136b0:	a919      	add	r1, sp, #100	@ 0x64
 80136b2:	f001 fc97 	bl	8014fe4 <__gethex>
 80136b6:	f010 060f 	ands.w	r6, r0, #15
 80136ba:	4604      	mov	r4, r0
 80136bc:	d005      	beq.n	80136ca <_strtod_l+0x72>
 80136be:	2e06      	cmp	r6, #6
 80136c0:	d128      	bne.n	8013714 <_strtod_l+0xbc>
 80136c2:	3501      	adds	r5, #1
 80136c4:	2300      	movs	r3, #0
 80136c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80136c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80136ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	f040 858e 	bne.w	80141ee <_strtod_l+0xb96>
 80136d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80136d4:	b1cb      	cbz	r3, 801370a <_strtod_l+0xb2>
 80136d6:	4652      	mov	r2, sl
 80136d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80136dc:	ec43 2b10 	vmov	d0, r2, r3
 80136e0:	b01f      	add	sp, #124	@ 0x7c
 80136e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136e6:	2920      	cmp	r1, #32
 80136e8:	d1ce      	bne.n	8013688 <_strtod_l+0x30>
 80136ea:	3201      	adds	r2, #1
 80136ec:	e7c1      	b.n	8013672 <_strtod_l+0x1a>
 80136ee:	292d      	cmp	r1, #45	@ 0x2d
 80136f0:	d1ca      	bne.n	8013688 <_strtod_l+0x30>
 80136f2:	2101      	movs	r1, #1
 80136f4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80136f6:	1c51      	adds	r1, r2, #1
 80136f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80136fa:	7852      	ldrb	r2, [r2, #1]
 80136fc:	2a00      	cmp	r2, #0
 80136fe:	d1c5      	bne.n	801368c <_strtod_l+0x34>
 8013700:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013702:	9419      	str	r4, [sp, #100]	@ 0x64
 8013704:	2b00      	cmp	r3, #0
 8013706:	f040 8570 	bne.w	80141ea <_strtod_l+0xb92>
 801370a:	4652      	mov	r2, sl
 801370c:	465b      	mov	r3, fp
 801370e:	e7e5      	b.n	80136dc <_strtod_l+0x84>
 8013710:	2100      	movs	r1, #0
 8013712:	e7ef      	b.n	80136f4 <_strtod_l+0x9c>
 8013714:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013716:	b13a      	cbz	r2, 8013728 <_strtod_l+0xd0>
 8013718:	2135      	movs	r1, #53	@ 0x35
 801371a:	a81c      	add	r0, sp, #112	@ 0x70
 801371c:	f7ff ff3a 	bl	8013594 <__copybits>
 8013720:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013722:	9805      	ldr	r0, [sp, #20]
 8013724:	f7ff fb08 	bl	8012d38 <_Bfree>
 8013728:	3e01      	subs	r6, #1
 801372a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801372c:	2e04      	cmp	r6, #4
 801372e:	d806      	bhi.n	801373e <_strtod_l+0xe6>
 8013730:	e8df f006 	tbb	[pc, r6]
 8013734:	201d0314 	.word	0x201d0314
 8013738:	14          	.byte	0x14
 8013739:	00          	.byte	0x00
 801373a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801373e:	05e1      	lsls	r1, r4, #23
 8013740:	bf48      	it	mi
 8013742:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8013746:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801374a:	0d1b      	lsrs	r3, r3, #20
 801374c:	051b      	lsls	r3, r3, #20
 801374e:	2b00      	cmp	r3, #0
 8013750:	d1bb      	bne.n	80136ca <_strtod_l+0x72>
 8013752:	f7fe fb23 	bl	8011d9c <__errno>
 8013756:	2322      	movs	r3, #34	@ 0x22
 8013758:	6003      	str	r3, [r0, #0]
 801375a:	e7b6      	b.n	80136ca <_strtod_l+0x72>
 801375c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013760:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013764:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013768:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801376c:	e7e7      	b.n	801373e <_strtod_l+0xe6>
 801376e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80138ec <_strtod_l+0x294>
 8013772:	e7e4      	b.n	801373e <_strtod_l+0xe6>
 8013774:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013778:	f04f 3aff 	mov.w	sl, #4294967295
 801377c:	e7df      	b.n	801373e <_strtod_l+0xe6>
 801377e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013780:	1c5a      	adds	r2, r3, #1
 8013782:	9219      	str	r2, [sp, #100]	@ 0x64
 8013784:	785b      	ldrb	r3, [r3, #1]
 8013786:	2b30      	cmp	r3, #48	@ 0x30
 8013788:	d0f9      	beq.n	801377e <_strtod_l+0x126>
 801378a:	2b00      	cmp	r3, #0
 801378c:	d09d      	beq.n	80136ca <_strtod_l+0x72>
 801378e:	2301      	movs	r3, #1
 8013790:	9309      	str	r3, [sp, #36]	@ 0x24
 8013792:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013794:	930c      	str	r3, [sp, #48]	@ 0x30
 8013796:	2300      	movs	r3, #0
 8013798:	9308      	str	r3, [sp, #32]
 801379a:	930a      	str	r3, [sp, #40]	@ 0x28
 801379c:	461f      	mov	r7, r3
 801379e:	220a      	movs	r2, #10
 80137a0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80137a2:	7805      	ldrb	r5, [r0, #0]
 80137a4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80137a8:	b2d9      	uxtb	r1, r3
 80137aa:	2909      	cmp	r1, #9
 80137ac:	d928      	bls.n	8013800 <_strtod_l+0x1a8>
 80137ae:	494e      	ldr	r1, [pc, #312]	@ (80138e8 <_strtod_l+0x290>)
 80137b0:	2201      	movs	r2, #1
 80137b2:	f7fe fa96 	bl	8011ce2 <strncmp>
 80137b6:	2800      	cmp	r0, #0
 80137b8:	d032      	beq.n	8013820 <_strtod_l+0x1c8>
 80137ba:	2000      	movs	r0, #0
 80137bc:	462a      	mov	r2, r5
 80137be:	4681      	mov	r9, r0
 80137c0:	463d      	mov	r5, r7
 80137c2:	4603      	mov	r3, r0
 80137c4:	2a65      	cmp	r2, #101	@ 0x65
 80137c6:	d001      	beq.n	80137cc <_strtod_l+0x174>
 80137c8:	2a45      	cmp	r2, #69	@ 0x45
 80137ca:	d114      	bne.n	80137f6 <_strtod_l+0x19e>
 80137cc:	b91d      	cbnz	r5, 80137d6 <_strtod_l+0x17e>
 80137ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80137d0:	4302      	orrs	r2, r0
 80137d2:	d095      	beq.n	8013700 <_strtod_l+0xa8>
 80137d4:	2500      	movs	r5, #0
 80137d6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80137d8:	1c62      	adds	r2, r4, #1
 80137da:	9219      	str	r2, [sp, #100]	@ 0x64
 80137dc:	7862      	ldrb	r2, [r4, #1]
 80137de:	2a2b      	cmp	r2, #43	@ 0x2b
 80137e0:	d077      	beq.n	80138d2 <_strtod_l+0x27a>
 80137e2:	2a2d      	cmp	r2, #45	@ 0x2d
 80137e4:	d07b      	beq.n	80138de <_strtod_l+0x286>
 80137e6:	f04f 0c00 	mov.w	ip, #0
 80137ea:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80137ee:	2909      	cmp	r1, #9
 80137f0:	f240 8082 	bls.w	80138f8 <_strtod_l+0x2a0>
 80137f4:	9419      	str	r4, [sp, #100]	@ 0x64
 80137f6:	f04f 0800 	mov.w	r8, #0
 80137fa:	e0a2      	b.n	8013942 <_strtod_l+0x2ea>
 80137fc:	2300      	movs	r3, #0
 80137fe:	e7c7      	b.n	8013790 <_strtod_l+0x138>
 8013800:	2f08      	cmp	r7, #8
 8013802:	bfd5      	itete	le
 8013804:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8013806:	9908      	ldrgt	r1, [sp, #32]
 8013808:	fb02 3301 	mlale	r3, r2, r1, r3
 801380c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013810:	f100 0001 	add.w	r0, r0, #1
 8013814:	bfd4      	ite	le
 8013816:	930a      	strle	r3, [sp, #40]	@ 0x28
 8013818:	9308      	strgt	r3, [sp, #32]
 801381a:	3701      	adds	r7, #1
 801381c:	9019      	str	r0, [sp, #100]	@ 0x64
 801381e:	e7bf      	b.n	80137a0 <_strtod_l+0x148>
 8013820:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013822:	1c5a      	adds	r2, r3, #1
 8013824:	9219      	str	r2, [sp, #100]	@ 0x64
 8013826:	785a      	ldrb	r2, [r3, #1]
 8013828:	b37f      	cbz	r7, 801388a <_strtod_l+0x232>
 801382a:	4681      	mov	r9, r0
 801382c:	463d      	mov	r5, r7
 801382e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013832:	2b09      	cmp	r3, #9
 8013834:	d912      	bls.n	801385c <_strtod_l+0x204>
 8013836:	2301      	movs	r3, #1
 8013838:	e7c4      	b.n	80137c4 <_strtod_l+0x16c>
 801383a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801383c:	1c5a      	adds	r2, r3, #1
 801383e:	9219      	str	r2, [sp, #100]	@ 0x64
 8013840:	785a      	ldrb	r2, [r3, #1]
 8013842:	3001      	adds	r0, #1
 8013844:	2a30      	cmp	r2, #48	@ 0x30
 8013846:	d0f8      	beq.n	801383a <_strtod_l+0x1e2>
 8013848:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801384c:	2b08      	cmp	r3, #8
 801384e:	f200 84d3 	bhi.w	80141f8 <_strtod_l+0xba0>
 8013852:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013854:	930c      	str	r3, [sp, #48]	@ 0x30
 8013856:	4681      	mov	r9, r0
 8013858:	2000      	movs	r0, #0
 801385a:	4605      	mov	r5, r0
 801385c:	3a30      	subs	r2, #48	@ 0x30
 801385e:	f100 0301 	add.w	r3, r0, #1
 8013862:	d02a      	beq.n	80138ba <_strtod_l+0x262>
 8013864:	4499      	add	r9, r3
 8013866:	eb00 0c05 	add.w	ip, r0, r5
 801386a:	462b      	mov	r3, r5
 801386c:	210a      	movs	r1, #10
 801386e:	4563      	cmp	r3, ip
 8013870:	d10d      	bne.n	801388e <_strtod_l+0x236>
 8013872:	1c69      	adds	r1, r5, #1
 8013874:	4401      	add	r1, r0
 8013876:	4428      	add	r0, r5
 8013878:	2808      	cmp	r0, #8
 801387a:	dc16      	bgt.n	80138aa <_strtod_l+0x252>
 801387c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801387e:	230a      	movs	r3, #10
 8013880:	fb03 2300 	mla	r3, r3, r0, r2
 8013884:	930a      	str	r3, [sp, #40]	@ 0x28
 8013886:	2300      	movs	r3, #0
 8013888:	e018      	b.n	80138bc <_strtod_l+0x264>
 801388a:	4638      	mov	r0, r7
 801388c:	e7da      	b.n	8013844 <_strtod_l+0x1ec>
 801388e:	2b08      	cmp	r3, #8
 8013890:	f103 0301 	add.w	r3, r3, #1
 8013894:	dc03      	bgt.n	801389e <_strtod_l+0x246>
 8013896:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013898:	434e      	muls	r6, r1
 801389a:	960a      	str	r6, [sp, #40]	@ 0x28
 801389c:	e7e7      	b.n	801386e <_strtod_l+0x216>
 801389e:	2b10      	cmp	r3, #16
 80138a0:	bfde      	ittt	le
 80138a2:	9e08      	ldrle	r6, [sp, #32]
 80138a4:	434e      	mulle	r6, r1
 80138a6:	9608      	strle	r6, [sp, #32]
 80138a8:	e7e1      	b.n	801386e <_strtod_l+0x216>
 80138aa:	280f      	cmp	r0, #15
 80138ac:	dceb      	bgt.n	8013886 <_strtod_l+0x22e>
 80138ae:	9808      	ldr	r0, [sp, #32]
 80138b0:	230a      	movs	r3, #10
 80138b2:	fb03 2300 	mla	r3, r3, r0, r2
 80138b6:	9308      	str	r3, [sp, #32]
 80138b8:	e7e5      	b.n	8013886 <_strtod_l+0x22e>
 80138ba:	4629      	mov	r1, r5
 80138bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80138be:	1c50      	adds	r0, r2, #1
 80138c0:	9019      	str	r0, [sp, #100]	@ 0x64
 80138c2:	7852      	ldrb	r2, [r2, #1]
 80138c4:	4618      	mov	r0, r3
 80138c6:	460d      	mov	r5, r1
 80138c8:	e7b1      	b.n	801382e <_strtod_l+0x1d6>
 80138ca:	f04f 0900 	mov.w	r9, #0
 80138ce:	2301      	movs	r3, #1
 80138d0:	e77d      	b.n	80137ce <_strtod_l+0x176>
 80138d2:	f04f 0c00 	mov.w	ip, #0
 80138d6:	1ca2      	adds	r2, r4, #2
 80138d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80138da:	78a2      	ldrb	r2, [r4, #2]
 80138dc:	e785      	b.n	80137ea <_strtod_l+0x192>
 80138de:	f04f 0c01 	mov.w	ip, #1
 80138e2:	e7f8      	b.n	80138d6 <_strtod_l+0x27e>
 80138e4:	08017180 	.word	0x08017180
 80138e8:	08017168 	.word	0x08017168
 80138ec:	7ff00000 	.word	0x7ff00000
 80138f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80138f2:	1c51      	adds	r1, r2, #1
 80138f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80138f6:	7852      	ldrb	r2, [r2, #1]
 80138f8:	2a30      	cmp	r2, #48	@ 0x30
 80138fa:	d0f9      	beq.n	80138f0 <_strtod_l+0x298>
 80138fc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013900:	2908      	cmp	r1, #8
 8013902:	f63f af78 	bhi.w	80137f6 <_strtod_l+0x19e>
 8013906:	3a30      	subs	r2, #48	@ 0x30
 8013908:	920e      	str	r2, [sp, #56]	@ 0x38
 801390a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801390c:	920f      	str	r2, [sp, #60]	@ 0x3c
 801390e:	f04f 080a 	mov.w	r8, #10
 8013912:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013914:	1c56      	adds	r6, r2, #1
 8013916:	9619      	str	r6, [sp, #100]	@ 0x64
 8013918:	7852      	ldrb	r2, [r2, #1]
 801391a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801391e:	f1be 0f09 	cmp.w	lr, #9
 8013922:	d939      	bls.n	8013998 <_strtod_l+0x340>
 8013924:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013926:	1a76      	subs	r6, r6, r1
 8013928:	2e08      	cmp	r6, #8
 801392a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801392e:	dc03      	bgt.n	8013938 <_strtod_l+0x2e0>
 8013930:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013932:	4588      	cmp	r8, r1
 8013934:	bfa8      	it	ge
 8013936:	4688      	movge	r8, r1
 8013938:	f1bc 0f00 	cmp.w	ip, #0
 801393c:	d001      	beq.n	8013942 <_strtod_l+0x2ea>
 801393e:	f1c8 0800 	rsb	r8, r8, #0
 8013942:	2d00      	cmp	r5, #0
 8013944:	d14e      	bne.n	80139e4 <_strtod_l+0x38c>
 8013946:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013948:	4308      	orrs	r0, r1
 801394a:	f47f aebe 	bne.w	80136ca <_strtod_l+0x72>
 801394e:	2b00      	cmp	r3, #0
 8013950:	f47f aed6 	bne.w	8013700 <_strtod_l+0xa8>
 8013954:	2a69      	cmp	r2, #105	@ 0x69
 8013956:	d028      	beq.n	80139aa <_strtod_l+0x352>
 8013958:	dc25      	bgt.n	80139a6 <_strtod_l+0x34e>
 801395a:	2a49      	cmp	r2, #73	@ 0x49
 801395c:	d025      	beq.n	80139aa <_strtod_l+0x352>
 801395e:	2a4e      	cmp	r2, #78	@ 0x4e
 8013960:	f47f aece 	bne.w	8013700 <_strtod_l+0xa8>
 8013964:	499b      	ldr	r1, [pc, #620]	@ (8013bd4 <_strtod_l+0x57c>)
 8013966:	a819      	add	r0, sp, #100	@ 0x64
 8013968:	f001 fd5e 	bl	8015428 <__match>
 801396c:	2800      	cmp	r0, #0
 801396e:	f43f aec7 	beq.w	8013700 <_strtod_l+0xa8>
 8013972:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013974:	781b      	ldrb	r3, [r3, #0]
 8013976:	2b28      	cmp	r3, #40	@ 0x28
 8013978:	d12e      	bne.n	80139d8 <_strtod_l+0x380>
 801397a:	4997      	ldr	r1, [pc, #604]	@ (8013bd8 <_strtod_l+0x580>)
 801397c:	aa1c      	add	r2, sp, #112	@ 0x70
 801397e:	a819      	add	r0, sp, #100	@ 0x64
 8013980:	f001 fd66 	bl	8015450 <__hexnan>
 8013984:	2805      	cmp	r0, #5
 8013986:	d127      	bne.n	80139d8 <_strtod_l+0x380>
 8013988:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801398a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801398e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013992:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013996:	e698      	b.n	80136ca <_strtod_l+0x72>
 8013998:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801399a:	fb08 2101 	mla	r1, r8, r1, r2
 801399e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80139a2:	920e      	str	r2, [sp, #56]	@ 0x38
 80139a4:	e7b5      	b.n	8013912 <_strtod_l+0x2ba>
 80139a6:	2a6e      	cmp	r2, #110	@ 0x6e
 80139a8:	e7da      	b.n	8013960 <_strtod_l+0x308>
 80139aa:	498c      	ldr	r1, [pc, #560]	@ (8013bdc <_strtod_l+0x584>)
 80139ac:	a819      	add	r0, sp, #100	@ 0x64
 80139ae:	f001 fd3b 	bl	8015428 <__match>
 80139b2:	2800      	cmp	r0, #0
 80139b4:	f43f aea4 	beq.w	8013700 <_strtod_l+0xa8>
 80139b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80139ba:	4989      	ldr	r1, [pc, #548]	@ (8013be0 <_strtod_l+0x588>)
 80139bc:	3b01      	subs	r3, #1
 80139be:	a819      	add	r0, sp, #100	@ 0x64
 80139c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80139c2:	f001 fd31 	bl	8015428 <__match>
 80139c6:	b910      	cbnz	r0, 80139ce <_strtod_l+0x376>
 80139c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80139ca:	3301      	adds	r3, #1
 80139cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80139ce:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8013bf0 <_strtod_l+0x598>
 80139d2:	f04f 0a00 	mov.w	sl, #0
 80139d6:	e678      	b.n	80136ca <_strtod_l+0x72>
 80139d8:	4882      	ldr	r0, [pc, #520]	@ (8013be4 <_strtod_l+0x58c>)
 80139da:	f001 fa61 	bl	8014ea0 <nan>
 80139de:	ec5b ab10 	vmov	sl, fp, d0
 80139e2:	e672      	b.n	80136ca <_strtod_l+0x72>
 80139e4:	eba8 0309 	sub.w	r3, r8, r9
 80139e8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80139ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80139ec:	2f00      	cmp	r7, #0
 80139ee:	bf08      	it	eq
 80139f0:	462f      	moveq	r7, r5
 80139f2:	2d10      	cmp	r5, #16
 80139f4:	462c      	mov	r4, r5
 80139f6:	bfa8      	it	ge
 80139f8:	2410      	movge	r4, #16
 80139fa:	f7ec fdab 	bl	8000554 <__aeabi_ui2d>
 80139fe:	2d09      	cmp	r5, #9
 8013a00:	4682      	mov	sl, r0
 8013a02:	468b      	mov	fp, r1
 8013a04:	dc13      	bgt.n	8013a2e <_strtod_l+0x3d6>
 8013a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	f43f ae5e 	beq.w	80136ca <_strtod_l+0x72>
 8013a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a10:	dd78      	ble.n	8013b04 <_strtod_l+0x4ac>
 8013a12:	2b16      	cmp	r3, #22
 8013a14:	dc5f      	bgt.n	8013ad6 <_strtod_l+0x47e>
 8013a16:	4974      	ldr	r1, [pc, #464]	@ (8013be8 <_strtod_l+0x590>)
 8013a18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a20:	4652      	mov	r2, sl
 8013a22:	465b      	mov	r3, fp
 8013a24:	f7ec fe10 	bl	8000648 <__aeabi_dmul>
 8013a28:	4682      	mov	sl, r0
 8013a2a:	468b      	mov	fp, r1
 8013a2c:	e64d      	b.n	80136ca <_strtod_l+0x72>
 8013a2e:	4b6e      	ldr	r3, [pc, #440]	@ (8013be8 <_strtod_l+0x590>)
 8013a30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013a34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013a38:	f7ec fe06 	bl	8000648 <__aeabi_dmul>
 8013a3c:	4682      	mov	sl, r0
 8013a3e:	9808      	ldr	r0, [sp, #32]
 8013a40:	468b      	mov	fp, r1
 8013a42:	f7ec fd87 	bl	8000554 <__aeabi_ui2d>
 8013a46:	4602      	mov	r2, r0
 8013a48:	460b      	mov	r3, r1
 8013a4a:	4650      	mov	r0, sl
 8013a4c:	4659      	mov	r1, fp
 8013a4e:	f7ec fc45 	bl	80002dc <__adddf3>
 8013a52:	2d0f      	cmp	r5, #15
 8013a54:	4682      	mov	sl, r0
 8013a56:	468b      	mov	fp, r1
 8013a58:	ddd5      	ble.n	8013a06 <_strtod_l+0x3ae>
 8013a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013a5c:	1b2c      	subs	r4, r5, r4
 8013a5e:	441c      	add	r4, r3
 8013a60:	2c00      	cmp	r4, #0
 8013a62:	f340 8096 	ble.w	8013b92 <_strtod_l+0x53a>
 8013a66:	f014 030f 	ands.w	r3, r4, #15
 8013a6a:	d00a      	beq.n	8013a82 <_strtod_l+0x42a>
 8013a6c:	495e      	ldr	r1, [pc, #376]	@ (8013be8 <_strtod_l+0x590>)
 8013a6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013a72:	4652      	mov	r2, sl
 8013a74:	465b      	mov	r3, fp
 8013a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013a7a:	f7ec fde5 	bl	8000648 <__aeabi_dmul>
 8013a7e:	4682      	mov	sl, r0
 8013a80:	468b      	mov	fp, r1
 8013a82:	f034 040f 	bics.w	r4, r4, #15
 8013a86:	d073      	beq.n	8013b70 <_strtod_l+0x518>
 8013a88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013a8c:	dd48      	ble.n	8013b20 <_strtod_l+0x4c8>
 8013a8e:	2400      	movs	r4, #0
 8013a90:	46a0      	mov	r8, r4
 8013a92:	940a      	str	r4, [sp, #40]	@ 0x28
 8013a94:	46a1      	mov	r9, r4
 8013a96:	9a05      	ldr	r2, [sp, #20]
 8013a98:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013bf0 <_strtod_l+0x598>
 8013a9c:	2322      	movs	r3, #34	@ 0x22
 8013a9e:	6013      	str	r3, [r2, #0]
 8013aa0:	f04f 0a00 	mov.w	sl, #0
 8013aa4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	f43f ae0f 	beq.w	80136ca <_strtod_l+0x72>
 8013aac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013aae:	9805      	ldr	r0, [sp, #20]
 8013ab0:	f7ff f942 	bl	8012d38 <_Bfree>
 8013ab4:	9805      	ldr	r0, [sp, #20]
 8013ab6:	4649      	mov	r1, r9
 8013ab8:	f7ff f93e 	bl	8012d38 <_Bfree>
 8013abc:	9805      	ldr	r0, [sp, #20]
 8013abe:	4641      	mov	r1, r8
 8013ac0:	f7ff f93a 	bl	8012d38 <_Bfree>
 8013ac4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013ac6:	9805      	ldr	r0, [sp, #20]
 8013ac8:	f7ff f936 	bl	8012d38 <_Bfree>
 8013acc:	9805      	ldr	r0, [sp, #20]
 8013ace:	4621      	mov	r1, r4
 8013ad0:	f7ff f932 	bl	8012d38 <_Bfree>
 8013ad4:	e5f9      	b.n	80136ca <_strtod_l+0x72>
 8013ad6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ad8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013adc:	4293      	cmp	r3, r2
 8013ade:	dbbc      	blt.n	8013a5a <_strtod_l+0x402>
 8013ae0:	4c41      	ldr	r4, [pc, #260]	@ (8013be8 <_strtod_l+0x590>)
 8013ae2:	f1c5 050f 	rsb	r5, r5, #15
 8013ae6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013aea:	4652      	mov	r2, sl
 8013aec:	465b      	mov	r3, fp
 8013aee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013af2:	f7ec fda9 	bl	8000648 <__aeabi_dmul>
 8013af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013af8:	1b5d      	subs	r5, r3, r5
 8013afa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013afe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013b02:	e78f      	b.n	8013a24 <_strtod_l+0x3cc>
 8013b04:	3316      	adds	r3, #22
 8013b06:	dba8      	blt.n	8013a5a <_strtod_l+0x402>
 8013b08:	4b37      	ldr	r3, [pc, #220]	@ (8013be8 <_strtod_l+0x590>)
 8013b0a:	eba9 0808 	sub.w	r8, r9, r8
 8013b0e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013b12:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013b16:	4650      	mov	r0, sl
 8013b18:	4659      	mov	r1, fp
 8013b1a:	f7ec febf 	bl	800089c <__aeabi_ddiv>
 8013b1e:	e783      	b.n	8013a28 <_strtod_l+0x3d0>
 8013b20:	4b32      	ldr	r3, [pc, #200]	@ (8013bec <_strtod_l+0x594>)
 8013b22:	9308      	str	r3, [sp, #32]
 8013b24:	2300      	movs	r3, #0
 8013b26:	1124      	asrs	r4, r4, #4
 8013b28:	4650      	mov	r0, sl
 8013b2a:	4659      	mov	r1, fp
 8013b2c:	461e      	mov	r6, r3
 8013b2e:	2c01      	cmp	r4, #1
 8013b30:	dc21      	bgt.n	8013b76 <_strtod_l+0x51e>
 8013b32:	b10b      	cbz	r3, 8013b38 <_strtod_l+0x4e0>
 8013b34:	4682      	mov	sl, r0
 8013b36:	468b      	mov	fp, r1
 8013b38:	492c      	ldr	r1, [pc, #176]	@ (8013bec <_strtod_l+0x594>)
 8013b3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013b3e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013b42:	4652      	mov	r2, sl
 8013b44:	465b      	mov	r3, fp
 8013b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b4a:	f7ec fd7d 	bl	8000648 <__aeabi_dmul>
 8013b4e:	4b28      	ldr	r3, [pc, #160]	@ (8013bf0 <_strtod_l+0x598>)
 8013b50:	460a      	mov	r2, r1
 8013b52:	400b      	ands	r3, r1
 8013b54:	4927      	ldr	r1, [pc, #156]	@ (8013bf4 <_strtod_l+0x59c>)
 8013b56:	428b      	cmp	r3, r1
 8013b58:	4682      	mov	sl, r0
 8013b5a:	d898      	bhi.n	8013a8e <_strtod_l+0x436>
 8013b5c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013b60:	428b      	cmp	r3, r1
 8013b62:	bf86      	itte	hi
 8013b64:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8013bf8 <_strtod_l+0x5a0>
 8013b68:	f04f 3aff 	movhi.w	sl, #4294967295
 8013b6c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013b70:	2300      	movs	r3, #0
 8013b72:	9308      	str	r3, [sp, #32]
 8013b74:	e07a      	b.n	8013c6c <_strtod_l+0x614>
 8013b76:	07e2      	lsls	r2, r4, #31
 8013b78:	d505      	bpl.n	8013b86 <_strtod_l+0x52e>
 8013b7a:	9b08      	ldr	r3, [sp, #32]
 8013b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b80:	f7ec fd62 	bl	8000648 <__aeabi_dmul>
 8013b84:	2301      	movs	r3, #1
 8013b86:	9a08      	ldr	r2, [sp, #32]
 8013b88:	3208      	adds	r2, #8
 8013b8a:	3601      	adds	r6, #1
 8013b8c:	1064      	asrs	r4, r4, #1
 8013b8e:	9208      	str	r2, [sp, #32]
 8013b90:	e7cd      	b.n	8013b2e <_strtod_l+0x4d6>
 8013b92:	d0ed      	beq.n	8013b70 <_strtod_l+0x518>
 8013b94:	4264      	negs	r4, r4
 8013b96:	f014 020f 	ands.w	r2, r4, #15
 8013b9a:	d00a      	beq.n	8013bb2 <_strtod_l+0x55a>
 8013b9c:	4b12      	ldr	r3, [pc, #72]	@ (8013be8 <_strtod_l+0x590>)
 8013b9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013ba2:	4650      	mov	r0, sl
 8013ba4:	4659      	mov	r1, fp
 8013ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013baa:	f7ec fe77 	bl	800089c <__aeabi_ddiv>
 8013bae:	4682      	mov	sl, r0
 8013bb0:	468b      	mov	fp, r1
 8013bb2:	1124      	asrs	r4, r4, #4
 8013bb4:	d0dc      	beq.n	8013b70 <_strtod_l+0x518>
 8013bb6:	2c1f      	cmp	r4, #31
 8013bb8:	dd20      	ble.n	8013bfc <_strtod_l+0x5a4>
 8013bba:	2400      	movs	r4, #0
 8013bbc:	46a0      	mov	r8, r4
 8013bbe:	940a      	str	r4, [sp, #40]	@ 0x28
 8013bc0:	46a1      	mov	r9, r4
 8013bc2:	9a05      	ldr	r2, [sp, #20]
 8013bc4:	2322      	movs	r3, #34	@ 0x22
 8013bc6:	f04f 0a00 	mov.w	sl, #0
 8013bca:	f04f 0b00 	mov.w	fp, #0
 8013bce:	6013      	str	r3, [r2, #0]
 8013bd0:	e768      	b.n	8013aa4 <_strtod_l+0x44c>
 8013bd2:	bf00      	nop
 8013bd4:	08016f55 	.word	0x08016f55
 8013bd8:	0801716c 	.word	0x0801716c
 8013bdc:	08016f4d 	.word	0x08016f4d
 8013be0:	08016f82 	.word	0x08016f82
 8013be4:	08017330 	.word	0x08017330
 8013be8:	080170a0 	.word	0x080170a0
 8013bec:	08017078 	.word	0x08017078
 8013bf0:	7ff00000 	.word	0x7ff00000
 8013bf4:	7ca00000 	.word	0x7ca00000
 8013bf8:	7fefffff 	.word	0x7fefffff
 8013bfc:	f014 0310 	ands.w	r3, r4, #16
 8013c00:	bf18      	it	ne
 8013c02:	236a      	movne	r3, #106	@ 0x6a
 8013c04:	4ea9      	ldr	r6, [pc, #676]	@ (8013eac <_strtod_l+0x854>)
 8013c06:	9308      	str	r3, [sp, #32]
 8013c08:	4650      	mov	r0, sl
 8013c0a:	4659      	mov	r1, fp
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	07e2      	lsls	r2, r4, #31
 8013c10:	d504      	bpl.n	8013c1c <_strtod_l+0x5c4>
 8013c12:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013c16:	f7ec fd17 	bl	8000648 <__aeabi_dmul>
 8013c1a:	2301      	movs	r3, #1
 8013c1c:	1064      	asrs	r4, r4, #1
 8013c1e:	f106 0608 	add.w	r6, r6, #8
 8013c22:	d1f4      	bne.n	8013c0e <_strtod_l+0x5b6>
 8013c24:	b10b      	cbz	r3, 8013c2a <_strtod_l+0x5d2>
 8013c26:	4682      	mov	sl, r0
 8013c28:	468b      	mov	fp, r1
 8013c2a:	9b08      	ldr	r3, [sp, #32]
 8013c2c:	b1b3      	cbz	r3, 8013c5c <_strtod_l+0x604>
 8013c2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013c32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	4659      	mov	r1, fp
 8013c3a:	dd0f      	ble.n	8013c5c <_strtod_l+0x604>
 8013c3c:	2b1f      	cmp	r3, #31
 8013c3e:	dd55      	ble.n	8013cec <_strtod_l+0x694>
 8013c40:	2b34      	cmp	r3, #52	@ 0x34
 8013c42:	bfde      	ittt	le
 8013c44:	f04f 33ff 	movle.w	r3, #4294967295
 8013c48:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013c4c:	4093      	lslle	r3, r2
 8013c4e:	f04f 0a00 	mov.w	sl, #0
 8013c52:	bfcc      	ite	gt
 8013c54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013c58:	ea03 0b01 	andle.w	fp, r3, r1
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	2300      	movs	r3, #0
 8013c60:	4650      	mov	r0, sl
 8013c62:	4659      	mov	r1, fp
 8013c64:	f7ec ff58 	bl	8000b18 <__aeabi_dcmpeq>
 8013c68:	2800      	cmp	r0, #0
 8013c6a:	d1a6      	bne.n	8013bba <_strtod_l+0x562>
 8013c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c6e:	9300      	str	r3, [sp, #0]
 8013c70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013c72:	9805      	ldr	r0, [sp, #20]
 8013c74:	462b      	mov	r3, r5
 8013c76:	463a      	mov	r2, r7
 8013c78:	f7ff f8c6 	bl	8012e08 <__s2b>
 8013c7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8013c7e:	2800      	cmp	r0, #0
 8013c80:	f43f af05 	beq.w	8013a8e <_strtod_l+0x436>
 8013c84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c86:	2a00      	cmp	r2, #0
 8013c88:	eba9 0308 	sub.w	r3, r9, r8
 8013c8c:	bfa8      	it	ge
 8013c8e:	2300      	movge	r3, #0
 8013c90:	9312      	str	r3, [sp, #72]	@ 0x48
 8013c92:	2400      	movs	r4, #0
 8013c94:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013c98:	9316      	str	r3, [sp, #88]	@ 0x58
 8013c9a:	46a0      	mov	r8, r4
 8013c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c9e:	9805      	ldr	r0, [sp, #20]
 8013ca0:	6859      	ldr	r1, [r3, #4]
 8013ca2:	f7ff f809 	bl	8012cb8 <_Balloc>
 8013ca6:	4681      	mov	r9, r0
 8013ca8:	2800      	cmp	r0, #0
 8013caa:	f43f aef4 	beq.w	8013a96 <_strtod_l+0x43e>
 8013cae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013cb0:	691a      	ldr	r2, [r3, #16]
 8013cb2:	3202      	adds	r2, #2
 8013cb4:	f103 010c 	add.w	r1, r3, #12
 8013cb8:	0092      	lsls	r2, r2, #2
 8013cba:	300c      	adds	r0, #12
 8013cbc:	f7fe f89b 	bl	8011df6 <memcpy>
 8013cc0:	ec4b ab10 	vmov	d0, sl, fp
 8013cc4:	9805      	ldr	r0, [sp, #20]
 8013cc6:	aa1c      	add	r2, sp, #112	@ 0x70
 8013cc8:	a91b      	add	r1, sp, #108	@ 0x6c
 8013cca:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013cce:	f7ff fbd7 	bl	8013480 <__d2b>
 8013cd2:	901a      	str	r0, [sp, #104]	@ 0x68
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	f43f aede 	beq.w	8013a96 <_strtod_l+0x43e>
 8013cda:	9805      	ldr	r0, [sp, #20]
 8013cdc:	2101      	movs	r1, #1
 8013cde:	f7ff f929 	bl	8012f34 <__i2b>
 8013ce2:	4680      	mov	r8, r0
 8013ce4:	b948      	cbnz	r0, 8013cfa <_strtod_l+0x6a2>
 8013ce6:	f04f 0800 	mov.w	r8, #0
 8013cea:	e6d4      	b.n	8013a96 <_strtod_l+0x43e>
 8013cec:	f04f 32ff 	mov.w	r2, #4294967295
 8013cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8013cf4:	ea03 0a0a 	and.w	sl, r3, sl
 8013cf8:	e7b0      	b.n	8013c5c <_strtod_l+0x604>
 8013cfa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013cfc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013cfe:	2d00      	cmp	r5, #0
 8013d00:	bfab      	itete	ge
 8013d02:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8013d04:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013d06:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013d08:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013d0a:	bfac      	ite	ge
 8013d0c:	18ef      	addge	r7, r5, r3
 8013d0e:	1b5e      	sublt	r6, r3, r5
 8013d10:	9b08      	ldr	r3, [sp, #32]
 8013d12:	1aed      	subs	r5, r5, r3
 8013d14:	4415      	add	r5, r2
 8013d16:	4b66      	ldr	r3, [pc, #408]	@ (8013eb0 <_strtod_l+0x858>)
 8013d18:	3d01      	subs	r5, #1
 8013d1a:	429d      	cmp	r5, r3
 8013d1c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013d20:	da50      	bge.n	8013dc4 <_strtod_l+0x76c>
 8013d22:	1b5b      	subs	r3, r3, r5
 8013d24:	2b1f      	cmp	r3, #31
 8013d26:	eba2 0203 	sub.w	r2, r2, r3
 8013d2a:	f04f 0101 	mov.w	r1, #1
 8013d2e:	dc3d      	bgt.n	8013dac <_strtod_l+0x754>
 8013d30:	fa01 f303 	lsl.w	r3, r1, r3
 8013d34:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013d36:	2300      	movs	r3, #0
 8013d38:	9310      	str	r3, [sp, #64]	@ 0x40
 8013d3a:	18bd      	adds	r5, r7, r2
 8013d3c:	9b08      	ldr	r3, [sp, #32]
 8013d3e:	42af      	cmp	r7, r5
 8013d40:	4416      	add	r6, r2
 8013d42:	441e      	add	r6, r3
 8013d44:	463b      	mov	r3, r7
 8013d46:	bfa8      	it	ge
 8013d48:	462b      	movge	r3, r5
 8013d4a:	42b3      	cmp	r3, r6
 8013d4c:	bfa8      	it	ge
 8013d4e:	4633      	movge	r3, r6
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	bfc2      	ittt	gt
 8013d54:	1aed      	subgt	r5, r5, r3
 8013d56:	1af6      	subgt	r6, r6, r3
 8013d58:	1aff      	subgt	r7, r7, r3
 8013d5a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	dd16      	ble.n	8013d8e <_strtod_l+0x736>
 8013d60:	4641      	mov	r1, r8
 8013d62:	9805      	ldr	r0, [sp, #20]
 8013d64:	461a      	mov	r2, r3
 8013d66:	f7ff f9a5 	bl	80130b4 <__pow5mult>
 8013d6a:	4680      	mov	r8, r0
 8013d6c:	2800      	cmp	r0, #0
 8013d6e:	d0ba      	beq.n	8013ce6 <_strtod_l+0x68e>
 8013d70:	4601      	mov	r1, r0
 8013d72:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013d74:	9805      	ldr	r0, [sp, #20]
 8013d76:	f7ff f8f3 	bl	8012f60 <__multiply>
 8013d7a:	900e      	str	r0, [sp, #56]	@ 0x38
 8013d7c:	2800      	cmp	r0, #0
 8013d7e:	f43f ae8a 	beq.w	8013a96 <_strtod_l+0x43e>
 8013d82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013d84:	9805      	ldr	r0, [sp, #20]
 8013d86:	f7fe ffd7 	bl	8012d38 <_Bfree>
 8013d8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8013d8e:	2d00      	cmp	r5, #0
 8013d90:	dc1d      	bgt.n	8013dce <_strtod_l+0x776>
 8013d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	dd23      	ble.n	8013de0 <_strtod_l+0x788>
 8013d98:	4649      	mov	r1, r9
 8013d9a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013d9c:	9805      	ldr	r0, [sp, #20]
 8013d9e:	f7ff f989 	bl	80130b4 <__pow5mult>
 8013da2:	4681      	mov	r9, r0
 8013da4:	b9e0      	cbnz	r0, 8013de0 <_strtod_l+0x788>
 8013da6:	f04f 0900 	mov.w	r9, #0
 8013daa:	e674      	b.n	8013a96 <_strtod_l+0x43e>
 8013dac:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013db0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8013db4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013db8:	35e2      	adds	r5, #226	@ 0xe2
 8013dba:	fa01 f305 	lsl.w	r3, r1, r5
 8013dbe:	9310      	str	r3, [sp, #64]	@ 0x40
 8013dc0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013dc2:	e7ba      	b.n	8013d3a <_strtod_l+0x6e2>
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	9310      	str	r3, [sp, #64]	@ 0x40
 8013dc8:	2301      	movs	r3, #1
 8013dca:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013dcc:	e7b5      	b.n	8013d3a <_strtod_l+0x6e2>
 8013dce:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013dd0:	9805      	ldr	r0, [sp, #20]
 8013dd2:	462a      	mov	r2, r5
 8013dd4:	f7ff f9c8 	bl	8013168 <__lshift>
 8013dd8:	901a      	str	r0, [sp, #104]	@ 0x68
 8013dda:	2800      	cmp	r0, #0
 8013ddc:	d1d9      	bne.n	8013d92 <_strtod_l+0x73a>
 8013dde:	e65a      	b.n	8013a96 <_strtod_l+0x43e>
 8013de0:	2e00      	cmp	r6, #0
 8013de2:	dd07      	ble.n	8013df4 <_strtod_l+0x79c>
 8013de4:	4649      	mov	r1, r9
 8013de6:	9805      	ldr	r0, [sp, #20]
 8013de8:	4632      	mov	r2, r6
 8013dea:	f7ff f9bd 	bl	8013168 <__lshift>
 8013dee:	4681      	mov	r9, r0
 8013df0:	2800      	cmp	r0, #0
 8013df2:	d0d8      	beq.n	8013da6 <_strtod_l+0x74e>
 8013df4:	2f00      	cmp	r7, #0
 8013df6:	dd08      	ble.n	8013e0a <_strtod_l+0x7b2>
 8013df8:	4641      	mov	r1, r8
 8013dfa:	9805      	ldr	r0, [sp, #20]
 8013dfc:	463a      	mov	r2, r7
 8013dfe:	f7ff f9b3 	bl	8013168 <__lshift>
 8013e02:	4680      	mov	r8, r0
 8013e04:	2800      	cmp	r0, #0
 8013e06:	f43f ae46 	beq.w	8013a96 <_strtod_l+0x43e>
 8013e0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013e0c:	9805      	ldr	r0, [sp, #20]
 8013e0e:	464a      	mov	r2, r9
 8013e10:	f7ff fa32 	bl	8013278 <__mdiff>
 8013e14:	4604      	mov	r4, r0
 8013e16:	2800      	cmp	r0, #0
 8013e18:	f43f ae3d 	beq.w	8013a96 <_strtod_l+0x43e>
 8013e1c:	68c3      	ldr	r3, [r0, #12]
 8013e1e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013e20:	2300      	movs	r3, #0
 8013e22:	60c3      	str	r3, [r0, #12]
 8013e24:	4641      	mov	r1, r8
 8013e26:	f7ff fa0b 	bl	8013240 <__mcmp>
 8013e2a:	2800      	cmp	r0, #0
 8013e2c:	da46      	bge.n	8013ebc <_strtod_l+0x864>
 8013e2e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013e30:	ea53 030a 	orrs.w	r3, r3, sl
 8013e34:	d16c      	bne.n	8013f10 <_strtod_l+0x8b8>
 8013e36:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d168      	bne.n	8013f10 <_strtod_l+0x8b8>
 8013e3e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013e42:	0d1b      	lsrs	r3, r3, #20
 8013e44:	051b      	lsls	r3, r3, #20
 8013e46:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013e4a:	d961      	bls.n	8013f10 <_strtod_l+0x8b8>
 8013e4c:	6963      	ldr	r3, [r4, #20]
 8013e4e:	b913      	cbnz	r3, 8013e56 <_strtod_l+0x7fe>
 8013e50:	6923      	ldr	r3, [r4, #16]
 8013e52:	2b01      	cmp	r3, #1
 8013e54:	dd5c      	ble.n	8013f10 <_strtod_l+0x8b8>
 8013e56:	4621      	mov	r1, r4
 8013e58:	2201      	movs	r2, #1
 8013e5a:	9805      	ldr	r0, [sp, #20]
 8013e5c:	f7ff f984 	bl	8013168 <__lshift>
 8013e60:	4641      	mov	r1, r8
 8013e62:	4604      	mov	r4, r0
 8013e64:	f7ff f9ec 	bl	8013240 <__mcmp>
 8013e68:	2800      	cmp	r0, #0
 8013e6a:	dd51      	ble.n	8013f10 <_strtod_l+0x8b8>
 8013e6c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013e70:	9a08      	ldr	r2, [sp, #32]
 8013e72:	0d1b      	lsrs	r3, r3, #20
 8013e74:	051b      	lsls	r3, r3, #20
 8013e76:	2a00      	cmp	r2, #0
 8013e78:	d06b      	beq.n	8013f52 <_strtod_l+0x8fa>
 8013e7a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013e7e:	d868      	bhi.n	8013f52 <_strtod_l+0x8fa>
 8013e80:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013e84:	f67f ae9d 	bls.w	8013bc2 <_strtod_l+0x56a>
 8013e88:	4b0a      	ldr	r3, [pc, #40]	@ (8013eb4 <_strtod_l+0x85c>)
 8013e8a:	4650      	mov	r0, sl
 8013e8c:	4659      	mov	r1, fp
 8013e8e:	2200      	movs	r2, #0
 8013e90:	f7ec fbda 	bl	8000648 <__aeabi_dmul>
 8013e94:	4b08      	ldr	r3, [pc, #32]	@ (8013eb8 <_strtod_l+0x860>)
 8013e96:	400b      	ands	r3, r1
 8013e98:	4682      	mov	sl, r0
 8013e9a:	468b      	mov	fp, r1
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	f47f ae05 	bne.w	8013aac <_strtod_l+0x454>
 8013ea2:	9a05      	ldr	r2, [sp, #20]
 8013ea4:	2322      	movs	r3, #34	@ 0x22
 8013ea6:	6013      	str	r3, [r2, #0]
 8013ea8:	e600      	b.n	8013aac <_strtod_l+0x454>
 8013eaa:	bf00      	nop
 8013eac:	08017198 	.word	0x08017198
 8013eb0:	fffffc02 	.word	0xfffffc02
 8013eb4:	39500000 	.word	0x39500000
 8013eb8:	7ff00000 	.word	0x7ff00000
 8013ebc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013ec0:	d165      	bne.n	8013f8e <_strtod_l+0x936>
 8013ec2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013ec4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013ec8:	b35a      	cbz	r2, 8013f22 <_strtod_l+0x8ca>
 8013eca:	4a9f      	ldr	r2, [pc, #636]	@ (8014148 <_strtod_l+0xaf0>)
 8013ecc:	4293      	cmp	r3, r2
 8013ece:	d12b      	bne.n	8013f28 <_strtod_l+0x8d0>
 8013ed0:	9b08      	ldr	r3, [sp, #32]
 8013ed2:	4651      	mov	r1, sl
 8013ed4:	b303      	cbz	r3, 8013f18 <_strtod_l+0x8c0>
 8013ed6:	4b9d      	ldr	r3, [pc, #628]	@ (801414c <_strtod_l+0xaf4>)
 8013ed8:	465a      	mov	r2, fp
 8013eda:	4013      	ands	r3, r2
 8013edc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8013ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8013ee4:	d81b      	bhi.n	8013f1e <_strtod_l+0x8c6>
 8013ee6:	0d1b      	lsrs	r3, r3, #20
 8013ee8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013eec:	fa02 f303 	lsl.w	r3, r2, r3
 8013ef0:	4299      	cmp	r1, r3
 8013ef2:	d119      	bne.n	8013f28 <_strtod_l+0x8d0>
 8013ef4:	4b96      	ldr	r3, [pc, #600]	@ (8014150 <_strtod_l+0xaf8>)
 8013ef6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d102      	bne.n	8013f02 <_strtod_l+0x8aa>
 8013efc:	3101      	adds	r1, #1
 8013efe:	f43f adca 	beq.w	8013a96 <_strtod_l+0x43e>
 8013f02:	4b92      	ldr	r3, [pc, #584]	@ (801414c <_strtod_l+0xaf4>)
 8013f04:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013f06:	401a      	ands	r2, r3
 8013f08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8013f0c:	f04f 0a00 	mov.w	sl, #0
 8013f10:	9b08      	ldr	r3, [sp, #32]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d1b8      	bne.n	8013e88 <_strtod_l+0x830>
 8013f16:	e5c9      	b.n	8013aac <_strtod_l+0x454>
 8013f18:	f04f 33ff 	mov.w	r3, #4294967295
 8013f1c:	e7e8      	b.n	8013ef0 <_strtod_l+0x898>
 8013f1e:	4613      	mov	r3, r2
 8013f20:	e7e6      	b.n	8013ef0 <_strtod_l+0x898>
 8013f22:	ea53 030a 	orrs.w	r3, r3, sl
 8013f26:	d0a1      	beq.n	8013e6c <_strtod_l+0x814>
 8013f28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013f2a:	b1db      	cbz	r3, 8013f64 <_strtod_l+0x90c>
 8013f2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013f2e:	4213      	tst	r3, r2
 8013f30:	d0ee      	beq.n	8013f10 <_strtod_l+0x8b8>
 8013f32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013f34:	9a08      	ldr	r2, [sp, #32]
 8013f36:	4650      	mov	r0, sl
 8013f38:	4659      	mov	r1, fp
 8013f3a:	b1bb      	cbz	r3, 8013f6c <_strtod_l+0x914>
 8013f3c:	f7ff fb6e 	bl	801361c <sulp>
 8013f40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013f44:	ec53 2b10 	vmov	r2, r3, d0
 8013f48:	f7ec f9c8 	bl	80002dc <__adddf3>
 8013f4c:	4682      	mov	sl, r0
 8013f4e:	468b      	mov	fp, r1
 8013f50:	e7de      	b.n	8013f10 <_strtod_l+0x8b8>
 8013f52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8013f56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013f5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013f5e:	f04f 3aff 	mov.w	sl, #4294967295
 8013f62:	e7d5      	b.n	8013f10 <_strtod_l+0x8b8>
 8013f64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013f66:	ea13 0f0a 	tst.w	r3, sl
 8013f6a:	e7e1      	b.n	8013f30 <_strtod_l+0x8d8>
 8013f6c:	f7ff fb56 	bl	801361c <sulp>
 8013f70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013f74:	ec53 2b10 	vmov	r2, r3, d0
 8013f78:	f7ec f9ae 	bl	80002d8 <__aeabi_dsub>
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	2300      	movs	r3, #0
 8013f80:	4682      	mov	sl, r0
 8013f82:	468b      	mov	fp, r1
 8013f84:	f7ec fdc8 	bl	8000b18 <__aeabi_dcmpeq>
 8013f88:	2800      	cmp	r0, #0
 8013f8a:	d0c1      	beq.n	8013f10 <_strtod_l+0x8b8>
 8013f8c:	e619      	b.n	8013bc2 <_strtod_l+0x56a>
 8013f8e:	4641      	mov	r1, r8
 8013f90:	4620      	mov	r0, r4
 8013f92:	f7ff facd 	bl	8013530 <__ratio>
 8013f96:	ec57 6b10 	vmov	r6, r7, d0
 8013f9a:	2200      	movs	r2, #0
 8013f9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013fa0:	4630      	mov	r0, r6
 8013fa2:	4639      	mov	r1, r7
 8013fa4:	f7ec fdcc 	bl	8000b40 <__aeabi_dcmple>
 8013fa8:	2800      	cmp	r0, #0
 8013faa:	d06f      	beq.n	801408c <_strtod_l+0xa34>
 8013fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d17a      	bne.n	80140a8 <_strtod_l+0xa50>
 8013fb2:	f1ba 0f00 	cmp.w	sl, #0
 8013fb6:	d158      	bne.n	801406a <_strtod_l+0xa12>
 8013fb8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013fba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d15a      	bne.n	8014078 <_strtod_l+0xa20>
 8013fc2:	4b64      	ldr	r3, [pc, #400]	@ (8014154 <_strtod_l+0xafc>)
 8013fc4:	2200      	movs	r2, #0
 8013fc6:	4630      	mov	r0, r6
 8013fc8:	4639      	mov	r1, r7
 8013fca:	f7ec fdaf 	bl	8000b2c <__aeabi_dcmplt>
 8013fce:	2800      	cmp	r0, #0
 8013fd0:	d159      	bne.n	8014086 <_strtod_l+0xa2e>
 8013fd2:	4630      	mov	r0, r6
 8013fd4:	4639      	mov	r1, r7
 8013fd6:	4b60      	ldr	r3, [pc, #384]	@ (8014158 <_strtod_l+0xb00>)
 8013fd8:	2200      	movs	r2, #0
 8013fda:	f7ec fb35 	bl	8000648 <__aeabi_dmul>
 8013fde:	4606      	mov	r6, r0
 8013fe0:	460f      	mov	r7, r1
 8013fe2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8013fe6:	9606      	str	r6, [sp, #24]
 8013fe8:	9307      	str	r3, [sp, #28]
 8013fea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013fee:	4d57      	ldr	r5, [pc, #348]	@ (801414c <_strtod_l+0xaf4>)
 8013ff0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013ff4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ff6:	401d      	ands	r5, r3
 8013ff8:	4b58      	ldr	r3, [pc, #352]	@ (801415c <_strtod_l+0xb04>)
 8013ffa:	429d      	cmp	r5, r3
 8013ffc:	f040 80b2 	bne.w	8014164 <_strtod_l+0xb0c>
 8014000:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014002:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8014006:	ec4b ab10 	vmov	d0, sl, fp
 801400a:	f7ff f9c9 	bl	80133a0 <__ulp>
 801400e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014012:	ec51 0b10 	vmov	r0, r1, d0
 8014016:	f7ec fb17 	bl	8000648 <__aeabi_dmul>
 801401a:	4652      	mov	r2, sl
 801401c:	465b      	mov	r3, fp
 801401e:	f7ec f95d 	bl	80002dc <__adddf3>
 8014022:	460b      	mov	r3, r1
 8014024:	4949      	ldr	r1, [pc, #292]	@ (801414c <_strtod_l+0xaf4>)
 8014026:	4a4e      	ldr	r2, [pc, #312]	@ (8014160 <_strtod_l+0xb08>)
 8014028:	4019      	ands	r1, r3
 801402a:	4291      	cmp	r1, r2
 801402c:	4682      	mov	sl, r0
 801402e:	d942      	bls.n	80140b6 <_strtod_l+0xa5e>
 8014030:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014032:	4b47      	ldr	r3, [pc, #284]	@ (8014150 <_strtod_l+0xaf8>)
 8014034:	429a      	cmp	r2, r3
 8014036:	d103      	bne.n	8014040 <_strtod_l+0x9e8>
 8014038:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801403a:	3301      	adds	r3, #1
 801403c:	f43f ad2b 	beq.w	8013a96 <_strtod_l+0x43e>
 8014040:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8014150 <_strtod_l+0xaf8>
 8014044:	f04f 3aff 	mov.w	sl, #4294967295
 8014048:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801404a:	9805      	ldr	r0, [sp, #20]
 801404c:	f7fe fe74 	bl	8012d38 <_Bfree>
 8014050:	9805      	ldr	r0, [sp, #20]
 8014052:	4649      	mov	r1, r9
 8014054:	f7fe fe70 	bl	8012d38 <_Bfree>
 8014058:	9805      	ldr	r0, [sp, #20]
 801405a:	4641      	mov	r1, r8
 801405c:	f7fe fe6c 	bl	8012d38 <_Bfree>
 8014060:	9805      	ldr	r0, [sp, #20]
 8014062:	4621      	mov	r1, r4
 8014064:	f7fe fe68 	bl	8012d38 <_Bfree>
 8014068:	e618      	b.n	8013c9c <_strtod_l+0x644>
 801406a:	f1ba 0f01 	cmp.w	sl, #1
 801406e:	d103      	bne.n	8014078 <_strtod_l+0xa20>
 8014070:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014072:	2b00      	cmp	r3, #0
 8014074:	f43f ada5 	beq.w	8013bc2 <_strtod_l+0x56a>
 8014078:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8014128 <_strtod_l+0xad0>
 801407c:	4f35      	ldr	r7, [pc, #212]	@ (8014154 <_strtod_l+0xafc>)
 801407e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014082:	2600      	movs	r6, #0
 8014084:	e7b1      	b.n	8013fea <_strtod_l+0x992>
 8014086:	4f34      	ldr	r7, [pc, #208]	@ (8014158 <_strtod_l+0xb00>)
 8014088:	2600      	movs	r6, #0
 801408a:	e7aa      	b.n	8013fe2 <_strtod_l+0x98a>
 801408c:	4b32      	ldr	r3, [pc, #200]	@ (8014158 <_strtod_l+0xb00>)
 801408e:	4630      	mov	r0, r6
 8014090:	4639      	mov	r1, r7
 8014092:	2200      	movs	r2, #0
 8014094:	f7ec fad8 	bl	8000648 <__aeabi_dmul>
 8014098:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801409a:	4606      	mov	r6, r0
 801409c:	460f      	mov	r7, r1
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d09f      	beq.n	8013fe2 <_strtod_l+0x98a>
 80140a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80140a6:	e7a0      	b.n	8013fea <_strtod_l+0x992>
 80140a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014130 <_strtod_l+0xad8>
 80140ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80140b0:	ec57 6b17 	vmov	r6, r7, d7
 80140b4:	e799      	b.n	8013fea <_strtod_l+0x992>
 80140b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80140ba:	9b08      	ldr	r3, [sp, #32]
 80140bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d1c1      	bne.n	8014048 <_strtod_l+0x9f0>
 80140c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80140c8:	0d1b      	lsrs	r3, r3, #20
 80140ca:	051b      	lsls	r3, r3, #20
 80140cc:	429d      	cmp	r5, r3
 80140ce:	d1bb      	bne.n	8014048 <_strtod_l+0x9f0>
 80140d0:	4630      	mov	r0, r6
 80140d2:	4639      	mov	r1, r7
 80140d4:	f7ec fe18 	bl	8000d08 <__aeabi_d2lz>
 80140d8:	f7ec fa88 	bl	80005ec <__aeabi_l2d>
 80140dc:	4602      	mov	r2, r0
 80140de:	460b      	mov	r3, r1
 80140e0:	4630      	mov	r0, r6
 80140e2:	4639      	mov	r1, r7
 80140e4:	f7ec f8f8 	bl	80002d8 <__aeabi_dsub>
 80140e8:	460b      	mov	r3, r1
 80140ea:	4602      	mov	r2, r0
 80140ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80140f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80140f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80140f6:	ea46 060a 	orr.w	r6, r6, sl
 80140fa:	431e      	orrs	r6, r3
 80140fc:	d06f      	beq.n	80141de <_strtod_l+0xb86>
 80140fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8014138 <_strtod_l+0xae0>)
 8014100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014104:	f7ec fd12 	bl	8000b2c <__aeabi_dcmplt>
 8014108:	2800      	cmp	r0, #0
 801410a:	f47f accf 	bne.w	8013aac <_strtod_l+0x454>
 801410e:	a30c      	add	r3, pc, #48	@ (adr r3, 8014140 <_strtod_l+0xae8>)
 8014110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014114:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014118:	f7ec fd26 	bl	8000b68 <__aeabi_dcmpgt>
 801411c:	2800      	cmp	r0, #0
 801411e:	d093      	beq.n	8014048 <_strtod_l+0x9f0>
 8014120:	e4c4      	b.n	8013aac <_strtod_l+0x454>
 8014122:	bf00      	nop
 8014124:	f3af 8000 	nop.w
 8014128:	00000000 	.word	0x00000000
 801412c:	bff00000 	.word	0xbff00000
 8014130:	00000000 	.word	0x00000000
 8014134:	3ff00000 	.word	0x3ff00000
 8014138:	94a03595 	.word	0x94a03595
 801413c:	3fdfffff 	.word	0x3fdfffff
 8014140:	35afe535 	.word	0x35afe535
 8014144:	3fe00000 	.word	0x3fe00000
 8014148:	000fffff 	.word	0x000fffff
 801414c:	7ff00000 	.word	0x7ff00000
 8014150:	7fefffff 	.word	0x7fefffff
 8014154:	3ff00000 	.word	0x3ff00000
 8014158:	3fe00000 	.word	0x3fe00000
 801415c:	7fe00000 	.word	0x7fe00000
 8014160:	7c9fffff 	.word	0x7c9fffff
 8014164:	9b08      	ldr	r3, [sp, #32]
 8014166:	b323      	cbz	r3, 80141b2 <_strtod_l+0xb5a>
 8014168:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801416c:	d821      	bhi.n	80141b2 <_strtod_l+0xb5a>
 801416e:	a328      	add	r3, pc, #160	@ (adr r3, 8014210 <_strtod_l+0xbb8>)
 8014170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014174:	4630      	mov	r0, r6
 8014176:	4639      	mov	r1, r7
 8014178:	f7ec fce2 	bl	8000b40 <__aeabi_dcmple>
 801417c:	b1a0      	cbz	r0, 80141a8 <_strtod_l+0xb50>
 801417e:	4639      	mov	r1, r7
 8014180:	4630      	mov	r0, r6
 8014182:	f7ec fd39 	bl	8000bf8 <__aeabi_d2uiz>
 8014186:	2801      	cmp	r0, #1
 8014188:	bf38      	it	cc
 801418a:	2001      	movcc	r0, #1
 801418c:	f7ec f9e2 	bl	8000554 <__aeabi_ui2d>
 8014190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014192:	4606      	mov	r6, r0
 8014194:	460f      	mov	r7, r1
 8014196:	b9fb      	cbnz	r3, 80141d8 <_strtod_l+0xb80>
 8014198:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801419c:	9014      	str	r0, [sp, #80]	@ 0x50
 801419e:	9315      	str	r3, [sp, #84]	@ 0x54
 80141a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80141a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80141a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80141aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80141ae:	1b5b      	subs	r3, r3, r5
 80141b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80141b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80141b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80141ba:	f7ff f8f1 	bl	80133a0 <__ulp>
 80141be:	4650      	mov	r0, sl
 80141c0:	ec53 2b10 	vmov	r2, r3, d0
 80141c4:	4659      	mov	r1, fp
 80141c6:	f7ec fa3f 	bl	8000648 <__aeabi_dmul>
 80141ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80141ce:	f7ec f885 	bl	80002dc <__adddf3>
 80141d2:	4682      	mov	sl, r0
 80141d4:	468b      	mov	fp, r1
 80141d6:	e770      	b.n	80140ba <_strtod_l+0xa62>
 80141d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80141dc:	e7e0      	b.n	80141a0 <_strtod_l+0xb48>
 80141de:	a30e      	add	r3, pc, #56	@ (adr r3, 8014218 <_strtod_l+0xbc0>)
 80141e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141e4:	f7ec fca2 	bl	8000b2c <__aeabi_dcmplt>
 80141e8:	e798      	b.n	801411c <_strtod_l+0xac4>
 80141ea:	2300      	movs	r3, #0
 80141ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80141ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80141f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80141f2:	6013      	str	r3, [r2, #0]
 80141f4:	f7ff ba6d 	b.w	80136d2 <_strtod_l+0x7a>
 80141f8:	2a65      	cmp	r2, #101	@ 0x65
 80141fa:	f43f ab66 	beq.w	80138ca <_strtod_l+0x272>
 80141fe:	2a45      	cmp	r2, #69	@ 0x45
 8014200:	f43f ab63 	beq.w	80138ca <_strtod_l+0x272>
 8014204:	2301      	movs	r3, #1
 8014206:	f7ff bb9e 	b.w	8013946 <_strtod_l+0x2ee>
 801420a:	bf00      	nop
 801420c:	f3af 8000 	nop.w
 8014210:	ffc00000 	.word	0xffc00000
 8014214:	41dfffff 	.word	0x41dfffff
 8014218:	94a03595 	.word	0x94a03595
 801421c:	3fcfffff 	.word	0x3fcfffff

08014220 <_strtod_r>:
 8014220:	4b01      	ldr	r3, [pc, #4]	@ (8014228 <_strtod_r+0x8>)
 8014222:	f7ff ba19 	b.w	8013658 <_strtod_l>
 8014226:	bf00      	nop
 8014228:	20000234 	.word	0x20000234

0801422c <_strtol_l.constprop.0>:
 801422c:	2b24      	cmp	r3, #36	@ 0x24
 801422e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014232:	4686      	mov	lr, r0
 8014234:	4690      	mov	r8, r2
 8014236:	d801      	bhi.n	801423c <_strtol_l.constprop.0+0x10>
 8014238:	2b01      	cmp	r3, #1
 801423a:	d106      	bne.n	801424a <_strtol_l.constprop.0+0x1e>
 801423c:	f7fd fdae 	bl	8011d9c <__errno>
 8014240:	2316      	movs	r3, #22
 8014242:	6003      	str	r3, [r0, #0]
 8014244:	2000      	movs	r0, #0
 8014246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801424a:	4834      	ldr	r0, [pc, #208]	@ (801431c <_strtol_l.constprop.0+0xf0>)
 801424c:	460d      	mov	r5, r1
 801424e:	462a      	mov	r2, r5
 8014250:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014254:	5d06      	ldrb	r6, [r0, r4]
 8014256:	f016 0608 	ands.w	r6, r6, #8
 801425a:	d1f8      	bne.n	801424e <_strtol_l.constprop.0+0x22>
 801425c:	2c2d      	cmp	r4, #45	@ 0x2d
 801425e:	d12d      	bne.n	80142bc <_strtol_l.constprop.0+0x90>
 8014260:	782c      	ldrb	r4, [r5, #0]
 8014262:	2601      	movs	r6, #1
 8014264:	1c95      	adds	r5, r2, #2
 8014266:	f033 0210 	bics.w	r2, r3, #16
 801426a:	d109      	bne.n	8014280 <_strtol_l.constprop.0+0x54>
 801426c:	2c30      	cmp	r4, #48	@ 0x30
 801426e:	d12a      	bne.n	80142c6 <_strtol_l.constprop.0+0x9a>
 8014270:	782a      	ldrb	r2, [r5, #0]
 8014272:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8014276:	2a58      	cmp	r2, #88	@ 0x58
 8014278:	d125      	bne.n	80142c6 <_strtol_l.constprop.0+0x9a>
 801427a:	786c      	ldrb	r4, [r5, #1]
 801427c:	2310      	movs	r3, #16
 801427e:	3502      	adds	r5, #2
 8014280:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8014284:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014288:	2200      	movs	r2, #0
 801428a:	fbbc f9f3 	udiv	r9, ip, r3
 801428e:	4610      	mov	r0, r2
 8014290:	fb03 ca19 	mls	sl, r3, r9, ip
 8014294:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014298:	2f09      	cmp	r7, #9
 801429a:	d81b      	bhi.n	80142d4 <_strtol_l.constprop.0+0xa8>
 801429c:	463c      	mov	r4, r7
 801429e:	42a3      	cmp	r3, r4
 80142a0:	dd27      	ble.n	80142f2 <_strtol_l.constprop.0+0xc6>
 80142a2:	1c57      	adds	r7, r2, #1
 80142a4:	d007      	beq.n	80142b6 <_strtol_l.constprop.0+0x8a>
 80142a6:	4581      	cmp	r9, r0
 80142a8:	d320      	bcc.n	80142ec <_strtol_l.constprop.0+0xc0>
 80142aa:	d101      	bne.n	80142b0 <_strtol_l.constprop.0+0x84>
 80142ac:	45a2      	cmp	sl, r4
 80142ae:	db1d      	blt.n	80142ec <_strtol_l.constprop.0+0xc0>
 80142b0:	fb00 4003 	mla	r0, r0, r3, r4
 80142b4:	2201      	movs	r2, #1
 80142b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80142ba:	e7eb      	b.n	8014294 <_strtol_l.constprop.0+0x68>
 80142bc:	2c2b      	cmp	r4, #43	@ 0x2b
 80142be:	bf04      	itt	eq
 80142c0:	782c      	ldrbeq	r4, [r5, #0]
 80142c2:	1c95      	addeq	r5, r2, #2
 80142c4:	e7cf      	b.n	8014266 <_strtol_l.constprop.0+0x3a>
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d1da      	bne.n	8014280 <_strtol_l.constprop.0+0x54>
 80142ca:	2c30      	cmp	r4, #48	@ 0x30
 80142cc:	bf0c      	ite	eq
 80142ce:	2308      	moveq	r3, #8
 80142d0:	230a      	movne	r3, #10
 80142d2:	e7d5      	b.n	8014280 <_strtol_l.constprop.0+0x54>
 80142d4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80142d8:	2f19      	cmp	r7, #25
 80142da:	d801      	bhi.n	80142e0 <_strtol_l.constprop.0+0xb4>
 80142dc:	3c37      	subs	r4, #55	@ 0x37
 80142de:	e7de      	b.n	801429e <_strtol_l.constprop.0+0x72>
 80142e0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80142e4:	2f19      	cmp	r7, #25
 80142e6:	d804      	bhi.n	80142f2 <_strtol_l.constprop.0+0xc6>
 80142e8:	3c57      	subs	r4, #87	@ 0x57
 80142ea:	e7d8      	b.n	801429e <_strtol_l.constprop.0+0x72>
 80142ec:	f04f 32ff 	mov.w	r2, #4294967295
 80142f0:	e7e1      	b.n	80142b6 <_strtol_l.constprop.0+0x8a>
 80142f2:	1c53      	adds	r3, r2, #1
 80142f4:	d108      	bne.n	8014308 <_strtol_l.constprop.0+0xdc>
 80142f6:	2322      	movs	r3, #34	@ 0x22
 80142f8:	f8ce 3000 	str.w	r3, [lr]
 80142fc:	4660      	mov	r0, ip
 80142fe:	f1b8 0f00 	cmp.w	r8, #0
 8014302:	d0a0      	beq.n	8014246 <_strtol_l.constprop.0+0x1a>
 8014304:	1e69      	subs	r1, r5, #1
 8014306:	e006      	b.n	8014316 <_strtol_l.constprop.0+0xea>
 8014308:	b106      	cbz	r6, 801430c <_strtol_l.constprop.0+0xe0>
 801430a:	4240      	negs	r0, r0
 801430c:	f1b8 0f00 	cmp.w	r8, #0
 8014310:	d099      	beq.n	8014246 <_strtol_l.constprop.0+0x1a>
 8014312:	2a00      	cmp	r2, #0
 8014314:	d1f6      	bne.n	8014304 <_strtol_l.constprop.0+0xd8>
 8014316:	f8c8 1000 	str.w	r1, [r8]
 801431a:	e794      	b.n	8014246 <_strtol_l.constprop.0+0x1a>
 801431c:	080171c1 	.word	0x080171c1

08014320 <_strtol_r>:
 8014320:	f7ff bf84 	b.w	801422c <_strtol_l.constprop.0>

08014324 <__ssputs_r>:
 8014324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014328:	688e      	ldr	r6, [r1, #8]
 801432a:	461f      	mov	r7, r3
 801432c:	42be      	cmp	r6, r7
 801432e:	680b      	ldr	r3, [r1, #0]
 8014330:	4682      	mov	sl, r0
 8014332:	460c      	mov	r4, r1
 8014334:	4690      	mov	r8, r2
 8014336:	d82d      	bhi.n	8014394 <__ssputs_r+0x70>
 8014338:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801433c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8014340:	d026      	beq.n	8014390 <__ssputs_r+0x6c>
 8014342:	6965      	ldr	r5, [r4, #20]
 8014344:	6909      	ldr	r1, [r1, #16]
 8014346:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801434a:	eba3 0901 	sub.w	r9, r3, r1
 801434e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014352:	1c7b      	adds	r3, r7, #1
 8014354:	444b      	add	r3, r9
 8014356:	106d      	asrs	r5, r5, #1
 8014358:	429d      	cmp	r5, r3
 801435a:	bf38      	it	cc
 801435c:	461d      	movcc	r5, r3
 801435e:	0553      	lsls	r3, r2, #21
 8014360:	d527      	bpl.n	80143b2 <__ssputs_r+0x8e>
 8014362:	4629      	mov	r1, r5
 8014364:	f7fe fc1c 	bl	8012ba0 <_malloc_r>
 8014368:	4606      	mov	r6, r0
 801436a:	b360      	cbz	r0, 80143c6 <__ssputs_r+0xa2>
 801436c:	6921      	ldr	r1, [r4, #16]
 801436e:	464a      	mov	r2, r9
 8014370:	f7fd fd41 	bl	8011df6 <memcpy>
 8014374:	89a3      	ldrh	r3, [r4, #12]
 8014376:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801437a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801437e:	81a3      	strh	r3, [r4, #12]
 8014380:	6126      	str	r6, [r4, #16]
 8014382:	6165      	str	r5, [r4, #20]
 8014384:	444e      	add	r6, r9
 8014386:	eba5 0509 	sub.w	r5, r5, r9
 801438a:	6026      	str	r6, [r4, #0]
 801438c:	60a5      	str	r5, [r4, #8]
 801438e:	463e      	mov	r6, r7
 8014390:	42be      	cmp	r6, r7
 8014392:	d900      	bls.n	8014396 <__ssputs_r+0x72>
 8014394:	463e      	mov	r6, r7
 8014396:	6820      	ldr	r0, [r4, #0]
 8014398:	4632      	mov	r2, r6
 801439a:	4641      	mov	r1, r8
 801439c:	f000 fd53 	bl	8014e46 <memmove>
 80143a0:	68a3      	ldr	r3, [r4, #8]
 80143a2:	1b9b      	subs	r3, r3, r6
 80143a4:	60a3      	str	r3, [r4, #8]
 80143a6:	6823      	ldr	r3, [r4, #0]
 80143a8:	4433      	add	r3, r6
 80143aa:	6023      	str	r3, [r4, #0]
 80143ac:	2000      	movs	r0, #0
 80143ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143b2:	462a      	mov	r2, r5
 80143b4:	f001 f8f9 	bl	80155aa <_realloc_r>
 80143b8:	4606      	mov	r6, r0
 80143ba:	2800      	cmp	r0, #0
 80143bc:	d1e0      	bne.n	8014380 <__ssputs_r+0x5c>
 80143be:	6921      	ldr	r1, [r4, #16]
 80143c0:	4650      	mov	r0, sl
 80143c2:	f7fe fb79 	bl	8012ab8 <_free_r>
 80143c6:	230c      	movs	r3, #12
 80143c8:	f8ca 3000 	str.w	r3, [sl]
 80143cc:	89a3      	ldrh	r3, [r4, #12]
 80143ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80143d2:	81a3      	strh	r3, [r4, #12]
 80143d4:	f04f 30ff 	mov.w	r0, #4294967295
 80143d8:	e7e9      	b.n	80143ae <__ssputs_r+0x8a>
	...

080143dc <_svfiprintf_r>:
 80143dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143e0:	4698      	mov	r8, r3
 80143e2:	898b      	ldrh	r3, [r1, #12]
 80143e4:	061b      	lsls	r3, r3, #24
 80143e6:	b09d      	sub	sp, #116	@ 0x74
 80143e8:	4607      	mov	r7, r0
 80143ea:	460d      	mov	r5, r1
 80143ec:	4614      	mov	r4, r2
 80143ee:	d510      	bpl.n	8014412 <_svfiprintf_r+0x36>
 80143f0:	690b      	ldr	r3, [r1, #16]
 80143f2:	b973      	cbnz	r3, 8014412 <_svfiprintf_r+0x36>
 80143f4:	2140      	movs	r1, #64	@ 0x40
 80143f6:	f7fe fbd3 	bl	8012ba0 <_malloc_r>
 80143fa:	6028      	str	r0, [r5, #0]
 80143fc:	6128      	str	r0, [r5, #16]
 80143fe:	b930      	cbnz	r0, 801440e <_svfiprintf_r+0x32>
 8014400:	230c      	movs	r3, #12
 8014402:	603b      	str	r3, [r7, #0]
 8014404:	f04f 30ff 	mov.w	r0, #4294967295
 8014408:	b01d      	add	sp, #116	@ 0x74
 801440a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801440e:	2340      	movs	r3, #64	@ 0x40
 8014410:	616b      	str	r3, [r5, #20]
 8014412:	2300      	movs	r3, #0
 8014414:	9309      	str	r3, [sp, #36]	@ 0x24
 8014416:	2320      	movs	r3, #32
 8014418:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801441c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014420:	2330      	movs	r3, #48	@ 0x30
 8014422:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80145c0 <_svfiprintf_r+0x1e4>
 8014426:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801442a:	f04f 0901 	mov.w	r9, #1
 801442e:	4623      	mov	r3, r4
 8014430:	469a      	mov	sl, r3
 8014432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014436:	b10a      	cbz	r2, 801443c <_svfiprintf_r+0x60>
 8014438:	2a25      	cmp	r2, #37	@ 0x25
 801443a:	d1f9      	bne.n	8014430 <_svfiprintf_r+0x54>
 801443c:	ebba 0b04 	subs.w	fp, sl, r4
 8014440:	d00b      	beq.n	801445a <_svfiprintf_r+0x7e>
 8014442:	465b      	mov	r3, fp
 8014444:	4622      	mov	r2, r4
 8014446:	4629      	mov	r1, r5
 8014448:	4638      	mov	r0, r7
 801444a:	f7ff ff6b 	bl	8014324 <__ssputs_r>
 801444e:	3001      	adds	r0, #1
 8014450:	f000 80a7 	beq.w	80145a2 <_svfiprintf_r+0x1c6>
 8014454:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014456:	445a      	add	r2, fp
 8014458:	9209      	str	r2, [sp, #36]	@ 0x24
 801445a:	f89a 3000 	ldrb.w	r3, [sl]
 801445e:	2b00      	cmp	r3, #0
 8014460:	f000 809f 	beq.w	80145a2 <_svfiprintf_r+0x1c6>
 8014464:	2300      	movs	r3, #0
 8014466:	f04f 32ff 	mov.w	r2, #4294967295
 801446a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801446e:	f10a 0a01 	add.w	sl, sl, #1
 8014472:	9304      	str	r3, [sp, #16]
 8014474:	9307      	str	r3, [sp, #28]
 8014476:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801447a:	931a      	str	r3, [sp, #104]	@ 0x68
 801447c:	4654      	mov	r4, sl
 801447e:	2205      	movs	r2, #5
 8014480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014484:	484e      	ldr	r0, [pc, #312]	@ (80145c0 <_svfiprintf_r+0x1e4>)
 8014486:	f7eb fecb 	bl	8000220 <memchr>
 801448a:	9a04      	ldr	r2, [sp, #16]
 801448c:	b9d8      	cbnz	r0, 80144c6 <_svfiprintf_r+0xea>
 801448e:	06d0      	lsls	r0, r2, #27
 8014490:	bf44      	itt	mi
 8014492:	2320      	movmi	r3, #32
 8014494:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014498:	0711      	lsls	r1, r2, #28
 801449a:	bf44      	itt	mi
 801449c:	232b      	movmi	r3, #43	@ 0x2b
 801449e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80144a2:	f89a 3000 	ldrb.w	r3, [sl]
 80144a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80144a8:	d015      	beq.n	80144d6 <_svfiprintf_r+0xfa>
 80144aa:	9a07      	ldr	r2, [sp, #28]
 80144ac:	4654      	mov	r4, sl
 80144ae:	2000      	movs	r0, #0
 80144b0:	f04f 0c0a 	mov.w	ip, #10
 80144b4:	4621      	mov	r1, r4
 80144b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80144ba:	3b30      	subs	r3, #48	@ 0x30
 80144bc:	2b09      	cmp	r3, #9
 80144be:	d94b      	bls.n	8014558 <_svfiprintf_r+0x17c>
 80144c0:	b1b0      	cbz	r0, 80144f0 <_svfiprintf_r+0x114>
 80144c2:	9207      	str	r2, [sp, #28]
 80144c4:	e014      	b.n	80144f0 <_svfiprintf_r+0x114>
 80144c6:	eba0 0308 	sub.w	r3, r0, r8
 80144ca:	fa09 f303 	lsl.w	r3, r9, r3
 80144ce:	4313      	orrs	r3, r2
 80144d0:	9304      	str	r3, [sp, #16]
 80144d2:	46a2      	mov	sl, r4
 80144d4:	e7d2      	b.n	801447c <_svfiprintf_r+0xa0>
 80144d6:	9b03      	ldr	r3, [sp, #12]
 80144d8:	1d19      	adds	r1, r3, #4
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	9103      	str	r1, [sp, #12]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	bfbb      	ittet	lt
 80144e2:	425b      	neglt	r3, r3
 80144e4:	f042 0202 	orrlt.w	r2, r2, #2
 80144e8:	9307      	strge	r3, [sp, #28]
 80144ea:	9307      	strlt	r3, [sp, #28]
 80144ec:	bfb8      	it	lt
 80144ee:	9204      	strlt	r2, [sp, #16]
 80144f0:	7823      	ldrb	r3, [r4, #0]
 80144f2:	2b2e      	cmp	r3, #46	@ 0x2e
 80144f4:	d10a      	bne.n	801450c <_svfiprintf_r+0x130>
 80144f6:	7863      	ldrb	r3, [r4, #1]
 80144f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80144fa:	d132      	bne.n	8014562 <_svfiprintf_r+0x186>
 80144fc:	9b03      	ldr	r3, [sp, #12]
 80144fe:	1d1a      	adds	r2, r3, #4
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	9203      	str	r2, [sp, #12]
 8014504:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014508:	3402      	adds	r4, #2
 801450a:	9305      	str	r3, [sp, #20]
 801450c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80145d0 <_svfiprintf_r+0x1f4>
 8014510:	7821      	ldrb	r1, [r4, #0]
 8014512:	2203      	movs	r2, #3
 8014514:	4650      	mov	r0, sl
 8014516:	f7eb fe83 	bl	8000220 <memchr>
 801451a:	b138      	cbz	r0, 801452c <_svfiprintf_r+0x150>
 801451c:	9b04      	ldr	r3, [sp, #16]
 801451e:	eba0 000a 	sub.w	r0, r0, sl
 8014522:	2240      	movs	r2, #64	@ 0x40
 8014524:	4082      	lsls	r2, r0
 8014526:	4313      	orrs	r3, r2
 8014528:	3401      	adds	r4, #1
 801452a:	9304      	str	r3, [sp, #16]
 801452c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014530:	4824      	ldr	r0, [pc, #144]	@ (80145c4 <_svfiprintf_r+0x1e8>)
 8014532:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014536:	2206      	movs	r2, #6
 8014538:	f7eb fe72 	bl	8000220 <memchr>
 801453c:	2800      	cmp	r0, #0
 801453e:	d036      	beq.n	80145ae <_svfiprintf_r+0x1d2>
 8014540:	4b21      	ldr	r3, [pc, #132]	@ (80145c8 <_svfiprintf_r+0x1ec>)
 8014542:	bb1b      	cbnz	r3, 801458c <_svfiprintf_r+0x1b0>
 8014544:	9b03      	ldr	r3, [sp, #12]
 8014546:	3307      	adds	r3, #7
 8014548:	f023 0307 	bic.w	r3, r3, #7
 801454c:	3308      	adds	r3, #8
 801454e:	9303      	str	r3, [sp, #12]
 8014550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014552:	4433      	add	r3, r6
 8014554:	9309      	str	r3, [sp, #36]	@ 0x24
 8014556:	e76a      	b.n	801442e <_svfiprintf_r+0x52>
 8014558:	fb0c 3202 	mla	r2, ip, r2, r3
 801455c:	460c      	mov	r4, r1
 801455e:	2001      	movs	r0, #1
 8014560:	e7a8      	b.n	80144b4 <_svfiprintf_r+0xd8>
 8014562:	2300      	movs	r3, #0
 8014564:	3401      	adds	r4, #1
 8014566:	9305      	str	r3, [sp, #20]
 8014568:	4619      	mov	r1, r3
 801456a:	f04f 0c0a 	mov.w	ip, #10
 801456e:	4620      	mov	r0, r4
 8014570:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014574:	3a30      	subs	r2, #48	@ 0x30
 8014576:	2a09      	cmp	r2, #9
 8014578:	d903      	bls.n	8014582 <_svfiprintf_r+0x1a6>
 801457a:	2b00      	cmp	r3, #0
 801457c:	d0c6      	beq.n	801450c <_svfiprintf_r+0x130>
 801457e:	9105      	str	r1, [sp, #20]
 8014580:	e7c4      	b.n	801450c <_svfiprintf_r+0x130>
 8014582:	fb0c 2101 	mla	r1, ip, r1, r2
 8014586:	4604      	mov	r4, r0
 8014588:	2301      	movs	r3, #1
 801458a:	e7f0      	b.n	801456e <_svfiprintf_r+0x192>
 801458c:	ab03      	add	r3, sp, #12
 801458e:	9300      	str	r3, [sp, #0]
 8014590:	462a      	mov	r2, r5
 8014592:	4b0e      	ldr	r3, [pc, #56]	@ (80145cc <_svfiprintf_r+0x1f0>)
 8014594:	a904      	add	r1, sp, #16
 8014596:	4638      	mov	r0, r7
 8014598:	f7fc fc7e 	bl	8010e98 <_printf_float>
 801459c:	1c42      	adds	r2, r0, #1
 801459e:	4606      	mov	r6, r0
 80145a0:	d1d6      	bne.n	8014550 <_svfiprintf_r+0x174>
 80145a2:	89ab      	ldrh	r3, [r5, #12]
 80145a4:	065b      	lsls	r3, r3, #25
 80145a6:	f53f af2d 	bmi.w	8014404 <_svfiprintf_r+0x28>
 80145aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80145ac:	e72c      	b.n	8014408 <_svfiprintf_r+0x2c>
 80145ae:	ab03      	add	r3, sp, #12
 80145b0:	9300      	str	r3, [sp, #0]
 80145b2:	462a      	mov	r2, r5
 80145b4:	4b05      	ldr	r3, [pc, #20]	@ (80145cc <_svfiprintf_r+0x1f0>)
 80145b6:	a904      	add	r1, sp, #16
 80145b8:	4638      	mov	r0, r7
 80145ba:	f7fc ff05 	bl	80113c8 <_printf_i>
 80145be:	e7ed      	b.n	801459c <_svfiprintf_r+0x1c0>
 80145c0:	080172c1 	.word	0x080172c1
 80145c4:	080172cb 	.word	0x080172cb
 80145c8:	08010e99 	.word	0x08010e99
 80145cc:	08014325 	.word	0x08014325
 80145d0:	080172c7 	.word	0x080172c7

080145d4 <_sungetc_r>:
 80145d4:	b538      	push	{r3, r4, r5, lr}
 80145d6:	1c4b      	adds	r3, r1, #1
 80145d8:	4614      	mov	r4, r2
 80145da:	d103      	bne.n	80145e4 <_sungetc_r+0x10>
 80145dc:	f04f 35ff 	mov.w	r5, #4294967295
 80145e0:	4628      	mov	r0, r5
 80145e2:	bd38      	pop	{r3, r4, r5, pc}
 80145e4:	8993      	ldrh	r3, [r2, #12]
 80145e6:	f023 0320 	bic.w	r3, r3, #32
 80145ea:	8193      	strh	r3, [r2, #12]
 80145ec:	6853      	ldr	r3, [r2, #4]
 80145ee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80145f0:	b2cd      	uxtb	r5, r1
 80145f2:	b18a      	cbz	r2, 8014618 <_sungetc_r+0x44>
 80145f4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80145f6:	429a      	cmp	r2, r3
 80145f8:	dd08      	ble.n	801460c <_sungetc_r+0x38>
 80145fa:	6823      	ldr	r3, [r4, #0]
 80145fc:	1e5a      	subs	r2, r3, #1
 80145fe:	6022      	str	r2, [r4, #0]
 8014600:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014604:	6863      	ldr	r3, [r4, #4]
 8014606:	3301      	adds	r3, #1
 8014608:	6063      	str	r3, [r4, #4]
 801460a:	e7e9      	b.n	80145e0 <_sungetc_r+0xc>
 801460c:	4621      	mov	r1, r4
 801460e:	f000 fbe0 	bl	8014dd2 <__submore>
 8014612:	2800      	cmp	r0, #0
 8014614:	d0f1      	beq.n	80145fa <_sungetc_r+0x26>
 8014616:	e7e1      	b.n	80145dc <_sungetc_r+0x8>
 8014618:	6921      	ldr	r1, [r4, #16]
 801461a:	6822      	ldr	r2, [r4, #0]
 801461c:	b141      	cbz	r1, 8014630 <_sungetc_r+0x5c>
 801461e:	4291      	cmp	r1, r2
 8014620:	d206      	bcs.n	8014630 <_sungetc_r+0x5c>
 8014622:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8014626:	42a9      	cmp	r1, r5
 8014628:	d102      	bne.n	8014630 <_sungetc_r+0x5c>
 801462a:	3a01      	subs	r2, #1
 801462c:	6022      	str	r2, [r4, #0]
 801462e:	e7ea      	b.n	8014606 <_sungetc_r+0x32>
 8014630:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8014634:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014638:	6363      	str	r3, [r4, #52]	@ 0x34
 801463a:	2303      	movs	r3, #3
 801463c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801463e:	4623      	mov	r3, r4
 8014640:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014644:	6023      	str	r3, [r4, #0]
 8014646:	2301      	movs	r3, #1
 8014648:	e7de      	b.n	8014608 <_sungetc_r+0x34>

0801464a <__ssrefill_r>:
 801464a:	b510      	push	{r4, lr}
 801464c:	460c      	mov	r4, r1
 801464e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014650:	b169      	cbz	r1, 801466e <__ssrefill_r+0x24>
 8014652:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014656:	4299      	cmp	r1, r3
 8014658:	d001      	beq.n	801465e <__ssrefill_r+0x14>
 801465a:	f7fe fa2d 	bl	8012ab8 <_free_r>
 801465e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014660:	6063      	str	r3, [r4, #4]
 8014662:	2000      	movs	r0, #0
 8014664:	6360      	str	r0, [r4, #52]	@ 0x34
 8014666:	b113      	cbz	r3, 801466e <__ssrefill_r+0x24>
 8014668:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801466a:	6023      	str	r3, [r4, #0]
 801466c:	bd10      	pop	{r4, pc}
 801466e:	6923      	ldr	r3, [r4, #16]
 8014670:	6023      	str	r3, [r4, #0]
 8014672:	2300      	movs	r3, #0
 8014674:	6063      	str	r3, [r4, #4]
 8014676:	89a3      	ldrh	r3, [r4, #12]
 8014678:	f043 0320 	orr.w	r3, r3, #32
 801467c:	81a3      	strh	r3, [r4, #12]
 801467e:	f04f 30ff 	mov.w	r0, #4294967295
 8014682:	e7f3      	b.n	801466c <__ssrefill_r+0x22>

08014684 <__ssvfiscanf_r>:
 8014684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014688:	460c      	mov	r4, r1
 801468a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 801468e:	2100      	movs	r1, #0
 8014690:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8014694:	49a5      	ldr	r1, [pc, #660]	@ (801492c <__ssvfiscanf_r+0x2a8>)
 8014696:	91a0      	str	r1, [sp, #640]	@ 0x280
 8014698:	f10d 0804 	add.w	r8, sp, #4
 801469c:	49a4      	ldr	r1, [pc, #656]	@ (8014930 <__ssvfiscanf_r+0x2ac>)
 801469e:	4fa5      	ldr	r7, [pc, #660]	@ (8014934 <__ssvfiscanf_r+0x2b0>)
 80146a0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80146a4:	4606      	mov	r6, r0
 80146a6:	91a1      	str	r1, [sp, #644]	@ 0x284
 80146a8:	9300      	str	r3, [sp, #0]
 80146aa:	7813      	ldrb	r3, [r2, #0]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	f000 8158 	beq.w	8014962 <__ssvfiscanf_r+0x2de>
 80146b2:	5cf9      	ldrb	r1, [r7, r3]
 80146b4:	f011 0108 	ands.w	r1, r1, #8
 80146b8:	f102 0501 	add.w	r5, r2, #1
 80146bc:	d019      	beq.n	80146f2 <__ssvfiscanf_r+0x6e>
 80146be:	6863      	ldr	r3, [r4, #4]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	dd0f      	ble.n	80146e4 <__ssvfiscanf_r+0x60>
 80146c4:	6823      	ldr	r3, [r4, #0]
 80146c6:	781a      	ldrb	r2, [r3, #0]
 80146c8:	5cba      	ldrb	r2, [r7, r2]
 80146ca:	0712      	lsls	r2, r2, #28
 80146cc:	d401      	bmi.n	80146d2 <__ssvfiscanf_r+0x4e>
 80146ce:	462a      	mov	r2, r5
 80146d0:	e7eb      	b.n	80146aa <__ssvfiscanf_r+0x26>
 80146d2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80146d4:	3201      	adds	r2, #1
 80146d6:	9245      	str	r2, [sp, #276]	@ 0x114
 80146d8:	6862      	ldr	r2, [r4, #4]
 80146da:	3301      	adds	r3, #1
 80146dc:	3a01      	subs	r2, #1
 80146de:	6062      	str	r2, [r4, #4]
 80146e0:	6023      	str	r3, [r4, #0]
 80146e2:	e7ec      	b.n	80146be <__ssvfiscanf_r+0x3a>
 80146e4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80146e6:	4621      	mov	r1, r4
 80146e8:	4630      	mov	r0, r6
 80146ea:	4798      	blx	r3
 80146ec:	2800      	cmp	r0, #0
 80146ee:	d0e9      	beq.n	80146c4 <__ssvfiscanf_r+0x40>
 80146f0:	e7ed      	b.n	80146ce <__ssvfiscanf_r+0x4a>
 80146f2:	2b25      	cmp	r3, #37	@ 0x25
 80146f4:	d012      	beq.n	801471c <__ssvfiscanf_r+0x98>
 80146f6:	4699      	mov	r9, r3
 80146f8:	6863      	ldr	r3, [r4, #4]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	f340 8093 	ble.w	8014826 <__ssvfiscanf_r+0x1a2>
 8014700:	6822      	ldr	r2, [r4, #0]
 8014702:	7813      	ldrb	r3, [r2, #0]
 8014704:	454b      	cmp	r3, r9
 8014706:	f040 812c 	bne.w	8014962 <__ssvfiscanf_r+0x2de>
 801470a:	6863      	ldr	r3, [r4, #4]
 801470c:	3b01      	subs	r3, #1
 801470e:	6063      	str	r3, [r4, #4]
 8014710:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8014712:	3201      	adds	r2, #1
 8014714:	3301      	adds	r3, #1
 8014716:	6022      	str	r2, [r4, #0]
 8014718:	9345      	str	r3, [sp, #276]	@ 0x114
 801471a:	e7d8      	b.n	80146ce <__ssvfiscanf_r+0x4a>
 801471c:	9141      	str	r1, [sp, #260]	@ 0x104
 801471e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014720:	7853      	ldrb	r3, [r2, #1]
 8014722:	2b2a      	cmp	r3, #42	@ 0x2a
 8014724:	bf02      	ittt	eq
 8014726:	2310      	moveq	r3, #16
 8014728:	1c95      	addeq	r5, r2, #2
 801472a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801472c:	220a      	movs	r2, #10
 801472e:	46a9      	mov	r9, r5
 8014730:	f819 1b01 	ldrb.w	r1, [r9], #1
 8014734:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8014738:	2b09      	cmp	r3, #9
 801473a:	d91e      	bls.n	801477a <__ssvfiscanf_r+0xf6>
 801473c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8014938 <__ssvfiscanf_r+0x2b4>
 8014740:	2203      	movs	r2, #3
 8014742:	4650      	mov	r0, sl
 8014744:	f7eb fd6c 	bl	8000220 <memchr>
 8014748:	b138      	cbz	r0, 801475a <__ssvfiscanf_r+0xd6>
 801474a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801474c:	eba0 000a 	sub.w	r0, r0, sl
 8014750:	2301      	movs	r3, #1
 8014752:	4083      	lsls	r3, r0
 8014754:	4313      	orrs	r3, r2
 8014756:	9341      	str	r3, [sp, #260]	@ 0x104
 8014758:	464d      	mov	r5, r9
 801475a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801475e:	2b78      	cmp	r3, #120	@ 0x78
 8014760:	d806      	bhi.n	8014770 <__ssvfiscanf_r+0xec>
 8014762:	2b57      	cmp	r3, #87	@ 0x57
 8014764:	d810      	bhi.n	8014788 <__ssvfiscanf_r+0x104>
 8014766:	2b25      	cmp	r3, #37	@ 0x25
 8014768:	d0c5      	beq.n	80146f6 <__ssvfiscanf_r+0x72>
 801476a:	d857      	bhi.n	801481c <__ssvfiscanf_r+0x198>
 801476c:	2b00      	cmp	r3, #0
 801476e:	d065      	beq.n	801483c <__ssvfiscanf_r+0x1b8>
 8014770:	2303      	movs	r3, #3
 8014772:	9347      	str	r3, [sp, #284]	@ 0x11c
 8014774:	230a      	movs	r3, #10
 8014776:	9342      	str	r3, [sp, #264]	@ 0x108
 8014778:	e078      	b.n	801486c <__ssvfiscanf_r+0x1e8>
 801477a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801477c:	fb02 1103 	mla	r1, r2, r3, r1
 8014780:	3930      	subs	r1, #48	@ 0x30
 8014782:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014784:	464d      	mov	r5, r9
 8014786:	e7d2      	b.n	801472e <__ssvfiscanf_r+0xaa>
 8014788:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801478c:	2a20      	cmp	r2, #32
 801478e:	d8ef      	bhi.n	8014770 <__ssvfiscanf_r+0xec>
 8014790:	a101      	add	r1, pc, #4	@ (adr r1, 8014798 <__ssvfiscanf_r+0x114>)
 8014792:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014796:	bf00      	nop
 8014798:	0801484b 	.word	0x0801484b
 801479c:	08014771 	.word	0x08014771
 80147a0:	08014771 	.word	0x08014771
 80147a4:	080148a5 	.word	0x080148a5
 80147a8:	08014771 	.word	0x08014771
 80147ac:	08014771 	.word	0x08014771
 80147b0:	08014771 	.word	0x08014771
 80147b4:	08014771 	.word	0x08014771
 80147b8:	08014771 	.word	0x08014771
 80147bc:	08014771 	.word	0x08014771
 80147c0:	08014771 	.word	0x08014771
 80147c4:	080148bb 	.word	0x080148bb
 80147c8:	080148a1 	.word	0x080148a1
 80147cc:	08014823 	.word	0x08014823
 80147d0:	08014823 	.word	0x08014823
 80147d4:	08014823 	.word	0x08014823
 80147d8:	08014771 	.word	0x08014771
 80147dc:	0801485d 	.word	0x0801485d
 80147e0:	08014771 	.word	0x08014771
 80147e4:	08014771 	.word	0x08014771
 80147e8:	08014771 	.word	0x08014771
 80147ec:	08014771 	.word	0x08014771
 80147f0:	080148cb 	.word	0x080148cb
 80147f4:	08014865 	.word	0x08014865
 80147f8:	08014843 	.word	0x08014843
 80147fc:	08014771 	.word	0x08014771
 8014800:	08014771 	.word	0x08014771
 8014804:	080148c7 	.word	0x080148c7
 8014808:	08014771 	.word	0x08014771
 801480c:	080148a1 	.word	0x080148a1
 8014810:	08014771 	.word	0x08014771
 8014814:	08014771 	.word	0x08014771
 8014818:	0801484b 	.word	0x0801484b
 801481c:	3b45      	subs	r3, #69	@ 0x45
 801481e:	2b02      	cmp	r3, #2
 8014820:	d8a6      	bhi.n	8014770 <__ssvfiscanf_r+0xec>
 8014822:	2305      	movs	r3, #5
 8014824:	e021      	b.n	801486a <__ssvfiscanf_r+0x1e6>
 8014826:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014828:	4621      	mov	r1, r4
 801482a:	4630      	mov	r0, r6
 801482c:	4798      	blx	r3
 801482e:	2800      	cmp	r0, #0
 8014830:	f43f af66 	beq.w	8014700 <__ssvfiscanf_r+0x7c>
 8014834:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014836:	2800      	cmp	r0, #0
 8014838:	f040 808b 	bne.w	8014952 <__ssvfiscanf_r+0x2ce>
 801483c:	f04f 30ff 	mov.w	r0, #4294967295
 8014840:	e08b      	b.n	801495a <__ssvfiscanf_r+0x2d6>
 8014842:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014844:	f042 0220 	orr.w	r2, r2, #32
 8014848:	9241      	str	r2, [sp, #260]	@ 0x104
 801484a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801484c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014850:	9241      	str	r2, [sp, #260]	@ 0x104
 8014852:	2210      	movs	r2, #16
 8014854:	2b6e      	cmp	r3, #110	@ 0x6e
 8014856:	9242      	str	r2, [sp, #264]	@ 0x108
 8014858:	d902      	bls.n	8014860 <__ssvfiscanf_r+0x1dc>
 801485a:	e005      	b.n	8014868 <__ssvfiscanf_r+0x1e4>
 801485c:	2300      	movs	r3, #0
 801485e:	9342      	str	r3, [sp, #264]	@ 0x108
 8014860:	2303      	movs	r3, #3
 8014862:	e002      	b.n	801486a <__ssvfiscanf_r+0x1e6>
 8014864:	2308      	movs	r3, #8
 8014866:	9342      	str	r3, [sp, #264]	@ 0x108
 8014868:	2304      	movs	r3, #4
 801486a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801486c:	6863      	ldr	r3, [r4, #4]
 801486e:	2b00      	cmp	r3, #0
 8014870:	dd39      	ble.n	80148e6 <__ssvfiscanf_r+0x262>
 8014872:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014874:	0659      	lsls	r1, r3, #25
 8014876:	d404      	bmi.n	8014882 <__ssvfiscanf_r+0x1fe>
 8014878:	6823      	ldr	r3, [r4, #0]
 801487a:	781a      	ldrb	r2, [r3, #0]
 801487c:	5cba      	ldrb	r2, [r7, r2]
 801487e:	0712      	lsls	r2, r2, #28
 8014880:	d438      	bmi.n	80148f4 <__ssvfiscanf_r+0x270>
 8014882:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8014884:	2b02      	cmp	r3, #2
 8014886:	dc47      	bgt.n	8014918 <__ssvfiscanf_r+0x294>
 8014888:	466b      	mov	r3, sp
 801488a:	4622      	mov	r2, r4
 801488c:	a941      	add	r1, sp, #260	@ 0x104
 801488e:	4630      	mov	r0, r6
 8014890:	f000 f86c 	bl	801496c <_scanf_chars>
 8014894:	2801      	cmp	r0, #1
 8014896:	d064      	beq.n	8014962 <__ssvfiscanf_r+0x2de>
 8014898:	2802      	cmp	r0, #2
 801489a:	f47f af18 	bne.w	80146ce <__ssvfiscanf_r+0x4a>
 801489e:	e7c9      	b.n	8014834 <__ssvfiscanf_r+0x1b0>
 80148a0:	220a      	movs	r2, #10
 80148a2:	e7d7      	b.n	8014854 <__ssvfiscanf_r+0x1d0>
 80148a4:	4629      	mov	r1, r5
 80148a6:	4640      	mov	r0, r8
 80148a8:	f000 fa5a 	bl	8014d60 <__sccl>
 80148ac:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80148ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80148b2:	9341      	str	r3, [sp, #260]	@ 0x104
 80148b4:	4605      	mov	r5, r0
 80148b6:	2301      	movs	r3, #1
 80148b8:	e7d7      	b.n	801486a <__ssvfiscanf_r+0x1e6>
 80148ba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80148bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80148c0:	9341      	str	r3, [sp, #260]	@ 0x104
 80148c2:	2300      	movs	r3, #0
 80148c4:	e7d1      	b.n	801486a <__ssvfiscanf_r+0x1e6>
 80148c6:	2302      	movs	r3, #2
 80148c8:	e7cf      	b.n	801486a <__ssvfiscanf_r+0x1e6>
 80148ca:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80148cc:	06c3      	lsls	r3, r0, #27
 80148ce:	f53f aefe 	bmi.w	80146ce <__ssvfiscanf_r+0x4a>
 80148d2:	9b00      	ldr	r3, [sp, #0]
 80148d4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80148d6:	1d19      	adds	r1, r3, #4
 80148d8:	9100      	str	r1, [sp, #0]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	07c0      	lsls	r0, r0, #31
 80148de:	bf4c      	ite	mi
 80148e0:	801a      	strhmi	r2, [r3, #0]
 80148e2:	601a      	strpl	r2, [r3, #0]
 80148e4:	e6f3      	b.n	80146ce <__ssvfiscanf_r+0x4a>
 80148e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80148e8:	4621      	mov	r1, r4
 80148ea:	4630      	mov	r0, r6
 80148ec:	4798      	blx	r3
 80148ee:	2800      	cmp	r0, #0
 80148f0:	d0bf      	beq.n	8014872 <__ssvfiscanf_r+0x1ee>
 80148f2:	e79f      	b.n	8014834 <__ssvfiscanf_r+0x1b0>
 80148f4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80148f6:	3201      	adds	r2, #1
 80148f8:	9245      	str	r2, [sp, #276]	@ 0x114
 80148fa:	6862      	ldr	r2, [r4, #4]
 80148fc:	3a01      	subs	r2, #1
 80148fe:	2a00      	cmp	r2, #0
 8014900:	6062      	str	r2, [r4, #4]
 8014902:	dd02      	ble.n	801490a <__ssvfiscanf_r+0x286>
 8014904:	3301      	adds	r3, #1
 8014906:	6023      	str	r3, [r4, #0]
 8014908:	e7b6      	b.n	8014878 <__ssvfiscanf_r+0x1f4>
 801490a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801490c:	4621      	mov	r1, r4
 801490e:	4630      	mov	r0, r6
 8014910:	4798      	blx	r3
 8014912:	2800      	cmp	r0, #0
 8014914:	d0b0      	beq.n	8014878 <__ssvfiscanf_r+0x1f4>
 8014916:	e78d      	b.n	8014834 <__ssvfiscanf_r+0x1b0>
 8014918:	2b04      	cmp	r3, #4
 801491a:	dc0f      	bgt.n	801493c <__ssvfiscanf_r+0x2b8>
 801491c:	466b      	mov	r3, sp
 801491e:	4622      	mov	r2, r4
 8014920:	a941      	add	r1, sp, #260	@ 0x104
 8014922:	4630      	mov	r0, r6
 8014924:	f000 f87c 	bl	8014a20 <_scanf_i>
 8014928:	e7b4      	b.n	8014894 <__ssvfiscanf_r+0x210>
 801492a:	bf00      	nop
 801492c:	080145d5 	.word	0x080145d5
 8014930:	0801464b 	.word	0x0801464b
 8014934:	080171c1 	.word	0x080171c1
 8014938:	080172c7 	.word	0x080172c7
 801493c:	4b0a      	ldr	r3, [pc, #40]	@ (8014968 <__ssvfiscanf_r+0x2e4>)
 801493e:	2b00      	cmp	r3, #0
 8014940:	f43f aec5 	beq.w	80146ce <__ssvfiscanf_r+0x4a>
 8014944:	466b      	mov	r3, sp
 8014946:	4622      	mov	r2, r4
 8014948:	a941      	add	r1, sp, #260	@ 0x104
 801494a:	4630      	mov	r0, r6
 801494c:	f7fc fe5c 	bl	8011608 <_scanf_float>
 8014950:	e7a0      	b.n	8014894 <__ssvfiscanf_r+0x210>
 8014952:	89a3      	ldrh	r3, [r4, #12]
 8014954:	065b      	lsls	r3, r3, #25
 8014956:	f53f af71 	bmi.w	801483c <__ssvfiscanf_r+0x1b8>
 801495a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 801495e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014962:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014964:	e7f9      	b.n	801495a <__ssvfiscanf_r+0x2d6>
 8014966:	bf00      	nop
 8014968:	08011609 	.word	0x08011609

0801496c <_scanf_chars>:
 801496c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014970:	4615      	mov	r5, r2
 8014972:	688a      	ldr	r2, [r1, #8]
 8014974:	4680      	mov	r8, r0
 8014976:	460c      	mov	r4, r1
 8014978:	b932      	cbnz	r2, 8014988 <_scanf_chars+0x1c>
 801497a:	698a      	ldr	r2, [r1, #24]
 801497c:	2a00      	cmp	r2, #0
 801497e:	bf14      	ite	ne
 8014980:	f04f 32ff 	movne.w	r2, #4294967295
 8014984:	2201      	moveq	r2, #1
 8014986:	608a      	str	r2, [r1, #8]
 8014988:	6822      	ldr	r2, [r4, #0]
 801498a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8014a1c <_scanf_chars+0xb0>
 801498e:	06d1      	lsls	r1, r2, #27
 8014990:	bf5f      	itttt	pl
 8014992:	681a      	ldrpl	r2, [r3, #0]
 8014994:	1d11      	addpl	r1, r2, #4
 8014996:	6019      	strpl	r1, [r3, #0]
 8014998:	6816      	ldrpl	r6, [r2, #0]
 801499a:	2700      	movs	r7, #0
 801499c:	69a0      	ldr	r0, [r4, #24]
 801499e:	b188      	cbz	r0, 80149c4 <_scanf_chars+0x58>
 80149a0:	2801      	cmp	r0, #1
 80149a2:	d107      	bne.n	80149b4 <_scanf_chars+0x48>
 80149a4:	682b      	ldr	r3, [r5, #0]
 80149a6:	781a      	ldrb	r2, [r3, #0]
 80149a8:	6963      	ldr	r3, [r4, #20]
 80149aa:	5c9b      	ldrb	r3, [r3, r2]
 80149ac:	b953      	cbnz	r3, 80149c4 <_scanf_chars+0x58>
 80149ae:	2f00      	cmp	r7, #0
 80149b0:	d031      	beq.n	8014a16 <_scanf_chars+0xaa>
 80149b2:	e022      	b.n	80149fa <_scanf_chars+0x8e>
 80149b4:	2802      	cmp	r0, #2
 80149b6:	d120      	bne.n	80149fa <_scanf_chars+0x8e>
 80149b8:	682b      	ldr	r3, [r5, #0]
 80149ba:	781b      	ldrb	r3, [r3, #0]
 80149bc:	f819 3003 	ldrb.w	r3, [r9, r3]
 80149c0:	071b      	lsls	r3, r3, #28
 80149c2:	d41a      	bmi.n	80149fa <_scanf_chars+0x8e>
 80149c4:	6823      	ldr	r3, [r4, #0]
 80149c6:	06da      	lsls	r2, r3, #27
 80149c8:	bf5e      	ittt	pl
 80149ca:	682b      	ldrpl	r3, [r5, #0]
 80149cc:	781b      	ldrbpl	r3, [r3, #0]
 80149ce:	f806 3b01 	strbpl.w	r3, [r6], #1
 80149d2:	682a      	ldr	r2, [r5, #0]
 80149d4:	686b      	ldr	r3, [r5, #4]
 80149d6:	3201      	adds	r2, #1
 80149d8:	602a      	str	r2, [r5, #0]
 80149da:	68a2      	ldr	r2, [r4, #8]
 80149dc:	3b01      	subs	r3, #1
 80149de:	3a01      	subs	r2, #1
 80149e0:	606b      	str	r3, [r5, #4]
 80149e2:	3701      	adds	r7, #1
 80149e4:	60a2      	str	r2, [r4, #8]
 80149e6:	b142      	cbz	r2, 80149fa <_scanf_chars+0x8e>
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	dcd7      	bgt.n	801499c <_scanf_chars+0x30>
 80149ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80149f0:	4629      	mov	r1, r5
 80149f2:	4640      	mov	r0, r8
 80149f4:	4798      	blx	r3
 80149f6:	2800      	cmp	r0, #0
 80149f8:	d0d0      	beq.n	801499c <_scanf_chars+0x30>
 80149fa:	6823      	ldr	r3, [r4, #0]
 80149fc:	f013 0310 	ands.w	r3, r3, #16
 8014a00:	d105      	bne.n	8014a0e <_scanf_chars+0xa2>
 8014a02:	68e2      	ldr	r2, [r4, #12]
 8014a04:	3201      	adds	r2, #1
 8014a06:	60e2      	str	r2, [r4, #12]
 8014a08:	69a2      	ldr	r2, [r4, #24]
 8014a0a:	b102      	cbz	r2, 8014a0e <_scanf_chars+0xa2>
 8014a0c:	7033      	strb	r3, [r6, #0]
 8014a0e:	6923      	ldr	r3, [r4, #16]
 8014a10:	443b      	add	r3, r7
 8014a12:	6123      	str	r3, [r4, #16]
 8014a14:	2000      	movs	r0, #0
 8014a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a1a:	bf00      	nop
 8014a1c:	080171c1 	.word	0x080171c1

08014a20 <_scanf_i>:
 8014a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a24:	4698      	mov	r8, r3
 8014a26:	4b74      	ldr	r3, [pc, #464]	@ (8014bf8 <_scanf_i+0x1d8>)
 8014a28:	460c      	mov	r4, r1
 8014a2a:	4682      	mov	sl, r0
 8014a2c:	4616      	mov	r6, r2
 8014a2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014a32:	b087      	sub	sp, #28
 8014a34:	ab03      	add	r3, sp, #12
 8014a36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014a3a:	4b70      	ldr	r3, [pc, #448]	@ (8014bfc <_scanf_i+0x1dc>)
 8014a3c:	69a1      	ldr	r1, [r4, #24]
 8014a3e:	4a70      	ldr	r2, [pc, #448]	@ (8014c00 <_scanf_i+0x1e0>)
 8014a40:	2903      	cmp	r1, #3
 8014a42:	bf08      	it	eq
 8014a44:	461a      	moveq	r2, r3
 8014a46:	68a3      	ldr	r3, [r4, #8]
 8014a48:	9201      	str	r2, [sp, #4]
 8014a4a:	1e5a      	subs	r2, r3, #1
 8014a4c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014a50:	bf88      	it	hi
 8014a52:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014a56:	4627      	mov	r7, r4
 8014a58:	bf82      	ittt	hi
 8014a5a:	eb03 0905 	addhi.w	r9, r3, r5
 8014a5e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014a62:	60a3      	strhi	r3, [r4, #8]
 8014a64:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014a68:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8014a6c:	bf98      	it	ls
 8014a6e:	f04f 0900 	movls.w	r9, #0
 8014a72:	6023      	str	r3, [r4, #0]
 8014a74:	463d      	mov	r5, r7
 8014a76:	f04f 0b00 	mov.w	fp, #0
 8014a7a:	6831      	ldr	r1, [r6, #0]
 8014a7c:	ab03      	add	r3, sp, #12
 8014a7e:	7809      	ldrb	r1, [r1, #0]
 8014a80:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014a84:	2202      	movs	r2, #2
 8014a86:	f7eb fbcb 	bl	8000220 <memchr>
 8014a8a:	b328      	cbz	r0, 8014ad8 <_scanf_i+0xb8>
 8014a8c:	f1bb 0f01 	cmp.w	fp, #1
 8014a90:	d159      	bne.n	8014b46 <_scanf_i+0x126>
 8014a92:	6862      	ldr	r2, [r4, #4]
 8014a94:	b92a      	cbnz	r2, 8014aa2 <_scanf_i+0x82>
 8014a96:	6822      	ldr	r2, [r4, #0]
 8014a98:	2108      	movs	r1, #8
 8014a9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014a9e:	6061      	str	r1, [r4, #4]
 8014aa0:	6022      	str	r2, [r4, #0]
 8014aa2:	6822      	ldr	r2, [r4, #0]
 8014aa4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8014aa8:	6022      	str	r2, [r4, #0]
 8014aaa:	68a2      	ldr	r2, [r4, #8]
 8014aac:	1e51      	subs	r1, r2, #1
 8014aae:	60a1      	str	r1, [r4, #8]
 8014ab0:	b192      	cbz	r2, 8014ad8 <_scanf_i+0xb8>
 8014ab2:	6832      	ldr	r2, [r6, #0]
 8014ab4:	1c51      	adds	r1, r2, #1
 8014ab6:	6031      	str	r1, [r6, #0]
 8014ab8:	7812      	ldrb	r2, [r2, #0]
 8014aba:	f805 2b01 	strb.w	r2, [r5], #1
 8014abe:	6872      	ldr	r2, [r6, #4]
 8014ac0:	3a01      	subs	r2, #1
 8014ac2:	2a00      	cmp	r2, #0
 8014ac4:	6072      	str	r2, [r6, #4]
 8014ac6:	dc07      	bgt.n	8014ad8 <_scanf_i+0xb8>
 8014ac8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8014acc:	4631      	mov	r1, r6
 8014ace:	4650      	mov	r0, sl
 8014ad0:	4790      	blx	r2
 8014ad2:	2800      	cmp	r0, #0
 8014ad4:	f040 8085 	bne.w	8014be2 <_scanf_i+0x1c2>
 8014ad8:	f10b 0b01 	add.w	fp, fp, #1
 8014adc:	f1bb 0f03 	cmp.w	fp, #3
 8014ae0:	d1cb      	bne.n	8014a7a <_scanf_i+0x5a>
 8014ae2:	6863      	ldr	r3, [r4, #4]
 8014ae4:	b90b      	cbnz	r3, 8014aea <_scanf_i+0xca>
 8014ae6:	230a      	movs	r3, #10
 8014ae8:	6063      	str	r3, [r4, #4]
 8014aea:	6863      	ldr	r3, [r4, #4]
 8014aec:	4945      	ldr	r1, [pc, #276]	@ (8014c04 <_scanf_i+0x1e4>)
 8014aee:	6960      	ldr	r0, [r4, #20]
 8014af0:	1ac9      	subs	r1, r1, r3
 8014af2:	f000 f935 	bl	8014d60 <__sccl>
 8014af6:	f04f 0b00 	mov.w	fp, #0
 8014afa:	68a3      	ldr	r3, [r4, #8]
 8014afc:	6822      	ldr	r2, [r4, #0]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d03d      	beq.n	8014b7e <_scanf_i+0x15e>
 8014b02:	6831      	ldr	r1, [r6, #0]
 8014b04:	6960      	ldr	r0, [r4, #20]
 8014b06:	f891 c000 	ldrb.w	ip, [r1]
 8014b0a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014b0e:	2800      	cmp	r0, #0
 8014b10:	d035      	beq.n	8014b7e <_scanf_i+0x15e>
 8014b12:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8014b16:	d124      	bne.n	8014b62 <_scanf_i+0x142>
 8014b18:	0510      	lsls	r0, r2, #20
 8014b1a:	d522      	bpl.n	8014b62 <_scanf_i+0x142>
 8014b1c:	f10b 0b01 	add.w	fp, fp, #1
 8014b20:	f1b9 0f00 	cmp.w	r9, #0
 8014b24:	d003      	beq.n	8014b2e <_scanf_i+0x10e>
 8014b26:	3301      	adds	r3, #1
 8014b28:	f109 39ff 	add.w	r9, r9, #4294967295
 8014b2c:	60a3      	str	r3, [r4, #8]
 8014b2e:	6873      	ldr	r3, [r6, #4]
 8014b30:	3b01      	subs	r3, #1
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	6073      	str	r3, [r6, #4]
 8014b36:	dd1b      	ble.n	8014b70 <_scanf_i+0x150>
 8014b38:	6833      	ldr	r3, [r6, #0]
 8014b3a:	3301      	adds	r3, #1
 8014b3c:	6033      	str	r3, [r6, #0]
 8014b3e:	68a3      	ldr	r3, [r4, #8]
 8014b40:	3b01      	subs	r3, #1
 8014b42:	60a3      	str	r3, [r4, #8]
 8014b44:	e7d9      	b.n	8014afa <_scanf_i+0xda>
 8014b46:	f1bb 0f02 	cmp.w	fp, #2
 8014b4a:	d1ae      	bne.n	8014aaa <_scanf_i+0x8a>
 8014b4c:	6822      	ldr	r2, [r4, #0]
 8014b4e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8014b52:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8014b56:	d1bf      	bne.n	8014ad8 <_scanf_i+0xb8>
 8014b58:	2110      	movs	r1, #16
 8014b5a:	6061      	str	r1, [r4, #4]
 8014b5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014b60:	e7a2      	b.n	8014aa8 <_scanf_i+0x88>
 8014b62:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8014b66:	6022      	str	r2, [r4, #0]
 8014b68:	780b      	ldrb	r3, [r1, #0]
 8014b6a:	f805 3b01 	strb.w	r3, [r5], #1
 8014b6e:	e7de      	b.n	8014b2e <_scanf_i+0x10e>
 8014b70:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014b74:	4631      	mov	r1, r6
 8014b76:	4650      	mov	r0, sl
 8014b78:	4798      	blx	r3
 8014b7a:	2800      	cmp	r0, #0
 8014b7c:	d0df      	beq.n	8014b3e <_scanf_i+0x11e>
 8014b7e:	6823      	ldr	r3, [r4, #0]
 8014b80:	05d9      	lsls	r1, r3, #23
 8014b82:	d50d      	bpl.n	8014ba0 <_scanf_i+0x180>
 8014b84:	42bd      	cmp	r5, r7
 8014b86:	d909      	bls.n	8014b9c <_scanf_i+0x17c>
 8014b88:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014b8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014b90:	4632      	mov	r2, r6
 8014b92:	4650      	mov	r0, sl
 8014b94:	4798      	blx	r3
 8014b96:	f105 39ff 	add.w	r9, r5, #4294967295
 8014b9a:	464d      	mov	r5, r9
 8014b9c:	42bd      	cmp	r5, r7
 8014b9e:	d028      	beq.n	8014bf2 <_scanf_i+0x1d2>
 8014ba0:	6822      	ldr	r2, [r4, #0]
 8014ba2:	f012 0210 	ands.w	r2, r2, #16
 8014ba6:	d113      	bne.n	8014bd0 <_scanf_i+0x1b0>
 8014ba8:	702a      	strb	r2, [r5, #0]
 8014baa:	6863      	ldr	r3, [r4, #4]
 8014bac:	9e01      	ldr	r6, [sp, #4]
 8014bae:	4639      	mov	r1, r7
 8014bb0:	4650      	mov	r0, sl
 8014bb2:	47b0      	blx	r6
 8014bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8014bb8:	6821      	ldr	r1, [r4, #0]
 8014bba:	1d1a      	adds	r2, r3, #4
 8014bbc:	f8c8 2000 	str.w	r2, [r8]
 8014bc0:	f011 0f20 	tst.w	r1, #32
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	d00f      	beq.n	8014be8 <_scanf_i+0x1c8>
 8014bc8:	6018      	str	r0, [r3, #0]
 8014bca:	68e3      	ldr	r3, [r4, #12]
 8014bcc:	3301      	adds	r3, #1
 8014bce:	60e3      	str	r3, [r4, #12]
 8014bd0:	6923      	ldr	r3, [r4, #16]
 8014bd2:	1bed      	subs	r5, r5, r7
 8014bd4:	445d      	add	r5, fp
 8014bd6:	442b      	add	r3, r5
 8014bd8:	6123      	str	r3, [r4, #16]
 8014bda:	2000      	movs	r0, #0
 8014bdc:	b007      	add	sp, #28
 8014bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014be2:	f04f 0b00 	mov.w	fp, #0
 8014be6:	e7ca      	b.n	8014b7e <_scanf_i+0x15e>
 8014be8:	07ca      	lsls	r2, r1, #31
 8014bea:	bf4c      	ite	mi
 8014bec:	8018      	strhmi	r0, [r3, #0]
 8014bee:	6018      	strpl	r0, [r3, #0]
 8014bf0:	e7eb      	b.n	8014bca <_scanf_i+0x1aa>
 8014bf2:	2001      	movs	r0, #1
 8014bf4:	e7f2      	b.n	8014bdc <_scanf_i+0x1bc>
 8014bf6:	bf00      	nop
 8014bf8:	08016efc 	.word	0x08016efc
 8014bfc:	08014321 	.word	0x08014321
 8014c00:	080156e5 	.word	0x080156e5
 8014c04:	080172e2 	.word	0x080172e2

08014c08 <__sflush_r>:
 8014c08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c10:	0716      	lsls	r6, r2, #28
 8014c12:	4605      	mov	r5, r0
 8014c14:	460c      	mov	r4, r1
 8014c16:	d454      	bmi.n	8014cc2 <__sflush_r+0xba>
 8014c18:	684b      	ldr	r3, [r1, #4]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	dc02      	bgt.n	8014c24 <__sflush_r+0x1c>
 8014c1e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	dd48      	ble.n	8014cb6 <__sflush_r+0xae>
 8014c24:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014c26:	2e00      	cmp	r6, #0
 8014c28:	d045      	beq.n	8014cb6 <__sflush_r+0xae>
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014c30:	682f      	ldr	r7, [r5, #0]
 8014c32:	6a21      	ldr	r1, [r4, #32]
 8014c34:	602b      	str	r3, [r5, #0]
 8014c36:	d030      	beq.n	8014c9a <__sflush_r+0x92>
 8014c38:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014c3a:	89a3      	ldrh	r3, [r4, #12]
 8014c3c:	0759      	lsls	r1, r3, #29
 8014c3e:	d505      	bpl.n	8014c4c <__sflush_r+0x44>
 8014c40:	6863      	ldr	r3, [r4, #4]
 8014c42:	1ad2      	subs	r2, r2, r3
 8014c44:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014c46:	b10b      	cbz	r3, 8014c4c <__sflush_r+0x44>
 8014c48:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014c4a:	1ad2      	subs	r2, r2, r3
 8014c4c:	2300      	movs	r3, #0
 8014c4e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014c50:	6a21      	ldr	r1, [r4, #32]
 8014c52:	4628      	mov	r0, r5
 8014c54:	47b0      	blx	r6
 8014c56:	1c43      	adds	r3, r0, #1
 8014c58:	89a3      	ldrh	r3, [r4, #12]
 8014c5a:	d106      	bne.n	8014c6a <__sflush_r+0x62>
 8014c5c:	6829      	ldr	r1, [r5, #0]
 8014c5e:	291d      	cmp	r1, #29
 8014c60:	d82b      	bhi.n	8014cba <__sflush_r+0xb2>
 8014c62:	4a2a      	ldr	r2, [pc, #168]	@ (8014d0c <__sflush_r+0x104>)
 8014c64:	410a      	asrs	r2, r1
 8014c66:	07d6      	lsls	r6, r2, #31
 8014c68:	d427      	bmi.n	8014cba <__sflush_r+0xb2>
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	6062      	str	r2, [r4, #4]
 8014c6e:	04d9      	lsls	r1, r3, #19
 8014c70:	6922      	ldr	r2, [r4, #16]
 8014c72:	6022      	str	r2, [r4, #0]
 8014c74:	d504      	bpl.n	8014c80 <__sflush_r+0x78>
 8014c76:	1c42      	adds	r2, r0, #1
 8014c78:	d101      	bne.n	8014c7e <__sflush_r+0x76>
 8014c7a:	682b      	ldr	r3, [r5, #0]
 8014c7c:	b903      	cbnz	r3, 8014c80 <__sflush_r+0x78>
 8014c7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014c80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014c82:	602f      	str	r7, [r5, #0]
 8014c84:	b1b9      	cbz	r1, 8014cb6 <__sflush_r+0xae>
 8014c86:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014c8a:	4299      	cmp	r1, r3
 8014c8c:	d002      	beq.n	8014c94 <__sflush_r+0x8c>
 8014c8e:	4628      	mov	r0, r5
 8014c90:	f7fd ff12 	bl	8012ab8 <_free_r>
 8014c94:	2300      	movs	r3, #0
 8014c96:	6363      	str	r3, [r4, #52]	@ 0x34
 8014c98:	e00d      	b.n	8014cb6 <__sflush_r+0xae>
 8014c9a:	2301      	movs	r3, #1
 8014c9c:	4628      	mov	r0, r5
 8014c9e:	47b0      	blx	r6
 8014ca0:	4602      	mov	r2, r0
 8014ca2:	1c50      	adds	r0, r2, #1
 8014ca4:	d1c9      	bne.n	8014c3a <__sflush_r+0x32>
 8014ca6:	682b      	ldr	r3, [r5, #0]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d0c6      	beq.n	8014c3a <__sflush_r+0x32>
 8014cac:	2b1d      	cmp	r3, #29
 8014cae:	d001      	beq.n	8014cb4 <__sflush_r+0xac>
 8014cb0:	2b16      	cmp	r3, #22
 8014cb2:	d11e      	bne.n	8014cf2 <__sflush_r+0xea>
 8014cb4:	602f      	str	r7, [r5, #0]
 8014cb6:	2000      	movs	r0, #0
 8014cb8:	e022      	b.n	8014d00 <__sflush_r+0xf8>
 8014cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014cbe:	b21b      	sxth	r3, r3
 8014cc0:	e01b      	b.n	8014cfa <__sflush_r+0xf2>
 8014cc2:	690f      	ldr	r7, [r1, #16]
 8014cc4:	2f00      	cmp	r7, #0
 8014cc6:	d0f6      	beq.n	8014cb6 <__sflush_r+0xae>
 8014cc8:	0793      	lsls	r3, r2, #30
 8014cca:	680e      	ldr	r6, [r1, #0]
 8014ccc:	bf08      	it	eq
 8014cce:	694b      	ldreq	r3, [r1, #20]
 8014cd0:	600f      	str	r7, [r1, #0]
 8014cd2:	bf18      	it	ne
 8014cd4:	2300      	movne	r3, #0
 8014cd6:	eba6 0807 	sub.w	r8, r6, r7
 8014cda:	608b      	str	r3, [r1, #8]
 8014cdc:	f1b8 0f00 	cmp.w	r8, #0
 8014ce0:	dde9      	ble.n	8014cb6 <__sflush_r+0xae>
 8014ce2:	6a21      	ldr	r1, [r4, #32]
 8014ce4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014ce6:	4643      	mov	r3, r8
 8014ce8:	463a      	mov	r2, r7
 8014cea:	4628      	mov	r0, r5
 8014cec:	47b0      	blx	r6
 8014cee:	2800      	cmp	r0, #0
 8014cf0:	dc08      	bgt.n	8014d04 <__sflush_r+0xfc>
 8014cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014cf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014cfa:	81a3      	strh	r3, [r4, #12]
 8014cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8014d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d04:	4407      	add	r7, r0
 8014d06:	eba8 0800 	sub.w	r8, r8, r0
 8014d0a:	e7e7      	b.n	8014cdc <__sflush_r+0xd4>
 8014d0c:	dfbffffe 	.word	0xdfbffffe

08014d10 <_fflush_r>:
 8014d10:	b538      	push	{r3, r4, r5, lr}
 8014d12:	690b      	ldr	r3, [r1, #16]
 8014d14:	4605      	mov	r5, r0
 8014d16:	460c      	mov	r4, r1
 8014d18:	b913      	cbnz	r3, 8014d20 <_fflush_r+0x10>
 8014d1a:	2500      	movs	r5, #0
 8014d1c:	4628      	mov	r0, r5
 8014d1e:	bd38      	pop	{r3, r4, r5, pc}
 8014d20:	b118      	cbz	r0, 8014d2a <_fflush_r+0x1a>
 8014d22:	6a03      	ldr	r3, [r0, #32]
 8014d24:	b90b      	cbnz	r3, 8014d2a <_fflush_r+0x1a>
 8014d26:	f7fc ff0f 	bl	8011b48 <__sinit>
 8014d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d0f3      	beq.n	8014d1a <_fflush_r+0xa>
 8014d32:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014d34:	07d0      	lsls	r0, r2, #31
 8014d36:	d404      	bmi.n	8014d42 <_fflush_r+0x32>
 8014d38:	0599      	lsls	r1, r3, #22
 8014d3a:	d402      	bmi.n	8014d42 <_fflush_r+0x32>
 8014d3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014d3e:	f7fd f858 	bl	8011df2 <__retarget_lock_acquire_recursive>
 8014d42:	4628      	mov	r0, r5
 8014d44:	4621      	mov	r1, r4
 8014d46:	f7ff ff5f 	bl	8014c08 <__sflush_r>
 8014d4a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014d4c:	07da      	lsls	r2, r3, #31
 8014d4e:	4605      	mov	r5, r0
 8014d50:	d4e4      	bmi.n	8014d1c <_fflush_r+0xc>
 8014d52:	89a3      	ldrh	r3, [r4, #12]
 8014d54:	059b      	lsls	r3, r3, #22
 8014d56:	d4e1      	bmi.n	8014d1c <_fflush_r+0xc>
 8014d58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014d5a:	f7fd f84b 	bl	8011df4 <__retarget_lock_release_recursive>
 8014d5e:	e7dd      	b.n	8014d1c <_fflush_r+0xc>

08014d60 <__sccl>:
 8014d60:	b570      	push	{r4, r5, r6, lr}
 8014d62:	780b      	ldrb	r3, [r1, #0]
 8014d64:	4604      	mov	r4, r0
 8014d66:	2b5e      	cmp	r3, #94	@ 0x5e
 8014d68:	bf0b      	itete	eq
 8014d6a:	784b      	ldrbeq	r3, [r1, #1]
 8014d6c:	1c4a      	addne	r2, r1, #1
 8014d6e:	1c8a      	addeq	r2, r1, #2
 8014d70:	2100      	movne	r1, #0
 8014d72:	bf08      	it	eq
 8014d74:	2101      	moveq	r1, #1
 8014d76:	3801      	subs	r0, #1
 8014d78:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8014d7c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014d80:	42a8      	cmp	r0, r5
 8014d82:	d1fb      	bne.n	8014d7c <__sccl+0x1c>
 8014d84:	b90b      	cbnz	r3, 8014d8a <__sccl+0x2a>
 8014d86:	1e50      	subs	r0, r2, #1
 8014d88:	bd70      	pop	{r4, r5, r6, pc}
 8014d8a:	f081 0101 	eor.w	r1, r1, #1
 8014d8e:	54e1      	strb	r1, [r4, r3]
 8014d90:	4610      	mov	r0, r2
 8014d92:	4602      	mov	r2, r0
 8014d94:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014d98:	2d2d      	cmp	r5, #45	@ 0x2d
 8014d9a:	d005      	beq.n	8014da8 <__sccl+0x48>
 8014d9c:	2d5d      	cmp	r5, #93	@ 0x5d
 8014d9e:	d016      	beq.n	8014dce <__sccl+0x6e>
 8014da0:	2d00      	cmp	r5, #0
 8014da2:	d0f1      	beq.n	8014d88 <__sccl+0x28>
 8014da4:	462b      	mov	r3, r5
 8014da6:	e7f2      	b.n	8014d8e <__sccl+0x2e>
 8014da8:	7846      	ldrb	r6, [r0, #1]
 8014daa:	2e5d      	cmp	r6, #93	@ 0x5d
 8014dac:	d0fa      	beq.n	8014da4 <__sccl+0x44>
 8014dae:	42b3      	cmp	r3, r6
 8014db0:	dcf8      	bgt.n	8014da4 <__sccl+0x44>
 8014db2:	3002      	adds	r0, #2
 8014db4:	461a      	mov	r2, r3
 8014db6:	3201      	adds	r2, #1
 8014db8:	4296      	cmp	r6, r2
 8014dba:	54a1      	strb	r1, [r4, r2]
 8014dbc:	dcfb      	bgt.n	8014db6 <__sccl+0x56>
 8014dbe:	1af2      	subs	r2, r6, r3
 8014dc0:	3a01      	subs	r2, #1
 8014dc2:	1c5d      	adds	r5, r3, #1
 8014dc4:	42b3      	cmp	r3, r6
 8014dc6:	bfa8      	it	ge
 8014dc8:	2200      	movge	r2, #0
 8014dca:	18ab      	adds	r3, r5, r2
 8014dcc:	e7e1      	b.n	8014d92 <__sccl+0x32>
 8014dce:	4610      	mov	r0, r2
 8014dd0:	e7da      	b.n	8014d88 <__sccl+0x28>

08014dd2 <__submore>:
 8014dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dd6:	460c      	mov	r4, r1
 8014dd8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014dda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014dde:	4299      	cmp	r1, r3
 8014de0:	d11d      	bne.n	8014e1e <__submore+0x4c>
 8014de2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8014de6:	f7fd fedb 	bl	8012ba0 <_malloc_r>
 8014dea:	b918      	cbnz	r0, 8014df4 <__submore+0x22>
 8014dec:	f04f 30ff 	mov.w	r0, #4294967295
 8014df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014df8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8014dfa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8014dfe:	6360      	str	r0, [r4, #52]	@ 0x34
 8014e00:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8014e04:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8014e08:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8014e0c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014e10:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8014e14:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8014e18:	6020      	str	r0, [r4, #0]
 8014e1a:	2000      	movs	r0, #0
 8014e1c:	e7e8      	b.n	8014df0 <__submore+0x1e>
 8014e1e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8014e20:	0077      	lsls	r7, r6, #1
 8014e22:	463a      	mov	r2, r7
 8014e24:	f000 fbc1 	bl	80155aa <_realloc_r>
 8014e28:	4605      	mov	r5, r0
 8014e2a:	2800      	cmp	r0, #0
 8014e2c:	d0de      	beq.n	8014dec <__submore+0x1a>
 8014e2e:	eb00 0806 	add.w	r8, r0, r6
 8014e32:	4601      	mov	r1, r0
 8014e34:	4632      	mov	r2, r6
 8014e36:	4640      	mov	r0, r8
 8014e38:	f7fc ffdd 	bl	8011df6 <memcpy>
 8014e3c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8014e40:	f8c4 8000 	str.w	r8, [r4]
 8014e44:	e7e9      	b.n	8014e1a <__submore+0x48>

08014e46 <memmove>:
 8014e46:	4288      	cmp	r0, r1
 8014e48:	b510      	push	{r4, lr}
 8014e4a:	eb01 0402 	add.w	r4, r1, r2
 8014e4e:	d902      	bls.n	8014e56 <memmove+0x10>
 8014e50:	4284      	cmp	r4, r0
 8014e52:	4623      	mov	r3, r4
 8014e54:	d807      	bhi.n	8014e66 <memmove+0x20>
 8014e56:	1e43      	subs	r3, r0, #1
 8014e58:	42a1      	cmp	r1, r4
 8014e5a:	d008      	beq.n	8014e6e <memmove+0x28>
 8014e5c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014e60:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014e64:	e7f8      	b.n	8014e58 <memmove+0x12>
 8014e66:	4402      	add	r2, r0
 8014e68:	4601      	mov	r1, r0
 8014e6a:	428a      	cmp	r2, r1
 8014e6c:	d100      	bne.n	8014e70 <memmove+0x2a>
 8014e6e:	bd10      	pop	{r4, pc}
 8014e70:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014e74:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014e78:	e7f7      	b.n	8014e6a <memmove+0x24>
	...

08014e7c <_sbrk_r>:
 8014e7c:	b538      	push	{r3, r4, r5, lr}
 8014e7e:	4d06      	ldr	r5, [pc, #24]	@ (8014e98 <_sbrk_r+0x1c>)
 8014e80:	2300      	movs	r3, #0
 8014e82:	4604      	mov	r4, r0
 8014e84:	4608      	mov	r0, r1
 8014e86:	602b      	str	r3, [r5, #0]
 8014e88:	f7ef fb52 	bl	8004530 <_sbrk>
 8014e8c:	1c43      	adds	r3, r0, #1
 8014e8e:	d102      	bne.n	8014e96 <_sbrk_r+0x1a>
 8014e90:	682b      	ldr	r3, [r5, #0]
 8014e92:	b103      	cbz	r3, 8014e96 <_sbrk_r+0x1a>
 8014e94:	6023      	str	r3, [r4, #0]
 8014e96:	bd38      	pop	{r3, r4, r5, pc}
 8014e98:	200026d4 	.word	0x200026d4
 8014e9c:	00000000 	.word	0x00000000

08014ea0 <nan>:
 8014ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014ea8 <nan+0x8>
 8014ea4:	4770      	bx	lr
 8014ea6:	bf00      	nop
 8014ea8:	00000000 	.word	0x00000000
 8014eac:	7ff80000 	.word	0x7ff80000

08014eb0 <__assert_func>:
 8014eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014eb2:	4614      	mov	r4, r2
 8014eb4:	461a      	mov	r2, r3
 8014eb6:	4b09      	ldr	r3, [pc, #36]	@ (8014edc <__assert_func+0x2c>)
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	4605      	mov	r5, r0
 8014ebc:	68d8      	ldr	r0, [r3, #12]
 8014ebe:	b954      	cbnz	r4, 8014ed6 <__assert_func+0x26>
 8014ec0:	4b07      	ldr	r3, [pc, #28]	@ (8014ee0 <__assert_func+0x30>)
 8014ec2:	461c      	mov	r4, r3
 8014ec4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014ec8:	9100      	str	r1, [sp, #0]
 8014eca:	462b      	mov	r3, r5
 8014ecc:	4905      	ldr	r1, [pc, #20]	@ (8014ee4 <__assert_func+0x34>)
 8014ece:	f000 fc19 	bl	8015704 <fiprintf>
 8014ed2:	f000 fc29 	bl	8015728 <abort>
 8014ed6:	4b04      	ldr	r3, [pc, #16]	@ (8014ee8 <__assert_func+0x38>)
 8014ed8:	e7f4      	b.n	8014ec4 <__assert_func+0x14>
 8014eda:	bf00      	nop
 8014edc:	200001e4 	.word	0x200001e4
 8014ee0:	08017330 	.word	0x08017330
 8014ee4:	08017302 	.word	0x08017302
 8014ee8:	080172f5 	.word	0x080172f5

08014eec <_calloc_r>:
 8014eec:	b570      	push	{r4, r5, r6, lr}
 8014eee:	fba1 5402 	umull	r5, r4, r1, r2
 8014ef2:	b93c      	cbnz	r4, 8014f04 <_calloc_r+0x18>
 8014ef4:	4629      	mov	r1, r5
 8014ef6:	f7fd fe53 	bl	8012ba0 <_malloc_r>
 8014efa:	4606      	mov	r6, r0
 8014efc:	b928      	cbnz	r0, 8014f0a <_calloc_r+0x1e>
 8014efe:	2600      	movs	r6, #0
 8014f00:	4630      	mov	r0, r6
 8014f02:	bd70      	pop	{r4, r5, r6, pc}
 8014f04:	220c      	movs	r2, #12
 8014f06:	6002      	str	r2, [r0, #0]
 8014f08:	e7f9      	b.n	8014efe <_calloc_r+0x12>
 8014f0a:	462a      	mov	r2, r5
 8014f0c:	4621      	mov	r1, r4
 8014f0e:	f7fc fee0 	bl	8011cd2 <memset>
 8014f12:	e7f5      	b.n	8014f00 <_calloc_r+0x14>

08014f14 <rshift>:
 8014f14:	6903      	ldr	r3, [r0, #16]
 8014f16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014f1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014f1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014f22:	f100 0414 	add.w	r4, r0, #20
 8014f26:	dd45      	ble.n	8014fb4 <rshift+0xa0>
 8014f28:	f011 011f 	ands.w	r1, r1, #31
 8014f2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014f30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014f34:	d10c      	bne.n	8014f50 <rshift+0x3c>
 8014f36:	f100 0710 	add.w	r7, r0, #16
 8014f3a:	4629      	mov	r1, r5
 8014f3c:	42b1      	cmp	r1, r6
 8014f3e:	d334      	bcc.n	8014faa <rshift+0x96>
 8014f40:	1a9b      	subs	r3, r3, r2
 8014f42:	009b      	lsls	r3, r3, #2
 8014f44:	1eea      	subs	r2, r5, #3
 8014f46:	4296      	cmp	r6, r2
 8014f48:	bf38      	it	cc
 8014f4a:	2300      	movcc	r3, #0
 8014f4c:	4423      	add	r3, r4
 8014f4e:	e015      	b.n	8014f7c <rshift+0x68>
 8014f50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014f54:	f1c1 0820 	rsb	r8, r1, #32
 8014f58:	40cf      	lsrs	r7, r1
 8014f5a:	f105 0e04 	add.w	lr, r5, #4
 8014f5e:	46a1      	mov	r9, r4
 8014f60:	4576      	cmp	r6, lr
 8014f62:	46f4      	mov	ip, lr
 8014f64:	d815      	bhi.n	8014f92 <rshift+0x7e>
 8014f66:	1a9a      	subs	r2, r3, r2
 8014f68:	0092      	lsls	r2, r2, #2
 8014f6a:	3a04      	subs	r2, #4
 8014f6c:	3501      	adds	r5, #1
 8014f6e:	42ae      	cmp	r6, r5
 8014f70:	bf38      	it	cc
 8014f72:	2200      	movcc	r2, #0
 8014f74:	18a3      	adds	r3, r4, r2
 8014f76:	50a7      	str	r7, [r4, r2]
 8014f78:	b107      	cbz	r7, 8014f7c <rshift+0x68>
 8014f7a:	3304      	adds	r3, #4
 8014f7c:	1b1a      	subs	r2, r3, r4
 8014f7e:	42a3      	cmp	r3, r4
 8014f80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014f84:	bf08      	it	eq
 8014f86:	2300      	moveq	r3, #0
 8014f88:	6102      	str	r2, [r0, #16]
 8014f8a:	bf08      	it	eq
 8014f8c:	6143      	streq	r3, [r0, #20]
 8014f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f92:	f8dc c000 	ldr.w	ip, [ip]
 8014f96:	fa0c fc08 	lsl.w	ip, ip, r8
 8014f9a:	ea4c 0707 	orr.w	r7, ip, r7
 8014f9e:	f849 7b04 	str.w	r7, [r9], #4
 8014fa2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014fa6:	40cf      	lsrs	r7, r1
 8014fa8:	e7da      	b.n	8014f60 <rshift+0x4c>
 8014faa:	f851 cb04 	ldr.w	ip, [r1], #4
 8014fae:	f847 cf04 	str.w	ip, [r7, #4]!
 8014fb2:	e7c3      	b.n	8014f3c <rshift+0x28>
 8014fb4:	4623      	mov	r3, r4
 8014fb6:	e7e1      	b.n	8014f7c <rshift+0x68>

08014fb8 <__hexdig_fun>:
 8014fb8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014fbc:	2b09      	cmp	r3, #9
 8014fbe:	d802      	bhi.n	8014fc6 <__hexdig_fun+0xe>
 8014fc0:	3820      	subs	r0, #32
 8014fc2:	b2c0      	uxtb	r0, r0
 8014fc4:	4770      	bx	lr
 8014fc6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014fca:	2b05      	cmp	r3, #5
 8014fcc:	d801      	bhi.n	8014fd2 <__hexdig_fun+0x1a>
 8014fce:	3847      	subs	r0, #71	@ 0x47
 8014fd0:	e7f7      	b.n	8014fc2 <__hexdig_fun+0xa>
 8014fd2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8014fd6:	2b05      	cmp	r3, #5
 8014fd8:	d801      	bhi.n	8014fde <__hexdig_fun+0x26>
 8014fda:	3827      	subs	r0, #39	@ 0x27
 8014fdc:	e7f1      	b.n	8014fc2 <__hexdig_fun+0xa>
 8014fde:	2000      	movs	r0, #0
 8014fe0:	4770      	bx	lr
	...

08014fe4 <__gethex>:
 8014fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fe8:	b085      	sub	sp, #20
 8014fea:	468a      	mov	sl, r1
 8014fec:	9302      	str	r3, [sp, #8]
 8014fee:	680b      	ldr	r3, [r1, #0]
 8014ff0:	9001      	str	r0, [sp, #4]
 8014ff2:	4690      	mov	r8, r2
 8014ff4:	1c9c      	adds	r4, r3, #2
 8014ff6:	46a1      	mov	r9, r4
 8014ff8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8014ffc:	2830      	cmp	r0, #48	@ 0x30
 8014ffe:	d0fa      	beq.n	8014ff6 <__gethex+0x12>
 8015000:	eba9 0303 	sub.w	r3, r9, r3
 8015004:	f1a3 0b02 	sub.w	fp, r3, #2
 8015008:	f7ff ffd6 	bl	8014fb8 <__hexdig_fun>
 801500c:	4605      	mov	r5, r0
 801500e:	2800      	cmp	r0, #0
 8015010:	d168      	bne.n	80150e4 <__gethex+0x100>
 8015012:	49a0      	ldr	r1, [pc, #640]	@ (8015294 <__gethex+0x2b0>)
 8015014:	2201      	movs	r2, #1
 8015016:	4648      	mov	r0, r9
 8015018:	f7fc fe63 	bl	8011ce2 <strncmp>
 801501c:	4607      	mov	r7, r0
 801501e:	2800      	cmp	r0, #0
 8015020:	d167      	bne.n	80150f2 <__gethex+0x10e>
 8015022:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015026:	4626      	mov	r6, r4
 8015028:	f7ff ffc6 	bl	8014fb8 <__hexdig_fun>
 801502c:	2800      	cmp	r0, #0
 801502e:	d062      	beq.n	80150f6 <__gethex+0x112>
 8015030:	4623      	mov	r3, r4
 8015032:	7818      	ldrb	r0, [r3, #0]
 8015034:	2830      	cmp	r0, #48	@ 0x30
 8015036:	4699      	mov	r9, r3
 8015038:	f103 0301 	add.w	r3, r3, #1
 801503c:	d0f9      	beq.n	8015032 <__gethex+0x4e>
 801503e:	f7ff ffbb 	bl	8014fb8 <__hexdig_fun>
 8015042:	fab0 f580 	clz	r5, r0
 8015046:	096d      	lsrs	r5, r5, #5
 8015048:	f04f 0b01 	mov.w	fp, #1
 801504c:	464a      	mov	r2, r9
 801504e:	4616      	mov	r6, r2
 8015050:	3201      	adds	r2, #1
 8015052:	7830      	ldrb	r0, [r6, #0]
 8015054:	f7ff ffb0 	bl	8014fb8 <__hexdig_fun>
 8015058:	2800      	cmp	r0, #0
 801505a:	d1f8      	bne.n	801504e <__gethex+0x6a>
 801505c:	498d      	ldr	r1, [pc, #564]	@ (8015294 <__gethex+0x2b0>)
 801505e:	2201      	movs	r2, #1
 8015060:	4630      	mov	r0, r6
 8015062:	f7fc fe3e 	bl	8011ce2 <strncmp>
 8015066:	2800      	cmp	r0, #0
 8015068:	d13f      	bne.n	80150ea <__gethex+0x106>
 801506a:	b944      	cbnz	r4, 801507e <__gethex+0x9a>
 801506c:	1c74      	adds	r4, r6, #1
 801506e:	4622      	mov	r2, r4
 8015070:	4616      	mov	r6, r2
 8015072:	3201      	adds	r2, #1
 8015074:	7830      	ldrb	r0, [r6, #0]
 8015076:	f7ff ff9f 	bl	8014fb8 <__hexdig_fun>
 801507a:	2800      	cmp	r0, #0
 801507c:	d1f8      	bne.n	8015070 <__gethex+0x8c>
 801507e:	1ba4      	subs	r4, r4, r6
 8015080:	00a7      	lsls	r7, r4, #2
 8015082:	7833      	ldrb	r3, [r6, #0]
 8015084:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015088:	2b50      	cmp	r3, #80	@ 0x50
 801508a:	d13e      	bne.n	801510a <__gethex+0x126>
 801508c:	7873      	ldrb	r3, [r6, #1]
 801508e:	2b2b      	cmp	r3, #43	@ 0x2b
 8015090:	d033      	beq.n	80150fa <__gethex+0x116>
 8015092:	2b2d      	cmp	r3, #45	@ 0x2d
 8015094:	d034      	beq.n	8015100 <__gethex+0x11c>
 8015096:	1c71      	adds	r1, r6, #1
 8015098:	2400      	movs	r4, #0
 801509a:	7808      	ldrb	r0, [r1, #0]
 801509c:	f7ff ff8c 	bl	8014fb8 <__hexdig_fun>
 80150a0:	1e43      	subs	r3, r0, #1
 80150a2:	b2db      	uxtb	r3, r3
 80150a4:	2b18      	cmp	r3, #24
 80150a6:	d830      	bhi.n	801510a <__gethex+0x126>
 80150a8:	f1a0 0210 	sub.w	r2, r0, #16
 80150ac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80150b0:	f7ff ff82 	bl	8014fb8 <__hexdig_fun>
 80150b4:	f100 3cff 	add.w	ip, r0, #4294967295
 80150b8:	fa5f fc8c 	uxtb.w	ip, ip
 80150bc:	f1bc 0f18 	cmp.w	ip, #24
 80150c0:	f04f 030a 	mov.w	r3, #10
 80150c4:	d91e      	bls.n	8015104 <__gethex+0x120>
 80150c6:	b104      	cbz	r4, 80150ca <__gethex+0xe6>
 80150c8:	4252      	negs	r2, r2
 80150ca:	4417      	add	r7, r2
 80150cc:	f8ca 1000 	str.w	r1, [sl]
 80150d0:	b1ed      	cbz	r5, 801510e <__gethex+0x12a>
 80150d2:	f1bb 0f00 	cmp.w	fp, #0
 80150d6:	bf0c      	ite	eq
 80150d8:	2506      	moveq	r5, #6
 80150da:	2500      	movne	r5, #0
 80150dc:	4628      	mov	r0, r5
 80150de:	b005      	add	sp, #20
 80150e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150e4:	2500      	movs	r5, #0
 80150e6:	462c      	mov	r4, r5
 80150e8:	e7b0      	b.n	801504c <__gethex+0x68>
 80150ea:	2c00      	cmp	r4, #0
 80150ec:	d1c7      	bne.n	801507e <__gethex+0x9a>
 80150ee:	4627      	mov	r7, r4
 80150f0:	e7c7      	b.n	8015082 <__gethex+0x9e>
 80150f2:	464e      	mov	r6, r9
 80150f4:	462f      	mov	r7, r5
 80150f6:	2501      	movs	r5, #1
 80150f8:	e7c3      	b.n	8015082 <__gethex+0x9e>
 80150fa:	2400      	movs	r4, #0
 80150fc:	1cb1      	adds	r1, r6, #2
 80150fe:	e7cc      	b.n	801509a <__gethex+0xb6>
 8015100:	2401      	movs	r4, #1
 8015102:	e7fb      	b.n	80150fc <__gethex+0x118>
 8015104:	fb03 0002 	mla	r0, r3, r2, r0
 8015108:	e7ce      	b.n	80150a8 <__gethex+0xc4>
 801510a:	4631      	mov	r1, r6
 801510c:	e7de      	b.n	80150cc <__gethex+0xe8>
 801510e:	eba6 0309 	sub.w	r3, r6, r9
 8015112:	3b01      	subs	r3, #1
 8015114:	4629      	mov	r1, r5
 8015116:	2b07      	cmp	r3, #7
 8015118:	dc0a      	bgt.n	8015130 <__gethex+0x14c>
 801511a:	9801      	ldr	r0, [sp, #4]
 801511c:	f7fd fdcc 	bl	8012cb8 <_Balloc>
 8015120:	4604      	mov	r4, r0
 8015122:	b940      	cbnz	r0, 8015136 <__gethex+0x152>
 8015124:	4b5c      	ldr	r3, [pc, #368]	@ (8015298 <__gethex+0x2b4>)
 8015126:	4602      	mov	r2, r0
 8015128:	21e4      	movs	r1, #228	@ 0xe4
 801512a:	485c      	ldr	r0, [pc, #368]	@ (801529c <__gethex+0x2b8>)
 801512c:	f7ff fec0 	bl	8014eb0 <__assert_func>
 8015130:	3101      	adds	r1, #1
 8015132:	105b      	asrs	r3, r3, #1
 8015134:	e7ef      	b.n	8015116 <__gethex+0x132>
 8015136:	f100 0a14 	add.w	sl, r0, #20
 801513a:	2300      	movs	r3, #0
 801513c:	4655      	mov	r5, sl
 801513e:	469b      	mov	fp, r3
 8015140:	45b1      	cmp	r9, r6
 8015142:	d337      	bcc.n	80151b4 <__gethex+0x1d0>
 8015144:	f845 bb04 	str.w	fp, [r5], #4
 8015148:	eba5 050a 	sub.w	r5, r5, sl
 801514c:	10ad      	asrs	r5, r5, #2
 801514e:	6125      	str	r5, [r4, #16]
 8015150:	4658      	mov	r0, fp
 8015152:	f7fd fea3 	bl	8012e9c <__hi0bits>
 8015156:	016d      	lsls	r5, r5, #5
 8015158:	f8d8 6000 	ldr.w	r6, [r8]
 801515c:	1a2d      	subs	r5, r5, r0
 801515e:	42b5      	cmp	r5, r6
 8015160:	dd54      	ble.n	801520c <__gethex+0x228>
 8015162:	1bad      	subs	r5, r5, r6
 8015164:	4629      	mov	r1, r5
 8015166:	4620      	mov	r0, r4
 8015168:	f7fe fa37 	bl	80135da <__any_on>
 801516c:	4681      	mov	r9, r0
 801516e:	b178      	cbz	r0, 8015190 <__gethex+0x1ac>
 8015170:	1e6b      	subs	r3, r5, #1
 8015172:	1159      	asrs	r1, r3, #5
 8015174:	f003 021f 	and.w	r2, r3, #31
 8015178:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801517c:	f04f 0901 	mov.w	r9, #1
 8015180:	fa09 f202 	lsl.w	r2, r9, r2
 8015184:	420a      	tst	r2, r1
 8015186:	d003      	beq.n	8015190 <__gethex+0x1ac>
 8015188:	454b      	cmp	r3, r9
 801518a:	dc36      	bgt.n	80151fa <__gethex+0x216>
 801518c:	f04f 0902 	mov.w	r9, #2
 8015190:	4629      	mov	r1, r5
 8015192:	4620      	mov	r0, r4
 8015194:	f7ff febe 	bl	8014f14 <rshift>
 8015198:	442f      	add	r7, r5
 801519a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801519e:	42bb      	cmp	r3, r7
 80151a0:	da42      	bge.n	8015228 <__gethex+0x244>
 80151a2:	9801      	ldr	r0, [sp, #4]
 80151a4:	4621      	mov	r1, r4
 80151a6:	f7fd fdc7 	bl	8012d38 <_Bfree>
 80151aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80151ac:	2300      	movs	r3, #0
 80151ae:	6013      	str	r3, [r2, #0]
 80151b0:	25a3      	movs	r5, #163	@ 0xa3
 80151b2:	e793      	b.n	80150dc <__gethex+0xf8>
 80151b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80151b8:	2a2e      	cmp	r2, #46	@ 0x2e
 80151ba:	d012      	beq.n	80151e2 <__gethex+0x1fe>
 80151bc:	2b20      	cmp	r3, #32
 80151be:	d104      	bne.n	80151ca <__gethex+0x1e6>
 80151c0:	f845 bb04 	str.w	fp, [r5], #4
 80151c4:	f04f 0b00 	mov.w	fp, #0
 80151c8:	465b      	mov	r3, fp
 80151ca:	7830      	ldrb	r0, [r6, #0]
 80151cc:	9303      	str	r3, [sp, #12]
 80151ce:	f7ff fef3 	bl	8014fb8 <__hexdig_fun>
 80151d2:	9b03      	ldr	r3, [sp, #12]
 80151d4:	f000 000f 	and.w	r0, r0, #15
 80151d8:	4098      	lsls	r0, r3
 80151da:	ea4b 0b00 	orr.w	fp, fp, r0
 80151de:	3304      	adds	r3, #4
 80151e0:	e7ae      	b.n	8015140 <__gethex+0x15c>
 80151e2:	45b1      	cmp	r9, r6
 80151e4:	d8ea      	bhi.n	80151bc <__gethex+0x1d8>
 80151e6:	492b      	ldr	r1, [pc, #172]	@ (8015294 <__gethex+0x2b0>)
 80151e8:	9303      	str	r3, [sp, #12]
 80151ea:	2201      	movs	r2, #1
 80151ec:	4630      	mov	r0, r6
 80151ee:	f7fc fd78 	bl	8011ce2 <strncmp>
 80151f2:	9b03      	ldr	r3, [sp, #12]
 80151f4:	2800      	cmp	r0, #0
 80151f6:	d1e1      	bne.n	80151bc <__gethex+0x1d8>
 80151f8:	e7a2      	b.n	8015140 <__gethex+0x15c>
 80151fa:	1ea9      	subs	r1, r5, #2
 80151fc:	4620      	mov	r0, r4
 80151fe:	f7fe f9ec 	bl	80135da <__any_on>
 8015202:	2800      	cmp	r0, #0
 8015204:	d0c2      	beq.n	801518c <__gethex+0x1a8>
 8015206:	f04f 0903 	mov.w	r9, #3
 801520a:	e7c1      	b.n	8015190 <__gethex+0x1ac>
 801520c:	da09      	bge.n	8015222 <__gethex+0x23e>
 801520e:	1b75      	subs	r5, r6, r5
 8015210:	4621      	mov	r1, r4
 8015212:	9801      	ldr	r0, [sp, #4]
 8015214:	462a      	mov	r2, r5
 8015216:	f7fd ffa7 	bl	8013168 <__lshift>
 801521a:	1b7f      	subs	r7, r7, r5
 801521c:	4604      	mov	r4, r0
 801521e:	f100 0a14 	add.w	sl, r0, #20
 8015222:	f04f 0900 	mov.w	r9, #0
 8015226:	e7b8      	b.n	801519a <__gethex+0x1b6>
 8015228:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801522c:	42bd      	cmp	r5, r7
 801522e:	dd6f      	ble.n	8015310 <__gethex+0x32c>
 8015230:	1bed      	subs	r5, r5, r7
 8015232:	42ae      	cmp	r6, r5
 8015234:	dc34      	bgt.n	80152a0 <__gethex+0x2bc>
 8015236:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801523a:	2b02      	cmp	r3, #2
 801523c:	d022      	beq.n	8015284 <__gethex+0x2a0>
 801523e:	2b03      	cmp	r3, #3
 8015240:	d024      	beq.n	801528c <__gethex+0x2a8>
 8015242:	2b01      	cmp	r3, #1
 8015244:	d115      	bne.n	8015272 <__gethex+0x28e>
 8015246:	42ae      	cmp	r6, r5
 8015248:	d113      	bne.n	8015272 <__gethex+0x28e>
 801524a:	2e01      	cmp	r6, #1
 801524c:	d10b      	bne.n	8015266 <__gethex+0x282>
 801524e:	9a02      	ldr	r2, [sp, #8]
 8015250:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015254:	6013      	str	r3, [r2, #0]
 8015256:	2301      	movs	r3, #1
 8015258:	6123      	str	r3, [r4, #16]
 801525a:	f8ca 3000 	str.w	r3, [sl]
 801525e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015260:	2562      	movs	r5, #98	@ 0x62
 8015262:	601c      	str	r4, [r3, #0]
 8015264:	e73a      	b.n	80150dc <__gethex+0xf8>
 8015266:	1e71      	subs	r1, r6, #1
 8015268:	4620      	mov	r0, r4
 801526a:	f7fe f9b6 	bl	80135da <__any_on>
 801526e:	2800      	cmp	r0, #0
 8015270:	d1ed      	bne.n	801524e <__gethex+0x26a>
 8015272:	9801      	ldr	r0, [sp, #4]
 8015274:	4621      	mov	r1, r4
 8015276:	f7fd fd5f 	bl	8012d38 <_Bfree>
 801527a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801527c:	2300      	movs	r3, #0
 801527e:	6013      	str	r3, [r2, #0]
 8015280:	2550      	movs	r5, #80	@ 0x50
 8015282:	e72b      	b.n	80150dc <__gethex+0xf8>
 8015284:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015286:	2b00      	cmp	r3, #0
 8015288:	d1f3      	bne.n	8015272 <__gethex+0x28e>
 801528a:	e7e0      	b.n	801524e <__gethex+0x26a>
 801528c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801528e:	2b00      	cmp	r3, #0
 8015290:	d1dd      	bne.n	801524e <__gethex+0x26a>
 8015292:	e7ee      	b.n	8015272 <__gethex+0x28e>
 8015294:	08017168 	.word	0x08017168
 8015298:	08016ffb 	.word	0x08016ffb
 801529c:	08017331 	.word	0x08017331
 80152a0:	1e6f      	subs	r7, r5, #1
 80152a2:	f1b9 0f00 	cmp.w	r9, #0
 80152a6:	d130      	bne.n	801530a <__gethex+0x326>
 80152a8:	b127      	cbz	r7, 80152b4 <__gethex+0x2d0>
 80152aa:	4639      	mov	r1, r7
 80152ac:	4620      	mov	r0, r4
 80152ae:	f7fe f994 	bl	80135da <__any_on>
 80152b2:	4681      	mov	r9, r0
 80152b4:	117a      	asrs	r2, r7, #5
 80152b6:	2301      	movs	r3, #1
 80152b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80152bc:	f007 071f 	and.w	r7, r7, #31
 80152c0:	40bb      	lsls	r3, r7
 80152c2:	4213      	tst	r3, r2
 80152c4:	4629      	mov	r1, r5
 80152c6:	4620      	mov	r0, r4
 80152c8:	bf18      	it	ne
 80152ca:	f049 0902 	orrne.w	r9, r9, #2
 80152ce:	f7ff fe21 	bl	8014f14 <rshift>
 80152d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80152d6:	1b76      	subs	r6, r6, r5
 80152d8:	2502      	movs	r5, #2
 80152da:	f1b9 0f00 	cmp.w	r9, #0
 80152de:	d047      	beq.n	8015370 <__gethex+0x38c>
 80152e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80152e4:	2b02      	cmp	r3, #2
 80152e6:	d015      	beq.n	8015314 <__gethex+0x330>
 80152e8:	2b03      	cmp	r3, #3
 80152ea:	d017      	beq.n	801531c <__gethex+0x338>
 80152ec:	2b01      	cmp	r3, #1
 80152ee:	d109      	bne.n	8015304 <__gethex+0x320>
 80152f0:	f019 0f02 	tst.w	r9, #2
 80152f4:	d006      	beq.n	8015304 <__gethex+0x320>
 80152f6:	f8da 3000 	ldr.w	r3, [sl]
 80152fa:	ea49 0903 	orr.w	r9, r9, r3
 80152fe:	f019 0f01 	tst.w	r9, #1
 8015302:	d10e      	bne.n	8015322 <__gethex+0x33e>
 8015304:	f045 0510 	orr.w	r5, r5, #16
 8015308:	e032      	b.n	8015370 <__gethex+0x38c>
 801530a:	f04f 0901 	mov.w	r9, #1
 801530e:	e7d1      	b.n	80152b4 <__gethex+0x2d0>
 8015310:	2501      	movs	r5, #1
 8015312:	e7e2      	b.n	80152da <__gethex+0x2f6>
 8015314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015316:	f1c3 0301 	rsb	r3, r3, #1
 801531a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801531c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801531e:	2b00      	cmp	r3, #0
 8015320:	d0f0      	beq.n	8015304 <__gethex+0x320>
 8015322:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015326:	f104 0314 	add.w	r3, r4, #20
 801532a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801532e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015332:	f04f 0c00 	mov.w	ip, #0
 8015336:	4618      	mov	r0, r3
 8015338:	f853 2b04 	ldr.w	r2, [r3], #4
 801533c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8015340:	d01b      	beq.n	801537a <__gethex+0x396>
 8015342:	3201      	adds	r2, #1
 8015344:	6002      	str	r2, [r0, #0]
 8015346:	2d02      	cmp	r5, #2
 8015348:	f104 0314 	add.w	r3, r4, #20
 801534c:	d13c      	bne.n	80153c8 <__gethex+0x3e4>
 801534e:	f8d8 2000 	ldr.w	r2, [r8]
 8015352:	3a01      	subs	r2, #1
 8015354:	42b2      	cmp	r2, r6
 8015356:	d109      	bne.n	801536c <__gethex+0x388>
 8015358:	1171      	asrs	r1, r6, #5
 801535a:	2201      	movs	r2, #1
 801535c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015360:	f006 061f 	and.w	r6, r6, #31
 8015364:	fa02 f606 	lsl.w	r6, r2, r6
 8015368:	421e      	tst	r6, r3
 801536a:	d13a      	bne.n	80153e2 <__gethex+0x3fe>
 801536c:	f045 0520 	orr.w	r5, r5, #32
 8015370:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015372:	601c      	str	r4, [r3, #0]
 8015374:	9b02      	ldr	r3, [sp, #8]
 8015376:	601f      	str	r7, [r3, #0]
 8015378:	e6b0      	b.n	80150dc <__gethex+0xf8>
 801537a:	4299      	cmp	r1, r3
 801537c:	f843 cc04 	str.w	ip, [r3, #-4]
 8015380:	d8d9      	bhi.n	8015336 <__gethex+0x352>
 8015382:	68a3      	ldr	r3, [r4, #8]
 8015384:	459b      	cmp	fp, r3
 8015386:	db17      	blt.n	80153b8 <__gethex+0x3d4>
 8015388:	6861      	ldr	r1, [r4, #4]
 801538a:	9801      	ldr	r0, [sp, #4]
 801538c:	3101      	adds	r1, #1
 801538e:	f7fd fc93 	bl	8012cb8 <_Balloc>
 8015392:	4681      	mov	r9, r0
 8015394:	b918      	cbnz	r0, 801539e <__gethex+0x3ba>
 8015396:	4b1a      	ldr	r3, [pc, #104]	@ (8015400 <__gethex+0x41c>)
 8015398:	4602      	mov	r2, r0
 801539a:	2184      	movs	r1, #132	@ 0x84
 801539c:	e6c5      	b.n	801512a <__gethex+0x146>
 801539e:	6922      	ldr	r2, [r4, #16]
 80153a0:	3202      	adds	r2, #2
 80153a2:	f104 010c 	add.w	r1, r4, #12
 80153a6:	0092      	lsls	r2, r2, #2
 80153a8:	300c      	adds	r0, #12
 80153aa:	f7fc fd24 	bl	8011df6 <memcpy>
 80153ae:	4621      	mov	r1, r4
 80153b0:	9801      	ldr	r0, [sp, #4]
 80153b2:	f7fd fcc1 	bl	8012d38 <_Bfree>
 80153b6:	464c      	mov	r4, r9
 80153b8:	6923      	ldr	r3, [r4, #16]
 80153ba:	1c5a      	adds	r2, r3, #1
 80153bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80153c0:	6122      	str	r2, [r4, #16]
 80153c2:	2201      	movs	r2, #1
 80153c4:	615a      	str	r2, [r3, #20]
 80153c6:	e7be      	b.n	8015346 <__gethex+0x362>
 80153c8:	6922      	ldr	r2, [r4, #16]
 80153ca:	455a      	cmp	r2, fp
 80153cc:	dd0b      	ble.n	80153e6 <__gethex+0x402>
 80153ce:	2101      	movs	r1, #1
 80153d0:	4620      	mov	r0, r4
 80153d2:	f7ff fd9f 	bl	8014f14 <rshift>
 80153d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153da:	3701      	adds	r7, #1
 80153dc:	42bb      	cmp	r3, r7
 80153de:	f6ff aee0 	blt.w	80151a2 <__gethex+0x1be>
 80153e2:	2501      	movs	r5, #1
 80153e4:	e7c2      	b.n	801536c <__gethex+0x388>
 80153e6:	f016 061f 	ands.w	r6, r6, #31
 80153ea:	d0fa      	beq.n	80153e2 <__gethex+0x3fe>
 80153ec:	4453      	add	r3, sl
 80153ee:	f1c6 0620 	rsb	r6, r6, #32
 80153f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80153f6:	f7fd fd51 	bl	8012e9c <__hi0bits>
 80153fa:	42b0      	cmp	r0, r6
 80153fc:	dbe7      	blt.n	80153ce <__gethex+0x3ea>
 80153fe:	e7f0      	b.n	80153e2 <__gethex+0x3fe>
 8015400:	08016ffb 	.word	0x08016ffb

08015404 <L_shift>:
 8015404:	f1c2 0208 	rsb	r2, r2, #8
 8015408:	0092      	lsls	r2, r2, #2
 801540a:	b570      	push	{r4, r5, r6, lr}
 801540c:	f1c2 0620 	rsb	r6, r2, #32
 8015410:	6843      	ldr	r3, [r0, #4]
 8015412:	6804      	ldr	r4, [r0, #0]
 8015414:	fa03 f506 	lsl.w	r5, r3, r6
 8015418:	432c      	orrs	r4, r5
 801541a:	40d3      	lsrs	r3, r2
 801541c:	6004      	str	r4, [r0, #0]
 801541e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015422:	4288      	cmp	r0, r1
 8015424:	d3f4      	bcc.n	8015410 <L_shift+0xc>
 8015426:	bd70      	pop	{r4, r5, r6, pc}

08015428 <__match>:
 8015428:	b530      	push	{r4, r5, lr}
 801542a:	6803      	ldr	r3, [r0, #0]
 801542c:	3301      	adds	r3, #1
 801542e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015432:	b914      	cbnz	r4, 801543a <__match+0x12>
 8015434:	6003      	str	r3, [r0, #0]
 8015436:	2001      	movs	r0, #1
 8015438:	bd30      	pop	{r4, r5, pc}
 801543a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801543e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8015442:	2d19      	cmp	r5, #25
 8015444:	bf98      	it	ls
 8015446:	3220      	addls	r2, #32
 8015448:	42a2      	cmp	r2, r4
 801544a:	d0f0      	beq.n	801542e <__match+0x6>
 801544c:	2000      	movs	r0, #0
 801544e:	e7f3      	b.n	8015438 <__match+0x10>

08015450 <__hexnan>:
 8015450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015454:	680b      	ldr	r3, [r1, #0]
 8015456:	6801      	ldr	r1, [r0, #0]
 8015458:	115e      	asrs	r6, r3, #5
 801545a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801545e:	f013 031f 	ands.w	r3, r3, #31
 8015462:	b087      	sub	sp, #28
 8015464:	bf18      	it	ne
 8015466:	3604      	addne	r6, #4
 8015468:	2500      	movs	r5, #0
 801546a:	1f37      	subs	r7, r6, #4
 801546c:	4682      	mov	sl, r0
 801546e:	4690      	mov	r8, r2
 8015470:	9301      	str	r3, [sp, #4]
 8015472:	f846 5c04 	str.w	r5, [r6, #-4]
 8015476:	46b9      	mov	r9, r7
 8015478:	463c      	mov	r4, r7
 801547a:	9502      	str	r5, [sp, #8]
 801547c:	46ab      	mov	fp, r5
 801547e:	784a      	ldrb	r2, [r1, #1]
 8015480:	1c4b      	adds	r3, r1, #1
 8015482:	9303      	str	r3, [sp, #12]
 8015484:	b342      	cbz	r2, 80154d8 <__hexnan+0x88>
 8015486:	4610      	mov	r0, r2
 8015488:	9105      	str	r1, [sp, #20]
 801548a:	9204      	str	r2, [sp, #16]
 801548c:	f7ff fd94 	bl	8014fb8 <__hexdig_fun>
 8015490:	2800      	cmp	r0, #0
 8015492:	d151      	bne.n	8015538 <__hexnan+0xe8>
 8015494:	9a04      	ldr	r2, [sp, #16]
 8015496:	9905      	ldr	r1, [sp, #20]
 8015498:	2a20      	cmp	r2, #32
 801549a:	d818      	bhi.n	80154ce <__hexnan+0x7e>
 801549c:	9b02      	ldr	r3, [sp, #8]
 801549e:	459b      	cmp	fp, r3
 80154a0:	dd13      	ble.n	80154ca <__hexnan+0x7a>
 80154a2:	454c      	cmp	r4, r9
 80154a4:	d206      	bcs.n	80154b4 <__hexnan+0x64>
 80154a6:	2d07      	cmp	r5, #7
 80154a8:	dc04      	bgt.n	80154b4 <__hexnan+0x64>
 80154aa:	462a      	mov	r2, r5
 80154ac:	4649      	mov	r1, r9
 80154ae:	4620      	mov	r0, r4
 80154b0:	f7ff ffa8 	bl	8015404 <L_shift>
 80154b4:	4544      	cmp	r4, r8
 80154b6:	d952      	bls.n	801555e <__hexnan+0x10e>
 80154b8:	2300      	movs	r3, #0
 80154ba:	f1a4 0904 	sub.w	r9, r4, #4
 80154be:	f844 3c04 	str.w	r3, [r4, #-4]
 80154c2:	f8cd b008 	str.w	fp, [sp, #8]
 80154c6:	464c      	mov	r4, r9
 80154c8:	461d      	mov	r5, r3
 80154ca:	9903      	ldr	r1, [sp, #12]
 80154cc:	e7d7      	b.n	801547e <__hexnan+0x2e>
 80154ce:	2a29      	cmp	r2, #41	@ 0x29
 80154d0:	d157      	bne.n	8015582 <__hexnan+0x132>
 80154d2:	3102      	adds	r1, #2
 80154d4:	f8ca 1000 	str.w	r1, [sl]
 80154d8:	f1bb 0f00 	cmp.w	fp, #0
 80154dc:	d051      	beq.n	8015582 <__hexnan+0x132>
 80154de:	454c      	cmp	r4, r9
 80154e0:	d206      	bcs.n	80154f0 <__hexnan+0xa0>
 80154e2:	2d07      	cmp	r5, #7
 80154e4:	dc04      	bgt.n	80154f0 <__hexnan+0xa0>
 80154e6:	462a      	mov	r2, r5
 80154e8:	4649      	mov	r1, r9
 80154ea:	4620      	mov	r0, r4
 80154ec:	f7ff ff8a 	bl	8015404 <L_shift>
 80154f0:	4544      	cmp	r4, r8
 80154f2:	d936      	bls.n	8015562 <__hexnan+0x112>
 80154f4:	f1a8 0204 	sub.w	r2, r8, #4
 80154f8:	4623      	mov	r3, r4
 80154fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80154fe:	f842 1f04 	str.w	r1, [r2, #4]!
 8015502:	429f      	cmp	r7, r3
 8015504:	d2f9      	bcs.n	80154fa <__hexnan+0xaa>
 8015506:	1b3b      	subs	r3, r7, r4
 8015508:	f023 0303 	bic.w	r3, r3, #3
 801550c:	3304      	adds	r3, #4
 801550e:	3401      	adds	r4, #1
 8015510:	3e03      	subs	r6, #3
 8015512:	42b4      	cmp	r4, r6
 8015514:	bf88      	it	hi
 8015516:	2304      	movhi	r3, #4
 8015518:	4443      	add	r3, r8
 801551a:	2200      	movs	r2, #0
 801551c:	f843 2b04 	str.w	r2, [r3], #4
 8015520:	429f      	cmp	r7, r3
 8015522:	d2fb      	bcs.n	801551c <__hexnan+0xcc>
 8015524:	683b      	ldr	r3, [r7, #0]
 8015526:	b91b      	cbnz	r3, 8015530 <__hexnan+0xe0>
 8015528:	4547      	cmp	r7, r8
 801552a:	d128      	bne.n	801557e <__hexnan+0x12e>
 801552c:	2301      	movs	r3, #1
 801552e:	603b      	str	r3, [r7, #0]
 8015530:	2005      	movs	r0, #5
 8015532:	b007      	add	sp, #28
 8015534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015538:	3501      	adds	r5, #1
 801553a:	2d08      	cmp	r5, #8
 801553c:	f10b 0b01 	add.w	fp, fp, #1
 8015540:	dd06      	ble.n	8015550 <__hexnan+0x100>
 8015542:	4544      	cmp	r4, r8
 8015544:	d9c1      	bls.n	80154ca <__hexnan+0x7a>
 8015546:	2300      	movs	r3, #0
 8015548:	f844 3c04 	str.w	r3, [r4, #-4]
 801554c:	2501      	movs	r5, #1
 801554e:	3c04      	subs	r4, #4
 8015550:	6822      	ldr	r2, [r4, #0]
 8015552:	f000 000f 	and.w	r0, r0, #15
 8015556:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801555a:	6020      	str	r0, [r4, #0]
 801555c:	e7b5      	b.n	80154ca <__hexnan+0x7a>
 801555e:	2508      	movs	r5, #8
 8015560:	e7b3      	b.n	80154ca <__hexnan+0x7a>
 8015562:	9b01      	ldr	r3, [sp, #4]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d0dd      	beq.n	8015524 <__hexnan+0xd4>
 8015568:	f1c3 0320 	rsb	r3, r3, #32
 801556c:	f04f 32ff 	mov.w	r2, #4294967295
 8015570:	40da      	lsrs	r2, r3
 8015572:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8015576:	4013      	ands	r3, r2
 8015578:	f846 3c04 	str.w	r3, [r6, #-4]
 801557c:	e7d2      	b.n	8015524 <__hexnan+0xd4>
 801557e:	3f04      	subs	r7, #4
 8015580:	e7d0      	b.n	8015524 <__hexnan+0xd4>
 8015582:	2004      	movs	r0, #4
 8015584:	e7d5      	b.n	8015532 <__hexnan+0xe2>

08015586 <__ascii_mbtowc>:
 8015586:	b082      	sub	sp, #8
 8015588:	b901      	cbnz	r1, 801558c <__ascii_mbtowc+0x6>
 801558a:	a901      	add	r1, sp, #4
 801558c:	b142      	cbz	r2, 80155a0 <__ascii_mbtowc+0x1a>
 801558e:	b14b      	cbz	r3, 80155a4 <__ascii_mbtowc+0x1e>
 8015590:	7813      	ldrb	r3, [r2, #0]
 8015592:	600b      	str	r3, [r1, #0]
 8015594:	7812      	ldrb	r2, [r2, #0]
 8015596:	1e10      	subs	r0, r2, #0
 8015598:	bf18      	it	ne
 801559a:	2001      	movne	r0, #1
 801559c:	b002      	add	sp, #8
 801559e:	4770      	bx	lr
 80155a0:	4610      	mov	r0, r2
 80155a2:	e7fb      	b.n	801559c <__ascii_mbtowc+0x16>
 80155a4:	f06f 0001 	mvn.w	r0, #1
 80155a8:	e7f8      	b.n	801559c <__ascii_mbtowc+0x16>

080155aa <_realloc_r>:
 80155aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155ae:	4680      	mov	r8, r0
 80155b0:	4615      	mov	r5, r2
 80155b2:	460c      	mov	r4, r1
 80155b4:	b921      	cbnz	r1, 80155c0 <_realloc_r+0x16>
 80155b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155ba:	4611      	mov	r1, r2
 80155bc:	f7fd baf0 	b.w	8012ba0 <_malloc_r>
 80155c0:	b92a      	cbnz	r2, 80155ce <_realloc_r+0x24>
 80155c2:	f7fd fa79 	bl	8012ab8 <_free_r>
 80155c6:	2400      	movs	r4, #0
 80155c8:	4620      	mov	r0, r4
 80155ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155ce:	f000 f8b2 	bl	8015736 <_malloc_usable_size_r>
 80155d2:	4285      	cmp	r5, r0
 80155d4:	4606      	mov	r6, r0
 80155d6:	d802      	bhi.n	80155de <_realloc_r+0x34>
 80155d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80155dc:	d8f4      	bhi.n	80155c8 <_realloc_r+0x1e>
 80155de:	4629      	mov	r1, r5
 80155e0:	4640      	mov	r0, r8
 80155e2:	f7fd fadd 	bl	8012ba0 <_malloc_r>
 80155e6:	4607      	mov	r7, r0
 80155e8:	2800      	cmp	r0, #0
 80155ea:	d0ec      	beq.n	80155c6 <_realloc_r+0x1c>
 80155ec:	42b5      	cmp	r5, r6
 80155ee:	462a      	mov	r2, r5
 80155f0:	4621      	mov	r1, r4
 80155f2:	bf28      	it	cs
 80155f4:	4632      	movcs	r2, r6
 80155f6:	f7fc fbfe 	bl	8011df6 <memcpy>
 80155fa:	4621      	mov	r1, r4
 80155fc:	4640      	mov	r0, r8
 80155fe:	f7fd fa5b 	bl	8012ab8 <_free_r>
 8015602:	463c      	mov	r4, r7
 8015604:	e7e0      	b.n	80155c8 <_realloc_r+0x1e>
	...

08015608 <_strtoul_l.constprop.0>:
 8015608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801560c:	4e34      	ldr	r6, [pc, #208]	@ (80156e0 <_strtoul_l.constprop.0+0xd8>)
 801560e:	4686      	mov	lr, r0
 8015610:	460d      	mov	r5, r1
 8015612:	4628      	mov	r0, r5
 8015614:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015618:	5d37      	ldrb	r7, [r6, r4]
 801561a:	f017 0708 	ands.w	r7, r7, #8
 801561e:	d1f8      	bne.n	8015612 <_strtoul_l.constprop.0+0xa>
 8015620:	2c2d      	cmp	r4, #45	@ 0x2d
 8015622:	d12f      	bne.n	8015684 <_strtoul_l.constprop.0+0x7c>
 8015624:	782c      	ldrb	r4, [r5, #0]
 8015626:	2701      	movs	r7, #1
 8015628:	1c85      	adds	r5, r0, #2
 801562a:	f033 0010 	bics.w	r0, r3, #16
 801562e:	d109      	bne.n	8015644 <_strtoul_l.constprop.0+0x3c>
 8015630:	2c30      	cmp	r4, #48	@ 0x30
 8015632:	d12c      	bne.n	801568e <_strtoul_l.constprop.0+0x86>
 8015634:	7828      	ldrb	r0, [r5, #0]
 8015636:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801563a:	2858      	cmp	r0, #88	@ 0x58
 801563c:	d127      	bne.n	801568e <_strtoul_l.constprop.0+0x86>
 801563e:	786c      	ldrb	r4, [r5, #1]
 8015640:	2310      	movs	r3, #16
 8015642:	3502      	adds	r5, #2
 8015644:	f04f 38ff 	mov.w	r8, #4294967295
 8015648:	2600      	movs	r6, #0
 801564a:	fbb8 f8f3 	udiv	r8, r8, r3
 801564e:	fb03 f908 	mul.w	r9, r3, r8
 8015652:	ea6f 0909 	mvn.w	r9, r9
 8015656:	4630      	mov	r0, r6
 8015658:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801565c:	f1bc 0f09 	cmp.w	ip, #9
 8015660:	d81c      	bhi.n	801569c <_strtoul_l.constprop.0+0x94>
 8015662:	4664      	mov	r4, ip
 8015664:	42a3      	cmp	r3, r4
 8015666:	dd2a      	ble.n	80156be <_strtoul_l.constprop.0+0xb6>
 8015668:	f1b6 3fff 	cmp.w	r6, #4294967295
 801566c:	d007      	beq.n	801567e <_strtoul_l.constprop.0+0x76>
 801566e:	4580      	cmp	r8, r0
 8015670:	d322      	bcc.n	80156b8 <_strtoul_l.constprop.0+0xb0>
 8015672:	d101      	bne.n	8015678 <_strtoul_l.constprop.0+0x70>
 8015674:	45a1      	cmp	r9, r4
 8015676:	db1f      	blt.n	80156b8 <_strtoul_l.constprop.0+0xb0>
 8015678:	fb00 4003 	mla	r0, r0, r3, r4
 801567c:	2601      	movs	r6, #1
 801567e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015682:	e7e9      	b.n	8015658 <_strtoul_l.constprop.0+0x50>
 8015684:	2c2b      	cmp	r4, #43	@ 0x2b
 8015686:	bf04      	itt	eq
 8015688:	782c      	ldrbeq	r4, [r5, #0]
 801568a:	1c85      	addeq	r5, r0, #2
 801568c:	e7cd      	b.n	801562a <_strtoul_l.constprop.0+0x22>
 801568e:	2b00      	cmp	r3, #0
 8015690:	d1d8      	bne.n	8015644 <_strtoul_l.constprop.0+0x3c>
 8015692:	2c30      	cmp	r4, #48	@ 0x30
 8015694:	bf0c      	ite	eq
 8015696:	2308      	moveq	r3, #8
 8015698:	230a      	movne	r3, #10
 801569a:	e7d3      	b.n	8015644 <_strtoul_l.constprop.0+0x3c>
 801569c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80156a0:	f1bc 0f19 	cmp.w	ip, #25
 80156a4:	d801      	bhi.n	80156aa <_strtoul_l.constprop.0+0xa2>
 80156a6:	3c37      	subs	r4, #55	@ 0x37
 80156a8:	e7dc      	b.n	8015664 <_strtoul_l.constprop.0+0x5c>
 80156aa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80156ae:	f1bc 0f19 	cmp.w	ip, #25
 80156b2:	d804      	bhi.n	80156be <_strtoul_l.constprop.0+0xb6>
 80156b4:	3c57      	subs	r4, #87	@ 0x57
 80156b6:	e7d5      	b.n	8015664 <_strtoul_l.constprop.0+0x5c>
 80156b8:	f04f 36ff 	mov.w	r6, #4294967295
 80156bc:	e7df      	b.n	801567e <_strtoul_l.constprop.0+0x76>
 80156be:	1c73      	adds	r3, r6, #1
 80156c0:	d106      	bne.n	80156d0 <_strtoul_l.constprop.0+0xc8>
 80156c2:	2322      	movs	r3, #34	@ 0x22
 80156c4:	f8ce 3000 	str.w	r3, [lr]
 80156c8:	4630      	mov	r0, r6
 80156ca:	b932      	cbnz	r2, 80156da <_strtoul_l.constprop.0+0xd2>
 80156cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80156d0:	b107      	cbz	r7, 80156d4 <_strtoul_l.constprop.0+0xcc>
 80156d2:	4240      	negs	r0, r0
 80156d4:	2a00      	cmp	r2, #0
 80156d6:	d0f9      	beq.n	80156cc <_strtoul_l.constprop.0+0xc4>
 80156d8:	b106      	cbz	r6, 80156dc <_strtoul_l.constprop.0+0xd4>
 80156da:	1e69      	subs	r1, r5, #1
 80156dc:	6011      	str	r1, [r2, #0]
 80156de:	e7f5      	b.n	80156cc <_strtoul_l.constprop.0+0xc4>
 80156e0:	080171c1 	.word	0x080171c1

080156e4 <_strtoul_r>:
 80156e4:	f7ff bf90 	b.w	8015608 <_strtoul_l.constprop.0>

080156e8 <__ascii_wctomb>:
 80156e8:	4603      	mov	r3, r0
 80156ea:	4608      	mov	r0, r1
 80156ec:	b141      	cbz	r1, 8015700 <__ascii_wctomb+0x18>
 80156ee:	2aff      	cmp	r2, #255	@ 0xff
 80156f0:	d904      	bls.n	80156fc <__ascii_wctomb+0x14>
 80156f2:	228a      	movs	r2, #138	@ 0x8a
 80156f4:	601a      	str	r2, [r3, #0]
 80156f6:	f04f 30ff 	mov.w	r0, #4294967295
 80156fa:	4770      	bx	lr
 80156fc:	700a      	strb	r2, [r1, #0]
 80156fe:	2001      	movs	r0, #1
 8015700:	4770      	bx	lr
	...

08015704 <fiprintf>:
 8015704:	b40e      	push	{r1, r2, r3}
 8015706:	b503      	push	{r0, r1, lr}
 8015708:	4601      	mov	r1, r0
 801570a:	ab03      	add	r3, sp, #12
 801570c:	4805      	ldr	r0, [pc, #20]	@ (8015724 <fiprintf+0x20>)
 801570e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015712:	6800      	ldr	r0, [r0, #0]
 8015714:	9301      	str	r3, [sp, #4]
 8015716:	f000 f83f 	bl	8015798 <_vfiprintf_r>
 801571a:	b002      	add	sp, #8
 801571c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015720:	b003      	add	sp, #12
 8015722:	4770      	bx	lr
 8015724:	200001e4 	.word	0x200001e4

08015728 <abort>:
 8015728:	b508      	push	{r3, lr}
 801572a:	2006      	movs	r0, #6
 801572c:	f000 fa08 	bl	8015b40 <raise>
 8015730:	2001      	movs	r0, #1
 8015732:	f7ee fe85 	bl	8004440 <_exit>

08015736 <_malloc_usable_size_r>:
 8015736:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801573a:	1f18      	subs	r0, r3, #4
 801573c:	2b00      	cmp	r3, #0
 801573e:	bfbc      	itt	lt
 8015740:	580b      	ldrlt	r3, [r1, r0]
 8015742:	18c0      	addlt	r0, r0, r3
 8015744:	4770      	bx	lr

08015746 <__sfputc_r>:
 8015746:	6893      	ldr	r3, [r2, #8]
 8015748:	3b01      	subs	r3, #1
 801574a:	2b00      	cmp	r3, #0
 801574c:	b410      	push	{r4}
 801574e:	6093      	str	r3, [r2, #8]
 8015750:	da08      	bge.n	8015764 <__sfputc_r+0x1e>
 8015752:	6994      	ldr	r4, [r2, #24]
 8015754:	42a3      	cmp	r3, r4
 8015756:	db01      	blt.n	801575c <__sfputc_r+0x16>
 8015758:	290a      	cmp	r1, #10
 801575a:	d103      	bne.n	8015764 <__sfputc_r+0x1e>
 801575c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015760:	f000 b932 	b.w	80159c8 <__swbuf_r>
 8015764:	6813      	ldr	r3, [r2, #0]
 8015766:	1c58      	adds	r0, r3, #1
 8015768:	6010      	str	r0, [r2, #0]
 801576a:	7019      	strb	r1, [r3, #0]
 801576c:	4608      	mov	r0, r1
 801576e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015772:	4770      	bx	lr

08015774 <__sfputs_r>:
 8015774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015776:	4606      	mov	r6, r0
 8015778:	460f      	mov	r7, r1
 801577a:	4614      	mov	r4, r2
 801577c:	18d5      	adds	r5, r2, r3
 801577e:	42ac      	cmp	r4, r5
 8015780:	d101      	bne.n	8015786 <__sfputs_r+0x12>
 8015782:	2000      	movs	r0, #0
 8015784:	e007      	b.n	8015796 <__sfputs_r+0x22>
 8015786:	f814 1b01 	ldrb.w	r1, [r4], #1
 801578a:	463a      	mov	r2, r7
 801578c:	4630      	mov	r0, r6
 801578e:	f7ff ffda 	bl	8015746 <__sfputc_r>
 8015792:	1c43      	adds	r3, r0, #1
 8015794:	d1f3      	bne.n	801577e <__sfputs_r+0xa>
 8015796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015798 <_vfiprintf_r>:
 8015798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801579c:	460d      	mov	r5, r1
 801579e:	b09d      	sub	sp, #116	@ 0x74
 80157a0:	4614      	mov	r4, r2
 80157a2:	4698      	mov	r8, r3
 80157a4:	4606      	mov	r6, r0
 80157a6:	b118      	cbz	r0, 80157b0 <_vfiprintf_r+0x18>
 80157a8:	6a03      	ldr	r3, [r0, #32]
 80157aa:	b90b      	cbnz	r3, 80157b0 <_vfiprintf_r+0x18>
 80157ac:	f7fc f9cc 	bl	8011b48 <__sinit>
 80157b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80157b2:	07d9      	lsls	r1, r3, #31
 80157b4:	d405      	bmi.n	80157c2 <_vfiprintf_r+0x2a>
 80157b6:	89ab      	ldrh	r3, [r5, #12]
 80157b8:	059a      	lsls	r2, r3, #22
 80157ba:	d402      	bmi.n	80157c2 <_vfiprintf_r+0x2a>
 80157bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80157be:	f7fc fb18 	bl	8011df2 <__retarget_lock_acquire_recursive>
 80157c2:	89ab      	ldrh	r3, [r5, #12]
 80157c4:	071b      	lsls	r3, r3, #28
 80157c6:	d501      	bpl.n	80157cc <_vfiprintf_r+0x34>
 80157c8:	692b      	ldr	r3, [r5, #16]
 80157ca:	b99b      	cbnz	r3, 80157f4 <_vfiprintf_r+0x5c>
 80157cc:	4629      	mov	r1, r5
 80157ce:	4630      	mov	r0, r6
 80157d0:	f000 f938 	bl	8015a44 <__swsetup_r>
 80157d4:	b170      	cbz	r0, 80157f4 <_vfiprintf_r+0x5c>
 80157d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80157d8:	07dc      	lsls	r4, r3, #31
 80157da:	d504      	bpl.n	80157e6 <_vfiprintf_r+0x4e>
 80157dc:	f04f 30ff 	mov.w	r0, #4294967295
 80157e0:	b01d      	add	sp, #116	@ 0x74
 80157e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157e6:	89ab      	ldrh	r3, [r5, #12]
 80157e8:	0598      	lsls	r0, r3, #22
 80157ea:	d4f7      	bmi.n	80157dc <_vfiprintf_r+0x44>
 80157ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80157ee:	f7fc fb01 	bl	8011df4 <__retarget_lock_release_recursive>
 80157f2:	e7f3      	b.n	80157dc <_vfiprintf_r+0x44>
 80157f4:	2300      	movs	r3, #0
 80157f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80157f8:	2320      	movs	r3, #32
 80157fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80157fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8015802:	2330      	movs	r3, #48	@ 0x30
 8015804:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80159b4 <_vfiprintf_r+0x21c>
 8015808:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801580c:	f04f 0901 	mov.w	r9, #1
 8015810:	4623      	mov	r3, r4
 8015812:	469a      	mov	sl, r3
 8015814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015818:	b10a      	cbz	r2, 801581e <_vfiprintf_r+0x86>
 801581a:	2a25      	cmp	r2, #37	@ 0x25
 801581c:	d1f9      	bne.n	8015812 <_vfiprintf_r+0x7a>
 801581e:	ebba 0b04 	subs.w	fp, sl, r4
 8015822:	d00b      	beq.n	801583c <_vfiprintf_r+0xa4>
 8015824:	465b      	mov	r3, fp
 8015826:	4622      	mov	r2, r4
 8015828:	4629      	mov	r1, r5
 801582a:	4630      	mov	r0, r6
 801582c:	f7ff ffa2 	bl	8015774 <__sfputs_r>
 8015830:	3001      	adds	r0, #1
 8015832:	f000 80a7 	beq.w	8015984 <_vfiprintf_r+0x1ec>
 8015836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015838:	445a      	add	r2, fp
 801583a:	9209      	str	r2, [sp, #36]	@ 0x24
 801583c:	f89a 3000 	ldrb.w	r3, [sl]
 8015840:	2b00      	cmp	r3, #0
 8015842:	f000 809f 	beq.w	8015984 <_vfiprintf_r+0x1ec>
 8015846:	2300      	movs	r3, #0
 8015848:	f04f 32ff 	mov.w	r2, #4294967295
 801584c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015850:	f10a 0a01 	add.w	sl, sl, #1
 8015854:	9304      	str	r3, [sp, #16]
 8015856:	9307      	str	r3, [sp, #28]
 8015858:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801585c:	931a      	str	r3, [sp, #104]	@ 0x68
 801585e:	4654      	mov	r4, sl
 8015860:	2205      	movs	r2, #5
 8015862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015866:	4853      	ldr	r0, [pc, #332]	@ (80159b4 <_vfiprintf_r+0x21c>)
 8015868:	f7ea fcda 	bl	8000220 <memchr>
 801586c:	9a04      	ldr	r2, [sp, #16]
 801586e:	b9d8      	cbnz	r0, 80158a8 <_vfiprintf_r+0x110>
 8015870:	06d1      	lsls	r1, r2, #27
 8015872:	bf44      	itt	mi
 8015874:	2320      	movmi	r3, #32
 8015876:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801587a:	0713      	lsls	r3, r2, #28
 801587c:	bf44      	itt	mi
 801587e:	232b      	movmi	r3, #43	@ 0x2b
 8015880:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015884:	f89a 3000 	ldrb.w	r3, [sl]
 8015888:	2b2a      	cmp	r3, #42	@ 0x2a
 801588a:	d015      	beq.n	80158b8 <_vfiprintf_r+0x120>
 801588c:	9a07      	ldr	r2, [sp, #28]
 801588e:	4654      	mov	r4, sl
 8015890:	2000      	movs	r0, #0
 8015892:	f04f 0c0a 	mov.w	ip, #10
 8015896:	4621      	mov	r1, r4
 8015898:	f811 3b01 	ldrb.w	r3, [r1], #1
 801589c:	3b30      	subs	r3, #48	@ 0x30
 801589e:	2b09      	cmp	r3, #9
 80158a0:	d94b      	bls.n	801593a <_vfiprintf_r+0x1a2>
 80158a2:	b1b0      	cbz	r0, 80158d2 <_vfiprintf_r+0x13a>
 80158a4:	9207      	str	r2, [sp, #28]
 80158a6:	e014      	b.n	80158d2 <_vfiprintf_r+0x13a>
 80158a8:	eba0 0308 	sub.w	r3, r0, r8
 80158ac:	fa09 f303 	lsl.w	r3, r9, r3
 80158b0:	4313      	orrs	r3, r2
 80158b2:	9304      	str	r3, [sp, #16]
 80158b4:	46a2      	mov	sl, r4
 80158b6:	e7d2      	b.n	801585e <_vfiprintf_r+0xc6>
 80158b8:	9b03      	ldr	r3, [sp, #12]
 80158ba:	1d19      	adds	r1, r3, #4
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	9103      	str	r1, [sp, #12]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	bfbb      	ittet	lt
 80158c4:	425b      	neglt	r3, r3
 80158c6:	f042 0202 	orrlt.w	r2, r2, #2
 80158ca:	9307      	strge	r3, [sp, #28]
 80158cc:	9307      	strlt	r3, [sp, #28]
 80158ce:	bfb8      	it	lt
 80158d0:	9204      	strlt	r2, [sp, #16]
 80158d2:	7823      	ldrb	r3, [r4, #0]
 80158d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80158d6:	d10a      	bne.n	80158ee <_vfiprintf_r+0x156>
 80158d8:	7863      	ldrb	r3, [r4, #1]
 80158da:	2b2a      	cmp	r3, #42	@ 0x2a
 80158dc:	d132      	bne.n	8015944 <_vfiprintf_r+0x1ac>
 80158de:	9b03      	ldr	r3, [sp, #12]
 80158e0:	1d1a      	adds	r2, r3, #4
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	9203      	str	r2, [sp, #12]
 80158e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80158ea:	3402      	adds	r4, #2
 80158ec:	9305      	str	r3, [sp, #20]
 80158ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80159c4 <_vfiprintf_r+0x22c>
 80158f2:	7821      	ldrb	r1, [r4, #0]
 80158f4:	2203      	movs	r2, #3
 80158f6:	4650      	mov	r0, sl
 80158f8:	f7ea fc92 	bl	8000220 <memchr>
 80158fc:	b138      	cbz	r0, 801590e <_vfiprintf_r+0x176>
 80158fe:	9b04      	ldr	r3, [sp, #16]
 8015900:	eba0 000a 	sub.w	r0, r0, sl
 8015904:	2240      	movs	r2, #64	@ 0x40
 8015906:	4082      	lsls	r2, r0
 8015908:	4313      	orrs	r3, r2
 801590a:	3401      	adds	r4, #1
 801590c:	9304      	str	r3, [sp, #16]
 801590e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015912:	4829      	ldr	r0, [pc, #164]	@ (80159b8 <_vfiprintf_r+0x220>)
 8015914:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015918:	2206      	movs	r2, #6
 801591a:	f7ea fc81 	bl	8000220 <memchr>
 801591e:	2800      	cmp	r0, #0
 8015920:	d03f      	beq.n	80159a2 <_vfiprintf_r+0x20a>
 8015922:	4b26      	ldr	r3, [pc, #152]	@ (80159bc <_vfiprintf_r+0x224>)
 8015924:	bb1b      	cbnz	r3, 801596e <_vfiprintf_r+0x1d6>
 8015926:	9b03      	ldr	r3, [sp, #12]
 8015928:	3307      	adds	r3, #7
 801592a:	f023 0307 	bic.w	r3, r3, #7
 801592e:	3308      	adds	r3, #8
 8015930:	9303      	str	r3, [sp, #12]
 8015932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015934:	443b      	add	r3, r7
 8015936:	9309      	str	r3, [sp, #36]	@ 0x24
 8015938:	e76a      	b.n	8015810 <_vfiprintf_r+0x78>
 801593a:	fb0c 3202 	mla	r2, ip, r2, r3
 801593e:	460c      	mov	r4, r1
 8015940:	2001      	movs	r0, #1
 8015942:	e7a8      	b.n	8015896 <_vfiprintf_r+0xfe>
 8015944:	2300      	movs	r3, #0
 8015946:	3401      	adds	r4, #1
 8015948:	9305      	str	r3, [sp, #20]
 801594a:	4619      	mov	r1, r3
 801594c:	f04f 0c0a 	mov.w	ip, #10
 8015950:	4620      	mov	r0, r4
 8015952:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015956:	3a30      	subs	r2, #48	@ 0x30
 8015958:	2a09      	cmp	r2, #9
 801595a:	d903      	bls.n	8015964 <_vfiprintf_r+0x1cc>
 801595c:	2b00      	cmp	r3, #0
 801595e:	d0c6      	beq.n	80158ee <_vfiprintf_r+0x156>
 8015960:	9105      	str	r1, [sp, #20]
 8015962:	e7c4      	b.n	80158ee <_vfiprintf_r+0x156>
 8015964:	fb0c 2101 	mla	r1, ip, r1, r2
 8015968:	4604      	mov	r4, r0
 801596a:	2301      	movs	r3, #1
 801596c:	e7f0      	b.n	8015950 <_vfiprintf_r+0x1b8>
 801596e:	ab03      	add	r3, sp, #12
 8015970:	9300      	str	r3, [sp, #0]
 8015972:	462a      	mov	r2, r5
 8015974:	4b12      	ldr	r3, [pc, #72]	@ (80159c0 <_vfiprintf_r+0x228>)
 8015976:	a904      	add	r1, sp, #16
 8015978:	4630      	mov	r0, r6
 801597a:	f7fb fa8d 	bl	8010e98 <_printf_float>
 801597e:	4607      	mov	r7, r0
 8015980:	1c78      	adds	r0, r7, #1
 8015982:	d1d6      	bne.n	8015932 <_vfiprintf_r+0x19a>
 8015984:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015986:	07d9      	lsls	r1, r3, #31
 8015988:	d405      	bmi.n	8015996 <_vfiprintf_r+0x1fe>
 801598a:	89ab      	ldrh	r3, [r5, #12]
 801598c:	059a      	lsls	r2, r3, #22
 801598e:	d402      	bmi.n	8015996 <_vfiprintf_r+0x1fe>
 8015990:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015992:	f7fc fa2f 	bl	8011df4 <__retarget_lock_release_recursive>
 8015996:	89ab      	ldrh	r3, [r5, #12]
 8015998:	065b      	lsls	r3, r3, #25
 801599a:	f53f af1f 	bmi.w	80157dc <_vfiprintf_r+0x44>
 801599e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80159a0:	e71e      	b.n	80157e0 <_vfiprintf_r+0x48>
 80159a2:	ab03      	add	r3, sp, #12
 80159a4:	9300      	str	r3, [sp, #0]
 80159a6:	462a      	mov	r2, r5
 80159a8:	4b05      	ldr	r3, [pc, #20]	@ (80159c0 <_vfiprintf_r+0x228>)
 80159aa:	a904      	add	r1, sp, #16
 80159ac:	4630      	mov	r0, r6
 80159ae:	f7fb fd0b 	bl	80113c8 <_printf_i>
 80159b2:	e7e4      	b.n	801597e <_vfiprintf_r+0x1e6>
 80159b4:	080172c1 	.word	0x080172c1
 80159b8:	080172cb 	.word	0x080172cb
 80159bc:	08010e99 	.word	0x08010e99
 80159c0:	08015775 	.word	0x08015775
 80159c4:	080172c7 	.word	0x080172c7

080159c8 <__swbuf_r>:
 80159c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159ca:	460e      	mov	r6, r1
 80159cc:	4614      	mov	r4, r2
 80159ce:	4605      	mov	r5, r0
 80159d0:	b118      	cbz	r0, 80159da <__swbuf_r+0x12>
 80159d2:	6a03      	ldr	r3, [r0, #32]
 80159d4:	b90b      	cbnz	r3, 80159da <__swbuf_r+0x12>
 80159d6:	f7fc f8b7 	bl	8011b48 <__sinit>
 80159da:	69a3      	ldr	r3, [r4, #24]
 80159dc:	60a3      	str	r3, [r4, #8]
 80159de:	89a3      	ldrh	r3, [r4, #12]
 80159e0:	071a      	lsls	r2, r3, #28
 80159e2:	d501      	bpl.n	80159e8 <__swbuf_r+0x20>
 80159e4:	6923      	ldr	r3, [r4, #16]
 80159e6:	b943      	cbnz	r3, 80159fa <__swbuf_r+0x32>
 80159e8:	4621      	mov	r1, r4
 80159ea:	4628      	mov	r0, r5
 80159ec:	f000 f82a 	bl	8015a44 <__swsetup_r>
 80159f0:	b118      	cbz	r0, 80159fa <__swbuf_r+0x32>
 80159f2:	f04f 37ff 	mov.w	r7, #4294967295
 80159f6:	4638      	mov	r0, r7
 80159f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80159fa:	6823      	ldr	r3, [r4, #0]
 80159fc:	6922      	ldr	r2, [r4, #16]
 80159fe:	1a98      	subs	r0, r3, r2
 8015a00:	6963      	ldr	r3, [r4, #20]
 8015a02:	b2f6      	uxtb	r6, r6
 8015a04:	4283      	cmp	r3, r0
 8015a06:	4637      	mov	r7, r6
 8015a08:	dc05      	bgt.n	8015a16 <__swbuf_r+0x4e>
 8015a0a:	4621      	mov	r1, r4
 8015a0c:	4628      	mov	r0, r5
 8015a0e:	f7ff f97f 	bl	8014d10 <_fflush_r>
 8015a12:	2800      	cmp	r0, #0
 8015a14:	d1ed      	bne.n	80159f2 <__swbuf_r+0x2a>
 8015a16:	68a3      	ldr	r3, [r4, #8]
 8015a18:	3b01      	subs	r3, #1
 8015a1a:	60a3      	str	r3, [r4, #8]
 8015a1c:	6823      	ldr	r3, [r4, #0]
 8015a1e:	1c5a      	adds	r2, r3, #1
 8015a20:	6022      	str	r2, [r4, #0]
 8015a22:	701e      	strb	r6, [r3, #0]
 8015a24:	6962      	ldr	r2, [r4, #20]
 8015a26:	1c43      	adds	r3, r0, #1
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	d004      	beq.n	8015a36 <__swbuf_r+0x6e>
 8015a2c:	89a3      	ldrh	r3, [r4, #12]
 8015a2e:	07db      	lsls	r3, r3, #31
 8015a30:	d5e1      	bpl.n	80159f6 <__swbuf_r+0x2e>
 8015a32:	2e0a      	cmp	r6, #10
 8015a34:	d1df      	bne.n	80159f6 <__swbuf_r+0x2e>
 8015a36:	4621      	mov	r1, r4
 8015a38:	4628      	mov	r0, r5
 8015a3a:	f7ff f969 	bl	8014d10 <_fflush_r>
 8015a3e:	2800      	cmp	r0, #0
 8015a40:	d0d9      	beq.n	80159f6 <__swbuf_r+0x2e>
 8015a42:	e7d6      	b.n	80159f2 <__swbuf_r+0x2a>

08015a44 <__swsetup_r>:
 8015a44:	b538      	push	{r3, r4, r5, lr}
 8015a46:	4b29      	ldr	r3, [pc, #164]	@ (8015aec <__swsetup_r+0xa8>)
 8015a48:	4605      	mov	r5, r0
 8015a4a:	6818      	ldr	r0, [r3, #0]
 8015a4c:	460c      	mov	r4, r1
 8015a4e:	b118      	cbz	r0, 8015a58 <__swsetup_r+0x14>
 8015a50:	6a03      	ldr	r3, [r0, #32]
 8015a52:	b90b      	cbnz	r3, 8015a58 <__swsetup_r+0x14>
 8015a54:	f7fc f878 	bl	8011b48 <__sinit>
 8015a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a5c:	0719      	lsls	r1, r3, #28
 8015a5e:	d422      	bmi.n	8015aa6 <__swsetup_r+0x62>
 8015a60:	06da      	lsls	r2, r3, #27
 8015a62:	d407      	bmi.n	8015a74 <__swsetup_r+0x30>
 8015a64:	2209      	movs	r2, #9
 8015a66:	602a      	str	r2, [r5, #0]
 8015a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015a6c:	81a3      	strh	r3, [r4, #12]
 8015a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8015a72:	e033      	b.n	8015adc <__swsetup_r+0x98>
 8015a74:	0758      	lsls	r0, r3, #29
 8015a76:	d512      	bpl.n	8015a9e <__swsetup_r+0x5a>
 8015a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015a7a:	b141      	cbz	r1, 8015a8e <__swsetup_r+0x4a>
 8015a7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015a80:	4299      	cmp	r1, r3
 8015a82:	d002      	beq.n	8015a8a <__swsetup_r+0x46>
 8015a84:	4628      	mov	r0, r5
 8015a86:	f7fd f817 	bl	8012ab8 <_free_r>
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8015a8e:	89a3      	ldrh	r3, [r4, #12]
 8015a90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015a94:	81a3      	strh	r3, [r4, #12]
 8015a96:	2300      	movs	r3, #0
 8015a98:	6063      	str	r3, [r4, #4]
 8015a9a:	6923      	ldr	r3, [r4, #16]
 8015a9c:	6023      	str	r3, [r4, #0]
 8015a9e:	89a3      	ldrh	r3, [r4, #12]
 8015aa0:	f043 0308 	orr.w	r3, r3, #8
 8015aa4:	81a3      	strh	r3, [r4, #12]
 8015aa6:	6923      	ldr	r3, [r4, #16]
 8015aa8:	b94b      	cbnz	r3, 8015abe <__swsetup_r+0x7a>
 8015aaa:	89a3      	ldrh	r3, [r4, #12]
 8015aac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015ab4:	d003      	beq.n	8015abe <__swsetup_r+0x7a>
 8015ab6:	4621      	mov	r1, r4
 8015ab8:	4628      	mov	r0, r5
 8015aba:	f000 f883 	bl	8015bc4 <__smakebuf_r>
 8015abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015ac2:	f013 0201 	ands.w	r2, r3, #1
 8015ac6:	d00a      	beq.n	8015ade <__swsetup_r+0x9a>
 8015ac8:	2200      	movs	r2, #0
 8015aca:	60a2      	str	r2, [r4, #8]
 8015acc:	6962      	ldr	r2, [r4, #20]
 8015ace:	4252      	negs	r2, r2
 8015ad0:	61a2      	str	r2, [r4, #24]
 8015ad2:	6922      	ldr	r2, [r4, #16]
 8015ad4:	b942      	cbnz	r2, 8015ae8 <__swsetup_r+0xa4>
 8015ad6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015ada:	d1c5      	bne.n	8015a68 <__swsetup_r+0x24>
 8015adc:	bd38      	pop	{r3, r4, r5, pc}
 8015ade:	0799      	lsls	r1, r3, #30
 8015ae0:	bf58      	it	pl
 8015ae2:	6962      	ldrpl	r2, [r4, #20]
 8015ae4:	60a2      	str	r2, [r4, #8]
 8015ae6:	e7f4      	b.n	8015ad2 <__swsetup_r+0x8e>
 8015ae8:	2000      	movs	r0, #0
 8015aea:	e7f7      	b.n	8015adc <__swsetup_r+0x98>
 8015aec:	200001e4 	.word	0x200001e4

08015af0 <_raise_r>:
 8015af0:	291f      	cmp	r1, #31
 8015af2:	b538      	push	{r3, r4, r5, lr}
 8015af4:	4605      	mov	r5, r0
 8015af6:	460c      	mov	r4, r1
 8015af8:	d904      	bls.n	8015b04 <_raise_r+0x14>
 8015afa:	2316      	movs	r3, #22
 8015afc:	6003      	str	r3, [r0, #0]
 8015afe:	f04f 30ff 	mov.w	r0, #4294967295
 8015b02:	bd38      	pop	{r3, r4, r5, pc}
 8015b04:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015b06:	b112      	cbz	r2, 8015b0e <_raise_r+0x1e>
 8015b08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015b0c:	b94b      	cbnz	r3, 8015b22 <_raise_r+0x32>
 8015b0e:	4628      	mov	r0, r5
 8015b10:	f000 f830 	bl	8015b74 <_getpid_r>
 8015b14:	4622      	mov	r2, r4
 8015b16:	4601      	mov	r1, r0
 8015b18:	4628      	mov	r0, r5
 8015b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015b1e:	f000 b817 	b.w	8015b50 <_kill_r>
 8015b22:	2b01      	cmp	r3, #1
 8015b24:	d00a      	beq.n	8015b3c <_raise_r+0x4c>
 8015b26:	1c59      	adds	r1, r3, #1
 8015b28:	d103      	bne.n	8015b32 <_raise_r+0x42>
 8015b2a:	2316      	movs	r3, #22
 8015b2c:	6003      	str	r3, [r0, #0]
 8015b2e:	2001      	movs	r0, #1
 8015b30:	e7e7      	b.n	8015b02 <_raise_r+0x12>
 8015b32:	2100      	movs	r1, #0
 8015b34:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015b38:	4620      	mov	r0, r4
 8015b3a:	4798      	blx	r3
 8015b3c:	2000      	movs	r0, #0
 8015b3e:	e7e0      	b.n	8015b02 <_raise_r+0x12>

08015b40 <raise>:
 8015b40:	4b02      	ldr	r3, [pc, #8]	@ (8015b4c <raise+0xc>)
 8015b42:	4601      	mov	r1, r0
 8015b44:	6818      	ldr	r0, [r3, #0]
 8015b46:	f7ff bfd3 	b.w	8015af0 <_raise_r>
 8015b4a:	bf00      	nop
 8015b4c:	200001e4 	.word	0x200001e4

08015b50 <_kill_r>:
 8015b50:	b538      	push	{r3, r4, r5, lr}
 8015b52:	4d07      	ldr	r5, [pc, #28]	@ (8015b70 <_kill_r+0x20>)
 8015b54:	2300      	movs	r3, #0
 8015b56:	4604      	mov	r4, r0
 8015b58:	4608      	mov	r0, r1
 8015b5a:	4611      	mov	r1, r2
 8015b5c:	602b      	str	r3, [r5, #0]
 8015b5e:	f7ee fc5f 	bl	8004420 <_kill>
 8015b62:	1c43      	adds	r3, r0, #1
 8015b64:	d102      	bne.n	8015b6c <_kill_r+0x1c>
 8015b66:	682b      	ldr	r3, [r5, #0]
 8015b68:	b103      	cbz	r3, 8015b6c <_kill_r+0x1c>
 8015b6a:	6023      	str	r3, [r4, #0]
 8015b6c:	bd38      	pop	{r3, r4, r5, pc}
 8015b6e:	bf00      	nop
 8015b70:	200026d4 	.word	0x200026d4

08015b74 <_getpid_r>:
 8015b74:	f7ee bc4c 	b.w	8004410 <_getpid>

08015b78 <__swhatbuf_r>:
 8015b78:	b570      	push	{r4, r5, r6, lr}
 8015b7a:	460c      	mov	r4, r1
 8015b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b80:	2900      	cmp	r1, #0
 8015b82:	b096      	sub	sp, #88	@ 0x58
 8015b84:	4615      	mov	r5, r2
 8015b86:	461e      	mov	r6, r3
 8015b88:	da0d      	bge.n	8015ba6 <__swhatbuf_r+0x2e>
 8015b8a:	89a3      	ldrh	r3, [r4, #12]
 8015b8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015b90:	f04f 0100 	mov.w	r1, #0
 8015b94:	bf14      	ite	ne
 8015b96:	2340      	movne	r3, #64	@ 0x40
 8015b98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015b9c:	2000      	movs	r0, #0
 8015b9e:	6031      	str	r1, [r6, #0]
 8015ba0:	602b      	str	r3, [r5, #0]
 8015ba2:	b016      	add	sp, #88	@ 0x58
 8015ba4:	bd70      	pop	{r4, r5, r6, pc}
 8015ba6:	466a      	mov	r2, sp
 8015ba8:	f000 f848 	bl	8015c3c <_fstat_r>
 8015bac:	2800      	cmp	r0, #0
 8015bae:	dbec      	blt.n	8015b8a <__swhatbuf_r+0x12>
 8015bb0:	9901      	ldr	r1, [sp, #4]
 8015bb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015bb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015bba:	4259      	negs	r1, r3
 8015bbc:	4159      	adcs	r1, r3
 8015bbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015bc2:	e7eb      	b.n	8015b9c <__swhatbuf_r+0x24>

08015bc4 <__smakebuf_r>:
 8015bc4:	898b      	ldrh	r3, [r1, #12]
 8015bc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015bc8:	079d      	lsls	r5, r3, #30
 8015bca:	4606      	mov	r6, r0
 8015bcc:	460c      	mov	r4, r1
 8015bce:	d507      	bpl.n	8015be0 <__smakebuf_r+0x1c>
 8015bd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015bd4:	6023      	str	r3, [r4, #0]
 8015bd6:	6123      	str	r3, [r4, #16]
 8015bd8:	2301      	movs	r3, #1
 8015bda:	6163      	str	r3, [r4, #20]
 8015bdc:	b003      	add	sp, #12
 8015bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015be0:	ab01      	add	r3, sp, #4
 8015be2:	466a      	mov	r2, sp
 8015be4:	f7ff ffc8 	bl	8015b78 <__swhatbuf_r>
 8015be8:	9f00      	ldr	r7, [sp, #0]
 8015bea:	4605      	mov	r5, r0
 8015bec:	4639      	mov	r1, r7
 8015bee:	4630      	mov	r0, r6
 8015bf0:	f7fc ffd6 	bl	8012ba0 <_malloc_r>
 8015bf4:	b948      	cbnz	r0, 8015c0a <__smakebuf_r+0x46>
 8015bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bfa:	059a      	lsls	r2, r3, #22
 8015bfc:	d4ee      	bmi.n	8015bdc <__smakebuf_r+0x18>
 8015bfe:	f023 0303 	bic.w	r3, r3, #3
 8015c02:	f043 0302 	orr.w	r3, r3, #2
 8015c06:	81a3      	strh	r3, [r4, #12]
 8015c08:	e7e2      	b.n	8015bd0 <__smakebuf_r+0xc>
 8015c0a:	89a3      	ldrh	r3, [r4, #12]
 8015c0c:	6020      	str	r0, [r4, #0]
 8015c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015c12:	81a3      	strh	r3, [r4, #12]
 8015c14:	9b01      	ldr	r3, [sp, #4]
 8015c16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015c1a:	b15b      	cbz	r3, 8015c34 <__smakebuf_r+0x70>
 8015c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c20:	4630      	mov	r0, r6
 8015c22:	f000 f81d 	bl	8015c60 <_isatty_r>
 8015c26:	b128      	cbz	r0, 8015c34 <__smakebuf_r+0x70>
 8015c28:	89a3      	ldrh	r3, [r4, #12]
 8015c2a:	f023 0303 	bic.w	r3, r3, #3
 8015c2e:	f043 0301 	orr.w	r3, r3, #1
 8015c32:	81a3      	strh	r3, [r4, #12]
 8015c34:	89a3      	ldrh	r3, [r4, #12]
 8015c36:	431d      	orrs	r5, r3
 8015c38:	81a5      	strh	r5, [r4, #12]
 8015c3a:	e7cf      	b.n	8015bdc <__smakebuf_r+0x18>

08015c3c <_fstat_r>:
 8015c3c:	b538      	push	{r3, r4, r5, lr}
 8015c3e:	4d07      	ldr	r5, [pc, #28]	@ (8015c5c <_fstat_r+0x20>)
 8015c40:	2300      	movs	r3, #0
 8015c42:	4604      	mov	r4, r0
 8015c44:	4608      	mov	r0, r1
 8015c46:	4611      	mov	r1, r2
 8015c48:	602b      	str	r3, [r5, #0]
 8015c4a:	f7ee fc49 	bl	80044e0 <_fstat>
 8015c4e:	1c43      	adds	r3, r0, #1
 8015c50:	d102      	bne.n	8015c58 <_fstat_r+0x1c>
 8015c52:	682b      	ldr	r3, [r5, #0]
 8015c54:	b103      	cbz	r3, 8015c58 <_fstat_r+0x1c>
 8015c56:	6023      	str	r3, [r4, #0]
 8015c58:	bd38      	pop	{r3, r4, r5, pc}
 8015c5a:	bf00      	nop
 8015c5c:	200026d4 	.word	0x200026d4

08015c60 <_isatty_r>:
 8015c60:	b538      	push	{r3, r4, r5, lr}
 8015c62:	4d06      	ldr	r5, [pc, #24]	@ (8015c7c <_isatty_r+0x1c>)
 8015c64:	2300      	movs	r3, #0
 8015c66:	4604      	mov	r4, r0
 8015c68:	4608      	mov	r0, r1
 8015c6a:	602b      	str	r3, [r5, #0]
 8015c6c:	f7ee fc48 	bl	8004500 <_isatty>
 8015c70:	1c43      	adds	r3, r0, #1
 8015c72:	d102      	bne.n	8015c7a <_isatty_r+0x1a>
 8015c74:	682b      	ldr	r3, [r5, #0]
 8015c76:	b103      	cbz	r3, 8015c7a <_isatty_r+0x1a>
 8015c78:	6023      	str	r3, [r4, #0]
 8015c7a:	bd38      	pop	{r3, r4, r5, pc}
 8015c7c:	200026d4 	.word	0x200026d4

08015c80 <pow>:
 8015c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c82:	ed2d 8b02 	vpush	{d8}
 8015c86:	eeb0 8a40 	vmov.f32	s16, s0
 8015c8a:	eef0 8a60 	vmov.f32	s17, s1
 8015c8e:	ec55 4b11 	vmov	r4, r5, d1
 8015c92:	f000 f891 	bl	8015db8 <__ieee754_pow>
 8015c96:	4622      	mov	r2, r4
 8015c98:	462b      	mov	r3, r5
 8015c9a:	4620      	mov	r0, r4
 8015c9c:	4629      	mov	r1, r5
 8015c9e:	ec57 6b10 	vmov	r6, r7, d0
 8015ca2:	f7ea ff6b 	bl	8000b7c <__aeabi_dcmpun>
 8015ca6:	2800      	cmp	r0, #0
 8015ca8:	d13b      	bne.n	8015d22 <pow+0xa2>
 8015caa:	ec51 0b18 	vmov	r0, r1, d8
 8015cae:	2200      	movs	r2, #0
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	f7ea ff31 	bl	8000b18 <__aeabi_dcmpeq>
 8015cb6:	b1b8      	cbz	r0, 8015ce8 <pow+0x68>
 8015cb8:	2200      	movs	r2, #0
 8015cba:	2300      	movs	r3, #0
 8015cbc:	4620      	mov	r0, r4
 8015cbe:	4629      	mov	r1, r5
 8015cc0:	f7ea ff2a 	bl	8000b18 <__aeabi_dcmpeq>
 8015cc4:	2800      	cmp	r0, #0
 8015cc6:	d146      	bne.n	8015d56 <pow+0xd6>
 8015cc8:	ec45 4b10 	vmov	d0, r4, r5
 8015ccc:	f000 f866 	bl	8015d9c <finite>
 8015cd0:	b338      	cbz	r0, 8015d22 <pow+0xa2>
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	2300      	movs	r3, #0
 8015cd6:	4620      	mov	r0, r4
 8015cd8:	4629      	mov	r1, r5
 8015cda:	f7ea ff27 	bl	8000b2c <__aeabi_dcmplt>
 8015cde:	b300      	cbz	r0, 8015d22 <pow+0xa2>
 8015ce0:	f7fc f85c 	bl	8011d9c <__errno>
 8015ce4:	2322      	movs	r3, #34	@ 0x22
 8015ce6:	e01b      	b.n	8015d20 <pow+0xa0>
 8015ce8:	ec47 6b10 	vmov	d0, r6, r7
 8015cec:	f000 f856 	bl	8015d9c <finite>
 8015cf0:	b9e0      	cbnz	r0, 8015d2c <pow+0xac>
 8015cf2:	eeb0 0a48 	vmov.f32	s0, s16
 8015cf6:	eef0 0a68 	vmov.f32	s1, s17
 8015cfa:	f000 f84f 	bl	8015d9c <finite>
 8015cfe:	b1a8      	cbz	r0, 8015d2c <pow+0xac>
 8015d00:	ec45 4b10 	vmov	d0, r4, r5
 8015d04:	f000 f84a 	bl	8015d9c <finite>
 8015d08:	b180      	cbz	r0, 8015d2c <pow+0xac>
 8015d0a:	4632      	mov	r2, r6
 8015d0c:	463b      	mov	r3, r7
 8015d0e:	4630      	mov	r0, r6
 8015d10:	4639      	mov	r1, r7
 8015d12:	f7ea ff33 	bl	8000b7c <__aeabi_dcmpun>
 8015d16:	2800      	cmp	r0, #0
 8015d18:	d0e2      	beq.n	8015ce0 <pow+0x60>
 8015d1a:	f7fc f83f 	bl	8011d9c <__errno>
 8015d1e:	2321      	movs	r3, #33	@ 0x21
 8015d20:	6003      	str	r3, [r0, #0]
 8015d22:	ecbd 8b02 	vpop	{d8}
 8015d26:	ec47 6b10 	vmov	d0, r6, r7
 8015d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	2300      	movs	r3, #0
 8015d30:	4630      	mov	r0, r6
 8015d32:	4639      	mov	r1, r7
 8015d34:	f7ea fef0 	bl	8000b18 <__aeabi_dcmpeq>
 8015d38:	2800      	cmp	r0, #0
 8015d3a:	d0f2      	beq.n	8015d22 <pow+0xa2>
 8015d3c:	eeb0 0a48 	vmov.f32	s0, s16
 8015d40:	eef0 0a68 	vmov.f32	s1, s17
 8015d44:	f000 f82a 	bl	8015d9c <finite>
 8015d48:	2800      	cmp	r0, #0
 8015d4a:	d0ea      	beq.n	8015d22 <pow+0xa2>
 8015d4c:	ec45 4b10 	vmov	d0, r4, r5
 8015d50:	f000 f824 	bl	8015d9c <finite>
 8015d54:	e7c3      	b.n	8015cde <pow+0x5e>
 8015d56:	4f01      	ldr	r7, [pc, #4]	@ (8015d5c <pow+0xdc>)
 8015d58:	2600      	movs	r6, #0
 8015d5a:	e7e2      	b.n	8015d22 <pow+0xa2>
 8015d5c:	3ff00000 	.word	0x3ff00000

08015d60 <sqrtf>:
 8015d60:	b508      	push	{r3, lr}
 8015d62:	ed2d 8b02 	vpush	{d8}
 8015d66:	eeb0 8a40 	vmov.f32	s16, s0
 8015d6a:	f000 f822 	bl	8015db2 <__ieee754_sqrtf>
 8015d6e:	eeb4 8a48 	vcmp.f32	s16, s16
 8015d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d76:	d60c      	bvs.n	8015d92 <sqrtf+0x32>
 8015d78:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8015d98 <sqrtf+0x38>
 8015d7c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d84:	d505      	bpl.n	8015d92 <sqrtf+0x32>
 8015d86:	f7fc f809 	bl	8011d9c <__errno>
 8015d8a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8015d8e:	2321      	movs	r3, #33	@ 0x21
 8015d90:	6003      	str	r3, [r0, #0]
 8015d92:	ecbd 8b02 	vpop	{d8}
 8015d96:	bd08      	pop	{r3, pc}
 8015d98:	00000000 	.word	0x00000000

08015d9c <finite>:
 8015d9c:	b082      	sub	sp, #8
 8015d9e:	ed8d 0b00 	vstr	d0, [sp]
 8015da2:	9801      	ldr	r0, [sp, #4]
 8015da4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8015da8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015dac:	0fc0      	lsrs	r0, r0, #31
 8015dae:	b002      	add	sp, #8
 8015db0:	4770      	bx	lr

08015db2 <__ieee754_sqrtf>:
 8015db2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015db6:	4770      	bx	lr

08015db8 <__ieee754_pow>:
 8015db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015dbc:	b091      	sub	sp, #68	@ 0x44
 8015dbe:	ed8d 1b00 	vstr	d1, [sp]
 8015dc2:	e9dd 1900 	ldrd	r1, r9, [sp]
 8015dc6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015dca:	ea5a 0001 	orrs.w	r0, sl, r1
 8015dce:	ec57 6b10 	vmov	r6, r7, d0
 8015dd2:	d113      	bne.n	8015dfc <__ieee754_pow+0x44>
 8015dd4:	19b3      	adds	r3, r6, r6
 8015dd6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015dda:	4152      	adcs	r2, r2
 8015ddc:	4298      	cmp	r0, r3
 8015dde:	4b98      	ldr	r3, [pc, #608]	@ (8016040 <__ieee754_pow+0x288>)
 8015de0:	4193      	sbcs	r3, r2
 8015de2:	f080 84ea 	bcs.w	80167ba <__ieee754_pow+0xa02>
 8015de6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015dea:	4630      	mov	r0, r6
 8015dec:	4639      	mov	r1, r7
 8015dee:	f7ea fa75 	bl	80002dc <__adddf3>
 8015df2:	ec41 0b10 	vmov	d0, r0, r1
 8015df6:	b011      	add	sp, #68	@ 0x44
 8015df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dfc:	4a91      	ldr	r2, [pc, #580]	@ (8016044 <__ieee754_pow+0x28c>)
 8015dfe:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8015e02:	4590      	cmp	r8, r2
 8015e04:	463d      	mov	r5, r7
 8015e06:	4633      	mov	r3, r6
 8015e08:	d806      	bhi.n	8015e18 <__ieee754_pow+0x60>
 8015e0a:	d101      	bne.n	8015e10 <__ieee754_pow+0x58>
 8015e0c:	2e00      	cmp	r6, #0
 8015e0e:	d1ea      	bne.n	8015de6 <__ieee754_pow+0x2e>
 8015e10:	4592      	cmp	sl, r2
 8015e12:	d801      	bhi.n	8015e18 <__ieee754_pow+0x60>
 8015e14:	d10e      	bne.n	8015e34 <__ieee754_pow+0x7c>
 8015e16:	b169      	cbz	r1, 8015e34 <__ieee754_pow+0x7c>
 8015e18:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8015e1c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8015e20:	431d      	orrs	r5, r3
 8015e22:	d1e0      	bne.n	8015de6 <__ieee754_pow+0x2e>
 8015e24:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015e28:	18db      	adds	r3, r3, r3
 8015e2a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015e2e:	4152      	adcs	r2, r2
 8015e30:	429d      	cmp	r5, r3
 8015e32:	e7d4      	b.n	8015dde <__ieee754_pow+0x26>
 8015e34:	2d00      	cmp	r5, #0
 8015e36:	46c3      	mov	fp, r8
 8015e38:	da3a      	bge.n	8015eb0 <__ieee754_pow+0xf8>
 8015e3a:	4a83      	ldr	r2, [pc, #524]	@ (8016048 <__ieee754_pow+0x290>)
 8015e3c:	4592      	cmp	sl, r2
 8015e3e:	d84d      	bhi.n	8015edc <__ieee754_pow+0x124>
 8015e40:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8015e44:	4592      	cmp	sl, r2
 8015e46:	f240 84c7 	bls.w	80167d8 <__ieee754_pow+0xa20>
 8015e4a:	ea4f 522a 	mov.w	r2, sl, asr #20
 8015e4e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015e52:	2a14      	cmp	r2, #20
 8015e54:	dd0f      	ble.n	8015e76 <__ieee754_pow+0xbe>
 8015e56:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8015e5a:	fa21 f402 	lsr.w	r4, r1, r2
 8015e5e:	fa04 f202 	lsl.w	r2, r4, r2
 8015e62:	428a      	cmp	r2, r1
 8015e64:	f040 84b8 	bne.w	80167d8 <__ieee754_pow+0xa20>
 8015e68:	f004 0401 	and.w	r4, r4, #1
 8015e6c:	f1c4 0402 	rsb	r4, r4, #2
 8015e70:	2900      	cmp	r1, #0
 8015e72:	d158      	bne.n	8015f26 <__ieee754_pow+0x16e>
 8015e74:	e00e      	b.n	8015e94 <__ieee754_pow+0xdc>
 8015e76:	2900      	cmp	r1, #0
 8015e78:	d154      	bne.n	8015f24 <__ieee754_pow+0x16c>
 8015e7a:	f1c2 0214 	rsb	r2, r2, #20
 8015e7e:	fa4a f402 	asr.w	r4, sl, r2
 8015e82:	fa04 f202 	lsl.w	r2, r4, r2
 8015e86:	4552      	cmp	r2, sl
 8015e88:	f040 84a3 	bne.w	80167d2 <__ieee754_pow+0xa1a>
 8015e8c:	f004 0401 	and.w	r4, r4, #1
 8015e90:	f1c4 0402 	rsb	r4, r4, #2
 8015e94:	4a6d      	ldr	r2, [pc, #436]	@ (801604c <__ieee754_pow+0x294>)
 8015e96:	4592      	cmp	sl, r2
 8015e98:	d12e      	bne.n	8015ef8 <__ieee754_pow+0x140>
 8015e9a:	f1b9 0f00 	cmp.w	r9, #0
 8015e9e:	f280 8494 	bge.w	80167ca <__ieee754_pow+0xa12>
 8015ea2:	496a      	ldr	r1, [pc, #424]	@ (801604c <__ieee754_pow+0x294>)
 8015ea4:	4632      	mov	r2, r6
 8015ea6:	463b      	mov	r3, r7
 8015ea8:	2000      	movs	r0, #0
 8015eaa:	f7ea fcf7 	bl	800089c <__aeabi_ddiv>
 8015eae:	e7a0      	b.n	8015df2 <__ieee754_pow+0x3a>
 8015eb0:	2400      	movs	r4, #0
 8015eb2:	bbc1      	cbnz	r1, 8015f26 <__ieee754_pow+0x16e>
 8015eb4:	4a63      	ldr	r2, [pc, #396]	@ (8016044 <__ieee754_pow+0x28c>)
 8015eb6:	4592      	cmp	sl, r2
 8015eb8:	d1ec      	bne.n	8015e94 <__ieee754_pow+0xdc>
 8015eba:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8015ebe:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8015ec2:	431a      	orrs	r2, r3
 8015ec4:	f000 8479 	beq.w	80167ba <__ieee754_pow+0xa02>
 8015ec8:	4b61      	ldr	r3, [pc, #388]	@ (8016050 <__ieee754_pow+0x298>)
 8015eca:	4598      	cmp	r8, r3
 8015ecc:	d908      	bls.n	8015ee0 <__ieee754_pow+0x128>
 8015ece:	f1b9 0f00 	cmp.w	r9, #0
 8015ed2:	f2c0 8476 	blt.w	80167c2 <__ieee754_pow+0xa0a>
 8015ed6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015eda:	e78a      	b.n	8015df2 <__ieee754_pow+0x3a>
 8015edc:	2402      	movs	r4, #2
 8015ede:	e7e8      	b.n	8015eb2 <__ieee754_pow+0xfa>
 8015ee0:	f1b9 0f00 	cmp.w	r9, #0
 8015ee4:	f04f 0000 	mov.w	r0, #0
 8015ee8:	f04f 0100 	mov.w	r1, #0
 8015eec:	da81      	bge.n	8015df2 <__ieee754_pow+0x3a>
 8015eee:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015ef2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8015ef6:	e77c      	b.n	8015df2 <__ieee754_pow+0x3a>
 8015ef8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8015efc:	d106      	bne.n	8015f0c <__ieee754_pow+0x154>
 8015efe:	4632      	mov	r2, r6
 8015f00:	463b      	mov	r3, r7
 8015f02:	4630      	mov	r0, r6
 8015f04:	4639      	mov	r1, r7
 8015f06:	f7ea fb9f 	bl	8000648 <__aeabi_dmul>
 8015f0a:	e772      	b.n	8015df2 <__ieee754_pow+0x3a>
 8015f0c:	4a51      	ldr	r2, [pc, #324]	@ (8016054 <__ieee754_pow+0x29c>)
 8015f0e:	4591      	cmp	r9, r2
 8015f10:	d109      	bne.n	8015f26 <__ieee754_pow+0x16e>
 8015f12:	2d00      	cmp	r5, #0
 8015f14:	db07      	blt.n	8015f26 <__ieee754_pow+0x16e>
 8015f16:	ec47 6b10 	vmov	d0, r6, r7
 8015f1a:	b011      	add	sp, #68	@ 0x44
 8015f1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f20:	f000 bd52 	b.w	80169c8 <__ieee754_sqrt>
 8015f24:	2400      	movs	r4, #0
 8015f26:	ec47 6b10 	vmov	d0, r6, r7
 8015f2a:	9302      	str	r3, [sp, #8]
 8015f2c:	f000 fc88 	bl	8016840 <fabs>
 8015f30:	9b02      	ldr	r3, [sp, #8]
 8015f32:	ec51 0b10 	vmov	r0, r1, d0
 8015f36:	bb53      	cbnz	r3, 8015f8e <__ieee754_pow+0x1d6>
 8015f38:	4b44      	ldr	r3, [pc, #272]	@ (801604c <__ieee754_pow+0x294>)
 8015f3a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d002      	beq.n	8015f48 <__ieee754_pow+0x190>
 8015f42:	f1b8 0f00 	cmp.w	r8, #0
 8015f46:	d122      	bne.n	8015f8e <__ieee754_pow+0x1d6>
 8015f48:	f1b9 0f00 	cmp.w	r9, #0
 8015f4c:	da05      	bge.n	8015f5a <__ieee754_pow+0x1a2>
 8015f4e:	4602      	mov	r2, r0
 8015f50:	460b      	mov	r3, r1
 8015f52:	2000      	movs	r0, #0
 8015f54:	493d      	ldr	r1, [pc, #244]	@ (801604c <__ieee754_pow+0x294>)
 8015f56:	f7ea fca1 	bl	800089c <__aeabi_ddiv>
 8015f5a:	2d00      	cmp	r5, #0
 8015f5c:	f6bf af49 	bge.w	8015df2 <__ieee754_pow+0x3a>
 8015f60:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8015f64:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8015f68:	ea58 0804 	orrs.w	r8, r8, r4
 8015f6c:	d108      	bne.n	8015f80 <__ieee754_pow+0x1c8>
 8015f6e:	4602      	mov	r2, r0
 8015f70:	460b      	mov	r3, r1
 8015f72:	4610      	mov	r0, r2
 8015f74:	4619      	mov	r1, r3
 8015f76:	f7ea f9af 	bl	80002d8 <__aeabi_dsub>
 8015f7a:	4602      	mov	r2, r0
 8015f7c:	460b      	mov	r3, r1
 8015f7e:	e794      	b.n	8015eaa <__ieee754_pow+0xf2>
 8015f80:	2c01      	cmp	r4, #1
 8015f82:	f47f af36 	bne.w	8015df2 <__ieee754_pow+0x3a>
 8015f86:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8015f8a:	4619      	mov	r1, r3
 8015f8c:	e731      	b.n	8015df2 <__ieee754_pow+0x3a>
 8015f8e:	0feb      	lsrs	r3, r5, #31
 8015f90:	3b01      	subs	r3, #1
 8015f92:	ea53 0204 	orrs.w	r2, r3, r4
 8015f96:	d102      	bne.n	8015f9e <__ieee754_pow+0x1e6>
 8015f98:	4632      	mov	r2, r6
 8015f9a:	463b      	mov	r3, r7
 8015f9c:	e7e9      	b.n	8015f72 <__ieee754_pow+0x1ba>
 8015f9e:	3c01      	subs	r4, #1
 8015fa0:	431c      	orrs	r4, r3
 8015fa2:	d016      	beq.n	8015fd2 <__ieee754_pow+0x21a>
 8015fa4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8016030 <__ieee754_pow+0x278>
 8015fa8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8015fac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015fb0:	f240 8112 	bls.w	80161d8 <__ieee754_pow+0x420>
 8015fb4:	4b28      	ldr	r3, [pc, #160]	@ (8016058 <__ieee754_pow+0x2a0>)
 8015fb6:	459a      	cmp	sl, r3
 8015fb8:	4b25      	ldr	r3, [pc, #148]	@ (8016050 <__ieee754_pow+0x298>)
 8015fba:	d916      	bls.n	8015fea <__ieee754_pow+0x232>
 8015fbc:	4598      	cmp	r8, r3
 8015fbe:	d80b      	bhi.n	8015fd8 <__ieee754_pow+0x220>
 8015fc0:	f1b9 0f00 	cmp.w	r9, #0
 8015fc4:	da0b      	bge.n	8015fde <__ieee754_pow+0x226>
 8015fc6:	2000      	movs	r0, #0
 8015fc8:	b011      	add	sp, #68	@ 0x44
 8015fca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fce:	f000 bcf3 	b.w	80169b8 <__math_oflow>
 8015fd2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8016038 <__ieee754_pow+0x280>
 8015fd6:	e7e7      	b.n	8015fa8 <__ieee754_pow+0x1f0>
 8015fd8:	f1b9 0f00 	cmp.w	r9, #0
 8015fdc:	dcf3      	bgt.n	8015fc6 <__ieee754_pow+0x20e>
 8015fde:	2000      	movs	r0, #0
 8015fe0:	b011      	add	sp, #68	@ 0x44
 8015fe2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe6:	f000 bcdf 	b.w	80169a8 <__math_uflow>
 8015fea:	4598      	cmp	r8, r3
 8015fec:	d20c      	bcs.n	8016008 <__ieee754_pow+0x250>
 8015fee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	f7ea fd99 	bl	8000b2c <__aeabi_dcmplt>
 8015ffa:	3800      	subs	r0, #0
 8015ffc:	bf18      	it	ne
 8015ffe:	2001      	movne	r0, #1
 8016000:	f1b9 0f00 	cmp.w	r9, #0
 8016004:	daec      	bge.n	8015fe0 <__ieee754_pow+0x228>
 8016006:	e7df      	b.n	8015fc8 <__ieee754_pow+0x210>
 8016008:	4b10      	ldr	r3, [pc, #64]	@ (801604c <__ieee754_pow+0x294>)
 801600a:	4598      	cmp	r8, r3
 801600c:	f04f 0200 	mov.w	r2, #0
 8016010:	d924      	bls.n	801605c <__ieee754_pow+0x2a4>
 8016012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016016:	2300      	movs	r3, #0
 8016018:	f7ea fd88 	bl	8000b2c <__aeabi_dcmplt>
 801601c:	3800      	subs	r0, #0
 801601e:	bf18      	it	ne
 8016020:	2001      	movne	r0, #1
 8016022:	f1b9 0f00 	cmp.w	r9, #0
 8016026:	dccf      	bgt.n	8015fc8 <__ieee754_pow+0x210>
 8016028:	e7da      	b.n	8015fe0 <__ieee754_pow+0x228>
 801602a:	bf00      	nop
 801602c:	f3af 8000 	nop.w
 8016030:	00000000 	.word	0x00000000
 8016034:	3ff00000 	.word	0x3ff00000
 8016038:	00000000 	.word	0x00000000
 801603c:	bff00000 	.word	0xbff00000
 8016040:	fff00000 	.word	0xfff00000
 8016044:	7ff00000 	.word	0x7ff00000
 8016048:	433fffff 	.word	0x433fffff
 801604c:	3ff00000 	.word	0x3ff00000
 8016050:	3fefffff 	.word	0x3fefffff
 8016054:	3fe00000 	.word	0x3fe00000
 8016058:	43f00000 	.word	0x43f00000
 801605c:	4b5a      	ldr	r3, [pc, #360]	@ (80161c8 <__ieee754_pow+0x410>)
 801605e:	f7ea f93b 	bl	80002d8 <__aeabi_dsub>
 8016062:	a351      	add	r3, pc, #324	@ (adr r3, 80161a8 <__ieee754_pow+0x3f0>)
 8016064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016068:	4604      	mov	r4, r0
 801606a:	460d      	mov	r5, r1
 801606c:	f7ea faec 	bl	8000648 <__aeabi_dmul>
 8016070:	a34f      	add	r3, pc, #316	@ (adr r3, 80161b0 <__ieee754_pow+0x3f8>)
 8016072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016076:	4606      	mov	r6, r0
 8016078:	460f      	mov	r7, r1
 801607a:	4620      	mov	r0, r4
 801607c:	4629      	mov	r1, r5
 801607e:	f7ea fae3 	bl	8000648 <__aeabi_dmul>
 8016082:	4b52      	ldr	r3, [pc, #328]	@ (80161cc <__ieee754_pow+0x414>)
 8016084:	4682      	mov	sl, r0
 8016086:	468b      	mov	fp, r1
 8016088:	2200      	movs	r2, #0
 801608a:	4620      	mov	r0, r4
 801608c:	4629      	mov	r1, r5
 801608e:	f7ea fadb 	bl	8000648 <__aeabi_dmul>
 8016092:	4602      	mov	r2, r0
 8016094:	460b      	mov	r3, r1
 8016096:	a148      	add	r1, pc, #288	@ (adr r1, 80161b8 <__ieee754_pow+0x400>)
 8016098:	e9d1 0100 	ldrd	r0, r1, [r1]
 801609c:	f7ea f91c 	bl	80002d8 <__aeabi_dsub>
 80160a0:	4622      	mov	r2, r4
 80160a2:	462b      	mov	r3, r5
 80160a4:	f7ea fad0 	bl	8000648 <__aeabi_dmul>
 80160a8:	4602      	mov	r2, r0
 80160aa:	460b      	mov	r3, r1
 80160ac:	2000      	movs	r0, #0
 80160ae:	4948      	ldr	r1, [pc, #288]	@ (80161d0 <__ieee754_pow+0x418>)
 80160b0:	f7ea f912 	bl	80002d8 <__aeabi_dsub>
 80160b4:	4622      	mov	r2, r4
 80160b6:	4680      	mov	r8, r0
 80160b8:	4689      	mov	r9, r1
 80160ba:	462b      	mov	r3, r5
 80160bc:	4620      	mov	r0, r4
 80160be:	4629      	mov	r1, r5
 80160c0:	f7ea fac2 	bl	8000648 <__aeabi_dmul>
 80160c4:	4602      	mov	r2, r0
 80160c6:	460b      	mov	r3, r1
 80160c8:	4640      	mov	r0, r8
 80160ca:	4649      	mov	r1, r9
 80160cc:	f7ea fabc 	bl	8000648 <__aeabi_dmul>
 80160d0:	a33b      	add	r3, pc, #236	@ (adr r3, 80161c0 <__ieee754_pow+0x408>)
 80160d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80160d6:	f7ea fab7 	bl	8000648 <__aeabi_dmul>
 80160da:	4602      	mov	r2, r0
 80160dc:	460b      	mov	r3, r1
 80160de:	4650      	mov	r0, sl
 80160e0:	4659      	mov	r1, fp
 80160e2:	f7ea f8f9 	bl	80002d8 <__aeabi_dsub>
 80160e6:	4602      	mov	r2, r0
 80160e8:	460b      	mov	r3, r1
 80160ea:	4680      	mov	r8, r0
 80160ec:	4689      	mov	r9, r1
 80160ee:	4630      	mov	r0, r6
 80160f0:	4639      	mov	r1, r7
 80160f2:	f7ea f8f3 	bl	80002dc <__adddf3>
 80160f6:	2400      	movs	r4, #0
 80160f8:	4632      	mov	r2, r6
 80160fa:	463b      	mov	r3, r7
 80160fc:	4620      	mov	r0, r4
 80160fe:	460d      	mov	r5, r1
 8016100:	f7ea f8ea 	bl	80002d8 <__aeabi_dsub>
 8016104:	4602      	mov	r2, r0
 8016106:	460b      	mov	r3, r1
 8016108:	4640      	mov	r0, r8
 801610a:	4649      	mov	r1, r9
 801610c:	f7ea f8e4 	bl	80002d8 <__aeabi_dsub>
 8016110:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016114:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016118:	2300      	movs	r3, #0
 801611a:	9304      	str	r3, [sp, #16]
 801611c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016120:	4606      	mov	r6, r0
 8016122:	460f      	mov	r7, r1
 8016124:	4652      	mov	r2, sl
 8016126:	465b      	mov	r3, fp
 8016128:	e9dd 0100 	ldrd	r0, r1, [sp]
 801612c:	f7ea f8d4 	bl	80002d8 <__aeabi_dsub>
 8016130:	4622      	mov	r2, r4
 8016132:	462b      	mov	r3, r5
 8016134:	f7ea fa88 	bl	8000648 <__aeabi_dmul>
 8016138:	e9dd 2300 	ldrd	r2, r3, [sp]
 801613c:	4680      	mov	r8, r0
 801613e:	4689      	mov	r9, r1
 8016140:	4630      	mov	r0, r6
 8016142:	4639      	mov	r1, r7
 8016144:	f7ea fa80 	bl	8000648 <__aeabi_dmul>
 8016148:	4602      	mov	r2, r0
 801614a:	460b      	mov	r3, r1
 801614c:	4640      	mov	r0, r8
 801614e:	4649      	mov	r1, r9
 8016150:	f7ea f8c4 	bl	80002dc <__adddf3>
 8016154:	4652      	mov	r2, sl
 8016156:	465b      	mov	r3, fp
 8016158:	4606      	mov	r6, r0
 801615a:	460f      	mov	r7, r1
 801615c:	4620      	mov	r0, r4
 801615e:	4629      	mov	r1, r5
 8016160:	f7ea fa72 	bl	8000648 <__aeabi_dmul>
 8016164:	460b      	mov	r3, r1
 8016166:	4602      	mov	r2, r0
 8016168:	4680      	mov	r8, r0
 801616a:	4689      	mov	r9, r1
 801616c:	4630      	mov	r0, r6
 801616e:	4639      	mov	r1, r7
 8016170:	f7ea f8b4 	bl	80002dc <__adddf3>
 8016174:	4b17      	ldr	r3, [pc, #92]	@ (80161d4 <__ieee754_pow+0x41c>)
 8016176:	4299      	cmp	r1, r3
 8016178:	4604      	mov	r4, r0
 801617a:	460d      	mov	r5, r1
 801617c:	468a      	mov	sl, r1
 801617e:	468b      	mov	fp, r1
 8016180:	f340 82ef 	ble.w	8016762 <__ieee754_pow+0x9aa>
 8016184:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8016188:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 801618c:	4303      	orrs	r3, r0
 801618e:	f000 81e8 	beq.w	8016562 <__ieee754_pow+0x7aa>
 8016192:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016196:	2200      	movs	r2, #0
 8016198:	2300      	movs	r3, #0
 801619a:	f7ea fcc7 	bl	8000b2c <__aeabi_dcmplt>
 801619e:	3800      	subs	r0, #0
 80161a0:	bf18      	it	ne
 80161a2:	2001      	movne	r0, #1
 80161a4:	e710      	b.n	8015fc8 <__ieee754_pow+0x210>
 80161a6:	bf00      	nop
 80161a8:	60000000 	.word	0x60000000
 80161ac:	3ff71547 	.word	0x3ff71547
 80161b0:	f85ddf44 	.word	0xf85ddf44
 80161b4:	3e54ae0b 	.word	0x3e54ae0b
 80161b8:	55555555 	.word	0x55555555
 80161bc:	3fd55555 	.word	0x3fd55555
 80161c0:	652b82fe 	.word	0x652b82fe
 80161c4:	3ff71547 	.word	0x3ff71547
 80161c8:	3ff00000 	.word	0x3ff00000
 80161cc:	3fd00000 	.word	0x3fd00000
 80161d0:	3fe00000 	.word	0x3fe00000
 80161d4:	408fffff 	.word	0x408fffff
 80161d8:	4bd5      	ldr	r3, [pc, #852]	@ (8016530 <__ieee754_pow+0x778>)
 80161da:	402b      	ands	r3, r5
 80161dc:	2200      	movs	r2, #0
 80161de:	b92b      	cbnz	r3, 80161ec <__ieee754_pow+0x434>
 80161e0:	4bd4      	ldr	r3, [pc, #848]	@ (8016534 <__ieee754_pow+0x77c>)
 80161e2:	f7ea fa31 	bl	8000648 <__aeabi_dmul>
 80161e6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80161ea:	468b      	mov	fp, r1
 80161ec:	ea4f 532b 	mov.w	r3, fp, asr #20
 80161f0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80161f4:	4413      	add	r3, r2
 80161f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80161f8:	4bcf      	ldr	r3, [pc, #828]	@ (8016538 <__ieee754_pow+0x780>)
 80161fa:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80161fe:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8016202:	459b      	cmp	fp, r3
 8016204:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016208:	dd08      	ble.n	801621c <__ieee754_pow+0x464>
 801620a:	4bcc      	ldr	r3, [pc, #816]	@ (801653c <__ieee754_pow+0x784>)
 801620c:	459b      	cmp	fp, r3
 801620e:	f340 81a5 	ble.w	801655c <__ieee754_pow+0x7a4>
 8016212:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016214:	3301      	adds	r3, #1
 8016216:	930a      	str	r3, [sp, #40]	@ 0x28
 8016218:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801621c:	f04f 0a00 	mov.w	sl, #0
 8016220:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016224:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016226:	4bc6      	ldr	r3, [pc, #792]	@ (8016540 <__ieee754_pow+0x788>)
 8016228:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801622c:	ed93 7b00 	vldr	d7, [r3]
 8016230:	4629      	mov	r1, r5
 8016232:	ec53 2b17 	vmov	r2, r3, d7
 8016236:	ed8d 7b06 	vstr	d7, [sp, #24]
 801623a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801623e:	f7ea f84b 	bl	80002d8 <__aeabi_dsub>
 8016242:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016246:	4606      	mov	r6, r0
 8016248:	460f      	mov	r7, r1
 801624a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801624e:	f7ea f845 	bl	80002dc <__adddf3>
 8016252:	4602      	mov	r2, r0
 8016254:	460b      	mov	r3, r1
 8016256:	2000      	movs	r0, #0
 8016258:	49ba      	ldr	r1, [pc, #744]	@ (8016544 <__ieee754_pow+0x78c>)
 801625a:	f7ea fb1f 	bl	800089c <__aeabi_ddiv>
 801625e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8016262:	4602      	mov	r2, r0
 8016264:	460b      	mov	r3, r1
 8016266:	4630      	mov	r0, r6
 8016268:	4639      	mov	r1, r7
 801626a:	f7ea f9ed 	bl	8000648 <__aeabi_dmul>
 801626e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016272:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8016276:	106d      	asrs	r5, r5, #1
 8016278:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 801627c:	f04f 0b00 	mov.w	fp, #0
 8016280:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8016284:	4661      	mov	r1, ip
 8016286:	2200      	movs	r2, #0
 8016288:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801628c:	4658      	mov	r0, fp
 801628e:	46e1      	mov	r9, ip
 8016290:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8016294:	4614      	mov	r4, r2
 8016296:	461d      	mov	r5, r3
 8016298:	f7ea f9d6 	bl	8000648 <__aeabi_dmul>
 801629c:	4602      	mov	r2, r0
 801629e:	460b      	mov	r3, r1
 80162a0:	4630      	mov	r0, r6
 80162a2:	4639      	mov	r1, r7
 80162a4:	f7ea f818 	bl	80002d8 <__aeabi_dsub>
 80162a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80162ac:	4606      	mov	r6, r0
 80162ae:	460f      	mov	r7, r1
 80162b0:	4620      	mov	r0, r4
 80162b2:	4629      	mov	r1, r5
 80162b4:	f7ea f810 	bl	80002d8 <__aeabi_dsub>
 80162b8:	4602      	mov	r2, r0
 80162ba:	460b      	mov	r3, r1
 80162bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80162c0:	f7ea f80a 	bl	80002d8 <__aeabi_dsub>
 80162c4:	465a      	mov	r2, fp
 80162c6:	464b      	mov	r3, r9
 80162c8:	f7ea f9be 	bl	8000648 <__aeabi_dmul>
 80162cc:	4602      	mov	r2, r0
 80162ce:	460b      	mov	r3, r1
 80162d0:	4630      	mov	r0, r6
 80162d2:	4639      	mov	r1, r7
 80162d4:	f7ea f800 	bl	80002d8 <__aeabi_dsub>
 80162d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80162dc:	f7ea f9b4 	bl	8000648 <__aeabi_dmul>
 80162e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80162e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80162e8:	4610      	mov	r0, r2
 80162ea:	4619      	mov	r1, r3
 80162ec:	f7ea f9ac 	bl	8000648 <__aeabi_dmul>
 80162f0:	a37d      	add	r3, pc, #500	@ (adr r3, 80164e8 <__ieee754_pow+0x730>)
 80162f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162f6:	4604      	mov	r4, r0
 80162f8:	460d      	mov	r5, r1
 80162fa:	f7ea f9a5 	bl	8000648 <__aeabi_dmul>
 80162fe:	a37c      	add	r3, pc, #496	@ (adr r3, 80164f0 <__ieee754_pow+0x738>)
 8016300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016304:	f7e9 ffea 	bl	80002dc <__adddf3>
 8016308:	4622      	mov	r2, r4
 801630a:	462b      	mov	r3, r5
 801630c:	f7ea f99c 	bl	8000648 <__aeabi_dmul>
 8016310:	a379      	add	r3, pc, #484	@ (adr r3, 80164f8 <__ieee754_pow+0x740>)
 8016312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016316:	f7e9 ffe1 	bl	80002dc <__adddf3>
 801631a:	4622      	mov	r2, r4
 801631c:	462b      	mov	r3, r5
 801631e:	f7ea f993 	bl	8000648 <__aeabi_dmul>
 8016322:	a377      	add	r3, pc, #476	@ (adr r3, 8016500 <__ieee754_pow+0x748>)
 8016324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016328:	f7e9 ffd8 	bl	80002dc <__adddf3>
 801632c:	4622      	mov	r2, r4
 801632e:	462b      	mov	r3, r5
 8016330:	f7ea f98a 	bl	8000648 <__aeabi_dmul>
 8016334:	a374      	add	r3, pc, #464	@ (adr r3, 8016508 <__ieee754_pow+0x750>)
 8016336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801633a:	f7e9 ffcf 	bl	80002dc <__adddf3>
 801633e:	4622      	mov	r2, r4
 8016340:	462b      	mov	r3, r5
 8016342:	f7ea f981 	bl	8000648 <__aeabi_dmul>
 8016346:	a372      	add	r3, pc, #456	@ (adr r3, 8016510 <__ieee754_pow+0x758>)
 8016348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801634c:	f7e9 ffc6 	bl	80002dc <__adddf3>
 8016350:	4622      	mov	r2, r4
 8016352:	4606      	mov	r6, r0
 8016354:	460f      	mov	r7, r1
 8016356:	462b      	mov	r3, r5
 8016358:	4620      	mov	r0, r4
 801635a:	4629      	mov	r1, r5
 801635c:	f7ea f974 	bl	8000648 <__aeabi_dmul>
 8016360:	4602      	mov	r2, r0
 8016362:	460b      	mov	r3, r1
 8016364:	4630      	mov	r0, r6
 8016366:	4639      	mov	r1, r7
 8016368:	f7ea f96e 	bl	8000648 <__aeabi_dmul>
 801636c:	465a      	mov	r2, fp
 801636e:	4604      	mov	r4, r0
 8016370:	460d      	mov	r5, r1
 8016372:	464b      	mov	r3, r9
 8016374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016378:	f7e9 ffb0 	bl	80002dc <__adddf3>
 801637c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016380:	f7ea f962 	bl	8000648 <__aeabi_dmul>
 8016384:	4622      	mov	r2, r4
 8016386:	462b      	mov	r3, r5
 8016388:	f7e9 ffa8 	bl	80002dc <__adddf3>
 801638c:	465a      	mov	r2, fp
 801638e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016392:	464b      	mov	r3, r9
 8016394:	4658      	mov	r0, fp
 8016396:	4649      	mov	r1, r9
 8016398:	f7ea f956 	bl	8000648 <__aeabi_dmul>
 801639c:	4b6a      	ldr	r3, [pc, #424]	@ (8016548 <__ieee754_pow+0x790>)
 801639e:	2200      	movs	r2, #0
 80163a0:	4606      	mov	r6, r0
 80163a2:	460f      	mov	r7, r1
 80163a4:	f7e9 ff9a 	bl	80002dc <__adddf3>
 80163a8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80163ac:	f7e9 ff96 	bl	80002dc <__adddf3>
 80163b0:	46d8      	mov	r8, fp
 80163b2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80163b6:	460d      	mov	r5, r1
 80163b8:	465a      	mov	r2, fp
 80163ba:	460b      	mov	r3, r1
 80163bc:	4640      	mov	r0, r8
 80163be:	4649      	mov	r1, r9
 80163c0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80163c4:	f7ea f940 	bl	8000648 <__aeabi_dmul>
 80163c8:	465c      	mov	r4, fp
 80163ca:	4680      	mov	r8, r0
 80163cc:	4689      	mov	r9, r1
 80163ce:	4b5e      	ldr	r3, [pc, #376]	@ (8016548 <__ieee754_pow+0x790>)
 80163d0:	2200      	movs	r2, #0
 80163d2:	4620      	mov	r0, r4
 80163d4:	4629      	mov	r1, r5
 80163d6:	f7e9 ff7f 	bl	80002d8 <__aeabi_dsub>
 80163da:	4632      	mov	r2, r6
 80163dc:	463b      	mov	r3, r7
 80163de:	f7e9 ff7b 	bl	80002d8 <__aeabi_dsub>
 80163e2:	4602      	mov	r2, r0
 80163e4:	460b      	mov	r3, r1
 80163e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80163ea:	f7e9 ff75 	bl	80002d8 <__aeabi_dsub>
 80163ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163f2:	f7ea f929 	bl	8000648 <__aeabi_dmul>
 80163f6:	4622      	mov	r2, r4
 80163f8:	4606      	mov	r6, r0
 80163fa:	460f      	mov	r7, r1
 80163fc:	462b      	mov	r3, r5
 80163fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016402:	f7ea f921 	bl	8000648 <__aeabi_dmul>
 8016406:	4602      	mov	r2, r0
 8016408:	460b      	mov	r3, r1
 801640a:	4630      	mov	r0, r6
 801640c:	4639      	mov	r1, r7
 801640e:	f7e9 ff65 	bl	80002dc <__adddf3>
 8016412:	4606      	mov	r6, r0
 8016414:	460f      	mov	r7, r1
 8016416:	4602      	mov	r2, r0
 8016418:	460b      	mov	r3, r1
 801641a:	4640      	mov	r0, r8
 801641c:	4649      	mov	r1, r9
 801641e:	f7e9 ff5d 	bl	80002dc <__adddf3>
 8016422:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8016426:	a33c      	add	r3, pc, #240	@ (adr r3, 8016518 <__ieee754_pow+0x760>)
 8016428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801642c:	4658      	mov	r0, fp
 801642e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8016432:	460d      	mov	r5, r1
 8016434:	f7ea f908 	bl	8000648 <__aeabi_dmul>
 8016438:	465c      	mov	r4, fp
 801643a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801643e:	4642      	mov	r2, r8
 8016440:	464b      	mov	r3, r9
 8016442:	4620      	mov	r0, r4
 8016444:	4629      	mov	r1, r5
 8016446:	f7e9 ff47 	bl	80002d8 <__aeabi_dsub>
 801644a:	4602      	mov	r2, r0
 801644c:	460b      	mov	r3, r1
 801644e:	4630      	mov	r0, r6
 8016450:	4639      	mov	r1, r7
 8016452:	f7e9 ff41 	bl	80002d8 <__aeabi_dsub>
 8016456:	a332      	add	r3, pc, #200	@ (adr r3, 8016520 <__ieee754_pow+0x768>)
 8016458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801645c:	f7ea f8f4 	bl	8000648 <__aeabi_dmul>
 8016460:	a331      	add	r3, pc, #196	@ (adr r3, 8016528 <__ieee754_pow+0x770>)
 8016462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016466:	4606      	mov	r6, r0
 8016468:	460f      	mov	r7, r1
 801646a:	4620      	mov	r0, r4
 801646c:	4629      	mov	r1, r5
 801646e:	f7ea f8eb 	bl	8000648 <__aeabi_dmul>
 8016472:	4602      	mov	r2, r0
 8016474:	460b      	mov	r3, r1
 8016476:	4630      	mov	r0, r6
 8016478:	4639      	mov	r1, r7
 801647a:	f7e9 ff2f 	bl	80002dc <__adddf3>
 801647e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016480:	4b32      	ldr	r3, [pc, #200]	@ (801654c <__ieee754_pow+0x794>)
 8016482:	4413      	add	r3, r2
 8016484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016488:	f7e9 ff28 	bl	80002dc <__adddf3>
 801648c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016490:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8016492:	f7ea f86f 	bl	8000574 <__aeabi_i2d>
 8016496:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016498:	4b2d      	ldr	r3, [pc, #180]	@ (8016550 <__ieee754_pow+0x798>)
 801649a:	4413      	add	r3, r2
 801649c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80164a0:	4606      	mov	r6, r0
 80164a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80164a6:	460f      	mov	r7, r1
 80164a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80164ac:	f7e9 ff16 	bl	80002dc <__adddf3>
 80164b0:	4642      	mov	r2, r8
 80164b2:	464b      	mov	r3, r9
 80164b4:	f7e9 ff12 	bl	80002dc <__adddf3>
 80164b8:	4632      	mov	r2, r6
 80164ba:	463b      	mov	r3, r7
 80164bc:	f7e9 ff0e 	bl	80002dc <__adddf3>
 80164c0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80164c4:	4632      	mov	r2, r6
 80164c6:	463b      	mov	r3, r7
 80164c8:	4658      	mov	r0, fp
 80164ca:	460d      	mov	r5, r1
 80164cc:	f7e9 ff04 	bl	80002d8 <__aeabi_dsub>
 80164d0:	4642      	mov	r2, r8
 80164d2:	464b      	mov	r3, r9
 80164d4:	f7e9 ff00 	bl	80002d8 <__aeabi_dsub>
 80164d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80164dc:	f7e9 fefc 	bl	80002d8 <__aeabi_dsub>
 80164e0:	465c      	mov	r4, fp
 80164e2:	4602      	mov	r2, r0
 80164e4:	e036      	b.n	8016554 <__ieee754_pow+0x79c>
 80164e6:	bf00      	nop
 80164e8:	4a454eef 	.word	0x4a454eef
 80164ec:	3fca7e28 	.word	0x3fca7e28
 80164f0:	93c9db65 	.word	0x93c9db65
 80164f4:	3fcd864a 	.word	0x3fcd864a
 80164f8:	a91d4101 	.word	0xa91d4101
 80164fc:	3fd17460 	.word	0x3fd17460
 8016500:	518f264d 	.word	0x518f264d
 8016504:	3fd55555 	.word	0x3fd55555
 8016508:	db6fabff 	.word	0xdb6fabff
 801650c:	3fdb6db6 	.word	0x3fdb6db6
 8016510:	33333303 	.word	0x33333303
 8016514:	3fe33333 	.word	0x3fe33333
 8016518:	e0000000 	.word	0xe0000000
 801651c:	3feec709 	.word	0x3feec709
 8016520:	dc3a03fd 	.word	0xdc3a03fd
 8016524:	3feec709 	.word	0x3feec709
 8016528:	145b01f5 	.word	0x145b01f5
 801652c:	be3e2fe0 	.word	0xbe3e2fe0
 8016530:	7ff00000 	.word	0x7ff00000
 8016534:	43400000 	.word	0x43400000
 8016538:	0003988e 	.word	0x0003988e
 801653c:	000bb679 	.word	0x000bb679
 8016540:	080173b8 	.word	0x080173b8
 8016544:	3ff00000 	.word	0x3ff00000
 8016548:	40080000 	.word	0x40080000
 801654c:	08017398 	.word	0x08017398
 8016550:	080173a8 	.word	0x080173a8
 8016554:	460b      	mov	r3, r1
 8016556:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801655a:	e5d7      	b.n	801610c <__ieee754_pow+0x354>
 801655c:	f04f 0a01 	mov.w	sl, #1
 8016560:	e65e      	b.n	8016220 <__ieee754_pow+0x468>
 8016562:	a3b4      	add	r3, pc, #720	@ (adr r3, 8016834 <__ieee754_pow+0xa7c>)
 8016564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016568:	4630      	mov	r0, r6
 801656a:	4639      	mov	r1, r7
 801656c:	f7e9 feb6 	bl	80002dc <__adddf3>
 8016570:	4642      	mov	r2, r8
 8016572:	e9cd 0100 	strd	r0, r1, [sp]
 8016576:	464b      	mov	r3, r9
 8016578:	4620      	mov	r0, r4
 801657a:	4629      	mov	r1, r5
 801657c:	f7e9 feac 	bl	80002d8 <__aeabi_dsub>
 8016580:	4602      	mov	r2, r0
 8016582:	460b      	mov	r3, r1
 8016584:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016588:	f7ea faee 	bl	8000b68 <__aeabi_dcmpgt>
 801658c:	2800      	cmp	r0, #0
 801658e:	f47f ae00 	bne.w	8016192 <__ieee754_pow+0x3da>
 8016592:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8016596:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 801659a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 801659e:	fa43 fa0a 	asr.w	sl, r3, sl
 80165a2:	44da      	add	sl, fp
 80165a4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80165a8:	489d      	ldr	r0, [pc, #628]	@ (8016820 <__ieee754_pow+0xa68>)
 80165aa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80165ae:	4108      	asrs	r0, r1
 80165b0:	ea00 030a 	and.w	r3, r0, sl
 80165b4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80165b8:	f1c1 0114 	rsb	r1, r1, #20
 80165bc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80165c0:	fa4a fa01 	asr.w	sl, sl, r1
 80165c4:	f1bb 0f00 	cmp.w	fp, #0
 80165c8:	4640      	mov	r0, r8
 80165ca:	4649      	mov	r1, r9
 80165cc:	f04f 0200 	mov.w	r2, #0
 80165d0:	bfb8      	it	lt
 80165d2:	f1ca 0a00 	rsblt	sl, sl, #0
 80165d6:	f7e9 fe7f 	bl	80002d8 <__aeabi_dsub>
 80165da:	4680      	mov	r8, r0
 80165dc:	4689      	mov	r9, r1
 80165de:	4632      	mov	r2, r6
 80165e0:	463b      	mov	r3, r7
 80165e2:	4640      	mov	r0, r8
 80165e4:	4649      	mov	r1, r9
 80165e6:	f7e9 fe79 	bl	80002dc <__adddf3>
 80165ea:	2400      	movs	r4, #0
 80165ec:	a37c      	add	r3, pc, #496	@ (adr r3, 80167e0 <__ieee754_pow+0xa28>)
 80165ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165f2:	4620      	mov	r0, r4
 80165f4:	460d      	mov	r5, r1
 80165f6:	f7ea f827 	bl	8000648 <__aeabi_dmul>
 80165fa:	4642      	mov	r2, r8
 80165fc:	e9cd 0100 	strd	r0, r1, [sp]
 8016600:	464b      	mov	r3, r9
 8016602:	4620      	mov	r0, r4
 8016604:	4629      	mov	r1, r5
 8016606:	f7e9 fe67 	bl	80002d8 <__aeabi_dsub>
 801660a:	4602      	mov	r2, r0
 801660c:	460b      	mov	r3, r1
 801660e:	4630      	mov	r0, r6
 8016610:	4639      	mov	r1, r7
 8016612:	f7e9 fe61 	bl	80002d8 <__aeabi_dsub>
 8016616:	a374      	add	r3, pc, #464	@ (adr r3, 80167e8 <__ieee754_pow+0xa30>)
 8016618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801661c:	f7ea f814 	bl	8000648 <__aeabi_dmul>
 8016620:	a373      	add	r3, pc, #460	@ (adr r3, 80167f0 <__ieee754_pow+0xa38>)
 8016622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016626:	4680      	mov	r8, r0
 8016628:	4689      	mov	r9, r1
 801662a:	4620      	mov	r0, r4
 801662c:	4629      	mov	r1, r5
 801662e:	f7ea f80b 	bl	8000648 <__aeabi_dmul>
 8016632:	4602      	mov	r2, r0
 8016634:	460b      	mov	r3, r1
 8016636:	4640      	mov	r0, r8
 8016638:	4649      	mov	r1, r9
 801663a:	f7e9 fe4f 	bl	80002dc <__adddf3>
 801663e:	4604      	mov	r4, r0
 8016640:	460d      	mov	r5, r1
 8016642:	4602      	mov	r2, r0
 8016644:	460b      	mov	r3, r1
 8016646:	e9dd 0100 	ldrd	r0, r1, [sp]
 801664a:	f7e9 fe47 	bl	80002dc <__adddf3>
 801664e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016652:	4680      	mov	r8, r0
 8016654:	4689      	mov	r9, r1
 8016656:	f7e9 fe3f 	bl	80002d8 <__aeabi_dsub>
 801665a:	4602      	mov	r2, r0
 801665c:	460b      	mov	r3, r1
 801665e:	4620      	mov	r0, r4
 8016660:	4629      	mov	r1, r5
 8016662:	f7e9 fe39 	bl	80002d8 <__aeabi_dsub>
 8016666:	4642      	mov	r2, r8
 8016668:	4606      	mov	r6, r0
 801666a:	460f      	mov	r7, r1
 801666c:	464b      	mov	r3, r9
 801666e:	4640      	mov	r0, r8
 8016670:	4649      	mov	r1, r9
 8016672:	f7e9 ffe9 	bl	8000648 <__aeabi_dmul>
 8016676:	a360      	add	r3, pc, #384	@ (adr r3, 80167f8 <__ieee754_pow+0xa40>)
 8016678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801667c:	4604      	mov	r4, r0
 801667e:	460d      	mov	r5, r1
 8016680:	f7e9 ffe2 	bl	8000648 <__aeabi_dmul>
 8016684:	a35e      	add	r3, pc, #376	@ (adr r3, 8016800 <__ieee754_pow+0xa48>)
 8016686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801668a:	f7e9 fe25 	bl	80002d8 <__aeabi_dsub>
 801668e:	4622      	mov	r2, r4
 8016690:	462b      	mov	r3, r5
 8016692:	f7e9 ffd9 	bl	8000648 <__aeabi_dmul>
 8016696:	a35c      	add	r3, pc, #368	@ (adr r3, 8016808 <__ieee754_pow+0xa50>)
 8016698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801669c:	f7e9 fe1e 	bl	80002dc <__adddf3>
 80166a0:	4622      	mov	r2, r4
 80166a2:	462b      	mov	r3, r5
 80166a4:	f7e9 ffd0 	bl	8000648 <__aeabi_dmul>
 80166a8:	a359      	add	r3, pc, #356	@ (adr r3, 8016810 <__ieee754_pow+0xa58>)
 80166aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ae:	f7e9 fe13 	bl	80002d8 <__aeabi_dsub>
 80166b2:	4622      	mov	r2, r4
 80166b4:	462b      	mov	r3, r5
 80166b6:	f7e9 ffc7 	bl	8000648 <__aeabi_dmul>
 80166ba:	a357      	add	r3, pc, #348	@ (adr r3, 8016818 <__ieee754_pow+0xa60>)
 80166bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166c0:	f7e9 fe0c 	bl	80002dc <__adddf3>
 80166c4:	4622      	mov	r2, r4
 80166c6:	462b      	mov	r3, r5
 80166c8:	f7e9 ffbe 	bl	8000648 <__aeabi_dmul>
 80166cc:	4602      	mov	r2, r0
 80166ce:	460b      	mov	r3, r1
 80166d0:	4640      	mov	r0, r8
 80166d2:	4649      	mov	r1, r9
 80166d4:	f7e9 fe00 	bl	80002d8 <__aeabi_dsub>
 80166d8:	4604      	mov	r4, r0
 80166da:	460d      	mov	r5, r1
 80166dc:	4602      	mov	r2, r0
 80166de:	460b      	mov	r3, r1
 80166e0:	4640      	mov	r0, r8
 80166e2:	4649      	mov	r1, r9
 80166e4:	f7e9 ffb0 	bl	8000648 <__aeabi_dmul>
 80166e8:	2200      	movs	r2, #0
 80166ea:	e9cd 0100 	strd	r0, r1, [sp]
 80166ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80166f2:	4620      	mov	r0, r4
 80166f4:	4629      	mov	r1, r5
 80166f6:	f7e9 fdef 	bl	80002d8 <__aeabi_dsub>
 80166fa:	4602      	mov	r2, r0
 80166fc:	460b      	mov	r3, r1
 80166fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016702:	f7ea f8cb 	bl	800089c <__aeabi_ddiv>
 8016706:	4632      	mov	r2, r6
 8016708:	4604      	mov	r4, r0
 801670a:	460d      	mov	r5, r1
 801670c:	463b      	mov	r3, r7
 801670e:	4640      	mov	r0, r8
 8016710:	4649      	mov	r1, r9
 8016712:	f7e9 ff99 	bl	8000648 <__aeabi_dmul>
 8016716:	4632      	mov	r2, r6
 8016718:	463b      	mov	r3, r7
 801671a:	f7e9 fddf 	bl	80002dc <__adddf3>
 801671e:	4602      	mov	r2, r0
 8016720:	460b      	mov	r3, r1
 8016722:	4620      	mov	r0, r4
 8016724:	4629      	mov	r1, r5
 8016726:	f7e9 fdd7 	bl	80002d8 <__aeabi_dsub>
 801672a:	4642      	mov	r2, r8
 801672c:	464b      	mov	r3, r9
 801672e:	f7e9 fdd3 	bl	80002d8 <__aeabi_dsub>
 8016732:	460b      	mov	r3, r1
 8016734:	4602      	mov	r2, r0
 8016736:	493b      	ldr	r1, [pc, #236]	@ (8016824 <__ieee754_pow+0xa6c>)
 8016738:	2000      	movs	r0, #0
 801673a:	f7e9 fdcd 	bl	80002d8 <__aeabi_dsub>
 801673e:	ec41 0b10 	vmov	d0, r0, r1
 8016742:	ee10 3a90 	vmov	r3, s1
 8016746:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801674a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801674e:	da30      	bge.n	80167b2 <__ieee754_pow+0x9fa>
 8016750:	4650      	mov	r0, sl
 8016752:	f000 f87d 	bl	8016850 <scalbn>
 8016756:	ec51 0b10 	vmov	r0, r1, d0
 801675a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801675e:	f7ff bbd2 	b.w	8015f06 <__ieee754_pow+0x14e>
 8016762:	4c31      	ldr	r4, [pc, #196]	@ (8016828 <__ieee754_pow+0xa70>)
 8016764:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016768:	42a3      	cmp	r3, r4
 801676a:	d91a      	bls.n	80167a2 <__ieee754_pow+0x9ea>
 801676c:	4b2f      	ldr	r3, [pc, #188]	@ (801682c <__ieee754_pow+0xa74>)
 801676e:	440b      	add	r3, r1
 8016770:	4303      	orrs	r3, r0
 8016772:	d009      	beq.n	8016788 <__ieee754_pow+0x9d0>
 8016774:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016778:	2200      	movs	r2, #0
 801677a:	2300      	movs	r3, #0
 801677c:	f7ea f9d6 	bl	8000b2c <__aeabi_dcmplt>
 8016780:	3800      	subs	r0, #0
 8016782:	bf18      	it	ne
 8016784:	2001      	movne	r0, #1
 8016786:	e42b      	b.n	8015fe0 <__ieee754_pow+0x228>
 8016788:	4642      	mov	r2, r8
 801678a:	464b      	mov	r3, r9
 801678c:	f7e9 fda4 	bl	80002d8 <__aeabi_dsub>
 8016790:	4632      	mov	r2, r6
 8016792:	463b      	mov	r3, r7
 8016794:	f7ea f9de 	bl	8000b54 <__aeabi_dcmpge>
 8016798:	2800      	cmp	r0, #0
 801679a:	d1eb      	bne.n	8016774 <__ieee754_pow+0x9bc>
 801679c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 801683c <__ieee754_pow+0xa84>
 80167a0:	e6f7      	b.n	8016592 <__ieee754_pow+0x7da>
 80167a2:	469a      	mov	sl, r3
 80167a4:	4b22      	ldr	r3, [pc, #136]	@ (8016830 <__ieee754_pow+0xa78>)
 80167a6:	459a      	cmp	sl, r3
 80167a8:	f63f aef3 	bhi.w	8016592 <__ieee754_pow+0x7da>
 80167ac:	f8dd a010 	ldr.w	sl, [sp, #16]
 80167b0:	e715      	b.n	80165de <__ieee754_pow+0x826>
 80167b2:	ec51 0b10 	vmov	r0, r1, d0
 80167b6:	4619      	mov	r1, r3
 80167b8:	e7cf      	b.n	801675a <__ieee754_pow+0x9a2>
 80167ba:	491a      	ldr	r1, [pc, #104]	@ (8016824 <__ieee754_pow+0xa6c>)
 80167bc:	2000      	movs	r0, #0
 80167be:	f7ff bb18 	b.w	8015df2 <__ieee754_pow+0x3a>
 80167c2:	2000      	movs	r0, #0
 80167c4:	2100      	movs	r1, #0
 80167c6:	f7ff bb14 	b.w	8015df2 <__ieee754_pow+0x3a>
 80167ca:	4630      	mov	r0, r6
 80167cc:	4639      	mov	r1, r7
 80167ce:	f7ff bb10 	b.w	8015df2 <__ieee754_pow+0x3a>
 80167d2:	460c      	mov	r4, r1
 80167d4:	f7ff bb5e 	b.w	8015e94 <__ieee754_pow+0xdc>
 80167d8:	2400      	movs	r4, #0
 80167da:	f7ff bb49 	b.w	8015e70 <__ieee754_pow+0xb8>
 80167de:	bf00      	nop
 80167e0:	00000000 	.word	0x00000000
 80167e4:	3fe62e43 	.word	0x3fe62e43
 80167e8:	fefa39ef 	.word	0xfefa39ef
 80167ec:	3fe62e42 	.word	0x3fe62e42
 80167f0:	0ca86c39 	.word	0x0ca86c39
 80167f4:	be205c61 	.word	0xbe205c61
 80167f8:	72bea4d0 	.word	0x72bea4d0
 80167fc:	3e663769 	.word	0x3e663769
 8016800:	c5d26bf1 	.word	0xc5d26bf1
 8016804:	3ebbbd41 	.word	0x3ebbbd41
 8016808:	af25de2c 	.word	0xaf25de2c
 801680c:	3f11566a 	.word	0x3f11566a
 8016810:	16bebd93 	.word	0x16bebd93
 8016814:	3f66c16c 	.word	0x3f66c16c
 8016818:	5555553e 	.word	0x5555553e
 801681c:	3fc55555 	.word	0x3fc55555
 8016820:	fff00000 	.word	0xfff00000
 8016824:	3ff00000 	.word	0x3ff00000
 8016828:	4090cbff 	.word	0x4090cbff
 801682c:	3f6f3400 	.word	0x3f6f3400
 8016830:	3fe00000 	.word	0x3fe00000
 8016834:	652b82fe 	.word	0x652b82fe
 8016838:	3c971547 	.word	0x3c971547
 801683c:	4090cc00 	.word	0x4090cc00

08016840 <fabs>:
 8016840:	ec51 0b10 	vmov	r0, r1, d0
 8016844:	4602      	mov	r2, r0
 8016846:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801684a:	ec43 2b10 	vmov	d0, r2, r3
 801684e:	4770      	bx	lr

08016850 <scalbn>:
 8016850:	b570      	push	{r4, r5, r6, lr}
 8016852:	ec55 4b10 	vmov	r4, r5, d0
 8016856:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801685a:	4606      	mov	r6, r0
 801685c:	462b      	mov	r3, r5
 801685e:	b991      	cbnz	r1, 8016886 <scalbn+0x36>
 8016860:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016864:	4323      	orrs	r3, r4
 8016866:	d03d      	beq.n	80168e4 <scalbn+0x94>
 8016868:	4b35      	ldr	r3, [pc, #212]	@ (8016940 <scalbn+0xf0>)
 801686a:	4620      	mov	r0, r4
 801686c:	4629      	mov	r1, r5
 801686e:	2200      	movs	r2, #0
 8016870:	f7e9 feea 	bl	8000648 <__aeabi_dmul>
 8016874:	4b33      	ldr	r3, [pc, #204]	@ (8016944 <scalbn+0xf4>)
 8016876:	429e      	cmp	r6, r3
 8016878:	4604      	mov	r4, r0
 801687a:	460d      	mov	r5, r1
 801687c:	da0f      	bge.n	801689e <scalbn+0x4e>
 801687e:	a328      	add	r3, pc, #160	@ (adr r3, 8016920 <scalbn+0xd0>)
 8016880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016884:	e01e      	b.n	80168c4 <scalbn+0x74>
 8016886:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801688a:	4291      	cmp	r1, r2
 801688c:	d10b      	bne.n	80168a6 <scalbn+0x56>
 801688e:	4622      	mov	r2, r4
 8016890:	4620      	mov	r0, r4
 8016892:	4629      	mov	r1, r5
 8016894:	f7e9 fd22 	bl	80002dc <__adddf3>
 8016898:	4604      	mov	r4, r0
 801689a:	460d      	mov	r5, r1
 801689c:	e022      	b.n	80168e4 <scalbn+0x94>
 801689e:	460b      	mov	r3, r1
 80168a0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80168a4:	3936      	subs	r1, #54	@ 0x36
 80168a6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80168aa:	4296      	cmp	r6, r2
 80168ac:	dd0d      	ble.n	80168ca <scalbn+0x7a>
 80168ae:	2d00      	cmp	r5, #0
 80168b0:	a11d      	add	r1, pc, #116	@ (adr r1, 8016928 <scalbn+0xd8>)
 80168b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168b6:	da02      	bge.n	80168be <scalbn+0x6e>
 80168b8:	a11d      	add	r1, pc, #116	@ (adr r1, 8016930 <scalbn+0xe0>)
 80168ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168be:	a31a      	add	r3, pc, #104	@ (adr r3, 8016928 <scalbn+0xd8>)
 80168c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168c4:	f7e9 fec0 	bl	8000648 <__aeabi_dmul>
 80168c8:	e7e6      	b.n	8016898 <scalbn+0x48>
 80168ca:	1872      	adds	r2, r6, r1
 80168cc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80168d0:	428a      	cmp	r2, r1
 80168d2:	dcec      	bgt.n	80168ae <scalbn+0x5e>
 80168d4:	2a00      	cmp	r2, #0
 80168d6:	dd08      	ble.n	80168ea <scalbn+0x9a>
 80168d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80168dc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80168e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80168e4:	ec45 4b10 	vmov	d0, r4, r5
 80168e8:	bd70      	pop	{r4, r5, r6, pc}
 80168ea:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80168ee:	da08      	bge.n	8016902 <scalbn+0xb2>
 80168f0:	2d00      	cmp	r5, #0
 80168f2:	a10b      	add	r1, pc, #44	@ (adr r1, 8016920 <scalbn+0xd0>)
 80168f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80168f8:	dac1      	bge.n	801687e <scalbn+0x2e>
 80168fa:	a10f      	add	r1, pc, #60	@ (adr r1, 8016938 <scalbn+0xe8>)
 80168fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016900:	e7bd      	b.n	801687e <scalbn+0x2e>
 8016902:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016906:	3236      	adds	r2, #54	@ 0x36
 8016908:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 801690c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016910:	4620      	mov	r0, r4
 8016912:	4b0d      	ldr	r3, [pc, #52]	@ (8016948 <scalbn+0xf8>)
 8016914:	4629      	mov	r1, r5
 8016916:	2200      	movs	r2, #0
 8016918:	e7d4      	b.n	80168c4 <scalbn+0x74>
 801691a:	bf00      	nop
 801691c:	f3af 8000 	nop.w
 8016920:	c2f8f359 	.word	0xc2f8f359
 8016924:	01a56e1f 	.word	0x01a56e1f
 8016928:	8800759c 	.word	0x8800759c
 801692c:	7e37e43c 	.word	0x7e37e43c
 8016930:	8800759c 	.word	0x8800759c
 8016934:	fe37e43c 	.word	0xfe37e43c
 8016938:	c2f8f359 	.word	0xc2f8f359
 801693c:	81a56e1f 	.word	0x81a56e1f
 8016940:	43500000 	.word	0x43500000
 8016944:	ffff3cb0 	.word	0xffff3cb0
 8016948:	3c900000 	.word	0x3c900000

0801694c <with_errno>:
 801694c:	b510      	push	{r4, lr}
 801694e:	ed2d 8b02 	vpush	{d8}
 8016952:	eeb0 8a40 	vmov.f32	s16, s0
 8016956:	eef0 8a60 	vmov.f32	s17, s1
 801695a:	4604      	mov	r4, r0
 801695c:	f7fb fa1e 	bl	8011d9c <__errno>
 8016960:	eeb0 0a48 	vmov.f32	s0, s16
 8016964:	eef0 0a68 	vmov.f32	s1, s17
 8016968:	ecbd 8b02 	vpop	{d8}
 801696c:	6004      	str	r4, [r0, #0]
 801696e:	bd10      	pop	{r4, pc}

08016970 <xflow>:
 8016970:	4603      	mov	r3, r0
 8016972:	b507      	push	{r0, r1, r2, lr}
 8016974:	ec51 0b10 	vmov	r0, r1, d0
 8016978:	b183      	cbz	r3, 801699c <xflow+0x2c>
 801697a:	4602      	mov	r2, r0
 801697c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016980:	e9cd 2300 	strd	r2, r3, [sp]
 8016984:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016988:	f7e9 fe5e 	bl	8000648 <__aeabi_dmul>
 801698c:	ec41 0b10 	vmov	d0, r0, r1
 8016990:	2022      	movs	r0, #34	@ 0x22
 8016992:	b003      	add	sp, #12
 8016994:	f85d eb04 	ldr.w	lr, [sp], #4
 8016998:	f7ff bfd8 	b.w	801694c <with_errno>
 801699c:	4602      	mov	r2, r0
 801699e:	460b      	mov	r3, r1
 80169a0:	e7ee      	b.n	8016980 <xflow+0x10>
 80169a2:	0000      	movs	r0, r0
 80169a4:	0000      	movs	r0, r0
	...

080169a8 <__math_uflow>:
 80169a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80169b0 <__math_uflow+0x8>
 80169ac:	f7ff bfe0 	b.w	8016970 <xflow>
 80169b0:	00000000 	.word	0x00000000
 80169b4:	10000000 	.word	0x10000000

080169b8 <__math_oflow>:
 80169b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80169c0 <__math_oflow+0x8>
 80169bc:	f7ff bfd8 	b.w	8016970 <xflow>
 80169c0:	00000000 	.word	0x00000000
 80169c4:	70000000 	.word	0x70000000

080169c8 <__ieee754_sqrt>:
 80169c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169cc:	4a68      	ldr	r2, [pc, #416]	@ (8016b70 <__ieee754_sqrt+0x1a8>)
 80169ce:	ec55 4b10 	vmov	r4, r5, d0
 80169d2:	43aa      	bics	r2, r5
 80169d4:	462b      	mov	r3, r5
 80169d6:	4621      	mov	r1, r4
 80169d8:	d110      	bne.n	80169fc <__ieee754_sqrt+0x34>
 80169da:	4622      	mov	r2, r4
 80169dc:	4620      	mov	r0, r4
 80169de:	4629      	mov	r1, r5
 80169e0:	f7e9 fe32 	bl	8000648 <__aeabi_dmul>
 80169e4:	4602      	mov	r2, r0
 80169e6:	460b      	mov	r3, r1
 80169e8:	4620      	mov	r0, r4
 80169ea:	4629      	mov	r1, r5
 80169ec:	f7e9 fc76 	bl	80002dc <__adddf3>
 80169f0:	4604      	mov	r4, r0
 80169f2:	460d      	mov	r5, r1
 80169f4:	ec45 4b10 	vmov	d0, r4, r5
 80169f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169fc:	2d00      	cmp	r5, #0
 80169fe:	dc0e      	bgt.n	8016a1e <__ieee754_sqrt+0x56>
 8016a00:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8016a04:	4322      	orrs	r2, r4
 8016a06:	d0f5      	beq.n	80169f4 <__ieee754_sqrt+0x2c>
 8016a08:	b19d      	cbz	r5, 8016a32 <__ieee754_sqrt+0x6a>
 8016a0a:	4622      	mov	r2, r4
 8016a0c:	4620      	mov	r0, r4
 8016a0e:	4629      	mov	r1, r5
 8016a10:	f7e9 fc62 	bl	80002d8 <__aeabi_dsub>
 8016a14:	4602      	mov	r2, r0
 8016a16:	460b      	mov	r3, r1
 8016a18:	f7e9 ff40 	bl	800089c <__aeabi_ddiv>
 8016a1c:	e7e8      	b.n	80169f0 <__ieee754_sqrt+0x28>
 8016a1e:	152a      	asrs	r2, r5, #20
 8016a20:	d115      	bne.n	8016a4e <__ieee754_sqrt+0x86>
 8016a22:	2000      	movs	r0, #0
 8016a24:	e009      	b.n	8016a3a <__ieee754_sqrt+0x72>
 8016a26:	0acb      	lsrs	r3, r1, #11
 8016a28:	3a15      	subs	r2, #21
 8016a2a:	0549      	lsls	r1, r1, #21
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d0fa      	beq.n	8016a26 <__ieee754_sqrt+0x5e>
 8016a30:	e7f7      	b.n	8016a22 <__ieee754_sqrt+0x5a>
 8016a32:	462a      	mov	r2, r5
 8016a34:	e7fa      	b.n	8016a2c <__ieee754_sqrt+0x64>
 8016a36:	005b      	lsls	r3, r3, #1
 8016a38:	3001      	adds	r0, #1
 8016a3a:	02dc      	lsls	r4, r3, #11
 8016a3c:	d5fb      	bpl.n	8016a36 <__ieee754_sqrt+0x6e>
 8016a3e:	1e44      	subs	r4, r0, #1
 8016a40:	1b12      	subs	r2, r2, r4
 8016a42:	f1c0 0420 	rsb	r4, r0, #32
 8016a46:	fa21 f404 	lsr.w	r4, r1, r4
 8016a4a:	4323      	orrs	r3, r4
 8016a4c:	4081      	lsls	r1, r0
 8016a4e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a52:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8016a56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016a5a:	07d2      	lsls	r2, r2, #31
 8016a5c:	bf5c      	itt	pl
 8016a5e:	005b      	lslpl	r3, r3, #1
 8016a60:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8016a64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016a68:	bf58      	it	pl
 8016a6a:	0049      	lslpl	r1, r1, #1
 8016a6c:	2600      	movs	r6, #0
 8016a6e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8016a72:	106d      	asrs	r5, r5, #1
 8016a74:	0049      	lsls	r1, r1, #1
 8016a76:	2016      	movs	r0, #22
 8016a78:	4632      	mov	r2, r6
 8016a7a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8016a7e:	1917      	adds	r7, r2, r4
 8016a80:	429f      	cmp	r7, r3
 8016a82:	bfde      	ittt	le
 8016a84:	193a      	addle	r2, r7, r4
 8016a86:	1bdb      	suble	r3, r3, r7
 8016a88:	1936      	addle	r6, r6, r4
 8016a8a:	0fcf      	lsrs	r7, r1, #31
 8016a8c:	3801      	subs	r0, #1
 8016a8e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016a92:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016a96:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8016a9a:	d1f0      	bne.n	8016a7e <__ieee754_sqrt+0xb6>
 8016a9c:	4604      	mov	r4, r0
 8016a9e:	2720      	movs	r7, #32
 8016aa0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8016aa4:	429a      	cmp	r2, r3
 8016aa6:	eb00 0e0c 	add.w	lr, r0, ip
 8016aaa:	db02      	blt.n	8016ab2 <__ieee754_sqrt+0xea>
 8016aac:	d113      	bne.n	8016ad6 <__ieee754_sqrt+0x10e>
 8016aae:	458e      	cmp	lr, r1
 8016ab0:	d811      	bhi.n	8016ad6 <__ieee754_sqrt+0x10e>
 8016ab2:	f1be 0f00 	cmp.w	lr, #0
 8016ab6:	eb0e 000c 	add.w	r0, lr, ip
 8016aba:	da42      	bge.n	8016b42 <__ieee754_sqrt+0x17a>
 8016abc:	2800      	cmp	r0, #0
 8016abe:	db40      	blt.n	8016b42 <__ieee754_sqrt+0x17a>
 8016ac0:	f102 0801 	add.w	r8, r2, #1
 8016ac4:	1a9b      	subs	r3, r3, r2
 8016ac6:	458e      	cmp	lr, r1
 8016ac8:	bf88      	it	hi
 8016aca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8016ace:	eba1 010e 	sub.w	r1, r1, lr
 8016ad2:	4464      	add	r4, ip
 8016ad4:	4642      	mov	r2, r8
 8016ad6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8016ada:	3f01      	subs	r7, #1
 8016adc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8016ae0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016ae4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8016ae8:	d1dc      	bne.n	8016aa4 <__ieee754_sqrt+0xdc>
 8016aea:	4319      	orrs	r1, r3
 8016aec:	d01b      	beq.n	8016b26 <__ieee754_sqrt+0x15e>
 8016aee:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8016b74 <__ieee754_sqrt+0x1ac>
 8016af2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8016b78 <__ieee754_sqrt+0x1b0>
 8016af6:	e9da 0100 	ldrd	r0, r1, [sl]
 8016afa:	e9db 2300 	ldrd	r2, r3, [fp]
 8016afe:	f7e9 fbeb 	bl	80002d8 <__aeabi_dsub>
 8016b02:	e9da 8900 	ldrd	r8, r9, [sl]
 8016b06:	4602      	mov	r2, r0
 8016b08:	460b      	mov	r3, r1
 8016b0a:	4640      	mov	r0, r8
 8016b0c:	4649      	mov	r1, r9
 8016b0e:	f7ea f817 	bl	8000b40 <__aeabi_dcmple>
 8016b12:	b140      	cbz	r0, 8016b26 <__ieee754_sqrt+0x15e>
 8016b14:	f1b4 3fff 	cmp.w	r4, #4294967295
 8016b18:	e9da 0100 	ldrd	r0, r1, [sl]
 8016b1c:	e9db 2300 	ldrd	r2, r3, [fp]
 8016b20:	d111      	bne.n	8016b46 <__ieee754_sqrt+0x17e>
 8016b22:	3601      	adds	r6, #1
 8016b24:	463c      	mov	r4, r7
 8016b26:	1072      	asrs	r2, r6, #1
 8016b28:	0863      	lsrs	r3, r4, #1
 8016b2a:	07f1      	lsls	r1, r6, #31
 8016b2c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8016b30:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8016b34:	bf48      	it	mi
 8016b36:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8016b3a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8016b3e:	4618      	mov	r0, r3
 8016b40:	e756      	b.n	80169f0 <__ieee754_sqrt+0x28>
 8016b42:	4690      	mov	r8, r2
 8016b44:	e7be      	b.n	8016ac4 <__ieee754_sqrt+0xfc>
 8016b46:	f7e9 fbc9 	bl	80002dc <__adddf3>
 8016b4a:	e9da 8900 	ldrd	r8, r9, [sl]
 8016b4e:	4602      	mov	r2, r0
 8016b50:	460b      	mov	r3, r1
 8016b52:	4640      	mov	r0, r8
 8016b54:	4649      	mov	r1, r9
 8016b56:	f7e9 ffe9 	bl	8000b2c <__aeabi_dcmplt>
 8016b5a:	b120      	cbz	r0, 8016b66 <__ieee754_sqrt+0x19e>
 8016b5c:	1ca0      	adds	r0, r4, #2
 8016b5e:	bf08      	it	eq
 8016b60:	3601      	addeq	r6, #1
 8016b62:	3402      	adds	r4, #2
 8016b64:	e7df      	b.n	8016b26 <__ieee754_sqrt+0x15e>
 8016b66:	1c63      	adds	r3, r4, #1
 8016b68:	f023 0401 	bic.w	r4, r3, #1
 8016b6c:	e7db      	b.n	8016b26 <__ieee754_sqrt+0x15e>
 8016b6e:	bf00      	nop
 8016b70:	7ff00000 	.word	0x7ff00000
 8016b74:	200003a8 	.word	0x200003a8
 8016b78:	200003a0 	.word	0x200003a0

08016b7c <_init>:
 8016b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b7e:	bf00      	nop
 8016b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b82:	bc08      	pop	{r3}
 8016b84:	469e      	mov	lr, r3
 8016b86:	4770      	bx	lr

08016b88 <_fini>:
 8016b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b8a:	bf00      	nop
 8016b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016b8e:	bc08      	pop	{r3}
 8016b90:	469e      	mov	lr, r3
 8016b92:	4770      	bx	lr
