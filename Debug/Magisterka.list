
Magisterka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000168b8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08016a98  08016a98  00017a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080172c8  080172c8  00019388  2**0
                  CONTENTS
  4 .ARM          00000008  080172c8  080172c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080172d0  080172d0  00019388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080172d0  080172d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080172d4  080172d4  000182d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000388  20000000  080172d8  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002310  20000388  08017660  00019388  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002698  08017660  00019698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019388  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025530  00000000  00000000  000193b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ebf  00000000  00000000  0003e8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f18  00000000  00000000  000437a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017f3  00000000  00000000  000456c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d55b  00000000  00000000  00046eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026635  00000000  00000000  0007440e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f045  00000000  00000000  0009aa43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b9a88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f90  00000000  00000000  001b9acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001c3a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000388 	.word	0x20000388
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016a80 	.word	0x08016a80

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000038c 	.word	0x2000038c
 800021c:	08016a80 	.word	0x08016a80

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	0000      	movs	r0, r0
	...

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f003 f8d2 	bl	80041e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 fbdd 	bl	8001800 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f001 f9ff 	bl	8002448 <MX_GPIO_Init>
  MX_DMA_Init();
 800104a:	f001 f9b3 	bl	80023b4 <MX_DMA_Init>
  MX_ADC3_Init();
 800104e:	f000 fc9d 	bl	800198c <MX_ADC3_Init>
  MX_ADC4_Init();
 8001052:	f000 fd67 	bl	8001b24 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001056:	f000 fdcb 	bl	8001bf0 <MX_ADC5_Init>
  MX_DAC1_Init();
 800105a:	f000 fe4f 	bl	8001cfc <MX_DAC1_Init>
  MX_DAC2_Init();
 800105e:	f000 fe99 	bl	8001d94 <MX_DAC2_Init>
  MX_TIM1_Init();
 8001062:	f000 fed1 	bl	8001e08 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001066:	f001 f84f 	bl	8002108 <MX_TIM8_Init>
  MX_UART4_Init();
 800106a:	f001 f957 	bl	800231c <MX_UART4_Init>
  MX_ADC1_Init();
 800106e:	f000 fc15 	bl	800189c <MX_ADC1_Init>
  MX_TIM4_Init();
 8001072:	f000 ff5b 	bl	8001f2c <MX_TIM4_Init>
  MX_USB_Device_Init();
 8001076:	f00e fe31 	bl	800fcdc <MX_USB_Device_Init>
  MX_TIM15_Init();
 800107a:	f001 f8d7 	bl	800222c <MX_TIM15_Init>
  MX_TIM16_Init();
 800107e:	f001 f927 	bl	80022d0 <MX_TIM16_Init>
  MX_TIM7_Init();
 8001082:	f001 f80b 	bl	800209c <MX_TIM7_Init>
  MX_TIM6_Init();
 8001086:	f000 ffc9 	bl	800201c <MX_TIM6_Init>
  MX_CORDIC_Init();
 800108a:	f000 fe23 	bl	8001cd4 <MX_CORDIC_Init>


  while (1)
  {

	  	  	  	  checkfaults = Check_Faults();
 800108e:	f001 fc69 	bl	8002964 <Check_Faults>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	4b7c      	ldr	r3, [pc, #496]	@ (8001288 <main+0x250>)
 8001098:	701a      	strb	r2, [r3, #0]

	  	  	  	  if (dataReceivedFlag) {
 800109a:	4b7c      	ldr	r3, [pc, #496]	@ (800128c <main+0x254>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <main+0x76>
	  	  	  	      // Process the data
	  	  	  	      ParseUSBCommand();  // Function to handle the received command
 80010a4:	f001 ffe6 	bl	8003074 <ParseUSBCommand>

	  	  	  	      // Clear the flag after processing
	  	  	  	      dataReceivedFlag = 0;
 80010a8:	4b78      	ldr	r3, [pc, #480]	@ (800128c <main+0x254>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
	  	  	  	  }

	  	  	  	  interlock = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 80010ae:	2104      	movs	r1, #4
 80010b0:	4877      	ldr	r0, [pc, #476]	@ (8001290 <main+0x258>)
 80010b2:	f005 fdad 	bl	8006c10 <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b76      	ldr	r3, [pc, #472]	@ (8001294 <main+0x25c>)
 80010bc:	701a      	strb	r2, [r3, #0]

	  	          if (interlock &&  start_program && !(checkfaults)) {
 80010be:	4b75      	ldr	r3, [pc, #468]	@ (8001294 <main+0x25c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d00e      	beq.n	80010e4 <main+0xac>
 80010c6:	4b74      	ldr	r3, [pc, #464]	@ (8001298 <main+0x260>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d00a      	beq.n	80010e4 <main+0xac>
 80010ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001288 <main+0x250>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d106      	bne.n	80010e4 <main+0xac>
	  	        	//USB_SendString("State: EVENT start_program \r\n");
	  	              event = EVENT_START;
 80010d6:	4b71      	ldr	r3, [pc, #452]	@ (800129c <main+0x264>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
	  	              start_program = 0;
 80010dc:	4b6e      	ldr	r3, [pc, #440]	@ (8001298 <main+0x260>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
 80010e2:	e019      	b.n	8001118 <main+0xe0>
	  	          }else if (interlock &&  stop_program && !(checkfaults)) {
 80010e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001294 <main+0x25c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00e      	beq.n	800110a <main+0xd2>
 80010ec:	4b6c      	ldr	r3, [pc, #432]	@ (80012a0 <main+0x268>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00a      	beq.n	800110a <main+0xd2>
 80010f4:	4b64      	ldr	r3, [pc, #400]	@ (8001288 <main+0x250>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d106      	bne.n	800110a <main+0xd2>
		  	        	//USB_SendString("State: EVENT start_program \r\n");
		  	              event = EVENT_SHUTDOWN;
 80010fc:	4b67      	ldr	r3, [pc, #412]	@ (800129c <main+0x264>)
 80010fe:	2203      	movs	r2, #3
 8001100:	701a      	strb	r2, [r3, #0]
		  	              stop_program = 0;
 8001102:	4b67      	ldr	r3, [pc, #412]	@ (80012a0 <main+0x268>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
 8001108:	e006      	b.n	8001118 <main+0xe0>
		  	          }
	  	          else if (clear_fault) {
 800110a:	4b66      	ldr	r3, [pc, #408]	@ (80012a4 <main+0x26c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <main+0xe0>
	  	        	  /* clear fault condition */
	  	              event = EVENT_CLEAR_FAULT;
 8001112:	4b62      	ldr	r3, [pc, #392]	@ (800129c <main+0x264>)
 8001114:	2202      	movs	r2, #2
 8001116:	701a      	strb	r2, [r3, #0]
	  	          }

	  	         if (!interlock || checkfaults /* fault condition */)
 8001118:	4b5e      	ldr	r3, [pc, #376]	@ (8001294 <main+0x25c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <main+0xf0>
 8001120:	4b59      	ldr	r3, [pc, #356]	@ (8001288 <main+0x250>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <main+0xf6>
	  	       	 {
	  	       	  	event = EVENT_FAULT;
 8001128:	4b5c      	ldr	r3, [pc, #368]	@ (800129c <main+0x264>)
 800112a:	2201      	movs	r2, #1
 800112c:	701a      	strb	r2, [r3, #0]
	  	       	 }

	  	          // Handle the event and update the state
	  	          currentState = handle_event(currentState, event);
 800112e:	4b5e      	ldr	r3, [pc, #376]	@ (80012a8 <main+0x270>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	4a5a      	ldr	r2, [pc, #360]	@ (800129c <main+0x264>)
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f001 fad1 	bl	80026e0 <handle_event>
 800113e:	4603      	mov	r3, r0
 8001140:	461a      	mov	r2, r3
 8001142:	4b59      	ldr	r3, [pc, #356]	@ (80012a8 <main+0x270>)
 8001144:	701a      	strb	r2, [r3, #0]

	  	          // Perform actions based on the current state
	  	          switch (currentState) {
 8001146:	4b58      	ldr	r3, [pc, #352]	@ (80012a8 <main+0x270>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b04      	cmp	r3, #4
 800114c:	f200 82fe 	bhi.w	800174c <main+0x714>
 8001150:	a201      	add	r2, pc, #4	@ (adr r2, 8001158 <main+0x120>)
 8001152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001156:	bf00      	nop
 8001158:	0800116d 	.word	0x0800116d
 800115c:	0800122b 	.word	0x0800122b
 8001160:	080012fd 	.word	0x080012fd
 8001164:	080016a1 	.word	0x080016a1
 8001168:	08001715 	.word	0x08001715
	  	              {
	  	            	//GPIOs
	  	            	//CUrrent Sensors OCD pin needed to go low in reset condition after fault event
	  	            	//HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_SET);
	  	            	//HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 800116c:	2201      	movs	r2, #1
 800116e:	2104      	movs	r1, #4
 8001170:	484e      	ldr	r0, [pc, #312]	@ (80012ac <main+0x274>)
 8001172:	f005 fd65 	bl	8006c40 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP
 8001176:	2200      	movs	r2, #0
 8001178:	2120      	movs	r1, #32
 800117a:	4845      	ldr	r0, [pc, #276]	@ (8001290 <main+0x258>)
 800117c:	f005 fd60 	bl	8006c40 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 8001180:	2201      	movs	r2, #1
 8001182:	2120      	movs	r1, #32
 8001184:	484a      	ldr	r0, [pc, #296]	@ (80012b0 <main+0x278>)
 8001186:	f005 fd5b 	bl	8006c40 <HAL_GPIO_WritePin>
	  	            	HAL_Delay(1000);
 800118a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800118e:	f003 f89b 	bl	80042c8 <HAL_Delay>
	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2120      	movs	r1, #32
 8001196:	4846      	ldr	r0, [pc, #280]	@ (80012b0 <main+0x278>)
 8001198:	f005 fd52 	bl	8006c40 <HAL_GPIO_WritePin>
	  	            	  // Start PWM for delay time transfer to FPGA
	  	            	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800119c:	2100      	movs	r1, #0
 800119e:	4845      	ldr	r0, [pc, #276]	@ (80012b4 <main+0x27c>)
 80011a0:	f008 fcac 	bl	8009afc <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80011a4:	2104      	movs	r1, #4
 80011a6:	4844      	ldr	r0, [pc, #272]	@ (80012b8 <main+0x280>)
 80011a8:	f008 fca8 	bl	8009afc <HAL_TIM_PWM_Start>

	  	            	  //DAC for  current reference
	  	            	  ///DAC1_OUT1 	- MAX1
	  	            	  //DAC1_OUT2 	- MAX2
	  	            	  //DAC2_OUT1	- MIN
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_1);
 80011ac:	2100      	movs	r1, #0
 80011ae:	4843      	ldr	r0, [pc, #268]	@ (80012bc <main+0x284>)
 80011b0:	f004 fe7e 	bl	8005eb0 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_2);
 80011b4:	2110      	movs	r1, #16
 80011b6:	4841      	ldr	r0, [pc, #260]	@ (80012bc <main+0x284>)
 80011b8:	f004 fe7a 	bl	8005eb0 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac2,DAC2_CHANNEL_1);
 80011bc:	2100      	movs	r1, #0
 80011be:	4840      	ldr	r0, [pc, #256]	@ (80012c0 <main+0x288>)
 80011c0:	f004 fe76 	bl	8005eb0 <HAL_DAC_Start>

	  	            	//if( HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R)!= HAL_OK) printf("error");
	  	            	//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);

	  	            	  // FAN PWM and 5s timer6 for check temperature and change duty cycle
	  	            	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80011c4:	2100      	movs	r1, #0
 80011c6:	483f      	ldr	r0, [pc, #252]	@ (80012c4 <main+0x28c>)
 80011c8:	f008 fc98 	bl	8009afc <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_Base_Start_IT(&htim6);
 80011cc:	483e      	ldr	r0, [pc, #248]	@ (80012c8 <main+0x290>)
 80011ce:	f008 fb97 	bl	8009900 <HAL_TIM_Base_Start_IT>

	  	            	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 80011d2:	217f      	movs	r1, #127	@ 0x7f
 80011d4:	483d      	ldr	r0, [pc, #244]	@ (80012cc <main+0x294>)
 80011d6:	f004 fb9d 	bl	8005914 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 80011da:	217f      	movs	r1, #127	@ 0x7f
 80011dc:	483c      	ldr	r0, [pc, #240]	@ (80012d0 <main+0x298>)
 80011de:	f004 fb99 	bl	8005914 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 80011e2:	217f      	movs	r1, #127	@ 0x7f
 80011e4:	483b      	ldr	r0, [pc, #236]	@ (80012d4 <main+0x29c>)
 80011e6:	f004 fb95 	bl	8005914 <HAL_ADCEx_Calibration_Start>

	  	            	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_dma_buffer, 5);
 80011ea:	2205      	movs	r2, #5
 80011ec:	493a      	ldr	r1, [pc, #232]	@ (80012d8 <main+0x2a0>)
 80011ee:	4837      	ldr	r0, [pc, #220]	@ (80012cc <main+0x294>)
 80011f0:	f003 fc8c 	bl	8004b0c <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4_dma_buffer, 2);
 80011f4:	2202      	movs	r2, #2
 80011f6:	4939      	ldr	r1, [pc, #228]	@ (80012dc <main+0x2a4>)
 80011f8:	4835      	ldr	r0, [pc, #212]	@ (80012d0 <main+0x298>)
 80011fa:	f003 fc87 	bl	8004b0c <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_dma_buffer, 10);
 80011fe:	220a      	movs	r2, #10
 8001200:	4937      	ldr	r1, [pc, #220]	@ (80012e0 <main+0x2a8>)
 8001202:	4834      	ldr	r0, [pc, #208]	@ (80012d4 <main+0x29c>)
 8001204:	f003 fc82 	bl	8004b0c <HAL_ADC_Start_DMA>

	  	            	Set_PWM_DutyCycle(20);
 8001208:	2014      	movs	r0, #20
 800120a:	f001 fac3 	bl	8002794 <Set_PWM_DutyCycle>

	  	            	current_sensor1_vref = adc3_dma_buffer[0];// reference for imax imin
 800120e:	4b32      	ldr	r3, [pc, #200]	@ (80012d8 <main+0x2a0>)
 8001210:	881b      	ldrh	r3, [r3, #0]
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b33      	ldr	r3, [pc, #204]	@ (80012e4 <main+0x2ac>)
 8001216:	801a      	strh	r2, [r3, #0]
	  	            	current_sensor2_vref = adc3_dma_buffer[1];// reference for imax imin
 8001218:	4b2f      	ldr	r3, [pc, #188]	@ (80012d8 <main+0x2a0>)
 800121a:	885b      	ldrh	r3, [r3, #2]
 800121c:	b29a      	uxth	r2, r3
 800121e:	4b32      	ldr	r3, [pc, #200]	@ (80012e8 <main+0x2b0>)
 8001220:	801a      	strh	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 8001222:	4b21      	ldr	r3, [pc, #132]	@ (80012a8 <main+0x270>)
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 8001228:	e295      	b.n	8001756 <main+0x71e>
	  	              case STATE_STANDBY:
	  	                  // Wait for start_program signal
	  	              {
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
	  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	            	checkreads = Check_Ready();
 800122a:	f001 fbd5 	bl	80029d8 <Check_Ready>
 800122e:	4603      	mov	r3, r0
 8001230:	461a      	mov	r2, r3
 8001232:	4b2e      	ldr	r3, [pc, #184]	@ (80012ec <main+0x2b4>)
 8001234:	701a      	strb	r2, [r3, #0]
	  	            	  if(start_program && interlock &&  !(checkfaults)   && checkreads){
 8001236:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <main+0x260>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	f000 8288 	beq.w	8001750 <main+0x718>
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <main+0x25c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 8283 	beq.w	8001750 <main+0x718>
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <main+0x250>)
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	f040 827e 	bne.w	8001750 <main+0x718>
 8001254:	4b25      	ldr	r3, [pc, #148]	@ (80012ec <main+0x2b4>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 8279 	beq.w	8001750 <main+0x718>
	  	            		  currentState = STATE_REGULATION;//STATE_SOFT_START;
 800125e:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <main+0x270>)
 8001260:	2202      	movs	r2, #2
 8001262:	701a      	strb	r2, [r3, #0]

		  	            	  if(once == 0){
 8001264:	4b22      	ldr	r3, [pc, #136]	@ (80012f0 <main+0x2b8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	f040 8271 	bne.w	8001750 <main+0x718>
		  	            	  //Start timer that start_program ramp and pi regulation
		  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
 800126e:	2200      	movs	r2, #0
 8001270:	2104      	movs	r1, #4
 8001272:	480e      	ldr	r0, [pc, #56]	@ (80012ac <main+0x274>)
 8001274:	f005 fce4 	bl	8006c40 <HAL_GPIO_WritePin>
		  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
		  	            	HAL_TIM_Base_Start_IT(&htim15); // START TIM15 THATS IS MAIN CONTROL LOOP
 8001278:	481e      	ldr	r0, [pc, #120]	@ (80012f4 <main+0x2bc>)
 800127a:	f008 fb41 	bl	8009900 <HAL_TIM_Base_Start_IT>
		  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
		  	            	RAMP_FINISHED = 0;
 800127e:	4b1e      	ldr	r3, [pc, #120]	@ (80012f8 <main+0x2c0>)
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
		  	            	//once = 1;
		  	            	  }
	  	            	  }

	  	              }
	  	                  break;
 8001284:	e264      	b.n	8001750 <main+0x718>
 8001286:	bf00      	nop
 8001288:	20000b58 	.word	0x20000b58
 800128c:	20000b48 	.word	0x20000b48
 8001290:	48000800 	.word	0x48000800
 8001294:	20000b60 	.word	0x20000b60
 8001298:	20000b54 	.word	0x20000b54
 800129c:	20000018 	.word	0x20000018
 80012a0:	20000b55 	.word	0x20000b55
 80012a4:	20000b56 	.word	0x20000b56
 80012a8:	20000b57 	.word	0x20000b57
 80012ac:	48001400 	.word	0x48001400
 80012b0:	48001000 	.word	0x48001000
 80012b4:	20000784 	.word	0x20000784
 80012b8:	200008b4 	.word	0x200008b4
 80012bc:	2000069c 	.word	0x2000069c
 80012c0:	200006b0 	.word	0x200006b0
 80012c4:	200007d0 	.word	0x200007d0
 80012c8:	2000081c 	.word	0x2000081c
 80012cc:	20000410 	.word	0x20000410
 80012d0:	2000047c 	.word	0x2000047c
 80012d4:	200004e8 	.word	0x200004e8
 80012d8:	20000a48 	.word	0x20000a48
 80012dc:	20000a5c 	.word	0x20000a5c
 80012e0:	20000a70 	.word	0x20000a70
 80012e4:	20000a2c 	.word	0x20000a2c
 80012e8:	20000a2e 	.word	0x20000a2e
 80012ec:	20000b59 	.word	0x20000b59
 80012f0:	20000b5c 	.word	0x20000b5c
 80012f4:	20000900 	.word	0x20000900
 80012f8:	20000a60 	.word	0x20000a60

	  	              case STATE_REGULATION:
	  	                  // Maintain output voltage/current
	  	            	  // 20khz sample time of regulators Timer 15
	  	                  {
	  	                	  if(flag_control)
 80012fc:	4b64      	ldr	r3, [pc, #400]	@ (8001490 <main+0x458>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	f000 8227 	beq.w	8001754 <main+0x71c>
	  	                	  {
	  	                		  	  	input_vol = Low_pass_filter(input_voltage, input_vol);
 8001306:	4b63      	ldr	r3, [pc, #396]	@ (8001494 <main+0x45c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001312:	4b61      	ldr	r3, [pc, #388]	@ (8001498 <main+0x460>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	ee07 3a10 	vmov	s14, r3
 800131a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800131e:	eef0 0a47 	vmov.f32	s1, s14
 8001322:	eeb0 0a67 	vmov.f32	s0, s15
 8001326:	f001 fda7 	bl	8002e78 <Low_pass_filter>
 800132a:	eef0 7a40 	vmov.f32	s15, s0
 800132e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001332:	ee17 2a90 	vmov	r2, s15
 8001336:	4b58      	ldr	r3, [pc, #352]	@ (8001498 <main+0x460>)
 8001338:	601a      	str	r2, [r3, #0]
	  	                		  	  	output_vol = Low_pass_filter(output_voltage, output_vol);
 800133a:	4b58      	ldr	r3, [pc, #352]	@ (800149c <main+0x464>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001346:	4b56      	ldr	r3, [pc, #344]	@ (80014a0 <main+0x468>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	ee07 3a10 	vmov	s14, r3
 800134e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001352:	eef0 0a47 	vmov.f32	s1, s14
 8001356:	eeb0 0a67 	vmov.f32	s0, s15
 800135a:	f001 fd8d 	bl	8002e78 <Low_pass_filter>
 800135e:	eef0 7a40 	vmov.f32	s15, s0
 8001362:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001366:	ee17 2a90 	vmov	r2, s15
 800136a:	4b4d      	ldr	r3, [pc, #308]	@ (80014a0 <main+0x468>)
 800136c:	601a      	str	r2, [r3, #0]
	  	                		Gv = (float)output_vol/(float)input_vol;//output_voltage/input_voltage;
 800136e:	4b4c      	ldr	r3, [pc, #304]	@ (80014a0 <main+0x468>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800137a:	4b47      	ldr	r3, [pc, #284]	@ (8001498 <main+0x460>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138a:	4b46      	ldr	r3, [pc, #280]	@ (80014a4 <main+0x46c>)
 800138c:	edc3 7a00 	vstr	s15, [r3]

	  	                				if(Gv<2) //CZARY
 8001390:	4b44      	ldr	r3, [pc, #272]	@ (80014a4 <main+0x46c>)
 8001392:	edd3 7a00 	vldr	s15, [r3]
 8001396:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800139a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a2:	f140 8087 	bpl.w	80014b4 <main+0x47c>
	  	                				{
	  	                					delay_tr = acos(1-Gv)/wr;
 80013a6:	4b3f      	ldr	r3, [pc, #252]	@ (80014a4 <main+0x46c>)
 80013a8:	edd3 7a00 	vldr	s15, [r3]
 80013ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b4:	ee17 0a90 	vmov	r0, s15
 80013b8:	f7ff f8ee 	bl	8000598 <__aeabi_f2d>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	ec43 2b10 	vmov	d0, r2, r3
 80013c4:	f014 f940 	bl	8015648 <acos>
 80013c8:	ec51 0b10 	vmov	r0, r1, d0
 80013cc:	a32c      	add	r3, pc, #176	@ (adr r3, 8001480 <main+0x448>)
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f7ff fa63 	bl	800089c <__aeabi_ddiv>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4610      	mov	r0, r2
 80013dc:	4619      	mov	r1, r3
 80013de:	f7ff fc2b 	bl	8000c38 <__aeabi_d2f>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4a30      	ldr	r2, [pc, #192]	@ (80014a8 <main+0x470>)
 80013e6:	6013      	str	r3, [r2, #0]
	  	                					imin = (int)(Imin_Factor*output_voltage*sqrt((2-Gv)/Gv)/Z); //[mA] Negative current needed to Zero voltage switching in resonance
 80013e8:	4b2c      	ldr	r3, [pc, #176]	@ (800149c <main+0x464>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	ee07 3a90 	vmov	s15, r3
 80013f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013f4:	4b2d      	ldr	r3, [pc, #180]	@ (80014ac <main+0x474>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013fe:	ee17 0a90 	vmov	r0, s15
 8001402:	f7ff f8c9 	bl	8000598 <__aeabi_f2d>
 8001406:	4604      	mov	r4, r0
 8001408:	460d      	mov	r5, r1
 800140a:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <main+0x46c>)
 800140c:	edd3 7a00 	vldr	s15, [r3]
 8001410:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001414:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001418:	4b22      	ldr	r3, [pc, #136]	@ (80014a4 <main+0x46c>)
 800141a:	edd3 7a00 	vldr	s15, [r3]
 800141e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001422:	ee16 0a90 	vmov	r0, s13
 8001426:	f7ff f8b7 	bl	8000598 <__aeabi_f2d>
 800142a:	4602      	mov	r2, r0
 800142c:	460b      	mov	r3, r1
 800142e:	ec43 2b10 	vmov	d0, r2, r3
 8001432:	f014 f9ad 	bl	8015790 <sqrt>
 8001436:	ec53 2b10 	vmov	r2, r3, d0
 800143a:	4620      	mov	r0, r4
 800143c:	4629      	mov	r1, r5
 800143e:	f7ff f903 	bl	8000648 <__aeabi_dmul>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	a30f      	add	r3, pc, #60	@ (adr r3, 8001488 <main+0x450>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff fa24 	bl	800089c <__aeabi_ddiv>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fba4 	bl	8000ba8 <__aeabi_d2iz>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <main+0x478>)
 8001466:	601a      	str	r2, [r3, #0]
	  	                					if(imin>500) imin = 500;
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <main+0x478>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001470:	d95b      	bls.n	800152a <main+0x4f2>
 8001472:	4b0f      	ldr	r3, [pc, #60]	@ (80014b0 <main+0x478>)
 8001474:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	e056      	b.n	800152a <main+0x4f2>
 800147c:	f3af 8000 	nop.w
 8001480:	78000000 	.word	0x78000000
 8001484:	4190942a 	.word	0x4190942a
 8001488:	9374bc6a 	.word	0x9374bc6a
 800148c:	40624418 	.word	0x40624418
 8001490:	20000b6c 	.word	0x20000b6c
 8001494:	20000a3c 	.word	0x20000a3c
 8001498:	20000024 	.word	0x20000024
 800149c:	20000a54 	.word	0x20000a54
 80014a0:	20000028 	.word	0x20000028
 80014a4:	20000004 	.word	0x20000004
 80014a8:	20000a64 	.word	0x20000a64
 80014ac:	20000020 	.word	0x20000020
 80014b0:	20000a38 	.word	0x20000a38
	  	                				} else if(Gv>=2)
 80014b4:	4bb0      	ldr	r3, [pc, #704]	@ (8001778 <main+0x740>)
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80014be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c6:	db30      	blt.n	800152a <main+0x4f2>
	  	                				{
	  	                					delay_tr = (M_PI-acos(1/(Gv-1)))/wr;
 80014c8:	4bab      	ldr	r3, [pc, #684]	@ (8001778 <main+0x740>)
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014d6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014de:	ee16 0a90 	vmov	r0, s13
 80014e2:	f7ff f859 	bl	8000598 <__aeabi_f2d>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	ec43 2b10 	vmov	d0, r2, r3
 80014ee:	f014 f8ab 	bl	8015648 <acos>
 80014f2:	ec53 2b10 	vmov	r2, r3, d0
 80014f6:	a198      	add	r1, pc, #608	@ (adr r1, 8001758 <main+0x720>)
 80014f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014fc:	f7fe feec 	bl	80002d8 <__aeabi_dsub>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	4610      	mov	r0, r2
 8001506:	4619      	mov	r1, r3
 8001508:	a395      	add	r3, pc, #596	@ (adr r3, 8001760 <main+0x728>)
 800150a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150e:	f7ff f9c5 	bl	800089c <__aeabi_ddiv>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fb8d 	bl	8000c38 <__aeabi_d2f>
 800151e:	4603      	mov	r3, r0
 8001520:	4a96      	ldr	r2, [pc, #600]	@ (800177c <main+0x744>)
 8001522:	6013      	str	r3, [r2, #0]
	  	                					imin = 0;
 8001524:	4b96      	ldr	r3, [pc, #600]	@ (8001780 <main+0x748>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
	  	                				}
	  	                				if(delay_tr<0.001){
 800152a:	4b94      	ldr	r3, [pc, #592]	@ (800177c <main+0x744>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f832 	bl	8000598 <__aeabi_f2d>
 8001534:	a38c      	add	r3, pc, #560	@ (adr r3, 8001768 <main+0x730>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f7ff faf7 	bl	8000b2c <__aeabi_dcmplt>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d01a      	beq.n	800157a <main+0x542>
	  	                				int delay_tr_freq = (int)(1/delay_tr);
 8001544:	4b8d      	ldr	r3, [pc, #564]	@ (800177c <main+0x744>)
 8001546:	ed93 7a00 	vldr	s14, [r3]
 800154a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800154e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001556:	ee17 3a90 	vmov	r3, s15
 800155a:	607b      	str	r3, [r7, #4]
	  	                				if(delay_tr_freq>20000000) delay_tr_freq = 15000000;//10Mhz
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a89      	ldr	r2, [pc, #548]	@ (8001784 <main+0x74c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	dd01      	ble.n	8001568 <main+0x530>
 8001564:	4b88      	ldr	r3, [pc, #544]	@ (8001788 <main+0x750>)
 8001566:	607b      	str	r3, [r7, #4]
	  	                				if(once == 0) Update_PWM_Frequency(&htim1, TIM_CHANNEL_1, 221454); // Set TIM1 CH1 to freq that is delay tr and send to fpga
 8001568:	4b88      	ldr	r3, [pc, #544]	@ (800178c <main+0x754>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d104      	bne.n	800157a <main+0x542>
 8001570:	4a87      	ldr	r2, [pc, #540]	@ (8001790 <main+0x758>)
 8001572:	2100      	movs	r1, #0
 8001574:	4887      	ldr	r0, [pc, #540]	@ (8001794 <main+0x75c>)
 8001576:	f001 f985 	bl	8002884 <Update_PWM_Frequency>
	  	                				}

	  	                				if(RAMP_FINISHED == 0) RAMP(); // Adding to Vramp stepping voltage to create starting ramp
 800157a:	4b87      	ldr	r3, [pc, #540]	@ (8001798 <main+0x760>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <main+0x54e>
 8001582:	f001 fb75 	bl	8002c70 <RAMP>

	  	                				regulatorPI(&imax1, &Integral_I, output_voltage, Vramp, LIM_PEAK_POS, LIM_PEAK_NEG, Kp, Ti, Ts);
 8001586:	4b85      	ldr	r3, [pc, #532]	@ (800179c <main+0x764>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001592:	4b83      	ldr	r3, [pc, #524]	@ (80017a0 <main+0x768>)
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	ee07 3a10 	vmov	s14, r3
 800159a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800159e:	4b81      	ldr	r3, [pc, #516]	@ (80017a4 <main+0x76c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	ee06 3a90 	vmov	s13, r3
 80015a6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80015aa:	4b7f      	ldr	r3, [pc, #508]	@ (80017a8 <main+0x770>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	ee06 3a10 	vmov	s12, r3
 80015b2:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80015b6:	4b7d      	ldr	r3, [pc, #500]	@ (80017ac <main+0x774>)
 80015b8:	edd3 5a00 	vldr	s11, [r3]
 80015bc:	4b7c      	ldr	r3, [pc, #496]	@ (80017b0 <main+0x778>)
 80015be:	ed93 5a00 	vldr	s10, [r3]
 80015c2:	ed9f 3a7c 	vldr	s6, [pc, #496]	@ 80017b4 <main+0x77c>
 80015c6:	eef0 2a45 	vmov.f32	s5, s10
 80015ca:	eeb0 2a65 	vmov.f32	s4, s11
 80015ce:	eef0 1a46 	vmov.f32	s3, s12
 80015d2:	eeb0 1a66 	vmov.f32	s2, s13
 80015d6:	eef0 0a47 	vmov.f32	s1, s14
 80015da:	eeb0 0a67 	vmov.f32	s0, s15
 80015de:	4976      	ldr	r1, [pc, #472]	@ (80017b8 <main+0x780>)
 80015e0:	4876      	ldr	r0, [pc, #472]	@ (80017bc <main+0x784>)
 80015e2:	f001 fb7d 	bl	8002ce0 <regulatorPI>

	  	                				if(output_voltage>40000)
 80015e6:	4b6d      	ldr	r3, [pc, #436]	@ (800179c <main+0x764>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f649 4240 	movw	r2, #40000	@ 0x9c40
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d93c      	bls.n	800166c <main+0x634>
	  	                				{
	  	                				delay_hc = (2*C_CAP*output_voltage)/imax1;
 80015f2:	4b6a      	ldr	r3, [pc, #424]	@ (800179c <main+0x764>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ffac 	bl	8000554 <__aeabi_ui2d>
 80015fc:	a35c      	add	r3, pc, #368	@ (adr r3, 8001770 <main+0x738>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7ff f821 	bl	8000648 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4614      	mov	r4, r2
 800160c:	461d      	mov	r5, r3
 800160e:	4b6b      	ldr	r3, [pc, #428]	@ (80017bc <main+0x784>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff9e 	bl	8000554 <__aeabi_ui2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4620      	mov	r0, r4
 800161e:	4629      	mov	r1, r5
 8001620:	f7ff f93c 	bl	800089c <__aeabi_ddiv>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff fb04 	bl	8000c38 <__aeabi_d2f>
 8001630:	4603      	mov	r3, r0
 8001632:	4a63      	ldr	r2, [pc, #396]	@ (80017c0 <main+0x788>)
 8001634:	6013      	str	r3, [r2, #0]
	  	                				int delay_hc_freq = (int)(1/delay_hc);
 8001636:	4b62      	ldr	r3, [pc, #392]	@ (80017c0 <main+0x788>)
 8001638:	ed93 7a00 	vldr	s14, [r3]
 800163c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001644:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001648:	ee17 3a90 	vmov	r3, s15
 800164c:	603b      	str	r3, [r7, #0]
	  	                				if(delay_hc_freq>20000000) delay_hc_freq = 15000000;//10Mhz jakis problem
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	4a4c      	ldr	r2, [pc, #304]	@ (8001784 <main+0x74c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	dd01      	ble.n	800165a <main+0x622>
 8001656:	4b4c      	ldr	r3, [pc, #304]	@ (8001788 <main+0x750>)
 8001658:	603b      	str	r3, [r7, #0]
	  	                				if(once == 0) Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, 7100000); // Set TIM8 CH1 o freq that is delay hc and send to fpga
 800165a:	4b4c      	ldr	r3, [pc, #304]	@ (800178c <main+0x754>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d104      	bne.n	800166c <main+0x634>
 8001662:	4a58      	ldr	r2, [pc, #352]	@ (80017c4 <main+0x78c>)
 8001664:	2104      	movs	r1, #4
 8001666:	4858      	ldr	r0, [pc, #352]	@ (80017c8 <main+0x790>)
 8001668:	f001 f90c 	bl	8002884 <Update_PWM_Frequency>
	  	                				}

	  	                				imax2 = imax1 + imax2_sum;
 800166c:	4b53      	ldr	r3, [pc, #332]	@ (80017bc <main+0x784>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4b56      	ldr	r3, [pc, #344]	@ (80017cc <main+0x794>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4413      	add	r3, r2
 8001676:	4a56      	ldr	r2, [pc, #344]	@ (80017d0 <main+0x798>)
 8001678:	6013      	str	r3, [r2, #0]
	  	                				if(once == 0){
 800167a:	4b44      	ldr	r3, [pc, #272]	@ (800178c <main+0x754>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d10a      	bne.n	8001698 <main+0x660>
	  	                							HAL_Delay(100);
 8001682:	2064      	movs	r0, #100	@ 0x64
 8001684:	f002 fe20 	bl	80042c8 <HAL_Delay>
	  	                						HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
 8001688:	2201      	movs	r2, #1
 800168a:	2120      	movs	r1, #32
 800168c:	4851      	ldr	r0, [pc, #324]	@ (80017d4 <main+0x79c>)
 800168e:	f005 fad7 	bl	8006c40 <HAL_GPIO_WritePin>
	  	                						once = 1;
 8001692:	4b3e      	ldr	r3, [pc, #248]	@ (800178c <main+0x754>)
 8001694:	2201      	movs	r2, #1
 8001696:	601a      	str	r2, [r3, #0]
	  	                						}

	  	                				flag_control = 0;
 8001698:	4b4f      	ldr	r3, [pc, #316]	@ (80017d8 <main+0x7a0>)
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
	  	                	  }

	  	                  }
	  	                  break;
 800169e:	e059      	b.n	8001754 <main+0x71c>
	  	              case STATE_FAULT:
	  	                  // Handle fault condition
	  	            	  // Turn off all gate drivers and stop FPGA
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP drives mosfet etc
 80016a0:	2200      	movs	r2, #0
 80016a2:	2120      	movs	r1, #32
 80016a4:	484b      	ldr	r0, [pc, #300]	@ (80017d4 <main+0x79c>)
 80016a6:	f005 facb 	bl	8006c40 <HAL_GPIO_WritePin>

	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!


	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 80016aa:	484c      	ldr	r0, [pc, #304]	@ (80017dc <main+0x7a4>)
 80016ac:	f008 f9a0 	bl	80099f0 <HAL_TIM_Base_Stop_IT>

	  	            	HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port,NOT_RST_1_Pin, GPIO_PIN_RESET);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2180      	movs	r1, #128	@ 0x80
 80016b4:	484a      	ldr	r0, [pc, #296]	@ (80017e0 <main+0x7a8>)
 80016b6:	f005 fac3 	bl	8006c40 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_2_GPIO_Port,NOT_RST_2_Pin, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016c0:	4848      	ldr	r0, [pc, #288]	@ (80017e4 <main+0x7ac>)
 80016c2:	f005 fabd 	bl	8006c40 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port,NOT_RST_3_Pin, GPIO_PIN_RESET);
 80016c6:	2200      	movs	r2, #0
 80016c8:	2101      	movs	r1, #1
 80016ca:	4847      	ldr	r0, [pc, #284]	@ (80017e8 <main+0x7b0>)
 80016cc:	f005 fab8 	bl	8006c40 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port,NOT_RST_4_Pin, GPIO_PIN_RESET);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2140      	movs	r1, #64	@ 0x40
 80016d4:	483f      	ldr	r0, [pc, #252]	@ (80017d4 <main+0x79c>)
 80016d6:	f005 fab3 	bl	8006c40 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2102      	movs	r1, #2
 80016de:	4841      	ldr	r0, [pc, #260]	@ (80017e4 <main+0x7ac>)
 80016e0:	f005 faae 	bl	8006c40 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_RESET);
 80016e4:	2200      	movs	r2, #0
 80016e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016ea:	4840      	ldr	r0, [pc, #256]	@ (80017ec <main+0x7b4>)
 80016ec:	f005 faa8 	bl	8006c40 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 80016f0:	2201      	movs	r2, #1
 80016f2:	2120      	movs	r1, #32
 80016f4:	483b      	ldr	r0, [pc, #236]	@ (80017e4 <main+0x7ac>)
 80016f6:	f005 faa3 	bl	8006c40 <HAL_GPIO_WritePin>

	  	            	HAL_TIM_Base_Start(&htim7); // timer for reset OCD and INTERLOCK reset turn off
 80016fa:	483d      	ldr	r0, [pc, #244]	@ (80017f0 <main+0x7b8>)
 80016fc:	f008 f890 	bl	8009820 <HAL_TIM_Base_Start>


	  	            	once = 0;
 8001700:	4b22      	ldr	r3, [pc, #136]	@ (800178c <main+0x754>)
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
	  	            	start_program = 0;
 8001706:	4b3b      	ldr	r3, [pc, #236]	@ (80017f4 <main+0x7bc>)
 8001708:	2200      	movs	r2, #0
 800170a:	701a      	strb	r2, [r3, #0]
	  	            	currentState = STATE_SHUTDOWN;
 800170c:	4b3a      	ldr	r3, [pc, #232]	@ (80017f8 <main+0x7c0>)
 800170e:	2204      	movs	r2, #4
 8001710:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 8001712:	e020      	b.n	8001756 <main+0x71e>
	  	              case STATE_SHUTDOWN:
	  	                  // Safely shut down the converter
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 8001714:	2200      	movs	r2, #0
 8001716:	2120      	movs	r1, #32
 8001718:	482e      	ldr	r0, [pc, #184]	@ (80017d4 <main+0x79c>)
 800171a:	f005 fa91 	bl	8006c40 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 800171e:	2201      	movs	r2, #1
 8001720:	2104      	movs	r1, #4
 8001722:	4832      	ldr	r0, [pc, #200]	@ (80017ec <main+0x7b4>)
 8001724:	f005 fa8c 	bl	8006c40 <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 8001728:	482c      	ldr	r0, [pc, #176]	@ (80017dc <main+0x7a4>)
 800172a:	f008 f961 	bl	80099f0 <HAL_TIM_Base_Stop_IT>
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 800172e:	2200      	movs	r2, #0
 8001730:	2104      	movs	r1, #4
 8001732:	482e      	ldr	r0, [pc, #184]	@ (80017ec <main+0x7b4>)
 8001734:	f005 fa84 	bl	8006c40 <HAL_GPIO_WritePin>
	  	            	RAMP_FINISHED, once = 0;
 8001738:	4b14      	ldr	r3, [pc, #80]	@ (800178c <main+0x754>)
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
	  	            	imax1, imax2,vout, Vramp, delay_tr, delay_hc, Gv, Integral_I, prev_delta, input_vol, output_vol = 1;
 800173e:	4b2f      	ldr	r3, [pc, #188]	@ (80017fc <main+0x7c4>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]


	  	            	currentState = STATE_STANDBY;
 8001744:	4b2c      	ldr	r3, [pc, #176]	@ (80017f8 <main+0x7c0>)
 8001746:	2201      	movs	r2, #1
 8001748:	701a      	strb	r2, [r3, #0]
	  	              }

	  	                  break;
 800174a:	e004      	b.n	8001756 <main+0x71e>
	  	              default:
	  	                  break;
 800174c:	bf00      	nop
 800174e:	e49e      	b.n	800108e <main+0x56>
	  	                  break;
 8001750:	bf00      	nop
 8001752:	e49c      	b.n	800108e <main+0x56>
	  	                  break;
 8001754:	bf00      	nop
	  	  	  	  checkfaults = Check_Faults();
 8001756:	e49a      	b.n	800108e <main+0x56>
 8001758:	54442d18 	.word	0x54442d18
 800175c:	400921fb 	.word	0x400921fb
 8001760:	78000000 	.word	0x78000000
 8001764:	4190942a 	.word	0x4190942a
 8001768:	d2f1a9fc 	.word	0xd2f1a9fc
 800176c:	3f50624d 	.word	0x3f50624d
 8001770:	e5c45270 	.word	0xe5c45270
 8001774:	3e32e5d9 	.word	0x3e32e5d9
 8001778:	20000004 	.word	0x20000004
 800177c:	20000a64 	.word	0x20000a64
 8001780:	20000a38 	.word	0x20000a38
 8001784:	01312d00 	.word	0x01312d00
 8001788:	00e4e1c0 	.word	0x00e4e1c0
 800178c:	20000b5c 	.word	0x20000b5c
 8001790:	0003610e 	.word	0x0003610e
 8001794:	20000784 	.word	0x20000784
 8001798:	20000a60 	.word	0x20000a60
 800179c:	20000a54 	.word	0x20000a54
 80017a0:	20000a58 	.word	0x20000a58
 80017a4:	20000010 	.word	0x20000010
 80017a8:	20000014 	.word	0x20000014
 80017ac:	20000008 	.word	0x20000008
 80017b0:	2000000c 	.word	0x2000000c
 80017b4:	3851b717 	.word	0x3851b717
 80017b8:	20000b4c 	.word	0x20000b4c
 80017bc:	20000a30 	.word	0x20000a30
 80017c0:	20000a68 	.word	0x20000a68
 80017c4:	006c5660 	.word	0x006c5660
 80017c8:	200008b4 	.word	0x200008b4
 80017cc:	20000a6c 	.word	0x20000a6c
 80017d0:	20000a34 	.word	0x20000a34
 80017d4:	48000800 	.word	0x48000800
 80017d8:	20000b6c 	.word	0x20000b6c
 80017dc:	20000900 	.word	0x20000900
 80017e0:	48000400 	.word	0x48000400
 80017e4:	48001000 	.word	0x48001000
 80017e8:	48000c00 	.word	0x48000c00
 80017ec:	48001400 	.word	0x48001400
 80017f0:	20000868 	.word	0x20000868
 80017f4:	20000b54 	.word	0x20000b54
 80017f8:	20000b57 	.word	0x20000b57
 80017fc:	20000028 	.word	0x20000028

08001800 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b094      	sub	sp, #80	@ 0x50
 8001804:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001806:	f107 0318 	add.w	r3, r7, #24
 800180a:	2238      	movs	r2, #56	@ 0x38
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f00f ff41 	bl	8011696 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	609a      	str	r2, [r3, #8]
 800181e:	60da      	str	r2, [r3, #12]
 8001820:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001822:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001826:	f006 ff73 	bl	8008710 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800182a:	2322      	movs	r3, #34	@ 0x22
 800182c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800182e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001834:	2340      	movs	r3, #64	@ 0x40
 8001836:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001838:	2301      	movs	r3, #1
 800183a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183c:	2302      	movs	r3, #2
 800183e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001840:	2302      	movs	r3, #2
 8001842:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001844:	2304      	movs	r3, #4
 8001846:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001848:	234b      	movs	r3, #75	@ 0x4b
 800184a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800184c:	2302      	movs	r3, #2
 800184e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001850:	2302      	movs	r3, #2
 8001852:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001854:	2302      	movs	r3, #2
 8001856:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001858:	f107 0318 	add.w	r3, r7, #24
 800185c:	4618      	mov	r0, r3
 800185e:	f007 f80b 	bl	8008878 <HAL_RCC_OscConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001868:	f001 feba 	bl	80035e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800186c:	230f      	movs	r3, #15
 800186e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001870:	2303      	movs	r3, #3
 8001872:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001878:	2300      	movs	r3, #0
 800187a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	2104      	movs	r1, #4
 8001884:	4618      	mov	r0, r3
 8001886:	f007 fb09 	bl	8008e9c <HAL_RCC_ClockConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001890:	f001 fea6 	bl	80035e0 <Error_Handler>
  }
}
 8001894:	bf00      	nop
 8001896:	3750      	adds	r7, #80	@ 0x50
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08c      	sub	sp, #48	@ 0x30
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80018a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2220      	movs	r2, #32
 80018b2:	2100      	movs	r1, #0
 80018b4:	4618      	mov	r0, r3
 80018b6:	f00f feee 	bl	8011696 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018ba:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <MX_ADC1_Init+0xe8>)
 80018bc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018c2:	4b30      	ldr	r3, [pc, #192]	@ (8001984 <MX_ADC1_Init+0xe8>)
 80018c4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80018c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018ca:	4b2e      	ldr	r3, [pc, #184]	@ (8001984 <MX_ADC1_Init+0xe8>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001984 <MX_ADC1_Init+0xe8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80018d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <MX_ADC1_Init+0xe8>)
 80018d8:	2200      	movs	r2, #0
 80018da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018dc:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <MX_ADC1_Init+0xe8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018e2:	4b28      	ldr	r3, [pc, #160]	@ (8001984 <MX_ADC1_Init+0xe8>)
 80018e4:	2204      	movs	r2, #4
 80018e6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80018e8:	4b26      	ldr	r3, [pc, #152]	@ (8001984 <MX_ADC1_Init+0xe8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018ee:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <MX_ADC1_Init+0xe8>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80018f4:	4b23      	ldr	r3, [pc, #140]	@ (8001984 <MX_ADC1_Init+0xe8>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018fa:	4b22      	ldr	r3, [pc, #136]	@ (8001984 <MX_ADC1_Init+0xe8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001902:	4b20      	ldr	r3, [pc, #128]	@ (8001984 <MX_ADC1_Init+0xe8>)
 8001904:	2200      	movs	r2, #0
 8001906:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001908:	4b1e      	ldr	r3, [pc, #120]	@ (8001984 <MX_ADC1_Init+0xe8>)
 800190a:	2200      	movs	r2, #0
 800190c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800190e:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <MX_ADC1_Init+0xe8>)
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001916:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <MX_ADC1_Init+0xe8>)
 8001918:	2200      	movs	r2, #0
 800191a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <MX_ADC1_Init+0xe8>)
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001924:	4817      	ldr	r0, [pc, #92]	@ (8001984 <MX_ADC1_Init+0xe8>)
 8001926:	f002 ff35 	bl	8004794 <HAL_ADC_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001930:	f001 fe56 	bl	80035e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001934:	2300      	movs	r3, #0
 8001936:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	4811      	ldr	r0, [pc, #68]	@ (8001984 <MX_ADC1_Init+0xe8>)
 8001940:	f004 f84a 	bl	80059d8 <HAL_ADCEx_MultiModeConfigChannel>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800194a:	f001 fe49 	bl	80035e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <MX_ADC1_Init+0xec>)
 8001950:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001952:	2306      	movs	r3, #6
 8001954:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001956:	2307      	movs	r3, #7
 8001958:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800195a:	237f      	movs	r3, #127	@ 0x7f
 800195c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800195e:	2304      	movs	r3, #4
 8001960:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001966:	1d3b      	adds	r3, r7, #4
 8001968:	4619      	mov	r1, r3
 800196a:	4806      	ldr	r0, [pc, #24]	@ (8001984 <MX_ADC1_Init+0xe8>)
 800196c:	f003 f9b6 	bl	8004cdc <HAL_ADC_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001976:	f001 fe33 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	3730      	adds	r7, #48	@ 0x30
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200003a4 	.word	0x200003a4
 8001988:	cb840000 	.word	0xcb840000

0800198c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08c      	sub	sp, #48	@ 0x30
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2220      	movs	r2, #32
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f00f fe76 	bl	8011696 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80019aa:	4b57      	ldr	r3, [pc, #348]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 80019ac:	4a57      	ldr	r2, [pc, #348]	@ (8001b0c <MX_ADC3_Init+0x180>)
 80019ae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 80019b0:	4b55      	ldr	r3, [pc, #340]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 80019b2:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 80019b6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80019b8:	4b53      	ldr	r3, [pc, #332]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019be:	4b52      	ldr	r3, [pc, #328]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80019c4:	4b50      	ldr	r3, [pc, #320]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80019ca:	4b4f      	ldr	r3, [pc, #316]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 80019d2:	2204      	movs	r2, #4
 80019d4:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80019d6:	4b4c      	ldr	r3, [pc, #304]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80019dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 80019de:	2201      	movs	r2, #1
 80019e0:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 5;
 80019e2:	4b49      	ldr	r3, [pc, #292]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 80019e4:	2205      	movs	r2, #5
 80019e6:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80019e8:	4b47      	ldr	r3, [pc, #284]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019f0:	4b45      	ldr	r3, [pc, #276]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019f6:	4b44      	ldr	r3, [pc, #272]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80019fc:	4b42      	ldr	r3, [pc, #264]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001a04:	4b40      	ldr	r3, [pc, #256]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 8001a06:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001a0a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001a0c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001a14:	483c      	ldr	r0, [pc, #240]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 8001a16:	f002 febd 	bl	8004794 <HAL_ADC_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8001a20:	f001 fdde 	bl	80035e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4836      	ldr	r0, [pc, #216]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 8001a30:	f003 ffd2 	bl	80059d8 <HAL_ADCEx_MultiModeConfigChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001a3a:	f001 fdd1 	bl	80035e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a3e:	4b34      	ldr	r3, [pc, #208]	@ (8001b10 <MX_ADC3_Init+0x184>)
 8001a40:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a42:	2306      	movs	r3, #6
 8001a44:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a4a:	237f      	movs	r3, #127	@ 0x7f
 8001a4c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 38;
 8001a52:	2326      	movs	r3, #38	@ 0x26
 8001a54:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8001a56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a5a:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetSaturation = DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	4619      	mov	r1, r3
 8001a66:	4828      	ldr	r0, [pc, #160]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 8001a68:	f003 f938 	bl	8004cdc <HAL_ADC_ConfigChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001a72:	f001 fdb5 	bl	80035e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a76:	4b27      	ldr	r3, [pc, #156]	@ (8001b14 <MX_ADC3_Init+0x188>)
 8001a78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a7a:	230c      	movs	r3, #12
 8001a7c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_2;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 37;
 8001a82:	2325      	movs	r3, #37	@ 0x25
 8001a84:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	481f      	ldr	r0, [pc, #124]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 8001a8c:	f003 f926 	bl	8004cdc <HAL_ADC_ConfigChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 8001a96:	f001 fda3 	bl	80035e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b18 <MX_ADC3_Init+0x18c>)
 8001a9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a9e:	2312      	movs	r3, #18
 8001aa0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_3;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 8;
 8001aa6:	2308      	movs	r3, #8
 8001aa8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	4619      	mov	r1, r3
 8001aae:	4816      	ldr	r0, [pc, #88]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 8001ab0:	f003 f914 	bl	8004cdc <HAL_ADC_ConfigChannel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_ADC3_Init+0x132>
  {
    Error_Handler();
 8001aba:	f001 fd91 	bl	80035e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001abe:	4b17      	ldr	r3, [pc, #92]	@ (8001b1c <MX_ADC3_Init+0x190>)
 8001ac0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001ac2:	2318      	movs	r3, #24
 8001ac4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480d      	ldr	r0, [pc, #52]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 8001ad4:	f003 f902 	bl	8004cdc <HAL_ADC_ConfigChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8001ade:	f001 fd7f 	bl	80035e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8001b20 <MX_ADC3_Init+0x194>)
 8001ae4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001ae6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	4619      	mov	r1, r3
 8001af0:	4805      	ldr	r0, [pc, #20]	@ (8001b08 <MX_ADC3_Init+0x17c>)
 8001af2:	f003 f8f3 	bl	8004cdc <HAL_ADC_ConfigChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8001afc:	f001 fd70 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b00:	bf00      	nop
 8001b02:	3730      	adds	r7, #48	@ 0x30
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000410 	.word	0x20000410
 8001b0c:	50000400 	.word	0x50000400
 8001b10:	04300002 	.word	0x04300002
 8001b14:	08600004 	.word	0x08600004
 8001b18:	0c900008 	.word	0x0c900008
 8001b1c:	10c00010 	.word	0x10c00010
 8001b20:	14f00020 	.word	0x14f00020

08001b24 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b088      	sub	sp, #32
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b2a:	463b      	mov	r3, r7
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f00f fdb0 	bl	8011696 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001b36:	4b2b      	ldr	r3, [pc, #172]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b38:	4a2b      	ldr	r2, [pc, #172]	@ (8001be8 <MX_ADC4_Init+0xc4>)
 8001b3a:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001b3c:	4b29      	ldr	r3, [pc, #164]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b3e:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001b42:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001b44:	4b27      	ldr	r3, [pc, #156]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b4a:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001b50:	4b24      	ldr	r3, [pc, #144]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b56:	4b23      	ldr	r3, [pc, #140]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b5c:	4b21      	ldr	r3, [pc, #132]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b5e:	2204      	movs	r2, #4
 8001b60:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001b62:	4b20      	ldr	r3, [pc, #128]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001b68:	4b1e      	ldr	r3, [pc, #120]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001b74:	4b1b      	ldr	r3, [pc, #108]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b7c:	4b19      	ldr	r3, [pc, #100]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b82:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001b88:	4b16      	ldr	r3, [pc, #88]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001b90:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b96:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001b98:	4b12      	ldr	r3, [pc, #72]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001ba0:	4810      	ldr	r0, [pc, #64]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001ba2:	f002 fdf7 	bl	8004794 <HAL_ADC_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8001bac:	f001 fd18 	bl	80035e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <MX_ADC4_Init+0xc8>)
 8001bb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bb4:	2306      	movs	r3, #6
 8001bb6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001bb8:	2307      	movs	r3, #7
 8001bba:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bbc:	237f      	movs	r3, #127	@ 0x7f
 8001bbe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001bc8:	463b      	mov	r3, r7
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4805      	ldr	r0, [pc, #20]	@ (8001be4 <MX_ADC4_Init+0xc0>)
 8001bce:	f003 f885 	bl	8004cdc <HAL_ADC_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8001bd8:	f001 fd02 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001bdc:	bf00      	nop
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	2000047c 	.word	0x2000047c
 8001be8:	50000500 	.word	0x50000500
 8001bec:	04300002 	.word	0x04300002

08001bf0 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f00f fd4a 	bl	8011696 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001c02:	4b31      	ldr	r3, [pc, #196]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c04:	4a31      	ldr	r2, [pc, #196]	@ (8001ccc <MX_ADC5_Init+0xdc>)
 8001c06:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001c08:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c0a:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001c0e:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001c10:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c16:	4b2c      	ldr	r3, [pc, #176]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001c1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c22:	4b29      	ldr	r3, [pc, #164]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c28:	4b27      	ldr	r3, [pc, #156]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c2a:	2204      	movs	r2, #4
 8001c2c:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001c2e:	4b26      	ldr	r3, [pc, #152]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001c34:	4b24      	ldr	r3, [pc, #144]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001c3a:	4b23      	ldr	r3, [pc, #140]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001c40:	4b21      	ldr	r3, [pc, #132]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c48:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001c54:	4b1c      	ldr	r3, [pc, #112]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8001c62:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001c6a:	4b17      	ldr	r3, [pc, #92]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c6c:	221c      	movs	r2, #28
 8001c6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8001c70:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c76:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001c7e:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001c84:	4810      	ldr	r0, [pc, #64]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001c86:	f002 fd85 	bl	8004794 <HAL_ADC_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_ADC5_Init+0xa4>
  {
    Error_Handler();
 8001c90:	f001 fca6 	bl	80035e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c94:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd0 <MX_ADC5_Init+0xe0>)
 8001c96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c98:	2306      	movs	r3, #6
 8001c9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ca0:	237f      	movs	r3, #127	@ 0x7f
 8001ca2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001cac:	463b      	mov	r3, r7
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <MX_ADC5_Init+0xd8>)
 8001cb2:	f003 f813 	bl	8004cdc <HAL_ADC_ConfigChannel>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_ADC5_Init+0xd0>
  {
    Error_Handler();
 8001cbc:	f001 fc90 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200004e8 	.word	0x200004e8
 8001ccc:	50000600 	.word	0x50000600
 8001cd0:	04300002 	.word	0x04300002

08001cd4 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <MX_CORDIC_Init+0x20>)
 8001cda:	4a07      	ldr	r2, [pc, #28]	@ (8001cf8 <MX_CORDIC_Init+0x24>)
 8001cdc:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001cde:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <MX_CORDIC_Init+0x20>)
 8001ce0:	f003 ff82 	bl	8005be8 <HAL_CORDIC_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001cea:	f001 fc79 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000674 	.word	0x20000674
 8001cf8:	40020c00 	.word	0x40020c00

08001cfc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	@ 0x30
 8001d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d02:	463b      	mov	r3, r7
 8001d04:	2230      	movs	r2, #48	@ 0x30
 8001d06:	2100      	movs	r1, #0
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f00f fcc4 	bl	8011696 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d88 <MX_DAC1_Init+0x8c>)
 8001d10:	4a1e      	ldr	r2, [pc, #120]	@ (8001d8c <MX_DAC1_Init+0x90>)
 8001d12:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001d14:	481c      	ldr	r0, [pc, #112]	@ (8001d88 <MX_DAC1_Init+0x8c>)
 8001d16:	f004 f8a8 	bl	8005e6a <HAL_DAC_Init>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001d20:	f001 fc5e 	bl	80035e0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001d24:	2302      	movs	r3, #2
 8001d26:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001d40:	2301      	movs	r3, #1
 8001d42:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001d48:	463b      	mov	r3, r7
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	480e      	ldr	r0, [pc, #56]	@ (8001d88 <MX_DAC1_Init+0x8c>)
 8001d50:	f004 f9a8 	bl	80060a4 <HAL_DAC_ConfigChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001d5a:	f001 fc41 	bl	80035e0 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001d5e:	463b      	mov	r3, r7
 8001d60:	2210      	movs	r2, #16
 8001d62:	4619      	mov	r1, r3
 8001d64:	4808      	ldr	r0, [pc, #32]	@ (8001d88 <MX_DAC1_Init+0x8c>)
 8001d66:	f004 f99d 	bl	80060a4 <HAL_DAC_ConfigChannel>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8001d70:	f001 fc36 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  __HAL_LINKDMA(&hdac1, DMA_Handle1, hdma_dac1_ch1);
 8001d74:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <MX_DAC1_Init+0x8c>)
 8001d76:	4a06      	ldr	r2, [pc, #24]	@ (8001d90 <MX_DAC1_Init+0x94>)
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	4b05      	ldr	r3, [pc, #20]	@ (8001d90 <MX_DAC1_Init+0x94>)
 8001d7c:	4a02      	ldr	r2, [pc, #8]	@ (8001d88 <MX_DAC1_Init+0x8c>)
 8001d7e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END DAC1_Init 2 */

}
 8001d80:	bf00      	nop
 8001d82:	3730      	adds	r7, #48	@ 0x30
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2000069c 	.word	0x2000069c
 8001d8c:	50000800 	.word	0x50000800
 8001d90:	200006c4 	.word	0x200006c4

08001d94 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08c      	sub	sp, #48	@ 0x30
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001d9a:	463b      	mov	r3, r7
 8001d9c:	2230      	movs	r2, #48	@ 0x30
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f00f fc78 	bl	8011696 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001da6:	4b16      	ldr	r3, [pc, #88]	@ (8001e00 <MX_DAC2_Init+0x6c>)
 8001da8:	4a16      	ldr	r2, [pc, #88]	@ (8001e04 <MX_DAC2_Init+0x70>)
 8001daa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001dac:	4814      	ldr	r0, [pc, #80]	@ (8001e00 <MX_DAC2_Init+0x6c>)
 8001dae:	f004 f85c 	bl	8005e6a <HAL_DAC_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001db8:	f001 fc12 	bl	80035e0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001de0:	463b      	mov	r3, r7
 8001de2:	2200      	movs	r2, #0
 8001de4:	4619      	mov	r1, r3
 8001de6:	4806      	ldr	r0, [pc, #24]	@ (8001e00 <MX_DAC2_Init+0x6c>)
 8001de8:	f004 f95c 	bl	80060a4 <HAL_DAC_ConfigChannel>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8001df2:	f001 fbf5 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	3730      	adds	r7, #48	@ 0x30
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200006b0 	.word	0x200006b0
 8001e04:	50000c00 	.word	0x50000c00

08001e08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b098      	sub	sp, #96	@ 0x60
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e0e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e1a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]
 8001e2a:	615a      	str	r2, [r3, #20]
 8001e2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2234      	movs	r2, #52	@ 0x34
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f00f fc2e 	bl	8011696 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f24 <MX_TIM1_Init+0x11c>)
 8001e3c:	4a3a      	ldr	r2, [pc, #232]	@ (8001f28 <MX_TIM1_Init+0x120>)
 8001e3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e40:	4b38      	ldr	r3, [pc, #224]	@ (8001f24 <MX_TIM1_Init+0x11c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e46:	4b37      	ldr	r3, [pc, #220]	@ (8001f24 <MX_TIM1_Init+0x11c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210;
 8001e4c:	4b35      	ldr	r3, [pc, #212]	@ (8001f24 <MX_TIM1_Init+0x11c>)
 8001e4e:	22d2      	movs	r2, #210	@ 0xd2
 8001e50:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e52:	4b34      	ldr	r3, [pc, #208]	@ (8001f24 <MX_TIM1_Init+0x11c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e58:	4b32      	ldr	r3, [pc, #200]	@ (8001f24 <MX_TIM1_Init+0x11c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5e:	4b31      	ldr	r3, [pc, #196]	@ (8001f24 <MX_TIM1_Init+0x11c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e64:	482f      	ldr	r0, [pc, #188]	@ (8001f24 <MX_TIM1_Init+0x11c>)
 8001e66:	f007 fdf2 	bl	8009a4e <HAL_TIM_PWM_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001e70:	f001 fbb6 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e74:	2300      	movs	r3, #0
 8001e76:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e84:	4619      	mov	r1, r3
 8001e86:	4827      	ldr	r0, [pc, #156]	@ (8001f24 <MX_TIM1_Init+0x11c>)
 8001e88:	f008 ff8c 	bl	800ada4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001e92:	f001 fba5 	bl	80035e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e96:	2360      	movs	r3, #96	@ 0x60
 8001e98:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eb2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4619      	mov	r1, r3
 8001eba:	481a      	ldr	r0, [pc, #104]	@ (8001f24 <MX_TIM1_Init+0x11c>)
 8001ebc:	f008 f880 	bl	8009fc0 <HAL_TIM_PWM_ConfigChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001ec6:	f001 fb8b 	bl	80035e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ede:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ee2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ef0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001efa:	2300      	movs	r3, #0
 8001efc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001efe:	2300      	movs	r3, #0
 8001f00:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f02:	1d3b      	adds	r3, r7, #4
 8001f04:	4619      	mov	r1, r3
 8001f06:	4807      	ldr	r0, [pc, #28]	@ (8001f24 <MX_TIM1_Init+0x11c>)
 8001f08:	f008 ffe2 	bl	800aed0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001f12:	f001 fb65 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f16:	4803      	ldr	r0, [pc, #12]	@ (8001f24 <MX_TIM1_Init+0x11c>)
 8001f18:	f001 ff00 	bl	8003d1c <HAL_TIM_MspPostInit>

}
 8001f1c:	bf00      	nop
 8001f1e:	3760      	adds	r7, #96	@ 0x60
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20000784 	.word	0x20000784
 8001f28:	40012c00 	.word	0x40012c00

08001f2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08e      	sub	sp, #56	@ 0x38
 8001f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]
 8001f3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	2200      	movs	r2, #0
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	605a      	str	r2, [r3, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f4c:	463b      	mov	r3, r7
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]
 8001f5a:	615a      	str	r2, [r3, #20]
 8001f5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002014 <MX_TIM4_Init+0xe8>)
 8001f60:	4a2d      	ldr	r2, [pc, #180]	@ (8002018 <MX_TIM4_Init+0xec>)
 8001f62:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001f64:	4b2b      	ldr	r3, [pc, #172]	@ (8002014 <MX_TIM4_Init+0xe8>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <MX_TIM4_Init+0xe8>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 679;
 8001f70:	4b28      	ldr	r3, [pc, #160]	@ (8002014 <MX_TIM4_Init+0xe8>)
 8001f72:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8001f76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f78:	4b26      	ldr	r3, [pc, #152]	@ (8002014 <MX_TIM4_Init+0xe8>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f7e:	4b25      	ldr	r3, [pc, #148]	@ (8002014 <MX_TIM4_Init+0xe8>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f84:	4823      	ldr	r0, [pc, #140]	@ (8002014 <MX_TIM4_Init+0xe8>)
 8001f86:	f007 fbf3 	bl	8009770 <HAL_TIM_Base_Init>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001f90:	f001 fb26 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f98:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	481c      	ldr	r0, [pc, #112]	@ (8002014 <MX_TIM4_Init+0xe8>)
 8001fa2:	f008 f921 	bl	800a1e8 <HAL_TIM_ConfigClockSource>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001fac:	f001 fb18 	bl	80035e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001fb0:	4818      	ldr	r0, [pc, #96]	@ (8002014 <MX_TIM4_Init+0xe8>)
 8001fb2:	f007 fd4c 	bl	8009a4e <HAL_TIM_PWM_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001fbc:	f001 fb10 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4811      	ldr	r0, [pc, #68]	@ (8002014 <MX_TIM4_Init+0xe8>)
 8001fd0:	f008 fee8 	bl	800ada4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001fda:	f001 fb01 	bl	80035e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fde:	2360      	movs	r3, #96	@ 0x60
 8001fe0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fee:	463b      	mov	r3, r7
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4807      	ldr	r0, [pc, #28]	@ (8002014 <MX_TIM4_Init+0xe8>)
 8001ff6:	f007 ffe3 	bl	8009fc0 <HAL_TIM_PWM_ConfigChannel>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002000:	f001 faee 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002004:	4803      	ldr	r0, [pc, #12]	@ (8002014 <MX_TIM4_Init+0xe8>)
 8002006:	f001 fe89 	bl	8003d1c <HAL_TIM_MspPostInit>

}
 800200a:	bf00      	nop
 800200c:	3738      	adds	r7, #56	@ 0x38
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200007d0 	.word	0x200007d0
 8002018:	40000800 	.word	0x40000800

0800201c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800202c:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <MX_TIM6_Init+0x78>)
 800202e:	4a1a      	ldr	r2, [pc, #104]	@ (8002098 <MX_TIM6_Init+0x7c>)
 8002030:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11549;
 8002032:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <MX_TIM6_Init+0x78>)
 8002034:	f642 521d 	movw	r2, #11549	@ 0x2d1d
 8002038:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800203a:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <MX_TIM6_Init+0x78>)
 800203c:	2200      	movs	r2, #0
 800203e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64934;
 8002040:	4b14      	ldr	r3, [pc, #80]	@ (8002094 <MX_TIM6_Init+0x78>)
 8002042:	f64f 52a6 	movw	r2, #64934	@ 0xfda6
 8002046:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002048:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <MX_TIM6_Init+0x78>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800204e:	4811      	ldr	r0, [pc, #68]	@ (8002094 <MX_TIM6_Init+0x78>)
 8002050:	f007 fb8e 	bl	8009770 <HAL_TIM_Base_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800205a:	f001 fac1 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	4619      	mov	r1, r3
 800206a:	480a      	ldr	r0, [pc, #40]	@ (8002094 <MX_TIM6_Init+0x78>)
 800206c:	f008 fe9a 	bl	800ada4 <HAL_TIMEx_MasterConfigSynchronization>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002076:	f001 fab3 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	2036      	movs	r0, #54	@ 0x36
 8002080:	f003 febf 	bl	8005e02 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002084:	2036      	movs	r0, #54	@ 0x36
 8002086:	f003 fed6 	bl	8005e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	2000081c 	.word	0x2000081c
 8002098:	40001000 	.word	0x40001000

0800209c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
 80020aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80020ac:	4b14      	ldr	r3, [pc, #80]	@ (8002100 <MX_TIM7_Init+0x64>)
 80020ae:	4a15      	ldr	r2, [pc, #84]	@ (8002104 <MX_TIM7_Init+0x68>)
 80020b0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 14999;
 80020b2:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <MX_TIM7_Init+0x64>)
 80020b4:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80020b8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ba:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <MX_TIM7_Init+0x64>)
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80020c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002100 <MX_TIM7_Init+0x64>)
 80020c2:	2209      	movs	r2, #9
 80020c4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <MX_TIM7_Init+0x64>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80020cc:	480c      	ldr	r0, [pc, #48]	@ (8002100 <MX_TIM7_Init+0x64>)
 80020ce:	f007 fb4f 	bl	8009770 <HAL_TIM_Base_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80020d8:	f001 fa82 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020dc:	2300      	movs	r3, #0
 80020de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	4619      	mov	r1, r3
 80020e8:	4805      	ldr	r0, [pc, #20]	@ (8002100 <MX_TIM7_Init+0x64>)
 80020ea:	f008 fe5b 	bl	800ada4 <HAL_TIMEx_MasterConfigSynchronization>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80020f4:	f001 fa74 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000868 	.word	0x20000868
 8002104:	40001400 	.word	0x40001400

08002108 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b098      	sub	sp, #96	@ 0x60
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800210e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800211a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
 8002128:	611a      	str	r2, [r3, #16]
 800212a:	615a      	str	r2, [r3, #20]
 800212c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	2234      	movs	r2, #52	@ 0x34
 8002132:	2100      	movs	r1, #0
 8002134:	4618      	mov	r0, r3
 8002136:	f00f faae 	bl	8011696 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800213a:	4b3a      	ldr	r3, [pc, #232]	@ (8002224 <MX_TIM8_Init+0x11c>)
 800213c:	4a3a      	ldr	r2, [pc, #232]	@ (8002228 <MX_TIM8_Init+0x120>)
 800213e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002140:	4b38      	ldr	r3, [pc, #224]	@ (8002224 <MX_TIM8_Init+0x11c>)
 8002142:	2200      	movs	r2, #0
 8002144:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002146:	4b37      	ldr	r3, [pc, #220]	@ (8002224 <MX_TIM8_Init+0x11c>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 800214c:	4b35      	ldr	r3, [pc, #212]	@ (8002224 <MX_TIM8_Init+0x11c>)
 800214e:	22d2      	movs	r2, #210	@ 0xd2
 8002150:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002152:	4b34      	ldr	r3, [pc, #208]	@ (8002224 <MX_TIM8_Init+0x11c>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002158:	4b32      	ldr	r3, [pc, #200]	@ (8002224 <MX_TIM8_Init+0x11c>)
 800215a:	2200      	movs	r2, #0
 800215c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215e:	4b31      	ldr	r3, [pc, #196]	@ (8002224 <MX_TIM8_Init+0x11c>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002164:	482f      	ldr	r0, [pc, #188]	@ (8002224 <MX_TIM8_Init+0x11c>)
 8002166:	f007 fc72 	bl	8009a4e <HAL_TIM_PWM_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002170:	f001 fa36 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002174:	2300      	movs	r3, #0
 8002176:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217c:	2300      	movs	r3, #0
 800217e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002180:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002184:	4619      	mov	r1, r3
 8002186:	4827      	ldr	r0, [pc, #156]	@ (8002224 <MX_TIM8_Init+0x11c>)
 8002188:	f008 fe0c 	bl	800ada4 <HAL_TIMEx_MasterConfigSynchronization>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 8002192:	f001 fa25 	bl	80035e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002196:	2360      	movs	r3, #96	@ 0x60
 8002198:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800219e:	2300      	movs	r3, #0
 80021a0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021a2:	2300      	movs	r3, #0
 80021a4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80021b6:	2204      	movs	r2, #4
 80021b8:	4619      	mov	r1, r3
 80021ba:	481a      	ldr	r0, [pc, #104]	@ (8002224 <MX_TIM8_Init+0x11c>)
 80021bc:	f007 ff00 	bl	8009fc0 <HAL_TIM_PWM_ConfigChannel>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80021c6:	f001 fa0b 	bl	80035e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021ca:	2300      	movs	r3, #0
 80021cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80021e8:	2300      	movs	r3, #0
 80021ea:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80021ec:	2300      	movs	r3, #0
 80021ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80021f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80021fa:	2300      	movs	r3, #0
 80021fc:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021fe:	2300      	movs	r3, #0
 8002200:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	4619      	mov	r1, r3
 8002206:	4807      	ldr	r0, [pc, #28]	@ (8002224 <MX_TIM8_Init+0x11c>)
 8002208:	f008 fe62 	bl	800aed0 <HAL_TIMEx_ConfigBreakDeadTime>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8002212:	f001 f9e5 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002216:	4803      	ldr	r0, [pc, #12]	@ (8002224 <MX_TIM8_Init+0x11c>)
 8002218:	f001 fd80 	bl	8003d1c <HAL_TIM_MspPostInit>

}
 800221c:	bf00      	nop
 800221e:	3760      	adds	r7, #96	@ 0x60
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	200008b4 	.word	0x200008b4
 8002228:	40013400 	.word	0x40013400

0800222c <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b088      	sub	sp, #32
 8002230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002232:	f107 0310 	add.w	r3, r7, #16
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
 800223a:	605a      	str	r2, [r3, #4]
 800223c:	609a      	str	r2, [r3, #8]
 800223e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002240:	1d3b      	adds	r3, r7, #4
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800224a:	4b1f      	ldr	r3, [pc, #124]	@ (80022c8 <MX_TIM15_Init+0x9c>)
 800224c:	4a1f      	ldr	r2, [pc, #124]	@ (80022cc <MX_TIM15_Init+0xa0>)
 800224e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1499;
 8002250:	4b1d      	ldr	r3, [pc, #116]	@ (80022c8 <MX_TIM15_Init+0x9c>)
 8002252:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002256:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002258:	4b1b      	ldr	r3, [pc, #108]	@ (80022c8 <MX_TIM15_Init+0x9c>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4;
 800225e:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <MX_TIM15_Init+0x9c>)
 8002260:	2204      	movs	r2, #4
 8002262:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002264:	4b18      	ldr	r3, [pc, #96]	@ (80022c8 <MX_TIM15_Init+0x9c>)
 8002266:	2200      	movs	r2, #0
 8002268:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800226a:	4b17      	ldr	r3, [pc, #92]	@ (80022c8 <MX_TIM15_Init+0x9c>)
 800226c:	2200      	movs	r2, #0
 800226e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002270:	4b15      	ldr	r3, [pc, #84]	@ (80022c8 <MX_TIM15_Init+0x9c>)
 8002272:	2200      	movs	r2, #0
 8002274:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002276:	4814      	ldr	r0, [pc, #80]	@ (80022c8 <MX_TIM15_Init+0x9c>)
 8002278:	f007 fa7a 	bl	8009770 <HAL_TIM_Base_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8002282:	f001 f9ad 	bl	80035e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002286:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800228a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	4619      	mov	r1, r3
 8002292:	480d      	ldr	r0, [pc, #52]	@ (80022c8 <MX_TIM15_Init+0x9c>)
 8002294:	f007 ffa8 	bl	800a1e8 <HAL_TIM_ConfigClockSource>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800229e:	f001 f99f 	bl	80035e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	4806      	ldr	r0, [pc, #24]	@ (80022c8 <MX_TIM15_Init+0x9c>)
 80022b0:	f008 fd78 	bl	800ada4 <HAL_TIMEx_MasterConfigSynchronization>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80022ba:	f001 f991 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80022be:	bf00      	nop
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000900 	.word	0x20000900
 80022cc:	40014000 	.word	0x40014000

080022d0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80022d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002314 <MX_TIM16_Init+0x44>)
 80022d6:	4a10      	ldr	r2, [pc, #64]	@ (8002318 <MX_TIM16_Init+0x48>)
 80022d8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 14999;
 80022da:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <MX_TIM16_Init+0x44>)
 80022dc:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80022e0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <MX_TIM16_Init+0x44>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 80022e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <MX_TIM16_Init+0x44>)
 80022ea:	2209      	movs	r2, #9
 80022ec:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ee:	4b09      	ldr	r3, [pc, #36]	@ (8002314 <MX_TIM16_Init+0x44>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80022f4:	4b07      	ldr	r3, [pc, #28]	@ (8002314 <MX_TIM16_Init+0x44>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fa:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <MX_TIM16_Init+0x44>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002300:	4804      	ldr	r0, [pc, #16]	@ (8002314 <MX_TIM16_Init+0x44>)
 8002302:	f007 fa35 	bl	8009770 <HAL_TIM_Base_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 800230c:	f001 f968 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	2000094c 	.word	0x2000094c
 8002318:	40014400 	.word	0x40014400

0800231c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002320:	4b22      	ldr	r3, [pc, #136]	@ (80023ac <MX_UART4_Init+0x90>)
 8002322:	4a23      	ldr	r2, [pc, #140]	@ (80023b0 <MX_UART4_Init+0x94>)
 8002324:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002326:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <MX_UART4_Init+0x90>)
 8002328:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800232c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800232e:	4b1f      	ldr	r3, [pc, #124]	@ (80023ac <MX_UART4_Init+0x90>)
 8002330:	2200      	movs	r2, #0
 8002332:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002334:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <MX_UART4_Init+0x90>)
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800233a:	4b1c      	ldr	r3, [pc, #112]	@ (80023ac <MX_UART4_Init+0x90>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002340:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <MX_UART4_Init+0x90>)
 8002342:	220c      	movs	r2, #12
 8002344:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002346:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <MX_UART4_Init+0x90>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800234c:	4b17      	ldr	r3, [pc, #92]	@ (80023ac <MX_UART4_Init+0x90>)
 800234e:	2200      	movs	r2, #0
 8002350:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002352:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <MX_UART4_Init+0x90>)
 8002354:	2200      	movs	r2, #0
 8002356:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002358:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <MX_UART4_Init+0x90>)
 800235a:	2200      	movs	r2, #0
 800235c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800235e:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <MX_UART4_Init+0x90>)
 8002360:	2200      	movs	r2, #0
 8002362:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002364:	4811      	ldr	r0, [pc, #68]	@ (80023ac <MX_UART4_Init+0x90>)
 8002366:	f008 fe8d 	bl	800b084 <HAL_UART_Init>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002370:	f001 f936 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002374:	2100      	movs	r1, #0
 8002376:	480d      	ldr	r0, [pc, #52]	@ (80023ac <MX_UART4_Init+0x90>)
 8002378:	f009 fc28 	bl	800bbcc <HAL_UARTEx_SetTxFifoThreshold>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002382:	f001 f92d 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002386:	2100      	movs	r1, #0
 8002388:	4808      	ldr	r0, [pc, #32]	@ (80023ac <MX_UART4_Init+0x90>)
 800238a:	f009 fc5d 	bl	800bc48 <HAL_UARTEx_SetRxFifoThreshold>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002394:	f001 f924 	bl	80035e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002398:	4804      	ldr	r0, [pc, #16]	@ (80023ac <MX_UART4_Init+0x90>)
 800239a:	f009 fbde 	bl	800bb5a <HAL_UARTEx_DisableFifoMode>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80023a4:	f001 f91c 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80023a8:	bf00      	nop
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20000998 	.word	0x20000998
 80023b0:	40004c00 	.word	0x40004c00

080023b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80023ba:	4b22      	ldr	r3, [pc, #136]	@ (8002444 <MX_DMA_Init+0x90>)
 80023bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023be:	4a21      	ldr	r2, [pc, #132]	@ (8002444 <MX_DMA_Init+0x90>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	6493      	str	r3, [r2, #72]	@ 0x48
 80023c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002444 <MX_DMA_Init+0x90>)
 80023c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <MX_DMA_Init+0x90>)
 80023d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <MX_DMA_Init+0x90>)
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80023de:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <MX_DMA_Init+0x90>)
 80023e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	200b      	movs	r0, #11
 80023f0:	f003 fd07 	bl	8005e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80023f4:	200b      	movs	r0, #11
 80023f6:	f003 fd1e 	bl	8005e36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80023fa:	2200      	movs	r2, #0
 80023fc:	2100      	movs	r1, #0
 80023fe:	200c      	movs	r0, #12
 8002400:	f003 fcff 	bl	8005e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002404:	200c      	movs	r0, #12
 8002406:	f003 fd16 	bl	8005e36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800240a:	2200      	movs	r2, #0
 800240c:	2100      	movs	r1, #0
 800240e:	200d      	movs	r0, #13
 8002410:	f003 fcf7 	bl	8005e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002414:	200d      	movs	r0, #13
 8002416:	f003 fd0e 	bl	8005e36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	2100      	movs	r1, #0
 800241e:	200e      	movs	r0, #14
 8002420:	f003 fcef 	bl	8005e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002424:	200e      	movs	r0, #14
 8002426:	f003 fd06 	bl	8005e36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	200f      	movs	r0, #15
 8002430:	f003 fce7 	bl	8005e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002434:	200f      	movs	r0, #15
 8002436:	f003 fcfe 	bl	8005e36 <HAL_NVIC_EnableIRQ>

}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000

08002448 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	@ 0x30
 800244c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244e:	f107 031c 	add.w	r3, r7, #28
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
 800245c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800245e:	4b9a      	ldr	r3, [pc, #616]	@ (80026c8 <MX_GPIO_Init+0x280>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002462:	4a99      	ldr	r2, [pc, #612]	@ (80026c8 <MX_GPIO_Init+0x280>)
 8002464:	f043 0310 	orr.w	r3, r3, #16
 8002468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800246a:	4b97      	ldr	r3, [pc, #604]	@ (80026c8 <MX_GPIO_Init+0x280>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246e:	f003 0310 	and.w	r3, r3, #16
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002476:	4b94      	ldr	r3, [pc, #592]	@ (80026c8 <MX_GPIO_Init+0x280>)
 8002478:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800247a:	4a93      	ldr	r2, [pc, #588]	@ (80026c8 <MX_GPIO_Init+0x280>)
 800247c:	f043 0304 	orr.w	r3, r3, #4
 8002480:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002482:	4b91      	ldr	r3, [pc, #580]	@ (80026c8 <MX_GPIO_Init+0x280>)
 8002484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800248e:	4b8e      	ldr	r3, [pc, #568]	@ (80026c8 <MX_GPIO_Init+0x280>)
 8002490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002492:	4a8d      	ldr	r2, [pc, #564]	@ (80026c8 <MX_GPIO_Init+0x280>)
 8002494:	f043 0320 	orr.w	r3, r3, #32
 8002498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800249a:	4b8b      	ldr	r3, [pc, #556]	@ (80026c8 <MX_GPIO_Init+0x280>)
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	f003 0320 	and.w	r3, r3, #32
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a6:	4b88      	ldr	r3, [pc, #544]	@ (80026c8 <MX_GPIO_Init+0x280>)
 80024a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024aa:	4a87      	ldr	r2, [pc, #540]	@ (80026c8 <MX_GPIO_Init+0x280>)
 80024ac:	f043 0301 	orr.w	r3, r3, #1
 80024b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024b2:	4b85      	ldr	r3, [pc, #532]	@ (80026c8 <MX_GPIO_Init+0x280>)
 80024b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024be:	4b82      	ldr	r3, [pc, #520]	@ (80026c8 <MX_GPIO_Init+0x280>)
 80024c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024c2:	4a81      	ldr	r2, [pc, #516]	@ (80026c8 <MX_GPIO_Init+0x280>)
 80024c4:	f043 0302 	orr.w	r3, r3, #2
 80024c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ca:	4b7f      	ldr	r3, [pc, #508]	@ (80026c8 <MX_GPIO_Init+0x280>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80024d6:	4b7c      	ldr	r3, [pc, #496]	@ (80026c8 <MX_GPIO_Init+0x280>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024da:	4a7b      	ldr	r2, [pc, #492]	@ (80026c8 <MX_GPIO_Init+0x280>)
 80024dc:	f043 0308 	orr.w	r3, r3, #8
 80024e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024e2:	4b79      	ldr	r3, [pc, #484]	@ (80026c8 <MX_GPIO_Init+0x280>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	f003 0308 	and.w	r3, r3, #8
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 80024ee:	2200      	movs	r2, #0
 80024f0:	2120      	movs	r1, #32
 80024f2:	4876      	ldr	r0, [pc, #472]	@ (80026cc <MX_GPIO_Init+0x284>)
 80024f4:	f004 fba4 	bl	8006c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
 80024f8:	2201      	movs	r2, #1
 80024fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80024fe:	4874      	ldr	r0, [pc, #464]	@ (80026d0 <MX_GPIO_Init+0x288>)
 8002500:	f004 fb9e 	bl	8006c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, GPIO_PIN_RESET);
 8002504:	2200      	movs	r2, #0
 8002506:	2104      	movs	r1, #4
 8002508:	4871      	ldr	r0, [pc, #452]	@ (80026d0 <MX_GPIO_Init+0x288>)
 800250a:	f004 fb99 	bl	8006c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 800250e:	2200      	movs	r2, #0
 8002510:	2120      	movs	r1, #32
 8002512:	4870      	ldr	r0, [pc, #448]	@ (80026d4 <MX_GPIO_Init+0x28c>)
 8002514:	f004 fb94 	bl	8006c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_RST_2_Pin|CS_OCD_1_Pin, GPIO_PIN_SET);
 8002518:	2201      	movs	r2, #1
 800251a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 800251e:	486b      	ldr	r0, [pc, #428]	@ (80026cc <MX_GPIO_Init+0x284>)
 8002520:	f004 fb8e 	bl	8006c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port, NOT_RST_4_Pin, GPIO_PIN_SET);
 8002524:	2201      	movs	r2, #1
 8002526:	2140      	movs	r1, #64	@ 0x40
 8002528:	486a      	ldr	r0, [pc, #424]	@ (80026d4 <MX_GPIO_Init+0x28c>)
 800252a:	f004 fb89 	bl	8006c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port, NOT_RST_3_Pin, GPIO_PIN_SET);
 800252e:	2201      	movs	r2, #1
 8002530:	2101      	movs	r1, #1
 8002532:	4869      	ldr	r0, [pc, #420]	@ (80026d8 <MX_GPIO_Init+0x290>)
 8002534:	f004 fb84 	bl	8006c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port, NOT_RST_1_Pin, GPIO_PIN_SET);
 8002538:	2201      	movs	r2, #1
 800253a:	2180      	movs	r1, #128	@ 0x80
 800253c:	4867      	ldr	r0, [pc, #412]	@ (80026dc <MX_GPIO_Init+0x294>)
 800253e:	f004 fb7f 	bl	8006c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NOT_FAULT_1_Pin CS_FAULT_2_Pin NOT_FAULT_2_Pin CS_FAULT_1_Pin */
  GPIO_InitStruct.Pin = NOT_FAULT_1_Pin|CS_FAULT_2_Pin|NOT_FAULT_2_Pin|CS_FAULT_1_Pin;
 8002542:	f640 0315 	movw	r3, #2069	@ 0x815
 8002546:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002548:	2300      	movs	r3, #0
 800254a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002550:	f107 031c 	add.w	r3, r7, #28
 8002554:	4619      	mov	r1, r3
 8002556:	485d      	ldr	r0, [pc, #372]	@ (80026cc <MX_GPIO_Init+0x284>)
 8002558:	f004 f9d8 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_INTERLOCK_Pin */
  GPIO_InitStruct.Pin = RESET_INTERLOCK_Pin;
 800255c:	2320      	movs	r3, #32
 800255e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002560:	2301      	movs	r3, #1
 8002562:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	4619      	mov	r1, r3
 8002572:	4856      	ldr	r0, [pc, #344]	@ (80026cc <MX_GPIO_Init+0x284>)
 8002574:	f004 f9ca 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_OCD_2_Pin */
  GPIO_InitStruct.Pin = CS_OCD_2_Pin;
 8002578:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800257c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800257e:	2311      	movs	r3, #17
 8002580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_OCD_2_GPIO_Port, &GPIO_InitStruct);
 800258a:	f107 031c 	add.w	r3, r7, #28
 800258e:	4619      	mov	r1, r3
 8002590:	484f      	ldr	r0, [pc, #316]	@ (80026d0 <MX_GPIO_Init+0x288>)
 8002592:	f004 f9bb 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_3_Pin */
  GPIO_InitStruct.Pin = READY_3_Pin;
 8002596:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800259a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800259c:	2300      	movs	r3, #0
 800259e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_3_GPIO_Port, &GPIO_InitStruct);
 80025a4:	f107 031c 	add.w	r3, r7, #28
 80025a8:	4619      	mov	r1, r3
 80025aa:	4849      	ldr	r0, [pc, #292]	@ (80026d0 <MX_GPIO_Init+0x288>)
 80025ac:	f004 f9ae 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERLOCK_Pin NOT_FAULT_4_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin|NOT_FAULT_4_Pin;
 80025b0:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80025b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b6:	2300      	movs	r3, #0
 80025b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025be:	f107 031c 	add.w	r3, r7, #28
 80025c2:	4619      	mov	r1, r3
 80025c4:	4843      	ldr	r0, [pc, #268]	@ (80026d4 <MX_GPIO_Init+0x28c>)
 80025c6:	f004 f9a1 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_FPGA_Pin */
  GPIO_InitStruct.Pin = RESET_FPGA_Pin;
 80025ca:	2304      	movs	r3, #4
 80025cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_FPGA_GPIO_Port, &GPIO_InitStruct);
 80025da:	f107 031c 	add.w	r3, r7, #28
 80025de:	4619      	mov	r1, r3
 80025e0:	483b      	ldr	r0, [pc, #236]	@ (80026d0 <MX_GPIO_Init+0x288>)
 80025e2:	f004 f993 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : START_STOP_FPGA_Pin */
  GPIO_InitStruct.Pin = START_STOP_FPGA_Pin;
 80025e6:	2320      	movs	r3, #32
 80025e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025ea:	2301      	movs	r3, #1
 80025ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f2:	2300      	movs	r3, #0
 80025f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(START_STOP_FPGA_GPIO_Port, &GPIO_InitStruct);
 80025f6:	f107 031c 	add.w	r3, r7, #28
 80025fa:	4619      	mov	r1, r3
 80025fc:	4835      	ldr	r0, [pc, #212]	@ (80026d4 <MX_GPIO_Init+0x28c>)
 80025fe:	f004 f985 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_2_Pin */
  GPIO_InitStruct.Pin = READY_2_Pin;
 8002602:	2301      	movs	r3, #1
 8002604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002606:	2300      	movs	r3, #0
 8002608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_2_GPIO_Port, &GPIO_InitStruct);
 800260e:	f107 031c 	add.w	r3, r7, #28
 8002612:	4619      	mov	r1, r3
 8002614:	4831      	ldr	r0, [pc, #196]	@ (80026dc <MX_GPIO_Init+0x294>)
 8002616:	f004 f979 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : NOT_RST_2_Pin CS_OCD_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_2_Pin|CS_OCD_1_Pin;
 800261a:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800261e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002620:	2311      	movs	r3, #17
 8002622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002628:	2300      	movs	r3, #0
 800262a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	4619      	mov	r1, r3
 8002632:	4826      	ldr	r0, [pc, #152]	@ (80026cc <MX_GPIO_Init+0x284>)
 8002634:	f004 f96a 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_4_Pin */
  GPIO_InitStruct.Pin = NOT_RST_4_Pin;
 8002638:	2340      	movs	r3, #64	@ 0x40
 800263a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800263c:	2311      	movs	r3, #17
 800263e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_4_GPIO_Port, &GPIO_InitStruct);
 8002648:	f107 031c 	add.w	r3, r7, #28
 800264c:	4619      	mov	r1, r3
 800264e:	4821      	ldr	r0, [pc, #132]	@ (80026d4 <MX_GPIO_Init+0x28c>)
 8002650:	f004 f95c 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_4_Pin */
  GPIO_InitStruct.Pin = READY_4_Pin;
 8002654:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_4_GPIO_Port, &GPIO_InitStruct);
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	4619      	mov	r1, r3
 8002668:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800266c:	f004 f94e 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_3_Pin */
  GPIO_InitStruct.Pin = NOT_RST_3_Pin;
 8002670:	2301      	movs	r3, #1
 8002672:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002674:	2311      	movs	r3, #17
 8002676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267c:	2300      	movs	r3, #0
 800267e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_3_GPIO_Port, &GPIO_InitStruct);
 8002680:	f107 031c 	add.w	r3, r7, #28
 8002684:	4619      	mov	r1, r3
 8002686:	4814      	ldr	r0, [pc, #80]	@ (80026d8 <MX_GPIO_Init+0x290>)
 8002688:	f004 f940 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_1_Pin PD5 NOT_FAULT_3_Pin */
  GPIO_InitStruct.Pin = READY_1_Pin|GPIO_PIN_5|NOT_FAULT_3_Pin;
 800268c:	2370      	movs	r3, #112	@ 0x70
 800268e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002690:	2300      	movs	r3, #0
 8002692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002698:	f107 031c 	add.w	r3, r7, #28
 800269c:	4619      	mov	r1, r3
 800269e:	480e      	ldr	r0, [pc, #56]	@ (80026d8 <MX_GPIO_Init+0x290>)
 80026a0:	f004 f934 	bl	800690c <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_1_Pin;
 80026a4:	2380      	movs	r3, #128	@ 0x80
 80026a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80026a8:	2311      	movs	r3, #17
 80026aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_1_GPIO_Port, &GPIO_InitStruct);
 80026b4:	f107 031c 	add.w	r3, r7, #28
 80026b8:	4619      	mov	r1, r3
 80026ba:	4808      	ldr	r0, [pc, #32]	@ (80026dc <MX_GPIO_Init+0x294>)
 80026bc:	f004 f926 	bl	800690c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80026c0:	bf00      	nop
 80026c2:	3730      	adds	r7, #48	@ 0x30
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	48001000 	.word	0x48001000
 80026d0:	48001400 	.word	0x48001400
 80026d4:	48000800 	.word	0x48000800
 80026d8:	48000c00 	.word	0x48000c00
 80026dc:	48000400 	.word	0x48000400

080026e0 <handle_event>:

/* USER CODE BEGIN 4 */

ConverterState handle_event(ConverterState currentState, ConverterEvent event) {
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	460a      	mov	r2, r1
 80026ea:	71fb      	strb	r3, [r7, #7]
 80026ec:	4613      	mov	r3, r2
 80026ee:	71bb      	strb	r3, [r7, #6]
    switch (currentState) {
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d839      	bhi.n	800276a <handle_event+0x8a>
 80026f6:	a201      	add	r2, pc, #4	@ (adr r2, 80026fc <handle_event+0x1c>)
 80026f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026fc:	08002711 	.word	0x08002711
 8002700:	0800271f 	.word	0x0800271f
 8002704:	0800272d 	.word	0x0800272d
 8002708:	08002749 	.word	0x08002749
 800270c:	08002757 	.word	0x08002757
        case STATE_INIT:
            if (event == EVENT_START)
 8002710:	79bb      	ldrb	r3, [r7, #6]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d12b      	bne.n	800276e <handle_event+0x8e>
            {
            	currentState = STATE_REGULATION;
 8002716:	2302      	movs	r3, #2
 8002718:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 800271a:	2302      	movs	r3, #2
 800271c:	e031      	b.n	8002782 <handle_event+0xa2>
            }
            break;

        case STATE_STANDBY:
            if (event == EVENT_START)
 800271e:	79bb      	ldrb	r3, [r7, #6]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d126      	bne.n	8002772 <handle_event+0x92>
            {
            	currentState = STATE_REGULATION;
 8002724:	2302      	movs	r3, #2
 8002726:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 8002728:	2302      	movs	r3, #2
 800272a:	e02a      	b.n	8002782 <handle_event+0xa2>
            }
            break;

        case STATE_REGULATION:
        	//USB_SendString("State: INIT -> RUNNING\r\n");
            if (event == EVENT_FAULT)
 800272c:	79bb      	ldrb	r3, [r7, #6]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d103      	bne.n	800273a <handle_event+0x5a>
            {
            	currentState = STATE_FAULT;
 8002732:	2303      	movs	r3, #3
 8002734:	71fb      	strb	r3, [r7, #7]
                return STATE_FAULT;
 8002736:	2303      	movs	r3, #3
 8002738:	e023      	b.n	8002782 <handle_event+0xa2>

            } else if (event == EVENT_SHUTDOWN)
 800273a:	79bb      	ldrb	r3, [r7, #6]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d11a      	bne.n	8002776 <handle_event+0x96>
            {
            	currentState = STATE_SHUTDOWN;
 8002740:	2304      	movs	r3, #4
 8002742:	71fb      	strb	r3, [r7, #7]
                return STATE_SHUTDOWN;
 8002744:	2304      	movs	r3, #4
 8002746:	e01c      	b.n	8002782 <handle_event+0xa2>
            }

            break;

        case STATE_FAULT:
            if (event == EVENT_CLEAR_FAULT)
 8002748:	79bb      	ldrb	r3, [r7, #6]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d115      	bne.n	800277a <handle_event+0x9a>
            {
            	currentState = STATE_STANDBY;
 800274e:	2301      	movs	r3, #1
 8002750:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 8002752:	2301      	movs	r3, #1
 8002754:	e015      	b.n	8002782 <handle_event+0xa2>
            }
            break;

        case STATE_SHUTDOWN:
            if (event == EVENT_START)
 8002756:	79bb      	ldrb	r3, [r7, #6]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d110      	bne.n	800277e <handle_event+0x9e>
            {
            	once = 0;
 800275c:	4b0c      	ldr	r3, [pc, #48]	@ (8002790 <handle_event+0xb0>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
            	currentState = STATE_REGULATION;
 8002762:	2302      	movs	r3, #2
 8002764:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 8002766:	2302      	movs	r3, #2
 8002768:	e00b      	b.n	8002782 <handle_event+0xa2>
            }
            break;
        default:
            break;
 800276a:	bf00      	nop
 800276c:	e008      	b.n	8002780 <handle_event+0xa0>
            break;
 800276e:	bf00      	nop
 8002770:	e006      	b.n	8002780 <handle_event+0xa0>
            break;
 8002772:	bf00      	nop
 8002774:	e004      	b.n	8002780 <handle_event+0xa0>
            break;
 8002776:	bf00      	nop
 8002778:	e002      	b.n	8002780 <handle_event+0xa0>
            break;
 800277a:	bf00      	nop
 800277c:	e000      	b.n	8002780 <handle_event+0xa0>
            break;
 800277e:	bf00      	nop
    }
    return currentState; // No state change
 8002780:	79fb      	ldrb	r3, [r7, #7]
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	20000b5c 	.word	0x20000b5c

08002794 <Set_PWM_DutyCycle>:
       // float TEMPERATURE_AFTER_CONVERSION_FROM_ADC = (((adc_value/4096.0f)*3.3f) - 0.4f)/0.0195f;
       // return TEMPERATURE_AFTER_CONVERSION_FROM_ADC;

}

void Set_PWM_DutyCycle(uint32_t dutyCycle) { // dutycyle for FAN SPEED CONTROl
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
    if (dutyCycle > 100) dutyCycle = 100;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b64      	cmp	r3, #100	@ 0x64
 80027a0:	d901      	bls.n	80027a6 <Set_PWM_DutyCycle+0x12>
 80027a2:	2364      	movs	r3, #100	@ 0x64
 80027a4:	607b      	str	r3, [r7, #4]
    uint32_t pulse = (htim4.Init.Period + 1) * dutyCycle / 100 - 1;
 80027a6:	4b0b      	ldr	r3, [pc, #44]	@ (80027d4 <Set_PWM_DutyCycle+0x40>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	3301      	adds	r3, #1
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	fb02 f303 	mul.w	r3, r2, r3
 80027b2:	4a09      	ldr	r2, [pc, #36]	@ (80027d8 <Set_PWM_DutyCycle+0x44>)
 80027b4:	fba2 2303 	umull	r2, r3, r2, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	3b01      	subs	r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 80027be:	4b05      	ldr	r3, [pc, #20]	@ (80027d4 <Set_PWM_DutyCycle+0x40>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	200007d0 	.word	0x200007d0
 80027d8:	51eb851f 	.word	0x51eb851f
 80027dc:	00000000 	.word	0x00000000

080027e0 <HAL_ADC_ConvCpltCallback>:
//ADC save to array and moving average
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC5)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a20      	ldr	r2, [pc, #128]	@ (8002870 <HAL_ADC_ConvCpltCallback+0x90>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d135      	bne.n	800285e <HAL_ADC_ConvCpltCallback+0x7e>
		    {
		        uint32_t sum = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 80027f6:	2300      	movs	r3, #0
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	e00b      	b.n	8002814 <HAL_ADC_ConvCpltCallback+0x34>
		        {
		            sum += adc5_dma_buffer[i];
 80027fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002874 <HAL_ADC_ConvCpltCallback+0x94>)
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002804:	b29b      	uxth	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	3301      	adds	r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2b09      	cmp	r3, #9
 8002818:	ddf0      	ble.n	80027fc <HAL_ADC_ConvCpltCallback+0x1c>
		        }
		        adc_moving_average = ((sum / MA_WINDOW_SIZE)*3300)/4096;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4a16      	ldr	r2, [pc, #88]	@ (8002878 <HAL_ADC_ConvCpltCallback+0x98>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	08db      	lsrs	r3, r3, #3
 8002824:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002828:	fb02 f303 	mul.w	r3, r2, r3
 800282c:	0b1b      	lsrs	r3, r3, #12
 800282e:	b29a      	uxth	r2, r3
 8002830:	4b12      	ldr	r3, [pc, #72]	@ (800287c <HAL_ADC_ConvCpltCallback+0x9c>)
 8002832:	801a      	strh	r2, [r3, #0]
		        imax2_sum=(adc_moving_average-1450)*0.384;
 8002834:	4b11      	ldr	r3, [pc, #68]	@ (800287c <HAL_ADC_ConvCpltCallback+0x9c>)
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	f2a3 53aa 	subw	r3, r3, #1450	@ 0x5aa
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd fe99 	bl	8000574 <__aeabi_i2d>
 8002842:	a309      	add	r3, pc, #36	@ (adr r3, 8002868 <HAL_ADC_ConvCpltCallback+0x88>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fd fefe 	bl	8000648 <__aeabi_dmul>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f7fe f9d0 	bl	8000bf8 <__aeabi_d2uiz>
 8002858:	4603      	mov	r3, r0
 800285a:	4a09      	ldr	r2, [pc, #36]	@ (8002880 <HAL_ADC_ConvCpltCallback+0xa0>)
 800285c:	6013      	str	r3, [r2, #0]
		        // Restart the DMA transfer
		       // HAL_ADC_Start_DMA(hadc, (uint32_t*)adc5_dma_buffer, MA_WINDOW_SIZE);
		    }


}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	bc6a7efa 	.word	0xbc6a7efa
 800286c:	3fd89374 	.word	0x3fd89374
 8002870:	50000600 	.word	0x50000600
 8002874:	20000a70 	.word	0x20000a70
 8002878:	cccccccd 	.word	0xcccccccd
 800287c:	20000a84 	.word	0x20000a84
 8002880:	20000a6c 	.word	0x20000a6c

08002884 <Update_PWM_Frequency>:
        }
    }
}

void Update_PWM_Frequency(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency)
{
 8002884:	b480      	push	{r7}
 8002886:	b089      	sub	sp, #36	@ 0x24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
	 uint32_t timer_clock = 150000000;  // Assuming a 150 MHz timer clock
 8002890:	4b33      	ldr	r3, [pc, #204]	@ (8002960 <Update_PWM_Frequency+0xdc>)
 8002892:	61bb      	str	r3, [r7, #24]
	    uint32_t prescaler = htim->Init.Prescaler + 1;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	3301      	adds	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
	    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	fb02 f303 	mul.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	61fb      	str	r3, [r7, #28]

	    // Ensure period is within valid range
	    if (period > 65535) {
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028b4:	d314      	bcc.n	80028e0 <Update_PWM_Frequency+0x5c>
	        // Adjust prescaler to bring period within range
	        prescaler = (prescaler * (period / 65536)) + 1;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	0c1b      	lsrs	r3, r3, #16
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	3301      	adds	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
	        period = (timer_clock / (prescaler * frequency)) - 1;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	fb02 f303 	mul.w	r3, r2, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d2:	3b01      	subs	r3, #1
 80028d4:	61fb      	str	r3, [r7, #28]
	        __HAL_TIM_SET_PRESCALER(htim, prescaler - 1);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	3a01      	subs	r2, #1
 80028de:	629a      	str	r2, [r3, #40]	@ 0x28
	    }

	    // Update the period register (ARR) with double buffering
	    __HAL_TIM_SET_AUTORELOAD(htim, period);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	60da      	str	r2, [r3, #12]

	    // Set the duty cycle to approximately 50%
	    uint32_t pulse = period / 2;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	613b      	str	r3, [r7, #16]
	    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d104      	bne.n	8002904 <Update_PWM_Frequency+0x80>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	635a      	str	r2, [r3, #52]	@ 0x34
 8002902:	e023      	b.n	800294c <Update_PWM_Frequency+0xc8>
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b04      	cmp	r3, #4
 8002908:	d104      	bne.n	8002914 <Update_PWM_Frequency+0x90>
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	6393      	str	r3, [r2, #56]	@ 0x38
 8002912:	e01b      	b.n	800294c <Update_PWM_Frequency+0xc8>
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	2b08      	cmp	r3, #8
 8002918:	d104      	bne.n	8002924 <Update_PWM_Frequency+0xa0>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002922:	e013      	b.n	800294c <Update_PWM_Frequency+0xc8>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b0c      	cmp	r3, #12
 8002928:	d104      	bne.n	8002934 <Update_PWM_Frequency+0xb0>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	6413      	str	r3, [r2, #64]	@ 0x40
 8002932:	e00b      	b.n	800294c <Update_PWM_Frequency+0xc8>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b10      	cmp	r3, #16
 8002938:	d104      	bne.n	8002944 <Update_PWM_Frequency+0xc0>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	6493      	str	r3, [r2, #72]	@ 0x48
 8002942:	e003      	b.n	800294c <Update_PWM_Frequency+0xc8>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	    // Manually generate an update event by setting the UG bit in the EGR register
	    htim->Instance->EGR = TIM_EGR_UG;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_AUTORELOAD(htim, period);

    // Restart the timer PWM generation
    HAL_TIM_PWM_Stop(htim, channel);
    HAL_TIM_PWM_Start(htim, channel);*/
}
 8002954:	bf00      	nop
 8002956:	3724      	adds	r7, #36	@ 0x24
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	08f0d180 	.word	0x08f0d180

08002964 <Check_Faults>:
	        dac_buffer[i] = (((1/3.3)*res12_b) + ((0.5/3.3)*res12_b) * sin(2 * M_PI * i/BUFFER_SIZE));
	    }
}

uint8_t Check_Faults()
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
	// Faults pins are from gate driver and they are active pull down
	// 4 fault pins from 4 gate driver + 2 fault pins from  2 currents sensors  = 6 pins
	if(HAL_GPIO_ReadPin(CS_FAULT_1_GPIO_Port, CS_FAULT_1_Pin) && HAL_GPIO_ReadPin(CS_FAULT_2_GPIO_Port, CS_FAULT_2_Pin)
 8002968:	2101      	movs	r1, #1
 800296a:	4818      	ldr	r0, [pc, #96]	@ (80029cc <Check_Faults+0x68>)
 800296c:	f004 f950 	bl	8006c10 <HAL_GPIO_ReadPin>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d026      	beq.n	80029c4 <Check_Faults+0x60>
 8002976:	2110      	movs	r1, #16
 8002978:	4814      	ldr	r0, [pc, #80]	@ (80029cc <Check_Faults+0x68>)
 800297a:	f004 f949 	bl	8006c10 <HAL_GPIO_ReadPin>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d01f      	beq.n	80029c4 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_1_GPIO_Port, NOT_FAULT_1_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_2_GPIO_Port, NOT_FAULT_2_Pin)
 8002984:	2104      	movs	r1, #4
 8002986:	4811      	ldr	r0, [pc, #68]	@ (80029cc <Check_Faults+0x68>)
 8002988:	f004 f942 	bl	8006c10 <HAL_GPIO_ReadPin>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d018      	beq.n	80029c4 <Check_Faults+0x60>
 8002992:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002996:	480d      	ldr	r0, [pc, #52]	@ (80029cc <Check_Faults+0x68>)
 8002998:	f004 f93a 	bl	8006c10 <HAL_GPIO_ReadPin>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d010      	beq.n	80029c4 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_3_GPIO_Port, NOT_FAULT_3_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_4_GPIO_Port, NOT_FAULT_4_Pin) )
 80029a2:	2140      	movs	r1, #64	@ 0x40
 80029a4:	480a      	ldr	r0, [pc, #40]	@ (80029d0 <Check_Faults+0x6c>)
 80029a6:	f004 f933 	bl	8006c10 <HAL_GPIO_ReadPin>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d009      	beq.n	80029c4 <Check_Faults+0x60>
 80029b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029b4:	4807      	ldr	r0, [pc, #28]	@ (80029d4 <Check_Faults+0x70>)
 80029b6:	f004 f92b 	bl	8006c10 <HAL_GPIO_ReadPin>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <Check_Faults+0x60>
		return 0; // if all pins is 1 then all is ready, there is not faults then return 0
 80029c0:	2300      	movs	r3, #0
 80029c2:	e000      	b.n	80029c6 <Check_Faults+0x62>

	return 1;
 80029c4:	2301      	movs	r3, #1
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	48001000 	.word	0x48001000
 80029d0:	48000c00 	.word	0x48000c00
 80029d4:	48000800 	.word	0x48000800

080029d8 <Check_Ready>:

uint8_t Check_Ready()
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
	// Ready pins are from gate driver and they are active pull up
	// 4 ready pins from 4 gate drivers
	if(HAL_GPIO_ReadPin(READY_1_GPIO_Port, READY_1_Pin) && HAL_GPIO_ReadPin(READY_2_GPIO_Port, READY_2_Pin)
 80029dc:	2110      	movs	r1, #16
 80029de:	4811      	ldr	r0, [pc, #68]	@ (8002a24 <Check_Ready+0x4c>)
 80029e0:	f004 f916 	bl	8006c10 <HAL_GPIO_ReadPin>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d019      	beq.n	8002a1e <Check_Ready+0x46>
 80029ea:	2101      	movs	r1, #1
 80029ec:	480e      	ldr	r0, [pc, #56]	@ (8002a28 <Check_Ready+0x50>)
 80029ee:	f004 f90f 	bl	8006c10 <HAL_GPIO_ReadPin>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d012      	beq.n	8002a1e <Check_Ready+0x46>
			&& HAL_GPIO_ReadPin(READY_3_GPIO_Port, READY_3_Pin) && HAL_GPIO_ReadPin(READY_4_GPIO_Port, READY_4_Pin) )
 80029f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80029fc:	480b      	ldr	r0, [pc, #44]	@ (8002a2c <Check_Ready+0x54>)
 80029fe:	f004 f907 	bl	8006c10 <HAL_GPIO_ReadPin>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <Check_Ready+0x46>
 8002a08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a10:	f004 f8fe 	bl	8006c10 <HAL_GPIO_ReadPin>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <Check_Ready+0x46>
			return 1; // return 1 when is gate drivers ready
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <Check_Ready+0x48>

		return 0;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	48000c00 	.word	0x48000c00
 8002a28:	48000400 	.word	0x48000400
 8002a2c:	48001400 	.word	0x48001400

08002a30 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002a30:	b5b0      	push	{r4, r5, r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	// SOFT start_program RAMP REALISATION
	//  Ts 20khz
	if(htim->Instance == TIM15)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a76      	ldr	r2, [pc, #472]	@ (8002c18 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	f040 80be 	bne.w	8002bc0 <HAL_TIM_PeriodElapsedCallback+0x190>
	{
		sythick1 =  HAL_GetTick();
 8002a44:	f001 fc34 	bl	80042b0 <HAL_GetTick>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4a74      	ldr	r2, [pc, #464]	@ (8002c1c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002a4c:	6013      	str	r3, [r2, #0]
		if(currentState == STATE_REGULATION )
 8002a4e:	4b74      	ldr	r3, [pc, #464]	@ (8002c20 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	f040 80a9 	bne.w	8002baa <HAL_TIM_PeriodElapsedCallback+0x17a>
		{
		//current_sensor1_vref = adc3_dma_buffer[0]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[0], pcb_temp)/4096)*3.3;
		//current_sensor2_vref = adc3_dma_buffer[1]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[1], pcb_temp)/4096)*3.3;

		input_voltage = (int)((((adc3_dma_buffer[2])*3300)/4096-200)*18.81);//[mV]		((Low_pass_filter(adc3_dma_buffer[2], input_voltage)/4096)*3.3-0.2)*27.1;
 8002a58:	4b72      	ldr	r3, [pc, #456]	@ (8002c24 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002a5a:	889b      	ldrh	r3, [r3, #4]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002a64:	fb02 f303 	mul.w	r3, r2, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	da01      	bge.n	8002a70 <HAL_TIM_PeriodElapsedCallback+0x40>
 8002a6c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002a70:	131b      	asrs	r3, r3, #12
 8002a72:	3bc8      	subs	r3, #200	@ 0xc8
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fd fd7d 	bl	8000574 <__aeabi_i2d>
 8002a7a:	a363      	add	r3, pc, #396	@ (adr r3, 8002c08 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f7fd fde2 	bl	8000648 <__aeabi_dmul>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f88c 	bl	8000ba8 <__aeabi_d2iz>
 8002a90:	4603      	mov	r3, r0
 8002a92:	461a      	mov	r2, r3
 8002a94:	4b64      	ldr	r3, [pc, #400]	@ (8002c28 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002a96:	601a      	str	r2, [r3, #0]
		output_voltage = (int)((((adc4_dma_buffer[1])*3300)/4096-200)*18.81);//[mV] 		((Low_pass_filter(adc4_dma_buffer, output_voltage)/4096)*3.3-0.2)*27.1;
 8002a98:	4b64      	ldr	r3, [pc, #400]	@ (8002c2c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002a9a:	885b      	ldrh	r3, [r3, #2]
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002aa4:	fb02 f303 	mul.w	r3, r2, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	da01      	bge.n	8002ab0 <HAL_TIM_PeriodElapsedCallback+0x80>
 8002aac:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002ab0:	131b      	asrs	r3, r3, #12
 8002ab2:	3bc8      	subs	r3, #200	@ 0xc8
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7fd fd5d 	bl	8000574 <__aeabi_i2d>
 8002aba:	a353      	add	r3, pc, #332	@ (adr r3, 8002c08 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac0:	f7fd fdc2 	bl	8000648 <__aeabi_dmul>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7fe f86c 	bl	8000ba8 <__aeabi_d2iz>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b56      	ldr	r3, [pc, #344]	@ (8002c30 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002ad6:	601a      	str	r2, [r3, #0]
		if(once == 0) Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, 7100000); // Set TIM8 CH1 o freq that is delay hc and send to fpga
		}

		imax2 = imax1 + imax2_sum; // imax2_sum signal from FPGA
		// imax1,2 each for branches to make 180 degree shift*/
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref+((int)imax1*0.025)); // imax1  1.5V is 0A;  1A is 20mV; 1 bit is 0.8mV; imax[mA]*0.02 [V/A]/0.8[mV] = Value for DAC
 8002ad8:	4b56      	ldr	r3, [pc, #344]	@ (8002c34 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fd49 	bl	8000574 <__aeabi_i2d>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	460d      	mov	r5, r1
 8002ae6:	4b54      	ldr	r3, [pc, #336]	@ (8002c38 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fd42 	bl	8000574 <__aeabi_i2d>
 8002af0:	a347      	add	r3, pc, #284	@ (adr r3, 8002c10 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af6:	f7fd fda7 	bl	8000648 <__aeabi_dmul>
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	4620      	mov	r0, r4
 8002b00:	4629      	mov	r1, r5
 8002b02:	f7fd fbeb 	bl	80002dc <__adddf3>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f7fe f873 	bl	8000bf8 <__aeabi_d2uiz>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2200      	movs	r2, #0
 8002b16:	2100      	movs	r1, #0
 8002b18:	4848      	ldr	r0, [pc, #288]	@ (8002c3c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002b1a:	f003 fa8b 	bl	8006034 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, current_sensor2_vref+((int)imax2*0.025)); // imax2
 8002b1e:	4b48      	ldr	r3, [pc, #288]	@ (8002c40 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fd26 	bl	8000574 <__aeabi_i2d>
 8002b28:	4604      	mov	r4, r0
 8002b2a:	460d      	mov	r5, r1
 8002b2c:	4b45      	ldr	r3, [pc, #276]	@ (8002c44 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fd fd1f 	bl	8000574 <__aeabi_i2d>
 8002b36:	a336      	add	r3, pc, #216	@ (adr r3, 8002c10 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3c:	f7fd fd84 	bl	8000648 <__aeabi_dmul>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4620      	mov	r0, r4
 8002b46:	4629      	mov	r1, r5
 8002b48:	f7fd fbc8 	bl	80002dc <__adddf3>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4610      	mov	r0, r2
 8002b52:	4619      	mov	r1, r3
 8002b54:	f7fe f850 	bl	8000bf8 <__aeabi_d2uiz>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2110      	movs	r1, #16
 8002b5e:	4837      	ldr	r0, [pc, #220]	@ (8002c3c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002b60:	f003 fa68 	bl	8006034 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref-((int)imin*0.25)); // imin uzyto tutaj wzmacniacza 10x dla sygnalu z sensora pradu wiec ma wzmocnienie 200mv/A a nie 20mv/a
 8002b64:	4b33      	ldr	r3, [pc, #204]	@ (8002c34 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002b66:	881b      	ldrh	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fd03 	bl	8000574 <__aeabi_i2d>
 8002b6e:	4604      	mov	r4, r0
 8002b70:	460d      	mov	r5, r1
 8002b72:	4b35      	ldr	r3, [pc, #212]	@ (8002c48 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fcfc 	bl	8000574 <__aeabi_i2d>
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	4b32      	ldr	r3, [pc, #200]	@ (8002c4c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002b82:	f7fd fd61 	bl	8000648 <__aeabi_dmul>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	f7fd fba3 	bl	80002d8 <__aeabi_dsub>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f7fe f82d 	bl	8000bf8 <__aeabi_d2uiz>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	482a      	ldr	r0, [pc, #168]	@ (8002c50 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002ba6:	f003 fa45 	bl	8006034 <HAL_DAC_SetValue>
		//	HAL_Delay(10);
		//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
		//once = 1;
		//}

		sythick2 =  HAL_GetTick() - sythick1;
 8002baa:	f001 fb81 	bl	80042b0 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c1c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	4a27      	ldr	r2, [pc, #156]	@ (8002c54 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002bb8:	6013      	str	r3, [r2, #0]
		flag_control = 1;
 8002bba:	4b27      	ldr	r3, [pc, #156]	@ (8002c58 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM6) // 5 sec period
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a25      	ldr	r2, [pc, #148]	@ (8002c5c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d101      	bne.n	8002bce <HAL_TIM_PeriodElapsedCallback+0x19e>
		    {
		//if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
				//{
				FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
 8002bca:	f000 f991 	bl	8002ef0 <FAN_Drive>
				//}
		    }


	if (htim->Instance == TIM7)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a23      	ldr	r2, [pc, #140]	@ (8002c60 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d110      	bne.n	8002bfa <HAL_TIM_PeriodElapsedCallback+0x1ca>
	    {
	        // Turn off OCD pins of currents sensors to reset current sensor 1us

	        HAL_GPIO_TogglePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin);
 8002bd8:	2102      	movs	r1, #2
 8002bda:	4822      	ldr	r0, [pc, #136]	@ (8002c64 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002bdc:	f004 f848 	bl	8006c70 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin);
 8002be0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002be4:	4820      	ldr	r0, [pc, #128]	@ (8002c68 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002be6:	f004 f843 	bl	8006c70 <HAL_GPIO_TogglePin>
	        HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002bea:	2200      	movs	r2, #0
 8002bec:	2120      	movs	r1, #32
 8002bee:	481d      	ldr	r0, [pc, #116]	@ (8002c64 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002bf0:	f004 f826 	bl	8006c40 <HAL_GPIO_WritePin>
	        // Stop the timer
	        HAL_TIM_Base_Stop_IT(&htim7);
 8002bf4:	481d      	ldr	r0, [pc, #116]	@ (8002c6c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002bf6:	f006 fefb 	bl	80099f0 <HAL_TIM_Base_Stop_IT>
	    }


}
 8002bfa:	bf00      	nop
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bdb0      	pop	{r4, r5, r7, pc}
 8002c02:	bf00      	nop
 8002c04:	f3af 8000 	nop.w
 8002c08:	28f5c28f 	.word	0x28f5c28f
 8002c0c:	4032cf5c 	.word	0x4032cf5c
 8002c10:	9999999a 	.word	0x9999999a
 8002c14:	3f999999 	.word	0x3f999999
 8002c18:	40014000 	.word	0x40014000
 8002c1c:	20000b64 	.word	0x20000b64
 8002c20:	20000b57 	.word	0x20000b57
 8002c24:	20000a48 	.word	0x20000a48
 8002c28:	20000a3c 	.word	0x20000a3c
 8002c2c:	20000a5c 	.word	0x20000a5c
 8002c30:	20000a54 	.word	0x20000a54
 8002c34:	20000a2c 	.word	0x20000a2c
 8002c38:	20000a30 	.word	0x20000a30
 8002c3c:	2000069c 	.word	0x2000069c
 8002c40:	20000a2e 	.word	0x20000a2e
 8002c44:	20000a34 	.word	0x20000a34
 8002c48:	20000a38 	.word	0x20000a38
 8002c4c:	3fd00000 	.word	0x3fd00000
 8002c50:	200006b0 	.word	0x200006b0
 8002c54:	20000b68 	.word	0x20000b68
 8002c58:	20000b6c 	.word	0x20000b6c
 8002c5c:	40001000 	.word	0x40001000
 8002c60:	40001400 	.word	0x40001400
 8002c64:	48001000 	.word	0x48001000
 8002c68:	48001400 	.word	0x48001400
 8002c6c:	20000868 	.word	0x20000868

08002c70 <RAMP>:

void RAMP()
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
	// RAMP Voltage to soft-start
				if((vref-output_voltage)>100)
 8002c74:	4b15      	ldr	r3, [pc, #84]	@ (8002ccc <RAMP+0x5c>)
 8002c76:	881b      	ldrh	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4b15      	ldr	r3, [pc, #84]	@ (8002cd0 <RAMP+0x60>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b64      	cmp	r3, #100	@ 0x64
 8002c82:	d913      	bls.n	8002cac <RAMP+0x3c>
				{
					Vramp = output_voltage+4000000*Ts; // 200mV step per loop period
 8002c84:	4b12      	ldr	r3, [pc, #72]	@ (8002cd0 <RAMP+0x60>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd fc63 	bl	8000554 <__aeabi_ui2d>
 8002c8e:	f04f 0200 	mov.w	r2, #0
 8002c92:	4b10      	ldr	r3, [pc, #64]	@ (8002cd4 <RAMP+0x64>)
 8002c94:	f7fd fb22 	bl	80002dc <__adddf3>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	4610      	mov	r0, r2
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f7fd ffaa 	bl	8000bf8 <__aeabi_d2uiz>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd8 <RAMP+0x68>)
 8002caa:	801a      	strh	r2, [r3, #0]
				}
				//else if((vref-output_voltage)<-100)
				//{
				//	Vramp = output_voltage-4000000*Ts;
				//}
				if(Vramp>=48000)
 8002cac:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd8 <RAMP+0x68>)
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d906      	bls.n	8002cc6 <RAMP+0x56>
				{
					Vramp = 48000; // 48V
 8002cb8:	4b07      	ldr	r3, [pc, #28]	@ (8002cd8 <RAMP+0x68>)
 8002cba:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8002cbe:	801a      	strh	r2, [r3, #0]
					RAMP_FINISHED = 1;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	@ (8002cdc <RAMP+0x6c>)
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
					//currentState = STATE_REGULATION;
				}


}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000a54 	.word	0x20000a54
 8002cd4:	40690000 	.word	0x40690000
 8002cd8:	20000a58 	.word	0x20000a58
 8002cdc:	20000a60 	.word	0x20000a60

08002ce0 <regulatorPI>:

void regulatorPI(uint32_t *out, uint32_t *integral, float in, float in_zad, float limp, float limn, float kp, float ti, float Ts1)
{
 8002ce0:	b5b0      	push	{r4, r5, r7, lr}
 8002ce2:	b08c      	sub	sp, #48	@ 0x30
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6278      	str	r0, [r7, #36]	@ 0x24
 8002ce8:	6239      	str	r1, [r7, #32]
 8002cea:	ed87 0a07 	vstr	s0, [r7, #28]
 8002cee:	edc7 0a06 	vstr	s1, [r7, #24]
 8002cf2:	ed87 1a05 	vstr	s2, [r7, #20]
 8002cf6:	edc7 1a04 	vstr	s3, [r7, #16]
 8002cfa:	ed87 2a03 	vstr	s4, [r7, #12]
 8002cfe:	edc7 2a02 	vstr	s5, [r7, #8]
 8002d02:	ed87 3a01 	vstr	s6, [r7, #4]
	// Tustin transfrom of PI regulator s -> 2/T * (Z-1)/(Z+1)
    float delta;

    delta = in_zad - in; // error
 8002d06:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d12:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    *integral = *integral + (delta + prev_delta) * (kp / ti) * Ts1 * 0.5 ; // I part
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fd fc1a 	bl	8000554 <__aeabi_ui2d>
 8002d20:	4604      	mov	r4, r0
 8002d22:	460d      	mov	r5, r1
 8002d24:	4b51      	ldr	r3, [pc, #324]	@ (8002e6c <regulatorPI+0x18c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	ee07 3a90 	vmov	s15, r3
 8002d2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d30:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d38:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d3c:	edd7 6a02 	vldr	s13, [r7, #8]
 8002d40:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002d44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d48:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d50:	ee17 0a90 	vmov	r0, s15
 8002d54:	f7fd fc20 	bl	8000598 <__aeabi_f2d>
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	4b44      	ldr	r3, [pc, #272]	@ (8002e70 <regulatorPI+0x190>)
 8002d5e:	f7fd fc73 	bl	8000648 <__aeabi_dmul>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4620      	mov	r0, r4
 8002d68:	4629      	mov	r1, r5
 8002d6a:	f7fd fab7 	bl	80002dc <__adddf3>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	460b      	mov	r3, r1
 8002d72:	4610      	mov	r0, r2
 8002d74:	4619      	mov	r1, r3
 8002d76:	f7fd ff3f 	bl	8000bf8 <__aeabi_d2uiz>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	6a3b      	ldr	r3, [r7, #32]
 8002d7e:	601a      	str	r2, [r3, #0]
    prev_delta = delta;
 8002d80:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002d84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d88:	ee17 2a90 	vmov	r2, s15
 8002d8c:	4b37      	ldr	r3, [pc, #220]	@ (8002e6c <regulatorPI+0x18c>)
 8002d8e:	601a      	str	r2, [r3, #0]
    if (*integral >= limp) // limit peak positive
 8002d90:	6a3b      	ldr	r3, [r7, #32]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	ee07 3a90 	vmov	s15, r3
 8002d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002da0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da8:	d807      	bhi.n	8002dba <regulatorPI+0xda>
    {
        *integral = limp;
 8002daa:	edd7 7a05 	vldr	s15, [r7, #20]
 8002dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002db2:	ee17 2a90 	vmov	r2, s15
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	601a      	str	r2, [r3, #0]
    }
    if (*integral <= limn)// limit peak negative
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	ee07 3a90 	vmov	s15, r3
 8002dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002dca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd2:	db07      	blt.n	8002de4 <regulatorPI+0x104>
    {
        *integral = limn;
 8002dd4:	edd7 7a04 	vldr	s15, [r7, #16]
 8002dd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ddc:	ee17 2a90 	vmov	r2, s15
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	601a      	str	r2, [r3, #0]
    }
    *out = (delta * kp + *integral); // Sum of P and I
 8002de4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002de8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002dec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e04:	ee17 2a90 	vmov	r2, s15
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	601a      	str	r2, [r3, #0]
    if (*out >= limp) // limit peak positive
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	ee07 3a90 	vmov	s15, r3
 8002e14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e18:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e24:	d807      	bhi.n	8002e36 <regulatorPI+0x156>
    {
        *out = limp;
 8002e26:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e2e:	ee17 2a90 	vmov	r2, s15
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	601a      	str	r2, [r3, #0]
    }
    if (*out <= limn)// limit peak negative
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	ee07 3a90 	vmov	s15, r3
 8002e3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e42:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4e:	da00      	bge.n	8002e52 <regulatorPI+0x172>
    {
        *out = limn;
    }
}
 8002e50:	e007      	b.n	8002e62 <regulatorPI+0x182>
        *out = limn;
 8002e52:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e5a:	ee17 2a90 	vmov	r2, s15
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e60:	601a      	str	r2, [r3, #0]
}
 8002e62:	bf00      	nop
 8002e64:	3730      	adds	r7, #48	@ 0x30
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bdb0      	pop	{r4, r5, r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000b50 	.word	0x20000b50
 8002e70:	3fe00000 	.word	0x3fe00000
 8002e74:	00000000 	.word	0x00000000

08002e78 <Low_pass_filter>:

	    return y[0];
}*/

float Low_pass_filter(float new_sample, float old_sample)
{
 8002e78:	b5b0      	push	{r4, r5, r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e82:	edc7 0a00 	vstr	s1, [r7]
	float Low_passed_sample = 0;
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
	Low_passed_sample = (float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;
 8002e8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e90:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8002ee8 <Low_pass_filter+0x70>
 8002e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e98:	ee17 0a90 	vmov	r0, s15
 8002e9c:	f7fd fb7c 	bl	8000598 <__aeabi_f2d>
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	460d      	mov	r5, r1
 8002ea4:	6838      	ldr	r0, [r7, #0]
 8002ea6:	f7fd fb77 	bl	8000598 <__aeabi_f2d>
 8002eaa:	a30d      	add	r3, pc, #52	@ (adr r3, 8002ee0 <Low_pass_filter+0x68>)
 8002eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb0:	f7fd fbca 	bl	8000648 <__aeabi_dmul>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4620      	mov	r0, r4
 8002eba:	4629      	mov	r1, r5
 8002ebc:	f7fd fa0e 	bl	80002dc <__adddf3>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd feb6 	bl	8000c38 <__aeabi_d2f>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	60fb      	str	r3, [r7, #12]

	return Low_passed_sample;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	ee07 3a90 	vmov	s15, r3

}
 8002ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bdb0      	pop	{r4, r5, r7, pc}
 8002ee0:	99999998 	.word	0x99999998
 8002ee4:	3fc99999 	.word	0x3fc99999
 8002ee8:	3f4ccccd 	.word	0x3f4ccccd
 8002eec:	00000000 	.word	0x00000000

08002ef0 <FAN_Drive>:
void FAN_Drive()
{ //@ToDo poprawic ogarnac zeby a intach bylo
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
		pcb_temp = (adc3_dma_buffer[3]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[3], pcb_temp)/4096)*3.3;
 8002ef6:	4b44      	ldr	r3, [pc, #272]	@ (8003008 <FAN_Drive+0x118>)
 8002ef8:	88db      	ldrh	r3, [r3, #6]
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	461a      	mov	r2, r3
 8002efe:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	da01      	bge.n	8002f0e <FAN_Drive+0x1e>
 8002f0a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002f0e:	131b      	asrs	r3, r3, #12
 8002f10:	461a      	mov	r2, r3
 8002f12:	4b3e      	ldr	r3, [pc, #248]	@ (800300c <FAN_Drive+0x11c>)
 8002f14:	601a      	str	r2, [r3, #0]
		heat_sink_temp = (adc3_dma_buffer[4]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[4], heat_sink_temp)/4096)*3.3;
 8002f16:	4b3c      	ldr	r3, [pc, #240]	@ (8003008 <FAN_Drive+0x118>)
 8002f18:	891b      	ldrh	r3, [r3, #8]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002f22:	fb02 f303 	mul.w	r3, r2, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	da01      	bge.n	8002f2e <FAN_Drive+0x3e>
 8002f2a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002f2e:	131b      	asrs	r3, r3, #12
 8002f30:	461a      	mov	r2, r3
 8002f32:	4b37      	ldr	r3, [pc, #220]	@ (8003010 <FAN_Drive+0x120>)
 8002f34:	601a      	str	r2, [r3, #0]

		uint32_t temperature = 20;
 8002f36:	2314      	movs	r3, #20
 8002f38:	603b      	str	r3, [r7, #0]

		pcb_temp = (pcb_temp-400)/20;
 8002f3a:	4b34      	ldr	r3, [pc, #208]	@ (800300c <FAN_Drive+0x11c>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002f42:	4a34      	ldr	r2, [pc, #208]	@ (8003014 <FAN_Drive+0x124>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	4a30      	ldr	r2, [pc, #192]	@ (800300c <FAN_Drive+0x11c>)
 8002f4c:	6013      	str	r3, [r2, #0]
		heat_sink_temp = (heat_sink_temp-500)/10;
 8002f4e:	4b30      	ldr	r3, [pc, #192]	@ (8003010 <FAN_Drive+0x120>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002f56:	4a2f      	ldr	r2, [pc, #188]	@ (8003014 <FAN_Drive+0x124>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	08db      	lsrs	r3, r3, #3
 8002f5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003010 <FAN_Drive+0x120>)
 8002f60:	6013      	str	r3, [r2, #0]
		// Choose the higher of the two temperatures
		temperature = (pcb_temp > heat_sink_temp) ? pcb_temp : heat_sink_temp;
 8002f62:	4b2b      	ldr	r3, [pc, #172]	@ (8003010 <FAN_Drive+0x120>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4b29      	ldr	r3, [pc, #164]	@ (800300c <FAN_Drive+0x11c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	bf38      	it	cc
 8002f6e:	4613      	movcc	r3, r2
 8002f70:	603b      	str	r3, [r7, #0]
		// Apply a non-linear (exponential) scaling for the fan speed
		// This scales the temperature to a value between 0 and 1, then applies an exponential curve
		uint32_t normalized_temp = ((temperature - 20) *100)/ 80;  // Normalizing between 0 (20°C) and 1000 (100°C)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2264      	movs	r2, #100	@ 0x64
 8002f76:	fb02 f303 	mul.w	r3, r2, r3
 8002f7a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8002f7e:	4a25      	ldr	r2, [pc, #148]	@ (8003014 <FAN_Drive+0x124>)
 8002f80:	fba2 2303 	umull	r2, r3, r2, r3
 8002f84:	099b      	lsrs	r3, r3, #6
 8002f86:	607b      	str	r3, [r7, #4]
		if (normalized_temp > 100) normalized_temp = 100;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b64      	cmp	r3, #100	@ 0x64
 8002f8c:	d901      	bls.n	8002f92 <FAN_Drive+0xa2>
 8002f8e:	2364      	movs	r3, #100	@ 0x64
 8002f90:	607b      	str	r3, [r7, #4]
		if (normalized_temp < 0) normalized_temp = 0;

		duty_cycle = 20 + ((int)(pow(normalized_temp, 3) * 79))/1000000;  // Cubic curve for fan speed control
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fd fade 	bl	8000554 <__aeabi_ui2d>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8002ff8 <FAN_Drive+0x108>
 8002fa0:	ec43 2b10 	vmov	d0, r2, r3
 8002fa4:	f012 fb84 	bl	80156b0 <pow>
 8002fa8:	ec51 0b10 	vmov	r0, r1, d0
 8002fac:	a314      	add	r3, pc, #80	@ (adr r3, 8003000 <FAN_Drive+0x110>)
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f7fd fb49 	bl	8000648 <__aeabi_dmul>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4610      	mov	r0, r2
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f7fd fdf3 	bl	8000ba8 <__aeabi_d2iz>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	4a14      	ldr	r2, [pc, #80]	@ (8003018 <FAN_Drive+0x128>)
 8002fc6:	fb82 1203 	smull	r1, r2, r2, r3
 8002fca:	1492      	asrs	r2, r2, #18
 8002fcc:	17db      	asrs	r3, r3, #31
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	3314      	adds	r3, #20
 8002fd2:	4a12      	ldr	r2, [pc, #72]	@ (800301c <FAN_Drive+0x12c>)
 8002fd4:	6013      	str	r3, [r2, #0]

		// Enforce minimum and maximum duty cycles
		if (temperature < 20) {
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b13      	cmp	r3, #19
 8002fda:	d803      	bhi.n	8002fe4 <FAN_Drive+0xf4>
		        duty_cycle = 20;
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800301c <FAN_Drive+0x12c>)
 8002fde:	2214      	movs	r2, #20
 8002fe0:	601a      	str	r2, [r3, #0]
		    	duty_cycle = 99;
		}

		//Set_PWM_DutyCycle(duty_cycle);

}
 8002fe2:	e005      	b.n	8002ff0 <FAN_Drive+0x100>
		} else if (temperature > 100) {
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b64      	cmp	r3, #100	@ 0x64
 8002fe8:	d902      	bls.n	8002ff0 <FAN_Drive+0x100>
		    	duty_cycle = 99;
 8002fea:	4b0c      	ldr	r3, [pc, #48]	@ (800301c <FAN_Drive+0x12c>)
 8002fec:	2263      	movs	r2, #99	@ 0x63
 8002fee:	601a      	str	r2, [r3, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	00000000 	.word	0x00000000
 8002ffc:	40080000 	.word	0x40080000
 8003000:	00000000 	.word	0x00000000
 8003004:	4053c000 	.word	0x4053c000
 8003008:	20000a48 	.word	0x20000a48
 800300c:	20000a40 	.word	0x20000a40
 8003010:	20000a44 	.word	0x20000a44
 8003014:	cccccccd 	.word	0xcccccccd
 8003018:	431bde83 	.word	0x431bde83
 800301c:	2000001c 	.word	0x2000001c

08003020 <SendUSBMessage>:



void SendUSBMessage(const char* message) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f7fd f949 	bl	80002c0 <strlen>
 800302e:	4603      	mov	r3, r0
 8003030:	81fb      	strh	r3, [r7, #14]
    if (len > 127) len = 127;  // Limit to buffer size
 8003032:	89fb      	ldrh	r3, [r7, #14]
 8003034:	2b7f      	cmp	r3, #127	@ 0x7f
 8003036:	d901      	bls.n	800303c <SendUSBMessage+0x1c>
 8003038:	237f      	movs	r3, #127	@ 0x7f
 800303a:	81fb      	strh	r3, [r7, #14]
    memcpy(USB_TX_Buffer, message, len);
 800303c:	89fb      	ldrh	r3, [r7, #14]
 800303e:	461a      	mov	r2, r3
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	480b      	ldr	r0, [pc, #44]	@ (8003070 <SendUSBMessage+0x50>)
 8003044:	f00e fbb9 	bl	80117ba <memcpy>
    USB_TX_Buffer[len] = '\0';  // Ensure null-terminated string
 8003048:	89fb      	ldrh	r3, [r7, #14]
 800304a:	4a09      	ldr	r2, [pc, #36]	@ (8003070 <SendUSBMessage+0x50>)
 800304c:	2100      	movs	r1, #0
 800304e:	54d1      	strb	r1, [r2, r3]
            break;
        }
      // HAL_Delay(10);  // Small delay before retrying
    } while (retry_count-- > 0);*/
    do {
            result = CDC_Transmit_FS((uint8_t*)message, len);
 8003050:	89fb      	ldrh	r3, [r7, #14]
 8003052:	4619      	mov	r1, r3
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f00c ff15 	bl	800fe84 <CDC_Transmit_FS>
 800305a:	4603      	mov	r3, r0
 800305c:	737b      	strb	r3, [r7, #13]
        } while (result == USBD_BUSY); // Retry while USB is busy
 800305e:	7b7b      	ldrb	r3, [r7, #13]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d0f5      	beq.n	8003050 <SendUSBMessage+0x30>


}
 8003064:	bf00      	nop
 8003066:	bf00      	nop
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	20000ac8 	.word	0x20000ac8

08003074 <ParseUSBCommand>:

void ParseUSBCommand(void) {
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
	 if (dataReceivedFlag) {
 8003078:	4ba6      	ldr	r3, [pc, #664]	@ (8003314 <ParseUSBCommand+0x2a0>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8146 	beq.w	8003310 <ParseUSBCommand+0x29c>
	        if (strncmp((char*)USB_RX_Buffer, "SET_KP", 6) == 0) {
 8003084:	2206      	movs	r2, #6
 8003086:	49a4      	ldr	r1, [pc, #656]	@ (8003318 <ParseUSBCommand+0x2a4>)
 8003088:	48a4      	ldr	r0, [pc, #656]	@ (800331c <ParseUSBCommand+0x2a8>)
 800308a:	f00e fb0c 	bl	80116a6 <strncmp>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d108      	bne.n	80030a6 <ParseUSBCommand+0x32>
	            sscanf((char*)USB_RX_Buffer, "SET_KP %f", &Kp);
 8003094:	4aa2      	ldr	r2, [pc, #648]	@ (8003320 <ParseUSBCommand+0x2ac>)
 8003096:	49a3      	ldr	r1, [pc, #652]	@ (8003324 <ParseUSBCommand+0x2b0>)
 8003098:	48a0      	ldr	r0, [pc, #640]	@ (800331c <ParseUSBCommand+0x2a8>)
 800309a:	f00e fa8d 	bl	80115b8 <siscanf>
	            SendUSBMessage("KP Updated\n");
 800309e:	48a2      	ldr	r0, [pc, #648]	@ (8003328 <ParseUSBCommand+0x2b4>)
 80030a0:	f7ff ffbe 	bl	8003020 <SendUSBMessage>
 80030a4:	e12c      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_Ti", 6) == 0) {
 80030a6:	2206      	movs	r2, #6
 80030a8:	49a0      	ldr	r1, [pc, #640]	@ (800332c <ParseUSBCommand+0x2b8>)
 80030aa:	489c      	ldr	r0, [pc, #624]	@ (800331c <ParseUSBCommand+0x2a8>)
 80030ac:	f00e fafb 	bl	80116a6 <strncmp>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d108      	bne.n	80030c8 <ParseUSBCommand+0x54>
	            sscanf((char*)USB_RX_Buffer, "SET_Ti %f", &Ti);
 80030b6:	4a9e      	ldr	r2, [pc, #632]	@ (8003330 <ParseUSBCommand+0x2bc>)
 80030b8:	499e      	ldr	r1, [pc, #632]	@ (8003334 <ParseUSBCommand+0x2c0>)
 80030ba:	4898      	ldr	r0, [pc, #608]	@ (800331c <ParseUSBCommand+0x2a8>)
 80030bc:	f00e fa7c 	bl	80115b8 <siscanf>
	            SendUSBMessage("Ti Updated\n");
 80030c0:	489d      	ldr	r0, [pc, #628]	@ (8003338 <ParseUSBCommand+0x2c4>)
 80030c2:	f7ff ffad 	bl	8003020 <SendUSBMessage>
 80030c6:	e11b      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_VREF", 8) == 0) {
 80030c8:	2208      	movs	r2, #8
 80030ca:	499c      	ldr	r1, [pc, #624]	@ (800333c <ParseUSBCommand+0x2c8>)
 80030cc:	4893      	ldr	r0, [pc, #588]	@ (800331c <ParseUSBCommand+0x2a8>)
 80030ce:	f00e faea 	bl	80116a6 <strncmp>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d108      	bne.n	80030ea <ParseUSBCommand+0x76>
	            sscanf((char*)USB_RX_Buffer, "SET_VREF %hu", &vref);
 80030d8:	4a99      	ldr	r2, [pc, #612]	@ (8003340 <ParseUSBCommand+0x2cc>)
 80030da:	499a      	ldr	r1, [pc, #616]	@ (8003344 <ParseUSBCommand+0x2d0>)
 80030dc:	488f      	ldr	r0, [pc, #572]	@ (800331c <ParseUSBCommand+0x2a8>)
 80030de:	f00e fa6b 	bl	80115b8 <siscanf>
	            SendUSBMessage("vref Updated\n");
 80030e2:	4899      	ldr	r0, [pc, #612]	@ (8003348 <ParseUSBCommand+0x2d4>)
 80030e4:	f7ff ff9c 	bl	8003020 <SendUSBMessage>
 80030e8:	e10a      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS1_VREF", 12) == 0) {
 80030ea:	220c      	movs	r2, #12
 80030ec:	4997      	ldr	r1, [pc, #604]	@ (800334c <ParseUSBCommand+0x2d8>)
 80030ee:	488b      	ldr	r0, [pc, #556]	@ (800331c <ParseUSBCommand+0x2a8>)
 80030f0:	f00e fad9 	bl	80116a6 <strncmp>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d108      	bne.n	800310c <ParseUSBCommand+0x98>
	            sscanf((char*)USB_RX_Buffer, "SET_CS1_VREF %d", &current_sensor1_vref);
 80030fa:	4a95      	ldr	r2, [pc, #596]	@ (8003350 <ParseUSBCommand+0x2dc>)
 80030fc:	4995      	ldr	r1, [pc, #596]	@ (8003354 <ParseUSBCommand+0x2e0>)
 80030fe:	4887      	ldr	r0, [pc, #540]	@ (800331c <ParseUSBCommand+0x2a8>)
 8003100:	f00e fa5a 	bl	80115b8 <siscanf>
	            SendUSBMessage("current_sensor1_vref Updated\n");
 8003104:	4894      	ldr	r0, [pc, #592]	@ (8003358 <ParseUSBCommand+0x2e4>)
 8003106:	f7ff ff8b 	bl	8003020 <SendUSBMessage>
 800310a:	e0f9      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS2_VREF", 12) == 0) {
 800310c:	220c      	movs	r2, #12
 800310e:	4993      	ldr	r1, [pc, #588]	@ (800335c <ParseUSBCommand+0x2e8>)
 8003110:	4882      	ldr	r0, [pc, #520]	@ (800331c <ParseUSBCommand+0x2a8>)
 8003112:	f00e fac8 	bl	80116a6 <strncmp>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d108      	bne.n	800312e <ParseUSBCommand+0xba>
	            sscanf((char*)USB_RX_Buffer, "SET_CS2_VREF %d", &current_sensor2_vref);
 800311c:	4a90      	ldr	r2, [pc, #576]	@ (8003360 <ParseUSBCommand+0x2ec>)
 800311e:	4991      	ldr	r1, [pc, #580]	@ (8003364 <ParseUSBCommand+0x2f0>)
 8003120:	487e      	ldr	r0, [pc, #504]	@ (800331c <ParseUSBCommand+0x2a8>)
 8003122:	f00e fa49 	bl	80115b8 <siscanf>
	            SendUSBMessage("current_sensor2_vref Updated\n");
 8003126:	4890      	ldr	r0, [pc, #576]	@ (8003368 <ParseUSBCommand+0x2f4>)
 8003128:	f7ff ff7a 	bl	8003020 <SendUSBMessage>
 800312c:	e0e8      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_IMAX2_SUM", 13) == 0) {
 800312e:	220d      	movs	r2, #13
 8003130:	498e      	ldr	r1, [pc, #568]	@ (800336c <ParseUSBCommand+0x2f8>)
 8003132:	487a      	ldr	r0, [pc, #488]	@ (800331c <ParseUSBCommand+0x2a8>)
 8003134:	f00e fab7 	bl	80116a6 <strncmp>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d108      	bne.n	8003150 <ParseUSBCommand+0xdc>
	            sscanf((char*)USB_RX_Buffer, "SET_IMAX2_SUM %d", &imax2_sum);
 800313e:	4a8c      	ldr	r2, [pc, #560]	@ (8003370 <ParseUSBCommand+0x2fc>)
 8003140:	498c      	ldr	r1, [pc, #560]	@ (8003374 <ParseUSBCommand+0x300>)
 8003142:	4876      	ldr	r0, [pc, #472]	@ (800331c <ParseUSBCommand+0x2a8>)
 8003144:	f00e fa38 	bl	80115b8 <siscanf>
	            SendUSBMessage("imax2_sum Updated\n");
 8003148:	488b      	ldr	r0, [pc, #556]	@ (8003378 <ParseUSBCommand+0x304>)
 800314a:	f7ff ff69 	bl	8003020 <SendUSBMessage>
 800314e:	e0d7      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_TR", 12) == 0) {
 8003150:	220c      	movs	r2, #12
 8003152:	498a      	ldr	r1, [pc, #552]	@ (800337c <ParseUSBCommand+0x308>)
 8003154:	4871      	ldr	r0, [pc, #452]	@ (800331c <ParseUSBCommand+0x2a8>)
 8003156:	f00e faa6 	bl	80116a6 <strncmp>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d108      	bne.n	8003172 <ParseUSBCommand+0xfe>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_TR %f", &delay_tr);
 8003160:	4a87      	ldr	r2, [pc, #540]	@ (8003380 <ParseUSBCommand+0x30c>)
 8003162:	4988      	ldr	r1, [pc, #544]	@ (8003384 <ParseUSBCommand+0x310>)
 8003164:	486d      	ldr	r0, [pc, #436]	@ (800331c <ParseUSBCommand+0x2a8>)
 8003166:	f00e fa27 	bl	80115b8 <siscanf>
	            SendUSBMessage("delay_tr Updated\n");
 800316a:	4887      	ldr	r0, [pc, #540]	@ (8003388 <ParseUSBCommand+0x314>)
 800316c:	f7ff ff58 	bl	8003020 <SendUSBMessage>
 8003170:	e0c6      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_HC", 12) == 0) {
 8003172:	220c      	movs	r2, #12
 8003174:	4985      	ldr	r1, [pc, #532]	@ (800338c <ParseUSBCommand+0x318>)
 8003176:	4869      	ldr	r0, [pc, #420]	@ (800331c <ParseUSBCommand+0x2a8>)
 8003178:	f00e fa95 	bl	80116a6 <strncmp>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d108      	bne.n	8003194 <ParseUSBCommand+0x120>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_HC %f", &delay_hc);
 8003182:	4a83      	ldr	r2, [pc, #524]	@ (8003390 <ParseUSBCommand+0x31c>)
 8003184:	4983      	ldr	r1, [pc, #524]	@ (8003394 <ParseUSBCommand+0x320>)
 8003186:	4865      	ldr	r0, [pc, #404]	@ (800331c <ParseUSBCommand+0x2a8>)
 8003188:	f00e fa16 	bl	80115b8 <siscanf>
	            SendUSBMessage("delay_hc Updated\n");
 800318c:	4882      	ldr	r0, [pc, #520]	@ (8003398 <ParseUSBCommand+0x324>)
 800318e:	f7ff ff47 	bl	8003020 <SendUSBMessage>
 8003192:	e0b5      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_KP", 6) == 0) {
 8003194:	2206      	movs	r2, #6
 8003196:	4981      	ldr	r1, [pc, #516]	@ (800339c <ParseUSBCommand+0x328>)
 8003198:	4860      	ldr	r0, [pc, #384]	@ (800331c <ParseUSBCommand+0x2a8>)
 800319a:	f00e fa84 	bl	80116a6 <strncmp>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10e      	bne.n	80031c2 <ParseUSBCommand+0x14e>
	            sprintf((char*)USB_TX_Buffer, "KP = %f\n", Kp);
 80031a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003320 <ParseUSBCommand+0x2ac>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd f9f5 	bl	8000598 <__aeabi_f2d>
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	497b      	ldr	r1, [pc, #492]	@ (80033a0 <ParseUSBCommand+0x32c>)
 80031b4:	487b      	ldr	r0, [pc, #492]	@ (80033a4 <ParseUSBCommand+0x330>)
 80031b6:	f00e f9df 	bl	8011578 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80031ba:	487a      	ldr	r0, [pc, #488]	@ (80033a4 <ParseUSBCommand+0x330>)
 80031bc:	f7ff ff30 	bl	8003020 <SendUSBMessage>
 80031c0:	e09e      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_Ti", 6) == 0) {
 80031c2:	2206      	movs	r2, #6
 80031c4:	4978      	ldr	r1, [pc, #480]	@ (80033a8 <ParseUSBCommand+0x334>)
 80031c6:	4855      	ldr	r0, [pc, #340]	@ (800331c <ParseUSBCommand+0x2a8>)
 80031c8:	f00e fa6d 	bl	80116a6 <strncmp>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10e      	bne.n	80031f0 <ParseUSBCommand+0x17c>
	            sprintf((char*)USB_TX_Buffer, "Ti = %f\n", Ti);
 80031d2:	4b57      	ldr	r3, [pc, #348]	@ (8003330 <ParseUSBCommand+0x2bc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd f9de 	bl	8000598 <__aeabi_f2d>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4972      	ldr	r1, [pc, #456]	@ (80033ac <ParseUSBCommand+0x338>)
 80031e2:	4870      	ldr	r0, [pc, #448]	@ (80033a4 <ParseUSBCommand+0x330>)
 80031e4:	f00e f9c8 	bl	8011578 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80031e8:	486e      	ldr	r0, [pc, #440]	@ (80033a4 <ParseUSBCommand+0x330>)
 80031ea:	f7ff ff19 	bl	8003020 <SendUSBMessage>
 80031ee:	e087      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_VREF", 8) == 0) {
 80031f0:	2208      	movs	r2, #8
 80031f2:	496f      	ldr	r1, [pc, #444]	@ (80033b0 <ParseUSBCommand+0x33c>)
 80031f4:	4849      	ldr	r0, [pc, #292]	@ (800331c <ParseUSBCommand+0x2a8>)
 80031f6:	f00e fa56 	bl	80116a6 <strncmp>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d10a      	bne.n	8003216 <ParseUSBCommand+0x1a2>
	            sprintf((char*)USB_TX_Buffer, "vref = %hu\n", vref);
 8003200:	4b4f      	ldr	r3, [pc, #316]	@ (8003340 <ParseUSBCommand+0x2cc>)
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	496b      	ldr	r1, [pc, #428]	@ (80033b4 <ParseUSBCommand+0x340>)
 8003208:	4866      	ldr	r0, [pc, #408]	@ (80033a4 <ParseUSBCommand+0x330>)
 800320a:	f00e f9b5 	bl	8011578 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800320e:	4865      	ldr	r0, [pc, #404]	@ (80033a4 <ParseUSBCommand+0x330>)
 8003210:	f7ff ff06 	bl	8003020 <SendUSBMessage>
 8003214:	e074      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS1_VREF", 12) == 0) {
 8003216:	220c      	movs	r2, #12
 8003218:	4967      	ldr	r1, [pc, #412]	@ (80033b8 <ParseUSBCommand+0x344>)
 800321a:	4840      	ldr	r0, [pc, #256]	@ (800331c <ParseUSBCommand+0x2a8>)
 800321c:	f00e fa43 	bl	80116a6 <strncmp>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10a      	bne.n	800323c <ParseUSBCommand+0x1c8>
	            sprintf((char*)USB_TX_Buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 8003226:	4b4a      	ldr	r3, [pc, #296]	@ (8003350 <ParseUSBCommand+0x2dc>)
 8003228:	881b      	ldrh	r3, [r3, #0]
 800322a:	461a      	mov	r2, r3
 800322c:	4963      	ldr	r1, [pc, #396]	@ (80033bc <ParseUSBCommand+0x348>)
 800322e:	485d      	ldr	r0, [pc, #372]	@ (80033a4 <ParseUSBCommand+0x330>)
 8003230:	f00e f9a2 	bl	8011578 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003234:	485b      	ldr	r0, [pc, #364]	@ (80033a4 <ParseUSBCommand+0x330>)
 8003236:	f7ff fef3 	bl	8003020 <SendUSBMessage>
 800323a:	e061      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS2_VREF", 12) == 0) {
 800323c:	220c      	movs	r2, #12
 800323e:	4960      	ldr	r1, [pc, #384]	@ (80033c0 <ParseUSBCommand+0x34c>)
 8003240:	4836      	ldr	r0, [pc, #216]	@ (800331c <ParseUSBCommand+0x2a8>)
 8003242:	f00e fa30 	bl	80116a6 <strncmp>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <ParseUSBCommand+0x1ee>
	            sprintf((char*)USB_TX_Buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 800324c:	4b44      	ldr	r3, [pc, #272]	@ (8003360 <ParseUSBCommand+0x2ec>)
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	495c      	ldr	r1, [pc, #368]	@ (80033c4 <ParseUSBCommand+0x350>)
 8003254:	4853      	ldr	r0, [pc, #332]	@ (80033a4 <ParseUSBCommand+0x330>)
 8003256:	f00e f98f 	bl	8011578 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800325a:	4852      	ldr	r0, [pc, #328]	@ (80033a4 <ParseUSBCommand+0x330>)
 800325c:	f7ff fee0 	bl	8003020 <SendUSBMessage>
 8003260:	e04e      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_IMAX2_SUM", 13) == 0) {
 8003262:	220d      	movs	r2, #13
 8003264:	4958      	ldr	r1, [pc, #352]	@ (80033c8 <ParseUSBCommand+0x354>)
 8003266:	482d      	ldr	r0, [pc, #180]	@ (800331c <ParseUSBCommand+0x2a8>)
 8003268:	f00e fa1d 	bl	80116a6 <strncmp>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <ParseUSBCommand+0x214>
	            sprintf((char*)USB_TX_Buffer, "imax2_sum = %f\n", imax2_sum);
 8003272:	4b3f      	ldr	r3, [pc, #252]	@ (8003370 <ParseUSBCommand+0x2fc>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	4954      	ldr	r1, [pc, #336]	@ (80033cc <ParseUSBCommand+0x358>)
 800327a:	484a      	ldr	r0, [pc, #296]	@ (80033a4 <ParseUSBCommand+0x330>)
 800327c:	f00e f97c 	bl	8011578 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003280:	4848      	ldr	r0, [pc, #288]	@ (80033a4 <ParseUSBCommand+0x330>)
 8003282:	f7ff fecd 	bl	8003020 <SendUSBMessage>
 8003286:	e03b      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_TR", 12) == 0) {
 8003288:	220c      	movs	r2, #12
 800328a:	4951      	ldr	r1, [pc, #324]	@ (80033d0 <ParseUSBCommand+0x35c>)
 800328c:	4823      	ldr	r0, [pc, #140]	@ (800331c <ParseUSBCommand+0x2a8>)
 800328e:	f00e fa0a 	bl	80116a6 <strncmp>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10e      	bne.n	80032b6 <ParseUSBCommand+0x242>
	            sprintf((char*)USB_TX_Buffer, "delay_tr = %f\n", delay_tr);
 8003298:	4b39      	ldr	r3, [pc, #228]	@ (8003380 <ParseUSBCommand+0x30c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f97b 	bl	8000598 <__aeabi_f2d>
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	494b      	ldr	r1, [pc, #300]	@ (80033d4 <ParseUSBCommand+0x360>)
 80032a8:	483e      	ldr	r0, [pc, #248]	@ (80033a4 <ParseUSBCommand+0x330>)
 80032aa:	f00e f965 	bl	8011578 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80032ae:	483d      	ldr	r0, [pc, #244]	@ (80033a4 <ParseUSBCommand+0x330>)
 80032b0:	f7ff feb6 	bl	8003020 <SendUSBMessage>
 80032b4:	e024      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_HC", 12) == 0) {
 80032b6:	220c      	movs	r2, #12
 80032b8:	4947      	ldr	r1, [pc, #284]	@ (80033d8 <ParseUSBCommand+0x364>)
 80032ba:	4818      	ldr	r0, [pc, #96]	@ (800331c <ParseUSBCommand+0x2a8>)
 80032bc:	f00e f9f3 	bl	80116a6 <strncmp>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10e      	bne.n	80032e4 <ParseUSBCommand+0x270>
	            sprintf((char*)USB_TX_Buffer, "delay_hc = %f\n", delay_hc);
 80032c6:	4b32      	ldr	r3, [pc, #200]	@ (8003390 <ParseUSBCommand+0x31c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7fd f964 	bl	8000598 <__aeabi_f2d>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4941      	ldr	r1, [pc, #260]	@ (80033dc <ParseUSBCommand+0x368>)
 80032d6:	4833      	ldr	r0, [pc, #204]	@ (80033a4 <ParseUSBCommand+0x330>)
 80032d8:	f00e f94e 	bl	8011578 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80032dc:	4831      	ldr	r0, [pc, #196]	@ (80033a4 <ParseUSBCommand+0x330>)
 80032de:	f7ff fe9f 	bl	8003020 <SendUSBMessage>
 80032e2:	e00d      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "DISPLAY_ALL", 11) == 0) {
 80032e4:	220b      	movs	r2, #11
 80032e6:	493e      	ldr	r1, [pc, #248]	@ (80033e0 <ParseUSBCommand+0x36c>)
 80032e8:	480c      	ldr	r0, [pc, #48]	@ (800331c <ParseUSBCommand+0x2a8>)
 80032ea:	f00e f9dc 	bl	80116a6 <strncmp>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d102      	bne.n	80032fa <ParseUSBCommand+0x286>
	            DisplayAllVariables();
 80032f4:	f000 f878 	bl	80033e8 <DisplayAllVariables>
 80032f8:	e002      	b.n	8003300 <ParseUSBCommand+0x28c>

	        } else {
	            SendUSBMessage("Unknown Command\n");
 80032fa:	483a      	ldr	r0, [pc, #232]	@ (80033e4 <ParseUSBCommand+0x370>)
 80032fc:	f7ff fe90 	bl	8003020 <SendUSBMessage>
	        }
	        memset(USB_RX_Buffer, 0, sizeof(USB_RX_Buffer));  // Clear buffer
 8003300:	2240      	movs	r2, #64	@ 0x40
 8003302:	2100      	movs	r1, #0
 8003304:	4805      	ldr	r0, [pc, #20]	@ (800331c <ParseUSBCommand+0x2a8>)
 8003306:	f00e f9c6 	bl	8011696 <memset>
	        dataReceivedFlag = 0;
 800330a:	4b02      	ldr	r3, [pc, #8]	@ (8003314 <ParseUSBCommand+0x2a0>)
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
	    }
}
 8003310:	bf00      	nop
 8003312:	bd80      	pop	{r7, pc}
 8003314:	20000b48 	.word	0x20000b48
 8003318:	08016a98 	.word	0x08016a98
 800331c:	20000a88 	.word	0x20000a88
 8003320:	20000008 	.word	0x20000008
 8003324:	08016aa0 	.word	0x08016aa0
 8003328:	08016aac 	.word	0x08016aac
 800332c:	08016ab8 	.word	0x08016ab8
 8003330:	2000000c 	.word	0x2000000c
 8003334:	08016ac0 	.word	0x08016ac0
 8003338:	08016acc 	.word	0x08016acc
 800333c:	08016ad8 	.word	0x08016ad8
 8003340:	20000000 	.word	0x20000000
 8003344:	08016ae4 	.word	0x08016ae4
 8003348:	08016af4 	.word	0x08016af4
 800334c:	08016b04 	.word	0x08016b04
 8003350:	20000a2c 	.word	0x20000a2c
 8003354:	08016b14 	.word	0x08016b14
 8003358:	08016b24 	.word	0x08016b24
 800335c:	08016b44 	.word	0x08016b44
 8003360:	20000a2e 	.word	0x20000a2e
 8003364:	08016b54 	.word	0x08016b54
 8003368:	08016b64 	.word	0x08016b64
 800336c:	08016b84 	.word	0x08016b84
 8003370:	20000a6c 	.word	0x20000a6c
 8003374:	08016b94 	.word	0x08016b94
 8003378:	08016ba8 	.word	0x08016ba8
 800337c:	08016bbc 	.word	0x08016bbc
 8003380:	20000a64 	.word	0x20000a64
 8003384:	08016bcc 	.word	0x08016bcc
 8003388:	08016bdc 	.word	0x08016bdc
 800338c:	08016bf0 	.word	0x08016bf0
 8003390:	20000a68 	.word	0x20000a68
 8003394:	08016c00 	.word	0x08016c00
 8003398:	08016c10 	.word	0x08016c10
 800339c:	08016c24 	.word	0x08016c24
 80033a0:	08016c2c 	.word	0x08016c2c
 80033a4:	20000ac8 	.word	0x20000ac8
 80033a8:	08016c38 	.word	0x08016c38
 80033ac:	08016c40 	.word	0x08016c40
 80033b0:	08016c4c 	.word	0x08016c4c
 80033b4:	08016c58 	.word	0x08016c58
 80033b8:	08016c64 	.word	0x08016c64
 80033bc:	08016c74 	.word	0x08016c74
 80033c0:	08016c90 	.word	0x08016c90
 80033c4:	08016ca0 	.word	0x08016ca0
 80033c8:	08016cbc 	.word	0x08016cbc
 80033cc:	08016ccc 	.word	0x08016ccc
 80033d0:	08016cdc 	.word	0x08016cdc
 80033d4:	08016cec 	.word	0x08016cec
 80033d8:	08016cfc 	.word	0x08016cfc
 80033dc:	08016d0c 	.word	0x08016d0c
 80033e0:	08016d1c 	.word	0x08016d1c
 80033e4:	08016d28 	.word	0x08016d28

080033e8 <DisplayAllVariables>:

void DisplayAllVariables(void) {
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b0a0      	sub	sp, #128	@ 0x80
 80033ec:	af00      	add	r7, sp, #0
    char buffer[128];

    sprintf(buffer, "KP = %f\n", Kp);
 80033ee:	4b5e      	ldr	r3, [pc, #376]	@ (8003568 <DisplayAllVariables+0x180>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fd f8d0 	bl	8000598 <__aeabi_f2d>
 80033f8:	4602      	mov	r2, r0
 80033fa:	460b      	mov	r3, r1
 80033fc:	4638      	mov	r0, r7
 80033fe:	495b      	ldr	r1, [pc, #364]	@ (800356c <DisplayAllVariables+0x184>)
 8003400:	f00e f8ba 	bl	8011578 <siprintf>
        SendUSBMessage(buffer);
 8003404:	463b      	mov	r3, r7
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fe0a 	bl	8003020 <SendUSBMessage>

        sprintf(buffer, "Ti = %f\n", Ti);
 800340c:	4b58      	ldr	r3, [pc, #352]	@ (8003570 <DisplayAllVariables+0x188>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7fd f8c1 	bl	8000598 <__aeabi_f2d>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4638      	mov	r0, r7
 800341c:	4955      	ldr	r1, [pc, #340]	@ (8003574 <DisplayAllVariables+0x18c>)
 800341e:	f00e f8ab 	bl	8011578 <siprintf>
        SendUSBMessage(buffer);
 8003422:	463b      	mov	r3, r7
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff fdfb 	bl	8003020 <SendUSBMessage>

        sprintf(buffer, "vref = %hu\n", vref);
 800342a:	4b53      	ldr	r3, [pc, #332]	@ (8003578 <DisplayAllVariables+0x190>)
 800342c:	881b      	ldrh	r3, [r3, #0]
 800342e:	461a      	mov	r2, r3
 8003430:	463b      	mov	r3, r7
 8003432:	4952      	ldr	r1, [pc, #328]	@ (800357c <DisplayAllVariables+0x194>)
 8003434:	4618      	mov	r0, r3
 8003436:	f00e f89f 	bl	8011578 <siprintf>
        SendUSBMessage(buffer);
 800343a:	463b      	mov	r3, r7
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fdef 	bl	8003020 <SendUSBMessage>

        sprintf(buffer, "imax1 = %f\n", imax1);
 8003442:	4b4f      	ldr	r3, [pc, #316]	@ (8003580 <DisplayAllVariables+0x198>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	463b      	mov	r3, r7
 8003448:	494e      	ldr	r1, [pc, #312]	@ (8003584 <DisplayAllVariables+0x19c>)
 800344a:	4618      	mov	r0, r3
 800344c:	f00e f894 	bl	8011578 <siprintf>
        SendUSBMessage(buffer);
 8003450:	463b      	mov	r3, r7
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fde4 	bl	8003020 <SendUSBMessage>

        sprintf(buffer, "imax2 = %f\n", imax2);
 8003458:	4b4b      	ldr	r3, [pc, #300]	@ (8003588 <DisplayAllVariables+0x1a0>)
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	463b      	mov	r3, r7
 800345e:	494b      	ldr	r1, [pc, #300]	@ (800358c <DisplayAllVariables+0x1a4>)
 8003460:	4618      	mov	r0, r3
 8003462:	f00e f889 	bl	8011578 <siprintf>
        SendUSBMessage(buffer);
 8003466:	463b      	mov	r3, r7
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff fdd9 	bl	8003020 <SendUSBMessage>

        sprintf(buffer, "imin = %f\n", imin);
 800346e:	4b48      	ldr	r3, [pc, #288]	@ (8003590 <DisplayAllVariables+0x1a8>)
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	463b      	mov	r3, r7
 8003474:	4947      	ldr	r1, [pc, #284]	@ (8003594 <DisplayAllVariables+0x1ac>)
 8003476:	4618      	mov	r0, r3
 8003478:	f00e f87e 	bl	8011578 <siprintf>
        SendUSBMessage(buffer);
 800347c:	463b      	mov	r3, r7
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fdce 	bl	8003020 <SendUSBMessage>

        sprintf(buffer, "input_voltage = %f\n", input_voltage);
 8003484:	4b44      	ldr	r3, [pc, #272]	@ (8003598 <DisplayAllVariables+0x1b0>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	463b      	mov	r3, r7
 800348a:	4944      	ldr	r1, [pc, #272]	@ (800359c <DisplayAllVariables+0x1b4>)
 800348c:	4618      	mov	r0, r3
 800348e:	f00e f873 	bl	8011578 <siprintf>
        SendUSBMessage(buffer);
 8003492:	463b      	mov	r3, r7
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff fdc3 	bl	8003020 <SendUSBMessage>

        sprintf(buffer, "output_voltage = %f\n", output_voltage);
 800349a:	4b41      	ldr	r3, [pc, #260]	@ (80035a0 <DisplayAllVariables+0x1b8>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	463b      	mov	r3, r7
 80034a0:	4940      	ldr	r1, [pc, #256]	@ (80035a4 <DisplayAllVariables+0x1bc>)
 80034a2:	4618      	mov	r0, r3
 80034a4:	f00e f868 	bl	8011578 <siprintf>
        SendUSBMessage(buffer);
 80034a8:	463b      	mov	r3, r7
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7ff fdb8 	bl	8003020 <SendUSBMessage>

        sprintf(buffer, "pcb_temp = %f\n", pcb_temp);
 80034b0:	4b3d      	ldr	r3, [pc, #244]	@ (80035a8 <DisplayAllVariables+0x1c0>)
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	463b      	mov	r3, r7
 80034b6:	493d      	ldr	r1, [pc, #244]	@ (80035ac <DisplayAllVariables+0x1c4>)
 80034b8:	4618      	mov	r0, r3
 80034ba:	f00e f85d 	bl	8011578 <siprintf>
        SendUSBMessage(buffer);
 80034be:	463b      	mov	r3, r7
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff fdad 	bl	8003020 <SendUSBMessage>

        sprintf(buffer, "heat_sink_temp = %f\n", heat_sink_temp);
 80034c6:	4b3a      	ldr	r3, [pc, #232]	@ (80035b0 <DisplayAllVariables+0x1c8>)
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	463b      	mov	r3, r7
 80034cc:	4939      	ldr	r1, [pc, #228]	@ (80035b4 <DisplayAllVariables+0x1cc>)
 80034ce:	4618      	mov	r0, r3
 80034d0:	f00e f852 	bl	8011578 <siprintf>
        SendUSBMessage(buffer);
 80034d4:	463b      	mov	r3, r7
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff fda2 	bl	8003020 <SendUSBMessage>

        sprintf(buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 80034dc:	4b36      	ldr	r3, [pc, #216]	@ (80035b8 <DisplayAllVariables+0x1d0>)
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	463b      	mov	r3, r7
 80034e4:	4935      	ldr	r1, [pc, #212]	@ (80035bc <DisplayAllVariables+0x1d4>)
 80034e6:	4618      	mov	r0, r3
 80034e8:	f00e f846 	bl	8011578 <siprintf>
        SendUSBMessage(buffer);
 80034ec:	463b      	mov	r3, r7
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff fd96 	bl	8003020 <SendUSBMessage>

        sprintf(buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 80034f4:	4b32      	ldr	r3, [pc, #200]	@ (80035c0 <DisplayAllVariables+0x1d8>)
 80034f6:	881b      	ldrh	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	463b      	mov	r3, r7
 80034fc:	4931      	ldr	r1, [pc, #196]	@ (80035c4 <DisplayAllVariables+0x1dc>)
 80034fe:	4618      	mov	r0, r3
 8003500:	f00e f83a 	bl	8011578 <siprintf>
        SendUSBMessage(buffer);
 8003504:	463b      	mov	r3, r7
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fd8a 	bl	8003020 <SendUSBMessage>

        sprintf(buffer, "imax2_sum = %f\n", imax2_sum);
 800350c:	4b2e      	ldr	r3, [pc, #184]	@ (80035c8 <DisplayAllVariables+0x1e0>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	463b      	mov	r3, r7
 8003512:	492e      	ldr	r1, [pc, #184]	@ (80035cc <DisplayAllVariables+0x1e4>)
 8003514:	4618      	mov	r0, r3
 8003516:	f00e f82f 	bl	8011578 <siprintf>
        SendUSBMessage(buffer);
 800351a:	463b      	mov	r3, r7
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fd7f 	bl	8003020 <SendUSBMessage>

        sprintf(buffer, "delay_tr = %f\n", delay_tr);
 8003522:	4b2b      	ldr	r3, [pc, #172]	@ (80035d0 <DisplayAllVariables+0x1e8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7fd f836 	bl	8000598 <__aeabi_f2d>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4638      	mov	r0, r7
 8003532:	4928      	ldr	r1, [pc, #160]	@ (80035d4 <DisplayAllVariables+0x1ec>)
 8003534:	f00e f820 	bl	8011578 <siprintf>
        SendUSBMessage(buffer);
 8003538:	463b      	mov	r3, r7
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fd70 	bl	8003020 <SendUSBMessage>

        sprintf(buffer, "delay_hc = %f\n", delay_hc);
 8003540:	4b25      	ldr	r3, [pc, #148]	@ (80035d8 <DisplayAllVariables+0x1f0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7fd f827 	bl	8000598 <__aeabi_f2d>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4638      	mov	r0, r7
 8003550:	4922      	ldr	r1, [pc, #136]	@ (80035dc <DisplayAllVariables+0x1f4>)
 8003552:	f00e f811 	bl	8011578 <siprintf>
        SendUSBMessage(buffer);
 8003556:	463b      	mov	r3, r7
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff fd61 	bl	8003020 <SendUSBMessage>
}
 800355e:	bf00      	nop
 8003560:	3780      	adds	r7, #128	@ 0x80
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000008 	.word	0x20000008
 800356c:	08016c2c 	.word	0x08016c2c
 8003570:	2000000c 	.word	0x2000000c
 8003574:	08016c40 	.word	0x08016c40
 8003578:	20000000 	.word	0x20000000
 800357c:	08016c58 	.word	0x08016c58
 8003580:	20000a30 	.word	0x20000a30
 8003584:	08016d3c 	.word	0x08016d3c
 8003588:	20000a34 	.word	0x20000a34
 800358c:	08016d48 	.word	0x08016d48
 8003590:	20000a38 	.word	0x20000a38
 8003594:	08016d54 	.word	0x08016d54
 8003598:	20000a3c 	.word	0x20000a3c
 800359c:	08016d60 	.word	0x08016d60
 80035a0:	20000a54 	.word	0x20000a54
 80035a4:	08016d74 	.word	0x08016d74
 80035a8:	20000a40 	.word	0x20000a40
 80035ac:	08016d8c 	.word	0x08016d8c
 80035b0:	20000a44 	.word	0x20000a44
 80035b4:	08016d9c 	.word	0x08016d9c
 80035b8:	20000a2c 	.word	0x20000a2c
 80035bc:	08016c74 	.word	0x08016c74
 80035c0:	20000a2e 	.word	0x20000a2e
 80035c4:	08016ca0 	.word	0x08016ca0
 80035c8:	20000a6c 	.word	0x20000a6c
 80035cc:	08016ccc 	.word	0x08016ccc
 80035d0:	20000a64 	.word	0x20000a64
 80035d4:	08016cec 	.word	0x08016cec
 80035d8:	20000a68 	.word	0x20000a68
 80035dc:	08016d0c 	.word	0x08016d0c

080035e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035e4:	b672      	cpsid	i
}
 80035e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <Error_Handler+0x8>

080035ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003630 <HAL_MspInit+0x44>)
 80035f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003630 <HAL_MspInit+0x44>)
 80035f8:	f043 0301 	orr.w	r3, r3, #1
 80035fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80035fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003630 <HAL_MspInit+0x44>)
 8003600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	607b      	str	r3, [r7, #4]
 8003608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800360a:	4b09      	ldr	r3, [pc, #36]	@ (8003630 <HAL_MspInit+0x44>)
 800360c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360e:	4a08      	ldr	r2, [pc, #32]	@ (8003630 <HAL_MspInit+0x44>)
 8003610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003614:	6593      	str	r3, [r2, #88]	@ 0x58
 8003616:	4b06      	ldr	r3, [pc, #24]	@ (8003630 <HAL_MspInit+0x44>)
 8003618:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361e:	603b      	str	r3, [r7, #0]
 8003620:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003622:	f005 f919 	bl	8008858 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003626:	bf00      	nop
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000

08003634 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b0a4      	sub	sp, #144	@ 0x90
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800363c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800364c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003650:	2254      	movs	r2, #84	@ 0x54
 8003652:	2100      	movs	r1, #0
 8003654:	4618      	mov	r0, r3
 8003656:	f00e f81e 	bl	8011696 <memset>
  if(hadc->Instance==ADC1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003662:	d11c      	bne.n	800369e <HAL_ADC_MspInit+0x6a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003664:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003668:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800366a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800366e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003670:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003674:	4618      	mov	r0, r3
 8003676:	f005 fe2d 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003680:	f7ff ffae 	bl	80035e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003684:	4b85      	ldr	r3, [pc, #532]	@ (800389c <HAL_ADC_MspInit+0x268>)
 8003686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003688:	4a84      	ldr	r2, [pc, #528]	@ (800389c <HAL_ADC_MspInit+0x268>)
 800368a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800368e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003690:	4b82      	ldr	r3, [pc, #520]	@ (800389c <HAL_ADC_MspInit+0x268>)
 8003692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 800369c:	e183      	b.n	80039a6 <HAL_ADC_MspInit+0x372>
  else if(hadc->Instance==ADC3)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a7f      	ldr	r2, [pc, #508]	@ (80038a0 <HAL_ADC_MspInit+0x26c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	f040 8087 	bne.w	80037b8 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80036aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80036ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80036b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80036b4:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80036ba:	4618      	mov	r0, r3
 80036bc:	f005 fe0a 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_ADC_MspInit+0x96>
      Error_Handler();
 80036c6:	f7ff ff8b 	bl	80035e0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80036ca:	4b76      	ldr	r3, [pc, #472]	@ (80038a4 <HAL_ADC_MspInit+0x270>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	3301      	adds	r3, #1
 80036d0:	4a74      	ldr	r2, [pc, #464]	@ (80038a4 <HAL_ADC_MspInit+0x270>)
 80036d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80036d4:	4b73      	ldr	r3, [pc, #460]	@ (80038a4 <HAL_ADC_MspInit+0x270>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d10b      	bne.n	80036f4 <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80036dc:	4b6f      	ldr	r3, [pc, #444]	@ (800389c <HAL_ADC_MspInit+0x268>)
 80036de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e0:	4a6e      	ldr	r2, [pc, #440]	@ (800389c <HAL_ADC_MspInit+0x268>)
 80036e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036e8:	4b6c      	ldr	r3, [pc, #432]	@ (800389c <HAL_ADC_MspInit+0x268>)
 80036ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036f0:	623b      	str	r3, [r7, #32]
 80036f2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f4:	4b69      	ldr	r3, [pc, #420]	@ (800389c <HAL_ADC_MspInit+0x268>)
 80036f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036f8:	4a68      	ldr	r2, [pc, #416]	@ (800389c <HAL_ADC_MspInit+0x268>)
 80036fa:	f043 0302 	orr.w	r3, r3, #2
 80036fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003700:	4b66      	ldr	r3, [pc, #408]	@ (800389c <HAL_ADC_MspInit+0x268>)
 8003702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	61fb      	str	r3, [r7, #28]
 800370a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800370c:	4b63      	ldr	r3, [pc, #396]	@ (800389c <HAL_ADC_MspInit+0x268>)
 800370e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003710:	4a62      	ldr	r2, [pc, #392]	@ (800389c <HAL_ADC_MspInit+0x268>)
 8003712:	f043 0310 	orr.w	r3, r3, #16
 8003716:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003718:	4b60      	ldr	r3, [pc, #384]	@ (800389c <HAL_ADC_MspInit+0x268>)
 800371a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS_VREF_1_Pin|HEATSINK_TEMP_Pin;
 8003724:	f242 0302 	movw	r3, #8194	@ 0x2002
 8003728:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800372a:	2303      	movs	r3, #3
 800372c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003730:	2300      	movs	r3, #0
 8003732:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003736:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800373a:	4619      	mov	r1, r3
 800373c:	485a      	ldr	r0, [pc, #360]	@ (80038a8 <HAL_ADC_MspInit+0x274>)
 800373e:	f003 f8e5 	bl	800690c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PCB_TEMP_Pin|CS_VREF_2_Pin|INPUT_V_ADC_Pin;
 8003742:	f44f 530a 	mov.w	r3, #8832	@ 0x2280
 8003746:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003748:	2303      	movs	r3, #3
 800374a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374e:	2300      	movs	r3, #0
 8003750:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003754:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003758:	4619      	mov	r1, r3
 800375a:	4854      	ldr	r0, [pc, #336]	@ (80038ac <HAL_ADC_MspInit+0x278>)
 800375c:	f003 f8d6 	bl	800690c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel1;
 8003760:	4b53      	ldr	r3, [pc, #332]	@ (80038b0 <HAL_ADC_MspInit+0x27c>)
 8003762:	4a54      	ldr	r2, [pc, #336]	@ (80038b4 <HAL_ADC_MspInit+0x280>)
 8003764:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003766:	4b52      	ldr	r3, [pc, #328]	@ (80038b0 <HAL_ADC_MspInit+0x27c>)
 8003768:	2225      	movs	r2, #37	@ 0x25
 800376a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800376c:	4b50      	ldr	r3, [pc, #320]	@ (80038b0 <HAL_ADC_MspInit+0x27c>)
 800376e:	2200      	movs	r2, #0
 8003770:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003772:	4b4f      	ldr	r3, [pc, #316]	@ (80038b0 <HAL_ADC_MspInit+0x27c>)
 8003774:	2200      	movs	r2, #0
 8003776:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003778:	4b4d      	ldr	r3, [pc, #308]	@ (80038b0 <HAL_ADC_MspInit+0x27c>)
 800377a:	2280      	movs	r2, #128	@ 0x80
 800377c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800377e:	4b4c      	ldr	r3, [pc, #304]	@ (80038b0 <HAL_ADC_MspInit+0x27c>)
 8003780:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003784:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003786:	4b4a      	ldr	r3, [pc, #296]	@ (80038b0 <HAL_ADC_MspInit+0x27c>)
 8003788:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800378c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800378e:	4b48      	ldr	r3, [pc, #288]	@ (80038b0 <HAL_ADC_MspInit+0x27c>)
 8003790:	2220      	movs	r2, #32
 8003792:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003794:	4b46      	ldr	r3, [pc, #280]	@ (80038b0 <HAL_ADC_MspInit+0x27c>)
 8003796:	2200      	movs	r2, #0
 8003798:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800379a:	4845      	ldr	r0, [pc, #276]	@ (80038b0 <HAL_ADC_MspInit+0x27c>)
 800379c:	f002 fe44 	bl	8006428 <HAL_DMA_Init>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_ADC_MspInit+0x176>
      Error_Handler();
 80037a6:	f7ff ff1b 	bl	80035e0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a40      	ldr	r2, [pc, #256]	@ (80038b0 <HAL_ADC_MspInit+0x27c>)
 80037ae:	655a      	str	r2, [r3, #84]	@ 0x54
 80037b0:	4a3f      	ldr	r2, [pc, #252]	@ (80038b0 <HAL_ADC_MspInit+0x27c>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80037b6:	e0f6      	b.n	80039a6 <HAL_ADC_MspInit+0x372>
  else if(hadc->Instance==ADC4)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a3e      	ldr	r2, [pc, #248]	@ (80038b8 <HAL_ADC_MspInit+0x284>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	f040 8080 	bne.w	80038c4 <HAL_ADC_MspInit+0x290>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80037c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80037ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80037ce:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037d4:	4618      	mov	r0, r3
 80037d6:	f005 fd7d 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 80037e0:	f7ff fefe 	bl	80035e0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80037e4:	4b2f      	ldr	r3, [pc, #188]	@ (80038a4 <HAL_ADC_MspInit+0x270>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3301      	adds	r3, #1
 80037ea:	4a2e      	ldr	r2, [pc, #184]	@ (80038a4 <HAL_ADC_MspInit+0x270>)
 80037ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80037ee:	4b2d      	ldr	r3, [pc, #180]	@ (80038a4 <HAL_ADC_MspInit+0x270>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d10b      	bne.n	800380e <HAL_ADC_MspInit+0x1da>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80037f6:	4b29      	ldr	r3, [pc, #164]	@ (800389c <HAL_ADC_MspInit+0x268>)
 80037f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fa:	4a28      	ldr	r2, [pc, #160]	@ (800389c <HAL_ADC_MspInit+0x268>)
 80037fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003800:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003802:	4b26      	ldr	r3, [pc, #152]	@ (800389c <HAL_ADC_MspInit+0x268>)
 8003804:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003806:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800380a:	617b      	str	r3, [r7, #20]
 800380c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800380e:	4b23      	ldr	r3, [pc, #140]	@ (800389c <HAL_ADC_MspInit+0x268>)
 8003810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003812:	4a22      	ldr	r2, [pc, #136]	@ (800389c <HAL_ADC_MspInit+0x268>)
 8003814:	f043 0310 	orr.w	r3, r3, #16
 8003818:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800381a:	4b20      	ldr	r3, [pc, #128]	@ (800389c <HAL_ADC_MspInit+0x268>)
 800381c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800381e:	f003 0310 	and.w	r3, r3, #16
 8003822:	613b      	str	r3, [r7, #16]
 8003824:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT_V_ADC_Pin;
 8003826:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800382a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800382c:	2303      	movs	r3, #3
 800382e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(OUTPUT_V_ADC_GPIO_Port, &GPIO_InitStruct);
 8003838:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800383c:	4619      	mov	r1, r3
 800383e:	481b      	ldr	r0, [pc, #108]	@ (80038ac <HAL_ADC_MspInit+0x278>)
 8003840:	f003 f864 	bl	800690c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel2;
 8003844:	4b1d      	ldr	r3, [pc, #116]	@ (80038bc <HAL_ADC_MspInit+0x288>)
 8003846:	4a1e      	ldr	r2, [pc, #120]	@ (80038c0 <HAL_ADC_MspInit+0x28c>)
 8003848:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800384a:	4b1c      	ldr	r3, [pc, #112]	@ (80038bc <HAL_ADC_MspInit+0x288>)
 800384c:	2226      	movs	r2, #38	@ 0x26
 800384e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003850:	4b1a      	ldr	r3, [pc, #104]	@ (80038bc <HAL_ADC_MspInit+0x288>)
 8003852:	2200      	movs	r2, #0
 8003854:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003856:	4b19      	ldr	r3, [pc, #100]	@ (80038bc <HAL_ADC_MspInit+0x288>)
 8003858:	2200      	movs	r2, #0
 800385a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800385c:	4b17      	ldr	r3, [pc, #92]	@ (80038bc <HAL_ADC_MspInit+0x288>)
 800385e:	2280      	movs	r2, #128	@ 0x80
 8003860:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003862:	4b16      	ldr	r3, [pc, #88]	@ (80038bc <HAL_ADC_MspInit+0x288>)
 8003864:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003868:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800386a:	4b14      	ldr	r3, [pc, #80]	@ (80038bc <HAL_ADC_MspInit+0x288>)
 800386c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003870:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8003872:	4b12      	ldr	r3, [pc, #72]	@ (80038bc <HAL_ADC_MspInit+0x288>)
 8003874:	2220      	movs	r2, #32
 8003876:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8003878:	4b10      	ldr	r3, [pc, #64]	@ (80038bc <HAL_ADC_MspInit+0x288>)
 800387a:	2200      	movs	r2, #0
 800387c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800387e:	480f      	ldr	r0, [pc, #60]	@ (80038bc <HAL_ADC_MspInit+0x288>)
 8003880:	f002 fdd2 	bl	8006428 <HAL_DMA_Init>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_ADC_MspInit+0x25a>
      Error_Handler();
 800388a:	f7ff fea9 	bl	80035e0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a0a      	ldr	r2, [pc, #40]	@ (80038bc <HAL_ADC_MspInit+0x288>)
 8003892:	655a      	str	r2, [r3, #84]	@ 0x54
 8003894:	4a09      	ldr	r2, [pc, #36]	@ (80038bc <HAL_ADC_MspInit+0x288>)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800389a:	e084      	b.n	80039a6 <HAL_ADC_MspInit+0x372>
 800389c:	40021000 	.word	0x40021000
 80038a0:	50000400 	.word	0x50000400
 80038a4:	20000b70 	.word	0x20000b70
 80038a8:	48000400 	.word	0x48000400
 80038ac:	48001000 	.word	0x48001000
 80038b0:	20000554 	.word	0x20000554
 80038b4:	40020008 	.word	0x40020008
 80038b8:	50000500 	.word	0x50000500
 80038bc:	200005b4 	.word	0x200005b4
 80038c0:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC5)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a39      	ldr	r2, [pc, #228]	@ (80039b0 <HAL_ADC_MspInit+0x37c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d16b      	bne.n	80039a6 <HAL_ADC_MspInit+0x372>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80038ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80038d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80038d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80038d8:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80038de:	4618      	mov	r0, r3
 80038e0:	f005 fcf8 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_ADC_MspInit+0x2ba>
      Error_Handler();
 80038ea:	f7ff fe79 	bl	80035e0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80038ee:	4b31      	ldr	r3, [pc, #196]	@ (80039b4 <HAL_ADC_MspInit+0x380>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3301      	adds	r3, #1
 80038f4:	4a2f      	ldr	r2, [pc, #188]	@ (80039b4 <HAL_ADC_MspInit+0x380>)
 80038f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80038f8:	4b2e      	ldr	r3, [pc, #184]	@ (80039b4 <HAL_ADC_MspInit+0x380>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d10b      	bne.n	8003918 <HAL_ADC_MspInit+0x2e4>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003900:	4b2d      	ldr	r3, [pc, #180]	@ (80039b8 <HAL_ADC_MspInit+0x384>)
 8003902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003904:	4a2c      	ldr	r2, [pc, #176]	@ (80039b8 <HAL_ADC_MspInit+0x384>)
 8003906:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800390a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800390c:	4b2a      	ldr	r3, [pc, #168]	@ (80039b8 <HAL_ADC_MspInit+0x384>)
 800390e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003910:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003918:	4b27      	ldr	r3, [pc, #156]	@ (80039b8 <HAL_ADC_MspInit+0x384>)
 800391a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391c:	4a26      	ldr	r2, [pc, #152]	@ (80039b8 <HAL_ADC_MspInit+0x384>)
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003924:	4b24      	ldr	r3, [pc, #144]	@ (80039b8 <HAL_ADC_MspInit+0x384>)
 8003926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMAX2_SUM_Pin;
 8003930:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003934:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003936:	2303      	movs	r3, #3
 8003938:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393c:	2300      	movs	r3, #0
 800393e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(IMAX2_SUM_GPIO_Port, &GPIO_InitStruct);
 8003942:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003946:	4619      	mov	r1, r3
 8003948:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800394c:	f002 ffde 	bl	800690c <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel3;
 8003950:	4b1a      	ldr	r3, [pc, #104]	@ (80039bc <HAL_ADC_MspInit+0x388>)
 8003952:	4a1b      	ldr	r2, [pc, #108]	@ (80039c0 <HAL_ADC_MspInit+0x38c>)
 8003954:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003956:	4b19      	ldr	r3, [pc, #100]	@ (80039bc <HAL_ADC_MspInit+0x388>)
 8003958:	2227      	movs	r2, #39	@ 0x27
 800395a:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800395c:	4b17      	ldr	r3, [pc, #92]	@ (80039bc <HAL_ADC_MspInit+0x388>)
 800395e:	2200      	movs	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003962:	4b16      	ldr	r3, [pc, #88]	@ (80039bc <HAL_ADC_MspInit+0x388>)
 8003964:	2200      	movs	r2, #0
 8003966:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003968:	4b14      	ldr	r3, [pc, #80]	@ (80039bc <HAL_ADC_MspInit+0x388>)
 800396a:	2280      	movs	r2, #128	@ 0x80
 800396c:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800396e:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <HAL_ADC_MspInit+0x388>)
 8003970:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003974:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003976:	4b11      	ldr	r3, [pc, #68]	@ (80039bc <HAL_ADC_MspInit+0x388>)
 8003978:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800397c:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 800397e:	4b0f      	ldr	r3, [pc, #60]	@ (80039bc <HAL_ADC_MspInit+0x388>)
 8003980:	2220      	movs	r2, #32
 8003982:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003984:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <HAL_ADC_MspInit+0x388>)
 8003986:	2200      	movs	r2, #0
 8003988:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 800398a:	480c      	ldr	r0, [pc, #48]	@ (80039bc <HAL_ADC_MspInit+0x388>)
 800398c:	f002 fd4c 	bl	8006428 <HAL_DMA_Init>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_ADC_MspInit+0x366>
      Error_Handler();
 8003996:	f7ff fe23 	bl	80035e0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a07      	ldr	r2, [pc, #28]	@ (80039bc <HAL_ADC_MspInit+0x388>)
 800399e:	655a      	str	r2, [r3, #84]	@ 0x54
 80039a0:	4a06      	ldr	r2, [pc, #24]	@ (80039bc <HAL_ADC_MspInit+0x388>)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80039a6:	bf00      	nop
 80039a8:	3790      	adds	r7, #144	@ 0x90
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	50000600 	.word	0x50000600
 80039b4:	20000b70 	.word	0x20000b70
 80039b8:	40021000 	.word	0x40021000
 80039bc:	20000614 	.word	0x20000614
 80039c0:	40020030 	.word	0x40020030

080039c4 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0a      	ldr	r2, [pc, #40]	@ (80039fc <HAL_CORDIC_MspInit+0x38>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d10b      	bne.n	80039ee <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80039d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003a00 <HAL_CORDIC_MspInit+0x3c>)
 80039d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039da:	4a09      	ldr	r2, [pc, #36]	@ (8003a00 <HAL_CORDIC_MspInit+0x3c>)
 80039dc:	f043 0308 	orr.w	r3, r3, #8
 80039e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80039e2:	4b07      	ldr	r3, [pc, #28]	@ (8003a00 <HAL_CORDIC_MspInit+0x3c>)
 80039e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e6:	f003 0308 	and.w	r3, r3, #8
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40020c00 	.word	0x40020c00
 8003a00:	40021000 	.word	0x40021000

08003a04 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08c      	sub	sp, #48	@ 0x30
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a0c:	f107 031c 	add.w	r3, r7, #28
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a5b      	ldr	r2, [pc, #364]	@ (8003b90 <HAL_DAC_MspInit+0x18c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d159      	bne.n	8003ada <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003a26:	4b5b      	ldr	r3, [pc, #364]	@ (8003b94 <HAL_DAC_MspInit+0x190>)
 8003a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2a:	4a5a      	ldr	r2, [pc, #360]	@ (8003b94 <HAL_DAC_MspInit+0x190>)
 8003a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a32:	4b58      	ldr	r3, [pc, #352]	@ (8003b94 <HAL_DAC_MspInit+0x190>)
 8003a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3e:	4b55      	ldr	r3, [pc, #340]	@ (8003b94 <HAL_DAC_MspInit+0x190>)
 8003a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a42:	4a54      	ldr	r2, [pc, #336]	@ (8003b94 <HAL_DAC_MspInit+0x190>)
 8003a44:	f043 0301 	orr.w	r3, r3, #1
 8003a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a4a:	4b52      	ldr	r3, [pc, #328]	@ (8003b94 <HAL_DAC_MspInit+0x190>)
 8003a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = IMAX_Pin|IMAX2_Pin;
 8003a56:	2330      	movs	r3, #48	@ 0x30
 8003a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a62:	f107 031c 	add.w	r3, r7, #28
 8003a66:	4619      	mov	r1, r3
 8003a68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a6c:	f002 ff4e 	bl	800690c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 8003a70:	4b49      	ldr	r3, [pc, #292]	@ (8003b98 <HAL_DAC_MspInit+0x194>)
 8003a72:	4a4a      	ldr	r2, [pc, #296]	@ (8003b9c <HAL_DAC_MspInit+0x198>)
 8003a74:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003a76:	4b48      	ldr	r3, [pc, #288]	@ (8003b98 <HAL_DAC_MspInit+0x194>)
 8003a78:	2206      	movs	r2, #6
 8003a7a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a7c:	4b46      	ldr	r3, [pc, #280]	@ (8003b98 <HAL_DAC_MspInit+0x194>)
 8003a7e:	2210      	movs	r2, #16
 8003a80:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a82:	4b45      	ldr	r3, [pc, #276]	@ (8003b98 <HAL_DAC_MspInit+0x194>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003a88:	4b43      	ldr	r3, [pc, #268]	@ (8003b98 <HAL_DAC_MspInit+0x194>)
 8003a8a:	2280      	movs	r2, #128	@ 0x80
 8003a8c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a8e:	4b42      	ldr	r3, [pc, #264]	@ (8003b98 <HAL_DAC_MspInit+0x194>)
 8003a90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a94:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003a96:	4b40      	ldr	r3, [pc, #256]	@ (8003b98 <HAL_DAC_MspInit+0x194>)
 8003a98:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a9c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003b98 <HAL_DAC_MspInit+0x194>)
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003aa4:	4b3c      	ldr	r3, [pc, #240]	@ (8003b98 <HAL_DAC_MspInit+0x194>)
 8003aa6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003aaa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003aac:	483a      	ldr	r0, [pc, #232]	@ (8003b98 <HAL_DAC_MspInit+0x194>)
 8003aae:	f002 fcbb 	bl	8006428 <HAL_DMA_Init>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8003ab8:	f7ff fd92 	bl	80035e0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a36      	ldr	r2, [pc, #216]	@ (8003b98 <HAL_DAC_MspInit+0x194>)
 8003ac0:	609a      	str	r2, [r3, #8]
 8003ac2:	4a35      	ldr	r2, [pc, #212]	@ (8003b98 <HAL_DAC_MspInit+0x194>)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2100      	movs	r1, #0
 8003acc:	2036      	movs	r0, #54	@ 0x36
 8003ace:	f002 f998 	bl	8005e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ad2:	2036      	movs	r0, #54	@ 0x36
 8003ad4:	f002 f9af 	bl	8005e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8003ad8:	e055      	b.n	8003b86 <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC2)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a30      	ldr	r2, [pc, #192]	@ (8003ba0 <HAL_DAC_MspInit+0x19c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d150      	bne.n	8003b86 <HAL_DAC_MspInit+0x182>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b94 <HAL_DAC_MspInit+0x190>)
 8003ae6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8003b94 <HAL_DAC_MspInit+0x190>)
 8003aea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003af0:	4b28      	ldr	r3, [pc, #160]	@ (8003b94 <HAL_DAC_MspInit+0x190>)
 8003af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003afc:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <HAL_DAC_MspInit+0x190>)
 8003afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b00:	4a24      	ldr	r2, [pc, #144]	@ (8003b94 <HAL_DAC_MspInit+0x190>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b08:	4b22      	ldr	r3, [pc, #136]	@ (8003b94 <HAL_DAC_MspInit+0x190>)
 8003b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMIN_Pin;
 8003b14:	2340      	movs	r3, #64	@ 0x40
 8003b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMIN_GPIO_Port, &GPIO_InitStruct);
 8003b20:	f107 031c 	add.w	r3, r7, #28
 8003b24:	4619      	mov	r1, r3
 8003b26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b2a:	f002 feef 	bl	800690c <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel5;
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba4 <HAL_DAC_MspInit+0x1a0>)
 8003b30:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba8 <HAL_DAC_MspInit+0x1a4>)
 8003b32:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8003b34:	4b1b      	ldr	r3, [pc, #108]	@ (8003ba4 <HAL_DAC_MspInit+0x1a0>)
 8003b36:	2229      	movs	r2, #41	@ 0x29
 8003b38:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ba4 <HAL_DAC_MspInit+0x1a0>)
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b40:	4b18      	ldr	r3, [pc, #96]	@ (8003ba4 <HAL_DAC_MspInit+0x1a0>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003b46:	4b17      	ldr	r3, [pc, #92]	@ (8003ba4 <HAL_DAC_MspInit+0x1a0>)
 8003b48:	2280      	movs	r2, #128	@ 0x80
 8003b4a:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003b4c:	4b15      	ldr	r3, [pc, #84]	@ (8003ba4 <HAL_DAC_MspInit+0x1a0>)
 8003b4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b52:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003b54:	4b13      	ldr	r3, [pc, #76]	@ (8003ba4 <HAL_DAC_MspInit+0x1a0>)
 8003b56:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b5a:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8003b5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ba4 <HAL_DAC_MspInit+0x1a0>)
 8003b5e:	2220      	movs	r2, #32
 8003b60:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003b62:	4b10      	ldr	r3, [pc, #64]	@ (8003ba4 <HAL_DAC_MspInit+0x1a0>)
 8003b64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003b68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8003b6a:	480e      	ldr	r0, [pc, #56]	@ (8003ba4 <HAL_DAC_MspInit+0x1a0>)
 8003b6c:	f002 fc5c 	bl	8006428 <HAL_DMA_Init>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_DAC_MspInit+0x176>
      Error_Handler();
 8003b76:	f7ff fd33 	bl	80035e0 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a09      	ldr	r2, [pc, #36]	@ (8003ba4 <HAL_DAC_MspInit+0x1a0>)
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	4a08      	ldr	r2, [pc, #32]	@ (8003ba4 <HAL_DAC_MspInit+0x1a0>)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003b86:	bf00      	nop
 8003b88:	3730      	adds	r7, #48	@ 0x30
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	50000800 	.word	0x50000800
 8003b94:	40021000 	.word	0x40021000
 8003b98:	200006c4 	.word	0x200006c4
 8003b9c:	40020044 	.word	0x40020044
 8003ba0:	50000c00 	.word	0x50000c00
 8003ba4:	20000724 	.word	0x20000724
 8003ba8:	40020058 	.word	0x40020058

08003bac <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a16      	ldr	r2, [pc, #88]	@ (8003c14 <HAL_TIM_PWM_MspInit+0x68>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d114      	bne.n	8003be8 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bbe:	4b16      	ldr	r3, [pc, #88]	@ (8003c18 <HAL_TIM_PWM_MspInit+0x6c>)
 8003bc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bc2:	4a15      	ldr	r2, [pc, #84]	@ (8003c18 <HAL_TIM_PWM_MspInit+0x6c>)
 8003bc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003bc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bca:	4b13      	ldr	r3, [pc, #76]	@ (8003c18 <HAL_TIM_PWM_MspInit+0x6c>)
 8003bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2100      	movs	r1, #0
 8003bda:	2018      	movs	r0, #24
 8003bdc:	f002 f911 	bl	8005e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003be0:	2018      	movs	r0, #24
 8003be2:	f002 f928 	bl	8005e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003be6:	e010      	b.n	8003c0a <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a0b      	ldr	r2, [pc, #44]	@ (8003c1c <HAL_TIM_PWM_MspInit+0x70>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d10b      	bne.n	8003c0a <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003bf2:	4b09      	ldr	r3, [pc, #36]	@ (8003c18 <HAL_TIM_PWM_MspInit+0x6c>)
 8003bf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bf6:	4a08      	ldr	r2, [pc, #32]	@ (8003c18 <HAL_TIM_PWM_MspInit+0x6c>)
 8003bf8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003bfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8003bfe:	4b06      	ldr	r3, [pc, #24]	@ (8003c18 <HAL_TIM_PWM_MspInit+0x6c>)
 8003c00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]
}
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40012c00 	.word	0x40012c00
 8003c18:	40021000 	.word	0x40021000
 8003c1c:	40013400 	.word	0x40013400

08003c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b088      	sub	sp, #32
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a35      	ldr	r2, [pc, #212]	@ (8003d04 <HAL_TIM_Base_MspInit+0xe4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d10c      	bne.n	8003c4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003c32:	4b35      	ldr	r3, [pc, #212]	@ (8003d08 <HAL_TIM_Base_MspInit+0xe8>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c36:	4a34      	ldr	r2, [pc, #208]	@ (8003d08 <HAL_TIM_Base_MspInit+0xe8>)
 8003c38:	f043 0304 	orr.w	r3, r3, #4
 8003c3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c3e:	4b32      	ldr	r3, [pc, #200]	@ (8003d08 <HAL_TIM_Base_MspInit+0xe8>)
 8003c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	61fb      	str	r3, [r7, #28]
 8003c48:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003c4a:	e056      	b.n	8003cfa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a2e      	ldr	r2, [pc, #184]	@ (8003d0c <HAL_TIM_Base_MspInit+0xec>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d114      	bne.n	8003c80 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003c56:	4b2c      	ldr	r3, [pc, #176]	@ (8003d08 <HAL_TIM_Base_MspInit+0xe8>)
 8003c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c5a:	4a2b      	ldr	r2, [pc, #172]	@ (8003d08 <HAL_TIM_Base_MspInit+0xe8>)
 8003c5c:	f043 0310 	orr.w	r3, r3, #16
 8003c60:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c62:	4b29      	ldr	r3, [pc, #164]	@ (8003d08 <HAL_TIM_Base_MspInit+0xe8>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2100      	movs	r1, #0
 8003c72:	2036      	movs	r0, #54	@ 0x36
 8003c74:	f002 f8c5 	bl	8005e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c78:	2036      	movs	r0, #54	@ 0x36
 8003c7a:	f002 f8dc 	bl	8005e36 <HAL_NVIC_EnableIRQ>
}
 8003c7e:	e03c      	b.n	8003cfa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM7)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a22      	ldr	r2, [pc, #136]	@ (8003d10 <HAL_TIM_Base_MspInit+0xf0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10c      	bne.n	8003ca4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8003d08 <HAL_TIM_Base_MspInit+0xe8>)
 8003c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8003d08 <HAL_TIM_Base_MspInit+0xe8>)
 8003c90:	f043 0320 	orr.w	r3, r3, #32
 8003c94:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c96:	4b1c      	ldr	r3, [pc, #112]	@ (8003d08 <HAL_TIM_Base_MspInit+0xe8>)
 8003c98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]
}
 8003ca2:	e02a      	b.n	8003cfa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM15)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d14 <HAL_TIM_Base_MspInit+0xf4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d114      	bne.n	8003cd8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003cae:	4b16      	ldr	r3, [pc, #88]	@ (8003d08 <HAL_TIM_Base_MspInit+0xe8>)
 8003cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cb2:	4a15      	ldr	r2, [pc, #84]	@ (8003d08 <HAL_TIM_Base_MspInit+0xe8>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cba:	4b13      	ldr	r3, [pc, #76]	@ (8003d08 <HAL_TIM_Base_MspInit+0xe8>)
 8003cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cc2:	613b      	str	r3, [r7, #16]
 8003cc4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2100      	movs	r1, #0
 8003cca:	2018      	movs	r0, #24
 8003ccc:	f002 f899 	bl	8005e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003cd0:	2018      	movs	r0, #24
 8003cd2:	f002 f8b0 	bl	8005e36 <HAL_NVIC_EnableIRQ>
}
 8003cd6:	e010      	b.n	8003cfa <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM16)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a0e      	ldr	r2, [pc, #56]	@ (8003d18 <HAL_TIM_Base_MspInit+0xf8>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10b      	bne.n	8003cfa <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003ce2:	4b09      	ldr	r3, [pc, #36]	@ (8003d08 <HAL_TIM_Base_MspInit+0xe8>)
 8003ce4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ce6:	4a08      	ldr	r2, [pc, #32]	@ (8003d08 <HAL_TIM_Base_MspInit+0xe8>)
 8003ce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cec:	6613      	str	r3, [r2, #96]	@ 0x60
 8003cee:	4b06      	ldr	r3, [pc, #24]	@ (8003d08 <HAL_TIM_Base_MspInit+0xe8>)
 8003cf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
}
 8003cfa:	bf00      	nop
 8003cfc:	3720      	adds	r7, #32
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40000800 	.word	0x40000800
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40001000 	.word	0x40001000
 8003d10:	40001400 	.word	0x40001400
 8003d14:	40014000 	.word	0x40014000
 8003d18:	40014400 	.word	0x40014400

08003d1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b08a      	sub	sp, #40	@ 0x28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d24:	f107 0314 	add.w	r3, r7, #20
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	609a      	str	r2, [r3, #8]
 8003d30:	60da      	str	r2, [r3, #12]
 8003d32:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a33      	ldr	r2, [pc, #204]	@ (8003e08 <HAL_TIM_MspPostInit+0xec>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d11c      	bne.n	8003d78 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d3e:	4b33      	ldr	r3, [pc, #204]	@ (8003e0c <HAL_TIM_MspPostInit+0xf0>)
 8003d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d42:	4a32      	ldr	r2, [pc, #200]	@ (8003e0c <HAL_TIM_MspPostInit+0xf0>)
 8003d44:	f043 0304 	orr.w	r3, r3, #4
 8003d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d4a:	4b30      	ldr	r3, [pc, #192]	@ (8003e0c <HAL_TIM_MspPostInit+0xf0>)
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DEADTIME_TR_Pin;
 8003d56:	2301      	movs	r3, #1
 8003d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d62:	2300      	movs	r3, #0
 8003d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003d66:	2302      	movs	r3, #2
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_TR_GPIO_Port, &GPIO_InitStruct);
 8003d6a:	f107 0314 	add.w	r3, r7, #20
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4827      	ldr	r0, [pc, #156]	@ (8003e10 <HAL_TIM_MspPostInit+0xf4>)
 8003d72:	f002 fdcb 	bl	800690c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8003d76:	e043      	b.n	8003e00 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a25      	ldr	r2, [pc, #148]	@ (8003e14 <HAL_TIM_MspPostInit+0xf8>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d11d      	bne.n	8003dbe <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d82:	4b22      	ldr	r3, [pc, #136]	@ (8003e0c <HAL_TIM_MspPostInit+0xf0>)
 8003d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d86:	4a21      	ldr	r2, [pc, #132]	@ (8003e0c <HAL_TIM_MspPostInit+0xf0>)
 8003d88:	f043 0308 	orr.w	r3, r3, #8
 8003d8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8003e0c <HAL_TIM_MspPostInit+0xf0>)
 8003d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 8003d9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da0:	2302      	movs	r3, #2
 8003da2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003da8:	2300      	movs	r3, #0
 8003daa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003dac:	2302      	movs	r3, #2
 8003dae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8003db0:	f107 0314 	add.w	r3, r7, #20
 8003db4:	4619      	mov	r1, r3
 8003db6:	4818      	ldr	r0, [pc, #96]	@ (8003e18 <HAL_TIM_MspPostInit+0xfc>)
 8003db8:	f002 fda8 	bl	800690c <HAL_GPIO_Init>
}
 8003dbc:	e020      	b.n	8003e00 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a16      	ldr	r2, [pc, #88]	@ (8003e1c <HAL_TIM_MspPostInit+0x100>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d11b      	bne.n	8003e00 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dc8:	4b10      	ldr	r3, [pc, #64]	@ (8003e0c <HAL_TIM_MspPostInit+0xf0>)
 8003dca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dcc:	4a0f      	ldr	r2, [pc, #60]	@ (8003e0c <HAL_TIM_MspPostInit+0xf0>)
 8003dce:	f043 0304 	orr.w	r3, r3, #4
 8003dd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003dd4:	4b0d      	ldr	r3, [pc, #52]	@ (8003e0c <HAL_TIM_MspPostInit+0xf0>)
 8003dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEADTIME_HC_Pin;
 8003de0:	2380      	movs	r3, #128	@ 0x80
 8003de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de4:	2302      	movs	r3, #2
 8003de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dec:	2300      	movs	r3, #0
 8003dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8003df0:	2304      	movs	r3, #4
 8003df2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_HC_GPIO_Port, &GPIO_InitStruct);
 8003df4:	f107 0314 	add.w	r3, r7, #20
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4805      	ldr	r0, [pc, #20]	@ (8003e10 <HAL_TIM_MspPostInit+0xf4>)
 8003dfc:	f002 fd86 	bl	800690c <HAL_GPIO_Init>
}
 8003e00:	bf00      	nop
 8003e02:	3728      	adds	r7, #40	@ 0x28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	40012c00 	.word	0x40012c00
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	48000800 	.word	0x48000800
 8003e14:	40000800 	.word	0x40000800
 8003e18:	48000c00 	.word	0x48000c00
 8003e1c:	40013400 	.word	0x40013400

08003e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b09e      	sub	sp, #120	@ 0x78
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e38:	f107 0310 	add.w	r3, r7, #16
 8003e3c:	2254      	movs	r2, #84	@ 0x54
 8003e3e:	2100      	movs	r1, #0
 8003e40:	4618      	mov	r0, r3
 8003e42:	f00d fc28 	bl	8011696 <memset>
  if(huart->Instance==UART4)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ec8 <HAL_UART_MspInit+0xa8>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d136      	bne.n	8003ebe <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003e50:	2308      	movs	r3, #8
 8003e52:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_HSI;
 8003e54:	2380      	movs	r3, #128	@ 0x80
 8003e56:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e58:	f107 0310 	add.w	r3, r7, #16
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f005 fa39 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003e68:	f7ff fbba 	bl	80035e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003e6c:	4b17      	ldr	r3, [pc, #92]	@ (8003ecc <HAL_UART_MspInit+0xac>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e70:	4a16      	ldr	r2, [pc, #88]	@ (8003ecc <HAL_UART_MspInit+0xac>)
 8003e72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003e76:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e78:	4b14      	ldr	r3, [pc, #80]	@ (8003ecc <HAL_UART_MspInit+0xac>)
 8003e7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e84:	4b11      	ldr	r3, [pc, #68]	@ (8003ecc <HAL_UART_MspInit+0xac>)
 8003e86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e88:	4a10      	ldr	r2, [pc, #64]	@ (8003ecc <HAL_UART_MspInit+0xac>)
 8003e8a:	f043 0304 	orr.w	r3, r3, #4
 8003e8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e90:	4b0e      	ldr	r3, [pc, #56]	@ (8003ecc <HAL_UART_MspInit+0xac>)
 8003e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e9c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003ea0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8003eae:	2305      	movs	r3, #5
 8003eb0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4805      	ldr	r0, [pc, #20]	@ (8003ed0 <HAL_UART_MspInit+0xb0>)
 8003eba:	f002 fd27 	bl	800690c <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8003ebe:	bf00      	nop
 8003ec0:	3778      	adds	r7, #120	@ 0x78
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	40004c00 	.word	0x40004c00
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	48000800 	.word	0x48000800

08003ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ed8:	bf00      	nop
 8003eda:	e7fd      	b.n	8003ed8 <NMI_Handler+0x4>

08003edc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ee0:	bf00      	nop
 8003ee2:	e7fd      	b.n	8003ee0 <HardFault_Handler+0x4>

08003ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ee8:	bf00      	nop
 8003eea:	e7fd      	b.n	8003ee8 <MemManage_Handler+0x4>

08003eec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ef0:	bf00      	nop
 8003ef2:	e7fd      	b.n	8003ef0 <BusFault_Handler+0x4>

08003ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ef8:	bf00      	nop
 8003efa:	e7fd      	b.n	8003ef8 <UsageFault_Handler+0x4>

08003efc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f2a:	f000 f9af 	bl	800428c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f2e:	bf00      	nop
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003f38:	4802      	ldr	r0, [pc, #8]	@ (8003f44 <DMA1_Channel1_IRQHandler+0x10>)
 8003f3a:	f002 fb98 	bl	800666e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000554 	.word	0x20000554

08003f48 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8003f4c:	4802      	ldr	r0, [pc, #8]	@ (8003f58 <DMA1_Channel2_IRQHandler+0x10>)
 8003f4e:	f002 fb8e 	bl	800666e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003f52:	bf00      	nop
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	200005b4 	.word	0x200005b4

08003f5c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 8003f60:	4802      	ldr	r0, [pc, #8]	@ (8003f6c <DMA1_Channel3_IRQHandler+0x10>)
 8003f62:	f002 fb84 	bl	800666e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003f66:	bf00      	nop
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	20000614 	.word	0x20000614

08003f70 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003f74:	4802      	ldr	r0, [pc, #8]	@ (8003f80 <DMA1_Channel4_IRQHandler+0x10>)
 8003f76:	f002 fb7a 	bl	800666e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8003f7a:	bf00      	nop
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	200006c4 	.word	0x200006c4

08003f84 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8003f88:	4802      	ldr	r0, [pc, #8]	@ (8003f94 <DMA1_Channel5_IRQHandler+0x10>)
 8003f8a:	f002 fb70 	bl	800666e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000724 	.word	0x20000724

08003f98 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003f9c:	4802      	ldr	r0, [pc, #8]	@ (8003fa8 <USB_LP_IRQHandler+0x10>)
 8003f9e:	f002 ff71 	bl	8006e84 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20002050 	.word	0x20002050

08003fac <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003fb0:	4803      	ldr	r0, [pc, #12]	@ (8003fc0 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8003fb2:	f005 feb5 	bl	8009d20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8003fb6:	4803      	ldr	r0, [pc, #12]	@ (8003fc4 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8003fb8:	f005 feb2 	bl	8009d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003fbc:	bf00      	nop
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000784 	.word	0x20000784
 8003fc4:	20000900 	.word	0x20000900

08003fc8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
					HEAT_SINK_TEMP = (ADC3_DMA_BUFFER[4]/4096)*3.3;//(Low_pass_filter(ADC3_DMA_BUFFER[4], HEAT_SINK_TEMP)/4096)*3.3;
					FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
					}*/

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003fcc:	4803      	ldr	r0, [pc, #12]	@ (8003fdc <TIM6_DAC_IRQHandler+0x14>)
 8003fce:	f005 fea7 	bl	8009d20 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003fd2:	4803      	ldr	r0, [pc, #12]	@ (8003fe0 <TIM6_DAC_IRQHandler+0x18>)
 8003fd4:	f001 ffd8 	bl	8005f88 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003fd8:	bf00      	nop
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	2000081c 	.word	0x2000081c
 8003fe0:	2000069c 	.word	0x2000069c

08003fe4 <_getpid>:
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	2301      	movs	r3, #1
 8003fea:	4618      	mov	r0, r3
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <_kill>:
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
 8003ffe:	f00d fbaf 	bl	8011760 <__errno>
 8004002:	4603      	mov	r3, r0
 8004004:	2216      	movs	r2, #22
 8004006:	601a      	str	r2, [r3, #0]
 8004008:	f04f 33ff 	mov.w	r3, #4294967295
 800400c:	4618      	mov	r0, r3
 800400e:	3708      	adds	r7, #8
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <_exit>:
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	f04f 31ff 	mov.w	r1, #4294967295
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff ffe7 	bl	8003ff4 <_kill>
 8004026:	bf00      	nop
 8004028:	e7fd      	b.n	8004026 <_exit+0x12>

0800402a <_read>:
 800402a:	b580      	push	{r7, lr}
 800402c:	b086      	sub	sp, #24
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	607a      	str	r2, [r7, #4]
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
 800403a:	e00a      	b.n	8004052 <_read+0x28>
 800403c:	f3af 8000 	nop.w
 8004040:	4601      	mov	r1, r0
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	1c5a      	adds	r2, r3, #1
 8004046:	60ba      	str	r2, [r7, #8]
 8004048:	b2ca      	uxtb	r2, r1
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	3301      	adds	r3, #1
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	697a      	ldr	r2, [r7, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	429a      	cmp	r2, r3
 8004058:	dbf0      	blt.n	800403c <_read+0x12>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <_write>:
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	e009      	b.n	800408a <_write+0x26>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	60ba      	str	r2, [r7, #8]
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	4618      	mov	r0, r3
 8004080:	f3af 8000 	nop.w
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	3301      	adds	r3, #1
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	429a      	cmp	r2, r3
 8004090:	dbf1      	blt.n	8004076 <_write+0x12>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4618      	mov	r0, r3
 8004096:	3718      	adds	r7, #24
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <_close>:
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	f04f 33ff 	mov.w	r3, #4294967295
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <_fstat>:
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040c4:	605a      	str	r2, [r3, #4]
 80040c6:	2300      	movs	r3, #0
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <_isatty>:
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	2301      	movs	r3, #1
 80040de:	4618      	mov	r0, r3
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <_lseek>:
 80040ea:	b480      	push	{r7}
 80040ec:	b085      	sub	sp, #20
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	2300      	movs	r3, #0
 80040f8:	4618      	mov	r0, r3
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <_sbrk>:
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	4a14      	ldr	r2, [pc, #80]	@ (8004160 <_sbrk+0x5c>)
 800410e:	4b15      	ldr	r3, [pc, #84]	@ (8004164 <_sbrk+0x60>)
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	4b13      	ldr	r3, [pc, #76]	@ (8004168 <_sbrk+0x64>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d102      	bne.n	8004126 <_sbrk+0x22>
 8004120:	4b11      	ldr	r3, [pc, #68]	@ (8004168 <_sbrk+0x64>)
 8004122:	4a12      	ldr	r2, [pc, #72]	@ (800416c <_sbrk+0x68>)
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	4b10      	ldr	r3, [pc, #64]	@ (8004168 <_sbrk+0x64>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4413      	add	r3, r2
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	429a      	cmp	r2, r3
 8004132:	d207      	bcs.n	8004144 <_sbrk+0x40>
 8004134:	f00d fb14 	bl	8011760 <__errno>
 8004138:	4603      	mov	r3, r0
 800413a:	220c      	movs	r2, #12
 800413c:	601a      	str	r2, [r3, #0]
 800413e:	f04f 33ff 	mov.w	r3, #4294967295
 8004142:	e009      	b.n	8004158 <_sbrk+0x54>
 8004144:	4b08      	ldr	r3, [pc, #32]	@ (8004168 <_sbrk+0x64>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	4b07      	ldr	r3, [pc, #28]	@ (8004168 <_sbrk+0x64>)
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4413      	add	r3, r2
 8004152:	4a05      	ldr	r2, [pc, #20]	@ (8004168 <_sbrk+0x64>)
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4618      	mov	r0, r3
 800415a:	3718      	adds	r7, #24
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20020000 	.word	0x20020000
 8004164:	00000400 	.word	0x00000400
 8004168:	20000b74 	.word	0x20000b74
 800416c:	20002698 	.word	0x20002698

08004170 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004174:	4b06      	ldr	r3, [pc, #24]	@ (8004190 <SystemInit+0x20>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417a:	4a05      	ldr	r2, [pc, #20]	@ (8004190 <SystemInit+0x20>)
 800417c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004180:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <Reset_Handler>:
 8004194:	480d      	ldr	r0, [pc, #52]	@ (80041cc <LoopForever+0x2>)
 8004196:	4685      	mov	sp, r0
 8004198:	f7ff ffea 	bl	8004170 <SystemInit>
 800419c:	480c      	ldr	r0, [pc, #48]	@ (80041d0 <LoopForever+0x6>)
 800419e:	490d      	ldr	r1, [pc, #52]	@ (80041d4 <LoopForever+0xa>)
 80041a0:	4a0d      	ldr	r2, [pc, #52]	@ (80041d8 <LoopForever+0xe>)
 80041a2:	2300      	movs	r3, #0
 80041a4:	e002      	b.n	80041ac <LoopCopyDataInit>

080041a6 <CopyDataInit>:
 80041a6:	58d4      	ldr	r4, [r2, r3]
 80041a8:	50c4      	str	r4, [r0, r3]
 80041aa:	3304      	adds	r3, #4

080041ac <LoopCopyDataInit>:
 80041ac:	18c4      	adds	r4, r0, r3
 80041ae:	428c      	cmp	r4, r1
 80041b0:	d3f9      	bcc.n	80041a6 <CopyDataInit>
 80041b2:	4a0a      	ldr	r2, [pc, #40]	@ (80041dc <LoopForever+0x12>)
 80041b4:	4c0a      	ldr	r4, [pc, #40]	@ (80041e0 <LoopForever+0x16>)
 80041b6:	2300      	movs	r3, #0
 80041b8:	e001      	b.n	80041be <LoopFillZerobss>

080041ba <FillZerobss>:
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	3204      	adds	r2, #4

080041be <LoopFillZerobss>:
 80041be:	42a2      	cmp	r2, r4
 80041c0:	d3fb      	bcc.n	80041ba <FillZerobss>
 80041c2:	f00d fad3 	bl	801176c <__libc_init_array>
 80041c6:	f7fc ff37 	bl	8001038 <main>

080041ca <LoopForever>:
 80041ca:	e7fe      	b.n	80041ca <LoopForever>
 80041cc:	20020000 	.word	0x20020000
 80041d0:	20000000 	.word	0x20000000
 80041d4:	20000388 	.word	0x20000388
 80041d8:	080172d8 	.word	0x080172d8
 80041dc:	20000388 	.word	0x20000388
 80041e0:	20002698 	.word	0x20002698

080041e4 <ADC1_2_IRQHandler>:
 80041e4:	e7fe      	b.n	80041e4 <ADC1_2_IRQHandler>

080041e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041f0:	2003      	movs	r0, #3
 80041f2:	f001 fdfb 	bl	8005dec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041f6:	2000      	movs	r0, #0
 80041f8:	f000 f80e 	bl	8004218 <HAL_InitTick>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	71fb      	strb	r3, [r7, #7]
 8004206:	e001      	b.n	800420c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004208:	f7ff f9f0 	bl	80035ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800420c:	79fb      	ldrb	r3, [r7, #7]

}
 800420e:	4618      	mov	r0, r3
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
	...

08004218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004224:	4b16      	ldr	r3, [pc, #88]	@ (8004280 <HAL_InitTick+0x68>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d022      	beq.n	8004272 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800422c:	4b15      	ldr	r3, [pc, #84]	@ (8004284 <HAL_InitTick+0x6c>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b13      	ldr	r3, [pc, #76]	@ (8004280 <HAL_InitTick+0x68>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004238:	fbb1 f3f3 	udiv	r3, r1, r3
 800423c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004240:	4618      	mov	r0, r3
 8004242:	f001 fe06 	bl	8005e52 <HAL_SYSTICK_Config>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10f      	bne.n	800426c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b0f      	cmp	r3, #15
 8004250:	d809      	bhi.n	8004266 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004252:	2200      	movs	r2, #0
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	f04f 30ff 	mov.w	r0, #4294967295
 800425a:	f001 fdd2 	bl	8005e02 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800425e:	4a0a      	ldr	r2, [pc, #40]	@ (8004288 <HAL_InitTick+0x70>)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	e007      	b.n	8004276 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
 800426a:	e004      	b.n	8004276 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	73fb      	strb	r3, [r7, #15]
 8004270:	e001      	b.n	8004276 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004276:	7bfb      	ldrb	r3, [r7, #15]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	20000034 	.word	0x20000034
 8004284:	2000002c 	.word	0x2000002c
 8004288:	20000030 	.word	0x20000030

0800428c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004290:	4b05      	ldr	r3, [pc, #20]	@ (80042a8 <HAL_IncTick+0x1c>)
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <HAL_IncTick+0x20>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4413      	add	r3, r2
 800429a:	4a03      	ldr	r2, [pc, #12]	@ (80042a8 <HAL_IncTick+0x1c>)
 800429c:	6013      	str	r3, [r2, #0]
}
 800429e:	bf00      	nop
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	20000b78 	.word	0x20000b78
 80042ac:	20000034 	.word	0x20000034

080042b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042b0:	b480      	push	{r7}
 80042b2:	af00      	add	r7, sp, #0
  return uwTick;
 80042b4:	4b03      	ldr	r3, [pc, #12]	@ (80042c4 <HAL_GetTick+0x14>)
 80042b6:	681b      	ldr	r3, [r3, #0]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	20000b78 	.word	0x20000b78

080042c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042d0:	f7ff ffee 	bl	80042b0 <HAL_GetTick>
 80042d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e0:	d004      	beq.n	80042ec <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80042e2:	4b09      	ldr	r3, [pc, #36]	@ (8004308 <HAL_Delay+0x40>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4413      	add	r3, r2
 80042ea:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042ec:	bf00      	nop
 80042ee:	f7ff ffdf 	bl	80042b0 <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d8f7      	bhi.n	80042ee <HAL_Delay+0x26>
  {
  }
}
 80042fe:	bf00      	nop
 8004300:	bf00      	nop
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	20000034 	.word	0x20000034

0800430c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	431a      	orrs	r2, r3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	609a      	str	r2, [r3, #8]
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
 800433a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	609a      	str	r2, [r3, #8]
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004368:	4618      	mov	r0, r3
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
 8004380:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	3360      	adds	r3, #96	@ 0x60
 8004386:	461a      	mov	r2, r3
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b08      	ldr	r3, [pc, #32]	@ (80043b8 <LL_ADC_SetOffset+0x44>)
 8004396:	4013      	ands	r3, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80043ac:	bf00      	nop
 80043ae:	371c      	adds	r7, #28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	03fff000 	.word	0x03fff000

080043bc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3360      	adds	r3, #96	@ 0x60
 80043ca:	461a      	mov	r2, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b087      	sub	sp, #28
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	3360      	adds	r3, #96	@ 0x60
 80043f8:	461a      	mov	r2, r3
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	431a      	orrs	r2, r3
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004412:	bf00      	nop
 8004414:	371c      	adds	r7, #28
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800441e:	b480      	push	{r7}
 8004420:	b087      	sub	sp, #28
 8004422:	af00      	add	r7, sp, #0
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3360      	adds	r3, #96	@ 0x60
 800442e:	461a      	mov	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4413      	add	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	431a      	orrs	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004448:	bf00      	nop
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004454:	b480      	push	{r7}
 8004456:	b087      	sub	sp, #28
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3360      	adds	r3, #96	@ 0x60
 8004464:	461a      	mov	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	4413      	add	r3, r2
 800446c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	431a      	orrs	r2, r3
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800448a:	b480      	push	{r7}
 800448c:	b083      	sub	sp, #12
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	615a      	str	r2, [r3, #20]
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80044c4:	2301      	movs	r3, #1
 80044c6:	e000      	b.n	80044ca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b087      	sub	sp, #28
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3330      	adds	r3, #48	@ 0x30
 80044e6:	461a      	mov	r2, r3
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	0a1b      	lsrs	r3, r3, #8
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	f003 030c 	and.w	r3, r3, #12
 80044f2:	4413      	add	r3, r2
 80044f4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	211f      	movs	r1, #31
 8004502:	fa01 f303 	lsl.w	r3, r1, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	401a      	ands	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	0e9b      	lsrs	r3, r3, #26
 800450e:	f003 011f 	and.w	r1, r3, #31
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f003 031f 	and.w	r3, r3, #31
 8004518:	fa01 f303 	lsl.w	r3, r1, r3
 800451c:	431a      	orrs	r2, r3
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800452e:	b480      	push	{r7}
 8004530:	b087      	sub	sp, #28
 8004532:	af00      	add	r7, sp, #0
 8004534:	60f8      	str	r0, [r7, #12]
 8004536:	60b9      	str	r1, [r7, #8]
 8004538:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3314      	adds	r3, #20
 800453e:	461a      	mov	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	0e5b      	lsrs	r3, r3, #25
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	4413      	add	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	0d1b      	lsrs	r3, r3, #20
 8004556:	f003 031f 	and.w	r3, r3, #31
 800455a:	2107      	movs	r1, #7
 800455c:	fa01 f303 	lsl.w	r3, r1, r3
 8004560:	43db      	mvns	r3, r3
 8004562:	401a      	ands	r2, r3
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	0d1b      	lsrs	r3, r3, #20
 8004568:	f003 031f 	and.w	r3, r3, #31
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	fa01 f303 	lsl.w	r3, r1, r3
 8004572:	431a      	orrs	r2, r3
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004578:	bf00      	nop
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800459c:	43db      	mvns	r3, r3
 800459e:	401a      	ands	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f003 0318 	and.w	r3, r3, #24
 80045a6:	4908      	ldr	r1, [pc, #32]	@ (80045c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80045a8:	40d9      	lsrs	r1, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	400b      	ands	r3, r1
 80045ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b2:	431a      	orrs	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80045ba:	bf00      	nop
 80045bc:	3714      	adds	r7, #20
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	0007ffff 	.word	0x0007ffff

080045cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 031f 	and.w	r3, r3, #31
}
 80045dc:	4618      	mov	r0, r3
 80045de:	370c      	adds	r7, #12
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80045f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6093      	str	r3, [r2, #8]
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800461c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004620:	d101      	bne.n	8004626 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004622:	2301      	movs	r3, #1
 8004624:	e000      	b.n	8004628 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004644:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004648:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800466c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004670:	d101      	bne.n	8004676 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004672:	2301      	movs	r3, #1
 8004674:	e000      	b.n	8004678 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004676:	2300      	movs	r3, #0
}
 8004678:	4618      	mov	r0, r3
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004694:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004698:	f043 0201 	orr.w	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80046bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80046c0:	f043 0202 	orr.w	r2, r3, #2
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d101      	bne.n	80046ec <LL_ADC_IsEnabled+0x18>
 80046e8:	2301      	movs	r3, #1
 80046ea:	e000      	b.n	80046ee <LL_ADC_IsEnabled+0x1a>
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b02      	cmp	r3, #2
 800470c:	d101      	bne.n	8004712 <LL_ADC_IsDisableOngoing+0x18>
 800470e:	2301      	movs	r3, #1
 8004710:	e000      	b.n	8004714 <LL_ADC_IsDisableOngoing+0x1a>
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004730:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004734:	f043 0204 	orr.w	r2, r3, #4
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b04      	cmp	r3, #4
 800475a:	d101      	bne.n	8004760 <LL_ADC_REG_IsConversionOngoing+0x18>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0308 	and.w	r3, r3, #8
 800477e:	2b08      	cmp	r3, #8
 8004780:	d101      	bne.n	8004786 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004794:	b590      	push	{r4, r7, lr}
 8004796:	b089      	sub	sp, #36	@ 0x24
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e1a9      	b.n	8004b02 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d109      	bne.n	80047d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7fe ff39 	bl	8003634 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff ff19 	bl	800460c <LL_ADC_IsDeepPowerDownEnabled>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff feff 	bl	80045e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff ff34 	bl	800465c <LL_ADC_IsInternalRegulatorEnabled>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d115      	bne.n	8004826 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff ff18 	bl	8004634 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004804:	4b9c      	ldr	r3, [pc, #624]	@ (8004a78 <HAL_ADC_Init+0x2e4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	099b      	lsrs	r3, r3, #6
 800480a:	4a9c      	ldr	r2, [pc, #624]	@ (8004a7c <HAL_ADC_Init+0x2e8>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	099b      	lsrs	r3, r3, #6
 8004812:	3301      	adds	r3, #1
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004818:	e002      	b.n	8004820 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	3b01      	subs	r3, #1
 800481e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f9      	bne.n	800481a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4618      	mov	r0, r3
 800482c:	f7ff ff16 	bl	800465c <LL_ADC_IsInternalRegulatorEnabled>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d10d      	bne.n	8004852 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483a:	f043 0210 	orr.w	r2, r3, #16
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004846:	f043 0201 	orr.w	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff ff76 	bl	8004748 <LL_ADC_REG_IsConversionOngoing>
 800485c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	2b00      	cmp	r3, #0
 8004868:	f040 8142 	bne.w	8004af0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f040 813e 	bne.w	8004af0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004878:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800487c:	f043 0202 	orr.w	r2, r3, #2
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff ff23 	bl	80046d4 <LL_ADC_IsEnabled>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d141      	bne.n	8004918 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800489c:	d004      	beq.n	80048a8 <HAL_ADC_Init+0x114>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a77      	ldr	r2, [pc, #476]	@ (8004a80 <HAL_ADC_Init+0x2ec>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d10f      	bne.n	80048c8 <HAL_ADC_Init+0x134>
 80048a8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80048ac:	f7ff ff12 	bl	80046d4 <LL_ADC_IsEnabled>
 80048b0:	4604      	mov	r4, r0
 80048b2:	4873      	ldr	r0, [pc, #460]	@ (8004a80 <HAL_ADC_Init+0x2ec>)
 80048b4:	f7ff ff0e 	bl	80046d4 <LL_ADC_IsEnabled>
 80048b8:	4603      	mov	r3, r0
 80048ba:	4323      	orrs	r3, r4
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bf0c      	ite	eq
 80048c0:	2301      	moveq	r3, #1
 80048c2:	2300      	movne	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	e012      	b.n	80048ee <HAL_ADC_Init+0x15a>
 80048c8:	486e      	ldr	r0, [pc, #440]	@ (8004a84 <HAL_ADC_Init+0x2f0>)
 80048ca:	f7ff ff03 	bl	80046d4 <LL_ADC_IsEnabled>
 80048ce:	4604      	mov	r4, r0
 80048d0:	486d      	ldr	r0, [pc, #436]	@ (8004a88 <HAL_ADC_Init+0x2f4>)
 80048d2:	f7ff feff 	bl	80046d4 <LL_ADC_IsEnabled>
 80048d6:	4603      	mov	r3, r0
 80048d8:	431c      	orrs	r4, r3
 80048da:	486c      	ldr	r0, [pc, #432]	@ (8004a8c <HAL_ADC_Init+0x2f8>)
 80048dc:	f7ff fefa 	bl	80046d4 <LL_ADC_IsEnabled>
 80048e0:	4603      	mov	r3, r0
 80048e2:	4323      	orrs	r3, r4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bf0c      	ite	eq
 80048e8:	2301      	moveq	r3, #1
 80048ea:	2300      	movne	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d012      	beq.n	8004918 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048fa:	d004      	beq.n	8004906 <HAL_ADC_Init+0x172>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a5f      	ldr	r2, [pc, #380]	@ (8004a80 <HAL_ADC_Init+0x2ec>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d101      	bne.n	800490a <HAL_ADC_Init+0x176>
 8004906:	4a62      	ldr	r2, [pc, #392]	@ (8004a90 <HAL_ADC_Init+0x2fc>)
 8004908:	e000      	b.n	800490c <HAL_ADC_Init+0x178>
 800490a:	4a62      	ldr	r2, [pc, #392]	@ (8004a94 <HAL_ADC_Init+0x300>)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	4619      	mov	r1, r3
 8004912:	4610      	mov	r0, r2
 8004914:	f7ff fcfa 	bl	800430c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	7f5b      	ldrb	r3, [r3, #29]
 800491c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004922:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004928:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800492e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004936:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004938:	4313      	orrs	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004942:	2b01      	cmp	r3, #1
 8004944:	d106      	bne.n	8004954 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494a:	3b01      	subs	r3, #1
 800494c:	045b      	lsls	r3, r3, #17
 800494e:	69ba      	ldr	r2, [r7, #24]
 8004950:	4313      	orrs	r3, r2
 8004952:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004958:	2b00      	cmp	r3, #0
 800495a:	d009      	beq.n	8004970 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004960:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004968:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	4313      	orrs	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	4b48      	ldr	r3, [pc, #288]	@ (8004a98 <HAL_ADC_Init+0x304>)
 8004978:	4013      	ands	r3, r2
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	69b9      	ldr	r1, [r7, #24]
 8004980:	430b      	orrs	r3, r1
 8004982:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7ff fee5 	bl	800476e <LL_ADC_INJ_IsConversionOngoing>
 80049a4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d17f      	bne.n	8004aac <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d17c      	bne.n	8004aac <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80049b6:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80049be:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049ce:	f023 0302 	bic.w	r3, r3, #2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6812      	ldr	r2, [r2, #0]
 80049d6:	69b9      	ldr	r1, [r7, #24]
 80049d8:	430b      	orrs	r3, r1
 80049da:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d017      	beq.n	8004a14 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80049f2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80049fc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004a00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6911      	ldr	r1, [r2, #16]
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	430b      	orrs	r3, r1
 8004a0e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004a12:	e013      	b.n	8004a3c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	691a      	ldr	r2, [r3, #16]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004a22:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004a34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a38:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d12a      	bne.n	8004a9c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004a50:	f023 0304 	bic.w	r3, r3, #4
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004a5c:	4311      	orrs	r1, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004a62:	4311      	orrs	r1, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f042 0201 	orr.w	r2, r2, #1
 8004a74:	611a      	str	r2, [r3, #16]
 8004a76:	e019      	b.n	8004aac <HAL_ADC_Init+0x318>
 8004a78:	2000002c 	.word	0x2000002c
 8004a7c:	053e2d63 	.word	0x053e2d63
 8004a80:	50000100 	.word	0x50000100
 8004a84:	50000400 	.word	0x50000400
 8004a88:	50000500 	.word	0x50000500
 8004a8c:	50000600 	.word	0x50000600
 8004a90:	50000300 	.word	0x50000300
 8004a94:	50000700 	.word	0x50000700
 8004a98:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d10c      	bne.n	8004ace <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aba:	f023 010f 	bic.w	r1, r3, #15
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	1e5a      	subs	r2, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	631a      	str	r2, [r3, #48]	@ 0x30
 8004acc:	e007      	b.n	8004ade <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 020f 	bic.w	r2, r2, #15
 8004adc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ae2:	f023 0303 	bic.w	r3, r3, #3
 8004ae6:	f043 0201 	orr.w	r2, r3, #1
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004aee:	e007      	b.n	8004b00 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004af4:	f043 0210 	orr.w	r2, r3, #16
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004b00:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3724      	adds	r7, #36	@ 0x24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd90      	pop	{r4, r7, pc}
 8004b0a:	bf00      	nop

08004b0c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b20:	d004      	beq.n	8004b2c <HAL_ADC_Start_DMA+0x20>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a5a      	ldr	r2, [pc, #360]	@ (8004c90 <HAL_ADC_Start_DMA+0x184>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d101      	bne.n	8004b30 <HAL_ADC_Start_DMA+0x24>
 8004b2c:	4b59      	ldr	r3, [pc, #356]	@ (8004c94 <HAL_ADC_Start_DMA+0x188>)
 8004b2e:	e000      	b.n	8004b32 <HAL_ADC_Start_DMA+0x26>
 8004b30:	4b59      	ldr	r3, [pc, #356]	@ (8004c98 <HAL_ADC_Start_DMA+0x18c>)
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff fd4a 	bl	80045cc <LL_ADC_GetMultimode>
 8004b38:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff fe02 	bl	8004748 <LL_ADC_REG_IsConversionOngoing>
 8004b44:	4603      	mov	r3, r0
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f040 809b 	bne.w	8004c82 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d101      	bne.n	8004b5a <HAL_ADC_Start_DMA+0x4e>
 8004b56:	2302      	movs	r3, #2
 8004b58:	e096      	b.n	8004c88 <HAL_ADC_Start_DMA+0x17c>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a4d      	ldr	r2, [pc, #308]	@ (8004c9c <HAL_ADC_Start_DMA+0x190>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d008      	beq.n	8004b7e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d005      	beq.n	8004b7e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b05      	cmp	r3, #5
 8004b76:	d002      	beq.n	8004b7e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	2b09      	cmp	r3, #9
 8004b7c:	d17a      	bne.n	8004c74 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004b7e:	68f8      	ldr	r0, [r7, #12]
 8004b80:	f000 fcec 	bl	800555c <ADC_Enable>
 8004b84:	4603      	mov	r3, r0
 8004b86:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d16d      	bne.n	8004c6a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b92:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004b96:	f023 0301 	bic.w	r3, r3, #1
 8004b9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a3a      	ldr	r2, [pc, #232]	@ (8004c90 <HAL_ADC_Start_DMA+0x184>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d009      	beq.n	8004bc0 <HAL_ADC_Start_DMA+0xb4>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ca0 <HAL_ADC_Start_DMA+0x194>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d002      	beq.n	8004bbc <HAL_ADC_Start_DMA+0xb0>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	e003      	b.n	8004bc4 <HAL_ADC_Start_DMA+0xb8>
 8004bbc:	4b39      	ldr	r3, [pc, #228]	@ (8004ca4 <HAL_ADC_Start_DMA+0x198>)
 8004bbe:	e001      	b.n	8004bc4 <HAL_ADC_Start_DMA+0xb8>
 8004bc0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d002      	beq.n	8004bd2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d105      	bne.n	8004bde <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bd6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d006      	beq.n	8004bf8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bee:	f023 0206 	bic.w	r2, r3, #6
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	661a      	str	r2, [r3, #96]	@ 0x60
 8004bf6:	e002      	b.n	8004bfe <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c02:	4a29      	ldr	r2, [pc, #164]	@ (8004ca8 <HAL_ADC_Start_DMA+0x19c>)
 8004c04:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c0a:	4a28      	ldr	r2, [pc, #160]	@ (8004cac <HAL_ADC_Start_DMA+0x1a0>)
 8004c0c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c12:	4a27      	ldr	r2, [pc, #156]	@ (8004cb0 <HAL_ADC_Start_DMA+0x1a4>)
 8004c14:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	221c      	movs	r2, #28
 8004c1c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f042 0210 	orr.w	r2, r2, #16
 8004c34:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f042 0201 	orr.w	r2, r2, #1
 8004c44:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3340      	adds	r3, #64	@ 0x40
 8004c50:	4619      	mov	r1, r3
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f001 fc8f 	bl	8006578 <HAL_DMA_Start_IT>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff fd5c 	bl	8004720 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004c68:	e00d      	b.n	8004c86 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8004c72:	e008      	b.n	8004c86 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004c80:	e001      	b.n	8004c86 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004c82:	2302      	movs	r3, #2
 8004c84:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	50000100 	.word	0x50000100
 8004c94:	50000300 	.word	0x50000300
 8004c98:	50000700 	.word	0x50000700
 8004c9c:	50000600 	.word	0x50000600
 8004ca0:	50000500 	.word	0x50000500
 8004ca4:	50000400 	.word	0x50000400
 8004ca8:	08005747 	.word	0x08005747
 8004cac:	0800581f 	.word	0x0800581f
 8004cb0:	0800583b 	.word	0x0800583b

08004cb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b0b6      	sub	sp, #216	@ 0xd8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d102      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x24>
 8004cfa:	2302      	movs	r3, #2
 8004cfc:	f000 bc13 	b.w	8005526 <HAL_ADC_ConfigChannel+0x84a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7ff fd1b 	bl	8004748 <LL_ADC_REG_IsConversionOngoing>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f040 83f3 	bne.w	8005500 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6859      	ldr	r1, [r3, #4]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f7ff fbd5 	bl	80044d6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff fd09 	bl	8004748 <LL_ADC_REG_IsConversionOngoing>
 8004d36:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff fd15 	bl	800476e <LL_ADC_INJ_IsConversionOngoing>
 8004d44:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004d48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f040 81d9 	bne.w	8005104 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004d52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f040 81d4 	bne.w	8005104 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d64:	d10f      	bne.n	8004d86 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6818      	ldr	r0, [r3, #0]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	4619      	mov	r1, r3
 8004d72:	f7ff fbdc 	bl	800452e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f7ff fb83 	bl	800448a <LL_ADC_SetSamplingTimeCommonConfig>
 8004d84:	e00e      	b.n	8004da4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6818      	ldr	r0, [r3, #0]
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	6819      	ldr	r1, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	461a      	mov	r2, r3
 8004d94:	f7ff fbcb 	bl	800452e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7ff fb73 	bl	800448a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	695a      	ldr	r2, [r3, #20]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68db      	ldr	r3, [r3, #12]
 8004dae:	08db      	lsrs	r3, r3, #3
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	005b      	lsls	r3, r3, #1
 8004db6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d022      	beq.n	8004e0c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6818      	ldr	r0, [r3, #0]
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	6919      	ldr	r1, [r3, #16]
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004dd6:	f7ff facd 	bl	8004374 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6919      	ldr	r1, [r3, #16]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	461a      	mov	r2, r3
 8004de8:	f7ff fb19 	bl	800441e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d102      	bne.n	8004e02 <HAL_ADC_ConfigChannel+0x126>
 8004dfc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e00:	e000      	b.n	8004e04 <HAL_ADC_ConfigChannel+0x128>
 8004e02:	2300      	movs	r3, #0
 8004e04:	461a      	mov	r2, r3
 8004e06:	f7ff fb25 	bl	8004454 <LL_ADC_SetOffsetSaturation>
 8004e0a:	e17b      	b.n	8005104 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2100      	movs	r1, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f7ff fad2 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <HAL_ADC_ConfigChannel+0x15c>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2100      	movs	r1, #0
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff fac7 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	0e9b      	lsrs	r3, r3, #26
 8004e32:	f003 021f 	and.w	r2, r3, #31
 8004e36:	e01e      	b.n	8004e76 <HAL_ADC_ConfigChannel+0x19a>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2100      	movs	r1, #0
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7ff fabc 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004e44:	4603      	mov	r3, r0
 8004e46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004e4e:	fa93 f3a3 	rbit	r3, r3
 8004e52:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004e5a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004e66:	2320      	movs	r3, #32
 8004e68:	e004      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004e6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e6e:	fab3 f383 	clz	r3, r3
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d105      	bne.n	8004e8e <HAL_ADC_ConfigChannel+0x1b2>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	0e9b      	lsrs	r3, r3, #26
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	e018      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x1e4>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004e9a:	fa93 f3a3 	rbit	r3, r3
 8004e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004ea2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004ea6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8004eaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004eb2:	2320      	movs	r3, #32
 8004eb4:	e004      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004eb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004eba:	fab3 f383 	clz	r3, r3
 8004ebe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d106      	bne.n	8004ed2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2100      	movs	r1, #0
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff fa8b 	bl	80043e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff fa6f 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10a      	bne.n	8004efe <HAL_ADC_ConfigChannel+0x222>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2101      	movs	r1, #1
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff fa64 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	0e9b      	lsrs	r3, r3, #26
 8004ef8:	f003 021f 	and.w	r2, r3, #31
 8004efc:	e01e      	b.n	8004f3c <HAL_ADC_ConfigChannel+0x260>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2101      	movs	r1, #1
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff fa59 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004f14:	fa93 f3a3 	rbit	r3, r3
 8004f18:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004f1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004f20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004f24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004f2c:	2320      	movs	r3, #32
 8004f2e:	e004      	b.n	8004f3a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004f30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004f34:	fab3 f383 	clz	r3, r3
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d105      	bne.n	8004f54 <HAL_ADC_ConfigChannel+0x278>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	0e9b      	lsrs	r3, r3, #26
 8004f4e:	f003 031f 	and.w	r3, r3, #31
 8004f52:	e018      	b.n	8004f86 <HAL_ADC_ConfigChannel+0x2aa>
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004f60:	fa93 f3a3 	rbit	r3, r3
 8004f64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004f68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004f6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004f78:	2320      	movs	r3, #32
 8004f7a:	e004      	b.n	8004f86 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004f7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004f80:	fab3 f383 	clz	r3, r3
 8004f84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d106      	bne.n	8004f98 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	2101      	movs	r1, #1
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fa28 	bl	80043e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2102      	movs	r1, #2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff fa0c 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10a      	bne.n	8004fc4 <HAL_ADC_ConfigChannel+0x2e8>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2102      	movs	r1, #2
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7ff fa01 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	0e9b      	lsrs	r3, r3, #26
 8004fbe:	f003 021f 	and.w	r2, r3, #31
 8004fc2:	e01e      	b.n	8005002 <HAL_ADC_ConfigChannel+0x326>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2102      	movs	r1, #2
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff f9f6 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004fda:	fa93 f3a3 	rbit	r3, r3
 8004fde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004fe2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004fe6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004fea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004ff2:	2320      	movs	r3, #32
 8004ff4:	e004      	b.n	8005000 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004ff6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004ffa:	fab3 f383 	clz	r3, r3
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800500a:	2b00      	cmp	r3, #0
 800500c:	d105      	bne.n	800501a <HAL_ADC_ConfigChannel+0x33e>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	0e9b      	lsrs	r3, r3, #26
 8005014:	f003 031f 	and.w	r3, r3, #31
 8005018:	e016      	b.n	8005048 <HAL_ADC_ConfigChannel+0x36c>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005022:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005026:	fa93 f3a3 	rbit	r3, r3
 800502a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800502c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800502e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005032:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800503a:	2320      	movs	r3, #32
 800503c:	e004      	b.n	8005048 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800503e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005042:	fab3 f383 	clz	r3, r3
 8005046:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005048:	429a      	cmp	r2, r3
 800504a:	d106      	bne.n	800505a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2200      	movs	r2, #0
 8005052:	2102      	movs	r1, #2
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff f9c7 	bl	80043e8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2103      	movs	r1, #3
 8005060:	4618      	mov	r0, r3
 8005062:	f7ff f9ab 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8005066:	4603      	mov	r3, r0
 8005068:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10a      	bne.n	8005086 <HAL_ADC_ConfigChannel+0x3aa>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2103      	movs	r1, #3
 8005076:	4618      	mov	r0, r3
 8005078:	f7ff f9a0 	bl	80043bc <LL_ADC_GetOffsetChannel>
 800507c:	4603      	mov	r3, r0
 800507e:	0e9b      	lsrs	r3, r3, #26
 8005080:	f003 021f 	and.w	r2, r3, #31
 8005084:	e017      	b.n	80050b6 <HAL_ADC_ConfigChannel+0x3da>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2103      	movs	r1, #3
 800508c:	4618      	mov	r0, r3
 800508e:	f7ff f995 	bl	80043bc <LL_ADC_GetOffsetChannel>
 8005092:	4603      	mov	r3, r0
 8005094:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005096:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005098:	fa93 f3a3 	rbit	r3, r3
 800509c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800509e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80050a0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80050a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80050a8:	2320      	movs	r3, #32
 80050aa:	e003      	b.n	80050b4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80050ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80050ae:	fab3 f383 	clz	r3, r3
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d105      	bne.n	80050ce <HAL_ADC_ConfigChannel+0x3f2>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	0e9b      	lsrs	r3, r3, #26
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	e011      	b.n	80050f2 <HAL_ADC_ConfigChannel+0x416>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050d6:	fa93 f3a3 	rbit	r3, r3
 80050da:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80050dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80050de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80050e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80050e6:	2320      	movs	r3, #32
 80050e8:	e003      	b.n	80050f2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80050ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80050ec:	fab3 f383 	clz	r3, r3
 80050f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d106      	bne.n	8005104 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2200      	movs	r2, #0
 80050fc:	2103      	movs	r1, #3
 80050fe:	4618      	mov	r0, r3
 8005100:	f7ff f972 	bl	80043e8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f7ff fae3 	bl	80046d4 <LL_ADC_IsEnabled>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	f040 813d 	bne.w	8005390 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6818      	ldr	r0, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	6819      	ldr	r1, [r3, #0]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	461a      	mov	r2, r3
 8005124:	f7ff fa2e 	bl	8004584 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	4aa2      	ldr	r2, [pc, #648]	@ (80053b8 <HAL_ADC_ConfigChannel+0x6dc>)
 800512e:	4293      	cmp	r3, r2
 8005130:	f040 812e 	bne.w	8005390 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10b      	bne.n	800515c <HAL_ADC_ConfigChannel+0x480>
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	0e9b      	lsrs	r3, r3, #26
 800514a:	3301      	adds	r3, #1
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	2b09      	cmp	r3, #9
 8005152:	bf94      	ite	ls
 8005154:	2301      	movls	r3, #1
 8005156:	2300      	movhi	r3, #0
 8005158:	b2db      	uxtb	r3, r3
 800515a:	e019      	b.n	8005190 <HAL_ADC_ConfigChannel+0x4b4>
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005162:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005164:	fa93 f3a3 	rbit	r3, r3
 8005168:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800516a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800516c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800516e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005170:	2b00      	cmp	r3, #0
 8005172:	d101      	bne.n	8005178 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8005174:	2320      	movs	r3, #32
 8005176:	e003      	b.n	8005180 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8005178:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800517a:	fab3 f383 	clz	r3, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	3301      	adds	r3, #1
 8005182:	f003 031f 	and.w	r3, r3, #31
 8005186:	2b09      	cmp	r3, #9
 8005188:	bf94      	ite	ls
 800518a:	2301      	movls	r3, #1
 800518c:	2300      	movhi	r3, #0
 800518e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005190:	2b00      	cmp	r3, #0
 8005192:	d079      	beq.n	8005288 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800519c:	2b00      	cmp	r3, #0
 800519e:	d107      	bne.n	80051b0 <HAL_ADC_ConfigChannel+0x4d4>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	0e9b      	lsrs	r3, r3, #26
 80051a6:	3301      	adds	r3, #1
 80051a8:	069b      	lsls	r3, r3, #26
 80051aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051ae:	e015      	b.n	80051dc <HAL_ADC_ConfigChannel+0x500>
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051b8:	fa93 f3a3 	rbit	r3, r3
 80051bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80051be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051c0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80051c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80051c8:	2320      	movs	r3, #32
 80051ca:	e003      	b.n	80051d4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80051cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051ce:	fab3 f383 	clz	r3, r3
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	3301      	adds	r3, #1
 80051d6:	069b      	lsls	r3, r3, #26
 80051d8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d109      	bne.n	80051fc <HAL_ADC_ConfigChannel+0x520>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	0e9b      	lsrs	r3, r3, #26
 80051ee:	3301      	adds	r3, #1
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2101      	movs	r1, #1
 80051f6:	fa01 f303 	lsl.w	r3, r1, r3
 80051fa:	e017      	b.n	800522c <HAL_ADC_ConfigChannel+0x550>
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005202:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005204:	fa93 f3a3 	rbit	r3, r3
 8005208:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800520a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800520c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800520e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005214:	2320      	movs	r3, #32
 8005216:	e003      	b.n	8005220 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800521a:	fab3 f383 	clz	r3, r3
 800521e:	b2db      	uxtb	r3, r3
 8005220:	3301      	adds	r3, #1
 8005222:	f003 031f 	and.w	r3, r3, #31
 8005226:	2101      	movs	r1, #1
 8005228:	fa01 f303 	lsl.w	r3, r1, r3
 800522c:	ea42 0103 	orr.w	r1, r2, r3
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <HAL_ADC_ConfigChannel+0x576>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	0e9b      	lsrs	r3, r3, #26
 8005242:	3301      	adds	r3, #1
 8005244:	f003 021f 	and.w	r2, r3, #31
 8005248:	4613      	mov	r3, r2
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	4413      	add	r3, r2
 800524e:	051b      	lsls	r3, r3, #20
 8005250:	e018      	b.n	8005284 <HAL_ADC_ConfigChannel+0x5a8>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525a:	fa93 f3a3 	rbit	r3, r3
 800525e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005262:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800526a:	2320      	movs	r3, #32
 800526c:	e003      	b.n	8005276 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800526e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005270:	fab3 f383 	clz	r3, r3
 8005274:	b2db      	uxtb	r3, r3
 8005276:	3301      	adds	r3, #1
 8005278:	f003 021f 	and.w	r2, r3, #31
 800527c:	4613      	mov	r3, r2
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	4413      	add	r3, r2
 8005282:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005284:	430b      	orrs	r3, r1
 8005286:	e07e      	b.n	8005386 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005290:	2b00      	cmp	r3, #0
 8005292:	d107      	bne.n	80052a4 <HAL_ADC_ConfigChannel+0x5c8>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	0e9b      	lsrs	r3, r3, #26
 800529a:	3301      	adds	r3, #1
 800529c:	069b      	lsls	r3, r3, #26
 800529e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80052a2:	e015      	b.n	80052d0 <HAL_ADC_ConfigChannel+0x5f4>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ac:	fa93 f3a3 	rbit	r3, r3
 80052b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80052b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80052b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80052bc:	2320      	movs	r3, #32
 80052be:	e003      	b.n	80052c8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80052c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c2:	fab3 f383 	clz	r3, r3
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	3301      	adds	r3, #1
 80052ca:	069b      	lsls	r3, r3, #26
 80052cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d109      	bne.n	80052f0 <HAL_ADC_ConfigChannel+0x614>
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	0e9b      	lsrs	r3, r3, #26
 80052e2:	3301      	adds	r3, #1
 80052e4:	f003 031f 	and.w	r3, r3, #31
 80052e8:	2101      	movs	r1, #1
 80052ea:	fa01 f303 	lsl.w	r3, r1, r3
 80052ee:	e017      	b.n	8005320 <HAL_ADC_ConfigChannel+0x644>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	fa93 f3a3 	rbit	r3, r3
 80052fc:	61fb      	str	r3, [r7, #28]
  return result;
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005308:	2320      	movs	r3, #32
 800530a:	e003      	b.n	8005314 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	fab3 f383 	clz	r3, r3
 8005312:	b2db      	uxtb	r3, r3
 8005314:	3301      	adds	r3, #1
 8005316:	f003 031f 	and.w	r3, r3, #31
 800531a:	2101      	movs	r1, #1
 800531c:	fa01 f303 	lsl.w	r3, r1, r3
 8005320:	ea42 0103 	orr.w	r1, r2, r3
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10d      	bne.n	800534c <HAL_ADC_ConfigChannel+0x670>
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	0e9b      	lsrs	r3, r3, #26
 8005336:	3301      	adds	r3, #1
 8005338:	f003 021f 	and.w	r2, r3, #31
 800533c:	4613      	mov	r3, r2
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	4413      	add	r3, r2
 8005342:	3b1e      	subs	r3, #30
 8005344:	051b      	lsls	r3, r3, #20
 8005346:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800534a:	e01b      	b.n	8005384 <HAL_ADC_ConfigChannel+0x6a8>
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	fa93 f3a3 	rbit	r3, r3
 8005358:	613b      	str	r3, [r7, #16]
  return result;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8005364:	2320      	movs	r3, #32
 8005366:	e003      	b.n	8005370 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	fab3 f383 	clz	r3, r3
 800536e:	b2db      	uxtb	r3, r3
 8005370:	3301      	adds	r3, #1
 8005372:	f003 021f 	and.w	r2, r3, #31
 8005376:	4613      	mov	r3, r2
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	4413      	add	r3, r2
 800537c:	3b1e      	subs	r3, #30
 800537e:	051b      	lsls	r3, r3, #20
 8005380:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005384:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800538a:	4619      	mov	r1, r3
 800538c:	f7ff f8cf 	bl	800452e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	4b09      	ldr	r3, [pc, #36]	@ (80053bc <HAL_ADC_ConfigChannel+0x6e0>)
 8005396:	4013      	ands	r3, r2
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 80be 	beq.w	800551a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053a6:	d004      	beq.n	80053b2 <HAL_ADC_ConfigChannel+0x6d6>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a04      	ldr	r2, [pc, #16]	@ (80053c0 <HAL_ADC_ConfigChannel+0x6e4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d10a      	bne.n	80053c8 <HAL_ADC_ConfigChannel+0x6ec>
 80053b2:	4b04      	ldr	r3, [pc, #16]	@ (80053c4 <HAL_ADC_ConfigChannel+0x6e8>)
 80053b4:	e009      	b.n	80053ca <HAL_ADC_ConfigChannel+0x6ee>
 80053b6:	bf00      	nop
 80053b8:	407f0000 	.word	0x407f0000
 80053bc:	80080000 	.word	0x80080000
 80053c0:	50000100 	.word	0x50000100
 80053c4:	50000300 	.word	0x50000300
 80053c8:	4b59      	ldr	r3, [pc, #356]	@ (8005530 <HAL_ADC_ConfigChannel+0x854>)
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fe ffc4 	bl	8004358 <LL_ADC_GetCommonPathInternalCh>
 80053d0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a56      	ldr	r2, [pc, #344]	@ (8005534 <HAL_ADC_ConfigChannel+0x858>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d004      	beq.n	80053e8 <HAL_ADC_ConfigChannel+0x70c>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a55      	ldr	r2, [pc, #340]	@ (8005538 <HAL_ADC_ConfigChannel+0x85c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d13a      	bne.n	800545e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80053e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80053ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d134      	bne.n	800545e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053fc:	d005      	beq.n	800540a <HAL_ADC_ConfigChannel+0x72e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a4e      	ldr	r2, [pc, #312]	@ (800553c <HAL_ADC_ConfigChannel+0x860>)
 8005404:	4293      	cmp	r3, r2
 8005406:	f040 8085 	bne.w	8005514 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005412:	d004      	beq.n	800541e <HAL_ADC_ConfigChannel+0x742>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a49      	ldr	r2, [pc, #292]	@ (8005540 <HAL_ADC_ConfigChannel+0x864>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d101      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x746>
 800541e:	4a49      	ldr	r2, [pc, #292]	@ (8005544 <HAL_ADC_ConfigChannel+0x868>)
 8005420:	e000      	b.n	8005424 <HAL_ADC_ConfigChannel+0x748>
 8005422:	4a43      	ldr	r2, [pc, #268]	@ (8005530 <HAL_ADC_ConfigChannel+0x854>)
 8005424:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005428:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800542c:	4619      	mov	r1, r3
 800542e:	4610      	mov	r0, r2
 8005430:	f7fe ff7f 	bl	8004332 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005434:	4b44      	ldr	r3, [pc, #272]	@ (8005548 <HAL_ADC_ConfigChannel+0x86c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	099b      	lsrs	r3, r3, #6
 800543a:	4a44      	ldr	r2, [pc, #272]	@ (800554c <HAL_ADC_ConfigChannel+0x870>)
 800543c:	fba2 2303 	umull	r2, r3, r2, r3
 8005440:	099b      	lsrs	r3, r3, #6
 8005442:	1c5a      	adds	r2, r3, #1
 8005444:	4613      	mov	r3, r2
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800544e:	e002      	b.n	8005456 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3b01      	subs	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f9      	bne.n	8005450 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800545c:	e05a      	b.n	8005514 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a3b      	ldr	r2, [pc, #236]	@ (8005550 <HAL_ADC_ConfigChannel+0x874>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d125      	bne.n	80054b4 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005468:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800546c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d11f      	bne.n	80054b4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a31      	ldr	r2, [pc, #196]	@ (8005540 <HAL_ADC_ConfigChannel+0x864>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d104      	bne.n	8005488 <HAL_ADC_ConfigChannel+0x7ac>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a34      	ldr	r2, [pc, #208]	@ (8005554 <HAL_ADC_ConfigChannel+0x878>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d047      	beq.n	8005518 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005490:	d004      	beq.n	800549c <HAL_ADC_ConfigChannel+0x7c0>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a2a      	ldr	r2, [pc, #168]	@ (8005540 <HAL_ADC_ConfigChannel+0x864>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d101      	bne.n	80054a0 <HAL_ADC_ConfigChannel+0x7c4>
 800549c:	4a29      	ldr	r2, [pc, #164]	@ (8005544 <HAL_ADC_ConfigChannel+0x868>)
 800549e:	e000      	b.n	80054a2 <HAL_ADC_ConfigChannel+0x7c6>
 80054a0:	4a23      	ldr	r2, [pc, #140]	@ (8005530 <HAL_ADC_ConfigChannel+0x854>)
 80054a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80054aa:	4619      	mov	r1, r3
 80054ac:	4610      	mov	r0, r2
 80054ae:	f7fe ff40 	bl	8004332 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80054b2:	e031      	b.n	8005518 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a27      	ldr	r2, [pc, #156]	@ (8005558 <HAL_ADC_ConfigChannel+0x87c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d12d      	bne.n	800551a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80054be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d127      	bne.n	800551a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1c      	ldr	r2, [pc, #112]	@ (8005540 <HAL_ADC_ConfigChannel+0x864>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d022      	beq.n	800551a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80054dc:	d004      	beq.n	80054e8 <HAL_ADC_ConfigChannel+0x80c>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a17      	ldr	r2, [pc, #92]	@ (8005540 <HAL_ADC_ConfigChannel+0x864>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d101      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x810>
 80054e8:	4a16      	ldr	r2, [pc, #88]	@ (8005544 <HAL_ADC_ConfigChannel+0x868>)
 80054ea:	e000      	b.n	80054ee <HAL_ADC_ConfigChannel+0x812>
 80054ec:	4a10      	ldr	r2, [pc, #64]	@ (8005530 <HAL_ADC_ConfigChannel+0x854>)
 80054ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80054f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f7fe ff1a 	bl	8004332 <LL_ADC_SetCommonPathInternalCh>
 80054fe:	e00c      	b.n	800551a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005504:	f043 0220 	orr.w	r2, r3, #32
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005512:	e002      	b.n	800551a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005514:	bf00      	nop
 8005516:	e000      	b.n	800551a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005518:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005522:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005526:	4618      	mov	r0, r3
 8005528:	37d8      	adds	r7, #216	@ 0xd8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	50000700 	.word	0x50000700
 8005534:	c3210000 	.word	0xc3210000
 8005538:	90c00010 	.word	0x90c00010
 800553c:	50000600 	.word	0x50000600
 8005540:	50000100 	.word	0x50000100
 8005544:	50000300 	.word	0x50000300
 8005548:	2000002c 	.word	0x2000002c
 800554c:	053e2d63 	.word	0x053e2d63
 8005550:	c7520000 	.word	0xc7520000
 8005554:	50000500 	.word	0x50000500
 8005558:	cb840000 	.word	0xcb840000

0800555c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005564:	2300      	movs	r3, #0
 8005566:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f7ff f8b1 	bl	80046d4 <LL_ADC_IsEnabled>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d176      	bne.n	8005666 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	4b3c      	ldr	r3, [pc, #240]	@ (8005670 <ADC_Enable+0x114>)
 8005580:	4013      	ands	r3, r2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00d      	beq.n	80055a2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800558a:	f043 0210 	orr.w	r2, r3, #16
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005596:	f043 0201 	orr.w	r2, r3, #1
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e062      	b.n	8005668 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7ff f86c 	bl	8004684 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055b4:	d004      	beq.n	80055c0 <ADC_Enable+0x64>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a2e      	ldr	r2, [pc, #184]	@ (8005674 <ADC_Enable+0x118>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d101      	bne.n	80055c4 <ADC_Enable+0x68>
 80055c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005678 <ADC_Enable+0x11c>)
 80055c2:	e000      	b.n	80055c6 <ADC_Enable+0x6a>
 80055c4:	4b2d      	ldr	r3, [pc, #180]	@ (800567c <ADC_Enable+0x120>)
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fe fec6 	bl	8004358 <LL_ADC_GetCommonPathInternalCh>
 80055cc:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80055ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d013      	beq.n	80055fe <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80055d6:	4b2a      	ldr	r3, [pc, #168]	@ (8005680 <ADC_Enable+0x124>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	099b      	lsrs	r3, r3, #6
 80055dc:	4a29      	ldr	r2, [pc, #164]	@ (8005684 <ADC_Enable+0x128>)
 80055de:	fba2 2303 	umull	r2, r3, r2, r3
 80055e2:	099b      	lsrs	r3, r3, #6
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	4613      	mov	r3, r2
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80055f0:	e002      	b.n	80055f8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	3b01      	subs	r3, #1
 80055f6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1f9      	bne.n	80055f2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80055fe:	f7fe fe57 	bl	80042b0 <HAL_GetTick>
 8005602:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005604:	e028      	b.n	8005658 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff f862 	bl	80046d4 <LL_ADC_IsEnabled>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d104      	bne.n	8005620 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4618      	mov	r0, r3
 800561c:	f7ff f832 	bl	8004684 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005620:	f7fe fe46 	bl	80042b0 <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b02      	cmp	r3, #2
 800562c:	d914      	bls.n	8005658 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b01      	cmp	r3, #1
 800563a:	d00d      	beq.n	8005658 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005640:	f043 0210 	orr.w	r2, r3, #16
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800564c:	f043 0201 	orr.w	r2, r3, #1
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e007      	b.n	8005668 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b01      	cmp	r3, #1
 8005664:	d1cf      	bne.n	8005606 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	8000003f 	.word	0x8000003f
 8005674:	50000100 	.word	0x50000100
 8005678:	50000300 	.word	0x50000300
 800567c:	50000700 	.word	0x50000700
 8005680:	2000002c 	.word	0x2000002c
 8005684:	053e2d63 	.word	0x053e2d63

08005688 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4618      	mov	r0, r3
 8005696:	f7ff f830 	bl	80046fa <LL_ADC_IsDisableOngoing>
 800569a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f7ff f817 	bl	80046d4 <LL_ADC_IsEnabled>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d047      	beq.n	800573c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d144      	bne.n	800573c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 030d 	and.w	r3, r3, #13
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d10c      	bne.n	80056da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fe fff1 	bl	80046ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2203      	movs	r2, #3
 80056d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80056d2:	f7fe fded 	bl	80042b0 <HAL_GetTick>
 80056d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80056d8:	e029      	b.n	800572e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056de:	f043 0210 	orr.w	r2, r3, #16
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056ea:	f043 0201 	orr.w	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e023      	b.n	800573e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80056f6:	f7fe fddb 	bl	80042b0 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d914      	bls.n	800572e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00d      	beq.n	800572e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005716:	f043 0210 	orr.w	r2, r3, #16
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005722:	f043 0201 	orr.w	r2, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e007      	b.n	800573e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f003 0301 	and.w	r3, r3, #1
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1dc      	bne.n	80056f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005752:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005758:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800575c:	2b00      	cmp	r3, #0
 800575e:	d14b      	bne.n	80057f8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005764:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0308 	and.w	r3, r3, #8
 8005776:	2b00      	cmp	r3, #0
 8005778:	d021      	beq.n	80057be <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4618      	mov	r0, r3
 8005780:	f7fe fe96 	bl	80044b0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d032      	beq.n	80057f0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d12b      	bne.n	80057f0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d11f      	bne.n	80057f0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057b4:	f043 0201 	orr.w	r2, r3, #1
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80057bc:	e018      	b.n	80057f0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d111      	bne.n	80057f0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d105      	bne.n	80057f0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e8:	f043 0201 	orr.w	r2, r3, #1
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80057f0:	68f8      	ldr	r0, [r7, #12]
 80057f2:	f7fc fff5 	bl	80027e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80057f6:	e00e      	b.n	8005816 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057fc:	f003 0310 	and.w	r3, r3, #16
 8005800:	2b00      	cmp	r3, #0
 8005802:	d003      	beq.n	800580c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f7ff fa5f 	bl	8004cc8 <HAL_ADC_ErrorCallback>
}
 800580a:	e004      	b.n	8005816 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005810:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	4798      	blx	r3
}
 8005816:	bf00      	nop
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f7ff fa41 	bl	8004cb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005846:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800584c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005858:	f043 0204 	orr.w	r2, r3, #4
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff fa31 	bl	8004cc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <LL_ADC_IsEnabled>:
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <LL_ADC_IsEnabled+0x18>
 8005882:	2301      	movs	r3, #1
 8005884:	e000      	b.n	8005888 <LL_ADC_IsEnabled+0x1a>
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <LL_ADC_StartCalibration>:
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80058a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80058b0:	4313      	orrs	r3, r2
 80058b2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	609a      	str	r2, [r3, #8]
}
 80058ba:	bf00      	nop
 80058bc:	370c      	adds	r7, #12
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <LL_ADC_IsCalibrationOnGoing>:
{
 80058c6:	b480      	push	{r7}
 80058c8:	b083      	sub	sp, #12
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058da:	d101      	bne.n	80058e0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80058dc:	2301      	movs	r3, #1
 80058de:	e000      	b.n	80058e2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <LL_ADC_REG_IsConversionOngoing>:
{
 80058ee:	b480      	push	{r7}
 80058f0:	b083      	sub	sp, #12
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b04      	cmp	r3, #4
 8005900:	d101      	bne.n	8005906 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005902:	2301      	movs	r3, #1
 8005904:	e000      	b.n	8005908 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800591e:	2300      	movs	r3, #0
 8005920:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005928:	2b01      	cmp	r3, #1
 800592a:	d101      	bne.n	8005930 <HAL_ADCEx_Calibration_Start+0x1c>
 800592c:	2302      	movs	r3, #2
 800592e:	e04d      	b.n	80059cc <HAL_ADCEx_Calibration_Start+0xb8>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7ff fea5 	bl	8005688 <ADC_Disable>
 800593e:	4603      	mov	r3, r0
 8005940:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005942:	7bfb      	ldrb	r3, [r7, #15]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d136      	bne.n	80059b6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800594c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005950:	f023 0302 	bic.w	r3, r3, #2
 8005954:	f043 0202 	orr.w	r2, r3, #2
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff ff96 	bl	8005894 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005968:	e014      	b.n	8005994 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	3301      	adds	r3, #1
 800596e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	4a18      	ldr	r2, [pc, #96]	@ (80059d4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d90d      	bls.n	8005994 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800597c:	f023 0312 	bic.w	r3, r3, #18
 8005980:	f043 0210 	orr.w	r2, r3, #16
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005990:	2301      	movs	r3, #1
 8005992:	e01b      	b.n	80059cc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff ff94 	bl	80058c6 <LL_ADC_IsCalibrationOnGoing>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1e2      	bne.n	800596a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a8:	f023 0303 	bic.w	r3, r3, #3
 80059ac:	f043 0201 	orr.w	r2, r3, #1
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80059b4:	e005      	b.n	80059c2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059ba:	f043 0210 	orr.w	r2, r3, #16
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	0004de01 	.word	0x0004de01

080059d8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80059d8:	b590      	push	{r4, r7, lr}
 80059da:	b0a1      	sub	sp, #132	@ 0x84
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d101      	bne.n	80059f6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80059f2:	2302      	movs	r3, #2
 80059f4:	e0e7      	b.n	8005bc6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80059fe:	2300      	movs	r3, #0
 8005a00:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005a02:	2300      	movs	r3, #0
 8005a04:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a0e:	d102      	bne.n	8005a16 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005a10:	4b6f      	ldr	r3, [pc, #444]	@ (8005bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005a12:	60bb      	str	r3, [r7, #8]
 8005a14:	e009      	b.n	8005a2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a6e      	ldr	r2, [pc, #440]	@ (8005bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d102      	bne.n	8005a26 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005a20:	4b6d      	ldr	r3, [pc, #436]	@ (8005bd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005a22:	60bb      	str	r3, [r7, #8]
 8005a24:	e001      	b.n	8005a2a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005a26:	2300      	movs	r3, #0
 8005a28:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10b      	bne.n	8005a48 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a34:	f043 0220 	orr.w	r2, r3, #32
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e0be      	b.n	8005bc6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7ff ff4f 	bl	80058ee <LL_ADC_REG_IsConversionOngoing>
 8005a50:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff ff49 	bl	80058ee <LL_ADC_REG_IsConversionOngoing>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f040 80a0 	bne.w	8005ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005a64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f040 809c 	bne.w	8005ba4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a74:	d004      	beq.n	8005a80 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a55      	ldr	r2, [pc, #340]	@ (8005bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d101      	bne.n	8005a84 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005a80:	4b56      	ldr	r3, [pc, #344]	@ (8005bdc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005a82:	e000      	b.n	8005a86 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005a84:	4b56      	ldr	r3, [pc, #344]	@ (8005be0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005a86:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d04b      	beq.n	8005b28 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005a90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	6859      	ldr	r1, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005aa2:	035b      	lsls	r3, r3, #13
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005aaa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ab4:	d004      	beq.n	8005ac0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a45      	ldr	r2, [pc, #276]	@ (8005bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d10f      	bne.n	8005ae0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005ac0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005ac4:	f7ff fed3 	bl	800586e <LL_ADC_IsEnabled>
 8005ac8:	4604      	mov	r4, r0
 8005aca:	4841      	ldr	r0, [pc, #260]	@ (8005bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005acc:	f7ff fecf 	bl	800586e <LL_ADC_IsEnabled>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	4323      	orrs	r3, r4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	bf0c      	ite	eq
 8005ad8:	2301      	moveq	r3, #1
 8005ada:	2300      	movne	r3, #0
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	e012      	b.n	8005b06 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005ae0:	483c      	ldr	r0, [pc, #240]	@ (8005bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005ae2:	f7ff fec4 	bl	800586e <LL_ADC_IsEnabled>
 8005ae6:	4604      	mov	r4, r0
 8005ae8:	483b      	ldr	r0, [pc, #236]	@ (8005bd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005aea:	f7ff fec0 	bl	800586e <LL_ADC_IsEnabled>
 8005aee:	4603      	mov	r3, r0
 8005af0:	431c      	orrs	r4, r3
 8005af2:	483c      	ldr	r0, [pc, #240]	@ (8005be4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005af4:	f7ff febb 	bl	800586e <LL_ADC_IsEnabled>
 8005af8:	4603      	mov	r3, r0
 8005afa:	4323      	orrs	r3, r4
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	bf0c      	ite	eq
 8005b00:	2301      	moveq	r3, #1
 8005b02:	2300      	movne	r3, #0
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d056      	beq.n	8005bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005b12:	f023 030f 	bic.w	r3, r3, #15
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	6811      	ldr	r1, [r2, #0]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	6892      	ldr	r2, [r2, #8]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	431a      	orrs	r2, r3
 8005b22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b24:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005b26:	e047      	b.n	8005bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005b28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b32:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b3c:	d004      	beq.n	8005b48 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a23      	ldr	r2, [pc, #140]	@ (8005bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d10f      	bne.n	8005b68 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005b48:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005b4c:	f7ff fe8f 	bl	800586e <LL_ADC_IsEnabled>
 8005b50:	4604      	mov	r4, r0
 8005b52:	481f      	ldr	r0, [pc, #124]	@ (8005bd0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005b54:	f7ff fe8b 	bl	800586e <LL_ADC_IsEnabled>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	4323      	orrs	r3, r4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	bf0c      	ite	eq
 8005b60:	2301      	moveq	r3, #1
 8005b62:	2300      	movne	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	e012      	b.n	8005b8e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005b68:	481a      	ldr	r0, [pc, #104]	@ (8005bd4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005b6a:	f7ff fe80 	bl	800586e <LL_ADC_IsEnabled>
 8005b6e:	4604      	mov	r4, r0
 8005b70:	4819      	ldr	r0, [pc, #100]	@ (8005bd8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005b72:	f7ff fe7c 	bl	800586e <LL_ADC_IsEnabled>
 8005b76:	4603      	mov	r3, r0
 8005b78:	431c      	orrs	r4, r3
 8005b7a:	481a      	ldr	r0, [pc, #104]	@ (8005be4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005b7c:	f7ff fe77 	bl	800586e <LL_ADC_IsEnabled>
 8005b80:	4603      	mov	r3, r0
 8005b82:	4323      	orrs	r3, r4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	bf0c      	ite	eq
 8005b88:	2301      	moveq	r3, #1
 8005b8a:	2300      	movne	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d012      	beq.n	8005bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005b92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005b9a:	f023 030f 	bic.w	r3, r3, #15
 8005b9e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005ba0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ba2:	e009      	b.n	8005bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba8:	f043 0220 	orr.w	r2, r3, #32
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005bb6:	e000      	b.n	8005bba <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005bb8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005bc2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3784      	adds	r7, #132	@ 0x84
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd90      	pop	{r4, r7, pc}
 8005bce:	bf00      	nop
 8005bd0:	50000100 	.word	0x50000100
 8005bd4:	50000400 	.word	0x50000400
 8005bd8:	50000500 	.word	0x50000500
 8005bdc:	50000300 	.word	0x50000300
 8005be0:	50000700 	.word	0x50000700
 8005be4:	50000600 	.word	0x50000600

08005be8 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e023      	b.n	8005c42 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d106      	bne.n	8005c14 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7fd fed8 	bl	80039c4 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c90 <__NVIC_SetPriorityGrouping+0x44>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005c68:	4013      	ands	r3, r2
 8005c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005c74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005c78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c7e:	4a04      	ldr	r2, [pc, #16]	@ (8005c90 <__NVIC_SetPriorityGrouping+0x44>)
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	60d3      	str	r3, [r2, #12]
}
 8005c84:	bf00      	nop
 8005c86:	3714      	adds	r7, #20
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	e000ed00 	.word	0xe000ed00

08005c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c98:	4b04      	ldr	r3, [pc, #16]	@ (8005cac <__NVIC_GetPriorityGrouping+0x18>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	0a1b      	lsrs	r3, r3, #8
 8005c9e:	f003 0307 	and.w	r3, r3, #7
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr
 8005cac:	e000ed00 	.word	0xe000ed00

08005cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	db0b      	blt.n	8005cda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cc2:	79fb      	ldrb	r3, [r7, #7]
 8005cc4:	f003 021f 	and.w	r2, r3, #31
 8005cc8:	4907      	ldr	r1, [pc, #28]	@ (8005ce8 <__NVIC_EnableIRQ+0x38>)
 8005cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cce:	095b      	lsrs	r3, r3, #5
 8005cd0:	2001      	movs	r0, #1
 8005cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8005cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	e000e100 	.word	0xe000e100

08005cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	6039      	str	r1, [r7, #0]
 8005cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	db0a      	blt.n	8005d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	490c      	ldr	r1, [pc, #48]	@ (8005d38 <__NVIC_SetPriority+0x4c>)
 8005d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d0a:	0112      	lsls	r2, r2, #4
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	440b      	add	r3, r1
 8005d10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d14:	e00a      	b.n	8005d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	4908      	ldr	r1, [pc, #32]	@ (8005d3c <__NVIC_SetPriority+0x50>)
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	f003 030f 	and.w	r3, r3, #15
 8005d22:	3b04      	subs	r3, #4
 8005d24:	0112      	lsls	r2, r2, #4
 8005d26:	b2d2      	uxtb	r2, r2
 8005d28:	440b      	add	r3, r1
 8005d2a:	761a      	strb	r2, [r3, #24]
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr
 8005d38:	e000e100 	.word	0xe000e100
 8005d3c:	e000ed00 	.word	0xe000ed00

08005d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b089      	sub	sp, #36	@ 0x24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	f1c3 0307 	rsb	r3, r3, #7
 8005d5a:	2b04      	cmp	r3, #4
 8005d5c:	bf28      	it	cs
 8005d5e:	2304      	movcs	r3, #4
 8005d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	3304      	adds	r3, #4
 8005d66:	2b06      	cmp	r3, #6
 8005d68:	d902      	bls.n	8005d70 <NVIC_EncodePriority+0x30>
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	3b03      	subs	r3, #3
 8005d6e:	e000      	b.n	8005d72 <NVIC_EncodePriority+0x32>
 8005d70:	2300      	movs	r3, #0
 8005d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d74:	f04f 32ff 	mov.w	r2, #4294967295
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d7e:	43da      	mvns	r2, r3
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	401a      	ands	r2, r3
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d88:	f04f 31ff 	mov.w	r1, #4294967295
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d92:	43d9      	mvns	r1, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d98:	4313      	orrs	r3, r2
         );
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3724      	adds	r7, #36	@ 0x24
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
	...

08005da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b082      	sub	sp, #8
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	3b01      	subs	r3, #1
 8005db4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005db8:	d301      	bcc.n	8005dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e00f      	b.n	8005dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8005de8 <SysTick_Config+0x40>)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005dc6:	210f      	movs	r1, #15
 8005dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005dcc:	f7ff ff8e 	bl	8005cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dd0:	4b05      	ldr	r3, [pc, #20]	@ (8005de8 <SysTick_Config+0x40>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005dd6:	4b04      	ldr	r3, [pc, #16]	@ (8005de8 <SysTick_Config+0x40>)
 8005dd8:	2207      	movs	r2, #7
 8005dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	e000e010 	.word	0xe000e010

08005dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f7ff ff29 	bl	8005c4c <__NVIC_SetPriorityGrouping>
}
 8005dfa:	bf00      	nop
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b086      	sub	sp, #24
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	4603      	mov	r3, r0
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	607a      	str	r2, [r7, #4]
 8005e0e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e10:	f7ff ff40 	bl	8005c94 <__NVIC_GetPriorityGrouping>
 8005e14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	6978      	ldr	r0, [r7, #20]
 8005e1c:	f7ff ff90 	bl	8005d40 <NVIC_EncodePriority>
 8005e20:	4602      	mov	r2, r0
 8005e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e26:	4611      	mov	r1, r2
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff ff5f 	bl	8005cec <__NVIC_SetPriority>
}
 8005e2e:	bf00      	nop
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b082      	sub	sp, #8
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f7ff ff33 	bl	8005cb0 <__NVIC_EnableIRQ>
}
 8005e4a:	bf00      	nop
 8005e4c:	3708      	adds	r7, #8
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e52:	b580      	push	{r7, lr}
 8005e54:	b082      	sub	sp, #8
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f7ff ffa4 	bl	8005da8 <SysTick_Config>
 8005e60:	4603      	mov	r3, r0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b082      	sub	sp, #8
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e014      	b.n	8005ea6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	791b      	ldrb	r3, [r3, #4]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d105      	bne.n	8005e92 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7fd fdb9 	bl	8003a04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2202      	movs	r2, #2
 8005e96:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
	...

08005eb0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e056      	b.n	8005f72 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	795b      	ldrb	r3, [r3, #5]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_DAC_Start+0x20>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e050      	b.n	8005f72 <HAL_DAC_Start+0xc2>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2202      	movs	r2, #2
 8005eda:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6819      	ldr	r1, [r3, #0]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	f003 0310 	and.w	r3, r3, #16
 8005ee8:	2201      	movs	r2, #1
 8005eea:	409a      	lsls	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ef4:	4b22      	ldr	r3, [pc, #136]	@ (8005f80 <HAL_DAC_Start+0xd0>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	099b      	lsrs	r3, r3, #6
 8005efa:	4a22      	ldr	r2, [pc, #136]	@ (8005f84 <HAL_DAC_Start+0xd4>)
 8005efc:	fba2 2303 	umull	r2, r3, r2, r3
 8005f00:	099b      	lsrs	r3, r3, #6
 8005f02:	3301      	adds	r3, #1
 8005f04:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005f06:	e002      	b.n	8005f0e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3b01      	subs	r3, #1
 8005f0c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1f9      	bne.n	8005f08 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10f      	bne.n	8005f3a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d11d      	bne.n	8005f64 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f042 0201 	orr.w	r2, r2, #1
 8005f36:	605a      	str	r2, [r3, #4]
 8005f38:	e014      	b.n	8005f64 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	f003 0310 	and.w	r3, r3, #16
 8005f4a:	2102      	movs	r1, #2
 8005f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d107      	bne.n	8005f64 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0202 	orr.w	r2, r2, #2
 8005f62:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	2000002c 	.word	0x2000002c
 8005f84:	053e2d63 	.word	0x053e2d63

08005f88 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f9e:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01d      	beq.n	8005fe6 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d018      	beq.n	8005fe6 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2204      	movs	r2, #4
 8005fb8:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	f043 0201 	orr.w	r2, r3, #1
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005fce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005fde:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f854 	bl	800608e <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01d      	beq.n	800602c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d018      	beq.n	800602c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2204      	movs	r2, #4
 8005ffe:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	691b      	ldr	r3, [r3, #16]
 8006004:	f043 0202 	orr.w	r2, r3, #2
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006014:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8006024:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f9f4 	bl	8006414 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800602c:	bf00      	nop
 800602e:	3710      	adds	r7, #16
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d101      	bne.n	8006050 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e018      	b.n	8006082 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d105      	bne.n	800606e <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006062:	697a      	ldr	r2, [r7, #20]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4413      	add	r3, r2
 8006068:	3308      	adds	r3, #8
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	e004      	b.n	8006078 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4413      	add	r3, r2
 8006074:	3314      	adds	r3, #20
 8006076:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	461a      	mov	r2, r3
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	371c      	adds	r7, #28
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006096:	bf00      	nop
 8006098:	370c      	adds	r7, #12
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
	...

080060a4 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b08a      	sub	sp, #40	@ 0x28
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <HAL_DAC_ConfigChannel+0x1c>
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e19e      	b.n	8006402 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	795b      	ldrb	r3, [r3, #5]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_DAC_ConfigChannel+0x2c>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e198      	b.n	8006402 <HAL_DAC_ConfigChannel+0x35e>
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2201      	movs	r2, #1
 80060d4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2202      	movs	r2, #2
 80060da:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	2b04      	cmp	r3, #4
 80060e2:	d17a      	bne.n	80061da <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80060e4:	f7fe f8e4 	bl	80042b0 <HAL_GetTick>
 80060e8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d13d      	bne.n	800616c <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80060f0:	e018      	b.n	8006124 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80060f2:	f7fe f8dd 	bl	80042b0 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d911      	bls.n	8006124 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006106:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f043 0208 	orr.w	r2, r3, #8
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2203      	movs	r2, #3
 800611e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e16e      	b.n	8006402 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800612a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1df      	bne.n	80060f2 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800613a:	641a      	str	r2, [r3, #64]	@ 0x40
 800613c:	e020      	b.n	8006180 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800613e:	f7fe f8b7 	bl	80042b0 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	d90f      	bls.n	800616c <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006152:	2b00      	cmp	r3, #0
 8006154:	da0a      	bge.n	800616c <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	f043 0208 	orr.w	r2, r3, #8
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2203      	movs	r2, #3
 8006166:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e14a      	b.n	8006402 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006172:	2b00      	cmp	r3, #0
 8006174:	dbe3      	blt.n	800613e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800617e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006190:	fa01 f303 	lsl.w	r3, r1, r3
 8006194:	43db      	mvns	r3, r3
 8006196:	ea02 0103 	and.w	r1, r2, r3
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f003 0310 	and.w	r3, r3, #16
 80061a4:	409a      	lsls	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	430a      	orrs	r2, r1
 80061ac:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	21ff      	movs	r1, #255	@ 0xff
 80061bc:	fa01 f303 	lsl.w	r3, r1, r3
 80061c0:	43db      	mvns	r3, r3
 80061c2:	ea02 0103 	and.w	r1, r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	409a      	lsls	r2, r3
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	430a      	orrs	r2, r1
 80061d8:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d11d      	bne.n	800621e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f003 0310 	and.w	r3, r3, #16
 80061f0:	221f      	movs	r2, #31
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	43db      	mvns	r3, r3
 80061f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061fa:	4013      	ands	r3, r2
 80061fc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f003 0310 	and.w	r3, r3, #16
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006212:	4313      	orrs	r3, r2
 8006214:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800621c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006224:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	2207      	movs	r2, #7
 800622e:	fa02 f303 	lsl.w	r3, r2, r3
 8006232:	43db      	mvns	r3, r3
 8006234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006236:	4013      	ands	r3, r2
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d102      	bne.n	8006248 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8006242:	2300      	movs	r3, #0
 8006244:	623b      	str	r3, [r7, #32]
 8006246:	e00f      	b.n	8006268 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	2b02      	cmp	r3, #2
 800624e:	d102      	bne.n	8006256 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006250:	2301      	movs	r3, #1
 8006252:	623b      	str	r3, [r7, #32]
 8006254:	e008      	b.n	8006268 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d102      	bne.n	8006264 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800625e:	2301      	movs	r3, #1
 8006260:	623b      	str	r3, [r7, #32]
 8006262:	e001      	b.n	8006268 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006264:	2300      	movs	r3, #0
 8006266:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	4313      	orrs	r3, r2
 8006272:	6a3a      	ldr	r2, [r7, #32]
 8006274:	4313      	orrs	r3, r2
 8006276:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f003 0310 	and.w	r3, r3, #16
 800627e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006282:	fa02 f303 	lsl.w	r3, r2, r3
 8006286:	43db      	mvns	r3, r3
 8006288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800628a:	4013      	ands	r3, r2
 800628c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	791b      	ldrb	r3, [r3, #4]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d102      	bne.n	800629c <HAL_DAC_ConfigChannel+0x1f8>
 8006296:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800629a:	e000      	b.n	800629e <HAL_DAC_ConfigChannel+0x1fa>
 800629c:	2300      	movs	r3, #0
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f003 0310 	and.w	r3, r3, #16
 80062aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062ae:	fa02 f303 	lsl.w	r3, r2, r3
 80062b2:	43db      	mvns	r3, r3
 80062b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b6:	4013      	ands	r3, r2
 80062b8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	795b      	ldrb	r3, [r3, #5]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d102      	bne.n	80062c8 <HAL_DAC_ConfigChannel+0x224>
 80062c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062c6:	e000      	b.n	80062ca <HAL_DAC_ConfigChannel+0x226>
 80062c8:	2300      	movs	r3, #0
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80062d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80062d6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d114      	bne.n	800630a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80062e0:	f002 ff7a 	bl	80091d8 <HAL_RCC_GetHCLKFreq>
 80062e4:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4a48      	ldr	r2, [pc, #288]	@ (800640c <HAL_DAC_ConfigChannel+0x368>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d904      	bls.n	80062f8 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80062f6:	e00f      	b.n	8006318 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	4a45      	ldr	r2, [pc, #276]	@ (8006410 <HAL_DAC_ConfigChannel+0x36c>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d90a      	bls.n	8006316 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006306:	627b      	str	r3, [r7, #36]	@ 0x24
 8006308:	e006      	b.n	8006318 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006310:	4313      	orrs	r3, r2
 8006312:	627b      	str	r3, [r7, #36]	@ 0x24
 8006314:	e000      	b.n	8006318 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006316:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f003 0310 	and.w	r3, r3, #16
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	fa02 f303 	lsl.w	r3, r2, r3
 8006324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006326:	4313      	orrs	r3, r2
 8006328:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006330:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6819      	ldr	r1, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f003 0310 	and.w	r3, r3, #16
 800633e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006342:	fa02 f303 	lsl.w	r3, r2, r3
 8006346:	43da      	mvns	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	400a      	ands	r2, r1
 800634e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f003 0310 	and.w	r3, r3, #16
 800635e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006362:	fa02 f303 	lsl.w	r3, r2, r3
 8006366:	43db      	mvns	r3, r3
 8006368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800636a:	4013      	ands	r3, r2
 800636c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f003 0310 	and.w	r3, r3, #16
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	fa02 f303 	lsl.w	r3, r2, r3
 8006380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006382:	4313      	orrs	r3, r2
 8006384:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800638c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	6819      	ldr	r1, [r3, #0]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f003 0310 	and.w	r3, r3, #16
 800639a:	22c0      	movs	r2, #192	@ 0xc0
 800639c:	fa02 f303 	lsl.w	r3, r2, r3
 80063a0:	43da      	mvns	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	400a      	ands	r2, r1
 80063a8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	089b      	lsrs	r3, r3, #2
 80063b0:	f003 030f 	and.w	r3, r3, #15
 80063b4:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	089b      	lsrs	r3, r3, #2
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f003 0310 	and.w	r3, r3, #16
 80063d4:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80063d8:	fa01 f303 	lsl.w	r3, r1, r3
 80063dc:	43db      	mvns	r3, r3
 80063de:	ea02 0103 	and.w	r1, r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f003 0310 	and.w	r3, r3, #16
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	409a      	lsls	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	430a      	orrs	r2, r1
 80063f2:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2201      	movs	r2, #1
 80063f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006400:	7ffb      	ldrb	r3, [r7, #31]
}
 8006402:	4618      	mov	r0, r3
 8006404:	3728      	adds	r7, #40	@ 0x28
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	09896800 	.word	0x09896800
 8006410:	04c4b400 	.word	0x04c4b400

08006414 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800641c:	bf00      	nop
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e08d      	b.n	8006556 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	461a      	mov	r2, r3
 8006440:	4b47      	ldr	r3, [pc, #284]	@ (8006560 <HAL_DMA_Init+0x138>)
 8006442:	429a      	cmp	r2, r3
 8006444:	d80f      	bhi.n	8006466 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	4b45      	ldr	r3, [pc, #276]	@ (8006564 <HAL_DMA_Init+0x13c>)
 800644e:	4413      	add	r3, r2
 8006450:	4a45      	ldr	r2, [pc, #276]	@ (8006568 <HAL_DMA_Init+0x140>)
 8006452:	fba2 2303 	umull	r2, r3, r2, r3
 8006456:	091b      	lsrs	r3, r3, #4
 8006458:	009a      	lsls	r2, r3, #2
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a42      	ldr	r2, [pc, #264]	@ (800656c <HAL_DMA_Init+0x144>)
 8006462:	641a      	str	r2, [r3, #64]	@ 0x40
 8006464:	e00e      	b.n	8006484 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	4b40      	ldr	r3, [pc, #256]	@ (8006570 <HAL_DMA_Init+0x148>)
 800646e:	4413      	add	r3, r2
 8006470:	4a3d      	ldr	r2, [pc, #244]	@ (8006568 <HAL_DMA_Init+0x140>)
 8006472:	fba2 2303 	umull	r2, r3, r2, r3
 8006476:	091b      	lsrs	r3, r3, #4
 8006478:	009a      	lsls	r2, r3, #2
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a3c      	ldr	r2, [pc, #240]	@ (8006574 <HAL_DMA_Init+0x14c>)
 8006482:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800649a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800649e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80064a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	699b      	ldr	r3, [r3, #24]
 80064ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f9b6 	bl	8006848 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064e4:	d102      	bne.n	80064ec <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006500:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d010      	beq.n	800652c <HAL_DMA_Init+0x104>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2b04      	cmp	r3, #4
 8006510:	d80c      	bhi.n	800652c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f9d6 	bl	80068c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006528:	605a      	str	r2, [r3, #4]
 800652a:	e008      	b.n	800653e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2200      	movs	r2, #0
 8006536:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	40020407 	.word	0x40020407
 8006564:	bffdfff8 	.word	0xbffdfff8
 8006568:	cccccccd 	.word	0xcccccccd
 800656c:	40020000 	.word	0x40020000
 8006570:	bffdfbf8 	.word	0xbffdfbf8
 8006574:	40020400 	.word	0x40020400

08006578 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
 8006584:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006590:	2b01      	cmp	r3, #1
 8006592:	d101      	bne.n	8006598 <HAL_DMA_Start_IT+0x20>
 8006594:	2302      	movs	r3, #2
 8006596:	e066      	b.n	8006666 <HAL_DMA_Start_IT+0xee>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d155      	bne.n	8006658 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2200      	movs	r2, #0
 80065b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f022 0201 	bic.w	r2, r2, #1
 80065c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	68b9      	ldr	r1, [r7, #8]
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f000 f8fb 	bl	80067cc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d008      	beq.n	80065f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f042 020e 	orr.w	r2, r2, #14
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e00f      	b.n	8006610 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f022 0204 	bic.w	r2, r2, #4
 80065fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f042 020a 	orr.w	r2, r2, #10
 800660e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d007      	beq.n	800662e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006628:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800662c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006640:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006644:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f042 0201 	orr.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	e005      	b.n	8006664 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006660:	2302      	movs	r3, #2
 8006662:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006664:	7dfb      	ldrb	r3, [r7, #23]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b084      	sub	sp, #16
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800668a:	f003 031f 	and.w	r3, r3, #31
 800668e:	2204      	movs	r2, #4
 8006690:	409a      	lsls	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	4013      	ands	r3, r2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d026      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x7a>
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f003 0304 	and.w	r3, r3, #4
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d021      	beq.n	80066e8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0320 	and.w	r3, r3, #32
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d107      	bne.n	80066c2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0204 	bic.w	r2, r2, #4
 80066c0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c6:	f003 021f 	and.w	r2, r3, #31
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ce:	2104      	movs	r1, #4
 80066d0:	fa01 f202 	lsl.w	r2, r1, r2
 80066d4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d071      	beq.n	80067c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80066e6:	e06c      	b.n	80067c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ec:	f003 031f 	and.w	r3, r3, #31
 80066f0:	2202      	movs	r2, #2
 80066f2:	409a      	lsls	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4013      	ands	r3, r2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d02e      	beq.n	800675a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d029      	beq.n	800675a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f003 0320 	and.w	r3, r3, #32
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10b      	bne.n	800672c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f022 020a 	bic.w	r2, r2, #10
 8006722:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006730:	f003 021f 	and.w	r2, r3, #31
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006738:	2102      	movs	r1, #2
 800673a:	fa01 f202 	lsl.w	r2, r1, r2
 800673e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d038      	beq.n	80067c2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006758:	e033      	b.n	80067c2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800675e:	f003 031f 	and.w	r3, r3, #31
 8006762:	2208      	movs	r2, #8
 8006764:	409a      	lsls	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	4013      	ands	r3, r2
 800676a:	2b00      	cmp	r3, #0
 800676c:	d02a      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f003 0308 	and.w	r3, r3, #8
 8006774:	2b00      	cmp	r3, #0
 8006776:	d025      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 020e 	bic.w	r2, r2, #14
 8006786:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800678c:	f003 021f 	and.w	r2, r3, #31
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006794:	2101      	movs	r1, #1
 8006796:	fa01 f202 	lsl.w	r2, r1, r2
 800679a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d004      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80067c2:	bf00      	nop
 80067c4:	bf00      	nop
}
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
 80067d8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80067e2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d004      	beq.n	80067f6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80067f4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067fa:	f003 021f 	and.w	r2, r3, #31
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006802:	2101      	movs	r1, #1
 8006804:	fa01 f202 	lsl.w	r2, r1, r2
 8006808:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b10      	cmp	r3, #16
 8006818:	d108      	bne.n	800682c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800682a:	e007      	b.n	800683c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	60da      	str	r2, [r3, #12]
}
 800683c:	bf00      	nop
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	461a      	mov	r2, r3
 8006856:	4b16      	ldr	r3, [pc, #88]	@ (80068b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006858:	429a      	cmp	r2, r3
 800685a:	d802      	bhi.n	8006862 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800685c:	4b15      	ldr	r3, [pc, #84]	@ (80068b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e001      	b.n	8006866 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006862:	4b15      	ldr	r3, [pc, #84]	@ (80068b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006864:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	b2db      	uxtb	r3, r3
 8006870:	3b08      	subs	r3, #8
 8006872:	4a12      	ldr	r2, [pc, #72]	@ (80068bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006874:	fba2 2303 	umull	r2, r3, r2, r3
 8006878:	091b      	lsrs	r3, r3, #4
 800687a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006880:	089b      	lsrs	r3, r3, #2
 8006882:	009a      	lsls	r2, r3, #2
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	4413      	add	r3, r2
 8006888:	461a      	mov	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a0b      	ldr	r2, [pc, #44]	@ (80068c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006892:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f003 031f 	and.w	r3, r3, #31
 800689a:	2201      	movs	r2, #1
 800689c:	409a      	lsls	r2, r3
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40020407 	.word	0x40020407
 80068b4:	40020800 	.word	0x40020800
 80068b8:	40020820 	.word	0x40020820
 80068bc:	cccccccd 	.word	0xcccccccd
 80068c0:	40020880 	.word	0x40020880

080068c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006904 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80068d8:	4413      	add	r3, r2
 80068da:	009b      	lsls	r3, r3, #2
 80068dc:	461a      	mov	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a08      	ldr	r2, [pc, #32]	@ (8006908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80068e6:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	f003 031f 	and.w	r3, r3, #31
 80068f0:	2201      	movs	r2, #1
 80068f2:	409a      	lsls	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	1000823f 	.word	0x1000823f
 8006908:	40020940 	.word	0x40020940

0800690c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800691a:	e15a      	b.n	8006bd2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	2101      	movs	r1, #1
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	fa01 f303 	lsl.w	r3, r1, r3
 8006928:	4013      	ands	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 814c 	beq.w	8006bcc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f003 0303 	and.w	r3, r3, #3
 800693c:	2b01      	cmp	r3, #1
 800693e:	d005      	beq.n	800694c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006948:	2b02      	cmp	r3, #2
 800694a:	d130      	bne.n	80069ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	005b      	lsls	r3, r3, #1
 8006956:	2203      	movs	r2, #3
 8006958:	fa02 f303 	lsl.w	r3, r2, r3
 800695c:	43db      	mvns	r3, r3
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4013      	ands	r3, r2
 8006962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	005b      	lsls	r3, r3, #1
 800696c:	fa02 f303 	lsl.w	r3, r2, r3
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	4313      	orrs	r3, r2
 8006974:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006982:	2201      	movs	r2, #1
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	43db      	mvns	r3, r3
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4013      	ands	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	091b      	lsrs	r3, r3, #4
 8006998:	f003 0201 	and.w	r2, r3, #1
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	fa02 f303 	lsl.w	r3, r2, r3
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d017      	beq.n	80069ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	005b      	lsls	r3, r3, #1
 80069c4:	2203      	movs	r2, #3
 80069c6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ca:	43db      	mvns	r3, r3
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	4013      	ands	r3, r2
 80069d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	689a      	ldr	r2, [r3, #8]
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	005b      	lsls	r3, r3, #1
 80069da:	fa02 f303 	lsl.w	r3, r2, r3
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	f003 0303 	and.w	r3, r3, #3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d123      	bne.n	8006a3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80069f6:	697b      	ldr	r3, [r7, #20]
 80069f8:	08da      	lsrs	r2, r3, #3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	3208      	adds	r2, #8
 80069fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	f003 0307 	and.w	r3, r3, #7
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	220f      	movs	r2, #15
 8006a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a12:	43db      	mvns	r3, r3
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	4013      	ands	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	691a      	ldr	r2, [r3, #16]
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	08da      	lsrs	r2, r3, #3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3208      	adds	r2, #8
 8006a38:	6939      	ldr	r1, [r7, #16]
 8006a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	005b      	lsls	r3, r3, #1
 8006a48:	2203      	movs	r2, #3
 8006a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4e:	43db      	mvns	r3, r3
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4013      	ands	r3, r2
 8006a54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f003 0203 	and.w	r2, r3, #3
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	693a      	ldr	r2, [r7, #16]
 8006a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 80a6 	beq.w	8006bcc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a80:	4b5b      	ldr	r3, [pc, #364]	@ (8006bf0 <HAL_GPIO_Init+0x2e4>)
 8006a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a84:	4a5a      	ldr	r2, [pc, #360]	@ (8006bf0 <HAL_GPIO_Init+0x2e4>)
 8006a86:	f043 0301 	orr.w	r3, r3, #1
 8006a8a:	6613      	str	r3, [r2, #96]	@ 0x60
 8006a8c:	4b58      	ldr	r3, [pc, #352]	@ (8006bf0 <HAL_GPIO_Init+0x2e4>)
 8006a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a90:	f003 0301 	and.w	r3, r3, #1
 8006a94:	60bb      	str	r3, [r7, #8]
 8006a96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a98:	4a56      	ldr	r2, [pc, #344]	@ (8006bf4 <HAL_GPIO_Init+0x2e8>)
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	089b      	lsrs	r3, r3, #2
 8006a9e:	3302      	adds	r3, #2
 8006aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	f003 0303 	and.w	r3, r3, #3
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	220f      	movs	r2, #15
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006ac2:	d01f      	beq.n	8006b04 <HAL_GPIO_Init+0x1f8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	4a4c      	ldr	r2, [pc, #304]	@ (8006bf8 <HAL_GPIO_Init+0x2ec>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d019      	beq.n	8006b00 <HAL_GPIO_Init+0x1f4>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a4b      	ldr	r2, [pc, #300]	@ (8006bfc <HAL_GPIO_Init+0x2f0>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d013      	beq.n	8006afc <HAL_GPIO_Init+0x1f0>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a4a      	ldr	r2, [pc, #296]	@ (8006c00 <HAL_GPIO_Init+0x2f4>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d00d      	beq.n	8006af8 <HAL_GPIO_Init+0x1ec>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a49      	ldr	r2, [pc, #292]	@ (8006c04 <HAL_GPIO_Init+0x2f8>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d007      	beq.n	8006af4 <HAL_GPIO_Init+0x1e8>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	4a48      	ldr	r2, [pc, #288]	@ (8006c08 <HAL_GPIO_Init+0x2fc>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d101      	bne.n	8006af0 <HAL_GPIO_Init+0x1e4>
 8006aec:	2305      	movs	r3, #5
 8006aee:	e00a      	b.n	8006b06 <HAL_GPIO_Init+0x1fa>
 8006af0:	2306      	movs	r3, #6
 8006af2:	e008      	b.n	8006b06 <HAL_GPIO_Init+0x1fa>
 8006af4:	2304      	movs	r3, #4
 8006af6:	e006      	b.n	8006b06 <HAL_GPIO_Init+0x1fa>
 8006af8:	2303      	movs	r3, #3
 8006afa:	e004      	b.n	8006b06 <HAL_GPIO_Init+0x1fa>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e002      	b.n	8006b06 <HAL_GPIO_Init+0x1fa>
 8006b00:	2301      	movs	r3, #1
 8006b02:	e000      	b.n	8006b06 <HAL_GPIO_Init+0x1fa>
 8006b04:	2300      	movs	r3, #0
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	f002 0203 	and.w	r2, r2, #3
 8006b0c:	0092      	lsls	r2, r2, #2
 8006b0e:	4093      	lsls	r3, r2
 8006b10:	693a      	ldr	r2, [r7, #16]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006b16:	4937      	ldr	r1, [pc, #220]	@ (8006bf4 <HAL_GPIO_Init+0x2e8>)
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	089b      	lsrs	r3, r3, #2
 8006b1c:	3302      	adds	r3, #2
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b24:	4b39      	ldr	r3, [pc, #228]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4013      	ands	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006b48:	4a30      	ldr	r2, [pc, #192]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	43db      	mvns	r3, r3
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006b72:	4a26      	ldr	r2, [pc, #152]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006b78:	4b24      	ldr	r3, [pc, #144]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	43db      	mvns	r3, r3
 8006b82:	693a      	ldr	r2, [r7, #16]
 8006b84:	4013      	ands	r3, r2
 8006b86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d003      	beq.n	8006b9c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006ba2:	4b1a      	ldr	r3, [pc, #104]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	43db      	mvns	r3, r3
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4013      	ands	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d003      	beq.n	8006bc6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006bc6:	4a11      	ldr	r2, [pc, #68]	@ (8006c0c <HAL_GPIO_Init+0x300>)
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f47f ae9d 	bne.w	800691c <HAL_GPIO_Init+0x10>
  }
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	40021000 	.word	0x40021000
 8006bf4:	40010000 	.word	0x40010000
 8006bf8:	48000400 	.word	0x48000400
 8006bfc:	48000800 	.word	0x48000800
 8006c00:	48000c00 	.word	0x48000c00
 8006c04:	48001000 	.word	0x48001000
 8006c08:	48001400 	.word	0x48001400
 8006c0c:	40010400 	.word	0x40010400

08006c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	887b      	ldrh	r3, [r7, #2]
 8006c22:	4013      	ands	r3, r2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d002      	beq.n	8006c2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	73fb      	strb	r3, [r7, #15]
 8006c2c:	e001      	b.n	8006c32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	460b      	mov	r3, r1
 8006c4a:	807b      	strh	r3, [r7, #2]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c50:	787b      	ldrb	r3, [r7, #1]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c56:	887a      	ldrh	r2, [r7, #2]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c5c:	e002      	b.n	8006c64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c5e:	887a      	ldrh	r2, [r7, #2]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	460b      	mov	r3, r1
 8006c7a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006c82:	887a      	ldrh	r2, [r7, #2]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	4013      	ands	r3, r2
 8006c88:	041a      	lsls	r2, r3, #16
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	43d9      	mvns	r1, r3
 8006c8e:	887b      	ldrh	r3, [r7, #2]
 8006c90:	400b      	ands	r3, r1
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	619a      	str	r2, [r3, #24]
}
 8006c98:	bf00      	nop
 8006c9a:	3714      	adds	r7, #20
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e0c0      	b.n	8006e38 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d106      	bne.n	8006cd0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f009 fa22 	bl	8010114 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2203      	movs	r2, #3
 8006cd4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f005 f856 	bl	800bd8e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]
 8006ce6:	e03e      	b.n	8006d66 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006ce8:	7bfa      	ldrb	r2, [r7, #15]
 8006cea:	6879      	ldr	r1, [r7, #4]
 8006cec:	4613      	mov	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	440b      	add	r3, r1
 8006cf6:	3311      	adds	r3, #17
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006cfc:	7bfa      	ldrb	r2, [r7, #15]
 8006cfe:	6879      	ldr	r1, [r7, #4]
 8006d00:	4613      	mov	r3, r2
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	4413      	add	r3, r2
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	440b      	add	r3, r1
 8006d0a:	3310      	adds	r3, #16
 8006d0c:	7bfa      	ldrb	r2, [r7, #15]
 8006d0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006d10:	7bfa      	ldrb	r2, [r7, #15]
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	4613      	mov	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	4413      	add	r3, r2
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	440b      	add	r3, r1
 8006d1e:	3313      	adds	r3, #19
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006d24:	7bfa      	ldrb	r2, [r7, #15]
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	440b      	add	r3, r1
 8006d32:	3320      	adds	r3, #32
 8006d34:	2200      	movs	r2, #0
 8006d36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006d38:	7bfa      	ldrb	r2, [r7, #15]
 8006d3a:	6879      	ldr	r1, [r7, #4]
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	4413      	add	r3, r2
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	440b      	add	r3, r1
 8006d46:	3324      	adds	r3, #36	@ 0x24
 8006d48:	2200      	movs	r2, #0
 8006d4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	4613      	mov	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4413      	add	r3, r2
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	440b      	add	r3, r1
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d60:	7bfb      	ldrb	r3, [r7, #15]
 8006d62:	3301      	adds	r3, #1
 8006d64:	73fb      	strb	r3, [r7, #15]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	791b      	ldrb	r3, [r3, #4]
 8006d6a:	7bfa      	ldrb	r2, [r7, #15]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d3bb      	bcc.n	8006ce8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d70:	2300      	movs	r3, #0
 8006d72:	73fb      	strb	r3, [r7, #15]
 8006d74:	e044      	b.n	8006e00 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d76:	7bfa      	ldrb	r2, [r7, #15]
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	00db      	lsls	r3, r3, #3
 8006d82:	440b      	add	r3, r1
 8006d84:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006d88:	2200      	movs	r2, #0
 8006d8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006d8c:	7bfa      	ldrb	r2, [r7, #15]
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	440b      	add	r3, r1
 8006d9a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006d9e:	7bfa      	ldrb	r2, [r7, #15]
 8006da0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006da2:	7bfa      	ldrb	r2, [r7, #15]
 8006da4:	6879      	ldr	r1, [r7, #4]
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	00db      	lsls	r3, r3, #3
 8006dae:	440b      	add	r3, r1
 8006db0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006db8:	7bfa      	ldrb	r2, [r7, #15]
 8006dba:	6879      	ldr	r1, [r7, #4]
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	4413      	add	r3, r2
 8006dc2:	00db      	lsls	r3, r3, #3
 8006dc4:	440b      	add	r3, r1
 8006dc6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006dca:	2200      	movs	r2, #0
 8006dcc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006dce:	7bfa      	ldrb	r2, [r7, #15]
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	00db      	lsls	r3, r3, #3
 8006dda:	440b      	add	r3, r1
 8006ddc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006de4:	7bfa      	ldrb	r2, [r7, #15]
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	440b      	add	r3, r1
 8006df2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006df6:	2200      	movs	r2, #0
 8006df8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dfa:	7bfb      	ldrb	r3, [r7, #15]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	73fb      	strb	r3, [r7, #15]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	791b      	ldrb	r3, [r3, #4]
 8006e04:	7bfa      	ldrb	r2, [r7, #15]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d3b5      	bcc.n	8006d76 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6818      	ldr	r0, [r3, #0]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3304      	adds	r3, #4
 8006e12:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006e16:	f004 ffd5 	bl	800bdc4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	7a9b      	ldrb	r3, [r3, #10]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d102      	bne.n	8006e36 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 fc42 	bl	80086ba <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d101      	bne.n	8006e56 <HAL_PCD_Start+0x16>
 8006e52:	2302      	movs	r3, #2
 8006e54:	e012      	b.n	8006e7c <HAL_PCD_Start+0x3c>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f004 ff7c 	bl	800bd60 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f007 fa3d 	bl	800e2ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3708      	adds	r7, #8
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f007 fa42 	bl	800e31a <USB_ReadInterrupts>
 8006e96:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fb06 	bl	80074b4 <PCD_EP_ISR_Handler>

    return;
 8006ea8:	e110      	b.n	80070cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d013      	beq.n	8006edc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ec6:	b292      	uxth	r2, r2
 8006ec8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f009 f9b2 	bl	8010236 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006ed2:	2100      	movs	r1, #0
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f8fc 	bl	80070d2 <HAL_PCD_SetAddress>

    return;
 8006eda:	e0f7      	b.n	80070cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00c      	beq.n	8006f00 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ef8:	b292      	uxth	r2, r2
 8006efa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006efe:	e0e5      	b.n	80070cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00c      	beq.n	8006f24 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f1c:	b292      	uxth	r2, r2
 8006f1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006f22:	e0d3      	b.n	80070cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d034      	beq.n	8006f98 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0204 	bic.w	r2, r2, #4
 8006f40:	b292      	uxth	r2, r2
 8006f42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0208 	bic.w	r2, r2, #8
 8006f58:	b292      	uxth	r2, r2
 8006f5a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d107      	bne.n	8006f78 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006f70:	2100      	movs	r1, #0
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f009 fb52 	bl	801061c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f009 f995 	bl	80102a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006f90:	b292      	uxth	r2, r2
 8006f92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006f96:	e099      	b.n	80070cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d027      	beq.n	8006ff2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006faa:	b29a      	uxth	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0208 	orr.w	r2, r2, #8
 8006fb4:	b292      	uxth	r2, r2
 8006fb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fcc:	b292      	uxth	r2, r2
 8006fce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006fda:	b29a      	uxth	r2, r3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f042 0204 	orr.w	r2, r2, #4
 8006fe4:	b292      	uxth	r2, r2
 8006fe6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f009 f942 	bl	8010274 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006ff0:	e06c      	b.n	80070cc <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d040      	beq.n	800707e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007004:	b29a      	uxth	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800700e:	b292      	uxth	r2, r2
 8007010:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d12b      	bne.n	8007076 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007026:	b29a      	uxth	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f042 0204 	orr.w	r2, r2, #4
 8007030:	b292      	uxth	r2, r2
 8007032:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800703e:	b29a      	uxth	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f042 0208 	orr.w	r2, r2, #8
 8007048:	b292      	uxth	r2, r2
 800704a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800705e:	b29b      	uxth	r3, r3
 8007060:	089b      	lsrs	r3, r3, #2
 8007062:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800706c:	2101      	movs	r1, #1
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f009 fad4 	bl	801061c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8007074:	e02a      	b.n	80070cc <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f009 f8fc 	bl	8010274 <HAL_PCD_SuspendCallback>
    return;
 800707c:	e026      	b.n	80070cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00f      	beq.n	80070a8 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007090:	b29a      	uxth	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800709a:	b292      	uxth	r2, r2
 800709c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f009 f8ba 	bl	801021a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80070a6:	e011      	b.n	80070cc <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00c      	beq.n	80070cc <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80070c4:	b292      	uxth	r2, r2
 80070c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80070ca:	bf00      	nop
  }
}
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d101      	bne.n	80070ec <HAL_PCD_SetAddress+0x1a>
 80070e8:	2302      	movs	r3, #2
 80070ea:	e012      	b.n	8007112 <HAL_PCD_SetAddress+0x40>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	78fa      	ldrb	r2, [r7, #3]
 80070f8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	78fa      	ldrb	r2, [r7, #3]
 8007100:	4611      	mov	r1, r2
 8007102:	4618      	mov	r0, r3
 8007104:	f007 f8de 	bl	800e2c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	4608      	mov	r0, r1
 8007124:	4611      	mov	r1, r2
 8007126:	461a      	mov	r2, r3
 8007128:	4603      	mov	r3, r0
 800712a:	70fb      	strb	r3, [r7, #3]
 800712c:	460b      	mov	r3, r1
 800712e:	803b      	strh	r3, [r7, #0]
 8007130:	4613      	mov	r3, r2
 8007132:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800713c:	2b00      	cmp	r3, #0
 800713e:	da0e      	bge.n	800715e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	f003 0207 	and.w	r2, r3, #7
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	3310      	adds	r3, #16
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	4413      	add	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	705a      	strb	r2, [r3, #1]
 800715c:	e00e      	b.n	800717c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800715e:	78fb      	ldrb	r3, [r7, #3]
 8007160:	f003 0207 	and.w	r2, r3, #7
 8007164:	4613      	mov	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4413      	add	r3, r2
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	4413      	add	r3, r2
 8007174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2200      	movs	r2, #0
 800717a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800717c:	78fb      	ldrb	r3, [r7, #3]
 800717e:	f003 0307 	and.w	r3, r3, #7
 8007182:	b2da      	uxtb	r2, r3
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007188:	883b      	ldrh	r3, [r7, #0]
 800718a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	78ba      	ldrb	r2, [r7, #2]
 8007196:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007198:	78bb      	ldrb	r3, [r7, #2]
 800719a:	2b02      	cmp	r3, #2
 800719c:	d102      	bne.n	80071a4 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d101      	bne.n	80071b2 <HAL_PCD_EP_Open+0x98>
 80071ae:	2302      	movs	r3, #2
 80071b0:	e00e      	b.n	80071d0 <HAL_PCD_EP_Open+0xb6>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68f9      	ldr	r1, [r7, #12]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f004 fe1d 	bl	800be00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80071ce:	7afb      	ldrb	r3, [r7, #11]
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	460b      	mov	r3, r1
 80071e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80071e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	da0e      	bge.n	800720a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071ec:	78fb      	ldrb	r3, [r7, #3]
 80071ee:	f003 0207 	and.w	r2, r3, #7
 80071f2:	4613      	mov	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4413      	add	r3, r2
 80071f8:	00db      	lsls	r3, r3, #3
 80071fa:	3310      	adds	r3, #16
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	4413      	add	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2201      	movs	r2, #1
 8007206:	705a      	strb	r2, [r3, #1]
 8007208:	e00e      	b.n	8007228 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800720a:	78fb      	ldrb	r3, [r7, #3]
 800720c:	f003 0207 	and.w	r2, r3, #7
 8007210:	4613      	mov	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	00db      	lsls	r3, r3, #3
 8007218:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	4413      	add	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007228:	78fb      	ldrb	r3, [r7, #3]
 800722a:	f003 0307 	and.w	r3, r3, #7
 800722e:	b2da      	uxtb	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800723a:	2b01      	cmp	r3, #1
 800723c:	d101      	bne.n	8007242 <HAL_PCD_EP_Close+0x6a>
 800723e:	2302      	movs	r3, #2
 8007240:	e00e      	b.n	8007260 <HAL_PCD_EP_Close+0x88>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2201      	movs	r2, #1
 8007246:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68f9      	ldr	r1, [r7, #12]
 8007250:	4618      	mov	r0, r3
 8007252:	f005 f999 	bl	800c588 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	607a      	str	r2, [r7, #4]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	460b      	mov	r3, r1
 8007276:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007278:	7afb      	ldrb	r3, [r7, #11]
 800727a:	f003 0207 	and.w	r2, r3, #7
 800727e:	4613      	mov	r3, r2
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	4413      	add	r3, r2
 8007284:	00db      	lsls	r3, r3, #3
 8007286:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	4413      	add	r3, r2
 800728e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	2200      	movs	r2, #0
 80072a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2200      	movs	r2, #0
 80072a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072a8:	7afb      	ldrb	r3, [r7, #11]
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6979      	ldr	r1, [r7, #20]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f005 fb51 	bl	800c962 <USB_EPStartXfer>

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3718      	adds	r7, #24
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b083      	sub	sp, #12
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	460b      	mov	r3, r1
 80072d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80072d6:	78fb      	ldrb	r3, [r7, #3]
 80072d8:	f003 0207 	and.w	r2, r3, #7
 80072dc:	6879      	ldr	r1, [r7, #4]
 80072de:	4613      	mov	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4413      	add	r3, r2
 80072e4:	00db      	lsls	r3, r3, #3
 80072e6:	440b      	add	r3, r1
 80072e8:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80072ec:	681b      	ldr	r3, [r3, #0]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b086      	sub	sp, #24
 80072fe:	af00      	add	r7, sp, #0
 8007300:	60f8      	str	r0, [r7, #12]
 8007302:	607a      	str	r2, [r7, #4]
 8007304:	603b      	str	r3, [r7, #0]
 8007306:	460b      	mov	r3, r1
 8007308:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800730a:	7afb      	ldrb	r3, [r7, #11]
 800730c:	f003 0207 	and.w	r2, r3, #7
 8007310:	4613      	mov	r3, r2
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	00db      	lsls	r3, r3, #3
 8007318:	3310      	adds	r3, #16
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	4413      	add	r3, r2
 800731e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8007334:	697b      	ldr	r3, [r7, #20]
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	2200      	movs	r2, #0
 800733e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	2201      	movs	r2, #1
 8007344:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007346:	7afb      	ldrb	r3, [r7, #11]
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	b2da      	uxtb	r2, r3
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6979      	ldr	r1, [r7, #20]
 8007358:	4618      	mov	r0, r3
 800735a:	f005 fb02 	bl	800c962 <USB_EPStartXfer>

  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3718      	adds	r7, #24
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	f003 0307 	and.w	r3, r3, #7
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	7912      	ldrb	r2, [r2, #4]
 800737e:	4293      	cmp	r3, r2
 8007380:	d901      	bls.n	8007386 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e03e      	b.n	8007404 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007386:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800738a:	2b00      	cmp	r3, #0
 800738c:	da0e      	bge.n	80073ac <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	f003 0207 	and.w	r2, r3, #7
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	00db      	lsls	r3, r3, #3
 800739c:	3310      	adds	r3, #16
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	4413      	add	r3, r2
 80073a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	2201      	movs	r2, #1
 80073a8:	705a      	strb	r2, [r3, #1]
 80073aa:	e00c      	b.n	80073c6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80073ac:	78fa      	ldrb	r2, [r7, #3]
 80073ae:	4613      	mov	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	4413      	add	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2201      	movs	r2, #1
 80073ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073cc:	78fb      	ldrb	r3, [r7, #3]
 80073ce:	f003 0307 	and.w	r3, r3, #7
 80073d2:	b2da      	uxtb	r2, r3
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <HAL_PCD_EP_SetStall+0x7e>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e00e      	b.n	8007404 <HAL_PCD_EP_SetStall+0x9c>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68f9      	ldr	r1, [r7, #12]
 80073f4:	4618      	mov	r0, r3
 80073f6:	f006 fe66 	bl	800e0c6 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	3710      	adds	r7, #16
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}

0800740c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b084      	sub	sp, #16
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	7912      	ldrb	r2, [r2, #4]
 8007422:	4293      	cmp	r3, r2
 8007424:	d901      	bls.n	800742a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e040      	b.n	80074ac <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800742a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800742e:	2b00      	cmp	r3, #0
 8007430:	da0e      	bge.n	8007450 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007432:	78fb      	ldrb	r3, [r7, #3]
 8007434:	f003 0207 	and.w	r2, r3, #7
 8007438:	4613      	mov	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	4413      	add	r3, r2
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	3310      	adds	r3, #16
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	4413      	add	r3, r2
 8007446:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2201      	movs	r2, #1
 800744c:	705a      	strb	r2, [r3, #1]
 800744e:	e00e      	b.n	800746e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	f003 0207 	and.w	r2, r3, #7
 8007456:	4613      	mov	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	00db      	lsls	r3, r3, #3
 800745e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	4413      	add	r3, r2
 8007466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007474:	78fb      	ldrb	r3, [r7, #3]
 8007476:	f003 0307 	and.w	r3, r3, #7
 800747a:	b2da      	uxtb	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_PCD_EP_ClrStall+0x82>
 800748a:	2302      	movs	r3, #2
 800748c:	e00e      	b.n	80074ac <HAL_PCD_EP_ClrStall+0xa0>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68f9      	ldr	r1, [r7, #12]
 800749c:	4618      	mov	r0, r3
 800749e:	f006 fe63 	bl	800e168 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b096      	sub	sp, #88	@ 0x58
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80074bc:	e3ad      	b.n	8007c1a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80074c6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80074ca:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	f003 030f 	and.w	r3, r3, #15
 80074d4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 80074d8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f040 816f 	bne.w	80077c0 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80074e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80074e6:	f003 0310 	and.w	r3, r3, #16
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d14c      	bne.n	8007588 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80074fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074fe:	81fb      	strh	r3, [r7, #14]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681a      	ldr	r2, [r3, #0]
 8007504:	89fb      	ldrh	r3, [r7, #14]
 8007506:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800750a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800750e:	b29b      	uxth	r3, r3
 8007510:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	3310      	adds	r3, #16
 8007516:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007520:	b29b      	uxth	r3, r3
 8007522:	461a      	mov	r2, r3
 8007524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	00db      	lsls	r3, r3, #3
 800752a:	4413      	add	r3, r2
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6812      	ldr	r2, [r2, #0]
 8007530:	4413      	add	r3, r2
 8007532:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800753c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800753e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007542:	695a      	ldr	r2, [r3, #20]
 8007544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	441a      	add	r2, r3
 800754a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800754c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800754e:	2100      	movs	r1, #0
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f008 fe48 	bl	80101e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	7b1b      	ldrb	r3, [r3, #12]
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 835c 	beq.w	8007c1a <PCD_EP_ISR_Handler+0x766>
 8007562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	2b00      	cmp	r3, #0
 8007568:	f040 8357 	bne.w	8007c1a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	7b1b      	ldrb	r3, [r3, #12]
 8007570:	b2db      	uxtb	r3, r3
 8007572:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007576:	b2da      	uxtb	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	731a      	strb	r2, [r3, #12]
 8007586:	e348      	b.n	8007c1a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800758e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	881b      	ldrh	r3, [r3, #0]
 8007596:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800759a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800759e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d032      	beq.n	800760c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	461a      	mov	r2, r3
 80075b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	00db      	lsls	r3, r3, #3
 80075b8:	4413      	add	r3, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	4413      	add	r3, r2
 80075c0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80075c4:	881b      	ldrh	r3, [r3, #0]
 80075c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80075ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075cc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80075d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075da:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80075dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075de:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f006 feec 	bl	800e3be <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80075f2:	4013      	ands	r3, r2
 80075f4:	823b      	strh	r3, [r7, #16]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	8a3a      	ldrh	r2, [r7, #16]
 80075fc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007600:	b292      	uxth	r2, r2
 8007602:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f008 fdc1 	bl	801018c <HAL_PCD_SetupStageCallback>
 800760a:	e306      	b.n	8007c1a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800760c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007610:	2b00      	cmp	r3, #0
 8007612:	f280 8302 	bge.w	8007c1a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	881b      	ldrh	r3, [r3, #0]
 800761c:	b29a      	uxth	r2, r3
 800761e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007622:	4013      	ands	r3, r2
 8007624:	83fb      	strh	r3, [r7, #30]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	8bfa      	ldrh	r2, [r7, #30]
 800762c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007630:	b292      	uxth	r2, r2
 8007632:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800763c:	b29b      	uxth	r3, r3
 800763e:	461a      	mov	r2, r3
 8007640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	00db      	lsls	r3, r3, #3
 8007646:	4413      	add	r3, r2
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	6812      	ldr	r2, [r2, #0]
 800764c:	4413      	add	r3, r2
 800764e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800765a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800765c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d019      	beq.n	8007698 <PCD_EP_ISR_Handler+0x1e4>
 8007664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d015      	beq.n	8007698 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6818      	ldr	r0, [r3, #0]
 8007670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007672:	6959      	ldr	r1, [r3, #20]
 8007674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007676:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007678:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800767a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800767c:	b29b      	uxth	r3, r3
 800767e:	f006 fe9e 	bl	800e3be <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007684:	695a      	ldr	r2, [r3, #20]
 8007686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007688:	69db      	ldr	r3, [r3, #28]
 800768a:	441a      	add	r2, r3
 800768c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800768e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007690:	2100      	movs	r1, #0
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f008 fd8c 	bl	80101b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80076a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80076a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f040 82b5 	bne.w	8007c1a <PCD_EP_ISR_Handler+0x766>
 80076b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80076b4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80076b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80076bc:	f000 82ad 	beq.w	8007c1a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	61bb      	str	r3, [r7, #24]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	461a      	mov	r2, r3
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	4413      	add	r3, r2
 80076d6:	61bb      	str	r3, [r7, #24]
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076de:	617b      	str	r3, [r7, #20]
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	881b      	ldrh	r3, [r3, #0]
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076ea:	b29a      	uxth	r2, r3
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	801a      	strh	r2, [r3, #0]
 80076f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f2:	691b      	ldr	r3, [r3, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <PCD_EP_ISR_Handler+0x25a>
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007706:	b29a      	uxth	r2, r3
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	801a      	strh	r2, [r3, #0]
 800770c:	e039      	b.n	8007782 <PCD_EP_ISR_Handler+0x2ce>
 800770e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	2b3e      	cmp	r3, #62	@ 0x3e
 8007714:	d818      	bhi.n	8007748 <PCD_EP_ISR_Handler+0x294>
 8007716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	085b      	lsrs	r3, r3, #1
 800771c:	647b      	str	r3, [r7, #68]	@ 0x44
 800771e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	f003 0301 	and.w	r3, r3, #1
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <PCD_EP_ISR_Handler+0x27c>
 800772a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800772c:	3301      	adds	r3, #1
 800772e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29a      	uxth	r2, r3
 8007736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007738:	b29b      	uxth	r3, r3
 800773a:	029b      	lsls	r3, r3, #10
 800773c:	b29b      	uxth	r3, r3
 800773e:	4313      	orrs	r3, r2
 8007740:	b29a      	uxth	r2, r3
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	801a      	strh	r2, [r3, #0]
 8007746:	e01c      	b.n	8007782 <PCD_EP_ISR_Handler+0x2ce>
 8007748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	095b      	lsrs	r3, r3, #5
 800774e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	f003 031f 	and.w	r3, r3, #31
 8007758:	2b00      	cmp	r3, #0
 800775a:	d102      	bne.n	8007762 <PCD_EP_ISR_Handler+0x2ae>
 800775c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800775e:	3b01      	subs	r3, #1
 8007760:	647b      	str	r3, [r7, #68]	@ 0x44
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	881b      	ldrh	r3, [r3, #0]
 8007766:	b29a      	uxth	r2, r3
 8007768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800776a:	b29b      	uxth	r3, r3
 800776c:	029b      	lsls	r3, r3, #10
 800776e:	b29b      	uxth	r3, r3
 8007770:	4313      	orrs	r3, r2
 8007772:	b29b      	uxth	r3, r3
 8007774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800777c:	b29a      	uxth	r2, r3
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	b29b      	uxth	r3, r3
 800778a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800778e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007792:	827b      	strh	r3, [r7, #18]
 8007794:	8a7b      	ldrh	r3, [r7, #18]
 8007796:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800779a:	827b      	strh	r3, [r7, #18]
 800779c:	8a7b      	ldrh	r3, [r7, #18]
 800779e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80077a2:	827b      	strh	r3, [r7, #18]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	8a7b      	ldrh	r3, [r7, #18]
 80077aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	8013      	strh	r3, [r2, #0]
 80077be:	e22c      	b.n	8007c1a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80077d4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f280 80f6 	bge.w	80079ca <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	881b      	ldrh	r3, [r3, #0]
 80077ee:	b29a      	uxth	r2, r3
 80077f0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80077f4:	4013      	ands	r3, r2
 80077f6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	461a      	mov	r2, r3
 8007800:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4413      	add	r3, r2
 8007808:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800780c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007810:	b292      	uxth	r2, r2
 8007812:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007814:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007818:	4613      	mov	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007824:	687a      	ldr	r2, [r7, #4]
 8007826:	4413      	add	r3, r2
 8007828:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800782a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800782c:	7b1b      	ldrb	r3, [r3, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d123      	bne.n	800787a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800783a:	b29b      	uxth	r3, r3
 800783c:	461a      	mov	r2, r3
 800783e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	00db      	lsls	r3, r3, #3
 8007844:	4413      	add	r3, r2
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	6812      	ldr	r2, [r2, #0]
 800784a:	4413      	add	r3, r2
 800784c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007856:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800785a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800785e:	2b00      	cmp	r3, #0
 8007860:	f000 808e 	beq.w	8007980 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6818      	ldr	r0, [r3, #0]
 8007868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800786a:	6959      	ldr	r1, [r3, #20]
 800786c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800786e:	88da      	ldrh	r2, [r3, #6]
 8007870:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007874:	f006 fda3 	bl	800e3be <USB_ReadPMA>
 8007878:	e082      	b.n	8007980 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800787a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800787c:	78db      	ldrb	r3, [r3, #3]
 800787e:	2b02      	cmp	r3, #2
 8007880:	d10a      	bne.n	8007898 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007882:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007886:	461a      	mov	r2, r3
 8007888:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 f9d3 	bl	8007c36 <HAL_PCD_EP_DB_Receive>
 8007890:	4603      	mov	r3, r0
 8007892:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8007896:	e073      	b.n	8007980 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	881b      	ldrh	r3, [r3, #0]
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078b2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	441a      	add	r2, r3
 80078c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80078c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80078d8:	b29b      	uxth	r3, r3
 80078da:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	461a      	mov	r2, r3
 80078e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d022      	beq.n	800793c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078fe:	b29b      	uxth	r3, r3
 8007900:	461a      	mov	r2, r3
 8007902:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	4413      	add	r3, r2
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	6812      	ldr	r2, [r2, #0]
 800790e:	4413      	add	r3, r2
 8007910:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007914:	881b      	ldrh	r3, [r3, #0]
 8007916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800791a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800791e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007922:	2b00      	cmp	r3, #0
 8007924:	d02c      	beq.n	8007980 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6818      	ldr	r0, [r3, #0]
 800792a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800792c:	6959      	ldr	r1, [r3, #20]
 800792e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007930:	891a      	ldrh	r2, [r3, #8]
 8007932:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007936:	f006 fd42 	bl	800e3be <USB_ReadPMA>
 800793a:	e021      	b.n	8007980 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007944:	b29b      	uxth	r3, r3
 8007946:	461a      	mov	r2, r3
 8007948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	00db      	lsls	r3, r3, #3
 800794e:	4413      	add	r3, r2
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	6812      	ldr	r2, [r2, #0]
 8007954:	4413      	add	r3, r2
 8007956:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800795a:	881b      	ldrh	r3, [r3, #0]
 800795c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007960:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007964:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007968:	2b00      	cmp	r3, #0
 800796a:	d009      	beq.n	8007980 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6818      	ldr	r0, [r3, #0]
 8007970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007972:	6959      	ldr	r1, [r3, #20]
 8007974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007976:	895a      	ldrh	r2, [r3, #10]
 8007978:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800797c:	f006 fd1f 	bl	800e3be <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007982:	69da      	ldr	r2, [r3, #28]
 8007984:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007988:	441a      	add	r2, r3
 800798a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800798c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800798e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007990:	695a      	ldr	r2, [r3, #20]
 8007992:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007996:	441a      	add	r2, r3
 8007998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800799a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800799c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d005      	beq.n	80079b0 <PCD_EP_ISR_Handler+0x4fc>
 80079a4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80079a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d206      	bcs.n	80079be <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80079b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	4619      	mov	r1, r3
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f008 fbfa 	bl	80101b0 <HAL_PCD_DataOutStageCallback>
 80079bc:	e005      	b.n	80079ca <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079c4:	4618      	mov	r0, r3
 80079c6:	f004 ffcc 	bl	800c962 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80079ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80079ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 8121 	beq.w	8007c1a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80079d8:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80079dc:	4613      	mov	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4413      	add	r3, r2
 80079e2:	00db      	lsls	r3, r3, #3
 80079e4:	3310      	adds	r3, #16
 80079e6:	687a      	ldr	r2, [r7, #4]
 80079e8:	4413      	add	r3, r2
 80079ea:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	461a      	mov	r2, r3
 80079f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007a02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a06:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	441a      	add	r2, r3
 8007a18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a2a:	78db      	ldrb	r3, [r3, #3]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	f040 80a2 	bne.w	8007b76 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8007a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a34:	2200      	movs	r2, #0
 8007a36:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a3a:	7b1b      	ldrb	r3, [r3, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 8093 	beq.w	8007b68 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007a42:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d046      	beq.n	8007adc <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a50:	785b      	ldrb	r3, [r3, #1]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d126      	bne.n	8007aa4 <PCD_EP_ISR_Handler+0x5f0>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	461a      	mov	r2, r3
 8007a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6a:	4413      	add	r3, r2
 8007a6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	00da      	lsls	r2, r3, #3
 8007a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a76:	4413      	add	r3, r2
 8007a78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a7c:	623b      	str	r3, [r7, #32]
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	6a3b      	ldr	r3, [r7, #32]
 8007a8c:	801a      	strh	r2, [r3, #0]
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	881b      	ldrh	r3, [r3, #0]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	801a      	strh	r2, [r3, #0]
 8007aa2:	e061      	b.n	8007b68 <PCD_EP_ISR_Handler+0x6b4>
 8007aa4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007aa6:	785b      	ldrb	r3, [r3, #1]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d15d      	bne.n	8007b68 <PCD_EP_ISR_Handler+0x6b4>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	461a      	mov	r2, r3
 8007abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ac0:	4413      	add	r3, r2
 8007ac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	00da      	lsls	r2, r3, #3
 8007aca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007acc:	4413      	add	r3, r2
 8007ace:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	801a      	strh	r2, [r3, #0]
 8007ada:	e045      	b.n	8007b68 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ae4:	785b      	ldrb	r3, [r3, #1]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d126      	bne.n	8007b38 <PCD_EP_ISR_Handler+0x684>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	461a      	mov	r2, r3
 8007afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007afe:	4413      	add	r3, r2
 8007b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	00da      	lsls	r2, r3, #3
 8007b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b0a:	4413      	add	r3, r2
 8007b0c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b10:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b20:	801a      	strh	r2, [r3, #0]
 8007b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b24:	881b      	ldrh	r3, [r3, #0]
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b34:	801a      	strh	r2, [r3, #0]
 8007b36:	e017      	b.n	8007b68 <PCD_EP_ISR_Handler+0x6b4>
 8007b38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b3a:	785b      	ldrb	r3, [r3, #1]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d113      	bne.n	8007b68 <PCD_EP_ISR_Handler+0x6b4>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b4e:	4413      	add	r3, r2
 8007b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	00da      	lsls	r2, r3, #3
 8007b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b5a:	4413      	add	r3, r2
 8007b5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b64:	2200      	movs	r2, #0
 8007b66:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007b68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f008 fb39 	bl	80101e6 <HAL_PCD_DataInStageCallback>
 8007b74:	e051      	b.n	8007c1a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007b76:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d144      	bne.n	8007c0c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	4413      	add	r3, r2
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	6812      	ldr	r2, [r2, #0]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ba6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8007baa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bac:	699a      	ldr	r2, [r3, #24]
 8007bae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d907      	bls.n	8007bc6 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8007bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bb8:	699a      	ldr	r2, [r3, #24]
 8007bba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007bbe:	1ad2      	subs	r2, r2, r3
 8007bc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bc2:	619a      	str	r2, [r3, #24]
 8007bc4:	e002      	b.n	8007bcc <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8007bc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bc8:	2200      	movs	r2, #0
 8007bca:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007bcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d106      	bne.n	8007be2 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f008 fb03 	bl	80101e6 <HAL_PCD_DataInStageCallback>
 8007be0:	e01b      	b.n	8007c1a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007be4:	695a      	ldr	r2, [r3, #20]
 8007be6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007bea:	441a      	add	r2, r3
 8007bec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bee:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007bf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bf2:	69da      	ldr	r2, [r3, #28]
 8007bf4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007bf8:	441a      	add	r2, r3
 8007bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bfc:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c04:	4618      	mov	r0, r3
 8007c06:	f004 feac 	bl	800c962 <USB_EPStartXfer>
 8007c0a:	e006      	b.n	8007c1a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007c0c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007c10:	461a      	mov	r2, r3
 8007c12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f917 	bl	8007e48 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	b21b      	sxth	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f6ff ac49 	blt.w	80074be <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3758      	adds	r7, #88	@ 0x58
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b088      	sub	sp, #32
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	60f8      	str	r0, [r7, #12]
 8007c3e:	60b9      	str	r1, [r7, #8]
 8007c40:	4613      	mov	r3, r2
 8007c42:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007c44:	88fb      	ldrh	r3, [r7, #6]
 8007c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d07c      	beq.n	8007d48 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	461a      	mov	r2, r3
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	4413      	add	r3, r2
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	6812      	ldr	r2, [r2, #0]
 8007c66:	4413      	add	r3, r2
 8007c68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c72:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	699a      	ldr	r2, [r3, #24]
 8007c78:	8b7b      	ldrh	r3, [r7, #26]
 8007c7a:	429a      	cmp	r2, r3
 8007c7c:	d306      	bcc.n	8007c8c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	699a      	ldr	r2, [r3, #24]
 8007c82:	8b7b      	ldrh	r3, [r7, #26]
 8007c84:	1ad2      	subs	r2, r2, r3
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	619a      	str	r2, [r3, #24]
 8007c8a:	e002      	b.n	8007c92 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	699b      	ldr	r3, [r3, #24]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d123      	bne.n	8007ce2 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	4413      	add	r3, r2
 8007ca8:	881b      	ldrh	r3, [r3, #0]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cb4:	833b      	strh	r3, [r7, #24]
 8007cb6:	8b3b      	ldrh	r3, [r7, #24]
 8007cb8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007cbc:	833b      	strh	r3, [r7, #24]
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	441a      	add	r2, r3
 8007ccc:	8b3b      	ldrh	r3, [r7, #24]
 8007cce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007cd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007cd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007cda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cde:	b29b      	uxth	r3, r3
 8007ce0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007ce2:	88fb      	ldrh	r3, [r7, #6]
 8007ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d01f      	beq.n	8007d2c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	461a      	mov	r2, r3
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d06:	82fb      	strh	r3, [r7, #22]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	009b      	lsls	r3, r3, #2
 8007d14:	441a      	add	r2, r3
 8007d16:	8afb      	ldrh	r3, [r7, #22]
 8007d18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d24:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007d2c:	8b7b      	ldrh	r3, [r7, #26]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 8085 	beq.w	8007e3e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6818      	ldr	r0, [r3, #0]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	6959      	ldr	r1, [r3, #20]
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	891a      	ldrh	r2, [r3, #8]
 8007d40:	8b7b      	ldrh	r3, [r7, #26]
 8007d42:	f006 fb3c 	bl	800e3be <USB_ReadPMA>
 8007d46:	e07a      	b.n	8007e3e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	461a      	mov	r2, r3
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	00db      	lsls	r3, r3, #3
 8007d5a:	4413      	add	r3, r2
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	6812      	ldr	r2, [r2, #0]
 8007d60:	4413      	add	r3, r2
 8007d62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d66:	881b      	ldrh	r3, [r3, #0]
 8007d68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d6c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	699a      	ldr	r2, [r3, #24]
 8007d72:	8b7b      	ldrh	r3, [r7, #26]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d306      	bcc.n	8007d86 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	699a      	ldr	r2, [r3, #24]
 8007d7c:	8b7b      	ldrh	r3, [r7, #26]
 8007d7e:	1ad2      	subs	r2, r2, r3
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	619a      	str	r2, [r3, #24]
 8007d84:	e002      	b.n	8007d8c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d123      	bne.n	8007ddc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dae:	83fb      	strh	r3, [r7, #30]
 8007db0:	8bfb      	ldrh	r3, [r7, #30]
 8007db2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007db6:	83fb      	strh	r3, [r7, #30]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	441a      	add	r2, r3
 8007dc6:	8bfb      	ldrh	r3, [r7, #30]
 8007dc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007ddc:	88fb      	ldrh	r3, [r7, #6]
 8007dde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d11f      	bne.n	8007e26 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	461a      	mov	r2, r3
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e00:	83bb      	strh	r3, [r7, #28]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	441a      	add	r2, r3
 8007e10:	8bbb      	ldrh	r3, [r7, #28]
 8007e12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e1e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007e26:	8b7b      	ldrh	r3, [r7, #26]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d008      	beq.n	8007e3e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6818      	ldr	r0, [r3, #0]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	6959      	ldr	r1, [r3, #20]
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	895a      	ldrh	r2, [r3, #10]
 8007e38:	8b7b      	ldrh	r3, [r7, #26]
 8007e3a:	f006 fac0 	bl	800e3be <USB_ReadPMA>
    }
  }

  return count;
 8007e3e:	8b7b      	ldrh	r3, [r7, #26]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3720      	adds	r7, #32
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b0a4      	sub	sp, #144	@ 0x90
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	4613      	mov	r3, r2
 8007e54:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 81db 	beq.w	8008218 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	00db      	lsls	r3, r3, #3
 8007e74:	4413      	add	r3, r2
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	6812      	ldr	r2, [r2, #0]
 8007e7a:	4413      	add	r3, r2
 8007e7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007e80:	881b      	ldrh	r3, [r3, #0]
 8007e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e86:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d907      	bls.n	8007ea6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	699a      	ldr	r2, [r3, #24]
 8007e9a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007e9e:	1ad2      	subs	r2, r2, r3
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	619a      	str	r2, [r3, #24]
 8007ea4:	e002      	b.n	8007eac <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f040 80b9 	bne.w	8008028 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	785b      	ldrb	r3, [r3, #1]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d126      	bne.n	8007f0c <HAL_PCD_EP_DB_Transmit+0xc4>
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ecc:	b29b      	uxth	r3, r3
 8007ece:	461a      	mov	r2, r3
 8007ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed2:	4413      	add	r3, r2
 8007ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	00da      	lsls	r2, r3, #3
 8007edc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ede:	4413      	add	r3, r2
 8007ee0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee8:	881b      	ldrh	r3, [r3, #0]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef4:	801a      	strh	r2, [r3, #0]
 8007ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f04:	b29a      	uxth	r2, r3
 8007f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f08:	801a      	strh	r2, [r3, #0]
 8007f0a:	e01a      	b.n	8007f42 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	785b      	ldrb	r3, [r3, #1]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d116      	bne.n	8007f42 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f28:	4413      	add	r3, r2
 8007f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	00da      	lsls	r2, r3, #3
 8007f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f34:	4413      	add	r3, r2
 8007f36:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007f3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f3e:	2200      	movs	r2, #0
 8007f40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	785b      	ldrb	r3, [r3, #1]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d126      	bne.n	8007f9e <HAL_PCD_EP_DB_Transmit+0x156>
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	61fb      	str	r3, [r7, #28]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	461a      	mov	r2, r3
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	4413      	add	r3, r2
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	00da      	lsls	r2, r3, #3
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	4413      	add	r3, r2
 8007f72:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007f76:	61bb      	str	r3, [r7, #24]
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	881b      	ldrh	r3, [r3, #0]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	801a      	strh	r2, [r3, #0]
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	801a      	strh	r2, [r3, #0]
 8007f9c:	e017      	b.n	8007fce <HAL_PCD_EP_DB_Transmit+0x186>
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	785b      	ldrb	r3, [r3, #1]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d113      	bne.n	8007fce <HAL_PCD_EP_DB_Transmit+0x186>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb4:	4413      	add	r3, r2
 8007fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	00da      	lsls	r2, r3, #3
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007fc6:	623b      	str	r3, [r7, #32]
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	f008 f906 	bl	80101e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007fda:	88fb      	ldrh	r3, [r7, #6]
 8007fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f000 82fa 	beq.w	80085da <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	461a      	mov	r2, r3
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	881b      	ldrh	r3, [r3, #0]
 8007ff6:	b29b      	uxth	r3, r3
 8007ff8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008000:	82fb      	strh	r3, [r7, #22]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	441a      	add	r2, r3
 8008010:	8afb      	ldrh	r3, [r7, #22]
 8008012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800801a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800801e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008022:	b29b      	uxth	r3, r3
 8008024:	8013      	strh	r3, [r2, #0]
 8008026:	e2d8      	b.n	80085da <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008028:	88fb      	ldrh	r3, [r7, #6]
 800802a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d021      	beq.n	8008076 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	b29b      	uxth	r3, r3
 8008044:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800804c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	441a      	add	r2, r3
 800805e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008062:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008066:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800806a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800806e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008072:	b29b      	uxth	r3, r3
 8008074:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800807c:	2b01      	cmp	r3, #1
 800807e:	f040 82ac 	bne.w	80085da <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	695a      	ldr	r2, [r3, #20]
 8008086:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800808a:	441a      	add	r2, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	69da      	ldr	r2, [r3, #28]
 8008094:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008098:	441a      	add	r2, r3
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	6a1a      	ldr	r2, [r3, #32]
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d30b      	bcc.n	80080c2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	6a1a      	ldr	r2, [r3, #32]
 80080b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80080ba:	1ad2      	subs	r2, r2, r3
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	621a      	str	r2, [r3, #32]
 80080c0:	e017      	b.n	80080f2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	6a1b      	ldr	r3, [r3, #32]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d108      	bne.n	80080dc <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80080ca:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80080ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2200      	movs	r2, #0
 80080d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80080da:	e00a      	b.n	80080f2 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	6a1b      	ldr	r3, [r3, #32]
 80080e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2200      	movs	r2, #0
 80080f0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	785b      	ldrb	r3, [r3, #1]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d165      	bne.n	80081c6 <HAL_PCD_EP_DB_Transmit+0x37e>
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008108:	b29b      	uxth	r3, r3
 800810a:	461a      	mov	r2, r3
 800810c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800810e:	4413      	add	r3, r2
 8008110:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	00da      	lsls	r2, r3, #3
 8008118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800811a:	4413      	add	r3, r2
 800811c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008120:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	b29b      	uxth	r3, r3
 8008128:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800812c:	b29a      	uxth	r2, r3
 800812e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008130:	801a      	strh	r2, [r3, #0]
 8008132:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008136:	2b00      	cmp	r3, #0
 8008138:	d10a      	bne.n	8008150 <HAL_PCD_EP_DB_Transmit+0x308>
 800813a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800813c:	881b      	ldrh	r3, [r3, #0]
 800813e:	b29b      	uxth	r3, r3
 8008140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008148:	b29a      	uxth	r2, r3
 800814a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800814c:	801a      	strh	r2, [r3, #0]
 800814e:	e057      	b.n	8008200 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008150:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008154:	2b3e      	cmp	r3, #62	@ 0x3e
 8008156:	d818      	bhi.n	800818a <HAL_PCD_EP_DB_Transmit+0x342>
 8008158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800815c:	085b      	lsrs	r3, r3, #1
 800815e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008160:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008164:	f003 0301 	and.w	r3, r3, #1
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <HAL_PCD_EP_DB_Transmit+0x32a>
 800816c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800816e:	3301      	adds	r3, #1
 8008170:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008174:	881b      	ldrh	r3, [r3, #0]
 8008176:	b29a      	uxth	r2, r3
 8008178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800817a:	b29b      	uxth	r3, r3
 800817c:	029b      	lsls	r3, r3, #10
 800817e:	b29b      	uxth	r3, r3
 8008180:	4313      	orrs	r3, r2
 8008182:	b29a      	uxth	r2, r3
 8008184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008186:	801a      	strh	r2, [r3, #0]
 8008188:	e03a      	b.n	8008200 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800818a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800818e:	095b      	lsrs	r3, r3, #5
 8008190:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008196:	f003 031f 	and.w	r3, r3, #31
 800819a:	2b00      	cmp	r3, #0
 800819c:	d102      	bne.n	80081a4 <HAL_PCD_EP_DB_Transmit+0x35c>
 800819e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081a0:	3b01      	subs	r3, #1
 80081a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081ac:	b29b      	uxth	r3, r3
 80081ae:	029b      	lsls	r3, r3, #10
 80081b0:	b29b      	uxth	r3, r3
 80081b2:	4313      	orrs	r3, r2
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081be:	b29a      	uxth	r2, r3
 80081c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c2:	801a      	strh	r2, [r3, #0]
 80081c4:	e01c      	b.n	8008200 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	785b      	ldrb	r3, [r3, #1]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d118      	bne.n	8008200 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081dc:	b29b      	uxth	r3, r3
 80081de:	461a      	mov	r2, r3
 80081e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081e2:	4413      	add	r3, r2
 80081e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	00da      	lsls	r2, r3, #3
 80081ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80081ee:	4413      	add	r3, r2
 80081f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80081f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081fe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6818      	ldr	r0, [r3, #0]
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	6959      	ldr	r1, [r3, #20]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	891a      	ldrh	r2, [r3, #8]
 800820c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008210:	b29b      	uxth	r3, r3
 8008212:	f006 f892 	bl	800e33a <USB_WritePMA>
 8008216:	e1e0      	b.n	80085da <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008220:	b29b      	uxth	r3, r3
 8008222:	461a      	mov	r2, r3
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	00db      	lsls	r3, r3, #3
 800822a:	4413      	add	r3, r2
 800822c:	68fa      	ldr	r2, [r7, #12]
 800822e:	6812      	ldr	r2, [r2, #0]
 8008230:	4413      	add	r3, r2
 8008232:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008236:	881b      	ldrh	r3, [r3, #0]
 8008238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800823c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	699a      	ldr	r2, [r3, #24]
 8008244:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008248:	429a      	cmp	r2, r3
 800824a:	d307      	bcc.n	800825c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	699a      	ldr	r2, [r3, #24]
 8008250:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008254:	1ad2      	subs	r2, r2, r3
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	619a      	str	r2, [r3, #24]
 800825a:	e002      	b.n	8008262 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	2200      	movs	r2, #0
 8008260:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	2b00      	cmp	r3, #0
 8008268:	f040 80c0 	bne.w	80083ec <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	785b      	ldrb	r3, [r3, #1]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d126      	bne.n	80082c2 <HAL_PCD_EP_DB_Transmit+0x47a>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008282:	b29b      	uxth	r3, r3
 8008284:	461a      	mov	r2, r3
 8008286:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008288:	4413      	add	r3, r2
 800828a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	00da      	lsls	r2, r3, #3
 8008292:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008294:	4413      	add	r3, r2
 8008296:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800829a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800829c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800829e:	881b      	ldrh	r3, [r3, #0]
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082aa:	801a      	strh	r2, [r3, #0]
 80082ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	b29b      	uxth	r3, r3
 80082b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082be:	801a      	strh	r2, [r3, #0]
 80082c0:	e01a      	b.n	80082f8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	2b01      	cmp	r3, #1
 80082c8:	d116      	bne.n	80082f8 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082d8:	b29b      	uxth	r3, r3
 80082da:	461a      	mov	r2, r3
 80082dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082de:	4413      	add	r3, r2
 80082e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	00da      	lsls	r2, r3, #3
 80082e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082ea:	4413      	add	r3, r2
 80082ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80082f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80082f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082f4:	2200      	movs	r2, #0
 80082f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	785b      	ldrb	r3, [r3, #1]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d12b      	bne.n	800835e <HAL_PCD_EP_DB_Transmit+0x516>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008314:	b29b      	uxth	r3, r3
 8008316:	461a      	mov	r2, r3
 8008318:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800831a:	4413      	add	r3, r2
 800831c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	00da      	lsls	r2, r3, #3
 8008324:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008326:	4413      	add	r3, r2
 8008328:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800832c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008330:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	b29b      	uxth	r3, r3
 8008338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800833c:	b29a      	uxth	r2, r3
 800833e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008342:	801a      	strh	r2, [r3, #0]
 8008344:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008348:	881b      	ldrh	r3, [r3, #0]
 800834a:	b29b      	uxth	r3, r3
 800834c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008350:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008354:	b29a      	uxth	r2, r3
 8008356:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800835a:	801a      	strh	r2, [r3, #0]
 800835c:	e017      	b.n	800838e <HAL_PCD_EP_DB_Transmit+0x546>
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	785b      	ldrb	r3, [r3, #1]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d113      	bne.n	800838e <HAL_PCD_EP_DB_Transmit+0x546>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800836e:	b29b      	uxth	r3, r3
 8008370:	461a      	mov	r2, r3
 8008372:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008374:	4413      	add	r3, r2
 8008376:	677b      	str	r3, [r7, #116]	@ 0x74
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	00da      	lsls	r2, r3, #3
 800837e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008380:	4413      	add	r3, r2
 8008382:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008386:	673b      	str	r3, [r7, #112]	@ 0x70
 8008388:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800838a:	2200      	movs	r2, #0
 800838c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	4619      	mov	r1, r3
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f007 ff26 	bl	80101e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800839a:	88fb      	ldrh	r3, [r7, #6]
 800839c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	f040 811a 	bne.w	80085da <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4413      	add	r3, r2
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80083bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083c0:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	441a      	add	r2, r3
 80083d2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 80083d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80083da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80083de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80083e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	8013      	strh	r3, [r2, #0]
 80083ea:	e0f6      	b.n	80085da <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80083ec:	88fb      	ldrh	r3, [r7, #6]
 80083ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d121      	bne.n	800843a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	b29b      	uxth	r3, r3
 8008408:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800840c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008410:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	461a      	mov	r2, r3
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	009b      	lsls	r3, r3, #2
 8008420:	441a      	add	r2, r3
 8008422:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008426:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800842a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800842e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008436:	b29b      	uxth	r3, r3
 8008438:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008440:	2b01      	cmp	r3, #1
 8008442:	f040 80ca 	bne.w	80085da <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	695a      	ldr	r2, [r3, #20]
 800844a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800844e:	441a      	add	r2, r3
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	69da      	ldr	r2, [r3, #28]
 8008458:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800845c:	441a      	add	r2, r3
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	6a1a      	ldr	r2, [r3, #32]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	429a      	cmp	r2, r3
 800846c:	d30b      	bcc.n	8008486 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	6a1a      	ldr	r2, [r3, #32]
 800847a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800847e:	1ad2      	subs	r2, r2, r3
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	621a      	str	r2, [r3, #32]
 8008484:	e017      	b.n	80084b6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	6a1b      	ldr	r3, [r3, #32]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d108      	bne.n	80084a0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800848e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008492:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2200      	movs	r2, #0
 800849a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800849e:	e00a      	b.n	80084b6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	2200      	movs	r2, #0
 80084ac:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	785b      	ldrb	r3, [r3, #1]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d165      	bne.n	8008590 <HAL_PCD_EP_DB_Transmit+0x748>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	461a      	mov	r2, r3
 80084d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084d8:	4413      	add	r3, r2
 80084da:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	00da      	lsls	r2, r3, #3
 80084e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084e4:	4413      	add	r3, r2
 80084e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80084ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084ee:	881b      	ldrh	r3, [r3, #0]
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084fa:	801a      	strh	r2, [r3, #0]
 80084fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10a      	bne.n	800851a <HAL_PCD_EP_DB_Transmit+0x6d2>
 8008504:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008506:	881b      	ldrh	r3, [r3, #0]
 8008508:	b29b      	uxth	r3, r3
 800850a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800850e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008512:	b29a      	uxth	r2, r3
 8008514:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008516:	801a      	strh	r2, [r3, #0]
 8008518:	e054      	b.n	80085c4 <HAL_PCD_EP_DB_Transmit+0x77c>
 800851a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800851e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008520:	d818      	bhi.n	8008554 <HAL_PCD_EP_DB_Transmit+0x70c>
 8008522:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008526:	085b      	lsrs	r3, r3, #1
 8008528:	66bb      	str	r3, [r7, #104]	@ 0x68
 800852a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <HAL_PCD_EP_DB_Transmit+0x6f4>
 8008536:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008538:	3301      	adds	r3, #1
 800853a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800853c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800853e:	881b      	ldrh	r3, [r3, #0]
 8008540:	b29a      	uxth	r2, r3
 8008542:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008544:	b29b      	uxth	r3, r3
 8008546:	029b      	lsls	r3, r3, #10
 8008548:	b29b      	uxth	r3, r3
 800854a:	4313      	orrs	r3, r2
 800854c:	b29a      	uxth	r2, r3
 800854e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008550:	801a      	strh	r2, [r3, #0]
 8008552:	e037      	b.n	80085c4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008554:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008558:	095b      	lsrs	r3, r3, #5
 800855a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800855c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008560:	f003 031f 	and.w	r3, r3, #31
 8008564:	2b00      	cmp	r3, #0
 8008566:	d102      	bne.n	800856e <HAL_PCD_EP_DB_Transmit+0x726>
 8008568:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800856a:	3b01      	subs	r3, #1
 800856c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800856e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	b29a      	uxth	r2, r3
 8008574:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008576:	b29b      	uxth	r3, r3
 8008578:	029b      	lsls	r3, r3, #10
 800857a:	b29b      	uxth	r3, r3
 800857c:	4313      	orrs	r3, r2
 800857e:	b29b      	uxth	r3, r3
 8008580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008588:	b29a      	uxth	r2, r3
 800858a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800858c:	801a      	strh	r2, [r3, #0]
 800858e:	e019      	b.n	80085c4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	785b      	ldrb	r3, [r3, #1]
 8008594:	2b01      	cmp	r3, #1
 8008596:	d115      	bne.n	80085c4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	461a      	mov	r2, r3
 80085a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085a6:	4413      	add	r3, r2
 80085a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	781b      	ldrb	r3, [r3, #0]
 80085ae:	00da      	lsls	r2, r3, #3
 80085b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085b2:	4413      	add	r3, r2
 80085b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80085b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80085ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085be:	b29a      	uxth	r2, r3
 80085c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085c2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6818      	ldr	r0, [r3, #0]
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	6959      	ldr	r1, [r3, #20]
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	895a      	ldrh	r2, [r3, #10]
 80085d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	f005 feb0 	bl	800e33a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	881b      	ldrh	r3, [r3, #0]
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085f4:	82bb      	strh	r3, [r7, #20]
 80085f6:	8abb      	ldrh	r3, [r7, #20]
 80085f8:	f083 0310 	eor.w	r3, r3, #16
 80085fc:	82bb      	strh	r3, [r7, #20]
 80085fe:	8abb      	ldrh	r3, [r7, #20]
 8008600:	f083 0320 	eor.w	r3, r3, #32
 8008604:	82bb      	strh	r3, [r7, #20]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	441a      	add	r2, r3
 8008614:	8abb      	ldrh	r3, [r7, #20]
 8008616:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800861a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800861e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008622:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008626:	b29b      	uxth	r3, r3
 8008628:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3790      	adds	r7, #144	@ 0x90
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008634:	b480      	push	{r7}
 8008636:	b087      	sub	sp, #28
 8008638:	af00      	add	r7, sp, #0
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	607b      	str	r3, [r7, #4]
 800863e:	460b      	mov	r3, r1
 8008640:	817b      	strh	r3, [r7, #10]
 8008642:	4613      	mov	r3, r2
 8008644:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008646:	897b      	ldrh	r3, [r7, #10]
 8008648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800864c:	b29b      	uxth	r3, r3
 800864e:	2b00      	cmp	r3, #0
 8008650:	d00b      	beq.n	800866a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008652:	897b      	ldrh	r3, [r7, #10]
 8008654:	f003 0207 	and.w	r2, r3, #7
 8008658:	4613      	mov	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	00db      	lsls	r3, r3, #3
 8008660:	3310      	adds	r3, #16
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	4413      	add	r3, r2
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	e009      	b.n	800867e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800866a:	897a      	ldrh	r2, [r7, #10]
 800866c:	4613      	mov	r3, r2
 800866e:	009b      	lsls	r3, r3, #2
 8008670:	4413      	add	r3, r2
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008678:	68fa      	ldr	r2, [r7, #12]
 800867a:	4413      	add	r3, r2
 800867c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800867e:	893b      	ldrh	r3, [r7, #8]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d107      	bne.n	8008694 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	2200      	movs	r2, #0
 8008688:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	b29a      	uxth	r2, r3
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	80da      	strh	r2, [r3, #6]
 8008692:	e00b      	b.n	80086ac <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	2201      	movs	r2, #1
 8008698:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	b29a      	uxth	r2, r3
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	0c1b      	lsrs	r3, r3, #16
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	371c      	adds	r7, #28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr

080086ba <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80086ba:	b480      	push	{r7}
 80086bc:	b085      	sub	sp, #20
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80086de:	b29b      	uxth	r3, r3
 80086e0:	f043 0301 	orr.w	r3, r3, #1
 80086e4:	b29a      	uxth	r2, r3
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	f043 0302 	orr.w	r3, r3, #2
 80086f8:	b29a      	uxth	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
	...

08008710 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d141      	bne.n	80087a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800871e:	4b4b      	ldr	r3, [pc, #300]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800872a:	d131      	bne.n	8008790 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800872c:	4b47      	ldr	r3, [pc, #284]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800872e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008732:	4a46      	ldr	r2, [pc, #280]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008734:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008738:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800873c:	4b43      	ldr	r3, [pc, #268]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008744:	4a41      	ldr	r2, [pc, #260]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008746:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800874a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800874c:	4b40      	ldr	r3, [pc, #256]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2232      	movs	r2, #50	@ 0x32
 8008752:	fb02 f303 	mul.w	r3, r2, r3
 8008756:	4a3f      	ldr	r2, [pc, #252]	@ (8008854 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008758:	fba2 2303 	umull	r2, r3, r2, r3
 800875c:	0c9b      	lsrs	r3, r3, #18
 800875e:	3301      	adds	r3, #1
 8008760:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008762:	e002      	b.n	800876a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	3b01      	subs	r3, #1
 8008768:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800876a:	4b38      	ldr	r3, [pc, #224]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800876c:	695b      	ldr	r3, [r3, #20]
 800876e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008776:	d102      	bne.n	800877e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1f2      	bne.n	8008764 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800877e:	4b33      	ldr	r3, [pc, #204]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008780:	695b      	ldr	r3, [r3, #20]
 8008782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800878a:	d158      	bne.n	800883e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800878c:	2303      	movs	r3, #3
 800878e:	e057      	b.n	8008840 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008790:	4b2e      	ldr	r3, [pc, #184]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008796:	4a2d      	ldr	r2, [pc, #180]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800879c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80087a0:	e04d      	b.n	800883e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087a8:	d141      	bne.n	800882e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80087aa:	4b28      	ldr	r3, [pc, #160]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80087b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087b6:	d131      	bne.n	800881c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80087b8:	4b24      	ldr	r3, [pc, #144]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087be:	4a23      	ldr	r2, [pc, #140]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80087c8:	4b20      	ldr	r3, [pc, #128]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80087d0:	4a1e      	ldr	r2, [pc, #120]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80087d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80087d8:	4b1d      	ldr	r3, [pc, #116]	@ (8008850 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2232      	movs	r2, #50	@ 0x32
 80087de:	fb02 f303 	mul.w	r3, r2, r3
 80087e2:	4a1c      	ldr	r2, [pc, #112]	@ (8008854 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80087e4:	fba2 2303 	umull	r2, r3, r2, r3
 80087e8:	0c9b      	lsrs	r3, r3, #18
 80087ea:	3301      	adds	r3, #1
 80087ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087ee:	e002      	b.n	80087f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087f6:	4b15      	ldr	r3, [pc, #84]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80087f8:	695b      	ldr	r3, [r3, #20]
 80087fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008802:	d102      	bne.n	800880a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1f2      	bne.n	80087f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800880a:	4b10      	ldr	r3, [pc, #64]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008816:	d112      	bne.n	800883e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008818:	2303      	movs	r3, #3
 800881a:	e011      	b.n	8008840 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800881c:	4b0b      	ldr	r3, [pc, #44]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800881e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008822:	4a0a      	ldr	r2, [pc, #40]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008828:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800882c:	e007      	b.n	800883e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800882e:	4b07      	ldr	r3, [pc, #28]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008836:	4a05      	ldr	r2, [pc, #20]	@ (800884c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008838:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800883c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3714      	adds	r7, #20
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr
 800884c:	40007000 	.word	0x40007000
 8008850:	2000002c 	.word	0x2000002c
 8008854:	431bde83 	.word	0x431bde83

08008858 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008858:	b480      	push	{r7}
 800885a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800885c:	4b05      	ldr	r3, [pc, #20]	@ (8008874 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	4a04      	ldr	r2, [pc, #16]	@ (8008874 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008862:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008866:	6093      	str	r3, [r2, #8]
}
 8008868:	bf00      	nop
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	40007000 	.word	0x40007000

08008878 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b088      	sub	sp, #32
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008886:	2301      	movs	r3, #1
 8008888:	e2fe      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	2b00      	cmp	r3, #0
 8008894:	d075      	beq.n	8008982 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008896:	4b97      	ldr	r3, [pc, #604]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f003 030c 	and.w	r3, r3, #12
 800889e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80088a0:	4b94      	ldr	r3, [pc, #592]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	f003 0303 	and.w	r3, r3, #3
 80088a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80088aa:	69bb      	ldr	r3, [r7, #24]
 80088ac:	2b0c      	cmp	r3, #12
 80088ae:	d102      	bne.n	80088b6 <HAL_RCC_OscConfig+0x3e>
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2b03      	cmp	r3, #3
 80088b4:	d002      	beq.n	80088bc <HAL_RCC_OscConfig+0x44>
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	2b08      	cmp	r3, #8
 80088ba:	d10b      	bne.n	80088d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088bc:	4b8d      	ldr	r3, [pc, #564]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d05b      	beq.n	8008980 <HAL_RCC_OscConfig+0x108>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d157      	bne.n	8008980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e2d9      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088dc:	d106      	bne.n	80088ec <HAL_RCC_OscConfig+0x74>
 80088de:	4b85      	ldr	r3, [pc, #532]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a84      	ldr	r2, [pc, #528]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 80088e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088e8:	6013      	str	r3, [r2, #0]
 80088ea:	e01d      	b.n	8008928 <HAL_RCC_OscConfig+0xb0>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80088f4:	d10c      	bne.n	8008910 <HAL_RCC_OscConfig+0x98>
 80088f6:	4b7f      	ldr	r3, [pc, #508]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a7e      	ldr	r2, [pc, #504]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 80088fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008900:	6013      	str	r3, [r2, #0]
 8008902:	4b7c      	ldr	r3, [pc, #496]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a7b      	ldr	r2, [pc, #492]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008908:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	e00b      	b.n	8008928 <HAL_RCC_OscConfig+0xb0>
 8008910:	4b78      	ldr	r3, [pc, #480]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a77      	ldr	r2, [pc, #476]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800891a:	6013      	str	r3, [r2, #0]
 800891c:	4b75      	ldr	r3, [pc, #468]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a74      	ldr	r2, [pc, #464]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008922:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008926:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d013      	beq.n	8008958 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008930:	f7fb fcbe 	bl	80042b0 <HAL_GetTick>
 8008934:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008936:	e008      	b.n	800894a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008938:	f7fb fcba 	bl	80042b0 <HAL_GetTick>
 800893c:	4602      	mov	r2, r0
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	1ad3      	subs	r3, r2, r3
 8008942:	2b64      	cmp	r3, #100	@ 0x64
 8008944:	d901      	bls.n	800894a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008946:	2303      	movs	r3, #3
 8008948:	e29e      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800894a:	4b6a      	ldr	r3, [pc, #424]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008952:	2b00      	cmp	r3, #0
 8008954:	d0f0      	beq.n	8008938 <HAL_RCC_OscConfig+0xc0>
 8008956:	e014      	b.n	8008982 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008958:	f7fb fcaa 	bl	80042b0 <HAL_GetTick>
 800895c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800895e:	e008      	b.n	8008972 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008960:	f7fb fca6 	bl	80042b0 <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	2b64      	cmp	r3, #100	@ 0x64
 800896c:	d901      	bls.n	8008972 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e28a      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008972:	4b60      	ldr	r3, [pc, #384]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1f0      	bne.n	8008960 <HAL_RCC_OscConfig+0xe8>
 800897e:	e000      	b.n	8008982 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008980:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0302 	and.w	r3, r3, #2
 800898a:	2b00      	cmp	r3, #0
 800898c:	d075      	beq.n	8008a7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800898e:	4b59      	ldr	r3, [pc, #356]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008990:	689b      	ldr	r3, [r3, #8]
 8008992:	f003 030c 	and.w	r3, r3, #12
 8008996:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008998:	4b56      	ldr	r3, [pc, #344]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	f003 0303 	and.w	r3, r3, #3
 80089a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80089a2:	69bb      	ldr	r3, [r7, #24]
 80089a4:	2b0c      	cmp	r3, #12
 80089a6:	d102      	bne.n	80089ae <HAL_RCC_OscConfig+0x136>
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d002      	beq.n	80089b4 <HAL_RCC_OscConfig+0x13c>
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	2b04      	cmp	r3, #4
 80089b2:	d11f      	bne.n	80089f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089b4:	4b4f      	ldr	r3, [pc, #316]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d005      	beq.n	80089cc <HAL_RCC_OscConfig+0x154>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d101      	bne.n	80089cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e25d      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089cc:	4b49      	ldr	r3, [pc, #292]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	061b      	lsls	r3, r3, #24
 80089da:	4946      	ldr	r1, [pc, #280]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 80089dc:	4313      	orrs	r3, r2
 80089de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80089e0:	4b45      	ldr	r3, [pc, #276]	@ (8008af8 <HAL_RCC_OscConfig+0x280>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7fb fc17 	bl	8004218 <HAL_InitTick>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d043      	beq.n	8008a78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80089f0:	2301      	movs	r3, #1
 80089f2:	e249      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d023      	beq.n	8008a44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80089fc:	4b3d      	ldr	r3, [pc, #244]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a3c      	ldr	r2, [pc, #240]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008a02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a08:	f7fb fc52 	bl	80042b0 <HAL_GetTick>
 8008a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a0e:	e008      	b.n	8008a22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a10:	f7fb fc4e 	bl	80042b0 <HAL_GetTick>
 8008a14:	4602      	mov	r2, r0
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	1ad3      	subs	r3, r2, r3
 8008a1a:	2b02      	cmp	r3, #2
 8008a1c:	d901      	bls.n	8008a22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e232      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a22:	4b34      	ldr	r3, [pc, #208]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d0f0      	beq.n	8008a10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a2e:	4b31      	ldr	r3, [pc, #196]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	691b      	ldr	r3, [r3, #16]
 8008a3a:	061b      	lsls	r3, r3, #24
 8008a3c:	492d      	ldr	r1, [pc, #180]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008a3e:	4313      	orrs	r3, r2
 8008a40:	604b      	str	r3, [r1, #4]
 8008a42:	e01a      	b.n	8008a7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a44:	4b2b      	ldr	r3, [pc, #172]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a2a      	ldr	r2, [pc, #168]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008a4a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a50:	f7fb fc2e 	bl	80042b0 <HAL_GetTick>
 8008a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a56:	e008      	b.n	8008a6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a58:	f7fb fc2a 	bl	80042b0 <HAL_GetTick>
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	2b02      	cmp	r3, #2
 8008a64:	d901      	bls.n	8008a6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	e20e      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008a6a:	4b22      	ldr	r3, [pc, #136]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1f0      	bne.n	8008a58 <HAL_RCC_OscConfig+0x1e0>
 8008a76:	e000      	b.n	8008a7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0308 	and.w	r3, r3, #8
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d041      	beq.n	8008b0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d01c      	beq.n	8008ac8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008a8e:	4b19      	ldr	r3, [pc, #100]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008a94:	4a17      	ldr	r2, [pc, #92]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008a96:	f043 0301 	orr.w	r3, r3, #1
 8008a9a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a9e:	f7fb fc07 	bl	80042b0 <HAL_GetTick>
 8008aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008aa4:	e008      	b.n	8008ab8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aa6:	f7fb fc03 	bl	80042b0 <HAL_GetTick>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	1ad3      	subs	r3, r2, r3
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d901      	bls.n	8008ab8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e1e7      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0ef      	beq.n	8008aa6 <HAL_RCC_OscConfig+0x22e>
 8008ac6:	e020      	b.n	8008b0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ac8:	4b0a      	ldr	r3, [pc, #40]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008ace:	4a09      	ldr	r2, [pc, #36]	@ (8008af4 <HAL_RCC_OscConfig+0x27c>)
 8008ad0:	f023 0301 	bic.w	r3, r3, #1
 8008ad4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ad8:	f7fb fbea 	bl	80042b0 <HAL_GetTick>
 8008adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008ade:	e00d      	b.n	8008afc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ae0:	f7fb fbe6 	bl	80042b0 <HAL_GetTick>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	1ad3      	subs	r3, r2, r3
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d906      	bls.n	8008afc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008aee:	2303      	movs	r3, #3
 8008af0:	e1ca      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
 8008af2:	bf00      	nop
 8008af4:	40021000 	.word	0x40021000
 8008af8:	20000030 	.word	0x20000030
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008afc:	4b8c      	ldr	r3, [pc, #560]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1ea      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f003 0304 	and.w	r3, r3, #4
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 80a6 	beq.w	8008c64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008b18:	2300      	movs	r3, #0
 8008b1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008b1c:	4b84      	ldr	r3, [pc, #528]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <HAL_RCC_OscConfig+0x2b4>
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e000      	b.n	8008b2e <HAL_RCC_OscConfig+0x2b6>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00d      	beq.n	8008b4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b32:	4b7f      	ldr	r3, [pc, #508]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b36:	4a7e      	ldr	r2, [pc, #504]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b3e:	4b7c      	ldr	r3, [pc, #496]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008b46:	60fb      	str	r3, [r7, #12]
 8008b48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b4e:	4b79      	ldr	r3, [pc, #484]	@ (8008d34 <HAL_RCC_OscConfig+0x4bc>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d118      	bne.n	8008b8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008b5a:	4b76      	ldr	r3, [pc, #472]	@ (8008d34 <HAL_RCC_OscConfig+0x4bc>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	4a75      	ldr	r2, [pc, #468]	@ (8008d34 <HAL_RCC_OscConfig+0x4bc>)
 8008b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b66:	f7fb fba3 	bl	80042b0 <HAL_GetTick>
 8008b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b6c:	e008      	b.n	8008b80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b6e:	f7fb fb9f 	bl	80042b0 <HAL_GetTick>
 8008b72:	4602      	mov	r2, r0
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	1ad3      	subs	r3, r2, r3
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d901      	bls.n	8008b80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	e183      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b80:	4b6c      	ldr	r3, [pc, #432]	@ (8008d34 <HAL_RCC_OscConfig+0x4bc>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d0f0      	beq.n	8008b6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	689b      	ldr	r3, [r3, #8]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d108      	bne.n	8008ba6 <HAL_RCC_OscConfig+0x32e>
 8008b94:	4b66      	ldr	r3, [pc, #408]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b9a:	4a65      	ldr	r2, [pc, #404]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008b9c:	f043 0301 	orr.w	r3, r3, #1
 8008ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ba4:	e024      	b.n	8008bf0 <HAL_RCC_OscConfig+0x378>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	2b05      	cmp	r3, #5
 8008bac:	d110      	bne.n	8008bd0 <HAL_RCC_OscConfig+0x358>
 8008bae:	4b60      	ldr	r3, [pc, #384]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bb4:	4a5e      	ldr	r2, [pc, #376]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008bb6:	f043 0304 	orr.w	r3, r3, #4
 8008bba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008bc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bc4:	4a5a      	ldr	r2, [pc, #360]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008bc6:	f043 0301 	orr.w	r3, r3, #1
 8008bca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008bce:	e00f      	b.n	8008bf0 <HAL_RCC_OscConfig+0x378>
 8008bd0:	4b57      	ldr	r3, [pc, #348]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bd6:	4a56      	ldr	r2, [pc, #344]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008bd8:	f023 0301 	bic.w	r3, r3, #1
 8008bdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008be0:	4b53      	ldr	r3, [pc, #332]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008be6:	4a52      	ldr	r2, [pc, #328]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008be8:	f023 0304 	bic.w	r3, r3, #4
 8008bec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d016      	beq.n	8008c26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bf8:	f7fb fb5a 	bl	80042b0 <HAL_GetTick>
 8008bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008bfe:	e00a      	b.n	8008c16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c00:	f7fb fb56 	bl	80042b0 <HAL_GetTick>
 8008c04:	4602      	mov	r2, r0
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c0e:	4293      	cmp	r3, r2
 8008c10:	d901      	bls.n	8008c16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e138      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008c16:	4b46      	ldr	r3, [pc, #280]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c1c:	f003 0302 	and.w	r3, r3, #2
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d0ed      	beq.n	8008c00 <HAL_RCC_OscConfig+0x388>
 8008c24:	e015      	b.n	8008c52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c26:	f7fb fb43 	bl	80042b0 <HAL_GetTick>
 8008c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c2c:	e00a      	b.n	8008c44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c2e:	f7fb fb3f 	bl	80042b0 <HAL_GetTick>
 8008c32:	4602      	mov	r2, r0
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	1ad3      	subs	r3, r2, r3
 8008c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d901      	bls.n	8008c44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e121      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008c44:	4b3a      	ldr	r3, [pc, #232]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1ed      	bne.n	8008c2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c52:	7ffb      	ldrb	r3, [r7, #31]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d105      	bne.n	8008c64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c58:	4b35      	ldr	r3, [pc, #212]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c5c:	4a34      	ldr	r2, [pc, #208]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008c5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c62:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0320 	and.w	r3, r3, #32
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d03c      	beq.n	8008cea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	699b      	ldr	r3, [r3, #24]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d01c      	beq.n	8008cb2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008c78:	4b2d      	ldr	r3, [pc, #180]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008c7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008c7e:	4a2c      	ldr	r2, [pc, #176]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008c80:	f043 0301 	orr.w	r3, r3, #1
 8008c84:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c88:	f7fb fb12 	bl	80042b0 <HAL_GetTick>
 8008c8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008c8e:	e008      	b.n	8008ca2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008c90:	f7fb fb0e 	bl	80042b0 <HAL_GetTick>
 8008c94:	4602      	mov	r2, r0
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d901      	bls.n	8008ca2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e0f2      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008ca2:	4b23      	ldr	r3, [pc, #140]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008ca4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d0ef      	beq.n	8008c90 <HAL_RCC_OscConfig+0x418>
 8008cb0:	e01b      	b.n	8008cea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008cb2:	4b1f      	ldr	r3, [pc, #124]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008cb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008cba:	f023 0301 	bic.w	r3, r3, #1
 8008cbe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cc2:	f7fb faf5 	bl	80042b0 <HAL_GetTick>
 8008cc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008cc8:	e008      	b.n	8008cdc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cca:	f7fb faf1 	bl	80042b0 <HAL_GetTick>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	2b02      	cmp	r3, #2
 8008cd6:	d901      	bls.n	8008cdc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	e0d5      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008cdc:	4b14      	ldr	r3, [pc, #80]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1ef      	bne.n	8008cca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	69db      	ldr	r3, [r3, #28]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f000 80c9 	beq.w	8008e86 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008cf4:	4b0e      	ldr	r3, [pc, #56]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f003 030c 	and.w	r3, r3, #12
 8008cfc:	2b0c      	cmp	r3, #12
 8008cfe:	f000 8083 	beq.w	8008e08 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	69db      	ldr	r3, [r3, #28]
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d15e      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d0a:	4b09      	ldr	r3, [pc, #36]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a08      	ldr	r2, [pc, #32]	@ (8008d30 <HAL_RCC_OscConfig+0x4b8>)
 8008d10:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d16:	f7fb facb 	bl	80042b0 <HAL_GetTick>
 8008d1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d1c:	e00c      	b.n	8008d38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d1e:	f7fb fac7 	bl	80042b0 <HAL_GetTick>
 8008d22:	4602      	mov	r2, r0
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d905      	bls.n	8008d38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008d2c:	2303      	movs	r3, #3
 8008d2e:	e0ab      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
 8008d30:	40021000 	.word	0x40021000
 8008d34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d38:	4b55      	ldr	r3, [pc, #340]	@ (8008e90 <HAL_RCC_OscConfig+0x618>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1ec      	bne.n	8008d1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008d44:	4b52      	ldr	r3, [pc, #328]	@ (8008e90 <HAL_RCC_OscConfig+0x618>)
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	4b52      	ldr	r3, [pc, #328]	@ (8008e94 <HAL_RCC_OscConfig+0x61c>)
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	6a11      	ldr	r1, [r2, #32]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008d54:	3a01      	subs	r2, #1
 8008d56:	0112      	lsls	r2, r2, #4
 8008d58:	4311      	orrs	r1, r2
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008d5e:	0212      	lsls	r2, r2, #8
 8008d60:	4311      	orrs	r1, r2
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008d66:	0852      	lsrs	r2, r2, #1
 8008d68:	3a01      	subs	r2, #1
 8008d6a:	0552      	lsls	r2, r2, #21
 8008d6c:	4311      	orrs	r1, r2
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008d72:	0852      	lsrs	r2, r2, #1
 8008d74:	3a01      	subs	r2, #1
 8008d76:	0652      	lsls	r2, r2, #25
 8008d78:	4311      	orrs	r1, r2
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008d7e:	06d2      	lsls	r2, r2, #27
 8008d80:	430a      	orrs	r2, r1
 8008d82:	4943      	ldr	r1, [pc, #268]	@ (8008e90 <HAL_RCC_OscConfig+0x618>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d88:	4b41      	ldr	r3, [pc, #260]	@ (8008e90 <HAL_RCC_OscConfig+0x618>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a40      	ldr	r2, [pc, #256]	@ (8008e90 <HAL_RCC_OscConfig+0x618>)
 8008d8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008d94:	4b3e      	ldr	r3, [pc, #248]	@ (8008e90 <HAL_RCC_OscConfig+0x618>)
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	4a3d      	ldr	r2, [pc, #244]	@ (8008e90 <HAL_RCC_OscConfig+0x618>)
 8008d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da0:	f7fb fa86 	bl	80042b0 <HAL_GetTick>
 8008da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008da6:	e008      	b.n	8008dba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008da8:	f7fb fa82 	bl	80042b0 <HAL_GetTick>
 8008dac:	4602      	mov	r2, r0
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	1ad3      	subs	r3, r2, r3
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d901      	bls.n	8008dba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008db6:	2303      	movs	r3, #3
 8008db8:	e066      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008dba:	4b35      	ldr	r3, [pc, #212]	@ (8008e90 <HAL_RCC_OscConfig+0x618>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d0f0      	beq.n	8008da8 <HAL_RCC_OscConfig+0x530>
 8008dc6:	e05e      	b.n	8008e86 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dc8:	4b31      	ldr	r3, [pc, #196]	@ (8008e90 <HAL_RCC_OscConfig+0x618>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a30      	ldr	r2, [pc, #192]	@ (8008e90 <HAL_RCC_OscConfig+0x618>)
 8008dce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd4:	f7fb fa6c 	bl	80042b0 <HAL_GetTick>
 8008dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dda:	e008      	b.n	8008dee <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ddc:	f7fb fa68 	bl	80042b0 <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d901      	bls.n	8008dee <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e04c      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008dee:	4b28      	ldr	r3, [pc, #160]	@ (8008e90 <HAL_RCC_OscConfig+0x618>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1f0      	bne.n	8008ddc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008dfa:	4b25      	ldr	r3, [pc, #148]	@ (8008e90 <HAL_RCC_OscConfig+0x618>)
 8008dfc:	68da      	ldr	r2, [r3, #12]
 8008dfe:	4924      	ldr	r1, [pc, #144]	@ (8008e90 <HAL_RCC_OscConfig+0x618>)
 8008e00:	4b25      	ldr	r3, [pc, #148]	@ (8008e98 <HAL_RCC_OscConfig+0x620>)
 8008e02:	4013      	ands	r3, r2
 8008e04:	60cb      	str	r3, [r1, #12]
 8008e06:	e03e      	b.n	8008e86 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d101      	bne.n	8008e14 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008e10:	2301      	movs	r3, #1
 8008e12:	e039      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008e14:	4b1e      	ldr	r3, [pc, #120]	@ (8008e90 <HAL_RCC_OscConfig+0x618>)
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	f003 0203 	and.w	r2, r3, #3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a1b      	ldr	r3, [r3, #32]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d12c      	bne.n	8008e82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e32:	3b01      	subs	r3, #1
 8008e34:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d123      	bne.n	8008e82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e44:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d11b      	bne.n	8008e82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e54:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d113      	bne.n	8008e82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e64:	085b      	lsrs	r3, r3, #1
 8008e66:	3b01      	subs	r3, #1
 8008e68:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d109      	bne.n	8008e82 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e78:	085b      	lsrs	r3, r3, #1
 8008e7a:	3b01      	subs	r3, #1
 8008e7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d001      	beq.n	8008e86 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e000      	b.n	8008e88 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3720      	adds	r7, #32
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	40021000 	.word	0x40021000
 8008e94:	019f800c 	.word	0x019f800c
 8008e98:	feeefffc 	.word	0xfeeefffc

08008e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d101      	bne.n	8008eb4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	e11e      	b.n	80090f2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008eb4:	4b91      	ldr	r3, [pc, #580]	@ (80090fc <HAL_RCC_ClockConfig+0x260>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 030f 	and.w	r3, r3, #15
 8008ebc:	683a      	ldr	r2, [r7, #0]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d910      	bls.n	8008ee4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008ec2:	4b8e      	ldr	r3, [pc, #568]	@ (80090fc <HAL_RCC_ClockConfig+0x260>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f023 020f 	bic.w	r2, r3, #15
 8008eca:	498c      	ldr	r1, [pc, #560]	@ (80090fc <HAL_RCC_ClockConfig+0x260>)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008ed2:	4b8a      	ldr	r3, [pc, #552]	@ (80090fc <HAL_RCC_ClockConfig+0x260>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f003 030f 	and.w	r3, r3, #15
 8008eda:	683a      	ldr	r2, [r7, #0]
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d001      	beq.n	8008ee4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e106      	b.n	80090f2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d073      	beq.n	8008fd8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	2b03      	cmp	r3, #3
 8008ef6:	d129      	bne.n	8008f4c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ef8:	4b81      	ldr	r3, [pc, #516]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d101      	bne.n	8008f08 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008f04:	2301      	movs	r3, #1
 8008f06:	e0f4      	b.n	80090f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008f08:	f000 f99e 	bl	8009248 <RCC_GetSysClockFreqFromPLLSource>
 8008f0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	4a7c      	ldr	r2, [pc, #496]	@ (8009104 <HAL_RCC_ClockConfig+0x268>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d93f      	bls.n	8008f96 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008f16:	4b7a      	ldr	r3, [pc, #488]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d009      	beq.n	8008f36 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d033      	beq.n	8008f96 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d12f      	bne.n	8008f96 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f36:	4b72      	ldr	r3, [pc, #456]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f3e:	4a70      	ldr	r2, [pc, #448]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8008f40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008f46:	2380      	movs	r3, #128	@ 0x80
 8008f48:	617b      	str	r3, [r7, #20]
 8008f4a:	e024      	b.n	8008f96 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	2b02      	cmp	r3, #2
 8008f52:	d107      	bne.n	8008f64 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f54:	4b6a      	ldr	r3, [pc, #424]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d109      	bne.n	8008f74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f60:	2301      	movs	r3, #1
 8008f62:	e0c6      	b.n	80090f2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f64:	4b66      	ldr	r3, [pc, #408]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d101      	bne.n	8008f74 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	e0be      	b.n	80090f2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008f74:	f000 f8ce 	bl	8009114 <HAL_RCC_GetSysClockFreq>
 8008f78:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008f7a:	693b      	ldr	r3, [r7, #16]
 8008f7c:	4a61      	ldr	r2, [pc, #388]	@ (8009104 <HAL_RCC_ClockConfig+0x268>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d909      	bls.n	8008f96 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008f82:	4b5f      	ldr	r3, [pc, #380]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f8a:	4a5d      	ldr	r2, [pc, #372]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8008f8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f90:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008f92:	2380      	movs	r3, #128	@ 0x80
 8008f94:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008f96:	4b5a      	ldr	r3, [pc, #360]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f023 0203 	bic.w	r2, r3, #3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	4957      	ldr	r1, [pc, #348]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fa8:	f7fb f982 	bl	80042b0 <HAL_GetTick>
 8008fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fae:	e00a      	b.n	8008fc6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fb0:	f7fb f97e 	bl	80042b0 <HAL_GetTick>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d901      	bls.n	8008fc6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008fc2:	2303      	movs	r3, #3
 8008fc4:	e095      	b.n	80090f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8008fc8:	689b      	ldr	r3, [r3, #8]
 8008fca:	f003 020c 	and.w	r2, r3, #12
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d1eb      	bne.n	8008fb0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f003 0302 	and.w	r3, r3, #2
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d023      	beq.n	800902c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f003 0304 	and.w	r3, r3, #4
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ff0:	4b43      	ldr	r3, [pc, #268]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	4a42      	ldr	r2, [pc, #264]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8008ff6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008ffa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0308 	and.w	r3, r3, #8
 8009004:	2b00      	cmp	r3, #0
 8009006:	d007      	beq.n	8009018 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009008:	4b3d      	ldr	r3, [pc, #244]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009010:	4a3b      	ldr	r2, [pc, #236]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8009012:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009016:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009018:	4b39      	ldr	r3, [pc, #228]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	4936      	ldr	r1, [pc, #216]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8009026:	4313      	orrs	r3, r2
 8009028:	608b      	str	r3, [r1, #8]
 800902a:	e008      	b.n	800903e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2b80      	cmp	r3, #128	@ 0x80
 8009030:	d105      	bne.n	800903e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009032:	4b33      	ldr	r3, [pc, #204]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	4a32      	ldr	r2, [pc, #200]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8009038:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800903c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800903e:	4b2f      	ldr	r3, [pc, #188]	@ (80090fc <HAL_RCC_ClockConfig+0x260>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 030f 	and.w	r3, r3, #15
 8009046:	683a      	ldr	r2, [r7, #0]
 8009048:	429a      	cmp	r2, r3
 800904a:	d21d      	bcs.n	8009088 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800904c:	4b2b      	ldr	r3, [pc, #172]	@ (80090fc <HAL_RCC_ClockConfig+0x260>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f023 020f 	bic.w	r2, r3, #15
 8009054:	4929      	ldr	r1, [pc, #164]	@ (80090fc <HAL_RCC_ClockConfig+0x260>)
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	4313      	orrs	r3, r2
 800905a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800905c:	f7fb f928 	bl	80042b0 <HAL_GetTick>
 8009060:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009062:	e00a      	b.n	800907a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009064:	f7fb f924 	bl	80042b0 <HAL_GetTick>
 8009068:	4602      	mov	r2, r0
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009072:	4293      	cmp	r3, r2
 8009074:	d901      	bls.n	800907a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009076:	2303      	movs	r3, #3
 8009078:	e03b      	b.n	80090f2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800907a:	4b20      	ldr	r3, [pc, #128]	@ (80090fc <HAL_RCC_ClockConfig+0x260>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f003 030f 	and.w	r3, r3, #15
 8009082:	683a      	ldr	r2, [r7, #0]
 8009084:	429a      	cmp	r2, r3
 8009086:	d1ed      	bne.n	8009064 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f003 0304 	and.w	r3, r3, #4
 8009090:	2b00      	cmp	r3, #0
 8009092:	d008      	beq.n	80090a6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009094:	4b1a      	ldr	r3, [pc, #104]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	4917      	ldr	r1, [pc, #92]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0308 	and.w	r3, r3, #8
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d009      	beq.n	80090c6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80090b2:	4b13      	ldr	r3, [pc, #76]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	691b      	ldr	r3, [r3, #16]
 80090be:	00db      	lsls	r3, r3, #3
 80090c0:	490f      	ldr	r1, [pc, #60]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80090c6:	f000 f825 	bl	8009114 <HAL_RCC_GetSysClockFreq>
 80090ca:	4602      	mov	r2, r0
 80090cc:	4b0c      	ldr	r3, [pc, #48]	@ (8009100 <HAL_RCC_ClockConfig+0x264>)
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	091b      	lsrs	r3, r3, #4
 80090d2:	f003 030f 	and.w	r3, r3, #15
 80090d6:	490c      	ldr	r1, [pc, #48]	@ (8009108 <HAL_RCC_ClockConfig+0x26c>)
 80090d8:	5ccb      	ldrb	r3, [r1, r3]
 80090da:	f003 031f 	and.w	r3, r3, #31
 80090de:	fa22 f303 	lsr.w	r3, r2, r3
 80090e2:	4a0a      	ldr	r2, [pc, #40]	@ (800910c <HAL_RCC_ClockConfig+0x270>)
 80090e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80090e6:	4b0a      	ldr	r3, [pc, #40]	@ (8009110 <HAL_RCC_ClockConfig+0x274>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7fb f894 	bl	8004218 <HAL_InitTick>
 80090f0:	4603      	mov	r3, r0
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3718      	adds	r7, #24
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
 80090fa:	bf00      	nop
 80090fc:	40022000 	.word	0x40022000
 8009100:	40021000 	.word	0x40021000
 8009104:	04c4b400 	.word	0x04c4b400
 8009108:	08016e08 	.word	0x08016e08
 800910c:	2000002c 	.word	0x2000002c
 8009110:	20000030 	.word	0x20000030

08009114 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009114:	b480      	push	{r7}
 8009116:	b087      	sub	sp, #28
 8009118:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800911a:	4b2c      	ldr	r3, [pc, #176]	@ (80091cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f003 030c 	and.w	r3, r3, #12
 8009122:	2b04      	cmp	r3, #4
 8009124:	d102      	bne.n	800912c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009126:	4b2a      	ldr	r3, [pc, #168]	@ (80091d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009128:	613b      	str	r3, [r7, #16]
 800912a:	e047      	b.n	80091bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800912c:	4b27      	ldr	r3, [pc, #156]	@ (80091cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	f003 030c 	and.w	r3, r3, #12
 8009134:	2b08      	cmp	r3, #8
 8009136:	d102      	bne.n	800913e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009138:	4b26      	ldr	r3, [pc, #152]	@ (80091d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800913a:	613b      	str	r3, [r7, #16]
 800913c:	e03e      	b.n	80091bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800913e:	4b23      	ldr	r3, [pc, #140]	@ (80091cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	f003 030c 	and.w	r3, r3, #12
 8009146:	2b0c      	cmp	r3, #12
 8009148:	d136      	bne.n	80091b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800914a:	4b20      	ldr	r3, [pc, #128]	@ (80091cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800914c:	68db      	ldr	r3, [r3, #12]
 800914e:	f003 0303 	and.w	r3, r3, #3
 8009152:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009154:	4b1d      	ldr	r3, [pc, #116]	@ (80091cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	091b      	lsrs	r3, r3, #4
 800915a:	f003 030f 	and.w	r3, r3, #15
 800915e:	3301      	adds	r3, #1
 8009160:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b03      	cmp	r3, #3
 8009166:	d10c      	bne.n	8009182 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009168:	4a1a      	ldr	r2, [pc, #104]	@ (80091d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009170:	4a16      	ldr	r2, [pc, #88]	@ (80091cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009172:	68d2      	ldr	r2, [r2, #12]
 8009174:	0a12      	lsrs	r2, r2, #8
 8009176:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800917a:	fb02 f303 	mul.w	r3, r2, r3
 800917e:	617b      	str	r3, [r7, #20]
      break;
 8009180:	e00c      	b.n	800919c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009182:	4a13      	ldr	r2, [pc, #76]	@ (80091d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	fbb2 f3f3 	udiv	r3, r2, r3
 800918a:	4a10      	ldr	r2, [pc, #64]	@ (80091cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800918c:	68d2      	ldr	r2, [r2, #12]
 800918e:	0a12      	lsrs	r2, r2, #8
 8009190:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009194:	fb02 f303 	mul.w	r3, r2, r3
 8009198:	617b      	str	r3, [r7, #20]
      break;
 800919a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800919c:	4b0b      	ldr	r3, [pc, #44]	@ (80091cc <HAL_RCC_GetSysClockFreq+0xb8>)
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	0e5b      	lsrs	r3, r3, #25
 80091a2:	f003 0303 	and.w	r3, r3, #3
 80091a6:	3301      	adds	r3, #1
 80091a8:	005b      	lsls	r3, r3, #1
 80091aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b4:	613b      	str	r3, [r7, #16]
 80091b6:	e001      	b.n	80091bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80091bc:	693b      	ldr	r3, [r7, #16]
}
 80091be:	4618      	mov	r0, r3
 80091c0:	371c      	adds	r7, #28
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr
 80091ca:	bf00      	nop
 80091cc:	40021000 	.word	0x40021000
 80091d0:	00f42400 	.word	0x00f42400
 80091d4:	016e3600 	.word	0x016e3600

080091d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80091d8:	b480      	push	{r7}
 80091da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80091dc:	4b03      	ldr	r3, [pc, #12]	@ (80091ec <HAL_RCC_GetHCLKFreq+0x14>)
 80091de:	681b      	ldr	r3, [r3, #0]
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	46bd      	mov	sp, r7
 80091e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	2000002c 	.word	0x2000002c

080091f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80091f4:	f7ff fff0 	bl	80091d8 <HAL_RCC_GetHCLKFreq>
 80091f8:	4602      	mov	r2, r0
 80091fa:	4b06      	ldr	r3, [pc, #24]	@ (8009214 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091fc:	689b      	ldr	r3, [r3, #8]
 80091fe:	0a1b      	lsrs	r3, r3, #8
 8009200:	f003 0307 	and.w	r3, r3, #7
 8009204:	4904      	ldr	r1, [pc, #16]	@ (8009218 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009206:	5ccb      	ldrb	r3, [r1, r3]
 8009208:	f003 031f 	and.w	r3, r3, #31
 800920c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009210:	4618      	mov	r0, r3
 8009212:	bd80      	pop	{r7, pc}
 8009214:	40021000 	.word	0x40021000
 8009218:	08016e18 	.word	0x08016e18

0800921c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009220:	f7ff ffda 	bl	80091d8 <HAL_RCC_GetHCLKFreq>
 8009224:	4602      	mov	r2, r0
 8009226:	4b06      	ldr	r3, [pc, #24]	@ (8009240 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	0adb      	lsrs	r3, r3, #11
 800922c:	f003 0307 	and.w	r3, r3, #7
 8009230:	4904      	ldr	r1, [pc, #16]	@ (8009244 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009232:	5ccb      	ldrb	r3, [r1, r3]
 8009234:	f003 031f 	and.w	r3, r3, #31
 8009238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800923c:	4618      	mov	r0, r3
 800923e:	bd80      	pop	{r7, pc}
 8009240:	40021000 	.word	0x40021000
 8009244:	08016e18 	.word	0x08016e18

08009248 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800924e:	4b1e      	ldr	r3, [pc, #120]	@ (80092c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f003 0303 	and.w	r3, r3, #3
 8009256:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009258:	4b1b      	ldr	r3, [pc, #108]	@ (80092c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	091b      	lsrs	r3, r3, #4
 800925e:	f003 030f 	and.w	r3, r3, #15
 8009262:	3301      	adds	r3, #1
 8009264:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	2b03      	cmp	r3, #3
 800926a:	d10c      	bne.n	8009286 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800926c:	4a17      	ldr	r2, [pc, #92]	@ (80092cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	fbb2 f3f3 	udiv	r3, r2, r3
 8009274:	4a14      	ldr	r2, [pc, #80]	@ (80092c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009276:	68d2      	ldr	r2, [r2, #12]
 8009278:	0a12      	lsrs	r2, r2, #8
 800927a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800927e:	fb02 f303 	mul.w	r3, r2, r3
 8009282:	617b      	str	r3, [r7, #20]
    break;
 8009284:	e00c      	b.n	80092a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009286:	4a12      	ldr	r2, [pc, #72]	@ (80092d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	fbb2 f3f3 	udiv	r3, r2, r3
 800928e:	4a0e      	ldr	r2, [pc, #56]	@ (80092c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009290:	68d2      	ldr	r2, [r2, #12]
 8009292:	0a12      	lsrs	r2, r2, #8
 8009294:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009298:	fb02 f303 	mul.w	r3, r2, r3
 800929c:	617b      	str	r3, [r7, #20]
    break;
 800929e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80092a0:	4b09      	ldr	r3, [pc, #36]	@ (80092c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	0e5b      	lsrs	r3, r3, #25
 80092a6:	f003 0303 	and.w	r3, r3, #3
 80092aa:	3301      	adds	r3, #1
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80092b0:	697a      	ldr	r2, [r7, #20]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80092ba:	687b      	ldr	r3, [r7, #4]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	371c      	adds	r7, #28
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr
 80092c8:	40021000 	.word	0x40021000
 80092cc:	016e3600 	.word	0x016e3600
 80092d0:	00f42400 	.word	0x00f42400

080092d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80092dc:	2300      	movs	r3, #0
 80092de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80092e0:	2300      	movs	r3, #0
 80092e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	f000 8098 	beq.w	8009422 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092f2:	2300      	movs	r3, #0
 80092f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80092f6:	4b43      	ldr	r3, [pc, #268]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80092f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d10d      	bne.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009302:	4b40      	ldr	r3, [pc, #256]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009306:	4a3f      	ldr	r2, [pc, #252]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800930c:	6593      	str	r3, [r2, #88]	@ 0x58
 800930e:	4b3d      	ldr	r3, [pc, #244]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009316:	60bb      	str	r3, [r7, #8]
 8009318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800931a:	2301      	movs	r3, #1
 800931c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800931e:	4b3a      	ldr	r3, [pc, #232]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a39      	ldr	r2, [pc, #228]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009328:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800932a:	f7fa ffc1 	bl	80042b0 <HAL_GetTick>
 800932e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009330:	e009      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009332:	f7fa ffbd 	bl	80042b0 <HAL_GetTick>
 8009336:	4602      	mov	r2, r0
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	1ad3      	subs	r3, r2, r3
 800933c:	2b02      	cmp	r3, #2
 800933e:	d902      	bls.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009340:	2303      	movs	r3, #3
 8009342:	74fb      	strb	r3, [r7, #19]
        break;
 8009344:	e005      	b.n	8009352 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009346:	4b30      	ldr	r3, [pc, #192]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800934e:	2b00      	cmp	r3, #0
 8009350:	d0ef      	beq.n	8009332 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009352:	7cfb      	ldrb	r3, [r7, #19]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d159      	bne.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009358:	4b2a      	ldr	r3, [pc, #168]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800935a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800935e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009362:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d01e      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800936e:	697a      	ldr	r2, [r7, #20]
 8009370:	429a      	cmp	r2, r3
 8009372:	d019      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009374:	4b23      	ldr	r3, [pc, #140]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800937a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800937e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009380:	4b20      	ldr	r3, [pc, #128]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009386:	4a1f      	ldr	r2, [pc, #124]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800938c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009390:	4b1c      	ldr	r3, [pc, #112]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009396:	4a1b      	ldr	r2, [pc, #108]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009398:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800939c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80093a0:	4a18      	ldr	r2, [pc, #96]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d016      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093b2:	f7fa ff7d 	bl	80042b0 <HAL_GetTick>
 80093b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093b8:	e00b      	b.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093ba:	f7fa ff79 	bl	80042b0 <HAL_GetTick>
 80093be:	4602      	mov	r2, r0
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	1ad3      	subs	r3, r2, r3
 80093c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d902      	bls.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	74fb      	strb	r3, [r7, #19]
            break;
 80093d0:	e006      	b.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093d2:	4b0c      	ldr	r3, [pc, #48]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d8:	f003 0302 	and.w	r3, r3, #2
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d0ec      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80093e0:	7cfb      	ldrb	r3, [r7, #19]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d10b      	bne.n	80093fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093e6:	4b07      	ldr	r3, [pc, #28]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093f4:	4903      	ldr	r1, [pc, #12]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80093f6:	4313      	orrs	r3, r2
 80093f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80093fc:	e008      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093fe:	7cfb      	ldrb	r3, [r7, #19]
 8009400:	74bb      	strb	r3, [r7, #18]
 8009402:	e005      	b.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009404:	40021000 	.word	0x40021000
 8009408:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800940c:	7cfb      	ldrb	r3, [r7, #19]
 800940e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009410:	7c7b      	ldrb	r3, [r7, #17]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d105      	bne.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009416:	4ba7      	ldr	r3, [pc, #668]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800941a:	4aa6      	ldr	r2, [pc, #664]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800941c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009420:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00a      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800942e:	4ba1      	ldr	r3, [pc, #644]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009434:	f023 0203 	bic.w	r2, r3, #3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	499d      	ldr	r1, [pc, #628]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800943e:	4313      	orrs	r3, r2
 8009440:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 0302 	and.w	r3, r3, #2
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00a      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009450:	4b98      	ldr	r3, [pc, #608]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009456:	f023 020c 	bic.w	r2, r3, #12
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	4995      	ldr	r1, [pc, #596]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009460:	4313      	orrs	r3, r2
 8009462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 0304 	and.w	r3, r3, #4
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00a      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009472:	4b90      	ldr	r3, [pc, #576]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009478:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	68db      	ldr	r3, [r3, #12]
 8009480:	498c      	ldr	r1, [pc, #560]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009482:	4313      	orrs	r3, r2
 8009484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0308 	and.w	r3, r3, #8
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00a      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009494:	4b87      	ldr	r3, [pc, #540]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800949a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	4984      	ldr	r1, [pc, #528]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094a4:	4313      	orrs	r3, r2
 80094a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0310 	and.w	r3, r3, #16
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00a      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80094b6:	4b7f      	ldr	r3, [pc, #508]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	695b      	ldr	r3, [r3, #20]
 80094c4:	497b      	ldr	r1, [pc, #492]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0320 	and.w	r3, r3, #32
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00a      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80094d8:	4b76      	ldr	r3, [pc, #472]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	4973      	ldr	r1, [pc, #460]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094e8:	4313      	orrs	r3, r2
 80094ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00a      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80094fa:	4b6e      	ldr	r3, [pc, #440]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80094fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009500:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	69db      	ldr	r3, [r3, #28]
 8009508:	496a      	ldr	r1, [pc, #424]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800950a:	4313      	orrs	r3, r2
 800950c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00a      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800951c:	4b65      	ldr	r3, [pc, #404]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800951e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009522:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	4962      	ldr	r1, [pc, #392]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800952c:	4313      	orrs	r3, r2
 800952e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00a      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800953e:	4b5d      	ldr	r3, [pc, #372]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009544:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800954c:	4959      	ldr	r1, [pc, #356]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800954e:	4313      	orrs	r3, r2
 8009550:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00a      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009560:	4b54      	ldr	r3, [pc, #336]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009562:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009566:	f023 0203 	bic.w	r2, r3, #3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800956e:	4951      	ldr	r1, [pc, #324]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009570:	4313      	orrs	r3, r2
 8009572:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00a      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009582:	4b4c      	ldr	r3, [pc, #304]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009588:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009590:	4948      	ldr	r1, [pc, #288]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009592:	4313      	orrs	r3, r2
 8009594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d015      	beq.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80095a4:	4b43      	ldr	r3, [pc, #268]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095b2:	4940      	ldr	r1, [pc, #256]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095c2:	d105      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095c4:	4b3b      	ldr	r3, [pc, #236]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	4a3a      	ldr	r2, [pc, #232]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095ce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d015      	beq.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80095dc:	4b35      	ldr	r3, [pc, #212]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80095e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095ea:	4932      	ldr	r1, [pc, #200]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095ec:	4313      	orrs	r3, r2
 80095ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095fa:	d105      	bne.n	8009608 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095fc:	4b2d      	ldr	r3, [pc, #180]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80095fe:	68db      	ldr	r3, [r3, #12]
 8009600:	4a2c      	ldr	r2, [pc, #176]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009606:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009610:	2b00      	cmp	r3, #0
 8009612:	d015      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009614:	4b27      	ldr	r3, [pc, #156]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800961a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009622:	4924      	ldr	r1, [pc, #144]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009624:	4313      	orrs	r3, r2
 8009626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800962e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009632:	d105      	bne.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009634:	4b1f      	ldr	r3, [pc, #124]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	4a1e      	ldr	r2, [pc, #120]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800963a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800963e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d015      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800964c:	4b19      	ldr	r3, [pc, #100]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800964e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009652:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800965a:	4916      	ldr	r1, [pc, #88]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800965c:	4313      	orrs	r3, r2
 800965e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009666:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800966a:	d105      	bne.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800966c:	4b11      	ldr	r3, [pc, #68]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	4a10      	ldr	r2, [pc, #64]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009672:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009676:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d019      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009684:	4b0b      	ldr	r3, [pc, #44]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800968a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009692:	4908      	ldr	r1, [pc, #32]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009694:	4313      	orrs	r3, r2
 8009696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80096a2:	d109      	bne.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80096a4:	4b03      	ldr	r3, [pc, #12]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096a6:	68db      	ldr	r3, [r3, #12]
 80096a8:	4a02      	ldr	r2, [pc, #8]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096ae:	60d3      	str	r3, [r2, #12]
 80096b0:	e002      	b.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80096b2:	bf00      	nop
 80096b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d015      	beq.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80096c4:	4b29      	ldr	r3, [pc, #164]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096d2:	4926      	ldr	r1, [pc, #152]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096d4:	4313      	orrs	r3, r2
 80096d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096e2:	d105      	bne.n	80096f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80096e4:	4b21      	ldr	r3, [pc, #132]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	4a20      	ldr	r2, [pc, #128]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d015      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80096fc:	4b1b      	ldr	r3, [pc, #108]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80096fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009702:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800970a:	4918      	ldr	r1, [pc, #96]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800970c:	4313      	orrs	r3, r2
 800970e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009716:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800971a:	d105      	bne.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800971c:	4b13      	ldr	r3, [pc, #76]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	4a12      	ldr	r2, [pc, #72]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009726:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009730:	2b00      	cmp	r3, #0
 8009732:	d015      	beq.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009734:	4b0d      	ldr	r3, [pc, #52]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009736:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800973a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009742:	490a      	ldr	r1, [pc, #40]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009744:	4313      	orrs	r3, r2
 8009746:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800974e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009752:	d105      	bne.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009754:	4b05      	ldr	r3, [pc, #20]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	4a04      	ldr	r2, [pc, #16]	@ (800976c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800975a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800975e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009760:	7cbb      	ldrb	r3, [r7, #18]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3718      	adds	r7, #24
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
 800976a:	bf00      	nop
 800976c:	40021000 	.word	0x40021000

08009770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d101      	bne.n	8009782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e049      	b.n	8009816 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b00      	cmp	r3, #0
 800978c:	d106      	bne.n	800979c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7fa fa42 	bl	8003c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2202      	movs	r2, #2
 80097a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	3304      	adds	r3, #4
 80097ac:	4619      	mov	r1, r3
 80097ae:	4610      	mov	r0, r2
 80097b0:	f000 fe58 	bl	800a464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2201      	movs	r2, #1
 80097b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2201      	movs	r2, #1
 80097c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2201      	movs	r2, #1
 80097c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
	...

08009820 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009820:	b480      	push	{r7}
 8009822:	b085      	sub	sp, #20
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800982e:	b2db      	uxtb	r3, r3
 8009830:	2b01      	cmp	r3, #1
 8009832:	d001      	beq.n	8009838 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009834:	2301      	movs	r3, #1
 8009836:	e04c      	b.n	80098d2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2202      	movs	r2, #2
 800983c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a26      	ldr	r2, [pc, #152]	@ (80098e0 <HAL_TIM_Base_Start+0xc0>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d022      	beq.n	8009890 <HAL_TIM_Base_Start+0x70>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009852:	d01d      	beq.n	8009890 <HAL_TIM_Base_Start+0x70>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a22      	ldr	r2, [pc, #136]	@ (80098e4 <HAL_TIM_Base_Start+0xc4>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d018      	beq.n	8009890 <HAL_TIM_Base_Start+0x70>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a21      	ldr	r2, [pc, #132]	@ (80098e8 <HAL_TIM_Base_Start+0xc8>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d013      	beq.n	8009890 <HAL_TIM_Base_Start+0x70>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a1f      	ldr	r2, [pc, #124]	@ (80098ec <HAL_TIM_Base_Start+0xcc>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d00e      	beq.n	8009890 <HAL_TIM_Base_Start+0x70>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a1e      	ldr	r2, [pc, #120]	@ (80098f0 <HAL_TIM_Base_Start+0xd0>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d009      	beq.n	8009890 <HAL_TIM_Base_Start+0x70>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a1c      	ldr	r2, [pc, #112]	@ (80098f4 <HAL_TIM_Base_Start+0xd4>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d004      	beq.n	8009890 <HAL_TIM_Base_Start+0x70>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a1b      	ldr	r2, [pc, #108]	@ (80098f8 <HAL_TIM_Base_Start+0xd8>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d115      	bne.n	80098bc <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	689a      	ldr	r2, [r3, #8]
 8009896:	4b19      	ldr	r3, [pc, #100]	@ (80098fc <HAL_TIM_Base_Start+0xdc>)
 8009898:	4013      	ands	r3, r2
 800989a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b06      	cmp	r3, #6
 80098a0:	d015      	beq.n	80098ce <HAL_TIM_Base_Start+0xae>
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098a8:	d011      	beq.n	80098ce <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f042 0201 	orr.w	r2, r2, #1
 80098b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098ba:	e008      	b.n	80098ce <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f042 0201 	orr.w	r2, r2, #1
 80098ca:	601a      	str	r2, [r3, #0]
 80098cc:	e000      	b.n	80098d0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3714      	adds	r7, #20
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	40012c00 	.word	0x40012c00
 80098e4:	40000400 	.word	0x40000400
 80098e8:	40000800 	.word	0x40000800
 80098ec:	40000c00 	.word	0x40000c00
 80098f0:	40013400 	.word	0x40013400
 80098f4:	40014000 	.word	0x40014000
 80098f8:	40015000 	.word	0x40015000
 80098fc:	00010007 	.word	0x00010007

08009900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800990e:	b2db      	uxtb	r3, r3
 8009910:	2b01      	cmp	r3, #1
 8009912:	d001      	beq.n	8009918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009914:	2301      	movs	r3, #1
 8009916:	e054      	b.n	80099c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68da      	ldr	r2, [r3, #12]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f042 0201 	orr.w	r2, r2, #1
 800992e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a26      	ldr	r2, [pc, #152]	@ (80099d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d022      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x80>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009942:	d01d      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x80>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a22      	ldr	r2, [pc, #136]	@ (80099d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d018      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x80>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4a21      	ldr	r2, [pc, #132]	@ (80099d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d013      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x80>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	4a1f      	ldr	r2, [pc, #124]	@ (80099dc <HAL_TIM_Base_Start_IT+0xdc>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d00e      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x80>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a1e      	ldr	r2, [pc, #120]	@ (80099e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d009      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x80>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a1c      	ldr	r2, [pc, #112]	@ (80099e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d004      	beq.n	8009980 <HAL_TIM_Base_Start_IT+0x80>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a1b      	ldr	r2, [pc, #108]	@ (80099e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d115      	bne.n	80099ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	689a      	ldr	r2, [r3, #8]
 8009986:	4b19      	ldr	r3, [pc, #100]	@ (80099ec <HAL_TIM_Base_Start_IT+0xec>)
 8009988:	4013      	ands	r3, r2
 800998a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2b06      	cmp	r3, #6
 8009990:	d015      	beq.n	80099be <HAL_TIM_Base_Start_IT+0xbe>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009998:	d011      	beq.n	80099be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f042 0201 	orr.w	r2, r2, #1
 80099a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099aa:	e008      	b.n	80099be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f042 0201 	orr.w	r2, r2, #1
 80099ba:	601a      	str	r2, [r3, #0]
 80099bc:	e000      	b.n	80099c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80099c0:	2300      	movs	r3, #0
}
 80099c2:	4618      	mov	r0, r3
 80099c4:	3714      	adds	r7, #20
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	40012c00 	.word	0x40012c00
 80099d4:	40000400 	.word	0x40000400
 80099d8:	40000800 	.word	0x40000800
 80099dc:	40000c00 	.word	0x40000c00
 80099e0:	40013400 	.word	0x40013400
 80099e4:	40014000 	.word	0x40014000
 80099e8:	40015000 	.word	0x40015000
 80099ec:	00010007 	.word	0x00010007

080099f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80099f0:	b480      	push	{r7}
 80099f2:	b083      	sub	sp, #12
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	68da      	ldr	r2, [r3, #12]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f022 0201 	bic.w	r2, r2, #1
 8009a06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6a1a      	ldr	r2, [r3, #32]
 8009a0e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009a12:	4013      	ands	r3, r2
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10f      	bne.n	8009a38 <HAL_TIM_Base_Stop_IT+0x48>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	6a1a      	ldr	r2, [r3, #32]
 8009a1e:	f244 4344 	movw	r3, #17476	@ 0x4444
 8009a22:	4013      	ands	r3, r2
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d107      	bne.n	8009a38 <HAL_TIM_Base_Stop_IT+0x48>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681a      	ldr	r2, [r3, #0]
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f022 0201 	bic.w	r2, r2, #1
 8009a36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2201      	movs	r2, #1
 8009a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	370c      	adds	r7, #12
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr

08009a4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b082      	sub	sp, #8
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d101      	bne.n	8009a60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	e049      	b.n	8009af4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a66:	b2db      	uxtb	r3, r3
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d106      	bne.n	8009a7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7fa f899 	bl	8003bac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2202      	movs	r2, #2
 8009a7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	3304      	adds	r3, #4
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	f000 fce9 	bl	800a464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2201      	movs	r2, #1
 8009aa6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2201      	movs	r2, #1
 8009aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2201      	movs	r2, #1
 8009ade:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009af2:	2300      	movs	r3, #0
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d109      	bne.n	8009b20 <HAL_TIM_PWM_Start+0x24>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	bf14      	ite	ne
 8009b18:	2301      	movne	r3, #1
 8009b1a:	2300      	moveq	r3, #0
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	e03c      	b.n	8009b9a <HAL_TIM_PWM_Start+0x9e>
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	2b04      	cmp	r3, #4
 8009b24:	d109      	bne.n	8009b3a <HAL_TIM_PWM_Start+0x3e>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	bf14      	ite	ne
 8009b32:	2301      	movne	r3, #1
 8009b34:	2300      	moveq	r3, #0
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	e02f      	b.n	8009b9a <HAL_TIM_PWM_Start+0x9e>
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	2b08      	cmp	r3, #8
 8009b3e:	d109      	bne.n	8009b54 <HAL_TIM_PWM_Start+0x58>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	bf14      	ite	ne
 8009b4c:	2301      	movne	r3, #1
 8009b4e:	2300      	moveq	r3, #0
 8009b50:	b2db      	uxtb	r3, r3
 8009b52:	e022      	b.n	8009b9a <HAL_TIM_PWM_Start+0x9e>
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	2b0c      	cmp	r3, #12
 8009b58:	d109      	bne.n	8009b6e <HAL_TIM_PWM_Start+0x72>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009b60:	b2db      	uxtb	r3, r3
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	bf14      	ite	ne
 8009b66:	2301      	movne	r3, #1
 8009b68:	2300      	moveq	r3, #0
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	e015      	b.n	8009b9a <HAL_TIM_PWM_Start+0x9e>
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	2b10      	cmp	r3, #16
 8009b72:	d109      	bne.n	8009b88 <HAL_TIM_PWM_Start+0x8c>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009b7a:	b2db      	uxtb	r3, r3
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	bf14      	ite	ne
 8009b80:	2301      	movne	r3, #1
 8009b82:	2300      	moveq	r3, #0
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	e008      	b.n	8009b9a <HAL_TIM_PWM_Start+0x9e>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	bf14      	ite	ne
 8009b94:	2301      	movne	r3, #1
 8009b96:	2300      	moveq	r3, #0
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e0a6      	b.n	8009cf0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d104      	bne.n	8009bb2 <HAL_TIM_PWM_Start+0xb6>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2202      	movs	r2, #2
 8009bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009bb0:	e023      	b.n	8009bfa <HAL_TIM_PWM_Start+0xfe>
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	2b04      	cmp	r3, #4
 8009bb6:	d104      	bne.n	8009bc2 <HAL_TIM_PWM_Start+0xc6>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2202      	movs	r2, #2
 8009bbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009bc0:	e01b      	b.n	8009bfa <HAL_TIM_PWM_Start+0xfe>
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	2b08      	cmp	r3, #8
 8009bc6:	d104      	bne.n	8009bd2 <HAL_TIM_PWM_Start+0xd6>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2202      	movs	r2, #2
 8009bcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009bd0:	e013      	b.n	8009bfa <HAL_TIM_PWM_Start+0xfe>
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	2b0c      	cmp	r3, #12
 8009bd6:	d104      	bne.n	8009be2 <HAL_TIM_PWM_Start+0xe6>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2202      	movs	r2, #2
 8009bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009be0:	e00b      	b.n	8009bfa <HAL_TIM_PWM_Start+0xfe>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b10      	cmp	r3, #16
 8009be6:	d104      	bne.n	8009bf2 <HAL_TIM_PWM_Start+0xf6>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2202      	movs	r2, #2
 8009bec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009bf0:	e003      	b.n	8009bfa <HAL_TIM_PWM_Start+0xfe>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	6839      	ldr	r1, [r7, #0]
 8009c02:	4618      	mov	r0, r3
 8009c04:	f001 f8a8 	bl	800ad58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a3a      	ldr	r2, [pc, #232]	@ (8009cf8 <HAL_TIM_PWM_Start+0x1fc>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d018      	beq.n	8009c44 <HAL_TIM_PWM_Start+0x148>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a39      	ldr	r2, [pc, #228]	@ (8009cfc <HAL_TIM_PWM_Start+0x200>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d013      	beq.n	8009c44 <HAL_TIM_PWM_Start+0x148>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a37      	ldr	r2, [pc, #220]	@ (8009d00 <HAL_TIM_PWM_Start+0x204>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d00e      	beq.n	8009c44 <HAL_TIM_PWM_Start+0x148>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a36      	ldr	r2, [pc, #216]	@ (8009d04 <HAL_TIM_PWM_Start+0x208>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d009      	beq.n	8009c44 <HAL_TIM_PWM_Start+0x148>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a34      	ldr	r2, [pc, #208]	@ (8009d08 <HAL_TIM_PWM_Start+0x20c>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d004      	beq.n	8009c44 <HAL_TIM_PWM_Start+0x148>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a33      	ldr	r2, [pc, #204]	@ (8009d0c <HAL_TIM_PWM_Start+0x210>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d101      	bne.n	8009c48 <HAL_TIM_PWM_Start+0x14c>
 8009c44:	2301      	movs	r3, #1
 8009c46:	e000      	b.n	8009c4a <HAL_TIM_PWM_Start+0x14e>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d007      	beq.n	8009c5e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009c5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a25      	ldr	r2, [pc, #148]	@ (8009cf8 <HAL_TIM_PWM_Start+0x1fc>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d022      	beq.n	8009cae <HAL_TIM_PWM_Start+0x1b2>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009c70:	d01d      	beq.n	8009cae <HAL_TIM_PWM_Start+0x1b2>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a26      	ldr	r2, [pc, #152]	@ (8009d10 <HAL_TIM_PWM_Start+0x214>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d018      	beq.n	8009cae <HAL_TIM_PWM_Start+0x1b2>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a24      	ldr	r2, [pc, #144]	@ (8009d14 <HAL_TIM_PWM_Start+0x218>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d013      	beq.n	8009cae <HAL_TIM_PWM_Start+0x1b2>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a23      	ldr	r2, [pc, #140]	@ (8009d18 <HAL_TIM_PWM_Start+0x21c>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d00e      	beq.n	8009cae <HAL_TIM_PWM_Start+0x1b2>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	4a19      	ldr	r2, [pc, #100]	@ (8009cfc <HAL_TIM_PWM_Start+0x200>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d009      	beq.n	8009cae <HAL_TIM_PWM_Start+0x1b2>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a18      	ldr	r2, [pc, #96]	@ (8009d00 <HAL_TIM_PWM_Start+0x204>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d004      	beq.n	8009cae <HAL_TIM_PWM_Start+0x1b2>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a18      	ldr	r2, [pc, #96]	@ (8009d0c <HAL_TIM_PWM_Start+0x210>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d115      	bne.n	8009cda <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	689a      	ldr	r2, [r3, #8]
 8009cb4:	4b19      	ldr	r3, [pc, #100]	@ (8009d1c <HAL_TIM_PWM_Start+0x220>)
 8009cb6:	4013      	ands	r3, r2
 8009cb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2b06      	cmp	r3, #6
 8009cbe:	d015      	beq.n	8009cec <HAL_TIM_PWM_Start+0x1f0>
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009cc6:	d011      	beq.n	8009cec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681a      	ldr	r2, [r3, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f042 0201 	orr.w	r2, r2, #1
 8009cd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cd8:	e008      	b.n	8009cec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f042 0201 	orr.w	r2, r2, #1
 8009ce8:	601a      	str	r2, [r3, #0]
 8009cea:	e000      	b.n	8009cee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009cec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009cee:	2300      	movs	r3, #0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	40012c00 	.word	0x40012c00
 8009cfc:	40013400 	.word	0x40013400
 8009d00:	40014000 	.word	0x40014000
 8009d04:	40014400 	.word	0x40014400
 8009d08:	40014800 	.word	0x40014800
 8009d0c:	40015000 	.word	0x40015000
 8009d10:	40000400 	.word	0x40000400
 8009d14:	40000800 	.word	0x40000800
 8009d18:	40000c00 	.word	0x40000c00
 8009d1c:	00010007 	.word	0x00010007

08009d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d020      	beq.n	8009d84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f003 0302 	and.w	r3, r3, #2
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d01b      	beq.n	8009d84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f06f 0202 	mvn.w	r2, #2
 8009d54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	699b      	ldr	r3, [r3, #24]
 8009d62:	f003 0303 	and.w	r3, r3, #3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d003      	beq.n	8009d72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 fb5c 	bl	800a428 <HAL_TIM_IC_CaptureCallback>
 8009d70:	e005      	b.n	8009d7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fb4e 	bl	800a414 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 fb5f 	bl	800a43c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	f003 0304 	and.w	r3, r3, #4
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d020      	beq.n	8009dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f003 0304 	and.w	r3, r3, #4
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d01b      	beq.n	8009dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f06f 0204 	mvn.w	r2, #4
 8009da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2202      	movs	r2, #2
 8009da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	699b      	ldr	r3, [r3, #24]
 8009dae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d003      	beq.n	8009dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 fb36 	bl	800a428 <HAL_TIM_IC_CaptureCallback>
 8009dbc:	e005      	b.n	8009dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 fb28 	bl	800a414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f000 fb39 	bl	800a43c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	f003 0308 	and.w	r3, r3, #8
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d020      	beq.n	8009e1c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f003 0308 	and.w	r3, r3, #8
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d01b      	beq.n	8009e1c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f06f 0208 	mvn.w	r2, #8
 8009dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2204      	movs	r2, #4
 8009df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	69db      	ldr	r3, [r3, #28]
 8009dfa:	f003 0303 	and.w	r3, r3, #3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d003      	beq.n	8009e0a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f000 fb10 	bl	800a428 <HAL_TIM_IC_CaptureCallback>
 8009e08:	e005      	b.n	8009e16 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fb02 	bl	800a414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fb13 	bl	800a43c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	f003 0310 	and.w	r3, r3, #16
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d020      	beq.n	8009e68 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f003 0310 	and.w	r3, r3, #16
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d01b      	beq.n	8009e68 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f06f 0210 	mvn.w	r2, #16
 8009e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2208      	movs	r2, #8
 8009e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d003      	beq.n	8009e56 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 faea 	bl	800a428 <HAL_TIM_IC_CaptureCallback>
 8009e54:	e005      	b.n	8009e62 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f000 fadc 	bl	800a414 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 faed 	bl	800a43c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2200      	movs	r2, #0
 8009e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	f003 0301 	and.w	r3, r3, #1
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d00c      	beq.n	8009e8c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f003 0301 	and.w	r3, r3, #1
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d007      	beq.n	8009e8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f06f 0201 	mvn.w	r2, #1
 8009e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7f8 fdd2 	bl	8002a30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d104      	bne.n	8009ea0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00c      	beq.n	8009eba <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d007      	beq.n	8009eba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f001 f8a9 	bl	800b00c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d00c      	beq.n	8009ede <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d007      	beq.n	8009ede <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	f001 f8a1 	bl	800b020 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d00c      	beq.n	8009f02 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d007      	beq.n	8009f02 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f000 faa7 	bl	800a450 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	f003 0320 	and.w	r3, r3, #32
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00c      	beq.n	8009f26 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f003 0320 	and.w	r3, r3, #32
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d007      	beq.n	8009f26 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f06f 0220 	mvn.w	r2, #32
 8009f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f001 f869 	bl	800aff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00c      	beq.n	8009f4a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d007      	beq.n	8009f4a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f001 f875 	bl	800b034 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d00c      	beq.n	8009f6e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d007      	beq.n	8009f6e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f001 f86d 	bl	800b048 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d00c      	beq.n	8009f92 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d007      	beq.n	8009f92 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f001 f865 	bl	800b05c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00c      	beq.n	8009fb6 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d007      	beq.n	8009fb6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f001 f85d 	bl	800b070 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009fb6:	bf00      	nop
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	60b9      	str	r1, [r7, #8]
 8009fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d101      	bne.n	8009fde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009fda:	2302      	movs	r3, #2
 8009fdc:	e0ff      	b.n	800a1de <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b14      	cmp	r3, #20
 8009fea:	f200 80f0 	bhi.w	800a1ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009fee:	a201      	add	r2, pc, #4	@ (adr r2, 8009ff4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff4:	0800a049 	.word	0x0800a049
 8009ff8:	0800a1cf 	.word	0x0800a1cf
 8009ffc:	0800a1cf 	.word	0x0800a1cf
 800a000:	0800a1cf 	.word	0x0800a1cf
 800a004:	0800a089 	.word	0x0800a089
 800a008:	0800a1cf 	.word	0x0800a1cf
 800a00c:	0800a1cf 	.word	0x0800a1cf
 800a010:	0800a1cf 	.word	0x0800a1cf
 800a014:	0800a0cb 	.word	0x0800a0cb
 800a018:	0800a1cf 	.word	0x0800a1cf
 800a01c:	0800a1cf 	.word	0x0800a1cf
 800a020:	0800a1cf 	.word	0x0800a1cf
 800a024:	0800a10b 	.word	0x0800a10b
 800a028:	0800a1cf 	.word	0x0800a1cf
 800a02c:	0800a1cf 	.word	0x0800a1cf
 800a030:	0800a1cf 	.word	0x0800a1cf
 800a034:	0800a14d 	.word	0x0800a14d
 800a038:	0800a1cf 	.word	0x0800a1cf
 800a03c:	0800a1cf 	.word	0x0800a1cf
 800a040:	0800a1cf 	.word	0x0800a1cf
 800a044:	0800a18d 	.word	0x0800a18d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68b9      	ldr	r1, [r7, #8]
 800a04e:	4618      	mov	r0, r3
 800a050:	f000 fabc 	bl	800a5cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	699a      	ldr	r2, [r3, #24]
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f042 0208 	orr.w	r2, r2, #8
 800a062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	699a      	ldr	r2, [r3, #24]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f022 0204 	bic.w	r2, r2, #4
 800a072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6999      	ldr	r1, [r3, #24]
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	691a      	ldr	r2, [r3, #16]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	430a      	orrs	r2, r1
 800a084:	619a      	str	r2, [r3, #24]
      break;
 800a086:	e0a5      	b.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	68b9      	ldr	r1, [r7, #8]
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 fb36 	bl	800a700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	699a      	ldr	r2, [r3, #24]
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a0a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	699a      	ldr	r2, [r3, #24]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6999      	ldr	r1, [r3, #24]
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	021a      	lsls	r2, r3, #8
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	430a      	orrs	r2, r1
 800a0c6:	619a      	str	r2, [r3, #24]
      break;
 800a0c8:	e084      	b.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	68b9      	ldr	r1, [r7, #8]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f000 fba9 	bl	800a828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	69da      	ldr	r2, [r3, #28]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f042 0208 	orr.w	r2, r2, #8
 800a0e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	69da      	ldr	r2, [r3, #28]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f022 0204 	bic.w	r2, r2, #4
 800a0f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	69d9      	ldr	r1, [r3, #28]
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	691a      	ldr	r2, [r3, #16]
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	430a      	orrs	r2, r1
 800a106:	61da      	str	r2, [r3, #28]
      break;
 800a108:	e064      	b.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	68b9      	ldr	r1, [r7, #8]
 800a110:	4618      	mov	r0, r3
 800a112:	f000 fc1b 	bl	800a94c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	69da      	ldr	r2, [r3, #28]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	69da      	ldr	r2, [r3, #28]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	69d9      	ldr	r1, [r3, #28]
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	691b      	ldr	r3, [r3, #16]
 800a140:	021a      	lsls	r2, r3, #8
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	430a      	orrs	r2, r1
 800a148:	61da      	str	r2, [r3, #28]
      break;
 800a14a:	e043      	b.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68b9      	ldr	r1, [r7, #8]
 800a152:	4618      	mov	r0, r3
 800a154:	f000 fc8e 	bl	800aa74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f042 0208 	orr.w	r2, r2, #8
 800a166:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 0204 	bic.w	r2, r2, #4
 800a176:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	691a      	ldr	r2, [r3, #16]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	430a      	orrs	r2, r1
 800a188:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a18a:	e023      	b.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68b9      	ldr	r1, [r7, #8]
 800a192:	4618      	mov	r0, r3
 800a194:	f000 fcd8 	bl	800ab48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a1a6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a1b6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	021a      	lsls	r2, r3, #8
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	430a      	orrs	r2, r1
 800a1ca:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a1cc:	e002      	b.n	800a1d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	75fb      	strb	r3, [r7, #23]
      break;
 800a1d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a1dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3718      	adds	r7, #24
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
 800a1e6:	bf00      	nop

0800a1e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d101      	bne.n	800a204 <HAL_TIM_ConfigClockSource+0x1c>
 800a200:	2302      	movs	r3, #2
 800a202:	e0f6      	b.n	800a3f2 <HAL_TIM_ConfigClockSource+0x20a>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2201      	movs	r2, #1
 800a208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2202      	movs	r2, #2
 800a210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a222:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a22e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a6f      	ldr	r2, [pc, #444]	@ (800a3fc <HAL_TIM_ConfigClockSource+0x214>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	f000 80c1 	beq.w	800a3c6 <HAL_TIM_ConfigClockSource+0x1de>
 800a244:	4a6d      	ldr	r2, [pc, #436]	@ (800a3fc <HAL_TIM_ConfigClockSource+0x214>)
 800a246:	4293      	cmp	r3, r2
 800a248:	f200 80c6 	bhi.w	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a24c:	4a6c      	ldr	r2, [pc, #432]	@ (800a400 <HAL_TIM_ConfigClockSource+0x218>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	f000 80b9 	beq.w	800a3c6 <HAL_TIM_ConfigClockSource+0x1de>
 800a254:	4a6a      	ldr	r2, [pc, #424]	@ (800a400 <HAL_TIM_ConfigClockSource+0x218>)
 800a256:	4293      	cmp	r3, r2
 800a258:	f200 80be 	bhi.w	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a25c:	4a69      	ldr	r2, [pc, #420]	@ (800a404 <HAL_TIM_ConfigClockSource+0x21c>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	f000 80b1 	beq.w	800a3c6 <HAL_TIM_ConfigClockSource+0x1de>
 800a264:	4a67      	ldr	r2, [pc, #412]	@ (800a404 <HAL_TIM_ConfigClockSource+0x21c>)
 800a266:	4293      	cmp	r3, r2
 800a268:	f200 80b6 	bhi.w	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a26c:	4a66      	ldr	r2, [pc, #408]	@ (800a408 <HAL_TIM_ConfigClockSource+0x220>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	f000 80a9 	beq.w	800a3c6 <HAL_TIM_ConfigClockSource+0x1de>
 800a274:	4a64      	ldr	r2, [pc, #400]	@ (800a408 <HAL_TIM_ConfigClockSource+0x220>)
 800a276:	4293      	cmp	r3, r2
 800a278:	f200 80ae 	bhi.w	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a27c:	4a63      	ldr	r2, [pc, #396]	@ (800a40c <HAL_TIM_ConfigClockSource+0x224>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	f000 80a1 	beq.w	800a3c6 <HAL_TIM_ConfigClockSource+0x1de>
 800a284:	4a61      	ldr	r2, [pc, #388]	@ (800a40c <HAL_TIM_ConfigClockSource+0x224>)
 800a286:	4293      	cmp	r3, r2
 800a288:	f200 80a6 	bhi.w	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a28c:	4a60      	ldr	r2, [pc, #384]	@ (800a410 <HAL_TIM_ConfigClockSource+0x228>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	f000 8099 	beq.w	800a3c6 <HAL_TIM_ConfigClockSource+0x1de>
 800a294:	4a5e      	ldr	r2, [pc, #376]	@ (800a410 <HAL_TIM_ConfigClockSource+0x228>)
 800a296:	4293      	cmp	r3, r2
 800a298:	f200 809e 	bhi.w	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a29c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a2a0:	f000 8091 	beq.w	800a3c6 <HAL_TIM_ConfigClockSource+0x1de>
 800a2a4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a2a8:	f200 8096 	bhi.w	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2b0:	f000 8089 	beq.w	800a3c6 <HAL_TIM_ConfigClockSource+0x1de>
 800a2b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a2b8:	f200 808e 	bhi.w	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2c0:	d03e      	beq.n	800a340 <HAL_TIM_ConfigClockSource+0x158>
 800a2c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a2c6:	f200 8087 	bhi.w	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2ce:	f000 8086 	beq.w	800a3de <HAL_TIM_ConfigClockSource+0x1f6>
 800a2d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2d6:	d87f      	bhi.n	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2d8:	2b70      	cmp	r3, #112	@ 0x70
 800a2da:	d01a      	beq.n	800a312 <HAL_TIM_ConfigClockSource+0x12a>
 800a2dc:	2b70      	cmp	r3, #112	@ 0x70
 800a2de:	d87b      	bhi.n	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2e0:	2b60      	cmp	r3, #96	@ 0x60
 800a2e2:	d050      	beq.n	800a386 <HAL_TIM_ConfigClockSource+0x19e>
 800a2e4:	2b60      	cmp	r3, #96	@ 0x60
 800a2e6:	d877      	bhi.n	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2e8:	2b50      	cmp	r3, #80	@ 0x50
 800a2ea:	d03c      	beq.n	800a366 <HAL_TIM_ConfigClockSource+0x17e>
 800a2ec:	2b50      	cmp	r3, #80	@ 0x50
 800a2ee:	d873      	bhi.n	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2f0:	2b40      	cmp	r3, #64	@ 0x40
 800a2f2:	d058      	beq.n	800a3a6 <HAL_TIM_ConfigClockSource+0x1be>
 800a2f4:	2b40      	cmp	r3, #64	@ 0x40
 800a2f6:	d86f      	bhi.n	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a2f8:	2b30      	cmp	r3, #48	@ 0x30
 800a2fa:	d064      	beq.n	800a3c6 <HAL_TIM_ConfigClockSource+0x1de>
 800a2fc:	2b30      	cmp	r3, #48	@ 0x30
 800a2fe:	d86b      	bhi.n	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a300:	2b20      	cmp	r3, #32
 800a302:	d060      	beq.n	800a3c6 <HAL_TIM_ConfigClockSource+0x1de>
 800a304:	2b20      	cmp	r3, #32
 800a306:	d867      	bhi.n	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d05c      	beq.n	800a3c6 <HAL_TIM_ConfigClockSource+0x1de>
 800a30c:	2b10      	cmp	r3, #16
 800a30e:	d05a      	beq.n	800a3c6 <HAL_TIM_ConfigClockSource+0x1de>
 800a310:	e062      	b.n	800a3d8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a322:	f000 fcf9 	bl	800ad18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	68ba      	ldr	r2, [r7, #8]
 800a33c:	609a      	str	r2, [r3, #8]
      break;
 800a33e:	e04f      	b.n	800a3e0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a350:	f000 fce2 	bl	800ad18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	689a      	ldr	r2, [r3, #8]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a362:	609a      	str	r2, [r3, #8]
      break;
 800a364:	e03c      	b.n	800a3e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a372:	461a      	mov	r2, r3
 800a374:	f000 fc54 	bl	800ac20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	2150      	movs	r1, #80	@ 0x50
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 fcad 	bl	800acde <TIM_ITRx_SetConfig>
      break;
 800a384:	e02c      	b.n	800a3e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a392:	461a      	mov	r2, r3
 800a394:	f000 fc73 	bl	800ac7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	2160      	movs	r1, #96	@ 0x60
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f000 fc9d 	bl	800acde <TIM_ITRx_SetConfig>
      break;
 800a3a4:	e01c      	b.n	800a3e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	f000 fc34 	bl	800ac20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	2140      	movs	r1, #64	@ 0x40
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 fc8d 	bl	800acde <TIM_ITRx_SetConfig>
      break;
 800a3c4:	e00c      	b.n	800a3e0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	4610      	mov	r0, r2
 800a3d2:	f000 fc84 	bl	800acde <TIM_ITRx_SetConfig>
      break;
 800a3d6:	e003      	b.n	800a3e0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	73fb      	strb	r3, [r7, #15]
      break;
 800a3dc:	e000      	b.n	800a3e0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800a3de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a3f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	00100070 	.word	0x00100070
 800a400:	00100060 	.word	0x00100060
 800a404:	00100050 	.word	0x00100050
 800a408:	00100040 	.word	0x00100040
 800a40c:	00100030 	.word	0x00100030
 800a410:	00100020 	.word	0x00100020

0800a414 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a444:	bf00      	nop
 800a446:	370c      	adds	r7, #12
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr

0800a450 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a450:	b480      	push	{r7}
 800a452:	b083      	sub	sp, #12
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a458:	bf00      	nop
 800a45a:	370c      	adds	r7, #12
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a4c      	ldr	r2, [pc, #304]	@ (800a5a8 <TIM_Base_SetConfig+0x144>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d017      	beq.n	800a4ac <TIM_Base_SetConfig+0x48>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a482:	d013      	beq.n	800a4ac <TIM_Base_SetConfig+0x48>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4a49      	ldr	r2, [pc, #292]	@ (800a5ac <TIM_Base_SetConfig+0x148>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d00f      	beq.n	800a4ac <TIM_Base_SetConfig+0x48>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a48      	ldr	r2, [pc, #288]	@ (800a5b0 <TIM_Base_SetConfig+0x14c>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d00b      	beq.n	800a4ac <TIM_Base_SetConfig+0x48>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a47      	ldr	r2, [pc, #284]	@ (800a5b4 <TIM_Base_SetConfig+0x150>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d007      	beq.n	800a4ac <TIM_Base_SetConfig+0x48>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a46      	ldr	r2, [pc, #280]	@ (800a5b8 <TIM_Base_SetConfig+0x154>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d003      	beq.n	800a4ac <TIM_Base_SetConfig+0x48>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a45      	ldr	r2, [pc, #276]	@ (800a5bc <TIM_Base_SetConfig+0x158>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d108      	bne.n	800a4be <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	68fa      	ldr	r2, [r7, #12]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	4a39      	ldr	r2, [pc, #228]	@ (800a5a8 <TIM_Base_SetConfig+0x144>)
 800a4c2:	4293      	cmp	r3, r2
 800a4c4:	d023      	beq.n	800a50e <TIM_Base_SetConfig+0xaa>
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a4cc:	d01f      	beq.n	800a50e <TIM_Base_SetConfig+0xaa>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	4a36      	ldr	r2, [pc, #216]	@ (800a5ac <TIM_Base_SetConfig+0x148>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d01b      	beq.n	800a50e <TIM_Base_SetConfig+0xaa>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	4a35      	ldr	r2, [pc, #212]	@ (800a5b0 <TIM_Base_SetConfig+0x14c>)
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d017      	beq.n	800a50e <TIM_Base_SetConfig+0xaa>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	4a34      	ldr	r2, [pc, #208]	@ (800a5b4 <TIM_Base_SetConfig+0x150>)
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d013      	beq.n	800a50e <TIM_Base_SetConfig+0xaa>
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	4a33      	ldr	r2, [pc, #204]	@ (800a5b8 <TIM_Base_SetConfig+0x154>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d00f      	beq.n	800a50e <TIM_Base_SetConfig+0xaa>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	4a33      	ldr	r2, [pc, #204]	@ (800a5c0 <TIM_Base_SetConfig+0x15c>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d00b      	beq.n	800a50e <TIM_Base_SetConfig+0xaa>
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a32      	ldr	r2, [pc, #200]	@ (800a5c4 <TIM_Base_SetConfig+0x160>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d007      	beq.n	800a50e <TIM_Base_SetConfig+0xaa>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4a31      	ldr	r2, [pc, #196]	@ (800a5c8 <TIM_Base_SetConfig+0x164>)
 800a502:	4293      	cmp	r3, r2
 800a504:	d003      	beq.n	800a50e <TIM_Base_SetConfig+0xaa>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	4a2c      	ldr	r2, [pc, #176]	@ (800a5bc <TIM_Base_SetConfig+0x158>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d108      	bne.n	800a520 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a516:	683b      	ldr	r3, [r7, #0]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	695b      	ldr	r3, [r3, #20]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	689a      	ldr	r2, [r3, #8]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a18      	ldr	r2, [pc, #96]	@ (800a5a8 <TIM_Base_SetConfig+0x144>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d013      	beq.n	800a574 <TIM_Base_SetConfig+0x110>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	4a1a      	ldr	r2, [pc, #104]	@ (800a5b8 <TIM_Base_SetConfig+0x154>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d00f      	beq.n	800a574 <TIM_Base_SetConfig+0x110>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	4a1a      	ldr	r2, [pc, #104]	@ (800a5c0 <TIM_Base_SetConfig+0x15c>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d00b      	beq.n	800a574 <TIM_Base_SetConfig+0x110>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a19      	ldr	r2, [pc, #100]	@ (800a5c4 <TIM_Base_SetConfig+0x160>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d007      	beq.n	800a574 <TIM_Base_SetConfig+0x110>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	4a18      	ldr	r2, [pc, #96]	@ (800a5c8 <TIM_Base_SetConfig+0x164>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d003      	beq.n	800a574 <TIM_Base_SetConfig+0x110>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a13      	ldr	r2, [pc, #76]	@ (800a5bc <TIM_Base_SetConfig+0x158>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d103      	bne.n	800a57c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	691a      	ldr	r2, [r3, #16]
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2201      	movs	r2, #1
 800a580:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	f003 0301 	and.w	r3, r3, #1
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d105      	bne.n	800a59a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	f023 0201 	bic.w	r2, r3, #1
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	611a      	str	r2, [r3, #16]
  }
}
 800a59a:	bf00      	nop
 800a59c:	3714      	adds	r7, #20
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr
 800a5a6:	bf00      	nop
 800a5a8:	40012c00 	.word	0x40012c00
 800a5ac:	40000400 	.word	0x40000400
 800a5b0:	40000800 	.word	0x40000800
 800a5b4:	40000c00 	.word	0x40000c00
 800a5b8:	40013400 	.word	0x40013400
 800a5bc:	40015000 	.word	0x40015000
 800a5c0:	40014000 	.word	0x40014000
 800a5c4:	40014400 	.word	0x40014400
 800a5c8:	40014800 	.word	0x40014800

0800a5cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b087      	sub	sp, #28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6a1b      	ldr	r3, [r3, #32]
 800a5da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6a1b      	ldr	r3, [r3, #32]
 800a5e0:	f023 0201 	bic.w	r2, r3, #1
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	699b      	ldr	r3, [r3, #24]
 800a5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a5fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f023 0303 	bic.w	r3, r3, #3
 800a606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	4313      	orrs	r3, r2
 800a610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f023 0302 	bic.w	r3, r3, #2
 800a618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	697a      	ldr	r2, [r7, #20]
 800a620:	4313      	orrs	r3, r2
 800a622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a30      	ldr	r2, [pc, #192]	@ (800a6e8 <TIM_OC1_SetConfig+0x11c>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d013      	beq.n	800a654 <TIM_OC1_SetConfig+0x88>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	4a2f      	ldr	r2, [pc, #188]	@ (800a6ec <TIM_OC1_SetConfig+0x120>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d00f      	beq.n	800a654 <TIM_OC1_SetConfig+0x88>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4a2e      	ldr	r2, [pc, #184]	@ (800a6f0 <TIM_OC1_SetConfig+0x124>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d00b      	beq.n	800a654 <TIM_OC1_SetConfig+0x88>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	4a2d      	ldr	r2, [pc, #180]	@ (800a6f4 <TIM_OC1_SetConfig+0x128>)
 800a640:	4293      	cmp	r3, r2
 800a642:	d007      	beq.n	800a654 <TIM_OC1_SetConfig+0x88>
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	4a2c      	ldr	r2, [pc, #176]	@ (800a6f8 <TIM_OC1_SetConfig+0x12c>)
 800a648:	4293      	cmp	r3, r2
 800a64a:	d003      	beq.n	800a654 <TIM_OC1_SetConfig+0x88>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a2b      	ldr	r2, [pc, #172]	@ (800a6fc <TIM_OC1_SetConfig+0x130>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d10c      	bne.n	800a66e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a654:	697b      	ldr	r3, [r7, #20]
 800a656:	f023 0308 	bic.w	r3, r3, #8
 800a65a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	697a      	ldr	r2, [r7, #20]
 800a662:	4313      	orrs	r3, r2
 800a664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	f023 0304 	bic.w	r3, r3, #4
 800a66c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a1d      	ldr	r2, [pc, #116]	@ (800a6e8 <TIM_OC1_SetConfig+0x11c>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d013      	beq.n	800a69e <TIM_OC1_SetConfig+0xd2>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a1c      	ldr	r2, [pc, #112]	@ (800a6ec <TIM_OC1_SetConfig+0x120>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d00f      	beq.n	800a69e <TIM_OC1_SetConfig+0xd2>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a1b      	ldr	r2, [pc, #108]	@ (800a6f0 <TIM_OC1_SetConfig+0x124>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d00b      	beq.n	800a69e <TIM_OC1_SetConfig+0xd2>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a1a      	ldr	r2, [pc, #104]	@ (800a6f4 <TIM_OC1_SetConfig+0x128>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d007      	beq.n	800a69e <TIM_OC1_SetConfig+0xd2>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a19      	ldr	r2, [pc, #100]	@ (800a6f8 <TIM_OC1_SetConfig+0x12c>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d003      	beq.n	800a69e <TIM_OC1_SetConfig+0xd2>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a18      	ldr	r2, [pc, #96]	@ (800a6fc <TIM_OC1_SetConfig+0x130>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d111      	bne.n	800a6c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a6a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a6ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	695b      	ldr	r3, [r3, #20]
 800a6b2:	693a      	ldr	r2, [r7, #16]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	693a      	ldr	r2, [r7, #16]
 800a6c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	621a      	str	r2, [r3, #32]
}
 800a6dc:	bf00      	nop
 800a6de:	371c      	adds	r7, #28
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr
 800a6e8:	40012c00 	.word	0x40012c00
 800a6ec:	40013400 	.word	0x40013400
 800a6f0:	40014000 	.word	0x40014000
 800a6f4:	40014400 	.word	0x40014400
 800a6f8:	40014800 	.word	0x40014800
 800a6fc:	40015000 	.word	0x40015000

0800a700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a700:	b480      	push	{r7}
 800a702:	b087      	sub	sp, #28
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a1b      	ldr	r3, [r3, #32]
 800a70e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6a1b      	ldr	r3, [r3, #32]
 800a714:	f023 0210 	bic.w	r2, r3, #16
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a72e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a73a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	021b      	lsls	r3, r3, #8
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	4313      	orrs	r3, r2
 800a746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	f023 0320 	bic.w	r3, r3, #32
 800a74e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	011b      	lsls	r3, r3, #4
 800a756:	697a      	ldr	r2, [r7, #20]
 800a758:	4313      	orrs	r3, r2
 800a75a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a2c      	ldr	r2, [pc, #176]	@ (800a810 <TIM_OC2_SetConfig+0x110>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d007      	beq.n	800a774 <TIM_OC2_SetConfig+0x74>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a2b      	ldr	r2, [pc, #172]	@ (800a814 <TIM_OC2_SetConfig+0x114>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d003      	beq.n	800a774 <TIM_OC2_SetConfig+0x74>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a2a      	ldr	r2, [pc, #168]	@ (800a818 <TIM_OC2_SetConfig+0x118>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d10d      	bne.n	800a790 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a77a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	68db      	ldr	r3, [r3, #12]
 800a780:	011b      	lsls	r3, r3, #4
 800a782:	697a      	ldr	r2, [r7, #20]
 800a784:	4313      	orrs	r3, r2
 800a786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a78e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a1f      	ldr	r2, [pc, #124]	@ (800a810 <TIM_OC2_SetConfig+0x110>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d013      	beq.n	800a7c0 <TIM_OC2_SetConfig+0xc0>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4a1e      	ldr	r2, [pc, #120]	@ (800a814 <TIM_OC2_SetConfig+0x114>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d00f      	beq.n	800a7c0 <TIM_OC2_SetConfig+0xc0>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a1e      	ldr	r2, [pc, #120]	@ (800a81c <TIM_OC2_SetConfig+0x11c>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d00b      	beq.n	800a7c0 <TIM_OC2_SetConfig+0xc0>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a1d      	ldr	r2, [pc, #116]	@ (800a820 <TIM_OC2_SetConfig+0x120>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d007      	beq.n	800a7c0 <TIM_OC2_SetConfig+0xc0>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a1c      	ldr	r2, [pc, #112]	@ (800a824 <TIM_OC2_SetConfig+0x124>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d003      	beq.n	800a7c0 <TIM_OC2_SetConfig+0xc0>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a17      	ldr	r2, [pc, #92]	@ (800a818 <TIM_OC2_SetConfig+0x118>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d113      	bne.n	800a7e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a7c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7c8:	693b      	ldr	r3, [r7, #16]
 800a7ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a7ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	695b      	ldr	r3, [r3, #20]
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	693a      	ldr	r2, [r7, #16]
 800a7d8:	4313      	orrs	r3, r2
 800a7da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	4313      	orrs	r3, r2
 800a7e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	621a      	str	r2, [r3, #32]
}
 800a802:	bf00      	nop
 800a804:	371c      	adds	r7, #28
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	40012c00 	.word	0x40012c00
 800a814:	40013400 	.word	0x40013400
 800a818:	40015000 	.word	0x40015000
 800a81c:	40014000 	.word	0x40014000
 800a820:	40014400 	.word	0x40014400
 800a824:	40014800 	.word	0x40014800

0800a828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a828:	b480      	push	{r7}
 800a82a:	b087      	sub	sp, #28
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
 800a830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6a1b      	ldr	r3, [r3, #32]
 800a836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a1b      	ldr	r3, [r3, #32]
 800a83c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	69db      	ldr	r3, [r3, #28]
 800a84e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a85a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f023 0303 	bic.w	r3, r3, #3
 800a862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	021b      	lsls	r3, r3, #8
 800a87c:	697a      	ldr	r2, [r7, #20]
 800a87e:	4313      	orrs	r3, r2
 800a880:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a2b      	ldr	r2, [pc, #172]	@ (800a934 <TIM_OC3_SetConfig+0x10c>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d007      	beq.n	800a89a <TIM_OC3_SetConfig+0x72>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a2a      	ldr	r2, [pc, #168]	@ (800a938 <TIM_OC3_SetConfig+0x110>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d003      	beq.n	800a89a <TIM_OC3_SetConfig+0x72>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a29      	ldr	r2, [pc, #164]	@ (800a93c <TIM_OC3_SetConfig+0x114>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d10d      	bne.n	800a8b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a8a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	021b      	lsls	r3, r3, #8
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a8b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a1e      	ldr	r2, [pc, #120]	@ (800a934 <TIM_OC3_SetConfig+0x10c>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d013      	beq.n	800a8e6 <TIM_OC3_SetConfig+0xbe>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a1d      	ldr	r2, [pc, #116]	@ (800a938 <TIM_OC3_SetConfig+0x110>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d00f      	beq.n	800a8e6 <TIM_OC3_SetConfig+0xbe>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a1d      	ldr	r2, [pc, #116]	@ (800a940 <TIM_OC3_SetConfig+0x118>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d00b      	beq.n	800a8e6 <TIM_OC3_SetConfig+0xbe>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a1c      	ldr	r2, [pc, #112]	@ (800a944 <TIM_OC3_SetConfig+0x11c>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d007      	beq.n	800a8e6 <TIM_OC3_SetConfig+0xbe>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a1b      	ldr	r2, [pc, #108]	@ (800a948 <TIM_OC3_SetConfig+0x120>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d003      	beq.n	800a8e6 <TIM_OC3_SetConfig+0xbe>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	4a16      	ldr	r2, [pc, #88]	@ (800a93c <TIM_OC3_SetConfig+0x114>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d113      	bne.n	800a90e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a8ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a8f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	695b      	ldr	r3, [r3, #20]
 800a8fa:	011b      	lsls	r3, r3, #4
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	699b      	ldr	r3, [r3, #24]
 800a906:	011b      	lsls	r3, r3, #4
 800a908:	693a      	ldr	r2, [r7, #16]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	693a      	ldr	r2, [r7, #16]
 800a912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	685a      	ldr	r2, [r3, #4]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	621a      	str	r2, [r3, #32]
}
 800a928:	bf00      	nop
 800a92a:	371c      	adds	r7, #28
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr
 800a934:	40012c00 	.word	0x40012c00
 800a938:	40013400 	.word	0x40013400
 800a93c:	40015000 	.word	0x40015000
 800a940:	40014000 	.word	0x40014000
 800a944:	40014400 	.word	0x40014400
 800a948:	40014800 	.word	0x40014800

0800a94c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a94c:	b480      	push	{r7}
 800a94e:	b087      	sub	sp, #28
 800a950:	af00      	add	r7, sp, #0
 800a952:	6078      	str	r0, [r7, #4]
 800a954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6a1b      	ldr	r3, [r3, #32]
 800a960:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	69db      	ldr	r3, [r3, #28]
 800a972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a97a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	021b      	lsls	r3, r3, #8
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	4313      	orrs	r3, r2
 800a992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a99a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	031b      	lsls	r3, r3, #12
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a2c      	ldr	r2, [pc, #176]	@ (800aa5c <TIM_OC4_SetConfig+0x110>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d007      	beq.n	800a9c0 <TIM_OC4_SetConfig+0x74>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a2b      	ldr	r2, [pc, #172]	@ (800aa60 <TIM_OC4_SetConfig+0x114>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d003      	beq.n	800a9c0 <TIM_OC4_SetConfig+0x74>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a2a      	ldr	r2, [pc, #168]	@ (800aa64 <TIM_OC4_SetConfig+0x118>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d10d      	bne.n	800a9dc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a9c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	68db      	ldr	r3, [r3, #12]
 800a9cc:	031b      	lsls	r3, r3, #12
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a9da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a1f      	ldr	r2, [pc, #124]	@ (800aa5c <TIM_OC4_SetConfig+0x110>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d013      	beq.n	800aa0c <TIM_OC4_SetConfig+0xc0>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a1e      	ldr	r2, [pc, #120]	@ (800aa60 <TIM_OC4_SetConfig+0x114>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d00f      	beq.n	800aa0c <TIM_OC4_SetConfig+0xc0>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a1e      	ldr	r2, [pc, #120]	@ (800aa68 <TIM_OC4_SetConfig+0x11c>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d00b      	beq.n	800aa0c <TIM_OC4_SetConfig+0xc0>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a1d      	ldr	r2, [pc, #116]	@ (800aa6c <TIM_OC4_SetConfig+0x120>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d007      	beq.n	800aa0c <TIM_OC4_SetConfig+0xc0>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4a1c      	ldr	r2, [pc, #112]	@ (800aa70 <TIM_OC4_SetConfig+0x124>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d003      	beq.n	800aa0c <TIM_OC4_SetConfig+0xc0>
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	4a17      	ldr	r2, [pc, #92]	@ (800aa64 <TIM_OC4_SetConfig+0x118>)
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d113      	bne.n	800aa34 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa12:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800aa1a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	695b      	ldr	r3, [r3, #20]
 800aa20:	019b      	lsls	r3, r3, #6
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	699b      	ldr	r3, [r3, #24]
 800aa2c:	019b      	lsls	r3, r3, #6
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	4313      	orrs	r3, r2
 800aa32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	693a      	ldr	r2, [r7, #16]
 800aa38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	685a      	ldr	r2, [r3, #4]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	697a      	ldr	r2, [r7, #20]
 800aa4c:	621a      	str	r2, [r3, #32]
}
 800aa4e:	bf00      	nop
 800aa50:	371c      	adds	r7, #28
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	40012c00 	.word	0x40012c00
 800aa60:	40013400 	.word	0x40013400
 800aa64:	40015000 	.word	0x40015000
 800aa68:	40014000 	.word	0x40014000
 800aa6c:	40014400 	.word	0x40014400
 800aa70:	40014800 	.word	0x40014800

0800aa74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800aa74:	b480      	push	{r7}
 800aa76:	b087      	sub	sp, #28
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6a1b      	ldr	r3, [r3, #32]
 800aa82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a1b      	ldr	r3, [r3, #32]
 800aa88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aaa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800aab8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	689b      	ldr	r3, [r3, #8]
 800aabe:	041b      	lsls	r3, r3, #16
 800aac0:	693a      	ldr	r2, [r7, #16]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a19      	ldr	r2, [pc, #100]	@ (800ab30 <TIM_OC5_SetConfig+0xbc>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d013      	beq.n	800aaf6 <TIM_OC5_SetConfig+0x82>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a18      	ldr	r2, [pc, #96]	@ (800ab34 <TIM_OC5_SetConfig+0xc0>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d00f      	beq.n	800aaf6 <TIM_OC5_SetConfig+0x82>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	4a17      	ldr	r2, [pc, #92]	@ (800ab38 <TIM_OC5_SetConfig+0xc4>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d00b      	beq.n	800aaf6 <TIM_OC5_SetConfig+0x82>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	4a16      	ldr	r2, [pc, #88]	@ (800ab3c <TIM_OC5_SetConfig+0xc8>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d007      	beq.n	800aaf6 <TIM_OC5_SetConfig+0x82>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a15      	ldr	r2, [pc, #84]	@ (800ab40 <TIM_OC5_SetConfig+0xcc>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d003      	beq.n	800aaf6 <TIM_OC5_SetConfig+0x82>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a14      	ldr	r2, [pc, #80]	@ (800ab44 <TIM_OC5_SetConfig+0xd0>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d109      	bne.n	800ab0a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aaf6:	697b      	ldr	r3, [r7, #20]
 800aaf8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800aafc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	695b      	ldr	r3, [r3, #20]
 800ab02:	021b      	lsls	r3, r3, #8
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	697a      	ldr	r2, [r7, #20]
 800ab0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	685a      	ldr	r2, [r3, #4]
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	693a      	ldr	r2, [r7, #16]
 800ab22:	621a      	str	r2, [r3, #32]
}
 800ab24:	bf00      	nop
 800ab26:	371c      	adds	r7, #28
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr
 800ab30:	40012c00 	.word	0x40012c00
 800ab34:	40013400 	.word	0x40013400
 800ab38:	40014000 	.word	0x40014000
 800ab3c:	40014400 	.word	0x40014400
 800ab40:	40014800 	.word	0x40014800
 800ab44:	40015000 	.word	0x40015000

0800ab48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b087      	sub	sp, #28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6a1b      	ldr	r3, [r3, #32]
 800ab56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a1b      	ldr	r3, [r3, #32]
 800ab5c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ab76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	021b      	lsls	r3, r3, #8
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ab8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	689b      	ldr	r3, [r3, #8]
 800ab94:	051b      	lsls	r3, r3, #20
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4a1a      	ldr	r2, [pc, #104]	@ (800ac08 <TIM_OC6_SetConfig+0xc0>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d013      	beq.n	800abcc <TIM_OC6_SetConfig+0x84>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	4a19      	ldr	r2, [pc, #100]	@ (800ac0c <TIM_OC6_SetConfig+0xc4>)
 800aba8:	4293      	cmp	r3, r2
 800abaa:	d00f      	beq.n	800abcc <TIM_OC6_SetConfig+0x84>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	4a18      	ldr	r2, [pc, #96]	@ (800ac10 <TIM_OC6_SetConfig+0xc8>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d00b      	beq.n	800abcc <TIM_OC6_SetConfig+0x84>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4a17      	ldr	r2, [pc, #92]	@ (800ac14 <TIM_OC6_SetConfig+0xcc>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d007      	beq.n	800abcc <TIM_OC6_SetConfig+0x84>
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	4a16      	ldr	r2, [pc, #88]	@ (800ac18 <TIM_OC6_SetConfig+0xd0>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d003      	beq.n	800abcc <TIM_OC6_SetConfig+0x84>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	4a15      	ldr	r2, [pc, #84]	@ (800ac1c <TIM_OC6_SetConfig+0xd4>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d109      	bne.n	800abe0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800abd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	695b      	ldr	r3, [r3, #20]
 800abd8:	029b      	lsls	r3, r3, #10
 800abda:	697a      	ldr	r2, [r7, #20]
 800abdc:	4313      	orrs	r3, r2
 800abde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	697a      	ldr	r2, [r7, #20]
 800abe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	693a      	ldr	r2, [r7, #16]
 800abf8:	621a      	str	r2, [r3, #32]
}
 800abfa:	bf00      	nop
 800abfc:	371c      	adds	r7, #28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
 800ac06:	bf00      	nop
 800ac08:	40012c00 	.word	0x40012c00
 800ac0c:	40013400 	.word	0x40013400
 800ac10:	40014000 	.word	0x40014000
 800ac14:	40014400 	.word	0x40014400
 800ac18:	40014800 	.word	0x40014800
 800ac1c:	40015000 	.word	0x40015000

0800ac20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac20:	b480      	push	{r7}
 800ac22:	b087      	sub	sp, #28
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	60b9      	str	r1, [r7, #8]
 800ac2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6a1b      	ldr	r3, [r3, #32]
 800ac30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	f023 0201 	bic.w	r2, r3, #1
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800ac4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	011b      	lsls	r3, r3, #4
 800ac50:	693a      	ldr	r2, [r7, #16]
 800ac52:	4313      	orrs	r3, r2
 800ac54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	f023 030a 	bic.w	r3, r3, #10
 800ac5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	621a      	str	r2, [r3, #32]
}
 800ac72:	bf00      	nop
 800ac74:	371c      	adds	r7, #28
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr

0800ac7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac7e:	b480      	push	{r7}
 800ac80:	b087      	sub	sp, #28
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	60f8      	str	r0, [r7, #12]
 800ac86:	60b9      	str	r1, [r7, #8]
 800ac88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6a1b      	ldr	r3, [r3, #32]
 800ac8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	f023 0210 	bic.w	r2, r3, #16
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	699b      	ldr	r3, [r3, #24]
 800aca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aca8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	031b      	lsls	r3, r3, #12
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	4313      	orrs	r3, r2
 800acb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800acba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	011b      	lsls	r3, r3, #4
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	693a      	ldr	r2, [r7, #16]
 800acca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	697a      	ldr	r2, [r7, #20]
 800acd0:	621a      	str	r2, [r3, #32]
}
 800acd2:	bf00      	nop
 800acd4:	371c      	adds	r7, #28
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr

0800acde <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acde:	b480      	push	{r7}
 800ace0:	b085      	sub	sp, #20
 800ace2:	af00      	add	r7, sp, #0
 800ace4:	6078      	str	r0, [r7, #4]
 800ace6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800acf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acfa:	683a      	ldr	r2, [r7, #0]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	4313      	orrs	r3, r2
 800ad00:	f043 0307 	orr.w	r3, r3, #7
 800ad04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	609a      	str	r2, [r3, #8]
}
 800ad0c:	bf00      	nop
 800ad0e:	3714      	adds	r7, #20
 800ad10:	46bd      	mov	sp, r7
 800ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad16:	4770      	bx	lr

0800ad18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b087      	sub	sp, #28
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	60b9      	str	r1, [r7, #8]
 800ad22:	607a      	str	r2, [r7, #4]
 800ad24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ad32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	021a      	lsls	r2, r3, #8
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	431a      	orrs	r2, r3
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	697a      	ldr	r2, [r7, #20]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	609a      	str	r2, [r3, #8]
}
 800ad4c:	bf00      	nop
 800ad4e:	371c      	adds	r7, #28
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b087      	sub	sp, #28
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	f003 031f 	and.w	r3, r3, #31
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	6a1a      	ldr	r2, [r3, #32]
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	43db      	mvns	r3, r3
 800ad7a:	401a      	ands	r2, r3
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6a1a      	ldr	r2, [r3, #32]
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	f003 031f 	and.w	r3, r3, #31
 800ad8a:	6879      	ldr	r1, [r7, #4]
 800ad8c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad90:	431a      	orrs	r2, r3
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	621a      	str	r2, [r3, #32]
}
 800ad96:	bf00      	nop
 800ad98:	371c      	adds	r7, #28
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada0:	4770      	bx	lr
	...

0800ada4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d101      	bne.n	800adbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800adb8:	2302      	movs	r3, #2
 800adba:	e074      	b.n	800aea6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2202      	movs	r2, #2
 800adc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	685b      	ldr	r3, [r3, #4]
 800add2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a34      	ldr	r2, [pc, #208]	@ (800aeb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d009      	beq.n	800adfa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a33      	ldr	r2, [pc, #204]	@ (800aeb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d004      	beq.n	800adfa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a31      	ldr	r2, [pc, #196]	@ (800aebc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d108      	bne.n	800ae0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ae00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	68fa      	ldr	r2, [r7, #12]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ae12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a21      	ldr	r2, [pc, #132]	@ (800aeb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d022      	beq.n	800ae7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae3c:	d01d      	beq.n	800ae7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a1f      	ldr	r2, [pc, #124]	@ (800aec0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d018      	beq.n	800ae7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a1d      	ldr	r2, [pc, #116]	@ (800aec4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d013      	beq.n	800ae7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a1c      	ldr	r2, [pc, #112]	@ (800aec8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d00e      	beq.n	800ae7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a15      	ldr	r2, [pc, #84]	@ (800aeb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d009      	beq.n	800ae7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a18      	ldr	r2, [pc, #96]	@ (800aecc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d004      	beq.n	800ae7a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a11      	ldr	r2, [pc, #68]	@ (800aebc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d10c      	bne.n	800ae94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	68ba      	ldr	r2, [r7, #8]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	68ba      	ldr	r2, [r7, #8]
 800ae92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3714      	adds	r7, #20
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	40012c00 	.word	0x40012c00
 800aeb8:	40013400 	.word	0x40013400
 800aebc:	40015000 	.word	0x40015000
 800aec0:	40000400 	.word	0x40000400
 800aec4:	40000800 	.word	0x40000800
 800aec8:	40000c00 	.word	0x40000c00
 800aecc:	40014000 	.word	0x40014000

0800aed0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aeda:	2300      	movs	r3, #0
 800aedc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d101      	bne.n	800aeec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aee8:	2302      	movs	r3, #2
 800aeea:	e078      	b.n	800afde <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	4313      	orrs	r3, r2
 800af00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	689b      	ldr	r3, [r3, #8]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	4313      	orrs	r3, r2
 800af2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	695b      	ldr	r3, [r3, #20]
 800af44:	4313      	orrs	r3, r2
 800af46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af52:	4313      	orrs	r3, r2
 800af54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	699b      	ldr	r3, [r3, #24]
 800af60:	041b      	lsls	r3, r3, #16
 800af62:	4313      	orrs	r3, r2
 800af64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	69db      	ldr	r3, [r3, #28]
 800af70:	4313      	orrs	r3, r2
 800af72:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a1c      	ldr	r2, [pc, #112]	@ (800afec <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d009      	beq.n	800af92 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	4a1b      	ldr	r2, [pc, #108]	@ (800aff0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800af84:	4293      	cmp	r3, r2
 800af86:	d004      	beq.n	800af92 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a19      	ldr	r2, [pc, #100]	@ (800aff4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d11c      	bne.n	800afcc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af9c:	051b      	lsls	r3, r3, #20
 800af9e:	4313      	orrs	r3, r2
 800afa0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	6a1b      	ldr	r3, [r3, #32]
 800afac:	4313      	orrs	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc8:	4313      	orrs	r3, r2
 800afca:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800afdc:	2300      	movs	r3, #0
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3714      	adds	r7, #20
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	40012c00 	.word	0x40012c00
 800aff0:	40013400 	.word	0x40013400
 800aff4:	40015000 	.word	0x40015000

0800aff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aff8:	b480      	push	{r7}
 800affa:	b083      	sub	sp, #12
 800affc:	af00      	add	r7, sp, #0
 800affe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b000:	bf00      	nop
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b014:	bf00      	nop
 800b016:	370c      	adds	r7, #12
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b028:	bf00      	nop
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b03c:	bf00      	nop
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b050:	bf00      	nop
 800b052:	370c      	adds	r7, #12
 800b054:	46bd      	mov	sp, r7
 800b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05a:	4770      	bx	lr

0800b05c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b05c:	b480      	push	{r7}
 800b05e:	b083      	sub	sp, #12
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b064:	bf00      	nop
 800b066:	370c      	adds	r7, #12
 800b068:	46bd      	mov	sp, r7
 800b06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06e:	4770      	bx	lr

0800b070 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b078:	bf00      	nop
 800b07a:	370c      	adds	r7, #12
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr

0800b084 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	e042      	b.n	800b11c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d106      	bne.n	800b0ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f7f8 feb9 	bl	8003e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2224      	movs	r2, #36	@ 0x24
 800b0b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f022 0201 	bic.w	r2, r2, #1
 800b0c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d002      	beq.n	800b0d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 fb24 	bl	800b71c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 f825 	bl	800b124 <UART_SetConfig>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d101      	bne.n	800b0e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e01b      	b.n	800b11c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	685a      	ldr	r2, [r3, #4]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b0f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	689a      	ldr	r2, [r3, #8]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b102:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f042 0201 	orr.w	r2, r2, #1
 800b112:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fba3 	bl	800b860 <UART_CheckIdleState>
 800b11a:	4603      	mov	r3, r0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3708      	adds	r7, #8
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b128:	b08c      	sub	sp, #48	@ 0x30
 800b12a:	af00      	add	r7, sp, #0
 800b12c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	689a      	ldr	r2, [r3, #8]
 800b138:	697b      	ldr	r3, [r7, #20]
 800b13a:	691b      	ldr	r3, [r3, #16]
 800b13c:	431a      	orrs	r2, r3
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	695b      	ldr	r3, [r3, #20]
 800b142:	431a      	orrs	r2, r3
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	69db      	ldr	r3, [r3, #28]
 800b148:	4313      	orrs	r3, r2
 800b14a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	4baa      	ldr	r3, [pc, #680]	@ (800b3fc <UART_SetConfig+0x2d8>)
 800b154:	4013      	ands	r3, r2
 800b156:	697a      	ldr	r2, [r7, #20]
 800b158:	6812      	ldr	r2, [r2, #0]
 800b15a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b15c:	430b      	orrs	r3, r1
 800b15e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b160:	697b      	ldr	r3, [r7, #20]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	68da      	ldr	r2, [r3, #12]
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	430a      	orrs	r2, r1
 800b174:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b176:	697b      	ldr	r3, [r7, #20]
 800b178:	699b      	ldr	r3, [r3, #24]
 800b17a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4a9f      	ldr	r2, [pc, #636]	@ (800b400 <UART_SetConfig+0x2dc>)
 800b182:	4293      	cmp	r3, r2
 800b184:	d004      	beq.n	800b190 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	6a1b      	ldr	r3, [r3, #32]
 800b18a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b18c:	4313      	orrs	r3, r2
 800b18e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	689b      	ldr	r3, [r3, #8]
 800b196:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b19a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b19e:	697a      	ldr	r2, [r7, #20]
 800b1a0:	6812      	ldr	r2, [r2, #0]
 800b1a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1a4:	430b      	orrs	r3, r1
 800b1a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ae:	f023 010f 	bic.w	r1, r3, #15
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	430a      	orrs	r2, r1
 800b1bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a90      	ldr	r2, [pc, #576]	@ (800b404 <UART_SetConfig+0x2e0>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d125      	bne.n	800b214 <UART_SetConfig+0xf0>
 800b1c8:	4b8f      	ldr	r3, [pc, #572]	@ (800b408 <UART_SetConfig+0x2e4>)
 800b1ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1ce:	f003 0303 	and.w	r3, r3, #3
 800b1d2:	2b03      	cmp	r3, #3
 800b1d4:	d81a      	bhi.n	800b20c <UART_SetConfig+0xe8>
 800b1d6:	a201      	add	r2, pc, #4	@ (adr r2, 800b1dc <UART_SetConfig+0xb8>)
 800b1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1dc:	0800b1ed 	.word	0x0800b1ed
 800b1e0:	0800b1fd 	.word	0x0800b1fd
 800b1e4:	0800b1f5 	.word	0x0800b1f5
 800b1e8:	0800b205 	.word	0x0800b205
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1f2:	e116      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b1f4:	2302      	movs	r3, #2
 800b1f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b1fa:	e112      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b1fc:	2304      	movs	r3, #4
 800b1fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b202:	e10e      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b204:	2308      	movs	r3, #8
 800b206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b20a:	e10a      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b20c:	2310      	movs	r3, #16
 800b20e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b212:	e106      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a7c      	ldr	r2, [pc, #496]	@ (800b40c <UART_SetConfig+0x2e8>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d138      	bne.n	800b290 <UART_SetConfig+0x16c>
 800b21e:	4b7a      	ldr	r3, [pc, #488]	@ (800b408 <UART_SetConfig+0x2e4>)
 800b220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b224:	f003 030c 	and.w	r3, r3, #12
 800b228:	2b0c      	cmp	r3, #12
 800b22a:	d82d      	bhi.n	800b288 <UART_SetConfig+0x164>
 800b22c:	a201      	add	r2, pc, #4	@ (adr r2, 800b234 <UART_SetConfig+0x110>)
 800b22e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b232:	bf00      	nop
 800b234:	0800b269 	.word	0x0800b269
 800b238:	0800b289 	.word	0x0800b289
 800b23c:	0800b289 	.word	0x0800b289
 800b240:	0800b289 	.word	0x0800b289
 800b244:	0800b279 	.word	0x0800b279
 800b248:	0800b289 	.word	0x0800b289
 800b24c:	0800b289 	.word	0x0800b289
 800b250:	0800b289 	.word	0x0800b289
 800b254:	0800b271 	.word	0x0800b271
 800b258:	0800b289 	.word	0x0800b289
 800b25c:	0800b289 	.word	0x0800b289
 800b260:	0800b289 	.word	0x0800b289
 800b264:	0800b281 	.word	0x0800b281
 800b268:	2300      	movs	r3, #0
 800b26a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b26e:	e0d8      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b270:	2302      	movs	r3, #2
 800b272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b276:	e0d4      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b278:	2304      	movs	r3, #4
 800b27a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b27e:	e0d0      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b280:	2308      	movs	r3, #8
 800b282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b286:	e0cc      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b288:	2310      	movs	r3, #16
 800b28a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b28e:	e0c8      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a5e      	ldr	r2, [pc, #376]	@ (800b410 <UART_SetConfig+0x2ec>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d125      	bne.n	800b2e6 <UART_SetConfig+0x1c2>
 800b29a:	4b5b      	ldr	r3, [pc, #364]	@ (800b408 <UART_SetConfig+0x2e4>)
 800b29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2a0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b2a4:	2b30      	cmp	r3, #48	@ 0x30
 800b2a6:	d016      	beq.n	800b2d6 <UART_SetConfig+0x1b2>
 800b2a8:	2b30      	cmp	r3, #48	@ 0x30
 800b2aa:	d818      	bhi.n	800b2de <UART_SetConfig+0x1ba>
 800b2ac:	2b20      	cmp	r3, #32
 800b2ae:	d00a      	beq.n	800b2c6 <UART_SetConfig+0x1a2>
 800b2b0:	2b20      	cmp	r3, #32
 800b2b2:	d814      	bhi.n	800b2de <UART_SetConfig+0x1ba>
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <UART_SetConfig+0x19a>
 800b2b8:	2b10      	cmp	r3, #16
 800b2ba:	d008      	beq.n	800b2ce <UART_SetConfig+0x1aa>
 800b2bc:	e00f      	b.n	800b2de <UART_SetConfig+0x1ba>
 800b2be:	2300      	movs	r3, #0
 800b2c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2c4:	e0ad      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b2c6:	2302      	movs	r3, #2
 800b2c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2cc:	e0a9      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b2ce:	2304      	movs	r3, #4
 800b2d0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2d4:	e0a5      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b2d6:	2308      	movs	r3, #8
 800b2d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2dc:	e0a1      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b2de:	2310      	movs	r3, #16
 800b2e0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b2e4:	e09d      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a4a      	ldr	r2, [pc, #296]	@ (800b414 <UART_SetConfig+0x2f0>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d125      	bne.n	800b33c <UART_SetConfig+0x218>
 800b2f0:	4b45      	ldr	r3, [pc, #276]	@ (800b408 <UART_SetConfig+0x2e4>)
 800b2f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2f6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b2fa:	2bc0      	cmp	r3, #192	@ 0xc0
 800b2fc:	d016      	beq.n	800b32c <UART_SetConfig+0x208>
 800b2fe:	2bc0      	cmp	r3, #192	@ 0xc0
 800b300:	d818      	bhi.n	800b334 <UART_SetConfig+0x210>
 800b302:	2b80      	cmp	r3, #128	@ 0x80
 800b304:	d00a      	beq.n	800b31c <UART_SetConfig+0x1f8>
 800b306:	2b80      	cmp	r3, #128	@ 0x80
 800b308:	d814      	bhi.n	800b334 <UART_SetConfig+0x210>
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d002      	beq.n	800b314 <UART_SetConfig+0x1f0>
 800b30e:	2b40      	cmp	r3, #64	@ 0x40
 800b310:	d008      	beq.n	800b324 <UART_SetConfig+0x200>
 800b312:	e00f      	b.n	800b334 <UART_SetConfig+0x210>
 800b314:	2300      	movs	r3, #0
 800b316:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b31a:	e082      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b31c:	2302      	movs	r3, #2
 800b31e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b322:	e07e      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b324:	2304      	movs	r3, #4
 800b326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b32a:	e07a      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b32c:	2308      	movs	r3, #8
 800b32e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b332:	e076      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b334:	2310      	movs	r3, #16
 800b336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b33a:	e072      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b33c:	697b      	ldr	r3, [r7, #20]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a35      	ldr	r2, [pc, #212]	@ (800b418 <UART_SetConfig+0x2f4>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d12a      	bne.n	800b39c <UART_SetConfig+0x278>
 800b346:	4b30      	ldr	r3, [pc, #192]	@ (800b408 <UART_SetConfig+0x2e4>)
 800b348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b34c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b350:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b354:	d01a      	beq.n	800b38c <UART_SetConfig+0x268>
 800b356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b35a:	d81b      	bhi.n	800b394 <UART_SetConfig+0x270>
 800b35c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b360:	d00c      	beq.n	800b37c <UART_SetConfig+0x258>
 800b362:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b366:	d815      	bhi.n	800b394 <UART_SetConfig+0x270>
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d003      	beq.n	800b374 <UART_SetConfig+0x250>
 800b36c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b370:	d008      	beq.n	800b384 <UART_SetConfig+0x260>
 800b372:	e00f      	b.n	800b394 <UART_SetConfig+0x270>
 800b374:	2300      	movs	r3, #0
 800b376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b37a:	e052      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b37c:	2302      	movs	r3, #2
 800b37e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b382:	e04e      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b384:	2304      	movs	r3, #4
 800b386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b38a:	e04a      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b38c:	2308      	movs	r3, #8
 800b38e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b392:	e046      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b394:	2310      	movs	r3, #16
 800b396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b39a:	e042      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a17      	ldr	r2, [pc, #92]	@ (800b400 <UART_SetConfig+0x2dc>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d13a      	bne.n	800b41c <UART_SetConfig+0x2f8>
 800b3a6:	4b18      	ldr	r3, [pc, #96]	@ (800b408 <UART_SetConfig+0x2e4>)
 800b3a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b3ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b3b0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b3b4:	d01a      	beq.n	800b3ec <UART_SetConfig+0x2c8>
 800b3b6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b3ba:	d81b      	bhi.n	800b3f4 <UART_SetConfig+0x2d0>
 800b3bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3c0:	d00c      	beq.n	800b3dc <UART_SetConfig+0x2b8>
 800b3c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b3c6:	d815      	bhi.n	800b3f4 <UART_SetConfig+0x2d0>
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d003      	beq.n	800b3d4 <UART_SetConfig+0x2b0>
 800b3cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b3d0:	d008      	beq.n	800b3e4 <UART_SetConfig+0x2c0>
 800b3d2:	e00f      	b.n	800b3f4 <UART_SetConfig+0x2d0>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3da:	e022      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b3dc:	2302      	movs	r3, #2
 800b3de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3e2:	e01e      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b3e4:	2304      	movs	r3, #4
 800b3e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3ea:	e01a      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b3ec:	2308      	movs	r3, #8
 800b3ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3f2:	e016      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b3f4:	2310      	movs	r3, #16
 800b3f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b3fa:	e012      	b.n	800b422 <UART_SetConfig+0x2fe>
 800b3fc:	cfff69f3 	.word	0xcfff69f3
 800b400:	40008000 	.word	0x40008000
 800b404:	40013800 	.word	0x40013800
 800b408:	40021000 	.word	0x40021000
 800b40c:	40004400 	.word	0x40004400
 800b410:	40004800 	.word	0x40004800
 800b414:	40004c00 	.word	0x40004c00
 800b418:	40005000 	.word	0x40005000
 800b41c:	2310      	movs	r3, #16
 800b41e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4aae      	ldr	r2, [pc, #696]	@ (800b6e0 <UART_SetConfig+0x5bc>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	f040 8097 	bne.w	800b55c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b42e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b432:	2b08      	cmp	r3, #8
 800b434:	d823      	bhi.n	800b47e <UART_SetConfig+0x35a>
 800b436:	a201      	add	r2, pc, #4	@ (adr r2, 800b43c <UART_SetConfig+0x318>)
 800b438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43c:	0800b461 	.word	0x0800b461
 800b440:	0800b47f 	.word	0x0800b47f
 800b444:	0800b469 	.word	0x0800b469
 800b448:	0800b47f 	.word	0x0800b47f
 800b44c:	0800b46f 	.word	0x0800b46f
 800b450:	0800b47f 	.word	0x0800b47f
 800b454:	0800b47f 	.word	0x0800b47f
 800b458:	0800b47f 	.word	0x0800b47f
 800b45c:	0800b477 	.word	0x0800b477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b460:	f7fd fec6 	bl	80091f0 <HAL_RCC_GetPCLK1Freq>
 800b464:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b466:	e010      	b.n	800b48a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b468:	4b9e      	ldr	r3, [pc, #632]	@ (800b6e4 <UART_SetConfig+0x5c0>)
 800b46a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b46c:	e00d      	b.n	800b48a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b46e:	f7fd fe51 	bl	8009114 <HAL_RCC_GetSysClockFreq>
 800b472:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b474:	e009      	b.n	800b48a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b47a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b47c:	e005      	b.n	800b48a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b47e:	2300      	movs	r3, #0
 800b480:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b488:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b48a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	f000 8130 	beq.w	800b6f2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b496:	4a94      	ldr	r2, [pc, #592]	@ (800b6e8 <UART_SetConfig+0x5c4>)
 800b498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b49c:	461a      	mov	r2, r3
 800b49e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	685a      	ldr	r2, [r3, #4]
 800b4aa:	4613      	mov	r3, r2
 800b4ac:	005b      	lsls	r3, r3, #1
 800b4ae:	4413      	add	r3, r2
 800b4b0:	69ba      	ldr	r2, [r7, #24]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d305      	bcc.n	800b4c2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b4bc:	69ba      	ldr	r2, [r7, #24]
 800b4be:	429a      	cmp	r2, r3
 800b4c0:	d903      	bls.n	800b4ca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b4c2:	2301      	movs	r3, #1
 800b4c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b4c8:	e113      	b.n	800b6f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b4ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	60bb      	str	r3, [r7, #8]
 800b4d0:	60fa      	str	r2, [r7, #12]
 800b4d2:	697b      	ldr	r3, [r7, #20]
 800b4d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4d6:	4a84      	ldr	r2, [pc, #528]	@ (800b6e8 <UART_SetConfig+0x5c4>)
 800b4d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	2200      	movs	r2, #0
 800b4e0:	603b      	str	r3, [r7, #0]
 800b4e2:	607a      	str	r2, [r7, #4]
 800b4e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b4ec:	f7f5 fbf4 	bl	8000cd8 <__aeabi_uldivmod>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4610      	mov	r0, r2
 800b4f6:	4619      	mov	r1, r3
 800b4f8:	f04f 0200 	mov.w	r2, #0
 800b4fc:	f04f 0300 	mov.w	r3, #0
 800b500:	020b      	lsls	r3, r1, #8
 800b502:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b506:	0202      	lsls	r2, r0, #8
 800b508:	6979      	ldr	r1, [r7, #20]
 800b50a:	6849      	ldr	r1, [r1, #4]
 800b50c:	0849      	lsrs	r1, r1, #1
 800b50e:	2000      	movs	r0, #0
 800b510:	460c      	mov	r4, r1
 800b512:	4605      	mov	r5, r0
 800b514:	eb12 0804 	adds.w	r8, r2, r4
 800b518:	eb43 0905 	adc.w	r9, r3, r5
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	469a      	mov	sl, r3
 800b524:	4693      	mov	fp, r2
 800b526:	4652      	mov	r2, sl
 800b528:	465b      	mov	r3, fp
 800b52a:	4640      	mov	r0, r8
 800b52c:	4649      	mov	r1, r9
 800b52e:	f7f5 fbd3 	bl	8000cd8 <__aeabi_uldivmod>
 800b532:	4602      	mov	r2, r0
 800b534:	460b      	mov	r3, r1
 800b536:	4613      	mov	r3, r2
 800b538:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b53a:	6a3b      	ldr	r3, [r7, #32]
 800b53c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b540:	d308      	bcc.n	800b554 <UART_SetConfig+0x430>
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b548:	d204      	bcs.n	800b554 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	6a3a      	ldr	r2, [r7, #32]
 800b550:	60da      	str	r2, [r3, #12]
 800b552:	e0ce      	b.n	800b6f2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b554:	2301      	movs	r3, #1
 800b556:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b55a:	e0ca      	b.n	800b6f2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	69db      	ldr	r3, [r3, #28]
 800b560:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b564:	d166      	bne.n	800b634 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b566:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b56a:	2b08      	cmp	r3, #8
 800b56c:	d827      	bhi.n	800b5be <UART_SetConfig+0x49a>
 800b56e:	a201      	add	r2, pc, #4	@ (adr r2, 800b574 <UART_SetConfig+0x450>)
 800b570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b574:	0800b599 	.word	0x0800b599
 800b578:	0800b5a1 	.word	0x0800b5a1
 800b57c:	0800b5a9 	.word	0x0800b5a9
 800b580:	0800b5bf 	.word	0x0800b5bf
 800b584:	0800b5af 	.word	0x0800b5af
 800b588:	0800b5bf 	.word	0x0800b5bf
 800b58c:	0800b5bf 	.word	0x0800b5bf
 800b590:	0800b5bf 	.word	0x0800b5bf
 800b594:	0800b5b7 	.word	0x0800b5b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b598:	f7fd fe2a 	bl	80091f0 <HAL_RCC_GetPCLK1Freq>
 800b59c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b59e:	e014      	b.n	800b5ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5a0:	f7fd fe3c 	bl	800921c <HAL_RCC_GetPCLK2Freq>
 800b5a4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b5a6:	e010      	b.n	800b5ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b5a8:	4b4e      	ldr	r3, [pc, #312]	@ (800b6e4 <UART_SetConfig+0x5c0>)
 800b5aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b5ac:	e00d      	b.n	800b5ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b5ae:	f7fd fdb1 	bl	8009114 <HAL_RCC_GetSysClockFreq>
 800b5b2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b5b4:	e009      	b.n	800b5ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b5ba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b5bc:	e005      	b.n	800b5ca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b5c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f000 8090 	beq.w	800b6f2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5d6:	4a44      	ldr	r2, [pc, #272]	@ (800b6e8 <UART_SetConfig+0x5c4>)
 800b5d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b5e4:	005a      	lsls	r2, r3, #1
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	085b      	lsrs	r3, r3, #1
 800b5ec:	441a      	add	r2, r3
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b5f8:	6a3b      	ldr	r3, [r7, #32]
 800b5fa:	2b0f      	cmp	r3, #15
 800b5fc:	d916      	bls.n	800b62c <UART_SetConfig+0x508>
 800b5fe:	6a3b      	ldr	r3, [r7, #32]
 800b600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b604:	d212      	bcs.n	800b62c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b606:	6a3b      	ldr	r3, [r7, #32]
 800b608:	b29b      	uxth	r3, r3
 800b60a:	f023 030f 	bic.w	r3, r3, #15
 800b60e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b610:	6a3b      	ldr	r3, [r7, #32]
 800b612:	085b      	lsrs	r3, r3, #1
 800b614:	b29b      	uxth	r3, r3
 800b616:	f003 0307 	and.w	r3, r3, #7
 800b61a:	b29a      	uxth	r2, r3
 800b61c:	8bfb      	ldrh	r3, [r7, #30]
 800b61e:	4313      	orrs	r3, r2
 800b620:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	8bfa      	ldrh	r2, [r7, #30]
 800b628:	60da      	str	r2, [r3, #12]
 800b62a:	e062      	b.n	800b6f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800b632:	e05e      	b.n	800b6f2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b634:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b638:	2b08      	cmp	r3, #8
 800b63a:	d828      	bhi.n	800b68e <UART_SetConfig+0x56a>
 800b63c:	a201      	add	r2, pc, #4	@ (adr r2, 800b644 <UART_SetConfig+0x520>)
 800b63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b642:	bf00      	nop
 800b644:	0800b669 	.word	0x0800b669
 800b648:	0800b671 	.word	0x0800b671
 800b64c:	0800b679 	.word	0x0800b679
 800b650:	0800b68f 	.word	0x0800b68f
 800b654:	0800b67f 	.word	0x0800b67f
 800b658:	0800b68f 	.word	0x0800b68f
 800b65c:	0800b68f 	.word	0x0800b68f
 800b660:	0800b68f 	.word	0x0800b68f
 800b664:	0800b687 	.word	0x0800b687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b668:	f7fd fdc2 	bl	80091f0 <HAL_RCC_GetPCLK1Freq>
 800b66c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b66e:	e014      	b.n	800b69a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b670:	f7fd fdd4 	bl	800921c <HAL_RCC_GetPCLK2Freq>
 800b674:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b676:	e010      	b.n	800b69a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b678:	4b1a      	ldr	r3, [pc, #104]	@ (800b6e4 <UART_SetConfig+0x5c0>)
 800b67a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b67c:	e00d      	b.n	800b69a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b67e:	f7fd fd49 	bl	8009114 <HAL_RCC_GetSysClockFreq>
 800b682:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800b684:	e009      	b.n	800b69a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b686:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b68a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800b68c:	e005      	b.n	800b69a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b68e:	2300      	movs	r3, #0
 800b690:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800b698:	bf00      	nop
    }

    if (pclk != 0U)
 800b69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d028      	beq.n	800b6f2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6a4:	4a10      	ldr	r2, [pc, #64]	@ (800b6e8 <UART_SetConfig+0x5c4>)
 800b6a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ae:	fbb3 f2f2 	udiv	r2, r3, r2
 800b6b2:	697b      	ldr	r3, [r7, #20]
 800b6b4:	685b      	ldr	r3, [r3, #4]
 800b6b6:	085b      	lsrs	r3, r3, #1
 800b6b8:	441a      	add	r2, r3
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b6c4:	6a3b      	ldr	r3, [r7, #32]
 800b6c6:	2b0f      	cmp	r3, #15
 800b6c8:	d910      	bls.n	800b6ec <UART_SetConfig+0x5c8>
 800b6ca:	6a3b      	ldr	r3, [r7, #32]
 800b6cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6d0:	d20c      	bcs.n	800b6ec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b6d2:	6a3b      	ldr	r3, [r7, #32]
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	60da      	str	r2, [r3, #12]
 800b6dc:	e009      	b.n	800b6f2 <UART_SetConfig+0x5ce>
 800b6de:	bf00      	nop
 800b6e0:	40008000 	.word	0x40008000
 800b6e4:	00f42400 	.word	0x00f42400
 800b6e8:	08016e20 	.word	0x08016e20
      }
      else
      {
        ret = HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b702:	697b      	ldr	r3, [r7, #20]
 800b704:	2200      	movs	r2, #0
 800b706:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	2200      	movs	r2, #0
 800b70c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b70e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800b712:	4618      	mov	r0, r3
 800b714:	3730      	adds	r7, #48	@ 0x30
 800b716:	46bd      	mov	sp, r7
 800b718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b71c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b728:	f003 0308 	and.w	r3, r3, #8
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d00a      	beq.n	800b746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	430a      	orrs	r2, r1
 800b744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b74a:	f003 0301 	and.w	r3, r3, #1
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d00a      	beq.n	800b768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	430a      	orrs	r2, r1
 800b766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b76c:	f003 0302 	and.w	r3, r3, #2
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00a      	beq.n	800b78a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	430a      	orrs	r2, r1
 800b788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b78e:	f003 0304 	and.w	r3, r3, #4
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00a      	beq.n	800b7ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	430a      	orrs	r2, r1
 800b7aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7b0:	f003 0310 	and.w	r3, r3, #16
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d00a      	beq.n	800b7ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	689b      	ldr	r3, [r3, #8]
 800b7be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	430a      	orrs	r2, r1
 800b7cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7d2:	f003 0320 	and.w	r3, r3, #32
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d00a      	beq.n	800b7f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	430a      	orrs	r2, r1
 800b7ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d01a      	beq.n	800b832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	430a      	orrs	r2, r1
 800b810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b816:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b81a:	d10a      	bne.n	800b832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	430a      	orrs	r2, r1
 800b830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d00a      	beq.n	800b854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	430a      	orrs	r2, r1
 800b852:	605a      	str	r2, [r3, #4]
  }
}
 800b854:	bf00      	nop
 800b856:	370c      	adds	r7, #12
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b098      	sub	sp, #96	@ 0x60
 800b864:	af02      	add	r7, sp, #8
 800b866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b870:	f7f8 fd1e 	bl	80042b0 <HAL_GetTick>
 800b874:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 0308 	and.w	r3, r3, #8
 800b880:	2b08      	cmp	r3, #8
 800b882:	d12f      	bne.n	800b8e4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b884:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b88c:	2200      	movs	r2, #0
 800b88e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 f88e 	bl	800b9b4 <UART_WaitOnFlagUntilTimeout>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d022      	beq.n	800b8e4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a6:	e853 3f00 	ldrex	r3, [r3]
 800b8aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b8ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b8b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	461a      	mov	r2, r3
 800b8ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8bc:	647b      	str	r3, [r7, #68]	@ 0x44
 800b8be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b8c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b8c4:	e841 2300 	strex	r3, r2, [r1]
 800b8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b8ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1e6      	bne.n	800b89e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2220      	movs	r2, #32
 800b8d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b8e0:	2303      	movs	r3, #3
 800b8e2:	e063      	b.n	800b9ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f003 0304 	and.w	r3, r3, #4
 800b8ee:	2b04      	cmp	r3, #4
 800b8f0:	d149      	bne.n	800b986 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b8f2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b8f6:	9300      	str	r3, [sp, #0]
 800b8f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f000 f857 	bl	800b9b4 <UART_WaitOnFlagUntilTimeout>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d03c      	beq.n	800b986 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b914:	e853 3f00 	ldrex	r3, [r3]
 800b918:	623b      	str	r3, [r7, #32]
   return(result);
 800b91a:	6a3b      	ldr	r3, [r7, #32]
 800b91c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b920:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	461a      	mov	r2, r3
 800b928:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b92a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b92c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b92e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b930:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b932:	e841 2300 	strex	r3, r2, [r1]
 800b936:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d1e6      	bne.n	800b90c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	3308      	adds	r3, #8
 800b944:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	e853 3f00 	ldrex	r3, [r3]
 800b94c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f023 0301 	bic.w	r3, r3, #1
 800b954:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	3308      	adds	r3, #8
 800b95c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b95e:	61fa      	str	r2, [r7, #28]
 800b960:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b962:	69b9      	ldr	r1, [r7, #24]
 800b964:	69fa      	ldr	r2, [r7, #28]
 800b966:	e841 2300 	strex	r3, r2, [r1]
 800b96a:	617b      	str	r3, [r7, #20]
   return(result);
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d1e5      	bne.n	800b93e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2220      	movs	r2, #32
 800b976:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b982:	2303      	movs	r3, #3
 800b984:	e012      	b.n	800b9ac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2220      	movs	r2, #32
 800b98a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2220      	movs	r2, #32
 800b992:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2200      	movs	r2, #0
 800b9a0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2200      	movs	r2, #0
 800b9a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b9aa:	2300      	movs	r3, #0
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3758      	adds	r7, #88	@ 0x58
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	60f8      	str	r0, [r7, #12]
 800b9bc:	60b9      	str	r1, [r7, #8]
 800b9be:	603b      	str	r3, [r7, #0]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9c4:	e04f      	b.n	800ba66 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9cc:	d04b      	beq.n	800ba66 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9ce:	f7f8 fc6f 	bl	80042b0 <HAL_GetTick>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	1ad3      	subs	r3, r2, r3
 800b9d8:	69ba      	ldr	r2, [r7, #24]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d302      	bcc.n	800b9e4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b9de:	69bb      	ldr	r3, [r7, #24]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d101      	bne.n	800b9e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b9e4:	2303      	movs	r3, #3
 800b9e6:	e04e      	b.n	800ba86 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f003 0304 	and.w	r3, r3, #4
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d037      	beq.n	800ba66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	2b80      	cmp	r3, #128	@ 0x80
 800b9fa:	d034      	beq.n	800ba66 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	2b40      	cmp	r3, #64	@ 0x40
 800ba00:	d031      	beq.n	800ba66 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	69db      	ldr	r3, [r3, #28]
 800ba08:	f003 0308 	and.w	r3, r3, #8
 800ba0c:	2b08      	cmp	r3, #8
 800ba0e:	d110      	bne.n	800ba32 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2208      	movs	r2, #8
 800ba16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f000 f838 	bl	800ba8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2208      	movs	r2, #8
 800ba22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e029      	b.n	800ba86 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	69db      	ldr	r3, [r3, #28]
 800ba38:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ba3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ba40:	d111      	bne.n	800ba66 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ba4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ba4c:	68f8      	ldr	r0, [r7, #12]
 800ba4e:	f000 f81e 	bl	800ba8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	2220      	movs	r2, #32
 800ba56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ba62:	2303      	movs	r3, #3
 800ba64:	e00f      	b.n	800ba86 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	69da      	ldr	r2, [r3, #28]
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	4013      	ands	r3, r2
 800ba70:	68ba      	ldr	r2, [r7, #8]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	bf0c      	ite	eq
 800ba76:	2301      	moveq	r3, #1
 800ba78:	2300      	movne	r3, #0
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	461a      	mov	r2, r3
 800ba7e:	79fb      	ldrb	r3, [r7, #7]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d0a0      	beq.n	800b9c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba84:	2300      	movs	r3, #0
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3710      	adds	r7, #16
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}

0800ba8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba8e:	b480      	push	{r7}
 800ba90:	b095      	sub	sp, #84	@ 0x54
 800ba92:	af00      	add	r7, sp, #0
 800ba94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba9e:	e853 3f00 	ldrex	r3, [r3]
 800baa2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800baa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baa6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800baaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	461a      	mov	r2, r3
 800bab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bab4:	643b      	str	r3, [r7, #64]	@ 0x40
 800bab6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bab8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800baba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800babc:	e841 2300 	strex	r3, r2, [r1]
 800bac0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1e6      	bne.n	800ba96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	3308      	adds	r3, #8
 800bace:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad0:	6a3b      	ldr	r3, [r7, #32]
 800bad2:	e853 3f00 	ldrex	r3, [r3]
 800bad6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bad8:	69fb      	ldr	r3, [r7, #28]
 800bada:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bade:	f023 0301 	bic.w	r3, r3, #1
 800bae2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	3308      	adds	r3, #8
 800baea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800baec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800baee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baf0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800baf2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800baf4:	e841 2300 	strex	r3, r2, [r1]
 800baf8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1e3      	bne.n	800bac8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d118      	bne.n	800bb3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	e853 3f00 	ldrex	r3, [r3]
 800bb14:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	f023 0310 	bic.w	r3, r3, #16
 800bb1c:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	461a      	mov	r2, r3
 800bb24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb26:	61bb      	str	r3, [r7, #24]
 800bb28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb2a:	6979      	ldr	r1, [r7, #20]
 800bb2c:	69ba      	ldr	r2, [r7, #24]
 800bb2e:	e841 2300 	strex	r3, r2, [r1]
 800bb32:	613b      	str	r3, [r7, #16]
   return(result);
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d1e6      	bne.n	800bb08 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2220      	movs	r2, #32
 800bb3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2200      	movs	r2, #0
 800bb46:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bb4e:	bf00      	nop
 800bb50:	3754      	adds	r7, #84	@ 0x54
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	b085      	sub	sp, #20
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d101      	bne.n	800bb70 <HAL_UARTEx_DisableFifoMode+0x16>
 800bb6c:	2302      	movs	r3, #2
 800bb6e:	e027      	b.n	800bbc0 <HAL_UARTEx_DisableFifoMode+0x66>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2224      	movs	r2, #36	@ 0x24
 800bb7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f022 0201 	bic.w	r2, r2, #1
 800bb96:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bb9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	68fa      	ldr	r2, [r7, #12]
 800bbac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2220      	movs	r2, #32
 800bbb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bbbe:	2300      	movs	r3, #0
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bbdc:	2b01      	cmp	r3, #1
 800bbde:	d101      	bne.n	800bbe4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bbe0:	2302      	movs	r3, #2
 800bbe2:	e02d      	b.n	800bc40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2224      	movs	r2, #36	@ 0x24
 800bbf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	681a      	ldr	r2, [r3, #0]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f022 0201 	bic.w	r2, r2, #1
 800bc0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	689b      	ldr	r3, [r3, #8]
 800bc12:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	683a      	ldr	r2, [r7, #0]
 800bc1c:	430a      	orrs	r2, r1
 800bc1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 f84f 	bl	800bcc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	68fa      	ldr	r2, [r7, #12]
 800bc2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2220      	movs	r2, #32
 800bc32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3710      	adds	r7, #16
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d101      	bne.n	800bc60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bc5c:	2302      	movs	r3, #2
 800bc5e:	e02d      	b.n	800bcbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2201      	movs	r2, #1
 800bc64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2224      	movs	r2, #36	@ 0x24
 800bc6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	681a      	ldr	r2, [r3, #0]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f022 0201 	bic.w	r2, r2, #1
 800bc86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	683a      	ldr	r2, [r7, #0]
 800bc98:	430a      	orrs	r2, r1
 800bc9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 f811 	bl	800bcc4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2220      	movs	r2, #32
 800bcae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bcba:	2300      	movs	r3, #0
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d108      	bne.n	800bce6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bce4:	e031      	b.n	800bd4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bce6:	2308      	movs	r3, #8
 800bce8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bcea:	2308      	movs	r3, #8
 800bcec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	689b      	ldr	r3, [r3, #8]
 800bcf4:	0e5b      	lsrs	r3, r3, #25
 800bcf6:	b2db      	uxtb	r3, r3
 800bcf8:	f003 0307 	and.w	r3, r3, #7
 800bcfc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	0f5b      	lsrs	r3, r3, #29
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	f003 0307 	and.w	r3, r3, #7
 800bd0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd0e:	7bbb      	ldrb	r3, [r7, #14]
 800bd10:	7b3a      	ldrb	r2, [r7, #12]
 800bd12:	4911      	ldr	r1, [pc, #68]	@ (800bd58 <UARTEx_SetNbDataToProcess+0x94>)
 800bd14:	5c8a      	ldrb	r2, [r1, r2]
 800bd16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800bd1a:	7b3a      	ldrb	r2, [r7, #12]
 800bd1c:	490f      	ldr	r1, [pc, #60]	@ (800bd5c <UARTEx_SetNbDataToProcess+0x98>)
 800bd1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800bd20:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd24:	b29a      	uxth	r2, r3
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd2c:	7bfb      	ldrb	r3, [r7, #15]
 800bd2e:	7b7a      	ldrb	r2, [r7, #13]
 800bd30:	4909      	ldr	r1, [pc, #36]	@ (800bd58 <UARTEx_SetNbDataToProcess+0x94>)
 800bd32:	5c8a      	ldrb	r2, [r1, r2]
 800bd34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800bd38:	7b7a      	ldrb	r2, [r7, #13]
 800bd3a:	4908      	ldr	r1, [pc, #32]	@ (800bd5c <UARTEx_SetNbDataToProcess+0x98>)
 800bd3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800bd3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800bd4a:	bf00      	nop
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	08016e38 	.word	0x08016e38
 800bd5c:	08016e40 	.word	0x08016e40

0800bd60 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b085      	sub	sp, #20
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bd70:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bd74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	b29a      	uxth	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bd80:	2300      	movs	r3, #0
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3714      	adds	r7, #20
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b085      	sub	sp, #20
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bd96:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bd9a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800bda2:	b29a      	uxth	r2, r3
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	43db      	mvns	r3, r3
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	4013      	ands	r3, r2
 800bdae:	b29a      	uxth	r2, r3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3714      	adds	r7, #20
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b085      	sub	sp, #20
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	1d3b      	adds	r3, r7, #4
 800bdce:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2201      	movs	r2, #1
 800bdd6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2200      	movs	r2, #0
 800bde6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bdf2:	2300      	movs	r3, #0
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3714      	adds	r7, #20
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800be00:	b480      	push	{r7}
 800be02:	b09d      	sub	sp, #116	@ 0x74
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800be0a:	2300      	movs	r3, #0
 800be0c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	009b      	lsls	r3, r3, #2
 800be18:	4413      	add	r3, r2
 800be1a:	881b      	ldrh	r3, [r3, #0]
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800be22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be26:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	78db      	ldrb	r3, [r3, #3]
 800be2e:	2b03      	cmp	r3, #3
 800be30:	d81f      	bhi.n	800be72 <USB_ActivateEndpoint+0x72>
 800be32:	a201      	add	r2, pc, #4	@ (adr r2, 800be38 <USB_ActivateEndpoint+0x38>)
 800be34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be38:	0800be49 	.word	0x0800be49
 800be3c:	0800be65 	.word	0x0800be65
 800be40:	0800be7b 	.word	0x0800be7b
 800be44:	0800be57 	.word	0x0800be57
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800be48:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800be4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800be50:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800be54:	e012      	b.n	800be7c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800be56:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800be5a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800be5e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800be62:	e00b      	b.n	800be7c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800be64:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800be68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800be6c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800be70:	e004      	b.n	800be7c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800be72:	2301      	movs	r3, #1
 800be74:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800be78:	e000      	b.n	800be7c <USB_ActivateEndpoint+0x7c>
      break;
 800be7a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	441a      	add	r2, r3
 800be86:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800be8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	781b      	ldrb	r3, [r3, #0]
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	4413      	add	r3, r2
 800bea8:	881b      	ldrh	r3, [r3, #0]
 800beaa:	b29b      	uxth	r3, r3
 800beac:	b21b      	sxth	r3, r3
 800beae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800beb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beb6:	b21a      	sxth	r2, r3
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	b21b      	sxth	r3, r3
 800bebe:	4313      	orrs	r3, r2
 800bec0:	b21b      	sxth	r3, r3
 800bec2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	441a      	add	r2, r3
 800bed0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800bed4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bed8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bedc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	7b1b      	ldrb	r3, [r3, #12]
 800beec:	2b00      	cmp	r3, #0
 800beee:	f040 8178 	bne.w	800c1e2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	785b      	ldrb	r3, [r3, #1]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f000 8084 	beq.w	800c004 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	61bb      	str	r3, [r7, #24]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	461a      	mov	r2, r3
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	4413      	add	r3, r2
 800bf0e:	61bb      	str	r3, [r7, #24]
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	00da      	lsls	r2, r3, #3
 800bf16:	69bb      	ldr	r3, [r7, #24]
 800bf18:	4413      	add	r3, r2
 800bf1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bf1e:	617b      	str	r3, [r7, #20]
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	88db      	ldrh	r3, [r3, #6]
 800bf24:	085b      	lsrs	r3, r3, #1
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	005b      	lsls	r3, r3, #1
 800bf2a:	b29a      	uxth	r2, r3
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	683b      	ldr	r3, [r7, #0]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	009b      	lsls	r3, r3, #2
 800bf38:	4413      	add	r3, r2
 800bf3a:	881b      	ldrh	r3, [r3, #0]
 800bf3c:	827b      	strh	r3, [r7, #18]
 800bf3e:	8a7b      	ldrh	r3, [r7, #18]
 800bf40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d01b      	beq.n	800bf80 <USB_ActivateEndpoint+0x180>
 800bf48:	687a      	ldr	r2, [r7, #4]
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	4413      	add	r3, r2
 800bf52:	881b      	ldrh	r3, [r3, #0]
 800bf54:	b29b      	uxth	r3, r3
 800bf56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf5e:	823b      	strh	r3, [r7, #16]
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	441a      	add	r2, r3
 800bf6a:	8a3b      	ldrh	r3, [r7, #16]
 800bf6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bf7c:	b29b      	uxth	r3, r3
 800bf7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	78db      	ldrb	r3, [r3, #3]
 800bf84:	2b01      	cmp	r3, #1
 800bf86:	d020      	beq.n	800bfca <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	009b      	lsls	r3, r3, #2
 800bf90:	4413      	add	r3, r2
 800bf92:	881b      	ldrh	r3, [r3, #0]
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf9e:	81bb      	strh	r3, [r7, #12]
 800bfa0:	89bb      	ldrh	r3, [r7, #12]
 800bfa2:	f083 0320 	eor.w	r3, r3, #32
 800bfa6:	81bb      	strh	r3, [r7, #12]
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	009b      	lsls	r3, r3, #2
 800bfb0:	441a      	add	r2, r3
 800bfb2:	89bb      	ldrh	r3, [r7, #12]
 800bfb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	8013      	strh	r3, [r2, #0]
 800bfc8:	e2d5      	b.n	800c576 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	4413      	add	r3, r2
 800bfd4:	881b      	ldrh	r3, [r3, #0]
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfe0:	81fb      	strh	r3, [r7, #14]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	781b      	ldrb	r3, [r3, #0]
 800bfe8:	009b      	lsls	r3, r3, #2
 800bfea:	441a      	add	r2, r3
 800bfec:	89fb      	ldrh	r3, [r7, #14]
 800bfee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bff2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bff6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bffe:	b29b      	uxth	r3, r3
 800c000:	8013      	strh	r3, [r2, #0]
 800c002:	e2b8      	b.n	800c576 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	633b      	str	r3, [r7, #48]	@ 0x30
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c00e:	b29b      	uxth	r3, r3
 800c010:	461a      	mov	r2, r3
 800c012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c014:	4413      	add	r3, r2
 800c016:	633b      	str	r3, [r7, #48]	@ 0x30
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	00da      	lsls	r2, r3, #3
 800c01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c020:	4413      	add	r3, r2
 800c022:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	88db      	ldrh	r3, [r3, #6]
 800c02c:	085b      	lsrs	r3, r3, #1
 800c02e:	b29b      	uxth	r3, r3
 800c030:	005b      	lsls	r3, r3, #1
 800c032:	b29a      	uxth	r2, r3
 800c034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c036:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c042:	b29b      	uxth	r3, r3
 800c044:	461a      	mov	r2, r3
 800c046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c048:	4413      	add	r3, r2
 800c04a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	781b      	ldrb	r3, [r3, #0]
 800c050:	00da      	lsls	r2, r3, #3
 800c052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c054:	4413      	add	r3, r2
 800c056:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c05a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05e:	881b      	ldrh	r3, [r3, #0]
 800c060:	b29b      	uxth	r3, r3
 800c062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c066:	b29a      	uxth	r2, r3
 800c068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06a:	801a      	strh	r2, [r3, #0]
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	691b      	ldr	r3, [r3, #16]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10a      	bne.n	800c08a <USB_ActivateEndpoint+0x28a>
 800c074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c076:	881b      	ldrh	r3, [r3, #0]
 800c078:	b29b      	uxth	r3, r3
 800c07a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c07e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c082:	b29a      	uxth	r2, r3
 800c084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c086:	801a      	strh	r2, [r3, #0]
 800c088:	e039      	b.n	800c0fe <USB_ActivateEndpoint+0x2fe>
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	691b      	ldr	r3, [r3, #16]
 800c08e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c090:	d818      	bhi.n	800c0c4 <USB_ActivateEndpoint+0x2c4>
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	085b      	lsrs	r3, r3, #1
 800c098:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	691b      	ldr	r3, [r3, #16]
 800c09e:	f003 0301 	and.w	r3, r3, #1
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d002      	beq.n	800c0ac <USB_ActivateEndpoint+0x2ac>
 800c0a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ae:	881b      	ldrh	r3, [r3, #0]
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	029b      	lsls	r3, r3, #10
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	b29a      	uxth	r2, r3
 800c0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c0:	801a      	strh	r2, [r3, #0]
 800c0c2:	e01c      	b.n	800c0fe <USB_ActivateEndpoint+0x2fe>
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	691b      	ldr	r3, [r3, #16]
 800c0c8:	095b      	lsrs	r3, r3, #5
 800c0ca:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	691b      	ldr	r3, [r3, #16]
 800c0d0:	f003 031f 	and.w	r3, r3, #31
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d102      	bne.n	800c0de <USB_ActivateEndpoint+0x2de>
 800c0d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e0:	881b      	ldrh	r3, [r3, #0]
 800c0e2:	b29a      	uxth	r2, r3
 800c0e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	029b      	lsls	r3, r3, #10
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	4313      	orrs	r3, r2
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c0f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0f8:	b29a      	uxth	r2, r3
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4413      	add	r3, r2
 800c108:	881b      	ldrh	r3, [r3, #0]
 800c10a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c10c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c10e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c112:	2b00      	cmp	r3, #0
 800c114:	d01b      	beq.n	800c14e <USB_ActivateEndpoint+0x34e>
 800c116:	687a      	ldr	r2, [r7, #4]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	4413      	add	r3, r2
 800c120:	881b      	ldrh	r3, [r3, #0]
 800c122:	b29b      	uxth	r3, r3
 800c124:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c12c:	843b      	strh	r3, [r7, #32]
 800c12e:	687a      	ldr	r2, [r7, #4]
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	441a      	add	r2, r3
 800c138:	8c3b      	ldrh	r3, [r7, #32]
 800c13a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c13e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c142:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d124      	bne.n	800c1a0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	781b      	ldrb	r3, [r3, #0]
 800c15c:	009b      	lsls	r3, r3, #2
 800c15e:	4413      	add	r3, r2
 800c160:	881b      	ldrh	r3, [r3, #0]
 800c162:	b29b      	uxth	r3, r3
 800c164:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c168:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c16c:	83bb      	strh	r3, [r7, #28]
 800c16e:	8bbb      	ldrh	r3, [r7, #28]
 800c170:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c174:	83bb      	strh	r3, [r7, #28]
 800c176:	8bbb      	ldrh	r3, [r7, #28]
 800c178:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c17c:	83bb      	strh	r3, [r7, #28]
 800c17e:	687a      	ldr	r2, [r7, #4]
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	441a      	add	r2, r3
 800c188:	8bbb      	ldrh	r3, [r7, #28]
 800c18a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c18e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c196:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	8013      	strh	r3, [r2, #0]
 800c19e:	e1ea      	b.n	800c576 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	4413      	add	r3, r2
 800c1aa:	881b      	ldrh	r3, [r3, #0]
 800c1ac:	b29b      	uxth	r3, r3
 800c1ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c1b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1b6:	83fb      	strh	r3, [r7, #30]
 800c1b8:	8bfb      	ldrh	r3, [r7, #30]
 800c1ba:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c1be:	83fb      	strh	r3, [r7, #30]
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	441a      	add	r2, r3
 800c1ca:	8bfb      	ldrh	r3, [r7, #30]
 800c1cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	8013      	strh	r3, [r2, #0]
 800c1e0:	e1c9      	b.n	800c576 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	78db      	ldrb	r3, [r3, #3]
 800c1e6:	2b02      	cmp	r3, #2
 800c1e8:	d11e      	bne.n	800c228 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	881b      	ldrh	r3, [r3, #0]
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c200:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	441a      	add	r2, r3
 800c20e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c212:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c216:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c21a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c21e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c222:	b29b      	uxth	r3, r3
 800c224:	8013      	strh	r3, [r2, #0]
 800c226:	e01d      	b.n	800c264 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	4413      	add	r3, r2
 800c232:	881b      	ldrh	r3, [r3, #0]
 800c234:	b29b      	uxth	r3, r3
 800c236:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c23a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c23e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c242:	687a      	ldr	r2, [r7, #4]
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	441a      	add	r2, r3
 800c24c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c250:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c254:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c258:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c25c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c260:	b29b      	uxth	r3, r3
 800c262:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c26e:	b29b      	uxth	r3, r3
 800c270:	461a      	mov	r2, r3
 800c272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c274:	4413      	add	r3, r2
 800c276:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	00da      	lsls	r2, r3, #3
 800c27e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c280:	4413      	add	r3, r2
 800c282:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c286:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	891b      	ldrh	r3, [r3, #8]
 800c28c:	085b      	lsrs	r3, r3, #1
 800c28e:	b29b      	uxth	r3, r3
 800c290:	005b      	lsls	r3, r3, #1
 800c292:	b29a      	uxth	r2, r3
 800c294:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c296:	801a      	strh	r2, [r3, #0]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	657b      	str	r3, [r7, #84]	@ 0x54
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2a8:	4413      	add	r3, r2
 800c2aa:	657b      	str	r3, [r7, #84]	@ 0x54
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	00da      	lsls	r2, r3, #3
 800c2b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c2b4:	4413      	add	r3, r2
 800c2b6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c2ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	895b      	ldrh	r3, [r3, #10]
 800c2c0:	085b      	lsrs	r3, r3, #1
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	005b      	lsls	r3, r3, #1
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2ca:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	785b      	ldrb	r3, [r3, #1]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f040 8093 	bne.w	800c3fc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	781b      	ldrb	r3, [r3, #0]
 800c2dc:	009b      	lsls	r3, r3, #2
 800c2de:	4413      	add	r3, r2
 800c2e0:	881b      	ldrh	r3, [r3, #0]
 800c2e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c2e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c2ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d01b      	beq.n	800c32a <USB_ActivateEndpoint+0x52a>
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	4413      	add	r3, r2
 800c2fc:	881b      	ldrh	r3, [r3, #0]
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c304:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c308:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	441a      	add	r2, r3
 800c314:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c316:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c31a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c31e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c326:	b29b      	uxth	r3, r3
 800c328:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	4413      	add	r3, r2
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c338:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c33a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d01b      	beq.n	800c37a <USB_ActivateEndpoint+0x57a>
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	4413      	add	r3, r2
 800c34c:	881b      	ldrh	r3, [r3, #0]
 800c34e:	b29b      	uxth	r3, r3
 800c350:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c354:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c358:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	009b      	lsls	r3, r3, #2
 800c362:	441a      	add	r2, r3
 800c364:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c366:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c36a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c36e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c372:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c376:	b29b      	uxth	r3, r3
 800c378:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	781b      	ldrb	r3, [r3, #0]
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	4413      	add	r3, r2
 800c384:	881b      	ldrh	r3, [r3, #0]
 800c386:	b29b      	uxth	r3, r3
 800c388:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c38c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c390:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c392:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c394:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c398:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c39a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c39c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c3a0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	781b      	ldrb	r3, [r3, #0]
 800c3a8:	009b      	lsls	r3, r3, #2
 800c3aa:	441a      	add	r2, r3
 800c3ac:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c3ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3be:	b29b      	uxth	r3, r3
 800c3c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	4413      	add	r3, r2
 800c3cc:	881b      	ldrh	r3, [r3, #0]
 800c3ce:	b29b      	uxth	r3, r3
 800c3d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	441a      	add	r2, r3
 800c3e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c3e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	8013      	strh	r3, [r2, #0]
 800c3fa:	e0bc      	b.n	800c576 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	009b      	lsls	r3, r3, #2
 800c404:	4413      	add	r3, r2
 800c406:	881b      	ldrh	r3, [r3, #0]
 800c408:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c40c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c410:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c414:	2b00      	cmp	r3, #0
 800c416:	d01d      	beq.n	800c454 <USB_ActivateEndpoint+0x654>
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	009b      	lsls	r3, r3, #2
 800c420:	4413      	add	r3, r2
 800c422:	881b      	ldrh	r3, [r3, #0]
 800c424:	b29b      	uxth	r3, r3
 800c426:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c42a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c42e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	441a      	add	r2, r3
 800c43c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c448:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c44c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c450:	b29b      	uxth	r3, r3
 800c452:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	4413      	add	r3, r2
 800c45e:	881b      	ldrh	r3, [r3, #0]
 800c460:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c464:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d01d      	beq.n	800c4ac <USB_ActivateEndpoint+0x6ac>
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4413      	add	r3, r2
 800c47a:	881b      	ldrh	r3, [r3, #0]
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c486:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	441a      	add	r2, r3
 800c494:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c498:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c49c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	78db      	ldrb	r3, [r3, #3]
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d024      	beq.n	800c4fe <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	781b      	ldrb	r3, [r3, #0]
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4413      	add	r3, r2
 800c4be:	881b      	ldrh	r3, [r3, #0]
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4ca:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c4ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c4d2:	f083 0320 	eor.w	r3, r3, #32
 800c4d6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	441a      	add	r2, r3
 800c4e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c4e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	8013      	strh	r3, [r2, #0]
 800c4fc:	e01d      	b.n	800c53a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4413      	add	r3, r2
 800c508:	881b      	ldrh	r3, [r3, #0]
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c510:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c514:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	781b      	ldrb	r3, [r3, #0]
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	441a      	add	r2, r3
 800c522:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c526:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c52a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c52e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c536:	b29b      	uxth	r3, r3
 800c538:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	4413      	add	r3, r2
 800c544:	881b      	ldrh	r3, [r3, #0]
 800c546:	b29b      	uxth	r3, r3
 800c548:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c54c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c550:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c554:	687a      	ldr	r2, [r7, #4]
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	441a      	add	r2, r3
 800c55e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c562:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c566:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c56a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c56e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c572:	b29b      	uxth	r3, r3
 800c574:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c576:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	3774      	adds	r7, #116	@ 0x74
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop

0800c588 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c588:	b480      	push	{r7}
 800c58a:	b08d      	sub	sp, #52	@ 0x34
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	7b1b      	ldrb	r3, [r3, #12]
 800c596:	2b00      	cmp	r3, #0
 800c598:	f040 808e 	bne.w	800c6b8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	785b      	ldrb	r3, [r3, #1]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d044      	beq.n	800c62e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	009b      	lsls	r3, r3, #2
 800c5ac:	4413      	add	r3, r2
 800c5ae:	881b      	ldrh	r3, [r3, #0]
 800c5b0:	81bb      	strh	r3, [r7, #12]
 800c5b2:	89bb      	ldrh	r3, [r7, #12]
 800c5b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d01b      	beq.n	800c5f4 <USB_DeactivateEndpoint+0x6c>
 800c5bc:	687a      	ldr	r2, [r7, #4]
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	4413      	add	r3, r2
 800c5c6:	881b      	ldrh	r3, [r3, #0]
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5d2:	817b      	strh	r3, [r7, #10]
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	441a      	add	r2, r3
 800c5de:	897b      	ldrh	r3, [r7, #10]
 800c5e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c5f0:	b29b      	uxth	r3, r3
 800c5f2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c5f4:	687a      	ldr	r2, [r7, #4]
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	009b      	lsls	r3, r3, #2
 800c5fc:	4413      	add	r3, r2
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	b29b      	uxth	r3, r3
 800c602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c606:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c60a:	813b      	strh	r3, [r7, #8]
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	781b      	ldrb	r3, [r3, #0]
 800c612:	009b      	lsls	r3, r3, #2
 800c614:	441a      	add	r2, r3
 800c616:	893b      	ldrh	r3, [r7, #8]
 800c618:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c61c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c620:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c628:	b29b      	uxth	r3, r3
 800c62a:	8013      	strh	r3, [r2, #0]
 800c62c:	e192      	b.n	800c954 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	4413      	add	r3, r2
 800c638:	881b      	ldrh	r3, [r3, #0]
 800c63a:	827b      	strh	r3, [r7, #18]
 800c63c:	8a7b      	ldrh	r3, [r7, #18]
 800c63e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c642:	2b00      	cmp	r3, #0
 800c644:	d01b      	beq.n	800c67e <USB_DeactivateEndpoint+0xf6>
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	009b      	lsls	r3, r3, #2
 800c64e:	4413      	add	r3, r2
 800c650:	881b      	ldrh	r3, [r3, #0]
 800c652:	b29b      	uxth	r3, r3
 800c654:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c658:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c65c:	823b      	strh	r3, [r7, #16]
 800c65e:	687a      	ldr	r2, [r7, #4]
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	441a      	add	r2, r3
 800c668:	8a3b      	ldrh	r3, [r7, #16]
 800c66a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c66e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	4413      	add	r3, r2
 800c688:	881b      	ldrh	r3, [r3, #0]
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c690:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c694:	81fb      	strh	r3, [r7, #14]
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	009b      	lsls	r3, r3, #2
 800c69e:	441a      	add	r2, r3
 800c6a0:	89fb      	ldrh	r3, [r7, #14]
 800c6a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	8013      	strh	r3, [r2, #0]
 800c6b6:	e14d      	b.n	800c954 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	785b      	ldrb	r3, [r3, #1]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	f040 80a5 	bne.w	800c80c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4413      	add	r3, r2
 800c6cc:	881b      	ldrh	r3, [r3, #0]
 800c6ce:	843b      	strh	r3, [r7, #32]
 800c6d0:	8c3b      	ldrh	r3, [r7, #32]
 800c6d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d01b      	beq.n	800c712 <USB_DeactivateEndpoint+0x18a>
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	881b      	ldrh	r3, [r3, #0]
 800c6e6:	b29b      	uxth	r3, r3
 800c6e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6f0:	83fb      	strh	r3, [r7, #30]
 800c6f2:	687a      	ldr	r2, [r7, #4]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	441a      	add	r2, r3
 800c6fc:	8bfb      	ldrh	r3, [r7, #30]
 800c6fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c702:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c706:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c70a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c70e:	b29b      	uxth	r3, r3
 800c710:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	683b      	ldr	r3, [r7, #0]
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	009b      	lsls	r3, r3, #2
 800c71a:	4413      	add	r3, r2
 800c71c:	881b      	ldrh	r3, [r3, #0]
 800c71e:	83bb      	strh	r3, [r7, #28]
 800c720:	8bbb      	ldrh	r3, [r7, #28]
 800c722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c726:	2b00      	cmp	r3, #0
 800c728:	d01b      	beq.n	800c762 <USB_DeactivateEndpoint+0x1da>
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	4413      	add	r3, r2
 800c734:	881b      	ldrh	r3, [r3, #0]
 800c736:	b29b      	uxth	r3, r3
 800c738:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c73c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c740:	837b      	strh	r3, [r7, #26]
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	781b      	ldrb	r3, [r3, #0]
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	441a      	add	r2, r3
 800c74c:	8b7b      	ldrh	r3, [r7, #26]
 800c74e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c752:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c756:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c75a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c75e:	b29b      	uxth	r3, r3
 800c760:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	009b      	lsls	r3, r3, #2
 800c76a:	4413      	add	r3, r2
 800c76c:	881b      	ldrh	r3, [r3, #0]
 800c76e:	b29b      	uxth	r3, r3
 800c770:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c778:	833b      	strh	r3, [r7, #24]
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	441a      	add	r2, r3
 800c784:	8b3b      	ldrh	r3, [r7, #24]
 800c786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c78a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c78e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c792:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c796:	b29b      	uxth	r3, r3
 800c798:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	781b      	ldrb	r3, [r3, #0]
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	4413      	add	r3, r2
 800c7a4:	881b      	ldrh	r3, [r3, #0]
 800c7a6:	b29b      	uxth	r3, r3
 800c7a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c7ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7b0:	82fb      	strh	r3, [r7, #22]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	441a      	add	r2, r3
 800c7bc:	8afb      	ldrh	r3, [r7, #22]
 800c7be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	4413      	add	r3, r2
 800c7dc:	881b      	ldrh	r3, [r3, #0]
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7e8:	82bb      	strh	r3, [r7, #20]
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	683b      	ldr	r3, [r7, #0]
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	009b      	lsls	r3, r3, #2
 800c7f2:	441a      	add	r2, r3
 800c7f4:	8abb      	ldrh	r3, [r7, #20]
 800c7f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c806:	b29b      	uxth	r3, r3
 800c808:	8013      	strh	r3, [r2, #0]
 800c80a:	e0a3      	b.n	800c954 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c80c:	687a      	ldr	r2, [r7, #4]
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	4413      	add	r3, r2
 800c816:	881b      	ldrh	r3, [r3, #0]
 800c818:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c81a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c81c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c820:	2b00      	cmp	r3, #0
 800c822:	d01b      	beq.n	800c85c <USB_DeactivateEndpoint+0x2d4>
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	4413      	add	r3, r2
 800c82e:	881b      	ldrh	r3, [r3, #0]
 800c830:	b29b      	uxth	r3, r3
 800c832:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c83a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	441a      	add	r2, r3
 800c846:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c848:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c84c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c850:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c854:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c858:	b29b      	uxth	r3, r3
 800c85a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	009b      	lsls	r3, r3, #2
 800c864:	4413      	add	r3, r2
 800c866:	881b      	ldrh	r3, [r3, #0]
 800c868:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c86a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c86c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c870:	2b00      	cmp	r3, #0
 800c872:	d01b      	beq.n	800c8ac <USB_DeactivateEndpoint+0x324>
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	009b      	lsls	r3, r3, #2
 800c87c:	4413      	add	r3, r2
 800c87e:	881b      	ldrh	r3, [r3, #0]
 800c880:	b29b      	uxth	r3, r3
 800c882:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c886:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c88a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	781b      	ldrb	r3, [r3, #0]
 800c892:	009b      	lsls	r3, r3, #2
 800c894:	441a      	add	r2, r3
 800c896:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c898:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c89c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8a4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c8a8:	b29b      	uxth	r3, r3
 800c8aa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c8ac:	687a      	ldr	r2, [r7, #4]
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	009b      	lsls	r3, r3, #2
 800c8b4:	4413      	add	r3, r2
 800c8b6:	881b      	ldrh	r3, [r3, #0]
 800c8b8:	b29b      	uxth	r3, r3
 800c8ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8c2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	781b      	ldrb	r3, [r3, #0]
 800c8ca:	009b      	lsls	r3, r3, #2
 800c8cc:	441a      	add	r2, r3
 800c8ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c8d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c8dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c8e4:	687a      	ldr	r2, [r7, #4]
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	4413      	add	r3, r2
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	b29b      	uxth	r3, r3
 800c8f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c8fc:	687a      	ldr	r2, [r7, #4]
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	009b      	lsls	r3, r3, #2
 800c904:	441a      	add	r2, r3
 800c906:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c908:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c90c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c910:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c914:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c918:	b29b      	uxth	r3, r3
 800c91a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	4413      	add	r3, r2
 800c926:	881b      	ldrh	r3, [r3, #0]
 800c928:	b29b      	uxth	r3, r3
 800c92a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c92e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c932:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	441a      	add	r2, r3
 800c93e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c940:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c944:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c948:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c94c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c950:	b29b      	uxth	r3, r3
 800c952:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3734      	adds	r7, #52	@ 0x34
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr

0800c962 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c962:	b580      	push	{r7, lr}
 800c964:	b0c2      	sub	sp, #264	@ 0x108
 800c966:	af00      	add	r7, sp, #0
 800c968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c96c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c970:	6018      	str	r0, [r3, #0]
 800c972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c97a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c97c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	785b      	ldrb	r3, [r3, #1]
 800c988:	2b01      	cmp	r3, #1
 800c98a:	f040 86b7 	bne.w	800d6fc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c98e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	699a      	ldr	r2, [r3, #24]
 800c99a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c99e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	691b      	ldr	r3, [r3, #16]
 800c9a6:	429a      	cmp	r2, r3
 800c9a8:	d908      	bls.n	800c9bc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800c9aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c9ba:	e007      	b.n	800c9cc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c9bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c9cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	7b1b      	ldrb	r3, [r3, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d13a      	bne.n	800ca52 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c9dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	6959      	ldr	r1, [r3, #20]
 800c9e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	88da      	ldrh	r2, [r3, #6]
 800c9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9f8:	b29b      	uxth	r3, r3
 800c9fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c9fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ca02:	6800      	ldr	r0, [r0, #0]
 800ca04:	f001 fc99 	bl	800e33a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ca08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	613b      	str	r3, [r7, #16]
 800ca14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	461a      	mov	r2, r3
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	4413      	add	r3, r2
 800ca2a:	613b      	str	r3, [r7, #16]
 800ca2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	00da      	lsls	r2, r3, #3
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ca42:	60fb      	str	r3, [r7, #12]
 800ca44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	801a      	strh	r2, [r3, #0]
 800ca4e:	f000 be1f 	b.w	800d690 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ca52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	78db      	ldrb	r3, [r3, #3]
 800ca5e:	2b02      	cmp	r3, #2
 800ca60:	f040 8462 	bne.w	800d328 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ca64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	6a1a      	ldr	r2, [r3, #32]
 800ca70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	691b      	ldr	r3, [r3, #16]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	f240 83df 	bls.w	800d240 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ca82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	781b      	ldrb	r3, [r3, #0]
 800ca98:	009b      	lsls	r3, r3, #2
 800ca9a:	4413      	add	r3, r2
 800ca9c:	881b      	ldrh	r3, [r3, #0]
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800caa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caa8:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800caac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cab0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cab4:	681a      	ldr	r2, [r3, #0]
 800cab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	441a      	add	r2, r3
 800cac6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800caca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cace:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cad2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cad6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cada:	b29b      	uxth	r3, r3
 800cadc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cae2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	6a1a      	ldr	r2, [r3, #32]
 800caea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caee:	1ad2      	subs	r2, r2, r3
 800caf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cafc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb04:	681a      	ldr	r2, [r3, #0]
 800cb06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	4413      	add	r3, r2
 800cb16:	881b      	ldrh	r3, [r3, #0]
 800cb18:	b29b      	uxth	r3, r3
 800cb1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	f000 81c7 	beq.w	800ceb2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cb24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	785b      	ldrb	r3, [r3, #1]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d177      	bne.n	800cc30 <USB_EPStartXfer+0x2ce>
 800cb40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb60:	4413      	add	r3, r2
 800cb62:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	00da      	lsls	r2, r3, #3
 800cb72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb74:	4413      	add	r3, r2
 800cb76:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb7e:	881b      	ldrh	r3, [r3, #0]
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb86:	b29a      	uxth	r2, r3
 800cb88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb8a:	801a      	strh	r2, [r3, #0]
 800cb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d10a      	bne.n	800cbaa <USB_EPStartXfer+0x248>
 800cb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb96:	881b      	ldrh	r3, [r3, #0]
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cba2:	b29a      	uxth	r2, r3
 800cba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cba6:	801a      	strh	r2, [r3, #0]
 800cba8:	e067      	b.n	800cc7a <USB_EPStartXfer+0x318>
 800cbaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbae:	2b3e      	cmp	r3, #62	@ 0x3e
 800cbb0:	d81c      	bhi.n	800cbec <USB_EPStartXfer+0x28a>
 800cbb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbb6:	085b      	lsrs	r3, r3, #1
 800cbb8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cbbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbc0:	f003 0301 	and.w	r3, r3, #1
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d004      	beq.n	800cbd2 <USB_EPStartXfer+0x270>
 800cbc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cbcc:	3301      	adds	r3, #1
 800cbce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cbd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd4:	881b      	ldrh	r3, [r3, #0]
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	029b      	lsls	r3, r3, #10
 800cbe0:	b29b      	uxth	r3, r3
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	b29a      	uxth	r2, r3
 800cbe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbe8:	801a      	strh	r2, [r3, #0]
 800cbea:	e046      	b.n	800cc7a <USB_EPStartXfer+0x318>
 800cbec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbf0:	095b      	lsrs	r3, r3, #5
 800cbf2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cbf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbfa:	f003 031f 	and.w	r3, r3, #31
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d104      	bne.n	800cc0c <USB_EPStartXfer+0x2aa>
 800cc02:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cc06:	3b01      	subs	r3, #1
 800cc08:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc0e:	881b      	ldrh	r3, [r3, #0]
 800cc10:	b29a      	uxth	r2, r3
 800cc12:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cc16:	b29b      	uxth	r3, r3
 800cc18:	029b      	lsls	r3, r3, #10
 800cc1a:	b29b      	uxth	r3, r3
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc28:	b29a      	uxth	r2, r3
 800cc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc2c:	801a      	strh	r2, [r3, #0]
 800cc2e:	e024      	b.n	800cc7a <USB_EPStartXfer+0x318>
 800cc30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	785b      	ldrb	r3, [r3, #1]
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d11c      	bne.n	800cc7a <USB_EPStartXfer+0x318>
 800cc40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	461a      	mov	r2, r3
 800cc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc54:	4413      	add	r3, r2
 800cc56:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	00da      	lsls	r2, r3, #3
 800cc66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc68:	4413      	add	r3, r2
 800cc6a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cc6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc74:	b29a      	uxth	r2, r3
 800cc76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cc7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	895b      	ldrh	r3, [r3, #10]
 800cc86:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	6959      	ldr	r1, [r3, #20]
 800cc96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc9a:	b29b      	uxth	r3, r3
 800cc9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cca0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cca4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cca8:	6800      	ldr	r0, [r0, #0]
 800ccaa:	f001 fb46 	bl	800e33a <USB_WritePMA>
            ep->xfer_buff += len;
 800ccae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	695a      	ldr	r2, [r3, #20]
 800ccba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccbe:	441a      	add	r2, r3
 800ccc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	6a1a      	ldr	r2, [r3, #32]
 800ccd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	691b      	ldr	r3, [r3, #16]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d90f      	bls.n	800cd08 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800cce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	6a1a      	ldr	r2, [r3, #32]
 800ccf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccf8:	1ad2      	subs	r2, r2, r3
 800ccfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	621a      	str	r2, [r3, #32]
 800cd06:	e00e      	b.n	800cd26 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800cd08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	6a1b      	ldr	r3, [r3, #32]
 800cd14:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800cd18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	2200      	movs	r2, #0
 800cd24:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cd26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	785b      	ldrb	r3, [r3, #1]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d177      	bne.n	800ce26 <USB_EPStartXfer+0x4c4>
 800cd36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	61bb      	str	r3, [r7, #24]
 800cd42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	461a      	mov	r2, r3
 800cd54:	69bb      	ldr	r3, [r7, #24]
 800cd56:	4413      	add	r3, r2
 800cd58:	61bb      	str	r3, [r7, #24]
 800cd5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	781b      	ldrb	r3, [r3, #0]
 800cd66:	00da      	lsls	r2, r3, #3
 800cd68:	69bb      	ldr	r3, [r7, #24]
 800cd6a:	4413      	add	r3, r2
 800cd6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd70:	617b      	str	r3, [r7, #20]
 800cd72:	697b      	ldr	r3, [r7, #20]
 800cd74:	881b      	ldrh	r3, [r3, #0]
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	801a      	strh	r2, [r3, #0]
 800cd82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d10a      	bne.n	800cda0 <USB_EPStartXfer+0x43e>
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	881b      	ldrh	r3, [r3, #0]
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	801a      	strh	r2, [r3, #0]
 800cd9e:	e06d      	b.n	800ce7c <USB_EPStartXfer+0x51a>
 800cda0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cda4:	2b3e      	cmp	r3, #62	@ 0x3e
 800cda6:	d81c      	bhi.n	800cde2 <USB_EPStartXfer+0x480>
 800cda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdac:	085b      	lsrs	r3, r3, #1
 800cdae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cdb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d004      	beq.n	800cdc8 <USB_EPStartXfer+0x466>
 800cdbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	881b      	ldrh	r3, [r3, #0]
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cdd2:	b29b      	uxth	r3, r3
 800cdd4:	029b      	lsls	r3, r3, #10
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	801a      	strh	r2, [r3, #0]
 800cde0:	e04c      	b.n	800ce7c <USB_EPStartXfer+0x51a>
 800cde2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cde6:	095b      	lsrs	r3, r3, #5
 800cde8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cdec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdf0:	f003 031f 	and.w	r3, r3, #31
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d104      	bne.n	800ce02 <USB_EPStartXfer+0x4a0>
 800cdf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	881b      	ldrh	r3, [r3, #0]
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	029b      	lsls	r3, r3, #10
 800ce10:	b29b      	uxth	r3, r3
 800ce12:	4313      	orrs	r3, r2
 800ce14:	b29b      	uxth	r3, r3
 800ce16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	801a      	strh	r2, [r3, #0]
 800ce24:	e02a      	b.n	800ce7c <USB_EPStartXfer+0x51a>
 800ce26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	785b      	ldrb	r3, [r3, #1]
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	d122      	bne.n	800ce7c <USB_EPStartXfer+0x51a>
 800ce36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	623b      	str	r3, [r7, #32]
 800ce42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	461a      	mov	r2, r3
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	4413      	add	r3, r2
 800ce58:	623b      	str	r3, [r7, #32]
 800ce5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	00da      	lsls	r2, r3, #3
 800ce68:	6a3b      	ldr	r3, [r7, #32]
 800ce6a:	4413      	add	r3, r2
 800ce6c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce70:	61fb      	str	r3, [r7, #28]
 800ce72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce76:	b29a      	uxth	r2, r3
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ce7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	891b      	ldrh	r3, [r3, #8]
 800ce88:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	6959      	ldr	r1, [r3, #20]
 800ce98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cea2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cea6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ceaa:	6800      	ldr	r0, [r0, #0]
 800ceac:	f001 fa45 	bl	800e33a <USB_WritePMA>
 800ceb0:	e3ee      	b.n	800d690 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ceb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ceb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	785b      	ldrb	r3, [r3, #1]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d177      	bne.n	800cfb2 <USB_EPStartXfer+0x650>
 800cec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cece:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ced2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cedc:	b29b      	uxth	r3, r3
 800cede:	461a      	mov	r2, r3
 800cee0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cee2:	4413      	add	r3, r2
 800cee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ceea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	781b      	ldrb	r3, [r3, #0]
 800cef2:	00da      	lsls	r2, r3, #3
 800cef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cef6:	4413      	add	r3, r2
 800cef8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cefc:	647b      	str	r3, [r7, #68]	@ 0x44
 800cefe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf00:	881b      	ldrh	r3, [r3, #0]
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf0c:	801a      	strh	r2, [r3, #0]
 800cf0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d10a      	bne.n	800cf2c <USB_EPStartXfer+0x5ca>
 800cf16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf18:	881b      	ldrh	r3, [r3, #0]
 800cf1a:	b29b      	uxth	r3, r3
 800cf1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf24:	b29a      	uxth	r2, r3
 800cf26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf28:	801a      	strh	r2, [r3, #0]
 800cf2a:	e06d      	b.n	800d008 <USB_EPStartXfer+0x6a6>
 800cf2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf30:	2b3e      	cmp	r3, #62	@ 0x3e
 800cf32:	d81c      	bhi.n	800cf6e <USB_EPStartXfer+0x60c>
 800cf34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf38:	085b      	lsrs	r3, r3, #1
 800cf3a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cf3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf42:	f003 0301 	and.w	r3, r3, #1
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d004      	beq.n	800cf54 <USB_EPStartXfer+0x5f2>
 800cf4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf4e:	3301      	adds	r3, #1
 800cf50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cf54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf56:	881b      	ldrh	r3, [r3, #0]
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	029b      	lsls	r3, r3, #10
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	4313      	orrs	r3, r2
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf6a:	801a      	strh	r2, [r3, #0]
 800cf6c:	e04c      	b.n	800d008 <USB_EPStartXfer+0x6a6>
 800cf6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf72:	095b      	lsrs	r3, r3, #5
 800cf74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cf78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf7c:	f003 031f 	and.w	r3, r3, #31
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d104      	bne.n	800cf8e <USB_EPStartXfer+0x62c>
 800cf84:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cf8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf90:	881b      	ldrh	r3, [r3, #0]
 800cf92:	b29a      	uxth	r2, r3
 800cf94:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf98:	b29b      	uxth	r3, r3
 800cf9a:	029b      	lsls	r3, r3, #10
 800cf9c:	b29b      	uxth	r3, r3
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfaa:	b29a      	uxth	r2, r3
 800cfac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cfae:	801a      	strh	r2, [r3, #0]
 800cfb0:	e02a      	b.n	800d008 <USB_EPStartXfer+0x6a6>
 800cfb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	785b      	ldrb	r3, [r3, #1]
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	d122      	bne.n	800d008 <USB_EPStartXfer+0x6a6>
 800cfc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	653b      	str	r3, [r7, #80]	@ 0x50
 800cfce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfd2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	461a      	mov	r2, r3
 800cfe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfe2:	4413      	add	r3, r2
 800cfe4:	653b      	str	r3, [r7, #80]	@ 0x50
 800cfe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	00da      	lsls	r2, r3, #3
 800cff4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cff6:	4413      	add	r3, r2
 800cff8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d002:	b29a      	uxth	r2, r3
 800d004:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d006:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d00c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	891b      	ldrh	r3, [r3, #8]
 800d014:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d01c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	6959      	ldr	r1, [r3, #20]
 800d024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d028:	b29b      	uxth	r3, r3
 800d02a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d02e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d032:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d036:	6800      	ldr	r0, [r0, #0]
 800d038:	f001 f97f 	bl	800e33a <USB_WritePMA>
            ep->xfer_buff += len;
 800d03c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	695a      	ldr	r2, [r3, #20]
 800d048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d04c:	441a      	add	r2, r3
 800d04e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d05e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	6a1a      	ldr	r2, [r3, #32]
 800d066:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d06a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	429a      	cmp	r2, r3
 800d074:	d90f      	bls.n	800d096 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d07a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	6a1a      	ldr	r2, [r3, #32]
 800d082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d086:	1ad2      	subs	r2, r2, r3
 800d088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d08c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	621a      	str	r2, [r3, #32]
 800d094:	e00e      	b.n	800d0b4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d09a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	6a1b      	ldr	r3, [r3, #32]
 800d0a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d0a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d0b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	785b      	ldrb	r3, [r3, #1]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d177      	bne.n	800d1c0 <USB_EPStartXfer+0x85e>
 800d0d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0ea:	b29b      	uxth	r3, r3
 800d0ec:	461a      	mov	r2, r3
 800d0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0f0:	4413      	add	r3, r2
 800d0f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	00da      	lsls	r2, r3, #3
 800d102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d104:	4413      	add	r3, r2
 800d106:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d10a:	637b      	str	r3, [r7, #52]	@ 0x34
 800d10c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d10e:	881b      	ldrh	r3, [r3, #0]
 800d110:	b29b      	uxth	r3, r3
 800d112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d116:	b29a      	uxth	r2, r3
 800d118:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d11a:	801a      	strh	r2, [r3, #0]
 800d11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d120:	2b00      	cmp	r3, #0
 800d122:	d10a      	bne.n	800d13a <USB_EPStartXfer+0x7d8>
 800d124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d126:	881b      	ldrh	r3, [r3, #0]
 800d128:	b29b      	uxth	r3, r3
 800d12a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d12e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d132:	b29a      	uxth	r2, r3
 800d134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d136:	801a      	strh	r2, [r3, #0]
 800d138:	e067      	b.n	800d20a <USB_EPStartXfer+0x8a8>
 800d13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d13e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d140:	d81c      	bhi.n	800d17c <USB_EPStartXfer+0x81a>
 800d142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d146:	085b      	lsrs	r3, r3, #1
 800d148:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d14c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d150:	f003 0301 	and.w	r3, r3, #1
 800d154:	2b00      	cmp	r3, #0
 800d156:	d004      	beq.n	800d162 <USB_EPStartXfer+0x800>
 800d158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d15c:	3301      	adds	r3, #1
 800d15e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d164:	881b      	ldrh	r3, [r3, #0]
 800d166:	b29a      	uxth	r2, r3
 800d168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d16c:	b29b      	uxth	r3, r3
 800d16e:	029b      	lsls	r3, r3, #10
 800d170:	b29b      	uxth	r3, r3
 800d172:	4313      	orrs	r3, r2
 800d174:	b29a      	uxth	r2, r3
 800d176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d178:	801a      	strh	r2, [r3, #0]
 800d17a:	e046      	b.n	800d20a <USB_EPStartXfer+0x8a8>
 800d17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d180:	095b      	lsrs	r3, r3, #5
 800d182:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d18a:	f003 031f 	and.w	r3, r3, #31
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d104      	bne.n	800d19c <USB_EPStartXfer+0x83a>
 800d192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d196:	3b01      	subs	r3, #1
 800d198:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d19c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d19e:	881b      	ldrh	r3, [r3, #0]
 800d1a0:	b29a      	uxth	r2, r3
 800d1a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	029b      	lsls	r3, r3, #10
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	4313      	orrs	r3, r2
 800d1ae:	b29b      	uxth	r3, r3
 800d1b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d1b8:	b29a      	uxth	r2, r3
 800d1ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1bc:	801a      	strh	r2, [r3, #0]
 800d1be:	e024      	b.n	800d20a <USB_EPStartXfer+0x8a8>
 800d1c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	785b      	ldrb	r3, [r3, #1]
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d11c      	bne.n	800d20a <USB_EPStartXfer+0x8a8>
 800d1d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1e4:	4413      	add	r3, r2
 800d1e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	781b      	ldrb	r3, [r3, #0]
 800d1f4:	00da      	lsls	r2, r3, #3
 800d1f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1f8:	4413      	add	r3, r2
 800d1fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d204:	b29a      	uxth	r2, r3
 800d206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d208:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d20a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d20e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	895b      	ldrh	r3, [r3, #10]
 800d216:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d21a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d21e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	6959      	ldr	r1, [r3, #20]
 800d226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d230:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d234:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d238:	6800      	ldr	r0, [r0, #0]
 800d23a:	f001 f87e 	bl	800e33a <USB_WritePMA>
 800d23e:	e227      	b.n	800d690 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	6a1b      	ldr	r3, [r3, #32]
 800d24c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d254:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d258:	681a      	ldr	r2, [r3, #0]
 800d25a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d25e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	4413      	add	r3, r2
 800d26a:	881b      	ldrh	r3, [r3, #0]
 800d26c:	b29b      	uxth	r3, r3
 800d26e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d276:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d27a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d27e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d282:	681a      	ldr	r2, [r3, #0]
 800d284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	441a      	add	r2, r3
 800d294:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d298:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d29c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d2a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d2a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d2ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d2b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d2cc:	4413      	add	r3, r2
 800d2ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d2d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	00da      	lsls	r2, r3, #3
 800d2de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d2e0:	4413      	add	r3, r2
 800d2e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d2e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2ec:	b29a      	uxth	r2, r3
 800d2ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2f0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d2f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	891b      	ldrh	r3, [r3, #8]
 800d2fe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	6959      	ldr	r1, [r3, #20]
 800d30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d312:	b29b      	uxth	r3, r3
 800d314:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d318:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d31c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d320:	6800      	ldr	r0, [r0, #0]
 800d322:	f001 f80a 	bl	800e33a <USB_WritePMA>
 800d326:	e1b3      	b.n	800d690 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d32c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	6a1a      	ldr	r2, [r3, #32]
 800d334:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d338:	1ad2      	subs	r2, r2, r3
 800d33a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d33e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d346:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d34a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d34e:	681a      	ldr	r2, [r3, #0]
 800d350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	4413      	add	r3, r2
 800d360:	881b      	ldrh	r3, [r3, #0]
 800d362:	b29b      	uxth	r3, r3
 800d364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f000 80c6 	beq.w	800d4fa <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d36e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	673b      	str	r3, [r7, #112]	@ 0x70
 800d37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d37e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	785b      	ldrb	r3, [r3, #1]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d177      	bne.n	800d47a <USB_EPStartXfer+0xb18>
 800d38a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d38e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d396:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d39a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3aa:	4413      	add	r3, r2
 800d3ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d3ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	00da      	lsls	r2, r3, #3
 800d3bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3be:	4413      	add	r3, r2
 800d3c0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d3c4:	667b      	str	r3, [r7, #100]	@ 0x64
 800d3c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3c8:	881b      	ldrh	r3, [r3, #0]
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3d4:	801a      	strh	r2, [r3, #0]
 800d3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10a      	bne.n	800d3f4 <USB_EPStartXfer+0xa92>
 800d3de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3e0:	881b      	ldrh	r3, [r3, #0]
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3ec:	b29a      	uxth	r2, r3
 800d3ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3f0:	801a      	strh	r2, [r3, #0]
 800d3f2:	e067      	b.n	800d4c4 <USB_EPStartXfer+0xb62>
 800d3f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3f8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d3fa:	d81c      	bhi.n	800d436 <USB_EPStartXfer+0xad4>
 800d3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d400:	085b      	lsrs	r3, r3, #1
 800d402:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d406:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d40a:	f003 0301 	and.w	r3, r3, #1
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d004      	beq.n	800d41c <USB_EPStartXfer+0xaba>
 800d412:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d416:	3301      	adds	r3, #1
 800d418:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d41c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d41e:	881b      	ldrh	r3, [r3, #0]
 800d420:	b29a      	uxth	r2, r3
 800d422:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d426:	b29b      	uxth	r3, r3
 800d428:	029b      	lsls	r3, r3, #10
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	4313      	orrs	r3, r2
 800d42e:	b29a      	uxth	r2, r3
 800d430:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d432:	801a      	strh	r2, [r3, #0]
 800d434:	e046      	b.n	800d4c4 <USB_EPStartXfer+0xb62>
 800d436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d43a:	095b      	lsrs	r3, r3, #5
 800d43c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d440:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d444:	f003 031f 	and.w	r3, r3, #31
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d104      	bne.n	800d456 <USB_EPStartXfer+0xaf4>
 800d44c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d450:	3b01      	subs	r3, #1
 800d452:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d456:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d458:	881b      	ldrh	r3, [r3, #0]
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d460:	b29b      	uxth	r3, r3
 800d462:	029b      	lsls	r3, r3, #10
 800d464:	b29b      	uxth	r3, r3
 800d466:	4313      	orrs	r3, r2
 800d468:	b29b      	uxth	r3, r3
 800d46a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d46e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d472:	b29a      	uxth	r2, r3
 800d474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d476:	801a      	strh	r2, [r3, #0]
 800d478:	e024      	b.n	800d4c4 <USB_EPStartXfer+0xb62>
 800d47a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d47e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	785b      	ldrb	r3, [r3, #1]
 800d486:	2b01      	cmp	r3, #1
 800d488:	d11c      	bne.n	800d4c4 <USB_EPStartXfer+0xb62>
 800d48a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d48e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d498:	b29b      	uxth	r3, r3
 800d49a:	461a      	mov	r2, r3
 800d49c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d49e:	4413      	add	r3, r2
 800d4a0:	673b      	str	r3, [r7, #112]	@ 0x70
 800d4a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	00da      	lsls	r2, r3, #3
 800d4b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4b2:	4413      	add	r3, r2
 800d4b4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d4b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4be:	b29a      	uxth	r2, r3
 800d4c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d4c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	895b      	ldrh	r3, [r3, #10]
 800d4d0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d4d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	6959      	ldr	r1, [r3, #20]
 800d4e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4e4:	b29b      	uxth	r3, r3
 800d4e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d4ea:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d4ee:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d4f2:	6800      	ldr	r0, [r0, #0]
 800d4f4:	f000 ff21 	bl	800e33a <USB_WritePMA>
 800d4f8:	e0ca      	b.n	800d690 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d4fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	785b      	ldrb	r3, [r3, #1]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d177      	bne.n	800d5fa <USB_EPStartXfer+0xc98>
 800d50a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d50e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d51a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d524:	b29b      	uxth	r3, r3
 800d526:	461a      	mov	r2, r3
 800d528:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d52a:	4413      	add	r3, r2
 800d52c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d52e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	781b      	ldrb	r3, [r3, #0]
 800d53a:	00da      	lsls	r2, r3, #3
 800d53c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d53e:	4413      	add	r3, r2
 800d540:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d544:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d546:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d548:	881b      	ldrh	r3, [r3, #0]
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d550:	b29a      	uxth	r2, r3
 800d552:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d554:	801a      	strh	r2, [r3, #0]
 800d556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d10a      	bne.n	800d574 <USB_EPStartXfer+0xc12>
 800d55e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d560:	881b      	ldrh	r3, [r3, #0]
 800d562:	b29b      	uxth	r3, r3
 800d564:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d568:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d56c:	b29a      	uxth	r2, r3
 800d56e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d570:	801a      	strh	r2, [r3, #0]
 800d572:	e073      	b.n	800d65c <USB_EPStartXfer+0xcfa>
 800d574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d578:	2b3e      	cmp	r3, #62	@ 0x3e
 800d57a:	d81c      	bhi.n	800d5b6 <USB_EPStartXfer+0xc54>
 800d57c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d580:	085b      	lsrs	r3, r3, #1
 800d582:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d58a:	f003 0301 	and.w	r3, r3, #1
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d004      	beq.n	800d59c <USB_EPStartXfer+0xc3a>
 800d592:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d596:	3301      	adds	r3, #1
 800d598:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d59c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d59e:	881b      	ldrh	r3, [r3, #0]
 800d5a0:	b29a      	uxth	r2, r3
 800d5a2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	029b      	lsls	r3, r3, #10
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	b29a      	uxth	r2, r3
 800d5b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5b2:	801a      	strh	r2, [r3, #0]
 800d5b4:	e052      	b.n	800d65c <USB_EPStartXfer+0xcfa>
 800d5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5ba:	095b      	lsrs	r3, r3, #5
 800d5bc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5c4:	f003 031f 	and.w	r3, r3, #31
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d104      	bne.n	800d5d6 <USB_EPStartXfer+0xc74>
 800d5cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d5d0:	3b01      	subs	r3, #1
 800d5d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d5d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5d8:	881b      	ldrh	r3, [r3, #0]
 800d5da:	b29a      	uxth	r2, r3
 800d5dc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	029b      	lsls	r3, r3, #10
 800d5e4:	b29b      	uxth	r3, r3
 800d5e6:	4313      	orrs	r3, r2
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5f6:	801a      	strh	r2, [r3, #0]
 800d5f8:	e030      	b.n	800d65c <USB_EPStartXfer+0xcfa>
 800d5fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	785b      	ldrb	r3, [r3, #1]
 800d606:	2b01      	cmp	r3, #1
 800d608:	d128      	bne.n	800d65c <USB_EPStartXfer+0xcfa>
 800d60a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d60e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d61c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d626:	b29b      	uxth	r3, r3
 800d628:	461a      	mov	r2, r3
 800d62a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d62e:	4413      	add	r3, r2
 800d630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	781b      	ldrb	r3, [r3, #0]
 800d640:	00da      	lsls	r2, r3, #3
 800d642:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d646:	4413      	add	r3, r2
 800d648:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d64c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d654:	b29a      	uxth	r2, r3
 800d656:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d65a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d65c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	891b      	ldrh	r3, [r3, #8]
 800d668:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d66c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	6959      	ldr	r1, [r3, #20]
 800d678:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d682:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d686:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d68a:	6800      	ldr	r0, [r0, #0]
 800d68c:	f000 fe55 	bl	800e33a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d694:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d698:	681a      	ldr	r2, [r3, #0]
 800d69a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d69e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	4413      	add	r3, r2
 800d6aa:	881b      	ldrh	r3, [r3, #0]
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d6b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6b6:	817b      	strh	r3, [r7, #10]
 800d6b8:	897b      	ldrh	r3, [r7, #10]
 800d6ba:	f083 0310 	eor.w	r3, r3, #16
 800d6be:	817b      	strh	r3, [r7, #10]
 800d6c0:	897b      	ldrh	r3, [r7, #10]
 800d6c2:	f083 0320 	eor.w	r3, r3, #32
 800d6c6:	817b      	strh	r3, [r7, #10]
 800d6c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	009b      	lsls	r3, r3, #2
 800d6e0:	441a      	add	r2, r3
 800d6e2:	897b      	ldrh	r3, [r7, #10]
 800d6e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	8013      	strh	r3, [r2, #0]
 800d6f8:	f000 bcdf 	b.w	800e0ba <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d6fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	7b1b      	ldrb	r3, [r3, #12]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	f040 80bc 	bne.w	800d886 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d70e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d712:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	699a      	ldr	r2, [r3, #24]
 800d71a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d71e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	691b      	ldr	r3, [r3, #16]
 800d726:	429a      	cmp	r2, r3
 800d728:	d917      	bls.n	800d75a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d72a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d72e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	691b      	ldr	r3, [r3, #16]
 800d736:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800d73a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d73e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	699a      	ldr	r2, [r3, #24]
 800d746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d74a:	1ad2      	subs	r2, r2, r3
 800d74c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	619a      	str	r2, [r3, #24]
 800d758:	e00e      	b.n	800d778 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d75a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d75e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	699b      	ldr	r3, [r3, #24]
 800d766:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800d76a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d76e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2200      	movs	r2, #0
 800d776:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d778:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d77c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d78a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d794:	b29b      	uxth	r3, r3
 800d796:	461a      	mov	r2, r3
 800d798:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d79c:	4413      	add	r3, r2
 800d79e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d7a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	781b      	ldrb	r3, [r3, #0]
 800d7ae:	00da      	lsls	r2, r3, #3
 800d7b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d7b4:	4413      	add	r3, r2
 800d7b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d7ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d7be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7c2:	881b      	ldrh	r3, [r3, #0]
 800d7c4:	b29b      	uxth	r3, r3
 800d7c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d7ca:	b29a      	uxth	r2, r3
 800d7cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7d0:	801a      	strh	r2, [r3, #0]
 800d7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d10d      	bne.n	800d7f6 <USB_EPStartXfer+0xe94>
 800d7da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7de:	881b      	ldrh	r3, [r3, #0]
 800d7e0:	b29b      	uxth	r3, r3
 800d7e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7f0:	801a      	strh	r2, [r3, #0]
 800d7f2:	f000 bc28 	b.w	800e046 <USB_EPStartXfer+0x16e4>
 800d7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7fa:	2b3e      	cmp	r3, #62	@ 0x3e
 800d7fc:	d81f      	bhi.n	800d83e <USB_EPStartXfer+0xedc>
 800d7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d802:	085b      	lsrs	r3, r3, #1
 800d804:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d80c:	f003 0301 	and.w	r3, r3, #1
 800d810:	2b00      	cmp	r3, #0
 800d812:	d004      	beq.n	800d81e <USB_EPStartXfer+0xebc>
 800d814:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d818:	3301      	adds	r3, #1
 800d81a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d81e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d822:	881b      	ldrh	r3, [r3, #0]
 800d824:	b29a      	uxth	r2, r3
 800d826:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	029b      	lsls	r3, r3, #10
 800d82e:	b29b      	uxth	r3, r3
 800d830:	4313      	orrs	r3, r2
 800d832:	b29a      	uxth	r2, r3
 800d834:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d838:	801a      	strh	r2, [r3, #0]
 800d83a:	f000 bc04 	b.w	800e046 <USB_EPStartXfer+0x16e4>
 800d83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d842:	095b      	lsrs	r3, r3, #5
 800d844:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d848:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d84c:	f003 031f 	and.w	r3, r3, #31
 800d850:	2b00      	cmp	r3, #0
 800d852:	d104      	bne.n	800d85e <USB_EPStartXfer+0xefc>
 800d854:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d858:	3b01      	subs	r3, #1
 800d85a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d85e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d862:	881b      	ldrh	r3, [r3, #0]
 800d864:	b29a      	uxth	r2, r3
 800d866:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	029b      	lsls	r3, r3, #10
 800d86e:	b29b      	uxth	r3, r3
 800d870:	4313      	orrs	r3, r2
 800d872:	b29b      	uxth	r3, r3
 800d874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d87c:	b29a      	uxth	r2, r3
 800d87e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d882:	801a      	strh	r2, [r3, #0]
 800d884:	e3df      	b.n	800e046 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d886:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d88a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	78db      	ldrb	r3, [r3, #3]
 800d892:	2b02      	cmp	r3, #2
 800d894:	f040 8218 	bne.w	800dcc8 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d89c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	785b      	ldrb	r3, [r3, #1]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f040 809d 	bne.w	800d9e4 <USB_EPStartXfer+0x1082>
 800d8aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d8b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d8ce:	4413      	add	r3, r2
 800d8d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d8d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	781b      	ldrb	r3, [r3, #0]
 800d8e0:	00da      	lsls	r2, r3, #3
 800d8e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d8e6:	4413      	add	r3, r2
 800d8e8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d8ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d8f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8f4:	881b      	ldrh	r3, [r3, #0]
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d8fc:	b29a      	uxth	r2, r3
 800d8fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d902:	801a      	strh	r2, [r3, #0]
 800d904:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d908:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	691b      	ldr	r3, [r3, #16]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d10c      	bne.n	800d92e <USB_EPStartXfer+0xfcc>
 800d914:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d918:	881b      	ldrh	r3, [r3, #0]
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d920:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d924:	b29a      	uxth	r2, r3
 800d926:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d92a:	801a      	strh	r2, [r3, #0]
 800d92c:	e08f      	b.n	800da4e <USB_EPStartXfer+0x10ec>
 800d92e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	691b      	ldr	r3, [r3, #16]
 800d93a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d93c:	d826      	bhi.n	800d98c <USB_EPStartXfer+0x102a>
 800d93e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	691b      	ldr	r3, [r3, #16]
 800d94a:	085b      	lsrs	r3, r3, #1
 800d94c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d950:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	691b      	ldr	r3, [r3, #16]
 800d95c:	f003 0301 	and.w	r3, r3, #1
 800d960:	2b00      	cmp	r3, #0
 800d962:	d004      	beq.n	800d96e <USB_EPStartXfer+0x100c>
 800d964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d968:	3301      	adds	r3, #1
 800d96a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d96e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d972:	881b      	ldrh	r3, [r3, #0]
 800d974:	b29a      	uxth	r2, r3
 800d976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	029b      	lsls	r3, r3, #10
 800d97e:	b29b      	uxth	r3, r3
 800d980:	4313      	orrs	r3, r2
 800d982:	b29a      	uxth	r2, r3
 800d984:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d988:	801a      	strh	r2, [r3, #0]
 800d98a:	e060      	b.n	800da4e <USB_EPStartXfer+0x10ec>
 800d98c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	691b      	ldr	r3, [r3, #16]
 800d998:	095b      	lsrs	r3, r3, #5
 800d99a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d99e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	691b      	ldr	r3, [r3, #16]
 800d9aa:	f003 031f 	and.w	r3, r3, #31
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d104      	bne.n	800d9bc <USB_EPStartXfer+0x105a>
 800d9b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9b6:	3b01      	subs	r3, #1
 800d9b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d9bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9c0:	881b      	ldrh	r3, [r3, #0]
 800d9c2:	b29a      	uxth	r2, r3
 800d9c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9c8:	b29b      	uxth	r3, r3
 800d9ca:	029b      	lsls	r3, r3, #10
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9da:	b29a      	uxth	r2, r3
 800d9dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9e0:	801a      	strh	r2, [r3, #0]
 800d9e2:	e034      	b.n	800da4e <USB_EPStartXfer+0x10ec>
 800d9e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	785b      	ldrb	r3, [r3, #1]
 800d9f0:	2b01      	cmp	r3, #1
 800d9f2:	d12c      	bne.n	800da4e <USB_EPStartXfer+0x10ec>
 800d9f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800da02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da10:	b29b      	uxth	r3, r3
 800da12:	461a      	mov	r2, r3
 800da14:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800da18:	4413      	add	r3, r2
 800da1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800da1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	781b      	ldrb	r3, [r3, #0]
 800da2a:	00da      	lsls	r2, r3, #3
 800da2c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800da30:	4413      	add	r3, r2
 800da32:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800da36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800da3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	691b      	ldr	r3, [r3, #16]
 800da46:	b29a      	uxth	r2, r3
 800da48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800da4c:	801a      	strh	r2, [r3, #0]
 800da4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800da5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	785b      	ldrb	r3, [r3, #1]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	f040 809d 	bne.w	800dba8 <USB_EPStartXfer+0x1246>
 800da6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	461a      	mov	r2, r3
 800da8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800da92:	4413      	add	r3, r2
 800da94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	00da      	lsls	r2, r3, #3
 800daa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800daaa:	4413      	add	r3, r2
 800daac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dab0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800dab4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dab8:	881b      	ldrh	r3, [r3, #0]
 800daba:	b29b      	uxth	r3, r3
 800dabc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dac0:	b29a      	uxth	r2, r3
 800dac2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dac6:	801a      	strh	r2, [r3, #0]
 800dac8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dacc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	691b      	ldr	r3, [r3, #16]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d10c      	bne.n	800daf2 <USB_EPStartXfer+0x1190>
 800dad8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dadc:	881b      	ldrh	r3, [r3, #0]
 800dade:	b29b      	uxth	r3, r3
 800dae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dae8:	b29a      	uxth	r2, r3
 800daea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800daee:	801a      	strh	r2, [r3, #0]
 800daf0:	e088      	b.n	800dc04 <USB_EPStartXfer+0x12a2>
 800daf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	691b      	ldr	r3, [r3, #16]
 800dafe:	2b3e      	cmp	r3, #62	@ 0x3e
 800db00:	d826      	bhi.n	800db50 <USB_EPStartXfer+0x11ee>
 800db02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	691b      	ldr	r3, [r3, #16]
 800db0e:	085b      	lsrs	r3, r3, #1
 800db10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800db14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	691b      	ldr	r3, [r3, #16]
 800db20:	f003 0301 	and.w	r3, r3, #1
 800db24:	2b00      	cmp	r3, #0
 800db26:	d004      	beq.n	800db32 <USB_EPStartXfer+0x11d0>
 800db28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db2c:	3301      	adds	r3, #1
 800db2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800db32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db36:	881b      	ldrh	r3, [r3, #0]
 800db38:	b29a      	uxth	r2, r3
 800db3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db3e:	b29b      	uxth	r3, r3
 800db40:	029b      	lsls	r3, r3, #10
 800db42:	b29b      	uxth	r3, r3
 800db44:	4313      	orrs	r3, r2
 800db46:	b29a      	uxth	r2, r3
 800db48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db4c:	801a      	strh	r2, [r3, #0]
 800db4e:	e059      	b.n	800dc04 <USB_EPStartXfer+0x12a2>
 800db50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	691b      	ldr	r3, [r3, #16]
 800db5c:	095b      	lsrs	r3, r3, #5
 800db5e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800db62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	691b      	ldr	r3, [r3, #16]
 800db6e:	f003 031f 	and.w	r3, r3, #31
 800db72:	2b00      	cmp	r3, #0
 800db74:	d104      	bne.n	800db80 <USB_EPStartXfer+0x121e>
 800db76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db7a:	3b01      	subs	r3, #1
 800db7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800db80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db84:	881b      	ldrh	r3, [r3, #0]
 800db86:	b29a      	uxth	r2, r3
 800db88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	029b      	lsls	r3, r3, #10
 800db90:	b29b      	uxth	r3, r3
 800db92:	4313      	orrs	r3, r2
 800db94:	b29b      	uxth	r3, r3
 800db96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db9e:	b29a      	uxth	r2, r3
 800dba0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dba4:	801a      	strh	r2, [r3, #0]
 800dba6:	e02d      	b.n	800dc04 <USB_EPStartXfer+0x12a2>
 800dba8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	785b      	ldrb	r3, [r3, #1]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d125      	bne.n	800dc04 <USB_EPStartXfer+0x12a2>
 800dbb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbc6:	b29b      	uxth	r3, r3
 800dbc8:	461a      	mov	r2, r3
 800dbca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dbce:	4413      	add	r3, r2
 800dbd0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dbd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	00da      	lsls	r2, r3, #3
 800dbe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dbe6:	4413      	add	r3, r2
 800dbe8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dbec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dbf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbf4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	691b      	ldr	r3, [r3, #16]
 800dbfc:	b29a      	uxth	r2, r3
 800dbfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dc02:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800dc04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	69db      	ldr	r3, [r3, #28]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	f000 8218 	beq.w	800e046 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800dc16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc1e:	681a      	ldr	r2, [r3, #0]
 800dc20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	4413      	add	r3, r2
 800dc30:	881b      	ldrh	r3, [r3, #0]
 800dc32:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dc36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d005      	beq.n	800dc4e <USB_EPStartXfer+0x12ec>
 800dc42:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d10d      	bne.n	800dc6a <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dc4e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	f040 81f5 	bne.w	800e046 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dc5c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f040 81ee 	bne.w	800e046 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800dc6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc72:	681a      	ldr	r2, [r3, #0]
 800dc74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	4413      	add	r3, r2
 800dc84:	881b      	ldrh	r3, [r3, #0]
 800dc86:	b29b      	uxth	r3, r3
 800dc88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc90:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800dc94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	441a      	add	r2, r3
 800dcae:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800dcb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dcb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dcba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dcbe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	8013      	strh	r3, [r2, #0]
 800dcc6:	e1be      	b.n	800e046 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800dcc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dccc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	78db      	ldrb	r3, [r3, #3]
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	f040 81b4 	bne.w	800e042 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800dcda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	699a      	ldr	r2, [r3, #24]
 800dce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	691b      	ldr	r3, [r3, #16]
 800dcf2:	429a      	cmp	r2, r3
 800dcf4:	d917      	bls.n	800dd26 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800dcf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	691b      	ldr	r3, [r3, #16]
 800dd02:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800dd06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	699a      	ldr	r2, [r3, #24]
 800dd12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd16:	1ad2      	subs	r2, r2, r3
 800dd18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	619a      	str	r2, [r3, #24]
 800dd24:	e00e      	b.n	800dd44 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800dd26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	699b      	ldr	r3, [r3, #24]
 800dd32:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800dd36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	2200      	movs	r2, #0
 800dd42:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800dd44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	785b      	ldrb	r3, [r3, #1]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	f040 8085 	bne.w	800de60 <USB_EPStartXfer+0x14fe>
 800dd56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dd64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	461a      	mov	r2, r3
 800dd76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dd7a:	4413      	add	r3, r2
 800dd7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dd80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	00da      	lsls	r2, r3, #3
 800dd8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dd92:	4413      	add	r3, r2
 800dd94:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dd98:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dd9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dda0:	881b      	ldrh	r3, [r3, #0]
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dda8:	b29a      	uxth	r2, r3
 800ddaa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ddae:	801a      	strh	r2, [r3, #0]
 800ddb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d10c      	bne.n	800ddd2 <USB_EPStartXfer+0x1470>
 800ddb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ddbc:	881b      	ldrh	r3, [r3, #0]
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddc8:	b29a      	uxth	r2, r3
 800ddca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ddce:	801a      	strh	r2, [r3, #0]
 800ddd0:	e077      	b.n	800dec2 <USB_EPStartXfer+0x1560>
 800ddd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddd6:	2b3e      	cmp	r3, #62	@ 0x3e
 800ddd8:	d81e      	bhi.n	800de18 <USB_EPStartXfer+0x14b6>
 800ddda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddde:	085b      	lsrs	r3, r3, #1
 800dde0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dde4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dde8:	f003 0301 	and.w	r3, r3, #1
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d004      	beq.n	800ddfa <USB_EPStartXfer+0x1498>
 800ddf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ddfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ddfe:	881b      	ldrh	r3, [r3, #0]
 800de00:	b29a      	uxth	r2, r3
 800de02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de06:	b29b      	uxth	r3, r3
 800de08:	029b      	lsls	r3, r3, #10
 800de0a:	b29b      	uxth	r3, r3
 800de0c:	4313      	orrs	r3, r2
 800de0e:	b29a      	uxth	r2, r3
 800de10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800de14:	801a      	strh	r2, [r3, #0]
 800de16:	e054      	b.n	800dec2 <USB_EPStartXfer+0x1560>
 800de18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de1c:	095b      	lsrs	r3, r3, #5
 800de1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800de22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de26:	f003 031f 	and.w	r3, r3, #31
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d104      	bne.n	800de38 <USB_EPStartXfer+0x14d6>
 800de2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de32:	3b01      	subs	r3, #1
 800de34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800de38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800de3c:	881b      	ldrh	r3, [r3, #0]
 800de3e:	b29a      	uxth	r2, r3
 800de40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de44:	b29b      	uxth	r3, r3
 800de46:	029b      	lsls	r3, r3, #10
 800de48:	b29b      	uxth	r3, r3
 800de4a:	4313      	orrs	r3, r2
 800de4c:	b29b      	uxth	r3, r3
 800de4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de56:	b29a      	uxth	r2, r3
 800de58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800de5c:	801a      	strh	r2, [r3, #0]
 800de5e:	e030      	b.n	800dec2 <USB_EPStartXfer+0x1560>
 800de60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	785b      	ldrb	r3, [r3, #1]
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	d128      	bne.n	800dec2 <USB_EPStartXfer+0x1560>
 800de70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800de7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	461a      	mov	r2, r3
 800de90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de94:	4413      	add	r3, r2
 800de96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800de9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	00da      	lsls	r2, r3, #3
 800dea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800deac:	4413      	add	r3, r2
 800deae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800deb2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800deb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deba:	b29a      	uxth	r2, r3
 800debc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800dec0:	801a      	strh	r2, [r3, #0]
 800dec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ded0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ded4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	785b      	ldrb	r3, [r3, #1]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	f040 8085 	bne.w	800dfec <USB_EPStartXfer+0x168a>
 800dee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dee6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800def0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800def4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800defe:	b29b      	uxth	r3, r3
 800df00:	461a      	mov	r2, r3
 800df02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800df06:	4413      	add	r3, r2
 800df08:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800df0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	00da      	lsls	r2, r3, #3
 800df1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800df1e:	4413      	add	r3, r2
 800df20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800df24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800df28:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df2c:	881b      	ldrh	r3, [r3, #0]
 800df2e:	b29b      	uxth	r3, r3
 800df30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df34:	b29a      	uxth	r2, r3
 800df36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df3a:	801a      	strh	r2, [r3, #0]
 800df3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df40:	2b00      	cmp	r3, #0
 800df42:	d10c      	bne.n	800df5e <USB_EPStartXfer+0x15fc>
 800df44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df48:	881b      	ldrh	r3, [r3, #0]
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df54:	b29a      	uxth	r2, r3
 800df56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df5a:	801a      	strh	r2, [r3, #0]
 800df5c:	e073      	b.n	800e046 <USB_EPStartXfer+0x16e4>
 800df5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df62:	2b3e      	cmp	r3, #62	@ 0x3e
 800df64:	d81e      	bhi.n	800dfa4 <USB_EPStartXfer+0x1642>
 800df66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df6a:	085b      	lsrs	r3, r3, #1
 800df6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df74:	f003 0301 	and.w	r3, r3, #1
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d004      	beq.n	800df86 <USB_EPStartXfer+0x1624>
 800df7c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df80:	3301      	adds	r3, #1
 800df82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df8a:	881b      	ldrh	r3, [r3, #0]
 800df8c:	b29a      	uxth	r2, r3
 800df8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df92:	b29b      	uxth	r3, r3
 800df94:	029b      	lsls	r3, r3, #10
 800df96:	b29b      	uxth	r3, r3
 800df98:	4313      	orrs	r3, r2
 800df9a:	b29a      	uxth	r2, r3
 800df9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dfa0:	801a      	strh	r2, [r3, #0]
 800dfa2:	e050      	b.n	800e046 <USB_EPStartXfer+0x16e4>
 800dfa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfa8:	095b      	lsrs	r3, r3, #5
 800dfaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dfae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfb2:	f003 031f 	and.w	r3, r3, #31
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d104      	bne.n	800dfc4 <USB_EPStartXfer+0x1662>
 800dfba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dfbe:	3b01      	subs	r3, #1
 800dfc0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dfc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dfc8:	881b      	ldrh	r3, [r3, #0]
 800dfca:	b29a      	uxth	r2, r3
 800dfcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	029b      	lsls	r3, r3, #10
 800dfd4:	b29b      	uxth	r3, r3
 800dfd6:	4313      	orrs	r3, r2
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dfde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dfe2:	b29a      	uxth	r2, r3
 800dfe4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dfe8:	801a      	strh	r2, [r3, #0]
 800dfea:	e02c      	b.n	800e046 <USB_EPStartXfer+0x16e4>
 800dfec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dff0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	785b      	ldrb	r3, [r3, #1]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d124      	bne.n	800e046 <USB_EPStartXfer+0x16e4>
 800dffc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	461a      	mov	r2, r3
 800e00e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e012:	4413      	add	r3, r2
 800e014:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e01c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	00da      	lsls	r2, r3, #3
 800e026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e02a:	4413      	add	r3, r2
 800e02c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e030:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e034:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e038:	b29a      	uxth	r2, r3
 800e03a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e03e:	801a      	strh	r2, [r3, #0]
 800e040:	e001      	b.n	800e046 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800e042:	2301      	movs	r3, #1
 800e044:	e03a      	b.n	800e0bc <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e04a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e054:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	4413      	add	r3, r2
 800e060:	881b      	ldrh	r3, [r3, #0]
 800e062:	b29b      	uxth	r3, r3
 800e064:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e068:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e06c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e070:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e074:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e078:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e07c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e080:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e084:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e08c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	441a      	add	r2, r3
 800e0a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e0a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0b6:	b29b      	uxth	r3, r3
 800e0b8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e0ba:	2300      	movs	r3, #0
}
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}

0800e0c6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e0c6:	b480      	push	{r7}
 800e0c8:	b085      	sub	sp, #20
 800e0ca:	af00      	add	r7, sp, #0
 800e0cc:	6078      	str	r0, [r7, #4]
 800e0ce:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	785b      	ldrb	r3, [r3, #1]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d020      	beq.n	800e11a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	881b      	ldrh	r3, [r3, #0]
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e0ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0ee:	81bb      	strh	r3, [r7, #12]
 800e0f0:	89bb      	ldrh	r3, [r7, #12]
 800e0f2:	f083 0310 	eor.w	r3, r3, #16
 800e0f6:	81bb      	strh	r3, [r7, #12]
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	781b      	ldrb	r3, [r3, #0]
 800e0fe:	009b      	lsls	r3, r3, #2
 800e100:	441a      	add	r2, r3
 800e102:	89bb      	ldrh	r3, [r7, #12]
 800e104:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e108:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e10c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e110:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e114:	b29b      	uxth	r3, r3
 800e116:	8013      	strh	r3, [r2, #0]
 800e118:	e01f      	b.n	800e15a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	009b      	lsls	r3, r3, #2
 800e122:	4413      	add	r3, r2
 800e124:	881b      	ldrh	r3, [r3, #0]
 800e126:	b29b      	uxth	r3, r3
 800e128:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e12c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e130:	81fb      	strh	r3, [r7, #14]
 800e132:	89fb      	ldrh	r3, [r7, #14]
 800e134:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e138:	81fb      	strh	r3, [r7, #14]
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	441a      	add	r2, r3
 800e144:	89fb      	ldrh	r3, [r7, #14]
 800e146:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e14a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e14e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e152:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e156:	b29b      	uxth	r3, r3
 800e158:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e15a:	2300      	movs	r3, #0
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	3714      	adds	r7, #20
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e168:	b480      	push	{r7}
 800e16a:	b087      	sub	sp, #28
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	7b1b      	ldrb	r3, [r3, #12]
 800e176:	2b00      	cmp	r3, #0
 800e178:	f040 809d 	bne.w	800e2b6 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	785b      	ldrb	r3, [r3, #1]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d04c      	beq.n	800e21e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	009b      	lsls	r3, r3, #2
 800e18c:	4413      	add	r3, r2
 800e18e:	881b      	ldrh	r3, [r3, #0]
 800e190:	823b      	strh	r3, [r7, #16]
 800e192:	8a3b      	ldrh	r3, [r7, #16]
 800e194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d01b      	beq.n	800e1d4 <USB_EPClearStall+0x6c>
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	009b      	lsls	r3, r3, #2
 800e1a4:	4413      	add	r3, r2
 800e1a6:	881b      	ldrh	r3, [r3, #0]
 800e1a8:	b29b      	uxth	r3, r3
 800e1aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e1ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e1b2:	81fb      	strh	r3, [r7, #14]
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	441a      	add	r2, r3
 800e1be:	89fb      	ldrh	r3, [r7, #14]
 800e1c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1cc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	78db      	ldrb	r3, [r3, #3]
 800e1d8:	2b01      	cmp	r3, #1
 800e1da:	d06c      	beq.n	800e2b6 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e1dc:	687a      	ldr	r2, [r7, #4]
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	4413      	add	r3, r2
 800e1e6:	881b      	ldrh	r3, [r3, #0]
 800e1e8:	b29b      	uxth	r3, r3
 800e1ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e1ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e1f2:	81bb      	strh	r3, [r7, #12]
 800e1f4:	89bb      	ldrh	r3, [r7, #12]
 800e1f6:	f083 0320 	eor.w	r3, r3, #32
 800e1fa:	81bb      	strh	r3, [r7, #12]
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	441a      	add	r2, r3
 800e206:	89bb      	ldrh	r3, [r7, #12]
 800e208:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e20c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e210:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e218:	b29b      	uxth	r3, r3
 800e21a:	8013      	strh	r3, [r2, #0]
 800e21c:	e04b      	b.n	800e2b6 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e21e:	687a      	ldr	r2, [r7, #4]
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	4413      	add	r3, r2
 800e228:	881b      	ldrh	r3, [r3, #0]
 800e22a:	82fb      	strh	r3, [r7, #22]
 800e22c:	8afb      	ldrh	r3, [r7, #22]
 800e22e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e232:	2b00      	cmp	r3, #0
 800e234:	d01b      	beq.n	800e26e <USB_EPClearStall+0x106>
 800e236:	687a      	ldr	r2, [r7, #4]
 800e238:	683b      	ldr	r3, [r7, #0]
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	009b      	lsls	r3, r3, #2
 800e23e:	4413      	add	r3, r2
 800e240:	881b      	ldrh	r3, [r3, #0]
 800e242:	b29b      	uxth	r3, r3
 800e244:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e248:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e24c:	82bb      	strh	r3, [r7, #20]
 800e24e:	687a      	ldr	r2, [r7, #4]
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	009b      	lsls	r3, r3, #2
 800e256:	441a      	add	r2, r3
 800e258:	8abb      	ldrh	r3, [r7, #20]
 800e25a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e25e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e262:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e266:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e26e:	687a      	ldr	r2, [r7, #4]
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	781b      	ldrb	r3, [r3, #0]
 800e274:	009b      	lsls	r3, r3, #2
 800e276:	4413      	add	r3, r2
 800e278:	881b      	ldrh	r3, [r3, #0]
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e280:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e284:	827b      	strh	r3, [r7, #18]
 800e286:	8a7b      	ldrh	r3, [r7, #18]
 800e288:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e28c:	827b      	strh	r3, [r7, #18]
 800e28e:	8a7b      	ldrh	r3, [r7, #18]
 800e290:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e294:	827b      	strh	r3, [r7, #18]
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	009b      	lsls	r3, r3, #2
 800e29e:	441a      	add	r2, r3
 800e2a0:	8a7b      	ldrh	r3, [r7, #18]
 800e2a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e2a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e2aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e2ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2b2:	b29b      	uxth	r3, r3
 800e2b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	371c      	adds	r7, #28
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	b083      	sub	sp, #12
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e2d0:	78fb      	ldrb	r3, [r7, #3]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d103      	bne.n	800e2de <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2280      	movs	r2, #128	@ 0x80
 800e2da:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e2de:	2300      	movs	r3, #0
}
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	370c      	adds	r7, #12
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ea:	4770      	bx	lr

0800e2ec <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b083      	sub	sp, #12
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e304:	b29a      	uxth	r2, r3
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e30c:	2300      	movs	r3, #0
}
 800e30e:	4618      	mov	r0, r3
 800e310:	370c      	adds	r7, #12
 800e312:	46bd      	mov	sp, r7
 800e314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e318:	4770      	bx	lr

0800e31a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e31a:	b480      	push	{r7}
 800e31c:	b085      	sub	sp, #20
 800e31e:	af00      	add	r7, sp, #0
 800e320:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e328:	b29b      	uxth	r3, r3
 800e32a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e32c:	68fb      	ldr	r3, [r7, #12]
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3714      	adds	r7, #20
 800e332:	46bd      	mov	sp, r7
 800e334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e338:	4770      	bx	lr

0800e33a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e33a:	b480      	push	{r7}
 800e33c:	b08b      	sub	sp, #44	@ 0x2c
 800e33e:	af00      	add	r7, sp, #0
 800e340:	60f8      	str	r0, [r7, #12]
 800e342:	60b9      	str	r1, [r7, #8]
 800e344:	4611      	mov	r1, r2
 800e346:	461a      	mov	r2, r3
 800e348:	460b      	mov	r3, r1
 800e34a:	80fb      	strh	r3, [r7, #6]
 800e34c:	4613      	mov	r3, r2
 800e34e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e350:	88bb      	ldrh	r3, [r7, #4]
 800e352:	3301      	adds	r3, #1
 800e354:	085b      	lsrs	r3, r3, #1
 800e356:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e360:	88fa      	ldrh	r2, [r7, #6]
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	4413      	add	r3, r2
 800e366:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e36a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e36c:	69bb      	ldr	r3, [r7, #24]
 800e36e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e370:	e01b      	b.n	800e3aa <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	781b      	ldrb	r3, [r3, #0]
 800e376:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e378:	69fb      	ldr	r3, [r7, #28]
 800e37a:	3301      	adds	r3, #1
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	021b      	lsls	r3, r3, #8
 800e380:	b21a      	sxth	r2, r3
 800e382:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e386:	4313      	orrs	r3, r2
 800e388:	b21b      	sxth	r3, r3
 800e38a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e38c:	6a3b      	ldr	r3, [r7, #32]
 800e38e:	8a7a      	ldrh	r2, [r7, #18]
 800e390:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e392:	6a3b      	ldr	r3, [r7, #32]
 800e394:	3302      	adds	r3, #2
 800e396:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e398:	69fb      	ldr	r3, [r7, #28]
 800e39a:	3301      	adds	r3, #1
 800e39c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d1e0      	bne.n	800e372 <USB_WritePMA+0x38>
  }
}
 800e3b0:	bf00      	nop
 800e3b2:	bf00      	nop
 800e3b4:	372c      	adds	r7, #44	@ 0x2c
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr

0800e3be <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e3be:	b480      	push	{r7}
 800e3c0:	b08b      	sub	sp, #44	@ 0x2c
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	60f8      	str	r0, [r7, #12]
 800e3c6:	60b9      	str	r1, [r7, #8]
 800e3c8:	4611      	mov	r1, r2
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	460b      	mov	r3, r1
 800e3ce:	80fb      	strh	r3, [r7, #6]
 800e3d0:	4613      	mov	r3, r2
 800e3d2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e3d4:	88bb      	ldrh	r3, [r7, #4]
 800e3d6:	085b      	lsrs	r3, r3, #1
 800e3d8:	b29b      	uxth	r3, r3
 800e3da:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e3e4:	88fa      	ldrh	r2, [r7, #6]
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	4413      	add	r3, r2
 800e3ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e3ee:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3f4:	e018      	b.n	800e428 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e3f6:	6a3b      	ldr	r3, [r7, #32]
 800e3f8:	881b      	ldrh	r3, [r3, #0]
 800e3fa:	b29b      	uxth	r3, r3
 800e3fc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e3fe:	6a3b      	ldr	r3, [r7, #32]
 800e400:	3302      	adds	r3, #2
 800e402:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	b2da      	uxtb	r2, r3
 800e408:	69fb      	ldr	r3, [r7, #28]
 800e40a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	3301      	adds	r3, #1
 800e410:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	0a1b      	lsrs	r3, r3, #8
 800e416:	b2da      	uxtb	r2, r3
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	3301      	adds	r3, #1
 800e420:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e424:	3b01      	subs	r3, #1
 800e426:	627b      	str	r3, [r7, #36]	@ 0x24
 800e428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d1e3      	bne.n	800e3f6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e42e:	88bb      	ldrh	r3, [r7, #4]
 800e430:	f003 0301 	and.w	r3, r3, #1
 800e434:	b29b      	uxth	r3, r3
 800e436:	2b00      	cmp	r3, #0
 800e438:	d007      	beq.n	800e44a <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e43a:	6a3b      	ldr	r3, [r7, #32]
 800e43c:	881b      	ldrh	r3, [r3, #0]
 800e43e:	b29b      	uxth	r3, r3
 800e440:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e442:	693b      	ldr	r3, [r7, #16]
 800e444:	b2da      	uxtb	r2, r3
 800e446:	69fb      	ldr	r3, [r7, #28]
 800e448:	701a      	strb	r2, [r3, #0]
  }
}
 800e44a:	bf00      	nop
 800e44c:	372c      	adds	r7, #44	@ 0x2c
 800e44e:	46bd      	mov	sp, r7
 800e450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e454:	4770      	bx	lr

0800e456 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b084      	sub	sp, #16
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
 800e45e:	460b      	mov	r3, r1
 800e460:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e462:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e466:	f002 f90f 	bl	8010688 <USBD_static_malloc>
 800e46a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d105      	bne.n	800e47e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2200      	movs	r2, #0
 800e476:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800e47a:	2302      	movs	r3, #2
 800e47c:	e066      	b.n	800e54c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	68fa      	ldr	r2, [r7, #12]
 800e482:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	7c1b      	ldrb	r3, [r3, #16]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d119      	bne.n	800e4c2 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e48e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e492:	2202      	movs	r2, #2
 800e494:	2181      	movs	r1, #129	@ 0x81
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f001 ff9d 	bl	80103d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e4a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e4a6:	2202      	movs	r2, #2
 800e4a8:	2101      	movs	r1, #1
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f001 ff93 	bl	80103d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	2210      	movs	r2, #16
 800e4bc:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800e4c0:	e016      	b.n	800e4f0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e4c2:	2340      	movs	r3, #64	@ 0x40
 800e4c4:	2202      	movs	r2, #2
 800e4c6:	2181      	movs	r1, #129	@ 0x81
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f001 ff84 	bl	80103d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2201      	movs	r2, #1
 800e4d2:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e4d4:	2340      	movs	r3, #64	@ 0x40
 800e4d6:	2202      	movs	r2, #2
 800e4d8:	2101      	movs	r1, #1
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f001 ff7b 	bl	80103d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2210      	movs	r2, #16
 800e4ec:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e4f0:	2308      	movs	r3, #8
 800e4f2:	2203      	movs	r2, #3
 800e4f4:	2182      	movs	r1, #130	@ 0x82
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f001 ff6d 	bl	80103d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2201      	movs	r2, #1
 800e500:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2200      	movs	r2, #0
 800e512:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	2200      	movs	r2, #0
 800e51a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	7c1b      	ldrb	r3, [r3, #16]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d109      	bne.n	800e53a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e52c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e530:	2101      	movs	r1, #1
 800e532:	6878      	ldr	r0, [r7, #4]
 800e534:	f002 f83e 	bl	80105b4 <USBD_LL_PrepareReceive>
 800e538:	e007      	b.n	800e54a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e540:	2340      	movs	r3, #64	@ 0x40
 800e542:	2101      	movs	r1, #1
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f002 f835 	bl	80105b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e54a:	2300      	movs	r3, #0
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3710      	adds	r7, #16
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	b082      	sub	sp, #8
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	460b      	mov	r3, r1
 800e55e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e560:	2181      	movs	r1, #129	@ 0x81
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f001 ff5d 	bl	8010422 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e56e:	2101      	movs	r1, #1
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f001 ff56 	bl	8010422 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2200      	movs	r2, #0
 800e57a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e57e:	2182      	movs	r1, #130	@ 0x82
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f001 ff4e 	bl	8010422 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2200      	movs	r2, #0
 800e58a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2200      	movs	r2, #0
 800e592:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d00e      	beq.n	800e5be <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e5a6:	685b      	ldr	r3, [r3, #4]
 800e5a8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f002 f877 	bl	80106a4 <USBD_static_free>
    pdev->pClassData = NULL;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3708      	adds	r7, #8
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e5d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e5e6:	693b      	ldr	r3, [r7, #16]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d101      	bne.n	800e5f0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e5ec:	2303      	movs	r3, #3
 800e5ee:	e0af      	b.n	800e750 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	781b      	ldrb	r3, [r3, #0]
 800e5f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d03f      	beq.n	800e67c <USBD_CDC_Setup+0xb4>
 800e5fc:	2b20      	cmp	r3, #32
 800e5fe:	f040 809f 	bne.w	800e740 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	88db      	ldrh	r3, [r3, #6]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d02e      	beq.n	800e668 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e60a:	683b      	ldr	r3, [r7, #0]
 800e60c:	781b      	ldrb	r3, [r3, #0]
 800e60e:	b25b      	sxtb	r3, r3
 800e610:	2b00      	cmp	r3, #0
 800e612:	da16      	bge.n	800e642 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e61a:	689b      	ldr	r3, [r3, #8]
 800e61c:	683a      	ldr	r2, [r7, #0]
 800e61e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e620:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e622:	683a      	ldr	r2, [r7, #0]
 800e624:	88d2      	ldrh	r2, [r2, #6]
 800e626:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	88db      	ldrh	r3, [r3, #6]
 800e62c:	2b07      	cmp	r3, #7
 800e62e:	bf28      	it	cs
 800e630:	2307      	movcs	r3, #7
 800e632:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	89fa      	ldrh	r2, [r7, #14]
 800e638:	4619      	mov	r1, r3
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f001 facd 	bl	800fbda <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e640:	e085      	b.n	800e74e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e642:	683b      	ldr	r3, [r7, #0]
 800e644:	785a      	ldrb	r2, [r3, #1]
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	88db      	ldrh	r3, [r3, #6]
 800e650:	b2da      	uxtb	r2, r3
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e658:	6939      	ldr	r1, [r7, #16]
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	88db      	ldrh	r3, [r3, #6]
 800e65e:	461a      	mov	r2, r3
 800e660:	6878      	ldr	r0, [r7, #4]
 800e662:	f001 fae6 	bl	800fc32 <USBD_CtlPrepareRx>
      break;
 800e666:	e072      	b.n	800e74e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	683a      	ldr	r2, [r7, #0]
 800e672:	7850      	ldrb	r0, [r2, #1]
 800e674:	2200      	movs	r2, #0
 800e676:	6839      	ldr	r1, [r7, #0]
 800e678:	4798      	blx	r3
      break;
 800e67a:	e068      	b.n	800e74e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	785b      	ldrb	r3, [r3, #1]
 800e680:	2b0b      	cmp	r3, #11
 800e682:	d852      	bhi.n	800e72a <USBD_CDC_Setup+0x162>
 800e684:	a201      	add	r2, pc, #4	@ (adr r2, 800e68c <USBD_CDC_Setup+0xc4>)
 800e686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e68a:	bf00      	nop
 800e68c:	0800e6bd 	.word	0x0800e6bd
 800e690:	0800e739 	.word	0x0800e739
 800e694:	0800e72b 	.word	0x0800e72b
 800e698:	0800e72b 	.word	0x0800e72b
 800e69c:	0800e72b 	.word	0x0800e72b
 800e6a0:	0800e72b 	.word	0x0800e72b
 800e6a4:	0800e72b 	.word	0x0800e72b
 800e6a8:	0800e72b 	.word	0x0800e72b
 800e6ac:	0800e72b 	.word	0x0800e72b
 800e6b0:	0800e72b 	.word	0x0800e72b
 800e6b4:	0800e6e7 	.word	0x0800e6e7
 800e6b8:	0800e711 	.word	0x0800e711
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	2b03      	cmp	r3, #3
 800e6c6:	d107      	bne.n	800e6d8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e6c8:	f107 030a 	add.w	r3, r7, #10
 800e6cc:	2202      	movs	r2, #2
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f001 fa82 	bl	800fbda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e6d6:	e032      	b.n	800e73e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e6d8:	6839      	ldr	r1, [r7, #0]
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f001 fa0c 	bl	800faf8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e6e0:	2303      	movs	r3, #3
 800e6e2:	75fb      	strb	r3, [r7, #23]
          break;
 800e6e4:	e02b      	b.n	800e73e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6ec:	b2db      	uxtb	r3, r3
 800e6ee:	2b03      	cmp	r3, #3
 800e6f0:	d107      	bne.n	800e702 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e6f2:	f107 030d 	add.w	r3, r7, #13
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f001 fa6d 	bl	800fbda <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e700:	e01d      	b.n	800e73e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e702:	6839      	ldr	r1, [r7, #0]
 800e704:	6878      	ldr	r0, [r7, #4]
 800e706:	f001 f9f7 	bl	800faf8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e70a:	2303      	movs	r3, #3
 800e70c:	75fb      	strb	r3, [r7, #23]
          break;
 800e70e:	e016      	b.n	800e73e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e716:	b2db      	uxtb	r3, r3
 800e718:	2b03      	cmp	r3, #3
 800e71a:	d00f      	beq.n	800e73c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e71c:	6839      	ldr	r1, [r7, #0]
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f001 f9ea 	bl	800faf8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e724:	2303      	movs	r3, #3
 800e726:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e728:	e008      	b.n	800e73c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e72a:	6839      	ldr	r1, [r7, #0]
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f001 f9e3 	bl	800faf8 <USBD_CtlError>
          ret = USBD_FAIL;
 800e732:	2303      	movs	r3, #3
 800e734:	75fb      	strb	r3, [r7, #23]
          break;
 800e736:	e002      	b.n	800e73e <USBD_CDC_Setup+0x176>
          break;
 800e738:	bf00      	nop
 800e73a:	e008      	b.n	800e74e <USBD_CDC_Setup+0x186>
          break;
 800e73c:	bf00      	nop
      }
      break;
 800e73e:	e006      	b.n	800e74e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e740:	6839      	ldr	r1, [r7, #0]
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f001 f9d8 	bl	800faf8 <USBD_CtlError>
      ret = USBD_FAIL;
 800e748:	2303      	movs	r3, #3
 800e74a:	75fb      	strb	r3, [r7, #23]
      break;
 800e74c:	bf00      	nop
  }

  return (uint8_t)ret;
 800e74e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e750:	4618      	mov	r0, r3
 800e752:	3718      	adds	r7, #24
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	460b      	mov	r3, r1
 800e762:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800e76a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e772:	2b00      	cmp	r3, #0
 800e774:	d101      	bne.n	800e77a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e776:	2303      	movs	r3, #3
 800e778:	e04f      	b.n	800e81a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e780:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e782:	78fa      	ldrb	r2, [r7, #3]
 800e784:	6879      	ldr	r1, [r7, #4]
 800e786:	4613      	mov	r3, r2
 800e788:	009b      	lsls	r3, r3, #2
 800e78a:	4413      	add	r3, r2
 800e78c:	009b      	lsls	r3, r3, #2
 800e78e:	440b      	add	r3, r1
 800e790:	3318      	adds	r3, #24
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d029      	beq.n	800e7ec <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e798:	78fa      	ldrb	r2, [r7, #3]
 800e79a:	6879      	ldr	r1, [r7, #4]
 800e79c:	4613      	mov	r3, r2
 800e79e:	009b      	lsls	r3, r3, #2
 800e7a0:	4413      	add	r3, r2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	440b      	add	r3, r1
 800e7a6:	3318      	adds	r3, #24
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	78f9      	ldrb	r1, [r7, #3]
 800e7ac:	68f8      	ldr	r0, [r7, #12]
 800e7ae:	460b      	mov	r3, r1
 800e7b0:	009b      	lsls	r3, r3, #2
 800e7b2:	440b      	add	r3, r1
 800e7b4:	00db      	lsls	r3, r3, #3
 800e7b6:	4403      	add	r3, r0
 800e7b8:	3320      	adds	r3, #32
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800e7c0:	fb01 f303 	mul.w	r3, r1, r3
 800e7c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d110      	bne.n	800e7ec <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e7ca:	78fa      	ldrb	r2, [r7, #3]
 800e7cc:	6879      	ldr	r1, [r7, #4]
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	009b      	lsls	r3, r3, #2
 800e7d2:	4413      	add	r3, r2
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	440b      	add	r3, r1
 800e7d8:	3318      	adds	r3, #24
 800e7da:	2200      	movs	r2, #0
 800e7dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e7de:	78f9      	ldrb	r1, [r7, #3]
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f001 fec4 	bl	8010572 <USBD_LL_Transmit>
 800e7ea:	e015      	b.n	800e818 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e7fa:	691b      	ldr	r3, [r3, #16]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d00b      	beq.n	800e818 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e806:	691b      	ldr	r3, [r3, #16]
 800e808:	68ba      	ldr	r2, [r7, #8]
 800e80a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e80e:	68ba      	ldr	r2, [r7, #8]
 800e810:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e814:	78fa      	ldrb	r2, [r7, #3]
 800e816:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e818:	2300      	movs	r3, #0
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3710      	adds	r7, #16
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}

0800e822 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e822:	b580      	push	{r7, lr}
 800e824:	b084      	sub	sp, #16
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
 800e82a:	460b      	mov	r3, r1
 800e82c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e834:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d101      	bne.n	800e844 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e840:	2303      	movs	r3, #3
 800e842:	e015      	b.n	800e870 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e844:	78fb      	ldrb	r3, [r7, #3]
 800e846:	4619      	mov	r1, r3
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f001 fed4 	bl	80105f6 <USBD_LL_GetRxDataSize>
 800e84e:	4602      	mov	r2, r0
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	68fa      	ldr	r2, [r7, #12]
 800e860:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e864:	68fa      	ldr	r2, [r7, #12]
 800e866:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e86a:	4611      	mov	r1, r2
 800e86c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e86e:	2300      	movs	r3, #0
}
 800e870:	4618      	mov	r0, r3
 800e872:	3710      	adds	r7, #16
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}

0800e878 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e886:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d101      	bne.n	800e892 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e88e:	2303      	movs	r3, #3
 800e890:	e01a      	b.n	800e8c8 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d014      	beq.n	800e8c6 <USBD_CDC_EP0_RxReady+0x4e>
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e8a2:	2bff      	cmp	r3, #255	@ 0xff
 800e8a4:	d00f      	beq.n	800e8c6 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800e8ac:	689b      	ldr	r3, [r3, #8]
 800e8ae:	68fa      	ldr	r2, [r7, #12]
 800e8b0:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800e8b4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e8b6:	68fa      	ldr	r2, [r7, #12]
 800e8b8:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e8bc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	22ff      	movs	r2, #255	@ 0xff
 800e8c2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e8c6:	2300      	movs	r3, #0
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3710      	adds	r7, #16
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b083      	sub	sp, #12
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	2243      	movs	r2, #67	@ 0x43
 800e8dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e8de:	4b03      	ldr	r3, [pc, #12]	@ (800e8ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr
 800e8ec:	200000c0 	.word	0x200000c0

0800e8f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e8f0:	b480      	push	{r7}
 800e8f2:	b083      	sub	sp, #12
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2243      	movs	r2, #67	@ 0x43
 800e8fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e8fe:	4b03      	ldr	r3, [pc, #12]	@ (800e90c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e900:	4618      	mov	r0, r3
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr
 800e90c:	2000007c 	.word	0x2000007c

0800e910 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e910:	b480      	push	{r7}
 800e912:	b083      	sub	sp, #12
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2243      	movs	r2, #67	@ 0x43
 800e91c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e91e:	4b03      	ldr	r3, [pc, #12]	@ (800e92c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e920:	4618      	mov	r0, r3
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr
 800e92c:	20000104 	.word	0x20000104

0800e930 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	220a      	movs	r2, #10
 800e93c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e93e:	4b03      	ldr	r3, [pc, #12]	@ (800e94c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e940:	4618      	mov	r0, r3
 800e942:	370c      	adds	r7, #12
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr
 800e94c:	20000038 	.word	0x20000038

0800e950 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d101      	bne.n	800e964 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e960:	2303      	movs	r3, #3
 800e962:	e004      	b.n	800e96e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	683a      	ldr	r2, [r7, #0]
 800e968:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	370c      	adds	r7, #12
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr

0800e97a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e97a:	b480      	push	{r7}
 800e97c:	b087      	sub	sp, #28
 800e97e:	af00      	add	r7, sp, #0
 800e980:	60f8      	str	r0, [r7, #12]
 800e982:	60b9      	str	r1, [r7, #8]
 800e984:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e98c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d101      	bne.n	800e998 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e994:	2303      	movs	r3, #3
 800e996:	e008      	b.n	800e9aa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	68ba      	ldr	r2, [r7, #8]
 800e99c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e9a8:	2300      	movs	r3, #0
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	371c      	adds	r7, #28
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr

0800e9b6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e9b6:	b480      	push	{r7}
 800e9b8:	b085      	sub	sp, #20
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
 800e9be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e9c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d101      	bne.n	800e9d2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e9ce:	2303      	movs	r3, #3
 800e9d0:	e004      	b.n	800e9dc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	683a      	ldr	r2, [r7, #0]
 800e9d6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e9da:	2300      	movs	r3, #0
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3714      	adds	r7, #20
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b084      	sub	sp, #16
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e9f6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d101      	bne.n	800ea0a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ea06:	2303      	movs	r3, #3
 800ea08:	e01a      	b.n	800ea40 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d114      	bne.n	800ea3e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	2201      	movs	r2, #1
 800ea18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ea2c:	68bb      	ldr	r3, [r7, #8]
 800ea2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ea32:	2181      	movs	r1, #129	@ 0x81
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f001 fd9c 	bl	8010572 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ea3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3710      	adds	r7, #16
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b084      	sub	sp, #16
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ea56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d101      	bne.n	800ea66 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ea62:	2303      	movs	r3, #3
 800ea64:	e016      	b.n	800ea94 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	7c1b      	ldrb	r3, [r3, #16]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d109      	bne.n	800ea82 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ea74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea78:	2101      	movs	r1, #1
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f001 fd9a 	bl	80105b4 <USBD_LL_PrepareReceive>
 800ea80:	e007      	b.n	800ea92 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ea88:	2340      	movs	r3, #64	@ 0x40
 800ea8a:	2101      	movs	r1, #1
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f001 fd91 	bl	80105b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ea92:	2300      	movs	r3, #0
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3710      	adds	r7, #16
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b086      	sub	sp, #24
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	60f8      	str	r0, [r7, #12]
 800eaa4:	60b9      	str	r1, [r7, #8]
 800eaa6:	4613      	mov	r3, r2
 800eaa8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d101      	bne.n	800eab4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800eab0:	2303      	movs	r3, #3
 800eab2:	e01f      	b.n	800eaf4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	2200      	movs	r2, #0
 800eab8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	2200      	movs	r2, #0
 800eac0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2200      	movs	r2, #0
 800eac8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d003      	beq.n	800eada <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	68ba      	ldr	r2, [r7, #8]
 800ead6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	2201      	movs	r2, #1
 800eade:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	79fa      	ldrb	r2, [r7, #7]
 800eae6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800eae8:	68f8      	ldr	r0, [r7, #12]
 800eaea:	f001 fbf9 	bl	80102e0 <USBD_LL_Init>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800eaf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3718      	adds	r7, #24
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800eb06:	2300      	movs	r3, #0
 800eb08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800eb0a:	683b      	ldr	r3, [r7, #0]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d101      	bne.n	800eb14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800eb10:	2303      	movs	r3, #3
 800eb12:	e016      	b.n	800eb42 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	683a      	ldr	r2, [r7, #0]
 800eb18:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00b      	beq.n	800eb40 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb30:	f107 020e 	add.w	r2, r7, #14
 800eb34:	4610      	mov	r0, r2
 800eb36:	4798      	blx	r3
 800eb38:	4602      	mov	r2, r0
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800eb40:	2300      	movs	r3, #0
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b082      	sub	sp, #8
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f001 fc24 	bl	80103a0 <USBD_LL_Start>
 800eb58:	4603      	mov	r3, r0
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3708      	adds	r7, #8
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}

0800eb62 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800eb62:	b480      	push	{r7}
 800eb64:	b083      	sub	sp, #12
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eb6a:	2300      	movs	r3, #0
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	370c      	adds	r7, #12
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr

0800eb78 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	460b      	mov	r3, r1
 800eb82:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800eb84:	2303      	movs	r3, #3
 800eb86:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d009      	beq.n	800eba6 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb98:	681b      	ldr	r3, [r3, #0]
 800eb9a:	78fa      	ldrb	r2, [r7, #3]
 800eb9c:	4611      	mov	r1, r2
 800eb9e:	6878      	ldr	r0, [r7, #4]
 800eba0:	4798      	blx	r3
 800eba2:	4603      	mov	r3, r0
 800eba4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800eba6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eba8:	4618      	mov	r0, r3
 800ebaa:	3710      	adds	r7, #16
 800ebac:	46bd      	mov	sp, r7
 800ebae:	bd80      	pop	{r7, pc}

0800ebb0 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	460b      	mov	r3, r1
 800ebba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d007      	beq.n	800ebd6 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	78fa      	ldrb	r2, [r7, #3]
 800ebd0:	4611      	mov	r1, r2
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	4798      	blx	r3
  }

  return USBD_OK;
 800ebd6:	2300      	movs	r3, #0
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3708      	adds	r7, #8
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b084      	sub	sp, #16
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ebf0:	6839      	ldr	r1, [r7, #0]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f000 ff46 	bl	800fa84 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	2201      	movs	r2, #1
 800ebfc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ec06:	461a      	mov	r2, r3
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ec14:	f003 031f 	and.w	r3, r3, #31
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	d01a      	beq.n	800ec52 <USBD_LL_SetupStage+0x72>
 800ec1c:	2b02      	cmp	r3, #2
 800ec1e:	d822      	bhi.n	800ec66 <USBD_LL_SetupStage+0x86>
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d002      	beq.n	800ec2a <USBD_LL_SetupStage+0x4a>
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d00a      	beq.n	800ec3e <USBD_LL_SetupStage+0x5e>
 800ec28:	e01d      	b.n	800ec66 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ec30:	4619      	mov	r1, r3
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f000 f9ee 	bl	800f014 <USBD_StdDevReq>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	73fb      	strb	r3, [r7, #15]
      break;
 800ec3c:	e020      	b.n	800ec80 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ec44:	4619      	mov	r1, r3
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f000 fa52 	bl	800f0f0 <USBD_StdItfReq>
 800ec4c:	4603      	mov	r3, r0
 800ec4e:	73fb      	strb	r3, [r7, #15]
      break;
 800ec50:	e016      	b.n	800ec80 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ec58:	4619      	mov	r1, r3
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f000 fa91 	bl	800f182 <USBD_StdEPReq>
 800ec60:	4603      	mov	r3, r0
 800ec62:	73fb      	strb	r3, [r7, #15]
      break;
 800ec64:	e00c      	b.n	800ec80 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ec6c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ec70:	b2db      	uxtb	r3, r3
 800ec72:	4619      	mov	r1, r3
 800ec74:	6878      	ldr	r0, [r7, #4]
 800ec76:	f001 fbf3 	bl	8010460 <USBD_LL_StallEP>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	73fb      	strb	r3, [r7, #15]
      break;
 800ec7e:	bf00      	nop
  }

  return ret;
 800ec80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3710      	adds	r7, #16
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b086      	sub	sp, #24
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	60f8      	str	r0, [r7, #12]
 800ec92:	460b      	mov	r3, r1
 800ec94:	607a      	str	r2, [r7, #4]
 800ec96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ec98:	7afb      	ldrb	r3, [r7, #11]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d138      	bne.n	800ed10 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800eca4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ecac:	2b03      	cmp	r3, #3
 800ecae:	d14a      	bne.n	800ed46 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	689a      	ldr	r2, [r3, #8]
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	68db      	ldr	r3, [r3, #12]
 800ecb8:	429a      	cmp	r2, r3
 800ecba:	d913      	bls.n	800ece4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	689a      	ldr	r2, [r3, #8]
 800ecc0:	693b      	ldr	r3, [r7, #16]
 800ecc2:	68db      	ldr	r3, [r3, #12]
 800ecc4:	1ad2      	subs	r2, r2, r3
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ecca:	693b      	ldr	r3, [r7, #16]
 800eccc:	68da      	ldr	r2, [r3, #12]
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	689b      	ldr	r3, [r3, #8]
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	bf28      	it	cs
 800ecd6:	4613      	movcs	r3, r2
 800ecd8:	461a      	mov	r2, r3
 800ecda:	6879      	ldr	r1, [r7, #4]
 800ecdc:	68f8      	ldr	r0, [r7, #12]
 800ecde:	f000 ffc5 	bl	800fc6c <USBD_CtlContinueRx>
 800ece2:	e030      	b.n	800ed46 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ecea:	b2db      	uxtb	r3, r3
 800ecec:	2b03      	cmp	r3, #3
 800ecee:	d10b      	bne.n	800ed08 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ecf6:	691b      	ldr	r3, [r3, #16]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d005      	beq.n	800ed08 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed02:	691b      	ldr	r3, [r3, #16]
 800ed04:	68f8      	ldr	r0, [r7, #12]
 800ed06:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ed08:	68f8      	ldr	r0, [r7, #12]
 800ed0a:	f000 ffc0 	bl	800fc8e <USBD_CtlSendStatus>
 800ed0e:	e01a      	b.n	800ed46 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	2b03      	cmp	r3, #3
 800ed1a:	d114      	bne.n	800ed46 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed22:	699b      	ldr	r3, [r3, #24]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d00e      	beq.n	800ed46 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ed2e:	699b      	ldr	r3, [r3, #24]
 800ed30:	7afa      	ldrb	r2, [r7, #11]
 800ed32:	4611      	mov	r1, r2
 800ed34:	68f8      	ldr	r0, [r7, #12]
 800ed36:	4798      	blx	r3
 800ed38:	4603      	mov	r3, r0
 800ed3a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ed3c:	7dfb      	ldrb	r3, [r7, #23]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d001      	beq.n	800ed46 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ed42:	7dfb      	ldrb	r3, [r7, #23]
 800ed44:	e000      	b.n	800ed48 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ed46:	2300      	movs	r3, #0
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3718      	adds	r7, #24
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b086      	sub	sp, #24
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	460b      	mov	r3, r1
 800ed5a:	607a      	str	r2, [r7, #4]
 800ed5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ed5e:	7afb      	ldrb	r3, [r7, #11]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d16b      	bne.n	800ee3c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	3314      	adds	r3, #20
 800ed68:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ed70:	2b02      	cmp	r3, #2
 800ed72:	d156      	bne.n	800ee22 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	689a      	ldr	r2, [r3, #8]
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	68db      	ldr	r3, [r3, #12]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d914      	bls.n	800edaa <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	689a      	ldr	r2, [r3, #8]
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	68db      	ldr	r3, [r3, #12]
 800ed88:	1ad2      	subs	r2, r2, r3
 800ed8a:	693b      	ldr	r3, [r7, #16]
 800ed8c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	689b      	ldr	r3, [r3, #8]
 800ed92:	461a      	mov	r2, r3
 800ed94:	6879      	ldr	r1, [r7, #4]
 800ed96:	68f8      	ldr	r0, [r7, #12]
 800ed98:	f000 ff3a 	bl	800fc10 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	2200      	movs	r2, #0
 800eda0:	2100      	movs	r1, #0
 800eda2:	68f8      	ldr	r0, [r7, #12]
 800eda4:	f001 fc06 	bl	80105b4 <USBD_LL_PrepareReceive>
 800eda8:	e03b      	b.n	800ee22 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800edaa:	693b      	ldr	r3, [r7, #16]
 800edac:	68da      	ldr	r2, [r3, #12]
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d11c      	bne.n	800edf0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800edb6:	693b      	ldr	r3, [r7, #16]
 800edb8:	685a      	ldr	r2, [r3, #4]
 800edba:	693b      	ldr	r3, [r7, #16]
 800edbc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d316      	bcc.n	800edf0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800edc2:	693b      	ldr	r3, [r7, #16]
 800edc4:	685a      	ldr	r2, [r3, #4]
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800edcc:	429a      	cmp	r2, r3
 800edce:	d20f      	bcs.n	800edf0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800edd0:	2200      	movs	r2, #0
 800edd2:	2100      	movs	r1, #0
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f000 ff1b 	bl	800fc10 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800edda:	68fb      	ldr	r3, [r7, #12]
 800eddc:	2200      	movs	r2, #0
 800edde:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ede2:	2300      	movs	r3, #0
 800ede4:	2200      	movs	r2, #0
 800ede6:	2100      	movs	r1, #0
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f001 fbe3 	bl	80105b4 <USBD_LL_PrepareReceive>
 800edee:	e018      	b.n	800ee22 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edf6:	b2db      	uxtb	r3, r3
 800edf8:	2b03      	cmp	r3, #3
 800edfa:	d10b      	bne.n	800ee14 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee02:	68db      	ldr	r3, [r3, #12]
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d005      	beq.n	800ee14 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee14:	2180      	movs	r1, #128	@ 0x80
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f001 fb22 	bl	8010460 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f000 ff49 	bl	800fcb4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	d122      	bne.n	800ee72 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ee2c:	68f8      	ldr	r0, [r7, #12]
 800ee2e:	f7ff fe98 	bl	800eb62 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	2200      	movs	r2, #0
 800ee36:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800ee3a:	e01a      	b.n	800ee72 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	2b03      	cmp	r3, #3
 800ee46:	d114      	bne.n	800ee72 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee4e:	695b      	ldr	r3, [r3, #20]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d00e      	beq.n	800ee72 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee5a:	695b      	ldr	r3, [r3, #20]
 800ee5c:	7afa      	ldrb	r2, [r7, #11]
 800ee5e:	4611      	mov	r1, r2
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	4798      	blx	r3
 800ee64:	4603      	mov	r3, r0
 800ee66:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ee68:	7dfb      	ldrb	r3, [r7, #23]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d001      	beq.n	800ee72 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ee6e:	7dfb      	ldrb	r3, [r7, #23]
 800ee70:	e000      	b.n	800ee74 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ee72:	2300      	movs	r3, #0
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3718      	adds	r7, #24
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	2201      	movs	r2, #1
 800ee88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2200      	movs	r2, #0
 800ee90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2200      	movs	r2, #0
 800ee98:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d101      	bne.n	800eeb0 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800eeac:	2303      	movs	r3, #3
 800eeae:	e02f      	b.n	800ef10 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d00f      	beq.n	800eeda <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d009      	beq.n	800eeda <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eecc:	685b      	ldr	r3, [r3, #4]
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	6852      	ldr	r2, [r2, #4]
 800eed2:	b2d2      	uxtb	r2, r2
 800eed4:	4611      	mov	r1, r2
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eeda:	2340      	movs	r3, #64	@ 0x40
 800eedc:	2200      	movs	r2, #0
 800eede:	2100      	movs	r1, #0
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f001 fa78 	bl	80103d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2201      	movs	r2, #1
 800eeea:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2240      	movs	r2, #64	@ 0x40
 800eef2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eef6:	2340      	movs	r3, #64	@ 0x40
 800eef8:	2200      	movs	r2, #0
 800eefa:	2180      	movs	r1, #128	@ 0x80
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f001 fa6a 	bl	80103d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2201      	movs	r2, #1
 800ef06:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	2240      	movs	r2, #64	@ 0x40
 800ef0c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}

0800ef18 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b083      	sub	sp, #12
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	460b      	mov	r3, r1
 800ef22:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	78fa      	ldrb	r2, [r7, #3]
 800ef28:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ef2a:	2300      	movs	r3, #0
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	370c      	adds	r7, #12
 800ef30:	46bd      	mov	sp, r7
 800ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef36:	4770      	bx	lr

0800ef38 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b083      	sub	sp, #12
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef46:	b2da      	uxtb	r2, r3
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2204      	movs	r2, #4
 800ef52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ef56:	2300      	movs	r3, #0
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	370c      	adds	r7, #12
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr

0800ef64 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ef64:	b480      	push	{r7}
 800ef66:	b083      	sub	sp, #12
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	2b04      	cmp	r3, #4
 800ef76:	d106      	bne.n	800ef86 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ef7e:	b2da      	uxtb	r2, r3
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ef86:	2300      	movs	r3, #0
}
 800ef88:	4618      	mov	r0, r3
 800ef8a:	370c      	adds	r7, #12
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef92:	4770      	bx	lr

0800ef94 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d101      	bne.n	800efaa <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800efa6:	2303      	movs	r3, #3
 800efa8:	e012      	b.n	800efd0 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800efb0:	b2db      	uxtb	r3, r3
 800efb2:	2b03      	cmp	r3, #3
 800efb4:	d10b      	bne.n	800efce <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800efbc:	69db      	ldr	r3, [r3, #28]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d005      	beq.n	800efce <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800efc8:	69db      	ldr	r3, [r3, #28]
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800efce:	2300      	movs	r3, #0
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	3708      	adds	r7, #8
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800efd8:	b480      	push	{r7}
 800efda:	b087      	sub	sp, #28
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	781b      	ldrb	r3, [r3, #0]
 800efe8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	3301      	adds	r3, #1
 800efee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800eff6:	8a3b      	ldrh	r3, [r7, #16]
 800eff8:	021b      	lsls	r3, r3, #8
 800effa:	b21a      	sxth	r2, r3
 800effc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f000:	4313      	orrs	r3, r2
 800f002:	b21b      	sxth	r3, r3
 800f004:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f006:	89fb      	ldrh	r3, [r7, #14]
}
 800f008:	4618      	mov	r0, r3
 800f00a:	371c      	adds	r7, #28
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr

0800f014 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f01e:	2300      	movs	r3, #0
 800f020:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	781b      	ldrb	r3, [r3, #0]
 800f026:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f02a:	2b40      	cmp	r3, #64	@ 0x40
 800f02c:	d005      	beq.n	800f03a <USBD_StdDevReq+0x26>
 800f02e:	2b40      	cmp	r3, #64	@ 0x40
 800f030:	d853      	bhi.n	800f0da <USBD_StdDevReq+0xc6>
 800f032:	2b00      	cmp	r3, #0
 800f034:	d00b      	beq.n	800f04e <USBD_StdDevReq+0x3a>
 800f036:	2b20      	cmp	r3, #32
 800f038:	d14f      	bne.n	800f0da <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f040:	689b      	ldr	r3, [r3, #8]
 800f042:	6839      	ldr	r1, [r7, #0]
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	4798      	blx	r3
 800f048:	4603      	mov	r3, r0
 800f04a:	73fb      	strb	r3, [r7, #15]
      break;
 800f04c:	e04a      	b.n	800f0e4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	785b      	ldrb	r3, [r3, #1]
 800f052:	2b09      	cmp	r3, #9
 800f054:	d83b      	bhi.n	800f0ce <USBD_StdDevReq+0xba>
 800f056:	a201      	add	r2, pc, #4	@ (adr r2, 800f05c <USBD_StdDevReq+0x48>)
 800f058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f05c:	0800f0b1 	.word	0x0800f0b1
 800f060:	0800f0c5 	.word	0x0800f0c5
 800f064:	0800f0cf 	.word	0x0800f0cf
 800f068:	0800f0bb 	.word	0x0800f0bb
 800f06c:	0800f0cf 	.word	0x0800f0cf
 800f070:	0800f08f 	.word	0x0800f08f
 800f074:	0800f085 	.word	0x0800f085
 800f078:	0800f0cf 	.word	0x0800f0cf
 800f07c:	0800f0a7 	.word	0x0800f0a7
 800f080:	0800f099 	.word	0x0800f099
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f084:	6839      	ldr	r1, [r7, #0]
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f000 f9de 	bl	800f448 <USBD_GetDescriptor>
          break;
 800f08c:	e024      	b.n	800f0d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f08e:	6839      	ldr	r1, [r7, #0]
 800f090:	6878      	ldr	r0, [r7, #4]
 800f092:	f000 fb6d 	bl	800f770 <USBD_SetAddress>
          break;
 800f096:	e01f      	b.n	800f0d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f098:	6839      	ldr	r1, [r7, #0]
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f000 fbac 	bl	800f7f8 <USBD_SetConfig>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	73fb      	strb	r3, [r7, #15]
          break;
 800f0a4:	e018      	b.n	800f0d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f0a6:	6839      	ldr	r1, [r7, #0]
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f000 fc4b 	bl	800f944 <USBD_GetConfig>
          break;
 800f0ae:	e013      	b.n	800f0d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f0b0:	6839      	ldr	r1, [r7, #0]
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f000 fc7c 	bl	800f9b0 <USBD_GetStatus>
          break;
 800f0b8:	e00e      	b.n	800f0d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f0ba:	6839      	ldr	r1, [r7, #0]
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f000 fcab 	bl	800fa18 <USBD_SetFeature>
          break;
 800f0c2:	e009      	b.n	800f0d8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f0c4:	6839      	ldr	r1, [r7, #0]
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f000 fcba 	bl	800fa40 <USBD_ClrFeature>
          break;
 800f0cc:	e004      	b.n	800f0d8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f0ce:	6839      	ldr	r1, [r7, #0]
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f000 fd11 	bl	800faf8 <USBD_CtlError>
          break;
 800f0d6:	bf00      	nop
      }
      break;
 800f0d8:	e004      	b.n	800f0e4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f0da:	6839      	ldr	r1, [r7, #0]
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f000 fd0b 	bl	800faf8 <USBD_CtlError>
      break;
 800f0e2:	bf00      	nop
  }

  return ret;
 800f0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3710      	adds	r7, #16
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop

0800f0f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0f0:	b580      	push	{r7, lr}
 800f0f2:	b084      	sub	sp, #16
 800f0f4:	af00      	add	r7, sp, #0
 800f0f6:	6078      	str	r0, [r7, #4]
 800f0f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	781b      	ldrb	r3, [r3, #0]
 800f102:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f106:	2b40      	cmp	r3, #64	@ 0x40
 800f108:	d005      	beq.n	800f116 <USBD_StdItfReq+0x26>
 800f10a:	2b40      	cmp	r3, #64	@ 0x40
 800f10c:	d82f      	bhi.n	800f16e <USBD_StdItfReq+0x7e>
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d001      	beq.n	800f116 <USBD_StdItfReq+0x26>
 800f112:	2b20      	cmp	r3, #32
 800f114:	d12b      	bne.n	800f16e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	3b01      	subs	r3, #1
 800f120:	2b02      	cmp	r3, #2
 800f122:	d81d      	bhi.n	800f160 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f124:	683b      	ldr	r3, [r7, #0]
 800f126:	889b      	ldrh	r3, [r3, #4]
 800f128:	b2db      	uxtb	r3, r3
 800f12a:	2b01      	cmp	r3, #1
 800f12c:	d813      	bhi.n	800f156 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f134:	689b      	ldr	r3, [r3, #8]
 800f136:	6839      	ldr	r1, [r7, #0]
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	4798      	blx	r3
 800f13c:	4603      	mov	r3, r0
 800f13e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	88db      	ldrh	r3, [r3, #6]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d110      	bne.n	800f16a <USBD_StdItfReq+0x7a>
 800f148:	7bfb      	ldrb	r3, [r7, #15]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d10d      	bne.n	800f16a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f000 fd9d 	bl	800fc8e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f154:	e009      	b.n	800f16a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f156:	6839      	ldr	r1, [r7, #0]
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 fccd 	bl	800faf8 <USBD_CtlError>
          break;
 800f15e:	e004      	b.n	800f16a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f160:	6839      	ldr	r1, [r7, #0]
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 fcc8 	bl	800faf8 <USBD_CtlError>
          break;
 800f168:	e000      	b.n	800f16c <USBD_StdItfReq+0x7c>
          break;
 800f16a:	bf00      	nop
      }
      break;
 800f16c:	e004      	b.n	800f178 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f16e:	6839      	ldr	r1, [r7, #0]
 800f170:	6878      	ldr	r0, [r7, #4]
 800f172:	f000 fcc1 	bl	800faf8 <USBD_CtlError>
      break;
 800f176:	bf00      	nop
  }

  return ret;
 800f178:	7bfb      	ldrb	r3, [r7, #15]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}

0800f182 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f182:	b580      	push	{r7, lr}
 800f184:	b084      	sub	sp, #16
 800f186:	af00      	add	r7, sp, #0
 800f188:	6078      	str	r0, [r7, #4]
 800f18a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f18c:	2300      	movs	r3, #0
 800f18e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f190:	683b      	ldr	r3, [r7, #0]
 800f192:	889b      	ldrh	r3, [r3, #4]
 800f194:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f19e:	2b40      	cmp	r3, #64	@ 0x40
 800f1a0:	d007      	beq.n	800f1b2 <USBD_StdEPReq+0x30>
 800f1a2:	2b40      	cmp	r3, #64	@ 0x40
 800f1a4:	f200 8145 	bhi.w	800f432 <USBD_StdEPReq+0x2b0>
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d00c      	beq.n	800f1c6 <USBD_StdEPReq+0x44>
 800f1ac:	2b20      	cmp	r3, #32
 800f1ae:	f040 8140 	bne.w	800f432 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1b8:	689b      	ldr	r3, [r3, #8]
 800f1ba:	6839      	ldr	r1, [r7, #0]
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	4798      	blx	r3
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	73fb      	strb	r3, [r7, #15]
      break;
 800f1c4:	e13a      	b.n	800f43c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	785b      	ldrb	r3, [r3, #1]
 800f1ca:	2b03      	cmp	r3, #3
 800f1cc:	d007      	beq.n	800f1de <USBD_StdEPReq+0x5c>
 800f1ce:	2b03      	cmp	r3, #3
 800f1d0:	f300 8129 	bgt.w	800f426 <USBD_StdEPReq+0x2a4>
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d07f      	beq.n	800f2d8 <USBD_StdEPReq+0x156>
 800f1d8:	2b01      	cmp	r3, #1
 800f1da:	d03c      	beq.n	800f256 <USBD_StdEPReq+0xd4>
 800f1dc:	e123      	b.n	800f426 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	2b02      	cmp	r3, #2
 800f1e8:	d002      	beq.n	800f1f0 <USBD_StdEPReq+0x6e>
 800f1ea:	2b03      	cmp	r3, #3
 800f1ec:	d016      	beq.n	800f21c <USBD_StdEPReq+0x9a>
 800f1ee:	e02c      	b.n	800f24a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f1f0:	7bbb      	ldrb	r3, [r7, #14]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d00d      	beq.n	800f212 <USBD_StdEPReq+0x90>
 800f1f6:	7bbb      	ldrb	r3, [r7, #14]
 800f1f8:	2b80      	cmp	r3, #128	@ 0x80
 800f1fa:	d00a      	beq.n	800f212 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f1fc:	7bbb      	ldrb	r3, [r7, #14]
 800f1fe:	4619      	mov	r1, r3
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f001 f92d 	bl	8010460 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f206:	2180      	movs	r1, #128	@ 0x80
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f001 f929 	bl	8010460 <USBD_LL_StallEP>
 800f20e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f210:	e020      	b.n	800f254 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f212:	6839      	ldr	r1, [r7, #0]
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f000 fc6f 	bl	800faf8 <USBD_CtlError>
              break;
 800f21a:	e01b      	b.n	800f254 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	885b      	ldrh	r3, [r3, #2]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10e      	bne.n	800f242 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f224:	7bbb      	ldrb	r3, [r7, #14]
 800f226:	2b00      	cmp	r3, #0
 800f228:	d00b      	beq.n	800f242 <USBD_StdEPReq+0xc0>
 800f22a:	7bbb      	ldrb	r3, [r7, #14]
 800f22c:	2b80      	cmp	r3, #128	@ 0x80
 800f22e:	d008      	beq.n	800f242 <USBD_StdEPReq+0xc0>
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	88db      	ldrh	r3, [r3, #6]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d104      	bne.n	800f242 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f238:	7bbb      	ldrb	r3, [r7, #14]
 800f23a:	4619      	mov	r1, r3
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f001 f90f 	bl	8010460 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f000 fd23 	bl	800fc8e <USBD_CtlSendStatus>

              break;
 800f248:	e004      	b.n	800f254 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f24a:	6839      	ldr	r1, [r7, #0]
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f000 fc53 	bl	800faf8 <USBD_CtlError>
              break;
 800f252:	bf00      	nop
          }
          break;
 800f254:	e0ec      	b.n	800f430 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f25c:	b2db      	uxtb	r3, r3
 800f25e:	2b02      	cmp	r3, #2
 800f260:	d002      	beq.n	800f268 <USBD_StdEPReq+0xe6>
 800f262:	2b03      	cmp	r3, #3
 800f264:	d016      	beq.n	800f294 <USBD_StdEPReq+0x112>
 800f266:	e030      	b.n	800f2ca <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f268:	7bbb      	ldrb	r3, [r7, #14]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d00d      	beq.n	800f28a <USBD_StdEPReq+0x108>
 800f26e:	7bbb      	ldrb	r3, [r7, #14]
 800f270:	2b80      	cmp	r3, #128	@ 0x80
 800f272:	d00a      	beq.n	800f28a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f274:	7bbb      	ldrb	r3, [r7, #14]
 800f276:	4619      	mov	r1, r3
 800f278:	6878      	ldr	r0, [r7, #4]
 800f27a:	f001 f8f1 	bl	8010460 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f27e:	2180      	movs	r1, #128	@ 0x80
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f001 f8ed 	bl	8010460 <USBD_LL_StallEP>
 800f286:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f288:	e025      	b.n	800f2d6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f28a:	6839      	ldr	r1, [r7, #0]
 800f28c:	6878      	ldr	r0, [r7, #4]
 800f28e:	f000 fc33 	bl	800faf8 <USBD_CtlError>
              break;
 800f292:	e020      	b.n	800f2d6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	885b      	ldrh	r3, [r3, #2]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d11b      	bne.n	800f2d4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f29c:	7bbb      	ldrb	r3, [r7, #14]
 800f29e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d004      	beq.n	800f2b0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f2a6:	7bbb      	ldrb	r3, [r7, #14]
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f001 f8f7 	bl	801049e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f000 fcec 	bl	800fc8e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2bc:	689b      	ldr	r3, [r3, #8]
 800f2be:	6839      	ldr	r1, [r7, #0]
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	4798      	blx	r3
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f2c8:	e004      	b.n	800f2d4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f2ca:	6839      	ldr	r1, [r7, #0]
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f000 fc13 	bl	800faf8 <USBD_CtlError>
              break;
 800f2d2:	e000      	b.n	800f2d6 <USBD_StdEPReq+0x154>
              break;
 800f2d4:	bf00      	nop
          }
          break;
 800f2d6:	e0ab      	b.n	800f430 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	2b02      	cmp	r3, #2
 800f2e2:	d002      	beq.n	800f2ea <USBD_StdEPReq+0x168>
 800f2e4:	2b03      	cmp	r3, #3
 800f2e6:	d032      	beq.n	800f34e <USBD_StdEPReq+0x1cc>
 800f2e8:	e097      	b.n	800f41a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f2ea:	7bbb      	ldrb	r3, [r7, #14]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d007      	beq.n	800f300 <USBD_StdEPReq+0x17e>
 800f2f0:	7bbb      	ldrb	r3, [r7, #14]
 800f2f2:	2b80      	cmp	r3, #128	@ 0x80
 800f2f4:	d004      	beq.n	800f300 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f2f6:	6839      	ldr	r1, [r7, #0]
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f000 fbfd 	bl	800faf8 <USBD_CtlError>
                break;
 800f2fe:	e091      	b.n	800f424 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f304:	2b00      	cmp	r3, #0
 800f306:	da0b      	bge.n	800f320 <USBD_StdEPReq+0x19e>
 800f308:	7bbb      	ldrb	r3, [r7, #14]
 800f30a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f30e:	4613      	mov	r3, r2
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	4413      	add	r3, r2
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	3310      	adds	r3, #16
 800f318:	687a      	ldr	r2, [r7, #4]
 800f31a:	4413      	add	r3, r2
 800f31c:	3304      	adds	r3, #4
 800f31e:	e00b      	b.n	800f338 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f320:	7bbb      	ldrb	r3, [r7, #14]
 800f322:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f326:	4613      	mov	r3, r2
 800f328:	009b      	lsls	r3, r3, #2
 800f32a:	4413      	add	r3, r2
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f332:	687a      	ldr	r2, [r7, #4]
 800f334:	4413      	add	r3, r2
 800f336:	3304      	adds	r3, #4
 800f338:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	2200      	movs	r2, #0
 800f33e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f340:	68bb      	ldr	r3, [r7, #8]
 800f342:	2202      	movs	r2, #2
 800f344:	4619      	mov	r1, r3
 800f346:	6878      	ldr	r0, [r7, #4]
 800f348:	f000 fc47 	bl	800fbda <USBD_CtlSendData>
              break;
 800f34c:	e06a      	b.n	800f424 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f34e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f352:	2b00      	cmp	r3, #0
 800f354:	da11      	bge.n	800f37a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f356:	7bbb      	ldrb	r3, [r7, #14]
 800f358:	f003 020f 	and.w	r2, r3, #15
 800f35c:	6879      	ldr	r1, [r7, #4]
 800f35e:	4613      	mov	r3, r2
 800f360:	009b      	lsls	r3, r3, #2
 800f362:	4413      	add	r3, r2
 800f364:	009b      	lsls	r3, r3, #2
 800f366:	440b      	add	r3, r1
 800f368:	3324      	adds	r3, #36	@ 0x24
 800f36a:	881b      	ldrh	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d117      	bne.n	800f3a0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f370:	6839      	ldr	r1, [r7, #0]
 800f372:	6878      	ldr	r0, [r7, #4]
 800f374:	f000 fbc0 	bl	800faf8 <USBD_CtlError>
                  break;
 800f378:	e054      	b.n	800f424 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f37a:	7bbb      	ldrb	r3, [r7, #14]
 800f37c:	f003 020f 	and.w	r2, r3, #15
 800f380:	6879      	ldr	r1, [r7, #4]
 800f382:	4613      	mov	r3, r2
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	4413      	add	r3, r2
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	440b      	add	r3, r1
 800f38c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f390:	881b      	ldrh	r3, [r3, #0]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d104      	bne.n	800f3a0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f396:	6839      	ldr	r1, [r7, #0]
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 fbad 	bl	800faf8 <USBD_CtlError>
                  break;
 800f39e:	e041      	b.n	800f424 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	da0b      	bge.n	800f3c0 <USBD_StdEPReq+0x23e>
 800f3a8:	7bbb      	ldrb	r3, [r7, #14]
 800f3aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f3ae:	4613      	mov	r3, r2
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	4413      	add	r3, r2
 800f3b4:	009b      	lsls	r3, r3, #2
 800f3b6:	3310      	adds	r3, #16
 800f3b8:	687a      	ldr	r2, [r7, #4]
 800f3ba:	4413      	add	r3, r2
 800f3bc:	3304      	adds	r3, #4
 800f3be:	e00b      	b.n	800f3d8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f3c0:	7bbb      	ldrb	r3, [r7, #14]
 800f3c2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3c6:	4613      	mov	r3, r2
 800f3c8:	009b      	lsls	r3, r3, #2
 800f3ca:	4413      	add	r3, r2
 800f3cc:	009b      	lsls	r3, r3, #2
 800f3ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f3d2:	687a      	ldr	r2, [r7, #4]
 800f3d4:	4413      	add	r3, r2
 800f3d6:	3304      	adds	r3, #4
 800f3d8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f3da:	7bbb      	ldrb	r3, [r7, #14]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d002      	beq.n	800f3e6 <USBD_StdEPReq+0x264>
 800f3e0:	7bbb      	ldrb	r3, [r7, #14]
 800f3e2:	2b80      	cmp	r3, #128	@ 0x80
 800f3e4:	d103      	bne.n	800f3ee <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	601a      	str	r2, [r3, #0]
 800f3ec:	e00e      	b.n	800f40c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f3ee:	7bbb      	ldrb	r3, [r7, #14]
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f001 f872 	bl	80104dc <USBD_LL_IsStallEP>
 800f3f8:	4603      	mov	r3, r0
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d003      	beq.n	800f406 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f3fe:	68bb      	ldr	r3, [r7, #8]
 800f400:	2201      	movs	r2, #1
 800f402:	601a      	str	r2, [r3, #0]
 800f404:	e002      	b.n	800f40c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	2200      	movs	r2, #0
 800f40a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	2202      	movs	r2, #2
 800f410:	4619      	mov	r1, r3
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 fbe1 	bl	800fbda <USBD_CtlSendData>
              break;
 800f418:	e004      	b.n	800f424 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f41a:	6839      	ldr	r1, [r7, #0]
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f000 fb6b 	bl	800faf8 <USBD_CtlError>
              break;
 800f422:	bf00      	nop
          }
          break;
 800f424:	e004      	b.n	800f430 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f426:	6839      	ldr	r1, [r7, #0]
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f000 fb65 	bl	800faf8 <USBD_CtlError>
          break;
 800f42e:	bf00      	nop
      }
      break;
 800f430:	e004      	b.n	800f43c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f432:	6839      	ldr	r1, [r7, #0]
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f000 fb5f 	bl	800faf8 <USBD_CtlError>
      break;
 800f43a:	bf00      	nop
  }

  return ret;
 800f43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3710      	adds	r7, #16
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
	...

0800f448 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b084      	sub	sp, #16
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f452:	2300      	movs	r3, #0
 800f454:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f456:	2300      	movs	r3, #0
 800f458:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f45a:	2300      	movs	r3, #0
 800f45c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	885b      	ldrh	r3, [r3, #2]
 800f462:	0a1b      	lsrs	r3, r3, #8
 800f464:	b29b      	uxth	r3, r3
 800f466:	3b01      	subs	r3, #1
 800f468:	2b0e      	cmp	r3, #14
 800f46a:	f200 8152 	bhi.w	800f712 <USBD_GetDescriptor+0x2ca>
 800f46e:	a201      	add	r2, pc, #4	@ (adr r2, 800f474 <USBD_GetDescriptor+0x2c>)
 800f470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f474:	0800f4e5 	.word	0x0800f4e5
 800f478:	0800f4fd 	.word	0x0800f4fd
 800f47c:	0800f53d 	.word	0x0800f53d
 800f480:	0800f713 	.word	0x0800f713
 800f484:	0800f713 	.word	0x0800f713
 800f488:	0800f6b3 	.word	0x0800f6b3
 800f48c:	0800f6df 	.word	0x0800f6df
 800f490:	0800f713 	.word	0x0800f713
 800f494:	0800f713 	.word	0x0800f713
 800f498:	0800f713 	.word	0x0800f713
 800f49c:	0800f713 	.word	0x0800f713
 800f4a0:	0800f713 	.word	0x0800f713
 800f4a4:	0800f713 	.word	0x0800f713
 800f4a8:	0800f713 	.word	0x0800f713
 800f4ac:	0800f4b1 	.word	0x0800f4b1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4b6:	69db      	ldr	r3, [r3, #28]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d00b      	beq.n	800f4d4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4c2:	69db      	ldr	r3, [r3, #28]
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	7c12      	ldrb	r2, [r2, #16]
 800f4c8:	f107 0108 	add.w	r1, r7, #8
 800f4cc:	4610      	mov	r0, r2
 800f4ce:	4798      	blx	r3
 800f4d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f4d2:	e126      	b.n	800f722 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f4d4:	6839      	ldr	r1, [r7, #0]
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f000 fb0e 	bl	800faf8 <USBD_CtlError>
        err++;
 800f4dc:	7afb      	ldrb	r3, [r7, #11]
 800f4de:	3301      	adds	r3, #1
 800f4e0:	72fb      	strb	r3, [r7, #11]
      break;
 800f4e2:	e11e      	b.n	800f722 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	687a      	ldr	r2, [r7, #4]
 800f4ee:	7c12      	ldrb	r2, [r2, #16]
 800f4f0:	f107 0108 	add.w	r1, r7, #8
 800f4f4:	4610      	mov	r0, r2
 800f4f6:	4798      	blx	r3
 800f4f8:	60f8      	str	r0, [r7, #12]
      break;
 800f4fa:	e112      	b.n	800f722 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	7c1b      	ldrb	r3, [r3, #16]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d10d      	bne.n	800f520 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f50c:	f107 0208 	add.w	r2, r7, #8
 800f510:	4610      	mov	r0, r2
 800f512:	4798      	blx	r3
 800f514:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	3301      	adds	r3, #1
 800f51a:	2202      	movs	r2, #2
 800f51c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f51e:	e100      	b.n	800f722 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f528:	f107 0208 	add.w	r2, r7, #8
 800f52c:	4610      	mov	r0, r2
 800f52e:	4798      	blx	r3
 800f530:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	3301      	adds	r3, #1
 800f536:	2202      	movs	r2, #2
 800f538:	701a      	strb	r2, [r3, #0]
      break;
 800f53a:	e0f2      	b.n	800f722 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	885b      	ldrh	r3, [r3, #2]
 800f540:	b2db      	uxtb	r3, r3
 800f542:	2b05      	cmp	r3, #5
 800f544:	f200 80ac 	bhi.w	800f6a0 <USBD_GetDescriptor+0x258>
 800f548:	a201      	add	r2, pc, #4	@ (adr r2, 800f550 <USBD_GetDescriptor+0x108>)
 800f54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f54e:	bf00      	nop
 800f550:	0800f569 	.word	0x0800f569
 800f554:	0800f59d 	.word	0x0800f59d
 800f558:	0800f5d1 	.word	0x0800f5d1
 800f55c:	0800f605 	.word	0x0800f605
 800f560:	0800f639 	.word	0x0800f639
 800f564:	0800f66d 	.word	0x0800f66d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f56e:	685b      	ldr	r3, [r3, #4]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d00b      	beq.n	800f58c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f57a:	685b      	ldr	r3, [r3, #4]
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	7c12      	ldrb	r2, [r2, #16]
 800f580:	f107 0108 	add.w	r1, r7, #8
 800f584:	4610      	mov	r0, r2
 800f586:	4798      	blx	r3
 800f588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f58a:	e091      	b.n	800f6b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f58c:	6839      	ldr	r1, [r7, #0]
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f000 fab2 	bl	800faf8 <USBD_CtlError>
            err++;
 800f594:	7afb      	ldrb	r3, [r7, #11]
 800f596:	3301      	adds	r3, #1
 800f598:	72fb      	strb	r3, [r7, #11]
          break;
 800f59a:	e089      	b.n	800f6b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5a2:	689b      	ldr	r3, [r3, #8]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d00b      	beq.n	800f5c0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5ae:	689b      	ldr	r3, [r3, #8]
 800f5b0:	687a      	ldr	r2, [r7, #4]
 800f5b2:	7c12      	ldrb	r2, [r2, #16]
 800f5b4:	f107 0108 	add.w	r1, r7, #8
 800f5b8:	4610      	mov	r0, r2
 800f5ba:	4798      	blx	r3
 800f5bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5be:	e077      	b.n	800f6b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f5c0:	6839      	ldr	r1, [r7, #0]
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 fa98 	bl	800faf8 <USBD_CtlError>
            err++;
 800f5c8:	7afb      	ldrb	r3, [r7, #11]
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	72fb      	strb	r3, [r7, #11]
          break;
 800f5ce:	e06f      	b.n	800f6b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d00b      	beq.n	800f5f4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f5e2:	68db      	ldr	r3, [r3, #12]
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	7c12      	ldrb	r2, [r2, #16]
 800f5e8:	f107 0108 	add.w	r1, r7, #8
 800f5ec:	4610      	mov	r0, r2
 800f5ee:	4798      	blx	r3
 800f5f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5f2:	e05d      	b.n	800f6b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f5f4:	6839      	ldr	r1, [r7, #0]
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 fa7e 	bl	800faf8 <USBD_CtlError>
            err++;
 800f5fc:	7afb      	ldrb	r3, [r7, #11]
 800f5fe:	3301      	adds	r3, #1
 800f600:	72fb      	strb	r3, [r7, #11]
          break;
 800f602:	e055      	b.n	800f6b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f60a:	691b      	ldr	r3, [r3, #16]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d00b      	beq.n	800f628 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f616:	691b      	ldr	r3, [r3, #16]
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	7c12      	ldrb	r2, [r2, #16]
 800f61c:	f107 0108 	add.w	r1, r7, #8
 800f620:	4610      	mov	r0, r2
 800f622:	4798      	blx	r3
 800f624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f626:	e043      	b.n	800f6b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f628:	6839      	ldr	r1, [r7, #0]
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f000 fa64 	bl	800faf8 <USBD_CtlError>
            err++;
 800f630:	7afb      	ldrb	r3, [r7, #11]
 800f632:	3301      	adds	r3, #1
 800f634:	72fb      	strb	r3, [r7, #11]
          break;
 800f636:	e03b      	b.n	800f6b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f63e:	695b      	ldr	r3, [r3, #20]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d00b      	beq.n	800f65c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f64a:	695b      	ldr	r3, [r3, #20]
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	7c12      	ldrb	r2, [r2, #16]
 800f650:	f107 0108 	add.w	r1, r7, #8
 800f654:	4610      	mov	r0, r2
 800f656:	4798      	blx	r3
 800f658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f65a:	e029      	b.n	800f6b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f65c:	6839      	ldr	r1, [r7, #0]
 800f65e:	6878      	ldr	r0, [r7, #4]
 800f660:	f000 fa4a 	bl	800faf8 <USBD_CtlError>
            err++;
 800f664:	7afb      	ldrb	r3, [r7, #11]
 800f666:	3301      	adds	r3, #1
 800f668:	72fb      	strb	r3, [r7, #11]
          break;
 800f66a:	e021      	b.n	800f6b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f672:	699b      	ldr	r3, [r3, #24]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d00b      	beq.n	800f690 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f67e:	699b      	ldr	r3, [r3, #24]
 800f680:	687a      	ldr	r2, [r7, #4]
 800f682:	7c12      	ldrb	r2, [r2, #16]
 800f684:	f107 0108 	add.w	r1, r7, #8
 800f688:	4610      	mov	r0, r2
 800f68a:	4798      	blx	r3
 800f68c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f68e:	e00f      	b.n	800f6b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f690:	6839      	ldr	r1, [r7, #0]
 800f692:	6878      	ldr	r0, [r7, #4]
 800f694:	f000 fa30 	bl	800faf8 <USBD_CtlError>
            err++;
 800f698:	7afb      	ldrb	r3, [r7, #11]
 800f69a:	3301      	adds	r3, #1
 800f69c:	72fb      	strb	r3, [r7, #11]
          break;
 800f69e:	e007      	b.n	800f6b0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f6a0:	6839      	ldr	r1, [r7, #0]
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 fa28 	bl	800faf8 <USBD_CtlError>
          err++;
 800f6a8:	7afb      	ldrb	r3, [r7, #11]
 800f6aa:	3301      	adds	r3, #1
 800f6ac:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f6ae:	bf00      	nop
      }
      break;
 800f6b0:	e037      	b.n	800f722 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	7c1b      	ldrb	r3, [r3, #16]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d109      	bne.n	800f6ce <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f6c2:	f107 0208 	add.w	r2, r7, #8
 800f6c6:	4610      	mov	r0, r2
 800f6c8:	4798      	blx	r3
 800f6ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f6cc:	e029      	b.n	800f722 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f6ce:	6839      	ldr	r1, [r7, #0]
 800f6d0:	6878      	ldr	r0, [r7, #4]
 800f6d2:	f000 fa11 	bl	800faf8 <USBD_CtlError>
        err++;
 800f6d6:	7afb      	ldrb	r3, [r7, #11]
 800f6d8:	3301      	adds	r3, #1
 800f6da:	72fb      	strb	r3, [r7, #11]
      break;
 800f6dc:	e021      	b.n	800f722 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	7c1b      	ldrb	r3, [r3, #16]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d10d      	bne.n	800f702 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6ee:	f107 0208 	add.w	r2, r7, #8
 800f6f2:	4610      	mov	r0, r2
 800f6f4:	4798      	blx	r3
 800f6f6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	2207      	movs	r2, #7
 800f6fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f700:	e00f      	b.n	800f722 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f702:	6839      	ldr	r1, [r7, #0]
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f000 f9f7 	bl	800faf8 <USBD_CtlError>
        err++;
 800f70a:	7afb      	ldrb	r3, [r7, #11]
 800f70c:	3301      	adds	r3, #1
 800f70e:	72fb      	strb	r3, [r7, #11]
      break;
 800f710:	e007      	b.n	800f722 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f712:	6839      	ldr	r1, [r7, #0]
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f000 f9ef 	bl	800faf8 <USBD_CtlError>
      err++;
 800f71a:	7afb      	ldrb	r3, [r7, #11]
 800f71c:	3301      	adds	r3, #1
 800f71e:	72fb      	strb	r3, [r7, #11]
      break;
 800f720:	bf00      	nop
  }

  if (err != 0U)
 800f722:	7afb      	ldrb	r3, [r7, #11]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d11e      	bne.n	800f766 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	88db      	ldrh	r3, [r3, #6]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d016      	beq.n	800f75e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f730:	893b      	ldrh	r3, [r7, #8]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d00e      	beq.n	800f754 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	88da      	ldrh	r2, [r3, #6]
 800f73a:	893b      	ldrh	r3, [r7, #8]
 800f73c:	4293      	cmp	r3, r2
 800f73e:	bf28      	it	cs
 800f740:	4613      	movcs	r3, r2
 800f742:	b29b      	uxth	r3, r3
 800f744:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f746:	893b      	ldrh	r3, [r7, #8]
 800f748:	461a      	mov	r2, r3
 800f74a:	68f9      	ldr	r1, [r7, #12]
 800f74c:	6878      	ldr	r0, [r7, #4]
 800f74e:	f000 fa44 	bl	800fbda <USBD_CtlSendData>
 800f752:	e009      	b.n	800f768 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f754:	6839      	ldr	r1, [r7, #0]
 800f756:	6878      	ldr	r0, [r7, #4]
 800f758:	f000 f9ce 	bl	800faf8 <USBD_CtlError>
 800f75c:	e004      	b.n	800f768 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f000 fa95 	bl	800fc8e <USBD_CtlSendStatus>
 800f764:	e000      	b.n	800f768 <USBD_GetDescriptor+0x320>
    return;
 800f766:	bf00      	nop
  }
}
 800f768:	3710      	adds	r7, #16
 800f76a:	46bd      	mov	sp, r7
 800f76c:	bd80      	pop	{r7, pc}
 800f76e:	bf00      	nop

0800f770 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	889b      	ldrh	r3, [r3, #4]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d131      	bne.n	800f7e6 <USBD_SetAddress+0x76>
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	88db      	ldrh	r3, [r3, #6]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d12d      	bne.n	800f7e6 <USBD_SetAddress+0x76>
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	885b      	ldrh	r3, [r3, #2]
 800f78e:	2b7f      	cmp	r3, #127	@ 0x7f
 800f790:	d829      	bhi.n	800f7e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f792:	683b      	ldr	r3, [r7, #0]
 800f794:	885b      	ldrh	r3, [r3, #2]
 800f796:	b2db      	uxtb	r3, r3
 800f798:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f79c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7a4:	b2db      	uxtb	r3, r3
 800f7a6:	2b03      	cmp	r3, #3
 800f7a8:	d104      	bne.n	800f7b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f7aa:	6839      	ldr	r1, [r7, #0]
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f000 f9a3 	bl	800faf8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7b2:	e01d      	b.n	800f7f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	7bfa      	ldrb	r2, [r7, #15]
 800f7b8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f7bc:	7bfb      	ldrb	r3, [r7, #15]
 800f7be:	4619      	mov	r1, r3
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f000 feb7 	bl	8010534 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 fa61 	bl	800fc8e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f7cc:	7bfb      	ldrb	r3, [r7, #15]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d004      	beq.n	800f7dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2202      	movs	r2, #2
 800f7d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7da:	e009      	b.n	800f7f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	2201      	movs	r2, #1
 800f7e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7e4:	e004      	b.n	800f7f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f7e6:	6839      	ldr	r1, [r7, #0]
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f000 f985 	bl	800faf8 <USBD_CtlError>
  }
}
 800f7ee:	bf00      	nop
 800f7f0:	bf00      	nop
 800f7f2:	3710      	adds	r7, #16
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f802:	2300      	movs	r3, #0
 800f804:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	885b      	ldrh	r3, [r3, #2]
 800f80a:	b2da      	uxtb	r2, r3
 800f80c:	4b4c      	ldr	r3, [pc, #304]	@ (800f940 <USBD_SetConfig+0x148>)
 800f80e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f810:	4b4b      	ldr	r3, [pc, #300]	@ (800f940 <USBD_SetConfig+0x148>)
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	2b01      	cmp	r3, #1
 800f816:	d905      	bls.n	800f824 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f818:	6839      	ldr	r1, [r7, #0]
 800f81a:	6878      	ldr	r0, [r7, #4]
 800f81c:	f000 f96c 	bl	800faf8 <USBD_CtlError>
    return USBD_FAIL;
 800f820:	2303      	movs	r3, #3
 800f822:	e088      	b.n	800f936 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	2b02      	cmp	r3, #2
 800f82e:	d002      	beq.n	800f836 <USBD_SetConfig+0x3e>
 800f830:	2b03      	cmp	r3, #3
 800f832:	d025      	beq.n	800f880 <USBD_SetConfig+0x88>
 800f834:	e071      	b.n	800f91a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f836:	4b42      	ldr	r3, [pc, #264]	@ (800f940 <USBD_SetConfig+0x148>)
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d01c      	beq.n	800f878 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f83e:	4b40      	ldr	r3, [pc, #256]	@ (800f940 <USBD_SetConfig+0x148>)
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	461a      	mov	r2, r3
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f848:	4b3d      	ldr	r3, [pc, #244]	@ (800f940 <USBD_SetConfig+0x148>)
 800f84a:	781b      	ldrb	r3, [r3, #0]
 800f84c:	4619      	mov	r1, r3
 800f84e:	6878      	ldr	r0, [r7, #4]
 800f850:	f7ff f992 	bl	800eb78 <USBD_SetClassConfig>
 800f854:	4603      	mov	r3, r0
 800f856:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f858:	7bfb      	ldrb	r3, [r7, #15]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d004      	beq.n	800f868 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f85e:	6839      	ldr	r1, [r7, #0]
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f000 f949 	bl	800faf8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f866:	e065      	b.n	800f934 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f000 fa10 	bl	800fc8e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2203      	movs	r2, #3
 800f872:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f876:	e05d      	b.n	800f934 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 fa08 	bl	800fc8e <USBD_CtlSendStatus>
      break;
 800f87e:	e059      	b.n	800f934 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f880:	4b2f      	ldr	r3, [pc, #188]	@ (800f940 <USBD_SetConfig+0x148>)
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d112      	bne.n	800f8ae <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2202      	movs	r2, #2
 800f88c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f890:	4b2b      	ldr	r3, [pc, #172]	@ (800f940 <USBD_SetConfig+0x148>)
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	461a      	mov	r2, r3
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f89a:	4b29      	ldr	r3, [pc, #164]	@ (800f940 <USBD_SetConfig+0x148>)
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	4619      	mov	r1, r3
 800f8a0:	6878      	ldr	r0, [r7, #4]
 800f8a2:	f7ff f985 	bl	800ebb0 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f000 f9f1 	bl	800fc8e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f8ac:	e042      	b.n	800f934 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f8ae:	4b24      	ldr	r3, [pc, #144]	@ (800f940 <USBD_SetConfig+0x148>)
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	685b      	ldr	r3, [r3, #4]
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	d02a      	beq.n	800f912 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	685b      	ldr	r3, [r3, #4]
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	6878      	ldr	r0, [r7, #4]
 800f8c6:	f7ff f973 	bl	800ebb0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f8ca:	4b1d      	ldr	r3, [pc, #116]	@ (800f940 <USBD_SetConfig+0x148>)
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f8d4:	4b1a      	ldr	r3, [pc, #104]	@ (800f940 <USBD_SetConfig+0x148>)
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	4619      	mov	r1, r3
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f7ff f94c 	bl	800eb78 <USBD_SetClassConfig>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f8e4:	7bfb      	ldrb	r3, [r7, #15]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d00f      	beq.n	800f90a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f8ea:	6839      	ldr	r1, [r7, #0]
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f000 f903 	bl	800faf8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	f7ff f958 	bl	800ebb0 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2202      	movs	r2, #2
 800f904:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f908:	e014      	b.n	800f934 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f000 f9bf 	bl	800fc8e <USBD_CtlSendStatus>
      break;
 800f910:	e010      	b.n	800f934 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 f9bb 	bl	800fc8e <USBD_CtlSendStatus>
      break;
 800f918:	e00c      	b.n	800f934 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f91a:	6839      	ldr	r1, [r7, #0]
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f000 f8eb 	bl	800faf8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f922:	4b07      	ldr	r3, [pc, #28]	@ (800f940 <USBD_SetConfig+0x148>)
 800f924:	781b      	ldrb	r3, [r3, #0]
 800f926:	4619      	mov	r1, r3
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f7ff f941 	bl	800ebb0 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f92e:	2303      	movs	r3, #3
 800f930:	73fb      	strb	r3, [r7, #15]
      break;
 800f932:	bf00      	nop
  }

  return ret;
 800f934:	7bfb      	ldrb	r3, [r7, #15]
}
 800f936:	4618      	mov	r0, r3
 800f938:	3710      	adds	r7, #16
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop
 800f940:	20000b7c 	.word	0x20000b7c

0800f944 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	88db      	ldrh	r3, [r3, #6]
 800f952:	2b01      	cmp	r3, #1
 800f954:	d004      	beq.n	800f960 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f956:	6839      	ldr	r1, [r7, #0]
 800f958:	6878      	ldr	r0, [r7, #4]
 800f95a:	f000 f8cd 	bl	800faf8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f95e:	e023      	b.n	800f9a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f966:	b2db      	uxtb	r3, r3
 800f968:	2b02      	cmp	r3, #2
 800f96a:	dc02      	bgt.n	800f972 <USBD_GetConfig+0x2e>
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	dc03      	bgt.n	800f978 <USBD_GetConfig+0x34>
 800f970:	e015      	b.n	800f99e <USBD_GetConfig+0x5a>
 800f972:	2b03      	cmp	r3, #3
 800f974:	d00b      	beq.n	800f98e <USBD_GetConfig+0x4a>
 800f976:	e012      	b.n	800f99e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2200      	movs	r2, #0
 800f97c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	3308      	adds	r3, #8
 800f982:	2201      	movs	r2, #1
 800f984:	4619      	mov	r1, r3
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f000 f927 	bl	800fbda <USBD_CtlSendData>
        break;
 800f98c:	e00c      	b.n	800f9a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	3304      	adds	r3, #4
 800f992:	2201      	movs	r2, #1
 800f994:	4619      	mov	r1, r3
 800f996:	6878      	ldr	r0, [r7, #4]
 800f998:	f000 f91f 	bl	800fbda <USBD_CtlSendData>
        break;
 800f99c:	e004      	b.n	800f9a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f99e:	6839      	ldr	r1, [r7, #0]
 800f9a0:	6878      	ldr	r0, [r7, #4]
 800f9a2:	f000 f8a9 	bl	800faf8 <USBD_CtlError>
        break;
 800f9a6:	bf00      	nop
}
 800f9a8:	bf00      	nop
 800f9aa:	3708      	adds	r7, #8
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b082      	sub	sp, #8
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
 800f9b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9c0:	b2db      	uxtb	r3, r3
 800f9c2:	3b01      	subs	r3, #1
 800f9c4:	2b02      	cmp	r3, #2
 800f9c6:	d81e      	bhi.n	800fa06 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	88db      	ldrh	r3, [r3, #6]
 800f9cc:	2b02      	cmp	r3, #2
 800f9ce:	d004      	beq.n	800f9da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f9d0:	6839      	ldr	r1, [r7, #0]
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 f890 	bl	800faf8 <USBD_CtlError>
        break;
 800f9d8:	e01a      	b.n	800fa10 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	2201      	movs	r2, #1
 800f9de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d005      	beq.n	800f9f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	68db      	ldr	r3, [r3, #12]
 800f9ee:	f043 0202 	orr.w	r2, r3, #2
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	330c      	adds	r3, #12
 800f9fa:	2202      	movs	r2, #2
 800f9fc:	4619      	mov	r1, r3
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f000 f8eb 	bl	800fbda <USBD_CtlSendData>
      break;
 800fa04:	e004      	b.n	800fa10 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fa06:	6839      	ldr	r1, [r7, #0]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 f875 	bl	800faf8 <USBD_CtlError>
      break;
 800fa0e:	bf00      	nop
  }
}
 800fa10:	bf00      	nop
 800fa12:	3708      	adds	r7, #8
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
 800fa20:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	885b      	ldrh	r3, [r3, #2]
 800fa26:	2b01      	cmp	r3, #1
 800fa28:	d106      	bne.n	800fa38 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f000 f92b 	bl	800fc8e <USBD_CtlSendStatus>
  }
}
 800fa38:	bf00      	nop
 800fa3a:	3708      	adds	r7, #8
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}

0800fa40 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa50:	b2db      	uxtb	r3, r3
 800fa52:	3b01      	subs	r3, #1
 800fa54:	2b02      	cmp	r3, #2
 800fa56:	d80b      	bhi.n	800fa70 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	885b      	ldrh	r3, [r3, #2]
 800fa5c:	2b01      	cmp	r3, #1
 800fa5e:	d10c      	bne.n	800fa7a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2200      	movs	r2, #0
 800fa64:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fa68:	6878      	ldr	r0, [r7, #4]
 800fa6a:	f000 f910 	bl	800fc8e <USBD_CtlSendStatus>
      }
      break;
 800fa6e:	e004      	b.n	800fa7a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fa70:	6839      	ldr	r1, [r7, #0]
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f000 f840 	bl	800faf8 <USBD_CtlError>
      break;
 800fa78:	e000      	b.n	800fa7c <USBD_ClrFeature+0x3c>
      break;
 800fa7a:	bf00      	nop
  }
}
 800fa7c:	bf00      	nop
 800fa7e:	3708      	adds	r7, #8
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b084      	sub	sp, #16
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
 800fa8c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	781a      	ldrb	r2, [r3, #0]
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	3301      	adds	r3, #1
 800fa9e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	781a      	ldrb	r2, [r3, #0]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	3301      	adds	r3, #1
 800faac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800faae:	68f8      	ldr	r0, [r7, #12]
 800fab0:	f7ff fa92 	bl	800efd8 <SWAPBYTE>
 800fab4:	4603      	mov	r3, r0
 800fab6:	461a      	mov	r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	3301      	adds	r3, #1
 800fac0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	3301      	adds	r3, #1
 800fac6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fac8:	68f8      	ldr	r0, [r7, #12]
 800faca:	f7ff fa85 	bl	800efd8 <SWAPBYTE>
 800face:	4603      	mov	r3, r0
 800fad0:	461a      	mov	r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	3301      	adds	r3, #1
 800fada:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	3301      	adds	r3, #1
 800fae0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fae2:	68f8      	ldr	r0, [r7, #12]
 800fae4:	f7ff fa78 	bl	800efd8 <SWAPBYTE>
 800fae8:	4603      	mov	r3, r0
 800faea:	461a      	mov	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	80da      	strh	r2, [r3, #6]
}
 800faf0:	bf00      	nop
 800faf2:	3710      	adds	r7, #16
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb02:	2180      	movs	r1, #128	@ 0x80
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f000 fcab 	bl	8010460 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fb0a:	2100      	movs	r1, #0
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f000 fca7 	bl	8010460 <USBD_LL_StallEP>
}
 800fb12:	bf00      	nop
 800fb14:	3708      	adds	r7, #8
 800fb16:	46bd      	mov	sp, r7
 800fb18:	bd80      	pop	{r7, pc}

0800fb1a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fb1a:	b580      	push	{r7, lr}
 800fb1c:	b086      	sub	sp, #24
 800fb1e:	af00      	add	r7, sp, #0
 800fb20:	60f8      	str	r0, [r7, #12]
 800fb22:	60b9      	str	r1, [r7, #8]
 800fb24:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fb26:	2300      	movs	r3, #0
 800fb28:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d036      	beq.n	800fb9e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fb34:	6938      	ldr	r0, [r7, #16]
 800fb36:	f000 f836 	bl	800fba6 <USBD_GetLen>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	b29b      	uxth	r3, r3
 800fb40:	005b      	lsls	r3, r3, #1
 800fb42:	b29a      	uxth	r2, r3
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fb48:	7dfb      	ldrb	r3, [r7, #23]
 800fb4a:	68ba      	ldr	r2, [r7, #8]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	687a      	ldr	r2, [r7, #4]
 800fb50:	7812      	ldrb	r2, [r2, #0]
 800fb52:	701a      	strb	r2, [r3, #0]
  idx++;
 800fb54:	7dfb      	ldrb	r3, [r7, #23]
 800fb56:	3301      	adds	r3, #1
 800fb58:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fb5a:	7dfb      	ldrb	r3, [r7, #23]
 800fb5c:	68ba      	ldr	r2, [r7, #8]
 800fb5e:	4413      	add	r3, r2
 800fb60:	2203      	movs	r2, #3
 800fb62:	701a      	strb	r2, [r3, #0]
  idx++;
 800fb64:	7dfb      	ldrb	r3, [r7, #23]
 800fb66:	3301      	adds	r3, #1
 800fb68:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fb6a:	e013      	b.n	800fb94 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fb6c:	7dfb      	ldrb	r3, [r7, #23]
 800fb6e:	68ba      	ldr	r2, [r7, #8]
 800fb70:	4413      	add	r3, r2
 800fb72:	693a      	ldr	r2, [r7, #16]
 800fb74:	7812      	ldrb	r2, [r2, #0]
 800fb76:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	613b      	str	r3, [r7, #16]
    idx++;
 800fb7e:	7dfb      	ldrb	r3, [r7, #23]
 800fb80:	3301      	adds	r3, #1
 800fb82:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fb84:	7dfb      	ldrb	r3, [r7, #23]
 800fb86:	68ba      	ldr	r2, [r7, #8]
 800fb88:	4413      	add	r3, r2
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	701a      	strb	r2, [r3, #0]
    idx++;
 800fb8e:	7dfb      	ldrb	r3, [r7, #23]
 800fb90:	3301      	adds	r3, #1
 800fb92:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fb94:	693b      	ldr	r3, [r7, #16]
 800fb96:	781b      	ldrb	r3, [r3, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d1e7      	bne.n	800fb6c <USBD_GetString+0x52>
 800fb9c:	e000      	b.n	800fba0 <USBD_GetString+0x86>
    return;
 800fb9e:	bf00      	nop
  }
}
 800fba0:	3718      	adds	r7, #24
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}

0800fba6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fba6:	b480      	push	{r7}
 800fba8:	b085      	sub	sp, #20
 800fbaa:	af00      	add	r7, sp, #0
 800fbac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fbb6:	e005      	b.n	800fbc4 <USBD_GetLen+0x1e>
  {
    len++;
 800fbb8:	7bfb      	ldrb	r3, [r7, #15]
 800fbba:	3301      	adds	r3, #1
 800fbbc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fbbe:	68bb      	ldr	r3, [r7, #8]
 800fbc0:	3301      	adds	r3, #1
 800fbc2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d1f5      	bne.n	800fbb8 <USBD_GetLen+0x12>
  }

  return len;
 800fbcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3714      	adds	r7, #20
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr

0800fbda <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b084      	sub	sp, #16
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	60f8      	str	r0, [r7, #12]
 800fbe2:	60b9      	str	r1, [r7, #8]
 800fbe4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	2202      	movs	r2, #2
 800fbea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	687a      	ldr	r2, [r7, #4]
 800fbf2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	687a      	ldr	r2, [r7, #4]
 800fbf8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	68ba      	ldr	r2, [r7, #8]
 800fbfe:	2100      	movs	r1, #0
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	f000 fcb6 	bl	8010572 <USBD_LL_Transmit>

  return USBD_OK;
 800fc06:	2300      	movs	r3, #0
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3710      	adds	r7, #16
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bd80      	pop	{r7, pc}

0800fc10 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b084      	sub	sp, #16
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	60f8      	str	r0, [r7, #12]
 800fc18:	60b9      	str	r1, [r7, #8]
 800fc1a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	68ba      	ldr	r2, [r7, #8]
 800fc20:	2100      	movs	r1, #0
 800fc22:	68f8      	ldr	r0, [r7, #12]
 800fc24:	f000 fca5 	bl	8010572 <USBD_LL_Transmit>

  return USBD_OK;
 800fc28:	2300      	movs	r3, #0
}
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	3710      	adds	r7, #16
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}

0800fc32 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fc32:	b580      	push	{r7, lr}
 800fc34:	b084      	sub	sp, #16
 800fc36:	af00      	add	r7, sp, #0
 800fc38:	60f8      	str	r0, [r7, #12]
 800fc3a:	60b9      	str	r1, [r7, #8]
 800fc3c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2203      	movs	r2, #3
 800fc42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	687a      	ldr	r2, [r7, #4]
 800fc52:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	68ba      	ldr	r2, [r7, #8]
 800fc5a:	2100      	movs	r1, #0
 800fc5c:	68f8      	ldr	r0, [r7, #12]
 800fc5e:	f000 fca9 	bl	80105b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fc62:	2300      	movs	r3, #0
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3710      	adds	r7, #16
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bd80      	pop	{r7, pc}

0800fc6c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b084      	sub	sp, #16
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	60f8      	str	r0, [r7, #12]
 800fc74:	60b9      	str	r1, [r7, #8]
 800fc76:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	68ba      	ldr	r2, [r7, #8]
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	68f8      	ldr	r0, [r7, #12]
 800fc80:	f000 fc98 	bl	80105b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fc84:	2300      	movs	r3, #0
}
 800fc86:	4618      	mov	r0, r3
 800fc88:	3710      	adds	r7, #16
 800fc8a:	46bd      	mov	sp, r7
 800fc8c:	bd80      	pop	{r7, pc}

0800fc8e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b082      	sub	sp, #8
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	2204      	movs	r2, #4
 800fc9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fc9e:	2300      	movs	r3, #0
 800fca0:	2200      	movs	r2, #0
 800fca2:	2100      	movs	r1, #0
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f000 fc64 	bl	8010572 <USBD_LL_Transmit>

  return USBD_OK;
 800fcaa:	2300      	movs	r3, #0
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2205      	movs	r2, #5
 800fcc0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	2100      	movs	r1, #0
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 fc72 	bl	80105b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fcd0:	2300      	movs	r3, #0
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3708      	adds	r7, #8
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
	...

0800fcdc <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800fce0:	2200      	movs	r2, #0
 800fce2:	4912      	ldr	r1, [pc, #72]	@ (800fd2c <MX_USB_Device_Init+0x50>)
 800fce4:	4812      	ldr	r0, [pc, #72]	@ (800fd30 <MX_USB_Device_Init+0x54>)
 800fce6:	f7fe fed9 	bl	800ea9c <USBD_Init>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d001      	beq.n	800fcf4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800fcf0:	f7f3 fc76 	bl	80035e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800fcf4:	490f      	ldr	r1, [pc, #60]	@ (800fd34 <MX_USB_Device_Init+0x58>)
 800fcf6:	480e      	ldr	r0, [pc, #56]	@ (800fd30 <MX_USB_Device_Init+0x54>)
 800fcf8:	f7fe ff00 	bl	800eafc <USBD_RegisterClass>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d001      	beq.n	800fd06 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800fd02:	f7f3 fc6d 	bl	80035e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800fd06:	490c      	ldr	r1, [pc, #48]	@ (800fd38 <MX_USB_Device_Init+0x5c>)
 800fd08:	4809      	ldr	r0, [pc, #36]	@ (800fd30 <MX_USB_Device_Init+0x54>)
 800fd0a:	f7fe fe21 	bl	800e950 <USBD_CDC_RegisterInterface>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d001      	beq.n	800fd18 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800fd14:	f7f3 fc64 	bl	80035e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800fd18:	4805      	ldr	r0, [pc, #20]	@ (800fd30 <MX_USB_Device_Init+0x54>)
 800fd1a:	f7fe ff16 	bl	800eb4a <USBD_Start>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d001      	beq.n	800fd28 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800fd24:	f7f3 fc5c 	bl	80035e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800fd28:	bf00      	nop
 800fd2a:	bd80      	pop	{r7, pc}
 800fd2c:	2000015c 	.word	0x2000015c
 800fd30:	20000b80 	.word	0x20000b80
 800fd34:	20000044 	.word	0x20000044
 800fd38:	20000148 	.word	0x20000148

0800fd3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fd40:	2200      	movs	r2, #0
 800fd42:	4905      	ldr	r1, [pc, #20]	@ (800fd58 <CDC_Init_FS+0x1c>)
 800fd44:	4805      	ldr	r0, [pc, #20]	@ (800fd5c <CDC_Init_FS+0x20>)
 800fd46:	f7fe fe18 	bl	800e97a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fd4a:	4905      	ldr	r1, [pc, #20]	@ (800fd60 <CDC_Init_FS+0x24>)
 800fd4c:	4803      	ldr	r0, [pc, #12]	@ (800fd5c <CDC_Init_FS+0x20>)
 800fd4e:	f7fe fe32 	bl	800e9b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fd52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	bd80      	pop	{r7, pc}
 800fd58:	20001650 	.word	0x20001650
 800fd5c:	20000b80 	.word	0x20000b80
 800fd60:	20000e50 	.word	0x20000e50

0800fd64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fd64:	b480      	push	{r7}
 800fd66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fd68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd72:	4770      	bx	lr

0800fd74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b083      	sub	sp, #12
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	6039      	str	r1, [r7, #0]
 800fd7e:	71fb      	strb	r3, [r7, #7]
 800fd80:	4613      	mov	r3, r2
 800fd82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fd84:	79fb      	ldrb	r3, [r7, #7]
 800fd86:	2b23      	cmp	r3, #35	@ 0x23
 800fd88:	d84a      	bhi.n	800fe20 <CDC_Control_FS+0xac>
 800fd8a:	a201      	add	r2, pc, #4	@ (adr r2, 800fd90 <CDC_Control_FS+0x1c>)
 800fd8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd90:	0800fe21 	.word	0x0800fe21
 800fd94:	0800fe21 	.word	0x0800fe21
 800fd98:	0800fe21 	.word	0x0800fe21
 800fd9c:	0800fe21 	.word	0x0800fe21
 800fda0:	0800fe21 	.word	0x0800fe21
 800fda4:	0800fe21 	.word	0x0800fe21
 800fda8:	0800fe21 	.word	0x0800fe21
 800fdac:	0800fe21 	.word	0x0800fe21
 800fdb0:	0800fe21 	.word	0x0800fe21
 800fdb4:	0800fe21 	.word	0x0800fe21
 800fdb8:	0800fe21 	.word	0x0800fe21
 800fdbc:	0800fe21 	.word	0x0800fe21
 800fdc0:	0800fe21 	.word	0x0800fe21
 800fdc4:	0800fe21 	.word	0x0800fe21
 800fdc8:	0800fe21 	.word	0x0800fe21
 800fdcc:	0800fe21 	.word	0x0800fe21
 800fdd0:	0800fe21 	.word	0x0800fe21
 800fdd4:	0800fe21 	.word	0x0800fe21
 800fdd8:	0800fe21 	.word	0x0800fe21
 800fddc:	0800fe21 	.word	0x0800fe21
 800fde0:	0800fe21 	.word	0x0800fe21
 800fde4:	0800fe21 	.word	0x0800fe21
 800fde8:	0800fe21 	.word	0x0800fe21
 800fdec:	0800fe21 	.word	0x0800fe21
 800fdf0:	0800fe21 	.word	0x0800fe21
 800fdf4:	0800fe21 	.word	0x0800fe21
 800fdf8:	0800fe21 	.word	0x0800fe21
 800fdfc:	0800fe21 	.word	0x0800fe21
 800fe00:	0800fe21 	.word	0x0800fe21
 800fe04:	0800fe21 	.word	0x0800fe21
 800fe08:	0800fe21 	.word	0x0800fe21
 800fe0c:	0800fe21 	.word	0x0800fe21
 800fe10:	0800fe21 	.word	0x0800fe21
 800fe14:	0800fe21 	.word	0x0800fe21
 800fe18:	0800fe21 	.word	0x0800fe21
 800fe1c:	0800fe21 	.word	0x0800fe21
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fe20:	bf00      	nop
  }

  return (USBD_OK);
 800fe22:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	370c      	adds	r7, #12
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2e:	4770      	bx	lr

0800fe30 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > sizeof(USB_RX_Buffer)) {
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fe42:	d903      	bls.n	800fe4c <CDC_Receive_FS+0x1c>
	          *Len = sizeof(USB_RX_Buffer);  // Prevent buffer overflow
 800fe44:	683b      	ldr	r3, [r7, #0]
 800fe46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fe4a:	601a      	str	r2, [r3, #0]
	      }
	      memcpy(USB_RX_Buffer, Buf, *Len);
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	461a      	mov	r2, r3
 800fe52:	6879      	ldr	r1, [r7, #4]
 800fe54:	4808      	ldr	r0, [pc, #32]	@ (800fe78 <CDC_Receive_FS+0x48>)
 800fe56:	f001 fcb0 	bl	80117ba <memcpy>

	      dataReceivedFlag = 1;
 800fe5a:	4b08      	ldr	r3, [pc, #32]	@ (800fe7c <CDC_Receive_FS+0x4c>)
 800fe5c:	2201      	movs	r2, #1
 800fe5e:	601a      	str	r2, [r3, #0]

	      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fe60:	6879      	ldr	r1, [r7, #4]
 800fe62:	4807      	ldr	r0, [pc, #28]	@ (800fe80 <CDC_Receive_FS+0x50>)
 800fe64:	f7fe fda7 	bl	800e9b6 <USBD_CDC_SetRxBuffer>
	      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fe68:	4805      	ldr	r0, [pc, #20]	@ (800fe80 <CDC_Receive_FS+0x50>)
 800fe6a:	f7fe fded 	bl	800ea48 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fe6e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3708      	adds	r7, #8
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}
 800fe78:	20000a88 	.word	0x20000a88
 800fe7c:	20000b48 	.word	0x20000b48
 800fe80:	20000b80 	.word	0x20000b80

0800fe84 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
 800fe8c:	460b      	mov	r3, r1
 800fe8e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fe90:	2300      	movs	r3, #0
 800fe92:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fe94:	4b0d      	ldr	r3, [pc, #52]	@ (800fecc <CDC_Transmit_FS+0x48>)
 800fe96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800fe9a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d001      	beq.n	800feaa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800fea6:	2301      	movs	r3, #1
 800fea8:	e00b      	b.n	800fec2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800feaa:	887b      	ldrh	r3, [r7, #2]
 800feac:	461a      	mov	r2, r3
 800feae:	6879      	ldr	r1, [r7, #4]
 800feb0:	4806      	ldr	r0, [pc, #24]	@ (800fecc <CDC_Transmit_FS+0x48>)
 800feb2:	f7fe fd62 	bl	800e97a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800feb6:	4805      	ldr	r0, [pc, #20]	@ (800fecc <CDC_Transmit_FS+0x48>)
 800feb8:	f7fe fd96 	bl	800e9e8 <USBD_CDC_TransmitPacket>
 800febc:	4603      	mov	r3, r0
 800febe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fec2:	4618      	mov	r0, r3
 800fec4:	3710      	adds	r7, #16
 800fec6:	46bd      	mov	sp, r7
 800fec8:	bd80      	pop	{r7, pc}
 800feca:	bf00      	nop
 800fecc:	20000b80 	.word	0x20000b80

0800fed0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fed0:	b480      	push	{r7}
 800fed2:	b087      	sub	sp, #28
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	60b9      	str	r1, [r7, #8]
 800feda:	4613      	mov	r3, r2
 800fedc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fede:	2300      	movs	r3, #0
 800fee0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800fee2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	371c      	adds	r7, #28
 800feea:	46bd      	mov	sp, r7
 800feec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef0:	4770      	bx	lr
	...

0800fef4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	4603      	mov	r3, r0
 800fefc:	6039      	str	r1, [r7, #0]
 800fefe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ff00:	683b      	ldr	r3, [r7, #0]
 800ff02:	2212      	movs	r2, #18
 800ff04:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ff06:	4b03      	ldr	r3, [pc, #12]	@ (800ff14 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ff08:	4618      	mov	r0, r3
 800ff0a:	370c      	adds	r7, #12
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr
 800ff14:	2000017c 	.word	0x2000017c

0800ff18 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	4603      	mov	r3, r0
 800ff20:	6039      	str	r1, [r7, #0]
 800ff22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	2204      	movs	r2, #4
 800ff28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ff2a:	4b03      	ldr	r3, [pc, #12]	@ (800ff38 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr
 800ff38:	20000190 	.word	0x20000190

0800ff3c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b082      	sub	sp, #8
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	4603      	mov	r3, r0
 800ff44:	6039      	str	r1, [r7, #0]
 800ff46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff48:	79fb      	ldrb	r3, [r7, #7]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d105      	bne.n	800ff5a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ff4e:	683a      	ldr	r2, [r7, #0]
 800ff50:	4907      	ldr	r1, [pc, #28]	@ (800ff70 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ff52:	4808      	ldr	r0, [pc, #32]	@ (800ff74 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ff54:	f7ff fde1 	bl	800fb1a <USBD_GetString>
 800ff58:	e004      	b.n	800ff64 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ff5a:	683a      	ldr	r2, [r7, #0]
 800ff5c:	4904      	ldr	r1, [pc, #16]	@ (800ff70 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ff5e:	4805      	ldr	r0, [pc, #20]	@ (800ff74 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ff60:	f7ff fddb 	bl	800fb1a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff64:	4b02      	ldr	r3, [pc, #8]	@ (800ff70 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3708      	adds	r7, #8
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	20001e50 	.word	0x20001e50
 800ff74:	08016db4 	.word	0x08016db4

0800ff78 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	4603      	mov	r3, r0
 800ff80:	6039      	str	r1, [r7, #0]
 800ff82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ff84:	683a      	ldr	r2, [r7, #0]
 800ff86:	4904      	ldr	r1, [pc, #16]	@ (800ff98 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ff88:	4804      	ldr	r0, [pc, #16]	@ (800ff9c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ff8a:	f7ff fdc6 	bl	800fb1a <USBD_GetString>
  return USBD_StrDesc;
 800ff8e:	4b02      	ldr	r3, [pc, #8]	@ (800ff98 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	20001e50 	.word	0x20001e50
 800ff9c:	08016dcc 	.word	0x08016dcc

0800ffa0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b082      	sub	sp, #8
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	6039      	str	r1, [r7, #0]
 800ffaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ffac:	683b      	ldr	r3, [r7, #0]
 800ffae:	221a      	movs	r2, #26
 800ffb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ffb2:	f000 f843 	bl	801003c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ffb6:	4b02      	ldr	r3, [pc, #8]	@ (800ffc0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3708      	adds	r7, #8
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}
 800ffc0:	20000194 	.word	0x20000194

0800ffc4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	4603      	mov	r3, r0
 800ffcc:	6039      	str	r1, [r7, #0]
 800ffce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ffd0:	79fb      	ldrb	r3, [r7, #7]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d105      	bne.n	800ffe2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ffd6:	683a      	ldr	r2, [r7, #0]
 800ffd8:	4907      	ldr	r1, [pc, #28]	@ (800fff8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ffda:	4808      	ldr	r0, [pc, #32]	@ (800fffc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ffdc:	f7ff fd9d 	bl	800fb1a <USBD_GetString>
 800ffe0:	e004      	b.n	800ffec <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ffe2:	683a      	ldr	r2, [r7, #0]
 800ffe4:	4904      	ldr	r1, [pc, #16]	@ (800fff8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ffe6:	4805      	ldr	r0, [pc, #20]	@ (800fffc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ffe8:	f7ff fd97 	bl	800fb1a <USBD_GetString>
  }
  return USBD_StrDesc;
 800ffec:	4b02      	ldr	r3, [pc, #8]	@ (800fff8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3708      	adds	r7, #8
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}
 800fff6:	bf00      	nop
 800fff8:	20001e50 	.word	0x20001e50
 800fffc:	08016de0 	.word	0x08016de0

08010000 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	4603      	mov	r3, r0
 8010008:	6039      	str	r1, [r7, #0]
 801000a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801000c:	79fb      	ldrb	r3, [r7, #7]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d105      	bne.n	801001e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8010012:	683a      	ldr	r2, [r7, #0]
 8010014:	4907      	ldr	r1, [pc, #28]	@ (8010034 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010016:	4808      	ldr	r0, [pc, #32]	@ (8010038 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010018:	f7ff fd7f 	bl	800fb1a <USBD_GetString>
 801001c:	e004      	b.n	8010028 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801001e:	683a      	ldr	r2, [r7, #0]
 8010020:	4904      	ldr	r1, [pc, #16]	@ (8010034 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8010022:	4805      	ldr	r0, [pc, #20]	@ (8010038 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8010024:	f7ff fd79 	bl	800fb1a <USBD_GetString>
  }
  return USBD_StrDesc;
 8010028:	4b02      	ldr	r3, [pc, #8]	@ (8010034 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801002a:	4618      	mov	r0, r3
 801002c:	3708      	adds	r7, #8
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
 8010032:	bf00      	nop
 8010034:	20001e50 	.word	0x20001e50
 8010038:	08016dec 	.word	0x08016dec

0801003c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b084      	sub	sp, #16
 8010040:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010042:	4b0f      	ldr	r3, [pc, #60]	@ (8010080 <Get_SerialNum+0x44>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010048:	4b0e      	ldr	r3, [pc, #56]	@ (8010084 <Get_SerialNum+0x48>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801004e:	4b0e      	ldr	r3, [pc, #56]	@ (8010088 <Get_SerialNum+0x4c>)
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010054:	68fa      	ldr	r2, [r7, #12]
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	4413      	add	r3, r2
 801005a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d009      	beq.n	8010076 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010062:	2208      	movs	r2, #8
 8010064:	4909      	ldr	r1, [pc, #36]	@ (801008c <Get_SerialNum+0x50>)
 8010066:	68f8      	ldr	r0, [r7, #12]
 8010068:	f000 f814 	bl	8010094 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801006c:	2204      	movs	r2, #4
 801006e:	4908      	ldr	r1, [pc, #32]	@ (8010090 <Get_SerialNum+0x54>)
 8010070:	68b8      	ldr	r0, [r7, #8]
 8010072:	f000 f80f 	bl	8010094 <IntToUnicode>
  }
}
 8010076:	bf00      	nop
 8010078:	3710      	adds	r7, #16
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}
 801007e:	bf00      	nop
 8010080:	1fff7590 	.word	0x1fff7590
 8010084:	1fff7594 	.word	0x1fff7594
 8010088:	1fff7598 	.word	0x1fff7598
 801008c:	20000196 	.word	0x20000196
 8010090:	200001a6 	.word	0x200001a6

08010094 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010094:	b480      	push	{r7}
 8010096:	b087      	sub	sp, #28
 8010098:	af00      	add	r7, sp, #0
 801009a:	60f8      	str	r0, [r7, #12]
 801009c:	60b9      	str	r1, [r7, #8]
 801009e:	4613      	mov	r3, r2
 80100a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80100a2:	2300      	movs	r3, #0
 80100a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80100a6:	2300      	movs	r3, #0
 80100a8:	75fb      	strb	r3, [r7, #23]
 80100aa:	e027      	b.n	80100fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	0f1b      	lsrs	r3, r3, #28
 80100b0:	2b09      	cmp	r3, #9
 80100b2:	d80b      	bhi.n	80100cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	0f1b      	lsrs	r3, r3, #28
 80100b8:	b2da      	uxtb	r2, r3
 80100ba:	7dfb      	ldrb	r3, [r7, #23]
 80100bc:	005b      	lsls	r3, r3, #1
 80100be:	4619      	mov	r1, r3
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	440b      	add	r3, r1
 80100c4:	3230      	adds	r2, #48	@ 0x30
 80100c6:	b2d2      	uxtb	r2, r2
 80100c8:	701a      	strb	r2, [r3, #0]
 80100ca:	e00a      	b.n	80100e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	0f1b      	lsrs	r3, r3, #28
 80100d0:	b2da      	uxtb	r2, r3
 80100d2:	7dfb      	ldrb	r3, [r7, #23]
 80100d4:	005b      	lsls	r3, r3, #1
 80100d6:	4619      	mov	r1, r3
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	440b      	add	r3, r1
 80100dc:	3237      	adds	r2, #55	@ 0x37
 80100de:	b2d2      	uxtb	r2, r2
 80100e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	011b      	lsls	r3, r3, #4
 80100e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80100e8:	7dfb      	ldrb	r3, [r7, #23]
 80100ea:	005b      	lsls	r3, r3, #1
 80100ec:	3301      	adds	r3, #1
 80100ee:	68ba      	ldr	r2, [r7, #8]
 80100f0:	4413      	add	r3, r2
 80100f2:	2200      	movs	r2, #0
 80100f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80100f6:	7dfb      	ldrb	r3, [r7, #23]
 80100f8:	3301      	adds	r3, #1
 80100fa:	75fb      	strb	r3, [r7, #23]
 80100fc:	7dfa      	ldrb	r2, [r7, #23]
 80100fe:	79fb      	ldrb	r3, [r7, #7]
 8010100:	429a      	cmp	r2, r3
 8010102:	d3d3      	bcc.n	80100ac <IntToUnicode+0x18>
  }
}
 8010104:	bf00      	nop
 8010106:	bf00      	nop
 8010108:	371c      	adds	r7, #28
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr
	...

08010114 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b098      	sub	sp, #96	@ 0x60
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 801011c:	f107 030c 	add.w	r3, r7, #12
 8010120:	2254      	movs	r2, #84	@ 0x54
 8010122:	2100      	movs	r1, #0
 8010124:	4618      	mov	r0, r3
 8010126:	f001 fab6 	bl	8011696 <memset>
  if(pcdHandle->Instance==USB)
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	4a15      	ldr	r2, [pc, #84]	@ (8010184 <HAL_PCD_MspInit+0x70>)
 8010130:	4293      	cmp	r3, r2
 8010132:	d122      	bne.n	801017a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8010134:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8010138:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801013a:	2300      	movs	r3, #0
 801013c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801013e:	f107 030c 	add.w	r3, r7, #12
 8010142:	4618      	mov	r0, r3
 8010144:	f7f9 f8c6 	bl	80092d4 <HAL_RCCEx_PeriphCLKConfig>
 8010148:	4603      	mov	r3, r0
 801014a:	2b00      	cmp	r3, #0
 801014c:	d001      	beq.n	8010152 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801014e:	f7f3 fa47 	bl	80035e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010152:	4b0d      	ldr	r3, [pc, #52]	@ (8010188 <HAL_PCD_MspInit+0x74>)
 8010154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010156:	4a0c      	ldr	r2, [pc, #48]	@ (8010188 <HAL_PCD_MspInit+0x74>)
 8010158:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801015c:	6593      	str	r3, [r2, #88]	@ 0x58
 801015e:	4b0a      	ldr	r3, [pc, #40]	@ (8010188 <HAL_PCD_MspInit+0x74>)
 8010160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010162:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010166:	60bb      	str	r3, [r7, #8]
 8010168:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801016a:	2200      	movs	r2, #0
 801016c:	2100      	movs	r1, #0
 801016e:	2014      	movs	r0, #20
 8010170:	f7f5 fe47 	bl	8005e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010174:	2014      	movs	r0, #20
 8010176:	f7f5 fe5e 	bl	8005e36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801017a:	bf00      	nop
 801017c:	3760      	adds	r7, #96	@ 0x60
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
 8010182:	bf00      	nop
 8010184:	40005c00 	.word	0x40005c00
 8010188:	40021000 	.word	0x40021000

0801018c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b082      	sub	sp, #8
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80101a0:	4619      	mov	r1, r3
 80101a2:	4610      	mov	r0, r2
 80101a4:	f7fe fd1c 	bl	800ebe0 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80101a8:	bf00      	nop
 80101aa:	3708      	adds	r7, #8
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b082      	sub	sp, #8
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
 80101b8:	460b      	mov	r3, r1
 80101ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80101c2:	78fa      	ldrb	r2, [r7, #3]
 80101c4:	6879      	ldr	r1, [r7, #4]
 80101c6:	4613      	mov	r3, r2
 80101c8:	009b      	lsls	r3, r3, #2
 80101ca:	4413      	add	r3, r2
 80101cc:	00db      	lsls	r3, r3, #3
 80101ce:	440b      	add	r3, r1
 80101d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	78fb      	ldrb	r3, [r7, #3]
 80101d8:	4619      	mov	r1, r3
 80101da:	f7fe fd56 	bl	800ec8a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80101de:	bf00      	nop
 80101e0:	3708      	adds	r7, #8
 80101e2:	46bd      	mov	sp, r7
 80101e4:	bd80      	pop	{r7, pc}

080101e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80101e6:	b580      	push	{r7, lr}
 80101e8:	b082      	sub	sp, #8
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	6078      	str	r0, [r7, #4]
 80101ee:	460b      	mov	r3, r1
 80101f0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80101f8:	78fa      	ldrb	r2, [r7, #3]
 80101fa:	6879      	ldr	r1, [r7, #4]
 80101fc:	4613      	mov	r3, r2
 80101fe:	009b      	lsls	r3, r3, #2
 8010200:	4413      	add	r3, r2
 8010202:	00db      	lsls	r3, r3, #3
 8010204:	440b      	add	r3, r1
 8010206:	3324      	adds	r3, #36	@ 0x24
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	78fb      	ldrb	r3, [r7, #3]
 801020c:	4619      	mov	r1, r3
 801020e:	f7fe fd9f 	bl	800ed50 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8010212:	bf00      	nop
 8010214:	3708      	adds	r7, #8
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}

0801021a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801021a:	b580      	push	{r7, lr}
 801021c:	b082      	sub	sp, #8
 801021e:	af00      	add	r7, sp, #0
 8010220:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010228:	4618      	mov	r0, r3
 801022a:	f7fe feb3 	bl	800ef94 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801022e:	bf00      	nop
 8010230:	3708      	adds	r7, #8
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}

08010236 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010236:	b580      	push	{r7, lr}
 8010238:	b084      	sub	sp, #16
 801023a:	af00      	add	r7, sp, #0
 801023c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801023e:	2301      	movs	r3, #1
 8010240:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	795b      	ldrb	r3, [r3, #5]
 8010246:	2b02      	cmp	r3, #2
 8010248:	d001      	beq.n	801024e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801024a:	f7f3 f9c9 	bl	80035e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010254:	7bfa      	ldrb	r2, [r7, #15]
 8010256:	4611      	mov	r1, r2
 8010258:	4618      	mov	r0, r3
 801025a:	f7fe fe5d 	bl	800ef18 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010264:	4618      	mov	r0, r3
 8010266:	f7fe fe09 	bl	800ee7c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801026a:	bf00      	nop
 801026c:	3710      	adds	r7, #16
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
	...

08010274 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010282:	4618      	mov	r0, r3
 8010284:	f7fe fe58 	bl	800ef38 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	7a5b      	ldrb	r3, [r3, #9]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d005      	beq.n	801029c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010290:	4b04      	ldr	r3, [pc, #16]	@ (80102a4 <HAL_PCD_SuspendCallback+0x30>)
 8010292:	691b      	ldr	r3, [r3, #16]
 8010294:	4a03      	ldr	r2, [pc, #12]	@ (80102a4 <HAL_PCD_SuspendCallback+0x30>)
 8010296:	f043 0306 	orr.w	r3, r3, #6
 801029a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801029c:	bf00      	nop
 801029e:	3708      	adds	r7, #8
 80102a0:	46bd      	mov	sp, r7
 80102a2:	bd80      	pop	{r7, pc}
 80102a4:	e000ed00 	.word	0xe000ed00

080102a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b082      	sub	sp, #8
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	7a5b      	ldrb	r3, [r3, #9]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d007      	beq.n	80102c8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80102b8:	4b08      	ldr	r3, [pc, #32]	@ (80102dc <HAL_PCD_ResumeCallback+0x34>)
 80102ba:	691b      	ldr	r3, [r3, #16]
 80102bc:	4a07      	ldr	r2, [pc, #28]	@ (80102dc <HAL_PCD_ResumeCallback+0x34>)
 80102be:	f023 0306 	bic.w	r3, r3, #6
 80102c2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80102c4:	f000 f9f8 	bl	80106b8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7fe fe48 	bl	800ef64 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80102d4:	bf00      	nop
 80102d6:	3708      	adds	r7, #8
 80102d8:	46bd      	mov	sp, r7
 80102da:	bd80      	pop	{r7, pc}
 80102dc:	e000ed00 	.word	0xe000ed00

080102e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b082      	sub	sp, #8
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80102e8:	4a2b      	ldr	r2, [pc, #172]	@ (8010398 <USBD_LL_Init+0xb8>)
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	4a29      	ldr	r2, [pc, #164]	@ (8010398 <USBD_LL_Init+0xb8>)
 80102f4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 80102f8:	4b27      	ldr	r3, [pc, #156]	@ (8010398 <USBD_LL_Init+0xb8>)
 80102fa:	4a28      	ldr	r2, [pc, #160]	@ (801039c <USBD_LL_Init+0xbc>)
 80102fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80102fe:	4b26      	ldr	r3, [pc, #152]	@ (8010398 <USBD_LL_Init+0xb8>)
 8010300:	2208      	movs	r2, #8
 8010302:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010304:	4b24      	ldr	r3, [pc, #144]	@ (8010398 <USBD_LL_Init+0xb8>)
 8010306:	2202      	movs	r2, #2
 8010308:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801030a:	4b23      	ldr	r3, [pc, #140]	@ (8010398 <USBD_LL_Init+0xb8>)
 801030c:	2202      	movs	r2, #2
 801030e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010310:	4b21      	ldr	r3, [pc, #132]	@ (8010398 <USBD_LL_Init+0xb8>)
 8010312:	2200      	movs	r2, #0
 8010314:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010316:	4b20      	ldr	r3, [pc, #128]	@ (8010398 <USBD_LL_Init+0xb8>)
 8010318:	2200      	movs	r2, #0
 801031a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801031c:	4b1e      	ldr	r3, [pc, #120]	@ (8010398 <USBD_LL_Init+0xb8>)
 801031e:	2200      	movs	r2, #0
 8010320:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010322:	4b1d      	ldr	r3, [pc, #116]	@ (8010398 <USBD_LL_Init+0xb8>)
 8010324:	2200      	movs	r2, #0
 8010326:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010328:	481b      	ldr	r0, [pc, #108]	@ (8010398 <USBD_LL_Init+0xb8>)
 801032a:	f7f6 fcbb 	bl	8006ca4 <HAL_PCD_Init>
 801032e:	4603      	mov	r3, r0
 8010330:	2b00      	cmp	r3, #0
 8010332:	d001      	beq.n	8010338 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8010334:	f7f3 f954 	bl	80035e0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801033e:	2318      	movs	r3, #24
 8010340:	2200      	movs	r2, #0
 8010342:	2100      	movs	r1, #0
 8010344:	f7f8 f976 	bl	8008634 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801034e:	2358      	movs	r3, #88	@ 0x58
 8010350:	2200      	movs	r2, #0
 8010352:	2180      	movs	r1, #128	@ 0x80
 8010354:	f7f8 f96e 	bl	8008634 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801035e:	23c0      	movs	r3, #192	@ 0xc0
 8010360:	2200      	movs	r2, #0
 8010362:	2181      	movs	r1, #129	@ 0x81
 8010364:	f7f8 f966 	bl	8008634 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 801036e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8010372:	2200      	movs	r2, #0
 8010374:	2101      	movs	r1, #1
 8010376:	f7f8 f95d 	bl	8008634 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010380:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010384:	2200      	movs	r2, #0
 8010386:	2182      	movs	r1, #130	@ 0x82
 8010388:	f7f8 f954 	bl	8008634 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801038c:	2300      	movs	r3, #0
}
 801038e:	4618      	mov	r0, r3
 8010390:	3708      	adds	r7, #8
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
 8010396:	bf00      	nop
 8010398:	20002050 	.word	0x20002050
 801039c:	40005c00 	.word	0x40005c00

080103a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b084      	sub	sp, #16
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103a8:	2300      	movs	r3, #0
 80103aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103ac:	2300      	movs	r3, #0
 80103ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7f6 fd42 	bl	8006e40 <HAL_PCD_Start>
 80103bc:	4603      	mov	r3, r0
 80103be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80103c0:	7bfb      	ldrb	r3, [r7, #15]
 80103c2:	4618      	mov	r0, r3
 80103c4:	f000 f97e 	bl	80106c4 <USBD_Get_USB_Status>
 80103c8:	4603      	mov	r3, r0
 80103ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80103cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3710      	adds	r7, #16
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}

080103d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80103d6:	b580      	push	{r7, lr}
 80103d8:	b084      	sub	sp, #16
 80103da:	af00      	add	r7, sp, #0
 80103dc:	6078      	str	r0, [r7, #4]
 80103de:	4608      	mov	r0, r1
 80103e0:	4611      	mov	r1, r2
 80103e2:	461a      	mov	r2, r3
 80103e4:	4603      	mov	r3, r0
 80103e6:	70fb      	strb	r3, [r7, #3]
 80103e8:	460b      	mov	r3, r1
 80103ea:	70bb      	strb	r3, [r7, #2]
 80103ec:	4613      	mov	r3, r2
 80103ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80103f0:	2300      	movs	r3, #0
 80103f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80103f4:	2300      	movs	r3, #0
 80103f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80103fe:	78bb      	ldrb	r3, [r7, #2]
 8010400:	883a      	ldrh	r2, [r7, #0]
 8010402:	78f9      	ldrb	r1, [r7, #3]
 8010404:	f7f6 fe89 	bl	800711a <HAL_PCD_EP_Open>
 8010408:	4603      	mov	r3, r0
 801040a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801040c:	7bfb      	ldrb	r3, [r7, #15]
 801040e:	4618      	mov	r0, r3
 8010410:	f000 f958 	bl	80106c4 <USBD_Get_USB_Status>
 8010414:	4603      	mov	r3, r0
 8010416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010418:	7bbb      	ldrb	r3, [r7, #14]
}
 801041a:	4618      	mov	r0, r3
 801041c:	3710      	adds	r7, #16
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}

08010422 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010422:	b580      	push	{r7, lr}
 8010424:	b084      	sub	sp, #16
 8010426:	af00      	add	r7, sp, #0
 8010428:	6078      	str	r0, [r7, #4]
 801042a:	460b      	mov	r3, r1
 801042c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801042e:	2300      	movs	r3, #0
 8010430:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010432:	2300      	movs	r3, #0
 8010434:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801043c:	78fa      	ldrb	r2, [r7, #3]
 801043e:	4611      	mov	r1, r2
 8010440:	4618      	mov	r0, r3
 8010442:	f7f6 fec9 	bl	80071d8 <HAL_PCD_EP_Close>
 8010446:	4603      	mov	r3, r0
 8010448:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801044a:	7bfb      	ldrb	r3, [r7, #15]
 801044c:	4618      	mov	r0, r3
 801044e:	f000 f939 	bl	80106c4 <USBD_Get_USB_Status>
 8010452:	4603      	mov	r3, r0
 8010454:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010456:	7bbb      	ldrb	r3, [r7, #14]
}
 8010458:	4618      	mov	r0, r3
 801045a:	3710      	adds	r7, #16
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}

08010460 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b084      	sub	sp, #16
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
 8010468:	460b      	mov	r3, r1
 801046a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801046c:	2300      	movs	r3, #0
 801046e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010470:	2300      	movs	r3, #0
 8010472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801047a:	78fa      	ldrb	r2, [r7, #3]
 801047c:	4611      	mov	r1, r2
 801047e:	4618      	mov	r0, r3
 8010480:	f7f6 ff72 	bl	8007368 <HAL_PCD_EP_SetStall>
 8010484:	4603      	mov	r3, r0
 8010486:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010488:	7bfb      	ldrb	r3, [r7, #15]
 801048a:	4618      	mov	r0, r3
 801048c:	f000 f91a 	bl	80106c4 <USBD_Get_USB_Status>
 8010490:	4603      	mov	r3, r0
 8010492:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010494:	7bbb      	ldrb	r3, [r7, #14]
}
 8010496:	4618      	mov	r0, r3
 8010498:	3710      	adds	r7, #16
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}

0801049e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801049e:	b580      	push	{r7, lr}
 80104a0:	b084      	sub	sp, #16
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
 80104a6:	460b      	mov	r3, r1
 80104a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104aa:	2300      	movs	r3, #0
 80104ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104ae:	2300      	movs	r3, #0
 80104b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80104b8:	78fa      	ldrb	r2, [r7, #3]
 80104ba:	4611      	mov	r1, r2
 80104bc:	4618      	mov	r0, r3
 80104be:	f7f6 ffa5 	bl	800740c <HAL_PCD_EP_ClrStall>
 80104c2:	4603      	mov	r3, r0
 80104c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104c6:	7bfb      	ldrb	r3, [r7, #15]
 80104c8:	4618      	mov	r0, r3
 80104ca:	f000 f8fb 	bl	80106c4 <USBD_Get_USB_Status>
 80104ce:	4603      	mov	r3, r0
 80104d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3710      	adds	r7, #16
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}

080104dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80104dc:	b480      	push	{r7}
 80104de:	b085      	sub	sp, #20
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
 80104e4:	460b      	mov	r3, r1
 80104e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80104ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80104f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	da0b      	bge.n	8010510 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80104f8:	78fb      	ldrb	r3, [r7, #3]
 80104fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80104fe:	68f9      	ldr	r1, [r7, #12]
 8010500:	4613      	mov	r3, r2
 8010502:	009b      	lsls	r3, r3, #2
 8010504:	4413      	add	r3, r2
 8010506:	00db      	lsls	r3, r3, #3
 8010508:	440b      	add	r3, r1
 801050a:	3312      	adds	r3, #18
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	e00b      	b.n	8010528 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010510:	78fb      	ldrb	r3, [r7, #3]
 8010512:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010516:	68f9      	ldr	r1, [r7, #12]
 8010518:	4613      	mov	r3, r2
 801051a:	009b      	lsls	r3, r3, #2
 801051c:	4413      	add	r3, r2
 801051e:	00db      	lsls	r3, r3, #3
 8010520:	440b      	add	r3, r1
 8010522:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010526:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010528:	4618      	mov	r0, r3
 801052a:	3714      	adds	r7, #20
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr

08010534 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b084      	sub	sp, #16
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	460b      	mov	r3, r1
 801053e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010540:	2300      	movs	r3, #0
 8010542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010544:	2300      	movs	r3, #0
 8010546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 801054e:	78fa      	ldrb	r2, [r7, #3]
 8010550:	4611      	mov	r1, r2
 8010552:	4618      	mov	r0, r3
 8010554:	f7f6 fdbd 	bl	80070d2 <HAL_PCD_SetAddress>
 8010558:	4603      	mov	r3, r0
 801055a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801055c:	7bfb      	ldrb	r3, [r7, #15]
 801055e:	4618      	mov	r0, r3
 8010560:	f000 f8b0 	bl	80106c4 <USBD_Get_USB_Status>
 8010564:	4603      	mov	r3, r0
 8010566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010568:	7bbb      	ldrb	r3, [r7, #14]
}
 801056a:	4618      	mov	r0, r3
 801056c:	3710      	adds	r7, #16
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}

08010572 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010572:	b580      	push	{r7, lr}
 8010574:	b086      	sub	sp, #24
 8010576:	af00      	add	r7, sp, #0
 8010578:	60f8      	str	r0, [r7, #12]
 801057a:	607a      	str	r2, [r7, #4]
 801057c:	603b      	str	r3, [r7, #0]
 801057e:	460b      	mov	r3, r1
 8010580:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010582:	2300      	movs	r3, #0
 8010584:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010586:	2300      	movs	r3, #0
 8010588:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010590:	7af9      	ldrb	r1, [r7, #11]
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	687a      	ldr	r2, [r7, #4]
 8010596:	f7f6 feb0 	bl	80072fa <HAL_PCD_EP_Transmit>
 801059a:	4603      	mov	r3, r0
 801059c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801059e:	7dfb      	ldrb	r3, [r7, #23]
 80105a0:	4618      	mov	r0, r3
 80105a2:	f000 f88f 	bl	80106c4 <USBD_Get_USB_Status>
 80105a6:	4603      	mov	r3, r0
 80105a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80105aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3718      	adds	r7, #24
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}

080105b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80105b4:	b580      	push	{r7, lr}
 80105b6:	b086      	sub	sp, #24
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	60f8      	str	r0, [r7, #12]
 80105bc:	607a      	str	r2, [r7, #4]
 80105be:	603b      	str	r3, [r7, #0]
 80105c0:	460b      	mov	r3, r1
 80105c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80105c4:	2300      	movs	r3, #0
 80105c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80105c8:	2300      	movs	r3, #0
 80105ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 80105d2:	7af9      	ldrb	r1, [r7, #11]
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	687a      	ldr	r2, [r7, #4]
 80105d8:	f7f6 fe46 	bl	8007268 <HAL_PCD_EP_Receive>
 80105dc:	4603      	mov	r3, r0
 80105de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105e0:	7dfb      	ldrb	r3, [r7, #23]
 80105e2:	4618      	mov	r0, r3
 80105e4:	f000 f86e 	bl	80106c4 <USBD_Get_USB_Status>
 80105e8:	4603      	mov	r3, r0
 80105ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80105ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3718      	adds	r7, #24
 80105f2:	46bd      	mov	sp, r7
 80105f4:	bd80      	pop	{r7, pc}

080105f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105f6:	b580      	push	{r7, lr}
 80105f8:	b082      	sub	sp, #8
 80105fa:	af00      	add	r7, sp, #0
 80105fc:	6078      	str	r0, [r7, #4]
 80105fe:	460b      	mov	r3, r1
 8010600:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010608:	78fa      	ldrb	r2, [r7, #3]
 801060a:	4611      	mov	r1, r2
 801060c:	4618      	mov	r0, r3
 801060e:	f7f6 fe5c 	bl	80072ca <HAL_PCD_EP_GetRxCount>
 8010612:	4603      	mov	r3, r0
}
 8010614:	4618      	mov	r0, r3
 8010616:	3708      	adds	r7, #8
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
 8010624:	460b      	mov	r3, r1
 8010626:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010628:	78fb      	ldrb	r3, [r7, #3]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d002      	beq.n	8010634 <HAL_PCDEx_LPM_Callback+0x18>
 801062e:	2b01      	cmp	r3, #1
 8010630:	d013      	beq.n	801065a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010632:	e023      	b.n	801067c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	7a5b      	ldrb	r3, [r3, #9]
 8010638:	2b00      	cmp	r3, #0
 801063a:	d007      	beq.n	801064c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801063c:	f000 f83c 	bl	80106b8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010640:	4b10      	ldr	r3, [pc, #64]	@ (8010684 <HAL_PCDEx_LPM_Callback+0x68>)
 8010642:	691b      	ldr	r3, [r3, #16]
 8010644:	4a0f      	ldr	r2, [pc, #60]	@ (8010684 <HAL_PCDEx_LPM_Callback+0x68>)
 8010646:	f023 0306 	bic.w	r3, r3, #6
 801064a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010652:	4618      	mov	r0, r3
 8010654:	f7fe fc86 	bl	800ef64 <USBD_LL_Resume>
    break;
 8010658:	e010      	b.n	801067c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010660:	4618      	mov	r0, r3
 8010662:	f7fe fc69 	bl	800ef38 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	7a5b      	ldrb	r3, [r3, #9]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d005      	beq.n	801067a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801066e:	4b05      	ldr	r3, [pc, #20]	@ (8010684 <HAL_PCDEx_LPM_Callback+0x68>)
 8010670:	691b      	ldr	r3, [r3, #16]
 8010672:	4a04      	ldr	r2, [pc, #16]	@ (8010684 <HAL_PCDEx_LPM_Callback+0x68>)
 8010674:	f043 0306 	orr.w	r3, r3, #6
 8010678:	6113      	str	r3, [r2, #16]
    break;
 801067a:	bf00      	nop
}
 801067c:	bf00      	nop
 801067e:	3708      	adds	r7, #8
 8010680:	46bd      	mov	sp, r7
 8010682:	bd80      	pop	{r7, pc}
 8010684:	e000ed00 	.word	0xe000ed00

08010688 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010688:	b480      	push	{r7}
 801068a:	b083      	sub	sp, #12
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010690:	4b03      	ldr	r3, [pc, #12]	@ (80106a0 <USBD_static_malloc+0x18>)
}
 8010692:	4618      	mov	r0, r3
 8010694:	370c      	adds	r7, #12
 8010696:	46bd      	mov	sp, r7
 8010698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069c:	4770      	bx	lr
 801069e:	bf00      	nop
 80106a0:	2000232c 	.word	0x2000232c

080106a4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b083      	sub	sp, #12
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	6078      	str	r0, [r7, #4]

}
 80106ac:	bf00      	nop
 80106ae:	370c      	adds	r7, #12
 80106b0:	46bd      	mov	sp, r7
 80106b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b6:	4770      	bx	lr

080106b8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80106bc:	f7f1 f8a0 	bl	8001800 <SystemClock_Config>
}
 80106c0:	bf00      	nop
 80106c2:	bd80      	pop	{r7, pc}

080106c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80106c4:	b480      	push	{r7}
 80106c6:	b085      	sub	sp, #20
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	4603      	mov	r3, r0
 80106cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106ce:	2300      	movs	r3, #0
 80106d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80106d2:	79fb      	ldrb	r3, [r7, #7]
 80106d4:	2b03      	cmp	r3, #3
 80106d6:	d817      	bhi.n	8010708 <USBD_Get_USB_Status+0x44>
 80106d8:	a201      	add	r2, pc, #4	@ (adr r2, 80106e0 <USBD_Get_USB_Status+0x1c>)
 80106da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106de:	bf00      	nop
 80106e0:	080106f1 	.word	0x080106f1
 80106e4:	080106f7 	.word	0x080106f7
 80106e8:	080106fd 	.word	0x080106fd
 80106ec:	08010703 	.word	0x08010703
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80106f0:	2300      	movs	r3, #0
 80106f2:	73fb      	strb	r3, [r7, #15]
    break;
 80106f4:	e00b      	b.n	801070e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80106f6:	2303      	movs	r3, #3
 80106f8:	73fb      	strb	r3, [r7, #15]
    break;
 80106fa:	e008      	b.n	801070e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80106fc:	2301      	movs	r3, #1
 80106fe:	73fb      	strb	r3, [r7, #15]
    break;
 8010700:	e005      	b.n	801070e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010702:	2303      	movs	r3, #3
 8010704:	73fb      	strb	r3, [r7, #15]
    break;
 8010706:	e002      	b.n	801070e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010708:	2303      	movs	r3, #3
 801070a:	73fb      	strb	r3, [r7, #15]
    break;
 801070c:	bf00      	nop
  }
  return usb_status;
 801070e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010710:	4618      	mov	r0, r3
 8010712:	3714      	adds	r7, #20
 8010714:	46bd      	mov	sp, r7
 8010716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071a:	4770      	bx	lr

0801071c <__cvt>:
 801071c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010720:	ec57 6b10 	vmov	r6, r7, d0
 8010724:	2f00      	cmp	r7, #0
 8010726:	460c      	mov	r4, r1
 8010728:	4619      	mov	r1, r3
 801072a:	463b      	mov	r3, r7
 801072c:	bfbb      	ittet	lt
 801072e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010732:	461f      	movlt	r7, r3
 8010734:	2300      	movge	r3, #0
 8010736:	232d      	movlt	r3, #45	@ 0x2d
 8010738:	700b      	strb	r3, [r1, #0]
 801073a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801073c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010740:	4691      	mov	r9, r2
 8010742:	f023 0820 	bic.w	r8, r3, #32
 8010746:	bfbc      	itt	lt
 8010748:	4632      	movlt	r2, r6
 801074a:	4616      	movlt	r6, r2
 801074c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010750:	d005      	beq.n	801075e <__cvt+0x42>
 8010752:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010756:	d100      	bne.n	801075a <__cvt+0x3e>
 8010758:	3401      	adds	r4, #1
 801075a:	2102      	movs	r1, #2
 801075c:	e000      	b.n	8010760 <__cvt+0x44>
 801075e:	2103      	movs	r1, #3
 8010760:	ab03      	add	r3, sp, #12
 8010762:	9301      	str	r3, [sp, #4]
 8010764:	ab02      	add	r3, sp, #8
 8010766:	9300      	str	r3, [sp, #0]
 8010768:	ec47 6b10 	vmov	d0, r6, r7
 801076c:	4653      	mov	r3, sl
 801076e:	4622      	mov	r2, r4
 8010770:	f001 f8c2 	bl	80118f8 <_dtoa_r>
 8010774:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010778:	4605      	mov	r5, r0
 801077a:	d119      	bne.n	80107b0 <__cvt+0x94>
 801077c:	f019 0f01 	tst.w	r9, #1
 8010780:	d00e      	beq.n	80107a0 <__cvt+0x84>
 8010782:	eb00 0904 	add.w	r9, r0, r4
 8010786:	2200      	movs	r2, #0
 8010788:	2300      	movs	r3, #0
 801078a:	4630      	mov	r0, r6
 801078c:	4639      	mov	r1, r7
 801078e:	f7f0 f9c3 	bl	8000b18 <__aeabi_dcmpeq>
 8010792:	b108      	cbz	r0, 8010798 <__cvt+0x7c>
 8010794:	f8cd 900c 	str.w	r9, [sp, #12]
 8010798:	2230      	movs	r2, #48	@ 0x30
 801079a:	9b03      	ldr	r3, [sp, #12]
 801079c:	454b      	cmp	r3, r9
 801079e:	d31e      	bcc.n	80107de <__cvt+0xc2>
 80107a0:	9b03      	ldr	r3, [sp, #12]
 80107a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80107a4:	1b5b      	subs	r3, r3, r5
 80107a6:	4628      	mov	r0, r5
 80107a8:	6013      	str	r3, [r2, #0]
 80107aa:	b004      	add	sp, #16
 80107ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80107b4:	eb00 0904 	add.w	r9, r0, r4
 80107b8:	d1e5      	bne.n	8010786 <__cvt+0x6a>
 80107ba:	7803      	ldrb	r3, [r0, #0]
 80107bc:	2b30      	cmp	r3, #48	@ 0x30
 80107be:	d10a      	bne.n	80107d6 <__cvt+0xba>
 80107c0:	2200      	movs	r2, #0
 80107c2:	2300      	movs	r3, #0
 80107c4:	4630      	mov	r0, r6
 80107c6:	4639      	mov	r1, r7
 80107c8:	f7f0 f9a6 	bl	8000b18 <__aeabi_dcmpeq>
 80107cc:	b918      	cbnz	r0, 80107d6 <__cvt+0xba>
 80107ce:	f1c4 0401 	rsb	r4, r4, #1
 80107d2:	f8ca 4000 	str.w	r4, [sl]
 80107d6:	f8da 3000 	ldr.w	r3, [sl]
 80107da:	4499      	add	r9, r3
 80107dc:	e7d3      	b.n	8010786 <__cvt+0x6a>
 80107de:	1c59      	adds	r1, r3, #1
 80107e0:	9103      	str	r1, [sp, #12]
 80107e2:	701a      	strb	r2, [r3, #0]
 80107e4:	e7d9      	b.n	801079a <__cvt+0x7e>

080107e6 <__exponent>:
 80107e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80107e8:	2900      	cmp	r1, #0
 80107ea:	bfba      	itte	lt
 80107ec:	4249      	neglt	r1, r1
 80107ee:	232d      	movlt	r3, #45	@ 0x2d
 80107f0:	232b      	movge	r3, #43	@ 0x2b
 80107f2:	2909      	cmp	r1, #9
 80107f4:	7002      	strb	r2, [r0, #0]
 80107f6:	7043      	strb	r3, [r0, #1]
 80107f8:	dd29      	ble.n	801084e <__exponent+0x68>
 80107fa:	f10d 0307 	add.w	r3, sp, #7
 80107fe:	461d      	mov	r5, r3
 8010800:	270a      	movs	r7, #10
 8010802:	461a      	mov	r2, r3
 8010804:	fbb1 f6f7 	udiv	r6, r1, r7
 8010808:	fb07 1416 	mls	r4, r7, r6, r1
 801080c:	3430      	adds	r4, #48	@ 0x30
 801080e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010812:	460c      	mov	r4, r1
 8010814:	2c63      	cmp	r4, #99	@ 0x63
 8010816:	f103 33ff 	add.w	r3, r3, #4294967295
 801081a:	4631      	mov	r1, r6
 801081c:	dcf1      	bgt.n	8010802 <__exponent+0x1c>
 801081e:	3130      	adds	r1, #48	@ 0x30
 8010820:	1e94      	subs	r4, r2, #2
 8010822:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010826:	1c41      	adds	r1, r0, #1
 8010828:	4623      	mov	r3, r4
 801082a:	42ab      	cmp	r3, r5
 801082c:	d30a      	bcc.n	8010844 <__exponent+0x5e>
 801082e:	f10d 0309 	add.w	r3, sp, #9
 8010832:	1a9b      	subs	r3, r3, r2
 8010834:	42ac      	cmp	r4, r5
 8010836:	bf88      	it	hi
 8010838:	2300      	movhi	r3, #0
 801083a:	3302      	adds	r3, #2
 801083c:	4403      	add	r3, r0
 801083e:	1a18      	subs	r0, r3, r0
 8010840:	b003      	add	sp, #12
 8010842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010844:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010848:	f801 6f01 	strb.w	r6, [r1, #1]!
 801084c:	e7ed      	b.n	801082a <__exponent+0x44>
 801084e:	2330      	movs	r3, #48	@ 0x30
 8010850:	3130      	adds	r1, #48	@ 0x30
 8010852:	7083      	strb	r3, [r0, #2]
 8010854:	70c1      	strb	r1, [r0, #3]
 8010856:	1d03      	adds	r3, r0, #4
 8010858:	e7f1      	b.n	801083e <__exponent+0x58>
	...

0801085c <_printf_float>:
 801085c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010860:	b08d      	sub	sp, #52	@ 0x34
 8010862:	460c      	mov	r4, r1
 8010864:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8010868:	4616      	mov	r6, r2
 801086a:	461f      	mov	r7, r3
 801086c:	4605      	mov	r5, r0
 801086e:	f000 ff2d 	bl	80116cc <_localeconv_r>
 8010872:	6803      	ldr	r3, [r0, #0]
 8010874:	9304      	str	r3, [sp, #16]
 8010876:	4618      	mov	r0, r3
 8010878:	f7ef fd22 	bl	80002c0 <strlen>
 801087c:	2300      	movs	r3, #0
 801087e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010880:	f8d8 3000 	ldr.w	r3, [r8]
 8010884:	9005      	str	r0, [sp, #20]
 8010886:	3307      	adds	r3, #7
 8010888:	f023 0307 	bic.w	r3, r3, #7
 801088c:	f103 0208 	add.w	r2, r3, #8
 8010890:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010894:	f8d4 b000 	ldr.w	fp, [r4]
 8010898:	f8c8 2000 	str.w	r2, [r8]
 801089c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80108a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80108a4:	9307      	str	r3, [sp, #28]
 80108a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80108aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80108ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80108b2:	4b9c      	ldr	r3, [pc, #624]	@ (8010b24 <_printf_float+0x2c8>)
 80108b4:	f04f 32ff 	mov.w	r2, #4294967295
 80108b8:	f7f0 f960 	bl	8000b7c <__aeabi_dcmpun>
 80108bc:	bb70      	cbnz	r0, 801091c <_printf_float+0xc0>
 80108be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80108c2:	4b98      	ldr	r3, [pc, #608]	@ (8010b24 <_printf_float+0x2c8>)
 80108c4:	f04f 32ff 	mov.w	r2, #4294967295
 80108c8:	f7f0 f93a 	bl	8000b40 <__aeabi_dcmple>
 80108cc:	bb30      	cbnz	r0, 801091c <_printf_float+0xc0>
 80108ce:	2200      	movs	r2, #0
 80108d0:	2300      	movs	r3, #0
 80108d2:	4640      	mov	r0, r8
 80108d4:	4649      	mov	r1, r9
 80108d6:	f7f0 f929 	bl	8000b2c <__aeabi_dcmplt>
 80108da:	b110      	cbz	r0, 80108e2 <_printf_float+0x86>
 80108dc:	232d      	movs	r3, #45	@ 0x2d
 80108de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80108e2:	4a91      	ldr	r2, [pc, #580]	@ (8010b28 <_printf_float+0x2cc>)
 80108e4:	4b91      	ldr	r3, [pc, #580]	@ (8010b2c <_printf_float+0x2d0>)
 80108e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80108ea:	bf94      	ite	ls
 80108ec:	4690      	movls	r8, r2
 80108ee:	4698      	movhi	r8, r3
 80108f0:	2303      	movs	r3, #3
 80108f2:	6123      	str	r3, [r4, #16]
 80108f4:	f02b 0304 	bic.w	r3, fp, #4
 80108f8:	6023      	str	r3, [r4, #0]
 80108fa:	f04f 0900 	mov.w	r9, #0
 80108fe:	9700      	str	r7, [sp, #0]
 8010900:	4633      	mov	r3, r6
 8010902:	aa0b      	add	r2, sp, #44	@ 0x2c
 8010904:	4621      	mov	r1, r4
 8010906:	4628      	mov	r0, r5
 8010908:	f000 f9d2 	bl	8010cb0 <_printf_common>
 801090c:	3001      	adds	r0, #1
 801090e:	f040 808d 	bne.w	8010a2c <_printf_float+0x1d0>
 8010912:	f04f 30ff 	mov.w	r0, #4294967295
 8010916:	b00d      	add	sp, #52	@ 0x34
 8010918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801091c:	4642      	mov	r2, r8
 801091e:	464b      	mov	r3, r9
 8010920:	4640      	mov	r0, r8
 8010922:	4649      	mov	r1, r9
 8010924:	f7f0 f92a 	bl	8000b7c <__aeabi_dcmpun>
 8010928:	b140      	cbz	r0, 801093c <_printf_float+0xe0>
 801092a:	464b      	mov	r3, r9
 801092c:	2b00      	cmp	r3, #0
 801092e:	bfbc      	itt	lt
 8010930:	232d      	movlt	r3, #45	@ 0x2d
 8010932:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8010936:	4a7e      	ldr	r2, [pc, #504]	@ (8010b30 <_printf_float+0x2d4>)
 8010938:	4b7e      	ldr	r3, [pc, #504]	@ (8010b34 <_printf_float+0x2d8>)
 801093a:	e7d4      	b.n	80108e6 <_printf_float+0x8a>
 801093c:	6863      	ldr	r3, [r4, #4]
 801093e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8010942:	9206      	str	r2, [sp, #24]
 8010944:	1c5a      	adds	r2, r3, #1
 8010946:	d13b      	bne.n	80109c0 <_printf_float+0x164>
 8010948:	2306      	movs	r3, #6
 801094a:	6063      	str	r3, [r4, #4]
 801094c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8010950:	2300      	movs	r3, #0
 8010952:	6022      	str	r2, [r4, #0]
 8010954:	9303      	str	r3, [sp, #12]
 8010956:	ab0a      	add	r3, sp, #40	@ 0x28
 8010958:	e9cd a301 	strd	sl, r3, [sp, #4]
 801095c:	ab09      	add	r3, sp, #36	@ 0x24
 801095e:	9300      	str	r3, [sp, #0]
 8010960:	6861      	ldr	r1, [r4, #4]
 8010962:	ec49 8b10 	vmov	d0, r8, r9
 8010966:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801096a:	4628      	mov	r0, r5
 801096c:	f7ff fed6 	bl	801071c <__cvt>
 8010970:	9b06      	ldr	r3, [sp, #24]
 8010972:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010974:	2b47      	cmp	r3, #71	@ 0x47
 8010976:	4680      	mov	r8, r0
 8010978:	d129      	bne.n	80109ce <_printf_float+0x172>
 801097a:	1cc8      	adds	r0, r1, #3
 801097c:	db02      	blt.n	8010984 <_printf_float+0x128>
 801097e:	6863      	ldr	r3, [r4, #4]
 8010980:	4299      	cmp	r1, r3
 8010982:	dd41      	ble.n	8010a08 <_printf_float+0x1ac>
 8010984:	f1aa 0a02 	sub.w	sl, sl, #2
 8010988:	fa5f fa8a 	uxtb.w	sl, sl
 801098c:	3901      	subs	r1, #1
 801098e:	4652      	mov	r2, sl
 8010990:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8010994:	9109      	str	r1, [sp, #36]	@ 0x24
 8010996:	f7ff ff26 	bl	80107e6 <__exponent>
 801099a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801099c:	1813      	adds	r3, r2, r0
 801099e:	2a01      	cmp	r2, #1
 80109a0:	4681      	mov	r9, r0
 80109a2:	6123      	str	r3, [r4, #16]
 80109a4:	dc02      	bgt.n	80109ac <_printf_float+0x150>
 80109a6:	6822      	ldr	r2, [r4, #0]
 80109a8:	07d2      	lsls	r2, r2, #31
 80109aa:	d501      	bpl.n	80109b0 <_printf_float+0x154>
 80109ac:	3301      	adds	r3, #1
 80109ae:	6123      	str	r3, [r4, #16]
 80109b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d0a2      	beq.n	80108fe <_printf_float+0xa2>
 80109b8:	232d      	movs	r3, #45	@ 0x2d
 80109ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80109be:	e79e      	b.n	80108fe <_printf_float+0xa2>
 80109c0:	9a06      	ldr	r2, [sp, #24]
 80109c2:	2a47      	cmp	r2, #71	@ 0x47
 80109c4:	d1c2      	bne.n	801094c <_printf_float+0xf0>
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d1c0      	bne.n	801094c <_printf_float+0xf0>
 80109ca:	2301      	movs	r3, #1
 80109cc:	e7bd      	b.n	801094a <_printf_float+0xee>
 80109ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80109d2:	d9db      	bls.n	801098c <_printf_float+0x130>
 80109d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80109d8:	d118      	bne.n	8010a0c <_printf_float+0x1b0>
 80109da:	2900      	cmp	r1, #0
 80109dc:	6863      	ldr	r3, [r4, #4]
 80109de:	dd0b      	ble.n	80109f8 <_printf_float+0x19c>
 80109e0:	6121      	str	r1, [r4, #16]
 80109e2:	b913      	cbnz	r3, 80109ea <_printf_float+0x18e>
 80109e4:	6822      	ldr	r2, [r4, #0]
 80109e6:	07d0      	lsls	r0, r2, #31
 80109e8:	d502      	bpl.n	80109f0 <_printf_float+0x194>
 80109ea:	3301      	adds	r3, #1
 80109ec:	440b      	add	r3, r1
 80109ee:	6123      	str	r3, [r4, #16]
 80109f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80109f2:	f04f 0900 	mov.w	r9, #0
 80109f6:	e7db      	b.n	80109b0 <_printf_float+0x154>
 80109f8:	b913      	cbnz	r3, 8010a00 <_printf_float+0x1a4>
 80109fa:	6822      	ldr	r2, [r4, #0]
 80109fc:	07d2      	lsls	r2, r2, #31
 80109fe:	d501      	bpl.n	8010a04 <_printf_float+0x1a8>
 8010a00:	3302      	adds	r3, #2
 8010a02:	e7f4      	b.n	80109ee <_printf_float+0x192>
 8010a04:	2301      	movs	r3, #1
 8010a06:	e7f2      	b.n	80109ee <_printf_float+0x192>
 8010a08:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8010a0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010a0e:	4299      	cmp	r1, r3
 8010a10:	db05      	blt.n	8010a1e <_printf_float+0x1c2>
 8010a12:	6823      	ldr	r3, [r4, #0]
 8010a14:	6121      	str	r1, [r4, #16]
 8010a16:	07d8      	lsls	r0, r3, #31
 8010a18:	d5ea      	bpl.n	80109f0 <_printf_float+0x194>
 8010a1a:	1c4b      	adds	r3, r1, #1
 8010a1c:	e7e7      	b.n	80109ee <_printf_float+0x192>
 8010a1e:	2900      	cmp	r1, #0
 8010a20:	bfd4      	ite	le
 8010a22:	f1c1 0202 	rsble	r2, r1, #2
 8010a26:	2201      	movgt	r2, #1
 8010a28:	4413      	add	r3, r2
 8010a2a:	e7e0      	b.n	80109ee <_printf_float+0x192>
 8010a2c:	6823      	ldr	r3, [r4, #0]
 8010a2e:	055a      	lsls	r2, r3, #21
 8010a30:	d407      	bmi.n	8010a42 <_printf_float+0x1e6>
 8010a32:	6923      	ldr	r3, [r4, #16]
 8010a34:	4642      	mov	r2, r8
 8010a36:	4631      	mov	r1, r6
 8010a38:	4628      	mov	r0, r5
 8010a3a:	47b8      	blx	r7
 8010a3c:	3001      	adds	r0, #1
 8010a3e:	d12b      	bne.n	8010a98 <_printf_float+0x23c>
 8010a40:	e767      	b.n	8010912 <_printf_float+0xb6>
 8010a42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8010a46:	f240 80dd 	bls.w	8010c04 <_printf_float+0x3a8>
 8010a4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010a4e:	2200      	movs	r2, #0
 8010a50:	2300      	movs	r3, #0
 8010a52:	f7f0 f861 	bl	8000b18 <__aeabi_dcmpeq>
 8010a56:	2800      	cmp	r0, #0
 8010a58:	d033      	beq.n	8010ac2 <_printf_float+0x266>
 8010a5a:	4a37      	ldr	r2, [pc, #220]	@ (8010b38 <_printf_float+0x2dc>)
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	4631      	mov	r1, r6
 8010a60:	4628      	mov	r0, r5
 8010a62:	47b8      	blx	r7
 8010a64:	3001      	adds	r0, #1
 8010a66:	f43f af54 	beq.w	8010912 <_printf_float+0xb6>
 8010a6a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8010a6e:	4543      	cmp	r3, r8
 8010a70:	db02      	blt.n	8010a78 <_printf_float+0x21c>
 8010a72:	6823      	ldr	r3, [r4, #0]
 8010a74:	07d8      	lsls	r0, r3, #31
 8010a76:	d50f      	bpl.n	8010a98 <_printf_float+0x23c>
 8010a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a7c:	4631      	mov	r1, r6
 8010a7e:	4628      	mov	r0, r5
 8010a80:	47b8      	blx	r7
 8010a82:	3001      	adds	r0, #1
 8010a84:	f43f af45 	beq.w	8010912 <_printf_float+0xb6>
 8010a88:	f04f 0900 	mov.w	r9, #0
 8010a8c:	f108 38ff 	add.w	r8, r8, #4294967295
 8010a90:	f104 0a1a 	add.w	sl, r4, #26
 8010a94:	45c8      	cmp	r8, r9
 8010a96:	dc09      	bgt.n	8010aac <_printf_float+0x250>
 8010a98:	6823      	ldr	r3, [r4, #0]
 8010a9a:	079b      	lsls	r3, r3, #30
 8010a9c:	f100 8103 	bmi.w	8010ca6 <_printf_float+0x44a>
 8010aa0:	68e0      	ldr	r0, [r4, #12]
 8010aa2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010aa4:	4298      	cmp	r0, r3
 8010aa6:	bfb8      	it	lt
 8010aa8:	4618      	movlt	r0, r3
 8010aaa:	e734      	b.n	8010916 <_printf_float+0xba>
 8010aac:	2301      	movs	r3, #1
 8010aae:	4652      	mov	r2, sl
 8010ab0:	4631      	mov	r1, r6
 8010ab2:	4628      	mov	r0, r5
 8010ab4:	47b8      	blx	r7
 8010ab6:	3001      	adds	r0, #1
 8010ab8:	f43f af2b 	beq.w	8010912 <_printf_float+0xb6>
 8010abc:	f109 0901 	add.w	r9, r9, #1
 8010ac0:	e7e8      	b.n	8010a94 <_printf_float+0x238>
 8010ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	dc39      	bgt.n	8010b3c <_printf_float+0x2e0>
 8010ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8010b38 <_printf_float+0x2dc>)
 8010aca:	2301      	movs	r3, #1
 8010acc:	4631      	mov	r1, r6
 8010ace:	4628      	mov	r0, r5
 8010ad0:	47b8      	blx	r7
 8010ad2:	3001      	adds	r0, #1
 8010ad4:	f43f af1d 	beq.w	8010912 <_printf_float+0xb6>
 8010ad8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8010adc:	ea59 0303 	orrs.w	r3, r9, r3
 8010ae0:	d102      	bne.n	8010ae8 <_printf_float+0x28c>
 8010ae2:	6823      	ldr	r3, [r4, #0]
 8010ae4:	07d9      	lsls	r1, r3, #31
 8010ae6:	d5d7      	bpl.n	8010a98 <_printf_float+0x23c>
 8010ae8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010aec:	4631      	mov	r1, r6
 8010aee:	4628      	mov	r0, r5
 8010af0:	47b8      	blx	r7
 8010af2:	3001      	adds	r0, #1
 8010af4:	f43f af0d 	beq.w	8010912 <_printf_float+0xb6>
 8010af8:	f04f 0a00 	mov.w	sl, #0
 8010afc:	f104 0b1a 	add.w	fp, r4, #26
 8010b00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b02:	425b      	negs	r3, r3
 8010b04:	4553      	cmp	r3, sl
 8010b06:	dc01      	bgt.n	8010b0c <_printf_float+0x2b0>
 8010b08:	464b      	mov	r3, r9
 8010b0a:	e793      	b.n	8010a34 <_printf_float+0x1d8>
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	465a      	mov	r2, fp
 8010b10:	4631      	mov	r1, r6
 8010b12:	4628      	mov	r0, r5
 8010b14:	47b8      	blx	r7
 8010b16:	3001      	adds	r0, #1
 8010b18:	f43f aefb 	beq.w	8010912 <_printf_float+0xb6>
 8010b1c:	f10a 0a01 	add.w	sl, sl, #1
 8010b20:	e7ee      	b.n	8010b00 <_printf_float+0x2a4>
 8010b22:	bf00      	nop
 8010b24:	7fefffff 	.word	0x7fefffff
 8010b28:	08016e48 	.word	0x08016e48
 8010b2c:	08016e4c 	.word	0x08016e4c
 8010b30:	08016e50 	.word	0x08016e50
 8010b34:	08016e54 	.word	0x08016e54
 8010b38:	080171e8 	.word	0x080171e8
 8010b3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010b3e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010b42:	4553      	cmp	r3, sl
 8010b44:	bfa8      	it	ge
 8010b46:	4653      	movge	r3, sl
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	4699      	mov	r9, r3
 8010b4c:	dc36      	bgt.n	8010bbc <_printf_float+0x360>
 8010b4e:	f04f 0b00 	mov.w	fp, #0
 8010b52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b56:	f104 021a 	add.w	r2, r4, #26
 8010b5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8010b5c:	9306      	str	r3, [sp, #24]
 8010b5e:	eba3 0309 	sub.w	r3, r3, r9
 8010b62:	455b      	cmp	r3, fp
 8010b64:	dc31      	bgt.n	8010bca <_printf_float+0x36e>
 8010b66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b68:	459a      	cmp	sl, r3
 8010b6a:	dc3a      	bgt.n	8010be2 <_printf_float+0x386>
 8010b6c:	6823      	ldr	r3, [r4, #0]
 8010b6e:	07da      	lsls	r2, r3, #31
 8010b70:	d437      	bmi.n	8010be2 <_printf_float+0x386>
 8010b72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b74:	ebaa 0903 	sub.w	r9, sl, r3
 8010b78:	9b06      	ldr	r3, [sp, #24]
 8010b7a:	ebaa 0303 	sub.w	r3, sl, r3
 8010b7e:	4599      	cmp	r9, r3
 8010b80:	bfa8      	it	ge
 8010b82:	4699      	movge	r9, r3
 8010b84:	f1b9 0f00 	cmp.w	r9, #0
 8010b88:	dc33      	bgt.n	8010bf2 <_printf_float+0x396>
 8010b8a:	f04f 0800 	mov.w	r8, #0
 8010b8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010b92:	f104 0b1a 	add.w	fp, r4, #26
 8010b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b98:	ebaa 0303 	sub.w	r3, sl, r3
 8010b9c:	eba3 0309 	sub.w	r3, r3, r9
 8010ba0:	4543      	cmp	r3, r8
 8010ba2:	f77f af79 	ble.w	8010a98 <_printf_float+0x23c>
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	465a      	mov	r2, fp
 8010baa:	4631      	mov	r1, r6
 8010bac:	4628      	mov	r0, r5
 8010bae:	47b8      	blx	r7
 8010bb0:	3001      	adds	r0, #1
 8010bb2:	f43f aeae 	beq.w	8010912 <_printf_float+0xb6>
 8010bb6:	f108 0801 	add.w	r8, r8, #1
 8010bba:	e7ec      	b.n	8010b96 <_printf_float+0x33a>
 8010bbc:	4642      	mov	r2, r8
 8010bbe:	4631      	mov	r1, r6
 8010bc0:	4628      	mov	r0, r5
 8010bc2:	47b8      	blx	r7
 8010bc4:	3001      	adds	r0, #1
 8010bc6:	d1c2      	bne.n	8010b4e <_printf_float+0x2f2>
 8010bc8:	e6a3      	b.n	8010912 <_printf_float+0xb6>
 8010bca:	2301      	movs	r3, #1
 8010bcc:	4631      	mov	r1, r6
 8010bce:	4628      	mov	r0, r5
 8010bd0:	9206      	str	r2, [sp, #24]
 8010bd2:	47b8      	blx	r7
 8010bd4:	3001      	adds	r0, #1
 8010bd6:	f43f ae9c 	beq.w	8010912 <_printf_float+0xb6>
 8010bda:	9a06      	ldr	r2, [sp, #24]
 8010bdc:	f10b 0b01 	add.w	fp, fp, #1
 8010be0:	e7bb      	b.n	8010b5a <_printf_float+0x2fe>
 8010be2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010be6:	4631      	mov	r1, r6
 8010be8:	4628      	mov	r0, r5
 8010bea:	47b8      	blx	r7
 8010bec:	3001      	adds	r0, #1
 8010bee:	d1c0      	bne.n	8010b72 <_printf_float+0x316>
 8010bf0:	e68f      	b.n	8010912 <_printf_float+0xb6>
 8010bf2:	9a06      	ldr	r2, [sp, #24]
 8010bf4:	464b      	mov	r3, r9
 8010bf6:	4442      	add	r2, r8
 8010bf8:	4631      	mov	r1, r6
 8010bfa:	4628      	mov	r0, r5
 8010bfc:	47b8      	blx	r7
 8010bfe:	3001      	adds	r0, #1
 8010c00:	d1c3      	bne.n	8010b8a <_printf_float+0x32e>
 8010c02:	e686      	b.n	8010912 <_printf_float+0xb6>
 8010c04:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8010c08:	f1ba 0f01 	cmp.w	sl, #1
 8010c0c:	dc01      	bgt.n	8010c12 <_printf_float+0x3b6>
 8010c0e:	07db      	lsls	r3, r3, #31
 8010c10:	d536      	bpl.n	8010c80 <_printf_float+0x424>
 8010c12:	2301      	movs	r3, #1
 8010c14:	4642      	mov	r2, r8
 8010c16:	4631      	mov	r1, r6
 8010c18:	4628      	mov	r0, r5
 8010c1a:	47b8      	blx	r7
 8010c1c:	3001      	adds	r0, #1
 8010c1e:	f43f ae78 	beq.w	8010912 <_printf_float+0xb6>
 8010c22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010c26:	4631      	mov	r1, r6
 8010c28:	4628      	mov	r0, r5
 8010c2a:	47b8      	blx	r7
 8010c2c:	3001      	adds	r0, #1
 8010c2e:	f43f ae70 	beq.w	8010912 <_printf_float+0xb6>
 8010c32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8010c36:	2200      	movs	r2, #0
 8010c38:	2300      	movs	r3, #0
 8010c3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010c3e:	f7ef ff6b 	bl	8000b18 <__aeabi_dcmpeq>
 8010c42:	b9c0      	cbnz	r0, 8010c76 <_printf_float+0x41a>
 8010c44:	4653      	mov	r3, sl
 8010c46:	f108 0201 	add.w	r2, r8, #1
 8010c4a:	4631      	mov	r1, r6
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	47b8      	blx	r7
 8010c50:	3001      	adds	r0, #1
 8010c52:	d10c      	bne.n	8010c6e <_printf_float+0x412>
 8010c54:	e65d      	b.n	8010912 <_printf_float+0xb6>
 8010c56:	2301      	movs	r3, #1
 8010c58:	465a      	mov	r2, fp
 8010c5a:	4631      	mov	r1, r6
 8010c5c:	4628      	mov	r0, r5
 8010c5e:	47b8      	blx	r7
 8010c60:	3001      	adds	r0, #1
 8010c62:	f43f ae56 	beq.w	8010912 <_printf_float+0xb6>
 8010c66:	f108 0801 	add.w	r8, r8, #1
 8010c6a:	45d0      	cmp	r8, sl
 8010c6c:	dbf3      	blt.n	8010c56 <_printf_float+0x3fa>
 8010c6e:	464b      	mov	r3, r9
 8010c70:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8010c74:	e6df      	b.n	8010a36 <_printf_float+0x1da>
 8010c76:	f04f 0800 	mov.w	r8, #0
 8010c7a:	f104 0b1a 	add.w	fp, r4, #26
 8010c7e:	e7f4      	b.n	8010c6a <_printf_float+0x40e>
 8010c80:	2301      	movs	r3, #1
 8010c82:	4642      	mov	r2, r8
 8010c84:	e7e1      	b.n	8010c4a <_printf_float+0x3ee>
 8010c86:	2301      	movs	r3, #1
 8010c88:	464a      	mov	r2, r9
 8010c8a:	4631      	mov	r1, r6
 8010c8c:	4628      	mov	r0, r5
 8010c8e:	47b8      	blx	r7
 8010c90:	3001      	adds	r0, #1
 8010c92:	f43f ae3e 	beq.w	8010912 <_printf_float+0xb6>
 8010c96:	f108 0801 	add.w	r8, r8, #1
 8010c9a:	68e3      	ldr	r3, [r4, #12]
 8010c9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010c9e:	1a5b      	subs	r3, r3, r1
 8010ca0:	4543      	cmp	r3, r8
 8010ca2:	dcf0      	bgt.n	8010c86 <_printf_float+0x42a>
 8010ca4:	e6fc      	b.n	8010aa0 <_printf_float+0x244>
 8010ca6:	f04f 0800 	mov.w	r8, #0
 8010caa:	f104 0919 	add.w	r9, r4, #25
 8010cae:	e7f4      	b.n	8010c9a <_printf_float+0x43e>

08010cb0 <_printf_common>:
 8010cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cb4:	4616      	mov	r6, r2
 8010cb6:	4698      	mov	r8, r3
 8010cb8:	688a      	ldr	r2, [r1, #8]
 8010cba:	690b      	ldr	r3, [r1, #16]
 8010cbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010cc0:	4293      	cmp	r3, r2
 8010cc2:	bfb8      	it	lt
 8010cc4:	4613      	movlt	r3, r2
 8010cc6:	6033      	str	r3, [r6, #0]
 8010cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010ccc:	4607      	mov	r7, r0
 8010cce:	460c      	mov	r4, r1
 8010cd0:	b10a      	cbz	r2, 8010cd6 <_printf_common+0x26>
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	6033      	str	r3, [r6, #0]
 8010cd6:	6823      	ldr	r3, [r4, #0]
 8010cd8:	0699      	lsls	r1, r3, #26
 8010cda:	bf42      	ittt	mi
 8010cdc:	6833      	ldrmi	r3, [r6, #0]
 8010cde:	3302      	addmi	r3, #2
 8010ce0:	6033      	strmi	r3, [r6, #0]
 8010ce2:	6825      	ldr	r5, [r4, #0]
 8010ce4:	f015 0506 	ands.w	r5, r5, #6
 8010ce8:	d106      	bne.n	8010cf8 <_printf_common+0x48>
 8010cea:	f104 0a19 	add.w	sl, r4, #25
 8010cee:	68e3      	ldr	r3, [r4, #12]
 8010cf0:	6832      	ldr	r2, [r6, #0]
 8010cf2:	1a9b      	subs	r3, r3, r2
 8010cf4:	42ab      	cmp	r3, r5
 8010cf6:	dc26      	bgt.n	8010d46 <_printf_common+0x96>
 8010cf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010cfc:	6822      	ldr	r2, [r4, #0]
 8010cfe:	3b00      	subs	r3, #0
 8010d00:	bf18      	it	ne
 8010d02:	2301      	movne	r3, #1
 8010d04:	0692      	lsls	r2, r2, #26
 8010d06:	d42b      	bmi.n	8010d60 <_printf_common+0xb0>
 8010d08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010d0c:	4641      	mov	r1, r8
 8010d0e:	4638      	mov	r0, r7
 8010d10:	47c8      	blx	r9
 8010d12:	3001      	adds	r0, #1
 8010d14:	d01e      	beq.n	8010d54 <_printf_common+0xa4>
 8010d16:	6823      	ldr	r3, [r4, #0]
 8010d18:	6922      	ldr	r2, [r4, #16]
 8010d1a:	f003 0306 	and.w	r3, r3, #6
 8010d1e:	2b04      	cmp	r3, #4
 8010d20:	bf02      	ittt	eq
 8010d22:	68e5      	ldreq	r5, [r4, #12]
 8010d24:	6833      	ldreq	r3, [r6, #0]
 8010d26:	1aed      	subeq	r5, r5, r3
 8010d28:	68a3      	ldr	r3, [r4, #8]
 8010d2a:	bf0c      	ite	eq
 8010d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d30:	2500      	movne	r5, #0
 8010d32:	4293      	cmp	r3, r2
 8010d34:	bfc4      	itt	gt
 8010d36:	1a9b      	subgt	r3, r3, r2
 8010d38:	18ed      	addgt	r5, r5, r3
 8010d3a:	2600      	movs	r6, #0
 8010d3c:	341a      	adds	r4, #26
 8010d3e:	42b5      	cmp	r5, r6
 8010d40:	d11a      	bne.n	8010d78 <_printf_common+0xc8>
 8010d42:	2000      	movs	r0, #0
 8010d44:	e008      	b.n	8010d58 <_printf_common+0xa8>
 8010d46:	2301      	movs	r3, #1
 8010d48:	4652      	mov	r2, sl
 8010d4a:	4641      	mov	r1, r8
 8010d4c:	4638      	mov	r0, r7
 8010d4e:	47c8      	blx	r9
 8010d50:	3001      	adds	r0, #1
 8010d52:	d103      	bne.n	8010d5c <_printf_common+0xac>
 8010d54:	f04f 30ff 	mov.w	r0, #4294967295
 8010d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d5c:	3501      	adds	r5, #1
 8010d5e:	e7c6      	b.n	8010cee <_printf_common+0x3e>
 8010d60:	18e1      	adds	r1, r4, r3
 8010d62:	1c5a      	adds	r2, r3, #1
 8010d64:	2030      	movs	r0, #48	@ 0x30
 8010d66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010d6a:	4422      	add	r2, r4
 8010d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010d70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010d74:	3302      	adds	r3, #2
 8010d76:	e7c7      	b.n	8010d08 <_printf_common+0x58>
 8010d78:	2301      	movs	r3, #1
 8010d7a:	4622      	mov	r2, r4
 8010d7c:	4641      	mov	r1, r8
 8010d7e:	4638      	mov	r0, r7
 8010d80:	47c8      	blx	r9
 8010d82:	3001      	adds	r0, #1
 8010d84:	d0e6      	beq.n	8010d54 <_printf_common+0xa4>
 8010d86:	3601      	adds	r6, #1
 8010d88:	e7d9      	b.n	8010d3e <_printf_common+0x8e>
	...

08010d8c <_printf_i>:
 8010d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010d90:	7e0f      	ldrb	r7, [r1, #24]
 8010d92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010d94:	2f78      	cmp	r7, #120	@ 0x78
 8010d96:	4691      	mov	r9, r2
 8010d98:	4680      	mov	r8, r0
 8010d9a:	460c      	mov	r4, r1
 8010d9c:	469a      	mov	sl, r3
 8010d9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8010da2:	d807      	bhi.n	8010db4 <_printf_i+0x28>
 8010da4:	2f62      	cmp	r7, #98	@ 0x62
 8010da6:	d80a      	bhi.n	8010dbe <_printf_i+0x32>
 8010da8:	2f00      	cmp	r7, #0
 8010daa:	f000 80d2 	beq.w	8010f52 <_printf_i+0x1c6>
 8010dae:	2f58      	cmp	r7, #88	@ 0x58
 8010db0:	f000 80b9 	beq.w	8010f26 <_printf_i+0x19a>
 8010db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010db8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010dbc:	e03a      	b.n	8010e34 <_printf_i+0xa8>
 8010dbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010dc2:	2b15      	cmp	r3, #21
 8010dc4:	d8f6      	bhi.n	8010db4 <_printf_i+0x28>
 8010dc6:	a101      	add	r1, pc, #4	@ (adr r1, 8010dcc <_printf_i+0x40>)
 8010dc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010dcc:	08010e25 	.word	0x08010e25
 8010dd0:	08010e39 	.word	0x08010e39
 8010dd4:	08010db5 	.word	0x08010db5
 8010dd8:	08010db5 	.word	0x08010db5
 8010ddc:	08010db5 	.word	0x08010db5
 8010de0:	08010db5 	.word	0x08010db5
 8010de4:	08010e39 	.word	0x08010e39
 8010de8:	08010db5 	.word	0x08010db5
 8010dec:	08010db5 	.word	0x08010db5
 8010df0:	08010db5 	.word	0x08010db5
 8010df4:	08010db5 	.word	0x08010db5
 8010df8:	08010f39 	.word	0x08010f39
 8010dfc:	08010e63 	.word	0x08010e63
 8010e00:	08010ef3 	.word	0x08010ef3
 8010e04:	08010db5 	.word	0x08010db5
 8010e08:	08010db5 	.word	0x08010db5
 8010e0c:	08010f5b 	.word	0x08010f5b
 8010e10:	08010db5 	.word	0x08010db5
 8010e14:	08010e63 	.word	0x08010e63
 8010e18:	08010db5 	.word	0x08010db5
 8010e1c:	08010db5 	.word	0x08010db5
 8010e20:	08010efb 	.word	0x08010efb
 8010e24:	6833      	ldr	r3, [r6, #0]
 8010e26:	1d1a      	adds	r2, r3, #4
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	6032      	str	r2, [r6, #0]
 8010e2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010e30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010e34:	2301      	movs	r3, #1
 8010e36:	e09d      	b.n	8010f74 <_printf_i+0x1e8>
 8010e38:	6833      	ldr	r3, [r6, #0]
 8010e3a:	6820      	ldr	r0, [r4, #0]
 8010e3c:	1d19      	adds	r1, r3, #4
 8010e3e:	6031      	str	r1, [r6, #0]
 8010e40:	0606      	lsls	r6, r0, #24
 8010e42:	d501      	bpl.n	8010e48 <_printf_i+0xbc>
 8010e44:	681d      	ldr	r5, [r3, #0]
 8010e46:	e003      	b.n	8010e50 <_printf_i+0xc4>
 8010e48:	0645      	lsls	r5, r0, #25
 8010e4a:	d5fb      	bpl.n	8010e44 <_printf_i+0xb8>
 8010e4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010e50:	2d00      	cmp	r5, #0
 8010e52:	da03      	bge.n	8010e5c <_printf_i+0xd0>
 8010e54:	232d      	movs	r3, #45	@ 0x2d
 8010e56:	426d      	negs	r5, r5
 8010e58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010e5c:	4859      	ldr	r0, [pc, #356]	@ (8010fc4 <_printf_i+0x238>)
 8010e5e:	230a      	movs	r3, #10
 8010e60:	e011      	b.n	8010e86 <_printf_i+0xfa>
 8010e62:	6821      	ldr	r1, [r4, #0]
 8010e64:	6833      	ldr	r3, [r6, #0]
 8010e66:	0608      	lsls	r0, r1, #24
 8010e68:	f853 5b04 	ldr.w	r5, [r3], #4
 8010e6c:	d402      	bmi.n	8010e74 <_printf_i+0xe8>
 8010e6e:	0649      	lsls	r1, r1, #25
 8010e70:	bf48      	it	mi
 8010e72:	b2ad      	uxthmi	r5, r5
 8010e74:	2f6f      	cmp	r7, #111	@ 0x6f
 8010e76:	4853      	ldr	r0, [pc, #332]	@ (8010fc4 <_printf_i+0x238>)
 8010e78:	6033      	str	r3, [r6, #0]
 8010e7a:	bf14      	ite	ne
 8010e7c:	230a      	movne	r3, #10
 8010e7e:	2308      	moveq	r3, #8
 8010e80:	2100      	movs	r1, #0
 8010e82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010e86:	6866      	ldr	r6, [r4, #4]
 8010e88:	60a6      	str	r6, [r4, #8]
 8010e8a:	2e00      	cmp	r6, #0
 8010e8c:	bfa2      	ittt	ge
 8010e8e:	6821      	ldrge	r1, [r4, #0]
 8010e90:	f021 0104 	bicge.w	r1, r1, #4
 8010e94:	6021      	strge	r1, [r4, #0]
 8010e96:	b90d      	cbnz	r5, 8010e9c <_printf_i+0x110>
 8010e98:	2e00      	cmp	r6, #0
 8010e9a:	d04b      	beq.n	8010f34 <_printf_i+0x1a8>
 8010e9c:	4616      	mov	r6, r2
 8010e9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010ea2:	fb03 5711 	mls	r7, r3, r1, r5
 8010ea6:	5dc7      	ldrb	r7, [r0, r7]
 8010ea8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010eac:	462f      	mov	r7, r5
 8010eae:	42bb      	cmp	r3, r7
 8010eb0:	460d      	mov	r5, r1
 8010eb2:	d9f4      	bls.n	8010e9e <_printf_i+0x112>
 8010eb4:	2b08      	cmp	r3, #8
 8010eb6:	d10b      	bne.n	8010ed0 <_printf_i+0x144>
 8010eb8:	6823      	ldr	r3, [r4, #0]
 8010eba:	07df      	lsls	r7, r3, #31
 8010ebc:	d508      	bpl.n	8010ed0 <_printf_i+0x144>
 8010ebe:	6923      	ldr	r3, [r4, #16]
 8010ec0:	6861      	ldr	r1, [r4, #4]
 8010ec2:	4299      	cmp	r1, r3
 8010ec4:	bfde      	ittt	le
 8010ec6:	2330      	movle	r3, #48	@ 0x30
 8010ec8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010ecc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8010ed0:	1b92      	subs	r2, r2, r6
 8010ed2:	6122      	str	r2, [r4, #16]
 8010ed4:	f8cd a000 	str.w	sl, [sp]
 8010ed8:	464b      	mov	r3, r9
 8010eda:	aa03      	add	r2, sp, #12
 8010edc:	4621      	mov	r1, r4
 8010ede:	4640      	mov	r0, r8
 8010ee0:	f7ff fee6 	bl	8010cb0 <_printf_common>
 8010ee4:	3001      	adds	r0, #1
 8010ee6:	d14a      	bne.n	8010f7e <_printf_i+0x1f2>
 8010ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8010eec:	b004      	add	sp, #16
 8010eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ef2:	6823      	ldr	r3, [r4, #0]
 8010ef4:	f043 0320 	orr.w	r3, r3, #32
 8010ef8:	6023      	str	r3, [r4, #0]
 8010efa:	4833      	ldr	r0, [pc, #204]	@ (8010fc8 <_printf_i+0x23c>)
 8010efc:	2778      	movs	r7, #120	@ 0x78
 8010efe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010f02:	6823      	ldr	r3, [r4, #0]
 8010f04:	6831      	ldr	r1, [r6, #0]
 8010f06:	061f      	lsls	r7, r3, #24
 8010f08:	f851 5b04 	ldr.w	r5, [r1], #4
 8010f0c:	d402      	bmi.n	8010f14 <_printf_i+0x188>
 8010f0e:	065f      	lsls	r7, r3, #25
 8010f10:	bf48      	it	mi
 8010f12:	b2ad      	uxthmi	r5, r5
 8010f14:	6031      	str	r1, [r6, #0]
 8010f16:	07d9      	lsls	r1, r3, #31
 8010f18:	bf44      	itt	mi
 8010f1a:	f043 0320 	orrmi.w	r3, r3, #32
 8010f1e:	6023      	strmi	r3, [r4, #0]
 8010f20:	b11d      	cbz	r5, 8010f2a <_printf_i+0x19e>
 8010f22:	2310      	movs	r3, #16
 8010f24:	e7ac      	b.n	8010e80 <_printf_i+0xf4>
 8010f26:	4827      	ldr	r0, [pc, #156]	@ (8010fc4 <_printf_i+0x238>)
 8010f28:	e7e9      	b.n	8010efe <_printf_i+0x172>
 8010f2a:	6823      	ldr	r3, [r4, #0]
 8010f2c:	f023 0320 	bic.w	r3, r3, #32
 8010f30:	6023      	str	r3, [r4, #0]
 8010f32:	e7f6      	b.n	8010f22 <_printf_i+0x196>
 8010f34:	4616      	mov	r6, r2
 8010f36:	e7bd      	b.n	8010eb4 <_printf_i+0x128>
 8010f38:	6833      	ldr	r3, [r6, #0]
 8010f3a:	6825      	ldr	r5, [r4, #0]
 8010f3c:	6961      	ldr	r1, [r4, #20]
 8010f3e:	1d18      	adds	r0, r3, #4
 8010f40:	6030      	str	r0, [r6, #0]
 8010f42:	062e      	lsls	r6, r5, #24
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	d501      	bpl.n	8010f4c <_printf_i+0x1c0>
 8010f48:	6019      	str	r1, [r3, #0]
 8010f4a:	e002      	b.n	8010f52 <_printf_i+0x1c6>
 8010f4c:	0668      	lsls	r0, r5, #25
 8010f4e:	d5fb      	bpl.n	8010f48 <_printf_i+0x1bc>
 8010f50:	8019      	strh	r1, [r3, #0]
 8010f52:	2300      	movs	r3, #0
 8010f54:	6123      	str	r3, [r4, #16]
 8010f56:	4616      	mov	r6, r2
 8010f58:	e7bc      	b.n	8010ed4 <_printf_i+0x148>
 8010f5a:	6833      	ldr	r3, [r6, #0]
 8010f5c:	1d1a      	adds	r2, r3, #4
 8010f5e:	6032      	str	r2, [r6, #0]
 8010f60:	681e      	ldr	r6, [r3, #0]
 8010f62:	6862      	ldr	r2, [r4, #4]
 8010f64:	2100      	movs	r1, #0
 8010f66:	4630      	mov	r0, r6
 8010f68:	f7ef f95a 	bl	8000220 <memchr>
 8010f6c:	b108      	cbz	r0, 8010f72 <_printf_i+0x1e6>
 8010f6e:	1b80      	subs	r0, r0, r6
 8010f70:	6060      	str	r0, [r4, #4]
 8010f72:	6863      	ldr	r3, [r4, #4]
 8010f74:	6123      	str	r3, [r4, #16]
 8010f76:	2300      	movs	r3, #0
 8010f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010f7c:	e7aa      	b.n	8010ed4 <_printf_i+0x148>
 8010f7e:	6923      	ldr	r3, [r4, #16]
 8010f80:	4632      	mov	r2, r6
 8010f82:	4649      	mov	r1, r9
 8010f84:	4640      	mov	r0, r8
 8010f86:	47d0      	blx	sl
 8010f88:	3001      	adds	r0, #1
 8010f8a:	d0ad      	beq.n	8010ee8 <_printf_i+0x15c>
 8010f8c:	6823      	ldr	r3, [r4, #0]
 8010f8e:	079b      	lsls	r3, r3, #30
 8010f90:	d413      	bmi.n	8010fba <_printf_i+0x22e>
 8010f92:	68e0      	ldr	r0, [r4, #12]
 8010f94:	9b03      	ldr	r3, [sp, #12]
 8010f96:	4298      	cmp	r0, r3
 8010f98:	bfb8      	it	lt
 8010f9a:	4618      	movlt	r0, r3
 8010f9c:	e7a6      	b.n	8010eec <_printf_i+0x160>
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	4632      	mov	r2, r6
 8010fa2:	4649      	mov	r1, r9
 8010fa4:	4640      	mov	r0, r8
 8010fa6:	47d0      	blx	sl
 8010fa8:	3001      	adds	r0, #1
 8010faa:	d09d      	beq.n	8010ee8 <_printf_i+0x15c>
 8010fac:	3501      	adds	r5, #1
 8010fae:	68e3      	ldr	r3, [r4, #12]
 8010fb0:	9903      	ldr	r1, [sp, #12]
 8010fb2:	1a5b      	subs	r3, r3, r1
 8010fb4:	42ab      	cmp	r3, r5
 8010fb6:	dcf2      	bgt.n	8010f9e <_printf_i+0x212>
 8010fb8:	e7eb      	b.n	8010f92 <_printf_i+0x206>
 8010fba:	2500      	movs	r5, #0
 8010fbc:	f104 0619 	add.w	r6, r4, #25
 8010fc0:	e7f5      	b.n	8010fae <_printf_i+0x222>
 8010fc2:	bf00      	nop
 8010fc4:	08016e58 	.word	0x08016e58
 8010fc8:	08016e69 	.word	0x08016e69

08010fcc <_scanf_float>:
 8010fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd0:	b087      	sub	sp, #28
 8010fd2:	4617      	mov	r7, r2
 8010fd4:	9303      	str	r3, [sp, #12]
 8010fd6:	688b      	ldr	r3, [r1, #8]
 8010fd8:	1e5a      	subs	r2, r3, #1
 8010fda:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8010fde:	bf81      	itttt	hi
 8010fe0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8010fe4:	eb03 0b05 	addhi.w	fp, r3, r5
 8010fe8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8010fec:	608b      	strhi	r3, [r1, #8]
 8010fee:	680b      	ldr	r3, [r1, #0]
 8010ff0:	460a      	mov	r2, r1
 8010ff2:	f04f 0500 	mov.w	r5, #0
 8010ff6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8010ffa:	f842 3b1c 	str.w	r3, [r2], #28
 8010ffe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8011002:	4680      	mov	r8, r0
 8011004:	460c      	mov	r4, r1
 8011006:	bf98      	it	ls
 8011008:	f04f 0b00 	movls.w	fp, #0
 801100c:	9201      	str	r2, [sp, #4]
 801100e:	4616      	mov	r6, r2
 8011010:	46aa      	mov	sl, r5
 8011012:	46a9      	mov	r9, r5
 8011014:	9502      	str	r5, [sp, #8]
 8011016:	68a2      	ldr	r2, [r4, #8]
 8011018:	b152      	cbz	r2, 8011030 <_scanf_float+0x64>
 801101a:	683b      	ldr	r3, [r7, #0]
 801101c:	781b      	ldrb	r3, [r3, #0]
 801101e:	2b4e      	cmp	r3, #78	@ 0x4e
 8011020:	d864      	bhi.n	80110ec <_scanf_float+0x120>
 8011022:	2b40      	cmp	r3, #64	@ 0x40
 8011024:	d83c      	bhi.n	80110a0 <_scanf_float+0xd4>
 8011026:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801102a:	b2c8      	uxtb	r0, r1
 801102c:	280e      	cmp	r0, #14
 801102e:	d93a      	bls.n	80110a6 <_scanf_float+0xda>
 8011030:	f1b9 0f00 	cmp.w	r9, #0
 8011034:	d003      	beq.n	801103e <_scanf_float+0x72>
 8011036:	6823      	ldr	r3, [r4, #0]
 8011038:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801103c:	6023      	str	r3, [r4, #0]
 801103e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011042:	f1ba 0f01 	cmp.w	sl, #1
 8011046:	f200 8117 	bhi.w	8011278 <_scanf_float+0x2ac>
 801104a:	9b01      	ldr	r3, [sp, #4]
 801104c:	429e      	cmp	r6, r3
 801104e:	f200 8108 	bhi.w	8011262 <_scanf_float+0x296>
 8011052:	2001      	movs	r0, #1
 8011054:	b007      	add	sp, #28
 8011056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801105a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801105e:	2a0d      	cmp	r2, #13
 8011060:	d8e6      	bhi.n	8011030 <_scanf_float+0x64>
 8011062:	a101      	add	r1, pc, #4	@ (adr r1, 8011068 <_scanf_float+0x9c>)
 8011064:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011068:	080111af 	.word	0x080111af
 801106c:	08011031 	.word	0x08011031
 8011070:	08011031 	.word	0x08011031
 8011074:	08011031 	.word	0x08011031
 8011078:	0801120f 	.word	0x0801120f
 801107c:	080111e7 	.word	0x080111e7
 8011080:	08011031 	.word	0x08011031
 8011084:	08011031 	.word	0x08011031
 8011088:	080111bd 	.word	0x080111bd
 801108c:	08011031 	.word	0x08011031
 8011090:	08011031 	.word	0x08011031
 8011094:	08011031 	.word	0x08011031
 8011098:	08011031 	.word	0x08011031
 801109c:	08011175 	.word	0x08011175
 80110a0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80110a4:	e7db      	b.n	801105e <_scanf_float+0x92>
 80110a6:	290e      	cmp	r1, #14
 80110a8:	d8c2      	bhi.n	8011030 <_scanf_float+0x64>
 80110aa:	a001      	add	r0, pc, #4	@ (adr r0, 80110b0 <_scanf_float+0xe4>)
 80110ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80110b0:	08011165 	.word	0x08011165
 80110b4:	08011031 	.word	0x08011031
 80110b8:	08011165 	.word	0x08011165
 80110bc:	080111fb 	.word	0x080111fb
 80110c0:	08011031 	.word	0x08011031
 80110c4:	0801110d 	.word	0x0801110d
 80110c8:	0801114b 	.word	0x0801114b
 80110cc:	0801114b 	.word	0x0801114b
 80110d0:	0801114b 	.word	0x0801114b
 80110d4:	0801114b 	.word	0x0801114b
 80110d8:	0801114b 	.word	0x0801114b
 80110dc:	0801114b 	.word	0x0801114b
 80110e0:	0801114b 	.word	0x0801114b
 80110e4:	0801114b 	.word	0x0801114b
 80110e8:	0801114b 	.word	0x0801114b
 80110ec:	2b6e      	cmp	r3, #110	@ 0x6e
 80110ee:	d809      	bhi.n	8011104 <_scanf_float+0x138>
 80110f0:	2b60      	cmp	r3, #96	@ 0x60
 80110f2:	d8b2      	bhi.n	801105a <_scanf_float+0x8e>
 80110f4:	2b54      	cmp	r3, #84	@ 0x54
 80110f6:	d07b      	beq.n	80111f0 <_scanf_float+0x224>
 80110f8:	2b59      	cmp	r3, #89	@ 0x59
 80110fa:	d199      	bne.n	8011030 <_scanf_float+0x64>
 80110fc:	2d07      	cmp	r5, #7
 80110fe:	d197      	bne.n	8011030 <_scanf_float+0x64>
 8011100:	2508      	movs	r5, #8
 8011102:	e02c      	b.n	801115e <_scanf_float+0x192>
 8011104:	2b74      	cmp	r3, #116	@ 0x74
 8011106:	d073      	beq.n	80111f0 <_scanf_float+0x224>
 8011108:	2b79      	cmp	r3, #121	@ 0x79
 801110a:	e7f6      	b.n	80110fa <_scanf_float+0x12e>
 801110c:	6821      	ldr	r1, [r4, #0]
 801110e:	05c8      	lsls	r0, r1, #23
 8011110:	d51b      	bpl.n	801114a <_scanf_float+0x17e>
 8011112:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8011116:	6021      	str	r1, [r4, #0]
 8011118:	f109 0901 	add.w	r9, r9, #1
 801111c:	f1bb 0f00 	cmp.w	fp, #0
 8011120:	d003      	beq.n	801112a <_scanf_float+0x15e>
 8011122:	3201      	adds	r2, #1
 8011124:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011128:	60a2      	str	r2, [r4, #8]
 801112a:	68a3      	ldr	r3, [r4, #8]
 801112c:	3b01      	subs	r3, #1
 801112e:	60a3      	str	r3, [r4, #8]
 8011130:	6923      	ldr	r3, [r4, #16]
 8011132:	3301      	adds	r3, #1
 8011134:	6123      	str	r3, [r4, #16]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	3b01      	subs	r3, #1
 801113a:	2b00      	cmp	r3, #0
 801113c:	607b      	str	r3, [r7, #4]
 801113e:	f340 8087 	ble.w	8011250 <_scanf_float+0x284>
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	3301      	adds	r3, #1
 8011146:	603b      	str	r3, [r7, #0]
 8011148:	e765      	b.n	8011016 <_scanf_float+0x4a>
 801114a:	eb1a 0105 	adds.w	r1, sl, r5
 801114e:	f47f af6f 	bne.w	8011030 <_scanf_float+0x64>
 8011152:	6822      	ldr	r2, [r4, #0]
 8011154:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011158:	6022      	str	r2, [r4, #0]
 801115a:	460d      	mov	r5, r1
 801115c:	468a      	mov	sl, r1
 801115e:	f806 3b01 	strb.w	r3, [r6], #1
 8011162:	e7e2      	b.n	801112a <_scanf_float+0x15e>
 8011164:	6822      	ldr	r2, [r4, #0]
 8011166:	0610      	lsls	r0, r2, #24
 8011168:	f57f af62 	bpl.w	8011030 <_scanf_float+0x64>
 801116c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011170:	6022      	str	r2, [r4, #0]
 8011172:	e7f4      	b.n	801115e <_scanf_float+0x192>
 8011174:	f1ba 0f00 	cmp.w	sl, #0
 8011178:	d10e      	bne.n	8011198 <_scanf_float+0x1cc>
 801117a:	f1b9 0f00 	cmp.w	r9, #0
 801117e:	d10e      	bne.n	801119e <_scanf_float+0x1d2>
 8011180:	6822      	ldr	r2, [r4, #0]
 8011182:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011186:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801118a:	d108      	bne.n	801119e <_scanf_float+0x1d2>
 801118c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011190:	6022      	str	r2, [r4, #0]
 8011192:	f04f 0a01 	mov.w	sl, #1
 8011196:	e7e2      	b.n	801115e <_scanf_float+0x192>
 8011198:	f1ba 0f02 	cmp.w	sl, #2
 801119c:	d055      	beq.n	801124a <_scanf_float+0x27e>
 801119e:	2d01      	cmp	r5, #1
 80111a0:	d002      	beq.n	80111a8 <_scanf_float+0x1dc>
 80111a2:	2d04      	cmp	r5, #4
 80111a4:	f47f af44 	bne.w	8011030 <_scanf_float+0x64>
 80111a8:	3501      	adds	r5, #1
 80111aa:	b2ed      	uxtb	r5, r5
 80111ac:	e7d7      	b.n	801115e <_scanf_float+0x192>
 80111ae:	f1ba 0f01 	cmp.w	sl, #1
 80111b2:	f47f af3d 	bne.w	8011030 <_scanf_float+0x64>
 80111b6:	f04f 0a02 	mov.w	sl, #2
 80111ba:	e7d0      	b.n	801115e <_scanf_float+0x192>
 80111bc:	b97d      	cbnz	r5, 80111de <_scanf_float+0x212>
 80111be:	f1b9 0f00 	cmp.w	r9, #0
 80111c2:	f47f af38 	bne.w	8011036 <_scanf_float+0x6a>
 80111c6:	6822      	ldr	r2, [r4, #0]
 80111c8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80111cc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80111d0:	f040 8108 	bne.w	80113e4 <_scanf_float+0x418>
 80111d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80111d8:	6022      	str	r2, [r4, #0]
 80111da:	2501      	movs	r5, #1
 80111dc:	e7bf      	b.n	801115e <_scanf_float+0x192>
 80111de:	2d03      	cmp	r5, #3
 80111e0:	d0e2      	beq.n	80111a8 <_scanf_float+0x1dc>
 80111e2:	2d05      	cmp	r5, #5
 80111e4:	e7de      	b.n	80111a4 <_scanf_float+0x1d8>
 80111e6:	2d02      	cmp	r5, #2
 80111e8:	f47f af22 	bne.w	8011030 <_scanf_float+0x64>
 80111ec:	2503      	movs	r5, #3
 80111ee:	e7b6      	b.n	801115e <_scanf_float+0x192>
 80111f0:	2d06      	cmp	r5, #6
 80111f2:	f47f af1d 	bne.w	8011030 <_scanf_float+0x64>
 80111f6:	2507      	movs	r5, #7
 80111f8:	e7b1      	b.n	801115e <_scanf_float+0x192>
 80111fa:	6822      	ldr	r2, [r4, #0]
 80111fc:	0591      	lsls	r1, r2, #22
 80111fe:	f57f af17 	bpl.w	8011030 <_scanf_float+0x64>
 8011202:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011206:	6022      	str	r2, [r4, #0]
 8011208:	f8cd 9008 	str.w	r9, [sp, #8]
 801120c:	e7a7      	b.n	801115e <_scanf_float+0x192>
 801120e:	6822      	ldr	r2, [r4, #0]
 8011210:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011214:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011218:	d006      	beq.n	8011228 <_scanf_float+0x25c>
 801121a:	0550      	lsls	r0, r2, #21
 801121c:	f57f af08 	bpl.w	8011030 <_scanf_float+0x64>
 8011220:	f1b9 0f00 	cmp.w	r9, #0
 8011224:	f000 80de 	beq.w	80113e4 <_scanf_float+0x418>
 8011228:	0591      	lsls	r1, r2, #22
 801122a:	bf58      	it	pl
 801122c:	9902      	ldrpl	r1, [sp, #8]
 801122e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011232:	bf58      	it	pl
 8011234:	eba9 0101 	subpl.w	r1, r9, r1
 8011238:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801123c:	bf58      	it	pl
 801123e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011242:	6022      	str	r2, [r4, #0]
 8011244:	f04f 0900 	mov.w	r9, #0
 8011248:	e789      	b.n	801115e <_scanf_float+0x192>
 801124a:	f04f 0a03 	mov.w	sl, #3
 801124e:	e786      	b.n	801115e <_scanf_float+0x192>
 8011250:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011254:	4639      	mov	r1, r7
 8011256:	4640      	mov	r0, r8
 8011258:	4798      	blx	r3
 801125a:	2800      	cmp	r0, #0
 801125c:	f43f aedb 	beq.w	8011016 <_scanf_float+0x4a>
 8011260:	e6e6      	b.n	8011030 <_scanf_float+0x64>
 8011262:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011266:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801126a:	463a      	mov	r2, r7
 801126c:	4640      	mov	r0, r8
 801126e:	4798      	blx	r3
 8011270:	6923      	ldr	r3, [r4, #16]
 8011272:	3b01      	subs	r3, #1
 8011274:	6123      	str	r3, [r4, #16]
 8011276:	e6e8      	b.n	801104a <_scanf_float+0x7e>
 8011278:	1e6b      	subs	r3, r5, #1
 801127a:	2b06      	cmp	r3, #6
 801127c:	d824      	bhi.n	80112c8 <_scanf_float+0x2fc>
 801127e:	2d02      	cmp	r5, #2
 8011280:	d836      	bhi.n	80112f0 <_scanf_float+0x324>
 8011282:	9b01      	ldr	r3, [sp, #4]
 8011284:	429e      	cmp	r6, r3
 8011286:	f67f aee4 	bls.w	8011052 <_scanf_float+0x86>
 801128a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801128e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011292:	463a      	mov	r2, r7
 8011294:	4640      	mov	r0, r8
 8011296:	4798      	blx	r3
 8011298:	6923      	ldr	r3, [r4, #16]
 801129a:	3b01      	subs	r3, #1
 801129c:	6123      	str	r3, [r4, #16]
 801129e:	e7f0      	b.n	8011282 <_scanf_float+0x2b6>
 80112a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80112a4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80112a8:	463a      	mov	r2, r7
 80112aa:	4640      	mov	r0, r8
 80112ac:	4798      	blx	r3
 80112ae:	6923      	ldr	r3, [r4, #16]
 80112b0:	3b01      	subs	r3, #1
 80112b2:	6123      	str	r3, [r4, #16]
 80112b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80112b8:	fa5f fa8a 	uxtb.w	sl, sl
 80112bc:	f1ba 0f02 	cmp.w	sl, #2
 80112c0:	d1ee      	bne.n	80112a0 <_scanf_float+0x2d4>
 80112c2:	3d03      	subs	r5, #3
 80112c4:	b2ed      	uxtb	r5, r5
 80112c6:	1b76      	subs	r6, r6, r5
 80112c8:	6823      	ldr	r3, [r4, #0]
 80112ca:	05da      	lsls	r2, r3, #23
 80112cc:	d530      	bpl.n	8011330 <_scanf_float+0x364>
 80112ce:	055b      	lsls	r3, r3, #21
 80112d0:	d511      	bpl.n	80112f6 <_scanf_float+0x32a>
 80112d2:	9b01      	ldr	r3, [sp, #4]
 80112d4:	429e      	cmp	r6, r3
 80112d6:	f67f aebc 	bls.w	8011052 <_scanf_float+0x86>
 80112da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80112de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80112e2:	463a      	mov	r2, r7
 80112e4:	4640      	mov	r0, r8
 80112e6:	4798      	blx	r3
 80112e8:	6923      	ldr	r3, [r4, #16]
 80112ea:	3b01      	subs	r3, #1
 80112ec:	6123      	str	r3, [r4, #16]
 80112ee:	e7f0      	b.n	80112d2 <_scanf_float+0x306>
 80112f0:	46aa      	mov	sl, r5
 80112f2:	46b3      	mov	fp, r6
 80112f4:	e7de      	b.n	80112b4 <_scanf_float+0x2e8>
 80112f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80112fa:	6923      	ldr	r3, [r4, #16]
 80112fc:	2965      	cmp	r1, #101	@ 0x65
 80112fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8011302:	f106 35ff 	add.w	r5, r6, #4294967295
 8011306:	6123      	str	r3, [r4, #16]
 8011308:	d00c      	beq.n	8011324 <_scanf_float+0x358>
 801130a:	2945      	cmp	r1, #69	@ 0x45
 801130c:	d00a      	beq.n	8011324 <_scanf_float+0x358>
 801130e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011312:	463a      	mov	r2, r7
 8011314:	4640      	mov	r0, r8
 8011316:	4798      	blx	r3
 8011318:	6923      	ldr	r3, [r4, #16]
 801131a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801131e:	3b01      	subs	r3, #1
 8011320:	1eb5      	subs	r5, r6, #2
 8011322:	6123      	str	r3, [r4, #16]
 8011324:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011328:	463a      	mov	r2, r7
 801132a:	4640      	mov	r0, r8
 801132c:	4798      	blx	r3
 801132e:	462e      	mov	r6, r5
 8011330:	6822      	ldr	r2, [r4, #0]
 8011332:	f012 0210 	ands.w	r2, r2, #16
 8011336:	d001      	beq.n	801133c <_scanf_float+0x370>
 8011338:	2000      	movs	r0, #0
 801133a:	e68b      	b.n	8011054 <_scanf_float+0x88>
 801133c:	7032      	strb	r2, [r6, #0]
 801133e:	6823      	ldr	r3, [r4, #0]
 8011340:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011344:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011348:	d11c      	bne.n	8011384 <_scanf_float+0x3b8>
 801134a:	9b02      	ldr	r3, [sp, #8]
 801134c:	454b      	cmp	r3, r9
 801134e:	eba3 0209 	sub.w	r2, r3, r9
 8011352:	d123      	bne.n	801139c <_scanf_float+0x3d0>
 8011354:	9901      	ldr	r1, [sp, #4]
 8011356:	2200      	movs	r2, #0
 8011358:	4640      	mov	r0, r8
 801135a:	f002 fc45 	bl	8013be8 <_strtod_r>
 801135e:	9b03      	ldr	r3, [sp, #12]
 8011360:	6821      	ldr	r1, [r4, #0]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	f011 0f02 	tst.w	r1, #2
 8011368:	ec57 6b10 	vmov	r6, r7, d0
 801136c:	f103 0204 	add.w	r2, r3, #4
 8011370:	d01f      	beq.n	80113b2 <_scanf_float+0x3e6>
 8011372:	9903      	ldr	r1, [sp, #12]
 8011374:	600a      	str	r2, [r1, #0]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	e9c3 6700 	strd	r6, r7, [r3]
 801137c:	68e3      	ldr	r3, [r4, #12]
 801137e:	3301      	adds	r3, #1
 8011380:	60e3      	str	r3, [r4, #12]
 8011382:	e7d9      	b.n	8011338 <_scanf_float+0x36c>
 8011384:	9b04      	ldr	r3, [sp, #16]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d0e4      	beq.n	8011354 <_scanf_float+0x388>
 801138a:	9905      	ldr	r1, [sp, #20]
 801138c:	230a      	movs	r3, #10
 801138e:	3101      	adds	r1, #1
 8011390:	4640      	mov	r0, r8
 8011392:	f002 fca9 	bl	8013ce8 <_strtol_r>
 8011396:	9b04      	ldr	r3, [sp, #16]
 8011398:	9e05      	ldr	r6, [sp, #20]
 801139a:	1ac2      	subs	r2, r0, r3
 801139c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80113a0:	429e      	cmp	r6, r3
 80113a2:	bf28      	it	cs
 80113a4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80113a8:	4910      	ldr	r1, [pc, #64]	@ (80113ec <_scanf_float+0x420>)
 80113aa:	4630      	mov	r0, r6
 80113ac:	f000 f8e4 	bl	8011578 <siprintf>
 80113b0:	e7d0      	b.n	8011354 <_scanf_float+0x388>
 80113b2:	f011 0f04 	tst.w	r1, #4
 80113b6:	9903      	ldr	r1, [sp, #12]
 80113b8:	600a      	str	r2, [r1, #0]
 80113ba:	d1dc      	bne.n	8011376 <_scanf_float+0x3aa>
 80113bc:	681d      	ldr	r5, [r3, #0]
 80113be:	4632      	mov	r2, r6
 80113c0:	463b      	mov	r3, r7
 80113c2:	4630      	mov	r0, r6
 80113c4:	4639      	mov	r1, r7
 80113c6:	f7ef fbd9 	bl	8000b7c <__aeabi_dcmpun>
 80113ca:	b128      	cbz	r0, 80113d8 <_scanf_float+0x40c>
 80113cc:	4808      	ldr	r0, [pc, #32]	@ (80113f0 <_scanf_float+0x424>)
 80113ce:	f000 fa03 	bl	80117d8 <nanf>
 80113d2:	ed85 0a00 	vstr	s0, [r5]
 80113d6:	e7d1      	b.n	801137c <_scanf_float+0x3b0>
 80113d8:	4630      	mov	r0, r6
 80113da:	4639      	mov	r1, r7
 80113dc:	f7ef fc2c 	bl	8000c38 <__aeabi_d2f>
 80113e0:	6028      	str	r0, [r5, #0]
 80113e2:	e7cb      	b.n	801137c <_scanf_float+0x3b0>
 80113e4:	f04f 0900 	mov.w	r9, #0
 80113e8:	e629      	b.n	801103e <_scanf_float+0x72>
 80113ea:	bf00      	nop
 80113ec:	08016e7a 	.word	0x08016e7a
 80113f0:	08017230 	.word	0x08017230

080113f4 <std>:
 80113f4:	2300      	movs	r3, #0
 80113f6:	b510      	push	{r4, lr}
 80113f8:	4604      	mov	r4, r0
 80113fa:	e9c0 3300 	strd	r3, r3, [r0]
 80113fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011402:	6083      	str	r3, [r0, #8]
 8011404:	8181      	strh	r1, [r0, #12]
 8011406:	6643      	str	r3, [r0, #100]	@ 0x64
 8011408:	81c2      	strh	r2, [r0, #14]
 801140a:	6183      	str	r3, [r0, #24]
 801140c:	4619      	mov	r1, r3
 801140e:	2208      	movs	r2, #8
 8011410:	305c      	adds	r0, #92	@ 0x5c
 8011412:	f000 f940 	bl	8011696 <memset>
 8011416:	4b0d      	ldr	r3, [pc, #52]	@ (801144c <std+0x58>)
 8011418:	6263      	str	r3, [r4, #36]	@ 0x24
 801141a:	4b0d      	ldr	r3, [pc, #52]	@ (8011450 <std+0x5c>)
 801141c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801141e:	4b0d      	ldr	r3, [pc, #52]	@ (8011454 <std+0x60>)
 8011420:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011422:	4b0d      	ldr	r3, [pc, #52]	@ (8011458 <std+0x64>)
 8011424:	6323      	str	r3, [r4, #48]	@ 0x30
 8011426:	4b0d      	ldr	r3, [pc, #52]	@ (801145c <std+0x68>)
 8011428:	6224      	str	r4, [r4, #32]
 801142a:	429c      	cmp	r4, r3
 801142c:	d006      	beq.n	801143c <std+0x48>
 801142e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011432:	4294      	cmp	r4, r2
 8011434:	d002      	beq.n	801143c <std+0x48>
 8011436:	33d0      	adds	r3, #208	@ 0xd0
 8011438:	429c      	cmp	r4, r3
 801143a:	d105      	bne.n	8011448 <std+0x54>
 801143c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011444:	f000 b9b6 	b.w	80117b4 <__retarget_lock_init_recursive>
 8011448:	bd10      	pop	{r4, pc}
 801144a:	bf00      	nop
 801144c:	0801160d 	.word	0x0801160d
 8011450:	08011633 	.word	0x08011633
 8011454:	0801166b 	.word	0x0801166b
 8011458:	0801168f 	.word	0x0801168f
 801145c:	2000254c 	.word	0x2000254c

08011460 <stdio_exit_handler>:
 8011460:	4a02      	ldr	r2, [pc, #8]	@ (801146c <stdio_exit_handler+0xc>)
 8011462:	4903      	ldr	r1, [pc, #12]	@ (8011470 <stdio_exit_handler+0x10>)
 8011464:	4803      	ldr	r0, [pc, #12]	@ (8011474 <stdio_exit_handler+0x14>)
 8011466:	f000 b869 	b.w	801153c <_fwalk_sglue>
 801146a:	bf00      	nop
 801146c:	200001b0 	.word	0x200001b0
 8011470:	080146d9 	.word	0x080146d9
 8011474:	200001c0 	.word	0x200001c0

08011478 <cleanup_stdio>:
 8011478:	6841      	ldr	r1, [r0, #4]
 801147a:	4b0c      	ldr	r3, [pc, #48]	@ (80114ac <cleanup_stdio+0x34>)
 801147c:	4299      	cmp	r1, r3
 801147e:	b510      	push	{r4, lr}
 8011480:	4604      	mov	r4, r0
 8011482:	d001      	beq.n	8011488 <cleanup_stdio+0x10>
 8011484:	f003 f928 	bl	80146d8 <_fflush_r>
 8011488:	68a1      	ldr	r1, [r4, #8]
 801148a:	4b09      	ldr	r3, [pc, #36]	@ (80114b0 <cleanup_stdio+0x38>)
 801148c:	4299      	cmp	r1, r3
 801148e:	d002      	beq.n	8011496 <cleanup_stdio+0x1e>
 8011490:	4620      	mov	r0, r4
 8011492:	f003 f921 	bl	80146d8 <_fflush_r>
 8011496:	68e1      	ldr	r1, [r4, #12]
 8011498:	4b06      	ldr	r3, [pc, #24]	@ (80114b4 <cleanup_stdio+0x3c>)
 801149a:	4299      	cmp	r1, r3
 801149c:	d004      	beq.n	80114a8 <cleanup_stdio+0x30>
 801149e:	4620      	mov	r0, r4
 80114a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114a4:	f003 b918 	b.w	80146d8 <_fflush_r>
 80114a8:	bd10      	pop	{r4, pc}
 80114aa:	bf00      	nop
 80114ac:	2000254c 	.word	0x2000254c
 80114b0:	200025b4 	.word	0x200025b4
 80114b4:	2000261c 	.word	0x2000261c

080114b8 <global_stdio_init.part.0>:
 80114b8:	b510      	push	{r4, lr}
 80114ba:	4b0b      	ldr	r3, [pc, #44]	@ (80114e8 <global_stdio_init.part.0+0x30>)
 80114bc:	4c0b      	ldr	r4, [pc, #44]	@ (80114ec <global_stdio_init.part.0+0x34>)
 80114be:	4a0c      	ldr	r2, [pc, #48]	@ (80114f0 <global_stdio_init.part.0+0x38>)
 80114c0:	601a      	str	r2, [r3, #0]
 80114c2:	4620      	mov	r0, r4
 80114c4:	2200      	movs	r2, #0
 80114c6:	2104      	movs	r1, #4
 80114c8:	f7ff ff94 	bl	80113f4 <std>
 80114cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80114d0:	2201      	movs	r2, #1
 80114d2:	2109      	movs	r1, #9
 80114d4:	f7ff ff8e 	bl	80113f4 <std>
 80114d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80114dc:	2202      	movs	r2, #2
 80114de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80114e2:	2112      	movs	r1, #18
 80114e4:	f7ff bf86 	b.w	80113f4 <std>
 80114e8:	20002684 	.word	0x20002684
 80114ec:	2000254c 	.word	0x2000254c
 80114f0:	08011461 	.word	0x08011461

080114f4 <__sfp_lock_acquire>:
 80114f4:	4801      	ldr	r0, [pc, #4]	@ (80114fc <__sfp_lock_acquire+0x8>)
 80114f6:	f000 b95e 	b.w	80117b6 <__retarget_lock_acquire_recursive>
 80114fa:	bf00      	nop
 80114fc:	2000268d 	.word	0x2000268d

08011500 <__sfp_lock_release>:
 8011500:	4801      	ldr	r0, [pc, #4]	@ (8011508 <__sfp_lock_release+0x8>)
 8011502:	f000 b959 	b.w	80117b8 <__retarget_lock_release_recursive>
 8011506:	bf00      	nop
 8011508:	2000268d 	.word	0x2000268d

0801150c <__sinit>:
 801150c:	b510      	push	{r4, lr}
 801150e:	4604      	mov	r4, r0
 8011510:	f7ff fff0 	bl	80114f4 <__sfp_lock_acquire>
 8011514:	6a23      	ldr	r3, [r4, #32]
 8011516:	b11b      	cbz	r3, 8011520 <__sinit+0x14>
 8011518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801151c:	f7ff bff0 	b.w	8011500 <__sfp_lock_release>
 8011520:	4b04      	ldr	r3, [pc, #16]	@ (8011534 <__sinit+0x28>)
 8011522:	6223      	str	r3, [r4, #32]
 8011524:	4b04      	ldr	r3, [pc, #16]	@ (8011538 <__sinit+0x2c>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d1f5      	bne.n	8011518 <__sinit+0xc>
 801152c:	f7ff ffc4 	bl	80114b8 <global_stdio_init.part.0>
 8011530:	e7f2      	b.n	8011518 <__sinit+0xc>
 8011532:	bf00      	nop
 8011534:	08011479 	.word	0x08011479
 8011538:	20002684 	.word	0x20002684

0801153c <_fwalk_sglue>:
 801153c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011540:	4607      	mov	r7, r0
 8011542:	4688      	mov	r8, r1
 8011544:	4614      	mov	r4, r2
 8011546:	2600      	movs	r6, #0
 8011548:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801154c:	f1b9 0901 	subs.w	r9, r9, #1
 8011550:	d505      	bpl.n	801155e <_fwalk_sglue+0x22>
 8011552:	6824      	ldr	r4, [r4, #0]
 8011554:	2c00      	cmp	r4, #0
 8011556:	d1f7      	bne.n	8011548 <_fwalk_sglue+0xc>
 8011558:	4630      	mov	r0, r6
 801155a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801155e:	89ab      	ldrh	r3, [r5, #12]
 8011560:	2b01      	cmp	r3, #1
 8011562:	d907      	bls.n	8011574 <_fwalk_sglue+0x38>
 8011564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011568:	3301      	adds	r3, #1
 801156a:	d003      	beq.n	8011574 <_fwalk_sglue+0x38>
 801156c:	4629      	mov	r1, r5
 801156e:	4638      	mov	r0, r7
 8011570:	47c0      	blx	r8
 8011572:	4306      	orrs	r6, r0
 8011574:	3568      	adds	r5, #104	@ 0x68
 8011576:	e7e9      	b.n	801154c <_fwalk_sglue+0x10>

08011578 <siprintf>:
 8011578:	b40e      	push	{r1, r2, r3}
 801157a:	b500      	push	{lr}
 801157c:	b09c      	sub	sp, #112	@ 0x70
 801157e:	ab1d      	add	r3, sp, #116	@ 0x74
 8011580:	9002      	str	r0, [sp, #8]
 8011582:	9006      	str	r0, [sp, #24]
 8011584:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011588:	4809      	ldr	r0, [pc, #36]	@ (80115b0 <siprintf+0x38>)
 801158a:	9107      	str	r1, [sp, #28]
 801158c:	9104      	str	r1, [sp, #16]
 801158e:	4909      	ldr	r1, [pc, #36]	@ (80115b4 <siprintf+0x3c>)
 8011590:	f853 2b04 	ldr.w	r2, [r3], #4
 8011594:	9105      	str	r1, [sp, #20]
 8011596:	6800      	ldr	r0, [r0, #0]
 8011598:	9301      	str	r3, [sp, #4]
 801159a:	a902      	add	r1, sp, #8
 801159c:	f002 fc02 	bl	8013da4 <_svfiprintf_r>
 80115a0:	9b02      	ldr	r3, [sp, #8]
 80115a2:	2200      	movs	r2, #0
 80115a4:	701a      	strb	r2, [r3, #0]
 80115a6:	b01c      	add	sp, #112	@ 0x70
 80115a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80115ac:	b003      	add	sp, #12
 80115ae:	4770      	bx	lr
 80115b0:	200001bc 	.word	0x200001bc
 80115b4:	ffff0208 	.word	0xffff0208

080115b8 <siscanf>:
 80115b8:	b40e      	push	{r1, r2, r3}
 80115ba:	b530      	push	{r4, r5, lr}
 80115bc:	b09c      	sub	sp, #112	@ 0x70
 80115be:	ac1f      	add	r4, sp, #124	@ 0x7c
 80115c0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80115c4:	f854 5b04 	ldr.w	r5, [r4], #4
 80115c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80115cc:	9002      	str	r0, [sp, #8]
 80115ce:	9006      	str	r0, [sp, #24]
 80115d0:	f7ee fe76 	bl	80002c0 <strlen>
 80115d4:	4b0b      	ldr	r3, [pc, #44]	@ (8011604 <siscanf+0x4c>)
 80115d6:	9003      	str	r0, [sp, #12]
 80115d8:	9007      	str	r0, [sp, #28]
 80115da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80115dc:	480a      	ldr	r0, [pc, #40]	@ (8011608 <siscanf+0x50>)
 80115de:	9401      	str	r4, [sp, #4]
 80115e0:	2300      	movs	r3, #0
 80115e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80115e4:	9314      	str	r3, [sp, #80]	@ 0x50
 80115e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80115ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 80115ee:	462a      	mov	r2, r5
 80115f0:	4623      	mov	r3, r4
 80115f2:	a902      	add	r1, sp, #8
 80115f4:	6800      	ldr	r0, [r0, #0]
 80115f6:	f002 fd29 	bl	801404c <__ssvfiscanf_r>
 80115fa:	b01c      	add	sp, #112	@ 0x70
 80115fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011600:	b003      	add	sp, #12
 8011602:	4770      	bx	lr
 8011604:	0801162f 	.word	0x0801162f
 8011608:	200001bc 	.word	0x200001bc

0801160c <__sread>:
 801160c:	b510      	push	{r4, lr}
 801160e:	460c      	mov	r4, r1
 8011610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011614:	f000 f880 	bl	8011718 <_read_r>
 8011618:	2800      	cmp	r0, #0
 801161a:	bfab      	itete	ge
 801161c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801161e:	89a3      	ldrhlt	r3, [r4, #12]
 8011620:	181b      	addge	r3, r3, r0
 8011622:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011626:	bfac      	ite	ge
 8011628:	6563      	strge	r3, [r4, #84]	@ 0x54
 801162a:	81a3      	strhlt	r3, [r4, #12]
 801162c:	bd10      	pop	{r4, pc}

0801162e <__seofread>:
 801162e:	2000      	movs	r0, #0
 8011630:	4770      	bx	lr

08011632 <__swrite>:
 8011632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011636:	461f      	mov	r7, r3
 8011638:	898b      	ldrh	r3, [r1, #12]
 801163a:	05db      	lsls	r3, r3, #23
 801163c:	4605      	mov	r5, r0
 801163e:	460c      	mov	r4, r1
 8011640:	4616      	mov	r6, r2
 8011642:	d505      	bpl.n	8011650 <__swrite+0x1e>
 8011644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011648:	2302      	movs	r3, #2
 801164a:	2200      	movs	r2, #0
 801164c:	f000 f852 	bl	80116f4 <_lseek_r>
 8011650:	89a3      	ldrh	r3, [r4, #12]
 8011652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011656:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801165a:	81a3      	strh	r3, [r4, #12]
 801165c:	4632      	mov	r2, r6
 801165e:	463b      	mov	r3, r7
 8011660:	4628      	mov	r0, r5
 8011662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011666:	f000 b869 	b.w	801173c <_write_r>

0801166a <__sseek>:
 801166a:	b510      	push	{r4, lr}
 801166c:	460c      	mov	r4, r1
 801166e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011672:	f000 f83f 	bl	80116f4 <_lseek_r>
 8011676:	1c43      	adds	r3, r0, #1
 8011678:	89a3      	ldrh	r3, [r4, #12]
 801167a:	bf15      	itete	ne
 801167c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801167e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011682:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011686:	81a3      	strheq	r3, [r4, #12]
 8011688:	bf18      	it	ne
 801168a:	81a3      	strhne	r3, [r4, #12]
 801168c:	bd10      	pop	{r4, pc}

0801168e <__sclose>:
 801168e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011692:	f000 b81f 	b.w	80116d4 <_close_r>

08011696 <memset>:
 8011696:	4402      	add	r2, r0
 8011698:	4603      	mov	r3, r0
 801169a:	4293      	cmp	r3, r2
 801169c:	d100      	bne.n	80116a0 <memset+0xa>
 801169e:	4770      	bx	lr
 80116a0:	f803 1b01 	strb.w	r1, [r3], #1
 80116a4:	e7f9      	b.n	801169a <memset+0x4>

080116a6 <strncmp>:
 80116a6:	b510      	push	{r4, lr}
 80116a8:	b16a      	cbz	r2, 80116c6 <strncmp+0x20>
 80116aa:	3901      	subs	r1, #1
 80116ac:	1884      	adds	r4, r0, r2
 80116ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80116b2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80116b6:	429a      	cmp	r2, r3
 80116b8:	d103      	bne.n	80116c2 <strncmp+0x1c>
 80116ba:	42a0      	cmp	r0, r4
 80116bc:	d001      	beq.n	80116c2 <strncmp+0x1c>
 80116be:	2a00      	cmp	r2, #0
 80116c0:	d1f5      	bne.n	80116ae <strncmp+0x8>
 80116c2:	1ad0      	subs	r0, r2, r3
 80116c4:	bd10      	pop	{r4, pc}
 80116c6:	4610      	mov	r0, r2
 80116c8:	e7fc      	b.n	80116c4 <strncmp+0x1e>
	...

080116cc <_localeconv_r>:
 80116cc:	4800      	ldr	r0, [pc, #0]	@ (80116d0 <_localeconv_r+0x4>)
 80116ce:	4770      	bx	lr
 80116d0:	200002fc 	.word	0x200002fc

080116d4 <_close_r>:
 80116d4:	b538      	push	{r3, r4, r5, lr}
 80116d6:	4d06      	ldr	r5, [pc, #24]	@ (80116f0 <_close_r+0x1c>)
 80116d8:	2300      	movs	r3, #0
 80116da:	4604      	mov	r4, r0
 80116dc:	4608      	mov	r0, r1
 80116de:	602b      	str	r3, [r5, #0]
 80116e0:	f7f2 fcdc 	bl	800409c <_close>
 80116e4:	1c43      	adds	r3, r0, #1
 80116e6:	d102      	bne.n	80116ee <_close_r+0x1a>
 80116e8:	682b      	ldr	r3, [r5, #0]
 80116ea:	b103      	cbz	r3, 80116ee <_close_r+0x1a>
 80116ec:	6023      	str	r3, [r4, #0]
 80116ee:	bd38      	pop	{r3, r4, r5, pc}
 80116f0:	20002688 	.word	0x20002688

080116f4 <_lseek_r>:
 80116f4:	b538      	push	{r3, r4, r5, lr}
 80116f6:	4d07      	ldr	r5, [pc, #28]	@ (8011714 <_lseek_r+0x20>)
 80116f8:	4604      	mov	r4, r0
 80116fa:	4608      	mov	r0, r1
 80116fc:	4611      	mov	r1, r2
 80116fe:	2200      	movs	r2, #0
 8011700:	602a      	str	r2, [r5, #0]
 8011702:	461a      	mov	r2, r3
 8011704:	f7f2 fcf1 	bl	80040ea <_lseek>
 8011708:	1c43      	adds	r3, r0, #1
 801170a:	d102      	bne.n	8011712 <_lseek_r+0x1e>
 801170c:	682b      	ldr	r3, [r5, #0]
 801170e:	b103      	cbz	r3, 8011712 <_lseek_r+0x1e>
 8011710:	6023      	str	r3, [r4, #0]
 8011712:	bd38      	pop	{r3, r4, r5, pc}
 8011714:	20002688 	.word	0x20002688

08011718 <_read_r>:
 8011718:	b538      	push	{r3, r4, r5, lr}
 801171a:	4d07      	ldr	r5, [pc, #28]	@ (8011738 <_read_r+0x20>)
 801171c:	4604      	mov	r4, r0
 801171e:	4608      	mov	r0, r1
 8011720:	4611      	mov	r1, r2
 8011722:	2200      	movs	r2, #0
 8011724:	602a      	str	r2, [r5, #0]
 8011726:	461a      	mov	r2, r3
 8011728:	f7f2 fc7f 	bl	800402a <_read>
 801172c:	1c43      	adds	r3, r0, #1
 801172e:	d102      	bne.n	8011736 <_read_r+0x1e>
 8011730:	682b      	ldr	r3, [r5, #0]
 8011732:	b103      	cbz	r3, 8011736 <_read_r+0x1e>
 8011734:	6023      	str	r3, [r4, #0]
 8011736:	bd38      	pop	{r3, r4, r5, pc}
 8011738:	20002688 	.word	0x20002688

0801173c <_write_r>:
 801173c:	b538      	push	{r3, r4, r5, lr}
 801173e:	4d07      	ldr	r5, [pc, #28]	@ (801175c <_write_r+0x20>)
 8011740:	4604      	mov	r4, r0
 8011742:	4608      	mov	r0, r1
 8011744:	4611      	mov	r1, r2
 8011746:	2200      	movs	r2, #0
 8011748:	602a      	str	r2, [r5, #0]
 801174a:	461a      	mov	r2, r3
 801174c:	f7f2 fc8a 	bl	8004064 <_write>
 8011750:	1c43      	adds	r3, r0, #1
 8011752:	d102      	bne.n	801175a <_write_r+0x1e>
 8011754:	682b      	ldr	r3, [r5, #0]
 8011756:	b103      	cbz	r3, 801175a <_write_r+0x1e>
 8011758:	6023      	str	r3, [r4, #0]
 801175a:	bd38      	pop	{r3, r4, r5, pc}
 801175c:	20002688 	.word	0x20002688

08011760 <__errno>:
 8011760:	4b01      	ldr	r3, [pc, #4]	@ (8011768 <__errno+0x8>)
 8011762:	6818      	ldr	r0, [r3, #0]
 8011764:	4770      	bx	lr
 8011766:	bf00      	nop
 8011768:	200001bc 	.word	0x200001bc

0801176c <__libc_init_array>:
 801176c:	b570      	push	{r4, r5, r6, lr}
 801176e:	4d0d      	ldr	r5, [pc, #52]	@ (80117a4 <__libc_init_array+0x38>)
 8011770:	4c0d      	ldr	r4, [pc, #52]	@ (80117a8 <__libc_init_array+0x3c>)
 8011772:	1b64      	subs	r4, r4, r5
 8011774:	10a4      	asrs	r4, r4, #2
 8011776:	2600      	movs	r6, #0
 8011778:	42a6      	cmp	r6, r4
 801177a:	d109      	bne.n	8011790 <__libc_init_array+0x24>
 801177c:	4d0b      	ldr	r5, [pc, #44]	@ (80117ac <__libc_init_array+0x40>)
 801177e:	4c0c      	ldr	r4, [pc, #48]	@ (80117b0 <__libc_init_array+0x44>)
 8011780:	f005 f97e 	bl	8016a80 <_init>
 8011784:	1b64      	subs	r4, r4, r5
 8011786:	10a4      	asrs	r4, r4, #2
 8011788:	2600      	movs	r6, #0
 801178a:	42a6      	cmp	r6, r4
 801178c:	d105      	bne.n	801179a <__libc_init_array+0x2e>
 801178e:	bd70      	pop	{r4, r5, r6, pc}
 8011790:	f855 3b04 	ldr.w	r3, [r5], #4
 8011794:	4798      	blx	r3
 8011796:	3601      	adds	r6, #1
 8011798:	e7ee      	b.n	8011778 <__libc_init_array+0xc>
 801179a:	f855 3b04 	ldr.w	r3, [r5], #4
 801179e:	4798      	blx	r3
 80117a0:	3601      	adds	r6, #1
 80117a2:	e7f2      	b.n	801178a <__libc_init_array+0x1e>
 80117a4:	080172d0 	.word	0x080172d0
 80117a8:	080172d0 	.word	0x080172d0
 80117ac:	080172d0 	.word	0x080172d0
 80117b0:	080172d4 	.word	0x080172d4

080117b4 <__retarget_lock_init_recursive>:
 80117b4:	4770      	bx	lr

080117b6 <__retarget_lock_acquire_recursive>:
 80117b6:	4770      	bx	lr

080117b8 <__retarget_lock_release_recursive>:
 80117b8:	4770      	bx	lr

080117ba <memcpy>:
 80117ba:	440a      	add	r2, r1
 80117bc:	4291      	cmp	r1, r2
 80117be:	f100 33ff 	add.w	r3, r0, #4294967295
 80117c2:	d100      	bne.n	80117c6 <memcpy+0xc>
 80117c4:	4770      	bx	lr
 80117c6:	b510      	push	{r4, lr}
 80117c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80117d0:	4291      	cmp	r1, r2
 80117d2:	d1f9      	bne.n	80117c8 <memcpy+0xe>
 80117d4:	bd10      	pop	{r4, pc}
	...

080117d8 <nanf>:
 80117d8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80117e0 <nanf+0x8>
 80117dc:	4770      	bx	lr
 80117de:	bf00      	nop
 80117e0:	7fc00000 	.word	0x7fc00000

080117e4 <quorem>:
 80117e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117e8:	6903      	ldr	r3, [r0, #16]
 80117ea:	690c      	ldr	r4, [r1, #16]
 80117ec:	42a3      	cmp	r3, r4
 80117ee:	4607      	mov	r7, r0
 80117f0:	db7e      	blt.n	80118f0 <quorem+0x10c>
 80117f2:	3c01      	subs	r4, #1
 80117f4:	f101 0814 	add.w	r8, r1, #20
 80117f8:	00a3      	lsls	r3, r4, #2
 80117fa:	f100 0514 	add.w	r5, r0, #20
 80117fe:	9300      	str	r3, [sp, #0]
 8011800:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011804:	9301      	str	r3, [sp, #4]
 8011806:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801180a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801180e:	3301      	adds	r3, #1
 8011810:	429a      	cmp	r2, r3
 8011812:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011816:	fbb2 f6f3 	udiv	r6, r2, r3
 801181a:	d32e      	bcc.n	801187a <quorem+0x96>
 801181c:	f04f 0a00 	mov.w	sl, #0
 8011820:	46c4      	mov	ip, r8
 8011822:	46ae      	mov	lr, r5
 8011824:	46d3      	mov	fp, sl
 8011826:	f85c 3b04 	ldr.w	r3, [ip], #4
 801182a:	b298      	uxth	r0, r3
 801182c:	fb06 a000 	mla	r0, r6, r0, sl
 8011830:	0c02      	lsrs	r2, r0, #16
 8011832:	0c1b      	lsrs	r3, r3, #16
 8011834:	fb06 2303 	mla	r3, r6, r3, r2
 8011838:	f8de 2000 	ldr.w	r2, [lr]
 801183c:	b280      	uxth	r0, r0
 801183e:	b292      	uxth	r2, r2
 8011840:	1a12      	subs	r2, r2, r0
 8011842:	445a      	add	r2, fp
 8011844:	f8de 0000 	ldr.w	r0, [lr]
 8011848:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801184c:	b29b      	uxth	r3, r3
 801184e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8011852:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8011856:	b292      	uxth	r2, r2
 8011858:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801185c:	45e1      	cmp	r9, ip
 801185e:	f84e 2b04 	str.w	r2, [lr], #4
 8011862:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8011866:	d2de      	bcs.n	8011826 <quorem+0x42>
 8011868:	9b00      	ldr	r3, [sp, #0]
 801186a:	58eb      	ldr	r3, [r5, r3]
 801186c:	b92b      	cbnz	r3, 801187a <quorem+0x96>
 801186e:	9b01      	ldr	r3, [sp, #4]
 8011870:	3b04      	subs	r3, #4
 8011872:	429d      	cmp	r5, r3
 8011874:	461a      	mov	r2, r3
 8011876:	d32f      	bcc.n	80118d8 <quorem+0xf4>
 8011878:	613c      	str	r4, [r7, #16]
 801187a:	4638      	mov	r0, r7
 801187c:	f001 f9c4 	bl	8012c08 <__mcmp>
 8011880:	2800      	cmp	r0, #0
 8011882:	db25      	blt.n	80118d0 <quorem+0xec>
 8011884:	4629      	mov	r1, r5
 8011886:	2000      	movs	r0, #0
 8011888:	f858 2b04 	ldr.w	r2, [r8], #4
 801188c:	f8d1 c000 	ldr.w	ip, [r1]
 8011890:	fa1f fe82 	uxth.w	lr, r2
 8011894:	fa1f f38c 	uxth.w	r3, ip
 8011898:	eba3 030e 	sub.w	r3, r3, lr
 801189c:	4403      	add	r3, r0
 801189e:	0c12      	lsrs	r2, r2, #16
 80118a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80118a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80118a8:	b29b      	uxth	r3, r3
 80118aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80118ae:	45c1      	cmp	r9, r8
 80118b0:	f841 3b04 	str.w	r3, [r1], #4
 80118b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80118b8:	d2e6      	bcs.n	8011888 <quorem+0xa4>
 80118ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80118be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80118c2:	b922      	cbnz	r2, 80118ce <quorem+0xea>
 80118c4:	3b04      	subs	r3, #4
 80118c6:	429d      	cmp	r5, r3
 80118c8:	461a      	mov	r2, r3
 80118ca:	d30b      	bcc.n	80118e4 <quorem+0x100>
 80118cc:	613c      	str	r4, [r7, #16]
 80118ce:	3601      	adds	r6, #1
 80118d0:	4630      	mov	r0, r6
 80118d2:	b003      	add	sp, #12
 80118d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118d8:	6812      	ldr	r2, [r2, #0]
 80118da:	3b04      	subs	r3, #4
 80118dc:	2a00      	cmp	r2, #0
 80118de:	d1cb      	bne.n	8011878 <quorem+0x94>
 80118e0:	3c01      	subs	r4, #1
 80118e2:	e7c6      	b.n	8011872 <quorem+0x8e>
 80118e4:	6812      	ldr	r2, [r2, #0]
 80118e6:	3b04      	subs	r3, #4
 80118e8:	2a00      	cmp	r2, #0
 80118ea:	d1ef      	bne.n	80118cc <quorem+0xe8>
 80118ec:	3c01      	subs	r4, #1
 80118ee:	e7ea      	b.n	80118c6 <quorem+0xe2>
 80118f0:	2000      	movs	r0, #0
 80118f2:	e7ee      	b.n	80118d2 <quorem+0xee>
 80118f4:	0000      	movs	r0, r0
	...

080118f8 <_dtoa_r>:
 80118f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118fc:	69c7      	ldr	r7, [r0, #28]
 80118fe:	b099      	sub	sp, #100	@ 0x64
 8011900:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011904:	ec55 4b10 	vmov	r4, r5, d0
 8011908:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801190a:	9109      	str	r1, [sp, #36]	@ 0x24
 801190c:	4683      	mov	fp, r0
 801190e:	920e      	str	r2, [sp, #56]	@ 0x38
 8011910:	9313      	str	r3, [sp, #76]	@ 0x4c
 8011912:	b97f      	cbnz	r7, 8011934 <_dtoa_r+0x3c>
 8011914:	2010      	movs	r0, #16
 8011916:	f000 fdfd 	bl	8012514 <malloc>
 801191a:	4602      	mov	r2, r0
 801191c:	f8cb 001c 	str.w	r0, [fp, #28]
 8011920:	b920      	cbnz	r0, 801192c <_dtoa_r+0x34>
 8011922:	4ba7      	ldr	r3, [pc, #668]	@ (8011bc0 <_dtoa_r+0x2c8>)
 8011924:	21ef      	movs	r1, #239	@ 0xef
 8011926:	48a7      	ldr	r0, [pc, #668]	@ (8011bc4 <_dtoa_r+0x2cc>)
 8011928:	f002 ffa6 	bl	8014878 <__assert_func>
 801192c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8011930:	6007      	str	r7, [r0, #0]
 8011932:	60c7      	str	r7, [r0, #12]
 8011934:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011938:	6819      	ldr	r1, [r3, #0]
 801193a:	b159      	cbz	r1, 8011954 <_dtoa_r+0x5c>
 801193c:	685a      	ldr	r2, [r3, #4]
 801193e:	604a      	str	r2, [r1, #4]
 8011940:	2301      	movs	r3, #1
 8011942:	4093      	lsls	r3, r2
 8011944:	608b      	str	r3, [r1, #8]
 8011946:	4658      	mov	r0, fp
 8011948:	f000 feda 	bl	8012700 <_Bfree>
 801194c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011950:	2200      	movs	r2, #0
 8011952:	601a      	str	r2, [r3, #0]
 8011954:	1e2b      	subs	r3, r5, #0
 8011956:	bfb9      	ittee	lt
 8011958:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801195c:	9303      	strlt	r3, [sp, #12]
 801195e:	2300      	movge	r3, #0
 8011960:	6033      	strge	r3, [r6, #0]
 8011962:	9f03      	ldr	r7, [sp, #12]
 8011964:	4b98      	ldr	r3, [pc, #608]	@ (8011bc8 <_dtoa_r+0x2d0>)
 8011966:	bfbc      	itt	lt
 8011968:	2201      	movlt	r2, #1
 801196a:	6032      	strlt	r2, [r6, #0]
 801196c:	43bb      	bics	r3, r7
 801196e:	d112      	bne.n	8011996 <_dtoa_r+0x9e>
 8011970:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8011972:	f242 730f 	movw	r3, #9999	@ 0x270f
 8011976:	6013      	str	r3, [r2, #0]
 8011978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801197c:	4323      	orrs	r3, r4
 801197e:	f000 854d 	beq.w	801241c <_dtoa_r+0xb24>
 8011982:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011984:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8011bdc <_dtoa_r+0x2e4>
 8011988:	2b00      	cmp	r3, #0
 801198a:	f000 854f 	beq.w	801242c <_dtoa_r+0xb34>
 801198e:	f10a 0303 	add.w	r3, sl, #3
 8011992:	f000 bd49 	b.w	8012428 <_dtoa_r+0xb30>
 8011996:	ed9d 7b02 	vldr	d7, [sp, #8]
 801199a:	2200      	movs	r2, #0
 801199c:	ec51 0b17 	vmov	r0, r1, d7
 80119a0:	2300      	movs	r3, #0
 80119a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80119a6:	f7ef f8b7 	bl	8000b18 <__aeabi_dcmpeq>
 80119aa:	4680      	mov	r8, r0
 80119ac:	b158      	cbz	r0, 80119c6 <_dtoa_r+0xce>
 80119ae:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80119b0:	2301      	movs	r3, #1
 80119b2:	6013      	str	r3, [r2, #0]
 80119b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80119b6:	b113      	cbz	r3, 80119be <_dtoa_r+0xc6>
 80119b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80119ba:	4b84      	ldr	r3, [pc, #528]	@ (8011bcc <_dtoa_r+0x2d4>)
 80119bc:	6013      	str	r3, [r2, #0]
 80119be:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8011be0 <_dtoa_r+0x2e8>
 80119c2:	f000 bd33 	b.w	801242c <_dtoa_r+0xb34>
 80119c6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80119ca:	aa16      	add	r2, sp, #88	@ 0x58
 80119cc:	a917      	add	r1, sp, #92	@ 0x5c
 80119ce:	4658      	mov	r0, fp
 80119d0:	f001 fa3a 	bl	8012e48 <__d2b>
 80119d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80119d8:	4681      	mov	r9, r0
 80119da:	2e00      	cmp	r6, #0
 80119dc:	d077      	beq.n	8011ace <_dtoa_r+0x1d6>
 80119de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80119e0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80119e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80119e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80119ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80119f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80119f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80119f8:	4619      	mov	r1, r3
 80119fa:	2200      	movs	r2, #0
 80119fc:	4b74      	ldr	r3, [pc, #464]	@ (8011bd0 <_dtoa_r+0x2d8>)
 80119fe:	f7ee fc6b 	bl	80002d8 <__aeabi_dsub>
 8011a02:	a369      	add	r3, pc, #420	@ (adr r3, 8011ba8 <_dtoa_r+0x2b0>)
 8011a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a08:	f7ee fe1e 	bl	8000648 <__aeabi_dmul>
 8011a0c:	a368      	add	r3, pc, #416	@ (adr r3, 8011bb0 <_dtoa_r+0x2b8>)
 8011a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a12:	f7ee fc63 	bl	80002dc <__adddf3>
 8011a16:	4604      	mov	r4, r0
 8011a18:	4630      	mov	r0, r6
 8011a1a:	460d      	mov	r5, r1
 8011a1c:	f7ee fdaa 	bl	8000574 <__aeabi_i2d>
 8011a20:	a365      	add	r3, pc, #404	@ (adr r3, 8011bb8 <_dtoa_r+0x2c0>)
 8011a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a26:	f7ee fe0f 	bl	8000648 <__aeabi_dmul>
 8011a2a:	4602      	mov	r2, r0
 8011a2c:	460b      	mov	r3, r1
 8011a2e:	4620      	mov	r0, r4
 8011a30:	4629      	mov	r1, r5
 8011a32:	f7ee fc53 	bl	80002dc <__adddf3>
 8011a36:	4604      	mov	r4, r0
 8011a38:	460d      	mov	r5, r1
 8011a3a:	f7ef f8b5 	bl	8000ba8 <__aeabi_d2iz>
 8011a3e:	2200      	movs	r2, #0
 8011a40:	4607      	mov	r7, r0
 8011a42:	2300      	movs	r3, #0
 8011a44:	4620      	mov	r0, r4
 8011a46:	4629      	mov	r1, r5
 8011a48:	f7ef f870 	bl	8000b2c <__aeabi_dcmplt>
 8011a4c:	b140      	cbz	r0, 8011a60 <_dtoa_r+0x168>
 8011a4e:	4638      	mov	r0, r7
 8011a50:	f7ee fd90 	bl	8000574 <__aeabi_i2d>
 8011a54:	4622      	mov	r2, r4
 8011a56:	462b      	mov	r3, r5
 8011a58:	f7ef f85e 	bl	8000b18 <__aeabi_dcmpeq>
 8011a5c:	b900      	cbnz	r0, 8011a60 <_dtoa_r+0x168>
 8011a5e:	3f01      	subs	r7, #1
 8011a60:	2f16      	cmp	r7, #22
 8011a62:	d851      	bhi.n	8011b08 <_dtoa_r+0x210>
 8011a64:	4b5b      	ldr	r3, [pc, #364]	@ (8011bd4 <_dtoa_r+0x2dc>)
 8011a66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011a72:	f7ef f85b 	bl	8000b2c <__aeabi_dcmplt>
 8011a76:	2800      	cmp	r0, #0
 8011a78:	d048      	beq.n	8011b0c <_dtoa_r+0x214>
 8011a7a:	3f01      	subs	r7, #1
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	9312      	str	r3, [sp, #72]	@ 0x48
 8011a80:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8011a82:	1b9b      	subs	r3, r3, r6
 8011a84:	1e5a      	subs	r2, r3, #1
 8011a86:	bf44      	itt	mi
 8011a88:	f1c3 0801 	rsbmi	r8, r3, #1
 8011a8c:	2300      	movmi	r3, #0
 8011a8e:	9208      	str	r2, [sp, #32]
 8011a90:	bf54      	ite	pl
 8011a92:	f04f 0800 	movpl.w	r8, #0
 8011a96:	9308      	strmi	r3, [sp, #32]
 8011a98:	2f00      	cmp	r7, #0
 8011a9a:	db39      	blt.n	8011b10 <_dtoa_r+0x218>
 8011a9c:	9b08      	ldr	r3, [sp, #32]
 8011a9e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8011aa0:	443b      	add	r3, r7
 8011aa2:	9308      	str	r3, [sp, #32]
 8011aa4:	2300      	movs	r3, #0
 8011aa6:	930a      	str	r3, [sp, #40]	@ 0x28
 8011aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011aaa:	2b09      	cmp	r3, #9
 8011aac:	d864      	bhi.n	8011b78 <_dtoa_r+0x280>
 8011aae:	2b05      	cmp	r3, #5
 8011ab0:	bfc4      	itt	gt
 8011ab2:	3b04      	subgt	r3, #4
 8011ab4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8011ab6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011ab8:	f1a3 0302 	sub.w	r3, r3, #2
 8011abc:	bfcc      	ite	gt
 8011abe:	2400      	movgt	r4, #0
 8011ac0:	2401      	movle	r4, #1
 8011ac2:	2b03      	cmp	r3, #3
 8011ac4:	d863      	bhi.n	8011b8e <_dtoa_r+0x296>
 8011ac6:	e8df f003 	tbb	[pc, r3]
 8011aca:	372a      	.short	0x372a
 8011acc:	5535      	.short	0x5535
 8011ace:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8011ad2:	441e      	add	r6, r3
 8011ad4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8011ad8:	2b20      	cmp	r3, #32
 8011ada:	bfc1      	itttt	gt
 8011adc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8011ae0:	409f      	lslgt	r7, r3
 8011ae2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8011ae6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8011aea:	bfd6      	itet	le
 8011aec:	f1c3 0320 	rsble	r3, r3, #32
 8011af0:	ea47 0003 	orrgt.w	r0, r7, r3
 8011af4:	fa04 f003 	lslle.w	r0, r4, r3
 8011af8:	f7ee fd2c 	bl	8000554 <__aeabi_ui2d>
 8011afc:	2201      	movs	r2, #1
 8011afe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8011b02:	3e01      	subs	r6, #1
 8011b04:	9214      	str	r2, [sp, #80]	@ 0x50
 8011b06:	e777      	b.n	80119f8 <_dtoa_r+0x100>
 8011b08:	2301      	movs	r3, #1
 8011b0a:	e7b8      	b.n	8011a7e <_dtoa_r+0x186>
 8011b0c:	9012      	str	r0, [sp, #72]	@ 0x48
 8011b0e:	e7b7      	b.n	8011a80 <_dtoa_r+0x188>
 8011b10:	427b      	negs	r3, r7
 8011b12:	930a      	str	r3, [sp, #40]	@ 0x28
 8011b14:	2300      	movs	r3, #0
 8011b16:	eba8 0807 	sub.w	r8, r8, r7
 8011b1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011b1c:	e7c4      	b.n	8011aa8 <_dtoa_r+0x1b0>
 8011b1e:	2300      	movs	r3, #0
 8011b20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	dc35      	bgt.n	8011b94 <_dtoa_r+0x29c>
 8011b28:	2301      	movs	r3, #1
 8011b2a:	9300      	str	r3, [sp, #0]
 8011b2c:	9307      	str	r3, [sp, #28]
 8011b2e:	461a      	mov	r2, r3
 8011b30:	920e      	str	r2, [sp, #56]	@ 0x38
 8011b32:	e00b      	b.n	8011b4c <_dtoa_r+0x254>
 8011b34:	2301      	movs	r3, #1
 8011b36:	e7f3      	b.n	8011b20 <_dtoa_r+0x228>
 8011b38:	2300      	movs	r3, #0
 8011b3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b3e:	18fb      	adds	r3, r7, r3
 8011b40:	9300      	str	r3, [sp, #0]
 8011b42:	3301      	adds	r3, #1
 8011b44:	2b01      	cmp	r3, #1
 8011b46:	9307      	str	r3, [sp, #28]
 8011b48:	bfb8      	it	lt
 8011b4a:	2301      	movlt	r3, #1
 8011b4c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8011b50:	2100      	movs	r1, #0
 8011b52:	2204      	movs	r2, #4
 8011b54:	f102 0514 	add.w	r5, r2, #20
 8011b58:	429d      	cmp	r5, r3
 8011b5a:	d91f      	bls.n	8011b9c <_dtoa_r+0x2a4>
 8011b5c:	6041      	str	r1, [r0, #4]
 8011b5e:	4658      	mov	r0, fp
 8011b60:	f000 fd8e 	bl	8012680 <_Balloc>
 8011b64:	4682      	mov	sl, r0
 8011b66:	2800      	cmp	r0, #0
 8011b68:	d13c      	bne.n	8011be4 <_dtoa_r+0x2ec>
 8011b6a:	4b1b      	ldr	r3, [pc, #108]	@ (8011bd8 <_dtoa_r+0x2e0>)
 8011b6c:	4602      	mov	r2, r0
 8011b6e:	f240 11af 	movw	r1, #431	@ 0x1af
 8011b72:	e6d8      	b.n	8011926 <_dtoa_r+0x2e>
 8011b74:	2301      	movs	r3, #1
 8011b76:	e7e0      	b.n	8011b3a <_dtoa_r+0x242>
 8011b78:	2401      	movs	r4, #1
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b7e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011b80:	f04f 33ff 	mov.w	r3, #4294967295
 8011b84:	9300      	str	r3, [sp, #0]
 8011b86:	9307      	str	r3, [sp, #28]
 8011b88:	2200      	movs	r2, #0
 8011b8a:	2312      	movs	r3, #18
 8011b8c:	e7d0      	b.n	8011b30 <_dtoa_r+0x238>
 8011b8e:	2301      	movs	r3, #1
 8011b90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011b92:	e7f5      	b.n	8011b80 <_dtoa_r+0x288>
 8011b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011b96:	9300      	str	r3, [sp, #0]
 8011b98:	9307      	str	r3, [sp, #28]
 8011b9a:	e7d7      	b.n	8011b4c <_dtoa_r+0x254>
 8011b9c:	3101      	adds	r1, #1
 8011b9e:	0052      	lsls	r2, r2, #1
 8011ba0:	e7d8      	b.n	8011b54 <_dtoa_r+0x25c>
 8011ba2:	bf00      	nop
 8011ba4:	f3af 8000 	nop.w
 8011ba8:	636f4361 	.word	0x636f4361
 8011bac:	3fd287a7 	.word	0x3fd287a7
 8011bb0:	8b60c8b3 	.word	0x8b60c8b3
 8011bb4:	3fc68a28 	.word	0x3fc68a28
 8011bb8:	509f79fb 	.word	0x509f79fb
 8011bbc:	3fd34413 	.word	0x3fd34413
 8011bc0:	08016e8c 	.word	0x08016e8c
 8011bc4:	08016ea3 	.word	0x08016ea3
 8011bc8:	7ff00000 	.word	0x7ff00000
 8011bcc:	080171e9 	.word	0x080171e9
 8011bd0:	3ff80000 	.word	0x3ff80000
 8011bd4:	08016fa0 	.word	0x08016fa0
 8011bd8:	08016efb 	.word	0x08016efb
 8011bdc:	08016e88 	.word	0x08016e88
 8011be0:	080171e8 	.word	0x080171e8
 8011be4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8011be8:	6018      	str	r0, [r3, #0]
 8011bea:	9b07      	ldr	r3, [sp, #28]
 8011bec:	2b0e      	cmp	r3, #14
 8011bee:	f200 80a4 	bhi.w	8011d3a <_dtoa_r+0x442>
 8011bf2:	2c00      	cmp	r4, #0
 8011bf4:	f000 80a1 	beq.w	8011d3a <_dtoa_r+0x442>
 8011bf8:	2f00      	cmp	r7, #0
 8011bfa:	dd33      	ble.n	8011c64 <_dtoa_r+0x36c>
 8011bfc:	4bad      	ldr	r3, [pc, #692]	@ (8011eb4 <_dtoa_r+0x5bc>)
 8011bfe:	f007 020f 	and.w	r2, r7, #15
 8011c02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c06:	ed93 7b00 	vldr	d7, [r3]
 8011c0a:	05f8      	lsls	r0, r7, #23
 8011c0c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011c10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8011c14:	d516      	bpl.n	8011c44 <_dtoa_r+0x34c>
 8011c16:	4ba8      	ldr	r3, [pc, #672]	@ (8011eb8 <_dtoa_r+0x5c0>)
 8011c18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011c1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8011c20:	f7ee fe3c 	bl	800089c <__aeabi_ddiv>
 8011c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c28:	f004 040f 	and.w	r4, r4, #15
 8011c2c:	2603      	movs	r6, #3
 8011c2e:	4da2      	ldr	r5, [pc, #648]	@ (8011eb8 <_dtoa_r+0x5c0>)
 8011c30:	b954      	cbnz	r4, 8011c48 <_dtoa_r+0x350>
 8011c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011c3a:	f7ee fe2f 	bl	800089c <__aeabi_ddiv>
 8011c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c42:	e028      	b.n	8011c96 <_dtoa_r+0x39e>
 8011c44:	2602      	movs	r6, #2
 8011c46:	e7f2      	b.n	8011c2e <_dtoa_r+0x336>
 8011c48:	07e1      	lsls	r1, r4, #31
 8011c4a:	d508      	bpl.n	8011c5e <_dtoa_r+0x366>
 8011c4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011c54:	f7ee fcf8 	bl	8000648 <__aeabi_dmul>
 8011c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011c5c:	3601      	adds	r6, #1
 8011c5e:	1064      	asrs	r4, r4, #1
 8011c60:	3508      	adds	r5, #8
 8011c62:	e7e5      	b.n	8011c30 <_dtoa_r+0x338>
 8011c64:	f000 80d2 	beq.w	8011e0c <_dtoa_r+0x514>
 8011c68:	427c      	negs	r4, r7
 8011c6a:	4b92      	ldr	r3, [pc, #584]	@ (8011eb4 <_dtoa_r+0x5bc>)
 8011c6c:	4d92      	ldr	r5, [pc, #584]	@ (8011eb8 <_dtoa_r+0x5c0>)
 8011c6e:	f004 020f 	and.w	r2, r4, #15
 8011c72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8011c7e:	f7ee fce3 	bl	8000648 <__aeabi_dmul>
 8011c82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011c86:	1124      	asrs	r4, r4, #4
 8011c88:	2300      	movs	r3, #0
 8011c8a:	2602      	movs	r6, #2
 8011c8c:	2c00      	cmp	r4, #0
 8011c8e:	f040 80b2 	bne.w	8011df6 <_dtoa_r+0x4fe>
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d1d3      	bne.n	8011c3e <_dtoa_r+0x346>
 8011c96:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011c98:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	f000 80b7 	beq.w	8011e10 <_dtoa_r+0x518>
 8011ca2:	4b86      	ldr	r3, [pc, #536]	@ (8011ebc <_dtoa_r+0x5c4>)
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	4620      	mov	r0, r4
 8011ca8:	4629      	mov	r1, r5
 8011caa:	f7ee ff3f 	bl	8000b2c <__aeabi_dcmplt>
 8011cae:	2800      	cmp	r0, #0
 8011cb0:	f000 80ae 	beq.w	8011e10 <_dtoa_r+0x518>
 8011cb4:	9b07      	ldr	r3, [sp, #28]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	f000 80aa 	beq.w	8011e10 <_dtoa_r+0x518>
 8011cbc:	9b00      	ldr	r3, [sp, #0]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	dd37      	ble.n	8011d32 <_dtoa_r+0x43a>
 8011cc2:	1e7b      	subs	r3, r7, #1
 8011cc4:	9304      	str	r3, [sp, #16]
 8011cc6:	4620      	mov	r0, r4
 8011cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8011ec0 <_dtoa_r+0x5c8>)
 8011cca:	2200      	movs	r2, #0
 8011ccc:	4629      	mov	r1, r5
 8011cce:	f7ee fcbb 	bl	8000648 <__aeabi_dmul>
 8011cd2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011cd6:	9c00      	ldr	r4, [sp, #0]
 8011cd8:	3601      	adds	r6, #1
 8011cda:	4630      	mov	r0, r6
 8011cdc:	f7ee fc4a 	bl	8000574 <__aeabi_i2d>
 8011ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011ce4:	f7ee fcb0 	bl	8000648 <__aeabi_dmul>
 8011ce8:	4b76      	ldr	r3, [pc, #472]	@ (8011ec4 <_dtoa_r+0x5cc>)
 8011cea:	2200      	movs	r2, #0
 8011cec:	f7ee faf6 	bl	80002dc <__adddf3>
 8011cf0:	4605      	mov	r5, r0
 8011cf2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8011cf6:	2c00      	cmp	r4, #0
 8011cf8:	f040 808d 	bne.w	8011e16 <_dtoa_r+0x51e>
 8011cfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d00:	4b71      	ldr	r3, [pc, #452]	@ (8011ec8 <_dtoa_r+0x5d0>)
 8011d02:	2200      	movs	r2, #0
 8011d04:	f7ee fae8 	bl	80002d8 <__aeabi_dsub>
 8011d08:	4602      	mov	r2, r0
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011d10:	462a      	mov	r2, r5
 8011d12:	4633      	mov	r3, r6
 8011d14:	f7ee ff28 	bl	8000b68 <__aeabi_dcmpgt>
 8011d18:	2800      	cmp	r0, #0
 8011d1a:	f040 828b 	bne.w	8012234 <_dtoa_r+0x93c>
 8011d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d22:	462a      	mov	r2, r5
 8011d24:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8011d28:	f7ee ff00 	bl	8000b2c <__aeabi_dcmplt>
 8011d2c:	2800      	cmp	r0, #0
 8011d2e:	f040 8128 	bne.w	8011f82 <_dtoa_r+0x68a>
 8011d32:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8011d36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8011d3a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	f2c0 815a 	blt.w	8011ff6 <_dtoa_r+0x6fe>
 8011d42:	2f0e      	cmp	r7, #14
 8011d44:	f300 8157 	bgt.w	8011ff6 <_dtoa_r+0x6fe>
 8011d48:	4b5a      	ldr	r3, [pc, #360]	@ (8011eb4 <_dtoa_r+0x5bc>)
 8011d4a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011d4e:	ed93 7b00 	vldr	d7, [r3]
 8011d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	ed8d 7b00 	vstr	d7, [sp]
 8011d5a:	da03      	bge.n	8011d64 <_dtoa_r+0x46c>
 8011d5c:	9b07      	ldr	r3, [sp, #28]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	f340 8101 	ble.w	8011f66 <_dtoa_r+0x66e>
 8011d64:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8011d68:	4656      	mov	r6, sl
 8011d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d6e:	4620      	mov	r0, r4
 8011d70:	4629      	mov	r1, r5
 8011d72:	f7ee fd93 	bl	800089c <__aeabi_ddiv>
 8011d76:	f7ee ff17 	bl	8000ba8 <__aeabi_d2iz>
 8011d7a:	4680      	mov	r8, r0
 8011d7c:	f7ee fbfa 	bl	8000574 <__aeabi_i2d>
 8011d80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d84:	f7ee fc60 	bl	8000648 <__aeabi_dmul>
 8011d88:	4602      	mov	r2, r0
 8011d8a:	460b      	mov	r3, r1
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	4629      	mov	r1, r5
 8011d90:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8011d94:	f7ee faa0 	bl	80002d8 <__aeabi_dsub>
 8011d98:	f806 4b01 	strb.w	r4, [r6], #1
 8011d9c:	9d07      	ldr	r5, [sp, #28]
 8011d9e:	eba6 040a 	sub.w	r4, r6, sl
 8011da2:	42a5      	cmp	r5, r4
 8011da4:	4602      	mov	r2, r0
 8011da6:	460b      	mov	r3, r1
 8011da8:	f040 8117 	bne.w	8011fda <_dtoa_r+0x6e2>
 8011dac:	f7ee fa96 	bl	80002dc <__adddf3>
 8011db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011db4:	4604      	mov	r4, r0
 8011db6:	460d      	mov	r5, r1
 8011db8:	f7ee fed6 	bl	8000b68 <__aeabi_dcmpgt>
 8011dbc:	2800      	cmp	r0, #0
 8011dbe:	f040 80f9 	bne.w	8011fb4 <_dtoa_r+0x6bc>
 8011dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011dc6:	4620      	mov	r0, r4
 8011dc8:	4629      	mov	r1, r5
 8011dca:	f7ee fea5 	bl	8000b18 <__aeabi_dcmpeq>
 8011dce:	b118      	cbz	r0, 8011dd8 <_dtoa_r+0x4e0>
 8011dd0:	f018 0f01 	tst.w	r8, #1
 8011dd4:	f040 80ee 	bne.w	8011fb4 <_dtoa_r+0x6bc>
 8011dd8:	4649      	mov	r1, r9
 8011dda:	4658      	mov	r0, fp
 8011ddc:	f000 fc90 	bl	8012700 <_Bfree>
 8011de0:	2300      	movs	r3, #0
 8011de2:	7033      	strb	r3, [r6, #0]
 8011de4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8011de6:	3701      	adds	r7, #1
 8011de8:	601f      	str	r7, [r3, #0]
 8011dea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	f000 831d 	beq.w	801242c <_dtoa_r+0xb34>
 8011df2:	601e      	str	r6, [r3, #0]
 8011df4:	e31a      	b.n	801242c <_dtoa_r+0xb34>
 8011df6:	07e2      	lsls	r2, r4, #31
 8011df8:	d505      	bpl.n	8011e06 <_dtoa_r+0x50e>
 8011dfa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011dfe:	f7ee fc23 	bl	8000648 <__aeabi_dmul>
 8011e02:	3601      	adds	r6, #1
 8011e04:	2301      	movs	r3, #1
 8011e06:	1064      	asrs	r4, r4, #1
 8011e08:	3508      	adds	r5, #8
 8011e0a:	e73f      	b.n	8011c8c <_dtoa_r+0x394>
 8011e0c:	2602      	movs	r6, #2
 8011e0e:	e742      	b.n	8011c96 <_dtoa_r+0x39e>
 8011e10:	9c07      	ldr	r4, [sp, #28]
 8011e12:	9704      	str	r7, [sp, #16]
 8011e14:	e761      	b.n	8011cda <_dtoa_r+0x3e2>
 8011e16:	4b27      	ldr	r3, [pc, #156]	@ (8011eb4 <_dtoa_r+0x5bc>)
 8011e18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011e1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011e1e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8011e22:	4454      	add	r4, sl
 8011e24:	2900      	cmp	r1, #0
 8011e26:	d053      	beq.n	8011ed0 <_dtoa_r+0x5d8>
 8011e28:	4928      	ldr	r1, [pc, #160]	@ (8011ecc <_dtoa_r+0x5d4>)
 8011e2a:	2000      	movs	r0, #0
 8011e2c:	f7ee fd36 	bl	800089c <__aeabi_ddiv>
 8011e30:	4633      	mov	r3, r6
 8011e32:	462a      	mov	r2, r5
 8011e34:	f7ee fa50 	bl	80002d8 <__aeabi_dsub>
 8011e38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011e3c:	4656      	mov	r6, sl
 8011e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e42:	f7ee feb1 	bl	8000ba8 <__aeabi_d2iz>
 8011e46:	4605      	mov	r5, r0
 8011e48:	f7ee fb94 	bl	8000574 <__aeabi_i2d>
 8011e4c:	4602      	mov	r2, r0
 8011e4e:	460b      	mov	r3, r1
 8011e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e54:	f7ee fa40 	bl	80002d8 <__aeabi_dsub>
 8011e58:	3530      	adds	r5, #48	@ 0x30
 8011e5a:	4602      	mov	r2, r0
 8011e5c:	460b      	mov	r3, r1
 8011e5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011e62:	f806 5b01 	strb.w	r5, [r6], #1
 8011e66:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011e6a:	f7ee fe5f 	bl	8000b2c <__aeabi_dcmplt>
 8011e6e:	2800      	cmp	r0, #0
 8011e70:	d171      	bne.n	8011f56 <_dtoa_r+0x65e>
 8011e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011e76:	4911      	ldr	r1, [pc, #68]	@ (8011ebc <_dtoa_r+0x5c4>)
 8011e78:	2000      	movs	r0, #0
 8011e7a:	f7ee fa2d 	bl	80002d8 <__aeabi_dsub>
 8011e7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011e82:	f7ee fe53 	bl	8000b2c <__aeabi_dcmplt>
 8011e86:	2800      	cmp	r0, #0
 8011e88:	f040 8095 	bne.w	8011fb6 <_dtoa_r+0x6be>
 8011e8c:	42a6      	cmp	r6, r4
 8011e8e:	f43f af50 	beq.w	8011d32 <_dtoa_r+0x43a>
 8011e92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011e96:	4b0a      	ldr	r3, [pc, #40]	@ (8011ec0 <_dtoa_r+0x5c8>)
 8011e98:	2200      	movs	r2, #0
 8011e9a:	f7ee fbd5 	bl	8000648 <__aeabi_dmul>
 8011e9e:	4b08      	ldr	r3, [pc, #32]	@ (8011ec0 <_dtoa_r+0x5c8>)
 8011ea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011eaa:	f7ee fbcd 	bl	8000648 <__aeabi_dmul>
 8011eae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011eb2:	e7c4      	b.n	8011e3e <_dtoa_r+0x546>
 8011eb4:	08016fa0 	.word	0x08016fa0
 8011eb8:	08016f78 	.word	0x08016f78
 8011ebc:	3ff00000 	.word	0x3ff00000
 8011ec0:	40240000 	.word	0x40240000
 8011ec4:	401c0000 	.word	0x401c0000
 8011ec8:	40140000 	.word	0x40140000
 8011ecc:	3fe00000 	.word	0x3fe00000
 8011ed0:	4631      	mov	r1, r6
 8011ed2:	4628      	mov	r0, r5
 8011ed4:	f7ee fbb8 	bl	8000648 <__aeabi_dmul>
 8011ed8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8011edc:	9415      	str	r4, [sp, #84]	@ 0x54
 8011ede:	4656      	mov	r6, sl
 8011ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ee4:	f7ee fe60 	bl	8000ba8 <__aeabi_d2iz>
 8011ee8:	4605      	mov	r5, r0
 8011eea:	f7ee fb43 	bl	8000574 <__aeabi_i2d>
 8011eee:	4602      	mov	r2, r0
 8011ef0:	460b      	mov	r3, r1
 8011ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ef6:	f7ee f9ef 	bl	80002d8 <__aeabi_dsub>
 8011efa:	3530      	adds	r5, #48	@ 0x30
 8011efc:	f806 5b01 	strb.w	r5, [r6], #1
 8011f00:	4602      	mov	r2, r0
 8011f02:	460b      	mov	r3, r1
 8011f04:	42a6      	cmp	r6, r4
 8011f06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8011f0a:	f04f 0200 	mov.w	r2, #0
 8011f0e:	d124      	bne.n	8011f5a <_dtoa_r+0x662>
 8011f10:	4bac      	ldr	r3, [pc, #688]	@ (80121c4 <_dtoa_r+0x8cc>)
 8011f12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8011f16:	f7ee f9e1 	bl	80002dc <__adddf3>
 8011f1a:	4602      	mov	r2, r0
 8011f1c:	460b      	mov	r3, r1
 8011f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f22:	f7ee fe21 	bl	8000b68 <__aeabi_dcmpgt>
 8011f26:	2800      	cmp	r0, #0
 8011f28:	d145      	bne.n	8011fb6 <_dtoa_r+0x6be>
 8011f2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8011f2e:	49a5      	ldr	r1, [pc, #660]	@ (80121c4 <_dtoa_r+0x8cc>)
 8011f30:	2000      	movs	r0, #0
 8011f32:	f7ee f9d1 	bl	80002d8 <__aeabi_dsub>
 8011f36:	4602      	mov	r2, r0
 8011f38:	460b      	mov	r3, r1
 8011f3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f3e:	f7ee fdf5 	bl	8000b2c <__aeabi_dcmplt>
 8011f42:	2800      	cmp	r0, #0
 8011f44:	f43f aef5 	beq.w	8011d32 <_dtoa_r+0x43a>
 8011f48:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011f4a:	1e73      	subs	r3, r6, #1
 8011f4c:	9315      	str	r3, [sp, #84]	@ 0x54
 8011f4e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011f52:	2b30      	cmp	r3, #48	@ 0x30
 8011f54:	d0f8      	beq.n	8011f48 <_dtoa_r+0x650>
 8011f56:	9f04      	ldr	r7, [sp, #16]
 8011f58:	e73e      	b.n	8011dd8 <_dtoa_r+0x4e0>
 8011f5a:	4b9b      	ldr	r3, [pc, #620]	@ (80121c8 <_dtoa_r+0x8d0>)
 8011f5c:	f7ee fb74 	bl	8000648 <__aeabi_dmul>
 8011f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011f64:	e7bc      	b.n	8011ee0 <_dtoa_r+0x5e8>
 8011f66:	d10c      	bne.n	8011f82 <_dtoa_r+0x68a>
 8011f68:	4b98      	ldr	r3, [pc, #608]	@ (80121cc <_dtoa_r+0x8d4>)
 8011f6a:	2200      	movs	r2, #0
 8011f6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011f70:	f7ee fb6a 	bl	8000648 <__aeabi_dmul>
 8011f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011f78:	f7ee fdec 	bl	8000b54 <__aeabi_dcmpge>
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	f000 8157 	beq.w	8012230 <_dtoa_r+0x938>
 8011f82:	2400      	movs	r4, #0
 8011f84:	4625      	mov	r5, r4
 8011f86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011f88:	43db      	mvns	r3, r3
 8011f8a:	9304      	str	r3, [sp, #16]
 8011f8c:	4656      	mov	r6, sl
 8011f8e:	2700      	movs	r7, #0
 8011f90:	4621      	mov	r1, r4
 8011f92:	4658      	mov	r0, fp
 8011f94:	f000 fbb4 	bl	8012700 <_Bfree>
 8011f98:	2d00      	cmp	r5, #0
 8011f9a:	d0dc      	beq.n	8011f56 <_dtoa_r+0x65e>
 8011f9c:	b12f      	cbz	r7, 8011faa <_dtoa_r+0x6b2>
 8011f9e:	42af      	cmp	r7, r5
 8011fa0:	d003      	beq.n	8011faa <_dtoa_r+0x6b2>
 8011fa2:	4639      	mov	r1, r7
 8011fa4:	4658      	mov	r0, fp
 8011fa6:	f000 fbab 	bl	8012700 <_Bfree>
 8011faa:	4629      	mov	r1, r5
 8011fac:	4658      	mov	r0, fp
 8011fae:	f000 fba7 	bl	8012700 <_Bfree>
 8011fb2:	e7d0      	b.n	8011f56 <_dtoa_r+0x65e>
 8011fb4:	9704      	str	r7, [sp, #16]
 8011fb6:	4633      	mov	r3, r6
 8011fb8:	461e      	mov	r6, r3
 8011fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011fbe:	2a39      	cmp	r2, #57	@ 0x39
 8011fc0:	d107      	bne.n	8011fd2 <_dtoa_r+0x6da>
 8011fc2:	459a      	cmp	sl, r3
 8011fc4:	d1f8      	bne.n	8011fb8 <_dtoa_r+0x6c0>
 8011fc6:	9a04      	ldr	r2, [sp, #16]
 8011fc8:	3201      	adds	r2, #1
 8011fca:	9204      	str	r2, [sp, #16]
 8011fcc:	2230      	movs	r2, #48	@ 0x30
 8011fce:	f88a 2000 	strb.w	r2, [sl]
 8011fd2:	781a      	ldrb	r2, [r3, #0]
 8011fd4:	3201      	adds	r2, #1
 8011fd6:	701a      	strb	r2, [r3, #0]
 8011fd8:	e7bd      	b.n	8011f56 <_dtoa_r+0x65e>
 8011fda:	4b7b      	ldr	r3, [pc, #492]	@ (80121c8 <_dtoa_r+0x8d0>)
 8011fdc:	2200      	movs	r2, #0
 8011fde:	f7ee fb33 	bl	8000648 <__aeabi_dmul>
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	4604      	mov	r4, r0
 8011fe8:	460d      	mov	r5, r1
 8011fea:	f7ee fd95 	bl	8000b18 <__aeabi_dcmpeq>
 8011fee:	2800      	cmp	r0, #0
 8011ff0:	f43f aebb 	beq.w	8011d6a <_dtoa_r+0x472>
 8011ff4:	e6f0      	b.n	8011dd8 <_dtoa_r+0x4e0>
 8011ff6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011ff8:	2a00      	cmp	r2, #0
 8011ffa:	f000 80db 	beq.w	80121b4 <_dtoa_r+0x8bc>
 8011ffe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012000:	2a01      	cmp	r2, #1
 8012002:	f300 80bf 	bgt.w	8012184 <_dtoa_r+0x88c>
 8012006:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012008:	2a00      	cmp	r2, #0
 801200a:	f000 80b7 	beq.w	801217c <_dtoa_r+0x884>
 801200e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8012012:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012014:	4646      	mov	r6, r8
 8012016:	9a08      	ldr	r2, [sp, #32]
 8012018:	2101      	movs	r1, #1
 801201a:	441a      	add	r2, r3
 801201c:	4658      	mov	r0, fp
 801201e:	4498      	add	r8, r3
 8012020:	9208      	str	r2, [sp, #32]
 8012022:	f000 fc6b 	bl	80128fc <__i2b>
 8012026:	4605      	mov	r5, r0
 8012028:	b15e      	cbz	r6, 8012042 <_dtoa_r+0x74a>
 801202a:	9b08      	ldr	r3, [sp, #32]
 801202c:	2b00      	cmp	r3, #0
 801202e:	dd08      	ble.n	8012042 <_dtoa_r+0x74a>
 8012030:	42b3      	cmp	r3, r6
 8012032:	9a08      	ldr	r2, [sp, #32]
 8012034:	bfa8      	it	ge
 8012036:	4633      	movge	r3, r6
 8012038:	eba8 0803 	sub.w	r8, r8, r3
 801203c:	1af6      	subs	r6, r6, r3
 801203e:	1ad3      	subs	r3, r2, r3
 8012040:	9308      	str	r3, [sp, #32]
 8012042:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012044:	b1f3      	cbz	r3, 8012084 <_dtoa_r+0x78c>
 8012046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012048:	2b00      	cmp	r3, #0
 801204a:	f000 80b7 	beq.w	80121bc <_dtoa_r+0x8c4>
 801204e:	b18c      	cbz	r4, 8012074 <_dtoa_r+0x77c>
 8012050:	4629      	mov	r1, r5
 8012052:	4622      	mov	r2, r4
 8012054:	4658      	mov	r0, fp
 8012056:	f000 fd11 	bl	8012a7c <__pow5mult>
 801205a:	464a      	mov	r2, r9
 801205c:	4601      	mov	r1, r0
 801205e:	4605      	mov	r5, r0
 8012060:	4658      	mov	r0, fp
 8012062:	f000 fc61 	bl	8012928 <__multiply>
 8012066:	4649      	mov	r1, r9
 8012068:	9004      	str	r0, [sp, #16]
 801206a:	4658      	mov	r0, fp
 801206c:	f000 fb48 	bl	8012700 <_Bfree>
 8012070:	9b04      	ldr	r3, [sp, #16]
 8012072:	4699      	mov	r9, r3
 8012074:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012076:	1b1a      	subs	r2, r3, r4
 8012078:	d004      	beq.n	8012084 <_dtoa_r+0x78c>
 801207a:	4649      	mov	r1, r9
 801207c:	4658      	mov	r0, fp
 801207e:	f000 fcfd 	bl	8012a7c <__pow5mult>
 8012082:	4681      	mov	r9, r0
 8012084:	2101      	movs	r1, #1
 8012086:	4658      	mov	r0, fp
 8012088:	f000 fc38 	bl	80128fc <__i2b>
 801208c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801208e:	4604      	mov	r4, r0
 8012090:	2b00      	cmp	r3, #0
 8012092:	f000 81cf 	beq.w	8012434 <_dtoa_r+0xb3c>
 8012096:	461a      	mov	r2, r3
 8012098:	4601      	mov	r1, r0
 801209a:	4658      	mov	r0, fp
 801209c:	f000 fcee 	bl	8012a7c <__pow5mult>
 80120a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80120a2:	2b01      	cmp	r3, #1
 80120a4:	4604      	mov	r4, r0
 80120a6:	f300 8095 	bgt.w	80121d4 <_dtoa_r+0x8dc>
 80120aa:	9b02      	ldr	r3, [sp, #8]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	f040 8087 	bne.w	80121c0 <_dtoa_r+0x8c8>
 80120b2:	9b03      	ldr	r3, [sp, #12]
 80120b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	f040 8089 	bne.w	80121d0 <_dtoa_r+0x8d8>
 80120be:	9b03      	ldr	r3, [sp, #12]
 80120c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80120c4:	0d1b      	lsrs	r3, r3, #20
 80120c6:	051b      	lsls	r3, r3, #20
 80120c8:	b12b      	cbz	r3, 80120d6 <_dtoa_r+0x7de>
 80120ca:	9b08      	ldr	r3, [sp, #32]
 80120cc:	3301      	adds	r3, #1
 80120ce:	9308      	str	r3, [sp, #32]
 80120d0:	f108 0801 	add.w	r8, r8, #1
 80120d4:	2301      	movs	r3, #1
 80120d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80120d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80120da:	2b00      	cmp	r3, #0
 80120dc:	f000 81b0 	beq.w	8012440 <_dtoa_r+0xb48>
 80120e0:	6923      	ldr	r3, [r4, #16]
 80120e2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80120e6:	6918      	ldr	r0, [r3, #16]
 80120e8:	f000 fbbc 	bl	8012864 <__hi0bits>
 80120ec:	f1c0 0020 	rsb	r0, r0, #32
 80120f0:	9b08      	ldr	r3, [sp, #32]
 80120f2:	4418      	add	r0, r3
 80120f4:	f010 001f 	ands.w	r0, r0, #31
 80120f8:	d077      	beq.n	80121ea <_dtoa_r+0x8f2>
 80120fa:	f1c0 0320 	rsb	r3, r0, #32
 80120fe:	2b04      	cmp	r3, #4
 8012100:	dd6b      	ble.n	80121da <_dtoa_r+0x8e2>
 8012102:	9b08      	ldr	r3, [sp, #32]
 8012104:	f1c0 001c 	rsb	r0, r0, #28
 8012108:	4403      	add	r3, r0
 801210a:	4480      	add	r8, r0
 801210c:	4406      	add	r6, r0
 801210e:	9308      	str	r3, [sp, #32]
 8012110:	f1b8 0f00 	cmp.w	r8, #0
 8012114:	dd05      	ble.n	8012122 <_dtoa_r+0x82a>
 8012116:	4649      	mov	r1, r9
 8012118:	4642      	mov	r2, r8
 801211a:	4658      	mov	r0, fp
 801211c:	f000 fd08 	bl	8012b30 <__lshift>
 8012120:	4681      	mov	r9, r0
 8012122:	9b08      	ldr	r3, [sp, #32]
 8012124:	2b00      	cmp	r3, #0
 8012126:	dd05      	ble.n	8012134 <_dtoa_r+0x83c>
 8012128:	4621      	mov	r1, r4
 801212a:	461a      	mov	r2, r3
 801212c:	4658      	mov	r0, fp
 801212e:	f000 fcff 	bl	8012b30 <__lshift>
 8012132:	4604      	mov	r4, r0
 8012134:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012136:	2b00      	cmp	r3, #0
 8012138:	d059      	beq.n	80121ee <_dtoa_r+0x8f6>
 801213a:	4621      	mov	r1, r4
 801213c:	4648      	mov	r0, r9
 801213e:	f000 fd63 	bl	8012c08 <__mcmp>
 8012142:	2800      	cmp	r0, #0
 8012144:	da53      	bge.n	80121ee <_dtoa_r+0x8f6>
 8012146:	1e7b      	subs	r3, r7, #1
 8012148:	9304      	str	r3, [sp, #16]
 801214a:	4649      	mov	r1, r9
 801214c:	2300      	movs	r3, #0
 801214e:	220a      	movs	r2, #10
 8012150:	4658      	mov	r0, fp
 8012152:	f000 faf7 	bl	8012744 <__multadd>
 8012156:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012158:	4681      	mov	r9, r0
 801215a:	2b00      	cmp	r3, #0
 801215c:	f000 8172 	beq.w	8012444 <_dtoa_r+0xb4c>
 8012160:	2300      	movs	r3, #0
 8012162:	4629      	mov	r1, r5
 8012164:	220a      	movs	r2, #10
 8012166:	4658      	mov	r0, fp
 8012168:	f000 faec 	bl	8012744 <__multadd>
 801216c:	9b00      	ldr	r3, [sp, #0]
 801216e:	2b00      	cmp	r3, #0
 8012170:	4605      	mov	r5, r0
 8012172:	dc67      	bgt.n	8012244 <_dtoa_r+0x94c>
 8012174:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012176:	2b02      	cmp	r3, #2
 8012178:	dc41      	bgt.n	80121fe <_dtoa_r+0x906>
 801217a:	e063      	b.n	8012244 <_dtoa_r+0x94c>
 801217c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801217e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012182:	e746      	b.n	8012012 <_dtoa_r+0x71a>
 8012184:	9b07      	ldr	r3, [sp, #28]
 8012186:	1e5c      	subs	r4, r3, #1
 8012188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801218a:	42a3      	cmp	r3, r4
 801218c:	bfbf      	itttt	lt
 801218e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012190:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012192:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012194:	1ae3      	sublt	r3, r4, r3
 8012196:	bfb4      	ite	lt
 8012198:	18d2      	addlt	r2, r2, r3
 801219a:	1b1c      	subge	r4, r3, r4
 801219c:	9b07      	ldr	r3, [sp, #28]
 801219e:	bfbc      	itt	lt
 80121a0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80121a2:	2400      	movlt	r4, #0
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	bfb5      	itete	lt
 80121a8:	eba8 0603 	sublt.w	r6, r8, r3
 80121ac:	9b07      	ldrge	r3, [sp, #28]
 80121ae:	2300      	movlt	r3, #0
 80121b0:	4646      	movge	r6, r8
 80121b2:	e730      	b.n	8012016 <_dtoa_r+0x71e>
 80121b4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80121b6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80121b8:	4646      	mov	r6, r8
 80121ba:	e735      	b.n	8012028 <_dtoa_r+0x730>
 80121bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80121be:	e75c      	b.n	801207a <_dtoa_r+0x782>
 80121c0:	2300      	movs	r3, #0
 80121c2:	e788      	b.n	80120d6 <_dtoa_r+0x7de>
 80121c4:	3fe00000 	.word	0x3fe00000
 80121c8:	40240000 	.word	0x40240000
 80121cc:	40140000 	.word	0x40140000
 80121d0:	9b02      	ldr	r3, [sp, #8]
 80121d2:	e780      	b.n	80120d6 <_dtoa_r+0x7de>
 80121d4:	2300      	movs	r3, #0
 80121d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80121d8:	e782      	b.n	80120e0 <_dtoa_r+0x7e8>
 80121da:	d099      	beq.n	8012110 <_dtoa_r+0x818>
 80121dc:	9a08      	ldr	r2, [sp, #32]
 80121de:	331c      	adds	r3, #28
 80121e0:	441a      	add	r2, r3
 80121e2:	4498      	add	r8, r3
 80121e4:	441e      	add	r6, r3
 80121e6:	9208      	str	r2, [sp, #32]
 80121e8:	e792      	b.n	8012110 <_dtoa_r+0x818>
 80121ea:	4603      	mov	r3, r0
 80121ec:	e7f6      	b.n	80121dc <_dtoa_r+0x8e4>
 80121ee:	9b07      	ldr	r3, [sp, #28]
 80121f0:	9704      	str	r7, [sp, #16]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	dc20      	bgt.n	8012238 <_dtoa_r+0x940>
 80121f6:	9300      	str	r3, [sp, #0]
 80121f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121fa:	2b02      	cmp	r3, #2
 80121fc:	dd1e      	ble.n	801223c <_dtoa_r+0x944>
 80121fe:	9b00      	ldr	r3, [sp, #0]
 8012200:	2b00      	cmp	r3, #0
 8012202:	f47f aec0 	bne.w	8011f86 <_dtoa_r+0x68e>
 8012206:	4621      	mov	r1, r4
 8012208:	2205      	movs	r2, #5
 801220a:	4658      	mov	r0, fp
 801220c:	f000 fa9a 	bl	8012744 <__multadd>
 8012210:	4601      	mov	r1, r0
 8012212:	4604      	mov	r4, r0
 8012214:	4648      	mov	r0, r9
 8012216:	f000 fcf7 	bl	8012c08 <__mcmp>
 801221a:	2800      	cmp	r0, #0
 801221c:	f77f aeb3 	ble.w	8011f86 <_dtoa_r+0x68e>
 8012220:	4656      	mov	r6, sl
 8012222:	2331      	movs	r3, #49	@ 0x31
 8012224:	f806 3b01 	strb.w	r3, [r6], #1
 8012228:	9b04      	ldr	r3, [sp, #16]
 801222a:	3301      	adds	r3, #1
 801222c:	9304      	str	r3, [sp, #16]
 801222e:	e6ae      	b.n	8011f8e <_dtoa_r+0x696>
 8012230:	9c07      	ldr	r4, [sp, #28]
 8012232:	9704      	str	r7, [sp, #16]
 8012234:	4625      	mov	r5, r4
 8012236:	e7f3      	b.n	8012220 <_dtoa_r+0x928>
 8012238:	9b07      	ldr	r3, [sp, #28]
 801223a:	9300      	str	r3, [sp, #0]
 801223c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801223e:	2b00      	cmp	r3, #0
 8012240:	f000 8104 	beq.w	801244c <_dtoa_r+0xb54>
 8012244:	2e00      	cmp	r6, #0
 8012246:	dd05      	ble.n	8012254 <_dtoa_r+0x95c>
 8012248:	4629      	mov	r1, r5
 801224a:	4632      	mov	r2, r6
 801224c:	4658      	mov	r0, fp
 801224e:	f000 fc6f 	bl	8012b30 <__lshift>
 8012252:	4605      	mov	r5, r0
 8012254:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012256:	2b00      	cmp	r3, #0
 8012258:	d05a      	beq.n	8012310 <_dtoa_r+0xa18>
 801225a:	6869      	ldr	r1, [r5, #4]
 801225c:	4658      	mov	r0, fp
 801225e:	f000 fa0f 	bl	8012680 <_Balloc>
 8012262:	4606      	mov	r6, r0
 8012264:	b928      	cbnz	r0, 8012272 <_dtoa_r+0x97a>
 8012266:	4b84      	ldr	r3, [pc, #528]	@ (8012478 <_dtoa_r+0xb80>)
 8012268:	4602      	mov	r2, r0
 801226a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801226e:	f7ff bb5a 	b.w	8011926 <_dtoa_r+0x2e>
 8012272:	692a      	ldr	r2, [r5, #16]
 8012274:	3202      	adds	r2, #2
 8012276:	0092      	lsls	r2, r2, #2
 8012278:	f105 010c 	add.w	r1, r5, #12
 801227c:	300c      	adds	r0, #12
 801227e:	f7ff fa9c 	bl	80117ba <memcpy>
 8012282:	2201      	movs	r2, #1
 8012284:	4631      	mov	r1, r6
 8012286:	4658      	mov	r0, fp
 8012288:	f000 fc52 	bl	8012b30 <__lshift>
 801228c:	f10a 0301 	add.w	r3, sl, #1
 8012290:	9307      	str	r3, [sp, #28]
 8012292:	9b00      	ldr	r3, [sp, #0]
 8012294:	4453      	add	r3, sl
 8012296:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012298:	9b02      	ldr	r3, [sp, #8]
 801229a:	f003 0301 	and.w	r3, r3, #1
 801229e:	462f      	mov	r7, r5
 80122a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80122a2:	4605      	mov	r5, r0
 80122a4:	9b07      	ldr	r3, [sp, #28]
 80122a6:	4621      	mov	r1, r4
 80122a8:	3b01      	subs	r3, #1
 80122aa:	4648      	mov	r0, r9
 80122ac:	9300      	str	r3, [sp, #0]
 80122ae:	f7ff fa99 	bl	80117e4 <quorem>
 80122b2:	4639      	mov	r1, r7
 80122b4:	9002      	str	r0, [sp, #8]
 80122b6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80122ba:	4648      	mov	r0, r9
 80122bc:	f000 fca4 	bl	8012c08 <__mcmp>
 80122c0:	462a      	mov	r2, r5
 80122c2:	9008      	str	r0, [sp, #32]
 80122c4:	4621      	mov	r1, r4
 80122c6:	4658      	mov	r0, fp
 80122c8:	f000 fcba 	bl	8012c40 <__mdiff>
 80122cc:	68c2      	ldr	r2, [r0, #12]
 80122ce:	4606      	mov	r6, r0
 80122d0:	bb02      	cbnz	r2, 8012314 <_dtoa_r+0xa1c>
 80122d2:	4601      	mov	r1, r0
 80122d4:	4648      	mov	r0, r9
 80122d6:	f000 fc97 	bl	8012c08 <__mcmp>
 80122da:	4602      	mov	r2, r0
 80122dc:	4631      	mov	r1, r6
 80122de:	4658      	mov	r0, fp
 80122e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80122e2:	f000 fa0d 	bl	8012700 <_Bfree>
 80122e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80122ea:	9e07      	ldr	r6, [sp, #28]
 80122ec:	ea43 0102 	orr.w	r1, r3, r2
 80122f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122f2:	4319      	orrs	r1, r3
 80122f4:	d110      	bne.n	8012318 <_dtoa_r+0xa20>
 80122f6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80122fa:	d029      	beq.n	8012350 <_dtoa_r+0xa58>
 80122fc:	9b08      	ldr	r3, [sp, #32]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	dd02      	ble.n	8012308 <_dtoa_r+0xa10>
 8012302:	9b02      	ldr	r3, [sp, #8]
 8012304:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012308:	9b00      	ldr	r3, [sp, #0]
 801230a:	f883 8000 	strb.w	r8, [r3]
 801230e:	e63f      	b.n	8011f90 <_dtoa_r+0x698>
 8012310:	4628      	mov	r0, r5
 8012312:	e7bb      	b.n	801228c <_dtoa_r+0x994>
 8012314:	2201      	movs	r2, #1
 8012316:	e7e1      	b.n	80122dc <_dtoa_r+0x9e4>
 8012318:	9b08      	ldr	r3, [sp, #32]
 801231a:	2b00      	cmp	r3, #0
 801231c:	db04      	blt.n	8012328 <_dtoa_r+0xa30>
 801231e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012320:	430b      	orrs	r3, r1
 8012322:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012324:	430b      	orrs	r3, r1
 8012326:	d120      	bne.n	801236a <_dtoa_r+0xa72>
 8012328:	2a00      	cmp	r2, #0
 801232a:	dded      	ble.n	8012308 <_dtoa_r+0xa10>
 801232c:	4649      	mov	r1, r9
 801232e:	2201      	movs	r2, #1
 8012330:	4658      	mov	r0, fp
 8012332:	f000 fbfd 	bl	8012b30 <__lshift>
 8012336:	4621      	mov	r1, r4
 8012338:	4681      	mov	r9, r0
 801233a:	f000 fc65 	bl	8012c08 <__mcmp>
 801233e:	2800      	cmp	r0, #0
 8012340:	dc03      	bgt.n	801234a <_dtoa_r+0xa52>
 8012342:	d1e1      	bne.n	8012308 <_dtoa_r+0xa10>
 8012344:	f018 0f01 	tst.w	r8, #1
 8012348:	d0de      	beq.n	8012308 <_dtoa_r+0xa10>
 801234a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801234e:	d1d8      	bne.n	8012302 <_dtoa_r+0xa0a>
 8012350:	9a00      	ldr	r2, [sp, #0]
 8012352:	2339      	movs	r3, #57	@ 0x39
 8012354:	7013      	strb	r3, [r2, #0]
 8012356:	4633      	mov	r3, r6
 8012358:	461e      	mov	r6, r3
 801235a:	3b01      	subs	r3, #1
 801235c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012360:	2a39      	cmp	r2, #57	@ 0x39
 8012362:	d052      	beq.n	801240a <_dtoa_r+0xb12>
 8012364:	3201      	adds	r2, #1
 8012366:	701a      	strb	r2, [r3, #0]
 8012368:	e612      	b.n	8011f90 <_dtoa_r+0x698>
 801236a:	2a00      	cmp	r2, #0
 801236c:	dd07      	ble.n	801237e <_dtoa_r+0xa86>
 801236e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012372:	d0ed      	beq.n	8012350 <_dtoa_r+0xa58>
 8012374:	9a00      	ldr	r2, [sp, #0]
 8012376:	f108 0301 	add.w	r3, r8, #1
 801237a:	7013      	strb	r3, [r2, #0]
 801237c:	e608      	b.n	8011f90 <_dtoa_r+0x698>
 801237e:	9b07      	ldr	r3, [sp, #28]
 8012380:	9a07      	ldr	r2, [sp, #28]
 8012382:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012386:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012388:	4293      	cmp	r3, r2
 801238a:	d028      	beq.n	80123de <_dtoa_r+0xae6>
 801238c:	4649      	mov	r1, r9
 801238e:	2300      	movs	r3, #0
 8012390:	220a      	movs	r2, #10
 8012392:	4658      	mov	r0, fp
 8012394:	f000 f9d6 	bl	8012744 <__multadd>
 8012398:	42af      	cmp	r7, r5
 801239a:	4681      	mov	r9, r0
 801239c:	f04f 0300 	mov.w	r3, #0
 80123a0:	f04f 020a 	mov.w	r2, #10
 80123a4:	4639      	mov	r1, r7
 80123a6:	4658      	mov	r0, fp
 80123a8:	d107      	bne.n	80123ba <_dtoa_r+0xac2>
 80123aa:	f000 f9cb 	bl	8012744 <__multadd>
 80123ae:	4607      	mov	r7, r0
 80123b0:	4605      	mov	r5, r0
 80123b2:	9b07      	ldr	r3, [sp, #28]
 80123b4:	3301      	adds	r3, #1
 80123b6:	9307      	str	r3, [sp, #28]
 80123b8:	e774      	b.n	80122a4 <_dtoa_r+0x9ac>
 80123ba:	f000 f9c3 	bl	8012744 <__multadd>
 80123be:	4629      	mov	r1, r5
 80123c0:	4607      	mov	r7, r0
 80123c2:	2300      	movs	r3, #0
 80123c4:	220a      	movs	r2, #10
 80123c6:	4658      	mov	r0, fp
 80123c8:	f000 f9bc 	bl	8012744 <__multadd>
 80123cc:	4605      	mov	r5, r0
 80123ce:	e7f0      	b.n	80123b2 <_dtoa_r+0xaba>
 80123d0:	9b00      	ldr	r3, [sp, #0]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	bfcc      	ite	gt
 80123d6:	461e      	movgt	r6, r3
 80123d8:	2601      	movle	r6, #1
 80123da:	4456      	add	r6, sl
 80123dc:	2700      	movs	r7, #0
 80123de:	4649      	mov	r1, r9
 80123e0:	2201      	movs	r2, #1
 80123e2:	4658      	mov	r0, fp
 80123e4:	f000 fba4 	bl	8012b30 <__lshift>
 80123e8:	4621      	mov	r1, r4
 80123ea:	4681      	mov	r9, r0
 80123ec:	f000 fc0c 	bl	8012c08 <__mcmp>
 80123f0:	2800      	cmp	r0, #0
 80123f2:	dcb0      	bgt.n	8012356 <_dtoa_r+0xa5e>
 80123f4:	d102      	bne.n	80123fc <_dtoa_r+0xb04>
 80123f6:	f018 0f01 	tst.w	r8, #1
 80123fa:	d1ac      	bne.n	8012356 <_dtoa_r+0xa5e>
 80123fc:	4633      	mov	r3, r6
 80123fe:	461e      	mov	r6, r3
 8012400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012404:	2a30      	cmp	r2, #48	@ 0x30
 8012406:	d0fa      	beq.n	80123fe <_dtoa_r+0xb06>
 8012408:	e5c2      	b.n	8011f90 <_dtoa_r+0x698>
 801240a:	459a      	cmp	sl, r3
 801240c:	d1a4      	bne.n	8012358 <_dtoa_r+0xa60>
 801240e:	9b04      	ldr	r3, [sp, #16]
 8012410:	3301      	adds	r3, #1
 8012412:	9304      	str	r3, [sp, #16]
 8012414:	2331      	movs	r3, #49	@ 0x31
 8012416:	f88a 3000 	strb.w	r3, [sl]
 801241a:	e5b9      	b.n	8011f90 <_dtoa_r+0x698>
 801241c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801241e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801247c <_dtoa_r+0xb84>
 8012422:	b11b      	cbz	r3, 801242c <_dtoa_r+0xb34>
 8012424:	f10a 0308 	add.w	r3, sl, #8
 8012428:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801242a:	6013      	str	r3, [r2, #0]
 801242c:	4650      	mov	r0, sl
 801242e:	b019      	add	sp, #100	@ 0x64
 8012430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012436:	2b01      	cmp	r3, #1
 8012438:	f77f ae37 	ble.w	80120aa <_dtoa_r+0x7b2>
 801243c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801243e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012440:	2001      	movs	r0, #1
 8012442:	e655      	b.n	80120f0 <_dtoa_r+0x7f8>
 8012444:	9b00      	ldr	r3, [sp, #0]
 8012446:	2b00      	cmp	r3, #0
 8012448:	f77f aed6 	ble.w	80121f8 <_dtoa_r+0x900>
 801244c:	4656      	mov	r6, sl
 801244e:	4621      	mov	r1, r4
 8012450:	4648      	mov	r0, r9
 8012452:	f7ff f9c7 	bl	80117e4 <quorem>
 8012456:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801245a:	f806 8b01 	strb.w	r8, [r6], #1
 801245e:	9b00      	ldr	r3, [sp, #0]
 8012460:	eba6 020a 	sub.w	r2, r6, sl
 8012464:	4293      	cmp	r3, r2
 8012466:	ddb3      	ble.n	80123d0 <_dtoa_r+0xad8>
 8012468:	4649      	mov	r1, r9
 801246a:	2300      	movs	r3, #0
 801246c:	220a      	movs	r2, #10
 801246e:	4658      	mov	r0, fp
 8012470:	f000 f968 	bl	8012744 <__multadd>
 8012474:	4681      	mov	r9, r0
 8012476:	e7ea      	b.n	801244e <_dtoa_r+0xb56>
 8012478:	08016efb 	.word	0x08016efb
 801247c:	08016e7f 	.word	0x08016e7f

08012480 <_free_r>:
 8012480:	b538      	push	{r3, r4, r5, lr}
 8012482:	4605      	mov	r5, r0
 8012484:	2900      	cmp	r1, #0
 8012486:	d041      	beq.n	801250c <_free_r+0x8c>
 8012488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801248c:	1f0c      	subs	r4, r1, #4
 801248e:	2b00      	cmp	r3, #0
 8012490:	bfb8      	it	lt
 8012492:	18e4      	addlt	r4, r4, r3
 8012494:	f000 f8e8 	bl	8012668 <__malloc_lock>
 8012498:	4a1d      	ldr	r2, [pc, #116]	@ (8012510 <_free_r+0x90>)
 801249a:	6813      	ldr	r3, [r2, #0]
 801249c:	b933      	cbnz	r3, 80124ac <_free_r+0x2c>
 801249e:	6063      	str	r3, [r4, #4]
 80124a0:	6014      	str	r4, [r2, #0]
 80124a2:	4628      	mov	r0, r5
 80124a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80124a8:	f000 b8e4 	b.w	8012674 <__malloc_unlock>
 80124ac:	42a3      	cmp	r3, r4
 80124ae:	d908      	bls.n	80124c2 <_free_r+0x42>
 80124b0:	6820      	ldr	r0, [r4, #0]
 80124b2:	1821      	adds	r1, r4, r0
 80124b4:	428b      	cmp	r3, r1
 80124b6:	bf01      	itttt	eq
 80124b8:	6819      	ldreq	r1, [r3, #0]
 80124ba:	685b      	ldreq	r3, [r3, #4]
 80124bc:	1809      	addeq	r1, r1, r0
 80124be:	6021      	streq	r1, [r4, #0]
 80124c0:	e7ed      	b.n	801249e <_free_r+0x1e>
 80124c2:	461a      	mov	r2, r3
 80124c4:	685b      	ldr	r3, [r3, #4]
 80124c6:	b10b      	cbz	r3, 80124cc <_free_r+0x4c>
 80124c8:	42a3      	cmp	r3, r4
 80124ca:	d9fa      	bls.n	80124c2 <_free_r+0x42>
 80124cc:	6811      	ldr	r1, [r2, #0]
 80124ce:	1850      	adds	r0, r2, r1
 80124d0:	42a0      	cmp	r0, r4
 80124d2:	d10b      	bne.n	80124ec <_free_r+0x6c>
 80124d4:	6820      	ldr	r0, [r4, #0]
 80124d6:	4401      	add	r1, r0
 80124d8:	1850      	adds	r0, r2, r1
 80124da:	4283      	cmp	r3, r0
 80124dc:	6011      	str	r1, [r2, #0]
 80124de:	d1e0      	bne.n	80124a2 <_free_r+0x22>
 80124e0:	6818      	ldr	r0, [r3, #0]
 80124e2:	685b      	ldr	r3, [r3, #4]
 80124e4:	6053      	str	r3, [r2, #4]
 80124e6:	4408      	add	r0, r1
 80124e8:	6010      	str	r0, [r2, #0]
 80124ea:	e7da      	b.n	80124a2 <_free_r+0x22>
 80124ec:	d902      	bls.n	80124f4 <_free_r+0x74>
 80124ee:	230c      	movs	r3, #12
 80124f0:	602b      	str	r3, [r5, #0]
 80124f2:	e7d6      	b.n	80124a2 <_free_r+0x22>
 80124f4:	6820      	ldr	r0, [r4, #0]
 80124f6:	1821      	adds	r1, r4, r0
 80124f8:	428b      	cmp	r3, r1
 80124fa:	bf04      	itt	eq
 80124fc:	6819      	ldreq	r1, [r3, #0]
 80124fe:	685b      	ldreq	r3, [r3, #4]
 8012500:	6063      	str	r3, [r4, #4]
 8012502:	bf04      	itt	eq
 8012504:	1809      	addeq	r1, r1, r0
 8012506:	6021      	streq	r1, [r4, #0]
 8012508:	6054      	str	r4, [r2, #4]
 801250a:	e7ca      	b.n	80124a2 <_free_r+0x22>
 801250c:	bd38      	pop	{r3, r4, r5, pc}
 801250e:	bf00      	nop
 8012510:	20002694 	.word	0x20002694

08012514 <malloc>:
 8012514:	4b02      	ldr	r3, [pc, #8]	@ (8012520 <malloc+0xc>)
 8012516:	4601      	mov	r1, r0
 8012518:	6818      	ldr	r0, [r3, #0]
 801251a:	f000 b825 	b.w	8012568 <_malloc_r>
 801251e:	bf00      	nop
 8012520:	200001bc 	.word	0x200001bc

08012524 <sbrk_aligned>:
 8012524:	b570      	push	{r4, r5, r6, lr}
 8012526:	4e0f      	ldr	r6, [pc, #60]	@ (8012564 <sbrk_aligned+0x40>)
 8012528:	460c      	mov	r4, r1
 801252a:	6831      	ldr	r1, [r6, #0]
 801252c:	4605      	mov	r5, r0
 801252e:	b911      	cbnz	r1, 8012536 <sbrk_aligned+0x12>
 8012530:	f002 f988 	bl	8014844 <_sbrk_r>
 8012534:	6030      	str	r0, [r6, #0]
 8012536:	4621      	mov	r1, r4
 8012538:	4628      	mov	r0, r5
 801253a:	f002 f983 	bl	8014844 <_sbrk_r>
 801253e:	1c43      	adds	r3, r0, #1
 8012540:	d103      	bne.n	801254a <sbrk_aligned+0x26>
 8012542:	f04f 34ff 	mov.w	r4, #4294967295
 8012546:	4620      	mov	r0, r4
 8012548:	bd70      	pop	{r4, r5, r6, pc}
 801254a:	1cc4      	adds	r4, r0, #3
 801254c:	f024 0403 	bic.w	r4, r4, #3
 8012550:	42a0      	cmp	r0, r4
 8012552:	d0f8      	beq.n	8012546 <sbrk_aligned+0x22>
 8012554:	1a21      	subs	r1, r4, r0
 8012556:	4628      	mov	r0, r5
 8012558:	f002 f974 	bl	8014844 <_sbrk_r>
 801255c:	3001      	adds	r0, #1
 801255e:	d1f2      	bne.n	8012546 <sbrk_aligned+0x22>
 8012560:	e7ef      	b.n	8012542 <sbrk_aligned+0x1e>
 8012562:	bf00      	nop
 8012564:	20002690 	.word	0x20002690

08012568 <_malloc_r>:
 8012568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801256c:	1ccd      	adds	r5, r1, #3
 801256e:	f025 0503 	bic.w	r5, r5, #3
 8012572:	3508      	adds	r5, #8
 8012574:	2d0c      	cmp	r5, #12
 8012576:	bf38      	it	cc
 8012578:	250c      	movcc	r5, #12
 801257a:	2d00      	cmp	r5, #0
 801257c:	4606      	mov	r6, r0
 801257e:	db01      	blt.n	8012584 <_malloc_r+0x1c>
 8012580:	42a9      	cmp	r1, r5
 8012582:	d904      	bls.n	801258e <_malloc_r+0x26>
 8012584:	230c      	movs	r3, #12
 8012586:	6033      	str	r3, [r6, #0]
 8012588:	2000      	movs	r0, #0
 801258a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801258e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012664 <_malloc_r+0xfc>
 8012592:	f000 f869 	bl	8012668 <__malloc_lock>
 8012596:	f8d8 3000 	ldr.w	r3, [r8]
 801259a:	461c      	mov	r4, r3
 801259c:	bb44      	cbnz	r4, 80125f0 <_malloc_r+0x88>
 801259e:	4629      	mov	r1, r5
 80125a0:	4630      	mov	r0, r6
 80125a2:	f7ff ffbf 	bl	8012524 <sbrk_aligned>
 80125a6:	1c43      	adds	r3, r0, #1
 80125a8:	4604      	mov	r4, r0
 80125aa:	d158      	bne.n	801265e <_malloc_r+0xf6>
 80125ac:	f8d8 4000 	ldr.w	r4, [r8]
 80125b0:	4627      	mov	r7, r4
 80125b2:	2f00      	cmp	r7, #0
 80125b4:	d143      	bne.n	801263e <_malloc_r+0xd6>
 80125b6:	2c00      	cmp	r4, #0
 80125b8:	d04b      	beq.n	8012652 <_malloc_r+0xea>
 80125ba:	6823      	ldr	r3, [r4, #0]
 80125bc:	4639      	mov	r1, r7
 80125be:	4630      	mov	r0, r6
 80125c0:	eb04 0903 	add.w	r9, r4, r3
 80125c4:	f002 f93e 	bl	8014844 <_sbrk_r>
 80125c8:	4581      	cmp	r9, r0
 80125ca:	d142      	bne.n	8012652 <_malloc_r+0xea>
 80125cc:	6821      	ldr	r1, [r4, #0]
 80125ce:	1a6d      	subs	r5, r5, r1
 80125d0:	4629      	mov	r1, r5
 80125d2:	4630      	mov	r0, r6
 80125d4:	f7ff ffa6 	bl	8012524 <sbrk_aligned>
 80125d8:	3001      	adds	r0, #1
 80125da:	d03a      	beq.n	8012652 <_malloc_r+0xea>
 80125dc:	6823      	ldr	r3, [r4, #0]
 80125de:	442b      	add	r3, r5
 80125e0:	6023      	str	r3, [r4, #0]
 80125e2:	f8d8 3000 	ldr.w	r3, [r8]
 80125e6:	685a      	ldr	r2, [r3, #4]
 80125e8:	bb62      	cbnz	r2, 8012644 <_malloc_r+0xdc>
 80125ea:	f8c8 7000 	str.w	r7, [r8]
 80125ee:	e00f      	b.n	8012610 <_malloc_r+0xa8>
 80125f0:	6822      	ldr	r2, [r4, #0]
 80125f2:	1b52      	subs	r2, r2, r5
 80125f4:	d420      	bmi.n	8012638 <_malloc_r+0xd0>
 80125f6:	2a0b      	cmp	r2, #11
 80125f8:	d917      	bls.n	801262a <_malloc_r+0xc2>
 80125fa:	1961      	adds	r1, r4, r5
 80125fc:	42a3      	cmp	r3, r4
 80125fe:	6025      	str	r5, [r4, #0]
 8012600:	bf18      	it	ne
 8012602:	6059      	strne	r1, [r3, #4]
 8012604:	6863      	ldr	r3, [r4, #4]
 8012606:	bf08      	it	eq
 8012608:	f8c8 1000 	streq.w	r1, [r8]
 801260c:	5162      	str	r2, [r4, r5]
 801260e:	604b      	str	r3, [r1, #4]
 8012610:	4630      	mov	r0, r6
 8012612:	f000 f82f 	bl	8012674 <__malloc_unlock>
 8012616:	f104 000b 	add.w	r0, r4, #11
 801261a:	1d23      	adds	r3, r4, #4
 801261c:	f020 0007 	bic.w	r0, r0, #7
 8012620:	1ac2      	subs	r2, r0, r3
 8012622:	bf1c      	itt	ne
 8012624:	1a1b      	subne	r3, r3, r0
 8012626:	50a3      	strne	r3, [r4, r2]
 8012628:	e7af      	b.n	801258a <_malloc_r+0x22>
 801262a:	6862      	ldr	r2, [r4, #4]
 801262c:	42a3      	cmp	r3, r4
 801262e:	bf0c      	ite	eq
 8012630:	f8c8 2000 	streq.w	r2, [r8]
 8012634:	605a      	strne	r2, [r3, #4]
 8012636:	e7eb      	b.n	8012610 <_malloc_r+0xa8>
 8012638:	4623      	mov	r3, r4
 801263a:	6864      	ldr	r4, [r4, #4]
 801263c:	e7ae      	b.n	801259c <_malloc_r+0x34>
 801263e:	463c      	mov	r4, r7
 8012640:	687f      	ldr	r7, [r7, #4]
 8012642:	e7b6      	b.n	80125b2 <_malloc_r+0x4a>
 8012644:	461a      	mov	r2, r3
 8012646:	685b      	ldr	r3, [r3, #4]
 8012648:	42a3      	cmp	r3, r4
 801264a:	d1fb      	bne.n	8012644 <_malloc_r+0xdc>
 801264c:	2300      	movs	r3, #0
 801264e:	6053      	str	r3, [r2, #4]
 8012650:	e7de      	b.n	8012610 <_malloc_r+0xa8>
 8012652:	230c      	movs	r3, #12
 8012654:	6033      	str	r3, [r6, #0]
 8012656:	4630      	mov	r0, r6
 8012658:	f000 f80c 	bl	8012674 <__malloc_unlock>
 801265c:	e794      	b.n	8012588 <_malloc_r+0x20>
 801265e:	6005      	str	r5, [r0, #0]
 8012660:	e7d6      	b.n	8012610 <_malloc_r+0xa8>
 8012662:	bf00      	nop
 8012664:	20002694 	.word	0x20002694

08012668 <__malloc_lock>:
 8012668:	4801      	ldr	r0, [pc, #4]	@ (8012670 <__malloc_lock+0x8>)
 801266a:	f7ff b8a4 	b.w	80117b6 <__retarget_lock_acquire_recursive>
 801266e:	bf00      	nop
 8012670:	2000268c 	.word	0x2000268c

08012674 <__malloc_unlock>:
 8012674:	4801      	ldr	r0, [pc, #4]	@ (801267c <__malloc_unlock+0x8>)
 8012676:	f7ff b89f 	b.w	80117b8 <__retarget_lock_release_recursive>
 801267a:	bf00      	nop
 801267c:	2000268c 	.word	0x2000268c

08012680 <_Balloc>:
 8012680:	b570      	push	{r4, r5, r6, lr}
 8012682:	69c6      	ldr	r6, [r0, #28]
 8012684:	4604      	mov	r4, r0
 8012686:	460d      	mov	r5, r1
 8012688:	b976      	cbnz	r6, 80126a8 <_Balloc+0x28>
 801268a:	2010      	movs	r0, #16
 801268c:	f7ff ff42 	bl	8012514 <malloc>
 8012690:	4602      	mov	r2, r0
 8012692:	61e0      	str	r0, [r4, #28]
 8012694:	b920      	cbnz	r0, 80126a0 <_Balloc+0x20>
 8012696:	4b18      	ldr	r3, [pc, #96]	@ (80126f8 <_Balloc+0x78>)
 8012698:	4818      	ldr	r0, [pc, #96]	@ (80126fc <_Balloc+0x7c>)
 801269a:	216b      	movs	r1, #107	@ 0x6b
 801269c:	f002 f8ec 	bl	8014878 <__assert_func>
 80126a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80126a4:	6006      	str	r6, [r0, #0]
 80126a6:	60c6      	str	r6, [r0, #12]
 80126a8:	69e6      	ldr	r6, [r4, #28]
 80126aa:	68f3      	ldr	r3, [r6, #12]
 80126ac:	b183      	cbz	r3, 80126d0 <_Balloc+0x50>
 80126ae:	69e3      	ldr	r3, [r4, #28]
 80126b0:	68db      	ldr	r3, [r3, #12]
 80126b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80126b6:	b9b8      	cbnz	r0, 80126e8 <_Balloc+0x68>
 80126b8:	2101      	movs	r1, #1
 80126ba:	fa01 f605 	lsl.w	r6, r1, r5
 80126be:	1d72      	adds	r2, r6, #5
 80126c0:	0092      	lsls	r2, r2, #2
 80126c2:	4620      	mov	r0, r4
 80126c4:	f002 f8f6 	bl	80148b4 <_calloc_r>
 80126c8:	b160      	cbz	r0, 80126e4 <_Balloc+0x64>
 80126ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80126ce:	e00e      	b.n	80126ee <_Balloc+0x6e>
 80126d0:	2221      	movs	r2, #33	@ 0x21
 80126d2:	2104      	movs	r1, #4
 80126d4:	4620      	mov	r0, r4
 80126d6:	f002 f8ed 	bl	80148b4 <_calloc_r>
 80126da:	69e3      	ldr	r3, [r4, #28]
 80126dc:	60f0      	str	r0, [r6, #12]
 80126de:	68db      	ldr	r3, [r3, #12]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d1e4      	bne.n	80126ae <_Balloc+0x2e>
 80126e4:	2000      	movs	r0, #0
 80126e6:	bd70      	pop	{r4, r5, r6, pc}
 80126e8:	6802      	ldr	r2, [r0, #0]
 80126ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80126ee:	2300      	movs	r3, #0
 80126f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80126f4:	e7f7      	b.n	80126e6 <_Balloc+0x66>
 80126f6:	bf00      	nop
 80126f8:	08016e8c 	.word	0x08016e8c
 80126fc:	08016f0c 	.word	0x08016f0c

08012700 <_Bfree>:
 8012700:	b570      	push	{r4, r5, r6, lr}
 8012702:	69c6      	ldr	r6, [r0, #28]
 8012704:	4605      	mov	r5, r0
 8012706:	460c      	mov	r4, r1
 8012708:	b976      	cbnz	r6, 8012728 <_Bfree+0x28>
 801270a:	2010      	movs	r0, #16
 801270c:	f7ff ff02 	bl	8012514 <malloc>
 8012710:	4602      	mov	r2, r0
 8012712:	61e8      	str	r0, [r5, #28]
 8012714:	b920      	cbnz	r0, 8012720 <_Bfree+0x20>
 8012716:	4b09      	ldr	r3, [pc, #36]	@ (801273c <_Bfree+0x3c>)
 8012718:	4809      	ldr	r0, [pc, #36]	@ (8012740 <_Bfree+0x40>)
 801271a:	218f      	movs	r1, #143	@ 0x8f
 801271c:	f002 f8ac 	bl	8014878 <__assert_func>
 8012720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012724:	6006      	str	r6, [r0, #0]
 8012726:	60c6      	str	r6, [r0, #12]
 8012728:	b13c      	cbz	r4, 801273a <_Bfree+0x3a>
 801272a:	69eb      	ldr	r3, [r5, #28]
 801272c:	6862      	ldr	r2, [r4, #4]
 801272e:	68db      	ldr	r3, [r3, #12]
 8012730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012734:	6021      	str	r1, [r4, #0]
 8012736:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801273a:	bd70      	pop	{r4, r5, r6, pc}
 801273c:	08016e8c 	.word	0x08016e8c
 8012740:	08016f0c 	.word	0x08016f0c

08012744 <__multadd>:
 8012744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012748:	690d      	ldr	r5, [r1, #16]
 801274a:	4607      	mov	r7, r0
 801274c:	460c      	mov	r4, r1
 801274e:	461e      	mov	r6, r3
 8012750:	f101 0c14 	add.w	ip, r1, #20
 8012754:	2000      	movs	r0, #0
 8012756:	f8dc 3000 	ldr.w	r3, [ip]
 801275a:	b299      	uxth	r1, r3
 801275c:	fb02 6101 	mla	r1, r2, r1, r6
 8012760:	0c1e      	lsrs	r6, r3, #16
 8012762:	0c0b      	lsrs	r3, r1, #16
 8012764:	fb02 3306 	mla	r3, r2, r6, r3
 8012768:	b289      	uxth	r1, r1
 801276a:	3001      	adds	r0, #1
 801276c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012770:	4285      	cmp	r5, r0
 8012772:	f84c 1b04 	str.w	r1, [ip], #4
 8012776:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801277a:	dcec      	bgt.n	8012756 <__multadd+0x12>
 801277c:	b30e      	cbz	r6, 80127c2 <__multadd+0x7e>
 801277e:	68a3      	ldr	r3, [r4, #8]
 8012780:	42ab      	cmp	r3, r5
 8012782:	dc19      	bgt.n	80127b8 <__multadd+0x74>
 8012784:	6861      	ldr	r1, [r4, #4]
 8012786:	4638      	mov	r0, r7
 8012788:	3101      	adds	r1, #1
 801278a:	f7ff ff79 	bl	8012680 <_Balloc>
 801278e:	4680      	mov	r8, r0
 8012790:	b928      	cbnz	r0, 801279e <__multadd+0x5a>
 8012792:	4602      	mov	r2, r0
 8012794:	4b0c      	ldr	r3, [pc, #48]	@ (80127c8 <__multadd+0x84>)
 8012796:	480d      	ldr	r0, [pc, #52]	@ (80127cc <__multadd+0x88>)
 8012798:	21ba      	movs	r1, #186	@ 0xba
 801279a:	f002 f86d 	bl	8014878 <__assert_func>
 801279e:	6922      	ldr	r2, [r4, #16]
 80127a0:	3202      	adds	r2, #2
 80127a2:	f104 010c 	add.w	r1, r4, #12
 80127a6:	0092      	lsls	r2, r2, #2
 80127a8:	300c      	adds	r0, #12
 80127aa:	f7ff f806 	bl	80117ba <memcpy>
 80127ae:	4621      	mov	r1, r4
 80127b0:	4638      	mov	r0, r7
 80127b2:	f7ff ffa5 	bl	8012700 <_Bfree>
 80127b6:	4644      	mov	r4, r8
 80127b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80127bc:	3501      	adds	r5, #1
 80127be:	615e      	str	r6, [r3, #20]
 80127c0:	6125      	str	r5, [r4, #16]
 80127c2:	4620      	mov	r0, r4
 80127c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127c8:	08016efb 	.word	0x08016efb
 80127cc:	08016f0c 	.word	0x08016f0c

080127d0 <__s2b>:
 80127d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127d4:	460c      	mov	r4, r1
 80127d6:	4615      	mov	r5, r2
 80127d8:	461f      	mov	r7, r3
 80127da:	2209      	movs	r2, #9
 80127dc:	3308      	adds	r3, #8
 80127de:	4606      	mov	r6, r0
 80127e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80127e4:	2100      	movs	r1, #0
 80127e6:	2201      	movs	r2, #1
 80127e8:	429a      	cmp	r2, r3
 80127ea:	db09      	blt.n	8012800 <__s2b+0x30>
 80127ec:	4630      	mov	r0, r6
 80127ee:	f7ff ff47 	bl	8012680 <_Balloc>
 80127f2:	b940      	cbnz	r0, 8012806 <__s2b+0x36>
 80127f4:	4602      	mov	r2, r0
 80127f6:	4b19      	ldr	r3, [pc, #100]	@ (801285c <__s2b+0x8c>)
 80127f8:	4819      	ldr	r0, [pc, #100]	@ (8012860 <__s2b+0x90>)
 80127fa:	21d3      	movs	r1, #211	@ 0xd3
 80127fc:	f002 f83c 	bl	8014878 <__assert_func>
 8012800:	0052      	lsls	r2, r2, #1
 8012802:	3101      	adds	r1, #1
 8012804:	e7f0      	b.n	80127e8 <__s2b+0x18>
 8012806:	9b08      	ldr	r3, [sp, #32]
 8012808:	6143      	str	r3, [r0, #20]
 801280a:	2d09      	cmp	r5, #9
 801280c:	f04f 0301 	mov.w	r3, #1
 8012810:	6103      	str	r3, [r0, #16]
 8012812:	dd16      	ble.n	8012842 <__s2b+0x72>
 8012814:	f104 0909 	add.w	r9, r4, #9
 8012818:	46c8      	mov	r8, r9
 801281a:	442c      	add	r4, r5
 801281c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012820:	4601      	mov	r1, r0
 8012822:	3b30      	subs	r3, #48	@ 0x30
 8012824:	220a      	movs	r2, #10
 8012826:	4630      	mov	r0, r6
 8012828:	f7ff ff8c 	bl	8012744 <__multadd>
 801282c:	45a0      	cmp	r8, r4
 801282e:	d1f5      	bne.n	801281c <__s2b+0x4c>
 8012830:	f1a5 0408 	sub.w	r4, r5, #8
 8012834:	444c      	add	r4, r9
 8012836:	1b2d      	subs	r5, r5, r4
 8012838:	1963      	adds	r3, r4, r5
 801283a:	42bb      	cmp	r3, r7
 801283c:	db04      	blt.n	8012848 <__s2b+0x78>
 801283e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012842:	340a      	adds	r4, #10
 8012844:	2509      	movs	r5, #9
 8012846:	e7f6      	b.n	8012836 <__s2b+0x66>
 8012848:	f814 3b01 	ldrb.w	r3, [r4], #1
 801284c:	4601      	mov	r1, r0
 801284e:	3b30      	subs	r3, #48	@ 0x30
 8012850:	220a      	movs	r2, #10
 8012852:	4630      	mov	r0, r6
 8012854:	f7ff ff76 	bl	8012744 <__multadd>
 8012858:	e7ee      	b.n	8012838 <__s2b+0x68>
 801285a:	bf00      	nop
 801285c:	08016efb 	.word	0x08016efb
 8012860:	08016f0c 	.word	0x08016f0c

08012864 <__hi0bits>:
 8012864:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8012868:	4603      	mov	r3, r0
 801286a:	bf36      	itet	cc
 801286c:	0403      	lslcc	r3, r0, #16
 801286e:	2000      	movcs	r0, #0
 8012870:	2010      	movcc	r0, #16
 8012872:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012876:	bf3c      	itt	cc
 8012878:	021b      	lslcc	r3, r3, #8
 801287a:	3008      	addcc	r0, #8
 801287c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012880:	bf3c      	itt	cc
 8012882:	011b      	lslcc	r3, r3, #4
 8012884:	3004      	addcc	r0, #4
 8012886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801288a:	bf3c      	itt	cc
 801288c:	009b      	lslcc	r3, r3, #2
 801288e:	3002      	addcc	r0, #2
 8012890:	2b00      	cmp	r3, #0
 8012892:	db05      	blt.n	80128a0 <__hi0bits+0x3c>
 8012894:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8012898:	f100 0001 	add.w	r0, r0, #1
 801289c:	bf08      	it	eq
 801289e:	2020      	moveq	r0, #32
 80128a0:	4770      	bx	lr

080128a2 <__lo0bits>:
 80128a2:	6803      	ldr	r3, [r0, #0]
 80128a4:	4602      	mov	r2, r0
 80128a6:	f013 0007 	ands.w	r0, r3, #7
 80128aa:	d00b      	beq.n	80128c4 <__lo0bits+0x22>
 80128ac:	07d9      	lsls	r1, r3, #31
 80128ae:	d421      	bmi.n	80128f4 <__lo0bits+0x52>
 80128b0:	0798      	lsls	r0, r3, #30
 80128b2:	bf49      	itett	mi
 80128b4:	085b      	lsrmi	r3, r3, #1
 80128b6:	089b      	lsrpl	r3, r3, #2
 80128b8:	2001      	movmi	r0, #1
 80128ba:	6013      	strmi	r3, [r2, #0]
 80128bc:	bf5c      	itt	pl
 80128be:	6013      	strpl	r3, [r2, #0]
 80128c0:	2002      	movpl	r0, #2
 80128c2:	4770      	bx	lr
 80128c4:	b299      	uxth	r1, r3
 80128c6:	b909      	cbnz	r1, 80128cc <__lo0bits+0x2a>
 80128c8:	0c1b      	lsrs	r3, r3, #16
 80128ca:	2010      	movs	r0, #16
 80128cc:	b2d9      	uxtb	r1, r3
 80128ce:	b909      	cbnz	r1, 80128d4 <__lo0bits+0x32>
 80128d0:	3008      	adds	r0, #8
 80128d2:	0a1b      	lsrs	r3, r3, #8
 80128d4:	0719      	lsls	r1, r3, #28
 80128d6:	bf04      	itt	eq
 80128d8:	091b      	lsreq	r3, r3, #4
 80128da:	3004      	addeq	r0, #4
 80128dc:	0799      	lsls	r1, r3, #30
 80128de:	bf04      	itt	eq
 80128e0:	089b      	lsreq	r3, r3, #2
 80128e2:	3002      	addeq	r0, #2
 80128e4:	07d9      	lsls	r1, r3, #31
 80128e6:	d403      	bmi.n	80128f0 <__lo0bits+0x4e>
 80128e8:	085b      	lsrs	r3, r3, #1
 80128ea:	f100 0001 	add.w	r0, r0, #1
 80128ee:	d003      	beq.n	80128f8 <__lo0bits+0x56>
 80128f0:	6013      	str	r3, [r2, #0]
 80128f2:	4770      	bx	lr
 80128f4:	2000      	movs	r0, #0
 80128f6:	4770      	bx	lr
 80128f8:	2020      	movs	r0, #32
 80128fa:	4770      	bx	lr

080128fc <__i2b>:
 80128fc:	b510      	push	{r4, lr}
 80128fe:	460c      	mov	r4, r1
 8012900:	2101      	movs	r1, #1
 8012902:	f7ff febd 	bl	8012680 <_Balloc>
 8012906:	4602      	mov	r2, r0
 8012908:	b928      	cbnz	r0, 8012916 <__i2b+0x1a>
 801290a:	4b05      	ldr	r3, [pc, #20]	@ (8012920 <__i2b+0x24>)
 801290c:	4805      	ldr	r0, [pc, #20]	@ (8012924 <__i2b+0x28>)
 801290e:	f240 1145 	movw	r1, #325	@ 0x145
 8012912:	f001 ffb1 	bl	8014878 <__assert_func>
 8012916:	2301      	movs	r3, #1
 8012918:	6144      	str	r4, [r0, #20]
 801291a:	6103      	str	r3, [r0, #16]
 801291c:	bd10      	pop	{r4, pc}
 801291e:	bf00      	nop
 8012920:	08016efb 	.word	0x08016efb
 8012924:	08016f0c 	.word	0x08016f0c

08012928 <__multiply>:
 8012928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801292c:	4614      	mov	r4, r2
 801292e:	690a      	ldr	r2, [r1, #16]
 8012930:	6923      	ldr	r3, [r4, #16]
 8012932:	429a      	cmp	r2, r3
 8012934:	bfa8      	it	ge
 8012936:	4623      	movge	r3, r4
 8012938:	460f      	mov	r7, r1
 801293a:	bfa4      	itt	ge
 801293c:	460c      	movge	r4, r1
 801293e:	461f      	movge	r7, r3
 8012940:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8012944:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8012948:	68a3      	ldr	r3, [r4, #8]
 801294a:	6861      	ldr	r1, [r4, #4]
 801294c:	eb0a 0609 	add.w	r6, sl, r9
 8012950:	42b3      	cmp	r3, r6
 8012952:	b085      	sub	sp, #20
 8012954:	bfb8      	it	lt
 8012956:	3101      	addlt	r1, #1
 8012958:	f7ff fe92 	bl	8012680 <_Balloc>
 801295c:	b930      	cbnz	r0, 801296c <__multiply+0x44>
 801295e:	4602      	mov	r2, r0
 8012960:	4b44      	ldr	r3, [pc, #272]	@ (8012a74 <__multiply+0x14c>)
 8012962:	4845      	ldr	r0, [pc, #276]	@ (8012a78 <__multiply+0x150>)
 8012964:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8012968:	f001 ff86 	bl	8014878 <__assert_func>
 801296c:	f100 0514 	add.w	r5, r0, #20
 8012970:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012974:	462b      	mov	r3, r5
 8012976:	2200      	movs	r2, #0
 8012978:	4543      	cmp	r3, r8
 801297a:	d321      	bcc.n	80129c0 <__multiply+0x98>
 801297c:	f107 0114 	add.w	r1, r7, #20
 8012980:	f104 0214 	add.w	r2, r4, #20
 8012984:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8012988:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801298c:	9302      	str	r3, [sp, #8]
 801298e:	1b13      	subs	r3, r2, r4
 8012990:	3b15      	subs	r3, #21
 8012992:	f023 0303 	bic.w	r3, r3, #3
 8012996:	3304      	adds	r3, #4
 8012998:	f104 0715 	add.w	r7, r4, #21
 801299c:	42ba      	cmp	r2, r7
 801299e:	bf38      	it	cc
 80129a0:	2304      	movcc	r3, #4
 80129a2:	9301      	str	r3, [sp, #4]
 80129a4:	9b02      	ldr	r3, [sp, #8]
 80129a6:	9103      	str	r1, [sp, #12]
 80129a8:	428b      	cmp	r3, r1
 80129aa:	d80c      	bhi.n	80129c6 <__multiply+0x9e>
 80129ac:	2e00      	cmp	r6, #0
 80129ae:	dd03      	ble.n	80129b8 <__multiply+0x90>
 80129b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d05b      	beq.n	8012a70 <__multiply+0x148>
 80129b8:	6106      	str	r6, [r0, #16]
 80129ba:	b005      	add	sp, #20
 80129bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80129c0:	f843 2b04 	str.w	r2, [r3], #4
 80129c4:	e7d8      	b.n	8012978 <__multiply+0x50>
 80129c6:	f8b1 a000 	ldrh.w	sl, [r1]
 80129ca:	f1ba 0f00 	cmp.w	sl, #0
 80129ce:	d024      	beq.n	8012a1a <__multiply+0xf2>
 80129d0:	f104 0e14 	add.w	lr, r4, #20
 80129d4:	46a9      	mov	r9, r5
 80129d6:	f04f 0c00 	mov.w	ip, #0
 80129da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80129de:	f8d9 3000 	ldr.w	r3, [r9]
 80129e2:	fa1f fb87 	uxth.w	fp, r7
 80129e6:	b29b      	uxth	r3, r3
 80129e8:	fb0a 330b 	mla	r3, sl, fp, r3
 80129ec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80129f0:	f8d9 7000 	ldr.w	r7, [r9]
 80129f4:	4463      	add	r3, ip
 80129f6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80129fa:	fb0a c70b 	mla	r7, sl, fp, ip
 80129fe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8012a02:	b29b      	uxth	r3, r3
 8012a04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012a08:	4572      	cmp	r2, lr
 8012a0a:	f849 3b04 	str.w	r3, [r9], #4
 8012a0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8012a12:	d8e2      	bhi.n	80129da <__multiply+0xb2>
 8012a14:	9b01      	ldr	r3, [sp, #4]
 8012a16:	f845 c003 	str.w	ip, [r5, r3]
 8012a1a:	9b03      	ldr	r3, [sp, #12]
 8012a1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8012a20:	3104      	adds	r1, #4
 8012a22:	f1b9 0f00 	cmp.w	r9, #0
 8012a26:	d021      	beq.n	8012a6c <__multiply+0x144>
 8012a28:	682b      	ldr	r3, [r5, #0]
 8012a2a:	f104 0c14 	add.w	ip, r4, #20
 8012a2e:	46ae      	mov	lr, r5
 8012a30:	f04f 0a00 	mov.w	sl, #0
 8012a34:	f8bc b000 	ldrh.w	fp, [ip]
 8012a38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8012a3c:	fb09 770b 	mla	r7, r9, fp, r7
 8012a40:	4457      	add	r7, sl
 8012a42:	b29b      	uxth	r3, r3
 8012a44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8012a48:	f84e 3b04 	str.w	r3, [lr], #4
 8012a4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012a50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012a54:	f8be 3000 	ldrh.w	r3, [lr]
 8012a58:	fb09 330a 	mla	r3, r9, sl, r3
 8012a5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8012a60:	4562      	cmp	r2, ip
 8012a62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012a66:	d8e5      	bhi.n	8012a34 <__multiply+0x10c>
 8012a68:	9f01      	ldr	r7, [sp, #4]
 8012a6a:	51eb      	str	r3, [r5, r7]
 8012a6c:	3504      	adds	r5, #4
 8012a6e:	e799      	b.n	80129a4 <__multiply+0x7c>
 8012a70:	3e01      	subs	r6, #1
 8012a72:	e79b      	b.n	80129ac <__multiply+0x84>
 8012a74:	08016efb 	.word	0x08016efb
 8012a78:	08016f0c 	.word	0x08016f0c

08012a7c <__pow5mult>:
 8012a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a80:	4615      	mov	r5, r2
 8012a82:	f012 0203 	ands.w	r2, r2, #3
 8012a86:	4607      	mov	r7, r0
 8012a88:	460e      	mov	r6, r1
 8012a8a:	d007      	beq.n	8012a9c <__pow5mult+0x20>
 8012a8c:	4c25      	ldr	r4, [pc, #148]	@ (8012b24 <__pow5mult+0xa8>)
 8012a8e:	3a01      	subs	r2, #1
 8012a90:	2300      	movs	r3, #0
 8012a92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012a96:	f7ff fe55 	bl	8012744 <__multadd>
 8012a9a:	4606      	mov	r6, r0
 8012a9c:	10ad      	asrs	r5, r5, #2
 8012a9e:	d03d      	beq.n	8012b1c <__pow5mult+0xa0>
 8012aa0:	69fc      	ldr	r4, [r7, #28]
 8012aa2:	b97c      	cbnz	r4, 8012ac4 <__pow5mult+0x48>
 8012aa4:	2010      	movs	r0, #16
 8012aa6:	f7ff fd35 	bl	8012514 <malloc>
 8012aaa:	4602      	mov	r2, r0
 8012aac:	61f8      	str	r0, [r7, #28]
 8012aae:	b928      	cbnz	r0, 8012abc <__pow5mult+0x40>
 8012ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8012b28 <__pow5mult+0xac>)
 8012ab2:	481e      	ldr	r0, [pc, #120]	@ (8012b2c <__pow5mult+0xb0>)
 8012ab4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8012ab8:	f001 fede 	bl	8014878 <__assert_func>
 8012abc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012ac0:	6004      	str	r4, [r0, #0]
 8012ac2:	60c4      	str	r4, [r0, #12]
 8012ac4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8012ac8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012acc:	b94c      	cbnz	r4, 8012ae2 <__pow5mult+0x66>
 8012ace:	f240 2171 	movw	r1, #625	@ 0x271
 8012ad2:	4638      	mov	r0, r7
 8012ad4:	f7ff ff12 	bl	80128fc <__i2b>
 8012ad8:	2300      	movs	r3, #0
 8012ada:	f8c8 0008 	str.w	r0, [r8, #8]
 8012ade:	4604      	mov	r4, r0
 8012ae0:	6003      	str	r3, [r0, #0]
 8012ae2:	f04f 0900 	mov.w	r9, #0
 8012ae6:	07eb      	lsls	r3, r5, #31
 8012ae8:	d50a      	bpl.n	8012b00 <__pow5mult+0x84>
 8012aea:	4631      	mov	r1, r6
 8012aec:	4622      	mov	r2, r4
 8012aee:	4638      	mov	r0, r7
 8012af0:	f7ff ff1a 	bl	8012928 <__multiply>
 8012af4:	4631      	mov	r1, r6
 8012af6:	4680      	mov	r8, r0
 8012af8:	4638      	mov	r0, r7
 8012afa:	f7ff fe01 	bl	8012700 <_Bfree>
 8012afe:	4646      	mov	r6, r8
 8012b00:	106d      	asrs	r5, r5, #1
 8012b02:	d00b      	beq.n	8012b1c <__pow5mult+0xa0>
 8012b04:	6820      	ldr	r0, [r4, #0]
 8012b06:	b938      	cbnz	r0, 8012b18 <__pow5mult+0x9c>
 8012b08:	4622      	mov	r2, r4
 8012b0a:	4621      	mov	r1, r4
 8012b0c:	4638      	mov	r0, r7
 8012b0e:	f7ff ff0b 	bl	8012928 <__multiply>
 8012b12:	6020      	str	r0, [r4, #0]
 8012b14:	f8c0 9000 	str.w	r9, [r0]
 8012b18:	4604      	mov	r4, r0
 8012b1a:	e7e4      	b.n	8012ae6 <__pow5mult+0x6a>
 8012b1c:	4630      	mov	r0, r6
 8012b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b22:	bf00      	nop
 8012b24:	08016f68 	.word	0x08016f68
 8012b28:	08016e8c 	.word	0x08016e8c
 8012b2c:	08016f0c 	.word	0x08016f0c

08012b30 <__lshift>:
 8012b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b34:	460c      	mov	r4, r1
 8012b36:	6849      	ldr	r1, [r1, #4]
 8012b38:	6923      	ldr	r3, [r4, #16]
 8012b3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012b3e:	68a3      	ldr	r3, [r4, #8]
 8012b40:	4607      	mov	r7, r0
 8012b42:	4691      	mov	r9, r2
 8012b44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012b48:	f108 0601 	add.w	r6, r8, #1
 8012b4c:	42b3      	cmp	r3, r6
 8012b4e:	db0b      	blt.n	8012b68 <__lshift+0x38>
 8012b50:	4638      	mov	r0, r7
 8012b52:	f7ff fd95 	bl	8012680 <_Balloc>
 8012b56:	4605      	mov	r5, r0
 8012b58:	b948      	cbnz	r0, 8012b6e <__lshift+0x3e>
 8012b5a:	4602      	mov	r2, r0
 8012b5c:	4b28      	ldr	r3, [pc, #160]	@ (8012c00 <__lshift+0xd0>)
 8012b5e:	4829      	ldr	r0, [pc, #164]	@ (8012c04 <__lshift+0xd4>)
 8012b60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8012b64:	f001 fe88 	bl	8014878 <__assert_func>
 8012b68:	3101      	adds	r1, #1
 8012b6a:	005b      	lsls	r3, r3, #1
 8012b6c:	e7ee      	b.n	8012b4c <__lshift+0x1c>
 8012b6e:	2300      	movs	r3, #0
 8012b70:	f100 0114 	add.w	r1, r0, #20
 8012b74:	f100 0210 	add.w	r2, r0, #16
 8012b78:	4618      	mov	r0, r3
 8012b7a:	4553      	cmp	r3, sl
 8012b7c:	db33      	blt.n	8012be6 <__lshift+0xb6>
 8012b7e:	6920      	ldr	r0, [r4, #16]
 8012b80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012b84:	f104 0314 	add.w	r3, r4, #20
 8012b88:	f019 091f 	ands.w	r9, r9, #31
 8012b8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012b90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012b94:	d02b      	beq.n	8012bee <__lshift+0xbe>
 8012b96:	f1c9 0e20 	rsb	lr, r9, #32
 8012b9a:	468a      	mov	sl, r1
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	6818      	ldr	r0, [r3, #0]
 8012ba0:	fa00 f009 	lsl.w	r0, r0, r9
 8012ba4:	4310      	orrs	r0, r2
 8012ba6:	f84a 0b04 	str.w	r0, [sl], #4
 8012baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bae:	459c      	cmp	ip, r3
 8012bb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8012bb4:	d8f3      	bhi.n	8012b9e <__lshift+0x6e>
 8012bb6:	ebac 0304 	sub.w	r3, ip, r4
 8012bba:	3b15      	subs	r3, #21
 8012bbc:	f023 0303 	bic.w	r3, r3, #3
 8012bc0:	3304      	adds	r3, #4
 8012bc2:	f104 0015 	add.w	r0, r4, #21
 8012bc6:	4584      	cmp	ip, r0
 8012bc8:	bf38      	it	cc
 8012bca:	2304      	movcc	r3, #4
 8012bcc:	50ca      	str	r2, [r1, r3]
 8012bce:	b10a      	cbz	r2, 8012bd4 <__lshift+0xa4>
 8012bd0:	f108 0602 	add.w	r6, r8, #2
 8012bd4:	3e01      	subs	r6, #1
 8012bd6:	4638      	mov	r0, r7
 8012bd8:	612e      	str	r6, [r5, #16]
 8012bda:	4621      	mov	r1, r4
 8012bdc:	f7ff fd90 	bl	8012700 <_Bfree>
 8012be0:	4628      	mov	r0, r5
 8012be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012be6:	f842 0f04 	str.w	r0, [r2, #4]!
 8012bea:	3301      	adds	r3, #1
 8012bec:	e7c5      	b.n	8012b7a <__lshift+0x4a>
 8012bee:	3904      	subs	r1, #4
 8012bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bf4:	f841 2f04 	str.w	r2, [r1, #4]!
 8012bf8:	459c      	cmp	ip, r3
 8012bfa:	d8f9      	bhi.n	8012bf0 <__lshift+0xc0>
 8012bfc:	e7ea      	b.n	8012bd4 <__lshift+0xa4>
 8012bfe:	bf00      	nop
 8012c00:	08016efb 	.word	0x08016efb
 8012c04:	08016f0c 	.word	0x08016f0c

08012c08 <__mcmp>:
 8012c08:	690a      	ldr	r2, [r1, #16]
 8012c0a:	4603      	mov	r3, r0
 8012c0c:	6900      	ldr	r0, [r0, #16]
 8012c0e:	1a80      	subs	r0, r0, r2
 8012c10:	b530      	push	{r4, r5, lr}
 8012c12:	d10e      	bne.n	8012c32 <__mcmp+0x2a>
 8012c14:	3314      	adds	r3, #20
 8012c16:	3114      	adds	r1, #20
 8012c18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8012c1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8012c20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012c24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012c28:	4295      	cmp	r5, r2
 8012c2a:	d003      	beq.n	8012c34 <__mcmp+0x2c>
 8012c2c:	d205      	bcs.n	8012c3a <__mcmp+0x32>
 8012c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8012c32:	bd30      	pop	{r4, r5, pc}
 8012c34:	42a3      	cmp	r3, r4
 8012c36:	d3f3      	bcc.n	8012c20 <__mcmp+0x18>
 8012c38:	e7fb      	b.n	8012c32 <__mcmp+0x2a>
 8012c3a:	2001      	movs	r0, #1
 8012c3c:	e7f9      	b.n	8012c32 <__mcmp+0x2a>
	...

08012c40 <__mdiff>:
 8012c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c44:	4689      	mov	r9, r1
 8012c46:	4606      	mov	r6, r0
 8012c48:	4611      	mov	r1, r2
 8012c4a:	4648      	mov	r0, r9
 8012c4c:	4614      	mov	r4, r2
 8012c4e:	f7ff ffdb 	bl	8012c08 <__mcmp>
 8012c52:	1e05      	subs	r5, r0, #0
 8012c54:	d112      	bne.n	8012c7c <__mdiff+0x3c>
 8012c56:	4629      	mov	r1, r5
 8012c58:	4630      	mov	r0, r6
 8012c5a:	f7ff fd11 	bl	8012680 <_Balloc>
 8012c5e:	4602      	mov	r2, r0
 8012c60:	b928      	cbnz	r0, 8012c6e <__mdiff+0x2e>
 8012c62:	4b3f      	ldr	r3, [pc, #252]	@ (8012d60 <__mdiff+0x120>)
 8012c64:	f240 2137 	movw	r1, #567	@ 0x237
 8012c68:	483e      	ldr	r0, [pc, #248]	@ (8012d64 <__mdiff+0x124>)
 8012c6a:	f001 fe05 	bl	8014878 <__assert_func>
 8012c6e:	2301      	movs	r3, #1
 8012c70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8012c74:	4610      	mov	r0, r2
 8012c76:	b003      	add	sp, #12
 8012c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c7c:	bfbc      	itt	lt
 8012c7e:	464b      	movlt	r3, r9
 8012c80:	46a1      	movlt	r9, r4
 8012c82:	4630      	mov	r0, r6
 8012c84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8012c88:	bfba      	itte	lt
 8012c8a:	461c      	movlt	r4, r3
 8012c8c:	2501      	movlt	r5, #1
 8012c8e:	2500      	movge	r5, #0
 8012c90:	f7ff fcf6 	bl	8012680 <_Balloc>
 8012c94:	4602      	mov	r2, r0
 8012c96:	b918      	cbnz	r0, 8012ca0 <__mdiff+0x60>
 8012c98:	4b31      	ldr	r3, [pc, #196]	@ (8012d60 <__mdiff+0x120>)
 8012c9a:	f240 2145 	movw	r1, #581	@ 0x245
 8012c9e:	e7e3      	b.n	8012c68 <__mdiff+0x28>
 8012ca0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8012ca4:	6926      	ldr	r6, [r4, #16]
 8012ca6:	60c5      	str	r5, [r0, #12]
 8012ca8:	f109 0310 	add.w	r3, r9, #16
 8012cac:	f109 0514 	add.w	r5, r9, #20
 8012cb0:	f104 0e14 	add.w	lr, r4, #20
 8012cb4:	f100 0b14 	add.w	fp, r0, #20
 8012cb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8012cbc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8012cc0:	9301      	str	r3, [sp, #4]
 8012cc2:	46d9      	mov	r9, fp
 8012cc4:	f04f 0c00 	mov.w	ip, #0
 8012cc8:	9b01      	ldr	r3, [sp, #4]
 8012cca:	f85e 0b04 	ldr.w	r0, [lr], #4
 8012cce:	f853 af04 	ldr.w	sl, [r3, #4]!
 8012cd2:	9301      	str	r3, [sp, #4]
 8012cd4:	fa1f f38a 	uxth.w	r3, sl
 8012cd8:	4619      	mov	r1, r3
 8012cda:	b283      	uxth	r3, r0
 8012cdc:	1acb      	subs	r3, r1, r3
 8012cde:	0c00      	lsrs	r0, r0, #16
 8012ce0:	4463      	add	r3, ip
 8012ce2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8012ce6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8012cea:	b29b      	uxth	r3, r3
 8012cec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8012cf0:	4576      	cmp	r6, lr
 8012cf2:	f849 3b04 	str.w	r3, [r9], #4
 8012cf6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012cfa:	d8e5      	bhi.n	8012cc8 <__mdiff+0x88>
 8012cfc:	1b33      	subs	r3, r6, r4
 8012cfe:	3b15      	subs	r3, #21
 8012d00:	f023 0303 	bic.w	r3, r3, #3
 8012d04:	3415      	adds	r4, #21
 8012d06:	3304      	adds	r3, #4
 8012d08:	42a6      	cmp	r6, r4
 8012d0a:	bf38      	it	cc
 8012d0c:	2304      	movcc	r3, #4
 8012d0e:	441d      	add	r5, r3
 8012d10:	445b      	add	r3, fp
 8012d12:	461e      	mov	r6, r3
 8012d14:	462c      	mov	r4, r5
 8012d16:	4544      	cmp	r4, r8
 8012d18:	d30e      	bcc.n	8012d38 <__mdiff+0xf8>
 8012d1a:	f108 0103 	add.w	r1, r8, #3
 8012d1e:	1b49      	subs	r1, r1, r5
 8012d20:	f021 0103 	bic.w	r1, r1, #3
 8012d24:	3d03      	subs	r5, #3
 8012d26:	45a8      	cmp	r8, r5
 8012d28:	bf38      	it	cc
 8012d2a:	2100      	movcc	r1, #0
 8012d2c:	440b      	add	r3, r1
 8012d2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012d32:	b191      	cbz	r1, 8012d5a <__mdiff+0x11a>
 8012d34:	6117      	str	r7, [r2, #16]
 8012d36:	e79d      	b.n	8012c74 <__mdiff+0x34>
 8012d38:	f854 1b04 	ldr.w	r1, [r4], #4
 8012d3c:	46e6      	mov	lr, ip
 8012d3e:	0c08      	lsrs	r0, r1, #16
 8012d40:	fa1c fc81 	uxtah	ip, ip, r1
 8012d44:	4471      	add	r1, lr
 8012d46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8012d4a:	b289      	uxth	r1, r1
 8012d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8012d50:	f846 1b04 	str.w	r1, [r6], #4
 8012d54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8012d58:	e7dd      	b.n	8012d16 <__mdiff+0xd6>
 8012d5a:	3f01      	subs	r7, #1
 8012d5c:	e7e7      	b.n	8012d2e <__mdiff+0xee>
 8012d5e:	bf00      	nop
 8012d60:	08016efb 	.word	0x08016efb
 8012d64:	08016f0c 	.word	0x08016f0c

08012d68 <__ulp>:
 8012d68:	b082      	sub	sp, #8
 8012d6a:	ed8d 0b00 	vstr	d0, [sp]
 8012d6e:	9a01      	ldr	r2, [sp, #4]
 8012d70:	4b0f      	ldr	r3, [pc, #60]	@ (8012db0 <__ulp+0x48>)
 8012d72:	4013      	ands	r3, r2
 8012d74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	dc08      	bgt.n	8012d8e <__ulp+0x26>
 8012d7c:	425b      	negs	r3, r3
 8012d7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8012d82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8012d86:	da04      	bge.n	8012d92 <__ulp+0x2a>
 8012d88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8012d8c:	4113      	asrs	r3, r2
 8012d8e:	2200      	movs	r2, #0
 8012d90:	e008      	b.n	8012da4 <__ulp+0x3c>
 8012d92:	f1a2 0314 	sub.w	r3, r2, #20
 8012d96:	2b1e      	cmp	r3, #30
 8012d98:	bfda      	itte	le
 8012d9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8012d9e:	40da      	lsrle	r2, r3
 8012da0:	2201      	movgt	r2, #1
 8012da2:	2300      	movs	r3, #0
 8012da4:	4619      	mov	r1, r3
 8012da6:	4610      	mov	r0, r2
 8012da8:	ec41 0b10 	vmov	d0, r0, r1
 8012dac:	b002      	add	sp, #8
 8012dae:	4770      	bx	lr
 8012db0:	7ff00000 	.word	0x7ff00000

08012db4 <__b2d>:
 8012db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012db8:	6906      	ldr	r6, [r0, #16]
 8012dba:	f100 0814 	add.w	r8, r0, #20
 8012dbe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8012dc2:	1f37      	subs	r7, r6, #4
 8012dc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012dc8:	4610      	mov	r0, r2
 8012dca:	f7ff fd4b 	bl	8012864 <__hi0bits>
 8012dce:	f1c0 0320 	rsb	r3, r0, #32
 8012dd2:	280a      	cmp	r0, #10
 8012dd4:	600b      	str	r3, [r1, #0]
 8012dd6:	491b      	ldr	r1, [pc, #108]	@ (8012e44 <__b2d+0x90>)
 8012dd8:	dc15      	bgt.n	8012e06 <__b2d+0x52>
 8012dda:	f1c0 0c0b 	rsb	ip, r0, #11
 8012dde:	fa22 f30c 	lsr.w	r3, r2, ip
 8012de2:	45b8      	cmp	r8, r7
 8012de4:	ea43 0501 	orr.w	r5, r3, r1
 8012de8:	bf34      	ite	cc
 8012dea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012dee:	2300      	movcs	r3, #0
 8012df0:	3015      	adds	r0, #21
 8012df2:	fa02 f000 	lsl.w	r0, r2, r0
 8012df6:	fa23 f30c 	lsr.w	r3, r3, ip
 8012dfa:	4303      	orrs	r3, r0
 8012dfc:	461c      	mov	r4, r3
 8012dfe:	ec45 4b10 	vmov	d0, r4, r5
 8012e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e06:	45b8      	cmp	r8, r7
 8012e08:	bf3a      	itte	cc
 8012e0a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8012e0e:	f1a6 0708 	subcc.w	r7, r6, #8
 8012e12:	2300      	movcs	r3, #0
 8012e14:	380b      	subs	r0, #11
 8012e16:	d012      	beq.n	8012e3e <__b2d+0x8a>
 8012e18:	f1c0 0120 	rsb	r1, r0, #32
 8012e1c:	fa23 f401 	lsr.w	r4, r3, r1
 8012e20:	4082      	lsls	r2, r0
 8012e22:	4322      	orrs	r2, r4
 8012e24:	4547      	cmp	r7, r8
 8012e26:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8012e2a:	bf8c      	ite	hi
 8012e2c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8012e30:	2200      	movls	r2, #0
 8012e32:	4083      	lsls	r3, r0
 8012e34:	40ca      	lsrs	r2, r1
 8012e36:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8012e3a:	4313      	orrs	r3, r2
 8012e3c:	e7de      	b.n	8012dfc <__b2d+0x48>
 8012e3e:	ea42 0501 	orr.w	r5, r2, r1
 8012e42:	e7db      	b.n	8012dfc <__b2d+0x48>
 8012e44:	3ff00000 	.word	0x3ff00000

08012e48 <__d2b>:
 8012e48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012e4c:	460f      	mov	r7, r1
 8012e4e:	2101      	movs	r1, #1
 8012e50:	ec59 8b10 	vmov	r8, r9, d0
 8012e54:	4616      	mov	r6, r2
 8012e56:	f7ff fc13 	bl	8012680 <_Balloc>
 8012e5a:	4604      	mov	r4, r0
 8012e5c:	b930      	cbnz	r0, 8012e6c <__d2b+0x24>
 8012e5e:	4602      	mov	r2, r0
 8012e60:	4b23      	ldr	r3, [pc, #140]	@ (8012ef0 <__d2b+0xa8>)
 8012e62:	4824      	ldr	r0, [pc, #144]	@ (8012ef4 <__d2b+0xac>)
 8012e64:	f240 310f 	movw	r1, #783	@ 0x30f
 8012e68:	f001 fd06 	bl	8014878 <__assert_func>
 8012e6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8012e70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012e74:	b10d      	cbz	r5, 8012e7a <__d2b+0x32>
 8012e76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8012e7a:	9301      	str	r3, [sp, #4]
 8012e7c:	f1b8 0300 	subs.w	r3, r8, #0
 8012e80:	d023      	beq.n	8012eca <__d2b+0x82>
 8012e82:	4668      	mov	r0, sp
 8012e84:	9300      	str	r3, [sp, #0]
 8012e86:	f7ff fd0c 	bl	80128a2 <__lo0bits>
 8012e8a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8012e8e:	b1d0      	cbz	r0, 8012ec6 <__d2b+0x7e>
 8012e90:	f1c0 0320 	rsb	r3, r0, #32
 8012e94:	fa02 f303 	lsl.w	r3, r2, r3
 8012e98:	430b      	orrs	r3, r1
 8012e9a:	40c2      	lsrs	r2, r0
 8012e9c:	6163      	str	r3, [r4, #20]
 8012e9e:	9201      	str	r2, [sp, #4]
 8012ea0:	9b01      	ldr	r3, [sp, #4]
 8012ea2:	61a3      	str	r3, [r4, #24]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	bf0c      	ite	eq
 8012ea8:	2201      	moveq	r2, #1
 8012eaa:	2202      	movne	r2, #2
 8012eac:	6122      	str	r2, [r4, #16]
 8012eae:	b1a5      	cbz	r5, 8012eda <__d2b+0x92>
 8012eb0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8012eb4:	4405      	add	r5, r0
 8012eb6:	603d      	str	r5, [r7, #0]
 8012eb8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8012ebc:	6030      	str	r0, [r6, #0]
 8012ebe:	4620      	mov	r0, r4
 8012ec0:	b003      	add	sp, #12
 8012ec2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ec6:	6161      	str	r1, [r4, #20]
 8012ec8:	e7ea      	b.n	8012ea0 <__d2b+0x58>
 8012eca:	a801      	add	r0, sp, #4
 8012ecc:	f7ff fce9 	bl	80128a2 <__lo0bits>
 8012ed0:	9b01      	ldr	r3, [sp, #4]
 8012ed2:	6163      	str	r3, [r4, #20]
 8012ed4:	3020      	adds	r0, #32
 8012ed6:	2201      	movs	r2, #1
 8012ed8:	e7e8      	b.n	8012eac <__d2b+0x64>
 8012eda:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012ede:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8012ee2:	6038      	str	r0, [r7, #0]
 8012ee4:	6918      	ldr	r0, [r3, #16]
 8012ee6:	f7ff fcbd 	bl	8012864 <__hi0bits>
 8012eea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012eee:	e7e5      	b.n	8012ebc <__d2b+0x74>
 8012ef0:	08016efb 	.word	0x08016efb
 8012ef4:	08016f0c 	.word	0x08016f0c

08012ef8 <__ratio>:
 8012ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012efc:	b085      	sub	sp, #20
 8012efe:	e9cd 1000 	strd	r1, r0, [sp]
 8012f02:	a902      	add	r1, sp, #8
 8012f04:	f7ff ff56 	bl	8012db4 <__b2d>
 8012f08:	9800      	ldr	r0, [sp, #0]
 8012f0a:	a903      	add	r1, sp, #12
 8012f0c:	ec55 4b10 	vmov	r4, r5, d0
 8012f10:	f7ff ff50 	bl	8012db4 <__b2d>
 8012f14:	9b01      	ldr	r3, [sp, #4]
 8012f16:	6919      	ldr	r1, [r3, #16]
 8012f18:	9b00      	ldr	r3, [sp, #0]
 8012f1a:	691b      	ldr	r3, [r3, #16]
 8012f1c:	1ac9      	subs	r1, r1, r3
 8012f1e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8012f22:	1a9b      	subs	r3, r3, r2
 8012f24:	ec5b ab10 	vmov	sl, fp, d0
 8012f28:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	bfce      	itee	gt
 8012f30:	462a      	movgt	r2, r5
 8012f32:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012f36:	465a      	movle	r2, fp
 8012f38:	462f      	mov	r7, r5
 8012f3a:	46d9      	mov	r9, fp
 8012f3c:	bfcc      	ite	gt
 8012f3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012f42:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8012f46:	464b      	mov	r3, r9
 8012f48:	4652      	mov	r2, sl
 8012f4a:	4620      	mov	r0, r4
 8012f4c:	4639      	mov	r1, r7
 8012f4e:	f7ed fca5 	bl	800089c <__aeabi_ddiv>
 8012f52:	ec41 0b10 	vmov	d0, r0, r1
 8012f56:	b005      	add	sp, #20
 8012f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012f5c <__copybits>:
 8012f5c:	3901      	subs	r1, #1
 8012f5e:	b570      	push	{r4, r5, r6, lr}
 8012f60:	1149      	asrs	r1, r1, #5
 8012f62:	6914      	ldr	r4, [r2, #16]
 8012f64:	3101      	adds	r1, #1
 8012f66:	f102 0314 	add.w	r3, r2, #20
 8012f6a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012f6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012f72:	1f05      	subs	r5, r0, #4
 8012f74:	42a3      	cmp	r3, r4
 8012f76:	d30c      	bcc.n	8012f92 <__copybits+0x36>
 8012f78:	1aa3      	subs	r3, r4, r2
 8012f7a:	3b11      	subs	r3, #17
 8012f7c:	f023 0303 	bic.w	r3, r3, #3
 8012f80:	3211      	adds	r2, #17
 8012f82:	42a2      	cmp	r2, r4
 8012f84:	bf88      	it	hi
 8012f86:	2300      	movhi	r3, #0
 8012f88:	4418      	add	r0, r3
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	4288      	cmp	r0, r1
 8012f8e:	d305      	bcc.n	8012f9c <__copybits+0x40>
 8012f90:	bd70      	pop	{r4, r5, r6, pc}
 8012f92:	f853 6b04 	ldr.w	r6, [r3], #4
 8012f96:	f845 6f04 	str.w	r6, [r5, #4]!
 8012f9a:	e7eb      	b.n	8012f74 <__copybits+0x18>
 8012f9c:	f840 3b04 	str.w	r3, [r0], #4
 8012fa0:	e7f4      	b.n	8012f8c <__copybits+0x30>

08012fa2 <__any_on>:
 8012fa2:	f100 0214 	add.w	r2, r0, #20
 8012fa6:	6900      	ldr	r0, [r0, #16]
 8012fa8:	114b      	asrs	r3, r1, #5
 8012faa:	4298      	cmp	r0, r3
 8012fac:	b510      	push	{r4, lr}
 8012fae:	db11      	blt.n	8012fd4 <__any_on+0x32>
 8012fb0:	dd0a      	ble.n	8012fc8 <__any_on+0x26>
 8012fb2:	f011 011f 	ands.w	r1, r1, #31
 8012fb6:	d007      	beq.n	8012fc8 <__any_on+0x26>
 8012fb8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012fbc:	fa24 f001 	lsr.w	r0, r4, r1
 8012fc0:	fa00 f101 	lsl.w	r1, r0, r1
 8012fc4:	428c      	cmp	r4, r1
 8012fc6:	d10b      	bne.n	8012fe0 <__any_on+0x3e>
 8012fc8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012fcc:	4293      	cmp	r3, r2
 8012fce:	d803      	bhi.n	8012fd8 <__any_on+0x36>
 8012fd0:	2000      	movs	r0, #0
 8012fd2:	bd10      	pop	{r4, pc}
 8012fd4:	4603      	mov	r3, r0
 8012fd6:	e7f7      	b.n	8012fc8 <__any_on+0x26>
 8012fd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012fdc:	2900      	cmp	r1, #0
 8012fde:	d0f5      	beq.n	8012fcc <__any_on+0x2a>
 8012fe0:	2001      	movs	r0, #1
 8012fe2:	e7f6      	b.n	8012fd2 <__any_on+0x30>

08012fe4 <sulp>:
 8012fe4:	b570      	push	{r4, r5, r6, lr}
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	460d      	mov	r5, r1
 8012fea:	ec45 4b10 	vmov	d0, r4, r5
 8012fee:	4616      	mov	r6, r2
 8012ff0:	f7ff feba 	bl	8012d68 <__ulp>
 8012ff4:	ec51 0b10 	vmov	r0, r1, d0
 8012ff8:	b17e      	cbz	r6, 801301a <sulp+0x36>
 8012ffa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012ffe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8013002:	2b00      	cmp	r3, #0
 8013004:	dd09      	ble.n	801301a <sulp+0x36>
 8013006:	051b      	lsls	r3, r3, #20
 8013008:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801300c:	2400      	movs	r4, #0
 801300e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8013012:	4622      	mov	r2, r4
 8013014:	462b      	mov	r3, r5
 8013016:	f7ed fb17 	bl	8000648 <__aeabi_dmul>
 801301a:	ec41 0b10 	vmov	d0, r0, r1
 801301e:	bd70      	pop	{r4, r5, r6, pc}

08013020 <_strtod_l>:
 8013020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013024:	b09f      	sub	sp, #124	@ 0x7c
 8013026:	460c      	mov	r4, r1
 8013028:	9217      	str	r2, [sp, #92]	@ 0x5c
 801302a:	2200      	movs	r2, #0
 801302c:	921a      	str	r2, [sp, #104]	@ 0x68
 801302e:	9005      	str	r0, [sp, #20]
 8013030:	f04f 0a00 	mov.w	sl, #0
 8013034:	f04f 0b00 	mov.w	fp, #0
 8013038:	460a      	mov	r2, r1
 801303a:	9219      	str	r2, [sp, #100]	@ 0x64
 801303c:	7811      	ldrb	r1, [r2, #0]
 801303e:	292b      	cmp	r1, #43	@ 0x2b
 8013040:	d04a      	beq.n	80130d8 <_strtod_l+0xb8>
 8013042:	d838      	bhi.n	80130b6 <_strtod_l+0x96>
 8013044:	290d      	cmp	r1, #13
 8013046:	d832      	bhi.n	80130ae <_strtod_l+0x8e>
 8013048:	2908      	cmp	r1, #8
 801304a:	d832      	bhi.n	80130b2 <_strtod_l+0x92>
 801304c:	2900      	cmp	r1, #0
 801304e:	d03b      	beq.n	80130c8 <_strtod_l+0xa8>
 8013050:	2200      	movs	r2, #0
 8013052:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013054:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8013056:	782a      	ldrb	r2, [r5, #0]
 8013058:	2a30      	cmp	r2, #48	@ 0x30
 801305a:	f040 80b3 	bne.w	80131c4 <_strtod_l+0x1a4>
 801305e:	786a      	ldrb	r2, [r5, #1]
 8013060:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013064:	2a58      	cmp	r2, #88	@ 0x58
 8013066:	d16e      	bne.n	8013146 <_strtod_l+0x126>
 8013068:	9302      	str	r3, [sp, #8]
 801306a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801306c:	9301      	str	r3, [sp, #4]
 801306e:	ab1a      	add	r3, sp, #104	@ 0x68
 8013070:	9300      	str	r3, [sp, #0]
 8013072:	4a8e      	ldr	r2, [pc, #568]	@ (80132ac <_strtod_l+0x28c>)
 8013074:	9805      	ldr	r0, [sp, #20]
 8013076:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013078:	a919      	add	r1, sp, #100	@ 0x64
 801307a:	f001 fc97 	bl	80149ac <__gethex>
 801307e:	f010 060f 	ands.w	r6, r0, #15
 8013082:	4604      	mov	r4, r0
 8013084:	d005      	beq.n	8013092 <_strtod_l+0x72>
 8013086:	2e06      	cmp	r6, #6
 8013088:	d128      	bne.n	80130dc <_strtod_l+0xbc>
 801308a:	3501      	adds	r5, #1
 801308c:	2300      	movs	r3, #0
 801308e:	9519      	str	r5, [sp, #100]	@ 0x64
 8013090:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013092:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013094:	2b00      	cmp	r3, #0
 8013096:	f040 858e 	bne.w	8013bb6 <_strtod_l+0xb96>
 801309a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801309c:	b1cb      	cbz	r3, 80130d2 <_strtod_l+0xb2>
 801309e:	4652      	mov	r2, sl
 80130a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80130a4:	ec43 2b10 	vmov	d0, r2, r3
 80130a8:	b01f      	add	sp, #124	@ 0x7c
 80130aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130ae:	2920      	cmp	r1, #32
 80130b0:	d1ce      	bne.n	8013050 <_strtod_l+0x30>
 80130b2:	3201      	adds	r2, #1
 80130b4:	e7c1      	b.n	801303a <_strtod_l+0x1a>
 80130b6:	292d      	cmp	r1, #45	@ 0x2d
 80130b8:	d1ca      	bne.n	8013050 <_strtod_l+0x30>
 80130ba:	2101      	movs	r1, #1
 80130bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80130be:	1c51      	adds	r1, r2, #1
 80130c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80130c2:	7852      	ldrb	r2, [r2, #1]
 80130c4:	2a00      	cmp	r2, #0
 80130c6:	d1c5      	bne.n	8013054 <_strtod_l+0x34>
 80130c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80130ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	f040 8570 	bne.w	8013bb2 <_strtod_l+0xb92>
 80130d2:	4652      	mov	r2, sl
 80130d4:	465b      	mov	r3, fp
 80130d6:	e7e5      	b.n	80130a4 <_strtod_l+0x84>
 80130d8:	2100      	movs	r1, #0
 80130da:	e7ef      	b.n	80130bc <_strtod_l+0x9c>
 80130dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80130de:	b13a      	cbz	r2, 80130f0 <_strtod_l+0xd0>
 80130e0:	2135      	movs	r1, #53	@ 0x35
 80130e2:	a81c      	add	r0, sp, #112	@ 0x70
 80130e4:	f7ff ff3a 	bl	8012f5c <__copybits>
 80130e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80130ea:	9805      	ldr	r0, [sp, #20]
 80130ec:	f7ff fb08 	bl	8012700 <_Bfree>
 80130f0:	3e01      	subs	r6, #1
 80130f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80130f4:	2e04      	cmp	r6, #4
 80130f6:	d806      	bhi.n	8013106 <_strtod_l+0xe6>
 80130f8:	e8df f006 	tbb	[pc, r6]
 80130fc:	201d0314 	.word	0x201d0314
 8013100:	14          	.byte	0x14
 8013101:	00          	.byte	0x00
 8013102:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8013106:	05e1      	lsls	r1, r4, #23
 8013108:	bf48      	it	mi
 801310a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801310e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013112:	0d1b      	lsrs	r3, r3, #20
 8013114:	051b      	lsls	r3, r3, #20
 8013116:	2b00      	cmp	r3, #0
 8013118:	d1bb      	bne.n	8013092 <_strtod_l+0x72>
 801311a:	f7fe fb21 	bl	8011760 <__errno>
 801311e:	2322      	movs	r3, #34	@ 0x22
 8013120:	6003      	str	r3, [r0, #0]
 8013122:	e7b6      	b.n	8013092 <_strtod_l+0x72>
 8013124:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8013128:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801312c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013130:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8013134:	e7e7      	b.n	8013106 <_strtod_l+0xe6>
 8013136:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80132b4 <_strtod_l+0x294>
 801313a:	e7e4      	b.n	8013106 <_strtod_l+0xe6>
 801313c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8013140:	f04f 3aff 	mov.w	sl, #4294967295
 8013144:	e7df      	b.n	8013106 <_strtod_l+0xe6>
 8013146:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013148:	1c5a      	adds	r2, r3, #1
 801314a:	9219      	str	r2, [sp, #100]	@ 0x64
 801314c:	785b      	ldrb	r3, [r3, #1]
 801314e:	2b30      	cmp	r3, #48	@ 0x30
 8013150:	d0f9      	beq.n	8013146 <_strtod_l+0x126>
 8013152:	2b00      	cmp	r3, #0
 8013154:	d09d      	beq.n	8013092 <_strtod_l+0x72>
 8013156:	2301      	movs	r3, #1
 8013158:	9309      	str	r3, [sp, #36]	@ 0x24
 801315a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801315c:	930c      	str	r3, [sp, #48]	@ 0x30
 801315e:	2300      	movs	r3, #0
 8013160:	9308      	str	r3, [sp, #32]
 8013162:	930a      	str	r3, [sp, #40]	@ 0x28
 8013164:	461f      	mov	r7, r3
 8013166:	220a      	movs	r2, #10
 8013168:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801316a:	7805      	ldrb	r5, [r0, #0]
 801316c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013170:	b2d9      	uxtb	r1, r3
 8013172:	2909      	cmp	r1, #9
 8013174:	d928      	bls.n	80131c8 <_strtod_l+0x1a8>
 8013176:	494e      	ldr	r1, [pc, #312]	@ (80132b0 <_strtod_l+0x290>)
 8013178:	2201      	movs	r2, #1
 801317a:	f7fe fa94 	bl	80116a6 <strncmp>
 801317e:	2800      	cmp	r0, #0
 8013180:	d032      	beq.n	80131e8 <_strtod_l+0x1c8>
 8013182:	2000      	movs	r0, #0
 8013184:	462a      	mov	r2, r5
 8013186:	4681      	mov	r9, r0
 8013188:	463d      	mov	r5, r7
 801318a:	4603      	mov	r3, r0
 801318c:	2a65      	cmp	r2, #101	@ 0x65
 801318e:	d001      	beq.n	8013194 <_strtod_l+0x174>
 8013190:	2a45      	cmp	r2, #69	@ 0x45
 8013192:	d114      	bne.n	80131be <_strtod_l+0x19e>
 8013194:	b91d      	cbnz	r5, 801319e <_strtod_l+0x17e>
 8013196:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013198:	4302      	orrs	r2, r0
 801319a:	d095      	beq.n	80130c8 <_strtod_l+0xa8>
 801319c:	2500      	movs	r5, #0
 801319e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80131a0:	1c62      	adds	r2, r4, #1
 80131a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80131a4:	7862      	ldrb	r2, [r4, #1]
 80131a6:	2a2b      	cmp	r2, #43	@ 0x2b
 80131a8:	d077      	beq.n	801329a <_strtod_l+0x27a>
 80131aa:	2a2d      	cmp	r2, #45	@ 0x2d
 80131ac:	d07b      	beq.n	80132a6 <_strtod_l+0x286>
 80131ae:	f04f 0c00 	mov.w	ip, #0
 80131b2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80131b6:	2909      	cmp	r1, #9
 80131b8:	f240 8082 	bls.w	80132c0 <_strtod_l+0x2a0>
 80131bc:	9419      	str	r4, [sp, #100]	@ 0x64
 80131be:	f04f 0800 	mov.w	r8, #0
 80131c2:	e0a2      	b.n	801330a <_strtod_l+0x2ea>
 80131c4:	2300      	movs	r3, #0
 80131c6:	e7c7      	b.n	8013158 <_strtod_l+0x138>
 80131c8:	2f08      	cmp	r7, #8
 80131ca:	bfd5      	itete	le
 80131cc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80131ce:	9908      	ldrgt	r1, [sp, #32]
 80131d0:	fb02 3301 	mlale	r3, r2, r1, r3
 80131d4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80131d8:	f100 0001 	add.w	r0, r0, #1
 80131dc:	bfd4      	ite	le
 80131de:	930a      	strle	r3, [sp, #40]	@ 0x28
 80131e0:	9308      	strgt	r3, [sp, #32]
 80131e2:	3701      	adds	r7, #1
 80131e4:	9019      	str	r0, [sp, #100]	@ 0x64
 80131e6:	e7bf      	b.n	8013168 <_strtod_l+0x148>
 80131e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80131ea:	1c5a      	adds	r2, r3, #1
 80131ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80131ee:	785a      	ldrb	r2, [r3, #1]
 80131f0:	b37f      	cbz	r7, 8013252 <_strtod_l+0x232>
 80131f2:	4681      	mov	r9, r0
 80131f4:	463d      	mov	r5, r7
 80131f6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80131fa:	2b09      	cmp	r3, #9
 80131fc:	d912      	bls.n	8013224 <_strtod_l+0x204>
 80131fe:	2301      	movs	r3, #1
 8013200:	e7c4      	b.n	801318c <_strtod_l+0x16c>
 8013202:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013204:	1c5a      	adds	r2, r3, #1
 8013206:	9219      	str	r2, [sp, #100]	@ 0x64
 8013208:	785a      	ldrb	r2, [r3, #1]
 801320a:	3001      	adds	r0, #1
 801320c:	2a30      	cmp	r2, #48	@ 0x30
 801320e:	d0f8      	beq.n	8013202 <_strtod_l+0x1e2>
 8013210:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013214:	2b08      	cmp	r3, #8
 8013216:	f200 84d3 	bhi.w	8013bc0 <_strtod_l+0xba0>
 801321a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801321c:	930c      	str	r3, [sp, #48]	@ 0x30
 801321e:	4681      	mov	r9, r0
 8013220:	2000      	movs	r0, #0
 8013222:	4605      	mov	r5, r0
 8013224:	3a30      	subs	r2, #48	@ 0x30
 8013226:	f100 0301 	add.w	r3, r0, #1
 801322a:	d02a      	beq.n	8013282 <_strtod_l+0x262>
 801322c:	4499      	add	r9, r3
 801322e:	eb00 0c05 	add.w	ip, r0, r5
 8013232:	462b      	mov	r3, r5
 8013234:	210a      	movs	r1, #10
 8013236:	4563      	cmp	r3, ip
 8013238:	d10d      	bne.n	8013256 <_strtod_l+0x236>
 801323a:	1c69      	adds	r1, r5, #1
 801323c:	4401      	add	r1, r0
 801323e:	4428      	add	r0, r5
 8013240:	2808      	cmp	r0, #8
 8013242:	dc16      	bgt.n	8013272 <_strtod_l+0x252>
 8013244:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013246:	230a      	movs	r3, #10
 8013248:	fb03 2300 	mla	r3, r3, r0, r2
 801324c:	930a      	str	r3, [sp, #40]	@ 0x28
 801324e:	2300      	movs	r3, #0
 8013250:	e018      	b.n	8013284 <_strtod_l+0x264>
 8013252:	4638      	mov	r0, r7
 8013254:	e7da      	b.n	801320c <_strtod_l+0x1ec>
 8013256:	2b08      	cmp	r3, #8
 8013258:	f103 0301 	add.w	r3, r3, #1
 801325c:	dc03      	bgt.n	8013266 <_strtod_l+0x246>
 801325e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013260:	434e      	muls	r6, r1
 8013262:	960a      	str	r6, [sp, #40]	@ 0x28
 8013264:	e7e7      	b.n	8013236 <_strtod_l+0x216>
 8013266:	2b10      	cmp	r3, #16
 8013268:	bfde      	ittt	le
 801326a:	9e08      	ldrle	r6, [sp, #32]
 801326c:	434e      	mulle	r6, r1
 801326e:	9608      	strle	r6, [sp, #32]
 8013270:	e7e1      	b.n	8013236 <_strtod_l+0x216>
 8013272:	280f      	cmp	r0, #15
 8013274:	dceb      	bgt.n	801324e <_strtod_l+0x22e>
 8013276:	9808      	ldr	r0, [sp, #32]
 8013278:	230a      	movs	r3, #10
 801327a:	fb03 2300 	mla	r3, r3, r0, r2
 801327e:	9308      	str	r3, [sp, #32]
 8013280:	e7e5      	b.n	801324e <_strtod_l+0x22e>
 8013282:	4629      	mov	r1, r5
 8013284:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013286:	1c50      	adds	r0, r2, #1
 8013288:	9019      	str	r0, [sp, #100]	@ 0x64
 801328a:	7852      	ldrb	r2, [r2, #1]
 801328c:	4618      	mov	r0, r3
 801328e:	460d      	mov	r5, r1
 8013290:	e7b1      	b.n	80131f6 <_strtod_l+0x1d6>
 8013292:	f04f 0900 	mov.w	r9, #0
 8013296:	2301      	movs	r3, #1
 8013298:	e77d      	b.n	8013196 <_strtod_l+0x176>
 801329a:	f04f 0c00 	mov.w	ip, #0
 801329e:	1ca2      	adds	r2, r4, #2
 80132a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80132a2:	78a2      	ldrb	r2, [r4, #2]
 80132a4:	e785      	b.n	80131b2 <_strtod_l+0x192>
 80132a6:	f04f 0c01 	mov.w	ip, #1
 80132aa:	e7f8      	b.n	801329e <_strtod_l+0x27e>
 80132ac:	08017080 	.word	0x08017080
 80132b0:	08017068 	.word	0x08017068
 80132b4:	7ff00000 	.word	0x7ff00000
 80132b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80132ba:	1c51      	adds	r1, r2, #1
 80132bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80132be:	7852      	ldrb	r2, [r2, #1]
 80132c0:	2a30      	cmp	r2, #48	@ 0x30
 80132c2:	d0f9      	beq.n	80132b8 <_strtod_l+0x298>
 80132c4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80132c8:	2908      	cmp	r1, #8
 80132ca:	f63f af78 	bhi.w	80131be <_strtod_l+0x19e>
 80132ce:	3a30      	subs	r2, #48	@ 0x30
 80132d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80132d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80132d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80132d6:	f04f 080a 	mov.w	r8, #10
 80132da:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80132dc:	1c56      	adds	r6, r2, #1
 80132de:	9619      	str	r6, [sp, #100]	@ 0x64
 80132e0:	7852      	ldrb	r2, [r2, #1]
 80132e2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80132e6:	f1be 0f09 	cmp.w	lr, #9
 80132ea:	d939      	bls.n	8013360 <_strtod_l+0x340>
 80132ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80132ee:	1a76      	subs	r6, r6, r1
 80132f0:	2e08      	cmp	r6, #8
 80132f2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80132f6:	dc03      	bgt.n	8013300 <_strtod_l+0x2e0>
 80132f8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80132fa:	4588      	cmp	r8, r1
 80132fc:	bfa8      	it	ge
 80132fe:	4688      	movge	r8, r1
 8013300:	f1bc 0f00 	cmp.w	ip, #0
 8013304:	d001      	beq.n	801330a <_strtod_l+0x2ea>
 8013306:	f1c8 0800 	rsb	r8, r8, #0
 801330a:	2d00      	cmp	r5, #0
 801330c:	d14e      	bne.n	80133ac <_strtod_l+0x38c>
 801330e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013310:	4308      	orrs	r0, r1
 8013312:	f47f aebe 	bne.w	8013092 <_strtod_l+0x72>
 8013316:	2b00      	cmp	r3, #0
 8013318:	f47f aed6 	bne.w	80130c8 <_strtod_l+0xa8>
 801331c:	2a69      	cmp	r2, #105	@ 0x69
 801331e:	d028      	beq.n	8013372 <_strtod_l+0x352>
 8013320:	dc25      	bgt.n	801336e <_strtod_l+0x34e>
 8013322:	2a49      	cmp	r2, #73	@ 0x49
 8013324:	d025      	beq.n	8013372 <_strtod_l+0x352>
 8013326:	2a4e      	cmp	r2, #78	@ 0x4e
 8013328:	f47f aece 	bne.w	80130c8 <_strtod_l+0xa8>
 801332c:	499b      	ldr	r1, [pc, #620]	@ (801359c <_strtod_l+0x57c>)
 801332e:	a819      	add	r0, sp, #100	@ 0x64
 8013330:	f001 fd5e 	bl	8014df0 <__match>
 8013334:	2800      	cmp	r0, #0
 8013336:	f43f aec7 	beq.w	80130c8 <_strtod_l+0xa8>
 801333a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801333c:	781b      	ldrb	r3, [r3, #0]
 801333e:	2b28      	cmp	r3, #40	@ 0x28
 8013340:	d12e      	bne.n	80133a0 <_strtod_l+0x380>
 8013342:	4997      	ldr	r1, [pc, #604]	@ (80135a0 <_strtod_l+0x580>)
 8013344:	aa1c      	add	r2, sp, #112	@ 0x70
 8013346:	a819      	add	r0, sp, #100	@ 0x64
 8013348:	f001 fd66 	bl	8014e18 <__hexnan>
 801334c:	2805      	cmp	r0, #5
 801334e:	d127      	bne.n	80133a0 <_strtod_l+0x380>
 8013350:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013352:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013356:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801335a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801335e:	e698      	b.n	8013092 <_strtod_l+0x72>
 8013360:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013362:	fb08 2101 	mla	r1, r8, r1, r2
 8013366:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801336a:	920e      	str	r2, [sp, #56]	@ 0x38
 801336c:	e7b5      	b.n	80132da <_strtod_l+0x2ba>
 801336e:	2a6e      	cmp	r2, #110	@ 0x6e
 8013370:	e7da      	b.n	8013328 <_strtod_l+0x308>
 8013372:	498c      	ldr	r1, [pc, #560]	@ (80135a4 <_strtod_l+0x584>)
 8013374:	a819      	add	r0, sp, #100	@ 0x64
 8013376:	f001 fd3b 	bl	8014df0 <__match>
 801337a:	2800      	cmp	r0, #0
 801337c:	f43f aea4 	beq.w	80130c8 <_strtod_l+0xa8>
 8013380:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013382:	4989      	ldr	r1, [pc, #548]	@ (80135a8 <_strtod_l+0x588>)
 8013384:	3b01      	subs	r3, #1
 8013386:	a819      	add	r0, sp, #100	@ 0x64
 8013388:	9319      	str	r3, [sp, #100]	@ 0x64
 801338a:	f001 fd31 	bl	8014df0 <__match>
 801338e:	b910      	cbnz	r0, 8013396 <_strtod_l+0x376>
 8013390:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013392:	3301      	adds	r3, #1
 8013394:	9319      	str	r3, [sp, #100]	@ 0x64
 8013396:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80135b8 <_strtod_l+0x598>
 801339a:	f04f 0a00 	mov.w	sl, #0
 801339e:	e678      	b.n	8013092 <_strtod_l+0x72>
 80133a0:	4882      	ldr	r0, [pc, #520]	@ (80135ac <_strtod_l+0x58c>)
 80133a2:	f001 fa61 	bl	8014868 <nan>
 80133a6:	ec5b ab10 	vmov	sl, fp, d0
 80133aa:	e672      	b.n	8013092 <_strtod_l+0x72>
 80133ac:	eba8 0309 	sub.w	r3, r8, r9
 80133b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80133b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80133b4:	2f00      	cmp	r7, #0
 80133b6:	bf08      	it	eq
 80133b8:	462f      	moveq	r7, r5
 80133ba:	2d10      	cmp	r5, #16
 80133bc:	462c      	mov	r4, r5
 80133be:	bfa8      	it	ge
 80133c0:	2410      	movge	r4, #16
 80133c2:	f7ed f8c7 	bl	8000554 <__aeabi_ui2d>
 80133c6:	2d09      	cmp	r5, #9
 80133c8:	4682      	mov	sl, r0
 80133ca:	468b      	mov	fp, r1
 80133cc:	dc13      	bgt.n	80133f6 <_strtod_l+0x3d6>
 80133ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	f43f ae5e 	beq.w	8013092 <_strtod_l+0x72>
 80133d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133d8:	dd78      	ble.n	80134cc <_strtod_l+0x4ac>
 80133da:	2b16      	cmp	r3, #22
 80133dc:	dc5f      	bgt.n	801349e <_strtod_l+0x47e>
 80133de:	4974      	ldr	r1, [pc, #464]	@ (80135b0 <_strtod_l+0x590>)
 80133e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80133e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133e8:	4652      	mov	r2, sl
 80133ea:	465b      	mov	r3, fp
 80133ec:	f7ed f92c 	bl	8000648 <__aeabi_dmul>
 80133f0:	4682      	mov	sl, r0
 80133f2:	468b      	mov	fp, r1
 80133f4:	e64d      	b.n	8013092 <_strtod_l+0x72>
 80133f6:	4b6e      	ldr	r3, [pc, #440]	@ (80135b0 <_strtod_l+0x590>)
 80133f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80133fc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013400:	f7ed f922 	bl	8000648 <__aeabi_dmul>
 8013404:	4682      	mov	sl, r0
 8013406:	9808      	ldr	r0, [sp, #32]
 8013408:	468b      	mov	fp, r1
 801340a:	f7ed f8a3 	bl	8000554 <__aeabi_ui2d>
 801340e:	4602      	mov	r2, r0
 8013410:	460b      	mov	r3, r1
 8013412:	4650      	mov	r0, sl
 8013414:	4659      	mov	r1, fp
 8013416:	f7ec ff61 	bl	80002dc <__adddf3>
 801341a:	2d0f      	cmp	r5, #15
 801341c:	4682      	mov	sl, r0
 801341e:	468b      	mov	fp, r1
 8013420:	ddd5      	ble.n	80133ce <_strtod_l+0x3ae>
 8013422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013424:	1b2c      	subs	r4, r5, r4
 8013426:	441c      	add	r4, r3
 8013428:	2c00      	cmp	r4, #0
 801342a:	f340 8096 	ble.w	801355a <_strtod_l+0x53a>
 801342e:	f014 030f 	ands.w	r3, r4, #15
 8013432:	d00a      	beq.n	801344a <_strtod_l+0x42a>
 8013434:	495e      	ldr	r1, [pc, #376]	@ (80135b0 <_strtod_l+0x590>)
 8013436:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801343a:	4652      	mov	r2, sl
 801343c:	465b      	mov	r3, fp
 801343e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013442:	f7ed f901 	bl	8000648 <__aeabi_dmul>
 8013446:	4682      	mov	sl, r0
 8013448:	468b      	mov	fp, r1
 801344a:	f034 040f 	bics.w	r4, r4, #15
 801344e:	d073      	beq.n	8013538 <_strtod_l+0x518>
 8013450:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013454:	dd48      	ble.n	80134e8 <_strtod_l+0x4c8>
 8013456:	2400      	movs	r4, #0
 8013458:	46a0      	mov	r8, r4
 801345a:	940a      	str	r4, [sp, #40]	@ 0x28
 801345c:	46a1      	mov	r9, r4
 801345e:	9a05      	ldr	r2, [sp, #20]
 8013460:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80135b8 <_strtod_l+0x598>
 8013464:	2322      	movs	r3, #34	@ 0x22
 8013466:	6013      	str	r3, [r2, #0]
 8013468:	f04f 0a00 	mov.w	sl, #0
 801346c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801346e:	2b00      	cmp	r3, #0
 8013470:	f43f ae0f 	beq.w	8013092 <_strtod_l+0x72>
 8013474:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013476:	9805      	ldr	r0, [sp, #20]
 8013478:	f7ff f942 	bl	8012700 <_Bfree>
 801347c:	9805      	ldr	r0, [sp, #20]
 801347e:	4649      	mov	r1, r9
 8013480:	f7ff f93e 	bl	8012700 <_Bfree>
 8013484:	9805      	ldr	r0, [sp, #20]
 8013486:	4641      	mov	r1, r8
 8013488:	f7ff f93a 	bl	8012700 <_Bfree>
 801348c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801348e:	9805      	ldr	r0, [sp, #20]
 8013490:	f7ff f936 	bl	8012700 <_Bfree>
 8013494:	9805      	ldr	r0, [sp, #20]
 8013496:	4621      	mov	r1, r4
 8013498:	f7ff f932 	bl	8012700 <_Bfree>
 801349c:	e5f9      	b.n	8013092 <_strtod_l+0x72>
 801349e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80134a0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80134a4:	4293      	cmp	r3, r2
 80134a6:	dbbc      	blt.n	8013422 <_strtod_l+0x402>
 80134a8:	4c41      	ldr	r4, [pc, #260]	@ (80135b0 <_strtod_l+0x590>)
 80134aa:	f1c5 050f 	rsb	r5, r5, #15
 80134ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80134b2:	4652      	mov	r2, sl
 80134b4:	465b      	mov	r3, fp
 80134b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134ba:	f7ed f8c5 	bl	8000648 <__aeabi_dmul>
 80134be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134c0:	1b5d      	subs	r5, r3, r5
 80134c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80134c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80134ca:	e78f      	b.n	80133ec <_strtod_l+0x3cc>
 80134cc:	3316      	adds	r3, #22
 80134ce:	dba8      	blt.n	8013422 <_strtod_l+0x402>
 80134d0:	4b37      	ldr	r3, [pc, #220]	@ (80135b0 <_strtod_l+0x590>)
 80134d2:	eba9 0808 	sub.w	r8, r9, r8
 80134d6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80134da:	e9d8 2300 	ldrd	r2, r3, [r8]
 80134de:	4650      	mov	r0, sl
 80134e0:	4659      	mov	r1, fp
 80134e2:	f7ed f9db 	bl	800089c <__aeabi_ddiv>
 80134e6:	e783      	b.n	80133f0 <_strtod_l+0x3d0>
 80134e8:	4b32      	ldr	r3, [pc, #200]	@ (80135b4 <_strtod_l+0x594>)
 80134ea:	9308      	str	r3, [sp, #32]
 80134ec:	2300      	movs	r3, #0
 80134ee:	1124      	asrs	r4, r4, #4
 80134f0:	4650      	mov	r0, sl
 80134f2:	4659      	mov	r1, fp
 80134f4:	461e      	mov	r6, r3
 80134f6:	2c01      	cmp	r4, #1
 80134f8:	dc21      	bgt.n	801353e <_strtod_l+0x51e>
 80134fa:	b10b      	cbz	r3, 8013500 <_strtod_l+0x4e0>
 80134fc:	4682      	mov	sl, r0
 80134fe:	468b      	mov	fp, r1
 8013500:	492c      	ldr	r1, [pc, #176]	@ (80135b4 <_strtod_l+0x594>)
 8013502:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013506:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801350a:	4652      	mov	r2, sl
 801350c:	465b      	mov	r3, fp
 801350e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013512:	f7ed f899 	bl	8000648 <__aeabi_dmul>
 8013516:	4b28      	ldr	r3, [pc, #160]	@ (80135b8 <_strtod_l+0x598>)
 8013518:	460a      	mov	r2, r1
 801351a:	400b      	ands	r3, r1
 801351c:	4927      	ldr	r1, [pc, #156]	@ (80135bc <_strtod_l+0x59c>)
 801351e:	428b      	cmp	r3, r1
 8013520:	4682      	mov	sl, r0
 8013522:	d898      	bhi.n	8013456 <_strtod_l+0x436>
 8013524:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013528:	428b      	cmp	r3, r1
 801352a:	bf86      	itte	hi
 801352c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80135c0 <_strtod_l+0x5a0>
 8013530:	f04f 3aff 	movhi.w	sl, #4294967295
 8013534:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013538:	2300      	movs	r3, #0
 801353a:	9308      	str	r3, [sp, #32]
 801353c:	e07a      	b.n	8013634 <_strtod_l+0x614>
 801353e:	07e2      	lsls	r2, r4, #31
 8013540:	d505      	bpl.n	801354e <_strtod_l+0x52e>
 8013542:	9b08      	ldr	r3, [sp, #32]
 8013544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013548:	f7ed f87e 	bl	8000648 <__aeabi_dmul>
 801354c:	2301      	movs	r3, #1
 801354e:	9a08      	ldr	r2, [sp, #32]
 8013550:	3208      	adds	r2, #8
 8013552:	3601      	adds	r6, #1
 8013554:	1064      	asrs	r4, r4, #1
 8013556:	9208      	str	r2, [sp, #32]
 8013558:	e7cd      	b.n	80134f6 <_strtod_l+0x4d6>
 801355a:	d0ed      	beq.n	8013538 <_strtod_l+0x518>
 801355c:	4264      	negs	r4, r4
 801355e:	f014 020f 	ands.w	r2, r4, #15
 8013562:	d00a      	beq.n	801357a <_strtod_l+0x55a>
 8013564:	4b12      	ldr	r3, [pc, #72]	@ (80135b0 <_strtod_l+0x590>)
 8013566:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801356a:	4650      	mov	r0, sl
 801356c:	4659      	mov	r1, fp
 801356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013572:	f7ed f993 	bl	800089c <__aeabi_ddiv>
 8013576:	4682      	mov	sl, r0
 8013578:	468b      	mov	fp, r1
 801357a:	1124      	asrs	r4, r4, #4
 801357c:	d0dc      	beq.n	8013538 <_strtod_l+0x518>
 801357e:	2c1f      	cmp	r4, #31
 8013580:	dd20      	ble.n	80135c4 <_strtod_l+0x5a4>
 8013582:	2400      	movs	r4, #0
 8013584:	46a0      	mov	r8, r4
 8013586:	940a      	str	r4, [sp, #40]	@ 0x28
 8013588:	46a1      	mov	r9, r4
 801358a:	9a05      	ldr	r2, [sp, #20]
 801358c:	2322      	movs	r3, #34	@ 0x22
 801358e:	f04f 0a00 	mov.w	sl, #0
 8013592:	f04f 0b00 	mov.w	fp, #0
 8013596:	6013      	str	r3, [r2, #0]
 8013598:	e768      	b.n	801346c <_strtod_l+0x44c>
 801359a:	bf00      	nop
 801359c:	08016e55 	.word	0x08016e55
 80135a0:	0801706c 	.word	0x0801706c
 80135a4:	08016e4d 	.word	0x08016e4d
 80135a8:	08016e82 	.word	0x08016e82
 80135ac:	08017230 	.word	0x08017230
 80135b0:	08016fa0 	.word	0x08016fa0
 80135b4:	08016f78 	.word	0x08016f78
 80135b8:	7ff00000 	.word	0x7ff00000
 80135bc:	7ca00000 	.word	0x7ca00000
 80135c0:	7fefffff 	.word	0x7fefffff
 80135c4:	f014 0310 	ands.w	r3, r4, #16
 80135c8:	bf18      	it	ne
 80135ca:	236a      	movne	r3, #106	@ 0x6a
 80135cc:	4ea9      	ldr	r6, [pc, #676]	@ (8013874 <_strtod_l+0x854>)
 80135ce:	9308      	str	r3, [sp, #32]
 80135d0:	4650      	mov	r0, sl
 80135d2:	4659      	mov	r1, fp
 80135d4:	2300      	movs	r3, #0
 80135d6:	07e2      	lsls	r2, r4, #31
 80135d8:	d504      	bpl.n	80135e4 <_strtod_l+0x5c4>
 80135da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80135de:	f7ed f833 	bl	8000648 <__aeabi_dmul>
 80135e2:	2301      	movs	r3, #1
 80135e4:	1064      	asrs	r4, r4, #1
 80135e6:	f106 0608 	add.w	r6, r6, #8
 80135ea:	d1f4      	bne.n	80135d6 <_strtod_l+0x5b6>
 80135ec:	b10b      	cbz	r3, 80135f2 <_strtod_l+0x5d2>
 80135ee:	4682      	mov	sl, r0
 80135f0:	468b      	mov	fp, r1
 80135f2:	9b08      	ldr	r3, [sp, #32]
 80135f4:	b1b3      	cbz	r3, 8013624 <_strtod_l+0x604>
 80135f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80135fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80135fe:	2b00      	cmp	r3, #0
 8013600:	4659      	mov	r1, fp
 8013602:	dd0f      	ble.n	8013624 <_strtod_l+0x604>
 8013604:	2b1f      	cmp	r3, #31
 8013606:	dd55      	ble.n	80136b4 <_strtod_l+0x694>
 8013608:	2b34      	cmp	r3, #52	@ 0x34
 801360a:	bfde      	ittt	le
 801360c:	f04f 33ff 	movle.w	r3, #4294967295
 8013610:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013614:	4093      	lslle	r3, r2
 8013616:	f04f 0a00 	mov.w	sl, #0
 801361a:	bfcc      	ite	gt
 801361c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013620:	ea03 0b01 	andle.w	fp, r3, r1
 8013624:	2200      	movs	r2, #0
 8013626:	2300      	movs	r3, #0
 8013628:	4650      	mov	r0, sl
 801362a:	4659      	mov	r1, fp
 801362c:	f7ed fa74 	bl	8000b18 <__aeabi_dcmpeq>
 8013630:	2800      	cmp	r0, #0
 8013632:	d1a6      	bne.n	8013582 <_strtod_l+0x562>
 8013634:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013636:	9300      	str	r3, [sp, #0]
 8013638:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801363a:	9805      	ldr	r0, [sp, #20]
 801363c:	462b      	mov	r3, r5
 801363e:	463a      	mov	r2, r7
 8013640:	f7ff f8c6 	bl	80127d0 <__s2b>
 8013644:	900a      	str	r0, [sp, #40]	@ 0x28
 8013646:	2800      	cmp	r0, #0
 8013648:	f43f af05 	beq.w	8013456 <_strtod_l+0x436>
 801364c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801364e:	2a00      	cmp	r2, #0
 8013650:	eba9 0308 	sub.w	r3, r9, r8
 8013654:	bfa8      	it	ge
 8013656:	2300      	movge	r3, #0
 8013658:	9312      	str	r3, [sp, #72]	@ 0x48
 801365a:	2400      	movs	r4, #0
 801365c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013660:	9316      	str	r3, [sp, #88]	@ 0x58
 8013662:	46a0      	mov	r8, r4
 8013664:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013666:	9805      	ldr	r0, [sp, #20]
 8013668:	6859      	ldr	r1, [r3, #4]
 801366a:	f7ff f809 	bl	8012680 <_Balloc>
 801366e:	4681      	mov	r9, r0
 8013670:	2800      	cmp	r0, #0
 8013672:	f43f aef4 	beq.w	801345e <_strtod_l+0x43e>
 8013676:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013678:	691a      	ldr	r2, [r3, #16]
 801367a:	3202      	adds	r2, #2
 801367c:	f103 010c 	add.w	r1, r3, #12
 8013680:	0092      	lsls	r2, r2, #2
 8013682:	300c      	adds	r0, #12
 8013684:	f7fe f899 	bl	80117ba <memcpy>
 8013688:	ec4b ab10 	vmov	d0, sl, fp
 801368c:	9805      	ldr	r0, [sp, #20]
 801368e:	aa1c      	add	r2, sp, #112	@ 0x70
 8013690:	a91b      	add	r1, sp, #108	@ 0x6c
 8013692:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013696:	f7ff fbd7 	bl	8012e48 <__d2b>
 801369a:	901a      	str	r0, [sp, #104]	@ 0x68
 801369c:	2800      	cmp	r0, #0
 801369e:	f43f aede 	beq.w	801345e <_strtod_l+0x43e>
 80136a2:	9805      	ldr	r0, [sp, #20]
 80136a4:	2101      	movs	r1, #1
 80136a6:	f7ff f929 	bl	80128fc <__i2b>
 80136aa:	4680      	mov	r8, r0
 80136ac:	b948      	cbnz	r0, 80136c2 <_strtod_l+0x6a2>
 80136ae:	f04f 0800 	mov.w	r8, #0
 80136b2:	e6d4      	b.n	801345e <_strtod_l+0x43e>
 80136b4:	f04f 32ff 	mov.w	r2, #4294967295
 80136b8:	fa02 f303 	lsl.w	r3, r2, r3
 80136bc:	ea03 0a0a 	and.w	sl, r3, sl
 80136c0:	e7b0      	b.n	8013624 <_strtod_l+0x604>
 80136c2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80136c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80136c6:	2d00      	cmp	r5, #0
 80136c8:	bfab      	itete	ge
 80136ca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80136cc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80136ce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80136d0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80136d2:	bfac      	ite	ge
 80136d4:	18ef      	addge	r7, r5, r3
 80136d6:	1b5e      	sublt	r6, r3, r5
 80136d8:	9b08      	ldr	r3, [sp, #32]
 80136da:	1aed      	subs	r5, r5, r3
 80136dc:	4415      	add	r5, r2
 80136de:	4b66      	ldr	r3, [pc, #408]	@ (8013878 <_strtod_l+0x858>)
 80136e0:	3d01      	subs	r5, #1
 80136e2:	429d      	cmp	r5, r3
 80136e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80136e8:	da50      	bge.n	801378c <_strtod_l+0x76c>
 80136ea:	1b5b      	subs	r3, r3, r5
 80136ec:	2b1f      	cmp	r3, #31
 80136ee:	eba2 0203 	sub.w	r2, r2, r3
 80136f2:	f04f 0101 	mov.w	r1, #1
 80136f6:	dc3d      	bgt.n	8013774 <_strtod_l+0x754>
 80136f8:	fa01 f303 	lsl.w	r3, r1, r3
 80136fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80136fe:	2300      	movs	r3, #0
 8013700:	9310      	str	r3, [sp, #64]	@ 0x40
 8013702:	18bd      	adds	r5, r7, r2
 8013704:	9b08      	ldr	r3, [sp, #32]
 8013706:	42af      	cmp	r7, r5
 8013708:	4416      	add	r6, r2
 801370a:	441e      	add	r6, r3
 801370c:	463b      	mov	r3, r7
 801370e:	bfa8      	it	ge
 8013710:	462b      	movge	r3, r5
 8013712:	42b3      	cmp	r3, r6
 8013714:	bfa8      	it	ge
 8013716:	4633      	movge	r3, r6
 8013718:	2b00      	cmp	r3, #0
 801371a:	bfc2      	ittt	gt
 801371c:	1aed      	subgt	r5, r5, r3
 801371e:	1af6      	subgt	r6, r6, r3
 8013720:	1aff      	subgt	r7, r7, r3
 8013722:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013724:	2b00      	cmp	r3, #0
 8013726:	dd16      	ble.n	8013756 <_strtod_l+0x736>
 8013728:	4641      	mov	r1, r8
 801372a:	9805      	ldr	r0, [sp, #20]
 801372c:	461a      	mov	r2, r3
 801372e:	f7ff f9a5 	bl	8012a7c <__pow5mult>
 8013732:	4680      	mov	r8, r0
 8013734:	2800      	cmp	r0, #0
 8013736:	d0ba      	beq.n	80136ae <_strtod_l+0x68e>
 8013738:	4601      	mov	r1, r0
 801373a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801373c:	9805      	ldr	r0, [sp, #20]
 801373e:	f7ff f8f3 	bl	8012928 <__multiply>
 8013742:	900e      	str	r0, [sp, #56]	@ 0x38
 8013744:	2800      	cmp	r0, #0
 8013746:	f43f ae8a 	beq.w	801345e <_strtod_l+0x43e>
 801374a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801374c:	9805      	ldr	r0, [sp, #20]
 801374e:	f7fe ffd7 	bl	8012700 <_Bfree>
 8013752:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013754:	931a      	str	r3, [sp, #104]	@ 0x68
 8013756:	2d00      	cmp	r5, #0
 8013758:	dc1d      	bgt.n	8013796 <_strtod_l+0x776>
 801375a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801375c:	2b00      	cmp	r3, #0
 801375e:	dd23      	ble.n	80137a8 <_strtod_l+0x788>
 8013760:	4649      	mov	r1, r9
 8013762:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013764:	9805      	ldr	r0, [sp, #20]
 8013766:	f7ff f989 	bl	8012a7c <__pow5mult>
 801376a:	4681      	mov	r9, r0
 801376c:	b9e0      	cbnz	r0, 80137a8 <_strtod_l+0x788>
 801376e:	f04f 0900 	mov.w	r9, #0
 8013772:	e674      	b.n	801345e <_strtod_l+0x43e>
 8013774:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013778:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801377c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013780:	35e2      	adds	r5, #226	@ 0xe2
 8013782:	fa01 f305 	lsl.w	r3, r1, r5
 8013786:	9310      	str	r3, [sp, #64]	@ 0x40
 8013788:	9113      	str	r1, [sp, #76]	@ 0x4c
 801378a:	e7ba      	b.n	8013702 <_strtod_l+0x6e2>
 801378c:	2300      	movs	r3, #0
 801378e:	9310      	str	r3, [sp, #64]	@ 0x40
 8013790:	2301      	movs	r3, #1
 8013792:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013794:	e7b5      	b.n	8013702 <_strtod_l+0x6e2>
 8013796:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013798:	9805      	ldr	r0, [sp, #20]
 801379a:	462a      	mov	r2, r5
 801379c:	f7ff f9c8 	bl	8012b30 <__lshift>
 80137a0:	901a      	str	r0, [sp, #104]	@ 0x68
 80137a2:	2800      	cmp	r0, #0
 80137a4:	d1d9      	bne.n	801375a <_strtod_l+0x73a>
 80137a6:	e65a      	b.n	801345e <_strtod_l+0x43e>
 80137a8:	2e00      	cmp	r6, #0
 80137aa:	dd07      	ble.n	80137bc <_strtod_l+0x79c>
 80137ac:	4649      	mov	r1, r9
 80137ae:	9805      	ldr	r0, [sp, #20]
 80137b0:	4632      	mov	r2, r6
 80137b2:	f7ff f9bd 	bl	8012b30 <__lshift>
 80137b6:	4681      	mov	r9, r0
 80137b8:	2800      	cmp	r0, #0
 80137ba:	d0d8      	beq.n	801376e <_strtod_l+0x74e>
 80137bc:	2f00      	cmp	r7, #0
 80137be:	dd08      	ble.n	80137d2 <_strtod_l+0x7b2>
 80137c0:	4641      	mov	r1, r8
 80137c2:	9805      	ldr	r0, [sp, #20]
 80137c4:	463a      	mov	r2, r7
 80137c6:	f7ff f9b3 	bl	8012b30 <__lshift>
 80137ca:	4680      	mov	r8, r0
 80137cc:	2800      	cmp	r0, #0
 80137ce:	f43f ae46 	beq.w	801345e <_strtod_l+0x43e>
 80137d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80137d4:	9805      	ldr	r0, [sp, #20]
 80137d6:	464a      	mov	r2, r9
 80137d8:	f7ff fa32 	bl	8012c40 <__mdiff>
 80137dc:	4604      	mov	r4, r0
 80137de:	2800      	cmp	r0, #0
 80137e0:	f43f ae3d 	beq.w	801345e <_strtod_l+0x43e>
 80137e4:	68c3      	ldr	r3, [r0, #12]
 80137e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80137e8:	2300      	movs	r3, #0
 80137ea:	60c3      	str	r3, [r0, #12]
 80137ec:	4641      	mov	r1, r8
 80137ee:	f7ff fa0b 	bl	8012c08 <__mcmp>
 80137f2:	2800      	cmp	r0, #0
 80137f4:	da46      	bge.n	8013884 <_strtod_l+0x864>
 80137f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80137f8:	ea53 030a 	orrs.w	r3, r3, sl
 80137fc:	d16c      	bne.n	80138d8 <_strtod_l+0x8b8>
 80137fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013802:	2b00      	cmp	r3, #0
 8013804:	d168      	bne.n	80138d8 <_strtod_l+0x8b8>
 8013806:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801380a:	0d1b      	lsrs	r3, r3, #20
 801380c:	051b      	lsls	r3, r3, #20
 801380e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013812:	d961      	bls.n	80138d8 <_strtod_l+0x8b8>
 8013814:	6963      	ldr	r3, [r4, #20]
 8013816:	b913      	cbnz	r3, 801381e <_strtod_l+0x7fe>
 8013818:	6923      	ldr	r3, [r4, #16]
 801381a:	2b01      	cmp	r3, #1
 801381c:	dd5c      	ble.n	80138d8 <_strtod_l+0x8b8>
 801381e:	4621      	mov	r1, r4
 8013820:	2201      	movs	r2, #1
 8013822:	9805      	ldr	r0, [sp, #20]
 8013824:	f7ff f984 	bl	8012b30 <__lshift>
 8013828:	4641      	mov	r1, r8
 801382a:	4604      	mov	r4, r0
 801382c:	f7ff f9ec 	bl	8012c08 <__mcmp>
 8013830:	2800      	cmp	r0, #0
 8013832:	dd51      	ble.n	80138d8 <_strtod_l+0x8b8>
 8013834:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013838:	9a08      	ldr	r2, [sp, #32]
 801383a:	0d1b      	lsrs	r3, r3, #20
 801383c:	051b      	lsls	r3, r3, #20
 801383e:	2a00      	cmp	r2, #0
 8013840:	d06b      	beq.n	801391a <_strtod_l+0x8fa>
 8013842:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013846:	d868      	bhi.n	801391a <_strtod_l+0x8fa>
 8013848:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801384c:	f67f ae9d 	bls.w	801358a <_strtod_l+0x56a>
 8013850:	4b0a      	ldr	r3, [pc, #40]	@ (801387c <_strtod_l+0x85c>)
 8013852:	4650      	mov	r0, sl
 8013854:	4659      	mov	r1, fp
 8013856:	2200      	movs	r2, #0
 8013858:	f7ec fef6 	bl	8000648 <__aeabi_dmul>
 801385c:	4b08      	ldr	r3, [pc, #32]	@ (8013880 <_strtod_l+0x860>)
 801385e:	400b      	ands	r3, r1
 8013860:	4682      	mov	sl, r0
 8013862:	468b      	mov	fp, r1
 8013864:	2b00      	cmp	r3, #0
 8013866:	f47f ae05 	bne.w	8013474 <_strtod_l+0x454>
 801386a:	9a05      	ldr	r2, [sp, #20]
 801386c:	2322      	movs	r3, #34	@ 0x22
 801386e:	6013      	str	r3, [r2, #0]
 8013870:	e600      	b.n	8013474 <_strtod_l+0x454>
 8013872:	bf00      	nop
 8013874:	08017098 	.word	0x08017098
 8013878:	fffffc02 	.word	0xfffffc02
 801387c:	39500000 	.word	0x39500000
 8013880:	7ff00000 	.word	0x7ff00000
 8013884:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013888:	d165      	bne.n	8013956 <_strtod_l+0x936>
 801388a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801388c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013890:	b35a      	cbz	r2, 80138ea <_strtod_l+0x8ca>
 8013892:	4a9f      	ldr	r2, [pc, #636]	@ (8013b10 <_strtod_l+0xaf0>)
 8013894:	4293      	cmp	r3, r2
 8013896:	d12b      	bne.n	80138f0 <_strtod_l+0x8d0>
 8013898:	9b08      	ldr	r3, [sp, #32]
 801389a:	4651      	mov	r1, sl
 801389c:	b303      	cbz	r3, 80138e0 <_strtod_l+0x8c0>
 801389e:	4b9d      	ldr	r3, [pc, #628]	@ (8013b14 <_strtod_l+0xaf4>)
 80138a0:	465a      	mov	r2, fp
 80138a2:	4013      	ands	r3, r2
 80138a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80138a8:	f04f 32ff 	mov.w	r2, #4294967295
 80138ac:	d81b      	bhi.n	80138e6 <_strtod_l+0x8c6>
 80138ae:	0d1b      	lsrs	r3, r3, #20
 80138b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80138b4:	fa02 f303 	lsl.w	r3, r2, r3
 80138b8:	4299      	cmp	r1, r3
 80138ba:	d119      	bne.n	80138f0 <_strtod_l+0x8d0>
 80138bc:	4b96      	ldr	r3, [pc, #600]	@ (8013b18 <_strtod_l+0xaf8>)
 80138be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80138c0:	429a      	cmp	r2, r3
 80138c2:	d102      	bne.n	80138ca <_strtod_l+0x8aa>
 80138c4:	3101      	adds	r1, #1
 80138c6:	f43f adca 	beq.w	801345e <_strtod_l+0x43e>
 80138ca:	4b92      	ldr	r3, [pc, #584]	@ (8013b14 <_strtod_l+0xaf4>)
 80138cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80138ce:	401a      	ands	r2, r3
 80138d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80138d4:	f04f 0a00 	mov.w	sl, #0
 80138d8:	9b08      	ldr	r3, [sp, #32]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d1b8      	bne.n	8013850 <_strtod_l+0x830>
 80138de:	e5c9      	b.n	8013474 <_strtod_l+0x454>
 80138e0:	f04f 33ff 	mov.w	r3, #4294967295
 80138e4:	e7e8      	b.n	80138b8 <_strtod_l+0x898>
 80138e6:	4613      	mov	r3, r2
 80138e8:	e7e6      	b.n	80138b8 <_strtod_l+0x898>
 80138ea:	ea53 030a 	orrs.w	r3, r3, sl
 80138ee:	d0a1      	beq.n	8013834 <_strtod_l+0x814>
 80138f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80138f2:	b1db      	cbz	r3, 801392c <_strtod_l+0x90c>
 80138f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80138f6:	4213      	tst	r3, r2
 80138f8:	d0ee      	beq.n	80138d8 <_strtod_l+0x8b8>
 80138fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80138fc:	9a08      	ldr	r2, [sp, #32]
 80138fe:	4650      	mov	r0, sl
 8013900:	4659      	mov	r1, fp
 8013902:	b1bb      	cbz	r3, 8013934 <_strtod_l+0x914>
 8013904:	f7ff fb6e 	bl	8012fe4 <sulp>
 8013908:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801390c:	ec53 2b10 	vmov	r2, r3, d0
 8013910:	f7ec fce4 	bl	80002dc <__adddf3>
 8013914:	4682      	mov	sl, r0
 8013916:	468b      	mov	fp, r1
 8013918:	e7de      	b.n	80138d8 <_strtod_l+0x8b8>
 801391a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801391e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013922:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013926:	f04f 3aff 	mov.w	sl, #4294967295
 801392a:	e7d5      	b.n	80138d8 <_strtod_l+0x8b8>
 801392c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801392e:	ea13 0f0a 	tst.w	r3, sl
 8013932:	e7e1      	b.n	80138f8 <_strtod_l+0x8d8>
 8013934:	f7ff fb56 	bl	8012fe4 <sulp>
 8013938:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801393c:	ec53 2b10 	vmov	r2, r3, d0
 8013940:	f7ec fcca 	bl	80002d8 <__aeabi_dsub>
 8013944:	2200      	movs	r2, #0
 8013946:	2300      	movs	r3, #0
 8013948:	4682      	mov	sl, r0
 801394a:	468b      	mov	fp, r1
 801394c:	f7ed f8e4 	bl	8000b18 <__aeabi_dcmpeq>
 8013950:	2800      	cmp	r0, #0
 8013952:	d0c1      	beq.n	80138d8 <_strtod_l+0x8b8>
 8013954:	e619      	b.n	801358a <_strtod_l+0x56a>
 8013956:	4641      	mov	r1, r8
 8013958:	4620      	mov	r0, r4
 801395a:	f7ff facd 	bl	8012ef8 <__ratio>
 801395e:	ec57 6b10 	vmov	r6, r7, d0
 8013962:	2200      	movs	r2, #0
 8013964:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8013968:	4630      	mov	r0, r6
 801396a:	4639      	mov	r1, r7
 801396c:	f7ed f8e8 	bl	8000b40 <__aeabi_dcmple>
 8013970:	2800      	cmp	r0, #0
 8013972:	d06f      	beq.n	8013a54 <_strtod_l+0xa34>
 8013974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013976:	2b00      	cmp	r3, #0
 8013978:	d17a      	bne.n	8013a70 <_strtod_l+0xa50>
 801397a:	f1ba 0f00 	cmp.w	sl, #0
 801397e:	d158      	bne.n	8013a32 <_strtod_l+0xa12>
 8013980:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013986:	2b00      	cmp	r3, #0
 8013988:	d15a      	bne.n	8013a40 <_strtod_l+0xa20>
 801398a:	4b64      	ldr	r3, [pc, #400]	@ (8013b1c <_strtod_l+0xafc>)
 801398c:	2200      	movs	r2, #0
 801398e:	4630      	mov	r0, r6
 8013990:	4639      	mov	r1, r7
 8013992:	f7ed f8cb 	bl	8000b2c <__aeabi_dcmplt>
 8013996:	2800      	cmp	r0, #0
 8013998:	d159      	bne.n	8013a4e <_strtod_l+0xa2e>
 801399a:	4630      	mov	r0, r6
 801399c:	4639      	mov	r1, r7
 801399e:	4b60      	ldr	r3, [pc, #384]	@ (8013b20 <_strtod_l+0xb00>)
 80139a0:	2200      	movs	r2, #0
 80139a2:	f7ec fe51 	bl	8000648 <__aeabi_dmul>
 80139a6:	4606      	mov	r6, r0
 80139a8:	460f      	mov	r7, r1
 80139aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80139ae:	9606      	str	r6, [sp, #24]
 80139b0:	9307      	str	r3, [sp, #28]
 80139b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80139b6:	4d57      	ldr	r5, [pc, #348]	@ (8013b14 <_strtod_l+0xaf4>)
 80139b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80139bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139be:	401d      	ands	r5, r3
 80139c0:	4b58      	ldr	r3, [pc, #352]	@ (8013b24 <_strtod_l+0xb04>)
 80139c2:	429d      	cmp	r5, r3
 80139c4:	f040 80b2 	bne.w	8013b2c <_strtod_l+0xb0c>
 80139c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80139ce:	ec4b ab10 	vmov	d0, sl, fp
 80139d2:	f7ff f9c9 	bl	8012d68 <__ulp>
 80139d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80139da:	ec51 0b10 	vmov	r0, r1, d0
 80139de:	f7ec fe33 	bl	8000648 <__aeabi_dmul>
 80139e2:	4652      	mov	r2, sl
 80139e4:	465b      	mov	r3, fp
 80139e6:	f7ec fc79 	bl	80002dc <__adddf3>
 80139ea:	460b      	mov	r3, r1
 80139ec:	4949      	ldr	r1, [pc, #292]	@ (8013b14 <_strtod_l+0xaf4>)
 80139ee:	4a4e      	ldr	r2, [pc, #312]	@ (8013b28 <_strtod_l+0xb08>)
 80139f0:	4019      	ands	r1, r3
 80139f2:	4291      	cmp	r1, r2
 80139f4:	4682      	mov	sl, r0
 80139f6:	d942      	bls.n	8013a7e <_strtod_l+0xa5e>
 80139f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80139fa:	4b47      	ldr	r3, [pc, #284]	@ (8013b18 <_strtod_l+0xaf8>)
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d103      	bne.n	8013a08 <_strtod_l+0x9e8>
 8013a00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a02:	3301      	adds	r3, #1
 8013a04:	f43f ad2b 	beq.w	801345e <_strtod_l+0x43e>
 8013a08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8013b18 <_strtod_l+0xaf8>
 8013a0c:	f04f 3aff 	mov.w	sl, #4294967295
 8013a10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013a12:	9805      	ldr	r0, [sp, #20]
 8013a14:	f7fe fe74 	bl	8012700 <_Bfree>
 8013a18:	9805      	ldr	r0, [sp, #20]
 8013a1a:	4649      	mov	r1, r9
 8013a1c:	f7fe fe70 	bl	8012700 <_Bfree>
 8013a20:	9805      	ldr	r0, [sp, #20]
 8013a22:	4641      	mov	r1, r8
 8013a24:	f7fe fe6c 	bl	8012700 <_Bfree>
 8013a28:	9805      	ldr	r0, [sp, #20]
 8013a2a:	4621      	mov	r1, r4
 8013a2c:	f7fe fe68 	bl	8012700 <_Bfree>
 8013a30:	e618      	b.n	8013664 <_strtod_l+0x644>
 8013a32:	f1ba 0f01 	cmp.w	sl, #1
 8013a36:	d103      	bne.n	8013a40 <_strtod_l+0xa20>
 8013a38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	f43f ada5 	beq.w	801358a <_strtod_l+0x56a>
 8013a40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8013af0 <_strtod_l+0xad0>
 8013a44:	4f35      	ldr	r7, [pc, #212]	@ (8013b1c <_strtod_l+0xafc>)
 8013a46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013a4a:	2600      	movs	r6, #0
 8013a4c:	e7b1      	b.n	80139b2 <_strtod_l+0x992>
 8013a4e:	4f34      	ldr	r7, [pc, #208]	@ (8013b20 <_strtod_l+0xb00>)
 8013a50:	2600      	movs	r6, #0
 8013a52:	e7aa      	b.n	80139aa <_strtod_l+0x98a>
 8013a54:	4b32      	ldr	r3, [pc, #200]	@ (8013b20 <_strtod_l+0xb00>)
 8013a56:	4630      	mov	r0, r6
 8013a58:	4639      	mov	r1, r7
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	f7ec fdf4 	bl	8000648 <__aeabi_dmul>
 8013a60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013a62:	4606      	mov	r6, r0
 8013a64:	460f      	mov	r7, r1
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d09f      	beq.n	80139aa <_strtod_l+0x98a>
 8013a6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013a6e:	e7a0      	b.n	80139b2 <_strtod_l+0x992>
 8013a70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8013af8 <_strtod_l+0xad8>
 8013a74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013a78:	ec57 6b17 	vmov	r6, r7, d7
 8013a7c:	e799      	b.n	80139b2 <_strtod_l+0x992>
 8013a7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8013a82:	9b08      	ldr	r3, [sp, #32]
 8013a84:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d1c1      	bne.n	8013a10 <_strtod_l+0x9f0>
 8013a8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013a90:	0d1b      	lsrs	r3, r3, #20
 8013a92:	051b      	lsls	r3, r3, #20
 8013a94:	429d      	cmp	r5, r3
 8013a96:	d1bb      	bne.n	8013a10 <_strtod_l+0x9f0>
 8013a98:	4630      	mov	r0, r6
 8013a9a:	4639      	mov	r1, r7
 8013a9c:	f7ed f934 	bl	8000d08 <__aeabi_d2lz>
 8013aa0:	f7ec fda4 	bl	80005ec <__aeabi_l2d>
 8013aa4:	4602      	mov	r2, r0
 8013aa6:	460b      	mov	r3, r1
 8013aa8:	4630      	mov	r0, r6
 8013aaa:	4639      	mov	r1, r7
 8013aac:	f7ec fc14 	bl	80002d8 <__aeabi_dsub>
 8013ab0:	460b      	mov	r3, r1
 8013ab2:	4602      	mov	r2, r0
 8013ab4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8013ab8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8013abc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013abe:	ea46 060a 	orr.w	r6, r6, sl
 8013ac2:	431e      	orrs	r6, r3
 8013ac4:	d06f      	beq.n	8013ba6 <_strtod_l+0xb86>
 8013ac6:	a30e      	add	r3, pc, #56	@ (adr r3, 8013b00 <_strtod_l+0xae0>)
 8013ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013acc:	f7ed f82e 	bl	8000b2c <__aeabi_dcmplt>
 8013ad0:	2800      	cmp	r0, #0
 8013ad2:	f47f accf 	bne.w	8013474 <_strtod_l+0x454>
 8013ad6:	a30c      	add	r3, pc, #48	@ (adr r3, 8013b08 <_strtod_l+0xae8>)
 8013ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013adc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8013ae0:	f7ed f842 	bl	8000b68 <__aeabi_dcmpgt>
 8013ae4:	2800      	cmp	r0, #0
 8013ae6:	d093      	beq.n	8013a10 <_strtod_l+0x9f0>
 8013ae8:	e4c4      	b.n	8013474 <_strtod_l+0x454>
 8013aea:	bf00      	nop
 8013aec:	f3af 8000 	nop.w
 8013af0:	00000000 	.word	0x00000000
 8013af4:	bff00000 	.word	0xbff00000
 8013af8:	00000000 	.word	0x00000000
 8013afc:	3ff00000 	.word	0x3ff00000
 8013b00:	94a03595 	.word	0x94a03595
 8013b04:	3fdfffff 	.word	0x3fdfffff
 8013b08:	35afe535 	.word	0x35afe535
 8013b0c:	3fe00000 	.word	0x3fe00000
 8013b10:	000fffff 	.word	0x000fffff
 8013b14:	7ff00000 	.word	0x7ff00000
 8013b18:	7fefffff 	.word	0x7fefffff
 8013b1c:	3ff00000 	.word	0x3ff00000
 8013b20:	3fe00000 	.word	0x3fe00000
 8013b24:	7fe00000 	.word	0x7fe00000
 8013b28:	7c9fffff 	.word	0x7c9fffff
 8013b2c:	9b08      	ldr	r3, [sp, #32]
 8013b2e:	b323      	cbz	r3, 8013b7a <_strtod_l+0xb5a>
 8013b30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8013b34:	d821      	bhi.n	8013b7a <_strtod_l+0xb5a>
 8013b36:	a328      	add	r3, pc, #160	@ (adr r3, 8013bd8 <_strtod_l+0xbb8>)
 8013b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b3c:	4630      	mov	r0, r6
 8013b3e:	4639      	mov	r1, r7
 8013b40:	f7ec fffe 	bl	8000b40 <__aeabi_dcmple>
 8013b44:	b1a0      	cbz	r0, 8013b70 <_strtod_l+0xb50>
 8013b46:	4639      	mov	r1, r7
 8013b48:	4630      	mov	r0, r6
 8013b4a:	f7ed f855 	bl	8000bf8 <__aeabi_d2uiz>
 8013b4e:	2801      	cmp	r0, #1
 8013b50:	bf38      	it	cc
 8013b52:	2001      	movcc	r0, #1
 8013b54:	f7ec fcfe 	bl	8000554 <__aeabi_ui2d>
 8013b58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013b5a:	4606      	mov	r6, r0
 8013b5c:	460f      	mov	r7, r1
 8013b5e:	b9fb      	cbnz	r3, 8013ba0 <_strtod_l+0xb80>
 8013b60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8013b64:	9014      	str	r0, [sp, #80]	@ 0x50
 8013b66:	9315      	str	r3, [sp, #84]	@ 0x54
 8013b68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8013b6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8013b70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8013b72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8013b76:	1b5b      	subs	r3, r3, r5
 8013b78:	9311      	str	r3, [sp, #68]	@ 0x44
 8013b7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8013b7e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8013b82:	f7ff f8f1 	bl	8012d68 <__ulp>
 8013b86:	4650      	mov	r0, sl
 8013b88:	ec53 2b10 	vmov	r2, r3, d0
 8013b8c:	4659      	mov	r1, fp
 8013b8e:	f7ec fd5b 	bl	8000648 <__aeabi_dmul>
 8013b92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8013b96:	f7ec fba1 	bl	80002dc <__adddf3>
 8013b9a:	4682      	mov	sl, r0
 8013b9c:	468b      	mov	fp, r1
 8013b9e:	e770      	b.n	8013a82 <_strtod_l+0xa62>
 8013ba0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8013ba4:	e7e0      	b.n	8013b68 <_strtod_l+0xb48>
 8013ba6:	a30e      	add	r3, pc, #56	@ (adr r3, 8013be0 <_strtod_l+0xbc0>)
 8013ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bac:	f7ec ffbe 	bl	8000b2c <__aeabi_dcmplt>
 8013bb0:	e798      	b.n	8013ae4 <_strtod_l+0xac4>
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013bb6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8013bb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013bba:	6013      	str	r3, [r2, #0]
 8013bbc:	f7ff ba6d 	b.w	801309a <_strtod_l+0x7a>
 8013bc0:	2a65      	cmp	r2, #101	@ 0x65
 8013bc2:	f43f ab66 	beq.w	8013292 <_strtod_l+0x272>
 8013bc6:	2a45      	cmp	r2, #69	@ 0x45
 8013bc8:	f43f ab63 	beq.w	8013292 <_strtod_l+0x272>
 8013bcc:	2301      	movs	r3, #1
 8013bce:	f7ff bb9e 	b.w	801330e <_strtod_l+0x2ee>
 8013bd2:	bf00      	nop
 8013bd4:	f3af 8000 	nop.w
 8013bd8:	ffc00000 	.word	0xffc00000
 8013bdc:	41dfffff 	.word	0x41dfffff
 8013be0:	94a03595 	.word	0x94a03595
 8013be4:	3fcfffff 	.word	0x3fcfffff

08013be8 <_strtod_r>:
 8013be8:	4b01      	ldr	r3, [pc, #4]	@ (8013bf0 <_strtod_r+0x8>)
 8013bea:	f7ff ba19 	b.w	8013020 <_strtod_l>
 8013bee:	bf00      	nop
 8013bf0:	2000020c 	.word	0x2000020c

08013bf4 <_strtol_l.constprop.0>:
 8013bf4:	2b24      	cmp	r3, #36	@ 0x24
 8013bf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bfa:	4686      	mov	lr, r0
 8013bfc:	4690      	mov	r8, r2
 8013bfe:	d801      	bhi.n	8013c04 <_strtol_l.constprop.0+0x10>
 8013c00:	2b01      	cmp	r3, #1
 8013c02:	d106      	bne.n	8013c12 <_strtol_l.constprop.0+0x1e>
 8013c04:	f7fd fdac 	bl	8011760 <__errno>
 8013c08:	2316      	movs	r3, #22
 8013c0a:	6003      	str	r3, [r0, #0]
 8013c0c:	2000      	movs	r0, #0
 8013c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c12:	4834      	ldr	r0, [pc, #208]	@ (8013ce4 <_strtol_l.constprop.0+0xf0>)
 8013c14:	460d      	mov	r5, r1
 8013c16:	462a      	mov	r2, r5
 8013c18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c1c:	5d06      	ldrb	r6, [r0, r4]
 8013c1e:	f016 0608 	ands.w	r6, r6, #8
 8013c22:	d1f8      	bne.n	8013c16 <_strtol_l.constprop.0+0x22>
 8013c24:	2c2d      	cmp	r4, #45	@ 0x2d
 8013c26:	d12d      	bne.n	8013c84 <_strtol_l.constprop.0+0x90>
 8013c28:	782c      	ldrb	r4, [r5, #0]
 8013c2a:	2601      	movs	r6, #1
 8013c2c:	1c95      	adds	r5, r2, #2
 8013c2e:	f033 0210 	bics.w	r2, r3, #16
 8013c32:	d109      	bne.n	8013c48 <_strtol_l.constprop.0+0x54>
 8013c34:	2c30      	cmp	r4, #48	@ 0x30
 8013c36:	d12a      	bne.n	8013c8e <_strtol_l.constprop.0+0x9a>
 8013c38:	782a      	ldrb	r2, [r5, #0]
 8013c3a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013c3e:	2a58      	cmp	r2, #88	@ 0x58
 8013c40:	d125      	bne.n	8013c8e <_strtol_l.constprop.0+0x9a>
 8013c42:	786c      	ldrb	r4, [r5, #1]
 8013c44:	2310      	movs	r3, #16
 8013c46:	3502      	adds	r5, #2
 8013c48:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8013c4c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013c50:	2200      	movs	r2, #0
 8013c52:	fbbc f9f3 	udiv	r9, ip, r3
 8013c56:	4610      	mov	r0, r2
 8013c58:	fb03 ca19 	mls	sl, r3, r9, ip
 8013c5c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8013c60:	2f09      	cmp	r7, #9
 8013c62:	d81b      	bhi.n	8013c9c <_strtol_l.constprop.0+0xa8>
 8013c64:	463c      	mov	r4, r7
 8013c66:	42a3      	cmp	r3, r4
 8013c68:	dd27      	ble.n	8013cba <_strtol_l.constprop.0+0xc6>
 8013c6a:	1c57      	adds	r7, r2, #1
 8013c6c:	d007      	beq.n	8013c7e <_strtol_l.constprop.0+0x8a>
 8013c6e:	4581      	cmp	r9, r0
 8013c70:	d320      	bcc.n	8013cb4 <_strtol_l.constprop.0+0xc0>
 8013c72:	d101      	bne.n	8013c78 <_strtol_l.constprop.0+0x84>
 8013c74:	45a2      	cmp	sl, r4
 8013c76:	db1d      	blt.n	8013cb4 <_strtol_l.constprop.0+0xc0>
 8013c78:	fb00 4003 	mla	r0, r0, r3, r4
 8013c7c:	2201      	movs	r2, #1
 8013c7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c82:	e7eb      	b.n	8013c5c <_strtol_l.constprop.0+0x68>
 8013c84:	2c2b      	cmp	r4, #43	@ 0x2b
 8013c86:	bf04      	itt	eq
 8013c88:	782c      	ldrbeq	r4, [r5, #0]
 8013c8a:	1c95      	addeq	r5, r2, #2
 8013c8c:	e7cf      	b.n	8013c2e <_strtol_l.constprop.0+0x3a>
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d1da      	bne.n	8013c48 <_strtol_l.constprop.0+0x54>
 8013c92:	2c30      	cmp	r4, #48	@ 0x30
 8013c94:	bf0c      	ite	eq
 8013c96:	2308      	moveq	r3, #8
 8013c98:	230a      	movne	r3, #10
 8013c9a:	e7d5      	b.n	8013c48 <_strtol_l.constprop.0+0x54>
 8013c9c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8013ca0:	2f19      	cmp	r7, #25
 8013ca2:	d801      	bhi.n	8013ca8 <_strtol_l.constprop.0+0xb4>
 8013ca4:	3c37      	subs	r4, #55	@ 0x37
 8013ca6:	e7de      	b.n	8013c66 <_strtol_l.constprop.0+0x72>
 8013ca8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8013cac:	2f19      	cmp	r7, #25
 8013cae:	d804      	bhi.n	8013cba <_strtol_l.constprop.0+0xc6>
 8013cb0:	3c57      	subs	r4, #87	@ 0x57
 8013cb2:	e7d8      	b.n	8013c66 <_strtol_l.constprop.0+0x72>
 8013cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8013cb8:	e7e1      	b.n	8013c7e <_strtol_l.constprop.0+0x8a>
 8013cba:	1c53      	adds	r3, r2, #1
 8013cbc:	d108      	bne.n	8013cd0 <_strtol_l.constprop.0+0xdc>
 8013cbe:	2322      	movs	r3, #34	@ 0x22
 8013cc0:	f8ce 3000 	str.w	r3, [lr]
 8013cc4:	4660      	mov	r0, ip
 8013cc6:	f1b8 0f00 	cmp.w	r8, #0
 8013cca:	d0a0      	beq.n	8013c0e <_strtol_l.constprop.0+0x1a>
 8013ccc:	1e69      	subs	r1, r5, #1
 8013cce:	e006      	b.n	8013cde <_strtol_l.constprop.0+0xea>
 8013cd0:	b106      	cbz	r6, 8013cd4 <_strtol_l.constprop.0+0xe0>
 8013cd2:	4240      	negs	r0, r0
 8013cd4:	f1b8 0f00 	cmp.w	r8, #0
 8013cd8:	d099      	beq.n	8013c0e <_strtol_l.constprop.0+0x1a>
 8013cda:	2a00      	cmp	r2, #0
 8013cdc:	d1f6      	bne.n	8013ccc <_strtol_l.constprop.0+0xd8>
 8013cde:	f8c8 1000 	str.w	r1, [r8]
 8013ce2:	e794      	b.n	8013c0e <_strtol_l.constprop.0+0x1a>
 8013ce4:	080170c1 	.word	0x080170c1

08013ce8 <_strtol_r>:
 8013ce8:	f7ff bf84 	b.w	8013bf4 <_strtol_l.constprop.0>

08013cec <__ssputs_r>:
 8013cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013cf0:	688e      	ldr	r6, [r1, #8]
 8013cf2:	461f      	mov	r7, r3
 8013cf4:	42be      	cmp	r6, r7
 8013cf6:	680b      	ldr	r3, [r1, #0]
 8013cf8:	4682      	mov	sl, r0
 8013cfa:	460c      	mov	r4, r1
 8013cfc:	4690      	mov	r8, r2
 8013cfe:	d82d      	bhi.n	8013d5c <__ssputs_r+0x70>
 8013d00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013d04:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013d08:	d026      	beq.n	8013d58 <__ssputs_r+0x6c>
 8013d0a:	6965      	ldr	r5, [r4, #20]
 8013d0c:	6909      	ldr	r1, [r1, #16]
 8013d0e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013d12:	eba3 0901 	sub.w	r9, r3, r1
 8013d16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013d1a:	1c7b      	adds	r3, r7, #1
 8013d1c:	444b      	add	r3, r9
 8013d1e:	106d      	asrs	r5, r5, #1
 8013d20:	429d      	cmp	r5, r3
 8013d22:	bf38      	it	cc
 8013d24:	461d      	movcc	r5, r3
 8013d26:	0553      	lsls	r3, r2, #21
 8013d28:	d527      	bpl.n	8013d7a <__ssputs_r+0x8e>
 8013d2a:	4629      	mov	r1, r5
 8013d2c:	f7fe fc1c 	bl	8012568 <_malloc_r>
 8013d30:	4606      	mov	r6, r0
 8013d32:	b360      	cbz	r0, 8013d8e <__ssputs_r+0xa2>
 8013d34:	6921      	ldr	r1, [r4, #16]
 8013d36:	464a      	mov	r2, r9
 8013d38:	f7fd fd3f 	bl	80117ba <memcpy>
 8013d3c:	89a3      	ldrh	r3, [r4, #12]
 8013d3e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013d46:	81a3      	strh	r3, [r4, #12]
 8013d48:	6126      	str	r6, [r4, #16]
 8013d4a:	6165      	str	r5, [r4, #20]
 8013d4c:	444e      	add	r6, r9
 8013d4e:	eba5 0509 	sub.w	r5, r5, r9
 8013d52:	6026      	str	r6, [r4, #0]
 8013d54:	60a5      	str	r5, [r4, #8]
 8013d56:	463e      	mov	r6, r7
 8013d58:	42be      	cmp	r6, r7
 8013d5a:	d900      	bls.n	8013d5e <__ssputs_r+0x72>
 8013d5c:	463e      	mov	r6, r7
 8013d5e:	6820      	ldr	r0, [r4, #0]
 8013d60:	4632      	mov	r2, r6
 8013d62:	4641      	mov	r1, r8
 8013d64:	f000 fd53 	bl	801480e <memmove>
 8013d68:	68a3      	ldr	r3, [r4, #8]
 8013d6a:	1b9b      	subs	r3, r3, r6
 8013d6c:	60a3      	str	r3, [r4, #8]
 8013d6e:	6823      	ldr	r3, [r4, #0]
 8013d70:	4433      	add	r3, r6
 8013d72:	6023      	str	r3, [r4, #0]
 8013d74:	2000      	movs	r0, #0
 8013d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d7a:	462a      	mov	r2, r5
 8013d7c:	f001 f8f9 	bl	8014f72 <_realloc_r>
 8013d80:	4606      	mov	r6, r0
 8013d82:	2800      	cmp	r0, #0
 8013d84:	d1e0      	bne.n	8013d48 <__ssputs_r+0x5c>
 8013d86:	6921      	ldr	r1, [r4, #16]
 8013d88:	4650      	mov	r0, sl
 8013d8a:	f7fe fb79 	bl	8012480 <_free_r>
 8013d8e:	230c      	movs	r3, #12
 8013d90:	f8ca 3000 	str.w	r3, [sl]
 8013d94:	89a3      	ldrh	r3, [r4, #12]
 8013d96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013d9a:	81a3      	strh	r3, [r4, #12]
 8013d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8013da0:	e7e9      	b.n	8013d76 <__ssputs_r+0x8a>
	...

08013da4 <_svfiprintf_r>:
 8013da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013da8:	4698      	mov	r8, r3
 8013daa:	898b      	ldrh	r3, [r1, #12]
 8013dac:	061b      	lsls	r3, r3, #24
 8013dae:	b09d      	sub	sp, #116	@ 0x74
 8013db0:	4607      	mov	r7, r0
 8013db2:	460d      	mov	r5, r1
 8013db4:	4614      	mov	r4, r2
 8013db6:	d510      	bpl.n	8013dda <_svfiprintf_r+0x36>
 8013db8:	690b      	ldr	r3, [r1, #16]
 8013dba:	b973      	cbnz	r3, 8013dda <_svfiprintf_r+0x36>
 8013dbc:	2140      	movs	r1, #64	@ 0x40
 8013dbe:	f7fe fbd3 	bl	8012568 <_malloc_r>
 8013dc2:	6028      	str	r0, [r5, #0]
 8013dc4:	6128      	str	r0, [r5, #16]
 8013dc6:	b930      	cbnz	r0, 8013dd6 <_svfiprintf_r+0x32>
 8013dc8:	230c      	movs	r3, #12
 8013dca:	603b      	str	r3, [r7, #0]
 8013dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8013dd0:	b01d      	add	sp, #116	@ 0x74
 8013dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dd6:	2340      	movs	r3, #64	@ 0x40
 8013dd8:	616b      	str	r3, [r5, #20]
 8013dda:	2300      	movs	r3, #0
 8013ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8013dde:	2320      	movs	r3, #32
 8013de0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013de4:	f8cd 800c 	str.w	r8, [sp, #12]
 8013de8:	2330      	movs	r3, #48	@ 0x30
 8013dea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013f88 <_svfiprintf_r+0x1e4>
 8013dee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013df2:	f04f 0901 	mov.w	r9, #1
 8013df6:	4623      	mov	r3, r4
 8013df8:	469a      	mov	sl, r3
 8013dfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013dfe:	b10a      	cbz	r2, 8013e04 <_svfiprintf_r+0x60>
 8013e00:	2a25      	cmp	r2, #37	@ 0x25
 8013e02:	d1f9      	bne.n	8013df8 <_svfiprintf_r+0x54>
 8013e04:	ebba 0b04 	subs.w	fp, sl, r4
 8013e08:	d00b      	beq.n	8013e22 <_svfiprintf_r+0x7e>
 8013e0a:	465b      	mov	r3, fp
 8013e0c:	4622      	mov	r2, r4
 8013e0e:	4629      	mov	r1, r5
 8013e10:	4638      	mov	r0, r7
 8013e12:	f7ff ff6b 	bl	8013cec <__ssputs_r>
 8013e16:	3001      	adds	r0, #1
 8013e18:	f000 80a7 	beq.w	8013f6a <_svfiprintf_r+0x1c6>
 8013e1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013e1e:	445a      	add	r2, fp
 8013e20:	9209      	str	r2, [sp, #36]	@ 0x24
 8013e22:	f89a 3000 	ldrb.w	r3, [sl]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	f000 809f 	beq.w	8013f6a <_svfiprintf_r+0x1c6>
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8013e32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e36:	f10a 0a01 	add.w	sl, sl, #1
 8013e3a:	9304      	str	r3, [sp, #16]
 8013e3c:	9307      	str	r3, [sp, #28]
 8013e3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013e42:	931a      	str	r3, [sp, #104]	@ 0x68
 8013e44:	4654      	mov	r4, sl
 8013e46:	2205      	movs	r2, #5
 8013e48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e4c:	484e      	ldr	r0, [pc, #312]	@ (8013f88 <_svfiprintf_r+0x1e4>)
 8013e4e:	f7ec f9e7 	bl	8000220 <memchr>
 8013e52:	9a04      	ldr	r2, [sp, #16]
 8013e54:	b9d8      	cbnz	r0, 8013e8e <_svfiprintf_r+0xea>
 8013e56:	06d0      	lsls	r0, r2, #27
 8013e58:	bf44      	itt	mi
 8013e5a:	2320      	movmi	r3, #32
 8013e5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013e60:	0711      	lsls	r1, r2, #28
 8013e62:	bf44      	itt	mi
 8013e64:	232b      	movmi	r3, #43	@ 0x2b
 8013e66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013e6a:	f89a 3000 	ldrb.w	r3, [sl]
 8013e6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013e70:	d015      	beq.n	8013e9e <_svfiprintf_r+0xfa>
 8013e72:	9a07      	ldr	r2, [sp, #28]
 8013e74:	4654      	mov	r4, sl
 8013e76:	2000      	movs	r0, #0
 8013e78:	f04f 0c0a 	mov.w	ip, #10
 8013e7c:	4621      	mov	r1, r4
 8013e7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e82:	3b30      	subs	r3, #48	@ 0x30
 8013e84:	2b09      	cmp	r3, #9
 8013e86:	d94b      	bls.n	8013f20 <_svfiprintf_r+0x17c>
 8013e88:	b1b0      	cbz	r0, 8013eb8 <_svfiprintf_r+0x114>
 8013e8a:	9207      	str	r2, [sp, #28]
 8013e8c:	e014      	b.n	8013eb8 <_svfiprintf_r+0x114>
 8013e8e:	eba0 0308 	sub.w	r3, r0, r8
 8013e92:	fa09 f303 	lsl.w	r3, r9, r3
 8013e96:	4313      	orrs	r3, r2
 8013e98:	9304      	str	r3, [sp, #16]
 8013e9a:	46a2      	mov	sl, r4
 8013e9c:	e7d2      	b.n	8013e44 <_svfiprintf_r+0xa0>
 8013e9e:	9b03      	ldr	r3, [sp, #12]
 8013ea0:	1d19      	adds	r1, r3, #4
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	9103      	str	r1, [sp, #12]
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	bfbb      	ittet	lt
 8013eaa:	425b      	neglt	r3, r3
 8013eac:	f042 0202 	orrlt.w	r2, r2, #2
 8013eb0:	9307      	strge	r3, [sp, #28]
 8013eb2:	9307      	strlt	r3, [sp, #28]
 8013eb4:	bfb8      	it	lt
 8013eb6:	9204      	strlt	r2, [sp, #16]
 8013eb8:	7823      	ldrb	r3, [r4, #0]
 8013eba:	2b2e      	cmp	r3, #46	@ 0x2e
 8013ebc:	d10a      	bne.n	8013ed4 <_svfiprintf_r+0x130>
 8013ebe:	7863      	ldrb	r3, [r4, #1]
 8013ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8013ec2:	d132      	bne.n	8013f2a <_svfiprintf_r+0x186>
 8013ec4:	9b03      	ldr	r3, [sp, #12]
 8013ec6:	1d1a      	adds	r2, r3, #4
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	9203      	str	r2, [sp, #12]
 8013ecc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013ed0:	3402      	adds	r4, #2
 8013ed2:	9305      	str	r3, [sp, #20]
 8013ed4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013f98 <_svfiprintf_r+0x1f4>
 8013ed8:	7821      	ldrb	r1, [r4, #0]
 8013eda:	2203      	movs	r2, #3
 8013edc:	4650      	mov	r0, sl
 8013ede:	f7ec f99f 	bl	8000220 <memchr>
 8013ee2:	b138      	cbz	r0, 8013ef4 <_svfiprintf_r+0x150>
 8013ee4:	9b04      	ldr	r3, [sp, #16]
 8013ee6:	eba0 000a 	sub.w	r0, r0, sl
 8013eea:	2240      	movs	r2, #64	@ 0x40
 8013eec:	4082      	lsls	r2, r0
 8013eee:	4313      	orrs	r3, r2
 8013ef0:	3401      	adds	r4, #1
 8013ef2:	9304      	str	r3, [sp, #16]
 8013ef4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ef8:	4824      	ldr	r0, [pc, #144]	@ (8013f8c <_svfiprintf_r+0x1e8>)
 8013efa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013efe:	2206      	movs	r2, #6
 8013f00:	f7ec f98e 	bl	8000220 <memchr>
 8013f04:	2800      	cmp	r0, #0
 8013f06:	d036      	beq.n	8013f76 <_svfiprintf_r+0x1d2>
 8013f08:	4b21      	ldr	r3, [pc, #132]	@ (8013f90 <_svfiprintf_r+0x1ec>)
 8013f0a:	bb1b      	cbnz	r3, 8013f54 <_svfiprintf_r+0x1b0>
 8013f0c:	9b03      	ldr	r3, [sp, #12]
 8013f0e:	3307      	adds	r3, #7
 8013f10:	f023 0307 	bic.w	r3, r3, #7
 8013f14:	3308      	adds	r3, #8
 8013f16:	9303      	str	r3, [sp, #12]
 8013f18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f1a:	4433      	add	r3, r6
 8013f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f1e:	e76a      	b.n	8013df6 <_svfiprintf_r+0x52>
 8013f20:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f24:	460c      	mov	r4, r1
 8013f26:	2001      	movs	r0, #1
 8013f28:	e7a8      	b.n	8013e7c <_svfiprintf_r+0xd8>
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	3401      	adds	r4, #1
 8013f2e:	9305      	str	r3, [sp, #20]
 8013f30:	4619      	mov	r1, r3
 8013f32:	f04f 0c0a 	mov.w	ip, #10
 8013f36:	4620      	mov	r0, r4
 8013f38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f3c:	3a30      	subs	r2, #48	@ 0x30
 8013f3e:	2a09      	cmp	r2, #9
 8013f40:	d903      	bls.n	8013f4a <_svfiprintf_r+0x1a6>
 8013f42:	2b00      	cmp	r3, #0
 8013f44:	d0c6      	beq.n	8013ed4 <_svfiprintf_r+0x130>
 8013f46:	9105      	str	r1, [sp, #20]
 8013f48:	e7c4      	b.n	8013ed4 <_svfiprintf_r+0x130>
 8013f4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f4e:	4604      	mov	r4, r0
 8013f50:	2301      	movs	r3, #1
 8013f52:	e7f0      	b.n	8013f36 <_svfiprintf_r+0x192>
 8013f54:	ab03      	add	r3, sp, #12
 8013f56:	9300      	str	r3, [sp, #0]
 8013f58:	462a      	mov	r2, r5
 8013f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8013f94 <_svfiprintf_r+0x1f0>)
 8013f5c:	a904      	add	r1, sp, #16
 8013f5e:	4638      	mov	r0, r7
 8013f60:	f7fc fc7c 	bl	801085c <_printf_float>
 8013f64:	1c42      	adds	r2, r0, #1
 8013f66:	4606      	mov	r6, r0
 8013f68:	d1d6      	bne.n	8013f18 <_svfiprintf_r+0x174>
 8013f6a:	89ab      	ldrh	r3, [r5, #12]
 8013f6c:	065b      	lsls	r3, r3, #25
 8013f6e:	f53f af2d 	bmi.w	8013dcc <_svfiprintf_r+0x28>
 8013f72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013f74:	e72c      	b.n	8013dd0 <_svfiprintf_r+0x2c>
 8013f76:	ab03      	add	r3, sp, #12
 8013f78:	9300      	str	r3, [sp, #0]
 8013f7a:	462a      	mov	r2, r5
 8013f7c:	4b05      	ldr	r3, [pc, #20]	@ (8013f94 <_svfiprintf_r+0x1f0>)
 8013f7e:	a904      	add	r1, sp, #16
 8013f80:	4638      	mov	r0, r7
 8013f82:	f7fc ff03 	bl	8010d8c <_printf_i>
 8013f86:	e7ed      	b.n	8013f64 <_svfiprintf_r+0x1c0>
 8013f88:	080171c1 	.word	0x080171c1
 8013f8c:	080171cb 	.word	0x080171cb
 8013f90:	0801085d 	.word	0x0801085d
 8013f94:	08013ced 	.word	0x08013ced
 8013f98:	080171c7 	.word	0x080171c7

08013f9c <_sungetc_r>:
 8013f9c:	b538      	push	{r3, r4, r5, lr}
 8013f9e:	1c4b      	adds	r3, r1, #1
 8013fa0:	4614      	mov	r4, r2
 8013fa2:	d103      	bne.n	8013fac <_sungetc_r+0x10>
 8013fa4:	f04f 35ff 	mov.w	r5, #4294967295
 8013fa8:	4628      	mov	r0, r5
 8013faa:	bd38      	pop	{r3, r4, r5, pc}
 8013fac:	8993      	ldrh	r3, [r2, #12]
 8013fae:	f023 0320 	bic.w	r3, r3, #32
 8013fb2:	8193      	strh	r3, [r2, #12]
 8013fb4:	6853      	ldr	r3, [r2, #4]
 8013fb6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8013fb8:	b2cd      	uxtb	r5, r1
 8013fba:	b18a      	cbz	r2, 8013fe0 <_sungetc_r+0x44>
 8013fbc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	dd08      	ble.n	8013fd4 <_sungetc_r+0x38>
 8013fc2:	6823      	ldr	r3, [r4, #0]
 8013fc4:	1e5a      	subs	r2, r3, #1
 8013fc6:	6022      	str	r2, [r4, #0]
 8013fc8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8013fcc:	6863      	ldr	r3, [r4, #4]
 8013fce:	3301      	adds	r3, #1
 8013fd0:	6063      	str	r3, [r4, #4]
 8013fd2:	e7e9      	b.n	8013fa8 <_sungetc_r+0xc>
 8013fd4:	4621      	mov	r1, r4
 8013fd6:	f000 fbe0 	bl	801479a <__submore>
 8013fda:	2800      	cmp	r0, #0
 8013fdc:	d0f1      	beq.n	8013fc2 <_sungetc_r+0x26>
 8013fde:	e7e1      	b.n	8013fa4 <_sungetc_r+0x8>
 8013fe0:	6921      	ldr	r1, [r4, #16]
 8013fe2:	6822      	ldr	r2, [r4, #0]
 8013fe4:	b141      	cbz	r1, 8013ff8 <_sungetc_r+0x5c>
 8013fe6:	4291      	cmp	r1, r2
 8013fe8:	d206      	bcs.n	8013ff8 <_sungetc_r+0x5c>
 8013fea:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8013fee:	42a9      	cmp	r1, r5
 8013ff0:	d102      	bne.n	8013ff8 <_sungetc_r+0x5c>
 8013ff2:	3a01      	subs	r2, #1
 8013ff4:	6022      	str	r2, [r4, #0]
 8013ff6:	e7ea      	b.n	8013fce <_sungetc_r+0x32>
 8013ff8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8013ffc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014000:	6363      	str	r3, [r4, #52]	@ 0x34
 8014002:	2303      	movs	r3, #3
 8014004:	63a3      	str	r3, [r4, #56]	@ 0x38
 8014006:	4623      	mov	r3, r4
 8014008:	f803 5f46 	strb.w	r5, [r3, #70]!
 801400c:	6023      	str	r3, [r4, #0]
 801400e:	2301      	movs	r3, #1
 8014010:	e7de      	b.n	8013fd0 <_sungetc_r+0x34>

08014012 <__ssrefill_r>:
 8014012:	b510      	push	{r4, lr}
 8014014:	460c      	mov	r4, r1
 8014016:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014018:	b169      	cbz	r1, 8014036 <__ssrefill_r+0x24>
 801401a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801401e:	4299      	cmp	r1, r3
 8014020:	d001      	beq.n	8014026 <__ssrefill_r+0x14>
 8014022:	f7fe fa2d 	bl	8012480 <_free_r>
 8014026:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014028:	6063      	str	r3, [r4, #4]
 801402a:	2000      	movs	r0, #0
 801402c:	6360      	str	r0, [r4, #52]	@ 0x34
 801402e:	b113      	cbz	r3, 8014036 <__ssrefill_r+0x24>
 8014030:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8014032:	6023      	str	r3, [r4, #0]
 8014034:	bd10      	pop	{r4, pc}
 8014036:	6923      	ldr	r3, [r4, #16]
 8014038:	6023      	str	r3, [r4, #0]
 801403a:	2300      	movs	r3, #0
 801403c:	6063      	str	r3, [r4, #4]
 801403e:	89a3      	ldrh	r3, [r4, #12]
 8014040:	f043 0320 	orr.w	r3, r3, #32
 8014044:	81a3      	strh	r3, [r4, #12]
 8014046:	f04f 30ff 	mov.w	r0, #4294967295
 801404a:	e7f3      	b.n	8014034 <__ssrefill_r+0x22>

0801404c <__ssvfiscanf_r>:
 801404c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014050:	460c      	mov	r4, r1
 8014052:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8014056:	2100      	movs	r1, #0
 8014058:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801405c:	49a5      	ldr	r1, [pc, #660]	@ (80142f4 <__ssvfiscanf_r+0x2a8>)
 801405e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8014060:	f10d 0804 	add.w	r8, sp, #4
 8014064:	49a4      	ldr	r1, [pc, #656]	@ (80142f8 <__ssvfiscanf_r+0x2ac>)
 8014066:	4fa5      	ldr	r7, [pc, #660]	@ (80142fc <__ssvfiscanf_r+0x2b0>)
 8014068:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801406c:	4606      	mov	r6, r0
 801406e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8014070:	9300      	str	r3, [sp, #0]
 8014072:	7813      	ldrb	r3, [r2, #0]
 8014074:	2b00      	cmp	r3, #0
 8014076:	f000 8158 	beq.w	801432a <__ssvfiscanf_r+0x2de>
 801407a:	5cf9      	ldrb	r1, [r7, r3]
 801407c:	f011 0108 	ands.w	r1, r1, #8
 8014080:	f102 0501 	add.w	r5, r2, #1
 8014084:	d019      	beq.n	80140ba <__ssvfiscanf_r+0x6e>
 8014086:	6863      	ldr	r3, [r4, #4]
 8014088:	2b00      	cmp	r3, #0
 801408a:	dd0f      	ble.n	80140ac <__ssvfiscanf_r+0x60>
 801408c:	6823      	ldr	r3, [r4, #0]
 801408e:	781a      	ldrb	r2, [r3, #0]
 8014090:	5cba      	ldrb	r2, [r7, r2]
 8014092:	0712      	lsls	r2, r2, #28
 8014094:	d401      	bmi.n	801409a <__ssvfiscanf_r+0x4e>
 8014096:	462a      	mov	r2, r5
 8014098:	e7eb      	b.n	8014072 <__ssvfiscanf_r+0x26>
 801409a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801409c:	3201      	adds	r2, #1
 801409e:	9245      	str	r2, [sp, #276]	@ 0x114
 80140a0:	6862      	ldr	r2, [r4, #4]
 80140a2:	3301      	adds	r3, #1
 80140a4:	3a01      	subs	r2, #1
 80140a6:	6062      	str	r2, [r4, #4]
 80140a8:	6023      	str	r3, [r4, #0]
 80140aa:	e7ec      	b.n	8014086 <__ssvfiscanf_r+0x3a>
 80140ac:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80140ae:	4621      	mov	r1, r4
 80140b0:	4630      	mov	r0, r6
 80140b2:	4798      	blx	r3
 80140b4:	2800      	cmp	r0, #0
 80140b6:	d0e9      	beq.n	801408c <__ssvfiscanf_r+0x40>
 80140b8:	e7ed      	b.n	8014096 <__ssvfiscanf_r+0x4a>
 80140ba:	2b25      	cmp	r3, #37	@ 0x25
 80140bc:	d012      	beq.n	80140e4 <__ssvfiscanf_r+0x98>
 80140be:	4699      	mov	r9, r3
 80140c0:	6863      	ldr	r3, [r4, #4]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	f340 8093 	ble.w	80141ee <__ssvfiscanf_r+0x1a2>
 80140c8:	6822      	ldr	r2, [r4, #0]
 80140ca:	7813      	ldrb	r3, [r2, #0]
 80140cc:	454b      	cmp	r3, r9
 80140ce:	f040 812c 	bne.w	801432a <__ssvfiscanf_r+0x2de>
 80140d2:	6863      	ldr	r3, [r4, #4]
 80140d4:	3b01      	subs	r3, #1
 80140d6:	6063      	str	r3, [r4, #4]
 80140d8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80140da:	3201      	adds	r2, #1
 80140dc:	3301      	adds	r3, #1
 80140de:	6022      	str	r2, [r4, #0]
 80140e0:	9345      	str	r3, [sp, #276]	@ 0x114
 80140e2:	e7d8      	b.n	8014096 <__ssvfiscanf_r+0x4a>
 80140e4:	9141      	str	r1, [sp, #260]	@ 0x104
 80140e6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80140e8:	7853      	ldrb	r3, [r2, #1]
 80140ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80140ec:	bf02      	ittt	eq
 80140ee:	2310      	moveq	r3, #16
 80140f0:	1c95      	addeq	r5, r2, #2
 80140f2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80140f4:	220a      	movs	r2, #10
 80140f6:	46a9      	mov	r9, r5
 80140f8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80140fc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8014100:	2b09      	cmp	r3, #9
 8014102:	d91e      	bls.n	8014142 <__ssvfiscanf_r+0xf6>
 8014104:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8014300 <__ssvfiscanf_r+0x2b4>
 8014108:	2203      	movs	r2, #3
 801410a:	4650      	mov	r0, sl
 801410c:	f7ec f888 	bl	8000220 <memchr>
 8014110:	b138      	cbz	r0, 8014122 <__ssvfiscanf_r+0xd6>
 8014112:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014114:	eba0 000a 	sub.w	r0, r0, sl
 8014118:	2301      	movs	r3, #1
 801411a:	4083      	lsls	r3, r0
 801411c:	4313      	orrs	r3, r2
 801411e:	9341      	str	r3, [sp, #260]	@ 0x104
 8014120:	464d      	mov	r5, r9
 8014122:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014126:	2b78      	cmp	r3, #120	@ 0x78
 8014128:	d806      	bhi.n	8014138 <__ssvfiscanf_r+0xec>
 801412a:	2b57      	cmp	r3, #87	@ 0x57
 801412c:	d810      	bhi.n	8014150 <__ssvfiscanf_r+0x104>
 801412e:	2b25      	cmp	r3, #37	@ 0x25
 8014130:	d0c5      	beq.n	80140be <__ssvfiscanf_r+0x72>
 8014132:	d857      	bhi.n	80141e4 <__ssvfiscanf_r+0x198>
 8014134:	2b00      	cmp	r3, #0
 8014136:	d065      	beq.n	8014204 <__ssvfiscanf_r+0x1b8>
 8014138:	2303      	movs	r3, #3
 801413a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801413c:	230a      	movs	r3, #10
 801413e:	9342      	str	r3, [sp, #264]	@ 0x108
 8014140:	e078      	b.n	8014234 <__ssvfiscanf_r+0x1e8>
 8014142:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8014144:	fb02 1103 	mla	r1, r2, r3, r1
 8014148:	3930      	subs	r1, #48	@ 0x30
 801414a:	9143      	str	r1, [sp, #268]	@ 0x10c
 801414c:	464d      	mov	r5, r9
 801414e:	e7d2      	b.n	80140f6 <__ssvfiscanf_r+0xaa>
 8014150:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8014154:	2a20      	cmp	r2, #32
 8014156:	d8ef      	bhi.n	8014138 <__ssvfiscanf_r+0xec>
 8014158:	a101      	add	r1, pc, #4	@ (adr r1, 8014160 <__ssvfiscanf_r+0x114>)
 801415a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801415e:	bf00      	nop
 8014160:	08014213 	.word	0x08014213
 8014164:	08014139 	.word	0x08014139
 8014168:	08014139 	.word	0x08014139
 801416c:	0801426d 	.word	0x0801426d
 8014170:	08014139 	.word	0x08014139
 8014174:	08014139 	.word	0x08014139
 8014178:	08014139 	.word	0x08014139
 801417c:	08014139 	.word	0x08014139
 8014180:	08014139 	.word	0x08014139
 8014184:	08014139 	.word	0x08014139
 8014188:	08014139 	.word	0x08014139
 801418c:	08014283 	.word	0x08014283
 8014190:	08014269 	.word	0x08014269
 8014194:	080141eb 	.word	0x080141eb
 8014198:	080141eb 	.word	0x080141eb
 801419c:	080141eb 	.word	0x080141eb
 80141a0:	08014139 	.word	0x08014139
 80141a4:	08014225 	.word	0x08014225
 80141a8:	08014139 	.word	0x08014139
 80141ac:	08014139 	.word	0x08014139
 80141b0:	08014139 	.word	0x08014139
 80141b4:	08014139 	.word	0x08014139
 80141b8:	08014293 	.word	0x08014293
 80141bc:	0801422d 	.word	0x0801422d
 80141c0:	0801420b 	.word	0x0801420b
 80141c4:	08014139 	.word	0x08014139
 80141c8:	08014139 	.word	0x08014139
 80141cc:	0801428f 	.word	0x0801428f
 80141d0:	08014139 	.word	0x08014139
 80141d4:	08014269 	.word	0x08014269
 80141d8:	08014139 	.word	0x08014139
 80141dc:	08014139 	.word	0x08014139
 80141e0:	08014213 	.word	0x08014213
 80141e4:	3b45      	subs	r3, #69	@ 0x45
 80141e6:	2b02      	cmp	r3, #2
 80141e8:	d8a6      	bhi.n	8014138 <__ssvfiscanf_r+0xec>
 80141ea:	2305      	movs	r3, #5
 80141ec:	e021      	b.n	8014232 <__ssvfiscanf_r+0x1e6>
 80141ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80141f0:	4621      	mov	r1, r4
 80141f2:	4630      	mov	r0, r6
 80141f4:	4798      	blx	r3
 80141f6:	2800      	cmp	r0, #0
 80141f8:	f43f af66 	beq.w	80140c8 <__ssvfiscanf_r+0x7c>
 80141fc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80141fe:	2800      	cmp	r0, #0
 8014200:	f040 808b 	bne.w	801431a <__ssvfiscanf_r+0x2ce>
 8014204:	f04f 30ff 	mov.w	r0, #4294967295
 8014208:	e08b      	b.n	8014322 <__ssvfiscanf_r+0x2d6>
 801420a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801420c:	f042 0220 	orr.w	r2, r2, #32
 8014210:	9241      	str	r2, [sp, #260]	@ 0x104
 8014212:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014214:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014218:	9241      	str	r2, [sp, #260]	@ 0x104
 801421a:	2210      	movs	r2, #16
 801421c:	2b6e      	cmp	r3, #110	@ 0x6e
 801421e:	9242      	str	r2, [sp, #264]	@ 0x108
 8014220:	d902      	bls.n	8014228 <__ssvfiscanf_r+0x1dc>
 8014222:	e005      	b.n	8014230 <__ssvfiscanf_r+0x1e4>
 8014224:	2300      	movs	r3, #0
 8014226:	9342      	str	r3, [sp, #264]	@ 0x108
 8014228:	2303      	movs	r3, #3
 801422a:	e002      	b.n	8014232 <__ssvfiscanf_r+0x1e6>
 801422c:	2308      	movs	r3, #8
 801422e:	9342      	str	r3, [sp, #264]	@ 0x108
 8014230:	2304      	movs	r3, #4
 8014232:	9347      	str	r3, [sp, #284]	@ 0x11c
 8014234:	6863      	ldr	r3, [r4, #4]
 8014236:	2b00      	cmp	r3, #0
 8014238:	dd39      	ble.n	80142ae <__ssvfiscanf_r+0x262>
 801423a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801423c:	0659      	lsls	r1, r3, #25
 801423e:	d404      	bmi.n	801424a <__ssvfiscanf_r+0x1fe>
 8014240:	6823      	ldr	r3, [r4, #0]
 8014242:	781a      	ldrb	r2, [r3, #0]
 8014244:	5cba      	ldrb	r2, [r7, r2]
 8014246:	0712      	lsls	r2, r2, #28
 8014248:	d438      	bmi.n	80142bc <__ssvfiscanf_r+0x270>
 801424a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801424c:	2b02      	cmp	r3, #2
 801424e:	dc47      	bgt.n	80142e0 <__ssvfiscanf_r+0x294>
 8014250:	466b      	mov	r3, sp
 8014252:	4622      	mov	r2, r4
 8014254:	a941      	add	r1, sp, #260	@ 0x104
 8014256:	4630      	mov	r0, r6
 8014258:	f000 f86c 	bl	8014334 <_scanf_chars>
 801425c:	2801      	cmp	r0, #1
 801425e:	d064      	beq.n	801432a <__ssvfiscanf_r+0x2de>
 8014260:	2802      	cmp	r0, #2
 8014262:	f47f af18 	bne.w	8014096 <__ssvfiscanf_r+0x4a>
 8014266:	e7c9      	b.n	80141fc <__ssvfiscanf_r+0x1b0>
 8014268:	220a      	movs	r2, #10
 801426a:	e7d7      	b.n	801421c <__ssvfiscanf_r+0x1d0>
 801426c:	4629      	mov	r1, r5
 801426e:	4640      	mov	r0, r8
 8014270:	f000 fa5a 	bl	8014728 <__sccl>
 8014274:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801427a:	9341      	str	r3, [sp, #260]	@ 0x104
 801427c:	4605      	mov	r5, r0
 801427e:	2301      	movs	r3, #1
 8014280:	e7d7      	b.n	8014232 <__ssvfiscanf_r+0x1e6>
 8014282:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014288:	9341      	str	r3, [sp, #260]	@ 0x104
 801428a:	2300      	movs	r3, #0
 801428c:	e7d1      	b.n	8014232 <__ssvfiscanf_r+0x1e6>
 801428e:	2302      	movs	r3, #2
 8014290:	e7cf      	b.n	8014232 <__ssvfiscanf_r+0x1e6>
 8014292:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8014294:	06c3      	lsls	r3, r0, #27
 8014296:	f53f aefe 	bmi.w	8014096 <__ssvfiscanf_r+0x4a>
 801429a:	9b00      	ldr	r3, [sp, #0]
 801429c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801429e:	1d19      	adds	r1, r3, #4
 80142a0:	9100      	str	r1, [sp, #0]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	07c0      	lsls	r0, r0, #31
 80142a6:	bf4c      	ite	mi
 80142a8:	801a      	strhmi	r2, [r3, #0]
 80142aa:	601a      	strpl	r2, [r3, #0]
 80142ac:	e6f3      	b.n	8014096 <__ssvfiscanf_r+0x4a>
 80142ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80142b0:	4621      	mov	r1, r4
 80142b2:	4630      	mov	r0, r6
 80142b4:	4798      	blx	r3
 80142b6:	2800      	cmp	r0, #0
 80142b8:	d0bf      	beq.n	801423a <__ssvfiscanf_r+0x1ee>
 80142ba:	e79f      	b.n	80141fc <__ssvfiscanf_r+0x1b0>
 80142bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80142be:	3201      	adds	r2, #1
 80142c0:	9245      	str	r2, [sp, #276]	@ 0x114
 80142c2:	6862      	ldr	r2, [r4, #4]
 80142c4:	3a01      	subs	r2, #1
 80142c6:	2a00      	cmp	r2, #0
 80142c8:	6062      	str	r2, [r4, #4]
 80142ca:	dd02      	ble.n	80142d2 <__ssvfiscanf_r+0x286>
 80142cc:	3301      	adds	r3, #1
 80142ce:	6023      	str	r3, [r4, #0]
 80142d0:	e7b6      	b.n	8014240 <__ssvfiscanf_r+0x1f4>
 80142d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80142d4:	4621      	mov	r1, r4
 80142d6:	4630      	mov	r0, r6
 80142d8:	4798      	blx	r3
 80142da:	2800      	cmp	r0, #0
 80142dc:	d0b0      	beq.n	8014240 <__ssvfiscanf_r+0x1f4>
 80142de:	e78d      	b.n	80141fc <__ssvfiscanf_r+0x1b0>
 80142e0:	2b04      	cmp	r3, #4
 80142e2:	dc0f      	bgt.n	8014304 <__ssvfiscanf_r+0x2b8>
 80142e4:	466b      	mov	r3, sp
 80142e6:	4622      	mov	r2, r4
 80142e8:	a941      	add	r1, sp, #260	@ 0x104
 80142ea:	4630      	mov	r0, r6
 80142ec:	f000 f87c 	bl	80143e8 <_scanf_i>
 80142f0:	e7b4      	b.n	801425c <__ssvfiscanf_r+0x210>
 80142f2:	bf00      	nop
 80142f4:	08013f9d 	.word	0x08013f9d
 80142f8:	08014013 	.word	0x08014013
 80142fc:	080170c1 	.word	0x080170c1
 8014300:	080171c7 	.word	0x080171c7
 8014304:	4b0a      	ldr	r3, [pc, #40]	@ (8014330 <__ssvfiscanf_r+0x2e4>)
 8014306:	2b00      	cmp	r3, #0
 8014308:	f43f aec5 	beq.w	8014096 <__ssvfiscanf_r+0x4a>
 801430c:	466b      	mov	r3, sp
 801430e:	4622      	mov	r2, r4
 8014310:	a941      	add	r1, sp, #260	@ 0x104
 8014312:	4630      	mov	r0, r6
 8014314:	f7fc fe5a 	bl	8010fcc <_scanf_float>
 8014318:	e7a0      	b.n	801425c <__ssvfiscanf_r+0x210>
 801431a:	89a3      	ldrh	r3, [r4, #12]
 801431c:	065b      	lsls	r3, r3, #25
 801431e:	f53f af71 	bmi.w	8014204 <__ssvfiscanf_r+0x1b8>
 8014322:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8014326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801432a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801432c:	e7f9      	b.n	8014322 <__ssvfiscanf_r+0x2d6>
 801432e:	bf00      	nop
 8014330:	08010fcd 	.word	0x08010fcd

08014334 <_scanf_chars>:
 8014334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014338:	4615      	mov	r5, r2
 801433a:	688a      	ldr	r2, [r1, #8]
 801433c:	4680      	mov	r8, r0
 801433e:	460c      	mov	r4, r1
 8014340:	b932      	cbnz	r2, 8014350 <_scanf_chars+0x1c>
 8014342:	698a      	ldr	r2, [r1, #24]
 8014344:	2a00      	cmp	r2, #0
 8014346:	bf14      	ite	ne
 8014348:	f04f 32ff 	movne.w	r2, #4294967295
 801434c:	2201      	moveq	r2, #1
 801434e:	608a      	str	r2, [r1, #8]
 8014350:	6822      	ldr	r2, [r4, #0]
 8014352:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 80143e4 <_scanf_chars+0xb0>
 8014356:	06d1      	lsls	r1, r2, #27
 8014358:	bf5f      	itttt	pl
 801435a:	681a      	ldrpl	r2, [r3, #0]
 801435c:	1d11      	addpl	r1, r2, #4
 801435e:	6019      	strpl	r1, [r3, #0]
 8014360:	6816      	ldrpl	r6, [r2, #0]
 8014362:	2700      	movs	r7, #0
 8014364:	69a0      	ldr	r0, [r4, #24]
 8014366:	b188      	cbz	r0, 801438c <_scanf_chars+0x58>
 8014368:	2801      	cmp	r0, #1
 801436a:	d107      	bne.n	801437c <_scanf_chars+0x48>
 801436c:	682b      	ldr	r3, [r5, #0]
 801436e:	781a      	ldrb	r2, [r3, #0]
 8014370:	6963      	ldr	r3, [r4, #20]
 8014372:	5c9b      	ldrb	r3, [r3, r2]
 8014374:	b953      	cbnz	r3, 801438c <_scanf_chars+0x58>
 8014376:	2f00      	cmp	r7, #0
 8014378:	d031      	beq.n	80143de <_scanf_chars+0xaa>
 801437a:	e022      	b.n	80143c2 <_scanf_chars+0x8e>
 801437c:	2802      	cmp	r0, #2
 801437e:	d120      	bne.n	80143c2 <_scanf_chars+0x8e>
 8014380:	682b      	ldr	r3, [r5, #0]
 8014382:	781b      	ldrb	r3, [r3, #0]
 8014384:	f819 3003 	ldrb.w	r3, [r9, r3]
 8014388:	071b      	lsls	r3, r3, #28
 801438a:	d41a      	bmi.n	80143c2 <_scanf_chars+0x8e>
 801438c:	6823      	ldr	r3, [r4, #0]
 801438e:	06da      	lsls	r2, r3, #27
 8014390:	bf5e      	ittt	pl
 8014392:	682b      	ldrpl	r3, [r5, #0]
 8014394:	781b      	ldrbpl	r3, [r3, #0]
 8014396:	f806 3b01 	strbpl.w	r3, [r6], #1
 801439a:	682a      	ldr	r2, [r5, #0]
 801439c:	686b      	ldr	r3, [r5, #4]
 801439e:	3201      	adds	r2, #1
 80143a0:	602a      	str	r2, [r5, #0]
 80143a2:	68a2      	ldr	r2, [r4, #8]
 80143a4:	3b01      	subs	r3, #1
 80143a6:	3a01      	subs	r2, #1
 80143a8:	606b      	str	r3, [r5, #4]
 80143aa:	3701      	adds	r7, #1
 80143ac:	60a2      	str	r2, [r4, #8]
 80143ae:	b142      	cbz	r2, 80143c2 <_scanf_chars+0x8e>
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	dcd7      	bgt.n	8014364 <_scanf_chars+0x30>
 80143b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80143b8:	4629      	mov	r1, r5
 80143ba:	4640      	mov	r0, r8
 80143bc:	4798      	blx	r3
 80143be:	2800      	cmp	r0, #0
 80143c0:	d0d0      	beq.n	8014364 <_scanf_chars+0x30>
 80143c2:	6823      	ldr	r3, [r4, #0]
 80143c4:	f013 0310 	ands.w	r3, r3, #16
 80143c8:	d105      	bne.n	80143d6 <_scanf_chars+0xa2>
 80143ca:	68e2      	ldr	r2, [r4, #12]
 80143cc:	3201      	adds	r2, #1
 80143ce:	60e2      	str	r2, [r4, #12]
 80143d0:	69a2      	ldr	r2, [r4, #24]
 80143d2:	b102      	cbz	r2, 80143d6 <_scanf_chars+0xa2>
 80143d4:	7033      	strb	r3, [r6, #0]
 80143d6:	6923      	ldr	r3, [r4, #16]
 80143d8:	443b      	add	r3, r7
 80143da:	6123      	str	r3, [r4, #16]
 80143dc:	2000      	movs	r0, #0
 80143de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80143e2:	bf00      	nop
 80143e4:	080170c1 	.word	0x080170c1

080143e8 <_scanf_i>:
 80143e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143ec:	4698      	mov	r8, r3
 80143ee:	4b74      	ldr	r3, [pc, #464]	@ (80145c0 <_scanf_i+0x1d8>)
 80143f0:	460c      	mov	r4, r1
 80143f2:	4682      	mov	sl, r0
 80143f4:	4616      	mov	r6, r2
 80143f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80143fa:	b087      	sub	sp, #28
 80143fc:	ab03      	add	r3, sp, #12
 80143fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014402:	4b70      	ldr	r3, [pc, #448]	@ (80145c4 <_scanf_i+0x1dc>)
 8014404:	69a1      	ldr	r1, [r4, #24]
 8014406:	4a70      	ldr	r2, [pc, #448]	@ (80145c8 <_scanf_i+0x1e0>)
 8014408:	2903      	cmp	r1, #3
 801440a:	bf08      	it	eq
 801440c:	461a      	moveq	r2, r3
 801440e:	68a3      	ldr	r3, [r4, #8]
 8014410:	9201      	str	r2, [sp, #4]
 8014412:	1e5a      	subs	r2, r3, #1
 8014414:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014418:	bf88      	it	hi
 801441a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801441e:	4627      	mov	r7, r4
 8014420:	bf82      	ittt	hi
 8014422:	eb03 0905 	addhi.w	r9, r3, r5
 8014426:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801442a:	60a3      	strhi	r3, [r4, #8]
 801442c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014430:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8014434:	bf98      	it	ls
 8014436:	f04f 0900 	movls.w	r9, #0
 801443a:	6023      	str	r3, [r4, #0]
 801443c:	463d      	mov	r5, r7
 801443e:	f04f 0b00 	mov.w	fp, #0
 8014442:	6831      	ldr	r1, [r6, #0]
 8014444:	ab03      	add	r3, sp, #12
 8014446:	7809      	ldrb	r1, [r1, #0]
 8014448:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801444c:	2202      	movs	r2, #2
 801444e:	f7eb fee7 	bl	8000220 <memchr>
 8014452:	b328      	cbz	r0, 80144a0 <_scanf_i+0xb8>
 8014454:	f1bb 0f01 	cmp.w	fp, #1
 8014458:	d159      	bne.n	801450e <_scanf_i+0x126>
 801445a:	6862      	ldr	r2, [r4, #4]
 801445c:	b92a      	cbnz	r2, 801446a <_scanf_i+0x82>
 801445e:	6822      	ldr	r2, [r4, #0]
 8014460:	2108      	movs	r1, #8
 8014462:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014466:	6061      	str	r1, [r4, #4]
 8014468:	6022      	str	r2, [r4, #0]
 801446a:	6822      	ldr	r2, [r4, #0]
 801446c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8014470:	6022      	str	r2, [r4, #0]
 8014472:	68a2      	ldr	r2, [r4, #8]
 8014474:	1e51      	subs	r1, r2, #1
 8014476:	60a1      	str	r1, [r4, #8]
 8014478:	b192      	cbz	r2, 80144a0 <_scanf_i+0xb8>
 801447a:	6832      	ldr	r2, [r6, #0]
 801447c:	1c51      	adds	r1, r2, #1
 801447e:	6031      	str	r1, [r6, #0]
 8014480:	7812      	ldrb	r2, [r2, #0]
 8014482:	f805 2b01 	strb.w	r2, [r5], #1
 8014486:	6872      	ldr	r2, [r6, #4]
 8014488:	3a01      	subs	r2, #1
 801448a:	2a00      	cmp	r2, #0
 801448c:	6072      	str	r2, [r6, #4]
 801448e:	dc07      	bgt.n	80144a0 <_scanf_i+0xb8>
 8014490:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8014494:	4631      	mov	r1, r6
 8014496:	4650      	mov	r0, sl
 8014498:	4790      	blx	r2
 801449a:	2800      	cmp	r0, #0
 801449c:	f040 8085 	bne.w	80145aa <_scanf_i+0x1c2>
 80144a0:	f10b 0b01 	add.w	fp, fp, #1
 80144a4:	f1bb 0f03 	cmp.w	fp, #3
 80144a8:	d1cb      	bne.n	8014442 <_scanf_i+0x5a>
 80144aa:	6863      	ldr	r3, [r4, #4]
 80144ac:	b90b      	cbnz	r3, 80144b2 <_scanf_i+0xca>
 80144ae:	230a      	movs	r3, #10
 80144b0:	6063      	str	r3, [r4, #4]
 80144b2:	6863      	ldr	r3, [r4, #4]
 80144b4:	4945      	ldr	r1, [pc, #276]	@ (80145cc <_scanf_i+0x1e4>)
 80144b6:	6960      	ldr	r0, [r4, #20]
 80144b8:	1ac9      	subs	r1, r1, r3
 80144ba:	f000 f935 	bl	8014728 <__sccl>
 80144be:	f04f 0b00 	mov.w	fp, #0
 80144c2:	68a3      	ldr	r3, [r4, #8]
 80144c4:	6822      	ldr	r2, [r4, #0]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d03d      	beq.n	8014546 <_scanf_i+0x15e>
 80144ca:	6831      	ldr	r1, [r6, #0]
 80144cc:	6960      	ldr	r0, [r4, #20]
 80144ce:	f891 c000 	ldrb.w	ip, [r1]
 80144d2:	f810 000c 	ldrb.w	r0, [r0, ip]
 80144d6:	2800      	cmp	r0, #0
 80144d8:	d035      	beq.n	8014546 <_scanf_i+0x15e>
 80144da:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80144de:	d124      	bne.n	801452a <_scanf_i+0x142>
 80144e0:	0510      	lsls	r0, r2, #20
 80144e2:	d522      	bpl.n	801452a <_scanf_i+0x142>
 80144e4:	f10b 0b01 	add.w	fp, fp, #1
 80144e8:	f1b9 0f00 	cmp.w	r9, #0
 80144ec:	d003      	beq.n	80144f6 <_scanf_i+0x10e>
 80144ee:	3301      	adds	r3, #1
 80144f0:	f109 39ff 	add.w	r9, r9, #4294967295
 80144f4:	60a3      	str	r3, [r4, #8]
 80144f6:	6873      	ldr	r3, [r6, #4]
 80144f8:	3b01      	subs	r3, #1
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	6073      	str	r3, [r6, #4]
 80144fe:	dd1b      	ble.n	8014538 <_scanf_i+0x150>
 8014500:	6833      	ldr	r3, [r6, #0]
 8014502:	3301      	adds	r3, #1
 8014504:	6033      	str	r3, [r6, #0]
 8014506:	68a3      	ldr	r3, [r4, #8]
 8014508:	3b01      	subs	r3, #1
 801450a:	60a3      	str	r3, [r4, #8]
 801450c:	e7d9      	b.n	80144c2 <_scanf_i+0xda>
 801450e:	f1bb 0f02 	cmp.w	fp, #2
 8014512:	d1ae      	bne.n	8014472 <_scanf_i+0x8a>
 8014514:	6822      	ldr	r2, [r4, #0]
 8014516:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801451a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801451e:	d1bf      	bne.n	80144a0 <_scanf_i+0xb8>
 8014520:	2110      	movs	r1, #16
 8014522:	6061      	str	r1, [r4, #4]
 8014524:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014528:	e7a2      	b.n	8014470 <_scanf_i+0x88>
 801452a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801452e:	6022      	str	r2, [r4, #0]
 8014530:	780b      	ldrb	r3, [r1, #0]
 8014532:	f805 3b01 	strb.w	r3, [r5], #1
 8014536:	e7de      	b.n	80144f6 <_scanf_i+0x10e>
 8014538:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801453c:	4631      	mov	r1, r6
 801453e:	4650      	mov	r0, sl
 8014540:	4798      	blx	r3
 8014542:	2800      	cmp	r0, #0
 8014544:	d0df      	beq.n	8014506 <_scanf_i+0x11e>
 8014546:	6823      	ldr	r3, [r4, #0]
 8014548:	05d9      	lsls	r1, r3, #23
 801454a:	d50d      	bpl.n	8014568 <_scanf_i+0x180>
 801454c:	42bd      	cmp	r5, r7
 801454e:	d909      	bls.n	8014564 <_scanf_i+0x17c>
 8014550:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014554:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014558:	4632      	mov	r2, r6
 801455a:	4650      	mov	r0, sl
 801455c:	4798      	blx	r3
 801455e:	f105 39ff 	add.w	r9, r5, #4294967295
 8014562:	464d      	mov	r5, r9
 8014564:	42bd      	cmp	r5, r7
 8014566:	d028      	beq.n	80145ba <_scanf_i+0x1d2>
 8014568:	6822      	ldr	r2, [r4, #0]
 801456a:	f012 0210 	ands.w	r2, r2, #16
 801456e:	d113      	bne.n	8014598 <_scanf_i+0x1b0>
 8014570:	702a      	strb	r2, [r5, #0]
 8014572:	6863      	ldr	r3, [r4, #4]
 8014574:	9e01      	ldr	r6, [sp, #4]
 8014576:	4639      	mov	r1, r7
 8014578:	4650      	mov	r0, sl
 801457a:	47b0      	blx	r6
 801457c:	f8d8 3000 	ldr.w	r3, [r8]
 8014580:	6821      	ldr	r1, [r4, #0]
 8014582:	1d1a      	adds	r2, r3, #4
 8014584:	f8c8 2000 	str.w	r2, [r8]
 8014588:	f011 0f20 	tst.w	r1, #32
 801458c:	681b      	ldr	r3, [r3, #0]
 801458e:	d00f      	beq.n	80145b0 <_scanf_i+0x1c8>
 8014590:	6018      	str	r0, [r3, #0]
 8014592:	68e3      	ldr	r3, [r4, #12]
 8014594:	3301      	adds	r3, #1
 8014596:	60e3      	str	r3, [r4, #12]
 8014598:	6923      	ldr	r3, [r4, #16]
 801459a:	1bed      	subs	r5, r5, r7
 801459c:	445d      	add	r5, fp
 801459e:	442b      	add	r3, r5
 80145a0:	6123      	str	r3, [r4, #16]
 80145a2:	2000      	movs	r0, #0
 80145a4:	b007      	add	sp, #28
 80145a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145aa:	f04f 0b00 	mov.w	fp, #0
 80145ae:	e7ca      	b.n	8014546 <_scanf_i+0x15e>
 80145b0:	07ca      	lsls	r2, r1, #31
 80145b2:	bf4c      	ite	mi
 80145b4:	8018      	strhmi	r0, [r3, #0]
 80145b6:	6018      	strpl	r0, [r3, #0]
 80145b8:	e7eb      	b.n	8014592 <_scanf_i+0x1aa>
 80145ba:	2001      	movs	r0, #1
 80145bc:	e7f2      	b.n	80145a4 <_scanf_i+0x1bc>
 80145be:	bf00      	nop
 80145c0:	08016dfc 	.word	0x08016dfc
 80145c4:	08013ce9 	.word	0x08013ce9
 80145c8:	080150ad 	.word	0x080150ad
 80145cc:	080171e2 	.word	0x080171e2

080145d0 <__sflush_r>:
 80145d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80145d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145d8:	0716      	lsls	r6, r2, #28
 80145da:	4605      	mov	r5, r0
 80145dc:	460c      	mov	r4, r1
 80145de:	d454      	bmi.n	801468a <__sflush_r+0xba>
 80145e0:	684b      	ldr	r3, [r1, #4]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	dc02      	bgt.n	80145ec <__sflush_r+0x1c>
 80145e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	dd48      	ble.n	801467e <__sflush_r+0xae>
 80145ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80145ee:	2e00      	cmp	r6, #0
 80145f0:	d045      	beq.n	801467e <__sflush_r+0xae>
 80145f2:	2300      	movs	r3, #0
 80145f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80145f8:	682f      	ldr	r7, [r5, #0]
 80145fa:	6a21      	ldr	r1, [r4, #32]
 80145fc:	602b      	str	r3, [r5, #0]
 80145fe:	d030      	beq.n	8014662 <__sflush_r+0x92>
 8014600:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014602:	89a3      	ldrh	r3, [r4, #12]
 8014604:	0759      	lsls	r1, r3, #29
 8014606:	d505      	bpl.n	8014614 <__sflush_r+0x44>
 8014608:	6863      	ldr	r3, [r4, #4]
 801460a:	1ad2      	subs	r2, r2, r3
 801460c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801460e:	b10b      	cbz	r3, 8014614 <__sflush_r+0x44>
 8014610:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014612:	1ad2      	subs	r2, r2, r3
 8014614:	2300      	movs	r3, #0
 8014616:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014618:	6a21      	ldr	r1, [r4, #32]
 801461a:	4628      	mov	r0, r5
 801461c:	47b0      	blx	r6
 801461e:	1c43      	adds	r3, r0, #1
 8014620:	89a3      	ldrh	r3, [r4, #12]
 8014622:	d106      	bne.n	8014632 <__sflush_r+0x62>
 8014624:	6829      	ldr	r1, [r5, #0]
 8014626:	291d      	cmp	r1, #29
 8014628:	d82b      	bhi.n	8014682 <__sflush_r+0xb2>
 801462a:	4a2a      	ldr	r2, [pc, #168]	@ (80146d4 <__sflush_r+0x104>)
 801462c:	410a      	asrs	r2, r1
 801462e:	07d6      	lsls	r6, r2, #31
 8014630:	d427      	bmi.n	8014682 <__sflush_r+0xb2>
 8014632:	2200      	movs	r2, #0
 8014634:	6062      	str	r2, [r4, #4]
 8014636:	04d9      	lsls	r1, r3, #19
 8014638:	6922      	ldr	r2, [r4, #16]
 801463a:	6022      	str	r2, [r4, #0]
 801463c:	d504      	bpl.n	8014648 <__sflush_r+0x78>
 801463e:	1c42      	adds	r2, r0, #1
 8014640:	d101      	bne.n	8014646 <__sflush_r+0x76>
 8014642:	682b      	ldr	r3, [r5, #0]
 8014644:	b903      	cbnz	r3, 8014648 <__sflush_r+0x78>
 8014646:	6560      	str	r0, [r4, #84]	@ 0x54
 8014648:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801464a:	602f      	str	r7, [r5, #0]
 801464c:	b1b9      	cbz	r1, 801467e <__sflush_r+0xae>
 801464e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014652:	4299      	cmp	r1, r3
 8014654:	d002      	beq.n	801465c <__sflush_r+0x8c>
 8014656:	4628      	mov	r0, r5
 8014658:	f7fd ff12 	bl	8012480 <_free_r>
 801465c:	2300      	movs	r3, #0
 801465e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014660:	e00d      	b.n	801467e <__sflush_r+0xae>
 8014662:	2301      	movs	r3, #1
 8014664:	4628      	mov	r0, r5
 8014666:	47b0      	blx	r6
 8014668:	4602      	mov	r2, r0
 801466a:	1c50      	adds	r0, r2, #1
 801466c:	d1c9      	bne.n	8014602 <__sflush_r+0x32>
 801466e:	682b      	ldr	r3, [r5, #0]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d0c6      	beq.n	8014602 <__sflush_r+0x32>
 8014674:	2b1d      	cmp	r3, #29
 8014676:	d001      	beq.n	801467c <__sflush_r+0xac>
 8014678:	2b16      	cmp	r3, #22
 801467a:	d11e      	bne.n	80146ba <__sflush_r+0xea>
 801467c:	602f      	str	r7, [r5, #0]
 801467e:	2000      	movs	r0, #0
 8014680:	e022      	b.n	80146c8 <__sflush_r+0xf8>
 8014682:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014686:	b21b      	sxth	r3, r3
 8014688:	e01b      	b.n	80146c2 <__sflush_r+0xf2>
 801468a:	690f      	ldr	r7, [r1, #16]
 801468c:	2f00      	cmp	r7, #0
 801468e:	d0f6      	beq.n	801467e <__sflush_r+0xae>
 8014690:	0793      	lsls	r3, r2, #30
 8014692:	680e      	ldr	r6, [r1, #0]
 8014694:	bf08      	it	eq
 8014696:	694b      	ldreq	r3, [r1, #20]
 8014698:	600f      	str	r7, [r1, #0]
 801469a:	bf18      	it	ne
 801469c:	2300      	movne	r3, #0
 801469e:	eba6 0807 	sub.w	r8, r6, r7
 80146a2:	608b      	str	r3, [r1, #8]
 80146a4:	f1b8 0f00 	cmp.w	r8, #0
 80146a8:	dde9      	ble.n	801467e <__sflush_r+0xae>
 80146aa:	6a21      	ldr	r1, [r4, #32]
 80146ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80146ae:	4643      	mov	r3, r8
 80146b0:	463a      	mov	r2, r7
 80146b2:	4628      	mov	r0, r5
 80146b4:	47b0      	blx	r6
 80146b6:	2800      	cmp	r0, #0
 80146b8:	dc08      	bgt.n	80146cc <__sflush_r+0xfc>
 80146ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80146c2:	81a3      	strh	r3, [r4, #12]
 80146c4:	f04f 30ff 	mov.w	r0, #4294967295
 80146c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146cc:	4407      	add	r7, r0
 80146ce:	eba8 0800 	sub.w	r8, r8, r0
 80146d2:	e7e7      	b.n	80146a4 <__sflush_r+0xd4>
 80146d4:	dfbffffe 	.word	0xdfbffffe

080146d8 <_fflush_r>:
 80146d8:	b538      	push	{r3, r4, r5, lr}
 80146da:	690b      	ldr	r3, [r1, #16]
 80146dc:	4605      	mov	r5, r0
 80146de:	460c      	mov	r4, r1
 80146e0:	b913      	cbnz	r3, 80146e8 <_fflush_r+0x10>
 80146e2:	2500      	movs	r5, #0
 80146e4:	4628      	mov	r0, r5
 80146e6:	bd38      	pop	{r3, r4, r5, pc}
 80146e8:	b118      	cbz	r0, 80146f2 <_fflush_r+0x1a>
 80146ea:	6a03      	ldr	r3, [r0, #32]
 80146ec:	b90b      	cbnz	r3, 80146f2 <_fflush_r+0x1a>
 80146ee:	f7fc ff0d 	bl	801150c <__sinit>
 80146f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d0f3      	beq.n	80146e2 <_fflush_r+0xa>
 80146fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80146fc:	07d0      	lsls	r0, r2, #31
 80146fe:	d404      	bmi.n	801470a <_fflush_r+0x32>
 8014700:	0599      	lsls	r1, r3, #22
 8014702:	d402      	bmi.n	801470a <_fflush_r+0x32>
 8014704:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014706:	f7fd f856 	bl	80117b6 <__retarget_lock_acquire_recursive>
 801470a:	4628      	mov	r0, r5
 801470c:	4621      	mov	r1, r4
 801470e:	f7ff ff5f 	bl	80145d0 <__sflush_r>
 8014712:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014714:	07da      	lsls	r2, r3, #31
 8014716:	4605      	mov	r5, r0
 8014718:	d4e4      	bmi.n	80146e4 <_fflush_r+0xc>
 801471a:	89a3      	ldrh	r3, [r4, #12]
 801471c:	059b      	lsls	r3, r3, #22
 801471e:	d4e1      	bmi.n	80146e4 <_fflush_r+0xc>
 8014720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014722:	f7fd f849 	bl	80117b8 <__retarget_lock_release_recursive>
 8014726:	e7dd      	b.n	80146e4 <_fflush_r+0xc>

08014728 <__sccl>:
 8014728:	b570      	push	{r4, r5, r6, lr}
 801472a:	780b      	ldrb	r3, [r1, #0]
 801472c:	4604      	mov	r4, r0
 801472e:	2b5e      	cmp	r3, #94	@ 0x5e
 8014730:	bf0b      	itete	eq
 8014732:	784b      	ldrbeq	r3, [r1, #1]
 8014734:	1c4a      	addne	r2, r1, #1
 8014736:	1c8a      	addeq	r2, r1, #2
 8014738:	2100      	movne	r1, #0
 801473a:	bf08      	it	eq
 801473c:	2101      	moveq	r1, #1
 801473e:	3801      	subs	r0, #1
 8014740:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8014744:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014748:	42a8      	cmp	r0, r5
 801474a:	d1fb      	bne.n	8014744 <__sccl+0x1c>
 801474c:	b90b      	cbnz	r3, 8014752 <__sccl+0x2a>
 801474e:	1e50      	subs	r0, r2, #1
 8014750:	bd70      	pop	{r4, r5, r6, pc}
 8014752:	f081 0101 	eor.w	r1, r1, #1
 8014756:	54e1      	strb	r1, [r4, r3]
 8014758:	4610      	mov	r0, r2
 801475a:	4602      	mov	r2, r0
 801475c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014760:	2d2d      	cmp	r5, #45	@ 0x2d
 8014762:	d005      	beq.n	8014770 <__sccl+0x48>
 8014764:	2d5d      	cmp	r5, #93	@ 0x5d
 8014766:	d016      	beq.n	8014796 <__sccl+0x6e>
 8014768:	2d00      	cmp	r5, #0
 801476a:	d0f1      	beq.n	8014750 <__sccl+0x28>
 801476c:	462b      	mov	r3, r5
 801476e:	e7f2      	b.n	8014756 <__sccl+0x2e>
 8014770:	7846      	ldrb	r6, [r0, #1]
 8014772:	2e5d      	cmp	r6, #93	@ 0x5d
 8014774:	d0fa      	beq.n	801476c <__sccl+0x44>
 8014776:	42b3      	cmp	r3, r6
 8014778:	dcf8      	bgt.n	801476c <__sccl+0x44>
 801477a:	3002      	adds	r0, #2
 801477c:	461a      	mov	r2, r3
 801477e:	3201      	adds	r2, #1
 8014780:	4296      	cmp	r6, r2
 8014782:	54a1      	strb	r1, [r4, r2]
 8014784:	dcfb      	bgt.n	801477e <__sccl+0x56>
 8014786:	1af2      	subs	r2, r6, r3
 8014788:	3a01      	subs	r2, #1
 801478a:	1c5d      	adds	r5, r3, #1
 801478c:	42b3      	cmp	r3, r6
 801478e:	bfa8      	it	ge
 8014790:	2200      	movge	r2, #0
 8014792:	18ab      	adds	r3, r5, r2
 8014794:	e7e1      	b.n	801475a <__sccl+0x32>
 8014796:	4610      	mov	r0, r2
 8014798:	e7da      	b.n	8014750 <__sccl+0x28>

0801479a <__submore>:
 801479a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801479e:	460c      	mov	r4, r1
 80147a0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80147a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80147a6:	4299      	cmp	r1, r3
 80147a8:	d11d      	bne.n	80147e6 <__submore+0x4c>
 80147aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80147ae:	f7fd fedb 	bl	8012568 <_malloc_r>
 80147b2:	b918      	cbnz	r0, 80147bc <__submore+0x22>
 80147b4:	f04f 30ff 	mov.w	r0, #4294967295
 80147b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80147c0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80147c2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80147c6:	6360      	str	r0, [r4, #52]	@ 0x34
 80147c8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80147cc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80147d0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80147d4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80147d8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80147dc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80147e0:	6020      	str	r0, [r4, #0]
 80147e2:	2000      	movs	r0, #0
 80147e4:	e7e8      	b.n	80147b8 <__submore+0x1e>
 80147e6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80147e8:	0077      	lsls	r7, r6, #1
 80147ea:	463a      	mov	r2, r7
 80147ec:	f000 fbc1 	bl	8014f72 <_realloc_r>
 80147f0:	4605      	mov	r5, r0
 80147f2:	2800      	cmp	r0, #0
 80147f4:	d0de      	beq.n	80147b4 <__submore+0x1a>
 80147f6:	eb00 0806 	add.w	r8, r0, r6
 80147fa:	4601      	mov	r1, r0
 80147fc:	4632      	mov	r2, r6
 80147fe:	4640      	mov	r0, r8
 8014800:	f7fc ffdb 	bl	80117ba <memcpy>
 8014804:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8014808:	f8c4 8000 	str.w	r8, [r4]
 801480c:	e7e9      	b.n	80147e2 <__submore+0x48>

0801480e <memmove>:
 801480e:	4288      	cmp	r0, r1
 8014810:	b510      	push	{r4, lr}
 8014812:	eb01 0402 	add.w	r4, r1, r2
 8014816:	d902      	bls.n	801481e <memmove+0x10>
 8014818:	4284      	cmp	r4, r0
 801481a:	4623      	mov	r3, r4
 801481c:	d807      	bhi.n	801482e <memmove+0x20>
 801481e:	1e43      	subs	r3, r0, #1
 8014820:	42a1      	cmp	r1, r4
 8014822:	d008      	beq.n	8014836 <memmove+0x28>
 8014824:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014828:	f803 2f01 	strb.w	r2, [r3, #1]!
 801482c:	e7f8      	b.n	8014820 <memmove+0x12>
 801482e:	4402      	add	r2, r0
 8014830:	4601      	mov	r1, r0
 8014832:	428a      	cmp	r2, r1
 8014834:	d100      	bne.n	8014838 <memmove+0x2a>
 8014836:	bd10      	pop	{r4, pc}
 8014838:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801483c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014840:	e7f7      	b.n	8014832 <memmove+0x24>
	...

08014844 <_sbrk_r>:
 8014844:	b538      	push	{r3, r4, r5, lr}
 8014846:	4d06      	ldr	r5, [pc, #24]	@ (8014860 <_sbrk_r+0x1c>)
 8014848:	2300      	movs	r3, #0
 801484a:	4604      	mov	r4, r0
 801484c:	4608      	mov	r0, r1
 801484e:	602b      	str	r3, [r5, #0]
 8014850:	f7ef fc58 	bl	8004104 <_sbrk>
 8014854:	1c43      	adds	r3, r0, #1
 8014856:	d102      	bne.n	801485e <_sbrk_r+0x1a>
 8014858:	682b      	ldr	r3, [r5, #0]
 801485a:	b103      	cbz	r3, 801485e <_sbrk_r+0x1a>
 801485c:	6023      	str	r3, [r4, #0]
 801485e:	bd38      	pop	{r3, r4, r5, pc}
 8014860:	20002688 	.word	0x20002688
 8014864:	00000000 	.word	0x00000000

08014868 <nan>:
 8014868:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8014870 <nan+0x8>
 801486c:	4770      	bx	lr
 801486e:	bf00      	nop
 8014870:	00000000 	.word	0x00000000
 8014874:	7ff80000 	.word	0x7ff80000

08014878 <__assert_func>:
 8014878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801487a:	4614      	mov	r4, r2
 801487c:	461a      	mov	r2, r3
 801487e:	4b09      	ldr	r3, [pc, #36]	@ (80148a4 <__assert_func+0x2c>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	4605      	mov	r5, r0
 8014884:	68d8      	ldr	r0, [r3, #12]
 8014886:	b954      	cbnz	r4, 801489e <__assert_func+0x26>
 8014888:	4b07      	ldr	r3, [pc, #28]	@ (80148a8 <__assert_func+0x30>)
 801488a:	461c      	mov	r4, r3
 801488c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014890:	9100      	str	r1, [sp, #0]
 8014892:	462b      	mov	r3, r5
 8014894:	4905      	ldr	r1, [pc, #20]	@ (80148ac <__assert_func+0x34>)
 8014896:	f000 fc19 	bl	80150cc <fiprintf>
 801489a:	f000 fc29 	bl	80150f0 <abort>
 801489e:	4b04      	ldr	r3, [pc, #16]	@ (80148b0 <__assert_func+0x38>)
 80148a0:	e7f4      	b.n	801488c <__assert_func+0x14>
 80148a2:	bf00      	nop
 80148a4:	200001bc 	.word	0x200001bc
 80148a8:	08017230 	.word	0x08017230
 80148ac:	08017202 	.word	0x08017202
 80148b0:	080171f5 	.word	0x080171f5

080148b4 <_calloc_r>:
 80148b4:	b570      	push	{r4, r5, r6, lr}
 80148b6:	fba1 5402 	umull	r5, r4, r1, r2
 80148ba:	b93c      	cbnz	r4, 80148cc <_calloc_r+0x18>
 80148bc:	4629      	mov	r1, r5
 80148be:	f7fd fe53 	bl	8012568 <_malloc_r>
 80148c2:	4606      	mov	r6, r0
 80148c4:	b928      	cbnz	r0, 80148d2 <_calloc_r+0x1e>
 80148c6:	2600      	movs	r6, #0
 80148c8:	4630      	mov	r0, r6
 80148ca:	bd70      	pop	{r4, r5, r6, pc}
 80148cc:	220c      	movs	r2, #12
 80148ce:	6002      	str	r2, [r0, #0]
 80148d0:	e7f9      	b.n	80148c6 <_calloc_r+0x12>
 80148d2:	462a      	mov	r2, r5
 80148d4:	4621      	mov	r1, r4
 80148d6:	f7fc fede 	bl	8011696 <memset>
 80148da:	e7f5      	b.n	80148c8 <_calloc_r+0x14>

080148dc <rshift>:
 80148dc:	6903      	ldr	r3, [r0, #16]
 80148de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80148e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80148e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80148ea:	f100 0414 	add.w	r4, r0, #20
 80148ee:	dd45      	ble.n	801497c <rshift+0xa0>
 80148f0:	f011 011f 	ands.w	r1, r1, #31
 80148f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80148f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80148fc:	d10c      	bne.n	8014918 <rshift+0x3c>
 80148fe:	f100 0710 	add.w	r7, r0, #16
 8014902:	4629      	mov	r1, r5
 8014904:	42b1      	cmp	r1, r6
 8014906:	d334      	bcc.n	8014972 <rshift+0x96>
 8014908:	1a9b      	subs	r3, r3, r2
 801490a:	009b      	lsls	r3, r3, #2
 801490c:	1eea      	subs	r2, r5, #3
 801490e:	4296      	cmp	r6, r2
 8014910:	bf38      	it	cc
 8014912:	2300      	movcc	r3, #0
 8014914:	4423      	add	r3, r4
 8014916:	e015      	b.n	8014944 <rshift+0x68>
 8014918:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801491c:	f1c1 0820 	rsb	r8, r1, #32
 8014920:	40cf      	lsrs	r7, r1
 8014922:	f105 0e04 	add.w	lr, r5, #4
 8014926:	46a1      	mov	r9, r4
 8014928:	4576      	cmp	r6, lr
 801492a:	46f4      	mov	ip, lr
 801492c:	d815      	bhi.n	801495a <rshift+0x7e>
 801492e:	1a9a      	subs	r2, r3, r2
 8014930:	0092      	lsls	r2, r2, #2
 8014932:	3a04      	subs	r2, #4
 8014934:	3501      	adds	r5, #1
 8014936:	42ae      	cmp	r6, r5
 8014938:	bf38      	it	cc
 801493a:	2200      	movcc	r2, #0
 801493c:	18a3      	adds	r3, r4, r2
 801493e:	50a7      	str	r7, [r4, r2]
 8014940:	b107      	cbz	r7, 8014944 <rshift+0x68>
 8014942:	3304      	adds	r3, #4
 8014944:	1b1a      	subs	r2, r3, r4
 8014946:	42a3      	cmp	r3, r4
 8014948:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801494c:	bf08      	it	eq
 801494e:	2300      	moveq	r3, #0
 8014950:	6102      	str	r2, [r0, #16]
 8014952:	bf08      	it	eq
 8014954:	6143      	streq	r3, [r0, #20]
 8014956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801495a:	f8dc c000 	ldr.w	ip, [ip]
 801495e:	fa0c fc08 	lsl.w	ip, ip, r8
 8014962:	ea4c 0707 	orr.w	r7, ip, r7
 8014966:	f849 7b04 	str.w	r7, [r9], #4
 801496a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801496e:	40cf      	lsrs	r7, r1
 8014970:	e7da      	b.n	8014928 <rshift+0x4c>
 8014972:	f851 cb04 	ldr.w	ip, [r1], #4
 8014976:	f847 cf04 	str.w	ip, [r7, #4]!
 801497a:	e7c3      	b.n	8014904 <rshift+0x28>
 801497c:	4623      	mov	r3, r4
 801497e:	e7e1      	b.n	8014944 <rshift+0x68>

08014980 <__hexdig_fun>:
 8014980:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8014984:	2b09      	cmp	r3, #9
 8014986:	d802      	bhi.n	801498e <__hexdig_fun+0xe>
 8014988:	3820      	subs	r0, #32
 801498a:	b2c0      	uxtb	r0, r0
 801498c:	4770      	bx	lr
 801498e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8014992:	2b05      	cmp	r3, #5
 8014994:	d801      	bhi.n	801499a <__hexdig_fun+0x1a>
 8014996:	3847      	subs	r0, #71	@ 0x47
 8014998:	e7f7      	b.n	801498a <__hexdig_fun+0xa>
 801499a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801499e:	2b05      	cmp	r3, #5
 80149a0:	d801      	bhi.n	80149a6 <__hexdig_fun+0x26>
 80149a2:	3827      	subs	r0, #39	@ 0x27
 80149a4:	e7f1      	b.n	801498a <__hexdig_fun+0xa>
 80149a6:	2000      	movs	r0, #0
 80149a8:	4770      	bx	lr
	...

080149ac <__gethex>:
 80149ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149b0:	b085      	sub	sp, #20
 80149b2:	468a      	mov	sl, r1
 80149b4:	9302      	str	r3, [sp, #8]
 80149b6:	680b      	ldr	r3, [r1, #0]
 80149b8:	9001      	str	r0, [sp, #4]
 80149ba:	4690      	mov	r8, r2
 80149bc:	1c9c      	adds	r4, r3, #2
 80149be:	46a1      	mov	r9, r4
 80149c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80149c4:	2830      	cmp	r0, #48	@ 0x30
 80149c6:	d0fa      	beq.n	80149be <__gethex+0x12>
 80149c8:	eba9 0303 	sub.w	r3, r9, r3
 80149cc:	f1a3 0b02 	sub.w	fp, r3, #2
 80149d0:	f7ff ffd6 	bl	8014980 <__hexdig_fun>
 80149d4:	4605      	mov	r5, r0
 80149d6:	2800      	cmp	r0, #0
 80149d8:	d168      	bne.n	8014aac <__gethex+0x100>
 80149da:	49a0      	ldr	r1, [pc, #640]	@ (8014c5c <__gethex+0x2b0>)
 80149dc:	2201      	movs	r2, #1
 80149de:	4648      	mov	r0, r9
 80149e0:	f7fc fe61 	bl	80116a6 <strncmp>
 80149e4:	4607      	mov	r7, r0
 80149e6:	2800      	cmp	r0, #0
 80149e8:	d167      	bne.n	8014aba <__gethex+0x10e>
 80149ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 80149ee:	4626      	mov	r6, r4
 80149f0:	f7ff ffc6 	bl	8014980 <__hexdig_fun>
 80149f4:	2800      	cmp	r0, #0
 80149f6:	d062      	beq.n	8014abe <__gethex+0x112>
 80149f8:	4623      	mov	r3, r4
 80149fa:	7818      	ldrb	r0, [r3, #0]
 80149fc:	2830      	cmp	r0, #48	@ 0x30
 80149fe:	4699      	mov	r9, r3
 8014a00:	f103 0301 	add.w	r3, r3, #1
 8014a04:	d0f9      	beq.n	80149fa <__gethex+0x4e>
 8014a06:	f7ff ffbb 	bl	8014980 <__hexdig_fun>
 8014a0a:	fab0 f580 	clz	r5, r0
 8014a0e:	096d      	lsrs	r5, r5, #5
 8014a10:	f04f 0b01 	mov.w	fp, #1
 8014a14:	464a      	mov	r2, r9
 8014a16:	4616      	mov	r6, r2
 8014a18:	3201      	adds	r2, #1
 8014a1a:	7830      	ldrb	r0, [r6, #0]
 8014a1c:	f7ff ffb0 	bl	8014980 <__hexdig_fun>
 8014a20:	2800      	cmp	r0, #0
 8014a22:	d1f8      	bne.n	8014a16 <__gethex+0x6a>
 8014a24:	498d      	ldr	r1, [pc, #564]	@ (8014c5c <__gethex+0x2b0>)
 8014a26:	2201      	movs	r2, #1
 8014a28:	4630      	mov	r0, r6
 8014a2a:	f7fc fe3c 	bl	80116a6 <strncmp>
 8014a2e:	2800      	cmp	r0, #0
 8014a30:	d13f      	bne.n	8014ab2 <__gethex+0x106>
 8014a32:	b944      	cbnz	r4, 8014a46 <__gethex+0x9a>
 8014a34:	1c74      	adds	r4, r6, #1
 8014a36:	4622      	mov	r2, r4
 8014a38:	4616      	mov	r6, r2
 8014a3a:	3201      	adds	r2, #1
 8014a3c:	7830      	ldrb	r0, [r6, #0]
 8014a3e:	f7ff ff9f 	bl	8014980 <__hexdig_fun>
 8014a42:	2800      	cmp	r0, #0
 8014a44:	d1f8      	bne.n	8014a38 <__gethex+0x8c>
 8014a46:	1ba4      	subs	r4, r4, r6
 8014a48:	00a7      	lsls	r7, r4, #2
 8014a4a:	7833      	ldrb	r3, [r6, #0]
 8014a4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8014a50:	2b50      	cmp	r3, #80	@ 0x50
 8014a52:	d13e      	bne.n	8014ad2 <__gethex+0x126>
 8014a54:	7873      	ldrb	r3, [r6, #1]
 8014a56:	2b2b      	cmp	r3, #43	@ 0x2b
 8014a58:	d033      	beq.n	8014ac2 <__gethex+0x116>
 8014a5a:	2b2d      	cmp	r3, #45	@ 0x2d
 8014a5c:	d034      	beq.n	8014ac8 <__gethex+0x11c>
 8014a5e:	1c71      	adds	r1, r6, #1
 8014a60:	2400      	movs	r4, #0
 8014a62:	7808      	ldrb	r0, [r1, #0]
 8014a64:	f7ff ff8c 	bl	8014980 <__hexdig_fun>
 8014a68:	1e43      	subs	r3, r0, #1
 8014a6a:	b2db      	uxtb	r3, r3
 8014a6c:	2b18      	cmp	r3, #24
 8014a6e:	d830      	bhi.n	8014ad2 <__gethex+0x126>
 8014a70:	f1a0 0210 	sub.w	r2, r0, #16
 8014a74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014a78:	f7ff ff82 	bl	8014980 <__hexdig_fun>
 8014a7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8014a80:	fa5f fc8c 	uxtb.w	ip, ip
 8014a84:	f1bc 0f18 	cmp.w	ip, #24
 8014a88:	f04f 030a 	mov.w	r3, #10
 8014a8c:	d91e      	bls.n	8014acc <__gethex+0x120>
 8014a8e:	b104      	cbz	r4, 8014a92 <__gethex+0xe6>
 8014a90:	4252      	negs	r2, r2
 8014a92:	4417      	add	r7, r2
 8014a94:	f8ca 1000 	str.w	r1, [sl]
 8014a98:	b1ed      	cbz	r5, 8014ad6 <__gethex+0x12a>
 8014a9a:	f1bb 0f00 	cmp.w	fp, #0
 8014a9e:	bf0c      	ite	eq
 8014aa0:	2506      	moveq	r5, #6
 8014aa2:	2500      	movne	r5, #0
 8014aa4:	4628      	mov	r0, r5
 8014aa6:	b005      	add	sp, #20
 8014aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aac:	2500      	movs	r5, #0
 8014aae:	462c      	mov	r4, r5
 8014ab0:	e7b0      	b.n	8014a14 <__gethex+0x68>
 8014ab2:	2c00      	cmp	r4, #0
 8014ab4:	d1c7      	bne.n	8014a46 <__gethex+0x9a>
 8014ab6:	4627      	mov	r7, r4
 8014ab8:	e7c7      	b.n	8014a4a <__gethex+0x9e>
 8014aba:	464e      	mov	r6, r9
 8014abc:	462f      	mov	r7, r5
 8014abe:	2501      	movs	r5, #1
 8014ac0:	e7c3      	b.n	8014a4a <__gethex+0x9e>
 8014ac2:	2400      	movs	r4, #0
 8014ac4:	1cb1      	adds	r1, r6, #2
 8014ac6:	e7cc      	b.n	8014a62 <__gethex+0xb6>
 8014ac8:	2401      	movs	r4, #1
 8014aca:	e7fb      	b.n	8014ac4 <__gethex+0x118>
 8014acc:	fb03 0002 	mla	r0, r3, r2, r0
 8014ad0:	e7ce      	b.n	8014a70 <__gethex+0xc4>
 8014ad2:	4631      	mov	r1, r6
 8014ad4:	e7de      	b.n	8014a94 <__gethex+0xe8>
 8014ad6:	eba6 0309 	sub.w	r3, r6, r9
 8014ada:	3b01      	subs	r3, #1
 8014adc:	4629      	mov	r1, r5
 8014ade:	2b07      	cmp	r3, #7
 8014ae0:	dc0a      	bgt.n	8014af8 <__gethex+0x14c>
 8014ae2:	9801      	ldr	r0, [sp, #4]
 8014ae4:	f7fd fdcc 	bl	8012680 <_Balloc>
 8014ae8:	4604      	mov	r4, r0
 8014aea:	b940      	cbnz	r0, 8014afe <__gethex+0x152>
 8014aec:	4b5c      	ldr	r3, [pc, #368]	@ (8014c60 <__gethex+0x2b4>)
 8014aee:	4602      	mov	r2, r0
 8014af0:	21e4      	movs	r1, #228	@ 0xe4
 8014af2:	485c      	ldr	r0, [pc, #368]	@ (8014c64 <__gethex+0x2b8>)
 8014af4:	f7ff fec0 	bl	8014878 <__assert_func>
 8014af8:	3101      	adds	r1, #1
 8014afa:	105b      	asrs	r3, r3, #1
 8014afc:	e7ef      	b.n	8014ade <__gethex+0x132>
 8014afe:	f100 0a14 	add.w	sl, r0, #20
 8014b02:	2300      	movs	r3, #0
 8014b04:	4655      	mov	r5, sl
 8014b06:	469b      	mov	fp, r3
 8014b08:	45b1      	cmp	r9, r6
 8014b0a:	d337      	bcc.n	8014b7c <__gethex+0x1d0>
 8014b0c:	f845 bb04 	str.w	fp, [r5], #4
 8014b10:	eba5 050a 	sub.w	r5, r5, sl
 8014b14:	10ad      	asrs	r5, r5, #2
 8014b16:	6125      	str	r5, [r4, #16]
 8014b18:	4658      	mov	r0, fp
 8014b1a:	f7fd fea3 	bl	8012864 <__hi0bits>
 8014b1e:	016d      	lsls	r5, r5, #5
 8014b20:	f8d8 6000 	ldr.w	r6, [r8]
 8014b24:	1a2d      	subs	r5, r5, r0
 8014b26:	42b5      	cmp	r5, r6
 8014b28:	dd54      	ble.n	8014bd4 <__gethex+0x228>
 8014b2a:	1bad      	subs	r5, r5, r6
 8014b2c:	4629      	mov	r1, r5
 8014b2e:	4620      	mov	r0, r4
 8014b30:	f7fe fa37 	bl	8012fa2 <__any_on>
 8014b34:	4681      	mov	r9, r0
 8014b36:	b178      	cbz	r0, 8014b58 <__gethex+0x1ac>
 8014b38:	1e6b      	subs	r3, r5, #1
 8014b3a:	1159      	asrs	r1, r3, #5
 8014b3c:	f003 021f 	and.w	r2, r3, #31
 8014b40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014b44:	f04f 0901 	mov.w	r9, #1
 8014b48:	fa09 f202 	lsl.w	r2, r9, r2
 8014b4c:	420a      	tst	r2, r1
 8014b4e:	d003      	beq.n	8014b58 <__gethex+0x1ac>
 8014b50:	454b      	cmp	r3, r9
 8014b52:	dc36      	bgt.n	8014bc2 <__gethex+0x216>
 8014b54:	f04f 0902 	mov.w	r9, #2
 8014b58:	4629      	mov	r1, r5
 8014b5a:	4620      	mov	r0, r4
 8014b5c:	f7ff febe 	bl	80148dc <rshift>
 8014b60:	442f      	add	r7, r5
 8014b62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014b66:	42bb      	cmp	r3, r7
 8014b68:	da42      	bge.n	8014bf0 <__gethex+0x244>
 8014b6a:	9801      	ldr	r0, [sp, #4]
 8014b6c:	4621      	mov	r1, r4
 8014b6e:	f7fd fdc7 	bl	8012700 <_Bfree>
 8014b72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014b74:	2300      	movs	r3, #0
 8014b76:	6013      	str	r3, [r2, #0]
 8014b78:	25a3      	movs	r5, #163	@ 0xa3
 8014b7a:	e793      	b.n	8014aa4 <__gethex+0xf8>
 8014b7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8014b80:	2a2e      	cmp	r2, #46	@ 0x2e
 8014b82:	d012      	beq.n	8014baa <__gethex+0x1fe>
 8014b84:	2b20      	cmp	r3, #32
 8014b86:	d104      	bne.n	8014b92 <__gethex+0x1e6>
 8014b88:	f845 bb04 	str.w	fp, [r5], #4
 8014b8c:	f04f 0b00 	mov.w	fp, #0
 8014b90:	465b      	mov	r3, fp
 8014b92:	7830      	ldrb	r0, [r6, #0]
 8014b94:	9303      	str	r3, [sp, #12]
 8014b96:	f7ff fef3 	bl	8014980 <__hexdig_fun>
 8014b9a:	9b03      	ldr	r3, [sp, #12]
 8014b9c:	f000 000f 	and.w	r0, r0, #15
 8014ba0:	4098      	lsls	r0, r3
 8014ba2:	ea4b 0b00 	orr.w	fp, fp, r0
 8014ba6:	3304      	adds	r3, #4
 8014ba8:	e7ae      	b.n	8014b08 <__gethex+0x15c>
 8014baa:	45b1      	cmp	r9, r6
 8014bac:	d8ea      	bhi.n	8014b84 <__gethex+0x1d8>
 8014bae:	492b      	ldr	r1, [pc, #172]	@ (8014c5c <__gethex+0x2b0>)
 8014bb0:	9303      	str	r3, [sp, #12]
 8014bb2:	2201      	movs	r2, #1
 8014bb4:	4630      	mov	r0, r6
 8014bb6:	f7fc fd76 	bl	80116a6 <strncmp>
 8014bba:	9b03      	ldr	r3, [sp, #12]
 8014bbc:	2800      	cmp	r0, #0
 8014bbe:	d1e1      	bne.n	8014b84 <__gethex+0x1d8>
 8014bc0:	e7a2      	b.n	8014b08 <__gethex+0x15c>
 8014bc2:	1ea9      	subs	r1, r5, #2
 8014bc4:	4620      	mov	r0, r4
 8014bc6:	f7fe f9ec 	bl	8012fa2 <__any_on>
 8014bca:	2800      	cmp	r0, #0
 8014bcc:	d0c2      	beq.n	8014b54 <__gethex+0x1a8>
 8014bce:	f04f 0903 	mov.w	r9, #3
 8014bd2:	e7c1      	b.n	8014b58 <__gethex+0x1ac>
 8014bd4:	da09      	bge.n	8014bea <__gethex+0x23e>
 8014bd6:	1b75      	subs	r5, r6, r5
 8014bd8:	4621      	mov	r1, r4
 8014bda:	9801      	ldr	r0, [sp, #4]
 8014bdc:	462a      	mov	r2, r5
 8014bde:	f7fd ffa7 	bl	8012b30 <__lshift>
 8014be2:	1b7f      	subs	r7, r7, r5
 8014be4:	4604      	mov	r4, r0
 8014be6:	f100 0a14 	add.w	sl, r0, #20
 8014bea:	f04f 0900 	mov.w	r9, #0
 8014bee:	e7b8      	b.n	8014b62 <__gethex+0x1b6>
 8014bf0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8014bf4:	42bd      	cmp	r5, r7
 8014bf6:	dd6f      	ble.n	8014cd8 <__gethex+0x32c>
 8014bf8:	1bed      	subs	r5, r5, r7
 8014bfa:	42ae      	cmp	r6, r5
 8014bfc:	dc34      	bgt.n	8014c68 <__gethex+0x2bc>
 8014bfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014c02:	2b02      	cmp	r3, #2
 8014c04:	d022      	beq.n	8014c4c <__gethex+0x2a0>
 8014c06:	2b03      	cmp	r3, #3
 8014c08:	d024      	beq.n	8014c54 <__gethex+0x2a8>
 8014c0a:	2b01      	cmp	r3, #1
 8014c0c:	d115      	bne.n	8014c3a <__gethex+0x28e>
 8014c0e:	42ae      	cmp	r6, r5
 8014c10:	d113      	bne.n	8014c3a <__gethex+0x28e>
 8014c12:	2e01      	cmp	r6, #1
 8014c14:	d10b      	bne.n	8014c2e <__gethex+0x282>
 8014c16:	9a02      	ldr	r2, [sp, #8]
 8014c18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014c1c:	6013      	str	r3, [r2, #0]
 8014c1e:	2301      	movs	r3, #1
 8014c20:	6123      	str	r3, [r4, #16]
 8014c22:	f8ca 3000 	str.w	r3, [sl]
 8014c26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c28:	2562      	movs	r5, #98	@ 0x62
 8014c2a:	601c      	str	r4, [r3, #0]
 8014c2c:	e73a      	b.n	8014aa4 <__gethex+0xf8>
 8014c2e:	1e71      	subs	r1, r6, #1
 8014c30:	4620      	mov	r0, r4
 8014c32:	f7fe f9b6 	bl	8012fa2 <__any_on>
 8014c36:	2800      	cmp	r0, #0
 8014c38:	d1ed      	bne.n	8014c16 <__gethex+0x26a>
 8014c3a:	9801      	ldr	r0, [sp, #4]
 8014c3c:	4621      	mov	r1, r4
 8014c3e:	f7fd fd5f 	bl	8012700 <_Bfree>
 8014c42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014c44:	2300      	movs	r3, #0
 8014c46:	6013      	str	r3, [r2, #0]
 8014c48:	2550      	movs	r5, #80	@ 0x50
 8014c4a:	e72b      	b.n	8014aa4 <__gethex+0xf8>
 8014c4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d1f3      	bne.n	8014c3a <__gethex+0x28e>
 8014c52:	e7e0      	b.n	8014c16 <__gethex+0x26a>
 8014c54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d1dd      	bne.n	8014c16 <__gethex+0x26a>
 8014c5a:	e7ee      	b.n	8014c3a <__gethex+0x28e>
 8014c5c:	08017068 	.word	0x08017068
 8014c60:	08016efb 	.word	0x08016efb
 8014c64:	08017231 	.word	0x08017231
 8014c68:	1e6f      	subs	r7, r5, #1
 8014c6a:	f1b9 0f00 	cmp.w	r9, #0
 8014c6e:	d130      	bne.n	8014cd2 <__gethex+0x326>
 8014c70:	b127      	cbz	r7, 8014c7c <__gethex+0x2d0>
 8014c72:	4639      	mov	r1, r7
 8014c74:	4620      	mov	r0, r4
 8014c76:	f7fe f994 	bl	8012fa2 <__any_on>
 8014c7a:	4681      	mov	r9, r0
 8014c7c:	117a      	asrs	r2, r7, #5
 8014c7e:	2301      	movs	r3, #1
 8014c80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8014c84:	f007 071f 	and.w	r7, r7, #31
 8014c88:	40bb      	lsls	r3, r7
 8014c8a:	4213      	tst	r3, r2
 8014c8c:	4629      	mov	r1, r5
 8014c8e:	4620      	mov	r0, r4
 8014c90:	bf18      	it	ne
 8014c92:	f049 0902 	orrne.w	r9, r9, #2
 8014c96:	f7ff fe21 	bl	80148dc <rshift>
 8014c9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8014c9e:	1b76      	subs	r6, r6, r5
 8014ca0:	2502      	movs	r5, #2
 8014ca2:	f1b9 0f00 	cmp.w	r9, #0
 8014ca6:	d047      	beq.n	8014d38 <__gethex+0x38c>
 8014ca8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014cac:	2b02      	cmp	r3, #2
 8014cae:	d015      	beq.n	8014cdc <__gethex+0x330>
 8014cb0:	2b03      	cmp	r3, #3
 8014cb2:	d017      	beq.n	8014ce4 <__gethex+0x338>
 8014cb4:	2b01      	cmp	r3, #1
 8014cb6:	d109      	bne.n	8014ccc <__gethex+0x320>
 8014cb8:	f019 0f02 	tst.w	r9, #2
 8014cbc:	d006      	beq.n	8014ccc <__gethex+0x320>
 8014cbe:	f8da 3000 	ldr.w	r3, [sl]
 8014cc2:	ea49 0903 	orr.w	r9, r9, r3
 8014cc6:	f019 0f01 	tst.w	r9, #1
 8014cca:	d10e      	bne.n	8014cea <__gethex+0x33e>
 8014ccc:	f045 0510 	orr.w	r5, r5, #16
 8014cd0:	e032      	b.n	8014d38 <__gethex+0x38c>
 8014cd2:	f04f 0901 	mov.w	r9, #1
 8014cd6:	e7d1      	b.n	8014c7c <__gethex+0x2d0>
 8014cd8:	2501      	movs	r5, #1
 8014cda:	e7e2      	b.n	8014ca2 <__gethex+0x2f6>
 8014cdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014cde:	f1c3 0301 	rsb	r3, r3, #1
 8014ce2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d0f0      	beq.n	8014ccc <__gethex+0x320>
 8014cea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8014cee:	f104 0314 	add.w	r3, r4, #20
 8014cf2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8014cf6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8014cfa:	f04f 0c00 	mov.w	ip, #0
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d04:	f1b2 3fff 	cmp.w	r2, #4294967295
 8014d08:	d01b      	beq.n	8014d42 <__gethex+0x396>
 8014d0a:	3201      	adds	r2, #1
 8014d0c:	6002      	str	r2, [r0, #0]
 8014d0e:	2d02      	cmp	r5, #2
 8014d10:	f104 0314 	add.w	r3, r4, #20
 8014d14:	d13c      	bne.n	8014d90 <__gethex+0x3e4>
 8014d16:	f8d8 2000 	ldr.w	r2, [r8]
 8014d1a:	3a01      	subs	r2, #1
 8014d1c:	42b2      	cmp	r2, r6
 8014d1e:	d109      	bne.n	8014d34 <__gethex+0x388>
 8014d20:	1171      	asrs	r1, r6, #5
 8014d22:	2201      	movs	r2, #1
 8014d24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014d28:	f006 061f 	and.w	r6, r6, #31
 8014d2c:	fa02 f606 	lsl.w	r6, r2, r6
 8014d30:	421e      	tst	r6, r3
 8014d32:	d13a      	bne.n	8014daa <__gethex+0x3fe>
 8014d34:	f045 0520 	orr.w	r5, r5, #32
 8014d38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014d3a:	601c      	str	r4, [r3, #0]
 8014d3c:	9b02      	ldr	r3, [sp, #8]
 8014d3e:	601f      	str	r7, [r3, #0]
 8014d40:	e6b0      	b.n	8014aa4 <__gethex+0xf8>
 8014d42:	4299      	cmp	r1, r3
 8014d44:	f843 cc04 	str.w	ip, [r3, #-4]
 8014d48:	d8d9      	bhi.n	8014cfe <__gethex+0x352>
 8014d4a:	68a3      	ldr	r3, [r4, #8]
 8014d4c:	459b      	cmp	fp, r3
 8014d4e:	db17      	blt.n	8014d80 <__gethex+0x3d4>
 8014d50:	6861      	ldr	r1, [r4, #4]
 8014d52:	9801      	ldr	r0, [sp, #4]
 8014d54:	3101      	adds	r1, #1
 8014d56:	f7fd fc93 	bl	8012680 <_Balloc>
 8014d5a:	4681      	mov	r9, r0
 8014d5c:	b918      	cbnz	r0, 8014d66 <__gethex+0x3ba>
 8014d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8014dc8 <__gethex+0x41c>)
 8014d60:	4602      	mov	r2, r0
 8014d62:	2184      	movs	r1, #132	@ 0x84
 8014d64:	e6c5      	b.n	8014af2 <__gethex+0x146>
 8014d66:	6922      	ldr	r2, [r4, #16]
 8014d68:	3202      	adds	r2, #2
 8014d6a:	f104 010c 	add.w	r1, r4, #12
 8014d6e:	0092      	lsls	r2, r2, #2
 8014d70:	300c      	adds	r0, #12
 8014d72:	f7fc fd22 	bl	80117ba <memcpy>
 8014d76:	4621      	mov	r1, r4
 8014d78:	9801      	ldr	r0, [sp, #4]
 8014d7a:	f7fd fcc1 	bl	8012700 <_Bfree>
 8014d7e:	464c      	mov	r4, r9
 8014d80:	6923      	ldr	r3, [r4, #16]
 8014d82:	1c5a      	adds	r2, r3, #1
 8014d84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8014d88:	6122      	str	r2, [r4, #16]
 8014d8a:	2201      	movs	r2, #1
 8014d8c:	615a      	str	r2, [r3, #20]
 8014d8e:	e7be      	b.n	8014d0e <__gethex+0x362>
 8014d90:	6922      	ldr	r2, [r4, #16]
 8014d92:	455a      	cmp	r2, fp
 8014d94:	dd0b      	ble.n	8014dae <__gethex+0x402>
 8014d96:	2101      	movs	r1, #1
 8014d98:	4620      	mov	r0, r4
 8014d9a:	f7ff fd9f 	bl	80148dc <rshift>
 8014d9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014da2:	3701      	adds	r7, #1
 8014da4:	42bb      	cmp	r3, r7
 8014da6:	f6ff aee0 	blt.w	8014b6a <__gethex+0x1be>
 8014daa:	2501      	movs	r5, #1
 8014dac:	e7c2      	b.n	8014d34 <__gethex+0x388>
 8014dae:	f016 061f 	ands.w	r6, r6, #31
 8014db2:	d0fa      	beq.n	8014daa <__gethex+0x3fe>
 8014db4:	4453      	add	r3, sl
 8014db6:	f1c6 0620 	rsb	r6, r6, #32
 8014dba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8014dbe:	f7fd fd51 	bl	8012864 <__hi0bits>
 8014dc2:	42b0      	cmp	r0, r6
 8014dc4:	dbe7      	blt.n	8014d96 <__gethex+0x3ea>
 8014dc6:	e7f0      	b.n	8014daa <__gethex+0x3fe>
 8014dc8:	08016efb 	.word	0x08016efb

08014dcc <L_shift>:
 8014dcc:	f1c2 0208 	rsb	r2, r2, #8
 8014dd0:	0092      	lsls	r2, r2, #2
 8014dd2:	b570      	push	{r4, r5, r6, lr}
 8014dd4:	f1c2 0620 	rsb	r6, r2, #32
 8014dd8:	6843      	ldr	r3, [r0, #4]
 8014dda:	6804      	ldr	r4, [r0, #0]
 8014ddc:	fa03 f506 	lsl.w	r5, r3, r6
 8014de0:	432c      	orrs	r4, r5
 8014de2:	40d3      	lsrs	r3, r2
 8014de4:	6004      	str	r4, [r0, #0]
 8014de6:	f840 3f04 	str.w	r3, [r0, #4]!
 8014dea:	4288      	cmp	r0, r1
 8014dec:	d3f4      	bcc.n	8014dd8 <L_shift+0xc>
 8014dee:	bd70      	pop	{r4, r5, r6, pc}

08014df0 <__match>:
 8014df0:	b530      	push	{r4, r5, lr}
 8014df2:	6803      	ldr	r3, [r0, #0]
 8014df4:	3301      	adds	r3, #1
 8014df6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014dfa:	b914      	cbnz	r4, 8014e02 <__match+0x12>
 8014dfc:	6003      	str	r3, [r0, #0]
 8014dfe:	2001      	movs	r0, #1
 8014e00:	bd30      	pop	{r4, r5, pc}
 8014e02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8014e0a:	2d19      	cmp	r5, #25
 8014e0c:	bf98      	it	ls
 8014e0e:	3220      	addls	r2, #32
 8014e10:	42a2      	cmp	r2, r4
 8014e12:	d0f0      	beq.n	8014df6 <__match+0x6>
 8014e14:	2000      	movs	r0, #0
 8014e16:	e7f3      	b.n	8014e00 <__match+0x10>

08014e18 <__hexnan>:
 8014e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e1c:	680b      	ldr	r3, [r1, #0]
 8014e1e:	6801      	ldr	r1, [r0, #0]
 8014e20:	115e      	asrs	r6, r3, #5
 8014e22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8014e26:	f013 031f 	ands.w	r3, r3, #31
 8014e2a:	b087      	sub	sp, #28
 8014e2c:	bf18      	it	ne
 8014e2e:	3604      	addne	r6, #4
 8014e30:	2500      	movs	r5, #0
 8014e32:	1f37      	subs	r7, r6, #4
 8014e34:	4682      	mov	sl, r0
 8014e36:	4690      	mov	r8, r2
 8014e38:	9301      	str	r3, [sp, #4]
 8014e3a:	f846 5c04 	str.w	r5, [r6, #-4]
 8014e3e:	46b9      	mov	r9, r7
 8014e40:	463c      	mov	r4, r7
 8014e42:	9502      	str	r5, [sp, #8]
 8014e44:	46ab      	mov	fp, r5
 8014e46:	784a      	ldrb	r2, [r1, #1]
 8014e48:	1c4b      	adds	r3, r1, #1
 8014e4a:	9303      	str	r3, [sp, #12]
 8014e4c:	b342      	cbz	r2, 8014ea0 <__hexnan+0x88>
 8014e4e:	4610      	mov	r0, r2
 8014e50:	9105      	str	r1, [sp, #20]
 8014e52:	9204      	str	r2, [sp, #16]
 8014e54:	f7ff fd94 	bl	8014980 <__hexdig_fun>
 8014e58:	2800      	cmp	r0, #0
 8014e5a:	d151      	bne.n	8014f00 <__hexnan+0xe8>
 8014e5c:	9a04      	ldr	r2, [sp, #16]
 8014e5e:	9905      	ldr	r1, [sp, #20]
 8014e60:	2a20      	cmp	r2, #32
 8014e62:	d818      	bhi.n	8014e96 <__hexnan+0x7e>
 8014e64:	9b02      	ldr	r3, [sp, #8]
 8014e66:	459b      	cmp	fp, r3
 8014e68:	dd13      	ble.n	8014e92 <__hexnan+0x7a>
 8014e6a:	454c      	cmp	r4, r9
 8014e6c:	d206      	bcs.n	8014e7c <__hexnan+0x64>
 8014e6e:	2d07      	cmp	r5, #7
 8014e70:	dc04      	bgt.n	8014e7c <__hexnan+0x64>
 8014e72:	462a      	mov	r2, r5
 8014e74:	4649      	mov	r1, r9
 8014e76:	4620      	mov	r0, r4
 8014e78:	f7ff ffa8 	bl	8014dcc <L_shift>
 8014e7c:	4544      	cmp	r4, r8
 8014e7e:	d952      	bls.n	8014f26 <__hexnan+0x10e>
 8014e80:	2300      	movs	r3, #0
 8014e82:	f1a4 0904 	sub.w	r9, r4, #4
 8014e86:	f844 3c04 	str.w	r3, [r4, #-4]
 8014e8a:	f8cd b008 	str.w	fp, [sp, #8]
 8014e8e:	464c      	mov	r4, r9
 8014e90:	461d      	mov	r5, r3
 8014e92:	9903      	ldr	r1, [sp, #12]
 8014e94:	e7d7      	b.n	8014e46 <__hexnan+0x2e>
 8014e96:	2a29      	cmp	r2, #41	@ 0x29
 8014e98:	d157      	bne.n	8014f4a <__hexnan+0x132>
 8014e9a:	3102      	adds	r1, #2
 8014e9c:	f8ca 1000 	str.w	r1, [sl]
 8014ea0:	f1bb 0f00 	cmp.w	fp, #0
 8014ea4:	d051      	beq.n	8014f4a <__hexnan+0x132>
 8014ea6:	454c      	cmp	r4, r9
 8014ea8:	d206      	bcs.n	8014eb8 <__hexnan+0xa0>
 8014eaa:	2d07      	cmp	r5, #7
 8014eac:	dc04      	bgt.n	8014eb8 <__hexnan+0xa0>
 8014eae:	462a      	mov	r2, r5
 8014eb0:	4649      	mov	r1, r9
 8014eb2:	4620      	mov	r0, r4
 8014eb4:	f7ff ff8a 	bl	8014dcc <L_shift>
 8014eb8:	4544      	cmp	r4, r8
 8014eba:	d936      	bls.n	8014f2a <__hexnan+0x112>
 8014ebc:	f1a8 0204 	sub.w	r2, r8, #4
 8014ec0:	4623      	mov	r3, r4
 8014ec2:	f853 1b04 	ldr.w	r1, [r3], #4
 8014ec6:	f842 1f04 	str.w	r1, [r2, #4]!
 8014eca:	429f      	cmp	r7, r3
 8014ecc:	d2f9      	bcs.n	8014ec2 <__hexnan+0xaa>
 8014ece:	1b3b      	subs	r3, r7, r4
 8014ed0:	f023 0303 	bic.w	r3, r3, #3
 8014ed4:	3304      	adds	r3, #4
 8014ed6:	3401      	adds	r4, #1
 8014ed8:	3e03      	subs	r6, #3
 8014eda:	42b4      	cmp	r4, r6
 8014edc:	bf88      	it	hi
 8014ede:	2304      	movhi	r3, #4
 8014ee0:	4443      	add	r3, r8
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	f843 2b04 	str.w	r2, [r3], #4
 8014ee8:	429f      	cmp	r7, r3
 8014eea:	d2fb      	bcs.n	8014ee4 <__hexnan+0xcc>
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	b91b      	cbnz	r3, 8014ef8 <__hexnan+0xe0>
 8014ef0:	4547      	cmp	r7, r8
 8014ef2:	d128      	bne.n	8014f46 <__hexnan+0x12e>
 8014ef4:	2301      	movs	r3, #1
 8014ef6:	603b      	str	r3, [r7, #0]
 8014ef8:	2005      	movs	r0, #5
 8014efa:	b007      	add	sp, #28
 8014efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f00:	3501      	adds	r5, #1
 8014f02:	2d08      	cmp	r5, #8
 8014f04:	f10b 0b01 	add.w	fp, fp, #1
 8014f08:	dd06      	ble.n	8014f18 <__hexnan+0x100>
 8014f0a:	4544      	cmp	r4, r8
 8014f0c:	d9c1      	bls.n	8014e92 <__hexnan+0x7a>
 8014f0e:	2300      	movs	r3, #0
 8014f10:	f844 3c04 	str.w	r3, [r4, #-4]
 8014f14:	2501      	movs	r5, #1
 8014f16:	3c04      	subs	r4, #4
 8014f18:	6822      	ldr	r2, [r4, #0]
 8014f1a:	f000 000f 	and.w	r0, r0, #15
 8014f1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014f22:	6020      	str	r0, [r4, #0]
 8014f24:	e7b5      	b.n	8014e92 <__hexnan+0x7a>
 8014f26:	2508      	movs	r5, #8
 8014f28:	e7b3      	b.n	8014e92 <__hexnan+0x7a>
 8014f2a:	9b01      	ldr	r3, [sp, #4]
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d0dd      	beq.n	8014eec <__hexnan+0xd4>
 8014f30:	f1c3 0320 	rsb	r3, r3, #32
 8014f34:	f04f 32ff 	mov.w	r2, #4294967295
 8014f38:	40da      	lsrs	r2, r3
 8014f3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8014f3e:	4013      	ands	r3, r2
 8014f40:	f846 3c04 	str.w	r3, [r6, #-4]
 8014f44:	e7d2      	b.n	8014eec <__hexnan+0xd4>
 8014f46:	3f04      	subs	r7, #4
 8014f48:	e7d0      	b.n	8014eec <__hexnan+0xd4>
 8014f4a:	2004      	movs	r0, #4
 8014f4c:	e7d5      	b.n	8014efa <__hexnan+0xe2>

08014f4e <__ascii_mbtowc>:
 8014f4e:	b082      	sub	sp, #8
 8014f50:	b901      	cbnz	r1, 8014f54 <__ascii_mbtowc+0x6>
 8014f52:	a901      	add	r1, sp, #4
 8014f54:	b142      	cbz	r2, 8014f68 <__ascii_mbtowc+0x1a>
 8014f56:	b14b      	cbz	r3, 8014f6c <__ascii_mbtowc+0x1e>
 8014f58:	7813      	ldrb	r3, [r2, #0]
 8014f5a:	600b      	str	r3, [r1, #0]
 8014f5c:	7812      	ldrb	r2, [r2, #0]
 8014f5e:	1e10      	subs	r0, r2, #0
 8014f60:	bf18      	it	ne
 8014f62:	2001      	movne	r0, #1
 8014f64:	b002      	add	sp, #8
 8014f66:	4770      	bx	lr
 8014f68:	4610      	mov	r0, r2
 8014f6a:	e7fb      	b.n	8014f64 <__ascii_mbtowc+0x16>
 8014f6c:	f06f 0001 	mvn.w	r0, #1
 8014f70:	e7f8      	b.n	8014f64 <__ascii_mbtowc+0x16>

08014f72 <_realloc_r>:
 8014f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f76:	4680      	mov	r8, r0
 8014f78:	4615      	mov	r5, r2
 8014f7a:	460c      	mov	r4, r1
 8014f7c:	b921      	cbnz	r1, 8014f88 <_realloc_r+0x16>
 8014f7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014f82:	4611      	mov	r1, r2
 8014f84:	f7fd baf0 	b.w	8012568 <_malloc_r>
 8014f88:	b92a      	cbnz	r2, 8014f96 <_realloc_r+0x24>
 8014f8a:	f7fd fa79 	bl	8012480 <_free_r>
 8014f8e:	2400      	movs	r4, #0
 8014f90:	4620      	mov	r0, r4
 8014f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f96:	f000 f8b2 	bl	80150fe <_malloc_usable_size_r>
 8014f9a:	4285      	cmp	r5, r0
 8014f9c:	4606      	mov	r6, r0
 8014f9e:	d802      	bhi.n	8014fa6 <_realloc_r+0x34>
 8014fa0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014fa4:	d8f4      	bhi.n	8014f90 <_realloc_r+0x1e>
 8014fa6:	4629      	mov	r1, r5
 8014fa8:	4640      	mov	r0, r8
 8014faa:	f7fd fadd 	bl	8012568 <_malloc_r>
 8014fae:	4607      	mov	r7, r0
 8014fb0:	2800      	cmp	r0, #0
 8014fb2:	d0ec      	beq.n	8014f8e <_realloc_r+0x1c>
 8014fb4:	42b5      	cmp	r5, r6
 8014fb6:	462a      	mov	r2, r5
 8014fb8:	4621      	mov	r1, r4
 8014fba:	bf28      	it	cs
 8014fbc:	4632      	movcs	r2, r6
 8014fbe:	f7fc fbfc 	bl	80117ba <memcpy>
 8014fc2:	4621      	mov	r1, r4
 8014fc4:	4640      	mov	r0, r8
 8014fc6:	f7fd fa5b 	bl	8012480 <_free_r>
 8014fca:	463c      	mov	r4, r7
 8014fcc:	e7e0      	b.n	8014f90 <_realloc_r+0x1e>
	...

08014fd0 <_strtoul_l.constprop.0>:
 8014fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014fd4:	4e34      	ldr	r6, [pc, #208]	@ (80150a8 <_strtoul_l.constprop.0+0xd8>)
 8014fd6:	4686      	mov	lr, r0
 8014fd8:	460d      	mov	r5, r1
 8014fda:	4628      	mov	r0, r5
 8014fdc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014fe0:	5d37      	ldrb	r7, [r6, r4]
 8014fe2:	f017 0708 	ands.w	r7, r7, #8
 8014fe6:	d1f8      	bne.n	8014fda <_strtoul_l.constprop.0+0xa>
 8014fe8:	2c2d      	cmp	r4, #45	@ 0x2d
 8014fea:	d12f      	bne.n	801504c <_strtoul_l.constprop.0+0x7c>
 8014fec:	782c      	ldrb	r4, [r5, #0]
 8014fee:	2701      	movs	r7, #1
 8014ff0:	1c85      	adds	r5, r0, #2
 8014ff2:	f033 0010 	bics.w	r0, r3, #16
 8014ff6:	d109      	bne.n	801500c <_strtoul_l.constprop.0+0x3c>
 8014ff8:	2c30      	cmp	r4, #48	@ 0x30
 8014ffa:	d12c      	bne.n	8015056 <_strtoul_l.constprop.0+0x86>
 8014ffc:	7828      	ldrb	r0, [r5, #0]
 8014ffe:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8015002:	2858      	cmp	r0, #88	@ 0x58
 8015004:	d127      	bne.n	8015056 <_strtoul_l.constprop.0+0x86>
 8015006:	786c      	ldrb	r4, [r5, #1]
 8015008:	2310      	movs	r3, #16
 801500a:	3502      	adds	r5, #2
 801500c:	f04f 38ff 	mov.w	r8, #4294967295
 8015010:	2600      	movs	r6, #0
 8015012:	fbb8 f8f3 	udiv	r8, r8, r3
 8015016:	fb03 f908 	mul.w	r9, r3, r8
 801501a:	ea6f 0909 	mvn.w	r9, r9
 801501e:	4630      	mov	r0, r6
 8015020:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8015024:	f1bc 0f09 	cmp.w	ip, #9
 8015028:	d81c      	bhi.n	8015064 <_strtoul_l.constprop.0+0x94>
 801502a:	4664      	mov	r4, ip
 801502c:	42a3      	cmp	r3, r4
 801502e:	dd2a      	ble.n	8015086 <_strtoul_l.constprop.0+0xb6>
 8015030:	f1b6 3fff 	cmp.w	r6, #4294967295
 8015034:	d007      	beq.n	8015046 <_strtoul_l.constprop.0+0x76>
 8015036:	4580      	cmp	r8, r0
 8015038:	d322      	bcc.n	8015080 <_strtoul_l.constprop.0+0xb0>
 801503a:	d101      	bne.n	8015040 <_strtoul_l.constprop.0+0x70>
 801503c:	45a1      	cmp	r9, r4
 801503e:	db1f      	blt.n	8015080 <_strtoul_l.constprop.0+0xb0>
 8015040:	fb00 4003 	mla	r0, r0, r3, r4
 8015044:	2601      	movs	r6, #1
 8015046:	f815 4b01 	ldrb.w	r4, [r5], #1
 801504a:	e7e9      	b.n	8015020 <_strtoul_l.constprop.0+0x50>
 801504c:	2c2b      	cmp	r4, #43	@ 0x2b
 801504e:	bf04      	itt	eq
 8015050:	782c      	ldrbeq	r4, [r5, #0]
 8015052:	1c85      	addeq	r5, r0, #2
 8015054:	e7cd      	b.n	8014ff2 <_strtoul_l.constprop.0+0x22>
 8015056:	2b00      	cmp	r3, #0
 8015058:	d1d8      	bne.n	801500c <_strtoul_l.constprop.0+0x3c>
 801505a:	2c30      	cmp	r4, #48	@ 0x30
 801505c:	bf0c      	ite	eq
 801505e:	2308      	moveq	r3, #8
 8015060:	230a      	movne	r3, #10
 8015062:	e7d3      	b.n	801500c <_strtoul_l.constprop.0+0x3c>
 8015064:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015068:	f1bc 0f19 	cmp.w	ip, #25
 801506c:	d801      	bhi.n	8015072 <_strtoul_l.constprop.0+0xa2>
 801506e:	3c37      	subs	r4, #55	@ 0x37
 8015070:	e7dc      	b.n	801502c <_strtoul_l.constprop.0+0x5c>
 8015072:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8015076:	f1bc 0f19 	cmp.w	ip, #25
 801507a:	d804      	bhi.n	8015086 <_strtoul_l.constprop.0+0xb6>
 801507c:	3c57      	subs	r4, #87	@ 0x57
 801507e:	e7d5      	b.n	801502c <_strtoul_l.constprop.0+0x5c>
 8015080:	f04f 36ff 	mov.w	r6, #4294967295
 8015084:	e7df      	b.n	8015046 <_strtoul_l.constprop.0+0x76>
 8015086:	1c73      	adds	r3, r6, #1
 8015088:	d106      	bne.n	8015098 <_strtoul_l.constprop.0+0xc8>
 801508a:	2322      	movs	r3, #34	@ 0x22
 801508c:	f8ce 3000 	str.w	r3, [lr]
 8015090:	4630      	mov	r0, r6
 8015092:	b932      	cbnz	r2, 80150a2 <_strtoul_l.constprop.0+0xd2>
 8015094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015098:	b107      	cbz	r7, 801509c <_strtoul_l.constprop.0+0xcc>
 801509a:	4240      	negs	r0, r0
 801509c:	2a00      	cmp	r2, #0
 801509e:	d0f9      	beq.n	8015094 <_strtoul_l.constprop.0+0xc4>
 80150a0:	b106      	cbz	r6, 80150a4 <_strtoul_l.constprop.0+0xd4>
 80150a2:	1e69      	subs	r1, r5, #1
 80150a4:	6011      	str	r1, [r2, #0]
 80150a6:	e7f5      	b.n	8015094 <_strtoul_l.constprop.0+0xc4>
 80150a8:	080170c1 	.word	0x080170c1

080150ac <_strtoul_r>:
 80150ac:	f7ff bf90 	b.w	8014fd0 <_strtoul_l.constprop.0>

080150b0 <__ascii_wctomb>:
 80150b0:	4603      	mov	r3, r0
 80150b2:	4608      	mov	r0, r1
 80150b4:	b141      	cbz	r1, 80150c8 <__ascii_wctomb+0x18>
 80150b6:	2aff      	cmp	r2, #255	@ 0xff
 80150b8:	d904      	bls.n	80150c4 <__ascii_wctomb+0x14>
 80150ba:	228a      	movs	r2, #138	@ 0x8a
 80150bc:	601a      	str	r2, [r3, #0]
 80150be:	f04f 30ff 	mov.w	r0, #4294967295
 80150c2:	4770      	bx	lr
 80150c4:	700a      	strb	r2, [r1, #0]
 80150c6:	2001      	movs	r0, #1
 80150c8:	4770      	bx	lr
	...

080150cc <fiprintf>:
 80150cc:	b40e      	push	{r1, r2, r3}
 80150ce:	b503      	push	{r0, r1, lr}
 80150d0:	4601      	mov	r1, r0
 80150d2:	ab03      	add	r3, sp, #12
 80150d4:	4805      	ldr	r0, [pc, #20]	@ (80150ec <fiprintf+0x20>)
 80150d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80150da:	6800      	ldr	r0, [r0, #0]
 80150dc:	9301      	str	r3, [sp, #4]
 80150de:	f000 f83f 	bl	8015160 <_vfiprintf_r>
 80150e2:	b002      	add	sp, #8
 80150e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80150e8:	b003      	add	sp, #12
 80150ea:	4770      	bx	lr
 80150ec:	200001bc 	.word	0x200001bc

080150f0 <abort>:
 80150f0:	b508      	push	{r3, lr}
 80150f2:	2006      	movs	r0, #6
 80150f4:	f000 fa08 	bl	8015508 <raise>
 80150f8:	2001      	movs	r0, #1
 80150fa:	f7ee ff8b 	bl	8004014 <_exit>

080150fe <_malloc_usable_size_r>:
 80150fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015102:	1f18      	subs	r0, r3, #4
 8015104:	2b00      	cmp	r3, #0
 8015106:	bfbc      	itt	lt
 8015108:	580b      	ldrlt	r3, [r1, r0]
 801510a:	18c0      	addlt	r0, r0, r3
 801510c:	4770      	bx	lr

0801510e <__sfputc_r>:
 801510e:	6893      	ldr	r3, [r2, #8]
 8015110:	3b01      	subs	r3, #1
 8015112:	2b00      	cmp	r3, #0
 8015114:	b410      	push	{r4}
 8015116:	6093      	str	r3, [r2, #8]
 8015118:	da08      	bge.n	801512c <__sfputc_r+0x1e>
 801511a:	6994      	ldr	r4, [r2, #24]
 801511c:	42a3      	cmp	r3, r4
 801511e:	db01      	blt.n	8015124 <__sfputc_r+0x16>
 8015120:	290a      	cmp	r1, #10
 8015122:	d103      	bne.n	801512c <__sfputc_r+0x1e>
 8015124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015128:	f000 b932 	b.w	8015390 <__swbuf_r>
 801512c:	6813      	ldr	r3, [r2, #0]
 801512e:	1c58      	adds	r0, r3, #1
 8015130:	6010      	str	r0, [r2, #0]
 8015132:	7019      	strb	r1, [r3, #0]
 8015134:	4608      	mov	r0, r1
 8015136:	f85d 4b04 	ldr.w	r4, [sp], #4
 801513a:	4770      	bx	lr

0801513c <__sfputs_r>:
 801513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801513e:	4606      	mov	r6, r0
 8015140:	460f      	mov	r7, r1
 8015142:	4614      	mov	r4, r2
 8015144:	18d5      	adds	r5, r2, r3
 8015146:	42ac      	cmp	r4, r5
 8015148:	d101      	bne.n	801514e <__sfputs_r+0x12>
 801514a:	2000      	movs	r0, #0
 801514c:	e007      	b.n	801515e <__sfputs_r+0x22>
 801514e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015152:	463a      	mov	r2, r7
 8015154:	4630      	mov	r0, r6
 8015156:	f7ff ffda 	bl	801510e <__sfputc_r>
 801515a:	1c43      	adds	r3, r0, #1
 801515c:	d1f3      	bne.n	8015146 <__sfputs_r+0xa>
 801515e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015160 <_vfiprintf_r>:
 8015160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015164:	460d      	mov	r5, r1
 8015166:	b09d      	sub	sp, #116	@ 0x74
 8015168:	4614      	mov	r4, r2
 801516a:	4698      	mov	r8, r3
 801516c:	4606      	mov	r6, r0
 801516e:	b118      	cbz	r0, 8015178 <_vfiprintf_r+0x18>
 8015170:	6a03      	ldr	r3, [r0, #32]
 8015172:	b90b      	cbnz	r3, 8015178 <_vfiprintf_r+0x18>
 8015174:	f7fc f9ca 	bl	801150c <__sinit>
 8015178:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801517a:	07d9      	lsls	r1, r3, #31
 801517c:	d405      	bmi.n	801518a <_vfiprintf_r+0x2a>
 801517e:	89ab      	ldrh	r3, [r5, #12]
 8015180:	059a      	lsls	r2, r3, #22
 8015182:	d402      	bmi.n	801518a <_vfiprintf_r+0x2a>
 8015184:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015186:	f7fc fb16 	bl	80117b6 <__retarget_lock_acquire_recursive>
 801518a:	89ab      	ldrh	r3, [r5, #12]
 801518c:	071b      	lsls	r3, r3, #28
 801518e:	d501      	bpl.n	8015194 <_vfiprintf_r+0x34>
 8015190:	692b      	ldr	r3, [r5, #16]
 8015192:	b99b      	cbnz	r3, 80151bc <_vfiprintf_r+0x5c>
 8015194:	4629      	mov	r1, r5
 8015196:	4630      	mov	r0, r6
 8015198:	f000 f938 	bl	801540c <__swsetup_r>
 801519c:	b170      	cbz	r0, 80151bc <_vfiprintf_r+0x5c>
 801519e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80151a0:	07dc      	lsls	r4, r3, #31
 80151a2:	d504      	bpl.n	80151ae <_vfiprintf_r+0x4e>
 80151a4:	f04f 30ff 	mov.w	r0, #4294967295
 80151a8:	b01d      	add	sp, #116	@ 0x74
 80151aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151ae:	89ab      	ldrh	r3, [r5, #12]
 80151b0:	0598      	lsls	r0, r3, #22
 80151b2:	d4f7      	bmi.n	80151a4 <_vfiprintf_r+0x44>
 80151b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80151b6:	f7fc faff 	bl	80117b8 <__retarget_lock_release_recursive>
 80151ba:	e7f3      	b.n	80151a4 <_vfiprintf_r+0x44>
 80151bc:	2300      	movs	r3, #0
 80151be:	9309      	str	r3, [sp, #36]	@ 0x24
 80151c0:	2320      	movs	r3, #32
 80151c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80151c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80151ca:	2330      	movs	r3, #48	@ 0x30
 80151cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801537c <_vfiprintf_r+0x21c>
 80151d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80151d4:	f04f 0901 	mov.w	r9, #1
 80151d8:	4623      	mov	r3, r4
 80151da:	469a      	mov	sl, r3
 80151dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151e0:	b10a      	cbz	r2, 80151e6 <_vfiprintf_r+0x86>
 80151e2:	2a25      	cmp	r2, #37	@ 0x25
 80151e4:	d1f9      	bne.n	80151da <_vfiprintf_r+0x7a>
 80151e6:	ebba 0b04 	subs.w	fp, sl, r4
 80151ea:	d00b      	beq.n	8015204 <_vfiprintf_r+0xa4>
 80151ec:	465b      	mov	r3, fp
 80151ee:	4622      	mov	r2, r4
 80151f0:	4629      	mov	r1, r5
 80151f2:	4630      	mov	r0, r6
 80151f4:	f7ff ffa2 	bl	801513c <__sfputs_r>
 80151f8:	3001      	adds	r0, #1
 80151fa:	f000 80a7 	beq.w	801534c <_vfiprintf_r+0x1ec>
 80151fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015200:	445a      	add	r2, fp
 8015202:	9209      	str	r2, [sp, #36]	@ 0x24
 8015204:	f89a 3000 	ldrb.w	r3, [sl]
 8015208:	2b00      	cmp	r3, #0
 801520a:	f000 809f 	beq.w	801534c <_vfiprintf_r+0x1ec>
 801520e:	2300      	movs	r3, #0
 8015210:	f04f 32ff 	mov.w	r2, #4294967295
 8015214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015218:	f10a 0a01 	add.w	sl, sl, #1
 801521c:	9304      	str	r3, [sp, #16]
 801521e:	9307      	str	r3, [sp, #28]
 8015220:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015224:	931a      	str	r3, [sp, #104]	@ 0x68
 8015226:	4654      	mov	r4, sl
 8015228:	2205      	movs	r2, #5
 801522a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801522e:	4853      	ldr	r0, [pc, #332]	@ (801537c <_vfiprintf_r+0x21c>)
 8015230:	f7ea fff6 	bl	8000220 <memchr>
 8015234:	9a04      	ldr	r2, [sp, #16]
 8015236:	b9d8      	cbnz	r0, 8015270 <_vfiprintf_r+0x110>
 8015238:	06d1      	lsls	r1, r2, #27
 801523a:	bf44      	itt	mi
 801523c:	2320      	movmi	r3, #32
 801523e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015242:	0713      	lsls	r3, r2, #28
 8015244:	bf44      	itt	mi
 8015246:	232b      	movmi	r3, #43	@ 0x2b
 8015248:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801524c:	f89a 3000 	ldrb.w	r3, [sl]
 8015250:	2b2a      	cmp	r3, #42	@ 0x2a
 8015252:	d015      	beq.n	8015280 <_vfiprintf_r+0x120>
 8015254:	9a07      	ldr	r2, [sp, #28]
 8015256:	4654      	mov	r4, sl
 8015258:	2000      	movs	r0, #0
 801525a:	f04f 0c0a 	mov.w	ip, #10
 801525e:	4621      	mov	r1, r4
 8015260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015264:	3b30      	subs	r3, #48	@ 0x30
 8015266:	2b09      	cmp	r3, #9
 8015268:	d94b      	bls.n	8015302 <_vfiprintf_r+0x1a2>
 801526a:	b1b0      	cbz	r0, 801529a <_vfiprintf_r+0x13a>
 801526c:	9207      	str	r2, [sp, #28]
 801526e:	e014      	b.n	801529a <_vfiprintf_r+0x13a>
 8015270:	eba0 0308 	sub.w	r3, r0, r8
 8015274:	fa09 f303 	lsl.w	r3, r9, r3
 8015278:	4313      	orrs	r3, r2
 801527a:	9304      	str	r3, [sp, #16]
 801527c:	46a2      	mov	sl, r4
 801527e:	e7d2      	b.n	8015226 <_vfiprintf_r+0xc6>
 8015280:	9b03      	ldr	r3, [sp, #12]
 8015282:	1d19      	adds	r1, r3, #4
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	9103      	str	r1, [sp, #12]
 8015288:	2b00      	cmp	r3, #0
 801528a:	bfbb      	ittet	lt
 801528c:	425b      	neglt	r3, r3
 801528e:	f042 0202 	orrlt.w	r2, r2, #2
 8015292:	9307      	strge	r3, [sp, #28]
 8015294:	9307      	strlt	r3, [sp, #28]
 8015296:	bfb8      	it	lt
 8015298:	9204      	strlt	r2, [sp, #16]
 801529a:	7823      	ldrb	r3, [r4, #0]
 801529c:	2b2e      	cmp	r3, #46	@ 0x2e
 801529e:	d10a      	bne.n	80152b6 <_vfiprintf_r+0x156>
 80152a0:	7863      	ldrb	r3, [r4, #1]
 80152a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80152a4:	d132      	bne.n	801530c <_vfiprintf_r+0x1ac>
 80152a6:	9b03      	ldr	r3, [sp, #12]
 80152a8:	1d1a      	adds	r2, r3, #4
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	9203      	str	r2, [sp, #12]
 80152ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80152b2:	3402      	adds	r4, #2
 80152b4:	9305      	str	r3, [sp, #20]
 80152b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801538c <_vfiprintf_r+0x22c>
 80152ba:	7821      	ldrb	r1, [r4, #0]
 80152bc:	2203      	movs	r2, #3
 80152be:	4650      	mov	r0, sl
 80152c0:	f7ea ffae 	bl	8000220 <memchr>
 80152c4:	b138      	cbz	r0, 80152d6 <_vfiprintf_r+0x176>
 80152c6:	9b04      	ldr	r3, [sp, #16]
 80152c8:	eba0 000a 	sub.w	r0, r0, sl
 80152cc:	2240      	movs	r2, #64	@ 0x40
 80152ce:	4082      	lsls	r2, r0
 80152d0:	4313      	orrs	r3, r2
 80152d2:	3401      	adds	r4, #1
 80152d4:	9304      	str	r3, [sp, #16]
 80152d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80152da:	4829      	ldr	r0, [pc, #164]	@ (8015380 <_vfiprintf_r+0x220>)
 80152dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80152e0:	2206      	movs	r2, #6
 80152e2:	f7ea ff9d 	bl	8000220 <memchr>
 80152e6:	2800      	cmp	r0, #0
 80152e8:	d03f      	beq.n	801536a <_vfiprintf_r+0x20a>
 80152ea:	4b26      	ldr	r3, [pc, #152]	@ (8015384 <_vfiprintf_r+0x224>)
 80152ec:	bb1b      	cbnz	r3, 8015336 <_vfiprintf_r+0x1d6>
 80152ee:	9b03      	ldr	r3, [sp, #12]
 80152f0:	3307      	adds	r3, #7
 80152f2:	f023 0307 	bic.w	r3, r3, #7
 80152f6:	3308      	adds	r3, #8
 80152f8:	9303      	str	r3, [sp, #12]
 80152fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80152fc:	443b      	add	r3, r7
 80152fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8015300:	e76a      	b.n	80151d8 <_vfiprintf_r+0x78>
 8015302:	fb0c 3202 	mla	r2, ip, r2, r3
 8015306:	460c      	mov	r4, r1
 8015308:	2001      	movs	r0, #1
 801530a:	e7a8      	b.n	801525e <_vfiprintf_r+0xfe>
 801530c:	2300      	movs	r3, #0
 801530e:	3401      	adds	r4, #1
 8015310:	9305      	str	r3, [sp, #20]
 8015312:	4619      	mov	r1, r3
 8015314:	f04f 0c0a 	mov.w	ip, #10
 8015318:	4620      	mov	r0, r4
 801531a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801531e:	3a30      	subs	r2, #48	@ 0x30
 8015320:	2a09      	cmp	r2, #9
 8015322:	d903      	bls.n	801532c <_vfiprintf_r+0x1cc>
 8015324:	2b00      	cmp	r3, #0
 8015326:	d0c6      	beq.n	80152b6 <_vfiprintf_r+0x156>
 8015328:	9105      	str	r1, [sp, #20]
 801532a:	e7c4      	b.n	80152b6 <_vfiprintf_r+0x156>
 801532c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015330:	4604      	mov	r4, r0
 8015332:	2301      	movs	r3, #1
 8015334:	e7f0      	b.n	8015318 <_vfiprintf_r+0x1b8>
 8015336:	ab03      	add	r3, sp, #12
 8015338:	9300      	str	r3, [sp, #0]
 801533a:	462a      	mov	r2, r5
 801533c:	4b12      	ldr	r3, [pc, #72]	@ (8015388 <_vfiprintf_r+0x228>)
 801533e:	a904      	add	r1, sp, #16
 8015340:	4630      	mov	r0, r6
 8015342:	f7fb fa8b 	bl	801085c <_printf_float>
 8015346:	4607      	mov	r7, r0
 8015348:	1c78      	adds	r0, r7, #1
 801534a:	d1d6      	bne.n	80152fa <_vfiprintf_r+0x19a>
 801534c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801534e:	07d9      	lsls	r1, r3, #31
 8015350:	d405      	bmi.n	801535e <_vfiprintf_r+0x1fe>
 8015352:	89ab      	ldrh	r3, [r5, #12]
 8015354:	059a      	lsls	r2, r3, #22
 8015356:	d402      	bmi.n	801535e <_vfiprintf_r+0x1fe>
 8015358:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801535a:	f7fc fa2d 	bl	80117b8 <__retarget_lock_release_recursive>
 801535e:	89ab      	ldrh	r3, [r5, #12]
 8015360:	065b      	lsls	r3, r3, #25
 8015362:	f53f af1f 	bmi.w	80151a4 <_vfiprintf_r+0x44>
 8015366:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015368:	e71e      	b.n	80151a8 <_vfiprintf_r+0x48>
 801536a:	ab03      	add	r3, sp, #12
 801536c:	9300      	str	r3, [sp, #0]
 801536e:	462a      	mov	r2, r5
 8015370:	4b05      	ldr	r3, [pc, #20]	@ (8015388 <_vfiprintf_r+0x228>)
 8015372:	a904      	add	r1, sp, #16
 8015374:	4630      	mov	r0, r6
 8015376:	f7fb fd09 	bl	8010d8c <_printf_i>
 801537a:	e7e4      	b.n	8015346 <_vfiprintf_r+0x1e6>
 801537c:	080171c1 	.word	0x080171c1
 8015380:	080171cb 	.word	0x080171cb
 8015384:	0801085d 	.word	0x0801085d
 8015388:	0801513d 	.word	0x0801513d
 801538c:	080171c7 	.word	0x080171c7

08015390 <__swbuf_r>:
 8015390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015392:	460e      	mov	r6, r1
 8015394:	4614      	mov	r4, r2
 8015396:	4605      	mov	r5, r0
 8015398:	b118      	cbz	r0, 80153a2 <__swbuf_r+0x12>
 801539a:	6a03      	ldr	r3, [r0, #32]
 801539c:	b90b      	cbnz	r3, 80153a2 <__swbuf_r+0x12>
 801539e:	f7fc f8b5 	bl	801150c <__sinit>
 80153a2:	69a3      	ldr	r3, [r4, #24]
 80153a4:	60a3      	str	r3, [r4, #8]
 80153a6:	89a3      	ldrh	r3, [r4, #12]
 80153a8:	071a      	lsls	r2, r3, #28
 80153aa:	d501      	bpl.n	80153b0 <__swbuf_r+0x20>
 80153ac:	6923      	ldr	r3, [r4, #16]
 80153ae:	b943      	cbnz	r3, 80153c2 <__swbuf_r+0x32>
 80153b0:	4621      	mov	r1, r4
 80153b2:	4628      	mov	r0, r5
 80153b4:	f000 f82a 	bl	801540c <__swsetup_r>
 80153b8:	b118      	cbz	r0, 80153c2 <__swbuf_r+0x32>
 80153ba:	f04f 37ff 	mov.w	r7, #4294967295
 80153be:	4638      	mov	r0, r7
 80153c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153c2:	6823      	ldr	r3, [r4, #0]
 80153c4:	6922      	ldr	r2, [r4, #16]
 80153c6:	1a98      	subs	r0, r3, r2
 80153c8:	6963      	ldr	r3, [r4, #20]
 80153ca:	b2f6      	uxtb	r6, r6
 80153cc:	4283      	cmp	r3, r0
 80153ce:	4637      	mov	r7, r6
 80153d0:	dc05      	bgt.n	80153de <__swbuf_r+0x4e>
 80153d2:	4621      	mov	r1, r4
 80153d4:	4628      	mov	r0, r5
 80153d6:	f7ff f97f 	bl	80146d8 <_fflush_r>
 80153da:	2800      	cmp	r0, #0
 80153dc:	d1ed      	bne.n	80153ba <__swbuf_r+0x2a>
 80153de:	68a3      	ldr	r3, [r4, #8]
 80153e0:	3b01      	subs	r3, #1
 80153e2:	60a3      	str	r3, [r4, #8]
 80153e4:	6823      	ldr	r3, [r4, #0]
 80153e6:	1c5a      	adds	r2, r3, #1
 80153e8:	6022      	str	r2, [r4, #0]
 80153ea:	701e      	strb	r6, [r3, #0]
 80153ec:	6962      	ldr	r2, [r4, #20]
 80153ee:	1c43      	adds	r3, r0, #1
 80153f0:	429a      	cmp	r2, r3
 80153f2:	d004      	beq.n	80153fe <__swbuf_r+0x6e>
 80153f4:	89a3      	ldrh	r3, [r4, #12]
 80153f6:	07db      	lsls	r3, r3, #31
 80153f8:	d5e1      	bpl.n	80153be <__swbuf_r+0x2e>
 80153fa:	2e0a      	cmp	r6, #10
 80153fc:	d1df      	bne.n	80153be <__swbuf_r+0x2e>
 80153fe:	4621      	mov	r1, r4
 8015400:	4628      	mov	r0, r5
 8015402:	f7ff f969 	bl	80146d8 <_fflush_r>
 8015406:	2800      	cmp	r0, #0
 8015408:	d0d9      	beq.n	80153be <__swbuf_r+0x2e>
 801540a:	e7d6      	b.n	80153ba <__swbuf_r+0x2a>

0801540c <__swsetup_r>:
 801540c:	b538      	push	{r3, r4, r5, lr}
 801540e:	4b29      	ldr	r3, [pc, #164]	@ (80154b4 <__swsetup_r+0xa8>)
 8015410:	4605      	mov	r5, r0
 8015412:	6818      	ldr	r0, [r3, #0]
 8015414:	460c      	mov	r4, r1
 8015416:	b118      	cbz	r0, 8015420 <__swsetup_r+0x14>
 8015418:	6a03      	ldr	r3, [r0, #32]
 801541a:	b90b      	cbnz	r3, 8015420 <__swsetup_r+0x14>
 801541c:	f7fc f876 	bl	801150c <__sinit>
 8015420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015424:	0719      	lsls	r1, r3, #28
 8015426:	d422      	bmi.n	801546e <__swsetup_r+0x62>
 8015428:	06da      	lsls	r2, r3, #27
 801542a:	d407      	bmi.n	801543c <__swsetup_r+0x30>
 801542c:	2209      	movs	r2, #9
 801542e:	602a      	str	r2, [r5, #0]
 8015430:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015434:	81a3      	strh	r3, [r4, #12]
 8015436:	f04f 30ff 	mov.w	r0, #4294967295
 801543a:	e033      	b.n	80154a4 <__swsetup_r+0x98>
 801543c:	0758      	lsls	r0, r3, #29
 801543e:	d512      	bpl.n	8015466 <__swsetup_r+0x5a>
 8015440:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015442:	b141      	cbz	r1, 8015456 <__swsetup_r+0x4a>
 8015444:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015448:	4299      	cmp	r1, r3
 801544a:	d002      	beq.n	8015452 <__swsetup_r+0x46>
 801544c:	4628      	mov	r0, r5
 801544e:	f7fd f817 	bl	8012480 <_free_r>
 8015452:	2300      	movs	r3, #0
 8015454:	6363      	str	r3, [r4, #52]	@ 0x34
 8015456:	89a3      	ldrh	r3, [r4, #12]
 8015458:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801545c:	81a3      	strh	r3, [r4, #12]
 801545e:	2300      	movs	r3, #0
 8015460:	6063      	str	r3, [r4, #4]
 8015462:	6923      	ldr	r3, [r4, #16]
 8015464:	6023      	str	r3, [r4, #0]
 8015466:	89a3      	ldrh	r3, [r4, #12]
 8015468:	f043 0308 	orr.w	r3, r3, #8
 801546c:	81a3      	strh	r3, [r4, #12]
 801546e:	6923      	ldr	r3, [r4, #16]
 8015470:	b94b      	cbnz	r3, 8015486 <__swsetup_r+0x7a>
 8015472:	89a3      	ldrh	r3, [r4, #12]
 8015474:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015478:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801547c:	d003      	beq.n	8015486 <__swsetup_r+0x7a>
 801547e:	4621      	mov	r1, r4
 8015480:	4628      	mov	r0, r5
 8015482:	f000 f883 	bl	801558c <__smakebuf_r>
 8015486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801548a:	f013 0201 	ands.w	r2, r3, #1
 801548e:	d00a      	beq.n	80154a6 <__swsetup_r+0x9a>
 8015490:	2200      	movs	r2, #0
 8015492:	60a2      	str	r2, [r4, #8]
 8015494:	6962      	ldr	r2, [r4, #20]
 8015496:	4252      	negs	r2, r2
 8015498:	61a2      	str	r2, [r4, #24]
 801549a:	6922      	ldr	r2, [r4, #16]
 801549c:	b942      	cbnz	r2, 80154b0 <__swsetup_r+0xa4>
 801549e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80154a2:	d1c5      	bne.n	8015430 <__swsetup_r+0x24>
 80154a4:	bd38      	pop	{r3, r4, r5, pc}
 80154a6:	0799      	lsls	r1, r3, #30
 80154a8:	bf58      	it	pl
 80154aa:	6962      	ldrpl	r2, [r4, #20]
 80154ac:	60a2      	str	r2, [r4, #8]
 80154ae:	e7f4      	b.n	801549a <__swsetup_r+0x8e>
 80154b0:	2000      	movs	r0, #0
 80154b2:	e7f7      	b.n	80154a4 <__swsetup_r+0x98>
 80154b4:	200001bc 	.word	0x200001bc

080154b8 <_raise_r>:
 80154b8:	291f      	cmp	r1, #31
 80154ba:	b538      	push	{r3, r4, r5, lr}
 80154bc:	4605      	mov	r5, r0
 80154be:	460c      	mov	r4, r1
 80154c0:	d904      	bls.n	80154cc <_raise_r+0x14>
 80154c2:	2316      	movs	r3, #22
 80154c4:	6003      	str	r3, [r0, #0]
 80154c6:	f04f 30ff 	mov.w	r0, #4294967295
 80154ca:	bd38      	pop	{r3, r4, r5, pc}
 80154cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80154ce:	b112      	cbz	r2, 80154d6 <_raise_r+0x1e>
 80154d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80154d4:	b94b      	cbnz	r3, 80154ea <_raise_r+0x32>
 80154d6:	4628      	mov	r0, r5
 80154d8:	f000 f830 	bl	801553c <_getpid_r>
 80154dc:	4622      	mov	r2, r4
 80154de:	4601      	mov	r1, r0
 80154e0:	4628      	mov	r0, r5
 80154e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80154e6:	f000 b817 	b.w	8015518 <_kill_r>
 80154ea:	2b01      	cmp	r3, #1
 80154ec:	d00a      	beq.n	8015504 <_raise_r+0x4c>
 80154ee:	1c59      	adds	r1, r3, #1
 80154f0:	d103      	bne.n	80154fa <_raise_r+0x42>
 80154f2:	2316      	movs	r3, #22
 80154f4:	6003      	str	r3, [r0, #0]
 80154f6:	2001      	movs	r0, #1
 80154f8:	e7e7      	b.n	80154ca <_raise_r+0x12>
 80154fa:	2100      	movs	r1, #0
 80154fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015500:	4620      	mov	r0, r4
 8015502:	4798      	blx	r3
 8015504:	2000      	movs	r0, #0
 8015506:	e7e0      	b.n	80154ca <_raise_r+0x12>

08015508 <raise>:
 8015508:	4b02      	ldr	r3, [pc, #8]	@ (8015514 <raise+0xc>)
 801550a:	4601      	mov	r1, r0
 801550c:	6818      	ldr	r0, [r3, #0]
 801550e:	f7ff bfd3 	b.w	80154b8 <_raise_r>
 8015512:	bf00      	nop
 8015514:	200001bc 	.word	0x200001bc

08015518 <_kill_r>:
 8015518:	b538      	push	{r3, r4, r5, lr}
 801551a:	4d07      	ldr	r5, [pc, #28]	@ (8015538 <_kill_r+0x20>)
 801551c:	2300      	movs	r3, #0
 801551e:	4604      	mov	r4, r0
 8015520:	4608      	mov	r0, r1
 8015522:	4611      	mov	r1, r2
 8015524:	602b      	str	r3, [r5, #0]
 8015526:	f7ee fd65 	bl	8003ff4 <_kill>
 801552a:	1c43      	adds	r3, r0, #1
 801552c:	d102      	bne.n	8015534 <_kill_r+0x1c>
 801552e:	682b      	ldr	r3, [r5, #0]
 8015530:	b103      	cbz	r3, 8015534 <_kill_r+0x1c>
 8015532:	6023      	str	r3, [r4, #0]
 8015534:	bd38      	pop	{r3, r4, r5, pc}
 8015536:	bf00      	nop
 8015538:	20002688 	.word	0x20002688

0801553c <_getpid_r>:
 801553c:	f7ee bd52 	b.w	8003fe4 <_getpid>

08015540 <__swhatbuf_r>:
 8015540:	b570      	push	{r4, r5, r6, lr}
 8015542:	460c      	mov	r4, r1
 8015544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015548:	2900      	cmp	r1, #0
 801554a:	b096      	sub	sp, #88	@ 0x58
 801554c:	4615      	mov	r5, r2
 801554e:	461e      	mov	r6, r3
 8015550:	da0d      	bge.n	801556e <__swhatbuf_r+0x2e>
 8015552:	89a3      	ldrh	r3, [r4, #12]
 8015554:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015558:	f04f 0100 	mov.w	r1, #0
 801555c:	bf14      	ite	ne
 801555e:	2340      	movne	r3, #64	@ 0x40
 8015560:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015564:	2000      	movs	r0, #0
 8015566:	6031      	str	r1, [r6, #0]
 8015568:	602b      	str	r3, [r5, #0]
 801556a:	b016      	add	sp, #88	@ 0x58
 801556c:	bd70      	pop	{r4, r5, r6, pc}
 801556e:	466a      	mov	r2, sp
 8015570:	f000 f848 	bl	8015604 <_fstat_r>
 8015574:	2800      	cmp	r0, #0
 8015576:	dbec      	blt.n	8015552 <__swhatbuf_r+0x12>
 8015578:	9901      	ldr	r1, [sp, #4]
 801557a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801557e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015582:	4259      	negs	r1, r3
 8015584:	4159      	adcs	r1, r3
 8015586:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801558a:	e7eb      	b.n	8015564 <__swhatbuf_r+0x24>

0801558c <__smakebuf_r>:
 801558c:	898b      	ldrh	r3, [r1, #12]
 801558e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015590:	079d      	lsls	r5, r3, #30
 8015592:	4606      	mov	r6, r0
 8015594:	460c      	mov	r4, r1
 8015596:	d507      	bpl.n	80155a8 <__smakebuf_r+0x1c>
 8015598:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801559c:	6023      	str	r3, [r4, #0]
 801559e:	6123      	str	r3, [r4, #16]
 80155a0:	2301      	movs	r3, #1
 80155a2:	6163      	str	r3, [r4, #20]
 80155a4:	b003      	add	sp, #12
 80155a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80155a8:	ab01      	add	r3, sp, #4
 80155aa:	466a      	mov	r2, sp
 80155ac:	f7ff ffc8 	bl	8015540 <__swhatbuf_r>
 80155b0:	9f00      	ldr	r7, [sp, #0]
 80155b2:	4605      	mov	r5, r0
 80155b4:	4639      	mov	r1, r7
 80155b6:	4630      	mov	r0, r6
 80155b8:	f7fc ffd6 	bl	8012568 <_malloc_r>
 80155bc:	b948      	cbnz	r0, 80155d2 <__smakebuf_r+0x46>
 80155be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80155c2:	059a      	lsls	r2, r3, #22
 80155c4:	d4ee      	bmi.n	80155a4 <__smakebuf_r+0x18>
 80155c6:	f023 0303 	bic.w	r3, r3, #3
 80155ca:	f043 0302 	orr.w	r3, r3, #2
 80155ce:	81a3      	strh	r3, [r4, #12]
 80155d0:	e7e2      	b.n	8015598 <__smakebuf_r+0xc>
 80155d2:	89a3      	ldrh	r3, [r4, #12]
 80155d4:	6020      	str	r0, [r4, #0]
 80155d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80155da:	81a3      	strh	r3, [r4, #12]
 80155dc:	9b01      	ldr	r3, [sp, #4]
 80155de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80155e2:	b15b      	cbz	r3, 80155fc <__smakebuf_r+0x70>
 80155e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80155e8:	4630      	mov	r0, r6
 80155ea:	f000 f81d 	bl	8015628 <_isatty_r>
 80155ee:	b128      	cbz	r0, 80155fc <__smakebuf_r+0x70>
 80155f0:	89a3      	ldrh	r3, [r4, #12]
 80155f2:	f023 0303 	bic.w	r3, r3, #3
 80155f6:	f043 0301 	orr.w	r3, r3, #1
 80155fa:	81a3      	strh	r3, [r4, #12]
 80155fc:	89a3      	ldrh	r3, [r4, #12]
 80155fe:	431d      	orrs	r5, r3
 8015600:	81a5      	strh	r5, [r4, #12]
 8015602:	e7cf      	b.n	80155a4 <__smakebuf_r+0x18>

08015604 <_fstat_r>:
 8015604:	b538      	push	{r3, r4, r5, lr}
 8015606:	4d07      	ldr	r5, [pc, #28]	@ (8015624 <_fstat_r+0x20>)
 8015608:	2300      	movs	r3, #0
 801560a:	4604      	mov	r4, r0
 801560c:	4608      	mov	r0, r1
 801560e:	4611      	mov	r1, r2
 8015610:	602b      	str	r3, [r5, #0]
 8015612:	f7ee fd4f 	bl	80040b4 <_fstat>
 8015616:	1c43      	adds	r3, r0, #1
 8015618:	d102      	bne.n	8015620 <_fstat_r+0x1c>
 801561a:	682b      	ldr	r3, [r5, #0]
 801561c:	b103      	cbz	r3, 8015620 <_fstat_r+0x1c>
 801561e:	6023      	str	r3, [r4, #0]
 8015620:	bd38      	pop	{r3, r4, r5, pc}
 8015622:	bf00      	nop
 8015624:	20002688 	.word	0x20002688

08015628 <_isatty_r>:
 8015628:	b538      	push	{r3, r4, r5, lr}
 801562a:	4d06      	ldr	r5, [pc, #24]	@ (8015644 <_isatty_r+0x1c>)
 801562c:	2300      	movs	r3, #0
 801562e:	4604      	mov	r4, r0
 8015630:	4608      	mov	r0, r1
 8015632:	602b      	str	r3, [r5, #0]
 8015634:	f7ee fd4e 	bl	80040d4 <_isatty>
 8015638:	1c43      	adds	r3, r0, #1
 801563a:	d102      	bne.n	8015642 <_isatty_r+0x1a>
 801563c:	682b      	ldr	r3, [r5, #0]
 801563e:	b103      	cbz	r3, 8015642 <_isatty_r+0x1a>
 8015640:	6023      	str	r3, [r4, #0]
 8015642:	bd38      	pop	{r3, r4, r5, pc}
 8015644:	20002688 	.word	0x20002688

08015648 <acos>:
 8015648:	b538      	push	{r3, r4, r5, lr}
 801564a:	ed2d 8b02 	vpush	{d8}
 801564e:	ec55 4b10 	vmov	r4, r5, d0
 8015652:	f000 f9b9 	bl	80159c8 <__ieee754_acos>
 8015656:	4622      	mov	r2, r4
 8015658:	462b      	mov	r3, r5
 801565a:	4620      	mov	r0, r4
 801565c:	4629      	mov	r1, r5
 801565e:	eeb0 8a40 	vmov.f32	s16, s0
 8015662:	eef0 8a60 	vmov.f32	s17, s1
 8015666:	f7eb fa89 	bl	8000b7c <__aeabi_dcmpun>
 801566a:	b9a8      	cbnz	r0, 8015698 <acos+0x50>
 801566c:	ec45 4b10 	vmov	d0, r4, r5
 8015670:	f000 f8ba 	bl	80157e8 <fabs>
 8015674:	4b0c      	ldr	r3, [pc, #48]	@ (80156a8 <acos+0x60>)
 8015676:	ec51 0b10 	vmov	r0, r1, d0
 801567a:	2200      	movs	r2, #0
 801567c:	f7eb fa74 	bl	8000b68 <__aeabi_dcmpgt>
 8015680:	b150      	cbz	r0, 8015698 <acos+0x50>
 8015682:	f7fc f86d 	bl	8011760 <__errno>
 8015686:	ecbd 8b02 	vpop	{d8}
 801568a:	2321      	movs	r3, #33	@ 0x21
 801568c:	6003      	str	r3, [r0, #0]
 801568e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015692:	4806      	ldr	r0, [pc, #24]	@ (80156ac <acos+0x64>)
 8015694:	f7ff b8e8 	b.w	8014868 <nan>
 8015698:	eeb0 0a48 	vmov.f32	s0, s16
 801569c:	eef0 0a68 	vmov.f32	s1, s17
 80156a0:	ecbd 8b02 	vpop	{d8}
 80156a4:	bd38      	pop	{r3, r4, r5, pc}
 80156a6:	bf00      	nop
 80156a8:	3ff00000 	.word	0x3ff00000
 80156ac:	08017230 	.word	0x08017230

080156b0 <pow>:
 80156b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156b2:	ed2d 8b02 	vpush	{d8}
 80156b6:	eeb0 8a40 	vmov.f32	s16, s0
 80156ba:	eef0 8a60 	vmov.f32	s17, s1
 80156be:	ec55 4b11 	vmov	r4, r5, d1
 80156c2:	f000 fbdd 	bl	8015e80 <__ieee754_pow>
 80156c6:	4622      	mov	r2, r4
 80156c8:	462b      	mov	r3, r5
 80156ca:	4620      	mov	r0, r4
 80156cc:	4629      	mov	r1, r5
 80156ce:	ec57 6b10 	vmov	r6, r7, d0
 80156d2:	f7eb fa53 	bl	8000b7c <__aeabi_dcmpun>
 80156d6:	2800      	cmp	r0, #0
 80156d8:	d13b      	bne.n	8015752 <pow+0xa2>
 80156da:	ec51 0b18 	vmov	r0, r1, d8
 80156de:	2200      	movs	r2, #0
 80156e0:	2300      	movs	r3, #0
 80156e2:	f7eb fa19 	bl	8000b18 <__aeabi_dcmpeq>
 80156e6:	b1b8      	cbz	r0, 8015718 <pow+0x68>
 80156e8:	2200      	movs	r2, #0
 80156ea:	2300      	movs	r3, #0
 80156ec:	4620      	mov	r0, r4
 80156ee:	4629      	mov	r1, r5
 80156f0:	f7eb fa12 	bl	8000b18 <__aeabi_dcmpeq>
 80156f4:	2800      	cmp	r0, #0
 80156f6:	d146      	bne.n	8015786 <pow+0xd6>
 80156f8:	ec45 4b10 	vmov	d0, r4, r5
 80156fc:	f000 f87c 	bl	80157f8 <finite>
 8015700:	b338      	cbz	r0, 8015752 <pow+0xa2>
 8015702:	2200      	movs	r2, #0
 8015704:	2300      	movs	r3, #0
 8015706:	4620      	mov	r0, r4
 8015708:	4629      	mov	r1, r5
 801570a:	f7eb fa0f 	bl	8000b2c <__aeabi_dcmplt>
 801570e:	b300      	cbz	r0, 8015752 <pow+0xa2>
 8015710:	f7fc f826 	bl	8011760 <__errno>
 8015714:	2322      	movs	r3, #34	@ 0x22
 8015716:	e01b      	b.n	8015750 <pow+0xa0>
 8015718:	ec47 6b10 	vmov	d0, r6, r7
 801571c:	f000 f86c 	bl	80157f8 <finite>
 8015720:	b9e0      	cbnz	r0, 801575c <pow+0xac>
 8015722:	eeb0 0a48 	vmov.f32	s0, s16
 8015726:	eef0 0a68 	vmov.f32	s1, s17
 801572a:	f000 f865 	bl	80157f8 <finite>
 801572e:	b1a8      	cbz	r0, 801575c <pow+0xac>
 8015730:	ec45 4b10 	vmov	d0, r4, r5
 8015734:	f000 f860 	bl	80157f8 <finite>
 8015738:	b180      	cbz	r0, 801575c <pow+0xac>
 801573a:	4632      	mov	r2, r6
 801573c:	463b      	mov	r3, r7
 801573e:	4630      	mov	r0, r6
 8015740:	4639      	mov	r1, r7
 8015742:	f7eb fa1b 	bl	8000b7c <__aeabi_dcmpun>
 8015746:	2800      	cmp	r0, #0
 8015748:	d0e2      	beq.n	8015710 <pow+0x60>
 801574a:	f7fc f809 	bl	8011760 <__errno>
 801574e:	2321      	movs	r3, #33	@ 0x21
 8015750:	6003      	str	r3, [r0, #0]
 8015752:	ecbd 8b02 	vpop	{d8}
 8015756:	ec47 6b10 	vmov	d0, r6, r7
 801575a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801575c:	2200      	movs	r2, #0
 801575e:	2300      	movs	r3, #0
 8015760:	4630      	mov	r0, r6
 8015762:	4639      	mov	r1, r7
 8015764:	f7eb f9d8 	bl	8000b18 <__aeabi_dcmpeq>
 8015768:	2800      	cmp	r0, #0
 801576a:	d0f2      	beq.n	8015752 <pow+0xa2>
 801576c:	eeb0 0a48 	vmov.f32	s0, s16
 8015770:	eef0 0a68 	vmov.f32	s1, s17
 8015774:	f000 f840 	bl	80157f8 <finite>
 8015778:	2800      	cmp	r0, #0
 801577a:	d0ea      	beq.n	8015752 <pow+0xa2>
 801577c:	ec45 4b10 	vmov	d0, r4, r5
 8015780:	f000 f83a 	bl	80157f8 <finite>
 8015784:	e7c3      	b.n	801570e <pow+0x5e>
 8015786:	4f01      	ldr	r7, [pc, #4]	@ (801578c <pow+0xdc>)
 8015788:	2600      	movs	r6, #0
 801578a:	e7e2      	b.n	8015752 <pow+0xa2>
 801578c:	3ff00000 	.word	0x3ff00000

08015790 <sqrt>:
 8015790:	b538      	push	{r3, r4, r5, lr}
 8015792:	ed2d 8b02 	vpush	{d8}
 8015796:	ec55 4b10 	vmov	r4, r5, d0
 801579a:	f000 f839 	bl	8015810 <__ieee754_sqrt>
 801579e:	4622      	mov	r2, r4
 80157a0:	462b      	mov	r3, r5
 80157a2:	4620      	mov	r0, r4
 80157a4:	4629      	mov	r1, r5
 80157a6:	eeb0 8a40 	vmov.f32	s16, s0
 80157aa:	eef0 8a60 	vmov.f32	s17, s1
 80157ae:	f7eb f9e5 	bl	8000b7c <__aeabi_dcmpun>
 80157b2:	b990      	cbnz	r0, 80157da <sqrt+0x4a>
 80157b4:	2200      	movs	r2, #0
 80157b6:	2300      	movs	r3, #0
 80157b8:	4620      	mov	r0, r4
 80157ba:	4629      	mov	r1, r5
 80157bc:	f7eb f9b6 	bl	8000b2c <__aeabi_dcmplt>
 80157c0:	b158      	cbz	r0, 80157da <sqrt+0x4a>
 80157c2:	f7fb ffcd 	bl	8011760 <__errno>
 80157c6:	2321      	movs	r3, #33	@ 0x21
 80157c8:	6003      	str	r3, [r0, #0]
 80157ca:	2200      	movs	r2, #0
 80157cc:	2300      	movs	r3, #0
 80157ce:	4610      	mov	r0, r2
 80157d0:	4619      	mov	r1, r3
 80157d2:	f7eb f863 	bl	800089c <__aeabi_ddiv>
 80157d6:	ec41 0b18 	vmov	d8, r0, r1
 80157da:	eeb0 0a48 	vmov.f32	s0, s16
 80157de:	eef0 0a68 	vmov.f32	s1, s17
 80157e2:	ecbd 8b02 	vpop	{d8}
 80157e6:	bd38      	pop	{r3, r4, r5, pc}

080157e8 <fabs>:
 80157e8:	ec51 0b10 	vmov	r0, r1, d0
 80157ec:	4602      	mov	r2, r0
 80157ee:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80157f2:	ec43 2b10 	vmov	d0, r2, r3
 80157f6:	4770      	bx	lr

080157f8 <finite>:
 80157f8:	b082      	sub	sp, #8
 80157fa:	ed8d 0b00 	vstr	d0, [sp]
 80157fe:	9801      	ldr	r0, [sp, #4]
 8015800:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8015804:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015808:	0fc0      	lsrs	r0, r0, #31
 801580a:	b002      	add	sp, #8
 801580c:	4770      	bx	lr
	...

08015810 <__ieee754_sqrt>:
 8015810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015814:	4a68      	ldr	r2, [pc, #416]	@ (80159b8 <__ieee754_sqrt+0x1a8>)
 8015816:	ec55 4b10 	vmov	r4, r5, d0
 801581a:	43aa      	bics	r2, r5
 801581c:	462b      	mov	r3, r5
 801581e:	4621      	mov	r1, r4
 8015820:	d110      	bne.n	8015844 <__ieee754_sqrt+0x34>
 8015822:	4622      	mov	r2, r4
 8015824:	4620      	mov	r0, r4
 8015826:	4629      	mov	r1, r5
 8015828:	f7ea ff0e 	bl	8000648 <__aeabi_dmul>
 801582c:	4602      	mov	r2, r0
 801582e:	460b      	mov	r3, r1
 8015830:	4620      	mov	r0, r4
 8015832:	4629      	mov	r1, r5
 8015834:	f7ea fd52 	bl	80002dc <__adddf3>
 8015838:	4604      	mov	r4, r0
 801583a:	460d      	mov	r5, r1
 801583c:	ec45 4b10 	vmov	d0, r4, r5
 8015840:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015844:	2d00      	cmp	r5, #0
 8015846:	dc0e      	bgt.n	8015866 <__ieee754_sqrt+0x56>
 8015848:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 801584c:	4322      	orrs	r2, r4
 801584e:	d0f5      	beq.n	801583c <__ieee754_sqrt+0x2c>
 8015850:	b19d      	cbz	r5, 801587a <__ieee754_sqrt+0x6a>
 8015852:	4622      	mov	r2, r4
 8015854:	4620      	mov	r0, r4
 8015856:	4629      	mov	r1, r5
 8015858:	f7ea fd3e 	bl	80002d8 <__aeabi_dsub>
 801585c:	4602      	mov	r2, r0
 801585e:	460b      	mov	r3, r1
 8015860:	f7eb f81c 	bl	800089c <__aeabi_ddiv>
 8015864:	e7e8      	b.n	8015838 <__ieee754_sqrt+0x28>
 8015866:	152a      	asrs	r2, r5, #20
 8015868:	d115      	bne.n	8015896 <__ieee754_sqrt+0x86>
 801586a:	2000      	movs	r0, #0
 801586c:	e009      	b.n	8015882 <__ieee754_sqrt+0x72>
 801586e:	0acb      	lsrs	r3, r1, #11
 8015870:	3a15      	subs	r2, #21
 8015872:	0549      	lsls	r1, r1, #21
 8015874:	2b00      	cmp	r3, #0
 8015876:	d0fa      	beq.n	801586e <__ieee754_sqrt+0x5e>
 8015878:	e7f7      	b.n	801586a <__ieee754_sqrt+0x5a>
 801587a:	462a      	mov	r2, r5
 801587c:	e7fa      	b.n	8015874 <__ieee754_sqrt+0x64>
 801587e:	005b      	lsls	r3, r3, #1
 8015880:	3001      	adds	r0, #1
 8015882:	02dc      	lsls	r4, r3, #11
 8015884:	d5fb      	bpl.n	801587e <__ieee754_sqrt+0x6e>
 8015886:	1e44      	subs	r4, r0, #1
 8015888:	1b12      	subs	r2, r2, r4
 801588a:	f1c0 0420 	rsb	r4, r0, #32
 801588e:	fa21 f404 	lsr.w	r4, r1, r4
 8015892:	4323      	orrs	r3, r4
 8015894:	4081      	lsls	r1, r0
 8015896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801589a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 801589e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80158a2:	07d2      	lsls	r2, r2, #31
 80158a4:	bf5c      	itt	pl
 80158a6:	005b      	lslpl	r3, r3, #1
 80158a8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80158ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80158b0:	bf58      	it	pl
 80158b2:	0049      	lslpl	r1, r1, #1
 80158b4:	2600      	movs	r6, #0
 80158b6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80158ba:	106d      	asrs	r5, r5, #1
 80158bc:	0049      	lsls	r1, r1, #1
 80158be:	2016      	movs	r0, #22
 80158c0:	4632      	mov	r2, r6
 80158c2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80158c6:	1917      	adds	r7, r2, r4
 80158c8:	429f      	cmp	r7, r3
 80158ca:	bfde      	ittt	le
 80158cc:	193a      	addle	r2, r7, r4
 80158ce:	1bdb      	suble	r3, r3, r7
 80158d0:	1936      	addle	r6, r6, r4
 80158d2:	0fcf      	lsrs	r7, r1, #31
 80158d4:	3801      	subs	r0, #1
 80158d6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80158da:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80158de:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80158e2:	d1f0      	bne.n	80158c6 <__ieee754_sqrt+0xb6>
 80158e4:	4604      	mov	r4, r0
 80158e6:	2720      	movs	r7, #32
 80158e8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80158ec:	429a      	cmp	r2, r3
 80158ee:	eb00 0e0c 	add.w	lr, r0, ip
 80158f2:	db02      	blt.n	80158fa <__ieee754_sqrt+0xea>
 80158f4:	d113      	bne.n	801591e <__ieee754_sqrt+0x10e>
 80158f6:	458e      	cmp	lr, r1
 80158f8:	d811      	bhi.n	801591e <__ieee754_sqrt+0x10e>
 80158fa:	f1be 0f00 	cmp.w	lr, #0
 80158fe:	eb0e 000c 	add.w	r0, lr, ip
 8015902:	da42      	bge.n	801598a <__ieee754_sqrt+0x17a>
 8015904:	2800      	cmp	r0, #0
 8015906:	db40      	blt.n	801598a <__ieee754_sqrt+0x17a>
 8015908:	f102 0801 	add.w	r8, r2, #1
 801590c:	1a9b      	subs	r3, r3, r2
 801590e:	458e      	cmp	lr, r1
 8015910:	bf88      	it	hi
 8015912:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8015916:	eba1 010e 	sub.w	r1, r1, lr
 801591a:	4464      	add	r4, ip
 801591c:	4642      	mov	r2, r8
 801591e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8015922:	3f01      	subs	r7, #1
 8015924:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8015928:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801592c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8015930:	d1dc      	bne.n	80158ec <__ieee754_sqrt+0xdc>
 8015932:	4319      	orrs	r1, r3
 8015934:	d01b      	beq.n	801596e <__ieee754_sqrt+0x15e>
 8015936:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80159bc <__ieee754_sqrt+0x1ac>
 801593a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80159c0 <__ieee754_sqrt+0x1b0>
 801593e:	e9da 0100 	ldrd	r0, r1, [sl]
 8015942:	e9db 2300 	ldrd	r2, r3, [fp]
 8015946:	f7ea fcc7 	bl	80002d8 <__aeabi_dsub>
 801594a:	e9da 8900 	ldrd	r8, r9, [sl]
 801594e:	4602      	mov	r2, r0
 8015950:	460b      	mov	r3, r1
 8015952:	4640      	mov	r0, r8
 8015954:	4649      	mov	r1, r9
 8015956:	f7eb f8f3 	bl	8000b40 <__aeabi_dcmple>
 801595a:	b140      	cbz	r0, 801596e <__ieee754_sqrt+0x15e>
 801595c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8015960:	e9da 0100 	ldrd	r0, r1, [sl]
 8015964:	e9db 2300 	ldrd	r2, r3, [fp]
 8015968:	d111      	bne.n	801598e <__ieee754_sqrt+0x17e>
 801596a:	3601      	adds	r6, #1
 801596c:	463c      	mov	r4, r7
 801596e:	1072      	asrs	r2, r6, #1
 8015970:	0863      	lsrs	r3, r4, #1
 8015972:	07f1      	lsls	r1, r6, #31
 8015974:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8015978:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 801597c:	bf48      	it	mi
 801597e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8015982:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8015986:	4618      	mov	r0, r3
 8015988:	e756      	b.n	8015838 <__ieee754_sqrt+0x28>
 801598a:	4690      	mov	r8, r2
 801598c:	e7be      	b.n	801590c <__ieee754_sqrt+0xfc>
 801598e:	f7ea fca5 	bl	80002dc <__adddf3>
 8015992:	e9da 8900 	ldrd	r8, r9, [sl]
 8015996:	4602      	mov	r2, r0
 8015998:	460b      	mov	r3, r1
 801599a:	4640      	mov	r0, r8
 801599c:	4649      	mov	r1, r9
 801599e:	f7eb f8c5 	bl	8000b2c <__aeabi_dcmplt>
 80159a2:	b120      	cbz	r0, 80159ae <__ieee754_sqrt+0x19e>
 80159a4:	1ca0      	adds	r0, r4, #2
 80159a6:	bf08      	it	eq
 80159a8:	3601      	addeq	r6, #1
 80159aa:	3402      	adds	r4, #2
 80159ac:	e7df      	b.n	801596e <__ieee754_sqrt+0x15e>
 80159ae:	1c63      	adds	r3, r4, #1
 80159b0:	f023 0401 	bic.w	r4, r3, #1
 80159b4:	e7db      	b.n	801596e <__ieee754_sqrt+0x15e>
 80159b6:	bf00      	nop
 80159b8:	7ff00000 	.word	0x7ff00000
 80159bc:	20000380 	.word	0x20000380
 80159c0:	20000378 	.word	0x20000378
 80159c4:	00000000 	.word	0x00000000

080159c8 <__ieee754_acos>:
 80159c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159cc:	ec55 4b10 	vmov	r4, r5, d0
 80159d0:	49b7      	ldr	r1, [pc, #732]	@ (8015cb0 <__ieee754_acos+0x2e8>)
 80159d2:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80159d6:	428b      	cmp	r3, r1
 80159d8:	d919      	bls.n	8015a0e <__ieee754_acos+0x46>
 80159da:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 80159de:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80159e2:	4323      	orrs	r3, r4
 80159e4:	d106      	bne.n	80159f4 <__ieee754_acos+0x2c>
 80159e6:	2d00      	cmp	r5, #0
 80159e8:	f340 8210 	ble.w	8015e0c <__ieee754_acos+0x444>
 80159ec:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8015c40 <__ieee754_acos+0x278>
 80159f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159f4:	4622      	mov	r2, r4
 80159f6:	462b      	mov	r3, r5
 80159f8:	4620      	mov	r0, r4
 80159fa:	4629      	mov	r1, r5
 80159fc:	f7ea fc6c 	bl	80002d8 <__aeabi_dsub>
 8015a00:	4602      	mov	r2, r0
 8015a02:	460b      	mov	r3, r1
 8015a04:	f7ea ff4a 	bl	800089c <__aeabi_ddiv>
 8015a08:	ec41 0b10 	vmov	d0, r0, r1
 8015a0c:	e7f0      	b.n	80159f0 <__ieee754_acos+0x28>
 8015a0e:	49a9      	ldr	r1, [pc, #676]	@ (8015cb4 <__ieee754_acos+0x2ec>)
 8015a10:	428b      	cmp	r3, r1
 8015a12:	f200 8085 	bhi.w	8015b20 <__ieee754_acos+0x158>
 8015a16:	4aa8      	ldr	r2, [pc, #672]	@ (8015cb8 <__ieee754_acos+0x2f0>)
 8015a18:	4293      	cmp	r3, r2
 8015a1a:	f240 81fa 	bls.w	8015e12 <__ieee754_acos+0x44a>
 8015a1e:	4622      	mov	r2, r4
 8015a20:	462b      	mov	r3, r5
 8015a22:	4620      	mov	r0, r4
 8015a24:	4629      	mov	r1, r5
 8015a26:	f7ea fe0f 	bl	8000648 <__aeabi_dmul>
 8015a2a:	a387      	add	r3, pc, #540	@ (adr r3, 8015c48 <__ieee754_acos+0x280>)
 8015a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a30:	4606      	mov	r6, r0
 8015a32:	460f      	mov	r7, r1
 8015a34:	f7ea fe08 	bl	8000648 <__aeabi_dmul>
 8015a38:	a385      	add	r3, pc, #532	@ (adr r3, 8015c50 <__ieee754_acos+0x288>)
 8015a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a3e:	f7ea fc4d 	bl	80002dc <__adddf3>
 8015a42:	4632      	mov	r2, r6
 8015a44:	463b      	mov	r3, r7
 8015a46:	f7ea fdff 	bl	8000648 <__aeabi_dmul>
 8015a4a:	a383      	add	r3, pc, #524	@ (adr r3, 8015c58 <__ieee754_acos+0x290>)
 8015a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a50:	f7ea fc42 	bl	80002d8 <__aeabi_dsub>
 8015a54:	4632      	mov	r2, r6
 8015a56:	463b      	mov	r3, r7
 8015a58:	f7ea fdf6 	bl	8000648 <__aeabi_dmul>
 8015a5c:	a380      	add	r3, pc, #512	@ (adr r3, 8015c60 <__ieee754_acos+0x298>)
 8015a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a62:	f7ea fc3b 	bl	80002dc <__adddf3>
 8015a66:	4632      	mov	r2, r6
 8015a68:	463b      	mov	r3, r7
 8015a6a:	f7ea fded 	bl	8000648 <__aeabi_dmul>
 8015a6e:	a37e      	add	r3, pc, #504	@ (adr r3, 8015c68 <__ieee754_acos+0x2a0>)
 8015a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a74:	f7ea fc30 	bl	80002d8 <__aeabi_dsub>
 8015a78:	4632      	mov	r2, r6
 8015a7a:	463b      	mov	r3, r7
 8015a7c:	f7ea fde4 	bl	8000648 <__aeabi_dmul>
 8015a80:	a37b      	add	r3, pc, #492	@ (adr r3, 8015c70 <__ieee754_acos+0x2a8>)
 8015a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a86:	f7ea fc29 	bl	80002dc <__adddf3>
 8015a8a:	4632      	mov	r2, r6
 8015a8c:	463b      	mov	r3, r7
 8015a8e:	f7ea fddb 	bl	8000648 <__aeabi_dmul>
 8015a92:	a379      	add	r3, pc, #484	@ (adr r3, 8015c78 <__ieee754_acos+0x2b0>)
 8015a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a98:	4680      	mov	r8, r0
 8015a9a:	4689      	mov	r9, r1
 8015a9c:	4630      	mov	r0, r6
 8015a9e:	4639      	mov	r1, r7
 8015aa0:	f7ea fdd2 	bl	8000648 <__aeabi_dmul>
 8015aa4:	a376      	add	r3, pc, #472	@ (adr r3, 8015c80 <__ieee754_acos+0x2b8>)
 8015aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aaa:	f7ea fc15 	bl	80002d8 <__aeabi_dsub>
 8015aae:	4632      	mov	r2, r6
 8015ab0:	463b      	mov	r3, r7
 8015ab2:	f7ea fdc9 	bl	8000648 <__aeabi_dmul>
 8015ab6:	a374      	add	r3, pc, #464	@ (adr r3, 8015c88 <__ieee754_acos+0x2c0>)
 8015ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015abc:	f7ea fc0e 	bl	80002dc <__adddf3>
 8015ac0:	4632      	mov	r2, r6
 8015ac2:	463b      	mov	r3, r7
 8015ac4:	f7ea fdc0 	bl	8000648 <__aeabi_dmul>
 8015ac8:	a371      	add	r3, pc, #452	@ (adr r3, 8015c90 <__ieee754_acos+0x2c8>)
 8015aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ace:	f7ea fc03 	bl	80002d8 <__aeabi_dsub>
 8015ad2:	4632      	mov	r2, r6
 8015ad4:	463b      	mov	r3, r7
 8015ad6:	f7ea fdb7 	bl	8000648 <__aeabi_dmul>
 8015ada:	4b78      	ldr	r3, [pc, #480]	@ (8015cbc <__ieee754_acos+0x2f4>)
 8015adc:	2200      	movs	r2, #0
 8015ade:	f7ea fbfd 	bl	80002dc <__adddf3>
 8015ae2:	4602      	mov	r2, r0
 8015ae4:	460b      	mov	r3, r1
 8015ae6:	4640      	mov	r0, r8
 8015ae8:	4649      	mov	r1, r9
 8015aea:	f7ea fed7 	bl	800089c <__aeabi_ddiv>
 8015aee:	4622      	mov	r2, r4
 8015af0:	462b      	mov	r3, r5
 8015af2:	f7ea fda9 	bl	8000648 <__aeabi_dmul>
 8015af6:	4602      	mov	r2, r0
 8015af8:	460b      	mov	r3, r1
 8015afa:	a167      	add	r1, pc, #412	@ (adr r1, 8015c98 <__ieee754_acos+0x2d0>)
 8015afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b00:	f7ea fbea 	bl	80002d8 <__aeabi_dsub>
 8015b04:	4602      	mov	r2, r0
 8015b06:	460b      	mov	r3, r1
 8015b08:	4620      	mov	r0, r4
 8015b0a:	4629      	mov	r1, r5
 8015b0c:	f7ea fbe4 	bl	80002d8 <__aeabi_dsub>
 8015b10:	4602      	mov	r2, r0
 8015b12:	460b      	mov	r3, r1
 8015b14:	a162      	add	r1, pc, #392	@ (adr r1, 8015ca0 <__ieee754_acos+0x2d8>)
 8015b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015b1a:	f7ea fbdd 	bl	80002d8 <__aeabi_dsub>
 8015b1e:	e773      	b.n	8015a08 <__ieee754_acos+0x40>
 8015b20:	2d00      	cmp	r5, #0
 8015b22:	f280 80cf 	bge.w	8015cc4 <__ieee754_acos+0x2fc>
 8015b26:	4b65      	ldr	r3, [pc, #404]	@ (8015cbc <__ieee754_acos+0x2f4>)
 8015b28:	2200      	movs	r2, #0
 8015b2a:	4620      	mov	r0, r4
 8015b2c:	4629      	mov	r1, r5
 8015b2e:	f7ea fbd5 	bl	80002dc <__adddf3>
 8015b32:	4b63      	ldr	r3, [pc, #396]	@ (8015cc0 <__ieee754_acos+0x2f8>)
 8015b34:	2200      	movs	r2, #0
 8015b36:	f7ea fd87 	bl	8000648 <__aeabi_dmul>
 8015b3a:	a343      	add	r3, pc, #268	@ (adr r3, 8015c48 <__ieee754_acos+0x280>)
 8015b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b40:	4604      	mov	r4, r0
 8015b42:	460d      	mov	r5, r1
 8015b44:	f7ea fd80 	bl	8000648 <__aeabi_dmul>
 8015b48:	a341      	add	r3, pc, #260	@ (adr r3, 8015c50 <__ieee754_acos+0x288>)
 8015b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b4e:	f7ea fbc5 	bl	80002dc <__adddf3>
 8015b52:	4622      	mov	r2, r4
 8015b54:	462b      	mov	r3, r5
 8015b56:	f7ea fd77 	bl	8000648 <__aeabi_dmul>
 8015b5a:	a33f      	add	r3, pc, #252	@ (adr r3, 8015c58 <__ieee754_acos+0x290>)
 8015b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b60:	f7ea fbba 	bl	80002d8 <__aeabi_dsub>
 8015b64:	4622      	mov	r2, r4
 8015b66:	462b      	mov	r3, r5
 8015b68:	f7ea fd6e 	bl	8000648 <__aeabi_dmul>
 8015b6c:	a33c      	add	r3, pc, #240	@ (adr r3, 8015c60 <__ieee754_acos+0x298>)
 8015b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b72:	f7ea fbb3 	bl	80002dc <__adddf3>
 8015b76:	4622      	mov	r2, r4
 8015b78:	462b      	mov	r3, r5
 8015b7a:	f7ea fd65 	bl	8000648 <__aeabi_dmul>
 8015b7e:	a33a      	add	r3, pc, #232	@ (adr r3, 8015c68 <__ieee754_acos+0x2a0>)
 8015b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b84:	f7ea fba8 	bl	80002d8 <__aeabi_dsub>
 8015b88:	4622      	mov	r2, r4
 8015b8a:	462b      	mov	r3, r5
 8015b8c:	f7ea fd5c 	bl	8000648 <__aeabi_dmul>
 8015b90:	a337      	add	r3, pc, #220	@ (adr r3, 8015c70 <__ieee754_acos+0x2a8>)
 8015b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b96:	f7ea fba1 	bl	80002dc <__adddf3>
 8015b9a:	4622      	mov	r2, r4
 8015b9c:	462b      	mov	r3, r5
 8015b9e:	f7ea fd53 	bl	8000648 <__aeabi_dmul>
 8015ba2:	a335      	add	r3, pc, #212	@ (adr r3, 8015c78 <__ieee754_acos+0x2b0>)
 8015ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ba8:	4606      	mov	r6, r0
 8015baa:	460f      	mov	r7, r1
 8015bac:	4620      	mov	r0, r4
 8015bae:	4629      	mov	r1, r5
 8015bb0:	f7ea fd4a 	bl	8000648 <__aeabi_dmul>
 8015bb4:	a332      	add	r3, pc, #200	@ (adr r3, 8015c80 <__ieee754_acos+0x2b8>)
 8015bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bba:	f7ea fb8d 	bl	80002d8 <__aeabi_dsub>
 8015bbe:	4622      	mov	r2, r4
 8015bc0:	462b      	mov	r3, r5
 8015bc2:	f7ea fd41 	bl	8000648 <__aeabi_dmul>
 8015bc6:	a330      	add	r3, pc, #192	@ (adr r3, 8015c88 <__ieee754_acos+0x2c0>)
 8015bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bcc:	f7ea fb86 	bl	80002dc <__adddf3>
 8015bd0:	4622      	mov	r2, r4
 8015bd2:	462b      	mov	r3, r5
 8015bd4:	f7ea fd38 	bl	8000648 <__aeabi_dmul>
 8015bd8:	a32d      	add	r3, pc, #180	@ (adr r3, 8015c90 <__ieee754_acos+0x2c8>)
 8015bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bde:	f7ea fb7b 	bl	80002d8 <__aeabi_dsub>
 8015be2:	4622      	mov	r2, r4
 8015be4:	462b      	mov	r3, r5
 8015be6:	f7ea fd2f 	bl	8000648 <__aeabi_dmul>
 8015bea:	4b34      	ldr	r3, [pc, #208]	@ (8015cbc <__ieee754_acos+0x2f4>)
 8015bec:	2200      	movs	r2, #0
 8015bee:	f7ea fb75 	bl	80002dc <__adddf3>
 8015bf2:	ec45 4b10 	vmov	d0, r4, r5
 8015bf6:	4680      	mov	r8, r0
 8015bf8:	4689      	mov	r9, r1
 8015bfa:	f7ff fe09 	bl	8015810 <__ieee754_sqrt>
 8015bfe:	ec55 4b10 	vmov	r4, r5, d0
 8015c02:	4642      	mov	r2, r8
 8015c04:	464b      	mov	r3, r9
 8015c06:	4630      	mov	r0, r6
 8015c08:	4639      	mov	r1, r7
 8015c0a:	f7ea fe47 	bl	800089c <__aeabi_ddiv>
 8015c0e:	4622      	mov	r2, r4
 8015c10:	462b      	mov	r3, r5
 8015c12:	f7ea fd19 	bl	8000648 <__aeabi_dmul>
 8015c16:	a320      	add	r3, pc, #128	@ (adr r3, 8015c98 <__ieee754_acos+0x2d0>)
 8015c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c1c:	f7ea fb5c 	bl	80002d8 <__aeabi_dsub>
 8015c20:	4622      	mov	r2, r4
 8015c22:	462b      	mov	r3, r5
 8015c24:	f7ea fb5a 	bl	80002dc <__adddf3>
 8015c28:	4602      	mov	r2, r0
 8015c2a:	460b      	mov	r3, r1
 8015c2c:	f7ea fb56 	bl	80002dc <__adddf3>
 8015c30:	4602      	mov	r2, r0
 8015c32:	460b      	mov	r3, r1
 8015c34:	a11c      	add	r1, pc, #112	@ (adr r1, 8015ca8 <__ieee754_acos+0x2e0>)
 8015c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c3a:	e76e      	b.n	8015b1a <__ieee754_acos+0x152>
 8015c3c:	f3af 8000 	nop.w
	...
 8015c48:	0dfdf709 	.word	0x0dfdf709
 8015c4c:	3f023de1 	.word	0x3f023de1
 8015c50:	7501b288 	.word	0x7501b288
 8015c54:	3f49efe0 	.word	0x3f49efe0
 8015c58:	b5688f3b 	.word	0xb5688f3b
 8015c5c:	3fa48228 	.word	0x3fa48228
 8015c60:	0e884455 	.word	0x0e884455
 8015c64:	3fc9c155 	.word	0x3fc9c155
 8015c68:	03eb6f7d 	.word	0x03eb6f7d
 8015c6c:	3fd4d612 	.word	0x3fd4d612
 8015c70:	55555555 	.word	0x55555555
 8015c74:	3fc55555 	.word	0x3fc55555
 8015c78:	b12e9282 	.word	0xb12e9282
 8015c7c:	3fb3b8c5 	.word	0x3fb3b8c5
 8015c80:	1b8d0159 	.word	0x1b8d0159
 8015c84:	3fe6066c 	.word	0x3fe6066c
 8015c88:	9c598ac8 	.word	0x9c598ac8
 8015c8c:	40002ae5 	.word	0x40002ae5
 8015c90:	1c8a2d4b 	.word	0x1c8a2d4b
 8015c94:	40033a27 	.word	0x40033a27
 8015c98:	33145c07 	.word	0x33145c07
 8015c9c:	3c91a626 	.word	0x3c91a626
 8015ca0:	54442d18 	.word	0x54442d18
 8015ca4:	3ff921fb 	.word	0x3ff921fb
 8015ca8:	54442d18 	.word	0x54442d18
 8015cac:	400921fb 	.word	0x400921fb
 8015cb0:	3fefffff 	.word	0x3fefffff
 8015cb4:	3fdfffff 	.word	0x3fdfffff
 8015cb8:	3c600000 	.word	0x3c600000
 8015cbc:	3ff00000 	.word	0x3ff00000
 8015cc0:	3fe00000 	.word	0x3fe00000
 8015cc4:	4622      	mov	r2, r4
 8015cc6:	462b      	mov	r3, r5
 8015cc8:	496b      	ldr	r1, [pc, #428]	@ (8015e78 <__ieee754_acos+0x4b0>)
 8015cca:	2000      	movs	r0, #0
 8015ccc:	f7ea fb04 	bl	80002d8 <__aeabi_dsub>
 8015cd0:	4b6a      	ldr	r3, [pc, #424]	@ (8015e7c <__ieee754_acos+0x4b4>)
 8015cd2:	2200      	movs	r2, #0
 8015cd4:	f7ea fcb8 	bl	8000648 <__aeabi_dmul>
 8015cd8:	4604      	mov	r4, r0
 8015cda:	460d      	mov	r5, r1
 8015cdc:	ec45 4b10 	vmov	d0, r4, r5
 8015ce0:	f7ff fd96 	bl	8015810 <__ieee754_sqrt>
 8015ce4:	a34c      	add	r3, pc, #304	@ (adr r3, 8015e18 <__ieee754_acos+0x450>)
 8015ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cea:	4620      	mov	r0, r4
 8015cec:	4629      	mov	r1, r5
 8015cee:	ec59 8b10 	vmov	r8, r9, d0
 8015cf2:	f7ea fca9 	bl	8000648 <__aeabi_dmul>
 8015cf6:	a34a      	add	r3, pc, #296	@ (adr r3, 8015e20 <__ieee754_acos+0x458>)
 8015cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cfc:	f7ea faee 	bl	80002dc <__adddf3>
 8015d00:	4622      	mov	r2, r4
 8015d02:	462b      	mov	r3, r5
 8015d04:	f7ea fca0 	bl	8000648 <__aeabi_dmul>
 8015d08:	a347      	add	r3, pc, #284	@ (adr r3, 8015e28 <__ieee754_acos+0x460>)
 8015d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d0e:	f7ea fae3 	bl	80002d8 <__aeabi_dsub>
 8015d12:	4622      	mov	r2, r4
 8015d14:	462b      	mov	r3, r5
 8015d16:	f7ea fc97 	bl	8000648 <__aeabi_dmul>
 8015d1a:	a345      	add	r3, pc, #276	@ (adr r3, 8015e30 <__ieee754_acos+0x468>)
 8015d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d20:	f7ea fadc 	bl	80002dc <__adddf3>
 8015d24:	4622      	mov	r2, r4
 8015d26:	462b      	mov	r3, r5
 8015d28:	f7ea fc8e 	bl	8000648 <__aeabi_dmul>
 8015d2c:	a342      	add	r3, pc, #264	@ (adr r3, 8015e38 <__ieee754_acos+0x470>)
 8015d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d32:	f7ea fad1 	bl	80002d8 <__aeabi_dsub>
 8015d36:	4622      	mov	r2, r4
 8015d38:	462b      	mov	r3, r5
 8015d3a:	f7ea fc85 	bl	8000648 <__aeabi_dmul>
 8015d3e:	a340      	add	r3, pc, #256	@ (adr r3, 8015e40 <__ieee754_acos+0x478>)
 8015d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d44:	f7ea faca 	bl	80002dc <__adddf3>
 8015d48:	4622      	mov	r2, r4
 8015d4a:	462b      	mov	r3, r5
 8015d4c:	f7ea fc7c 	bl	8000648 <__aeabi_dmul>
 8015d50:	a33d      	add	r3, pc, #244	@ (adr r3, 8015e48 <__ieee754_acos+0x480>)
 8015d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d56:	4682      	mov	sl, r0
 8015d58:	468b      	mov	fp, r1
 8015d5a:	4620      	mov	r0, r4
 8015d5c:	4629      	mov	r1, r5
 8015d5e:	f7ea fc73 	bl	8000648 <__aeabi_dmul>
 8015d62:	a33b      	add	r3, pc, #236	@ (adr r3, 8015e50 <__ieee754_acos+0x488>)
 8015d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d68:	f7ea fab6 	bl	80002d8 <__aeabi_dsub>
 8015d6c:	4622      	mov	r2, r4
 8015d6e:	462b      	mov	r3, r5
 8015d70:	f7ea fc6a 	bl	8000648 <__aeabi_dmul>
 8015d74:	a338      	add	r3, pc, #224	@ (adr r3, 8015e58 <__ieee754_acos+0x490>)
 8015d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d7a:	f7ea faaf 	bl	80002dc <__adddf3>
 8015d7e:	4622      	mov	r2, r4
 8015d80:	462b      	mov	r3, r5
 8015d82:	f7ea fc61 	bl	8000648 <__aeabi_dmul>
 8015d86:	a336      	add	r3, pc, #216	@ (adr r3, 8015e60 <__ieee754_acos+0x498>)
 8015d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d8c:	f7ea faa4 	bl	80002d8 <__aeabi_dsub>
 8015d90:	4622      	mov	r2, r4
 8015d92:	462b      	mov	r3, r5
 8015d94:	f7ea fc58 	bl	8000648 <__aeabi_dmul>
 8015d98:	4b37      	ldr	r3, [pc, #220]	@ (8015e78 <__ieee754_acos+0x4b0>)
 8015d9a:	2200      	movs	r2, #0
 8015d9c:	f7ea fa9e 	bl	80002dc <__adddf3>
 8015da0:	4602      	mov	r2, r0
 8015da2:	460b      	mov	r3, r1
 8015da4:	4650      	mov	r0, sl
 8015da6:	4659      	mov	r1, fp
 8015da8:	f7ea fd78 	bl	800089c <__aeabi_ddiv>
 8015dac:	4642      	mov	r2, r8
 8015dae:	464b      	mov	r3, r9
 8015db0:	f7ea fc4a 	bl	8000648 <__aeabi_dmul>
 8015db4:	2600      	movs	r6, #0
 8015db6:	4682      	mov	sl, r0
 8015db8:	468b      	mov	fp, r1
 8015dba:	4632      	mov	r2, r6
 8015dbc:	464b      	mov	r3, r9
 8015dbe:	4630      	mov	r0, r6
 8015dc0:	4649      	mov	r1, r9
 8015dc2:	f7ea fc41 	bl	8000648 <__aeabi_dmul>
 8015dc6:	4602      	mov	r2, r0
 8015dc8:	460b      	mov	r3, r1
 8015dca:	4620      	mov	r0, r4
 8015dcc:	4629      	mov	r1, r5
 8015dce:	f7ea fa83 	bl	80002d8 <__aeabi_dsub>
 8015dd2:	4632      	mov	r2, r6
 8015dd4:	4604      	mov	r4, r0
 8015dd6:	460d      	mov	r5, r1
 8015dd8:	464b      	mov	r3, r9
 8015dda:	4640      	mov	r0, r8
 8015ddc:	4649      	mov	r1, r9
 8015dde:	f7ea fa7d 	bl	80002dc <__adddf3>
 8015de2:	4602      	mov	r2, r0
 8015de4:	460b      	mov	r3, r1
 8015de6:	4620      	mov	r0, r4
 8015de8:	4629      	mov	r1, r5
 8015dea:	f7ea fd57 	bl	800089c <__aeabi_ddiv>
 8015dee:	4602      	mov	r2, r0
 8015df0:	460b      	mov	r3, r1
 8015df2:	4650      	mov	r0, sl
 8015df4:	4659      	mov	r1, fp
 8015df6:	f7ea fa71 	bl	80002dc <__adddf3>
 8015dfa:	4632      	mov	r2, r6
 8015dfc:	464b      	mov	r3, r9
 8015dfe:	f7ea fa6d 	bl	80002dc <__adddf3>
 8015e02:	4602      	mov	r2, r0
 8015e04:	460b      	mov	r3, r1
 8015e06:	f7ea fa69 	bl	80002dc <__adddf3>
 8015e0a:	e5fd      	b.n	8015a08 <__ieee754_acos+0x40>
 8015e0c:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8015e68 <__ieee754_acos+0x4a0>
 8015e10:	e5ee      	b.n	80159f0 <__ieee754_acos+0x28>
 8015e12:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8015e70 <__ieee754_acos+0x4a8>
 8015e16:	e5eb      	b.n	80159f0 <__ieee754_acos+0x28>
 8015e18:	0dfdf709 	.word	0x0dfdf709
 8015e1c:	3f023de1 	.word	0x3f023de1
 8015e20:	7501b288 	.word	0x7501b288
 8015e24:	3f49efe0 	.word	0x3f49efe0
 8015e28:	b5688f3b 	.word	0xb5688f3b
 8015e2c:	3fa48228 	.word	0x3fa48228
 8015e30:	0e884455 	.word	0x0e884455
 8015e34:	3fc9c155 	.word	0x3fc9c155
 8015e38:	03eb6f7d 	.word	0x03eb6f7d
 8015e3c:	3fd4d612 	.word	0x3fd4d612
 8015e40:	55555555 	.word	0x55555555
 8015e44:	3fc55555 	.word	0x3fc55555
 8015e48:	b12e9282 	.word	0xb12e9282
 8015e4c:	3fb3b8c5 	.word	0x3fb3b8c5
 8015e50:	1b8d0159 	.word	0x1b8d0159
 8015e54:	3fe6066c 	.word	0x3fe6066c
 8015e58:	9c598ac8 	.word	0x9c598ac8
 8015e5c:	40002ae5 	.word	0x40002ae5
 8015e60:	1c8a2d4b 	.word	0x1c8a2d4b
 8015e64:	40033a27 	.word	0x40033a27
 8015e68:	54442d18 	.word	0x54442d18
 8015e6c:	400921fb 	.word	0x400921fb
 8015e70:	54442d18 	.word	0x54442d18
 8015e74:	3ff921fb 	.word	0x3ff921fb
 8015e78:	3ff00000 	.word	0x3ff00000
 8015e7c:	3fe00000 	.word	0x3fe00000

08015e80 <__ieee754_pow>:
 8015e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e84:	b091      	sub	sp, #68	@ 0x44
 8015e86:	ed8d 1b00 	vstr	d1, [sp]
 8015e8a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8015e8e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015e92:	ea5a 0001 	orrs.w	r0, sl, r1
 8015e96:	ec57 6b10 	vmov	r6, r7, d0
 8015e9a:	d113      	bne.n	8015ec4 <__ieee754_pow+0x44>
 8015e9c:	19b3      	adds	r3, r6, r6
 8015e9e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015ea2:	4152      	adcs	r2, r2
 8015ea4:	4298      	cmp	r0, r3
 8015ea6:	4b98      	ldr	r3, [pc, #608]	@ (8016108 <__ieee754_pow+0x288>)
 8015ea8:	4193      	sbcs	r3, r2
 8015eaa:	f080 84ea 	bcs.w	8016882 <__ieee754_pow+0xa02>
 8015eae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015eb2:	4630      	mov	r0, r6
 8015eb4:	4639      	mov	r1, r7
 8015eb6:	f7ea fa11 	bl	80002dc <__adddf3>
 8015eba:	ec41 0b10 	vmov	d0, r0, r1
 8015ebe:	b011      	add	sp, #68	@ 0x44
 8015ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ec4:	4a91      	ldr	r2, [pc, #580]	@ (801610c <__ieee754_pow+0x28c>)
 8015ec6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8015eca:	4590      	cmp	r8, r2
 8015ecc:	463d      	mov	r5, r7
 8015ece:	4633      	mov	r3, r6
 8015ed0:	d806      	bhi.n	8015ee0 <__ieee754_pow+0x60>
 8015ed2:	d101      	bne.n	8015ed8 <__ieee754_pow+0x58>
 8015ed4:	2e00      	cmp	r6, #0
 8015ed6:	d1ea      	bne.n	8015eae <__ieee754_pow+0x2e>
 8015ed8:	4592      	cmp	sl, r2
 8015eda:	d801      	bhi.n	8015ee0 <__ieee754_pow+0x60>
 8015edc:	d10e      	bne.n	8015efc <__ieee754_pow+0x7c>
 8015ede:	b169      	cbz	r1, 8015efc <__ieee754_pow+0x7c>
 8015ee0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8015ee4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8015ee8:	431d      	orrs	r5, r3
 8015eea:	d1e0      	bne.n	8015eae <__ieee754_pow+0x2e>
 8015eec:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015ef0:	18db      	adds	r3, r3, r3
 8015ef2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015ef6:	4152      	adcs	r2, r2
 8015ef8:	429d      	cmp	r5, r3
 8015efa:	e7d4      	b.n	8015ea6 <__ieee754_pow+0x26>
 8015efc:	2d00      	cmp	r5, #0
 8015efe:	46c3      	mov	fp, r8
 8015f00:	da3a      	bge.n	8015f78 <__ieee754_pow+0xf8>
 8015f02:	4a83      	ldr	r2, [pc, #524]	@ (8016110 <__ieee754_pow+0x290>)
 8015f04:	4592      	cmp	sl, r2
 8015f06:	d84d      	bhi.n	8015fa4 <__ieee754_pow+0x124>
 8015f08:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8015f0c:	4592      	cmp	sl, r2
 8015f0e:	f240 84c7 	bls.w	80168a0 <__ieee754_pow+0xa20>
 8015f12:	ea4f 522a 	mov.w	r2, sl, asr #20
 8015f16:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015f1a:	2a14      	cmp	r2, #20
 8015f1c:	dd0f      	ble.n	8015f3e <__ieee754_pow+0xbe>
 8015f1e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8015f22:	fa21 f402 	lsr.w	r4, r1, r2
 8015f26:	fa04 f202 	lsl.w	r2, r4, r2
 8015f2a:	428a      	cmp	r2, r1
 8015f2c:	f040 84b8 	bne.w	80168a0 <__ieee754_pow+0xa20>
 8015f30:	f004 0401 	and.w	r4, r4, #1
 8015f34:	f1c4 0402 	rsb	r4, r4, #2
 8015f38:	2900      	cmp	r1, #0
 8015f3a:	d158      	bne.n	8015fee <__ieee754_pow+0x16e>
 8015f3c:	e00e      	b.n	8015f5c <__ieee754_pow+0xdc>
 8015f3e:	2900      	cmp	r1, #0
 8015f40:	d154      	bne.n	8015fec <__ieee754_pow+0x16c>
 8015f42:	f1c2 0214 	rsb	r2, r2, #20
 8015f46:	fa4a f402 	asr.w	r4, sl, r2
 8015f4a:	fa04 f202 	lsl.w	r2, r4, r2
 8015f4e:	4552      	cmp	r2, sl
 8015f50:	f040 84a3 	bne.w	801689a <__ieee754_pow+0xa1a>
 8015f54:	f004 0401 	and.w	r4, r4, #1
 8015f58:	f1c4 0402 	rsb	r4, r4, #2
 8015f5c:	4a6d      	ldr	r2, [pc, #436]	@ (8016114 <__ieee754_pow+0x294>)
 8015f5e:	4592      	cmp	sl, r2
 8015f60:	d12e      	bne.n	8015fc0 <__ieee754_pow+0x140>
 8015f62:	f1b9 0f00 	cmp.w	r9, #0
 8015f66:	f280 8494 	bge.w	8016892 <__ieee754_pow+0xa12>
 8015f6a:	496a      	ldr	r1, [pc, #424]	@ (8016114 <__ieee754_pow+0x294>)
 8015f6c:	4632      	mov	r2, r6
 8015f6e:	463b      	mov	r3, r7
 8015f70:	2000      	movs	r0, #0
 8015f72:	f7ea fc93 	bl	800089c <__aeabi_ddiv>
 8015f76:	e7a0      	b.n	8015eba <__ieee754_pow+0x3a>
 8015f78:	2400      	movs	r4, #0
 8015f7a:	bbc1      	cbnz	r1, 8015fee <__ieee754_pow+0x16e>
 8015f7c:	4a63      	ldr	r2, [pc, #396]	@ (801610c <__ieee754_pow+0x28c>)
 8015f7e:	4592      	cmp	sl, r2
 8015f80:	d1ec      	bne.n	8015f5c <__ieee754_pow+0xdc>
 8015f82:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8015f86:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8015f8a:	431a      	orrs	r2, r3
 8015f8c:	f000 8479 	beq.w	8016882 <__ieee754_pow+0xa02>
 8015f90:	4b61      	ldr	r3, [pc, #388]	@ (8016118 <__ieee754_pow+0x298>)
 8015f92:	4598      	cmp	r8, r3
 8015f94:	d908      	bls.n	8015fa8 <__ieee754_pow+0x128>
 8015f96:	f1b9 0f00 	cmp.w	r9, #0
 8015f9a:	f2c0 8476 	blt.w	801688a <__ieee754_pow+0xa0a>
 8015f9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015fa2:	e78a      	b.n	8015eba <__ieee754_pow+0x3a>
 8015fa4:	2402      	movs	r4, #2
 8015fa6:	e7e8      	b.n	8015f7a <__ieee754_pow+0xfa>
 8015fa8:	f1b9 0f00 	cmp.w	r9, #0
 8015fac:	f04f 0000 	mov.w	r0, #0
 8015fb0:	f04f 0100 	mov.w	r1, #0
 8015fb4:	da81      	bge.n	8015eba <__ieee754_pow+0x3a>
 8015fb6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015fba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8015fbe:	e77c      	b.n	8015eba <__ieee754_pow+0x3a>
 8015fc0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8015fc4:	d106      	bne.n	8015fd4 <__ieee754_pow+0x154>
 8015fc6:	4632      	mov	r2, r6
 8015fc8:	463b      	mov	r3, r7
 8015fca:	4630      	mov	r0, r6
 8015fcc:	4639      	mov	r1, r7
 8015fce:	f7ea fb3b 	bl	8000648 <__aeabi_dmul>
 8015fd2:	e772      	b.n	8015eba <__ieee754_pow+0x3a>
 8015fd4:	4a51      	ldr	r2, [pc, #324]	@ (801611c <__ieee754_pow+0x29c>)
 8015fd6:	4591      	cmp	r9, r2
 8015fd8:	d109      	bne.n	8015fee <__ieee754_pow+0x16e>
 8015fda:	2d00      	cmp	r5, #0
 8015fdc:	db07      	blt.n	8015fee <__ieee754_pow+0x16e>
 8015fde:	ec47 6b10 	vmov	d0, r6, r7
 8015fe2:	b011      	add	sp, #68	@ 0x44
 8015fe4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015fe8:	f7ff bc12 	b.w	8015810 <__ieee754_sqrt>
 8015fec:	2400      	movs	r4, #0
 8015fee:	ec47 6b10 	vmov	d0, r6, r7
 8015ff2:	9302      	str	r3, [sp, #8]
 8015ff4:	f7ff fbf8 	bl	80157e8 <fabs>
 8015ff8:	9b02      	ldr	r3, [sp, #8]
 8015ffa:	ec51 0b10 	vmov	r0, r1, d0
 8015ffe:	bb53      	cbnz	r3, 8016056 <__ieee754_pow+0x1d6>
 8016000:	4b44      	ldr	r3, [pc, #272]	@ (8016114 <__ieee754_pow+0x294>)
 8016002:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8016006:	429a      	cmp	r2, r3
 8016008:	d002      	beq.n	8016010 <__ieee754_pow+0x190>
 801600a:	f1b8 0f00 	cmp.w	r8, #0
 801600e:	d122      	bne.n	8016056 <__ieee754_pow+0x1d6>
 8016010:	f1b9 0f00 	cmp.w	r9, #0
 8016014:	da05      	bge.n	8016022 <__ieee754_pow+0x1a2>
 8016016:	4602      	mov	r2, r0
 8016018:	460b      	mov	r3, r1
 801601a:	2000      	movs	r0, #0
 801601c:	493d      	ldr	r1, [pc, #244]	@ (8016114 <__ieee754_pow+0x294>)
 801601e:	f7ea fc3d 	bl	800089c <__aeabi_ddiv>
 8016022:	2d00      	cmp	r5, #0
 8016024:	f6bf af49 	bge.w	8015eba <__ieee754_pow+0x3a>
 8016028:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 801602c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8016030:	ea58 0804 	orrs.w	r8, r8, r4
 8016034:	d108      	bne.n	8016048 <__ieee754_pow+0x1c8>
 8016036:	4602      	mov	r2, r0
 8016038:	460b      	mov	r3, r1
 801603a:	4610      	mov	r0, r2
 801603c:	4619      	mov	r1, r3
 801603e:	f7ea f94b 	bl	80002d8 <__aeabi_dsub>
 8016042:	4602      	mov	r2, r0
 8016044:	460b      	mov	r3, r1
 8016046:	e794      	b.n	8015f72 <__ieee754_pow+0xf2>
 8016048:	2c01      	cmp	r4, #1
 801604a:	f47f af36 	bne.w	8015eba <__ieee754_pow+0x3a>
 801604e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016052:	4619      	mov	r1, r3
 8016054:	e731      	b.n	8015eba <__ieee754_pow+0x3a>
 8016056:	0feb      	lsrs	r3, r5, #31
 8016058:	3b01      	subs	r3, #1
 801605a:	ea53 0204 	orrs.w	r2, r3, r4
 801605e:	d102      	bne.n	8016066 <__ieee754_pow+0x1e6>
 8016060:	4632      	mov	r2, r6
 8016062:	463b      	mov	r3, r7
 8016064:	e7e9      	b.n	801603a <__ieee754_pow+0x1ba>
 8016066:	3c01      	subs	r4, #1
 8016068:	431c      	orrs	r4, r3
 801606a:	d016      	beq.n	801609a <__ieee754_pow+0x21a>
 801606c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80160f8 <__ieee754_pow+0x278>
 8016070:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8016074:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016078:	f240 8112 	bls.w	80162a0 <__ieee754_pow+0x420>
 801607c:	4b28      	ldr	r3, [pc, #160]	@ (8016120 <__ieee754_pow+0x2a0>)
 801607e:	459a      	cmp	sl, r3
 8016080:	4b25      	ldr	r3, [pc, #148]	@ (8016118 <__ieee754_pow+0x298>)
 8016082:	d916      	bls.n	80160b2 <__ieee754_pow+0x232>
 8016084:	4598      	cmp	r8, r3
 8016086:	d80b      	bhi.n	80160a0 <__ieee754_pow+0x220>
 8016088:	f1b9 0f00 	cmp.w	r9, #0
 801608c:	da0b      	bge.n	80160a6 <__ieee754_pow+0x226>
 801608e:	2000      	movs	r0, #0
 8016090:	b011      	add	sp, #68	@ 0x44
 8016092:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016096:	f000 bceb 	b.w	8016a70 <__math_oflow>
 801609a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8016100 <__ieee754_pow+0x280>
 801609e:	e7e7      	b.n	8016070 <__ieee754_pow+0x1f0>
 80160a0:	f1b9 0f00 	cmp.w	r9, #0
 80160a4:	dcf3      	bgt.n	801608e <__ieee754_pow+0x20e>
 80160a6:	2000      	movs	r0, #0
 80160a8:	b011      	add	sp, #68	@ 0x44
 80160aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ae:	f000 bcd7 	b.w	8016a60 <__math_uflow>
 80160b2:	4598      	cmp	r8, r3
 80160b4:	d20c      	bcs.n	80160d0 <__ieee754_pow+0x250>
 80160b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80160ba:	2200      	movs	r2, #0
 80160bc:	2300      	movs	r3, #0
 80160be:	f7ea fd35 	bl	8000b2c <__aeabi_dcmplt>
 80160c2:	3800      	subs	r0, #0
 80160c4:	bf18      	it	ne
 80160c6:	2001      	movne	r0, #1
 80160c8:	f1b9 0f00 	cmp.w	r9, #0
 80160cc:	daec      	bge.n	80160a8 <__ieee754_pow+0x228>
 80160ce:	e7df      	b.n	8016090 <__ieee754_pow+0x210>
 80160d0:	4b10      	ldr	r3, [pc, #64]	@ (8016114 <__ieee754_pow+0x294>)
 80160d2:	4598      	cmp	r8, r3
 80160d4:	f04f 0200 	mov.w	r2, #0
 80160d8:	d924      	bls.n	8016124 <__ieee754_pow+0x2a4>
 80160da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80160de:	2300      	movs	r3, #0
 80160e0:	f7ea fd24 	bl	8000b2c <__aeabi_dcmplt>
 80160e4:	3800      	subs	r0, #0
 80160e6:	bf18      	it	ne
 80160e8:	2001      	movne	r0, #1
 80160ea:	f1b9 0f00 	cmp.w	r9, #0
 80160ee:	dccf      	bgt.n	8016090 <__ieee754_pow+0x210>
 80160f0:	e7da      	b.n	80160a8 <__ieee754_pow+0x228>
 80160f2:	bf00      	nop
 80160f4:	f3af 8000 	nop.w
 80160f8:	00000000 	.word	0x00000000
 80160fc:	3ff00000 	.word	0x3ff00000
 8016100:	00000000 	.word	0x00000000
 8016104:	bff00000 	.word	0xbff00000
 8016108:	fff00000 	.word	0xfff00000
 801610c:	7ff00000 	.word	0x7ff00000
 8016110:	433fffff 	.word	0x433fffff
 8016114:	3ff00000 	.word	0x3ff00000
 8016118:	3fefffff 	.word	0x3fefffff
 801611c:	3fe00000 	.word	0x3fe00000
 8016120:	43f00000 	.word	0x43f00000
 8016124:	4b5a      	ldr	r3, [pc, #360]	@ (8016290 <__ieee754_pow+0x410>)
 8016126:	f7ea f8d7 	bl	80002d8 <__aeabi_dsub>
 801612a:	a351      	add	r3, pc, #324	@ (adr r3, 8016270 <__ieee754_pow+0x3f0>)
 801612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016130:	4604      	mov	r4, r0
 8016132:	460d      	mov	r5, r1
 8016134:	f7ea fa88 	bl	8000648 <__aeabi_dmul>
 8016138:	a34f      	add	r3, pc, #316	@ (adr r3, 8016278 <__ieee754_pow+0x3f8>)
 801613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801613e:	4606      	mov	r6, r0
 8016140:	460f      	mov	r7, r1
 8016142:	4620      	mov	r0, r4
 8016144:	4629      	mov	r1, r5
 8016146:	f7ea fa7f 	bl	8000648 <__aeabi_dmul>
 801614a:	4b52      	ldr	r3, [pc, #328]	@ (8016294 <__ieee754_pow+0x414>)
 801614c:	4682      	mov	sl, r0
 801614e:	468b      	mov	fp, r1
 8016150:	2200      	movs	r2, #0
 8016152:	4620      	mov	r0, r4
 8016154:	4629      	mov	r1, r5
 8016156:	f7ea fa77 	bl	8000648 <__aeabi_dmul>
 801615a:	4602      	mov	r2, r0
 801615c:	460b      	mov	r3, r1
 801615e:	a148      	add	r1, pc, #288	@ (adr r1, 8016280 <__ieee754_pow+0x400>)
 8016160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016164:	f7ea f8b8 	bl	80002d8 <__aeabi_dsub>
 8016168:	4622      	mov	r2, r4
 801616a:	462b      	mov	r3, r5
 801616c:	f7ea fa6c 	bl	8000648 <__aeabi_dmul>
 8016170:	4602      	mov	r2, r0
 8016172:	460b      	mov	r3, r1
 8016174:	2000      	movs	r0, #0
 8016176:	4948      	ldr	r1, [pc, #288]	@ (8016298 <__ieee754_pow+0x418>)
 8016178:	f7ea f8ae 	bl	80002d8 <__aeabi_dsub>
 801617c:	4622      	mov	r2, r4
 801617e:	4680      	mov	r8, r0
 8016180:	4689      	mov	r9, r1
 8016182:	462b      	mov	r3, r5
 8016184:	4620      	mov	r0, r4
 8016186:	4629      	mov	r1, r5
 8016188:	f7ea fa5e 	bl	8000648 <__aeabi_dmul>
 801618c:	4602      	mov	r2, r0
 801618e:	460b      	mov	r3, r1
 8016190:	4640      	mov	r0, r8
 8016192:	4649      	mov	r1, r9
 8016194:	f7ea fa58 	bl	8000648 <__aeabi_dmul>
 8016198:	a33b      	add	r3, pc, #236	@ (adr r3, 8016288 <__ieee754_pow+0x408>)
 801619a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801619e:	f7ea fa53 	bl	8000648 <__aeabi_dmul>
 80161a2:	4602      	mov	r2, r0
 80161a4:	460b      	mov	r3, r1
 80161a6:	4650      	mov	r0, sl
 80161a8:	4659      	mov	r1, fp
 80161aa:	f7ea f895 	bl	80002d8 <__aeabi_dsub>
 80161ae:	4602      	mov	r2, r0
 80161b0:	460b      	mov	r3, r1
 80161b2:	4680      	mov	r8, r0
 80161b4:	4689      	mov	r9, r1
 80161b6:	4630      	mov	r0, r6
 80161b8:	4639      	mov	r1, r7
 80161ba:	f7ea f88f 	bl	80002dc <__adddf3>
 80161be:	2400      	movs	r4, #0
 80161c0:	4632      	mov	r2, r6
 80161c2:	463b      	mov	r3, r7
 80161c4:	4620      	mov	r0, r4
 80161c6:	460d      	mov	r5, r1
 80161c8:	f7ea f886 	bl	80002d8 <__aeabi_dsub>
 80161cc:	4602      	mov	r2, r0
 80161ce:	460b      	mov	r3, r1
 80161d0:	4640      	mov	r0, r8
 80161d2:	4649      	mov	r1, r9
 80161d4:	f7ea f880 	bl	80002d8 <__aeabi_dsub>
 80161d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80161dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80161e0:	2300      	movs	r3, #0
 80161e2:	9304      	str	r3, [sp, #16]
 80161e4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80161e8:	4606      	mov	r6, r0
 80161ea:	460f      	mov	r7, r1
 80161ec:	4652      	mov	r2, sl
 80161ee:	465b      	mov	r3, fp
 80161f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80161f4:	f7ea f870 	bl	80002d8 <__aeabi_dsub>
 80161f8:	4622      	mov	r2, r4
 80161fa:	462b      	mov	r3, r5
 80161fc:	f7ea fa24 	bl	8000648 <__aeabi_dmul>
 8016200:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016204:	4680      	mov	r8, r0
 8016206:	4689      	mov	r9, r1
 8016208:	4630      	mov	r0, r6
 801620a:	4639      	mov	r1, r7
 801620c:	f7ea fa1c 	bl	8000648 <__aeabi_dmul>
 8016210:	4602      	mov	r2, r0
 8016212:	460b      	mov	r3, r1
 8016214:	4640      	mov	r0, r8
 8016216:	4649      	mov	r1, r9
 8016218:	f7ea f860 	bl	80002dc <__adddf3>
 801621c:	4652      	mov	r2, sl
 801621e:	465b      	mov	r3, fp
 8016220:	4606      	mov	r6, r0
 8016222:	460f      	mov	r7, r1
 8016224:	4620      	mov	r0, r4
 8016226:	4629      	mov	r1, r5
 8016228:	f7ea fa0e 	bl	8000648 <__aeabi_dmul>
 801622c:	460b      	mov	r3, r1
 801622e:	4602      	mov	r2, r0
 8016230:	4680      	mov	r8, r0
 8016232:	4689      	mov	r9, r1
 8016234:	4630      	mov	r0, r6
 8016236:	4639      	mov	r1, r7
 8016238:	f7ea f850 	bl	80002dc <__adddf3>
 801623c:	4b17      	ldr	r3, [pc, #92]	@ (801629c <__ieee754_pow+0x41c>)
 801623e:	4299      	cmp	r1, r3
 8016240:	4604      	mov	r4, r0
 8016242:	460d      	mov	r5, r1
 8016244:	468a      	mov	sl, r1
 8016246:	468b      	mov	fp, r1
 8016248:	f340 82ef 	ble.w	801682a <__ieee754_pow+0x9aa>
 801624c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8016250:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8016254:	4303      	orrs	r3, r0
 8016256:	f000 81e8 	beq.w	801662a <__ieee754_pow+0x7aa>
 801625a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801625e:	2200      	movs	r2, #0
 8016260:	2300      	movs	r3, #0
 8016262:	f7ea fc63 	bl	8000b2c <__aeabi_dcmplt>
 8016266:	3800      	subs	r0, #0
 8016268:	bf18      	it	ne
 801626a:	2001      	movne	r0, #1
 801626c:	e710      	b.n	8016090 <__ieee754_pow+0x210>
 801626e:	bf00      	nop
 8016270:	60000000 	.word	0x60000000
 8016274:	3ff71547 	.word	0x3ff71547
 8016278:	f85ddf44 	.word	0xf85ddf44
 801627c:	3e54ae0b 	.word	0x3e54ae0b
 8016280:	55555555 	.word	0x55555555
 8016284:	3fd55555 	.word	0x3fd55555
 8016288:	652b82fe 	.word	0x652b82fe
 801628c:	3ff71547 	.word	0x3ff71547
 8016290:	3ff00000 	.word	0x3ff00000
 8016294:	3fd00000 	.word	0x3fd00000
 8016298:	3fe00000 	.word	0x3fe00000
 801629c:	408fffff 	.word	0x408fffff
 80162a0:	4bd5      	ldr	r3, [pc, #852]	@ (80165f8 <__ieee754_pow+0x778>)
 80162a2:	402b      	ands	r3, r5
 80162a4:	2200      	movs	r2, #0
 80162a6:	b92b      	cbnz	r3, 80162b4 <__ieee754_pow+0x434>
 80162a8:	4bd4      	ldr	r3, [pc, #848]	@ (80165fc <__ieee754_pow+0x77c>)
 80162aa:	f7ea f9cd 	bl	8000648 <__aeabi_dmul>
 80162ae:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80162b2:	468b      	mov	fp, r1
 80162b4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80162b8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80162bc:	4413      	add	r3, r2
 80162be:	930a      	str	r3, [sp, #40]	@ 0x28
 80162c0:	4bcf      	ldr	r3, [pc, #828]	@ (8016600 <__ieee754_pow+0x780>)
 80162c2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80162c6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80162ca:	459b      	cmp	fp, r3
 80162cc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80162d0:	dd08      	ble.n	80162e4 <__ieee754_pow+0x464>
 80162d2:	4bcc      	ldr	r3, [pc, #816]	@ (8016604 <__ieee754_pow+0x784>)
 80162d4:	459b      	cmp	fp, r3
 80162d6:	f340 81a5 	ble.w	8016624 <__ieee754_pow+0x7a4>
 80162da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80162dc:	3301      	adds	r3, #1
 80162de:	930a      	str	r3, [sp, #40]	@ 0x28
 80162e0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80162e4:	f04f 0a00 	mov.w	sl, #0
 80162e8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80162ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80162ee:	4bc6      	ldr	r3, [pc, #792]	@ (8016608 <__ieee754_pow+0x788>)
 80162f0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80162f4:	ed93 7b00 	vldr	d7, [r3]
 80162f8:	4629      	mov	r1, r5
 80162fa:	ec53 2b17 	vmov	r2, r3, d7
 80162fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016302:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016306:	f7e9 ffe7 	bl	80002d8 <__aeabi_dsub>
 801630a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801630e:	4606      	mov	r6, r0
 8016310:	460f      	mov	r7, r1
 8016312:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016316:	f7e9 ffe1 	bl	80002dc <__adddf3>
 801631a:	4602      	mov	r2, r0
 801631c:	460b      	mov	r3, r1
 801631e:	2000      	movs	r0, #0
 8016320:	49ba      	ldr	r1, [pc, #744]	@ (801660c <__ieee754_pow+0x78c>)
 8016322:	f7ea fabb 	bl	800089c <__aeabi_ddiv>
 8016326:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 801632a:	4602      	mov	r2, r0
 801632c:	460b      	mov	r3, r1
 801632e:	4630      	mov	r0, r6
 8016330:	4639      	mov	r1, r7
 8016332:	f7ea f989 	bl	8000648 <__aeabi_dmul>
 8016336:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801633a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 801633e:	106d      	asrs	r5, r5, #1
 8016340:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8016344:	f04f 0b00 	mov.w	fp, #0
 8016348:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 801634c:	4661      	mov	r1, ip
 801634e:	2200      	movs	r2, #0
 8016350:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016354:	4658      	mov	r0, fp
 8016356:	46e1      	mov	r9, ip
 8016358:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801635c:	4614      	mov	r4, r2
 801635e:	461d      	mov	r5, r3
 8016360:	f7ea f972 	bl	8000648 <__aeabi_dmul>
 8016364:	4602      	mov	r2, r0
 8016366:	460b      	mov	r3, r1
 8016368:	4630      	mov	r0, r6
 801636a:	4639      	mov	r1, r7
 801636c:	f7e9 ffb4 	bl	80002d8 <__aeabi_dsub>
 8016370:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016374:	4606      	mov	r6, r0
 8016376:	460f      	mov	r7, r1
 8016378:	4620      	mov	r0, r4
 801637a:	4629      	mov	r1, r5
 801637c:	f7e9 ffac 	bl	80002d8 <__aeabi_dsub>
 8016380:	4602      	mov	r2, r0
 8016382:	460b      	mov	r3, r1
 8016384:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016388:	f7e9 ffa6 	bl	80002d8 <__aeabi_dsub>
 801638c:	465a      	mov	r2, fp
 801638e:	464b      	mov	r3, r9
 8016390:	f7ea f95a 	bl	8000648 <__aeabi_dmul>
 8016394:	4602      	mov	r2, r0
 8016396:	460b      	mov	r3, r1
 8016398:	4630      	mov	r0, r6
 801639a:	4639      	mov	r1, r7
 801639c:	f7e9 ff9c 	bl	80002d8 <__aeabi_dsub>
 80163a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80163a4:	f7ea f950 	bl	8000648 <__aeabi_dmul>
 80163a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80163ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80163b0:	4610      	mov	r0, r2
 80163b2:	4619      	mov	r1, r3
 80163b4:	f7ea f948 	bl	8000648 <__aeabi_dmul>
 80163b8:	a37d      	add	r3, pc, #500	@ (adr r3, 80165b0 <__ieee754_pow+0x730>)
 80163ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163be:	4604      	mov	r4, r0
 80163c0:	460d      	mov	r5, r1
 80163c2:	f7ea f941 	bl	8000648 <__aeabi_dmul>
 80163c6:	a37c      	add	r3, pc, #496	@ (adr r3, 80165b8 <__ieee754_pow+0x738>)
 80163c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163cc:	f7e9 ff86 	bl	80002dc <__adddf3>
 80163d0:	4622      	mov	r2, r4
 80163d2:	462b      	mov	r3, r5
 80163d4:	f7ea f938 	bl	8000648 <__aeabi_dmul>
 80163d8:	a379      	add	r3, pc, #484	@ (adr r3, 80165c0 <__ieee754_pow+0x740>)
 80163da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163de:	f7e9 ff7d 	bl	80002dc <__adddf3>
 80163e2:	4622      	mov	r2, r4
 80163e4:	462b      	mov	r3, r5
 80163e6:	f7ea f92f 	bl	8000648 <__aeabi_dmul>
 80163ea:	a377      	add	r3, pc, #476	@ (adr r3, 80165c8 <__ieee754_pow+0x748>)
 80163ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163f0:	f7e9 ff74 	bl	80002dc <__adddf3>
 80163f4:	4622      	mov	r2, r4
 80163f6:	462b      	mov	r3, r5
 80163f8:	f7ea f926 	bl	8000648 <__aeabi_dmul>
 80163fc:	a374      	add	r3, pc, #464	@ (adr r3, 80165d0 <__ieee754_pow+0x750>)
 80163fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016402:	f7e9 ff6b 	bl	80002dc <__adddf3>
 8016406:	4622      	mov	r2, r4
 8016408:	462b      	mov	r3, r5
 801640a:	f7ea f91d 	bl	8000648 <__aeabi_dmul>
 801640e:	a372      	add	r3, pc, #456	@ (adr r3, 80165d8 <__ieee754_pow+0x758>)
 8016410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016414:	f7e9 ff62 	bl	80002dc <__adddf3>
 8016418:	4622      	mov	r2, r4
 801641a:	4606      	mov	r6, r0
 801641c:	460f      	mov	r7, r1
 801641e:	462b      	mov	r3, r5
 8016420:	4620      	mov	r0, r4
 8016422:	4629      	mov	r1, r5
 8016424:	f7ea f910 	bl	8000648 <__aeabi_dmul>
 8016428:	4602      	mov	r2, r0
 801642a:	460b      	mov	r3, r1
 801642c:	4630      	mov	r0, r6
 801642e:	4639      	mov	r1, r7
 8016430:	f7ea f90a 	bl	8000648 <__aeabi_dmul>
 8016434:	465a      	mov	r2, fp
 8016436:	4604      	mov	r4, r0
 8016438:	460d      	mov	r5, r1
 801643a:	464b      	mov	r3, r9
 801643c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016440:	f7e9 ff4c 	bl	80002dc <__adddf3>
 8016444:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016448:	f7ea f8fe 	bl	8000648 <__aeabi_dmul>
 801644c:	4622      	mov	r2, r4
 801644e:	462b      	mov	r3, r5
 8016450:	f7e9 ff44 	bl	80002dc <__adddf3>
 8016454:	465a      	mov	r2, fp
 8016456:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801645a:	464b      	mov	r3, r9
 801645c:	4658      	mov	r0, fp
 801645e:	4649      	mov	r1, r9
 8016460:	f7ea f8f2 	bl	8000648 <__aeabi_dmul>
 8016464:	4b6a      	ldr	r3, [pc, #424]	@ (8016610 <__ieee754_pow+0x790>)
 8016466:	2200      	movs	r2, #0
 8016468:	4606      	mov	r6, r0
 801646a:	460f      	mov	r7, r1
 801646c:	f7e9 ff36 	bl	80002dc <__adddf3>
 8016470:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016474:	f7e9 ff32 	bl	80002dc <__adddf3>
 8016478:	46d8      	mov	r8, fp
 801647a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801647e:	460d      	mov	r5, r1
 8016480:	465a      	mov	r2, fp
 8016482:	460b      	mov	r3, r1
 8016484:	4640      	mov	r0, r8
 8016486:	4649      	mov	r1, r9
 8016488:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801648c:	f7ea f8dc 	bl	8000648 <__aeabi_dmul>
 8016490:	465c      	mov	r4, fp
 8016492:	4680      	mov	r8, r0
 8016494:	4689      	mov	r9, r1
 8016496:	4b5e      	ldr	r3, [pc, #376]	@ (8016610 <__ieee754_pow+0x790>)
 8016498:	2200      	movs	r2, #0
 801649a:	4620      	mov	r0, r4
 801649c:	4629      	mov	r1, r5
 801649e:	f7e9 ff1b 	bl	80002d8 <__aeabi_dsub>
 80164a2:	4632      	mov	r2, r6
 80164a4:	463b      	mov	r3, r7
 80164a6:	f7e9 ff17 	bl	80002d8 <__aeabi_dsub>
 80164aa:	4602      	mov	r2, r0
 80164ac:	460b      	mov	r3, r1
 80164ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80164b2:	f7e9 ff11 	bl	80002d8 <__aeabi_dsub>
 80164b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80164ba:	f7ea f8c5 	bl	8000648 <__aeabi_dmul>
 80164be:	4622      	mov	r2, r4
 80164c0:	4606      	mov	r6, r0
 80164c2:	460f      	mov	r7, r1
 80164c4:	462b      	mov	r3, r5
 80164c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80164ca:	f7ea f8bd 	bl	8000648 <__aeabi_dmul>
 80164ce:	4602      	mov	r2, r0
 80164d0:	460b      	mov	r3, r1
 80164d2:	4630      	mov	r0, r6
 80164d4:	4639      	mov	r1, r7
 80164d6:	f7e9 ff01 	bl	80002dc <__adddf3>
 80164da:	4606      	mov	r6, r0
 80164dc:	460f      	mov	r7, r1
 80164de:	4602      	mov	r2, r0
 80164e0:	460b      	mov	r3, r1
 80164e2:	4640      	mov	r0, r8
 80164e4:	4649      	mov	r1, r9
 80164e6:	f7e9 fef9 	bl	80002dc <__adddf3>
 80164ea:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80164ee:	a33c      	add	r3, pc, #240	@ (adr r3, 80165e0 <__ieee754_pow+0x760>)
 80164f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164f4:	4658      	mov	r0, fp
 80164f6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80164fa:	460d      	mov	r5, r1
 80164fc:	f7ea f8a4 	bl	8000648 <__aeabi_dmul>
 8016500:	465c      	mov	r4, fp
 8016502:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016506:	4642      	mov	r2, r8
 8016508:	464b      	mov	r3, r9
 801650a:	4620      	mov	r0, r4
 801650c:	4629      	mov	r1, r5
 801650e:	f7e9 fee3 	bl	80002d8 <__aeabi_dsub>
 8016512:	4602      	mov	r2, r0
 8016514:	460b      	mov	r3, r1
 8016516:	4630      	mov	r0, r6
 8016518:	4639      	mov	r1, r7
 801651a:	f7e9 fedd 	bl	80002d8 <__aeabi_dsub>
 801651e:	a332      	add	r3, pc, #200	@ (adr r3, 80165e8 <__ieee754_pow+0x768>)
 8016520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016524:	f7ea f890 	bl	8000648 <__aeabi_dmul>
 8016528:	a331      	add	r3, pc, #196	@ (adr r3, 80165f0 <__ieee754_pow+0x770>)
 801652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801652e:	4606      	mov	r6, r0
 8016530:	460f      	mov	r7, r1
 8016532:	4620      	mov	r0, r4
 8016534:	4629      	mov	r1, r5
 8016536:	f7ea f887 	bl	8000648 <__aeabi_dmul>
 801653a:	4602      	mov	r2, r0
 801653c:	460b      	mov	r3, r1
 801653e:	4630      	mov	r0, r6
 8016540:	4639      	mov	r1, r7
 8016542:	f7e9 fecb 	bl	80002dc <__adddf3>
 8016546:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016548:	4b32      	ldr	r3, [pc, #200]	@ (8016614 <__ieee754_pow+0x794>)
 801654a:	4413      	add	r3, r2
 801654c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016550:	f7e9 fec4 	bl	80002dc <__adddf3>
 8016554:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016558:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801655a:	f7ea f80b 	bl	8000574 <__aeabi_i2d>
 801655e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016560:	4b2d      	ldr	r3, [pc, #180]	@ (8016618 <__ieee754_pow+0x798>)
 8016562:	4413      	add	r3, r2
 8016564:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016568:	4606      	mov	r6, r0
 801656a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801656e:	460f      	mov	r7, r1
 8016570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016574:	f7e9 feb2 	bl	80002dc <__adddf3>
 8016578:	4642      	mov	r2, r8
 801657a:	464b      	mov	r3, r9
 801657c:	f7e9 feae 	bl	80002dc <__adddf3>
 8016580:	4632      	mov	r2, r6
 8016582:	463b      	mov	r3, r7
 8016584:	f7e9 feaa 	bl	80002dc <__adddf3>
 8016588:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801658c:	4632      	mov	r2, r6
 801658e:	463b      	mov	r3, r7
 8016590:	4658      	mov	r0, fp
 8016592:	460d      	mov	r5, r1
 8016594:	f7e9 fea0 	bl	80002d8 <__aeabi_dsub>
 8016598:	4642      	mov	r2, r8
 801659a:	464b      	mov	r3, r9
 801659c:	f7e9 fe9c 	bl	80002d8 <__aeabi_dsub>
 80165a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80165a4:	f7e9 fe98 	bl	80002d8 <__aeabi_dsub>
 80165a8:	465c      	mov	r4, fp
 80165aa:	4602      	mov	r2, r0
 80165ac:	e036      	b.n	801661c <__ieee754_pow+0x79c>
 80165ae:	bf00      	nop
 80165b0:	4a454eef 	.word	0x4a454eef
 80165b4:	3fca7e28 	.word	0x3fca7e28
 80165b8:	93c9db65 	.word	0x93c9db65
 80165bc:	3fcd864a 	.word	0x3fcd864a
 80165c0:	a91d4101 	.word	0xa91d4101
 80165c4:	3fd17460 	.word	0x3fd17460
 80165c8:	518f264d 	.word	0x518f264d
 80165cc:	3fd55555 	.word	0x3fd55555
 80165d0:	db6fabff 	.word	0xdb6fabff
 80165d4:	3fdb6db6 	.word	0x3fdb6db6
 80165d8:	33333303 	.word	0x33333303
 80165dc:	3fe33333 	.word	0x3fe33333
 80165e0:	e0000000 	.word	0xe0000000
 80165e4:	3feec709 	.word	0x3feec709
 80165e8:	dc3a03fd 	.word	0xdc3a03fd
 80165ec:	3feec709 	.word	0x3feec709
 80165f0:	145b01f5 	.word	0x145b01f5
 80165f4:	be3e2fe0 	.word	0xbe3e2fe0
 80165f8:	7ff00000 	.word	0x7ff00000
 80165fc:	43400000 	.word	0x43400000
 8016600:	0003988e 	.word	0x0003988e
 8016604:	000bb679 	.word	0x000bb679
 8016608:	080172b8 	.word	0x080172b8
 801660c:	3ff00000 	.word	0x3ff00000
 8016610:	40080000 	.word	0x40080000
 8016614:	08017298 	.word	0x08017298
 8016618:	080172a8 	.word	0x080172a8
 801661c:	460b      	mov	r3, r1
 801661e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016622:	e5d7      	b.n	80161d4 <__ieee754_pow+0x354>
 8016624:	f04f 0a01 	mov.w	sl, #1
 8016628:	e65e      	b.n	80162e8 <__ieee754_pow+0x468>
 801662a:	a3b4      	add	r3, pc, #720	@ (adr r3, 80168fc <__ieee754_pow+0xa7c>)
 801662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016630:	4630      	mov	r0, r6
 8016632:	4639      	mov	r1, r7
 8016634:	f7e9 fe52 	bl	80002dc <__adddf3>
 8016638:	4642      	mov	r2, r8
 801663a:	e9cd 0100 	strd	r0, r1, [sp]
 801663e:	464b      	mov	r3, r9
 8016640:	4620      	mov	r0, r4
 8016642:	4629      	mov	r1, r5
 8016644:	f7e9 fe48 	bl	80002d8 <__aeabi_dsub>
 8016648:	4602      	mov	r2, r0
 801664a:	460b      	mov	r3, r1
 801664c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016650:	f7ea fa8a 	bl	8000b68 <__aeabi_dcmpgt>
 8016654:	2800      	cmp	r0, #0
 8016656:	f47f ae00 	bne.w	801625a <__ieee754_pow+0x3da>
 801665a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801665e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8016662:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8016666:	fa43 fa0a 	asr.w	sl, r3, sl
 801666a:	44da      	add	sl, fp
 801666c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8016670:	489d      	ldr	r0, [pc, #628]	@ (80168e8 <__ieee754_pow+0xa68>)
 8016672:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8016676:	4108      	asrs	r0, r1
 8016678:	ea00 030a 	and.w	r3, r0, sl
 801667c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8016680:	f1c1 0114 	rsb	r1, r1, #20
 8016684:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8016688:	fa4a fa01 	asr.w	sl, sl, r1
 801668c:	f1bb 0f00 	cmp.w	fp, #0
 8016690:	4640      	mov	r0, r8
 8016692:	4649      	mov	r1, r9
 8016694:	f04f 0200 	mov.w	r2, #0
 8016698:	bfb8      	it	lt
 801669a:	f1ca 0a00 	rsblt	sl, sl, #0
 801669e:	f7e9 fe1b 	bl	80002d8 <__aeabi_dsub>
 80166a2:	4680      	mov	r8, r0
 80166a4:	4689      	mov	r9, r1
 80166a6:	4632      	mov	r2, r6
 80166a8:	463b      	mov	r3, r7
 80166aa:	4640      	mov	r0, r8
 80166ac:	4649      	mov	r1, r9
 80166ae:	f7e9 fe15 	bl	80002dc <__adddf3>
 80166b2:	2400      	movs	r4, #0
 80166b4:	a37c      	add	r3, pc, #496	@ (adr r3, 80168a8 <__ieee754_pow+0xa28>)
 80166b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ba:	4620      	mov	r0, r4
 80166bc:	460d      	mov	r5, r1
 80166be:	f7e9 ffc3 	bl	8000648 <__aeabi_dmul>
 80166c2:	4642      	mov	r2, r8
 80166c4:	e9cd 0100 	strd	r0, r1, [sp]
 80166c8:	464b      	mov	r3, r9
 80166ca:	4620      	mov	r0, r4
 80166cc:	4629      	mov	r1, r5
 80166ce:	f7e9 fe03 	bl	80002d8 <__aeabi_dsub>
 80166d2:	4602      	mov	r2, r0
 80166d4:	460b      	mov	r3, r1
 80166d6:	4630      	mov	r0, r6
 80166d8:	4639      	mov	r1, r7
 80166da:	f7e9 fdfd 	bl	80002d8 <__aeabi_dsub>
 80166de:	a374      	add	r3, pc, #464	@ (adr r3, 80168b0 <__ieee754_pow+0xa30>)
 80166e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e4:	f7e9 ffb0 	bl	8000648 <__aeabi_dmul>
 80166e8:	a373      	add	r3, pc, #460	@ (adr r3, 80168b8 <__ieee754_pow+0xa38>)
 80166ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166ee:	4680      	mov	r8, r0
 80166f0:	4689      	mov	r9, r1
 80166f2:	4620      	mov	r0, r4
 80166f4:	4629      	mov	r1, r5
 80166f6:	f7e9 ffa7 	bl	8000648 <__aeabi_dmul>
 80166fa:	4602      	mov	r2, r0
 80166fc:	460b      	mov	r3, r1
 80166fe:	4640      	mov	r0, r8
 8016700:	4649      	mov	r1, r9
 8016702:	f7e9 fdeb 	bl	80002dc <__adddf3>
 8016706:	4604      	mov	r4, r0
 8016708:	460d      	mov	r5, r1
 801670a:	4602      	mov	r2, r0
 801670c:	460b      	mov	r3, r1
 801670e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016712:	f7e9 fde3 	bl	80002dc <__adddf3>
 8016716:	e9dd 2300 	ldrd	r2, r3, [sp]
 801671a:	4680      	mov	r8, r0
 801671c:	4689      	mov	r9, r1
 801671e:	f7e9 fddb 	bl	80002d8 <__aeabi_dsub>
 8016722:	4602      	mov	r2, r0
 8016724:	460b      	mov	r3, r1
 8016726:	4620      	mov	r0, r4
 8016728:	4629      	mov	r1, r5
 801672a:	f7e9 fdd5 	bl	80002d8 <__aeabi_dsub>
 801672e:	4642      	mov	r2, r8
 8016730:	4606      	mov	r6, r0
 8016732:	460f      	mov	r7, r1
 8016734:	464b      	mov	r3, r9
 8016736:	4640      	mov	r0, r8
 8016738:	4649      	mov	r1, r9
 801673a:	f7e9 ff85 	bl	8000648 <__aeabi_dmul>
 801673e:	a360      	add	r3, pc, #384	@ (adr r3, 80168c0 <__ieee754_pow+0xa40>)
 8016740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016744:	4604      	mov	r4, r0
 8016746:	460d      	mov	r5, r1
 8016748:	f7e9 ff7e 	bl	8000648 <__aeabi_dmul>
 801674c:	a35e      	add	r3, pc, #376	@ (adr r3, 80168c8 <__ieee754_pow+0xa48>)
 801674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016752:	f7e9 fdc1 	bl	80002d8 <__aeabi_dsub>
 8016756:	4622      	mov	r2, r4
 8016758:	462b      	mov	r3, r5
 801675a:	f7e9 ff75 	bl	8000648 <__aeabi_dmul>
 801675e:	a35c      	add	r3, pc, #368	@ (adr r3, 80168d0 <__ieee754_pow+0xa50>)
 8016760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016764:	f7e9 fdba 	bl	80002dc <__adddf3>
 8016768:	4622      	mov	r2, r4
 801676a:	462b      	mov	r3, r5
 801676c:	f7e9 ff6c 	bl	8000648 <__aeabi_dmul>
 8016770:	a359      	add	r3, pc, #356	@ (adr r3, 80168d8 <__ieee754_pow+0xa58>)
 8016772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016776:	f7e9 fdaf 	bl	80002d8 <__aeabi_dsub>
 801677a:	4622      	mov	r2, r4
 801677c:	462b      	mov	r3, r5
 801677e:	f7e9 ff63 	bl	8000648 <__aeabi_dmul>
 8016782:	a357      	add	r3, pc, #348	@ (adr r3, 80168e0 <__ieee754_pow+0xa60>)
 8016784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016788:	f7e9 fda8 	bl	80002dc <__adddf3>
 801678c:	4622      	mov	r2, r4
 801678e:	462b      	mov	r3, r5
 8016790:	f7e9 ff5a 	bl	8000648 <__aeabi_dmul>
 8016794:	4602      	mov	r2, r0
 8016796:	460b      	mov	r3, r1
 8016798:	4640      	mov	r0, r8
 801679a:	4649      	mov	r1, r9
 801679c:	f7e9 fd9c 	bl	80002d8 <__aeabi_dsub>
 80167a0:	4604      	mov	r4, r0
 80167a2:	460d      	mov	r5, r1
 80167a4:	4602      	mov	r2, r0
 80167a6:	460b      	mov	r3, r1
 80167a8:	4640      	mov	r0, r8
 80167aa:	4649      	mov	r1, r9
 80167ac:	f7e9 ff4c 	bl	8000648 <__aeabi_dmul>
 80167b0:	2200      	movs	r2, #0
 80167b2:	e9cd 0100 	strd	r0, r1, [sp]
 80167b6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80167ba:	4620      	mov	r0, r4
 80167bc:	4629      	mov	r1, r5
 80167be:	f7e9 fd8b 	bl	80002d8 <__aeabi_dsub>
 80167c2:	4602      	mov	r2, r0
 80167c4:	460b      	mov	r3, r1
 80167c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167ca:	f7ea f867 	bl	800089c <__aeabi_ddiv>
 80167ce:	4632      	mov	r2, r6
 80167d0:	4604      	mov	r4, r0
 80167d2:	460d      	mov	r5, r1
 80167d4:	463b      	mov	r3, r7
 80167d6:	4640      	mov	r0, r8
 80167d8:	4649      	mov	r1, r9
 80167da:	f7e9 ff35 	bl	8000648 <__aeabi_dmul>
 80167de:	4632      	mov	r2, r6
 80167e0:	463b      	mov	r3, r7
 80167e2:	f7e9 fd7b 	bl	80002dc <__adddf3>
 80167e6:	4602      	mov	r2, r0
 80167e8:	460b      	mov	r3, r1
 80167ea:	4620      	mov	r0, r4
 80167ec:	4629      	mov	r1, r5
 80167ee:	f7e9 fd73 	bl	80002d8 <__aeabi_dsub>
 80167f2:	4642      	mov	r2, r8
 80167f4:	464b      	mov	r3, r9
 80167f6:	f7e9 fd6f 	bl	80002d8 <__aeabi_dsub>
 80167fa:	460b      	mov	r3, r1
 80167fc:	4602      	mov	r2, r0
 80167fe:	493b      	ldr	r1, [pc, #236]	@ (80168ec <__ieee754_pow+0xa6c>)
 8016800:	2000      	movs	r0, #0
 8016802:	f7e9 fd69 	bl	80002d8 <__aeabi_dsub>
 8016806:	ec41 0b10 	vmov	d0, r0, r1
 801680a:	ee10 3a90 	vmov	r3, s1
 801680e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8016812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016816:	da30      	bge.n	801687a <__ieee754_pow+0x9fa>
 8016818:	4650      	mov	r0, sl
 801681a:	f000 f875 	bl	8016908 <scalbn>
 801681e:	ec51 0b10 	vmov	r0, r1, d0
 8016822:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016826:	f7ff bbd2 	b.w	8015fce <__ieee754_pow+0x14e>
 801682a:	4c31      	ldr	r4, [pc, #196]	@ (80168f0 <__ieee754_pow+0xa70>)
 801682c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016830:	42a3      	cmp	r3, r4
 8016832:	d91a      	bls.n	801686a <__ieee754_pow+0x9ea>
 8016834:	4b2f      	ldr	r3, [pc, #188]	@ (80168f4 <__ieee754_pow+0xa74>)
 8016836:	440b      	add	r3, r1
 8016838:	4303      	orrs	r3, r0
 801683a:	d009      	beq.n	8016850 <__ieee754_pow+0x9d0>
 801683c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016840:	2200      	movs	r2, #0
 8016842:	2300      	movs	r3, #0
 8016844:	f7ea f972 	bl	8000b2c <__aeabi_dcmplt>
 8016848:	3800      	subs	r0, #0
 801684a:	bf18      	it	ne
 801684c:	2001      	movne	r0, #1
 801684e:	e42b      	b.n	80160a8 <__ieee754_pow+0x228>
 8016850:	4642      	mov	r2, r8
 8016852:	464b      	mov	r3, r9
 8016854:	f7e9 fd40 	bl	80002d8 <__aeabi_dsub>
 8016858:	4632      	mov	r2, r6
 801685a:	463b      	mov	r3, r7
 801685c:	f7ea f97a 	bl	8000b54 <__aeabi_dcmpge>
 8016860:	2800      	cmp	r0, #0
 8016862:	d1eb      	bne.n	801683c <__ieee754_pow+0x9bc>
 8016864:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8016904 <__ieee754_pow+0xa84>
 8016868:	e6f7      	b.n	801665a <__ieee754_pow+0x7da>
 801686a:	469a      	mov	sl, r3
 801686c:	4b22      	ldr	r3, [pc, #136]	@ (80168f8 <__ieee754_pow+0xa78>)
 801686e:	459a      	cmp	sl, r3
 8016870:	f63f aef3 	bhi.w	801665a <__ieee754_pow+0x7da>
 8016874:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016878:	e715      	b.n	80166a6 <__ieee754_pow+0x826>
 801687a:	ec51 0b10 	vmov	r0, r1, d0
 801687e:	4619      	mov	r1, r3
 8016880:	e7cf      	b.n	8016822 <__ieee754_pow+0x9a2>
 8016882:	491a      	ldr	r1, [pc, #104]	@ (80168ec <__ieee754_pow+0xa6c>)
 8016884:	2000      	movs	r0, #0
 8016886:	f7ff bb18 	b.w	8015eba <__ieee754_pow+0x3a>
 801688a:	2000      	movs	r0, #0
 801688c:	2100      	movs	r1, #0
 801688e:	f7ff bb14 	b.w	8015eba <__ieee754_pow+0x3a>
 8016892:	4630      	mov	r0, r6
 8016894:	4639      	mov	r1, r7
 8016896:	f7ff bb10 	b.w	8015eba <__ieee754_pow+0x3a>
 801689a:	460c      	mov	r4, r1
 801689c:	f7ff bb5e 	b.w	8015f5c <__ieee754_pow+0xdc>
 80168a0:	2400      	movs	r4, #0
 80168a2:	f7ff bb49 	b.w	8015f38 <__ieee754_pow+0xb8>
 80168a6:	bf00      	nop
 80168a8:	00000000 	.word	0x00000000
 80168ac:	3fe62e43 	.word	0x3fe62e43
 80168b0:	fefa39ef 	.word	0xfefa39ef
 80168b4:	3fe62e42 	.word	0x3fe62e42
 80168b8:	0ca86c39 	.word	0x0ca86c39
 80168bc:	be205c61 	.word	0xbe205c61
 80168c0:	72bea4d0 	.word	0x72bea4d0
 80168c4:	3e663769 	.word	0x3e663769
 80168c8:	c5d26bf1 	.word	0xc5d26bf1
 80168cc:	3ebbbd41 	.word	0x3ebbbd41
 80168d0:	af25de2c 	.word	0xaf25de2c
 80168d4:	3f11566a 	.word	0x3f11566a
 80168d8:	16bebd93 	.word	0x16bebd93
 80168dc:	3f66c16c 	.word	0x3f66c16c
 80168e0:	5555553e 	.word	0x5555553e
 80168e4:	3fc55555 	.word	0x3fc55555
 80168e8:	fff00000 	.word	0xfff00000
 80168ec:	3ff00000 	.word	0x3ff00000
 80168f0:	4090cbff 	.word	0x4090cbff
 80168f4:	3f6f3400 	.word	0x3f6f3400
 80168f8:	3fe00000 	.word	0x3fe00000
 80168fc:	652b82fe 	.word	0x652b82fe
 8016900:	3c971547 	.word	0x3c971547
 8016904:	4090cc00 	.word	0x4090cc00

08016908 <scalbn>:
 8016908:	b570      	push	{r4, r5, r6, lr}
 801690a:	ec55 4b10 	vmov	r4, r5, d0
 801690e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8016912:	4606      	mov	r6, r0
 8016914:	462b      	mov	r3, r5
 8016916:	b991      	cbnz	r1, 801693e <scalbn+0x36>
 8016918:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801691c:	4323      	orrs	r3, r4
 801691e:	d03d      	beq.n	801699c <scalbn+0x94>
 8016920:	4b35      	ldr	r3, [pc, #212]	@ (80169f8 <scalbn+0xf0>)
 8016922:	4620      	mov	r0, r4
 8016924:	4629      	mov	r1, r5
 8016926:	2200      	movs	r2, #0
 8016928:	f7e9 fe8e 	bl	8000648 <__aeabi_dmul>
 801692c:	4b33      	ldr	r3, [pc, #204]	@ (80169fc <scalbn+0xf4>)
 801692e:	429e      	cmp	r6, r3
 8016930:	4604      	mov	r4, r0
 8016932:	460d      	mov	r5, r1
 8016934:	da0f      	bge.n	8016956 <scalbn+0x4e>
 8016936:	a328      	add	r3, pc, #160	@ (adr r3, 80169d8 <scalbn+0xd0>)
 8016938:	e9d3 2300 	ldrd	r2, r3, [r3]
 801693c:	e01e      	b.n	801697c <scalbn+0x74>
 801693e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8016942:	4291      	cmp	r1, r2
 8016944:	d10b      	bne.n	801695e <scalbn+0x56>
 8016946:	4622      	mov	r2, r4
 8016948:	4620      	mov	r0, r4
 801694a:	4629      	mov	r1, r5
 801694c:	f7e9 fcc6 	bl	80002dc <__adddf3>
 8016950:	4604      	mov	r4, r0
 8016952:	460d      	mov	r5, r1
 8016954:	e022      	b.n	801699c <scalbn+0x94>
 8016956:	460b      	mov	r3, r1
 8016958:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801695c:	3936      	subs	r1, #54	@ 0x36
 801695e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016962:	4296      	cmp	r6, r2
 8016964:	dd0d      	ble.n	8016982 <scalbn+0x7a>
 8016966:	2d00      	cmp	r5, #0
 8016968:	a11d      	add	r1, pc, #116	@ (adr r1, 80169e0 <scalbn+0xd8>)
 801696a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801696e:	da02      	bge.n	8016976 <scalbn+0x6e>
 8016970:	a11d      	add	r1, pc, #116	@ (adr r1, 80169e8 <scalbn+0xe0>)
 8016972:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016976:	a31a      	add	r3, pc, #104	@ (adr r3, 80169e0 <scalbn+0xd8>)
 8016978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801697c:	f7e9 fe64 	bl	8000648 <__aeabi_dmul>
 8016980:	e7e6      	b.n	8016950 <scalbn+0x48>
 8016982:	1872      	adds	r2, r6, r1
 8016984:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8016988:	428a      	cmp	r2, r1
 801698a:	dcec      	bgt.n	8016966 <scalbn+0x5e>
 801698c:	2a00      	cmp	r2, #0
 801698e:	dd08      	ble.n	80169a2 <scalbn+0x9a>
 8016990:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016994:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8016998:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801699c:	ec45 4b10 	vmov	d0, r4, r5
 80169a0:	bd70      	pop	{r4, r5, r6, pc}
 80169a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80169a6:	da08      	bge.n	80169ba <scalbn+0xb2>
 80169a8:	2d00      	cmp	r5, #0
 80169aa:	a10b      	add	r1, pc, #44	@ (adr r1, 80169d8 <scalbn+0xd0>)
 80169ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169b0:	dac1      	bge.n	8016936 <scalbn+0x2e>
 80169b2:	a10f      	add	r1, pc, #60	@ (adr r1, 80169f0 <scalbn+0xe8>)
 80169b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80169b8:	e7bd      	b.n	8016936 <scalbn+0x2e>
 80169ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80169be:	3236      	adds	r2, #54	@ 0x36
 80169c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80169c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80169c8:	4620      	mov	r0, r4
 80169ca:	4b0d      	ldr	r3, [pc, #52]	@ (8016a00 <scalbn+0xf8>)
 80169cc:	4629      	mov	r1, r5
 80169ce:	2200      	movs	r2, #0
 80169d0:	e7d4      	b.n	801697c <scalbn+0x74>
 80169d2:	bf00      	nop
 80169d4:	f3af 8000 	nop.w
 80169d8:	c2f8f359 	.word	0xc2f8f359
 80169dc:	01a56e1f 	.word	0x01a56e1f
 80169e0:	8800759c 	.word	0x8800759c
 80169e4:	7e37e43c 	.word	0x7e37e43c
 80169e8:	8800759c 	.word	0x8800759c
 80169ec:	fe37e43c 	.word	0xfe37e43c
 80169f0:	c2f8f359 	.word	0xc2f8f359
 80169f4:	81a56e1f 	.word	0x81a56e1f
 80169f8:	43500000 	.word	0x43500000
 80169fc:	ffff3cb0 	.word	0xffff3cb0
 8016a00:	3c900000 	.word	0x3c900000

08016a04 <with_errno>:
 8016a04:	b510      	push	{r4, lr}
 8016a06:	ed2d 8b02 	vpush	{d8}
 8016a0a:	eeb0 8a40 	vmov.f32	s16, s0
 8016a0e:	eef0 8a60 	vmov.f32	s17, s1
 8016a12:	4604      	mov	r4, r0
 8016a14:	f7fa fea4 	bl	8011760 <__errno>
 8016a18:	eeb0 0a48 	vmov.f32	s0, s16
 8016a1c:	eef0 0a68 	vmov.f32	s1, s17
 8016a20:	ecbd 8b02 	vpop	{d8}
 8016a24:	6004      	str	r4, [r0, #0]
 8016a26:	bd10      	pop	{r4, pc}

08016a28 <xflow>:
 8016a28:	4603      	mov	r3, r0
 8016a2a:	b507      	push	{r0, r1, r2, lr}
 8016a2c:	ec51 0b10 	vmov	r0, r1, d0
 8016a30:	b183      	cbz	r3, 8016a54 <xflow+0x2c>
 8016a32:	4602      	mov	r2, r0
 8016a34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016a38:	e9cd 2300 	strd	r2, r3, [sp]
 8016a3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a40:	f7e9 fe02 	bl	8000648 <__aeabi_dmul>
 8016a44:	ec41 0b10 	vmov	d0, r0, r1
 8016a48:	2022      	movs	r0, #34	@ 0x22
 8016a4a:	b003      	add	sp, #12
 8016a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a50:	f7ff bfd8 	b.w	8016a04 <with_errno>
 8016a54:	4602      	mov	r2, r0
 8016a56:	460b      	mov	r3, r1
 8016a58:	e7ee      	b.n	8016a38 <xflow+0x10>
 8016a5a:	0000      	movs	r0, r0
 8016a5c:	0000      	movs	r0, r0
	...

08016a60 <__math_uflow>:
 8016a60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016a68 <__math_uflow+0x8>
 8016a64:	f7ff bfe0 	b.w	8016a28 <xflow>
 8016a68:	00000000 	.word	0x00000000
 8016a6c:	10000000 	.word	0x10000000

08016a70 <__math_oflow>:
 8016a70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016a78 <__math_oflow+0x8>
 8016a74:	f7ff bfd8 	b.w	8016a28 <xflow>
 8016a78:	00000000 	.word	0x00000000
 8016a7c:	70000000 	.word	0x70000000

08016a80 <_init>:
 8016a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a82:	bf00      	nop
 8016a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a86:	bc08      	pop	{r3}
 8016a88:	469e      	mov	lr, r3
 8016a8a:	4770      	bx	lr

08016a8c <_fini>:
 8016a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a8e:	bf00      	nop
 8016a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016a92:	bc08      	pop	{r3}
 8016a94:	469e      	mov	lr, r3
 8016a96:	4770      	bx	lr
