
Magisterka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b2c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08016d10  08016d10  00017d10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017540  08017540  000193b0  2**0
                  CONTENTS
  4 .ARM          00000008  08017540  08017540  00018540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017548  08017548  000193b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017548  08017548  00018548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801754c  0801754c  0001854c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003b0  20000000  08017550  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002334  200003b0  08017900  000193b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026e4  08017900  000196e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000193b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025a9e  00000000  00000000  000193e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004eb9  00000000  00000000  0003ee7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f40  00000000  00000000  00043d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001816  00000000  00000000  00045c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d579  00000000  00000000  0004748e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000267ea  00000000  00000000  00074a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f296  00000000  00000000  0009b1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ba487  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fe0  00000000  00000000  001ba4cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001c44ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003b0 	.word	0x200003b0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016cf4 	.word	0x08016cf4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003b4 	.word	0x200003b4
 800021c:	08016cf4 	.word	0x08016cf4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	0000      	movs	r0, r0
	...

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b085      	sub	sp, #20
 800103c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f003 fb06 	bl	800464e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 fcef 	bl	8001a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f001 fb21 	bl	800268c <MX_GPIO_Init>
  MX_DMA_Init();
 800104a:	f001 fad5 	bl	80025f8 <MX_DMA_Init>
  MX_ADC3_Init();
 800104e:	f000 fdaf 	bl	8001bb0 <MX_ADC3_Init>
  MX_ADC4_Init();
 8001052:	f000 fe79 	bl	8001d48 <MX_ADC4_Init>
  MX_ADC5_Init();
 8001056:	f000 fedd 	bl	8001e14 <MX_ADC5_Init>
  MX_DAC1_Init();
 800105a:	f000 ff61 	bl	8001f20 <MX_DAC1_Init>
  MX_DAC2_Init();
 800105e:	f000 ffab 	bl	8001fb8 <MX_DAC2_Init>
  MX_TIM1_Init();
 8001062:	f000 ffe3 	bl	800202c <MX_TIM1_Init>
  MX_TIM8_Init();
 8001066:	f001 f969 	bl	800233c <MX_TIM8_Init>
  MX_UART4_Init();
 800106a:	f001 fa79 	bl	8002560 <MX_UART4_Init>
  MX_ADC1_Init();
 800106e:	f000 fd27 	bl	8001ac0 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001072:	f001 f875 	bl	8002160 <MX_TIM4_Init>
  MX_USB_Device_Init();
 8001076:	f00f fa09 	bl	801048c <MX_USB_Device_Init>
  MX_TIM15_Init();
 800107a:	f001 f9f9 	bl	8002470 <MX_TIM15_Init>
  MX_TIM16_Init();
 800107e:	f001 fa49 	bl	8002514 <MX_TIM16_Init>
  MX_TIM7_Init();
 8001082:	f001 f925 	bl	80022d0 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001086:	f001 f8e3 	bl	8002250 <MX_TIM6_Init>
  MX_CORDIC_Init();
 800108a:	f000 ff35 	bl	8001ef8 <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */

  sCordicConfig.Function   = CORDIC_FUNCTION_SQUAREROOT;       /* Compute sine (and cosine) */
 800108e:	4b85      	ldr	r3, [pc, #532]	@ (80012a4 <main+0x26c>)
 8001090:	2209      	movs	r2, #9
 8001092:	601a      	str	r2, [r3, #0]
  sCordicConfig.Precision  = CORDIC_PRECISION_6CYCLES;    /* Maximum precision (24 iterations) */
 8001094:	4b83      	ldr	r3, [pc, #524]	@ (80012a4 <main+0x26c>)
 8001096:	2260      	movs	r2, #96	@ 0x60
 8001098:	619a      	str	r2, [r3, #24]
  sCordicConfig.Scale      = CORDIC_SCALE_0;              /* No additional scaling */
 800109a:	4b82      	ldr	r3, [pc, #520]	@ (80012a4 <main+0x26c>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  sCordicConfig.NbWrite    = CORDIC_NBWRITE_1;            /* One input (angle); implicit modulus = 1 */
 80010a0:	4b80      	ldr	r3, [pc, #512]	@ (80012a4 <main+0x26c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  sCordicConfig.NbRead     = CORDIC_NBREAD_1;             /* Two outputs (sine and cosine) */
 80010a6:	4b7f      	ldr	r3, [pc, #508]	@ (80012a4 <main+0x26c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  sCordicConfig.InSize     = CORDIC_INSIZE_32BITS;        /* 32-bit input (Q1.31 format) */
 80010ac:	4b7d      	ldr	r3, [pc, #500]	@ (80012a4 <main+0x26c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  sCordicConfig.OutSize    = CORDIC_OUTSIZE_32BITS;       /* 32-bit output (Q1.31 format) */
 80010b2:	4b7c      	ldr	r3, [pc, #496]	@ (80012a4 <main+0x26c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]


  if (HAL_CORDIC_Configure(&hcordic, &sCordicConfig) != HAL_OK)
 80010b8:	497a      	ldr	r1, [pc, #488]	@ (80012a4 <main+0x26c>)
 80010ba:	487b      	ldr	r0, [pc, #492]	@ (80012a8 <main+0x270>)
 80010bc:	f004 fffa 	bl	80060b4 <HAL_CORDIC_Configure>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <main+0x92>
    {
      /* Configuration Error */
      Error_Handler();
 80010c6:	f002 fcab 	bl	8003a20 <Error_Handler>

  while (1)
  {


	  	  	  	  checkfaults = Check_Faults();
 80010ca:	f001 fd6b 	bl	8002ba4 <Check_Faults>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b76      	ldr	r3, [pc, #472]	@ (80012ac <main+0x274>)
 80010d4:	701a      	strb	r2, [r3, #0]

	  	  	  	  if (dataReceivedFlag) {
 80010d6:	4b76      	ldr	r3, [pc, #472]	@ (80012b0 <main+0x278>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <main+0xb2>
	  	  	  	      // Process the data
	  	  	  	      ParseUSBCommand();  // Function to handle the received command
 80010e0:	f002 f8a0 	bl	8003224 <ParseUSBCommand>

	  	  	  	      // Clear the flag after processing
	  	  	  	      dataReceivedFlag = 0;
 80010e4:	4b72      	ldr	r3, [pc, #456]	@ (80012b0 <main+0x278>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
	  	  	  	  }

	  	  	  	  interlock = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 80010ea:	2104      	movs	r1, #4
 80010ec:	4871      	ldr	r0, [pc, #452]	@ (80012b4 <main+0x27c>)
 80010ee:	f006 f8cb 	bl	8007288 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b70      	ldr	r3, [pc, #448]	@ (80012b8 <main+0x280>)
 80010f8:	701a      	strb	r2, [r3, #0]

	  	          if (interlock &&  start_program && !(checkfaults)) {
 80010fa:	4b6f      	ldr	r3, [pc, #444]	@ (80012b8 <main+0x280>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00e      	beq.n	8001120 <main+0xe8>
 8001102:	4b6e      	ldr	r3, [pc, #440]	@ (80012bc <main+0x284>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00a      	beq.n	8001120 <main+0xe8>
 800110a:	4b68      	ldr	r3, [pc, #416]	@ (80012ac <main+0x274>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d106      	bne.n	8001120 <main+0xe8>
	  	        	//USB_SendString("State: EVENT start_program \r\n");
	  	              event = EVENT_START;
 8001112:	4b6b      	ldr	r3, [pc, #428]	@ (80012c0 <main+0x288>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
	  	              start_program = 0;
 8001118:	4b68      	ldr	r3, [pc, #416]	@ (80012bc <main+0x284>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	e019      	b.n	8001154 <main+0x11c>
	  	          }else if (interlock &&  stop_program && !(checkfaults)) {
 8001120:	4b65      	ldr	r3, [pc, #404]	@ (80012b8 <main+0x280>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00e      	beq.n	8001146 <main+0x10e>
 8001128:	4b66      	ldr	r3, [pc, #408]	@ (80012c4 <main+0x28c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00a      	beq.n	8001146 <main+0x10e>
 8001130:	4b5e      	ldr	r3, [pc, #376]	@ (80012ac <main+0x274>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d106      	bne.n	8001146 <main+0x10e>
		  	        	//USB_SendString("State: EVENT start_program \r\n");
		  	              event = EVENT_SHUTDOWN;
 8001138:	4b61      	ldr	r3, [pc, #388]	@ (80012c0 <main+0x288>)
 800113a:	2203      	movs	r2, #3
 800113c:	701a      	strb	r2, [r3, #0]
		  	              stop_program = 0;
 800113e:	4b61      	ldr	r3, [pc, #388]	@ (80012c4 <main+0x28c>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e006      	b.n	8001154 <main+0x11c>
		  	          }
	  	          else if (clear_fault) {
 8001146:	4b60      	ldr	r3, [pc, #384]	@ (80012c8 <main+0x290>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <main+0x11c>
	  	        	  /* clear fault condition */
	  	              event = EVENT_CLEAR_FAULT;
 800114e:	4b5c      	ldr	r3, [pc, #368]	@ (80012c0 <main+0x288>)
 8001150:	2202      	movs	r2, #2
 8001152:	701a      	strb	r2, [r3, #0]
	  	          }

	  	         if (!interlock || checkfaults /* fault condition */)
 8001154:	4b58      	ldr	r3, [pc, #352]	@ (80012b8 <main+0x280>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <main+0x12c>
 800115c:	4b53      	ldr	r3, [pc, #332]	@ (80012ac <main+0x274>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <main+0x132>
	  	       	 {
	  	       	  	event = EVENT_FAULT;
 8001164:	4b56      	ldr	r3, [pc, #344]	@ (80012c0 <main+0x288>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
	  	       	 }

	  	          // Handle the event and update the state
	  	          currentState = handle_event(currentState, event);
 800116a:	4b58      	ldr	r3, [pc, #352]	@ (80012cc <main+0x294>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4a54      	ldr	r2, [pc, #336]	@ (80012c0 <main+0x288>)
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f001 fbd5 	bl	8002924 <handle_event>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <main+0x294>)
 8001180:	701a      	strb	r2, [r3, #0]

	  	          // Perform actions based on the current state
	  	          switch (currentState) {
 8001182:	4b52      	ldr	r3, [pc, #328]	@ (80012cc <main+0x294>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b04      	cmp	r3, #4
 8001188:	f200 8404 	bhi.w	8001994 <main+0x95c>
 800118c:	a201      	add	r2, pc, #4	@ (adr r2, 8001194 <main+0x15c>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011a9 	.word	0x080011a9
 8001198:	08001267 	.word	0x08001267
 800119c:	08001315 	.word	0x08001315
 80011a0:	08001871 	.word	0x08001871
 80011a4:	080018e5 	.word	0x080018e5
	  	              {
	  	            	//GPIOs
	  	            	//CUrrent Sensors OCD pin needed to go low in reset condition after fault event
	  	            	//HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_SET);
	  	            	//HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 80011a8:	2201      	movs	r2, #1
 80011aa:	2104      	movs	r1, #4
 80011ac:	4848      	ldr	r0, [pc, #288]	@ (80012d0 <main+0x298>)
 80011ae:	f006 f883 	bl	80072b8 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	483f      	ldr	r0, [pc, #252]	@ (80012b4 <main+0x27c>)
 80011b8:	f006 f87e 	bl	80072b8 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2120      	movs	r1, #32
 80011c0:	4844      	ldr	r0, [pc, #272]	@ (80012d4 <main+0x29c>)
 80011c2:	f006 f879 	bl	80072b8 <HAL_GPIO_WritePin>
	  	            	HAL_Delay(1000);
 80011c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011ca:	f003 fab1 	bl	8004730 <HAL_Delay>
	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2120      	movs	r1, #32
 80011d2:	4840      	ldr	r0, [pc, #256]	@ (80012d4 <main+0x29c>)
 80011d4:	f006 f870 	bl	80072b8 <HAL_GPIO_WritePin>
	  	            	  // Start PWM for delay time transfer to FPGA
	  	            	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011d8:	2100      	movs	r1, #0
 80011da:	483f      	ldr	r0, [pc, #252]	@ (80012d8 <main+0x2a0>)
 80011dc:	f008 ffca 	bl	800a174 <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80011e0:	2104      	movs	r1, #4
 80011e2:	483e      	ldr	r0, [pc, #248]	@ (80012dc <main+0x2a4>)
 80011e4:	f008 ffc6 	bl	800a174 <HAL_TIM_PWM_Start>

	  	            	  //DAC for  current reference
	  	            	  ///DAC1_OUT1 	- MAX1
	  	            	  //DAC1_OUT2 	- MAX2
	  	            	  //DAC2_OUT1	- MIN
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_1);
 80011e8:	2100      	movs	r1, #0
 80011ea:	483d      	ldr	r0, [pc, #244]	@ (80012e0 <main+0x2a8>)
 80011ec:	f005 f99c 	bl	8006528 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_2);
 80011f0:	2110      	movs	r1, #16
 80011f2:	483b      	ldr	r0, [pc, #236]	@ (80012e0 <main+0x2a8>)
 80011f4:	f005 f998 	bl	8006528 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac2,DAC2_CHANNEL_1);
 80011f8:	2100      	movs	r1, #0
 80011fa:	483a      	ldr	r0, [pc, #232]	@ (80012e4 <main+0x2ac>)
 80011fc:	f005 f994 	bl	8006528 <HAL_DAC_Start>

	  	            	//if( HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R)!= HAL_OK) printf("error");
	  	            	//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);

	  	            	  // FAN PWM and 5s timer6 for check temperature and change duty cycle
	  	            	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001200:	2100      	movs	r1, #0
 8001202:	4839      	ldr	r0, [pc, #228]	@ (80012e8 <main+0x2b0>)
 8001204:	f008 ffb6 	bl	800a174 <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_Base_Start_IT(&htim6);
 8001208:	4838      	ldr	r0, [pc, #224]	@ (80012ec <main+0x2b4>)
 800120a:	f008 feb5 	bl	8009f78 <HAL_TIM_Base_Start_IT>

	  	            	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800120e:	217f      	movs	r1, #127	@ 0x7f
 8001210:	4837      	ldr	r0, [pc, #220]	@ (80012f0 <main+0x2b8>)
 8001212:	f004 fdb3 	bl	8005d7c <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8001216:	217f      	movs	r1, #127	@ 0x7f
 8001218:	4836      	ldr	r0, [pc, #216]	@ (80012f4 <main+0x2bc>)
 800121a:	f004 fdaf 	bl	8005d7c <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 800121e:	217f      	movs	r1, #127	@ 0x7f
 8001220:	4835      	ldr	r0, [pc, #212]	@ (80012f8 <main+0x2c0>)
 8001222:	f004 fdab 	bl	8005d7c <HAL_ADCEx_Calibration_Start>

	  	            	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_dma_buffer, 5);
 8001226:	2205      	movs	r2, #5
 8001228:	4934      	ldr	r1, [pc, #208]	@ (80012fc <main+0x2c4>)
 800122a:	4831      	ldr	r0, [pc, #196]	@ (80012f0 <main+0x2b8>)
 800122c:	f003 fea2 	bl	8004f74 <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4_dma_buffer, 2);
 8001230:	2202      	movs	r2, #2
 8001232:	4933      	ldr	r1, [pc, #204]	@ (8001300 <main+0x2c8>)
 8001234:	482f      	ldr	r0, [pc, #188]	@ (80012f4 <main+0x2bc>)
 8001236:	f003 fe9d 	bl	8004f74 <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_dma_buffer, 10);
 800123a:	220a      	movs	r2, #10
 800123c:	4931      	ldr	r1, [pc, #196]	@ (8001304 <main+0x2cc>)
 800123e:	482e      	ldr	r0, [pc, #184]	@ (80012f8 <main+0x2c0>)
 8001240:	f003 fe98 	bl	8004f74 <HAL_ADC_Start_DMA>

	  	            	Set_PWM_DutyCycle(20);
 8001244:	2014      	movs	r0, #20
 8001246:	f001 fbc7 	bl	80029d8 <Set_PWM_DutyCycle>

	  	            	current_sensor1_vref = adc3_dma_buffer[0];// reference for imax imin
 800124a:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <main+0x2c4>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <main+0x2d0>)
 8001252:	801a      	strh	r2, [r3, #0]
	  	            	current_sensor2_vref = adc3_dma_buffer[1];// reference for imax imin
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <main+0x2c4>)
 8001256:	885b      	ldrh	r3, [r3, #2]
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b2c      	ldr	r3, [pc, #176]	@ (800130c <main+0x2d4>)
 800125c:	801a      	strh	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 800125e:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <main+0x294>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 8001264:	e39d      	b.n	80019a2 <main+0x96a>
	  	              case STATE_STANDBY:
	  	                  // Wait for start_program signal
	  	              {
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
	  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	            	checkreads = Check_Ready();
 8001266:	f001 fcd7 	bl	8002c18 <Check_Ready>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <main+0x2d8>)
 8001270:	701a      	strb	r2, [r3, #0]
	  	            	  if(start_program && interlock &&  !(checkfaults)   && checkreads){
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <main+0x284>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 838f 	beq.w	800199a <main+0x962>
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <main+0x280>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 838a 	beq.w	800199a <main+0x962>
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <main+0x274>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 8385 	bne.w	800199a <main+0x962>
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <main+0x2d8>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 8380 	beq.w	800199a <main+0x962>
	  	            		  currentState = STATE_REGULATION;//STATE_SOFT_START;
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <main+0x294>)
 800129c:	2202      	movs	r2, #2
 800129e:	701a      	strb	r2, [r3, #0]
		  	            	//once = 1;
		  	            	  }*/
	  	            	  }

	  	              }
	  	                  break;
 80012a0:	e37b      	b.n	800199a <main+0x962>
 80012a2:	bf00      	nop
 80012a4:	20000b94 	.word	0x20000b94
 80012a8:	2000069c 	.word	0x2000069c
 80012ac:	20000b88 	.word	0x20000b88
 80012b0:	20000b74 	.word	0x20000b74
 80012b4:	48000800 	.word	0x48000800
 80012b8:	20000b90 	.word	0x20000b90
 80012bc:	20000b84 	.word	0x20000b84
 80012c0:	20000024 	.word	0x20000024
 80012c4:	20000b85 	.word	0x20000b85
 80012c8:	20000b86 	.word	0x20000b86
 80012cc:	20000b87 	.word	0x20000b87
 80012d0:	48001400 	.word	0x48001400
 80012d4:	48001000 	.word	0x48001000
 80012d8:	200007ac 	.word	0x200007ac
 80012dc:	200008dc 	.word	0x200008dc
 80012e0:	200006c4 	.word	0x200006c4
 80012e4:	200006d8 	.word	0x200006d8
 80012e8:	200007f8 	.word	0x200007f8
 80012ec:	20000844 	.word	0x20000844
 80012f0:	20000438 	.word	0x20000438
 80012f4:	200004a4 	.word	0x200004a4
 80012f8:	20000510 	.word	0x20000510
 80012fc:	20000a70 	.word	0x20000a70
 8001300:	20000a88 	.word	0x20000a88
 8001304:	20000a9c 	.word	0x20000a9c
 8001308:	20000a54 	.word	0x20000a54
 800130c:	20000a56 	.word	0x20000a56
 8001310:	20000b89 	.word	0x20000b89

	  	              case STATE_REGULATION:
	  	                  // Maintain output voltage/current
	  	            	  // 20khz sample time of regulators Timer 15
	  	                  {
	  	                	if(once == 0){
 8001314:	4b82      	ldr	r3, [pc, #520]	@ (8001520 <main+0x4e8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10f      	bne.n	800133c <main+0x304>
	  	                		//Start timer that start_program ramp and pi regulation
	  	                		HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
 800131c:	2200      	movs	r2, #0
 800131e:	2104      	movs	r1, #4
 8001320:	4880      	ldr	r0, [pc, #512]	@ (8001524 <main+0x4ec>)
 8001322:	f005 ffc9 	bl	80072b8 <HAL_GPIO_WritePin>
	  	                		HAL_TIM_Base_Start_IT(&htim15); // START TIM15 THATS IS MAIN CONTROL LOOP
 8001326:	4880      	ldr	r0, [pc, #512]	@ (8001528 <main+0x4f0>)
 8001328:	f008 fe26 	bl	8009f78 <HAL_TIM_Base_Start_IT>
	  	                		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800132c:	2100      	movs	r1, #0
 800132e:	487f      	ldr	r0, [pc, #508]	@ (800152c <main+0x4f4>)
 8001330:	f008 ff20 	bl	800a174 <HAL_TIM_PWM_Start>
	  	                		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001334:	2104      	movs	r1, #4
 8001336:	487e      	ldr	r0, [pc, #504]	@ (8001530 <main+0x4f8>)
 8001338:	f008 ff1c 	bl	800a174 <HAL_TIM_PWM_Start>
	  	                		 }
	  	                	  if(flag_control)
 800133c:	4b7d      	ldr	r3, [pc, #500]	@ (8001534 <main+0x4fc>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 832d 	beq.w	80019a0 <main+0x968>
	  	                	  {
	  	                		// start_ticks = SysTick->VAL;

	  	                		  	  	input_vol = (int32_t)Low_pass_filter(input_voltage, input_vol, input_vol_x_n1, input_vol_y_n1); //input_voltage;
 8001346:	4b7c      	ldr	r3, [pc, #496]	@ (8001538 <main+0x500>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001352:	4b7a      	ldr	r3, [pc, #488]	@ (800153c <main+0x504>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	ee07 3a10 	vmov	s14, r3
 800135a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800135e:	4b78      	ldr	r3, [pc, #480]	@ (8001540 <main+0x508>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	ee06 3a90 	vmov	s13, r3
 8001366:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800136a:	4b76      	ldr	r3, [pc, #472]	@ (8001544 <main+0x50c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	ee06 3a10 	vmov	s12, r3
 8001372:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8001376:	eef0 1a46 	vmov.f32	s3, s12
 800137a:	eeb0 1a66 	vmov.f32	s2, s13
 800137e:	eef0 0a47 	vmov.f32	s1, s14
 8001382:	eeb0 0a67 	vmov.f32	s0, s15
 8001386:	f001 fe4f 	bl	8003028 <Low_pass_filter>
 800138a:	eef0 7a40 	vmov.f32	s15, s0
 800138e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001392:	ee17 2a90 	vmov	r2, s15
 8001396:	4b69      	ldr	r3, [pc, #420]	@ (800153c <main+0x504>)
 8001398:	601a      	str	r2, [r3, #0]
	  	                		  	  	output_vol = (int32_t)Low_pass_filter(output_voltage, output_vol, output_vol_x_n1, output_vol_y_n1); //output_voltage;
 800139a:	4b6b      	ldr	r3, [pc, #428]	@ (8001548 <main+0x510>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	4b69      	ldr	r3, [pc, #420]	@ (800154c <main+0x514>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	ee07 3a10 	vmov	s14, r3
 80013ae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80013b2:	4b67      	ldr	r3, [pc, #412]	@ (8001550 <main+0x518>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	ee06 3a90 	vmov	s13, r3
 80013ba:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80013be:	4b65      	ldr	r3, [pc, #404]	@ (8001554 <main+0x51c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	ee06 3a10 	vmov	s12, r3
 80013c6:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80013ca:	eef0 1a46 	vmov.f32	s3, s12
 80013ce:	eeb0 1a66 	vmov.f32	s2, s13
 80013d2:	eef0 0a47 	vmov.f32	s1, s14
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	f001 fe25 	bl	8003028 <Low_pass_filter>
 80013de:	eef0 7a40 	vmov.f32	s15, s0
 80013e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e6:	ee17 2a90 	vmov	r2, s15
 80013ea:	4b58      	ldr	r3, [pc, #352]	@ (800154c <main+0x514>)
 80013ec:	601a      	str	r2, [r3, #0]


	  	                		  	  	Gv = (float)output_vol/(float)input_vol;//output_voltage/input_voltage;
 80013ee:	4b57      	ldr	r3, [pc, #348]	@ (800154c <main+0x514>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	ee07 3a90 	vmov	s15, r3
 80013f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80013fa:	4b50      	ldr	r3, [pc, #320]	@ (800153c <main+0x504>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800140a:	4b53      	ldr	r3, [pc, #332]	@ (8001558 <main+0x520>)
 800140c:	edc3 7a00 	vstr	s15, [r3]

	  	                				if(Gv<2) //CZARY
 8001410:	4b51      	ldr	r3, [pc, #324]	@ (8001558 <main+0x520>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800141a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001422:	f140 80a9 	bpl.w	8001578 <main+0x540>
	  	                				{

	  	                					delay_tr = approx_acos2((1-Gv))*INV_wr;
 8001426:	4b4c      	ldr	r3, [pc, #304]	@ (8001558 <main+0x520>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001434:	eeb0 0a67 	vmov.f32	s0, s15
 8001438:	f002 f9ac 	bl	8003794 <approx_acos2>
 800143c:	ee10 3a10 	vmov	r3, s0
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f8a9 	bl	8000598 <__aeabi_f2d>
 8001446:	a332      	add	r3, pc, #200	@ (adr r3, 8001510 <main+0x4d8>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f8fc 	bl	8000648 <__aeabi_dmul>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fbee 	bl	8000c38 <__aeabi_d2f>
 800145c:	4603      	mov	r3, r0
 800145e:	4a3f      	ldr	r2, [pc, #252]	@ (800155c <main+0x524>)
 8001460:	6013      	str	r3, [r2, #0]
	  	                					 // start_ticks = SysTick->VAL;

	  	                					cordic_input = float_to_integer(((2-Gv)/Gv), 100, 32);
 8001462:	4b3d      	ldr	r3, [pc, #244]	@ (8001558 <main+0x520>)
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800146c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001470:	4b39      	ldr	r3, [pc, #228]	@ (8001558 <main+0x520>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800147a:	2120      	movs	r1, #32
 800147c:	2064      	movs	r0, #100	@ 0x64
 800147e:	eeb0 0a66 	vmov.f32	s0, s13
 8001482:	f002 f889 	bl	8003598 <float_to_integer>
 8001486:	4603      	mov	r3, r0
 8001488:	4a35      	ldr	r2, [pc, #212]	@ (8001560 <main+0x528>)
 800148a:	6013      	str	r3, [r2, #0]
	  	                					HAL_CORDIC_Calculate(&hcordic, &cordic_input, &result_q31, 1, 100);//sqrt((2-Gv)/Gv))
 800148c:	2364      	movs	r3, #100	@ 0x64
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2301      	movs	r3, #1
 8001492:	4a34      	ldr	r2, [pc, #208]	@ (8001564 <main+0x52c>)
 8001494:	4932      	ldr	r1, [pc, #200]	@ (8001560 <main+0x528>)
 8001496:	4834      	ldr	r0, [pc, #208]	@ (8001568 <main+0x530>)
 8001498:	f004 fe48 	bl	800612c <HAL_CORDIC_Calculate>
	  	                					resultcordic = integer_to_float(result_q31, 10, 1, 32); // result of sqrt((((2-Gv)/Gv)) ) in float
 800149c:	4b31      	ldr	r3, [pc, #196]	@ (8001564 <main+0x52c>)
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	2320      	movs	r3, #32
 80014a2:	2201      	movs	r2, #1
 80014a4:	210a      	movs	r1, #10
 80014a6:	f002 f8fd 	bl	80036a4 <integer_to_float>
 80014aa:	eef0 7a40 	vmov.f32	s15, s0
 80014ae:	4b2f      	ldr	r3, [pc, #188]	@ (800156c <main+0x534>)
 80014b0:	edc3 7a00 	vstr	s15, [r3]


	  	                					imin = (int)(Imin_Factor*output_vol*resultcordic*INV_Z); //[mA] Negative current needed to Zero voltage switching in resonance
 80014b4:	4b25      	ldr	r3, [pc, #148]	@ (800154c <main+0x514>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	ee07 3a90 	vmov	s15, r3
 80014bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001570 <main+0x538>)
 80014c2:	edd3 7a00 	vldr	s15, [r3]
 80014c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ca:	4b28      	ldr	r3, [pc, #160]	@ (800156c <main+0x534>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d4:	ee17 0a90 	vmov	r0, s15
 80014d8:	f7ff f85e 	bl	8000598 <__aeabi_f2d>
 80014dc:	a30e      	add	r3, pc, #56	@ (adr r3, 8001518 <main+0x4e0>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7ff f8b1 	bl	8000648 <__aeabi_dmul>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fb5b 	bl	8000ba8 <__aeabi_d2iz>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001574 <main+0x53c>)
 80014f8:	601a      	str	r2, [r3, #0]

	  	                					if(imin>4000) imin = 4000;
 80014fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001574 <main+0x53c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001502:	d973      	bls.n	80015ec <main+0x5b4>
 8001504:	4b1b      	ldr	r3, [pc, #108]	@ (8001574 <main+0x53c>)
 8001506:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	e06e      	b.n	80015ec <main+0x5b4>
 800150e:	bf00      	nop
 8001510:	155f05f7 	.word	0x155f05f7
 8001514:	3e4eb582 	.word	0x3e4eb582
 8001518:	03a35639 	.word	0x03a35639
 800151c:	3f7c0604 	.word	0x3f7c0604
 8001520:	20000b8c 	.word	0x20000b8c
 8001524:	48001400 	.word	0x48001400
 8001528:	20000928 	.word	0x20000928
 800152c:	200007ac 	.word	0x200007ac
 8001530:	200008dc 	.word	0x200008dc
 8001534:	20000b91 	.word	0x20000b91
 8001538:	20000a64 	.word	0x20000a64
 800153c:	20000030 	.word	0x20000030
 8001540:	20000038 	.word	0x20000038
 8001544:	2000003c 	.word	0x2000003c
 8001548:	20000a7c 	.word	0x20000a7c
 800154c:	20000034 	.word	0x20000034
 8001550:	20000040 	.word	0x20000040
 8001554:	20000044 	.word	0x20000044
 8001558:	20000014 	.word	0x20000014
 800155c:	20000004 	.word	0x20000004
 8001560:	20000050 	.word	0x20000050
 8001564:	20000048 	.word	0x20000048
 8001568:	2000069c 	.word	0x2000069c
 800156c:	2000004c 	.word	0x2000004c
 8001570:	2000002c 	.word	0x2000002c
 8001574:	20000a60 	.word	0x20000a60
	  	                				} else if(Gv >= 2)
 8001578:	4b9f      	ldr	r3, [pc, #636]	@ (80017f8 <main+0x7c0>)
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158a:	db2f      	blt.n	80015ec <main+0x5b4>
	  	                				{
	  	                					delay_tr = (M_PI-approx_acos2((1/(Gv-1)))) * INV_wr;
 800158c:	4b9a      	ldr	r3, [pc, #616]	@ (80017f8 <main+0x7c0>)
 800158e:	edd3 7a00 	vldr	s15, [r3]
 8001592:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001596:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800159a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800159e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015a2:	eeb0 0a47 	vmov.f32	s0, s14
 80015a6:	f002 f8f5 	bl	8003794 <approx_acos2>
 80015aa:	ee10 3a10 	vmov	r3, s0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe fff2 	bl	8000598 <__aeabi_f2d>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	a189      	add	r1, pc, #548	@ (adr r1, 80017e0 <main+0x7a8>)
 80015ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015be:	f7fe fe8b 	bl	80002d8 <__aeabi_dsub>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4610      	mov	r0, r2
 80015c8:	4619      	mov	r1, r3
 80015ca:	a387      	add	r3, pc, #540	@ (adr r3, 80017e8 <main+0x7b0>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7ff f83a 	bl	8000648 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff fb2c 	bl	8000c38 <__aeabi_d2f>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a86      	ldr	r2, [pc, #536]	@ (80017fc <main+0x7c4>)
 80015e4:	6013      	str	r3, [r2, #0]
	  	                					imin = 0;
 80015e6:	4b86      	ldr	r3, [pc, #536]	@ (8001800 <main+0x7c8>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
	  	                				}
	  	                				if(/*once == 0*/delay_tr < 0.001 /*&& RAMP_FINISHED == 1*/){
 80015ec:	4b83      	ldr	r3, [pc, #524]	@ (80017fc <main+0x7c4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ffd1 	bl	8000598 <__aeabi_f2d>
 80015f6:	a37e      	add	r3, pc, #504	@ (adr r3, 80017f0 <main+0x7b8>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7ff fa96 	bl	8000b2c <__aeabi_dcmplt>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d033      	beq.n	800166e <main+0x636>

	  	                					int delay_tr_freq = (int)(1/delay_tr);
 8001606:	4b7d      	ldr	r3, [pc, #500]	@ (80017fc <main+0x7c4>)
 8001608:	ed93 7a00 	vldr	s14, [r3]
 800160c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001618:	ee17 3a90 	vmov	r3, s15
 800161c:	607b      	str	r3, [r7, #4]

	  	                					if(delay_tr_freq>20000000) delay_tr_freq = 20000000;//10Mhz
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a78      	ldr	r2, [pc, #480]	@ (8001804 <main+0x7cc>)
 8001622:	4293      	cmp	r3, r2
 8001624:	dd01      	ble.n	800162a <main+0x5f2>
 8001626:	4b77      	ldr	r3, [pc, #476]	@ (8001804 <main+0x7cc>)
 8001628:	607b      	str	r3, [r7, #4]

	  	                					if(abs(delay_tr_freq_ACC-delay_tr_freq) >= 100000) {
 800162a:	4b77      	ldr	r3, [pc, #476]	@ (8001808 <main+0x7d0>)
 800162c:	ed93 7a00 	vldr	s14, [r3]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800163e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001642:	ee17 3a90 	vmov	r3, s15
 8001646:	2b00      	cmp	r3, #0
 8001648:	bfb8      	it	lt
 800164a:	425b      	neglt	r3, r3
 800164c:	4a6f      	ldr	r2, [pc, #444]	@ (800180c <main+0x7d4>)
 800164e:	4293      	cmp	r3, r2
 8001650:	dd0d      	ble.n	800166e <main+0x636>
	  	                						Update_PWM_Frequency(&htim1, TIM_CHANNEL_1, delay_tr_freq); // Set TIM1 CH1 to freq that is delay tr and send to fpga
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	461a      	mov	r2, r3
 8001656:	2100      	movs	r1, #0
 8001658:	486d      	ldr	r0, [pc, #436]	@ (8001810 <main+0x7d8>)
 800165a:	f001 fa33 	bl	8002ac4 <Update_PWM_Frequency>
	  	                						delay_tr_freq_ACC = delay_tr_freq;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	ee07 3a90 	vmov	s15, r3
 8001664:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001668:	4b67      	ldr	r3, [pc, #412]	@ (8001808 <main+0x7d0>)
 800166a:	edc3 7a00 	vstr	s15, [r3]
	  	                					}
	  	                				}
	  	                				if(/*once == 0 output_vol> 47000 && RAMP_FINISHED == 1 */ imax1 > 0 && output_vol> 47000  ){
 800166e:	4b69      	ldr	r3, [pc, #420]	@ (8001814 <main+0x7dc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	dd63      	ble.n	800173e <main+0x706>
 8001676:	4b68      	ldr	r3, [pc, #416]	@ (8001818 <main+0x7e0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f24b 7298 	movw	r2, #47000	@ 0xb798
 800167e:	4293      	cmp	r3, r2
 8001680:	d95d      	bls.n	800173e <main+0x706>

	  	            	  	                		delay_hc = (float)(((float)C_CAP*output_vol) * (float)(1/(float)imax1));
 8001682:	4b65      	ldr	r3, [pc, #404]	@ (8001818 <main+0x7e0>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	ee07 3a90 	vmov	s15, r3
 800168a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800168e:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 800181c <main+0x7e4>
 8001692:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001696:	4b5f      	ldr	r3, [pc, #380]	@ (8001814 <main+0x7dc>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	ee07 3a90 	vmov	s15, r3
 800169e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80016a2:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80016a6:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80016aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ae:	4b5c      	ldr	r3, [pc, #368]	@ (8001820 <main+0x7e8>)
 80016b0:	edc3 7a00 	vstr	s15, [r3]
	  	                					  	    int delay_hc_freq = (int)(1/delay_hc);
 80016b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001820 <main+0x7e8>)
 80016b6:	ed93 7a00 	vldr	s14, [r3]
 80016ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016c6:	ee17 3a90 	vmov	r3, s15
 80016ca:	603b      	str	r3, [r7, #0]

	  	                					  	   if(delay_hc_freq>20000000) delay_hc_freq = 20000000;//10Mhz jakis problem
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	4a4d      	ldr	r2, [pc, #308]	@ (8001804 <main+0x7cc>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	dd01      	ble.n	80016d8 <main+0x6a0>
 80016d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001804 <main+0x7cc>)
 80016d6:	603b      	str	r3, [r7, #0]

	  	                					  	   if(abs(delay_hc_freq_ACC-delay_hc_freq) >= 100000) {
 80016d8:	4b52      	ldr	r3, [pc, #328]	@ (8001824 <main+0x7ec>)
 80016da:	ed93 7a00 	vldr	s14, [r3]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	ee07 3a90 	vmov	s15, r3
 80016e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f0:	ee17 3a90 	vmov	r3, s15
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	bfb8      	it	lt
 80016f8:	425b      	neglt	r3, r3
 80016fa:	4a44      	ldr	r2, [pc, #272]	@ (800180c <main+0x7d4>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	dd1e      	ble.n	800173e <main+0x706>
	  	                					  		 start_ticks = SysTick->VAL;
 8001700:	4b49      	ldr	r3, [pc, #292]	@ (8001828 <main+0x7f0>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	461a      	mov	r2, r3
 8001706:	4b49      	ldr	r3, [pc, #292]	@ (800182c <main+0x7f4>)
 8001708:	601a      	str	r2, [r3, #0]

	  	                					  	    Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, delay_hc_freq); // Set TIM8 CH1 o freq that is delay hc and send to fpga
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	2104      	movs	r1, #4
 8001710:	4847      	ldr	r0, [pc, #284]	@ (8001830 <main+0x7f8>)
 8001712:	f001 f9d7 	bl	8002ac4 <Update_PWM_Frequency>

	  	                					  	    stop_ticks = SysTick->VAL;
 8001716:	4b44      	ldr	r3, [pc, #272]	@ (8001828 <main+0x7f0>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	461a      	mov	r2, r3
 800171c:	4b45      	ldr	r3, [pc, #276]	@ (8001834 <main+0x7fc>)
 800171e:	601a      	str	r2, [r3, #0]
	  	                					  	    elapsed_ticks = start_ticks-stop_ticks;
 8001720:	4b42      	ldr	r3, [pc, #264]	@ (800182c <main+0x7f4>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b43      	ldr	r3, [pc, #268]	@ (8001834 <main+0x7fc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	4a43      	ldr	r2, [pc, #268]	@ (8001838 <main+0x800>)
 800172c:	6013      	str	r3, [r2, #0]

	  	                					  	    delay_hc_freq_ACC = delay_hc_freq;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	ee07 3a90 	vmov	s15, r3
 8001734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001738:	4b3a      	ldr	r3, [pc, #232]	@ (8001824 <main+0x7ec>)
 800173a:	edc3 7a00 	vstr	s15, [r3]
	  	                					  	   }
	  	                				}
	  	                				if(RAMP_FINISHED == 0) Vramp = RAMP(Vramp, 48000, 20000, Ts); // Adding to Vramp stepping voltage to create starting ramp
 800173e:	4b3f      	ldr	r3, [pc, #252]	@ (800183c <main+0x804>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10d      	bne.n	8001762 <main+0x72a>
 8001746:	4b3e      	ldr	r3, [pc, #248]	@ (8001840 <main+0x808>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	ed9f 0a3e 	vldr	s0, [pc, #248]	@ 8001844 <main+0x80c>
 800174e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001752:	f64b 3180 	movw	r1, #48000	@ 0xbb80
 8001756:	4618      	mov	r0, r3
 8001758:	f001 fb96 	bl	8002e88 <RAMP>
 800175c:	4603      	mov	r3, r0
 800175e:	4a38      	ldr	r2, [pc, #224]	@ (8001840 <main+0x808>)
 8001760:	6013      	str	r3, [r2, #0]

	  	                				if (Vramp > 0 ) regulatorPI(&imax1, &Integral_I, output_vol, Vramp, LIM_PEAK_POS, LIM_PEAK_NEG, Kp, Ti, Ts);
 8001762:	4b37      	ldr	r3, [pc, #220]	@ (8001840 <main+0x808>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	dd1c      	ble.n	80017a4 <main+0x76c>
 800176a:	4b2b      	ldr	r3, [pc, #172]	@ (8001818 <main+0x7e0>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	461c      	mov	r4, r3
 8001770:	4b33      	ldr	r3, [pc, #204]	@ (8001840 <main+0x808>)
 8001772:	6819      	ldr	r1, [r3, #0]
 8001774:	4b34      	ldr	r3, [pc, #208]	@ (8001848 <main+0x810>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a34      	ldr	r2, [pc, #208]	@ (800184c <main+0x814>)
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	4834      	ldr	r0, [pc, #208]	@ (8001850 <main+0x818>)
 800177e:	edd0 7a00 	vldr	s15, [r0]
 8001782:	4834      	ldr	r0, [pc, #208]	@ (8001854 <main+0x81c>)
 8001784:	ed90 7a00 	vldr	s14, [r0]
 8001788:	9201      	str	r2, [sp, #4]
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 8001844 <main+0x80c>
 8001790:	eef0 0a47 	vmov.f32	s1, s14
 8001794:	eeb0 0a67 	vmov.f32	s0, s15
 8001798:	460b      	mov	r3, r1
 800179a:	4622      	mov	r2, r4
 800179c:	492e      	ldr	r1, [pc, #184]	@ (8001858 <main+0x820>)
 800179e:	481d      	ldr	r0, [pc, #116]	@ (8001814 <main+0x7dc>)
 80017a0:	f001 fbc4 	bl	8002f2c <regulatorPI>



	  	                				imax2 =  imax1 + imax2_sum;//
 80017a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <main+0x7dc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	461a      	mov	r2, r3
 80017aa:	4b2c      	ldr	r3, [pc, #176]	@ (800185c <main+0x824>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4413      	add	r3, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001860 <main+0x828>)
 80017b4:	601a      	str	r2, [r3, #0]

	  	                				if(once == 0){
 80017b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001864 <main+0x82c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d10b      	bne.n	80017d6 <main+0x79e>
	  	                					HAL_Delay(500);
 80017be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017c2:	f002 ffb5 	bl	8004730 <HAL_Delay>
	  	                					HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
 80017c6:	2201      	movs	r2, #1
 80017c8:	2120      	movs	r1, #32
 80017ca:	4827      	ldr	r0, [pc, #156]	@ (8001868 <main+0x830>)
 80017cc:	f005 fd74 	bl	80072b8 <HAL_GPIO_WritePin>
	  	                					once = 1;
 80017d0:	4b24      	ldr	r3, [pc, #144]	@ (8001864 <main+0x82c>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
	  	                				}

	  	                				flag_control = 0;
 80017d6:	4b25      	ldr	r3, [pc, #148]	@ (800186c <main+0x834>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]

	  	                	  }

	  	                  }
	  	                  break;
 80017dc:	e0e0      	b.n	80019a0 <main+0x968>
 80017de:	bf00      	nop
 80017e0:	54442d18 	.word	0x54442d18
 80017e4:	400921fb 	.word	0x400921fb
 80017e8:	155f05f7 	.word	0x155f05f7
 80017ec:	3e4eb582 	.word	0x3e4eb582
 80017f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80017f4:	3f50624d 	.word	0x3f50624d
 80017f8:	20000014 	.word	0x20000014
 80017fc:	20000004 	.word	0x20000004
 8001800:	20000a60 	.word	0x20000a60
 8001804:	01312d00 	.word	0x01312d00
 8001808:	2000000c 	.word	0x2000000c
 800180c:	0001869f 	.word	0x0001869f
 8001810:	200007ac 	.word	0x200007ac
 8001814:	20000a58 	.word	0x20000a58
 8001818:	20000034 	.word	0x20000034
 800181c:	31972ecf 	.word	0x31972ecf
 8001820:	20000008 	.word	0x20000008
 8001824:	20000010 	.word	0x20000010
 8001828:	e000e010 	.word	0xe000e010
 800182c:	20000bb0 	.word	0x20000bb0
 8001830:	200008dc 	.word	0x200008dc
 8001834:	20000bb4 	.word	0x20000bb4
 8001838:	20000bb8 	.word	0x20000bb8
 800183c:	20000a8c 	.word	0x20000a8c
 8001840:	20000a84 	.word	0x20000a84
 8001844:	3851b717 	.word	0x3851b717
 8001848:	20000020 	.word	0x20000020
 800184c:	20000b78 	.word	0x20000b78
 8001850:	20000018 	.word	0x20000018
 8001854:	2000001c 	.word	0x2000001c
 8001858:	20000b7c 	.word	0x20000b7c
 800185c:	20000a98 	.word	0x20000a98
 8001860:	20000a5c 	.word	0x20000a5c
 8001864:	20000b8c 	.word	0x20000b8c
 8001868:	48000800 	.word	0x48000800
 800186c:	20000b91 	.word	0x20000b91
	  	              case STATE_FAULT:
	  	                  // Handle fault condition
	  	            	  // Turn off all gate drivers and stop FPGA
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP drives mosfet etc
 8001870:	2200      	movs	r2, #0
 8001872:	2120      	movs	r1, #32
 8001874:	484c      	ldr	r0, [pc, #304]	@ (80019a8 <main+0x970>)
 8001876:	f005 fd1f 	bl	80072b8 <HAL_GPIO_WritePin>

	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!


	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 800187a:	484c      	ldr	r0, [pc, #304]	@ (80019ac <main+0x974>)
 800187c:	f008 fbf4 	bl	800a068 <HAL_TIM_Base_Stop_IT>

	  	            	HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port,NOT_RST_1_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	2180      	movs	r1, #128	@ 0x80
 8001884:	484a      	ldr	r0, [pc, #296]	@ (80019b0 <main+0x978>)
 8001886:	f005 fd17 	bl	80072b8 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_2_GPIO_Port,NOT_RST_2_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001890:	4848      	ldr	r0, [pc, #288]	@ (80019b4 <main+0x97c>)
 8001892:	f005 fd11 	bl	80072b8 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port,NOT_RST_3_Pin, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2101      	movs	r1, #1
 800189a:	4847      	ldr	r0, [pc, #284]	@ (80019b8 <main+0x980>)
 800189c:	f005 fd0c 	bl	80072b8 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port,NOT_RST_4_Pin, GPIO_PIN_RESET);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2140      	movs	r1, #64	@ 0x40
 80018a4:	4840      	ldr	r0, [pc, #256]	@ (80019a8 <main+0x970>)
 80018a6:	f005 fd07 	bl	80072b8 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2102      	movs	r1, #2
 80018ae:	4841      	ldr	r0, [pc, #260]	@ (80019b4 <main+0x97c>)
 80018b0:	f005 fd02 	bl	80072b8 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018ba:	4840      	ldr	r0, [pc, #256]	@ (80019bc <main+0x984>)
 80018bc:	f005 fcfc 	bl	80072b8 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	2120      	movs	r1, #32
 80018c4:	483b      	ldr	r0, [pc, #236]	@ (80019b4 <main+0x97c>)
 80018c6:	f005 fcf7 	bl	80072b8 <HAL_GPIO_WritePin>

	  	            	HAL_TIM_Base_Start(&htim7); // timer for reset OCD and INTERLOCK reset turn off
 80018ca:	483d      	ldr	r0, [pc, #244]	@ (80019c0 <main+0x988>)
 80018cc:	f008 fae4 	bl	8009e98 <HAL_TIM_Base_Start>


	  	            	once = 0;
 80018d0:	4b3c      	ldr	r3, [pc, #240]	@ (80019c4 <main+0x98c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
	  	            	start_program = 0;
 80018d6:	4b3c      	ldr	r3, [pc, #240]	@ (80019c8 <main+0x990>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
	  	            	currentState = STATE_SHUTDOWN;
 80018dc:	4b3b      	ldr	r3, [pc, #236]	@ (80019cc <main+0x994>)
 80018de:	2204      	movs	r2, #4
 80018e0:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 80018e2:	e05e      	b.n	80019a2 <main+0x96a>
	  	              case STATE_SHUTDOWN:
	  	                  // Safely shut down the converter
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 80018e4:	2200      	movs	r2, #0
 80018e6:	2120      	movs	r1, #32
 80018e8:	482f      	ldr	r0, [pc, #188]	@ (80019a8 <main+0x970>)
 80018ea:	f005 fce5 	bl	80072b8 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 80018ee:	2201      	movs	r2, #1
 80018f0:	2104      	movs	r1, #4
 80018f2:	4832      	ldr	r0, [pc, #200]	@ (80019bc <main+0x984>)
 80018f4:	f005 fce0 	bl	80072b8 <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 80018f8:	482c      	ldr	r0, [pc, #176]	@ (80019ac <main+0x974>)
 80018fa:	f008 fbb5 	bl	800a068 <HAL_TIM_Base_Stop_IT>
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
	  	            	RAMP_FINISHED = 0;
 80018fe:	4b34      	ldr	r3, [pc, #208]	@ (80019d0 <main+0x998>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
						once = 0;
 8001904:	4b2f      	ldr	r3, [pc, #188]	@ (80019c4 <main+0x98c>)
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
	  	            	imax1 = 1;
 800190a:	4b32      	ldr	r3, [pc, #200]	@ (80019d4 <main+0x99c>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]
						imax2 = 1;
 8001910:	4b31      	ldr	r3, [pc, #196]	@ (80019d8 <main+0x9a0>)
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]
						vout = 1;
 8001916:	4b31      	ldr	r3, [pc, #196]	@ (80019dc <main+0x9a4>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]
						Vramp = 1;
 800191c:	4b30      	ldr	r3, [pc, #192]	@ (80019e0 <main+0x9a8>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]
						delay_tr = 1;
 8001922:	4b30      	ldr	r3, [pc, #192]	@ (80019e4 <main+0x9ac>)
 8001924:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001928:	601a      	str	r2, [r3, #0]
						delay_hc = 1;
 800192a:	4b2f      	ldr	r3, [pc, #188]	@ (80019e8 <main+0x9b0>)
 800192c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001930:	601a      	str	r2, [r3, #0]
						Gv = 1;
 8001932:	4b2e      	ldr	r3, [pc, #184]	@ (80019ec <main+0x9b4>)
 8001934:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001938:	601a      	str	r2, [r3, #0]
						Integral_I = 1;
 800193a:	4b2d      	ldr	r3, [pc, #180]	@ (80019f0 <main+0x9b8>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]
						prev_delta = 1;
 8001940:	4b2c      	ldr	r3, [pc, #176]	@ (80019f4 <main+0x9bc>)
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]
						input_vol = 1;
 8001946:	4b2c      	ldr	r3, [pc, #176]	@ (80019f8 <main+0x9c0>)
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]
						input_voltage =1;
 800194c:	4b2b      	ldr	r3, [pc, #172]	@ (80019fc <main+0x9c4>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]
						output_vol = 1;
 8001952:	4b2b      	ldr	r3, [pc, #172]	@ (8001a00 <main+0x9c8>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]
						output_voltage =1;
 8001958:	4b2a      	ldr	r3, [pc, #168]	@ (8001a04 <main+0x9cc>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]
						input_vol_x_n1 = 1;
 800195e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <main+0x9d0>)
 8001960:	2201      	movs	r2, #1
 8001962:	601a      	str	r2, [r3, #0]
						input_vol_y_n1 = 1;
 8001964:	4b29      	ldr	r3, [pc, #164]	@ (8001a0c <main+0x9d4>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]
						output_vol_x_n1 = 1;
 800196a:	4b29      	ldr	r3, [pc, #164]	@ (8001a10 <main+0x9d8>)
 800196c:	2201      	movs	r2, #1
 800196e:	601a      	str	r2, [r3, #0]
						output_vol_y_n1 = 1;
 8001970:	4b28      	ldr	r3, [pc, #160]	@ (8001a14 <main+0x9dc>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]
						imin = 1;
 8001976:	4b28      	ldr	r3, [pc, #160]	@ (8001a18 <main+0x9e0>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]
						HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 800197c:	2104      	movs	r1, #4
 800197e:	4827      	ldr	r0, [pc, #156]	@ (8001a1c <main+0x9e4>)
 8001980:	f008 fd0a 	bl	800a398 <HAL_TIM_PWM_Stop>
						HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001984:	2100      	movs	r1, #0
 8001986:	4826      	ldr	r0, [pc, #152]	@ (8001a20 <main+0x9e8>)
 8001988:	f008 fd06 	bl	800a398 <HAL_TIM_PWM_Stop>
	  	            	currentState = STATE_STANDBY;
 800198c:	4b0f      	ldr	r3, [pc, #60]	@ (80019cc <main+0x994>)
 800198e:	2201      	movs	r2, #1
 8001990:	701a      	strb	r2, [r3, #0]
	  	              }

	  	                  break;
 8001992:	e006      	b.n	80019a2 <main+0x96a>
	  	              default:
	  	                  break;
 8001994:	bf00      	nop
 8001996:	f7ff bb98 	b.w	80010ca <main+0x92>
	  	                  break;
 800199a:	bf00      	nop
 800199c:	f7ff bb95 	b.w	80010ca <main+0x92>
	  	                  break;
 80019a0:	bf00      	nop
	  	  	  	  checkfaults = Check_Faults();
 80019a2:	f7ff bb92 	b.w	80010ca <main+0x92>
 80019a6:	bf00      	nop
 80019a8:	48000800 	.word	0x48000800
 80019ac:	20000928 	.word	0x20000928
 80019b0:	48000400 	.word	0x48000400
 80019b4:	48001000 	.word	0x48001000
 80019b8:	48000c00 	.word	0x48000c00
 80019bc:	48001400 	.word	0x48001400
 80019c0:	20000890 	.word	0x20000890
 80019c4:	20000b8c 	.word	0x20000b8c
 80019c8:	20000b84 	.word	0x20000b84
 80019cc:	20000b87 	.word	0x20000b87
 80019d0:	20000a8c 	.word	0x20000a8c
 80019d4:	20000a58 	.word	0x20000a58
 80019d8:	20000a5c 	.word	0x20000a5c
 80019dc:	20000a80 	.word	0x20000a80
 80019e0:	20000a84 	.word	0x20000a84
 80019e4:	20000004 	.word	0x20000004
 80019e8:	20000008 	.word	0x20000008
 80019ec:	20000014 	.word	0x20000014
 80019f0:	20000b7c 	.word	0x20000b7c
 80019f4:	20000b80 	.word	0x20000b80
 80019f8:	20000030 	.word	0x20000030
 80019fc:	20000a64 	.word	0x20000a64
 8001a00:	20000034 	.word	0x20000034
 8001a04:	20000a7c 	.word	0x20000a7c
 8001a08:	20000038 	.word	0x20000038
 8001a0c:	2000003c 	.word	0x2000003c
 8001a10:	20000040 	.word	0x20000040
 8001a14:	20000044 	.word	0x20000044
 8001a18:	20000a60 	.word	0x20000a60
 8001a1c:	200008dc 	.word	0x200008dc
 8001a20:	200007ac 	.word	0x200007ac

08001a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b094      	sub	sp, #80	@ 0x50
 8001a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	f107 0318 	add.w	r3, r7, #24
 8001a2e:	2238      	movs	r2, #56	@ 0x38
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f010 fa07 	bl	8011e46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]
 8001a42:	60da      	str	r2, [r3, #12]
 8001a44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a46:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a4a:	f007 f99d 	bl	8008d88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001a4e:	2322      	movs	r3, #34	@ 0x22
 8001a50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a56:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a58:	2340      	movs	r3, #64	@ 0x40
 8001a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a60:	2302      	movs	r3, #2
 8001a62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a64:	2302      	movs	r3, #2
 8001a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001a68:	2304      	movs	r3, #4
 8001a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001a6c:	234b      	movs	r3, #75	@ 0x4b
 8001a6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a70:	2302      	movs	r3, #2
 8001a72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a74:	2302      	movs	r3, #2
 8001a76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a7c:	f107 0318 	add.w	r3, r7, #24
 8001a80:	4618      	mov	r0, r3
 8001a82:	f007 fa35 	bl	8008ef0 <HAL_RCC_OscConfig>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001a8c:	f001 ffc8 	bl	8003a20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a90:	230f      	movs	r3, #15
 8001a92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a94:	2303      	movs	r3, #3
 8001a96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2104      	movs	r1, #4
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f007 fd33 	bl	8009514 <HAL_RCC_ClockConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001ab4:	f001 ffb4 	bl	8003a20 <Error_Handler>
  }
}
 8001ab8:	bf00      	nop
 8001aba:	3750      	adds	r7, #80	@ 0x50
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	@ 0x30
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001ac6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f010 f9b4 	bl	8011e46 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001ade:	4b32      	ldr	r3, [pc, #200]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001ae0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001ae4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ae6:	4b30      	ldr	r3, [pc, #192]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001ae8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001aec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001aee:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001af4:	4b2c      	ldr	r3, [pc, #176]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001afa:	4b2b      	ldr	r3, [pc, #172]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b00:	4b29      	ldr	r3, [pc, #164]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b06:	4b28      	ldr	r3, [pc, #160]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001b08:	2204      	movs	r2, #4
 8001b0a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b0c:	4b26      	ldr	r3, [pc, #152]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b12:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001b18:	4b23      	ldr	r3, [pc, #140]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b26:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001b32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b48:	4817      	ldr	r0, [pc, #92]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001b4a:	f003 f857 	bl	8004bfc <HAL_ADC_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001b54:	f001 ff64 	bl	8003a20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b60:	4619      	mov	r1, r3
 8001b62:	4811      	ldr	r0, [pc, #68]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001b64:	f004 f96c 	bl	8005e40 <HAL_ADCEx_MultiModeConfigChannel>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001b6e:	f001 ff57 	bl	8003a20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <MX_ADC1_Init+0xec>)
 8001b74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b76:	2306      	movs	r3, #6
 8001b78:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001b7a:	2307      	movs	r3, #7
 8001b7c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b7e:	237f      	movs	r3, #127	@ 0x7f
 8001b80:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b82:	2304      	movs	r3, #4
 8001b84:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b8a:	1d3b      	adds	r3, r7, #4
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4806      	ldr	r0, [pc, #24]	@ (8001ba8 <MX_ADC1_Init+0xe8>)
 8001b90:	f003 fad8 	bl	8005144 <HAL_ADC_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001b9a:	f001 ff41 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b9e:	bf00      	nop
 8001ba0:	3730      	adds	r7, #48	@ 0x30
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	200003cc 	.word	0x200003cc
 8001bac:	cb840000 	.word	0xcb840000

08001bb0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	@ 0x30
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f010 f93c 	bl	8011e46 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001bce:	4b57      	ldr	r3, [pc, #348]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001bd0:	4a57      	ldr	r2, [pc, #348]	@ (8001d30 <MX_ADC3_Init+0x180>)
 8001bd2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001bd4:	4b55      	ldr	r3, [pc, #340]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001bd6:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001bda:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001bdc:	4b53      	ldr	r3, [pc, #332]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001be2:	4b52      	ldr	r3, [pc, #328]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001be8:	4b50      	ldr	r3, [pc, #320]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001bee:	4b4f      	ldr	r3, [pc, #316]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bf4:	4b4d      	ldr	r3, [pc, #308]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001bfa:	4b4c      	ldr	r3, [pc, #304]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001c00:	4b4a      	ldr	r3, [pc, #296]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 5;
 8001c06:	4b49      	ldr	r3, [pc, #292]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001c08:	2205      	movs	r2, #5
 8001c0a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001c0c:	4b47      	ldr	r3, [pc, #284]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c14:	4b45      	ldr	r3, [pc, #276]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c1a:	4b44      	ldr	r3, [pc, #272]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001c20:	4b42      	ldr	r3, [pc, #264]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001c28:	4b40      	ldr	r3, [pc, #256]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001c2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001c30:	4b3e      	ldr	r3, [pc, #248]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001c38:	483c      	ldr	r0, [pc, #240]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001c3a:	f002 ffdf 	bl	8004bfc <HAL_ADC_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8001c44:	f001 feec 	bl	8003a20 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001c4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c50:	4619      	mov	r1, r3
 8001c52:	4836      	ldr	r0, [pc, #216]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001c54:	f004 f8f4 	bl	8005e40 <HAL_ADCEx_MultiModeConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001c5e:	f001 fedf 	bl	8003a20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c62:	4b34      	ldr	r3, [pc, #208]	@ (8001d34 <MX_ADC3_Init+0x184>)
 8001c64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c66:	2306      	movs	r3, #6
 8001c68:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c6e:	237f      	movs	r3, #127	@ 0x7f
 8001c70:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 38;
 8001c76:	2326      	movs	r3, #38	@ 0x26
 8001c78:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8001c7a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c7e:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetSaturation = DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4828      	ldr	r0, [pc, #160]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001c8c:	f003 fa5a 	bl	8005144 <HAL_ADC_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001c96:	f001 fec3 	bl	8003a20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c9a:	4b27      	ldr	r3, [pc, #156]	@ (8001d38 <MX_ADC3_Init+0x188>)
 8001c9c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001c9e:	230c      	movs	r3, #12
 8001ca0:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_2;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 37;
 8001ca6:	2325      	movs	r3, #37	@ 0x25
 8001ca8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	481f      	ldr	r0, [pc, #124]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001cb0:	f003 fa48 	bl	8005144 <HAL_ADC_ConfigChannel>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 8001cba:	f001 feb1 	bl	8003a20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <MX_ADC3_Init+0x18c>)
 8001cc0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001cc2:	2312      	movs	r3, #18
 8001cc4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_3;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 8;
 8001cca:	2308      	movs	r3, #8
 8001ccc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cce:	1d3b      	adds	r3, r7, #4
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4816      	ldr	r0, [pc, #88]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001cd4:	f003 fa36 	bl	8005144 <HAL_ADC_ConfigChannel>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_ADC3_Init+0x132>
  {
    Error_Handler();
 8001cde:	f001 fe9f 	bl	8003a20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001ce2:	4b17      	ldr	r3, [pc, #92]	@ (8001d40 <MX_ADC3_Init+0x190>)
 8001ce4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001ce6:	2318      	movs	r3, #24
 8001ce8:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001cea:	2304      	movs	r3, #4
 8001cec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cf2:	1d3b      	adds	r3, r7, #4
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	480d      	ldr	r0, [pc, #52]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001cf8:	f003 fa24 	bl	8005144 <HAL_ADC_ConfigChannel>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8001d02:	f001 fe8d 	bl	8003a20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d06:	4b0f      	ldr	r3, [pc, #60]	@ (8001d44 <MX_ADC3_Init+0x194>)
 8001d08:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001d0a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	4619      	mov	r1, r3
 8001d14:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <MX_ADC3_Init+0x17c>)
 8001d16:	f003 fa15 	bl	8005144 <HAL_ADC_ConfigChannel>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8001d20:	f001 fe7e 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	3730      	adds	r7, #48	@ 0x30
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	20000438 	.word	0x20000438
 8001d30:	50000400 	.word	0x50000400
 8001d34:	04300002 	.word	0x04300002
 8001d38:	08600004 	.word	0x08600004
 8001d3c:	0c900008 	.word	0x0c900008
 8001d40:	10c00010 	.word	0x10c00010
 8001d44:	14f00020 	.word	0x14f00020

08001d48 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d4e:	463b      	mov	r3, r7
 8001d50:	2220      	movs	r2, #32
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f010 f876 	bl	8011e46 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001d5c:	4a2b      	ldr	r2, [pc, #172]	@ (8001e0c <MX_ADC4_Init+0xc4>)
 8001d5e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001d60:	4b29      	ldr	r3, [pc, #164]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001d62:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001d66:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001d68:	4b27      	ldr	r3, [pc, #156]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d6e:	4b26      	ldr	r3, [pc, #152]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001d74:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d7a:	4b23      	ldr	r3, [pc, #140]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d80:	4b21      	ldr	r3, [pc, #132]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001d82:	2204      	movs	r2, #4
 8001d84:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001d86:	4b20      	ldr	r3, [pc, #128]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001d92:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001d94:	2201      	movs	r2, #1
 8001d96:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001da0:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001da6:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001dac:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001db6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dba:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001dc4:	4810      	ldr	r0, [pc, #64]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001dc6:	f002 ff19 	bl	8004bfc <HAL_ADC_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8001dd0:	f001 fe26 	bl	8003a20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <MX_ADC4_Init+0xc8>)
 8001dd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dd8:	2306      	movs	r3, #6
 8001dda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001ddc:	2307      	movs	r3, #7
 8001dde:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001de0:	237f      	movs	r3, #127	@ 0x7f
 8001de2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001de4:	2304      	movs	r3, #4
 8001de6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001dec:	463b      	mov	r3, r7
 8001dee:	4619      	mov	r1, r3
 8001df0:	4805      	ldr	r0, [pc, #20]	@ (8001e08 <MX_ADC4_Init+0xc0>)
 8001df2:	f003 f9a7 	bl	8005144 <HAL_ADC_ConfigChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8001dfc:	f001 fe10 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	200004a4 	.word	0x200004a4
 8001e0c:	50000500 	.word	0x50000500
 8001e10:	04300002 	.word	0x04300002

08001e14 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e1a:	463b      	mov	r3, r7
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4618      	mov	r0, r3
 8001e22:	f010 f810 	bl	8011e46 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001e26:	4b31      	ldr	r3, [pc, #196]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e28:	4a31      	ldr	r2, [pc, #196]	@ (8001ef0 <MX_ADC5_Init+0xdc>)
 8001e2a:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001e2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e2e:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001e32:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001e34:	4b2d      	ldr	r3, [pc, #180]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001e40:	4b2a      	ldr	r3, [pc, #168]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e46:	4b29      	ldr	r3, [pc, #164]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e4c:	4b27      	ldr	r3, [pc, #156]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e4e:	2204      	movs	r2, #4
 8001e50:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001e52:	4b26      	ldr	r3, [pc, #152]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001e58:	4b24      	ldr	r3, [pc, #144]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001e5e:	4b23      	ldr	r3, [pc, #140]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001e64:	4b21      	ldr	r3, [pc, #132]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e72:	4b1e      	ldr	r3, [pc, #120]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001e78:	4b1c      	ldr	r3, [pc, #112]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e80:	4b1a      	ldr	r3, [pc, #104]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8001e86:	4b19      	ldr	r3, [pc, #100]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001e8e:	4b17      	ldr	r3, [pc, #92]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e90:	221c      	movs	r2, #28
 8001e92:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8001e94:	4b15      	ldr	r3, [pc, #84]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e9a:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001e9c:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001ea2:	4b12      	ldr	r3, [pc, #72]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001ea8:	4810      	ldr	r0, [pc, #64]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001eaa:	f002 fea7 	bl	8004bfc <HAL_ADC_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_ADC5_Init+0xa4>
  {
    Error_Handler();
 8001eb4:	f001 fdb4 	bl	8003a20 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef4 <MX_ADC5_Init+0xe0>)
 8001eba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ebc:	2306      	movs	r3, #6
 8001ebe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ec4:	237f      	movs	r3, #127	@ 0x7f
 8001ec6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ec8:	2304      	movs	r3, #4
 8001eca:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4805      	ldr	r0, [pc, #20]	@ (8001eec <MX_ADC5_Init+0xd8>)
 8001ed6:	f003 f935 	bl	8005144 <HAL_ADC_ConfigChannel>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_ADC5_Init+0xd0>
  {
    Error_Handler();
 8001ee0:	f001 fd9e 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000510 	.word	0x20000510
 8001ef0:	50000600 	.word	0x50000600
 8001ef4:	04300002 	.word	0x04300002

08001ef8 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001efc:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <MX_CORDIC_Init+0x20>)
 8001efe:	4a07      	ldr	r2, [pc, #28]	@ (8001f1c <MX_CORDIC_Init+0x24>)
 8001f00:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <MX_CORDIC_Init+0x20>)
 8001f04:	f004 f8a4 	bl	8006050 <HAL_CORDIC_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001f0e:	f001 fd87 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2000069c 	.word	0x2000069c
 8001f1c:	40020c00 	.word	0x40020c00

08001f20 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08c      	sub	sp, #48	@ 0x30
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f26:	463b      	mov	r3, r7
 8001f28:	2230      	movs	r2, #48	@ 0x30
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f00f ff8a 	bl	8011e46 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001f32:	4b1e      	ldr	r3, [pc, #120]	@ (8001fac <MX_DAC1_Init+0x8c>)
 8001f34:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb0 <MX_DAC1_Init+0x90>)
 8001f36:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001f38:	481c      	ldr	r0, [pc, #112]	@ (8001fac <MX_DAC1_Init+0x8c>)
 8001f3a:	f004 fad2 	bl	80064e2 <HAL_DAC_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001f44:	f001 fd6c 	bl	8003a20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001f64:	2301      	movs	r3, #1
 8001f66:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001f6c:	463b      	mov	r3, r7
 8001f6e:	2200      	movs	r2, #0
 8001f70:	4619      	mov	r1, r3
 8001f72:	480e      	ldr	r0, [pc, #56]	@ (8001fac <MX_DAC1_Init+0x8c>)
 8001f74:	f004 fbd2 	bl	800671c <HAL_DAC_ConfigChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001f7e:	f001 fd4f 	bl	8003a20 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001f82:	463b      	mov	r3, r7
 8001f84:	2210      	movs	r2, #16
 8001f86:	4619      	mov	r1, r3
 8001f88:	4808      	ldr	r0, [pc, #32]	@ (8001fac <MX_DAC1_Init+0x8c>)
 8001f8a:	f004 fbc7 	bl	800671c <HAL_DAC_ConfigChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8001f94:	f001 fd44 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  __HAL_LINKDMA(&hdac1, DMA_Handle1, hdma_dac1_ch1);
 8001f98:	4b04      	ldr	r3, [pc, #16]	@ (8001fac <MX_DAC1_Init+0x8c>)
 8001f9a:	4a06      	ldr	r2, [pc, #24]	@ (8001fb4 <MX_DAC1_Init+0x94>)
 8001f9c:	609a      	str	r2, [r3, #8]
 8001f9e:	4b05      	ldr	r3, [pc, #20]	@ (8001fb4 <MX_DAC1_Init+0x94>)
 8001fa0:	4a02      	ldr	r2, [pc, #8]	@ (8001fac <MX_DAC1_Init+0x8c>)
 8001fa2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END DAC1_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	3730      	adds	r7, #48	@ 0x30
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	200006c4 	.word	0x200006c4
 8001fb0:	50000800 	.word	0x50000800
 8001fb4:	200006ec 	.word	0x200006ec

08001fb8 <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08c      	sub	sp, #48	@ 0x30
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001fbe:	463b      	mov	r3, r7
 8001fc0:	2230      	movs	r2, #48	@ 0x30
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00f ff3e 	bl	8011e46 <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 8001fca:	4b16      	ldr	r3, [pc, #88]	@ (8002024 <MX_DAC2_Init+0x6c>)
 8001fcc:	4a16      	ldr	r2, [pc, #88]	@ (8002028 <MX_DAC2_Init+0x70>)
 8001fce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001fd0:	4814      	ldr	r0, [pc, #80]	@ (8002024 <MX_DAC2_Init+0x6c>)
 8001fd2:	f004 fa86 	bl	80064e2 <HAL_DAC_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001fdc:	f001 fd20 	bl	8003a20 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001fec:	2300      	movs	r3, #0
 8001fee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002004:	463b      	mov	r3, r7
 8002006:	2200      	movs	r2, #0
 8002008:	4619      	mov	r1, r3
 800200a:	4806      	ldr	r0, [pc, #24]	@ (8002024 <MX_DAC2_Init+0x6c>)
 800200c:	f004 fb86 	bl	800671c <HAL_DAC_ConfigChannel>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8002016:	f001 fd03 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800201a:	bf00      	nop
 800201c:	3730      	adds	r7, #48	@ 0x30
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	200006d8 	.word	0x200006d8
 8002028:	50000c00 	.word	0x50000c00

0800202c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b098      	sub	sp, #96	@ 0x60
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002032:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800203e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]
 8002048:	609a      	str	r2, [r3, #8]
 800204a:	60da      	str	r2, [r3, #12]
 800204c:	611a      	str	r2, [r3, #16]
 800204e:	615a      	str	r2, [r3, #20]
 8002050:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	2234      	movs	r2, #52	@ 0x34
 8002056:	2100      	movs	r1, #0
 8002058:	4618      	mov	r0, r3
 800205a:	f00f fef4 	bl	8011e46 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800205e:	4b3e      	ldr	r3, [pc, #248]	@ (8002158 <MX_TIM1_Init+0x12c>)
 8002060:	4a3e      	ldr	r2, [pc, #248]	@ (800215c <MX_TIM1_Init+0x130>)
 8002062:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002064:	4b3c      	ldr	r3, [pc, #240]	@ (8002158 <MX_TIM1_Init+0x12c>)
 8002066:	2200      	movs	r2, #0
 8002068:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206a:	4b3b      	ldr	r3, [pc, #236]	@ (8002158 <MX_TIM1_Init+0x12c>)
 800206c:	2200      	movs	r2, #0
 800206e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210;
 8002070:	4b39      	ldr	r3, [pc, #228]	@ (8002158 <MX_TIM1_Init+0x12c>)
 8002072:	22d2      	movs	r2, #210	@ 0xd2
 8002074:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002076:	4b38      	ldr	r3, [pc, #224]	@ (8002158 <MX_TIM1_Init+0x12c>)
 8002078:	2200      	movs	r2, #0
 800207a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800207c:	4b36      	ldr	r3, [pc, #216]	@ (8002158 <MX_TIM1_Init+0x12c>)
 800207e:	2200      	movs	r2, #0
 8002080:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002082:	4b35      	ldr	r3, [pc, #212]	@ (8002158 <MX_TIM1_Init+0x12c>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002088:	4833      	ldr	r0, [pc, #204]	@ (8002158 <MX_TIM1_Init+0x12c>)
 800208a:	f008 f81c 	bl	800a0c6 <HAL_TIM_PWM_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002094:	f001 fcc4 	bl	8003a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002098:	2300      	movs	r3, #0
 800209a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800209c:	2300      	movs	r3, #0
 800209e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020a8:	4619      	mov	r1, r3
 80020aa:	482b      	ldr	r0, [pc, #172]	@ (8002158 <MX_TIM1_Init+0x12c>)
 80020ac:	f009 fa52 	bl	800b554 <HAL_TIMEx_MasterConfigSynchronization>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80020b6:	f001 fcb3 	bl	8003a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ba:	2360      	movs	r3, #96	@ 0x60
 80020bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020c2:	2300      	movs	r3, #0
 80020c4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020c6:	2300      	movs	r3, #0
 80020c8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020d6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020da:	2200      	movs	r2, #0
 80020dc:	4619      	mov	r1, r3
 80020de:	481e      	ldr	r0, [pc, #120]	@ (8002158 <MX_TIM1_Init+0x12c>)
 80020e0:	f008 fb46 	bl	800a770 <HAL_TIM_PWM_ConfigChannel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 80020ea:	f001 fc99 	bl	8003a20 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 80020ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <MX_TIM1_Init+0x12c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	699a      	ldr	r2, [r3, #24]
 80020f4:	4b18      	ldr	r3, [pc, #96]	@ (8002158 <MX_TIM1_Init+0x12c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0208 	bic.w	r2, r2, #8
 80020fc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002102:	2300      	movs	r3, #0
 8002104:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002112:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002116:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800211c:	2300      	movs	r3, #0
 800211e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002124:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002128:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800212e:	2300      	movs	r3, #0
 8002130:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002132:	2300      	movs	r3, #0
 8002134:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	4619      	mov	r1, r3
 800213a:	4807      	ldr	r0, [pc, #28]	@ (8002158 <MX_TIM1_Init+0x12c>)
 800213c:	f009 faa0 	bl	800b680 <HAL_TIMEx_ConfigBreakDeadTime>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8002146:	f001 fc6b 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800214a:	4803      	ldr	r0, [pc, #12]	@ (8002158 <MX_TIM1_Init+0x12c>)
 800214c:	f002 f810 	bl	8004170 <HAL_TIM_MspPostInit>

}
 8002150:	bf00      	nop
 8002152:	3760      	adds	r7, #96	@ 0x60
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	200007ac 	.word	0x200007ac
 800215c:	40012c00 	.word	0x40012c00

08002160 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08e      	sub	sp, #56	@ 0x38
 8002164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002166:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	605a      	str	r2, [r3, #4]
 8002170:	609a      	str	r2, [r3, #8]
 8002172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002180:	463b      	mov	r3, r7
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
 800218c:	611a      	str	r2, [r3, #16]
 800218e:	615a      	str	r2, [r3, #20]
 8002190:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002192:	4b2d      	ldr	r3, [pc, #180]	@ (8002248 <MX_TIM4_Init+0xe8>)
 8002194:	4a2d      	ldr	r2, [pc, #180]	@ (800224c <MX_TIM4_Init+0xec>)
 8002196:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002198:	4b2b      	ldr	r3, [pc, #172]	@ (8002248 <MX_TIM4_Init+0xe8>)
 800219a:	2200      	movs	r2, #0
 800219c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800219e:	4b2a      	ldr	r3, [pc, #168]	@ (8002248 <MX_TIM4_Init+0xe8>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 679;
 80021a4:	4b28      	ldr	r3, [pc, #160]	@ (8002248 <MX_TIM4_Init+0xe8>)
 80021a6:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80021aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ac:	4b26      	ldr	r3, [pc, #152]	@ (8002248 <MX_TIM4_Init+0xe8>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b2:	4b25      	ldr	r3, [pc, #148]	@ (8002248 <MX_TIM4_Init+0xe8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021b8:	4823      	ldr	r0, [pc, #140]	@ (8002248 <MX_TIM4_Init+0xe8>)
 80021ba:	f007 fe15 	bl	8009de8 <HAL_TIM_Base_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80021c4:	f001 fc2c 	bl	8003a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021d2:	4619      	mov	r1, r3
 80021d4:	481c      	ldr	r0, [pc, #112]	@ (8002248 <MX_TIM4_Init+0xe8>)
 80021d6:	f008 fbdf 	bl	800a998 <HAL_TIM_ConfigClockSource>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80021e0:	f001 fc1e 	bl	8003a20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021e4:	4818      	ldr	r0, [pc, #96]	@ (8002248 <MX_TIM4_Init+0xe8>)
 80021e6:	f007 ff6e 	bl	800a0c6 <HAL_TIM_PWM_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80021f0:	f001 fc16 	bl	8003a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021fc:	f107 031c 	add.w	r3, r7, #28
 8002200:	4619      	mov	r1, r3
 8002202:	4811      	ldr	r0, [pc, #68]	@ (8002248 <MX_TIM4_Init+0xe8>)
 8002204:	f009 f9a6 	bl	800b554 <HAL_TIMEx_MasterConfigSynchronization>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800220e:	f001 fc07 	bl	8003a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002212:	2360      	movs	r3, #96	@ 0x60
 8002214:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002222:	463b      	mov	r3, r7
 8002224:	2200      	movs	r2, #0
 8002226:	4619      	mov	r1, r3
 8002228:	4807      	ldr	r0, [pc, #28]	@ (8002248 <MX_TIM4_Init+0xe8>)
 800222a:	f008 faa1 	bl	800a770 <HAL_TIM_PWM_ConfigChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002234:	f001 fbf4 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002238:	4803      	ldr	r0, [pc, #12]	@ (8002248 <MX_TIM4_Init+0xe8>)
 800223a:	f001 ff99 	bl	8004170 <HAL_TIM_MspPostInit>

}
 800223e:	bf00      	nop
 8002240:	3738      	adds	r7, #56	@ 0x38
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200007f8 	.word	0x200007f8
 800224c:	40000800 	.word	0x40000800

08002250 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002260:	4b19      	ldr	r3, [pc, #100]	@ (80022c8 <MX_TIM6_Init+0x78>)
 8002262:	4a1a      	ldr	r2, [pc, #104]	@ (80022cc <MX_TIM6_Init+0x7c>)
 8002264:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11549;
 8002266:	4b18      	ldr	r3, [pc, #96]	@ (80022c8 <MX_TIM6_Init+0x78>)
 8002268:	f642 521d 	movw	r2, #11549	@ 0x2d1d
 800226c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226e:	4b16      	ldr	r3, [pc, #88]	@ (80022c8 <MX_TIM6_Init+0x78>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64934;
 8002274:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <MX_TIM6_Init+0x78>)
 8002276:	f64f 52a6 	movw	r2, #64934	@ 0xfda6
 800227a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800227c:	4b12      	ldr	r3, [pc, #72]	@ (80022c8 <MX_TIM6_Init+0x78>)
 800227e:	2200      	movs	r2, #0
 8002280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002282:	4811      	ldr	r0, [pc, #68]	@ (80022c8 <MX_TIM6_Init+0x78>)
 8002284:	f007 fdb0 	bl	8009de8 <HAL_TIM_Base_Init>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800228e:	f001 fbc7 	bl	8003a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	4619      	mov	r1, r3
 800229e:	480a      	ldr	r0, [pc, #40]	@ (80022c8 <MX_TIM6_Init+0x78>)
 80022a0:	f009 f958 	bl	800b554 <HAL_TIMEx_MasterConfigSynchronization>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80022aa:	f001 fbb9 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80022ae:	2200      	movs	r2, #0
 80022b0:	2100      	movs	r1, #0
 80022b2:	2036      	movs	r0, #54	@ 0x36
 80022b4:	f004 f8e1 	bl	800647a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80022b8:	2036      	movs	r0, #54	@ 0x36
 80022ba:	f004 f8f8 	bl	80064ae <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000844 	.word	0x20000844
 80022cc:	40001000 	.word	0x40001000

080022d0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80022e0:	4b14      	ldr	r3, [pc, #80]	@ (8002334 <MX_TIM7_Init+0x64>)
 80022e2:	4a15      	ldr	r2, [pc, #84]	@ (8002338 <MX_TIM7_Init+0x68>)
 80022e4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 14999;
 80022e6:	4b13      	ldr	r3, [pc, #76]	@ (8002334 <MX_TIM7_Init+0x64>)
 80022e8:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80022ec:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ee:	4b11      	ldr	r3, [pc, #68]	@ (8002334 <MX_TIM7_Init+0x64>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 80022f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002334 <MX_TIM7_Init+0x64>)
 80022f6:	2209      	movs	r2, #9
 80022f8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <MX_TIM7_Init+0x64>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002300:	480c      	ldr	r0, [pc, #48]	@ (8002334 <MX_TIM7_Init+0x64>)
 8002302:	f007 fd71 	bl	8009de8 <HAL_TIM_Base_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800230c:	f001 fb88 	bl	8003a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002310:	2300      	movs	r3, #0
 8002312:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	4619      	mov	r1, r3
 800231c:	4805      	ldr	r0, [pc, #20]	@ (8002334 <MX_TIM7_Init+0x64>)
 800231e:	f009 f919 	bl	800b554 <HAL_TIMEx_MasterConfigSynchronization>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002328:	f001 fb7a 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800232c:	bf00      	nop
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000890 	.word	0x20000890
 8002338:	40001400 	.word	0x40001400

0800233c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b098      	sub	sp, #96	@ 0x60
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002342:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800234e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]
 800235c:	611a      	str	r2, [r3, #16]
 800235e:	615a      	str	r2, [r3, #20]
 8002360:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	2234      	movs	r2, #52	@ 0x34
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f00f fd6c 	bl	8011e46 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800236e:	4b3e      	ldr	r3, [pc, #248]	@ (8002468 <MX_TIM8_Init+0x12c>)
 8002370:	4a3e      	ldr	r2, [pc, #248]	@ (800246c <MX_TIM8_Init+0x130>)
 8002372:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002374:	4b3c      	ldr	r3, [pc, #240]	@ (8002468 <MX_TIM8_Init+0x12c>)
 8002376:	2200      	movs	r2, #0
 8002378:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800237a:	4b3b      	ldr	r3, [pc, #236]	@ (8002468 <MX_TIM8_Init+0x12c>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 8002380:	4b39      	ldr	r3, [pc, #228]	@ (8002468 <MX_TIM8_Init+0x12c>)
 8002382:	22d2      	movs	r2, #210	@ 0xd2
 8002384:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002386:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <MX_TIM8_Init+0x12c>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800238c:	4b36      	ldr	r3, [pc, #216]	@ (8002468 <MX_TIM8_Init+0x12c>)
 800238e:	2200      	movs	r2, #0
 8002390:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002392:	4b35      	ldr	r3, [pc, #212]	@ (8002468 <MX_TIM8_Init+0x12c>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002398:	4833      	ldr	r0, [pc, #204]	@ (8002468 <MX_TIM8_Init+0x12c>)
 800239a:	f007 fe94 	bl	800a0c6 <HAL_TIM_PWM_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 80023a4:	f001 fb3c 	bl	8003a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a8:	2300      	movs	r3, #0
 80023aa:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023ac:	2300      	movs	r3, #0
 80023ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023b8:	4619      	mov	r1, r3
 80023ba:	482b      	ldr	r0, [pc, #172]	@ (8002468 <MX_TIM8_Init+0x12c>)
 80023bc:	f009 f8ca 	bl	800b554 <HAL_TIMEx_MasterConfigSynchronization>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80023c6:	f001 fb2b 	bl	8003a20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ca:	2360      	movs	r3, #96	@ 0x60
 80023cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80023ce:	2300      	movs	r3, #0
 80023d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023d2:	2300      	movs	r3, #0
 80023d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023d6:	2300      	movs	r3, #0
 80023d8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023da:	2300      	movs	r3, #0
 80023dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023de:	2300      	movs	r3, #0
 80023e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023e2:	2300      	movs	r3, #0
 80023e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023ea:	2204      	movs	r2, #4
 80023ec:	4619      	mov	r1, r3
 80023ee:	481e      	ldr	r0, [pc, #120]	@ (8002468 <MX_TIM8_Init+0x12c>)
 80023f0:	f008 f9be 	bl	800a770 <HAL_TIM_PWM_ConfigChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80023fa:	f001 fb11 	bl	8003a20 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_2);
 80023fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002468 <MX_TIM8_Init+0x12c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699a      	ldr	r2, [r3, #24]
 8002404:	4b18      	ldr	r3, [pc, #96]	@ (8002468 <MX_TIM8_Init+0x12c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800240c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002412:	2300      	movs	r3, #0
 8002414:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002416:	2300      	movs	r3, #0
 8002418:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002422:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002426:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002428:	2300      	movs	r3, #0
 800242a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800242c:	2300      	movs	r3, #0
 800242e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002434:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002438:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800243e:	2300      	movs	r3, #0
 8002440:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002442:	2300      	movs	r3, #0
 8002444:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	4619      	mov	r1, r3
 800244a:	4807      	ldr	r0, [pc, #28]	@ (8002468 <MX_TIM8_Init+0x12c>)
 800244c:	f009 f918 	bl	800b680 <HAL_TIMEx_ConfigBreakDeadTime>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 8002456:	f001 fae3 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800245a:	4803      	ldr	r0, [pc, #12]	@ (8002468 <MX_TIM8_Init+0x12c>)
 800245c:	f001 fe88 	bl	8004170 <HAL_TIM_MspPostInit>

}
 8002460:	bf00      	nop
 8002462:	3760      	adds	r7, #96	@ 0x60
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	200008dc 	.word	0x200008dc
 800246c:	40013400 	.word	0x40013400

08002470 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002476:	f107 0310 	add.w	r3, r7, #16
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	609a      	str	r2, [r3, #8]
 8002482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	2200      	movs	r2, #0
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	605a      	str	r2, [r3, #4]
 800248c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800248e:	4b1f      	ldr	r3, [pc, #124]	@ (800250c <MX_TIM15_Init+0x9c>)
 8002490:	4a1f      	ldr	r2, [pc, #124]	@ (8002510 <MX_TIM15_Init+0xa0>)
 8002492:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1499;
 8002494:	4b1d      	ldr	r3, [pc, #116]	@ (800250c <MX_TIM15_Init+0x9c>)
 8002496:	f240 52db 	movw	r2, #1499	@ 0x5db
 800249a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249c:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <MX_TIM15_Init+0x9c>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	@ (800250c <MX_TIM15_Init+0x9c>)
 80024a4:	2204      	movs	r2, #4
 80024a6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a8:	4b18      	ldr	r3, [pc, #96]	@ (800250c <MX_TIM15_Init+0x9c>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80024ae:	4b17      	ldr	r3, [pc, #92]	@ (800250c <MX_TIM15_Init+0x9c>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b4:	4b15      	ldr	r3, [pc, #84]	@ (800250c <MX_TIM15_Init+0x9c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80024ba:	4814      	ldr	r0, [pc, #80]	@ (800250c <MX_TIM15_Init+0x9c>)
 80024bc:	f007 fc94 	bl	8009de8 <HAL_TIM_Base_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 80024c6:	f001 faab 	bl	8003a20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	4619      	mov	r1, r3
 80024d6:	480d      	ldr	r0, [pc, #52]	@ (800250c <MX_TIM15_Init+0x9c>)
 80024d8:	f008 fa5e 	bl	800a998 <HAL_TIM_ConfigClockSource>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 80024e2:	f001 fa9d 	bl	8003a20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	4619      	mov	r1, r3
 80024f2:	4806      	ldr	r0, [pc, #24]	@ (800250c <MX_TIM15_Init+0x9c>)
 80024f4:	f009 f82e 	bl	800b554 <HAL_TIMEx_MasterConfigSynchronization>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80024fe:	f001 fa8f 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002502:	bf00      	nop
 8002504:	3720      	adds	r7, #32
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000928 	.word	0x20000928
 8002510:	40014000 	.word	0x40014000

08002514 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002518:	4b0f      	ldr	r3, [pc, #60]	@ (8002558 <MX_TIM16_Init+0x44>)
 800251a:	4a10      	ldr	r2, [pc, #64]	@ (800255c <MX_TIM16_Init+0x48>)
 800251c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 14999;
 800251e:	4b0e      	ldr	r3, [pc, #56]	@ (8002558 <MX_TIM16_Init+0x44>)
 8002520:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002524:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002526:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <MX_TIM16_Init+0x44>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 800252c:	4b0a      	ldr	r3, [pc, #40]	@ (8002558 <MX_TIM16_Init+0x44>)
 800252e:	2209      	movs	r2, #9
 8002530:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002532:	4b09      	ldr	r3, [pc, #36]	@ (8002558 <MX_TIM16_Init+0x44>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002538:	4b07      	ldr	r3, [pc, #28]	@ (8002558 <MX_TIM16_Init+0x44>)
 800253a:	2200      	movs	r2, #0
 800253c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253e:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <MX_TIM16_Init+0x44>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002544:	4804      	ldr	r0, [pc, #16]	@ (8002558 <MX_TIM16_Init+0x44>)
 8002546:	f007 fc4f 	bl	8009de8 <HAL_TIM_Base_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002550:	f001 fa66 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002554:	bf00      	nop
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000974 	.word	0x20000974
 800255c:	40014400 	.word	0x40014400

08002560 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002564:	4b22      	ldr	r3, [pc, #136]	@ (80025f0 <MX_UART4_Init+0x90>)
 8002566:	4a23      	ldr	r2, [pc, #140]	@ (80025f4 <MX_UART4_Init+0x94>)
 8002568:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800256a:	4b21      	ldr	r3, [pc, #132]	@ (80025f0 <MX_UART4_Init+0x90>)
 800256c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002570:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002572:	4b1f      	ldr	r3, [pc, #124]	@ (80025f0 <MX_UART4_Init+0x90>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002578:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <MX_UART4_Init+0x90>)
 800257a:	2200      	movs	r2, #0
 800257c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800257e:	4b1c      	ldr	r3, [pc, #112]	@ (80025f0 <MX_UART4_Init+0x90>)
 8002580:	2200      	movs	r2, #0
 8002582:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002584:	4b1a      	ldr	r3, [pc, #104]	@ (80025f0 <MX_UART4_Init+0x90>)
 8002586:	220c      	movs	r2, #12
 8002588:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800258a:	4b19      	ldr	r3, [pc, #100]	@ (80025f0 <MX_UART4_Init+0x90>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002590:	4b17      	ldr	r3, [pc, #92]	@ (80025f0 <MX_UART4_Init+0x90>)
 8002592:	2200      	movs	r2, #0
 8002594:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002596:	4b16      	ldr	r3, [pc, #88]	@ (80025f0 <MX_UART4_Init+0x90>)
 8002598:	2200      	movs	r2, #0
 800259a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800259c:	4b14      	ldr	r3, [pc, #80]	@ (80025f0 <MX_UART4_Init+0x90>)
 800259e:	2200      	movs	r2, #0
 80025a0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025a2:	4b13      	ldr	r3, [pc, #76]	@ (80025f0 <MX_UART4_Init+0x90>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80025a8:	4811      	ldr	r0, [pc, #68]	@ (80025f0 <MX_UART4_Init+0x90>)
 80025aa:	f009 f943 	bl	800b834 <HAL_UART_Init>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80025b4:	f001 fa34 	bl	8003a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025b8:	2100      	movs	r1, #0
 80025ba:	480d      	ldr	r0, [pc, #52]	@ (80025f0 <MX_UART4_Init+0x90>)
 80025bc:	f009 fede 	bl	800c37c <HAL_UARTEx_SetTxFifoThreshold>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80025c6:	f001 fa2b 	bl	8003a20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025ca:	2100      	movs	r1, #0
 80025cc:	4808      	ldr	r0, [pc, #32]	@ (80025f0 <MX_UART4_Init+0x90>)
 80025ce:	f009 ff13 	bl	800c3f8 <HAL_UARTEx_SetRxFifoThreshold>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80025d8:	f001 fa22 	bl	8003a20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80025dc:	4804      	ldr	r0, [pc, #16]	@ (80025f0 <MX_UART4_Init+0x90>)
 80025de:	f009 fe94 	bl	800c30a <HAL_UARTEx_DisableFifoMode>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80025e8:	f001 fa1a 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200009c0 	.word	0x200009c0
 80025f4:	40004c00 	.word	0x40004c00

080025f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80025fe:	4b22      	ldr	r3, [pc, #136]	@ (8002688 <MX_DMA_Init+0x90>)
 8002600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002602:	4a21      	ldr	r2, [pc, #132]	@ (8002688 <MX_DMA_Init+0x90>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6493      	str	r3, [r2, #72]	@ 0x48
 800260a:	4b1f      	ldr	r3, [pc, #124]	@ (8002688 <MX_DMA_Init+0x90>)
 800260c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002616:	4b1c      	ldr	r3, [pc, #112]	@ (8002688 <MX_DMA_Init+0x90>)
 8002618:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800261a:	4a1b      	ldr	r2, [pc, #108]	@ (8002688 <MX_DMA_Init+0x90>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6493      	str	r3, [r2, #72]	@ 0x48
 8002622:	4b19      	ldr	r3, [pc, #100]	@ (8002688 <MX_DMA_Init+0x90>)
 8002624:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	603b      	str	r3, [r7, #0]
 800262c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2100      	movs	r1, #0
 8002632:	200b      	movs	r0, #11
 8002634:	f003 ff21 	bl	800647a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002638:	200b      	movs	r0, #11
 800263a:	f003 ff38 	bl	80064ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	200c      	movs	r0, #12
 8002644:	f003 ff19 	bl	800647a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002648:	200c      	movs	r0, #12
 800264a:	f003 ff30 	bl	80064ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2100      	movs	r1, #0
 8002652:	200d      	movs	r0, #13
 8002654:	f003 ff11 	bl	800647a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002658:	200d      	movs	r0, #13
 800265a:	f003 ff28 	bl	80064ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800265e:	2200      	movs	r2, #0
 8002660:	2100      	movs	r1, #0
 8002662:	200e      	movs	r0, #14
 8002664:	f003 ff09 	bl	800647a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002668:	200e      	movs	r0, #14
 800266a:	f003 ff20 	bl	80064ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800266e:	2200      	movs	r2, #0
 8002670:	2100      	movs	r1, #0
 8002672:	200f      	movs	r0, #15
 8002674:	f003 ff01 	bl	800647a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002678:	200f      	movs	r0, #15
 800267a:	f003 ff18 	bl	80064ae <HAL_NVIC_EnableIRQ>

}
 800267e:	bf00      	nop
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	40021000 	.word	0x40021000

0800268c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b08c      	sub	sp, #48	@ 0x30
 8002690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002692:	f107 031c 	add.w	r3, r7, #28
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	605a      	str	r2, [r3, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	60da      	str	r2, [r3, #12]
 80026a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026a2:	4b9a      	ldr	r3, [pc, #616]	@ (800290c <MX_GPIO_Init+0x280>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a6:	4a99      	ldr	r2, [pc, #612]	@ (800290c <MX_GPIO_Init+0x280>)
 80026a8:	f043 0310 	orr.w	r3, r3, #16
 80026ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ae:	4b97      	ldr	r3, [pc, #604]	@ (800290c <MX_GPIO_Init+0x280>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	61bb      	str	r3, [r7, #24]
 80026b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ba:	4b94      	ldr	r3, [pc, #592]	@ (800290c <MX_GPIO_Init+0x280>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026be:	4a93      	ldr	r2, [pc, #588]	@ (800290c <MX_GPIO_Init+0x280>)
 80026c0:	f043 0304 	orr.w	r3, r3, #4
 80026c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026c6:	4b91      	ldr	r3, [pc, #580]	@ (800290c <MX_GPIO_Init+0x280>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026d2:	4b8e      	ldr	r3, [pc, #568]	@ (800290c <MX_GPIO_Init+0x280>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d6:	4a8d      	ldr	r2, [pc, #564]	@ (800290c <MX_GPIO_Init+0x280>)
 80026d8:	f043 0320 	orr.w	r3, r3, #32
 80026dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026de:	4b8b      	ldr	r3, [pc, #556]	@ (800290c <MX_GPIO_Init+0x280>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	613b      	str	r3, [r7, #16]
 80026e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	4b88      	ldr	r3, [pc, #544]	@ (800290c <MX_GPIO_Init+0x280>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ee:	4a87      	ldr	r2, [pc, #540]	@ (800290c <MX_GPIO_Init+0x280>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026f6:	4b85      	ldr	r3, [pc, #532]	@ (800290c <MX_GPIO_Init+0x280>)
 80026f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002702:	4b82      	ldr	r3, [pc, #520]	@ (800290c <MX_GPIO_Init+0x280>)
 8002704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002706:	4a81      	ldr	r2, [pc, #516]	@ (800290c <MX_GPIO_Init+0x280>)
 8002708:	f043 0302 	orr.w	r3, r3, #2
 800270c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800270e:	4b7f      	ldr	r3, [pc, #508]	@ (800290c <MX_GPIO_Init+0x280>)
 8002710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800271a:	4b7c      	ldr	r3, [pc, #496]	@ (800290c <MX_GPIO_Init+0x280>)
 800271c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271e:	4a7b      	ldr	r2, [pc, #492]	@ (800290c <MX_GPIO_Init+0x280>)
 8002720:	f043 0308 	orr.w	r3, r3, #8
 8002724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002726:	4b79      	ldr	r3, [pc, #484]	@ (800290c <MX_GPIO_Init+0x280>)
 8002728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002732:	2200      	movs	r2, #0
 8002734:	2120      	movs	r1, #32
 8002736:	4876      	ldr	r0, [pc, #472]	@ (8002910 <MX_GPIO_Init+0x284>)
 8002738:	f004 fdbe 	bl	80072b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
 800273c:	2201      	movs	r2, #1
 800273e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002742:	4874      	ldr	r0, [pc, #464]	@ (8002914 <MX_GPIO_Init+0x288>)
 8002744:	f004 fdb8 	bl	80072b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, GPIO_PIN_RESET);
 8002748:	2200      	movs	r2, #0
 800274a:	2104      	movs	r1, #4
 800274c:	4871      	ldr	r0, [pc, #452]	@ (8002914 <MX_GPIO_Init+0x288>)
 800274e:	f004 fdb3 	bl	80072b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 8002752:	2200      	movs	r2, #0
 8002754:	2120      	movs	r1, #32
 8002756:	4870      	ldr	r0, [pc, #448]	@ (8002918 <MX_GPIO_Init+0x28c>)
 8002758:	f004 fdae 	bl	80072b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_RST_2_Pin|CS_OCD_1_Pin, GPIO_PIN_SET);
 800275c:	2201      	movs	r2, #1
 800275e:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002762:	486b      	ldr	r0, [pc, #428]	@ (8002910 <MX_GPIO_Init+0x284>)
 8002764:	f004 fda8 	bl	80072b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port, NOT_RST_4_Pin, GPIO_PIN_SET);
 8002768:	2201      	movs	r2, #1
 800276a:	2140      	movs	r1, #64	@ 0x40
 800276c:	486a      	ldr	r0, [pc, #424]	@ (8002918 <MX_GPIO_Init+0x28c>)
 800276e:	f004 fda3 	bl	80072b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port, NOT_RST_3_Pin, GPIO_PIN_SET);
 8002772:	2201      	movs	r2, #1
 8002774:	2101      	movs	r1, #1
 8002776:	4869      	ldr	r0, [pc, #420]	@ (800291c <MX_GPIO_Init+0x290>)
 8002778:	f004 fd9e 	bl	80072b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port, NOT_RST_1_Pin, GPIO_PIN_SET);
 800277c:	2201      	movs	r2, #1
 800277e:	2180      	movs	r1, #128	@ 0x80
 8002780:	4867      	ldr	r0, [pc, #412]	@ (8002920 <MX_GPIO_Init+0x294>)
 8002782:	f004 fd99 	bl	80072b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NOT_FAULT_1_Pin CS_FAULT_2_Pin NOT_FAULT_2_Pin CS_FAULT_1_Pin */
  GPIO_InitStruct.Pin = NOT_FAULT_1_Pin|CS_FAULT_2_Pin|NOT_FAULT_2_Pin|CS_FAULT_1_Pin;
 8002786:	f640 0315 	movw	r3, #2069	@ 0x815
 800278a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800278c:	2300      	movs	r3, #0
 800278e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	2300      	movs	r3, #0
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002794:	f107 031c 	add.w	r3, r7, #28
 8002798:	4619      	mov	r1, r3
 800279a:	485d      	ldr	r0, [pc, #372]	@ (8002910 <MX_GPIO_Init+0x284>)
 800279c:	f004 fbf2 	bl	8006f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_INTERLOCK_Pin */
  GPIO_InitStruct.Pin = RESET_INTERLOCK_Pin;
 80027a0:	2320      	movs	r3, #32
 80027a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027a4:	2301      	movs	r3, #1
 80027a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2300      	movs	r3, #0
 80027ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 80027b0:	f107 031c 	add.w	r3, r7, #28
 80027b4:	4619      	mov	r1, r3
 80027b6:	4856      	ldr	r0, [pc, #344]	@ (8002910 <MX_GPIO_Init+0x284>)
 80027b8:	f004 fbe4 	bl	8006f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_OCD_2_Pin */
  GPIO_InitStruct.Pin = CS_OCD_2_Pin;
 80027bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80027c2:	2311      	movs	r3, #17
 80027c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_OCD_2_GPIO_Port, &GPIO_InitStruct);
 80027ce:	f107 031c 	add.w	r3, r7, #28
 80027d2:	4619      	mov	r1, r3
 80027d4:	484f      	ldr	r0, [pc, #316]	@ (8002914 <MX_GPIO_Init+0x288>)
 80027d6:	f004 fbd5 	bl	8006f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_3_Pin */
  GPIO_InitStruct.Pin = READY_3_Pin;
 80027da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e0:	2300      	movs	r3, #0
 80027e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_3_GPIO_Port, &GPIO_InitStruct);
 80027e8:	f107 031c 	add.w	r3, r7, #28
 80027ec:	4619      	mov	r1, r3
 80027ee:	4849      	ldr	r0, [pc, #292]	@ (8002914 <MX_GPIO_Init+0x288>)
 80027f0:	f004 fbc8 	bl	8006f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERLOCK_Pin NOT_FAULT_4_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin|NOT_FAULT_4_Pin;
 80027f4:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80027f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027fa:	2300      	movs	r3, #0
 80027fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002802:	f107 031c 	add.w	r3, r7, #28
 8002806:	4619      	mov	r1, r3
 8002808:	4843      	ldr	r0, [pc, #268]	@ (8002918 <MX_GPIO_Init+0x28c>)
 800280a:	f004 fbbb 	bl	8006f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_FPGA_Pin */
  GPIO_InitStruct.Pin = RESET_FPGA_Pin;
 800280e:	2304      	movs	r3, #4
 8002810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002812:	2301      	movs	r3, #1
 8002814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281a:	2300      	movs	r3, #0
 800281c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_FPGA_GPIO_Port, &GPIO_InitStruct);
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	4619      	mov	r1, r3
 8002824:	483b      	ldr	r0, [pc, #236]	@ (8002914 <MX_GPIO_Init+0x288>)
 8002826:	f004 fbad 	bl	8006f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_STOP_FPGA_Pin */
  GPIO_InitStruct.Pin = START_STOP_FPGA_Pin;
 800282a:	2320      	movs	r3, #32
 800282c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282e:	2301      	movs	r3, #1
 8002830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002836:	2300      	movs	r3, #0
 8002838:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(START_STOP_FPGA_GPIO_Port, &GPIO_InitStruct);
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	4619      	mov	r1, r3
 8002840:	4835      	ldr	r0, [pc, #212]	@ (8002918 <MX_GPIO_Init+0x28c>)
 8002842:	f004 fb9f 	bl	8006f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_2_Pin */
  GPIO_InitStruct.Pin = READY_2_Pin;
 8002846:	2301      	movs	r3, #1
 8002848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284a:	2300      	movs	r3, #0
 800284c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_2_GPIO_Port, &GPIO_InitStruct);
 8002852:	f107 031c 	add.w	r3, r7, #28
 8002856:	4619      	mov	r1, r3
 8002858:	4831      	ldr	r0, [pc, #196]	@ (8002920 <MX_GPIO_Init+0x294>)
 800285a:	f004 fb93 	bl	8006f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : NOT_RST_2_Pin CS_OCD_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_2_Pin|CS_OCD_1_Pin;
 800285e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8002862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002864:	2311      	movs	r3, #17
 8002866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286c:	2300      	movs	r3, #0
 800286e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002870:	f107 031c 	add.w	r3, r7, #28
 8002874:	4619      	mov	r1, r3
 8002876:	4826      	ldr	r0, [pc, #152]	@ (8002910 <MX_GPIO_Init+0x284>)
 8002878:	f004 fb84 	bl	8006f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_4_Pin */
  GPIO_InitStruct.Pin = NOT_RST_4_Pin;
 800287c:	2340      	movs	r3, #64	@ 0x40
 800287e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002880:	2311      	movs	r3, #17
 8002882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_4_GPIO_Port, &GPIO_InitStruct);
 800288c:	f107 031c 	add.w	r3, r7, #28
 8002890:	4619      	mov	r1, r3
 8002892:	4821      	ldr	r0, [pc, #132]	@ (8002918 <MX_GPIO_Init+0x28c>)
 8002894:	f004 fb76 	bl	8006f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_4_Pin */
  GPIO_InitStruct.Pin = READY_4_Pin;
 8002898:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800289c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_4_GPIO_Port, &GPIO_InitStruct);
 80028a6:	f107 031c 	add.w	r3, r7, #28
 80028aa:	4619      	mov	r1, r3
 80028ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028b0:	f004 fb68 	bl	8006f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_3_Pin */
  GPIO_InitStruct.Pin = NOT_RST_3_Pin;
 80028b4:	2301      	movs	r3, #1
 80028b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028b8:	2311      	movs	r3, #17
 80028ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c0:	2300      	movs	r3, #0
 80028c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_3_GPIO_Port, &GPIO_InitStruct);
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	4619      	mov	r1, r3
 80028ca:	4814      	ldr	r0, [pc, #80]	@ (800291c <MX_GPIO_Init+0x290>)
 80028cc:	f004 fb5a 	bl	8006f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_1_Pin PD5 NOT_FAULT_3_Pin */
  GPIO_InitStruct.Pin = READY_1_Pin|GPIO_PIN_5|NOT_FAULT_3_Pin;
 80028d0:	2370      	movs	r3, #112	@ 0x70
 80028d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d4:	2300      	movs	r3, #0
 80028d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028dc:	f107 031c 	add.w	r3, r7, #28
 80028e0:	4619      	mov	r1, r3
 80028e2:	480e      	ldr	r0, [pc, #56]	@ (800291c <MX_GPIO_Init+0x290>)
 80028e4:	f004 fb4e 	bl	8006f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_1_Pin;
 80028e8:	2380      	movs	r3, #128	@ 0x80
 80028ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028ec:	2311      	movs	r3, #17
 80028ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_1_GPIO_Port, &GPIO_InitStruct);
 80028f8:	f107 031c 	add.w	r3, r7, #28
 80028fc:	4619      	mov	r1, r3
 80028fe:	4808      	ldr	r0, [pc, #32]	@ (8002920 <MX_GPIO_Init+0x294>)
 8002900:	f004 fb40 	bl	8006f84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002904:	bf00      	nop
 8002906:	3730      	adds	r7, #48	@ 0x30
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40021000 	.word	0x40021000
 8002910:	48001000 	.word	0x48001000
 8002914:	48001400 	.word	0x48001400
 8002918:	48000800 	.word	0x48000800
 800291c:	48000c00 	.word	0x48000c00
 8002920:	48000400 	.word	0x48000400

08002924 <handle_event>:

/* USER CODE BEGIN 4 */

ConverterState handle_event(ConverterState currentState, ConverterEvent event) {
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	460a      	mov	r2, r1
 800292e:	71fb      	strb	r3, [r7, #7]
 8002930:	4613      	mov	r3, r2
 8002932:	71bb      	strb	r3, [r7, #6]
    switch (currentState) {
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	2b04      	cmp	r3, #4
 8002938:	d839      	bhi.n	80029ae <handle_event+0x8a>
 800293a:	a201      	add	r2, pc, #4	@ (adr r2, 8002940 <handle_event+0x1c>)
 800293c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002940:	08002955 	.word	0x08002955
 8002944:	08002963 	.word	0x08002963
 8002948:	08002971 	.word	0x08002971
 800294c:	0800298d 	.word	0x0800298d
 8002950:	0800299b 	.word	0x0800299b
        case STATE_INIT:
            if (event == EVENT_START)
 8002954:	79bb      	ldrb	r3, [r7, #6]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d12b      	bne.n	80029b2 <handle_event+0x8e>
            {

            	currentState = STATE_STANDBY;
 800295a:	2301      	movs	r3, #1
 800295c:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 800295e:	2301      	movs	r3, #1
 8002960:	e031      	b.n	80029c6 <handle_event+0xa2>
            }
            break;

        case STATE_STANDBY:
            if (event == EVENT_START)
 8002962:	79bb      	ldrb	r3, [r7, #6]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d126      	bne.n	80029b6 <handle_event+0x92>
            {
            	currentState = STATE_REGULATION;
 8002968:	2302      	movs	r3, #2
 800296a:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 800296c:	2302      	movs	r3, #2
 800296e:	e02a      	b.n	80029c6 <handle_event+0xa2>
            }
            break;

        case STATE_REGULATION:
        	//USB_SendString("State: INIT -> RUNNING\r\n");
            if (event == EVENT_FAULT)
 8002970:	79bb      	ldrb	r3, [r7, #6]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d103      	bne.n	800297e <handle_event+0x5a>
            {
            	currentState = STATE_FAULT;
 8002976:	2303      	movs	r3, #3
 8002978:	71fb      	strb	r3, [r7, #7]
                return STATE_FAULT;
 800297a:	2303      	movs	r3, #3
 800297c:	e023      	b.n	80029c6 <handle_event+0xa2>

            } else if (event == EVENT_SHUTDOWN)
 800297e:	79bb      	ldrb	r3, [r7, #6]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d11a      	bne.n	80029ba <handle_event+0x96>
            {
            	currentState = STATE_SHUTDOWN;
 8002984:	2304      	movs	r3, #4
 8002986:	71fb      	strb	r3, [r7, #7]
                return STATE_SHUTDOWN;
 8002988:	2304      	movs	r3, #4
 800298a:	e01c      	b.n	80029c6 <handle_event+0xa2>
            }

            break;

        case STATE_FAULT:
            if (event == EVENT_CLEAR_FAULT)
 800298c:	79bb      	ldrb	r3, [r7, #6]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d115      	bne.n	80029be <handle_event+0x9a>
            {
            	currentState = STATE_STANDBY;
 8002992:	2301      	movs	r3, #1
 8002994:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 8002996:	2301      	movs	r3, #1
 8002998:	e015      	b.n	80029c6 <handle_event+0xa2>
            }
            break;

        case STATE_SHUTDOWN:
            if (event == EVENT_START)
 800299a:	79bb      	ldrb	r3, [r7, #6]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d110      	bne.n	80029c2 <handle_event+0x9e>
            {
            	once = 0;
 80029a0:	4b0c      	ldr	r3, [pc, #48]	@ (80029d4 <handle_event+0xb0>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
            	currentState = STATE_REGULATION;
 80029a6:	2302      	movs	r3, #2
 80029a8:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 80029aa:	2302      	movs	r3, #2
 80029ac:	e00b      	b.n	80029c6 <handle_event+0xa2>
            }
            break;
        default:
            break;
 80029ae:	bf00      	nop
 80029b0:	e008      	b.n	80029c4 <handle_event+0xa0>
            break;
 80029b2:	bf00      	nop
 80029b4:	e006      	b.n	80029c4 <handle_event+0xa0>
            break;
 80029b6:	bf00      	nop
 80029b8:	e004      	b.n	80029c4 <handle_event+0xa0>
            break;
 80029ba:	bf00      	nop
 80029bc:	e002      	b.n	80029c4 <handle_event+0xa0>
            break;
 80029be:	bf00      	nop
 80029c0:	e000      	b.n	80029c4 <handle_event+0xa0>
            break;
 80029c2:	bf00      	nop
    }
    return currentState; // No state change
 80029c4:	79fb      	ldrb	r3, [r7, #7]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000b8c 	.word	0x20000b8c

080029d8 <Set_PWM_DutyCycle>:
       // float TEMPERATURE_AFTER_CONVERSION_FROM_ADC = (((adc_value/4096.0f)*3.3f) - 0.4f)/0.0195f;
       // return TEMPERATURE_AFTER_CONVERSION_FROM_ADC;

}

void Set_PWM_DutyCycle(uint32_t dutyCycle) { // dutycyle for FAN SPEED CONTROl
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
    if (dutyCycle > 100) dutyCycle = 100;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b64      	cmp	r3, #100	@ 0x64
 80029e4:	d901      	bls.n	80029ea <Set_PWM_DutyCycle+0x12>
 80029e6:	2364      	movs	r3, #100	@ 0x64
 80029e8:	607b      	str	r3, [r7, #4]
    uint32_t pulse = (htim4.Init.Period + 1) * dutyCycle / 100 - 1;
 80029ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002a18 <Set_PWM_DutyCycle+0x40>)
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	3301      	adds	r3, #1
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	fb02 f303 	mul.w	r3, r2, r3
 80029f6:	4a09      	ldr	r2, [pc, #36]	@ (8002a1c <Set_PWM_DutyCycle+0x44>)
 80029f8:	fba2 2303 	umull	r2, r3, r2, r3
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	3b01      	subs	r3, #1
 8002a00:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 8002a02:	4b05      	ldr	r3, [pc, #20]	@ (8002a18 <Set_PWM_DutyCycle+0x40>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	200007f8 	.word	0x200007f8
 8002a1c:	51eb851f 	.word	0x51eb851f

08002a20 <HAL_ADC_ConvCpltCallback>:
//ADC save to array and moving average
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC5)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a20      	ldr	r2, [pc, #128]	@ (8002ab0 <HAL_ADC_ConvCpltCallback+0x90>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d135      	bne.n	8002a9e <HAL_ADC_ConvCpltCallback+0x7e>
		    {
		        uint32_t sum = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	e00b      	b.n	8002a54 <HAL_ADC_ConvCpltCallback+0x34>
		        {
		            sum += adc5_dma_buffer[i];
 8002a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ab4 <HAL_ADC_ConvCpltCallback+0x94>)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	461a      	mov	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	3301      	adds	r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b09      	cmp	r3, #9
 8002a58:	ddf0      	ble.n	8002a3c <HAL_ADC_ConvCpltCallback+0x1c>
		        }
		        adc_moving_average = ((sum / MA_WINDOW_SIZE)*3300)/4096;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4a16      	ldr	r2, [pc, #88]	@ (8002ab8 <HAL_ADC_ConvCpltCallback+0x98>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	08db      	lsrs	r3, r3, #3
 8002a64:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002a68:	fb02 f303 	mul.w	r3, r2, r3
 8002a6c:	0b1b      	lsrs	r3, r3, #12
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <HAL_ADC_ConvCpltCallback+0x9c>)
 8002a72:	801a      	strh	r2, [r3, #0]
		        imax2_sum=(adc_moving_average-1450)*0.384;
 8002a74:	4b11      	ldr	r3, [pc, #68]	@ (8002abc <HAL_ADC_ConvCpltCallback+0x9c>)
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	f2a3 53aa 	subw	r3, r3, #1450	@ 0x5aa
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7fd fd79 	bl	8000574 <__aeabi_i2d>
 8002a82:	a309      	add	r3, pc, #36	@ (adr r3, 8002aa8 <HAL_ADC_ConvCpltCallback+0x88>)
 8002a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a88:	f7fd fdde 	bl	8000648 <__aeabi_dmul>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4610      	mov	r0, r2
 8002a92:	4619      	mov	r1, r3
 8002a94:	f7fe f8b0 	bl	8000bf8 <__aeabi_d2uiz>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	4a09      	ldr	r2, [pc, #36]	@ (8002ac0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8002a9c:	6013      	str	r3, [r2, #0]
		        // Restart the DMA transfer
		       // HAL_ADC_Start_DMA(hadc, (uint32_t*)adc5_dma_buffer, MA_WINDOW_SIZE);
		    }


}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	bc6a7efa 	.word	0xbc6a7efa
 8002aac:	3fd89374 	.word	0x3fd89374
 8002ab0:	50000600 	.word	0x50000600
 8002ab4:	20000a9c 	.word	0x20000a9c
 8002ab8:	cccccccd 	.word	0xcccccccd
 8002abc:	20000ab0 	.word	0x20000ab0
 8002ac0:	20000a98 	.word	0x20000a98

08002ac4 <Update_PWM_Frequency>:
        }
    }
}

void Update_PWM_Frequency(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	@ 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
	 uint32_t timer_clock = 150000000;  // Assuming a 150 MHz timer clock
 8002ad0:	4b33      	ldr	r3, [pc, #204]	@ (8002ba0 <Update_PWM_Frequency+0xdc>)
 8002ad2:	61bb      	str	r3, [r7, #24]
	    uint32_t prescaler = htim->Init.Prescaler + 1;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
	    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	61fb      	str	r3, [r7, #28]

	    // Ensure period is within valid range
	    if (period > 65535) {
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002af4:	d314      	bcc.n	8002b20 <Update_PWM_Frequency+0x5c>
	        // Adjust prescaler to bring period within range
	        prescaler = (prescaler * (period / 65536)) + 1;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	0c1b      	lsrs	r3, r3, #16
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	fb02 f303 	mul.w	r3, r2, r3
 8002b00:	3301      	adds	r3, #1
 8002b02:	617b      	str	r3, [r7, #20]
	        period = (timer_clock / (prescaler * frequency)) - 1;
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	fb02 f303 	mul.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
	        __HAL_TIM_SET_PRESCALER(htim, prescaler - 1);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	3a01      	subs	r2, #1
 8002b1e:	629a      	str	r2, [r3, #40]	@ 0x28
	    }

	    // Update the period register (ARR) with double buffering
	    __HAL_TIM_SET_AUTORELOAD(htim, period);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	69fa      	ldr	r2, [r7, #28]
 8002b26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	60da      	str	r2, [r3, #12]

	    // Set the duty cycle to approximately 50%
	    uint32_t pulse = period / 2;
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	085b      	lsrs	r3, r3, #1
 8002b32:	613b      	str	r3, [r7, #16]
	    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d104      	bne.n	8002b44 <Update_PWM_Frequency+0x80>
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b42:	e023      	b.n	8002b8c <Update_PWM_Frequency+0xc8>
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d104      	bne.n	8002b54 <Update_PWM_Frequency+0x90>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	6393      	str	r3, [r2, #56]	@ 0x38
 8002b52:	e01b      	b.n	8002b8c <Update_PWM_Frequency+0xc8>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d104      	bne.n	8002b64 <Update_PWM_Frequency+0xa0>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002b62:	e013      	b.n	8002b8c <Update_PWM_Frequency+0xc8>
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	2b0c      	cmp	r3, #12
 8002b68:	d104      	bne.n	8002b74 <Update_PWM_Frequency+0xb0>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b72:	e00b      	b.n	8002b8c <Update_PWM_Frequency+0xc8>
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d104      	bne.n	8002b84 <Update_PWM_Frequency+0xc0>
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	6493      	str	r3, [r2, #72]	@ 0x48
 8002b82:	e003      	b.n	8002b8c <Update_PWM_Frequency+0xc8>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c

	    // Manually generate an update event by setting the UG bit in the EGR register
	    htim->Instance->EGR = TIM_EGR_UG;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2201      	movs	r2, #1
 8002b92:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_AUTORELOAD(htim, period);

    // Restart the timer PWM generation
    HAL_TIM_PWM_Stop(htim, channel);
    HAL_TIM_PWM_Start(htim, channel);*/
}
 8002b94:	bf00      	nop
 8002b96:	3724      	adds	r7, #36	@ 0x24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	08f0d180 	.word	0x08f0d180

08002ba4 <Check_Faults>:
	        dac_buffer[i] = (((1/3.3)*res12_b) + ((0.5/3.3)*res12_b) * sin(2 * M_PI * i/BUFFER_SIZE));
	    }
}

uint8_t Check_Faults()
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
	// Faults pins are from gate driver and they are active pull down
	// 4 fault pins from 4 gate driver + 2 fault pins from  2 currents sensors  = 6 pins
	if(HAL_GPIO_ReadPin(CS_FAULT_1_GPIO_Port, CS_FAULT_1_Pin) && HAL_GPIO_ReadPin(CS_FAULT_2_GPIO_Port, CS_FAULT_2_Pin)
 8002ba8:	2101      	movs	r1, #1
 8002baa:	4818      	ldr	r0, [pc, #96]	@ (8002c0c <Check_Faults+0x68>)
 8002bac:	f004 fb6c 	bl	8007288 <HAL_GPIO_ReadPin>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d026      	beq.n	8002c04 <Check_Faults+0x60>
 8002bb6:	2110      	movs	r1, #16
 8002bb8:	4814      	ldr	r0, [pc, #80]	@ (8002c0c <Check_Faults+0x68>)
 8002bba:	f004 fb65 	bl	8007288 <HAL_GPIO_ReadPin>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d01f      	beq.n	8002c04 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_1_GPIO_Port, NOT_FAULT_1_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_2_GPIO_Port, NOT_FAULT_2_Pin)
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	4811      	ldr	r0, [pc, #68]	@ (8002c0c <Check_Faults+0x68>)
 8002bc8:	f004 fb5e 	bl	8007288 <HAL_GPIO_ReadPin>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d018      	beq.n	8002c04 <Check_Faults+0x60>
 8002bd2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002bd6:	480d      	ldr	r0, [pc, #52]	@ (8002c0c <Check_Faults+0x68>)
 8002bd8:	f004 fb56 	bl	8007288 <HAL_GPIO_ReadPin>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d010      	beq.n	8002c04 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_3_GPIO_Port, NOT_FAULT_3_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_4_GPIO_Port, NOT_FAULT_4_Pin) )
 8002be2:	2140      	movs	r1, #64	@ 0x40
 8002be4:	480a      	ldr	r0, [pc, #40]	@ (8002c10 <Check_Faults+0x6c>)
 8002be6:	f004 fb4f 	bl	8007288 <HAL_GPIO_ReadPin>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d009      	beq.n	8002c04 <Check_Faults+0x60>
 8002bf0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bf4:	4807      	ldr	r0, [pc, #28]	@ (8002c14 <Check_Faults+0x70>)
 8002bf6:	f004 fb47 	bl	8007288 <HAL_GPIO_ReadPin>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <Check_Faults+0x60>
		return 0; // if all pins is 1 then all is ready, there is not faults then return 0
 8002c00:	2300      	movs	r3, #0
 8002c02:	e000      	b.n	8002c06 <Check_Faults+0x62>

	return 1;
 8002c04:	2301      	movs	r3, #1
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	48001000 	.word	0x48001000
 8002c10:	48000c00 	.word	0x48000c00
 8002c14:	48000800 	.word	0x48000800

08002c18 <Check_Ready>:

uint8_t Check_Ready()
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
	// Ready pins are from gate driver and they are active pull up
	// 4 ready pins from 4 gate drivers
	if(HAL_GPIO_ReadPin(READY_1_GPIO_Port, READY_1_Pin) && HAL_GPIO_ReadPin(READY_2_GPIO_Port, READY_2_Pin)
 8002c1c:	2110      	movs	r1, #16
 8002c1e:	4811      	ldr	r0, [pc, #68]	@ (8002c64 <Check_Ready+0x4c>)
 8002c20:	f004 fb32 	bl	8007288 <HAL_GPIO_ReadPin>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d019      	beq.n	8002c5e <Check_Ready+0x46>
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	480e      	ldr	r0, [pc, #56]	@ (8002c68 <Check_Ready+0x50>)
 8002c2e:	f004 fb2b 	bl	8007288 <HAL_GPIO_ReadPin>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d012      	beq.n	8002c5e <Check_Ready+0x46>
			&& HAL_GPIO_ReadPin(READY_3_GPIO_Port, READY_3_Pin) && HAL_GPIO_ReadPin(READY_4_GPIO_Port, READY_4_Pin) )
 8002c38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c3c:	480b      	ldr	r0, [pc, #44]	@ (8002c6c <Check_Ready+0x54>)
 8002c3e:	f004 fb23 	bl	8007288 <HAL_GPIO_ReadPin>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <Check_Ready+0x46>
 8002c48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c50:	f004 fb1a 	bl	8007288 <HAL_GPIO_ReadPin>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <Check_Ready+0x46>
			return 1; // return 1 when is gate drivers ready
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <Check_Ready+0x48>

		return 0;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	48000c00 	.word	0x48000c00
 8002c68:	48000400 	.word	0x48000400
 8002c6c:	48001400 	.word	0x48001400

08002c70 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002c70:	b5b0      	push	{r4, r5, r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	// SOFT start_program RAMP REALISATION
	//  Ts 20khz
	if(htim->Instance == TIM15)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a6e      	ldr	r2, [pc, #440]	@ (8002e38 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	f040 80b0 	bne.w	8002de4 <HAL_TIM_PeriodElapsedCallback+0x174>
	{
		//sythick1 =  HAL_GetTick();
		if(currentState == STATE_REGULATION )
 8002c84:	4b6d      	ldr	r3, [pc, #436]	@ (8002e3c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	f040 80a8 	bne.w	8002dde <HAL_TIM_PeriodElapsedCallback+0x16e>
		{
		//current_sensor1_vref = adc3_dma_buffer[0]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[0], pcb_temp)/4096)*3.3;
		//current_sensor2_vref = adc3_dma_buffer[1]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[1], pcb_temp)/4096)*3.3;

		input_voltage = (int)((((adc3_dma_buffer[2])*3300)/4096-200)*18.81);//[mV]		((Low_pass_filter(adc3_dma_buffer[2], input_voltage)/4096)*3.3-0.2)*27.1;
 8002c8e:	4b6c      	ldr	r3, [pc, #432]	@ (8002e40 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c90:	889b      	ldrh	r3, [r3, #4]
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002c9a:	fb02 f303 	mul.w	r3, r2, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	da01      	bge.n	8002ca6 <HAL_TIM_PeriodElapsedCallback+0x36>
 8002ca2:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002ca6:	131b      	asrs	r3, r3, #12
 8002ca8:	3bc8      	subs	r3, #200	@ 0xc8
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd fc62 	bl	8000574 <__aeabi_i2d>
 8002cb0:	a35d      	add	r3, pc, #372	@ (adr r3, 8002e28 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb6:	f7fd fcc7 	bl	8000648 <__aeabi_dmul>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	f7fd ff71 	bl	8000ba8 <__aeabi_d2iz>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b5e      	ldr	r3, [pc, #376]	@ (8002e44 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002ccc:	601a      	str	r2, [r3, #0]
		output_voltage = (int)((((adc4_dma_buffer[1])*3300)/4096-200)*18.81);//[mV] 		((Low_pass_filter(adc4_dma_buffer, output_voltage)/4096)*3.3-0.2)*27.1;
 8002cce:	4b5e      	ldr	r3, [pc, #376]	@ (8002e48 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002cd0:	885b      	ldrh	r3, [r3, #2]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8002cda:	fb02 f303 	mul.w	r3, r2, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da01      	bge.n	8002ce6 <HAL_TIM_PeriodElapsedCallback+0x76>
 8002ce2:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8002ce6:	131b      	asrs	r3, r3, #12
 8002ce8:	3bc8      	subs	r3, #200	@ 0xc8
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fd fc42 	bl	8000574 <__aeabi_i2d>
 8002cf0:	a34d      	add	r3, pc, #308	@ (adr r3, 8002e28 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	f7fd fca7 	bl	8000648 <__aeabi_dmul>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7fd ff51 	bl	8000ba8 <__aeabi_d2iz>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4a50      	ldr	r2, [pc, #320]	@ (8002e4c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002d0a:	6013      	str	r3, [r2, #0]
		if(once == 0) Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, 7100000); // Set TIM8 CH1 o freq that is delay hc and send to fpga
		}

		imax2 = imax1 + imax2_sum; // imax2_sum signal from FPGA
		// imax1,2 each for branches to make 180 degree shift*/
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref+((int32_t)imax1*0.025)); // imax1  1.5V is 0A;  1A is 20mV; 1 bit is 0.8mV; imax[mA]*0.02 [V/A]/0.8[mV] = Value for DAC
 8002d0c:	4b50      	ldr	r3, [pc, #320]	@ (8002e50 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fc2f 	bl	8000574 <__aeabi_i2d>
 8002d16:	4604      	mov	r4, r0
 8002d18:	460d      	mov	r5, r1
 8002d1a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e54 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fc28 	bl	8000574 <__aeabi_i2d>
 8002d24:	a342      	add	r3, pc, #264	@ (adr r3, 8002e30 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd fc8d 	bl	8000648 <__aeabi_dmul>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4620      	mov	r0, r4
 8002d34:	4629      	mov	r1, r5
 8002d36:	f7fd fad1 	bl	80002dc <__adddf3>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4610      	mov	r0, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	f7fd ff59 	bl	8000bf8 <__aeabi_d2uiz>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4842      	ldr	r0, [pc, #264]	@ (8002e58 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002d4e:	f003 fcad 	bl	80066ac <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, current_sensor2_vref+((int32_t)imax2*0.025)); // imax2
 8002d52:	4b42      	ldr	r3, [pc, #264]	@ (8002e5c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fc0c 	bl	8000574 <__aeabi_i2d>
 8002d5c:	4604      	mov	r4, r0
 8002d5e:	460d      	mov	r5, r1
 8002d60:	4b3f      	ldr	r3, [pc, #252]	@ (8002e60 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fc05 	bl	8000574 <__aeabi_i2d>
 8002d6a:	a331      	add	r3, pc, #196	@ (adr r3, 8002e30 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f7fd fc6a 	bl	8000648 <__aeabi_dmul>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4620      	mov	r0, r4
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	f7fd faae 	bl	80002dc <__adddf3>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4610      	mov	r0, r2
 8002d86:	4619      	mov	r1, r3
 8002d88:	f7fd ff36 	bl	8000bf8 <__aeabi_d2uiz>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2110      	movs	r1, #16
 8002d92:	4831      	ldr	r0, [pc, #196]	@ (8002e58 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002d94:	f003 fc8a 	bl	80066ac <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref-((int32_t)imin*0.25)); // imin uzyto tutaj wzmacniacza 10x dla sygnalu z sensora pradu wiec ma wzmocnienie 200mv/A a nie 20mv/a
 8002d98:	4b2d      	ldr	r3, [pc, #180]	@ (8002e50 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002d9a:	881b      	ldrh	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fbe9 	bl	8000574 <__aeabi_i2d>
 8002da2:	4604      	mov	r4, r0
 8002da4:	460d      	mov	r5, r1
 8002da6:	4b2f      	ldr	r3, [pc, #188]	@ (8002e64 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fbe2 	bl	8000574 <__aeabi_i2d>
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e68 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002db6:	f7fd fc47 	bl	8000648 <__aeabi_dmul>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4620      	mov	r0, r4
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	f7fd fa89 	bl	80002d8 <__aeabi_dsub>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f7fd ff13 	bl	8000bf8 <__aeabi_d2uiz>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4824      	ldr	r0, [pc, #144]	@ (8002e6c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002dda:	f003 fc67 	bl	80066ac <HAL_DAC_SetValue>
		//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
		//once = 1;
		//}

		//sythick2 =  HAL_GetTick() - sythick1;
		flag_control = 1;
 8002dde:	4b24      	ldr	r3, [pc, #144]	@ (8002e70 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM6) // 5 sec period
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a22      	ldr	r2, [pc, #136]	@ (8002e74 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_TIM_PeriodElapsedCallback+0x182>
		    {
		//if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
				//{
				FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
 8002dee:	f000 f957 	bl	80030a0 <FAN_Drive>
				//}
		    }


	if (htim->Instance == TIM7)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a20      	ldr	r2, [pc, #128]	@ (8002e78 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d110      	bne.n	8002e1e <HAL_TIM_PeriodElapsedCallback+0x1ae>
	    {
	        // Turn off OCD pins of currents sensors to reset current sensor 1us

	        HAL_GPIO_TogglePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin);
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	481f      	ldr	r0, [pc, #124]	@ (8002e7c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002e00:	f004 fa72 	bl	80072e8 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin);
 8002e04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002e08:	481d      	ldr	r0, [pc, #116]	@ (8002e80 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002e0a:	f004 fa6d 	bl	80072e8 <HAL_GPIO_TogglePin>
	        HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2120      	movs	r1, #32
 8002e12:	481a      	ldr	r0, [pc, #104]	@ (8002e7c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002e14:	f004 fa50 	bl	80072b8 <HAL_GPIO_WritePin>
	        // Stop the timer
	        HAL_TIM_Base_Stop_IT(&htim7);
 8002e18:	481a      	ldr	r0, [pc, #104]	@ (8002e84 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002e1a:	f007 f925 	bl	800a068 <HAL_TIM_Base_Stop_IT>
	    }


}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bdb0      	pop	{r4, r5, r7, pc}
 8002e26:	bf00      	nop
 8002e28:	28f5c28f 	.word	0x28f5c28f
 8002e2c:	4032cf5c 	.word	0x4032cf5c
 8002e30:	9999999a 	.word	0x9999999a
 8002e34:	3f999999 	.word	0x3f999999
 8002e38:	40014000 	.word	0x40014000
 8002e3c:	20000b87 	.word	0x20000b87
 8002e40:	20000a70 	.word	0x20000a70
 8002e44:	20000a64 	.word	0x20000a64
 8002e48:	20000a88 	.word	0x20000a88
 8002e4c:	20000a7c 	.word	0x20000a7c
 8002e50:	20000a54 	.word	0x20000a54
 8002e54:	20000a58 	.word	0x20000a58
 8002e58:	200006c4 	.word	0x200006c4
 8002e5c:	20000a56 	.word	0x20000a56
 8002e60:	20000a5c 	.word	0x20000a5c
 8002e64:	20000a60 	.word	0x20000a60
 8002e68:	3fd00000 	.word	0x3fd00000
 8002e6c:	200006d8 	.word	0x200006d8
 8002e70:	20000b91 	.word	0x20000b91
 8002e74:	40001000 	.word	0x40001000
 8002e78:	40001400 	.word	0x40001400
 8002e7c:	48001000 	.word	0x48001000
 8002e80:	48001400 	.word	0x48001400
 8002e84:	20000890 	.word	0x20000890

08002e88 <RAMP>:

int32_t RAMP(int32_t Vout, int32_t Vref, int32_t Ramp_ratio, float period_loop)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]
 8002e94:	ed87 0a00 	vstr	s0, [r7]
	// RAMP Voltage to soft-start
				if(((int32_t)Vref - (int32_t)Vout) > 10)
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b0a      	cmp	r3, #10
 8002ea0:	dd15      	ble.n	8002ece <RAMP+0x46>
				{

					Vout = (int32_t)(Vout + Ramp_ratio * period_loop); // 20khz loop - preferred 0.1V/Ts voltage ramp   that mean ramp ratio = 2000
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	ee07 3a90 	vmov	s15, r3
 8002ea8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002eb6:	edd7 7a00 	vldr	s15, [r7]
 8002eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ec6:	ee17 3a90 	vmov	r3, s15
 8002eca:	60fb      	str	r3, [r7, #12]
 8002ecc:	e01a      	b.n	8002f04 <RAMP+0x7c>
					//RAMP_FINISHED = 0;
				}
				else if(((int32_t)Vref - (int32_t)Vout) < -10) // 100 = 100mV
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f113 0f0a 	cmn.w	r3, #10
 8002ed8:	da14      	bge.n	8002f04 <RAMP+0x7c>
				{
					Vout = (int32_t)(Vout - Ramp_ratio * period_loop);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	ee07 3a90 	vmov	s15, r3
 8002ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	ee07 3a90 	vmov	s15, r3
 8002eea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002eee:	edd7 7a00 	vldr	s15, [r7]
 8002ef2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002efa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002efe:	ee17 3a90 	vmov	r3, s15
 8002f02:	60fb      	str	r3, [r7, #12]
				}
				if(Vout >= 4750)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f241 228d 	movw	r2, #4749	@ 0x128d
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	dd05      	ble.n	8002f1a <RAMP+0x92>
				{
					Vout = 48000; // 48V
 8002f0e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8002f12:	60fb      	str	r3, [r7, #12]
					RAMP_FINISHED = 1;
 8002f14:	4b04      	ldr	r3, [pc, #16]	@ (8002f28 <RAMP+0xa0>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
					//currentState = STATE_REGULATION;
				}

				return Vout;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr
 8002f28:	20000a8c 	.word	0x20000a8c

08002f2c <regulatorPI>:

void regulatorPI(int32_t *out, int32_t *integral, int32_t in, int32_t in_zad, int32_t limp, int32_t limn, float kp, float ti, float Ts1)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	@ 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	61f8      	str	r0, [r7, #28]
 8002f34:	61b9      	str	r1, [r7, #24]
 8002f36:	617a      	str	r2, [r7, #20]
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	ed87 0a03 	vstr	s0, [r7, #12]
 8002f3e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002f42:	ed87 1a01 	vstr	s2, [r7, #4]
	// Tustin transfrom of PI regulator s -> 2/T * (Z-1)/(Z+1)


    delta = in_zad - in; // error
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	4a32      	ldr	r2, [pc, #200]	@ (8003018 <regulatorPI+0xec>)
 8002f4e:	6013      	str	r3, [r2, #0]
    *integral = (*integral + (int32_t)((delta + prev_delta) * ((kp / ti) * Ts1 * 0.5f))) ; // I part
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a30      	ldr	r2, [pc, #192]	@ (8003018 <regulatorPI+0xec>)
 8002f56:	6811      	ldr	r1, [r2, #0]
 8002f58:	4a30      	ldr	r2, [pc, #192]	@ (800301c <regulatorPI+0xf0>)
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	440a      	add	r2, r1
 8002f5e:	ee07 2a90 	vmov	s15, r2
 8002f62:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f6e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8002f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f76:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f7a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002f7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f8a:	ee17 2a90 	vmov	r2, s15
 8002f8e:	441a      	add	r2, r3
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	601a      	str	r2, [r3, #0]
    prev_delta = delta;
 8002f94:	4b20      	ldr	r3, [pc, #128]	@ (8003018 <regulatorPI+0xec>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a20      	ldr	r2, [pc, #128]	@ (800301c <regulatorPI+0xf0>)
 8002f9a:	6013      	str	r3, [r2, #0]
    prev_out = *out;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8003020 <regulatorPI+0xf4>)
 8002fa2:	6013      	str	r3, [r2, #0]
    if (*integral >= limp) // limit peak positive
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002faa:	429a      	cmp	r2, r3
 8002fac:	dc02      	bgt.n	8002fb4 <regulatorPI+0x88>
    {
        *integral = limp;
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fb2:	601a      	str	r2, [r3, #0]
    }
    if (*integral <= limn)// limit peak negative
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	db02      	blt.n	8002fc4 <regulatorPI+0x98>
    {
        *integral = limn;
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fc2:	601a      	str	r2, [r3, #0]
    }
    *out = ((int32_t)((float)delta*kp) + *integral); // Sum of P and I
 8002fc4:	4b14      	ldr	r3, [pc, #80]	@ (8003018 <regulatorPI+0xec>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	ee07 3a90 	vmov	s15, r3
 8002fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002fd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fdc:	ee17 2a90 	vmov	r2, s15
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	441a      	add	r2, r3
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	601a      	str	r2, [r3, #0]
    if (*out >= limp) // limit peak positive
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	dc02      	bgt.n	8002ffa <regulatorPI+0xce>
    {
        *out = limp;
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ff8:	601a      	str	r2, [r3, #0]
    }
    if (*out <= limn)// limit peak negative
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003000:	429a      	cmp	r2, r3
 8003002:	db02      	blt.n	800300a <regulatorPI+0xde>
    {
        *out = limn;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003008:	601a      	str	r2, [r3, #0]
    }
   // if((*out - prev_out) < 50 || (*out - prev_out) < -50) // histeresis to probably prevent jitter must be checked
   // {
    //	*out = prev_out;
   // }
}
 800300a:	bf00      	nop
 800300c:	3724      	adds	r7, #36	@ 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000a94 	.word	0x20000a94
 800301c:	20000b80 	.word	0x20000b80
 8003020:	20000a90 	.word	0x20000a90
 8003024:	00000000 	.word	0x00000000

08003028 <Low_pass_filter>:

	    return y[0];
}*/

float Low_pass_filter(float new_sample, float old_sample, float old_sample_n1, float old_passed)
{
 8003028:	b5b0      	push	{r4, r5, r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003032:	edc7 0a02 	vstr	s1, [r7, #8]
 8003036:	ed87 1a01 	vstr	s2, [r7, #4]
 800303a:	edc7 1a00 	vstr	s3, [r7]

	//Low_passed_sample = (float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;
	//(1-ALPHA)*0.5*(new_sample+old_sample_n1+ALPHA*old_passed);//(float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;
	return ((1-ALPHA) * old_sample + ALPHA * new_sample) ;//(float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;
 800303e:	68b8      	ldr	r0, [r7, #8]
 8003040:	f7fd faaa 	bl	8000598 <__aeabi_f2d>
 8003044:	a312      	add	r3, pc, #72	@ (adr r3, 8003090 <Low_pass_filter+0x68>)
 8003046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800304a:	f7fd fafd 	bl	8000648 <__aeabi_dmul>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4614      	mov	r4, r2
 8003054:	461d      	mov	r5, r3
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f7fd fa9e 	bl	8000598 <__aeabi_f2d>
 800305c:	a30e      	add	r3, pc, #56	@ (adr r3, 8003098 <Low_pass_filter+0x70>)
 800305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003062:	f7fd faf1 	bl	8000648 <__aeabi_dmul>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	4620      	mov	r0, r4
 800306c:	4629      	mov	r1, r5
 800306e:	f7fd f935 	bl	80002dc <__adddf3>
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4610      	mov	r0, r2
 8003078:	4619      	mov	r1, r3
 800307a:	f7fd fddd 	bl	8000c38 <__aeabi_d2f>
 800307e:	4603      	mov	r3, r0
 8003080:	ee07 3a90 	vmov	s15, r3

}
 8003084:	eeb0 0a67 	vmov.f32	s0, s15
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bdb0      	pop	{r4, r5, r7, pc}
 800308e:	bf00      	nop
 8003090:	66666666 	.word	0x66666666
 8003094:	3fee6666 	.word	0x3fee6666
 8003098:	9999999a 	.word	0x9999999a
 800309c:	3fa99999 	.word	0x3fa99999

080030a0 <FAN_Drive>:
void FAN_Drive()
{ //@ToDo poprawic ogarnac zeby a intach bylo
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
		pcb_temp = (adc3_dma_buffer[3]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[3], pcb_temp)/4096)*3.3;
 80030a6:	4b44      	ldr	r3, [pc, #272]	@ (80031b8 <FAN_Drive+0x118>)
 80030a8:	88db      	ldrh	r3, [r3, #6]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	461a      	mov	r2, r3
 80030ae:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	da01      	bge.n	80030be <FAN_Drive+0x1e>
 80030ba:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80030be:	131b      	asrs	r3, r3, #12
 80030c0:	461a      	mov	r2, r3
 80030c2:	4b3e      	ldr	r3, [pc, #248]	@ (80031bc <FAN_Drive+0x11c>)
 80030c4:	601a      	str	r2, [r3, #0]
		heat_sink_temp = (adc3_dma_buffer[4]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[4], heat_sink_temp)/4096)*3.3;
 80030c6:	4b3c      	ldr	r3, [pc, #240]	@ (80031b8 <FAN_Drive+0x118>)
 80030c8:	891b      	ldrh	r3, [r3, #8]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	461a      	mov	r2, r3
 80030ce:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	da01      	bge.n	80030de <FAN_Drive+0x3e>
 80030da:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80030de:	131b      	asrs	r3, r3, #12
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b37      	ldr	r3, [pc, #220]	@ (80031c0 <FAN_Drive+0x120>)
 80030e4:	601a      	str	r2, [r3, #0]

		uint32_t temperature = 20;
 80030e6:	2314      	movs	r3, #20
 80030e8:	603b      	str	r3, [r7, #0]

		pcb_temp = (pcb_temp-400)/20;
 80030ea:	4b34      	ldr	r3, [pc, #208]	@ (80031bc <FAN_Drive+0x11c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80030f2:	4a34      	ldr	r2, [pc, #208]	@ (80031c4 <FAN_Drive+0x124>)
 80030f4:	fba2 2303 	umull	r2, r3, r2, r3
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	4a30      	ldr	r2, [pc, #192]	@ (80031bc <FAN_Drive+0x11c>)
 80030fc:	6013      	str	r3, [r2, #0]
		heat_sink_temp = (heat_sink_temp-500)/10;
 80030fe:	4b30      	ldr	r3, [pc, #192]	@ (80031c0 <FAN_Drive+0x120>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8003106:	4a2f      	ldr	r2, [pc, #188]	@ (80031c4 <FAN_Drive+0x124>)
 8003108:	fba2 2303 	umull	r2, r3, r2, r3
 800310c:	08db      	lsrs	r3, r3, #3
 800310e:	4a2c      	ldr	r2, [pc, #176]	@ (80031c0 <FAN_Drive+0x120>)
 8003110:	6013      	str	r3, [r2, #0]
		// Choose the higher of the two temperatures
		temperature = (pcb_temp > heat_sink_temp) ? pcb_temp : heat_sink_temp;
 8003112:	4b2b      	ldr	r3, [pc, #172]	@ (80031c0 <FAN_Drive+0x120>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4b29      	ldr	r3, [pc, #164]	@ (80031bc <FAN_Drive+0x11c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4293      	cmp	r3, r2
 800311c:	bf38      	it	cc
 800311e:	4613      	movcc	r3, r2
 8003120:	603b      	str	r3, [r7, #0]
		// Apply a non-linear (exponential) scaling for the fan speed
		// This scales the temperature to a value between 0 and 1, then applies an exponential curve
		uint32_t normalized_temp = ((temperature - 20) *100)/ 80;  // Normalizing between 0 (20°C) and 1000 (100°C)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2264      	movs	r2, #100	@ 0x64
 8003126:	fb02 f303 	mul.w	r3, r2, r3
 800312a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800312e:	4a25      	ldr	r2, [pc, #148]	@ (80031c4 <FAN_Drive+0x124>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	099b      	lsrs	r3, r3, #6
 8003136:	607b      	str	r3, [r7, #4]
		if (normalized_temp > 100) normalized_temp = 100;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b64      	cmp	r3, #100	@ 0x64
 800313c:	d901      	bls.n	8003142 <FAN_Drive+0xa2>
 800313e:	2364      	movs	r3, #100	@ 0x64
 8003140:	607b      	str	r3, [r7, #4]
		if (normalized_temp < 0) normalized_temp = 0;

		duty_cycle = 20 + ((int)(pow(normalized_temp, 3) * 79))/1000000;  // Cubic curve for fan speed control
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7fd fa06 	bl	8000554 <__aeabi_ui2d>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 80031a8 <FAN_Drive+0x108>
 8003150:	ec43 2b10 	vmov	d0, r2, r3
 8003154:	f012 fe50 	bl	8015df8 <pow>
 8003158:	ec51 0b10 	vmov	r0, r1, d0
 800315c:	a314      	add	r3, pc, #80	@ (adr r3, 80031b0 <FAN_Drive+0x110>)
 800315e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003162:	f7fd fa71 	bl	8000648 <__aeabi_dmul>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4610      	mov	r0, r2
 800316c:	4619      	mov	r1, r3
 800316e:	f7fd fd1b 	bl	8000ba8 <__aeabi_d2iz>
 8003172:	4603      	mov	r3, r0
 8003174:	4a14      	ldr	r2, [pc, #80]	@ (80031c8 <FAN_Drive+0x128>)
 8003176:	fb82 1203 	smull	r1, r2, r2, r3
 800317a:	1492      	asrs	r2, r2, #18
 800317c:	17db      	asrs	r3, r3, #31
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	3314      	adds	r3, #20
 8003182:	4a12      	ldr	r2, [pc, #72]	@ (80031cc <FAN_Drive+0x12c>)
 8003184:	6013      	str	r3, [r2, #0]

		// Enforce minimum and maximum duty cycles
		if (temperature < 20) {
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	2b13      	cmp	r3, #19
 800318a:	d803      	bhi.n	8003194 <FAN_Drive+0xf4>
		        duty_cycle = 20;
 800318c:	4b0f      	ldr	r3, [pc, #60]	@ (80031cc <FAN_Drive+0x12c>)
 800318e:	2214      	movs	r2, #20
 8003190:	601a      	str	r2, [r3, #0]
		    	duty_cycle = 99;
		}

		//Set_PWM_DutyCycle(duty_cycle);

}
 8003192:	e005      	b.n	80031a0 <FAN_Drive+0x100>
		} else if (temperature > 100) {
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2b64      	cmp	r3, #100	@ 0x64
 8003198:	d902      	bls.n	80031a0 <FAN_Drive+0x100>
		    	duty_cycle = 99;
 800319a:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <FAN_Drive+0x12c>)
 800319c:	2263      	movs	r2, #99	@ 0x63
 800319e:	601a      	str	r2, [r3, #0]
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	00000000 	.word	0x00000000
 80031ac:	40080000 	.word	0x40080000
 80031b0:	00000000 	.word	0x00000000
 80031b4:	4053c000 	.word	0x4053c000
 80031b8:	20000a70 	.word	0x20000a70
 80031bc:	20000a68 	.word	0x20000a68
 80031c0:	20000a6c 	.word	0x20000a6c
 80031c4:	cccccccd 	.word	0xcccccccd
 80031c8:	431bde83 	.word	0x431bde83
 80031cc:	20000028 	.word	0x20000028

080031d0 <SendUSBMessage>:



void SendUSBMessage(const char* message) {
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7fd f871 	bl	80002c0 <strlen>
 80031de:	4603      	mov	r3, r0
 80031e0:	81fb      	strh	r3, [r7, #14]
    if (len > 127) len = 127;  // Limit to buffer size
 80031e2:	89fb      	ldrh	r3, [r7, #14]
 80031e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80031e6:	d901      	bls.n	80031ec <SendUSBMessage+0x1c>
 80031e8:	237f      	movs	r3, #127	@ 0x7f
 80031ea:	81fb      	strh	r3, [r7, #14]
    memcpy(USB_TX_Buffer, message, len);
 80031ec:	89fb      	ldrh	r3, [r7, #14]
 80031ee:	461a      	mov	r2, r3
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	480b      	ldr	r0, [pc, #44]	@ (8003220 <SendUSBMessage+0x50>)
 80031f4:	f00e feb9 	bl	8011f6a <memcpy>
    USB_TX_Buffer[len] = '\0';  // Ensure null-terminated string
 80031f8:	89fb      	ldrh	r3, [r7, #14]
 80031fa:	4a09      	ldr	r2, [pc, #36]	@ (8003220 <SendUSBMessage+0x50>)
 80031fc:	2100      	movs	r1, #0
 80031fe:	54d1      	strb	r1, [r2, r3]
            break;
        }
      // HAL_Delay(10);  // Small delay before retrying
    } while (retry_count-- > 0);*/
    do {
            result = CDC_Transmit_FS((uint8_t*)message, len);
 8003200:	89fb      	ldrh	r3, [r7, #14]
 8003202:	4619      	mov	r1, r3
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f00d fa15 	bl	8010634 <CDC_Transmit_FS>
 800320a:	4603      	mov	r3, r0
 800320c:	737b      	strb	r3, [r7, #13]
        } while (result == USBD_BUSY); // Retry while USB is busy
 800320e:	7b7b      	ldrb	r3, [r7, #13]
 8003210:	2b01      	cmp	r3, #1
 8003212:	d0f5      	beq.n	8003200 <SendUSBMessage+0x30>


}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20000af4 	.word	0x20000af4

08003224 <ParseUSBCommand>:

void ParseUSBCommand(void) {
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
	 if (dataReceivedFlag) {
 8003228:	4ba6      	ldr	r3, [pc, #664]	@ (80034c4 <ParseUSBCommand+0x2a0>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8146 	beq.w	80034c0 <ParseUSBCommand+0x29c>
	        if (strncmp((char*)USB_RX_Buffer, "SET_KP", 6) == 0) {
 8003234:	2206      	movs	r2, #6
 8003236:	49a4      	ldr	r1, [pc, #656]	@ (80034c8 <ParseUSBCommand+0x2a4>)
 8003238:	48a4      	ldr	r0, [pc, #656]	@ (80034cc <ParseUSBCommand+0x2a8>)
 800323a:	f00e fe0c 	bl	8011e56 <strncmp>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d108      	bne.n	8003256 <ParseUSBCommand+0x32>
	            sscanf((char*)USB_RX_Buffer, "SET_KP %f", &Kp);
 8003244:	4aa2      	ldr	r2, [pc, #648]	@ (80034d0 <ParseUSBCommand+0x2ac>)
 8003246:	49a3      	ldr	r1, [pc, #652]	@ (80034d4 <ParseUSBCommand+0x2b0>)
 8003248:	48a0      	ldr	r0, [pc, #640]	@ (80034cc <ParseUSBCommand+0x2a8>)
 800324a:	f00e fd8d 	bl	8011d68 <siscanf>
	            SendUSBMessage("KP Updated\n");
 800324e:	48a2      	ldr	r0, [pc, #648]	@ (80034d8 <ParseUSBCommand+0x2b4>)
 8003250:	f7ff ffbe 	bl	80031d0 <SendUSBMessage>
 8003254:	e12c      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_Ti", 6) == 0) {
 8003256:	2206      	movs	r2, #6
 8003258:	49a0      	ldr	r1, [pc, #640]	@ (80034dc <ParseUSBCommand+0x2b8>)
 800325a:	489c      	ldr	r0, [pc, #624]	@ (80034cc <ParseUSBCommand+0x2a8>)
 800325c:	f00e fdfb 	bl	8011e56 <strncmp>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d108      	bne.n	8003278 <ParseUSBCommand+0x54>
	            sscanf((char*)USB_RX_Buffer, "SET_Ti %f", &Ti);
 8003266:	4a9e      	ldr	r2, [pc, #632]	@ (80034e0 <ParseUSBCommand+0x2bc>)
 8003268:	499e      	ldr	r1, [pc, #632]	@ (80034e4 <ParseUSBCommand+0x2c0>)
 800326a:	4898      	ldr	r0, [pc, #608]	@ (80034cc <ParseUSBCommand+0x2a8>)
 800326c:	f00e fd7c 	bl	8011d68 <siscanf>
	            SendUSBMessage("Ti Updated\n");
 8003270:	489d      	ldr	r0, [pc, #628]	@ (80034e8 <ParseUSBCommand+0x2c4>)
 8003272:	f7ff ffad 	bl	80031d0 <SendUSBMessage>
 8003276:	e11b      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_VREF", 8) == 0) {
 8003278:	2208      	movs	r2, #8
 800327a:	499c      	ldr	r1, [pc, #624]	@ (80034ec <ParseUSBCommand+0x2c8>)
 800327c:	4893      	ldr	r0, [pc, #588]	@ (80034cc <ParseUSBCommand+0x2a8>)
 800327e:	f00e fdea 	bl	8011e56 <strncmp>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d108      	bne.n	800329a <ParseUSBCommand+0x76>
	            sscanf((char*)USB_RX_Buffer, "SET_VREF %hu", &vref);
 8003288:	4a99      	ldr	r2, [pc, #612]	@ (80034f0 <ParseUSBCommand+0x2cc>)
 800328a:	499a      	ldr	r1, [pc, #616]	@ (80034f4 <ParseUSBCommand+0x2d0>)
 800328c:	488f      	ldr	r0, [pc, #572]	@ (80034cc <ParseUSBCommand+0x2a8>)
 800328e:	f00e fd6b 	bl	8011d68 <siscanf>
	            SendUSBMessage("vref Updated\n");
 8003292:	4899      	ldr	r0, [pc, #612]	@ (80034f8 <ParseUSBCommand+0x2d4>)
 8003294:	f7ff ff9c 	bl	80031d0 <SendUSBMessage>
 8003298:	e10a      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS1_VREF", 12) == 0) {
 800329a:	220c      	movs	r2, #12
 800329c:	4997      	ldr	r1, [pc, #604]	@ (80034fc <ParseUSBCommand+0x2d8>)
 800329e:	488b      	ldr	r0, [pc, #556]	@ (80034cc <ParseUSBCommand+0x2a8>)
 80032a0:	f00e fdd9 	bl	8011e56 <strncmp>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d108      	bne.n	80032bc <ParseUSBCommand+0x98>
	            sscanf((char*)USB_RX_Buffer, "SET_CS1_VREF %d", &current_sensor1_vref);
 80032aa:	4a95      	ldr	r2, [pc, #596]	@ (8003500 <ParseUSBCommand+0x2dc>)
 80032ac:	4995      	ldr	r1, [pc, #596]	@ (8003504 <ParseUSBCommand+0x2e0>)
 80032ae:	4887      	ldr	r0, [pc, #540]	@ (80034cc <ParseUSBCommand+0x2a8>)
 80032b0:	f00e fd5a 	bl	8011d68 <siscanf>
	            SendUSBMessage("current_sensor1_vref Updated\n");
 80032b4:	4894      	ldr	r0, [pc, #592]	@ (8003508 <ParseUSBCommand+0x2e4>)
 80032b6:	f7ff ff8b 	bl	80031d0 <SendUSBMessage>
 80032ba:	e0f9      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS2_VREF", 12) == 0) {
 80032bc:	220c      	movs	r2, #12
 80032be:	4993      	ldr	r1, [pc, #588]	@ (800350c <ParseUSBCommand+0x2e8>)
 80032c0:	4882      	ldr	r0, [pc, #520]	@ (80034cc <ParseUSBCommand+0x2a8>)
 80032c2:	f00e fdc8 	bl	8011e56 <strncmp>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d108      	bne.n	80032de <ParseUSBCommand+0xba>
	            sscanf((char*)USB_RX_Buffer, "SET_CS2_VREF %d", &current_sensor2_vref);
 80032cc:	4a90      	ldr	r2, [pc, #576]	@ (8003510 <ParseUSBCommand+0x2ec>)
 80032ce:	4991      	ldr	r1, [pc, #580]	@ (8003514 <ParseUSBCommand+0x2f0>)
 80032d0:	487e      	ldr	r0, [pc, #504]	@ (80034cc <ParseUSBCommand+0x2a8>)
 80032d2:	f00e fd49 	bl	8011d68 <siscanf>
	            SendUSBMessage("current_sensor2_vref Updated\n");
 80032d6:	4890      	ldr	r0, [pc, #576]	@ (8003518 <ParseUSBCommand+0x2f4>)
 80032d8:	f7ff ff7a 	bl	80031d0 <SendUSBMessage>
 80032dc:	e0e8      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_IMAX2_SUM", 13) == 0) {
 80032de:	220d      	movs	r2, #13
 80032e0:	498e      	ldr	r1, [pc, #568]	@ (800351c <ParseUSBCommand+0x2f8>)
 80032e2:	487a      	ldr	r0, [pc, #488]	@ (80034cc <ParseUSBCommand+0x2a8>)
 80032e4:	f00e fdb7 	bl	8011e56 <strncmp>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d108      	bne.n	8003300 <ParseUSBCommand+0xdc>
	            sscanf((char*)USB_RX_Buffer, "SET_IMAX2_SUM %d", &imax2_sum);
 80032ee:	4a8c      	ldr	r2, [pc, #560]	@ (8003520 <ParseUSBCommand+0x2fc>)
 80032f0:	498c      	ldr	r1, [pc, #560]	@ (8003524 <ParseUSBCommand+0x300>)
 80032f2:	4876      	ldr	r0, [pc, #472]	@ (80034cc <ParseUSBCommand+0x2a8>)
 80032f4:	f00e fd38 	bl	8011d68 <siscanf>
	            SendUSBMessage("imax2_sum Updated\n");
 80032f8:	488b      	ldr	r0, [pc, #556]	@ (8003528 <ParseUSBCommand+0x304>)
 80032fa:	f7ff ff69 	bl	80031d0 <SendUSBMessage>
 80032fe:	e0d7      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_TR", 12) == 0) {
 8003300:	220c      	movs	r2, #12
 8003302:	498a      	ldr	r1, [pc, #552]	@ (800352c <ParseUSBCommand+0x308>)
 8003304:	4871      	ldr	r0, [pc, #452]	@ (80034cc <ParseUSBCommand+0x2a8>)
 8003306:	f00e fda6 	bl	8011e56 <strncmp>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d108      	bne.n	8003322 <ParseUSBCommand+0xfe>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_TR %f", &delay_tr);
 8003310:	4a87      	ldr	r2, [pc, #540]	@ (8003530 <ParseUSBCommand+0x30c>)
 8003312:	4988      	ldr	r1, [pc, #544]	@ (8003534 <ParseUSBCommand+0x310>)
 8003314:	486d      	ldr	r0, [pc, #436]	@ (80034cc <ParseUSBCommand+0x2a8>)
 8003316:	f00e fd27 	bl	8011d68 <siscanf>
	            SendUSBMessage("delay_tr Updated\n");
 800331a:	4887      	ldr	r0, [pc, #540]	@ (8003538 <ParseUSBCommand+0x314>)
 800331c:	f7ff ff58 	bl	80031d0 <SendUSBMessage>
 8003320:	e0c6      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_HC", 12) == 0) {
 8003322:	220c      	movs	r2, #12
 8003324:	4985      	ldr	r1, [pc, #532]	@ (800353c <ParseUSBCommand+0x318>)
 8003326:	4869      	ldr	r0, [pc, #420]	@ (80034cc <ParseUSBCommand+0x2a8>)
 8003328:	f00e fd95 	bl	8011e56 <strncmp>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d108      	bne.n	8003344 <ParseUSBCommand+0x120>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_HC %f", &delay_hc);
 8003332:	4a83      	ldr	r2, [pc, #524]	@ (8003540 <ParseUSBCommand+0x31c>)
 8003334:	4983      	ldr	r1, [pc, #524]	@ (8003544 <ParseUSBCommand+0x320>)
 8003336:	4865      	ldr	r0, [pc, #404]	@ (80034cc <ParseUSBCommand+0x2a8>)
 8003338:	f00e fd16 	bl	8011d68 <siscanf>
	            SendUSBMessage("delay_hc Updated\n");
 800333c:	4882      	ldr	r0, [pc, #520]	@ (8003548 <ParseUSBCommand+0x324>)
 800333e:	f7ff ff47 	bl	80031d0 <SendUSBMessage>
 8003342:	e0b5      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_KP", 6) == 0) {
 8003344:	2206      	movs	r2, #6
 8003346:	4981      	ldr	r1, [pc, #516]	@ (800354c <ParseUSBCommand+0x328>)
 8003348:	4860      	ldr	r0, [pc, #384]	@ (80034cc <ParseUSBCommand+0x2a8>)
 800334a:	f00e fd84 	bl	8011e56 <strncmp>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10e      	bne.n	8003372 <ParseUSBCommand+0x14e>
	            sprintf((char*)USB_TX_Buffer, "KP = %f\n", Kp);
 8003354:	4b5e      	ldr	r3, [pc, #376]	@ (80034d0 <ParseUSBCommand+0x2ac>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4618      	mov	r0, r3
 800335a:	f7fd f91d 	bl	8000598 <__aeabi_f2d>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	497b      	ldr	r1, [pc, #492]	@ (8003550 <ParseUSBCommand+0x32c>)
 8003364:	487b      	ldr	r0, [pc, #492]	@ (8003554 <ParseUSBCommand+0x330>)
 8003366:	f00e fcdf 	bl	8011d28 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800336a:	487a      	ldr	r0, [pc, #488]	@ (8003554 <ParseUSBCommand+0x330>)
 800336c:	f7ff ff30 	bl	80031d0 <SendUSBMessage>
 8003370:	e09e      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_Ti", 6) == 0) {
 8003372:	2206      	movs	r2, #6
 8003374:	4978      	ldr	r1, [pc, #480]	@ (8003558 <ParseUSBCommand+0x334>)
 8003376:	4855      	ldr	r0, [pc, #340]	@ (80034cc <ParseUSBCommand+0x2a8>)
 8003378:	f00e fd6d 	bl	8011e56 <strncmp>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10e      	bne.n	80033a0 <ParseUSBCommand+0x17c>
	            sprintf((char*)USB_TX_Buffer, "Ti = %f\n", Ti);
 8003382:	4b57      	ldr	r3, [pc, #348]	@ (80034e0 <ParseUSBCommand+0x2bc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd f906 	bl	8000598 <__aeabi_f2d>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4972      	ldr	r1, [pc, #456]	@ (800355c <ParseUSBCommand+0x338>)
 8003392:	4870      	ldr	r0, [pc, #448]	@ (8003554 <ParseUSBCommand+0x330>)
 8003394:	f00e fcc8 	bl	8011d28 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003398:	486e      	ldr	r0, [pc, #440]	@ (8003554 <ParseUSBCommand+0x330>)
 800339a:	f7ff ff19 	bl	80031d0 <SendUSBMessage>
 800339e:	e087      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_VREF", 8) == 0) {
 80033a0:	2208      	movs	r2, #8
 80033a2:	496f      	ldr	r1, [pc, #444]	@ (8003560 <ParseUSBCommand+0x33c>)
 80033a4:	4849      	ldr	r0, [pc, #292]	@ (80034cc <ParseUSBCommand+0x2a8>)
 80033a6:	f00e fd56 	bl	8011e56 <strncmp>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <ParseUSBCommand+0x1a2>
	            sprintf((char*)USB_TX_Buffer, "vref = %hu\n", vref);
 80033b0:	4b4f      	ldr	r3, [pc, #316]	@ (80034f0 <ParseUSBCommand+0x2cc>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	461a      	mov	r2, r3
 80033b6:	496b      	ldr	r1, [pc, #428]	@ (8003564 <ParseUSBCommand+0x340>)
 80033b8:	4866      	ldr	r0, [pc, #408]	@ (8003554 <ParseUSBCommand+0x330>)
 80033ba:	f00e fcb5 	bl	8011d28 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80033be:	4865      	ldr	r0, [pc, #404]	@ (8003554 <ParseUSBCommand+0x330>)
 80033c0:	f7ff ff06 	bl	80031d0 <SendUSBMessage>
 80033c4:	e074      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS1_VREF", 12) == 0) {
 80033c6:	220c      	movs	r2, #12
 80033c8:	4967      	ldr	r1, [pc, #412]	@ (8003568 <ParseUSBCommand+0x344>)
 80033ca:	4840      	ldr	r0, [pc, #256]	@ (80034cc <ParseUSBCommand+0x2a8>)
 80033cc:	f00e fd43 	bl	8011e56 <strncmp>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <ParseUSBCommand+0x1c8>
	            sprintf((char*)USB_TX_Buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 80033d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003500 <ParseUSBCommand+0x2dc>)
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	4963      	ldr	r1, [pc, #396]	@ (800356c <ParseUSBCommand+0x348>)
 80033de:	485d      	ldr	r0, [pc, #372]	@ (8003554 <ParseUSBCommand+0x330>)
 80033e0:	f00e fca2 	bl	8011d28 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80033e4:	485b      	ldr	r0, [pc, #364]	@ (8003554 <ParseUSBCommand+0x330>)
 80033e6:	f7ff fef3 	bl	80031d0 <SendUSBMessage>
 80033ea:	e061      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS2_VREF", 12) == 0) {
 80033ec:	220c      	movs	r2, #12
 80033ee:	4960      	ldr	r1, [pc, #384]	@ (8003570 <ParseUSBCommand+0x34c>)
 80033f0:	4836      	ldr	r0, [pc, #216]	@ (80034cc <ParseUSBCommand+0x2a8>)
 80033f2:	f00e fd30 	bl	8011e56 <strncmp>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <ParseUSBCommand+0x1ee>
	            sprintf((char*)USB_TX_Buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 80033fc:	4b44      	ldr	r3, [pc, #272]	@ (8003510 <ParseUSBCommand+0x2ec>)
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	495c      	ldr	r1, [pc, #368]	@ (8003574 <ParseUSBCommand+0x350>)
 8003404:	4853      	ldr	r0, [pc, #332]	@ (8003554 <ParseUSBCommand+0x330>)
 8003406:	f00e fc8f 	bl	8011d28 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800340a:	4852      	ldr	r0, [pc, #328]	@ (8003554 <ParseUSBCommand+0x330>)
 800340c:	f7ff fee0 	bl	80031d0 <SendUSBMessage>
 8003410:	e04e      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_IMAX2_SUM", 13) == 0) {
 8003412:	220d      	movs	r2, #13
 8003414:	4958      	ldr	r1, [pc, #352]	@ (8003578 <ParseUSBCommand+0x354>)
 8003416:	482d      	ldr	r0, [pc, #180]	@ (80034cc <ParseUSBCommand+0x2a8>)
 8003418:	f00e fd1d 	bl	8011e56 <strncmp>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d10a      	bne.n	8003438 <ParseUSBCommand+0x214>
	            sprintf((char*)USB_TX_Buffer, "imax2_sum = %f\n", imax2_sum);
 8003422:	4b3f      	ldr	r3, [pc, #252]	@ (8003520 <ParseUSBCommand+0x2fc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	461a      	mov	r2, r3
 8003428:	4954      	ldr	r1, [pc, #336]	@ (800357c <ParseUSBCommand+0x358>)
 800342a:	484a      	ldr	r0, [pc, #296]	@ (8003554 <ParseUSBCommand+0x330>)
 800342c:	f00e fc7c 	bl	8011d28 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003430:	4848      	ldr	r0, [pc, #288]	@ (8003554 <ParseUSBCommand+0x330>)
 8003432:	f7ff fecd 	bl	80031d0 <SendUSBMessage>
 8003436:	e03b      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_TR", 12) == 0) {
 8003438:	220c      	movs	r2, #12
 800343a:	4951      	ldr	r1, [pc, #324]	@ (8003580 <ParseUSBCommand+0x35c>)
 800343c:	4823      	ldr	r0, [pc, #140]	@ (80034cc <ParseUSBCommand+0x2a8>)
 800343e:	f00e fd0a 	bl	8011e56 <strncmp>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10e      	bne.n	8003466 <ParseUSBCommand+0x242>
	            sprintf((char*)USB_TX_Buffer, "delay_tr = %f\n", delay_tr);
 8003448:	4b39      	ldr	r3, [pc, #228]	@ (8003530 <ParseUSBCommand+0x30c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7fd f8a3 	bl	8000598 <__aeabi_f2d>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	494b      	ldr	r1, [pc, #300]	@ (8003584 <ParseUSBCommand+0x360>)
 8003458:	483e      	ldr	r0, [pc, #248]	@ (8003554 <ParseUSBCommand+0x330>)
 800345a:	f00e fc65 	bl	8011d28 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800345e:	483d      	ldr	r0, [pc, #244]	@ (8003554 <ParseUSBCommand+0x330>)
 8003460:	f7ff feb6 	bl	80031d0 <SendUSBMessage>
 8003464:	e024      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_HC", 12) == 0) {
 8003466:	220c      	movs	r2, #12
 8003468:	4947      	ldr	r1, [pc, #284]	@ (8003588 <ParseUSBCommand+0x364>)
 800346a:	4818      	ldr	r0, [pc, #96]	@ (80034cc <ParseUSBCommand+0x2a8>)
 800346c:	f00e fcf3 	bl	8011e56 <strncmp>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10e      	bne.n	8003494 <ParseUSBCommand+0x270>
	            sprintf((char*)USB_TX_Buffer, "delay_hc = %f\n", delay_hc);
 8003476:	4b32      	ldr	r3, [pc, #200]	@ (8003540 <ParseUSBCommand+0x31c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd f88c 	bl	8000598 <__aeabi_f2d>
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	4941      	ldr	r1, [pc, #260]	@ (800358c <ParseUSBCommand+0x368>)
 8003486:	4833      	ldr	r0, [pc, #204]	@ (8003554 <ParseUSBCommand+0x330>)
 8003488:	f00e fc4e 	bl	8011d28 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800348c:	4831      	ldr	r0, [pc, #196]	@ (8003554 <ParseUSBCommand+0x330>)
 800348e:	f7ff fe9f 	bl	80031d0 <SendUSBMessage>
 8003492:	e00d      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else if (strncmp((char*)USB_RX_Buffer, "DISPLAY_ALL", 11) == 0) {
 8003494:	220b      	movs	r2, #11
 8003496:	493e      	ldr	r1, [pc, #248]	@ (8003590 <ParseUSBCommand+0x36c>)
 8003498:	480c      	ldr	r0, [pc, #48]	@ (80034cc <ParseUSBCommand+0x2a8>)
 800349a:	f00e fcdc 	bl	8011e56 <strncmp>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <ParseUSBCommand+0x286>
	            DisplayAllVariables();
 80034a4:	f000 f9c2 	bl	800382c <DisplayAllVariables>
 80034a8:	e002      	b.n	80034b0 <ParseUSBCommand+0x28c>

	        } else {
	            SendUSBMessage("Unknown Command\n");
 80034aa:	483a      	ldr	r0, [pc, #232]	@ (8003594 <ParseUSBCommand+0x370>)
 80034ac:	f7ff fe90 	bl	80031d0 <SendUSBMessage>
	        }
	        memset(USB_RX_Buffer, 0, sizeof(USB_RX_Buffer));  // Clear buffer
 80034b0:	2240      	movs	r2, #64	@ 0x40
 80034b2:	2100      	movs	r1, #0
 80034b4:	4805      	ldr	r0, [pc, #20]	@ (80034cc <ParseUSBCommand+0x2a8>)
 80034b6:	f00e fcc6 	bl	8011e46 <memset>
	        dataReceivedFlag = 0;
 80034ba:	4b02      	ldr	r3, [pc, #8]	@ (80034c4 <ParseUSBCommand+0x2a0>)
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
	    }
}
 80034c0:	bf00      	nop
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	20000b74 	.word	0x20000b74
 80034c8:	08016d10 	.word	0x08016d10
 80034cc:	20000ab4 	.word	0x20000ab4
 80034d0:	20000018 	.word	0x20000018
 80034d4:	08016d18 	.word	0x08016d18
 80034d8:	08016d24 	.word	0x08016d24
 80034dc:	08016d30 	.word	0x08016d30
 80034e0:	2000001c 	.word	0x2000001c
 80034e4:	08016d38 	.word	0x08016d38
 80034e8:	08016d44 	.word	0x08016d44
 80034ec:	08016d50 	.word	0x08016d50
 80034f0:	20000000 	.word	0x20000000
 80034f4:	08016d5c 	.word	0x08016d5c
 80034f8:	08016d6c 	.word	0x08016d6c
 80034fc:	08016d7c 	.word	0x08016d7c
 8003500:	20000a54 	.word	0x20000a54
 8003504:	08016d8c 	.word	0x08016d8c
 8003508:	08016d9c 	.word	0x08016d9c
 800350c:	08016dbc 	.word	0x08016dbc
 8003510:	20000a56 	.word	0x20000a56
 8003514:	08016dcc 	.word	0x08016dcc
 8003518:	08016ddc 	.word	0x08016ddc
 800351c:	08016dfc 	.word	0x08016dfc
 8003520:	20000a98 	.word	0x20000a98
 8003524:	08016e0c 	.word	0x08016e0c
 8003528:	08016e20 	.word	0x08016e20
 800352c:	08016e34 	.word	0x08016e34
 8003530:	20000004 	.word	0x20000004
 8003534:	08016e44 	.word	0x08016e44
 8003538:	08016e54 	.word	0x08016e54
 800353c:	08016e68 	.word	0x08016e68
 8003540:	20000008 	.word	0x20000008
 8003544:	08016e78 	.word	0x08016e78
 8003548:	08016e88 	.word	0x08016e88
 800354c:	08016e9c 	.word	0x08016e9c
 8003550:	08016ea4 	.word	0x08016ea4
 8003554:	20000af4 	.word	0x20000af4
 8003558:	08016eb0 	.word	0x08016eb0
 800355c:	08016eb8 	.word	0x08016eb8
 8003560:	08016ec4 	.word	0x08016ec4
 8003564:	08016ed0 	.word	0x08016ed0
 8003568:	08016edc 	.word	0x08016edc
 800356c:	08016eec 	.word	0x08016eec
 8003570:	08016f08 	.word	0x08016f08
 8003574:	08016f18 	.word	0x08016f18
 8003578:	08016f34 	.word	0x08016f34
 800357c:	08016f44 	.word	0x08016f44
 8003580:	08016f54 	.word	0x08016f54
 8003584:	08016f64 	.word	0x08016f64
 8003588:	08016f74 	.word	0x08016f74
 800358c:	08016f84 	.word	0x08016f84
 8003590:	08016f94 	.word	0x08016f94
 8003594:	08016fa0 	.word	0x08016fa0

08003598 <float_to_integer>:

// CORDIC
int32_t float_to_integer(float in, int scaling_factor, uint8_t bits){
 8003598:	b480      	push	{r7}
 800359a:	b087      	sub	sp, #28
 800359c:	af00      	add	r7, sp, #0
 800359e:	ed87 0a03 	vstr	s0, [r7, #12]
 80035a2:	60b8      	str	r0, [r7, #8]
 80035a4:	460b      	mov	r3, r1
 80035a6:	71fb      	strb	r3, [r7, #7]

	int32_t acc;
	if(bits == 32){
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d135      	bne.n	800361a <float_to_integer+0x82>
	if(in <= 1){
 80035ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80035b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80035b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035be:	d811      	bhi.n	80035e4 <float_to_integer+0x4c>
		 acc = (uint32_t)(in*scaling_factor*2147483648);
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	ee07 3a90 	vmov	s15, r3
 80035c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80035ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035d2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800369c <float_to_integer+0x104>
 80035d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035de:	ee17 3a90 	vmov	r3, s15
 80035e2:	617b      	str	r3, [r7, #20]
	}

	if(in > 1){
 80035e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80035e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80035ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035f4:	dd11      	ble.n	800361a <float_to_integer+0x82>
		 acc = (uint32_t)((in/scaling_factor)*2147483648);
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	ee07 3a90 	vmov	s15, r3
 80035fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003600:	edd7 6a03 	vldr	s13, [r7, #12]
 8003604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003608:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 800369c <float_to_integer+0x104>
 800360c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003614:	ee17 3a90 	vmov	r3, s15
 8003618:	617b      	str	r3, [r7, #20]
		}
}
	if(bits == 16){
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	2b10      	cmp	r3, #16
 800361e:	d135      	bne.n	800368c <float_to_integer+0xf4>
		if(in <= 1){
 8003620:	edd7 7a03 	vldr	s15, [r7, #12]
 8003624:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003628:	eef4 7ac7 	vcmpe.f32	s15, s14
 800362c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003630:	d811      	bhi.n	8003656 <float_to_integer+0xbe>
			 acc = (uint32_t)(in*scaling_factor*32767);
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	ee07 3a90 	vmov	s15, r3
 8003638:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800363c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003644:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80036a0 <float_to_integer+0x108>
 8003648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800364c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003650:	ee17 3a90 	vmov	r3, s15
 8003654:	617b      	str	r3, [r7, #20]
		}

		if(in > 1){
 8003656:	edd7 7a03 	vldr	s15, [r7, #12]
 800365a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800365e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003666:	dd11      	ble.n	800368c <float_to_integer+0xf4>
			 acc = (uint32_t)((in/scaling_factor)*32767);
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	ee07 3a90 	vmov	s15, r3
 800366e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003672:	edd7 6a03 	vldr	s13, [r7, #12]
 8003676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800367a:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80036a0 <float_to_integer+0x108>
 800367e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003686:	ee17 3a90 	vmov	r3, s15
 800368a:	617b      	str	r3, [r7, #20]
			}
	}


	return acc;
 800368c:	697b      	ldr	r3, [r7, #20]
}
 800368e:	4618      	mov	r0, r3
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	4f000000 	.word	0x4f000000
 80036a0:	46fffe00 	.word	0x46fffe00

080036a4 <integer_to_float>:

float integer_to_float(int32_t result_cordic_integer, int squarted_scaling_factor, int8_t mode, uint8_t bits){
 80036a4:	b480      	push	{r7}
 80036a6:	b087      	sub	sp, #28
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	60f8      	str	r0, [r7, #12]
 80036ac:	60b9      	str	r1, [r7, #8]
 80036ae:	4611      	mov	r1, r2
 80036b0:	461a      	mov	r2, r3
 80036b2:	460b      	mov	r3, r1
 80036b4:	71fb      	strb	r3, [r7, #7]
 80036b6:	4613      	mov	r3, r2
 80036b8:	71bb      	strb	r3, [r7, #6]
	float acc;

	if(bits == 32){
 80036ba:	79bb      	ldrb	r3, [r7, #6]
 80036bc:	2b20      	cmp	r3, #32
 80036be:	d12b      	bne.n	8003718 <integer_to_float+0x74>
		// mode = 1 when float_to_integer() in is  <= 1
		if(mode){
 80036c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d011      	beq.n	80036ec <integer_to_float+0x48>
			acc = (float)((result_cordic_integer/2147483648.0f)/squarted_scaling_factor);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	ee07 3a90 	vmov	s15, r3
 80036ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d2:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 800378c <integer_to_float+0xe8>
 80036d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	ee07 3a90 	vmov	s15, r3
 80036e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036e8:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		// mode = 0 when float_to_integer() in is > 1
		if(!mode){
 80036ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d111      	bne.n	8003718 <integer_to_float+0x74>
			acc = (float)((result_cordic_integer/2147483648.0f)*squarted_scaling_factor);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	ee07 3a90 	vmov	s15, r3
 80036fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036fe:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800378c <integer_to_float+0xe8>
 8003702:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	ee07 3a90 	vmov	s15, r3
 800370c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003714:	edc7 7a05 	vstr	s15, [r7, #20]
		}
	}

	if(bits == 16){
 8003718:	79bb      	ldrb	r3, [r7, #6]
 800371a:	2b10      	cmp	r3, #16
 800371c:	d12b      	bne.n	8003776 <integer_to_float+0xd2>
		// mode = 1 when float_to_integer() in is  <= 1
		if(mode){
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d011      	beq.n	800374a <integer_to_float+0xa6>
			acc = (float)((result_cordic_integer/32767.0f)/squarted_scaling_factor);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	ee07 3a90 	vmov	s15, r3
 800372c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003730:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003790 <integer_to_float+0xec>
 8003734:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003746:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		// mode = 0 when float_to_integer() in is > 1
		if(!mode){
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d111      	bne.n	8003776 <integer_to_float+0xd2>
			acc = (float)((result_cordic_integer/32767.0f)*squarted_scaling_factor);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	ee07 3a90 	vmov	s15, r3
 8003758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800375c:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003790 <integer_to_float+0xec>
 8003760:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	ee07 3a90 	vmov	s15, r3
 800376a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800376e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003772:	edc7 7a05 	vstr	s15, [r7, #20]
		}
	}

	return acc;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	ee07 3a90 	vmov	s15, r3

}
 800377c:	eeb0 0a67 	vmov.f32	s0, s15
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	4f000000 	.word	0x4f000000
 8003790:	46fffe00 	.word	0x46fffe00

08003794 <approx_acos2>:
    // Example coefficients – you would need to adjust these for your range and precision.
    float a0 = 1.5708f;  // ~pi/2
    float a1 = -1.5700f;
    return a0 + a1 * x;
}
static inline float approx_acos2(float x) {
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	ed87 0a01 	vstr	s0, [r7, #4]
    // Example coefficients – you would need to adjust these for your range and precision.
	if (x < -1.0f) x = -1.0f;
 800379e:	edd7 7a01 	vldr	s15, [r7, #4]
 80037a2:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80037a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ae:	d502      	bpl.n	80037b6 <approx_acos2+0x22>
 80037b0:	4b1a      	ldr	r3, [pc, #104]	@ (800381c <approx_acos2+0x88>)
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	e00b      	b.n	80037ce <approx_acos2+0x3a>
	    else if (x > 1.0f) x = 1.0f;
 80037b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80037ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80037be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c6:	dd02      	ble.n	80037ce <approx_acos2+0x3a>
 80037c8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80037cc:	607b      	str	r3, [r7, #4]
	    float sqrt_val = sqrtf(1.0f - x);
 80037ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80037d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80037d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037da:	eeb0 0a67 	vmov.f32	s0, s15
 80037de:	f012 fb7b 	bl	8015ed8 <sqrtf>
 80037e2:	ed87 0a03 	vstr	s0, [r7, #12]
	    return sqrt_val * (1.5707963050f + x * (-0.2145988016f + 0.0889789874f * x));
 80037e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80037ea:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003820 <approx_acos2+0x8c>
 80037ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037f2:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003824 <approx_acos2+0x90>
 80037f6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80037fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80037fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003802:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003828 <approx_acos2+0x94>
 8003806:	ee37 7a87 	vadd.f32	s14, s15, s14
 800380a:	edd7 7a03 	vldr	s15, [r7, #12]
 800380e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8003812:	eeb0 0a67 	vmov.f32	s0, s15
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	bf800000 	.word	0xbf800000
 8003820:	3db63a9e 	.word	0x3db63a9e
 8003824:	3e5bbfca 	.word	0x3e5bbfca
 8003828:	3fc90fda 	.word	0x3fc90fda

0800382c <DisplayAllVariables>:

	    // Return the corresponding LUT entry.
	    return acos_lut[index - 1];
}

void DisplayAllVariables(void) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b0a0      	sub	sp, #128	@ 0x80
 8003830:	af00      	add	r7, sp, #0
    char buffer[128];

    sprintf(buffer, "KP = %f\n", Kp);
 8003832:	4b5d      	ldr	r3, [pc, #372]	@ (80039a8 <DisplayAllVariables+0x17c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f7fc feae 	bl	8000598 <__aeabi_f2d>
 800383c:	4602      	mov	r2, r0
 800383e:	460b      	mov	r3, r1
 8003840:	4638      	mov	r0, r7
 8003842:	495a      	ldr	r1, [pc, #360]	@ (80039ac <DisplayAllVariables+0x180>)
 8003844:	f00e fa70 	bl	8011d28 <siprintf>
        SendUSBMessage(buffer);
 8003848:	463b      	mov	r3, r7
 800384a:	4618      	mov	r0, r3
 800384c:	f7ff fcc0 	bl	80031d0 <SendUSBMessage>

        sprintf(buffer, "Ti = %f\n", Ti);
 8003850:	4b57      	ldr	r3, [pc, #348]	@ (80039b0 <DisplayAllVariables+0x184>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f7fc fe9f 	bl	8000598 <__aeabi_f2d>
 800385a:	4602      	mov	r2, r0
 800385c:	460b      	mov	r3, r1
 800385e:	4638      	mov	r0, r7
 8003860:	4954      	ldr	r1, [pc, #336]	@ (80039b4 <DisplayAllVariables+0x188>)
 8003862:	f00e fa61 	bl	8011d28 <siprintf>
        SendUSBMessage(buffer);
 8003866:	463b      	mov	r3, r7
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fcb1 	bl	80031d0 <SendUSBMessage>

        sprintf(buffer, "vref = %hu\n", vref);
 800386e:	4b52      	ldr	r3, [pc, #328]	@ (80039b8 <DisplayAllVariables+0x18c>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	463b      	mov	r3, r7
 8003874:	4951      	ldr	r1, [pc, #324]	@ (80039bc <DisplayAllVariables+0x190>)
 8003876:	4618      	mov	r0, r3
 8003878:	f00e fa56 	bl	8011d28 <siprintf>
        SendUSBMessage(buffer);
 800387c:	463b      	mov	r3, r7
 800387e:	4618      	mov	r0, r3
 8003880:	f7ff fca6 	bl	80031d0 <SendUSBMessage>

        sprintf(buffer, "imax1 = %f\n", imax1);
 8003884:	4b4e      	ldr	r3, [pc, #312]	@ (80039c0 <DisplayAllVariables+0x194>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	463b      	mov	r3, r7
 800388a:	494e      	ldr	r1, [pc, #312]	@ (80039c4 <DisplayAllVariables+0x198>)
 800388c:	4618      	mov	r0, r3
 800388e:	f00e fa4b 	bl	8011d28 <siprintf>
        SendUSBMessage(buffer);
 8003892:	463b      	mov	r3, r7
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff fc9b 	bl	80031d0 <SendUSBMessage>

        sprintf(buffer, "imax2 = %f\n", imax2);
 800389a:	4b4b      	ldr	r3, [pc, #300]	@ (80039c8 <DisplayAllVariables+0x19c>)
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	463b      	mov	r3, r7
 80038a0:	494a      	ldr	r1, [pc, #296]	@ (80039cc <DisplayAllVariables+0x1a0>)
 80038a2:	4618      	mov	r0, r3
 80038a4:	f00e fa40 	bl	8011d28 <siprintf>
        SendUSBMessage(buffer);
 80038a8:	463b      	mov	r3, r7
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff fc90 	bl	80031d0 <SendUSBMessage>

        sprintf(buffer, "imin = %f\n", imin);
 80038b0:	4b47      	ldr	r3, [pc, #284]	@ (80039d0 <DisplayAllVariables+0x1a4>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	463b      	mov	r3, r7
 80038b6:	4947      	ldr	r1, [pc, #284]	@ (80039d4 <DisplayAllVariables+0x1a8>)
 80038b8:	4618      	mov	r0, r3
 80038ba:	f00e fa35 	bl	8011d28 <siprintf>
        SendUSBMessage(buffer);
 80038be:	463b      	mov	r3, r7
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fc85 	bl	80031d0 <SendUSBMessage>

        sprintf(buffer, "input_voltage = %f\n", input_voltage);
 80038c6:	4b44      	ldr	r3, [pc, #272]	@ (80039d8 <DisplayAllVariables+0x1ac>)
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	463b      	mov	r3, r7
 80038cc:	4943      	ldr	r1, [pc, #268]	@ (80039dc <DisplayAllVariables+0x1b0>)
 80038ce:	4618      	mov	r0, r3
 80038d0:	f00e fa2a 	bl	8011d28 <siprintf>
        SendUSBMessage(buffer);
 80038d4:	463b      	mov	r3, r7
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff fc7a 	bl	80031d0 <SendUSBMessage>

        sprintf(buffer, "output_voltage = %f\n", output_voltage);
 80038dc:	4b40      	ldr	r3, [pc, #256]	@ (80039e0 <DisplayAllVariables+0x1b4>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	463b      	mov	r3, r7
 80038e2:	4940      	ldr	r1, [pc, #256]	@ (80039e4 <DisplayAllVariables+0x1b8>)
 80038e4:	4618      	mov	r0, r3
 80038e6:	f00e fa1f 	bl	8011d28 <siprintf>
        SendUSBMessage(buffer);
 80038ea:	463b      	mov	r3, r7
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7ff fc6f 	bl	80031d0 <SendUSBMessage>

        sprintf(buffer, "pcb_temp = %f\n", pcb_temp);
 80038f2:	4b3d      	ldr	r3, [pc, #244]	@ (80039e8 <DisplayAllVariables+0x1bc>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	463b      	mov	r3, r7
 80038f8:	493c      	ldr	r1, [pc, #240]	@ (80039ec <DisplayAllVariables+0x1c0>)
 80038fa:	4618      	mov	r0, r3
 80038fc:	f00e fa14 	bl	8011d28 <siprintf>
        SendUSBMessage(buffer);
 8003900:	463b      	mov	r3, r7
 8003902:	4618      	mov	r0, r3
 8003904:	f7ff fc64 	bl	80031d0 <SendUSBMessage>

        sprintf(buffer, "heat_sink_temp = %f\n", heat_sink_temp);
 8003908:	4b39      	ldr	r3, [pc, #228]	@ (80039f0 <DisplayAllVariables+0x1c4>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	463b      	mov	r3, r7
 800390e:	4939      	ldr	r1, [pc, #228]	@ (80039f4 <DisplayAllVariables+0x1c8>)
 8003910:	4618      	mov	r0, r3
 8003912:	f00e fa09 	bl	8011d28 <siprintf>
        SendUSBMessage(buffer);
 8003916:	463b      	mov	r3, r7
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff fc59 	bl	80031d0 <SendUSBMessage>

        sprintf(buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 800391e:	4b36      	ldr	r3, [pc, #216]	@ (80039f8 <DisplayAllVariables+0x1cc>)
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	461a      	mov	r2, r3
 8003924:	463b      	mov	r3, r7
 8003926:	4935      	ldr	r1, [pc, #212]	@ (80039fc <DisplayAllVariables+0x1d0>)
 8003928:	4618      	mov	r0, r3
 800392a:	f00e f9fd 	bl	8011d28 <siprintf>
        SendUSBMessage(buffer);
 800392e:	463b      	mov	r3, r7
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff fc4d 	bl	80031d0 <SendUSBMessage>

        sprintf(buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 8003936:	4b32      	ldr	r3, [pc, #200]	@ (8003a00 <DisplayAllVariables+0x1d4>)
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	463b      	mov	r3, r7
 800393e:	4931      	ldr	r1, [pc, #196]	@ (8003a04 <DisplayAllVariables+0x1d8>)
 8003940:	4618      	mov	r0, r3
 8003942:	f00e f9f1 	bl	8011d28 <siprintf>
        SendUSBMessage(buffer);
 8003946:	463b      	mov	r3, r7
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff fc41 	bl	80031d0 <SendUSBMessage>

        sprintf(buffer, "imax2_sum = %f\n", imax2_sum);
 800394e:	4b2e      	ldr	r3, [pc, #184]	@ (8003a08 <DisplayAllVariables+0x1dc>)
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	463b      	mov	r3, r7
 8003954:	492d      	ldr	r1, [pc, #180]	@ (8003a0c <DisplayAllVariables+0x1e0>)
 8003956:	4618      	mov	r0, r3
 8003958:	f00e f9e6 	bl	8011d28 <siprintf>
        SendUSBMessage(buffer);
 800395c:	463b      	mov	r3, r7
 800395e:	4618      	mov	r0, r3
 8003960:	f7ff fc36 	bl	80031d0 <SendUSBMessage>

        sprintf(buffer, "delay_tr = %f\n", delay_tr);
 8003964:	4b2a      	ldr	r3, [pc, #168]	@ (8003a10 <DisplayAllVariables+0x1e4>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7fc fe15 	bl	8000598 <__aeabi_f2d>
 800396e:	4602      	mov	r2, r0
 8003970:	460b      	mov	r3, r1
 8003972:	4638      	mov	r0, r7
 8003974:	4927      	ldr	r1, [pc, #156]	@ (8003a14 <DisplayAllVariables+0x1e8>)
 8003976:	f00e f9d7 	bl	8011d28 <siprintf>
        SendUSBMessage(buffer);
 800397a:	463b      	mov	r3, r7
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fc27 	bl	80031d0 <SendUSBMessage>

        sprintf(buffer, "delay_hc = %f\n", delay_hc);
 8003982:	4b25      	ldr	r3, [pc, #148]	@ (8003a18 <DisplayAllVariables+0x1ec>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fc fe06 	bl	8000598 <__aeabi_f2d>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	4638      	mov	r0, r7
 8003992:	4922      	ldr	r1, [pc, #136]	@ (8003a1c <DisplayAllVariables+0x1f0>)
 8003994:	f00e f9c8 	bl	8011d28 <siprintf>
        SendUSBMessage(buffer);
 8003998:	463b      	mov	r3, r7
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff fc18 	bl	80031d0 <SendUSBMessage>
}
 80039a0:	bf00      	nop
 80039a2:	3780      	adds	r7, #128	@ 0x80
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20000018 	.word	0x20000018
 80039ac:	08016ea4 	.word	0x08016ea4
 80039b0:	2000001c 	.word	0x2000001c
 80039b4:	08016eb8 	.word	0x08016eb8
 80039b8:	20000000 	.word	0x20000000
 80039bc:	08016ed0 	.word	0x08016ed0
 80039c0:	20000a58 	.word	0x20000a58
 80039c4:	08016fb4 	.word	0x08016fb4
 80039c8:	20000a5c 	.word	0x20000a5c
 80039cc:	08016fc0 	.word	0x08016fc0
 80039d0:	20000a60 	.word	0x20000a60
 80039d4:	08016fcc 	.word	0x08016fcc
 80039d8:	20000a64 	.word	0x20000a64
 80039dc:	08016fd8 	.word	0x08016fd8
 80039e0:	20000a7c 	.word	0x20000a7c
 80039e4:	08016fec 	.word	0x08016fec
 80039e8:	20000a68 	.word	0x20000a68
 80039ec:	08017004 	.word	0x08017004
 80039f0:	20000a6c 	.word	0x20000a6c
 80039f4:	08017014 	.word	0x08017014
 80039f8:	20000a54 	.word	0x20000a54
 80039fc:	08016eec 	.word	0x08016eec
 8003a00:	20000a56 	.word	0x20000a56
 8003a04:	08016f18 	.word	0x08016f18
 8003a08:	20000a98 	.word	0x20000a98
 8003a0c:	08016f44 	.word	0x08016f44
 8003a10:	20000004 	.word	0x20000004
 8003a14:	08016f64 	.word	0x08016f64
 8003a18:	20000008 	.word	0x20000008
 8003a1c:	08016f84 	.word	0x08016f84

08003a20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a24:	b672      	cpsid	i
}
 8003a26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a28:	bf00      	nop
 8003a2a:	e7fd      	b.n	8003a28 <Error_Handler+0x8>

08003a2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a32:	4b0f      	ldr	r3, [pc, #60]	@ (8003a70 <HAL_MspInit+0x44>)
 8003a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a36:	4a0e      	ldr	r2, [pc, #56]	@ (8003a70 <HAL_MspInit+0x44>)
 8003a38:	f043 0301 	orr.w	r3, r3, #1
 8003a3c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003a70 <HAL_MspInit+0x44>)
 8003a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a4a:	4b09      	ldr	r3, [pc, #36]	@ (8003a70 <HAL_MspInit+0x44>)
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a4e:	4a08      	ldr	r2, [pc, #32]	@ (8003a70 <HAL_MspInit+0x44>)
 8003a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a54:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a56:	4b06      	ldr	r3, [pc, #24]	@ (8003a70 <HAL_MspInit+0x44>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003a62:	f005 fa35 	bl	8008ed0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40021000 	.word	0x40021000

08003a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b0a4      	sub	sp, #144	@ 0x90
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a7c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003a80:	2200      	movs	r2, #0
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	605a      	str	r2, [r3, #4]
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	60da      	str	r2, [r3, #12]
 8003a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a8c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003a90:	2254      	movs	r2, #84	@ 0x54
 8003a92:	2100      	movs	r1, #0
 8003a94:	4618      	mov	r0, r3
 8003a96:	f00e f9d6 	bl	8011e46 <memset>
  if(hadc->Instance==ADC1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003aa2:	d11c      	bne.n	8003ade <HAL_ADC_MspInit+0x6a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003aa4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003aaa:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003aae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ab0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f005 ff49 	bl	800994c <HAL_RCCEx_PeriphCLKConfig>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003ac0:	f7ff ffae 	bl	8003a20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003ac4:	4b86      	ldr	r3, [pc, #536]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac8:	4a85      	ldr	r2, [pc, #532]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003aca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003ace:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ad0:	4b83      	ldr	r3, [pc, #524]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8003adc:	e185      	b.n	8003dea <HAL_ADC_MspInit+0x376>
  else if(hadc->Instance==ADC3)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a80      	ldr	r2, [pc, #512]	@ (8003ce4 <HAL_ADC_MspInit+0x270>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	f040 8087 	bne.w	8003bf8 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003aea:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003aee:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003af0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003af4:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003af6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003afa:	4618      	mov	r0, r3
 8003afc:	f005 ff26 	bl	800994c <HAL_RCCEx_PeriphCLKConfig>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_ADC_MspInit+0x96>
      Error_Handler();
 8003b06:	f7ff ff8b 	bl	8003a20 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003b0a:	4b77      	ldr	r3, [pc, #476]	@ (8003ce8 <HAL_ADC_MspInit+0x274>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	4a75      	ldr	r2, [pc, #468]	@ (8003ce8 <HAL_ADC_MspInit+0x274>)
 8003b12:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003b14:	4b74      	ldr	r3, [pc, #464]	@ (8003ce8 <HAL_ADC_MspInit+0x274>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10b      	bne.n	8003b34 <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003b1c:	4b70      	ldr	r3, [pc, #448]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b20:	4a6f      	ldr	r2, [pc, #444]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003b22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b28:	4b6d      	ldr	r3, [pc, #436]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b30:	623b      	str	r3, [r7, #32]
 8003b32:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b34:	4b6a      	ldr	r3, [pc, #424]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003b36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b38:	4a69      	ldr	r2, [pc, #420]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003b3a:	f043 0302 	orr.w	r3, r3, #2
 8003b3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b40:	4b67      	ldr	r3, [pc, #412]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b4c:	4b64      	ldr	r3, [pc, #400]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b50:	4a63      	ldr	r2, [pc, #396]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003b52:	f043 0310 	orr.w	r3, r3, #16
 8003b56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b58:	4b61      	ldr	r3, [pc, #388]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003b5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5c:	f003 0310 	and.w	r3, r3, #16
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS_VREF_1_Pin|HEATSINK_TEMP_Pin;
 8003b64:	f242 0302 	movw	r3, #8194	@ 0x2002
 8003b68:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b76:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	485b      	ldr	r0, [pc, #364]	@ (8003cec <HAL_ADC_MspInit+0x278>)
 8003b7e:	f003 fa01 	bl	8006f84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PCB_TEMP_Pin|CS_VREF_2_Pin|INPUT_V_ADC_Pin;
 8003b82:	f44f 530a 	mov.w	r3, #8832	@ 0x2280
 8003b86:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b94:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4855      	ldr	r0, [pc, #340]	@ (8003cf0 <HAL_ADC_MspInit+0x27c>)
 8003b9c:	f003 f9f2 	bl	8006f84 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel1;
 8003ba0:	4b54      	ldr	r3, [pc, #336]	@ (8003cf4 <HAL_ADC_MspInit+0x280>)
 8003ba2:	4a55      	ldr	r2, [pc, #340]	@ (8003cf8 <HAL_ADC_MspInit+0x284>)
 8003ba4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003ba6:	4b53      	ldr	r3, [pc, #332]	@ (8003cf4 <HAL_ADC_MspInit+0x280>)
 8003ba8:	2225      	movs	r2, #37	@ 0x25
 8003baa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bac:	4b51      	ldr	r3, [pc, #324]	@ (8003cf4 <HAL_ADC_MspInit+0x280>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bb2:	4b50      	ldr	r3, [pc, #320]	@ (8003cf4 <HAL_ADC_MspInit+0x280>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8003cf4 <HAL_ADC_MspInit+0x280>)
 8003bba:	2280      	movs	r2, #128	@ 0x80
 8003bbc:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003bbe:	4b4d      	ldr	r3, [pc, #308]	@ (8003cf4 <HAL_ADC_MspInit+0x280>)
 8003bc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bc4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8003cf4 <HAL_ADC_MspInit+0x280>)
 8003bc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003bcc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003bce:	4b49      	ldr	r3, [pc, #292]	@ (8003cf4 <HAL_ADC_MspInit+0x280>)
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003bd4:	4b47      	ldr	r3, [pc, #284]	@ (8003cf4 <HAL_ADC_MspInit+0x280>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003bda:	4846      	ldr	r0, [pc, #280]	@ (8003cf4 <HAL_ADC_MspInit+0x280>)
 8003bdc:	f002 ff60 	bl	8006aa0 <HAL_DMA_Init>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <HAL_ADC_MspInit+0x176>
      Error_Handler();
 8003be6:	f7ff ff1b 	bl	8003a20 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a41      	ldr	r2, [pc, #260]	@ (8003cf4 <HAL_ADC_MspInit+0x280>)
 8003bee:	655a      	str	r2, [r3, #84]	@ 0x54
 8003bf0:	4a40      	ldr	r2, [pc, #256]	@ (8003cf4 <HAL_ADC_MspInit+0x280>)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003bf6:	e0f8      	b.n	8003dea <HAL_ADC_MspInit+0x376>
  else if(hadc->Instance==ADC4)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a3f      	ldr	r2, [pc, #252]	@ (8003cfc <HAL_ADC_MspInit+0x288>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	f040 8082 	bne.w	8003d08 <HAL_ADC_MspInit+0x294>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003c04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c08:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003c0a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003c0e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c10:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003c14:	4618      	mov	r0, r3
 8003c16:	f005 fe99 	bl	800994c <HAL_RCCEx_PeriphCLKConfig>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8003c20:	f7ff fefe 	bl	8003a20 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003c24:	4b30      	ldr	r3, [pc, #192]	@ (8003ce8 <HAL_ADC_MspInit+0x274>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ce8 <HAL_ADC_MspInit+0x274>)
 8003c2c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce8 <HAL_ADC_MspInit+0x274>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d10b      	bne.n	8003c4e <HAL_ADC_MspInit+0x1da>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003c36:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c3a:	4a29      	ldr	r2, [pc, #164]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003c3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c42:	4b27      	ldr	r3, [pc, #156]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c4e:	4b24      	ldr	r3, [pc, #144]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c52:	4a23      	ldr	r2, [pc, #140]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003c54:	f043 0310 	orr.w	r3, r3, #16
 8003c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c5a:	4b21      	ldr	r3, [pc, #132]	@ (8003ce0 <HAL_ADC_MspInit+0x26c>)
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5e:	f003 0310 	and.w	r3, r3, #16
 8003c62:	613b      	str	r3, [r7, #16]
 8003c64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT_V_ADC_Pin;
 8003c66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c72:	2300      	movs	r3, #0
 8003c74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(OUTPUT_V_ADC_GPIO_Port, &GPIO_InitStruct);
 8003c78:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	481c      	ldr	r0, [pc, #112]	@ (8003cf0 <HAL_ADC_MspInit+0x27c>)
 8003c80:	f003 f980 	bl	8006f84 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel2;
 8003c84:	4b1e      	ldr	r3, [pc, #120]	@ (8003d00 <HAL_ADC_MspInit+0x28c>)
 8003c86:	4a1f      	ldr	r2, [pc, #124]	@ (8003d04 <HAL_ADC_MspInit+0x290>)
 8003c88:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8003c8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003d00 <HAL_ADC_MspInit+0x28c>)
 8003c8c:	2226      	movs	r2, #38	@ 0x26
 8003c8e:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c90:	4b1b      	ldr	r3, [pc, #108]	@ (8003d00 <HAL_ADC_MspInit+0x28c>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c96:	4b1a      	ldr	r3, [pc, #104]	@ (8003d00 <HAL_ADC_MspInit+0x28c>)
 8003c98:	2200      	movs	r2, #0
 8003c9a:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8003c9c:	4b18      	ldr	r3, [pc, #96]	@ (8003d00 <HAL_ADC_MspInit+0x28c>)
 8003c9e:	2280      	movs	r2, #128	@ 0x80
 8003ca0:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ca2:	4b17      	ldr	r3, [pc, #92]	@ (8003d00 <HAL_ADC_MspInit+0x28c>)
 8003ca4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ca8:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003caa:	4b15      	ldr	r3, [pc, #84]	@ (8003d00 <HAL_ADC_MspInit+0x28c>)
 8003cac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cb0:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8003cb2:	4b13      	ldr	r3, [pc, #76]	@ (8003d00 <HAL_ADC_MspInit+0x28c>)
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003cb8:	4b11      	ldr	r3, [pc, #68]	@ (8003d00 <HAL_ADC_MspInit+0x28c>)
 8003cba:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003cbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8003cc0:	480f      	ldr	r0, [pc, #60]	@ (8003d00 <HAL_ADC_MspInit+0x28c>)
 8003cc2:	f002 feed 	bl	8006aa0 <HAL_DMA_Init>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <HAL_ADC_MspInit+0x25c>
      Error_Handler();
 8003ccc:	f7ff fea8 	bl	8003a20 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a0b      	ldr	r2, [pc, #44]	@ (8003d00 <HAL_ADC_MspInit+0x28c>)
 8003cd4:	655a      	str	r2, [r3, #84]	@ 0x54
 8003cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8003d00 <HAL_ADC_MspInit+0x28c>)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003cdc:	e085      	b.n	8003dea <HAL_ADC_MspInit+0x376>
 8003cde:	bf00      	nop
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	50000400 	.word	0x50000400
 8003ce8:	20000bbc 	.word	0x20000bbc
 8003cec:	48000400 	.word	0x48000400
 8003cf0:	48001000 	.word	0x48001000
 8003cf4:	2000057c 	.word	0x2000057c
 8003cf8:	40020008 	.word	0x40020008
 8003cfc:	50000500 	.word	0x50000500
 8003d00:	200005dc 	.word	0x200005dc
 8003d04:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC5)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a39      	ldr	r2, [pc, #228]	@ (8003df4 <HAL_ADC_MspInit+0x380>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d16b      	bne.n	8003dea <HAL_ADC_MspInit+0x376>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003d12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d16:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003d18:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003d1c:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d1e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d22:	4618      	mov	r0, r3
 8003d24:	f005 fe12 	bl	800994c <HAL_RCCEx_PeriphCLKConfig>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <HAL_ADC_MspInit+0x2be>
      Error_Handler();
 8003d2e:	f7ff fe77 	bl	8003a20 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003d32:	4b31      	ldr	r3, [pc, #196]	@ (8003df8 <HAL_ADC_MspInit+0x384>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	3301      	adds	r3, #1
 8003d38:	4a2f      	ldr	r2, [pc, #188]	@ (8003df8 <HAL_ADC_MspInit+0x384>)
 8003d3a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8003df8 <HAL_ADC_MspInit+0x384>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d10b      	bne.n	8003d5c <HAL_ADC_MspInit+0x2e8>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003d44:	4b2d      	ldr	r3, [pc, #180]	@ (8003dfc <HAL_ADC_MspInit+0x388>)
 8003d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d48:	4a2c      	ldr	r2, [pc, #176]	@ (8003dfc <HAL_ADC_MspInit+0x388>)
 8003d4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d50:	4b2a      	ldr	r3, [pc, #168]	@ (8003dfc <HAL_ADC_MspInit+0x388>)
 8003d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d5c:	4b27      	ldr	r3, [pc, #156]	@ (8003dfc <HAL_ADC_MspInit+0x388>)
 8003d5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d60:	4a26      	ldr	r2, [pc, #152]	@ (8003dfc <HAL_ADC_MspInit+0x388>)
 8003d62:	f043 0301 	orr.w	r3, r3, #1
 8003d66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d68:	4b24      	ldr	r3, [pc, #144]	@ (8003dfc <HAL_ADC_MspInit+0x388>)
 8003d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMAX2_SUM_Pin;
 8003d74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d78:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(IMAX2_SUM_GPIO_Port, &GPIO_InitStruct);
 8003d86:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003d90:	f003 f8f8 	bl	8006f84 <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel3;
 8003d94:	4b1a      	ldr	r3, [pc, #104]	@ (8003e00 <HAL_ADC_MspInit+0x38c>)
 8003d96:	4a1b      	ldr	r2, [pc, #108]	@ (8003e04 <HAL_ADC_MspInit+0x390>)
 8003d98:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003d9a:	4b19      	ldr	r3, [pc, #100]	@ (8003e00 <HAL_ADC_MspInit+0x38c>)
 8003d9c:	2227      	movs	r2, #39	@ 0x27
 8003d9e:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003da0:	4b17      	ldr	r3, [pc, #92]	@ (8003e00 <HAL_ADC_MspInit+0x38c>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003da6:	4b16      	ldr	r3, [pc, #88]	@ (8003e00 <HAL_ADC_MspInit+0x38c>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003dac:	4b14      	ldr	r3, [pc, #80]	@ (8003e00 <HAL_ADC_MspInit+0x38c>)
 8003dae:	2280      	movs	r2, #128	@ 0x80
 8003db0:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003db2:	4b13      	ldr	r3, [pc, #76]	@ (8003e00 <HAL_ADC_MspInit+0x38c>)
 8003db4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003db8:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003dba:	4b11      	ldr	r3, [pc, #68]	@ (8003e00 <HAL_ADC_MspInit+0x38c>)
 8003dbc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003dc0:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8003dc2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e00 <HAL_ADC_MspInit+0x38c>)
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e00 <HAL_ADC_MspInit+0x38c>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8003dce:	480c      	ldr	r0, [pc, #48]	@ (8003e00 <HAL_ADC_MspInit+0x38c>)
 8003dd0:	f002 fe66 	bl	8006aa0 <HAL_DMA_Init>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d001      	beq.n	8003dde <HAL_ADC_MspInit+0x36a>
      Error_Handler();
 8003dda:	f7ff fe21 	bl	8003a20 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	4a07      	ldr	r2, [pc, #28]	@ (8003e00 <HAL_ADC_MspInit+0x38c>)
 8003de2:	655a      	str	r2, [r3, #84]	@ 0x54
 8003de4:	4a06      	ldr	r2, [pc, #24]	@ (8003e00 <HAL_ADC_MspInit+0x38c>)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003dea:	bf00      	nop
 8003dec:	3790      	adds	r7, #144	@ 0x90
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	50000600 	.word	0x50000600
 8003df8:	20000bbc 	.word	0x20000bbc
 8003dfc:	40021000 	.word	0x40021000
 8003e00:	2000063c 	.word	0x2000063c
 8003e04:	40020030 	.word	0x40020030

08003e08 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b085      	sub	sp, #20
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a0a      	ldr	r2, [pc, #40]	@ (8003e40 <HAL_CORDIC_MspInit+0x38>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d10b      	bne.n	8003e32 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e44 <HAL_CORDIC_MspInit+0x3c>)
 8003e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e1e:	4a09      	ldr	r2, [pc, #36]	@ (8003e44 <HAL_CORDIC_MspInit+0x3c>)
 8003e20:	f043 0308 	orr.w	r3, r3, #8
 8003e24:	6493      	str	r3, [r2, #72]	@ 0x48
 8003e26:	4b07      	ldr	r3, [pc, #28]	@ (8003e44 <HAL_CORDIC_MspInit+0x3c>)
 8003e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e2a:	f003 0308 	and.w	r3, r3, #8
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	40020c00 	.word	0x40020c00
 8003e44:	40021000 	.word	0x40021000

08003e48 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b08c      	sub	sp, #48	@ 0x30
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e50:	f107 031c 	add.w	r3, r7, #28
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	609a      	str	r2, [r3, #8]
 8003e5c:	60da      	str	r2, [r3, #12]
 8003e5e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a5b      	ldr	r2, [pc, #364]	@ (8003fd4 <HAL_DAC_MspInit+0x18c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d159      	bne.n	8003f1e <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003e6a:	4b5b      	ldr	r3, [pc, #364]	@ (8003fd8 <HAL_DAC_MspInit+0x190>)
 8003e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e6e:	4a5a      	ldr	r2, [pc, #360]	@ (8003fd8 <HAL_DAC_MspInit+0x190>)
 8003e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e76:	4b58      	ldr	r3, [pc, #352]	@ (8003fd8 <HAL_DAC_MspInit+0x190>)
 8003e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e7e:	61bb      	str	r3, [r7, #24]
 8003e80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e82:	4b55      	ldr	r3, [pc, #340]	@ (8003fd8 <HAL_DAC_MspInit+0x190>)
 8003e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e86:	4a54      	ldr	r2, [pc, #336]	@ (8003fd8 <HAL_DAC_MspInit+0x190>)
 8003e88:	f043 0301 	orr.w	r3, r3, #1
 8003e8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e8e:	4b52      	ldr	r3, [pc, #328]	@ (8003fd8 <HAL_DAC_MspInit+0x190>)
 8003e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e92:	f003 0301 	and.w	r3, r3, #1
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = IMAX_Pin|IMAX2_Pin;
 8003e9a:	2330      	movs	r3, #48	@ 0x30
 8003e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ea6:	f107 031c 	add.w	r3, r7, #28
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003eb0:	f003 f868 	bl	8006f84 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 8003eb4:	4b49      	ldr	r3, [pc, #292]	@ (8003fdc <HAL_DAC_MspInit+0x194>)
 8003eb6:	4a4a      	ldr	r2, [pc, #296]	@ (8003fe0 <HAL_DAC_MspInit+0x198>)
 8003eb8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003eba:	4b48      	ldr	r3, [pc, #288]	@ (8003fdc <HAL_DAC_MspInit+0x194>)
 8003ebc:	2206      	movs	r2, #6
 8003ebe:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ec0:	4b46      	ldr	r3, [pc, #280]	@ (8003fdc <HAL_DAC_MspInit+0x194>)
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ec6:	4b45      	ldr	r3, [pc, #276]	@ (8003fdc <HAL_DAC_MspInit+0x194>)
 8003ec8:	2200      	movs	r2, #0
 8003eca:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003ecc:	4b43      	ldr	r3, [pc, #268]	@ (8003fdc <HAL_DAC_MspInit+0x194>)
 8003ece:	2280      	movs	r2, #128	@ 0x80
 8003ed0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ed2:	4b42      	ldr	r3, [pc, #264]	@ (8003fdc <HAL_DAC_MspInit+0x194>)
 8003ed4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ed8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003eda:	4b40      	ldr	r3, [pc, #256]	@ (8003fdc <HAL_DAC_MspInit+0x194>)
 8003edc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ee0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8003fdc <HAL_DAC_MspInit+0x194>)
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003ee8:	4b3c      	ldr	r3, [pc, #240]	@ (8003fdc <HAL_DAC_MspInit+0x194>)
 8003eea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003eee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003ef0:	483a      	ldr	r0, [pc, #232]	@ (8003fdc <HAL_DAC_MspInit+0x194>)
 8003ef2:	f002 fdd5 	bl	8006aa0 <HAL_DMA_Init>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8003efc:	f7ff fd90 	bl	8003a20 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a36      	ldr	r2, [pc, #216]	@ (8003fdc <HAL_DAC_MspInit+0x194>)
 8003f04:	609a      	str	r2, [r3, #8]
 8003f06:	4a35      	ldr	r2, [pc, #212]	@ (8003fdc <HAL_DAC_MspInit+0x194>)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2100      	movs	r1, #0
 8003f10:	2036      	movs	r0, #54	@ 0x36
 8003f12:	f002 fab2 	bl	800647a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003f16:	2036      	movs	r0, #54	@ 0x36
 8003f18:	f002 fac9 	bl	80064ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8003f1c:	e055      	b.n	8003fca <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC2)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a30      	ldr	r2, [pc, #192]	@ (8003fe4 <HAL_DAC_MspInit+0x19c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d150      	bne.n	8003fca <HAL_DAC_MspInit+0x182>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003f28:	4b2b      	ldr	r3, [pc, #172]	@ (8003fd8 <HAL_DAC_MspInit+0x190>)
 8003f2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003fd8 <HAL_DAC_MspInit+0x190>)
 8003f2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f34:	4b28      	ldr	r3, [pc, #160]	@ (8003fd8 <HAL_DAC_MspInit+0x190>)
 8003f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f40:	4b25      	ldr	r3, [pc, #148]	@ (8003fd8 <HAL_DAC_MspInit+0x190>)
 8003f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f44:	4a24      	ldr	r2, [pc, #144]	@ (8003fd8 <HAL_DAC_MspInit+0x190>)
 8003f46:	f043 0301 	orr.w	r3, r3, #1
 8003f4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f4c:	4b22      	ldr	r3, [pc, #136]	@ (8003fd8 <HAL_DAC_MspInit+0x190>)
 8003f4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	60fb      	str	r3, [r7, #12]
 8003f56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMIN_Pin;
 8003f58:	2340      	movs	r3, #64	@ 0x40
 8003f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f60:	2300      	movs	r3, #0
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMIN_GPIO_Port, &GPIO_InitStruct);
 8003f64:	f107 031c 	add.w	r3, r7, #28
 8003f68:	4619      	mov	r1, r3
 8003f6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f6e:	f003 f809 	bl	8006f84 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel5;
 8003f72:	4b1d      	ldr	r3, [pc, #116]	@ (8003fe8 <HAL_DAC_MspInit+0x1a0>)
 8003f74:	4a1d      	ldr	r2, [pc, #116]	@ (8003fec <HAL_DAC_MspInit+0x1a4>)
 8003f76:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8003f78:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe8 <HAL_DAC_MspInit+0x1a0>)
 8003f7a:	2229      	movs	r2, #41	@ 0x29
 8003f7c:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003fe8 <HAL_DAC_MspInit+0x1a0>)
 8003f80:	2210      	movs	r2, #16
 8003f82:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f84:	4b18      	ldr	r3, [pc, #96]	@ (8003fe8 <HAL_DAC_MspInit+0x1a0>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003f8a:	4b17      	ldr	r3, [pc, #92]	@ (8003fe8 <HAL_DAC_MspInit+0x1a0>)
 8003f8c:	2280      	movs	r2, #128	@ 0x80
 8003f8e:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f90:	4b15      	ldr	r3, [pc, #84]	@ (8003fe8 <HAL_DAC_MspInit+0x1a0>)
 8003f92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f96:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f98:	4b13      	ldr	r3, [pc, #76]	@ (8003fe8 <HAL_DAC_MspInit+0x1a0>)
 8003f9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f9e:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8003fa0:	4b11      	ldr	r3, [pc, #68]	@ (8003fe8 <HAL_DAC_MspInit+0x1a0>)
 8003fa2:	2220      	movs	r2, #32
 8003fa4:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003fa6:	4b10      	ldr	r3, [pc, #64]	@ (8003fe8 <HAL_DAC_MspInit+0x1a0>)
 8003fa8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8003fae:	480e      	ldr	r0, [pc, #56]	@ (8003fe8 <HAL_DAC_MspInit+0x1a0>)
 8003fb0:	f002 fd76 	bl	8006aa0 <HAL_DMA_Init>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_DAC_MspInit+0x176>
      Error_Handler();
 8003fba:	f7ff fd31 	bl	8003a20 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a09      	ldr	r2, [pc, #36]	@ (8003fe8 <HAL_DAC_MspInit+0x1a0>)
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	4a08      	ldr	r2, [pc, #32]	@ (8003fe8 <HAL_DAC_MspInit+0x1a0>)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003fca:	bf00      	nop
 8003fcc:	3730      	adds	r7, #48	@ 0x30
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	50000800 	.word	0x50000800
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	200006ec 	.word	0x200006ec
 8003fe0:	40020044 	.word	0x40020044
 8003fe4:	50000c00 	.word	0x50000c00
 8003fe8:	2000074c 	.word	0x2000074c
 8003fec:	40020058 	.word	0x40020058

08003ff0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8004068 <HAL_TIM_PWM_MspInit+0x78>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d114      	bne.n	800402c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004002:	4b1a      	ldr	r3, [pc, #104]	@ (800406c <HAL_TIM_PWM_MspInit+0x7c>)
 8004004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004006:	4a19      	ldr	r2, [pc, #100]	@ (800406c <HAL_TIM_PWM_MspInit+0x7c>)
 8004008:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800400c:	6613      	str	r3, [r2, #96]	@ 0x60
 800400e:	4b17      	ldr	r3, [pc, #92]	@ (800406c <HAL_TIM_PWM_MspInit+0x7c>)
 8004010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004012:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800401a:	2200      	movs	r2, #0
 800401c:	2100      	movs	r1, #0
 800401e:	2018      	movs	r0, #24
 8004020:	f002 fa2b 	bl	800647a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004024:	2018      	movs	r0, #24
 8004026:	f002 fa42 	bl	80064ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800402a:	e018      	b.n	800405e <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM8)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a0f      	ldr	r2, [pc, #60]	@ (8004070 <HAL_TIM_PWM_MspInit+0x80>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d113      	bne.n	800405e <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004036:	4b0d      	ldr	r3, [pc, #52]	@ (800406c <HAL_TIM_PWM_MspInit+0x7c>)
 8004038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800403a:	4a0c      	ldr	r2, [pc, #48]	@ (800406c <HAL_TIM_PWM_MspInit+0x7c>)
 800403c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004040:	6613      	str	r3, [r2, #96]	@ 0x60
 8004042:	4b0a      	ldr	r3, [pc, #40]	@ (800406c <HAL_TIM_PWM_MspInit+0x7c>)
 8004044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004046:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800404a:	60bb      	str	r3, [r7, #8]
 800404c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 800404e:	2200      	movs	r2, #0
 8004050:	2100      	movs	r1, #0
 8004052:	202b      	movs	r0, #43	@ 0x2b
 8004054:	f002 fa11 	bl	800647a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 8004058:	202b      	movs	r0, #43	@ 0x2b
 800405a:	f002 fa28 	bl	80064ae <HAL_NVIC_EnableIRQ>
}
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40021000 	.word	0x40021000
 8004070:	40013400 	.word	0x40013400

08004074 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a35      	ldr	r2, [pc, #212]	@ (8004158 <HAL_TIM_Base_MspInit+0xe4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d10c      	bne.n	80040a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004086:	4b35      	ldr	r3, [pc, #212]	@ (800415c <HAL_TIM_Base_MspInit+0xe8>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408a:	4a34      	ldr	r2, [pc, #208]	@ (800415c <HAL_TIM_Base_MspInit+0xe8>)
 800408c:	f043 0304 	orr.w	r3, r3, #4
 8004090:	6593      	str	r3, [r2, #88]	@ 0x58
 8004092:	4b32      	ldr	r3, [pc, #200]	@ (800415c <HAL_TIM_Base_MspInit+0xe8>)
 8004094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004096:	f003 0304 	and.w	r3, r3, #4
 800409a:	61fb      	str	r3, [r7, #28]
 800409c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800409e:	e056      	b.n	800414e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004160 <HAL_TIM_Base_MspInit+0xec>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d114      	bne.n	80040d4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80040aa:	4b2c      	ldr	r3, [pc, #176]	@ (800415c <HAL_TIM_Base_MspInit+0xe8>)
 80040ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ae:	4a2b      	ldr	r2, [pc, #172]	@ (800415c <HAL_TIM_Base_MspInit+0xe8>)
 80040b0:	f043 0310 	orr.w	r3, r3, #16
 80040b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80040b6:	4b29      	ldr	r3, [pc, #164]	@ (800415c <HAL_TIM_Base_MspInit+0xe8>)
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ba:	f003 0310 	and.w	r3, r3, #16
 80040be:	61bb      	str	r3, [r7, #24]
 80040c0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80040c2:	2200      	movs	r2, #0
 80040c4:	2100      	movs	r1, #0
 80040c6:	2036      	movs	r0, #54	@ 0x36
 80040c8:	f002 f9d7 	bl	800647a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80040cc:	2036      	movs	r0, #54	@ 0x36
 80040ce:	f002 f9ee 	bl	80064ae <HAL_NVIC_EnableIRQ>
}
 80040d2:	e03c      	b.n	800414e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM7)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a22      	ldr	r2, [pc, #136]	@ (8004164 <HAL_TIM_Base_MspInit+0xf0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d10c      	bne.n	80040f8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80040de:	4b1f      	ldr	r3, [pc, #124]	@ (800415c <HAL_TIM_Base_MspInit+0xe8>)
 80040e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e2:	4a1e      	ldr	r2, [pc, #120]	@ (800415c <HAL_TIM_Base_MspInit+0xe8>)
 80040e4:	f043 0320 	orr.w	r3, r3, #32
 80040e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ea:	4b1c      	ldr	r3, [pc, #112]	@ (800415c <HAL_TIM_Base_MspInit+0xe8>)
 80040ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	697b      	ldr	r3, [r7, #20]
}
 80040f6:	e02a      	b.n	800414e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM15)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004168 <HAL_TIM_Base_MspInit+0xf4>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d114      	bne.n	800412c <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004102:	4b16      	ldr	r3, [pc, #88]	@ (800415c <HAL_TIM_Base_MspInit+0xe8>)
 8004104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004106:	4a15      	ldr	r2, [pc, #84]	@ (800415c <HAL_TIM_Base_MspInit+0xe8>)
 8004108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800410c:	6613      	str	r3, [r2, #96]	@ 0x60
 800410e:	4b13      	ldr	r3, [pc, #76]	@ (800415c <HAL_TIM_Base_MspInit+0xe8>)
 8004110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800411a:	2200      	movs	r2, #0
 800411c:	2100      	movs	r1, #0
 800411e:	2018      	movs	r0, #24
 8004120:	f002 f9ab 	bl	800647a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004124:	2018      	movs	r0, #24
 8004126:	f002 f9c2 	bl	80064ae <HAL_NVIC_EnableIRQ>
}
 800412a:	e010      	b.n	800414e <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM16)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a0e      	ldr	r2, [pc, #56]	@ (800416c <HAL_TIM_Base_MspInit+0xf8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d10b      	bne.n	800414e <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004136:	4b09      	ldr	r3, [pc, #36]	@ (800415c <HAL_TIM_Base_MspInit+0xe8>)
 8004138:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800413a:	4a08      	ldr	r2, [pc, #32]	@ (800415c <HAL_TIM_Base_MspInit+0xe8>)
 800413c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004140:	6613      	str	r3, [r2, #96]	@ 0x60
 8004142:	4b06      	ldr	r3, [pc, #24]	@ (800415c <HAL_TIM_Base_MspInit+0xe8>)
 8004144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]
}
 800414e:	bf00      	nop
 8004150:	3720      	adds	r7, #32
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	40000800 	.word	0x40000800
 800415c:	40021000 	.word	0x40021000
 8004160:	40001000 	.word	0x40001000
 8004164:	40001400 	.word	0x40001400
 8004168:	40014000 	.word	0x40014000
 800416c:	40014400 	.word	0x40014400

08004170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	@ 0x28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004178:	f107 0314 	add.w	r3, r7, #20
 800417c:	2200      	movs	r2, #0
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	605a      	str	r2, [r3, #4]
 8004182:	609a      	str	r2, [r3, #8]
 8004184:	60da      	str	r2, [r3, #12]
 8004186:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a33      	ldr	r2, [pc, #204]	@ (800425c <HAL_TIM_MspPostInit+0xec>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d11c      	bne.n	80041cc <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004192:	4b33      	ldr	r3, [pc, #204]	@ (8004260 <HAL_TIM_MspPostInit+0xf0>)
 8004194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004196:	4a32      	ldr	r2, [pc, #200]	@ (8004260 <HAL_TIM_MspPostInit+0xf0>)
 8004198:	f043 0304 	orr.w	r3, r3, #4
 800419c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800419e:	4b30      	ldr	r3, [pc, #192]	@ (8004260 <HAL_TIM_MspPostInit+0xf0>)
 80041a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DEADTIME_TR_Pin;
 80041aa:	2301      	movs	r3, #1
 80041ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041ae:	2302      	movs	r3, #2
 80041b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041b6:	2302      	movs	r3, #2
 80041b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80041ba:	2302      	movs	r3, #2
 80041bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_TR_GPIO_Port, &GPIO_InitStruct);
 80041be:	f107 0314 	add.w	r3, r7, #20
 80041c2:	4619      	mov	r1, r3
 80041c4:	4827      	ldr	r0, [pc, #156]	@ (8004264 <HAL_TIM_MspPostInit+0xf4>)
 80041c6:	f002 fedd 	bl	8006f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80041ca:	e043      	b.n	8004254 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a25      	ldr	r2, [pc, #148]	@ (8004268 <HAL_TIM_MspPostInit+0xf8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d11d      	bne.n	8004212 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80041d6:	4b22      	ldr	r3, [pc, #136]	@ (8004260 <HAL_TIM_MspPostInit+0xf0>)
 80041d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041da:	4a21      	ldr	r2, [pc, #132]	@ (8004260 <HAL_TIM_MspPostInit+0xf0>)
 80041dc:	f043 0308 	orr.w	r3, r3, #8
 80041e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80041e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004260 <HAL_TIM_MspPostInit+0xf0>)
 80041e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 80041ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f4:	2302      	movs	r3, #2
 80041f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f8:	2300      	movs	r3, #0
 80041fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041fc:	2300      	movs	r3, #0
 80041fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004200:	2302      	movs	r3, #2
 8004202:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 8004204:	f107 0314 	add.w	r3, r7, #20
 8004208:	4619      	mov	r1, r3
 800420a:	4818      	ldr	r0, [pc, #96]	@ (800426c <HAL_TIM_MspPostInit+0xfc>)
 800420c:	f002 feba 	bl	8006f84 <HAL_GPIO_Init>
}
 8004210:	e020      	b.n	8004254 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a16      	ldr	r2, [pc, #88]	@ (8004270 <HAL_TIM_MspPostInit+0x100>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d11b      	bne.n	8004254 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800421c:	4b10      	ldr	r3, [pc, #64]	@ (8004260 <HAL_TIM_MspPostInit+0xf0>)
 800421e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004220:	4a0f      	ldr	r2, [pc, #60]	@ (8004260 <HAL_TIM_MspPostInit+0xf0>)
 8004222:	f043 0304 	orr.w	r3, r3, #4
 8004226:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004228:	4b0d      	ldr	r3, [pc, #52]	@ (8004260 <HAL_TIM_MspPostInit+0xf0>)
 800422a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEADTIME_HC_Pin;
 8004234:	2380      	movs	r3, #128	@ 0x80
 8004236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004238:	2302      	movs	r3, #2
 800423a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423c:	2300      	movs	r3, #0
 800423e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004240:	2302      	movs	r3, #2
 8004242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8004244:	2304      	movs	r3, #4
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_HC_GPIO_Port, &GPIO_InitStruct);
 8004248:	f107 0314 	add.w	r3, r7, #20
 800424c:	4619      	mov	r1, r3
 800424e:	4805      	ldr	r0, [pc, #20]	@ (8004264 <HAL_TIM_MspPostInit+0xf4>)
 8004250:	f002 fe98 	bl	8006f84 <HAL_GPIO_Init>
}
 8004254:	bf00      	nop
 8004256:	3728      	adds	r7, #40	@ 0x28
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40012c00 	.word	0x40012c00
 8004260:	40021000 	.word	0x40021000
 8004264:	48000800 	.word	0x48000800
 8004268:	40000800 	.word	0x40000800
 800426c:	48000c00 	.word	0x48000c00
 8004270:	40013400 	.word	0x40013400

08004274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b09e      	sub	sp, #120	@ 0x78
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800427c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	605a      	str	r2, [r3, #4]
 8004286:	609a      	str	r2, [r3, #8]
 8004288:	60da      	str	r2, [r3, #12]
 800428a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800428c:	f107 0310 	add.w	r3, r7, #16
 8004290:	2254      	movs	r2, #84	@ 0x54
 8004292:	2100      	movs	r1, #0
 8004294:	4618      	mov	r0, r3
 8004296:	f00d fdd6 	bl	8011e46 <memset>
  if(huart->Instance==UART4)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1f      	ldr	r2, [pc, #124]	@ (800431c <HAL_UART_MspInit+0xa8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d136      	bne.n	8004312 <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80042a4:	2308      	movs	r3, #8
 80042a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_HSI;
 80042a8:	2380      	movs	r3, #128	@ 0x80
 80042aa:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80042ac:	f107 0310 	add.w	r3, r7, #16
 80042b0:	4618      	mov	r0, r3
 80042b2:	f005 fb4b 	bl	800994c <HAL_RCCEx_PeriphCLKConfig>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80042bc:	f7ff fbb0 	bl	8003a20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80042c0:	4b17      	ldr	r3, [pc, #92]	@ (8004320 <HAL_UART_MspInit+0xac>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042c4:	4a16      	ldr	r2, [pc, #88]	@ (8004320 <HAL_UART_MspInit+0xac>)
 80042c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80042ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80042cc:	4b14      	ldr	r3, [pc, #80]	@ (8004320 <HAL_UART_MspInit+0xac>)
 80042ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042d4:	60fb      	str	r3, [r7, #12]
 80042d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80042d8:	4b11      	ldr	r3, [pc, #68]	@ (8004320 <HAL_UART_MspInit+0xac>)
 80042da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042dc:	4a10      	ldr	r2, [pc, #64]	@ (8004320 <HAL_UART_MspInit+0xac>)
 80042de:	f043 0304 	orr.w	r3, r3, #4
 80042e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004320 <HAL_UART_MspInit+0xac>)
 80042e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	60bb      	str	r3, [r7, #8]
 80042ee:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80042f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80042f4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f6:	2302      	movs	r3, #2
 80042f8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fe:	2300      	movs	r3, #0
 8004300:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8004302:	2305      	movs	r3, #5
 8004304:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004306:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800430a:	4619      	mov	r1, r3
 800430c:	4805      	ldr	r0, [pc, #20]	@ (8004324 <HAL_UART_MspInit+0xb0>)
 800430e:	f002 fe39 	bl	8006f84 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8004312:	bf00      	nop
 8004314:	3778      	adds	r7, #120	@ 0x78
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40004c00 	.word	0x40004c00
 8004320:	40021000 	.word	0x40021000
 8004324:	48000800 	.word	0x48000800

08004328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800432c:	bf00      	nop
 800432e:	e7fd      	b.n	800432c <NMI_Handler+0x4>

08004330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004334:	bf00      	nop
 8004336:	e7fd      	b.n	8004334 <HardFault_Handler+0x4>

08004338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004338:	b480      	push	{r7}
 800433a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800433c:	bf00      	nop
 800433e:	e7fd      	b.n	800433c <MemManage_Handler+0x4>

08004340 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004344:	bf00      	nop
 8004346:	e7fd      	b.n	8004344 <BusFault_Handler+0x4>

08004348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800434c:	bf00      	nop
 800434e:	e7fd      	b.n	800434c <UsageFault_Handler+0x4>

08004350 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004350:	b480      	push	{r7}
 8004352:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004354:	bf00      	nop
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800435e:	b480      	push	{r7}
 8004360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004370:	bf00      	nop
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800437e:	f000 f9b9 	bl	80046f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004382:	bf00      	nop
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800438c:	4802      	ldr	r0, [pc, #8]	@ (8004398 <DMA1_Channel1_IRQHandler+0x10>)
 800438e:	f002 fcaa 	bl	8006ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004392:	bf00      	nop
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	2000057c 	.word	0x2000057c

0800439c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80043a0:	4802      	ldr	r0, [pc, #8]	@ (80043ac <DMA1_Channel2_IRQHandler+0x10>)
 80043a2:	f002 fca0 	bl	8006ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80043a6:	bf00      	nop
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	200005dc 	.word	0x200005dc

080043b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 80043b4:	4802      	ldr	r0, [pc, #8]	@ (80043c0 <DMA1_Channel3_IRQHandler+0x10>)
 80043b6:	f002 fc96 	bl	8006ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	2000063c 	.word	0x2000063c

080043c4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80043c8:	4802      	ldr	r0, [pc, #8]	@ (80043d4 <DMA1_Channel4_IRQHandler+0x10>)
 80043ca:	f002 fc8c 	bl	8006ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80043ce:	bf00      	nop
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	bf00      	nop
 80043d4:	200006ec 	.word	0x200006ec

080043d8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80043dc:	4802      	ldr	r0, [pc, #8]	@ (80043e8 <DMA1_Channel5_IRQHandler+0x10>)
 80043de:	f002 fc82 	bl	8006ce6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	2000074c 	.word	0x2000074c

080043ec <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80043f0:	4802      	ldr	r0, [pc, #8]	@ (80043fc <USB_LP_IRQHandler+0x10>)
 80043f2:	f003 f883 	bl	80074fc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80043f6:	bf00      	nop
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	2000209c 	.word	0x2000209c

08004400 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004404:	4803      	ldr	r0, [pc, #12]	@ (8004414 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8004406:	f006 f863 	bl	800a4d0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 800440a:	4803      	ldr	r0, [pc, #12]	@ (8004418 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 800440c:	f006 f860 	bl	800a4d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8004410:	bf00      	nop
 8004412:	bd80      	pop	{r7, pc}
 8004414:	200007ac 	.word	0x200007ac
 8004418:	20000928 	.word	0x20000928

0800441c <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004420:	4802      	ldr	r0, [pc, #8]	@ (800442c <TIM8_BRK_IRQHandler+0x10>)
 8004422:	f006 f855 	bl	800a4d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 8004426:	bf00      	nop
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	200008dc 	.word	0x200008dc

08004430 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	af00      	add	r7, sp, #0
					HEAT_SINK_TEMP = (ADC3_DMA_BUFFER[4]/4096)*3.3;//(Low_pass_filter(ADC3_DMA_BUFFER[4], HEAT_SINK_TEMP)/4096)*3.3;
					FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
					}*/

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004434:	4803      	ldr	r0, [pc, #12]	@ (8004444 <TIM6_DAC_IRQHandler+0x14>)
 8004436:	f006 f84b 	bl	800a4d0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800443a:	4803      	ldr	r0, [pc, #12]	@ (8004448 <TIM6_DAC_IRQHandler+0x18>)
 800443c:	f002 f8e0 	bl	8006600 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004440:	bf00      	nop
 8004442:	bd80      	pop	{r7, pc}
 8004444:	20000844 	.word	0x20000844
 8004448:	200006c4 	.word	0x200006c4

0800444c <_getpid>:
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
 8004450:	2301      	movs	r3, #1
 8004452:	4618      	mov	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <_kill>:
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
 8004466:	f00d fd53 	bl	8011f10 <__errno>
 800446a:	4603      	mov	r3, r0
 800446c:	2216      	movs	r2, #22
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	f04f 33ff 	mov.w	r3, #4294967295
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <_exit>:
 800447c:	b580      	push	{r7, lr}
 800447e:	b082      	sub	sp, #8
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	f04f 31ff 	mov.w	r1, #4294967295
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff ffe7 	bl	800445c <_kill>
 800448e:	bf00      	nop
 8004490:	e7fd      	b.n	800448e <_exit+0x12>

08004492 <_read>:
 8004492:	b580      	push	{r7, lr}
 8004494:	b086      	sub	sp, #24
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
 80044a2:	e00a      	b.n	80044ba <_read+0x28>
 80044a4:	f3af 8000 	nop.w
 80044a8:	4601      	mov	r1, r0
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	60ba      	str	r2, [r7, #8]
 80044b0:	b2ca      	uxtb	r2, r1
 80044b2:	701a      	strb	r2, [r3, #0]
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	3301      	adds	r3, #1
 80044b8:	617b      	str	r3, [r7, #20]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	429a      	cmp	r2, r3
 80044c0:	dbf0      	blt.n	80044a4 <_read+0x12>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <_write>:
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	e009      	b.n	80044f2 <_write+0x26>
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	1c5a      	adds	r2, r3, #1
 80044e2:	60ba      	str	r2, [r7, #8]
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f3af 8000 	nop.w
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	3301      	adds	r3, #1
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	dbf1      	blt.n	80044de <_write+0x12>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <_close>:
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	f04f 33ff 	mov.w	r3, #4294967295
 8004510:	4618      	mov	r0, r3
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <_fstat>:
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	2300      	movs	r3, #0
 8004530:	4618      	mov	r0, r3
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <_isatty>:
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	2301      	movs	r3, #1
 8004546:	4618      	mov	r0, r3
 8004548:	370c      	adds	r7, #12
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <_lseek>:
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	607a      	str	r2, [r7, #4]
 800455e:	2300      	movs	r3, #0
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <_sbrk>:
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	4a14      	ldr	r2, [pc, #80]	@ (80045c8 <_sbrk+0x5c>)
 8004576:	4b15      	ldr	r3, [pc, #84]	@ (80045cc <_sbrk+0x60>)
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	4b13      	ldr	r3, [pc, #76]	@ (80045d0 <_sbrk+0x64>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d102      	bne.n	800458e <_sbrk+0x22>
 8004588:	4b11      	ldr	r3, [pc, #68]	@ (80045d0 <_sbrk+0x64>)
 800458a:	4a12      	ldr	r2, [pc, #72]	@ (80045d4 <_sbrk+0x68>)
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	4b10      	ldr	r3, [pc, #64]	@ (80045d0 <_sbrk+0x64>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4413      	add	r3, r2
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	429a      	cmp	r2, r3
 800459a:	d207      	bcs.n	80045ac <_sbrk+0x40>
 800459c:	f00d fcb8 	bl	8011f10 <__errno>
 80045a0:	4603      	mov	r3, r0
 80045a2:	220c      	movs	r2, #12
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295
 80045aa:	e009      	b.n	80045c0 <_sbrk+0x54>
 80045ac:	4b08      	ldr	r3, [pc, #32]	@ (80045d0 <_sbrk+0x64>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	4b07      	ldr	r3, [pc, #28]	@ (80045d0 <_sbrk+0x64>)
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4413      	add	r3, r2
 80045ba:	4a05      	ldr	r2, [pc, #20]	@ (80045d0 <_sbrk+0x64>)
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	20020000 	.word	0x20020000
 80045cc:	00000400 	.word	0x00000400
 80045d0:	20000bc0 	.word	0x20000bc0
 80045d4:	200026e8 	.word	0x200026e8

080045d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80045dc:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <SystemInit+0x20>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e2:	4a05      	ldr	r2, [pc, #20]	@ (80045f8 <SystemInit+0x20>)
 80045e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80045ec:	bf00      	nop
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	e000ed00 	.word	0xe000ed00

080045fc <Reset_Handler>:
 80045fc:	480d      	ldr	r0, [pc, #52]	@ (8004634 <LoopForever+0x2>)
 80045fe:	4685      	mov	sp, r0
 8004600:	f7ff ffea 	bl	80045d8 <SystemInit>
 8004604:	480c      	ldr	r0, [pc, #48]	@ (8004638 <LoopForever+0x6>)
 8004606:	490d      	ldr	r1, [pc, #52]	@ (800463c <LoopForever+0xa>)
 8004608:	4a0d      	ldr	r2, [pc, #52]	@ (8004640 <LoopForever+0xe>)
 800460a:	2300      	movs	r3, #0
 800460c:	e002      	b.n	8004614 <LoopCopyDataInit>

0800460e <CopyDataInit>:
 800460e:	58d4      	ldr	r4, [r2, r3]
 8004610:	50c4      	str	r4, [r0, r3]
 8004612:	3304      	adds	r3, #4

08004614 <LoopCopyDataInit>:
 8004614:	18c4      	adds	r4, r0, r3
 8004616:	428c      	cmp	r4, r1
 8004618:	d3f9      	bcc.n	800460e <CopyDataInit>
 800461a:	4a0a      	ldr	r2, [pc, #40]	@ (8004644 <LoopForever+0x12>)
 800461c:	4c0a      	ldr	r4, [pc, #40]	@ (8004648 <LoopForever+0x16>)
 800461e:	2300      	movs	r3, #0
 8004620:	e001      	b.n	8004626 <LoopFillZerobss>

08004622 <FillZerobss>:
 8004622:	6013      	str	r3, [r2, #0]
 8004624:	3204      	adds	r2, #4

08004626 <LoopFillZerobss>:
 8004626:	42a2      	cmp	r2, r4
 8004628:	d3fb      	bcc.n	8004622 <FillZerobss>
 800462a:	f00d fc77 	bl	8011f1c <__libc_init_array>
 800462e:	f7fc fd03 	bl	8001038 <main>

08004632 <LoopForever>:
 8004632:	e7fe      	b.n	8004632 <LoopForever>
 8004634:	20020000 	.word	0x20020000
 8004638:	20000000 	.word	0x20000000
 800463c:	200003b0 	.word	0x200003b0
 8004640:	08017550 	.word	0x08017550
 8004644:	200003b0 	.word	0x200003b0
 8004648:	200026e4 	.word	0x200026e4

0800464c <ADC1_2_IRQHandler>:
 800464c:	e7fe      	b.n	800464c <ADC1_2_IRQHandler>

0800464e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004654:	2300      	movs	r3, #0
 8004656:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004658:	2003      	movs	r0, #3
 800465a:	f001 ff03 	bl	8006464 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800465e:	2000      	movs	r0, #0
 8004660:	f000 f80e 	bl	8004680 <HAL_InitTick>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	71fb      	strb	r3, [r7, #7]
 800466e:	e001      	b.n	8004674 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004670:	f7ff f9dc 	bl	8003a2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004674:	79fb      	ldrb	r3, [r7, #7]

}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004688:	2300      	movs	r3, #0
 800468a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800468c:	4b16      	ldr	r3, [pc, #88]	@ (80046e8 <HAL_InitTick+0x68>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d022      	beq.n	80046da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004694:	4b15      	ldr	r3, [pc, #84]	@ (80046ec <HAL_InitTick+0x6c>)
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	4b13      	ldr	r3, [pc, #76]	@ (80046e8 <HAL_InitTick+0x68>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80046a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 ff0e 	bl	80064ca <HAL_SYSTICK_Config>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10f      	bne.n	80046d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b0f      	cmp	r3, #15
 80046b8:	d809      	bhi.n	80046ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80046ba:	2200      	movs	r2, #0
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	f04f 30ff 	mov.w	r0, #4294967295
 80046c2:	f001 feda 	bl	800647a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046c6:	4a0a      	ldr	r2, [pc, #40]	@ (80046f0 <HAL_InitTick+0x70>)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	e007      	b.n	80046de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	73fb      	strb	r3, [r7, #15]
 80046d2:	e004      	b.n	80046de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
 80046d8:	e001      	b.n	80046de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80046de:	7bfb      	ldrb	r3, [r7, #15]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	2000005c 	.word	0x2000005c
 80046ec:	20000054 	.word	0x20000054
 80046f0:	20000058 	.word	0x20000058

080046f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046f8:	4b05      	ldr	r3, [pc, #20]	@ (8004710 <HAL_IncTick+0x1c>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <HAL_IncTick+0x20>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4413      	add	r3, r2
 8004702:	4a03      	ldr	r2, [pc, #12]	@ (8004710 <HAL_IncTick+0x1c>)
 8004704:	6013      	str	r3, [r2, #0]
}
 8004706:	bf00      	nop
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	20000bc4 	.word	0x20000bc4
 8004714:	2000005c 	.word	0x2000005c

08004718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return uwTick;
 800471c:	4b03      	ldr	r3, [pc, #12]	@ (800472c <HAL_GetTick+0x14>)
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000bc4 	.word	0x20000bc4

08004730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004738:	f7ff ffee 	bl	8004718 <HAL_GetTick>
 800473c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d004      	beq.n	8004754 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800474a:	4b09      	ldr	r3, [pc, #36]	@ (8004770 <HAL_Delay+0x40>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4413      	add	r3, r2
 8004752:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004754:	bf00      	nop
 8004756:	f7ff ffdf 	bl	8004718 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	429a      	cmp	r2, r3
 8004764:	d8f7      	bhi.n	8004756 <HAL_Delay+0x26>
  {
  }
}
 8004766:	bf00      	nop
 8004768:	bf00      	nop
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}
 8004770:	2000005c 	.word	0x2000005c

08004774 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	609a      	str	r2, [r3, #8]
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	609a      	str	r2, [r3, #8]
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80047dc:	b480      	push	{r7}
 80047de:	b087      	sub	sp, #28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
 80047e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3360      	adds	r3, #96	@ 0x60
 80047ee:	461a      	mov	r2, r3
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4413      	add	r3, r2
 80047f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	4b08      	ldr	r3, [pc, #32]	@ (8004820 <LL_ADC_SetOffset+0x44>)
 80047fe:	4013      	ands	r3, r2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004806:	683a      	ldr	r2, [r7, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	4313      	orrs	r3, r2
 800480c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004814:	bf00      	nop
 8004816:	371c      	adds	r7, #28
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	03fff000 	.word	0x03fff000

08004824 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3360      	adds	r3, #96	@ 0x60
 8004832:	461a      	mov	r2, r3
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3360      	adds	r3, #96	@ 0x60
 8004860:	461a      	mov	r2, r3
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	431a      	orrs	r2, r3
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800487a:	bf00      	nop
 800487c:	371c      	adds	r7, #28
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004886:	b480      	push	{r7}
 8004888:	b087      	sub	sp, #28
 800488a:	af00      	add	r7, sp, #0
 800488c:	60f8      	str	r0, [r7, #12]
 800488e:	60b9      	str	r1, [r7, #8]
 8004890:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3360      	adds	r3, #96	@ 0x60
 8004896:	461a      	mov	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	4413      	add	r3, r2
 800489e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	431a      	orrs	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80048b0:	bf00      	nop
 80048b2:	371c      	adds	r7, #28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	3360      	adds	r3, #96	@ 0x60
 80048cc:	461a      	mov	r2, r3
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	431a      	orrs	r2, r3
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80048e6:	bf00      	nop
 80048e8:	371c      	adds	r7, #28
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80048f2:	b480      	push	{r7}
 80048f4:	b083      	sub	sp, #12
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
 80048fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	615a      	str	r2, [r3, #20]
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800493e:	b480      	push	{r7}
 8004940:	b087      	sub	sp, #28
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3330      	adds	r3, #48	@ 0x30
 800494e:	461a      	mov	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	0a1b      	lsrs	r3, r3, #8
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	4413      	add	r3, r2
 800495c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	f003 031f 	and.w	r3, r3, #31
 8004968:	211f      	movs	r1, #31
 800496a:	fa01 f303 	lsl.w	r3, r1, r3
 800496e:	43db      	mvns	r3, r3
 8004970:	401a      	ands	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0e9b      	lsrs	r3, r3, #26
 8004976:	f003 011f 	and.w	r1, r3, #31
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	f003 031f 	and.w	r3, r3, #31
 8004980:	fa01 f303 	lsl.w	r3, r1, r3
 8004984:	431a      	orrs	r2, r3
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004996:	b480      	push	{r7}
 8004998:	b087      	sub	sp, #28
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3314      	adds	r3, #20
 80049a6:	461a      	mov	r2, r3
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	0e5b      	lsrs	r3, r3, #25
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	f003 0304 	and.w	r3, r3, #4
 80049b2:	4413      	add	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	0d1b      	lsrs	r3, r3, #20
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	2107      	movs	r1, #7
 80049c4:	fa01 f303 	lsl.w	r3, r1, r3
 80049c8:	43db      	mvns	r3, r3
 80049ca:	401a      	ands	r2, r3
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	0d1b      	lsrs	r3, r3, #20
 80049d0:	f003 031f 	and.w	r3, r3, #31
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	fa01 f303 	lsl.w	r3, r1, r3
 80049da:	431a      	orrs	r2, r3
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80049e0:	bf00      	nop
 80049e2:	371c      	adds	r7, #28
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a04:	43db      	mvns	r3, r3
 8004a06:	401a      	ands	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f003 0318 	and.w	r3, r3, #24
 8004a0e:	4908      	ldr	r1, [pc, #32]	@ (8004a30 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004a10:	40d9      	lsrs	r1, r3
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	400b      	ands	r3, r1
 8004a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004a22:	bf00      	nop
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	0007ffff 	.word	0x0007ffff

08004a34 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f003 031f 	and.w	r3, r3, #31
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004a60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6093      	str	r3, [r2, #8]
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a88:	d101      	bne.n	8004a8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004aac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ab0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ad4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ad8:	d101      	bne.n	8004ade <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004afc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b00:	f043 0201 	orr.w	r2, r3, #1
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b24:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b28:	f043 0202 	orr.w	r2, r3, #2
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <LL_ADC_IsEnabled+0x18>
 8004b50:	2301      	movs	r3, #1
 8004b52:	e000      	b.n	8004b56 <LL_ADC_IsEnabled+0x1a>
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	370c      	adds	r7, #12
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr

08004b62 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004b62:	b480      	push	{r7}
 8004b64:	b083      	sub	sp, #12
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0302 	and.w	r3, r3, #2
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d101      	bne.n	8004b7a <LL_ADC_IsDisableOngoing+0x18>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <LL_ADC_IsDisableOngoing+0x1a>
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004b98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b9c:	f043 0204 	orr.w	r2, r3, #4
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d101      	bne.n	8004bc8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b083      	sub	sp, #12
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d101      	bne.n	8004bee <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004bfc:	b590      	push	{r4, r7, lr}
 8004bfe:	b089      	sub	sp, #36	@ 0x24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d101      	bne.n	8004c16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e1a9      	b.n	8004f6a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d109      	bne.n	8004c38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7fe ff25 	bl	8003a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7ff ff19 	bl	8004a74 <LL_ADC_IsDeepPowerDownEnabled>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d004      	beq.n	8004c52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7ff feff 	bl	8004a50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff ff34 	bl	8004ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d115      	bne.n	8004c8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff ff18 	bl	8004a9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c6c:	4b9c      	ldr	r3, [pc, #624]	@ (8004ee0 <HAL_ADC_Init+0x2e4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	099b      	lsrs	r3, r3, #6
 8004c72:	4a9c      	ldr	r2, [pc, #624]	@ (8004ee4 <HAL_ADC_Init+0x2e8>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	099b      	lsrs	r3, r3, #6
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	005b      	lsls	r3, r3, #1
 8004c7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004c80:	e002      	b.n	8004c88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f9      	bne.n	8004c82 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7ff ff16 	bl	8004ac4 <LL_ADC_IsInternalRegulatorEnabled>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d10d      	bne.n	8004cba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca2:	f043 0210 	orr.w	r2, r3, #16
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cae:	f043 0201 	orr.w	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff ff76 	bl	8004bb0 <LL_ADC_REG_IsConversionOngoing>
 8004cc4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cca:	f003 0310 	and.w	r3, r3, #16
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f040 8142 	bne.w	8004f58 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	f040 813e 	bne.w	8004f58 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ce0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004ce4:	f043 0202 	orr.w	r2, r3, #2
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7ff ff23 	bl	8004b3c <LL_ADC_IsEnabled>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d141      	bne.n	8004d80 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d04:	d004      	beq.n	8004d10 <HAL_ADC_Init+0x114>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a77      	ldr	r2, [pc, #476]	@ (8004ee8 <HAL_ADC_Init+0x2ec>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d10f      	bne.n	8004d30 <HAL_ADC_Init+0x134>
 8004d10:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004d14:	f7ff ff12 	bl	8004b3c <LL_ADC_IsEnabled>
 8004d18:	4604      	mov	r4, r0
 8004d1a:	4873      	ldr	r0, [pc, #460]	@ (8004ee8 <HAL_ADC_Init+0x2ec>)
 8004d1c:	f7ff ff0e 	bl	8004b3c <LL_ADC_IsEnabled>
 8004d20:	4603      	mov	r3, r0
 8004d22:	4323      	orrs	r3, r4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	bf0c      	ite	eq
 8004d28:	2301      	moveq	r3, #1
 8004d2a:	2300      	movne	r3, #0
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	e012      	b.n	8004d56 <HAL_ADC_Init+0x15a>
 8004d30:	486e      	ldr	r0, [pc, #440]	@ (8004eec <HAL_ADC_Init+0x2f0>)
 8004d32:	f7ff ff03 	bl	8004b3c <LL_ADC_IsEnabled>
 8004d36:	4604      	mov	r4, r0
 8004d38:	486d      	ldr	r0, [pc, #436]	@ (8004ef0 <HAL_ADC_Init+0x2f4>)
 8004d3a:	f7ff feff 	bl	8004b3c <LL_ADC_IsEnabled>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	431c      	orrs	r4, r3
 8004d42:	486c      	ldr	r0, [pc, #432]	@ (8004ef4 <HAL_ADC_Init+0x2f8>)
 8004d44:	f7ff fefa 	bl	8004b3c <LL_ADC_IsEnabled>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4323      	orrs	r3, r4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d012      	beq.n	8004d80 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d62:	d004      	beq.n	8004d6e <HAL_ADC_Init+0x172>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a5f      	ldr	r2, [pc, #380]	@ (8004ee8 <HAL_ADC_Init+0x2ec>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d101      	bne.n	8004d72 <HAL_ADC_Init+0x176>
 8004d6e:	4a62      	ldr	r2, [pc, #392]	@ (8004ef8 <HAL_ADC_Init+0x2fc>)
 8004d70:	e000      	b.n	8004d74 <HAL_ADC_Init+0x178>
 8004d72:	4a62      	ldr	r2, [pc, #392]	@ (8004efc <HAL_ADC_Init+0x300>)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4610      	mov	r0, r2
 8004d7c:	f7ff fcfa 	bl	8004774 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	7f5b      	ldrb	r3, [r3, #29]
 8004d84:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004d8a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004d90:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004d96:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004d9e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004da0:	4313      	orrs	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d106      	bne.n	8004dbc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db2:	3b01      	subs	r3, #1
 8004db4:	045b      	lsls	r3, r3, #17
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d009      	beq.n	8004dd8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	4b48      	ldr	r3, [pc, #288]	@ (8004f00 <HAL_ADC_Init+0x304>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	6812      	ldr	r2, [r2, #0]
 8004de6:	69b9      	ldr	r1, [r7, #24]
 8004de8:	430b      	orrs	r3, r1
 8004dea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fee5 	bl	8004bd6 <LL_ADC_INJ_IsConversionOngoing>
 8004e0c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d17f      	bne.n	8004f14 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d17c      	bne.n	8004f14 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004e1e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e26:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e36:	f023 0302 	bic.w	r3, r3, #2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	69b9      	ldr	r1, [r7, #24]
 8004e40:	430b      	orrs	r3, r1
 8004e42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d017      	beq.n	8004e7c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004e5a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e64:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004e68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6911      	ldr	r1, [r2, #16]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6812      	ldr	r2, [r2, #0]
 8004e74:	430b      	orrs	r3, r1
 8004e76:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004e7a:	e013      	b.n	8004ea4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004e8a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004e9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ea0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d12a      	bne.n	8004f04 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004eb8:	f023 0304 	bic.w	r3, r3, #4
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ec4:	4311      	orrs	r1, r2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004eca:	4311      	orrs	r1, r2
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f042 0201 	orr.w	r2, r2, #1
 8004edc:	611a      	str	r2, [r3, #16]
 8004ede:	e019      	b.n	8004f14 <HAL_ADC_Init+0x318>
 8004ee0:	20000054 	.word	0x20000054
 8004ee4:	053e2d63 	.word	0x053e2d63
 8004ee8:	50000100 	.word	0x50000100
 8004eec:	50000400 	.word	0x50000400
 8004ef0:	50000500 	.word	0x50000500
 8004ef4:	50000600 	.word	0x50000600
 8004ef8:	50000300 	.word	0x50000300
 8004efc:	50000700 	.word	0x50000700
 8004f00:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 0201 	bic.w	r2, r2, #1
 8004f12:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d10c      	bne.n	8004f36 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f22:	f023 010f 	bic.w	r1, r3, #15
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	1e5a      	subs	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	430a      	orrs	r2, r1
 8004f32:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f34:	e007      	b.n	8004f46 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 020f 	bic.w	r2, r2, #15
 8004f44:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f4a:	f023 0303 	bic.w	r3, r3, #3
 8004f4e:	f043 0201 	orr.w	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004f56:	e007      	b.n	8004f68 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5c:	f043 0210 	orr.w	r2, r3, #16
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004f68:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3724      	adds	r7, #36	@ 0x24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd90      	pop	{r4, r7, pc}
 8004f72:	bf00      	nop

08004f74 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b086      	sub	sp, #24
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f88:	d004      	beq.n	8004f94 <HAL_ADC_Start_DMA+0x20>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a5a      	ldr	r2, [pc, #360]	@ (80050f8 <HAL_ADC_Start_DMA+0x184>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d101      	bne.n	8004f98 <HAL_ADC_Start_DMA+0x24>
 8004f94:	4b59      	ldr	r3, [pc, #356]	@ (80050fc <HAL_ADC_Start_DMA+0x188>)
 8004f96:	e000      	b.n	8004f9a <HAL_ADC_Start_DMA+0x26>
 8004f98:	4b59      	ldr	r3, [pc, #356]	@ (8005100 <HAL_ADC_Start_DMA+0x18c>)
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff fd4a 	bl	8004a34 <LL_ADC_GetMultimode>
 8004fa0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff fe02 	bl	8004bb0 <LL_ADC_REG_IsConversionOngoing>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f040 809b 	bne.w	80050ea <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_ADC_Start_DMA+0x4e>
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	e096      	b.n	80050f0 <HAL_ADC_Start_DMA+0x17c>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a4d      	ldr	r2, [pc, #308]	@ (8005104 <HAL_ADC_Start_DMA+0x190>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d008      	beq.n	8004fe6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	2b05      	cmp	r3, #5
 8004fde:	d002      	beq.n	8004fe6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	2b09      	cmp	r3, #9
 8004fe4:	d17a      	bne.n	80050dc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004fe6:	68f8      	ldr	r0, [r7, #12]
 8004fe8:	f000 fcec 	bl	80059c4 <ADC_Enable>
 8004fec:	4603      	mov	r3, r0
 8004fee:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d16d      	bne.n	80050d2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ffa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004ffe:	f023 0301 	bic.w	r3, r3, #1
 8005002:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a3a      	ldr	r2, [pc, #232]	@ (80050f8 <HAL_ADC_Start_DMA+0x184>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d009      	beq.n	8005028 <HAL_ADC_Start_DMA+0xb4>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a3b      	ldr	r2, [pc, #236]	@ (8005108 <HAL_ADC_Start_DMA+0x194>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d002      	beq.n	8005024 <HAL_ADC_Start_DMA+0xb0>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	e003      	b.n	800502c <HAL_ADC_Start_DMA+0xb8>
 8005024:	4b39      	ldr	r3, [pc, #228]	@ (800510c <HAL_ADC_Start_DMA+0x198>)
 8005026:	e001      	b.n	800502c <HAL_ADC_Start_DMA+0xb8>
 8005028:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	6812      	ldr	r2, [r2, #0]
 8005030:	4293      	cmp	r3, r2
 8005032:	d002      	beq.n	800503a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d105      	bne.n	8005046 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800503e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800504a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d006      	beq.n	8005060 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005056:	f023 0206 	bic.w	r2, r3, #6
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	661a      	str	r2, [r3, #96]	@ 0x60
 800505e:	e002      	b.n	8005066 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800506a:	4a29      	ldr	r2, [pc, #164]	@ (8005110 <HAL_ADC_Start_DMA+0x19c>)
 800506c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005072:	4a28      	ldr	r2, [pc, #160]	@ (8005114 <HAL_ADC_Start_DMA+0x1a0>)
 8005074:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800507a:	4a27      	ldr	r2, [pc, #156]	@ (8005118 <HAL_ADC_Start_DMA+0x1a4>)
 800507c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	221c      	movs	r2, #28
 8005084:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	685a      	ldr	r2, [r3, #4]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0210 	orr.w	r2, r2, #16
 800509c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0201 	orr.w	r2, r2, #1
 80050ac:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3340      	adds	r3, #64	@ 0x40
 80050b8:	4619      	mov	r1, r3
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f001 fd97 	bl	8006bf0 <HAL_DMA_Start_IT>
 80050c2:	4603      	mov	r3, r0
 80050c4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff fd5c 	bl	8004b88 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80050d0:	e00d      	b.n	80050ee <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80050da:	e008      	b.n	80050ee <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80050e8:	e001      	b.n	80050ee <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80050ea:	2302      	movs	r3, #2
 80050ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80050ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3718      	adds	r7, #24
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	50000100 	.word	0x50000100
 80050fc:	50000300 	.word	0x50000300
 8005100:	50000700 	.word	0x50000700
 8005104:	50000600 	.word	0x50000600
 8005108:	50000500 	.word	0x50000500
 800510c:	50000400 	.word	0x50000400
 8005110:	08005baf 	.word	0x08005baf
 8005114:	08005c87 	.word	0x08005c87
 8005118:	08005ca3 	.word	0x08005ca3

0800511c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr

08005130 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005138:	bf00      	nop
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr

08005144 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b0b6      	sub	sp, #216	@ 0xd8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005154:	2300      	movs	r3, #0
 8005156:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800515e:	2b01      	cmp	r3, #1
 8005160:	d102      	bne.n	8005168 <HAL_ADC_ConfigChannel+0x24>
 8005162:	2302      	movs	r3, #2
 8005164:	f000 bc13 	b.w	800598e <HAL_ADC_ConfigChannel+0x84a>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f7ff fd1b 	bl	8004bb0 <LL_ADC_REG_IsConversionOngoing>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	f040 83f3 	bne.w	8005968 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6859      	ldr	r1, [r3, #4]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	f7ff fbd5 	bl	800493e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4618      	mov	r0, r3
 800519a:	f7ff fd09 	bl	8004bb0 <LL_ADC_REG_IsConversionOngoing>
 800519e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff fd15 	bl	8004bd6 <LL_ADC_INJ_IsConversionOngoing>
 80051ac:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051b0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f040 81d9 	bne.w	800556c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f040 81d4 	bne.w	800556c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051cc:	d10f      	bne.n	80051ee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6818      	ldr	r0, [r3, #0]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2200      	movs	r2, #0
 80051d8:	4619      	mov	r1, r3
 80051da:	f7ff fbdc 	bl	8004996 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff fb83 	bl	80048f2 <LL_ADC_SetSamplingTimeCommonConfig>
 80051ec:	e00e      	b.n	800520c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6818      	ldr	r0, [r3, #0]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	6819      	ldr	r1, [r3, #0]
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	461a      	mov	r2, r3
 80051fc:	f7ff fbcb 	bl	8004996 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f7ff fb73 	bl	80048f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	695a      	ldr	r2, [r3, #20]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	08db      	lsrs	r3, r3, #3
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	005b      	lsls	r3, r3, #1
 800521e:	fa02 f303 	lsl.w	r3, r2, r3
 8005222:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b04      	cmp	r3, #4
 800522c:	d022      	beq.n	8005274 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6919      	ldr	r1, [r3, #16]
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800523e:	f7ff facd 	bl	80047dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6818      	ldr	r0, [r3, #0]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	6919      	ldr	r1, [r3, #16]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	461a      	mov	r2, r3
 8005250:	f7ff fb19 	bl	8004886 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6818      	ldr	r0, [r3, #0]
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005260:	2b01      	cmp	r3, #1
 8005262:	d102      	bne.n	800526a <HAL_ADC_ConfigChannel+0x126>
 8005264:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005268:	e000      	b.n	800526c <HAL_ADC_ConfigChannel+0x128>
 800526a:	2300      	movs	r3, #0
 800526c:	461a      	mov	r2, r3
 800526e:	f7ff fb25 	bl	80048bc <LL_ADC_SetOffsetSaturation>
 8005272:	e17b      	b.n	800556c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	2100      	movs	r1, #0
 800527a:	4618      	mov	r0, r3
 800527c:	f7ff fad2 	bl	8004824 <LL_ADC_GetOffsetChannel>
 8005280:	4603      	mov	r3, r0
 8005282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <HAL_ADC_ConfigChannel+0x15c>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f7ff fac7 	bl	8004824 <LL_ADC_GetOffsetChannel>
 8005296:	4603      	mov	r3, r0
 8005298:	0e9b      	lsrs	r3, r3, #26
 800529a:	f003 021f 	and.w	r2, r3, #31
 800529e:	e01e      	b.n	80052de <HAL_ADC_ConfigChannel+0x19a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2100      	movs	r1, #0
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7ff fabc 	bl	8004824 <LL_ADC_GetOffsetChannel>
 80052ac:	4603      	mov	r3, r0
 80052ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80052b6:	fa93 f3a3 	rbit	r3, r3
 80052ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80052c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80052c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80052ce:	2320      	movs	r3, #32
 80052d0:	e004      	b.n	80052dc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80052d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80052d6:	fab3 f383 	clz	r3, r3
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d105      	bne.n	80052f6 <HAL_ADC_ConfigChannel+0x1b2>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	0e9b      	lsrs	r3, r3, #26
 80052f0:	f003 031f 	and.w	r3, r3, #31
 80052f4:	e018      	b.n	8005328 <HAL_ADC_ConfigChannel+0x1e4>
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005302:	fa93 f3a3 	rbit	r3, r3
 8005306:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800530a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800530e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005312:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800531a:	2320      	movs	r3, #32
 800531c:	e004      	b.n	8005328 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800531e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005322:	fab3 f383 	clz	r3, r3
 8005326:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005328:	429a      	cmp	r2, r3
 800532a:	d106      	bne.n	800533a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2200      	movs	r2, #0
 8005332:	2100      	movs	r1, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f7ff fa8b 	bl	8004850 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2101      	movs	r1, #1
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff fa6f 	bl	8004824 <LL_ADC_GetOffsetChannel>
 8005346:	4603      	mov	r3, r0
 8005348:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10a      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x222>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2101      	movs	r1, #1
 8005356:	4618      	mov	r0, r3
 8005358:	f7ff fa64 	bl	8004824 <LL_ADC_GetOffsetChannel>
 800535c:	4603      	mov	r3, r0
 800535e:	0e9b      	lsrs	r3, r3, #26
 8005360:	f003 021f 	and.w	r2, r3, #31
 8005364:	e01e      	b.n	80053a4 <HAL_ADC_ConfigChannel+0x260>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2101      	movs	r1, #1
 800536c:	4618      	mov	r0, r3
 800536e:	f7ff fa59 	bl	8004824 <LL_ADC_GetOffsetChannel>
 8005372:	4603      	mov	r3, r0
 8005374:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005378:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800537c:	fa93 f3a3 	rbit	r3, r3
 8005380:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005384:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005388:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800538c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005390:	2b00      	cmp	r3, #0
 8005392:	d101      	bne.n	8005398 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005394:	2320      	movs	r3, #32
 8005396:	e004      	b.n	80053a2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005398:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800539c:	fab3 f383 	clz	r3, r3
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d105      	bne.n	80053bc <HAL_ADC_ConfigChannel+0x278>
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	0e9b      	lsrs	r3, r3, #26
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	e018      	b.n	80053ee <HAL_ADC_ConfigChannel+0x2aa>
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053c8:	fa93 f3a3 	rbit	r3, r3
 80053cc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80053d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80053d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80053d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80053e0:	2320      	movs	r3, #32
 80053e2:	e004      	b.n	80053ee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80053e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80053e8:	fab3 f383 	clz	r3, r3
 80053ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80053ee:	429a      	cmp	r2, r3
 80053f0:	d106      	bne.n	8005400 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2200      	movs	r2, #0
 80053f8:	2101      	movs	r1, #1
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7ff fa28 	bl	8004850 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2102      	movs	r1, #2
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff fa0c 	bl	8004824 <LL_ADC_GetOffsetChannel>
 800540c:	4603      	mov	r3, r0
 800540e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10a      	bne.n	800542c <HAL_ADC_ConfigChannel+0x2e8>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2102      	movs	r1, #2
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff fa01 	bl	8004824 <LL_ADC_GetOffsetChannel>
 8005422:	4603      	mov	r3, r0
 8005424:	0e9b      	lsrs	r3, r3, #26
 8005426:	f003 021f 	and.w	r2, r3, #31
 800542a:	e01e      	b.n	800546a <HAL_ADC_ConfigChannel+0x326>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2102      	movs	r1, #2
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff f9f6 	bl	8004824 <LL_ADC_GetOffsetChannel>
 8005438:	4603      	mov	r3, r0
 800543a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800543e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005442:	fa93 f3a3 	rbit	r3, r3
 8005446:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800544a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800544e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005452:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800545a:	2320      	movs	r3, #32
 800545c:	e004      	b.n	8005468 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800545e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005462:	fab3 f383 	clz	r3, r3
 8005466:	b2db      	uxtb	r3, r3
 8005468:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005472:	2b00      	cmp	r3, #0
 8005474:	d105      	bne.n	8005482 <HAL_ADC_ConfigChannel+0x33e>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	0e9b      	lsrs	r3, r3, #26
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	e016      	b.n	80054b0 <HAL_ADC_ConfigChannel+0x36c>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800548e:	fa93 f3a3 	rbit	r3, r3
 8005492:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005494:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005496:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800549a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80054a2:	2320      	movs	r3, #32
 80054a4:	e004      	b.n	80054b0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80054a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80054aa:	fab3 f383 	clz	r3, r3
 80054ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d106      	bne.n	80054c2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2200      	movs	r2, #0
 80054ba:	2102      	movs	r1, #2
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff f9c7 	bl	8004850 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2103      	movs	r1, #3
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7ff f9ab 	bl	8004824 <LL_ADC_GetOffsetChannel>
 80054ce:	4603      	mov	r3, r0
 80054d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10a      	bne.n	80054ee <HAL_ADC_ConfigChannel+0x3aa>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2103      	movs	r1, #3
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff f9a0 	bl	8004824 <LL_ADC_GetOffsetChannel>
 80054e4:	4603      	mov	r3, r0
 80054e6:	0e9b      	lsrs	r3, r3, #26
 80054e8:	f003 021f 	and.w	r2, r3, #31
 80054ec:	e017      	b.n	800551e <HAL_ADC_ConfigChannel+0x3da>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2103      	movs	r1, #3
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff f995 	bl	8004824 <LL_ADC_GetOffsetChannel>
 80054fa:	4603      	mov	r3, r0
 80054fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005500:	fa93 f3a3 	rbit	r3, r3
 8005504:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005506:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005508:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800550a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800550c:	2b00      	cmp	r3, #0
 800550e:	d101      	bne.n	8005514 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005510:	2320      	movs	r3, #32
 8005512:	e003      	b.n	800551c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005514:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005516:	fab3 f383 	clz	r3, r3
 800551a:	b2db      	uxtb	r3, r3
 800551c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005526:	2b00      	cmp	r3, #0
 8005528:	d105      	bne.n	8005536 <HAL_ADC_ConfigChannel+0x3f2>
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	0e9b      	lsrs	r3, r3, #26
 8005530:	f003 031f 	and.w	r3, r3, #31
 8005534:	e011      	b.n	800555a <HAL_ADC_ConfigChannel+0x416>
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800553c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800553e:	fa93 f3a3 	rbit	r3, r3
 8005542:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005544:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005546:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005548:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800554a:	2b00      	cmp	r3, #0
 800554c:	d101      	bne.n	8005552 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800554e:	2320      	movs	r3, #32
 8005550:	e003      	b.n	800555a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8005552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005554:	fab3 f383 	clz	r3, r3
 8005558:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800555a:	429a      	cmp	r2, r3
 800555c:	d106      	bne.n	800556c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	2200      	movs	r2, #0
 8005564:	2103      	movs	r1, #3
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff f972 	bl	8004850 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f7ff fae3 	bl	8004b3c <LL_ADC_IsEnabled>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	f040 813d 	bne.w	80057f8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6818      	ldr	r0, [r3, #0]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	6819      	ldr	r1, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	461a      	mov	r2, r3
 800558c:	f7ff fa2e 	bl	80049ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	4aa2      	ldr	r2, [pc, #648]	@ (8005820 <HAL_ADC_ConfigChannel+0x6dc>)
 8005596:	4293      	cmp	r3, r2
 8005598:	f040 812e 	bne.w	80057f8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10b      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x480>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	0e9b      	lsrs	r3, r3, #26
 80055b2:	3301      	adds	r3, #1
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	2b09      	cmp	r3, #9
 80055ba:	bf94      	ite	ls
 80055bc:	2301      	movls	r3, #1
 80055be:	2300      	movhi	r3, #0
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e019      	b.n	80055f8 <HAL_ADC_ConfigChannel+0x4b4>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055cc:	fa93 f3a3 	rbit	r3, r3
 80055d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80055d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80055d4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80055d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80055dc:	2320      	movs	r3, #32
 80055de:	e003      	b.n	80055e8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80055e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055e2:	fab3 f383 	clz	r3, r3
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	3301      	adds	r3, #1
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	2b09      	cmp	r3, #9
 80055f0:	bf94      	ite	ls
 80055f2:	2301      	movls	r3, #1
 80055f4:	2300      	movhi	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d079      	beq.n	80056f0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005604:	2b00      	cmp	r3, #0
 8005606:	d107      	bne.n	8005618 <HAL_ADC_ConfigChannel+0x4d4>
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	0e9b      	lsrs	r3, r3, #26
 800560e:	3301      	adds	r3, #1
 8005610:	069b      	lsls	r3, r3, #26
 8005612:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005616:	e015      	b.n	8005644 <HAL_ADC_ConfigChannel+0x500>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005620:	fa93 f3a3 	rbit	r3, r3
 8005624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005626:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005628:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800562a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800562c:	2b00      	cmp	r3, #0
 800562e:	d101      	bne.n	8005634 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005630:	2320      	movs	r3, #32
 8005632:	e003      	b.n	800563c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8005634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005636:	fab3 f383 	clz	r3, r3
 800563a:	b2db      	uxtb	r3, r3
 800563c:	3301      	adds	r3, #1
 800563e:	069b      	lsls	r3, r3, #26
 8005640:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800564c:	2b00      	cmp	r3, #0
 800564e:	d109      	bne.n	8005664 <HAL_ADC_ConfigChannel+0x520>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	0e9b      	lsrs	r3, r3, #26
 8005656:	3301      	adds	r3, #1
 8005658:	f003 031f 	and.w	r3, r3, #31
 800565c:	2101      	movs	r1, #1
 800565e:	fa01 f303 	lsl.w	r3, r1, r3
 8005662:	e017      	b.n	8005694 <HAL_ADC_ConfigChannel+0x550>
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800566c:	fa93 f3a3 	rbit	r3, r3
 8005670:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005674:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800567c:	2320      	movs	r3, #32
 800567e:	e003      	b.n	8005688 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005680:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005682:	fab3 f383 	clz	r3, r3
 8005686:	b2db      	uxtb	r3, r3
 8005688:	3301      	adds	r3, #1
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	2101      	movs	r1, #1
 8005690:	fa01 f303 	lsl.w	r3, r1, r3
 8005694:	ea42 0103 	orr.w	r1, r2, r3
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10a      	bne.n	80056ba <HAL_ADC_ConfigChannel+0x576>
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	0e9b      	lsrs	r3, r3, #26
 80056aa:	3301      	adds	r3, #1
 80056ac:	f003 021f 	and.w	r2, r3, #31
 80056b0:	4613      	mov	r3, r2
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	4413      	add	r3, r2
 80056b6:	051b      	lsls	r3, r3, #20
 80056b8:	e018      	b.n	80056ec <HAL_ADC_ConfigChannel+0x5a8>
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c2:	fa93 f3a3 	rbit	r3, r3
 80056c6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80056c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80056cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80056d2:	2320      	movs	r3, #32
 80056d4:	e003      	b.n	80056de <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80056d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d8:	fab3 f383 	clz	r3, r3
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	3301      	adds	r3, #1
 80056e0:	f003 021f 	and.w	r2, r3, #31
 80056e4:	4613      	mov	r3, r2
 80056e6:	005b      	lsls	r3, r3, #1
 80056e8:	4413      	add	r3, r2
 80056ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056ec:	430b      	orrs	r3, r1
 80056ee:	e07e      	b.n	80057ee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d107      	bne.n	800570c <HAL_ADC_ConfigChannel+0x5c8>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	0e9b      	lsrs	r3, r3, #26
 8005702:	3301      	adds	r3, #1
 8005704:	069b      	lsls	r3, r3, #26
 8005706:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800570a:	e015      	b.n	8005738 <HAL_ADC_ConfigChannel+0x5f4>
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005714:	fa93 f3a3 	rbit	r3, r3
 8005718:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800571e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8005724:	2320      	movs	r3, #32
 8005726:	e003      	b.n	8005730 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800572a:	fab3 f383 	clz	r3, r3
 800572e:	b2db      	uxtb	r3, r3
 8005730:	3301      	adds	r3, #1
 8005732:	069b      	lsls	r3, r3, #26
 8005734:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005740:	2b00      	cmp	r3, #0
 8005742:	d109      	bne.n	8005758 <HAL_ADC_ConfigChannel+0x614>
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	0e9b      	lsrs	r3, r3, #26
 800574a:	3301      	adds	r3, #1
 800574c:	f003 031f 	and.w	r3, r3, #31
 8005750:	2101      	movs	r1, #1
 8005752:	fa01 f303 	lsl.w	r3, r1, r3
 8005756:	e017      	b.n	8005788 <HAL_ADC_ConfigChannel+0x644>
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575e:	6a3b      	ldr	r3, [r7, #32]
 8005760:	fa93 f3a3 	rbit	r3, r3
 8005764:	61fb      	str	r3, [r7, #28]
  return result;
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005770:	2320      	movs	r3, #32
 8005772:	e003      	b.n	800577c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8005774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005776:	fab3 f383 	clz	r3, r3
 800577a:	b2db      	uxtb	r3, r3
 800577c:	3301      	adds	r3, #1
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	2101      	movs	r1, #1
 8005784:	fa01 f303 	lsl.w	r3, r1, r3
 8005788:	ea42 0103 	orr.w	r1, r2, r3
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10d      	bne.n	80057b4 <HAL_ADC_ConfigChannel+0x670>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	0e9b      	lsrs	r3, r3, #26
 800579e:	3301      	adds	r3, #1
 80057a0:	f003 021f 	and.w	r2, r3, #31
 80057a4:	4613      	mov	r3, r2
 80057a6:	005b      	lsls	r3, r3, #1
 80057a8:	4413      	add	r3, r2
 80057aa:	3b1e      	subs	r3, #30
 80057ac:	051b      	lsls	r3, r3, #20
 80057ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80057b2:	e01b      	b.n	80057ec <HAL_ADC_ConfigChannel+0x6a8>
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	fa93 f3a3 	rbit	r3, r3
 80057c0:	613b      	str	r3, [r7, #16]
  return result;
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d101      	bne.n	80057d0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80057cc:	2320      	movs	r3, #32
 80057ce:	e003      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	fab3 f383 	clz	r3, r3
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	3301      	adds	r3, #1
 80057da:	f003 021f 	and.w	r2, r3, #31
 80057de:	4613      	mov	r3, r2
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	4413      	add	r3, r2
 80057e4:	3b1e      	subs	r3, #30
 80057e6:	051b      	lsls	r3, r3, #20
 80057e8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057ec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057f2:	4619      	mov	r1, r3
 80057f4:	f7ff f8cf 	bl	8004996 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	4b09      	ldr	r3, [pc, #36]	@ (8005824 <HAL_ADC_ConfigChannel+0x6e0>)
 80057fe:	4013      	ands	r3, r2
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 80be 	beq.w	8005982 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800580e:	d004      	beq.n	800581a <HAL_ADC_ConfigChannel+0x6d6>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a04      	ldr	r2, [pc, #16]	@ (8005828 <HAL_ADC_ConfigChannel+0x6e4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d10a      	bne.n	8005830 <HAL_ADC_ConfigChannel+0x6ec>
 800581a:	4b04      	ldr	r3, [pc, #16]	@ (800582c <HAL_ADC_ConfigChannel+0x6e8>)
 800581c:	e009      	b.n	8005832 <HAL_ADC_ConfigChannel+0x6ee>
 800581e:	bf00      	nop
 8005820:	407f0000 	.word	0x407f0000
 8005824:	80080000 	.word	0x80080000
 8005828:	50000100 	.word	0x50000100
 800582c:	50000300 	.word	0x50000300
 8005830:	4b59      	ldr	r3, [pc, #356]	@ (8005998 <HAL_ADC_ConfigChannel+0x854>)
 8005832:	4618      	mov	r0, r3
 8005834:	f7fe ffc4 	bl	80047c0 <LL_ADC_GetCommonPathInternalCh>
 8005838:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a56      	ldr	r2, [pc, #344]	@ (800599c <HAL_ADC_ConfigChannel+0x858>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <HAL_ADC_ConfigChannel+0x70c>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a55      	ldr	r2, [pc, #340]	@ (80059a0 <HAL_ADC_ConfigChannel+0x85c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d13a      	bne.n	80058c6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005850:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005854:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d134      	bne.n	80058c6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005864:	d005      	beq.n	8005872 <HAL_ADC_ConfigChannel+0x72e>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a4e      	ldr	r2, [pc, #312]	@ (80059a4 <HAL_ADC_ConfigChannel+0x860>)
 800586c:	4293      	cmp	r3, r2
 800586e:	f040 8085 	bne.w	800597c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800587a:	d004      	beq.n	8005886 <HAL_ADC_ConfigChannel+0x742>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a49      	ldr	r2, [pc, #292]	@ (80059a8 <HAL_ADC_ConfigChannel+0x864>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d101      	bne.n	800588a <HAL_ADC_ConfigChannel+0x746>
 8005886:	4a49      	ldr	r2, [pc, #292]	@ (80059ac <HAL_ADC_ConfigChannel+0x868>)
 8005888:	e000      	b.n	800588c <HAL_ADC_ConfigChannel+0x748>
 800588a:	4a43      	ldr	r2, [pc, #268]	@ (8005998 <HAL_ADC_ConfigChannel+0x854>)
 800588c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005890:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005894:	4619      	mov	r1, r3
 8005896:	4610      	mov	r0, r2
 8005898:	f7fe ff7f 	bl	800479a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800589c:	4b44      	ldr	r3, [pc, #272]	@ (80059b0 <HAL_ADC_ConfigChannel+0x86c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	099b      	lsrs	r3, r3, #6
 80058a2:	4a44      	ldr	r2, [pc, #272]	@ (80059b4 <HAL_ADC_ConfigChannel+0x870>)
 80058a4:	fba2 2303 	umull	r2, r3, r2, r3
 80058a8:	099b      	lsrs	r3, r3, #6
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	4613      	mov	r3, r2
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80058b6:	e002      	b.n	80058be <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1f9      	bne.n	80058b8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80058c4:	e05a      	b.n	800597c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a3b      	ldr	r2, [pc, #236]	@ (80059b8 <HAL_ADC_ConfigChannel+0x874>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d125      	bne.n	800591c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80058d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80058d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d11f      	bne.n	800591c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a31      	ldr	r2, [pc, #196]	@ (80059a8 <HAL_ADC_ConfigChannel+0x864>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d104      	bne.n	80058f0 <HAL_ADC_ConfigChannel+0x7ac>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a34      	ldr	r2, [pc, #208]	@ (80059bc <HAL_ADC_ConfigChannel+0x878>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d047      	beq.n	8005980 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058f8:	d004      	beq.n	8005904 <HAL_ADC_ConfigChannel+0x7c0>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a2a      	ldr	r2, [pc, #168]	@ (80059a8 <HAL_ADC_ConfigChannel+0x864>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d101      	bne.n	8005908 <HAL_ADC_ConfigChannel+0x7c4>
 8005904:	4a29      	ldr	r2, [pc, #164]	@ (80059ac <HAL_ADC_ConfigChannel+0x868>)
 8005906:	e000      	b.n	800590a <HAL_ADC_ConfigChannel+0x7c6>
 8005908:	4a23      	ldr	r2, [pc, #140]	@ (8005998 <HAL_ADC_ConfigChannel+0x854>)
 800590a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800590e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005912:	4619      	mov	r1, r3
 8005914:	4610      	mov	r0, r2
 8005916:	f7fe ff40 	bl	800479a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800591a:	e031      	b.n	8005980 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a27      	ldr	r2, [pc, #156]	@ (80059c0 <HAL_ADC_ConfigChannel+0x87c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d12d      	bne.n	8005982 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005926:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800592a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d127      	bne.n	8005982 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1c      	ldr	r2, [pc, #112]	@ (80059a8 <HAL_ADC_ConfigChannel+0x864>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d022      	beq.n	8005982 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005944:	d004      	beq.n	8005950 <HAL_ADC_ConfigChannel+0x80c>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a17      	ldr	r2, [pc, #92]	@ (80059a8 <HAL_ADC_ConfigChannel+0x864>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d101      	bne.n	8005954 <HAL_ADC_ConfigChannel+0x810>
 8005950:	4a16      	ldr	r2, [pc, #88]	@ (80059ac <HAL_ADC_ConfigChannel+0x868>)
 8005952:	e000      	b.n	8005956 <HAL_ADC_ConfigChannel+0x812>
 8005954:	4a10      	ldr	r2, [pc, #64]	@ (8005998 <HAL_ADC_ConfigChannel+0x854>)
 8005956:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800595a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800595e:	4619      	mov	r1, r3
 8005960:	4610      	mov	r0, r2
 8005962:	f7fe ff1a 	bl	800479a <LL_ADC_SetCommonPathInternalCh>
 8005966:	e00c      	b.n	8005982 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800596c:	f043 0220 	orr.w	r2, r3, #32
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800597a:	e002      	b.n	8005982 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800597c:	bf00      	nop
 800597e:	e000      	b.n	8005982 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005980:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800598a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800598e:	4618      	mov	r0, r3
 8005990:	37d8      	adds	r7, #216	@ 0xd8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	50000700 	.word	0x50000700
 800599c:	c3210000 	.word	0xc3210000
 80059a0:	90c00010 	.word	0x90c00010
 80059a4:	50000600 	.word	0x50000600
 80059a8:	50000100 	.word	0x50000100
 80059ac:	50000300 	.word	0x50000300
 80059b0:	20000054 	.word	0x20000054
 80059b4:	053e2d63 	.word	0x053e2d63
 80059b8:	c7520000 	.word	0xc7520000
 80059bc:	50000500 	.word	0x50000500
 80059c0:	cb840000 	.word	0xcb840000

080059c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff f8b1 	bl	8004b3c <LL_ADC_IsEnabled>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d176      	bne.n	8005ace <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	4b3c      	ldr	r3, [pc, #240]	@ (8005ad8 <ADC_Enable+0x114>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00d      	beq.n	8005a0a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f2:	f043 0210 	orr.w	r2, r3, #16
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059fe:	f043 0201 	orr.w	r2, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e062      	b.n	8005ad0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7ff f86c 	bl	8004aec <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a1c:	d004      	beq.n	8005a28 <ADC_Enable+0x64>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a2e      	ldr	r2, [pc, #184]	@ (8005adc <ADC_Enable+0x118>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d101      	bne.n	8005a2c <ADC_Enable+0x68>
 8005a28:	4b2d      	ldr	r3, [pc, #180]	@ (8005ae0 <ADC_Enable+0x11c>)
 8005a2a:	e000      	b.n	8005a2e <ADC_Enable+0x6a>
 8005a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ae4 <ADC_Enable+0x120>)
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f7fe fec6 	bl	80047c0 <LL_ADC_GetCommonPathInternalCh>
 8005a34:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005a36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d013      	beq.n	8005a66 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a3e:	4b2a      	ldr	r3, [pc, #168]	@ (8005ae8 <ADC_Enable+0x124>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	099b      	lsrs	r3, r3, #6
 8005a44:	4a29      	ldr	r2, [pc, #164]	@ (8005aec <ADC_Enable+0x128>)
 8005a46:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4a:	099b      	lsrs	r3, r3, #6
 8005a4c:	1c5a      	adds	r2, r3, #1
 8005a4e:	4613      	mov	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	4413      	add	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a58:	e002      	b.n	8005a60 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	3b01      	subs	r3, #1
 8005a5e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f9      	bne.n	8005a5a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005a66:	f7fe fe57 	bl	8004718 <HAL_GetTick>
 8005a6a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a6c:	e028      	b.n	8005ac0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff f862 	bl	8004b3c <LL_ADC_IsEnabled>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d104      	bne.n	8005a88 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7ff f832 	bl	8004aec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005a88:	f7fe fe46 	bl	8004718 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d914      	bls.n	8005ac0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d00d      	beq.n	8005ac0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aa8:	f043 0210 	orr.w	r2, r3, #16
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab4:	f043 0201 	orr.w	r2, r3, #1
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e007      	b.n	8005ad0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d1cf      	bne.n	8005a6e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	8000003f 	.word	0x8000003f
 8005adc:	50000100 	.word	0x50000100
 8005ae0:	50000300 	.word	0x50000300
 8005ae4:	50000700 	.word	0x50000700
 8005ae8:	20000054 	.word	0x20000054
 8005aec:	053e2d63 	.word	0x053e2d63

08005af0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7ff f830 	bl	8004b62 <LL_ADC_IsDisableOngoing>
 8005b02:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff f817 	bl	8004b3c <LL_ADC_IsEnabled>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d047      	beq.n	8005ba4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d144      	bne.n	8005ba4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 030d 	and.w	r3, r3, #13
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d10c      	bne.n	8005b42 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fe fff1 	bl	8004b14 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2203      	movs	r2, #3
 8005b38:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005b3a:	f7fe fded 	bl	8004718 <HAL_GetTick>
 8005b3e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b40:	e029      	b.n	8005b96 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b46:	f043 0210 	orr.w	r2, r3, #16
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b52:	f043 0201 	orr.w	r2, r3, #1
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e023      	b.n	8005ba6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005b5e:	f7fe fddb 	bl	8004718 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d914      	bls.n	8005b96 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d00d      	beq.n	8005b96 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b7e:	f043 0210 	orr.w	r2, r3, #16
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b8a:	f043 0201 	orr.w	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e007      	b.n	8005ba6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1dc      	bne.n	8005b5e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3710      	adds	r7, #16
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bc0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d14b      	bne.n	8005c60 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bcc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d021      	beq.n	8005c26 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe fe96 	bl	8004918 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d032      	beq.n	8005c58 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d12b      	bne.n	8005c58 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d11f      	bne.n	8005c58 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c1c:	f043 0201 	orr.w	r2, r3, #1
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005c24:	e018      	b.n	8005c58 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	f003 0302 	and.w	r3, r3, #2
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d111      	bne.n	8005c58 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c38:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d105      	bne.n	8005c58 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c50:	f043 0201 	orr.w	r2, r3, #1
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f7fc fee1 	bl	8002a20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005c5e:	e00e      	b.n	8005c7e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c64:	f003 0310 	and.w	r3, r3, #16
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d003      	beq.n	8005c74 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f7ff fa5f 	bl	8005130 <HAL_ADC_ErrorCallback>
}
 8005c72:	e004      	b.n	8005c7e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	4798      	blx	r3
}
 8005c7e:	bf00      	nop
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b084      	sub	sp, #16
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7ff fa41 	bl	800511c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005c9a:	bf00      	nop
 8005c9c:	3710      	adds	r7, #16
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b084      	sub	sp, #16
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cae:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cc0:	f043 0204 	orr.w	r2, r3, #4
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f7ff fa31 	bl	8005130 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005cce:	bf00      	nop
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <LL_ADC_IsEnabled>:
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d101      	bne.n	8005cee <LL_ADC_IsEnabled+0x18>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <LL_ADC_IsEnabled+0x1a>
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <LL_ADC_StartCalibration>:
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005d0e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005d12:	683a      	ldr	r2, [r7, #0]
 8005d14:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	609a      	str	r2, [r3, #8]
}
 8005d22:	bf00      	nop
 8005d24:	370c      	adds	r7, #12
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <LL_ADC_IsCalibrationOnGoing>:
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d42:	d101      	bne.n	8005d48 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <LL_ADC_REG_IsConversionOngoing>:
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	f003 0304 	and.w	r3, r3, #4
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d101      	bne.n	8005d6e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005d86:	2300      	movs	r3, #0
 8005d88:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_ADCEx_Calibration_Start+0x1c>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e04d      	b.n	8005e34 <HAL_ADCEx_Calibration_Start+0xb8>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f7ff fea5 	bl	8005af0 <ADC_Disable>
 8005da6:	4603      	mov	r3, r0
 8005da8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d136      	bne.n	8005e1e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005db8:	f023 0302 	bic.w	r3, r3, #2
 8005dbc:	f043 0202 	orr.w	r2, r3, #2
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff ff96 	bl	8005cfc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005dd0:	e014      	b.n	8005dfc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	4a18      	ldr	r2, [pc, #96]	@ (8005e3c <HAL_ADCEx_Calibration_Start+0xc0>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d90d      	bls.n	8005dfc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005de4:	f023 0312 	bic.w	r3, r3, #18
 8005de8:	f043 0210 	orr.w	r2, r3, #16
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e01b      	b.n	8005e34 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff ff94 	bl	8005d2e <LL_ADC_IsCalibrationOnGoing>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e2      	bne.n	8005dd2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e10:	f023 0303 	bic.w	r3, r3, #3
 8005e14:	f043 0201 	orr.w	r2, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005e1c:	e005      	b.n	8005e2a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e22:	f043 0210 	orr.w	r2, r3, #16
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	0004de01 	.word	0x0004de01

08005e40 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005e40:	b590      	push	{r4, r7, lr}
 8005e42:	b0a1      	sub	sp, #132	@ 0x84
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005e56:	2b01      	cmp	r3, #1
 8005e58:	d101      	bne.n	8005e5e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005e5a:	2302      	movs	r3, #2
 8005e5c:	e0e7      	b.n	800602e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2201      	movs	r2, #1
 8005e62:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005e66:	2300      	movs	r3, #0
 8005e68:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e76:	d102      	bne.n	8005e7e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005e78:	4b6f      	ldr	r3, [pc, #444]	@ (8006038 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005e7a:	60bb      	str	r3, [r7, #8]
 8005e7c:	e009      	b.n	8005e92 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a6e      	ldr	r2, [pc, #440]	@ (800603c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d102      	bne.n	8005e8e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005e88:	4b6d      	ldr	r3, [pc, #436]	@ (8006040 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005e8a:	60bb      	str	r3, [r7, #8]
 8005e8c:	e001      	b.n	8005e92 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10b      	bne.n	8005eb0 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e9c:	f043 0220 	orr.w	r2, r3, #32
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e0be      	b.n	800602e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff ff4f 	bl	8005d56 <LL_ADC_REG_IsConversionOngoing>
 8005eb8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff ff49 	bl	8005d56 <LL_ADC_REG_IsConversionOngoing>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f040 80a0 	bne.w	800600c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005ecc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f040 809c 	bne.w	800600c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005edc:	d004      	beq.n	8005ee8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a55      	ldr	r2, [pc, #340]	@ (8006038 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d101      	bne.n	8005eec <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005ee8:	4b56      	ldr	r3, [pc, #344]	@ (8006044 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005eea:	e000      	b.n	8005eee <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005eec:	4b56      	ldr	r3, [pc, #344]	@ (8006048 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005eee:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d04b      	beq.n	8005f90 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005ef8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	6859      	ldr	r1, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f0a:	035b      	lsls	r3, r3, #13
 8005f0c:	430b      	orrs	r3, r1
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f12:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f1c:	d004      	beq.n	8005f28 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a45      	ldr	r2, [pc, #276]	@ (8006038 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d10f      	bne.n	8005f48 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8005f28:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005f2c:	f7ff fed3 	bl	8005cd6 <LL_ADC_IsEnabled>
 8005f30:	4604      	mov	r4, r0
 8005f32:	4841      	ldr	r0, [pc, #260]	@ (8006038 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f34:	f7ff fecf 	bl	8005cd6 <LL_ADC_IsEnabled>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	4323      	orrs	r3, r4
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bf0c      	ite	eq
 8005f40:	2301      	moveq	r3, #1
 8005f42:	2300      	movne	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	e012      	b.n	8005f6e <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8005f48:	483c      	ldr	r0, [pc, #240]	@ (800603c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005f4a:	f7ff fec4 	bl	8005cd6 <LL_ADC_IsEnabled>
 8005f4e:	4604      	mov	r4, r0
 8005f50:	483b      	ldr	r0, [pc, #236]	@ (8006040 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005f52:	f7ff fec0 	bl	8005cd6 <LL_ADC_IsEnabled>
 8005f56:	4603      	mov	r3, r0
 8005f58:	431c      	orrs	r4, r3
 8005f5a:	483c      	ldr	r0, [pc, #240]	@ (800604c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005f5c:	f7ff febb 	bl	8005cd6 <LL_ADC_IsEnabled>
 8005f60:	4603      	mov	r3, r0
 8005f62:	4323      	orrs	r3, r4
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bf0c      	ite	eq
 8005f68:	2301      	moveq	r3, #1
 8005f6a:	2300      	movne	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d056      	beq.n	8006020 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005f72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8005f7a:	f023 030f 	bic.w	r3, r3, #15
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	6811      	ldr	r1, [r2, #0]
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	6892      	ldr	r2, [r2, #8]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f8c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005f8e:	e047      	b.n	8006020 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f98:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005f9a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fa4:	d004      	beq.n	8005fb0 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a23      	ldr	r2, [pc, #140]	@ (8006038 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10f      	bne.n	8005fd0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005fb0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005fb4:	f7ff fe8f 	bl	8005cd6 <LL_ADC_IsEnabled>
 8005fb8:	4604      	mov	r4, r0
 8005fba:	481f      	ldr	r0, [pc, #124]	@ (8006038 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fbc:	f7ff fe8b 	bl	8005cd6 <LL_ADC_IsEnabled>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	4323      	orrs	r3, r4
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	bf0c      	ite	eq
 8005fc8:	2301      	moveq	r3, #1
 8005fca:	2300      	movne	r3, #0
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	e012      	b.n	8005ff6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005fd0:	481a      	ldr	r0, [pc, #104]	@ (800603c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005fd2:	f7ff fe80 	bl	8005cd6 <LL_ADC_IsEnabled>
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	4819      	ldr	r0, [pc, #100]	@ (8006040 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005fda:	f7ff fe7c 	bl	8005cd6 <LL_ADC_IsEnabled>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	431c      	orrs	r4, r3
 8005fe2:	481a      	ldr	r0, [pc, #104]	@ (800604c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005fe4:	f7ff fe77 	bl	8005cd6 <LL_ADC_IsEnabled>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	4323      	orrs	r3, r4
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	bf0c      	ite	eq
 8005ff0:	2301      	moveq	r3, #1
 8005ff2:	2300      	movne	r3, #0
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d012      	beq.n	8006020 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005ffa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006002:	f023 030f 	bic.w	r3, r3, #15
 8006006:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006008:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800600a:	e009      	b.n	8006020 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006010:	f043 0220 	orr.w	r2, r3, #32
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800601e:	e000      	b.n	8006022 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006020:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800602a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800602e:	4618      	mov	r0, r3
 8006030:	3784      	adds	r7, #132	@ 0x84
 8006032:	46bd      	mov	sp, r7
 8006034:	bd90      	pop	{r4, r7, pc}
 8006036:	bf00      	nop
 8006038:	50000100 	.word	0x50000100
 800603c:	50000400 	.word	0x50000400
 8006040:	50000500 	.word	0x50000500
 8006044:	50000300 	.word	0x50000300
 8006048:	50000700 	.word	0x50000700
 800604c:	50000600 	.word	0x50000600

08006050 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e023      	b.n	80060aa <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d106      	bne.n	800607c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fd fec6 	bl	8003e08 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3708      	adds	r7, #8
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, const CORDIC_ConfigTypeDef *sConfig)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d11d      	bne.n	800610a <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	4b14      	ldr	r3, [pc, #80]	@ (8006128 <HAL_CORDIC_Configure+0x74>)
 80060d6:	4013      	ands	r3, r2
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	6811      	ldr	r1, [r2, #0]
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	6992      	ldr	r2, [r2, #24]
 80060e0:	4311      	orrs	r1, r2
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	6852      	ldr	r2, [r2, #4]
 80060e6:	4311      	orrs	r1, r2
 80060e8:	683a      	ldr	r2, [r7, #0]
 80060ea:	6912      	ldr	r2, [r2, #16]
 80060ec:	4311      	orrs	r1, r2
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	6952      	ldr	r2, [r2, #20]
 80060f2:	4311      	orrs	r1, r2
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	6892      	ldr	r2, [r2, #8]
 80060f8:	4311      	orrs	r1, r2
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	68d2      	ldr	r2, [r2, #12]
 80060fe:	4311      	orrs	r1, r2
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6812      	ldr	r2, [r2, #0]
 8006104:	430b      	orrs	r3, r1
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	e007      	b.n	800611a <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610e:	f043 0202 	orr.w	r2, r3, #2
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800611a:	7bfb      	ldrb	r3, [r7, #15]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	ff87f800 	.word	0xff87f800

0800612c <HAL_CORDIC_Calculate>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate(CORDIC_HandleTypeDef *hcordic, const int32_t *pInBuff, int32_t *pOutBuff,
                                       uint32_t NbCalc, uint32_t Timeout)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b088      	sub	sp, #32
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
 8006138:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  const int32_t *p_tmp_in_buff = pInBuff;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <HAL_CORDIC_Calculate+0x28>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_CORDIC_Calculate+0x28>
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d107      	bne.n	8006164 <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006158:	f043 0201 	orr.w	r2, r3, #1
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e058      	b.n	8006216 <HAL_CORDIC_Calculate+0xea>
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800616a:	b2db      	uxtb	r3, r3
 800616c:	2b01      	cmp	r3, #1
 800616e:	d14b      	bne.n	8006208 <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2200      	movs	r2, #0
 8006174:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2202      	movs	r2, #2
 800617a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 800617e:	f7fe facb 	bl	8004718 <HAL_GetTick>
 8006182:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8006184:	f107 0314 	add.w	r3, r7, #20
 8006188:	4619      	mov	r1, r3
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 f847 	bl	800621e <CORDIC_WriteInDataIncrementPtr>

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	3b01      	subs	r3, #1
 8006194:	61fb      	str	r3, [r7, #28]
 8006196:	e028      	b.n	80061ea <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8006198:	f107 0314 	add.w	r3, r7, #20
 800619c:	4619      	mov	r1, r3
 800619e:	68f8      	ldr	r0, [r7, #12]
 80061a0:	f000 f83d 	bl	800621e <CORDIC_WriteInDataIncrementPtr>

      /* Wait for RRDY flag to be raised */
      do
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
 80061a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061aa:	d010      	beq.n	80061ce <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 80061ac:	f7fe fab4 	bl	8004718 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d208      	bcs.n	80061ce <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2204      	movs	r2, #4
 80061c0:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Return function status */
            return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e023      	b.n	8006216 <HAL_CORDIC_Calculate+0xea>
          }
        }
      } while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	dae5      	bge.n	80061a4 <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 80061d8:	f107 0310 	add.w	r3, r7, #16
 80061dc:	4619      	mov	r1, r3
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 f846 	bl	8006270 <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	61fb      	str	r3, [r7, #28]
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1d3      	bne.n	8006198 <HAL_CORDIC_Calculate+0x6c>
    }

    /* Read output data from Read Data register, and increment output buffer pointer */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 80061f0:	f107 0310 	add.w	r3, r7, #16
 80061f4:	4619      	mov	r1, r3
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f83a 	bl	8006270 <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Return function status */
    return HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	e006      	b.n	8006216 <HAL_CORDIC_Calculate+0xea>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800620c:	f043 0202 	orr.w	r2, r3, #2
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
  }
}
 8006216:	4618      	mov	r0, r3
 8006218:	3720      	adds	r7, #32
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}

0800621e <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	1d1a      	adds	r2, r3, #4
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006248:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800624c:	d10a      	bne.n	8006264 <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	1d1a      	adds	r2, r3, #4
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	601a      	str	r2, [r3, #0]
  }
}
 8006264:	bf00      	nop
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	1d1a      	adds	r2, r3, #4
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800629a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800629e:	d10a      	bne.n	80062b6 <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	1d1a      	adds	r2, r3, #4
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	601a      	str	r2, [r3, #0]
  }
}
 80062b6:	bf00      	nop
 80062b8:	370c      	adds	r7, #12
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
	...

080062c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062d4:	4b0c      	ldr	r3, [pc, #48]	@ (8006308 <__NVIC_SetPriorityGrouping+0x44>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80062e0:	4013      	ands	r3, r2
 80062e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80062f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062f6:	4a04      	ldr	r2, [pc, #16]	@ (8006308 <__NVIC_SetPriorityGrouping+0x44>)
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	60d3      	str	r3, [r2, #12]
}
 80062fc:	bf00      	nop
 80062fe:	3714      	adds	r7, #20
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr
 8006308:	e000ed00 	.word	0xe000ed00

0800630c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006310:	4b04      	ldr	r3, [pc, #16]	@ (8006324 <__NVIC_GetPriorityGrouping+0x18>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	0a1b      	lsrs	r3, r3, #8
 8006316:	f003 0307 	and.w	r3, r3, #7
}
 800631a:	4618      	mov	r0, r3
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr
 8006324:	e000ed00 	.word	0xe000ed00

08006328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	4603      	mov	r3, r0
 8006330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006336:	2b00      	cmp	r3, #0
 8006338:	db0b      	blt.n	8006352 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800633a:	79fb      	ldrb	r3, [r7, #7]
 800633c:	f003 021f 	and.w	r2, r3, #31
 8006340:	4907      	ldr	r1, [pc, #28]	@ (8006360 <__NVIC_EnableIRQ+0x38>)
 8006342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006346:	095b      	lsrs	r3, r3, #5
 8006348:	2001      	movs	r0, #1
 800634a:	fa00 f202 	lsl.w	r2, r0, r2
 800634e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	e000e100 	.word	0xe000e100

08006364 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	6039      	str	r1, [r7, #0]
 800636e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006374:	2b00      	cmp	r3, #0
 8006376:	db0a      	blt.n	800638e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	b2da      	uxtb	r2, r3
 800637c:	490c      	ldr	r1, [pc, #48]	@ (80063b0 <__NVIC_SetPriority+0x4c>)
 800637e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006382:	0112      	lsls	r2, r2, #4
 8006384:	b2d2      	uxtb	r2, r2
 8006386:	440b      	add	r3, r1
 8006388:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800638c:	e00a      	b.n	80063a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	b2da      	uxtb	r2, r3
 8006392:	4908      	ldr	r1, [pc, #32]	@ (80063b4 <__NVIC_SetPriority+0x50>)
 8006394:	79fb      	ldrb	r3, [r7, #7]
 8006396:	f003 030f 	and.w	r3, r3, #15
 800639a:	3b04      	subs	r3, #4
 800639c:	0112      	lsls	r2, r2, #4
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	440b      	add	r3, r1
 80063a2:	761a      	strb	r2, [r3, #24]
}
 80063a4:	bf00      	nop
 80063a6:	370c      	adds	r7, #12
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	e000e100 	.word	0xe000e100
 80063b4:	e000ed00 	.word	0xe000ed00

080063b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b089      	sub	sp, #36	@ 0x24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f003 0307 	and.w	r3, r3, #7
 80063ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	f1c3 0307 	rsb	r3, r3, #7
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	bf28      	it	cs
 80063d6:	2304      	movcs	r3, #4
 80063d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	3304      	adds	r3, #4
 80063de:	2b06      	cmp	r3, #6
 80063e0:	d902      	bls.n	80063e8 <NVIC_EncodePriority+0x30>
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	3b03      	subs	r3, #3
 80063e6:	e000      	b.n	80063ea <NVIC_EncodePriority+0x32>
 80063e8:	2300      	movs	r3, #0
 80063ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063ec:	f04f 32ff 	mov.w	r2, #4294967295
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	fa02 f303 	lsl.w	r3, r2, r3
 80063f6:	43da      	mvns	r2, r3
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	401a      	ands	r2, r3
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006400:	f04f 31ff 	mov.w	r1, #4294967295
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	fa01 f303 	lsl.w	r3, r1, r3
 800640a:	43d9      	mvns	r1, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006410:	4313      	orrs	r3, r2
         );
}
 8006412:	4618      	mov	r0, r3
 8006414:	3724      	adds	r7, #36	@ 0x24
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	3b01      	subs	r3, #1
 800642c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006430:	d301      	bcc.n	8006436 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006432:	2301      	movs	r3, #1
 8006434:	e00f      	b.n	8006456 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006436:	4a0a      	ldr	r2, [pc, #40]	@ (8006460 <SysTick_Config+0x40>)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3b01      	subs	r3, #1
 800643c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800643e:	210f      	movs	r1, #15
 8006440:	f04f 30ff 	mov.w	r0, #4294967295
 8006444:	f7ff ff8e 	bl	8006364 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006448:	4b05      	ldr	r3, [pc, #20]	@ (8006460 <SysTick_Config+0x40>)
 800644a:	2200      	movs	r2, #0
 800644c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800644e:	4b04      	ldr	r3, [pc, #16]	@ (8006460 <SysTick_Config+0x40>)
 8006450:	2207      	movs	r2, #7
 8006452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	e000e010 	.word	0xe000e010

08006464 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f7ff ff29 	bl	80062c4 <__NVIC_SetPriorityGrouping>
}
 8006472:	bf00      	nop
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b086      	sub	sp, #24
 800647e:	af00      	add	r7, sp, #0
 8006480:	4603      	mov	r3, r0
 8006482:	60b9      	str	r1, [r7, #8]
 8006484:	607a      	str	r2, [r7, #4]
 8006486:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006488:	f7ff ff40 	bl	800630c <__NVIC_GetPriorityGrouping>
 800648c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	68b9      	ldr	r1, [r7, #8]
 8006492:	6978      	ldr	r0, [r7, #20]
 8006494:	f7ff ff90 	bl	80063b8 <NVIC_EncodePriority>
 8006498:	4602      	mov	r2, r0
 800649a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800649e:	4611      	mov	r1, r2
 80064a0:	4618      	mov	r0, r3
 80064a2:	f7ff ff5f 	bl	8006364 <__NVIC_SetPriority>
}
 80064a6:	bf00      	nop
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b082      	sub	sp, #8
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	4603      	mov	r3, r0
 80064b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff ff33 	bl	8006328 <__NVIC_EnableIRQ>
}
 80064c2:	bf00      	nop
 80064c4:	3708      	adds	r7, #8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b082      	sub	sp, #8
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7ff ffa4 	bl	8006420 <SysTick_Config>
 80064d8:	4603      	mov	r3, r0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3708      	adds	r7, #8
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}

080064e2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80064e2:	b580      	push	{r7, lr}
 80064e4:	b082      	sub	sp, #8
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d101      	bne.n	80064f4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e014      	b.n	800651e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	791b      	ldrb	r3, [r3, #4]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d105      	bne.n	800650a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7fd fc9f 	bl	8003e48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2202      	movs	r2, #2
 800650e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e056      	b.n	80065ea <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	795b      	ldrb	r3, [r3, #5]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d101      	bne.n	8006548 <HAL_DAC_Start+0x20>
 8006544:	2302      	movs	r3, #2
 8006546:	e050      	b.n	80065ea <HAL_DAC_Start+0xc2>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2202      	movs	r2, #2
 8006552:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6819      	ldr	r1, [r3, #0]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	f003 0310 	and.w	r3, r3, #16
 8006560:	2201      	movs	r2, #1
 8006562:	409a      	lsls	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	430a      	orrs	r2, r1
 800656a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800656c:	4b22      	ldr	r3, [pc, #136]	@ (80065f8 <HAL_DAC_Start+0xd0>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	099b      	lsrs	r3, r3, #6
 8006572:	4a22      	ldr	r2, [pc, #136]	@ (80065fc <HAL_DAC_Start+0xd4>)
 8006574:	fba2 2303 	umull	r2, r3, r2, r3
 8006578:	099b      	lsrs	r3, r3, #6
 800657a:	3301      	adds	r3, #1
 800657c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800657e:	e002      	b.n	8006586 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3b01      	subs	r3, #1
 8006584:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f9      	bne.n	8006580 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10f      	bne.n	80065b2 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800659c:	2b02      	cmp	r3, #2
 800659e:	d11d      	bne.n	80065dc <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f042 0201 	orr.w	r2, r2, #1
 80065ae:	605a      	str	r2, [r3, #4]
 80065b0:	e014      	b.n	80065dc <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	f003 0310 	and.w	r3, r3, #16
 80065c2:	2102      	movs	r1, #2
 80065c4:	fa01 f303 	lsl.w	r3, r1, r3
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d107      	bne.n	80065dc <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685a      	ldr	r2, [r3, #4]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0202 	orr.w	r2, r2, #2
 80065da:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr
 80065f6:	bf00      	nop
 80065f8:	20000054 	.word	0x20000054
 80065fc:	053e2d63 	.word	0x053e2d63

08006600 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b084      	sub	sp, #16
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006616:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d01d      	beq.n	800665e <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d018      	beq.n	800665e <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2204      	movs	r2, #4
 8006630:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f043 0201 	orr.w	r2, r3, #1
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006646:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006656:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f854 	bl	8006706 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d01d      	beq.n	80066a4 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d018      	beq.n	80066a4 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2204      	movs	r2, #4
 8006676:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f043 0202 	orr.w	r2, r3, #2
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800668c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800669c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f9f4 	bl	8006a8c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80066a4:	bf00      	nop
 80066a6:	3710      	adds	r7, #16
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	607a      	str	r2, [r7, #4]
 80066b8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80066ba:	2300      	movs	r3, #0
 80066bc:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e018      	b.n	80066fa <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d105      	bne.n	80066e6 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4413      	add	r3, r2
 80066e0:	3308      	adds	r3, #8
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	e004      	b.n	80066f0 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4413      	add	r3, r2
 80066ec:	3314      	adds	r3, #20
 80066ee:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	461a      	mov	r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006706:	b480      	push	{r7}
 8006708:	b083      	sub	sp, #12
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08a      	sub	sp, #40	@ 0x28
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <HAL_DAC_ConfigChannel+0x1c>
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e19e      	b.n	8006a7a <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	795b      	ldrb	r3, [r3, #5]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_DAC_ConfigChannel+0x2c>
 8006744:	2302      	movs	r3, #2
 8006746:	e198      	b.n	8006a7a <HAL_DAC_ConfigChannel+0x35e>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2201      	movs	r2, #1
 800674c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2202      	movs	r2, #2
 8006752:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	2b04      	cmp	r3, #4
 800675a:	d17a      	bne.n	8006852 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800675c:	f7fd ffdc 	bl	8004718 <HAL_GetTick>
 8006760:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d13d      	bne.n	80067e4 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006768:	e018      	b.n	800679c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800676a:	f7fd ffd5 	bl	8004718 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	2b01      	cmp	r3, #1
 8006776:	d911      	bls.n	800679c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800677e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f043 0208 	orr.w	r2, r3, #8
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2203      	movs	r2, #3
 8006796:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e16e      	b.n	8006a7a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1df      	bne.n	800676a <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067b2:	641a      	str	r2, [r3, #64]	@ 0x40
 80067b4:	e020      	b.n	80067f8 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80067b6:	f7fd ffaf 	bl	8004718 <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d90f      	bls.n	80067e4 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	da0a      	bge.n	80067e4 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f043 0208 	orr.w	r2, r3, #8
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2203      	movs	r2, #3
 80067de:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e14a      	b.n	8006a7a <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	dbe3      	blt.n	80067b6 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067f6:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f003 0310 	and.w	r3, r3, #16
 8006804:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8006808:	fa01 f303 	lsl.w	r3, r1, r3
 800680c:	43db      	mvns	r3, r3
 800680e:	ea02 0103 	and.w	r1, r2, r3
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	409a      	lsls	r2, r3
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f003 0310 	and.w	r3, r3, #16
 8006832:	21ff      	movs	r1, #255	@ 0xff
 8006834:	fa01 f303 	lsl.w	r3, r1, r3
 8006838:	43db      	mvns	r3, r3
 800683a:	ea02 0103 	and.w	r1, r2, r3
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f003 0310 	and.w	r3, r3, #16
 8006848:	409a      	lsls	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	430a      	orrs	r2, r1
 8006850:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	69db      	ldr	r3, [r3, #28]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d11d      	bne.n	8006896 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006860:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f003 0310 	and.w	r3, r3, #16
 8006868:	221f      	movs	r2, #31
 800686a:	fa02 f303 	lsl.w	r3, r2, r3
 800686e:	43db      	mvns	r3, r3
 8006870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006872:	4013      	ands	r3, r2
 8006874:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f003 0310 	and.w	r3, r3, #16
 8006882:	697a      	ldr	r2, [r7, #20]
 8006884:	fa02 f303 	lsl.w	r3, r2, r3
 8006888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800688a:	4313      	orrs	r3, r2
 800688c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006894:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800689c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f003 0310 	and.w	r3, r3, #16
 80068a4:	2207      	movs	r2, #7
 80068a6:	fa02 f303 	lsl.w	r3, r2, r3
 80068aa:	43db      	mvns	r3, r3
 80068ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068ae:	4013      	ands	r3, r2
 80068b0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d102      	bne.n	80068c0 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80068ba:	2300      	movs	r3, #0
 80068bc:	623b      	str	r3, [r7, #32]
 80068be:	e00f      	b.n	80068e0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	2b02      	cmp	r3, #2
 80068c6:	d102      	bne.n	80068ce <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80068c8:	2301      	movs	r3, #1
 80068ca:	623b      	str	r3, [r7, #32]
 80068cc:	e008      	b.n	80068e0 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	695b      	ldr	r3, [r3, #20]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d102      	bne.n	80068dc <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80068d6:	2301      	movs	r3, #1
 80068d8:	623b      	str	r3, [r7, #32]
 80068da:	e001      	b.n	80068e0 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80068dc:	2300      	movs	r3, #0
 80068de:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	6a3a      	ldr	r2, [r7, #32]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f003 0310 	and.w	r3, r3, #16
 80068f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068fa:	fa02 f303 	lsl.w	r3, r2, r3
 80068fe:	43db      	mvns	r3, r3
 8006900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006902:	4013      	ands	r3, r2
 8006904:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	791b      	ldrb	r3, [r3, #4]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d102      	bne.n	8006914 <HAL_DAC_ConfigChannel+0x1f8>
 800690e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006912:	e000      	b.n	8006916 <HAL_DAC_ConfigChannel+0x1fa>
 8006914:	2300      	movs	r3, #0
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f003 0310 	and.w	r3, r3, #16
 8006922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006926:	fa02 f303 	lsl.w	r3, r2, r3
 800692a:	43db      	mvns	r3, r3
 800692c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800692e:	4013      	ands	r3, r2
 8006930:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	795b      	ldrb	r3, [r3, #5]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d102      	bne.n	8006940 <HAL_DAC_ConfigChannel+0x224>
 800693a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800693e:	e000      	b.n	8006942 <HAL_DAC_ConfigChannel+0x226>
 8006940:	2300      	movs	r3, #0
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694a:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800694e:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2b02      	cmp	r3, #2
 8006956:	d114      	bne.n	8006982 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006958:	f002 ff7a 	bl	8009850 <HAL_RCC_GetHCLKFreq>
 800695c:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	4a48      	ldr	r2, [pc, #288]	@ (8006a84 <HAL_DAC_ConfigChannel+0x368>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d904      	bls.n	8006970 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800696c:	627b      	str	r3, [r7, #36]	@ 0x24
 800696e:	e00f      	b.n	8006990 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	4a45      	ldr	r2, [pc, #276]	@ (8006a88 <HAL_DAC_ConfigChannel+0x36c>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d90a      	bls.n	800698e <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800697e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006980:	e006      	b.n	8006990 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006988:	4313      	orrs	r3, r2
 800698a:	627b      	str	r3, [r7, #36]	@ 0x24
 800698c:	e000      	b.n	8006990 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800698e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f003 0310 	and.w	r3, r3, #16
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	fa02 f303 	lsl.w	r3, r2, r3
 800699c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800699e:	4313      	orrs	r3, r2
 80069a0:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6819      	ldr	r1, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f003 0310 	and.w	r3, r3, #16
 80069b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80069ba:	fa02 f303 	lsl.w	r3, r2, r3
 80069be:	43da      	mvns	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	400a      	ands	r2, r1
 80069c6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f003 0310 	and.w	r3, r3, #16
 80069d6:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80069da:	fa02 f303 	lsl.w	r3, r2, r3
 80069de:	43db      	mvns	r3, r3
 80069e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069e2:	4013      	ands	r3, r2
 80069e4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f003 0310 	and.w	r3, r3, #16
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	fa02 f303 	lsl.w	r3, r2, r3
 80069f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069fa:	4313      	orrs	r3, r2
 80069fc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a04:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6819      	ldr	r1, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f003 0310 	and.w	r3, r3, #16
 8006a12:	22c0      	movs	r2, #192	@ 0xc0
 8006a14:	fa02 f303 	lsl.w	r3, r2, r3
 8006a18:	43da      	mvns	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	400a      	ands	r2, r1
 8006a20:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	089b      	lsrs	r3, r3, #2
 8006a28:	f003 030f 	and.w	r3, r3, #15
 8006a2c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	089b      	lsrs	r3, r3, #2
 8006a34:	021b      	lsls	r3, r3, #8
 8006a36:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f003 0310 	and.w	r3, r3, #16
 8006a4c:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8006a50:	fa01 f303 	lsl.w	r3, r1, r3
 8006a54:	43db      	mvns	r3, r3
 8006a56:	ea02 0103 	and.w	r1, r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f003 0310 	and.w	r3, r3, #16
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	409a      	lsls	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006a78:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3728      	adds	r7, #40	@ 0x28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	09896800 	.word	0x09896800
 8006a88:	04c4b400 	.word	0x04c4b400

08006a8c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006a94:	bf00      	nop
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr

08006aa0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d101      	bne.n	8006ab2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e08d      	b.n	8006bce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	4b47      	ldr	r3, [pc, #284]	@ (8006bd8 <HAL_DMA_Init+0x138>)
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d80f      	bhi.n	8006ade <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	4b45      	ldr	r3, [pc, #276]	@ (8006bdc <HAL_DMA_Init+0x13c>)
 8006ac6:	4413      	add	r3, r2
 8006ac8:	4a45      	ldr	r2, [pc, #276]	@ (8006be0 <HAL_DMA_Init+0x140>)
 8006aca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ace:	091b      	lsrs	r3, r3, #4
 8006ad0:	009a      	lsls	r2, r3, #2
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a42      	ldr	r2, [pc, #264]	@ (8006be4 <HAL_DMA_Init+0x144>)
 8006ada:	641a      	str	r2, [r3, #64]	@ 0x40
 8006adc:	e00e      	b.n	8006afc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	4b40      	ldr	r3, [pc, #256]	@ (8006be8 <HAL_DMA_Init+0x148>)
 8006ae6:	4413      	add	r3, r2
 8006ae8:	4a3d      	ldr	r2, [pc, #244]	@ (8006be0 <HAL_DMA_Init+0x140>)
 8006aea:	fba2 2303 	umull	r2, r3, r2, r3
 8006aee:	091b      	lsrs	r3, r3, #4
 8006af0:	009a      	lsls	r2, r3, #2
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a3c      	ldr	r2, [pc, #240]	@ (8006bec <HAL_DMA_Init+0x14c>)
 8006afa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006b12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b16:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f9b6 	bl	8006ec0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b5c:	d102      	bne.n	8006b64 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b78:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d010      	beq.n	8006ba4 <HAL_DMA_Init+0x104>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d80c      	bhi.n	8006ba4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f9d6 	bl	8006f3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006ba0:	605a      	str	r2, [r3, #4]
 8006ba2:	e008      	b.n	8006bb6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	40020407 	.word	0x40020407
 8006bdc:	bffdfff8 	.word	0xbffdfff8
 8006be0:	cccccccd 	.word	0xcccccccd
 8006be4:	40020000 	.word	0x40020000
 8006be8:	bffdfbf8 	.word	0xbffdfbf8
 8006bec:	40020400 	.word	0x40020400

08006bf0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
 8006bfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_DMA_Start_IT+0x20>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e066      	b.n	8006cde <HAL_DMA_Start_IT+0xee>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d155      	bne.n	8006cd0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681a      	ldr	r2, [r3, #0]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 0201 	bic.w	r2, r2, #1
 8006c40:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	68f8      	ldr	r0, [r7, #12]
 8006c4a:	f000 f8fb 	bl	8006e44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d008      	beq.n	8006c68 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f042 020e 	orr.w	r2, r2, #14
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	e00f      	b.n	8006c88 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0204 	bic.w	r2, r2, #4
 8006c76:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 020a 	orr.w	r2, r2, #10
 8006c86:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d007      	beq.n	8006ca6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ca0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ca4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d007      	beq.n	8006cbe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cbc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f042 0201 	orr.w	r2, r2, #1
 8006ccc:	601a      	str	r2, [r3, #0]
 8006cce:	e005      	b.n	8006cdc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006cd8:	2302      	movs	r3, #2
 8006cda:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d02:	f003 031f 	and.w	r3, r3, #31
 8006d06:	2204      	movs	r2, #4
 8006d08:	409a      	lsls	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d026      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x7a>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d021      	beq.n	8006d60 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d107      	bne.n	8006d3a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0204 	bic.w	r2, r2, #4
 8006d38:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d3e:	f003 021f 	and.w	r2, r3, #31
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d46:	2104      	movs	r1, #4
 8006d48:	fa01 f202 	lsl.w	r2, r1, r2
 8006d4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d071      	beq.n	8006e3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006d5e:	e06c      	b.n	8006e3a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d64:	f003 031f 	and.w	r3, r3, #31
 8006d68:	2202      	movs	r2, #2
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4013      	ands	r3, r2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d02e      	beq.n	8006dd2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d029      	beq.n	8006dd2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10b      	bne.n	8006da4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 020a 	bic.w	r2, r2, #10
 8006d9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da8:	f003 021f 	and.w	r2, r3, #31
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db0:	2102      	movs	r1, #2
 8006db2:	fa01 f202 	lsl.w	r2, r1, r2
 8006db6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d038      	beq.n	8006e3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006dd0:	e033      	b.n	8006e3a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dd6:	f003 031f 	and.w	r3, r3, #31
 8006dda:	2208      	movs	r2, #8
 8006ddc:	409a      	lsls	r2, r3
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	4013      	ands	r3, r2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d02a      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d025      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 020e 	bic.w	r2, r2, #14
 8006dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e04:	f003 021f 	and.w	r2, r3, #31
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8006e12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d004      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006e3a:	bf00      	nop
 8006e3c:	bf00      	nop
}
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
 8006e50:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006e5a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006e6c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e72:	f003 021f 	and.w	r2, r3, #31
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e7a:	2101      	movs	r1, #1
 8006e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8006e80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	2b10      	cmp	r3, #16
 8006e90:	d108      	bne.n	8006ea4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006ea2:	e007      	b.n	8006eb4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	60da      	str	r2, [r3, #12]
}
 8006eb4:	bf00      	nop
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	4b16      	ldr	r3, [pc, #88]	@ (8006f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d802      	bhi.n	8006eda <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006ed4:	4b15      	ldr	r3, [pc, #84]	@ (8006f2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	e001      	b.n	8006ede <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006eda:	4b15      	ldr	r3, [pc, #84]	@ (8006f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006edc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	3b08      	subs	r3, #8
 8006eea:	4a12      	ldr	r2, [pc, #72]	@ (8006f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006eec:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef0:	091b      	lsrs	r3, r3, #4
 8006ef2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef8:	089b      	lsrs	r3, r3, #2
 8006efa:	009a      	lsls	r2, r3, #2
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	4413      	add	r3, r2
 8006f00:	461a      	mov	r2, r3
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a0b      	ldr	r2, [pc, #44]	@ (8006f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006f0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f003 031f 	and.w	r3, r3, #31
 8006f12:	2201      	movs	r2, #1
 8006f14:	409a      	lsls	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006f1a:	bf00      	nop
 8006f1c:	371c      	adds	r7, #28
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr
 8006f26:	bf00      	nop
 8006f28:	40020407 	.word	0x40020407
 8006f2c:	40020800 	.word	0x40020800
 8006f30:	40020820 	.word	0x40020820
 8006f34:	cccccccd 	.word	0xcccccccd
 8006f38:	40020880 	.word	0x40020880

08006f3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	461a      	mov	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a08      	ldr	r2, [pc, #32]	@ (8006f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006f5e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	f003 031f 	and.w	r3, r3, #31
 8006f68:	2201      	movs	r2, #1
 8006f6a:	409a      	lsls	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006f70:	bf00      	nop
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr
 8006f7c:	1000823f 	.word	0x1000823f
 8006f80:	40020940 	.word	0x40020940

08006f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006f92:	e15a      	b.n	800724a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	2101      	movs	r1, #1
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f000 814c 	beq.w	8007244 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f003 0303 	and.w	r3, r3, #3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d005      	beq.n	8006fc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	685b      	ldr	r3, [r3, #4]
 8006fbc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d130      	bne.n	8007026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	005b      	lsls	r3, r3, #1
 8006fce:	2203      	movs	r2, #3
 8006fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd4:	43db      	mvns	r3, r3
 8006fd6:	693a      	ldr	r2, [r7, #16]
 8006fd8:	4013      	ands	r3, r2
 8006fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe8:	693a      	ldr	r2, [r7, #16]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8007002:	43db      	mvns	r3, r3
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4013      	ands	r3, r2
 8007008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	091b      	lsrs	r3, r3, #4
 8007010:	f003 0201 	and.w	r2, r3, #1
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	2b03      	cmp	r3, #3
 8007030:	d017      	beq.n	8007062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	005b      	lsls	r3, r3, #1
 800703c:	2203      	movs	r2, #3
 800703e:	fa02 f303 	lsl.w	r3, r2, r3
 8007042:	43db      	mvns	r3, r3
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	4013      	ands	r3, r2
 8007048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	689a      	ldr	r2, [r3, #8]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	fa02 f303 	lsl.w	r3, r2, r3
 8007056:	693a      	ldr	r2, [r7, #16]
 8007058:	4313      	orrs	r3, r2
 800705a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	693a      	ldr	r2, [r7, #16]
 8007060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f003 0303 	and.w	r3, r3, #3
 800706a:	2b02      	cmp	r3, #2
 800706c:	d123      	bne.n	80070b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	08da      	lsrs	r2, r3, #3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	3208      	adds	r2, #8
 8007076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	220f      	movs	r2, #15
 8007086:	fa02 f303 	lsl.w	r3, r2, r3
 800708a:	43db      	mvns	r3, r3
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	4013      	ands	r3, r2
 8007090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	fa02 f303 	lsl.w	r3, r2, r3
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	08da      	lsrs	r2, r3, #3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3208      	adds	r2, #8
 80070b0:	6939      	ldr	r1, [r7, #16]
 80070b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	005b      	lsls	r3, r3, #1
 80070c0:	2203      	movs	r2, #3
 80070c2:	fa02 f303 	lsl.w	r3, r2, r3
 80070c6:	43db      	mvns	r3, r3
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	4013      	ands	r3, r2
 80070cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f003 0203 	and.w	r2, r3, #3
 80070d6:	697b      	ldr	r3, [r7, #20]
 80070d8:	005b      	lsls	r3, r3, #1
 80070da:	fa02 f303 	lsl.w	r3, r2, r3
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 80a6 	beq.w	8007244 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80070f8:	4b5b      	ldr	r3, [pc, #364]	@ (8007268 <HAL_GPIO_Init+0x2e4>)
 80070fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070fc:	4a5a      	ldr	r2, [pc, #360]	@ (8007268 <HAL_GPIO_Init+0x2e4>)
 80070fe:	f043 0301 	orr.w	r3, r3, #1
 8007102:	6613      	str	r3, [r2, #96]	@ 0x60
 8007104:	4b58      	ldr	r3, [pc, #352]	@ (8007268 <HAL_GPIO_Init+0x2e4>)
 8007106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007108:	f003 0301 	and.w	r3, r3, #1
 800710c:	60bb      	str	r3, [r7, #8]
 800710e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007110:	4a56      	ldr	r2, [pc, #344]	@ (800726c <HAL_GPIO_Init+0x2e8>)
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	089b      	lsrs	r3, r3, #2
 8007116:	3302      	adds	r3, #2
 8007118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800711c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	f003 0303 	and.w	r3, r3, #3
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	220f      	movs	r2, #15
 8007128:	fa02 f303 	lsl.w	r3, r2, r3
 800712c:	43db      	mvns	r3, r3
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	4013      	ands	r3, r2
 8007132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800713a:	d01f      	beq.n	800717c <HAL_GPIO_Init+0x1f8>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a4c      	ldr	r2, [pc, #304]	@ (8007270 <HAL_GPIO_Init+0x2ec>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d019      	beq.n	8007178 <HAL_GPIO_Init+0x1f4>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a4b      	ldr	r2, [pc, #300]	@ (8007274 <HAL_GPIO_Init+0x2f0>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d013      	beq.n	8007174 <HAL_GPIO_Init+0x1f0>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a4a      	ldr	r2, [pc, #296]	@ (8007278 <HAL_GPIO_Init+0x2f4>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00d      	beq.n	8007170 <HAL_GPIO_Init+0x1ec>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a49      	ldr	r2, [pc, #292]	@ (800727c <HAL_GPIO_Init+0x2f8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d007      	beq.n	800716c <HAL_GPIO_Init+0x1e8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a48      	ldr	r2, [pc, #288]	@ (8007280 <HAL_GPIO_Init+0x2fc>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d101      	bne.n	8007168 <HAL_GPIO_Init+0x1e4>
 8007164:	2305      	movs	r3, #5
 8007166:	e00a      	b.n	800717e <HAL_GPIO_Init+0x1fa>
 8007168:	2306      	movs	r3, #6
 800716a:	e008      	b.n	800717e <HAL_GPIO_Init+0x1fa>
 800716c:	2304      	movs	r3, #4
 800716e:	e006      	b.n	800717e <HAL_GPIO_Init+0x1fa>
 8007170:	2303      	movs	r3, #3
 8007172:	e004      	b.n	800717e <HAL_GPIO_Init+0x1fa>
 8007174:	2302      	movs	r3, #2
 8007176:	e002      	b.n	800717e <HAL_GPIO_Init+0x1fa>
 8007178:	2301      	movs	r3, #1
 800717a:	e000      	b.n	800717e <HAL_GPIO_Init+0x1fa>
 800717c:	2300      	movs	r3, #0
 800717e:	697a      	ldr	r2, [r7, #20]
 8007180:	f002 0203 	and.w	r2, r2, #3
 8007184:	0092      	lsls	r2, r2, #2
 8007186:	4093      	lsls	r3, r2
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800718e:	4937      	ldr	r1, [pc, #220]	@ (800726c <HAL_GPIO_Init+0x2e8>)
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	089b      	lsrs	r3, r3, #2
 8007194:	3302      	adds	r3, #2
 8007196:	693a      	ldr	r2, [r7, #16]
 8007198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800719c:	4b39      	ldr	r3, [pc, #228]	@ (8007284 <HAL_GPIO_Init+0x300>)
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	43db      	mvns	r3, r3
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	4013      	ands	r3, r2
 80071aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	4313      	orrs	r3, r2
 80071be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80071c0:	4a30      	ldr	r2, [pc, #192]	@ (8007284 <HAL_GPIO_Init+0x300>)
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80071c6:	4b2f      	ldr	r3, [pc, #188]	@ (8007284 <HAL_GPIO_Init+0x300>)
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	43db      	mvns	r3, r3
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	4013      	ands	r3, r2
 80071d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d003      	beq.n	80071ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80071ea:	4a26      	ldr	r2, [pc, #152]	@ (8007284 <HAL_GPIO_Init+0x300>)
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80071f0:	4b24      	ldr	r3, [pc, #144]	@ (8007284 <HAL_GPIO_Init+0x300>)
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	43db      	mvns	r3, r3
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	4013      	ands	r3, r2
 80071fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	4313      	orrs	r3, r2
 8007212:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007214:	4a1b      	ldr	r2, [pc, #108]	@ (8007284 <HAL_GPIO_Init+0x300>)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800721a:	4b1a      	ldr	r3, [pc, #104]	@ (8007284 <HAL_GPIO_Init+0x300>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	43db      	mvns	r3, r3
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	4013      	ands	r3, r2
 8007228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	4313      	orrs	r3, r2
 800723c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800723e:	4a11      	ldr	r2, [pc, #68]	@ (8007284 <HAL_GPIO_Init+0x300>)
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	3301      	adds	r3, #1
 8007248:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	fa22 f303 	lsr.w	r3, r2, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	f47f ae9d 	bne.w	8006f94 <HAL_GPIO_Init+0x10>
  }
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	40021000 	.word	0x40021000
 800726c:	40010000 	.word	0x40010000
 8007270:	48000400 	.word	0x48000400
 8007274:	48000800 	.word	0x48000800
 8007278:	48000c00 	.word	0x48000c00
 800727c:	48001000 	.word	0x48001000
 8007280:	48001400 	.word	0x48001400
 8007284:	40010400 	.word	0x40010400

08007288 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	691a      	ldr	r2, [r3, #16]
 8007298:	887b      	ldrh	r3, [r7, #2]
 800729a:	4013      	ands	r3, r2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80072a0:	2301      	movs	r3, #1
 80072a2:	73fb      	strb	r3, [r7, #15]
 80072a4:	e001      	b.n	80072aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80072a6:	2300      	movs	r3, #0
 80072a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	460b      	mov	r3, r1
 80072c2:	807b      	strh	r3, [r7, #2]
 80072c4:	4613      	mov	r3, r2
 80072c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80072c8:	787b      	ldrb	r3, [r7, #1]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d003      	beq.n	80072d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80072ce:	887a      	ldrh	r2, [r7, #2]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80072d4:	e002      	b.n	80072dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80072d6:	887a      	ldrh	r2, [r7, #2]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80072fa:	887a      	ldrh	r2, [r7, #2]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	4013      	ands	r3, r2
 8007300:	041a      	lsls	r2, r3, #16
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	43d9      	mvns	r1, r3
 8007306:	887b      	ldrh	r3, [r7, #2]
 8007308:	400b      	ands	r3, r1
 800730a:	431a      	orrs	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	619a      	str	r2, [r3, #24]
}
 8007310:	bf00      	nop
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800732a:	2301      	movs	r3, #1
 800732c:	e0c0      	b.n	80074b0 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8007334:	b2db      	uxtb	r3, r3
 8007336:	2b00      	cmp	r3, #0
 8007338:	d106      	bne.n	8007348 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f009 fabe 	bl	80108c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2203      	movs	r2, #3
 800734c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4618      	mov	r0, r3
 8007356:	f005 f8f2 	bl	800c53e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800735a:	2300      	movs	r3, #0
 800735c:	73fb      	strb	r3, [r7, #15]
 800735e:	e03e      	b.n	80073de <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007360:	7bfa      	ldrb	r2, [r7, #15]
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	4613      	mov	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	440b      	add	r3, r1
 800736e:	3311      	adds	r3, #17
 8007370:	2201      	movs	r2, #1
 8007372:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007374:	7bfa      	ldrb	r2, [r7, #15]
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	4613      	mov	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	440b      	add	r3, r1
 8007382:	3310      	adds	r3, #16
 8007384:	7bfa      	ldrb	r2, [r7, #15]
 8007386:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007388:	7bfa      	ldrb	r2, [r7, #15]
 800738a:	6879      	ldr	r1, [r7, #4]
 800738c:	4613      	mov	r3, r2
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	4413      	add	r3, r2
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	440b      	add	r3, r1
 8007396:	3313      	adds	r3, #19
 8007398:	2200      	movs	r2, #0
 800739a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800739c:	7bfa      	ldrb	r2, [r7, #15]
 800739e:	6879      	ldr	r1, [r7, #4]
 80073a0:	4613      	mov	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	4413      	add	r3, r2
 80073a6:	00db      	lsls	r3, r3, #3
 80073a8:	440b      	add	r3, r1
 80073aa:	3320      	adds	r3, #32
 80073ac:	2200      	movs	r2, #0
 80073ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80073b0:	7bfa      	ldrb	r2, [r7, #15]
 80073b2:	6879      	ldr	r1, [r7, #4]
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	440b      	add	r3, r1
 80073be:	3324      	adds	r3, #36	@ 0x24
 80073c0:	2200      	movs	r2, #0
 80073c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80073c4:	7bfb      	ldrb	r3, [r7, #15]
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	1c5a      	adds	r2, r3, #1
 80073ca:	4613      	mov	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	4413      	add	r3, r2
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	440b      	add	r3, r1
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073d8:	7bfb      	ldrb	r3, [r7, #15]
 80073da:	3301      	adds	r3, #1
 80073dc:	73fb      	strb	r3, [r7, #15]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	791b      	ldrb	r3, [r3, #4]
 80073e2:	7bfa      	ldrb	r2, [r7, #15]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d3bb      	bcc.n	8007360 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073e8:	2300      	movs	r3, #0
 80073ea:	73fb      	strb	r3, [r7, #15]
 80073ec:	e044      	b.n	8007478 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80073ee:	7bfa      	ldrb	r2, [r7, #15]
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	4613      	mov	r3, r2
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	440b      	add	r3, r1
 80073fc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8007400:	2200      	movs	r2, #0
 8007402:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007404:	7bfa      	ldrb	r2, [r7, #15]
 8007406:	6879      	ldr	r1, [r7, #4]
 8007408:	4613      	mov	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	440b      	add	r3, r1
 8007412:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007416:	7bfa      	ldrb	r2, [r7, #15]
 8007418:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800741a:	7bfa      	ldrb	r2, [r7, #15]
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	00db      	lsls	r3, r3, #3
 8007426:	440b      	add	r3, r1
 8007428:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800742c:	2200      	movs	r2, #0
 800742e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007430:	7bfa      	ldrb	r2, [r7, #15]
 8007432:	6879      	ldr	r1, [r7, #4]
 8007434:	4613      	mov	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	4413      	add	r3, r2
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	440b      	add	r3, r1
 800743e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007446:	7bfa      	ldrb	r2, [r7, #15]
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	4613      	mov	r3, r2
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	00db      	lsls	r3, r3, #3
 8007452:	440b      	add	r3, r1
 8007454:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007458:	2200      	movs	r2, #0
 800745a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800745c:	7bfa      	ldrb	r2, [r7, #15]
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	440b      	add	r3, r1
 800746a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800746e:	2200      	movs	r2, #0
 8007470:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007472:	7bfb      	ldrb	r3, [r7, #15]
 8007474:	3301      	adds	r3, #1
 8007476:	73fb      	strb	r3, [r7, #15]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	791b      	ldrb	r3, [r3, #4]
 800747c:	7bfa      	ldrb	r2, [r7, #15]
 800747e:	429a      	cmp	r2, r3
 8007480:	d3b5      	bcc.n	80073ee <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6818      	ldr	r0, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3304      	adds	r3, #4
 800748a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800748e:	f005 f871 	bl	800c574 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	7a9b      	ldrb	r3, [r3, #10]
 80074a4:	2b01      	cmp	r3, #1
 80074a6:	d102      	bne.n	80074ae <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f001 fc42 	bl	8008d32 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d101      	bne.n	80074ce <HAL_PCD_Start+0x16>
 80074ca:	2302      	movs	r3, #2
 80074cc:	e012      	b.n	80074f4 <HAL_PCD_Start+0x3c>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4618      	mov	r0, r3
 80074dc:	f005 f818 	bl	800c510 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f007 fad9 	bl	800ea9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4618      	mov	r0, r3
 800750a:	f007 fade 	bl	800eaca <USB_ReadInterrupts>
 800750e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fb06 	bl	8007b2c <PCD_EP_ISR_Handler>

    return;
 8007520:	e110      	b.n	8007744 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007528:	2b00      	cmp	r3, #0
 800752a:	d013      	beq.n	8007554 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007534:	b29a      	uxth	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800753e:	b292      	uxth	r2, r2
 8007540:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f009 fa4e 	bl	80109e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800754a:	2100      	movs	r1, #0
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f8fc 	bl	800774a <HAL_PCD_SetAddress>

    return;
 8007552:	e0f7      	b.n	8007744 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00c      	beq.n	8007578 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007566:	b29a      	uxth	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007570:	b292      	uxth	r2, r2
 8007572:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007576:	e0e5      	b.n	8007744 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00c      	beq.n	800759c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800758a:	b29a      	uxth	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007594:	b292      	uxth	r2, r2
 8007596:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800759a:	e0d3      	b.n	8007744 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d034      	beq.n	8007610 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80075ae:	b29a      	uxth	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0204 	bic.w	r2, r2, #4
 80075b8:	b292      	uxth	r2, r2
 80075ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 0208 	bic.w	r2, r2, #8
 80075d0:	b292      	uxth	r2, r2
 80075d2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d107      	bne.n	80075f0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80075e8:	2100      	movs	r1, #0
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f009 fbee 	bl	8010dcc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f009 fa31 	bl	8010a58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80075fe:	b29a      	uxth	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007608:	b292      	uxth	r2, r2
 800760a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800760e:	e099      	b.n	8007744 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007616:	2b00      	cmp	r3, #0
 8007618:	d027      	beq.n	800766a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007622:	b29a      	uxth	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f042 0208 	orr.w	r2, r2, #8
 800762c:	b292      	uxth	r2, r2
 800762e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800763a:	b29a      	uxth	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007644:	b292      	uxth	r2, r2
 8007646:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007652:	b29a      	uxth	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f042 0204 	orr.w	r2, r2, #4
 800765c:	b292      	uxth	r2, r2
 800765e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f009 f9de 	bl	8010a24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007668:	e06c      	b.n	8007744 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007670:	2b00      	cmp	r3, #0
 8007672:	d040      	beq.n	80076f6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800767c:	b29a      	uxth	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007686:	b292      	uxth	r2, r2
 8007688:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8007692:	2b00      	cmp	r3, #0
 8007694:	d12b      	bne.n	80076ee <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800769e:	b29a      	uxth	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f042 0204 	orr.w	r2, r2, #4
 80076a8:	b292      	uxth	r2, r2
 80076aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f042 0208 	orr.w	r2, r2, #8
 80076c0:	b292      	uxth	r2, r2
 80076c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	089b      	lsrs	r3, r3, #2
 80076da:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80076e4:	2101      	movs	r1, #1
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f009 fb70 	bl	8010dcc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80076ec:	e02a      	b.n	8007744 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f009 f998 	bl	8010a24 <HAL_PCD_SuspendCallback>
    return;
 80076f4:	e026      	b.n	8007744 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00f      	beq.n	8007720 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007708:	b29a      	uxth	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007712:	b292      	uxth	r2, r2
 8007714:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f009 f956 	bl	80109ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800771e:	e011      	b.n	8007744 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00c      	beq.n	8007744 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007732:	b29a      	uxth	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800773c:	b292      	uxth	r2, r2
 800773e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007742:	bf00      	nop
  }
}
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b082      	sub	sp, #8
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	460b      	mov	r3, r1
 8007754:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_PCD_SetAddress+0x1a>
 8007760:	2302      	movs	r3, #2
 8007762:	e012      	b.n	800778a <HAL_PCD_SetAddress+0x40>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	78fa      	ldrb	r2, [r7, #3]
 8007770:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	78fa      	ldrb	r2, [r7, #3]
 8007778:	4611      	mov	r1, r2
 800777a:	4618      	mov	r0, r3
 800777c:	f007 f97a 	bl	800ea74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	4608      	mov	r0, r1
 800779c:	4611      	mov	r1, r2
 800779e:	461a      	mov	r2, r3
 80077a0:	4603      	mov	r3, r0
 80077a2:	70fb      	strb	r3, [r7, #3]
 80077a4:	460b      	mov	r3, r1
 80077a6:	803b      	strh	r3, [r7, #0]
 80077a8:	4613      	mov	r3, r2
 80077aa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80077b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	da0e      	bge.n	80077d6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	f003 0207 	and.w	r2, r3, #7
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	00db      	lsls	r3, r3, #3
 80077c6:	3310      	adds	r3, #16
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	4413      	add	r3, r2
 80077cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2201      	movs	r2, #1
 80077d2:	705a      	strb	r2, [r3, #1]
 80077d4:	e00e      	b.n	80077f4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077d6:	78fb      	ldrb	r3, [r7, #3]
 80077d8:	f003 0207 	and.w	r2, r3, #7
 80077dc:	4613      	mov	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	4413      	add	r3, r2
 80077e2:	00db      	lsls	r3, r3, #3
 80077e4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	4413      	add	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80077f4:	78fb      	ldrb	r3, [r7, #3]
 80077f6:	f003 0307 	and.w	r3, r3, #7
 80077fa:	b2da      	uxtb	r2, r3
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007800:	883b      	ldrh	r3, [r7, #0]
 8007802:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	78ba      	ldrb	r2, [r7, #2]
 800780e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007810:	78bb      	ldrb	r3, [r7, #2]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d102      	bne.n	800781c <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2200      	movs	r2, #0
 800781a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007822:	2b01      	cmp	r3, #1
 8007824:	d101      	bne.n	800782a <HAL_PCD_EP_Open+0x98>
 8007826:	2302      	movs	r3, #2
 8007828:	e00e      	b.n	8007848 <HAL_PCD_EP_Open+0xb6>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2201      	movs	r2, #1
 800782e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68f9      	ldr	r1, [r7, #12]
 8007838:	4618      	mov	r0, r3
 800783a:	f004 feb9 	bl	800c5b0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8007846:	7afb      	ldrb	r3, [r7, #11]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	460b      	mov	r3, r1
 800785a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800785c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007860:	2b00      	cmp	r3, #0
 8007862:	da0e      	bge.n	8007882 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	f003 0207 	and.w	r2, r3, #7
 800786a:	4613      	mov	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4413      	add	r3, r2
 8007870:	00db      	lsls	r3, r3, #3
 8007872:	3310      	adds	r3, #16
 8007874:	687a      	ldr	r2, [r7, #4]
 8007876:	4413      	add	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2201      	movs	r2, #1
 800787e:	705a      	strb	r2, [r3, #1]
 8007880:	e00e      	b.n	80078a0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	f003 0207 	and.w	r2, r3, #7
 8007888:	4613      	mov	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	00db      	lsls	r3, r3, #3
 8007890:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	4413      	add	r3, r2
 8007898:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2200      	movs	r2, #0
 800789e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	f003 0307 	and.w	r3, r3, #7
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d101      	bne.n	80078ba <HAL_PCD_EP_Close+0x6a>
 80078b6:	2302      	movs	r3, #2
 80078b8:	e00e      	b.n	80078d8 <HAL_PCD_EP_Close+0x88>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	68f9      	ldr	r1, [r7, #12]
 80078c8:	4618      	mov	r0, r3
 80078ca:	f005 fa35 	bl	800cd38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b086      	sub	sp, #24
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	607a      	str	r2, [r7, #4]
 80078ea:	603b      	str	r3, [r7, #0]
 80078ec:	460b      	mov	r3, r1
 80078ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078f0:	7afb      	ldrb	r3, [r7, #11]
 80078f2:	f003 0207 	and.w	r2, r3, #7
 80078f6:	4613      	mov	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007902:	68fa      	ldr	r2, [r7, #12]
 8007904:	4413      	add	r3, r2
 8007906:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2200      	movs	r2, #0
 8007918:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2200      	movs	r2, #0
 800791e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007920:	7afb      	ldrb	r3, [r7, #11]
 8007922:	f003 0307 	and.w	r3, r3, #7
 8007926:	b2da      	uxtb	r2, r3
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	6979      	ldr	r1, [r7, #20]
 8007932:	4618      	mov	r0, r3
 8007934:	f005 fbed 	bl	800d112 <USB_EPStartXfer>

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007942:	b480      	push	{r7}
 8007944:	b083      	sub	sp, #12
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	460b      	mov	r3, r1
 800794c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800794e:	78fb      	ldrb	r3, [r7, #3]
 8007950:	f003 0207 	and.w	r2, r3, #7
 8007954:	6879      	ldr	r1, [r7, #4]
 8007956:	4613      	mov	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	440b      	add	r3, r1
 8007960:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007964:	681b      	ldr	r3, [r3, #0]
}
 8007966:	4618      	mov	r0, r3
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b086      	sub	sp, #24
 8007976:	af00      	add	r7, sp, #0
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
 800797e:	460b      	mov	r3, r1
 8007980:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007982:	7afb      	ldrb	r3, [r7, #11]
 8007984:	f003 0207 	and.w	r2, r3, #7
 8007988:	4613      	mov	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	00db      	lsls	r3, r3, #3
 8007990:	3310      	adds	r3, #16
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	4413      	add	r3, r2
 8007996:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2200      	movs	r2, #0
 80079b6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	2201      	movs	r2, #1
 80079bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079be:	7afb      	ldrb	r3, [r7, #11]
 80079c0:	f003 0307 	and.w	r3, r3, #7
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	6979      	ldr	r1, [r7, #20]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f005 fb9e 	bl	800d112 <USB_EPStartXfer>

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3718      	adds	r7, #24
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	7912      	ldrb	r2, [r2, #4]
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d901      	bls.n	80079fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e03e      	b.n	8007a7c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80079fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	da0e      	bge.n	8007a24 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a06:	78fb      	ldrb	r3, [r7, #3]
 8007a08:	f003 0207 	and.w	r2, r3, #7
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4413      	add	r3, r2
 8007a12:	00db      	lsls	r3, r3, #3
 8007a14:	3310      	adds	r3, #16
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	4413      	add	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	705a      	strb	r2, [r3, #1]
 8007a22:	e00c      	b.n	8007a3e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007a24:	78fa      	ldrb	r2, [r7, #3]
 8007a26:	4613      	mov	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	00db      	lsls	r3, r3, #3
 8007a2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	4413      	add	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2201      	movs	r2, #1
 8007a42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a44:	78fb      	ldrb	r3, [r7, #3]
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	b2da      	uxtb	r2, r3
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d101      	bne.n	8007a5e <HAL_PCD_EP_SetStall+0x7e>
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e00e      	b.n	8007a7c <HAL_PCD_EP_SetStall+0x9c>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	68f9      	ldr	r1, [r7, #12]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f006 ff02 	bl	800e876 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007a90:	78fb      	ldrb	r3, [r7, #3]
 8007a92:	f003 030f 	and.w	r3, r3, #15
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	7912      	ldrb	r2, [r2, #4]
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d901      	bls.n	8007aa2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e040      	b.n	8007b24 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007aa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	da0e      	bge.n	8007ac8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	f003 0207 	and.w	r2, r3, #7
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	3310      	adds	r3, #16
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	4413      	add	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	705a      	strb	r2, [r3, #1]
 8007ac6:	e00e      	b.n	8007ae6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007ac8:	78fb      	ldrb	r3, [r7, #3]
 8007aca:	f003 0207 	and.w	r2, r3, #7
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	00db      	lsls	r3, r3, #3
 8007ad6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	4413      	add	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007aec:	78fb      	ldrb	r3, [r7, #3]
 8007aee:	f003 0307 	and.w	r3, r3, #7
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d101      	bne.n	8007b06 <HAL_PCD_EP_ClrStall+0x82>
 8007b02:	2302      	movs	r3, #2
 8007b04:	e00e      	b.n	8007b24 <HAL_PCD_EP_ClrStall+0xa0>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2201      	movs	r2, #1
 8007b0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68f9      	ldr	r1, [r7, #12]
 8007b14:	4618      	mov	r0, r3
 8007b16:	f006 feff 	bl	800e918 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b096      	sub	sp, #88	@ 0x58
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007b34:	e3ad      	b.n	8008292 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007b3e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007b42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8007b50:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f040 816f 	bne.w	8007e38 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007b5a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007b5e:	f003 0310 	and.w	r3, r3, #16
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d14c      	bne.n	8007c00 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b76:	81fb      	strh	r3, [r7, #14]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681a      	ldr	r2, [r3, #0]
 8007b7c:	89fb      	ldrh	r3, [r7, #14]
 8007b7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3310      	adds	r3, #16
 8007b8e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	00db      	lsls	r3, r3, #3
 8007ba2:	4413      	add	r3, r2
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	6812      	ldr	r2, [r2, #0]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bb6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bba:	695a      	ldr	r2, [r3, #20]
 8007bbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bbe:	69db      	ldr	r3, [r3, #28]
 8007bc0:	441a      	add	r2, r3
 8007bc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bc4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007bc6:	2100      	movs	r1, #0
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f008 fee4 	bl	8010996 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	7b1b      	ldrb	r3, [r3, #12]
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 835c 	beq.w	8008292 <PCD_EP_ISR_Handler+0x766>
 8007bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007bdc:	699b      	ldr	r3, [r3, #24]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	f040 8357 	bne.w	8008292 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	7b1b      	ldrb	r3, [r3, #12]
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	731a      	strb	r2, [r3, #12]
 8007bfe:	e348      	b.n	8008292 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007c06:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007c12:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007c16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d032      	beq.n	8007c84 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	461a      	mov	r2, r3
 8007c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	4413      	add	r3, r2
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	6812      	ldr	r2, [r2, #0]
 8007c36:	4413      	add	r3, r2
 8007c38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c44:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c52:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c56:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	f006 ff88 	bl	800eb6e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	823b      	strh	r3, [r7, #16]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	8a3a      	ldrh	r2, [r7, #16]
 8007c74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007c78:	b292      	uxth	r2, r2
 8007c7a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007c7c:	6878      	ldr	r0, [r7, #4]
 8007c7e:	f008 fe5d 	bl	801093c <HAL_PCD_SetupStageCallback>
 8007c82:	e306      	b.n	8008292 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007c84:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f280 8302 	bge.w	8008292 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	881b      	ldrh	r3, [r3, #0]
 8007c94:	b29a      	uxth	r2, r3
 8007c96:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	83fb      	strh	r3, [r7, #30]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	8bfa      	ldrh	r2, [r7, #30]
 8007ca4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007ca8:	b292      	uxth	r2, r2
 8007caa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	00db      	lsls	r3, r3, #3
 8007cbe:	4413      	add	r3, r2
 8007cc0:	687a      	ldr	r2, [r7, #4]
 8007cc2:	6812      	ldr	r2, [r2, #0]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007cca:	881b      	ldrh	r3, [r3, #0]
 8007ccc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cd2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cd6:	69db      	ldr	r3, [r3, #28]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d019      	beq.n	8007d10 <PCD_EP_ISR_Handler+0x1e4>
 8007cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cde:	695b      	ldr	r3, [r3, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d015      	beq.n	8007d10 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6818      	ldr	r0, [r3, #0]
 8007ce8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cea:	6959      	ldr	r1, [r3, #20]
 8007cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007cf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cf2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	f006 ff3a 	bl	800eb6e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cfc:	695a      	ldr	r2, [r3, #20]
 8007cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	441a      	add	r2, r3
 8007d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d06:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007d08:	2100      	movs	r1, #0
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f008 fe28 	bl	8010960 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007d1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007d1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f040 82b5 	bne.w	8008292 <PCD_EP_ISR_Handler+0x766>
 8007d28:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007d2c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007d30:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d34:	f000 82ad 	beq.w	8008292 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	61bb      	str	r3, [r7, #24]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d46:	b29b      	uxth	r3, r3
 8007d48:	461a      	mov	r2, r3
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	61bb      	str	r3, [r7, #24]
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d56:	617b      	str	r3, [r7, #20]
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d62:	b29a      	uxth	r2, r3
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	801a      	strh	r2, [r3, #0]
 8007d68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10a      	bne.n	8007d86 <PCD_EP_ISR_Handler+0x25a>
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	881b      	ldrh	r3, [r3, #0]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d7e:	b29a      	uxth	r2, r3
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	801a      	strh	r2, [r3, #0]
 8007d84:	e039      	b.n	8007dfa <PCD_EP_ISR_Handler+0x2ce>
 8007d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d8c:	d818      	bhi.n	8007dc0 <PCD_EP_ISR_Handler+0x294>
 8007d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d90:	691b      	ldr	r3, [r3, #16]
 8007d92:	085b      	lsrs	r3, r3, #1
 8007d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <PCD_EP_ISR_Handler+0x27c>
 8007da2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007da4:	3301      	adds	r3, #1
 8007da6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	029b      	lsls	r3, r3, #10
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	4313      	orrs	r3, r2
 8007db8:	b29a      	uxth	r2, r3
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	801a      	strh	r2, [r3, #0]
 8007dbe:	e01c      	b.n	8007dfa <PCD_EP_ISR_Handler+0x2ce>
 8007dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	095b      	lsrs	r3, r3, #5
 8007dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dca:	691b      	ldr	r3, [r3, #16]
 8007dcc:	f003 031f 	and.w	r3, r3, #31
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d102      	bne.n	8007dda <PCD_EP_ISR_Handler+0x2ae>
 8007dd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	881b      	ldrh	r3, [r3, #0]
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	029b      	lsls	r3, r3, #10
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	4313      	orrs	r3, r2
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007df0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	881b      	ldrh	r3, [r3, #0]
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e0a:	827b      	strh	r3, [r7, #18]
 8007e0c:	8a7b      	ldrh	r3, [r7, #18]
 8007e0e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e12:	827b      	strh	r3, [r7, #18]
 8007e14:	8a7b      	ldrh	r3, [r7, #18]
 8007e16:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007e1a:	827b      	strh	r3, [r7, #18]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	8a7b      	ldrh	r3, [r7, #18]
 8007e22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	8013      	strh	r3, [r2, #0]
 8007e36:	e22c      	b.n	8008292 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	4413      	add	r3, r2
 8007e46:	881b      	ldrh	r3, [r3, #0]
 8007e48:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007e4c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f280 80f6 	bge.w	8008042 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	881b      	ldrh	r3, [r3, #0]
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007e7c:	009b      	lsls	r3, r3, #2
 8007e7e:	4413      	add	r3, r2
 8007e80:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8007e84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007e88:	b292      	uxth	r2, r2
 8007e8a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007e8c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007e90:	4613      	mov	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ea4:	7b1b      	ldrb	r3, [r3, #12]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d123      	bne.n	8007ef2 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007eb2:	b29b      	uxth	r3, r3
 8007eb4:	461a      	mov	r2, r3
 8007eb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	00db      	lsls	r3, r3, #3
 8007ebc:	4413      	add	r3, r2
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	6812      	ldr	r2, [r2, #0]
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ece:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8007ed2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 808e 	beq.w	8007ff8 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6818      	ldr	r0, [r3, #0]
 8007ee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ee2:	6959      	ldr	r1, [r3, #20]
 8007ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ee6:	88da      	ldrh	r2, [r3, #6]
 8007ee8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007eec:	f006 fe3f 	bl	800eb6e <USB_ReadPMA>
 8007ef0:	e082      	b.n	8007ff8 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007ef2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ef4:	78db      	ldrb	r3, [r3, #3]
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d10a      	bne.n	8007f10 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007efa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007efe:	461a      	mov	r2, r3
 8007f00:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f000 f9d3 	bl	80082ae <HAL_PCD_EP_DB_Receive>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8007f0e:	e073      	b.n	8007ff8 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	461a      	mov	r2, r3
 8007f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	4413      	add	r3, r2
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f2a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	009b      	lsls	r3, r3, #2
 8007f3a:	441a      	add	r2, r3
 8007f3c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8007f40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	881b      	ldrh	r3, [r3, #0]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d022      	beq.n	8007fb4 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	461a      	mov	r2, r3
 8007f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	00db      	lsls	r3, r3, #3
 8007f80:	4413      	add	r3, r2
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	6812      	ldr	r2, [r2, #0]
 8007f86:	4413      	add	r3, r2
 8007f88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007f8c:	881b      	ldrh	r3, [r3, #0]
 8007f8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f92:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007f96:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d02c      	beq.n	8007ff8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6818      	ldr	r0, [r3, #0]
 8007fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fa4:	6959      	ldr	r1, [r3, #20]
 8007fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fa8:	891a      	ldrh	r2, [r3, #8]
 8007faa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007fae:	f006 fdde 	bl	800eb6e <USB_ReadPMA>
 8007fb2:	e021      	b.n	8007ff8 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	00db      	lsls	r3, r3, #3
 8007fc6:	4413      	add	r3, r2
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	6812      	ldr	r2, [r2, #0]
 8007fcc:	4413      	add	r3, r2
 8007fce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007fd2:	881b      	ldrh	r3, [r3, #0]
 8007fd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fd8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007fdc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d009      	beq.n	8007ff8 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6818      	ldr	r0, [r3, #0]
 8007fe8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fea:	6959      	ldr	r1, [r3, #20]
 8007fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fee:	895a      	ldrh	r2, [r3, #10]
 8007ff0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007ff4:	f006 fdbb 	bl	800eb6e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8007ff8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ffa:	69da      	ldr	r2, [r3, #28]
 8007ffc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008000:	441a      	add	r2, r3
 8008002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008004:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8008006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008008:	695a      	ldr	r2, [r3, #20]
 800800a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800800e:	441a      	add	r2, r3
 8008010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008012:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d005      	beq.n	8008028 <PCD_EP_ISR_Handler+0x4fc>
 800801c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8008020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	429a      	cmp	r2, r3
 8008026:	d206      	bcs.n	8008036 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008028:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f008 fc96 	bl	8010960 <HAL_PCD_DataOutStageCallback>
 8008034:	e005      	b.n	8008042 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800803c:	4618      	mov	r0, r3
 800803e:	f005 f868 	bl	800d112 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8008042:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 8121 	beq.w	8008292 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8008050:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008054:	4613      	mov	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	4413      	add	r3, r2
 800805a:	00db      	lsls	r3, r3, #3
 800805c:	3310      	adds	r3, #16
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	4413      	add	r3, r2
 8008062:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
 800806a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	b29b      	uxth	r3, r3
 8008076:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800807a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800807e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	441a      	add	r2, r3
 8008090:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8008094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800809c:	b29b      	uxth	r3, r3
 800809e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80080a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080a2:	78db      	ldrb	r3, [r3, #3]
 80080a4:	2b01      	cmp	r3, #1
 80080a6:	f040 80a2 	bne.w	80081ee <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80080aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ac:	2200      	movs	r2, #0
 80080ae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80080b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080b2:	7b1b      	ldrb	r3, [r3, #12]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f000 8093 	beq.w	80081e0 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80080ba:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80080be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d046      	beq.n	8008154 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80080c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080c8:	785b      	ldrb	r3, [r3, #1]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d126      	bne.n	800811c <PCD_EP_ISR_Handler+0x5f0>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080dc:	b29b      	uxth	r3, r3
 80080de:	461a      	mov	r2, r3
 80080e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e2:	4413      	add	r3, r2
 80080e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80080e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	00da      	lsls	r2, r3, #3
 80080ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ee:	4413      	add	r3, r2
 80080f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80080f4:	623b      	str	r3, [r7, #32]
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008100:	b29a      	uxth	r2, r3
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	801a      	strh	r2, [r3, #0]
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	881b      	ldrh	r3, [r3, #0]
 800810a:	b29b      	uxth	r3, r3
 800810c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008114:	b29a      	uxth	r2, r3
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	801a      	strh	r2, [r3, #0]
 800811a:	e061      	b.n	80081e0 <PCD_EP_ISR_Handler+0x6b4>
 800811c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800811e:	785b      	ldrb	r3, [r3, #1]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d15d      	bne.n	80081e0 <PCD_EP_ISR_Handler+0x6b4>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008132:	b29b      	uxth	r3, r3
 8008134:	461a      	mov	r2, r3
 8008136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008138:	4413      	add	r3, r2
 800813a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800813c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	00da      	lsls	r2, r3, #3
 8008142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008144:	4413      	add	r3, r2
 8008146:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800814a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800814c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814e:	2200      	movs	r2, #0
 8008150:	801a      	strh	r2, [r3, #0]
 8008152:	e045      	b.n	80081e0 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800815a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800815c:	785b      	ldrb	r3, [r3, #1]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d126      	bne.n	80081b0 <PCD_EP_ISR_Handler+0x684>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	637b      	str	r3, [r7, #52]	@ 0x34
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008170:	b29b      	uxth	r3, r3
 8008172:	461a      	mov	r2, r3
 8008174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008176:	4413      	add	r3, r2
 8008178:	637b      	str	r3, [r7, #52]	@ 0x34
 800817a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	00da      	lsls	r2, r3, #3
 8008180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008182:	4413      	add	r3, r2
 8008184:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008188:	633b      	str	r3, [r7, #48]	@ 0x30
 800818a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	b29b      	uxth	r3, r3
 8008190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008194:	b29a      	uxth	r2, r3
 8008196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008198:	801a      	strh	r2, [r3, #0]
 800819a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819c:	881b      	ldrh	r3, [r3, #0]
 800819e:	b29b      	uxth	r3, r3
 80081a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ac:	801a      	strh	r2, [r3, #0]
 80081ae:	e017      	b.n	80081e0 <PCD_EP_ISR_Handler+0x6b4>
 80081b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081b2:	785b      	ldrb	r3, [r3, #1]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d113      	bne.n	80081e0 <PCD_EP_ISR_Handler+0x6b4>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	461a      	mov	r2, r3
 80081c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081c6:	4413      	add	r3, r2
 80081c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	00da      	lsls	r2, r3, #3
 80081d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081d2:	4413      	add	r3, r2
 80081d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80081d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081dc:	2200      	movs	r2, #0
 80081de:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80081e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f008 fbd5 	bl	8010996 <HAL_PCD_DataInStageCallback>
 80081ec:	e051      	b.n	8008292 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80081ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80081f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d144      	bne.n	8008284 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008202:	b29b      	uxth	r3, r3
 8008204:	461a      	mov	r2, r3
 8008206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	4413      	add	r3, r2
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6812      	ldr	r2, [r2, #0]
 8008212:	4413      	add	r3, r2
 8008214:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800821e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8008222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008224:	699a      	ldr	r2, [r3, #24]
 8008226:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800822a:	429a      	cmp	r2, r3
 800822c:	d907      	bls.n	800823e <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800822e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008230:	699a      	ldr	r2, [r3, #24]
 8008232:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008236:	1ad2      	subs	r2, r2, r3
 8008238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800823a:	619a      	str	r2, [r3, #24]
 800823c:	e002      	b.n	8008244 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800823e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008240:	2200      	movs	r2, #0
 8008242:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008244:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008246:	699b      	ldr	r3, [r3, #24]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d106      	bne.n	800825a <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800824c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f008 fb9f 	bl	8010996 <HAL_PCD_DataInStageCallback>
 8008258:	e01b      	b.n	8008292 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800825a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800825c:	695a      	ldr	r2, [r3, #20]
 800825e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008262:	441a      	add	r2, r3
 8008264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008266:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800826a:	69da      	ldr	r2, [r3, #28]
 800826c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008270:	441a      	add	r2, r3
 8008272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008274:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800827c:	4618      	mov	r0, r3
 800827e:	f004 ff48 	bl	800d112 <USB_EPStartXfer>
 8008282:	e006      	b.n	8008292 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008284:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008288:	461a      	mov	r2, r3
 800828a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 f917 	bl	80084c0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800829a:	b29b      	uxth	r3, r3
 800829c:	b21b      	sxth	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	f6ff ac49 	blt.w	8007b36 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80082a4:	2300      	movs	r3, #0
}
 80082a6:	4618      	mov	r0, r3
 80082a8:	3758      	adds	r7, #88	@ 0x58
 80082aa:	46bd      	mov	sp, r7
 80082ac:	bd80      	pop	{r7, pc}

080082ae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b088      	sub	sp, #32
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	60f8      	str	r0, [r7, #12]
 80082b6:	60b9      	str	r1, [r7, #8]
 80082b8:	4613      	mov	r3, r2
 80082ba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80082bc:	88fb      	ldrh	r3, [r7, #6]
 80082be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d07c      	beq.n	80083c0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	461a      	mov	r2, r3
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	00db      	lsls	r3, r3, #3
 80082d8:	4413      	add	r3, r2
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	6812      	ldr	r2, [r2, #0]
 80082de:	4413      	add	r3, r2
 80082e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80082ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	699a      	ldr	r2, [r3, #24]
 80082f0:	8b7b      	ldrh	r3, [r7, #26]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d306      	bcc.n	8008304 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	699a      	ldr	r2, [r3, #24]
 80082fa:	8b7b      	ldrh	r3, [r7, #26]
 80082fc:	1ad2      	subs	r2, r2, r3
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	619a      	str	r2, [r3, #24]
 8008302:	e002      	b.n	800830a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2200      	movs	r2, #0
 8008308:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d123      	bne.n	800835a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	461a      	mov	r2, r3
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	781b      	ldrb	r3, [r3, #0]
 800831c:	009b      	lsls	r3, r3, #2
 800831e:	4413      	add	r3, r2
 8008320:	881b      	ldrh	r3, [r3, #0]
 8008322:	b29b      	uxth	r3, r3
 8008324:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800832c:	833b      	strh	r3, [r7, #24]
 800832e:	8b3b      	ldrh	r3, [r7, #24]
 8008330:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008334:	833b      	strh	r3, [r7, #24]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	441a      	add	r2, r3
 8008344:	8b3b      	ldrh	r3, [r7, #24]
 8008346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800834a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800834e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008352:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008356:	b29b      	uxth	r3, r3
 8008358:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800835a:	88fb      	ldrh	r3, [r7, #6]
 800835c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008360:	2b00      	cmp	r3, #0
 8008362:	d01f      	beq.n	80083a4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	461a      	mov	r2, r3
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	4413      	add	r3, r2
 8008372:	881b      	ldrh	r3, [r3, #0]
 8008374:	b29b      	uxth	r3, r3
 8008376:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800837a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800837e:	82fb      	strh	r3, [r7, #22]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	441a      	add	r2, r3
 800838e:	8afb      	ldrh	r3, [r7, #22]
 8008390:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008394:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008398:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800839c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80083a4:	8b7b      	ldrh	r3, [r7, #26]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	f000 8085 	beq.w	80084b6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6818      	ldr	r0, [r3, #0]
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	6959      	ldr	r1, [r3, #20]
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	891a      	ldrh	r2, [r3, #8]
 80083b8:	8b7b      	ldrh	r3, [r7, #26]
 80083ba:	f006 fbd8 	bl	800eb6e <USB_ReadPMA>
 80083be:	e07a      	b.n	80084b6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	461a      	mov	r2, r3
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	4413      	add	r3, r2
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	6812      	ldr	r2, [r2, #0]
 80083d8:	4413      	add	r3, r2
 80083da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80083de:	881b      	ldrh	r3, [r3, #0]
 80083e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083e4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	699a      	ldr	r2, [r3, #24]
 80083ea:	8b7b      	ldrh	r3, [r7, #26]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d306      	bcc.n	80083fe <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	699a      	ldr	r2, [r3, #24]
 80083f4:	8b7b      	ldrh	r3, [r7, #26]
 80083f6:	1ad2      	subs	r2, r2, r3
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	619a      	str	r2, [r3, #24]
 80083fc:	e002      	b.n	8008404 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2200      	movs	r2, #0
 8008402:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d123      	bne.n	8008454 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	461a      	mov	r2, r3
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	881b      	ldrh	r3, [r3, #0]
 800841c:	b29b      	uxth	r3, r3
 800841e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008426:	83fb      	strh	r3, [r7, #30]
 8008428:	8bfb      	ldrh	r3, [r7, #30]
 800842a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800842e:	83fb      	strh	r3, [r7, #30]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	461a      	mov	r2, r3
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	441a      	add	r2, r3
 800843e:	8bfb      	ldrh	r3, [r7, #30]
 8008440:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008444:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800844c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008450:	b29b      	uxth	r3, r3
 8008452:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8008454:	88fb      	ldrh	r3, [r7, #6]
 8008456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800845a:	2b00      	cmp	r3, #0
 800845c:	d11f      	bne.n	800849e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	781b      	ldrb	r3, [r3, #0]
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	b29b      	uxth	r3, r3
 8008470:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008474:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008478:	83bb      	strh	r3, [r7, #28]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	441a      	add	r2, r3
 8008488:	8bbb      	ldrh	r3, [r7, #28]
 800848a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800848e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008496:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800849a:	b29b      	uxth	r3, r3
 800849c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800849e:	8b7b      	ldrh	r3, [r7, #26]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d008      	beq.n	80084b6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6818      	ldr	r0, [r3, #0]
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	6959      	ldr	r1, [r3, #20]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	895a      	ldrh	r2, [r3, #10]
 80084b0:	8b7b      	ldrh	r3, [r7, #26]
 80084b2:	f006 fb5c 	bl	800eb6e <USB_ReadPMA>
    }
  }

  return count;
 80084b6:	8b7b      	ldrh	r3, [r7, #26]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3720      	adds	r7, #32
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b0a4      	sub	sp, #144	@ 0x90
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	4613      	mov	r3, r2
 80084cc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80084ce:	88fb      	ldrh	r3, [r7, #6]
 80084d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 81db 	beq.w	8008890 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	461a      	mov	r2, r3
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	4413      	add	r3, r2
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	6812      	ldr	r2, [r2, #0]
 80084f2:	4413      	add	r3, r2
 80084f4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80084f8:	881b      	ldrh	r3, [r3, #0]
 80084fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084fe:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	699a      	ldr	r2, [r3, #24]
 8008506:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800850a:	429a      	cmp	r2, r3
 800850c:	d907      	bls.n	800851e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	699a      	ldr	r2, [r3, #24]
 8008512:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008516:	1ad2      	subs	r2, r2, r3
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	619a      	str	r2, [r3, #24]
 800851c:	e002      	b.n	8008524 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	2200      	movs	r2, #0
 8008522:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	699b      	ldr	r3, [r3, #24]
 8008528:	2b00      	cmp	r3, #0
 800852a:	f040 80b9 	bne.w	80086a0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	785b      	ldrb	r3, [r3, #1]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d126      	bne.n	8008584 <HAL_PCD_EP_DB_Transmit+0xc4>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008544:	b29b      	uxth	r3, r3
 8008546:	461a      	mov	r2, r3
 8008548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800854a:	4413      	add	r3, r2
 800854c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	00da      	lsls	r2, r3, #3
 8008554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008556:	4413      	add	r3, r2
 8008558:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800855c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800855e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008560:	881b      	ldrh	r3, [r3, #0]
 8008562:	b29b      	uxth	r3, r3
 8008564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008568:	b29a      	uxth	r2, r3
 800856a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856c:	801a      	strh	r2, [r3, #0]
 800856e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008570:	881b      	ldrh	r3, [r3, #0]
 8008572:	b29b      	uxth	r3, r3
 8008574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800857c:	b29a      	uxth	r2, r3
 800857e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008580:	801a      	strh	r2, [r3, #0]
 8008582:	e01a      	b.n	80085ba <HAL_PCD_EP_DB_Transmit+0xfa>
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	785b      	ldrb	r3, [r3, #1]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d116      	bne.n	80085ba <HAL_PCD_EP_DB_Transmit+0xfa>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	637b      	str	r3, [r7, #52]	@ 0x34
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800859a:	b29b      	uxth	r3, r3
 800859c:	461a      	mov	r2, r3
 800859e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085a0:	4413      	add	r3, r2
 80085a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	00da      	lsls	r2, r3, #3
 80085aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ac:	4413      	add	r3, r2
 80085ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80085b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b6:	2200      	movs	r2, #0
 80085b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	627b      	str	r3, [r7, #36]	@ 0x24
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	785b      	ldrb	r3, [r3, #1]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d126      	bne.n	8008616 <HAL_PCD_EP_DB_Transmit+0x156>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	61fb      	str	r3, [r7, #28]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085d6:	b29b      	uxth	r3, r3
 80085d8:	461a      	mov	r2, r3
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	4413      	add	r3, r2
 80085de:	61fb      	str	r3, [r7, #28]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	00da      	lsls	r2, r3, #3
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	4413      	add	r3, r2
 80085ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80085ee:	61bb      	str	r3, [r7, #24]
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	881b      	ldrh	r3, [r3, #0]
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085fa:	b29a      	uxth	r2, r3
 80085fc:	69bb      	ldr	r3, [r7, #24]
 80085fe:	801a      	strh	r2, [r3, #0]
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	881b      	ldrh	r3, [r3, #0]
 8008604:	b29b      	uxth	r3, r3
 8008606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800860a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800860e:	b29a      	uxth	r2, r3
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	801a      	strh	r2, [r3, #0]
 8008614:	e017      	b.n	8008646 <HAL_PCD_EP_DB_Transmit+0x186>
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	785b      	ldrb	r3, [r3, #1]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d113      	bne.n	8008646 <HAL_PCD_EP_DB_Transmit+0x186>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008626:	b29b      	uxth	r3, r3
 8008628:	461a      	mov	r2, r3
 800862a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862c:	4413      	add	r3, r2
 800862e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	00da      	lsls	r2, r3, #3
 8008636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008638:	4413      	add	r3, r2
 800863a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800863e:	623b      	str	r3, [r7, #32]
 8008640:	6a3b      	ldr	r3, [r7, #32]
 8008642:	2200      	movs	r2, #0
 8008644:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	4619      	mov	r1, r3
 800864c:	68f8      	ldr	r0, [r7, #12]
 800864e:	f008 f9a2 	bl	8010996 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008652:	88fb      	ldrh	r3, [r7, #6]
 8008654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 82fa 	beq.w	8008c52 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	461a      	mov	r2, r3
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	4413      	add	r3, r2
 800866c:	881b      	ldrh	r3, [r3, #0]
 800866e:	b29b      	uxth	r3, r3
 8008670:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008674:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008678:	82fb      	strh	r3, [r7, #22]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	441a      	add	r2, r3
 8008688:	8afb      	ldrh	r3, [r7, #22]
 800868a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800868e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008692:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008696:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800869a:	b29b      	uxth	r3, r3
 800869c:	8013      	strh	r3, [r2, #0]
 800869e:	e2d8      	b.n	8008c52 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80086a0:	88fb      	ldrh	r3, [r7, #6]
 80086a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d021      	beq.n	80086ee <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80086c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086c4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	461a      	mov	r2, r3
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	441a      	add	r2, r3
 80086d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80086da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80086e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	f040 82ac 	bne.w	8008c52 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	695a      	ldr	r2, [r3, #20]
 80086fe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008702:	441a      	add	r2, r3
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	69da      	ldr	r2, [r3, #28]
 800870c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008710:	441a      	add	r2, r3
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	6a1a      	ldr	r2, [r3, #32]
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	429a      	cmp	r2, r3
 8008720:	d30b      	bcc.n	800873a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	691b      	ldr	r3, [r3, #16]
 8008726:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	6a1a      	ldr	r2, [r3, #32]
 800872e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008732:	1ad2      	subs	r2, r2, r3
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	621a      	str	r2, [r3, #32]
 8008738:	e017      	b.n	800876a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d108      	bne.n	8008754 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8008742:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008746:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2200      	movs	r2, #0
 800874e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008752:	e00a      	b.n	800876a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	2200      	movs	r2, #0
 8008758:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	6a1b      	ldr	r3, [r3, #32]
 8008760:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2200      	movs	r2, #0
 8008768:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	785b      	ldrb	r3, [r3, #1]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d165      	bne.n	800883e <HAL_PCD_EP_DB_Transmit+0x37e>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008780:	b29b      	uxth	r3, r3
 8008782:	461a      	mov	r2, r3
 8008784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008786:	4413      	add	r3, r2
 8008788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	781b      	ldrb	r3, [r3, #0]
 800878e:	00da      	lsls	r2, r3, #3
 8008790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008792:	4413      	add	r3, r2
 8008794:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008798:	63bb      	str	r3, [r7, #56]	@ 0x38
 800879a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	b29b      	uxth	r3, r3
 80087a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a8:	801a      	strh	r2, [r3, #0]
 80087aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d10a      	bne.n	80087c8 <HAL_PCD_EP_DB_Transmit+0x308>
 80087b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b4:	881b      	ldrh	r3, [r3, #0]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087c0:	b29a      	uxth	r2, r3
 80087c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c4:	801a      	strh	r2, [r3, #0]
 80087c6:	e057      	b.n	8008878 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80087c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087cc:	2b3e      	cmp	r3, #62	@ 0x3e
 80087ce:	d818      	bhi.n	8008802 <HAL_PCD_EP_DB_Transmit+0x342>
 80087d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087d4:	085b      	lsrs	r3, r3, #1
 80087d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <HAL_PCD_EP_DB_Transmit+0x32a>
 80087e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087e6:	3301      	adds	r3, #1
 80087e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ec:	881b      	ldrh	r3, [r3, #0]
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	029b      	lsls	r3, r3, #10
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	4313      	orrs	r3, r2
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fe:	801a      	strh	r2, [r3, #0]
 8008800:	e03a      	b.n	8008878 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008802:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008806:	095b      	lsrs	r3, r3, #5
 8008808:	64bb      	str	r3, [r7, #72]	@ 0x48
 800880a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800880e:	f003 031f 	and.w	r3, r3, #31
 8008812:	2b00      	cmp	r3, #0
 8008814:	d102      	bne.n	800881c <HAL_PCD_EP_DB_Transmit+0x35c>
 8008816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008818:	3b01      	subs	r3, #1
 800881a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800881c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	b29a      	uxth	r2, r3
 8008822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008824:	b29b      	uxth	r3, r3
 8008826:	029b      	lsls	r3, r3, #10
 8008828:	b29b      	uxth	r3, r3
 800882a:	4313      	orrs	r3, r2
 800882c:	b29b      	uxth	r3, r3
 800882e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008836:	b29a      	uxth	r2, r3
 8008838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883a:	801a      	strh	r2, [r3, #0]
 800883c:	e01c      	b.n	8008878 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	785b      	ldrb	r3, [r3, #1]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d118      	bne.n	8008878 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	647b      	str	r3, [r7, #68]	@ 0x44
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008854:	b29b      	uxth	r3, r3
 8008856:	461a      	mov	r2, r3
 8008858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800885a:	4413      	add	r3, r2
 800885c:	647b      	str	r3, [r7, #68]	@ 0x44
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	00da      	lsls	r2, r3, #3
 8008864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008866:	4413      	add	r3, r2
 8008868:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800886c:	643b      	str	r3, [r7, #64]	@ 0x40
 800886e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008872:	b29a      	uxth	r2, r3
 8008874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008876:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6818      	ldr	r0, [r3, #0]
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	6959      	ldr	r1, [r3, #20]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	891a      	ldrh	r2, [r3, #8]
 8008884:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008888:	b29b      	uxth	r3, r3
 800888a:	f006 f92e 	bl	800eaea <USB_WritePMA>
 800888e:	e1e0      	b.n	8008c52 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008898:	b29b      	uxth	r3, r3
 800889a:	461a      	mov	r2, r3
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	00db      	lsls	r3, r3, #3
 80088a2:	4413      	add	r3, r2
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	6812      	ldr	r2, [r2, #0]
 80088a8:	4413      	add	r3, r2
 80088aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80088ae:	881b      	ldrh	r3, [r3, #0]
 80088b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088b4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	699a      	ldr	r2, [r3, #24]
 80088bc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d307      	bcc.n	80088d4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	699a      	ldr	r2, [r3, #24]
 80088c8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80088cc:	1ad2      	subs	r2, r2, r3
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	619a      	str	r2, [r3, #24]
 80088d2:	e002      	b.n	80088da <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	2200      	movs	r2, #0
 80088d8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	699b      	ldr	r3, [r3, #24]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	f040 80c0 	bne.w	8008a64 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	785b      	ldrb	r3, [r3, #1]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d126      	bne.n	800893a <HAL_PCD_EP_DB_Transmit+0x47a>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	461a      	mov	r2, r3
 80088fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008900:	4413      	add	r3, r2
 8008902:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	00da      	lsls	r2, r3, #3
 800890a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800890c:	4413      	add	r3, r2
 800890e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008912:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008914:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008916:	881b      	ldrh	r3, [r3, #0]
 8008918:	b29b      	uxth	r3, r3
 800891a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800891e:	b29a      	uxth	r2, r3
 8008920:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008922:	801a      	strh	r2, [r3, #0]
 8008924:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008926:	881b      	ldrh	r3, [r3, #0]
 8008928:	b29b      	uxth	r3, r3
 800892a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800892e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008932:	b29a      	uxth	r2, r3
 8008934:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008936:	801a      	strh	r2, [r3, #0]
 8008938:	e01a      	b.n	8008970 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	785b      	ldrb	r3, [r3, #1]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d116      	bne.n	8008970 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	667b      	str	r3, [r7, #100]	@ 0x64
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008950:	b29b      	uxth	r3, r3
 8008952:	461a      	mov	r2, r3
 8008954:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008956:	4413      	add	r3, r2
 8008958:	667b      	str	r3, [r7, #100]	@ 0x64
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	00da      	lsls	r2, r3, #3
 8008960:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008962:	4413      	add	r3, r2
 8008964:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008968:	663b      	str	r3, [r7, #96]	@ 0x60
 800896a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800896c:	2200      	movs	r2, #0
 800896e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	677b      	str	r3, [r7, #116]	@ 0x74
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	785b      	ldrb	r3, [r3, #1]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d12b      	bne.n	80089d6 <HAL_PCD_EP_DB_Transmit+0x516>
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800898c:	b29b      	uxth	r3, r3
 800898e:	461a      	mov	r2, r3
 8008990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008992:	4413      	add	r3, r2
 8008994:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	00da      	lsls	r2, r3, #3
 800899c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800899e:	4413      	add	r3, r2
 80089a0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80089a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80089a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089ba:	801a      	strh	r2, [r3, #0]
 80089bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089c0:	881b      	ldrh	r3, [r3, #0]
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80089d2:	801a      	strh	r2, [r3, #0]
 80089d4:	e017      	b.n	8008a06 <HAL_PCD_EP_DB_Transmit+0x546>
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	785b      	ldrb	r3, [r3, #1]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d113      	bne.n	8008a06 <HAL_PCD_EP_DB_Transmit+0x546>
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	461a      	mov	r2, r3
 80089ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089ec:	4413      	add	r3, r2
 80089ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	00da      	lsls	r2, r3, #3
 80089f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089f8:	4413      	add	r3, r2
 80089fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80089fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a00:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a02:	2200      	movs	r2, #0
 8008a04:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f007 ffc2 	bl	8010996 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008a12:	88fb      	ldrh	r3, [r7, #6]
 8008a14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f040 811a 	bne.w	8008c52 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	461a      	mov	r2, r3
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	781b      	ldrb	r3, [r3, #0]
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4413      	add	r3, r2
 8008a2c:	881b      	ldrh	r3, [r3, #0]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a38:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	461a      	mov	r2, r3
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	441a      	add	r2, r3
 8008a4a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008a4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a5e:	b29b      	uxth	r3, r3
 8008a60:	8013      	strh	r3, [r2, #0]
 8008a62:	e0f6      	b.n	8008c52 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008a64:	88fb      	ldrh	r3, [r7, #6]
 8008a66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d121      	bne.n	8008ab2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	4413      	add	r3, r2
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a88:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	441a      	add	r2, r3
 8008a9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008a9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008aa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008aa6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	f040 80ca 	bne.w	8008c52 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	695a      	ldr	r2, [r3, #20]
 8008ac2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008ac6:	441a      	add	r2, r3
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	69da      	ldr	r2, [r3, #28]
 8008ad0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008ad4:	441a      	add	r2, r3
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	6a1a      	ldr	r2, [r3, #32]
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	429a      	cmp	r2, r3
 8008ae4:	d30b      	bcc.n	8008afe <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	6a1a      	ldr	r2, [r3, #32]
 8008af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008af6:	1ad2      	subs	r2, r2, r3
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	621a      	str	r2, [r3, #32]
 8008afc:	e017      	b.n	8008b2e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d108      	bne.n	8008b18 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8008b06:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008b0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2200      	movs	r2, #0
 8008b12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008b16:	e00a      	b.n	8008b2e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	6a1b      	ldr	r3, [r3, #32]
 8008b1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	2200      	movs	r2, #0
 8008b24:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	785b      	ldrb	r3, [r3, #1]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d165      	bne.n	8008c08 <HAL_PCD_EP_DB_Transmit+0x748>
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b50:	4413      	add	r3, r2
 8008b52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	00da      	lsls	r2, r3, #3
 8008b5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008b62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b66:	881b      	ldrh	r3, [r3, #0]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b72:	801a      	strh	r2, [r3, #0]
 8008b74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10a      	bne.n	8008b92 <HAL_PCD_EP_DB_Transmit+0x6d2>
 8008b7c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b7e:	881b      	ldrh	r3, [r3, #0]
 8008b80:	b29b      	uxth	r3, r3
 8008b82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b8a:	b29a      	uxth	r2, r3
 8008b8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008b8e:	801a      	strh	r2, [r3, #0]
 8008b90:	e054      	b.n	8008c3c <HAL_PCD_EP_DB_Transmit+0x77c>
 8008b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b96:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b98:	d818      	bhi.n	8008bcc <HAL_PCD_EP_DB_Transmit+0x70c>
 8008b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008b9e:	085b      	lsrs	r3, r3, #1
 8008ba0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ba6:	f003 0301 	and.w	r3, r3, #1
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d002      	beq.n	8008bb4 <HAL_PCD_EP_DB_Transmit+0x6f4>
 8008bae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bb6:	881b      	ldrh	r3, [r3, #0]
 8008bb8:	b29a      	uxth	r2, r3
 8008bba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bbc:	b29b      	uxth	r3, r3
 8008bbe:	029b      	lsls	r3, r3, #10
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008bc8:	801a      	strh	r2, [r3, #0]
 8008bca:	e037      	b.n	8008c3c <HAL_PCD_EP_DB_Transmit+0x77c>
 8008bcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bd0:	095b      	lsrs	r3, r3, #5
 8008bd2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bd8:	f003 031f 	and.w	r3, r3, #31
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d102      	bne.n	8008be6 <HAL_PCD_EP_DB_Transmit+0x726>
 8008be0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008be2:	3b01      	subs	r3, #1
 8008be4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008be6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008be8:	881b      	ldrh	r3, [r3, #0]
 8008bea:	b29a      	uxth	r2, r3
 8008bec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	029b      	lsls	r3, r3, #10
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	b29b      	uxth	r3, r3
 8008bf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c00:	b29a      	uxth	r2, r3
 8008c02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c04:	801a      	strh	r2, [r3, #0]
 8008c06:	e019      	b.n	8008c3c <HAL_PCD_EP_DB_Transmit+0x77c>
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	785b      	ldrb	r3, [r3, #1]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d115      	bne.n	8008c3c <HAL_PCD_EP_DB_Transmit+0x77c>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c1e:	4413      	add	r3, r2
 8008c20:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	00da      	lsls	r2, r3, #3
 8008c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c30:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c3a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6818      	ldr	r0, [r3, #0]
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	6959      	ldr	r1, [r3, #20]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	895a      	ldrh	r2, [r3, #10]
 8008c48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	f005 ff4c 	bl	800eaea <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	461a      	mov	r2, r3
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	b29b      	uxth	r3, r3
 8008c64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c6c:	82bb      	strh	r3, [r7, #20]
 8008c6e:	8abb      	ldrh	r3, [r7, #20]
 8008c70:	f083 0310 	eor.w	r3, r3, #16
 8008c74:	82bb      	strh	r3, [r7, #20]
 8008c76:	8abb      	ldrh	r3, [r7, #20]
 8008c78:	f083 0320 	eor.w	r3, r3, #32
 8008c7c:	82bb      	strh	r3, [r7, #20]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	461a      	mov	r2, r3
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	441a      	add	r2, r3
 8008c8c:	8abb      	ldrh	r3, [r7, #20]
 8008c8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3790      	adds	r7, #144	@ 0x90
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	607b      	str	r3, [r7, #4]
 8008cb6:	460b      	mov	r3, r1
 8008cb8:	817b      	strh	r3, [r7, #10]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008cbe:	897b      	ldrh	r3, [r7, #10]
 8008cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00b      	beq.n	8008ce2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cca:	897b      	ldrh	r3, [r7, #10]
 8008ccc:	f003 0207 	and.w	r2, r3, #7
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	009b      	lsls	r3, r3, #2
 8008cd4:	4413      	add	r3, r2
 8008cd6:	00db      	lsls	r3, r3, #3
 8008cd8:	3310      	adds	r3, #16
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	4413      	add	r3, r2
 8008cde:	617b      	str	r3, [r7, #20]
 8008ce0:	e009      	b.n	8008cf6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008ce2:	897a      	ldrh	r2, [r7, #10]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	00db      	lsls	r3, r3, #3
 8008cec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008cf0:	68fa      	ldr	r2, [r7, #12]
 8008cf2:	4413      	add	r3, r2
 8008cf4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008cf6:	893b      	ldrh	r3, [r7, #8]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d107      	bne.n	8008d0c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	80da      	strh	r2, [r3, #6]
 8008d0a:	e00b      	b.n	8008d24 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	0c1b      	lsrs	r3, r3, #16
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr

08008d32 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b085      	sub	sp, #20
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	f043 0301 	orr.w	r3, r3, #1
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	f043 0302 	orr.w	r3, r3, #2
 8008d70:	b29a      	uxth	r2, r3
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d84:	4770      	bx	lr
	...

08008d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d141      	bne.n	8008e1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008d96:	4b4b      	ldr	r3, [pc, #300]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008da2:	d131      	bne.n	8008e08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008da4:	4b47      	ldr	r3, [pc, #284]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008daa:	4a46      	ldr	r2, [pc, #280]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008db0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008db4:	4b43      	ldr	r3, [pc, #268]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008dbc:	4a41      	ldr	r2, [pc, #260]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008dc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008dc4:	4b40      	ldr	r3, [pc, #256]	@ (8008ec8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2232      	movs	r2, #50	@ 0x32
 8008dca:	fb02 f303 	mul.w	r3, r2, r3
 8008dce:	4a3f      	ldr	r2, [pc, #252]	@ (8008ecc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008dd4:	0c9b      	lsrs	r3, r3, #18
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008dda:	e002      	b.n	8008de2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	3b01      	subs	r3, #1
 8008de0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008de2:	4b38      	ldr	r3, [pc, #224]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008de4:	695b      	ldr	r3, [r3, #20]
 8008de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dee:	d102      	bne.n	8008df6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1f2      	bne.n	8008ddc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008df6:	4b33      	ldr	r3, [pc, #204]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e02:	d158      	bne.n	8008eb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008e04:	2303      	movs	r3, #3
 8008e06:	e057      	b.n	8008eb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e08:	4b2e      	ldr	r3, [pc, #184]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008e18:	e04d      	b.n	8008eb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e20:	d141      	bne.n	8008ea6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008e22:	4b28      	ldr	r3, [pc, #160]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e2e:	d131      	bne.n	8008e94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e30:	4b24      	ldr	r3, [pc, #144]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e36:	4a23      	ldr	r2, [pc, #140]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e40:	4b20      	ldr	r3, [pc, #128]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008e48:	4a1e      	ldr	r2, [pc, #120]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008e4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008e50:	4b1d      	ldr	r3, [pc, #116]	@ (8008ec8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2232      	movs	r2, #50	@ 0x32
 8008e56:	fb02 f303 	mul.w	r3, r2, r3
 8008e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8008ecc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8008e60:	0c9b      	lsrs	r3, r3, #18
 8008e62:	3301      	adds	r3, #1
 8008e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e66:	e002      	b.n	8008e6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e6e:	4b15      	ldr	r3, [pc, #84]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e70:	695b      	ldr	r3, [r3, #20]
 8008e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e7a:	d102      	bne.n	8008e82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1f2      	bne.n	8008e68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008e82:	4b10      	ldr	r3, [pc, #64]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e84:	695b      	ldr	r3, [r3, #20]
 8008e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e8e:	d112      	bne.n	8008eb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008e90:	2303      	movs	r3, #3
 8008e92:	e011      	b.n	8008eb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e94:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ea0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008ea4:	e007      	b.n	8008eb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008ea6:	4b07      	ldr	r3, [pc, #28]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008eae:	4a05      	ldr	r2, [pc, #20]	@ (8008ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008eb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008eb4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3714      	adds	r7, #20
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec2:	4770      	bx	lr
 8008ec4:	40007000 	.word	0x40007000
 8008ec8:	20000054 	.word	0x20000054
 8008ecc:	431bde83 	.word	0x431bde83

08008ed0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008ed4:	4b05      	ldr	r3, [pc, #20]	@ (8008eec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	4a04      	ldr	r2, [pc, #16]	@ (8008eec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008eda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008ede:	6093      	str	r3, [r2, #8]
}
 8008ee0:	bf00      	nop
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr
 8008eea:	bf00      	nop
 8008eec:	40007000 	.word	0x40007000

08008ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b088      	sub	sp, #32
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d101      	bne.n	8008f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e2fe      	b.n	8009500 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f003 0301 	and.w	r3, r3, #1
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d075      	beq.n	8008ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f0e:	4b97      	ldr	r3, [pc, #604]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f003 030c 	and.w	r3, r3, #12
 8008f16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008f18:	4b94      	ldr	r3, [pc, #592]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	f003 0303 	and.w	r3, r3, #3
 8008f20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	2b0c      	cmp	r3, #12
 8008f26:	d102      	bne.n	8008f2e <HAL_RCC_OscConfig+0x3e>
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d002      	beq.n	8008f34 <HAL_RCC_OscConfig+0x44>
 8008f2e:	69bb      	ldr	r3, [r7, #24]
 8008f30:	2b08      	cmp	r3, #8
 8008f32:	d10b      	bne.n	8008f4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f34:	4b8d      	ldr	r3, [pc, #564]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d05b      	beq.n	8008ff8 <HAL_RCC_OscConfig+0x108>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d157      	bne.n	8008ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	e2d9      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f54:	d106      	bne.n	8008f64 <HAL_RCC_OscConfig+0x74>
 8008f56:	4b85      	ldr	r3, [pc, #532]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a84      	ldr	r2, [pc, #528]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8008f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f60:	6013      	str	r3, [r2, #0]
 8008f62:	e01d      	b.n	8008fa0 <HAL_RCC_OscConfig+0xb0>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f6c:	d10c      	bne.n	8008f88 <HAL_RCC_OscConfig+0x98>
 8008f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a7e      	ldr	r2, [pc, #504]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8008f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	4b7c      	ldr	r3, [pc, #496]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a7b      	ldr	r2, [pc, #492]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8008f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	e00b      	b.n	8008fa0 <HAL_RCC_OscConfig+0xb0>
 8008f88:	4b78      	ldr	r3, [pc, #480]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a77      	ldr	r2, [pc, #476]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8008f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f92:	6013      	str	r3, [r2, #0]
 8008f94:	4b75      	ldr	r3, [pc, #468]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a74      	ldr	r2, [pc, #464]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8008f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d013      	beq.n	8008fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fa8:	f7fb fbb6 	bl	8004718 <HAL_GetTick>
 8008fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008fae:	e008      	b.n	8008fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fb0:	f7fb fbb2 	bl	8004718 <HAL_GetTick>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	2b64      	cmp	r3, #100	@ 0x64
 8008fbc:	d901      	bls.n	8008fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e29e      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d0f0      	beq.n	8008fb0 <HAL_RCC_OscConfig+0xc0>
 8008fce:	e014      	b.n	8008ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fd0:	f7fb fba2 	bl	8004718 <HAL_GetTick>
 8008fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008fd6:	e008      	b.n	8008fea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008fd8:	f7fb fb9e 	bl	8004718 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	2b64      	cmp	r3, #100	@ 0x64
 8008fe4:	d901      	bls.n	8008fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e28a      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008fea:	4b60      	ldr	r3, [pc, #384]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1f0      	bne.n	8008fd8 <HAL_RCC_OscConfig+0xe8>
 8008ff6:	e000      	b.n	8008ffa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d075      	beq.n	80090f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009006:	4b59      	ldr	r3, [pc, #356]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	f003 030c 	and.w	r3, r3, #12
 800900e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009010:	4b56      	ldr	r3, [pc, #344]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f003 0303 	and.w	r3, r3, #3
 8009018:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	2b0c      	cmp	r3, #12
 800901e:	d102      	bne.n	8009026 <HAL_RCC_OscConfig+0x136>
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2b02      	cmp	r3, #2
 8009024:	d002      	beq.n	800902c <HAL_RCC_OscConfig+0x13c>
 8009026:	69bb      	ldr	r3, [r7, #24]
 8009028:	2b04      	cmp	r3, #4
 800902a:	d11f      	bne.n	800906c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800902c:	4b4f      	ldr	r3, [pc, #316]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009034:	2b00      	cmp	r3, #0
 8009036:	d005      	beq.n	8009044 <HAL_RCC_OscConfig+0x154>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d101      	bne.n	8009044 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	e25d      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009044:	4b49      	ldr	r3, [pc, #292]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	691b      	ldr	r3, [r3, #16]
 8009050:	061b      	lsls	r3, r3, #24
 8009052:	4946      	ldr	r1, [pc, #280]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8009054:	4313      	orrs	r3, r2
 8009056:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009058:	4b45      	ldr	r3, [pc, #276]	@ (8009170 <HAL_RCC_OscConfig+0x280>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4618      	mov	r0, r3
 800905e:	f7fb fb0f 	bl	8004680 <HAL_InitTick>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d043      	beq.n	80090f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e249      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d023      	beq.n	80090bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009074:	4b3d      	ldr	r3, [pc, #244]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a3c      	ldr	r2, [pc, #240]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 800907a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800907e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009080:	f7fb fb4a 	bl	8004718 <HAL_GetTick>
 8009084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009086:	e008      	b.n	800909a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009088:	f7fb fb46 	bl	8004718 <HAL_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	2b02      	cmp	r3, #2
 8009094:	d901      	bls.n	800909a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009096:	2303      	movs	r3, #3
 8009098:	e232      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800909a:	4b34      	ldr	r3, [pc, #208]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0f0      	beq.n	8009088 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090a6:	4b31      	ldr	r3, [pc, #196]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	691b      	ldr	r3, [r3, #16]
 80090b2:	061b      	lsls	r3, r3, #24
 80090b4:	492d      	ldr	r1, [pc, #180]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	604b      	str	r3, [r1, #4]
 80090ba:	e01a      	b.n	80090f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090bc:	4b2b      	ldr	r3, [pc, #172]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a2a      	ldr	r2, [pc, #168]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 80090c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090c8:	f7fb fb26 	bl	8004718 <HAL_GetTick>
 80090cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80090ce:	e008      	b.n	80090e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090d0:	f7fb fb22 	bl	8004718 <HAL_GetTick>
 80090d4:	4602      	mov	r2, r0
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	1ad3      	subs	r3, r2, r3
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d901      	bls.n	80090e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e20e      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80090e2:	4b22      	ldr	r3, [pc, #136]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d1f0      	bne.n	80090d0 <HAL_RCC_OscConfig+0x1e0>
 80090ee:	e000      	b.n	80090f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0308 	and.w	r3, r3, #8
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d041      	beq.n	8009182 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d01c      	beq.n	8009140 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009106:	4b19      	ldr	r3, [pc, #100]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8009108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800910c:	4a17      	ldr	r2, [pc, #92]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 800910e:	f043 0301 	orr.w	r3, r3, #1
 8009112:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009116:	f7fb faff 	bl	8004718 <HAL_GetTick>
 800911a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800911c:	e008      	b.n	8009130 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800911e:	f7fb fafb 	bl	8004718 <HAL_GetTick>
 8009122:	4602      	mov	r2, r0
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	2b02      	cmp	r3, #2
 800912a:	d901      	bls.n	8009130 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e1e7      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009130:	4b0e      	ldr	r3, [pc, #56]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8009132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	d0ef      	beq.n	800911e <HAL_RCC_OscConfig+0x22e>
 800913e:	e020      	b.n	8009182 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009140:	4b0a      	ldr	r3, [pc, #40]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8009142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009146:	4a09      	ldr	r2, [pc, #36]	@ (800916c <HAL_RCC_OscConfig+0x27c>)
 8009148:	f023 0301 	bic.w	r3, r3, #1
 800914c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009150:	f7fb fae2 	bl	8004718 <HAL_GetTick>
 8009154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009156:	e00d      	b.n	8009174 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009158:	f7fb fade 	bl	8004718 <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	2b02      	cmp	r3, #2
 8009164:	d906      	bls.n	8009174 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e1ca      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
 800916a:	bf00      	nop
 800916c:	40021000 	.word	0x40021000
 8009170:	20000058 	.word	0x20000058
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009174:	4b8c      	ldr	r3, [pc, #560]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 8009176:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800917a:	f003 0302 	and.w	r3, r3, #2
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1ea      	bne.n	8009158 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0304 	and.w	r3, r3, #4
 800918a:	2b00      	cmp	r3, #0
 800918c:	f000 80a6 	beq.w	80092dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009190:	2300      	movs	r3, #0
 8009192:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009194:	4b84      	ldr	r3, [pc, #528]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 8009196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <HAL_RCC_OscConfig+0x2b4>
 80091a0:	2301      	movs	r3, #1
 80091a2:	e000      	b.n	80091a6 <HAL_RCC_OscConfig+0x2b6>
 80091a4:	2300      	movs	r3, #0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00d      	beq.n	80091c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091aa:	4b7f      	ldr	r3, [pc, #508]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 80091ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ae:	4a7e      	ldr	r2, [pc, #504]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 80091b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80091b6:	4b7c      	ldr	r3, [pc, #496]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 80091b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091be:	60fb      	str	r3, [r7, #12]
 80091c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80091c2:	2301      	movs	r3, #1
 80091c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091c6:	4b79      	ldr	r3, [pc, #484]	@ (80093ac <HAL_RCC_OscConfig+0x4bc>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d118      	bne.n	8009204 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80091d2:	4b76      	ldr	r3, [pc, #472]	@ (80093ac <HAL_RCC_OscConfig+0x4bc>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a75      	ldr	r2, [pc, #468]	@ (80093ac <HAL_RCC_OscConfig+0x4bc>)
 80091d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80091de:	f7fb fa9b 	bl	8004718 <HAL_GetTick>
 80091e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091e4:	e008      	b.n	80091f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091e6:	f7fb fa97 	bl	8004718 <HAL_GetTick>
 80091ea:	4602      	mov	r2, r0
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	2b02      	cmp	r3, #2
 80091f2:	d901      	bls.n	80091f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e183      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091f8:	4b6c      	ldr	r3, [pc, #432]	@ (80093ac <HAL_RCC_OscConfig+0x4bc>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009200:	2b00      	cmp	r3, #0
 8009202:	d0f0      	beq.n	80091e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d108      	bne.n	800921e <HAL_RCC_OscConfig+0x32e>
 800920c:	4b66      	ldr	r3, [pc, #408]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 800920e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009212:	4a65      	ldr	r2, [pc, #404]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 8009214:	f043 0301 	orr.w	r3, r3, #1
 8009218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800921c:	e024      	b.n	8009268 <HAL_RCC_OscConfig+0x378>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	2b05      	cmp	r3, #5
 8009224:	d110      	bne.n	8009248 <HAL_RCC_OscConfig+0x358>
 8009226:	4b60      	ldr	r3, [pc, #384]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 8009228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800922c:	4a5e      	ldr	r2, [pc, #376]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 800922e:	f043 0304 	orr.w	r3, r3, #4
 8009232:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009236:	4b5c      	ldr	r3, [pc, #368]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 8009238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800923c:	4a5a      	ldr	r2, [pc, #360]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 800923e:	f043 0301 	orr.w	r3, r3, #1
 8009242:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009246:	e00f      	b.n	8009268 <HAL_RCC_OscConfig+0x378>
 8009248:	4b57      	ldr	r3, [pc, #348]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 800924a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800924e:	4a56      	ldr	r2, [pc, #344]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 8009250:	f023 0301 	bic.w	r3, r3, #1
 8009254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009258:	4b53      	ldr	r3, [pc, #332]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 800925a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800925e:	4a52      	ldr	r2, [pc, #328]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 8009260:	f023 0304 	bic.w	r3, r3, #4
 8009264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d016      	beq.n	800929e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009270:	f7fb fa52 	bl	8004718 <HAL_GetTick>
 8009274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009276:	e00a      	b.n	800928e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009278:	f7fb fa4e 	bl	8004718 <HAL_GetTick>
 800927c:	4602      	mov	r2, r0
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	1ad3      	subs	r3, r2, r3
 8009282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009286:	4293      	cmp	r3, r2
 8009288:	d901      	bls.n	800928e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800928a:	2303      	movs	r3, #3
 800928c:	e138      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800928e:	4b46      	ldr	r3, [pc, #280]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 8009290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009294:	f003 0302 	and.w	r3, r3, #2
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0ed      	beq.n	8009278 <HAL_RCC_OscConfig+0x388>
 800929c:	e015      	b.n	80092ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800929e:	f7fb fa3b 	bl	8004718 <HAL_GetTick>
 80092a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80092a4:	e00a      	b.n	80092bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092a6:	f7fb fa37 	bl	8004718 <HAL_GetTick>
 80092aa:	4602      	mov	r2, r0
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	1ad3      	subs	r3, r2, r3
 80092b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d901      	bls.n	80092bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e121      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80092bc:	4b3a      	ldr	r3, [pc, #232]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 80092be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1ed      	bne.n	80092a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80092ca:	7ffb      	ldrb	r3, [r7, #31]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d105      	bne.n	80092dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092d0:	4b35      	ldr	r3, [pc, #212]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 80092d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092d4:	4a34      	ldr	r2, [pc, #208]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 80092d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0320 	and.w	r3, r3, #32
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d03c      	beq.n	8009362 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d01c      	beq.n	800932a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80092f0:	4b2d      	ldr	r3, [pc, #180]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 80092f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80092f6:	4a2c      	ldr	r2, [pc, #176]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 80092f8:	f043 0301 	orr.w	r3, r3, #1
 80092fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009300:	f7fb fa0a 	bl	8004718 <HAL_GetTick>
 8009304:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009306:	e008      	b.n	800931a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009308:	f7fb fa06 	bl	8004718 <HAL_GetTick>
 800930c:	4602      	mov	r2, r0
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	2b02      	cmp	r3, #2
 8009314:	d901      	bls.n	800931a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009316:	2303      	movs	r3, #3
 8009318:	e0f2      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800931a:	4b23      	ldr	r3, [pc, #140]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 800931c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009320:	f003 0302 	and.w	r3, r3, #2
 8009324:	2b00      	cmp	r3, #0
 8009326:	d0ef      	beq.n	8009308 <HAL_RCC_OscConfig+0x418>
 8009328:	e01b      	b.n	8009362 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800932a:	4b1f      	ldr	r3, [pc, #124]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 800932c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009330:	4a1d      	ldr	r2, [pc, #116]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 8009332:	f023 0301 	bic.w	r3, r3, #1
 8009336:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800933a:	f7fb f9ed 	bl	8004718 <HAL_GetTick>
 800933e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009340:	e008      	b.n	8009354 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009342:	f7fb f9e9 	bl	8004718 <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	2b02      	cmp	r3, #2
 800934e:	d901      	bls.n	8009354 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e0d5      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009354:	4b14      	ldr	r3, [pc, #80]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 8009356:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1ef      	bne.n	8009342 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	69db      	ldr	r3, [r3, #28]
 8009366:	2b00      	cmp	r3, #0
 8009368:	f000 80c9 	beq.w	80094fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800936c:	4b0e      	ldr	r3, [pc, #56]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 800936e:	689b      	ldr	r3, [r3, #8]
 8009370:	f003 030c 	and.w	r3, r3, #12
 8009374:	2b0c      	cmp	r3, #12
 8009376:	f000 8083 	beq.w	8009480 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	69db      	ldr	r3, [r3, #28]
 800937e:	2b02      	cmp	r3, #2
 8009380:	d15e      	bne.n	8009440 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009382:	4b09      	ldr	r3, [pc, #36]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a08      	ldr	r2, [pc, #32]	@ (80093a8 <HAL_RCC_OscConfig+0x4b8>)
 8009388:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800938c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800938e:	f7fb f9c3 	bl	8004718 <HAL_GetTick>
 8009392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009394:	e00c      	b.n	80093b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009396:	f7fb f9bf 	bl	8004718 <HAL_GetTick>
 800939a:	4602      	mov	r2, r0
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	1ad3      	subs	r3, r2, r3
 80093a0:	2b02      	cmp	r3, #2
 80093a2:	d905      	bls.n	80093b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e0ab      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
 80093a8:	40021000 	.word	0x40021000
 80093ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80093b0:	4b55      	ldr	r3, [pc, #340]	@ (8009508 <HAL_RCC_OscConfig+0x618>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1ec      	bne.n	8009396 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80093bc:	4b52      	ldr	r3, [pc, #328]	@ (8009508 <HAL_RCC_OscConfig+0x618>)
 80093be:	68da      	ldr	r2, [r3, #12]
 80093c0:	4b52      	ldr	r3, [pc, #328]	@ (800950c <HAL_RCC_OscConfig+0x61c>)
 80093c2:	4013      	ands	r3, r2
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	6a11      	ldr	r1, [r2, #32]
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80093cc:	3a01      	subs	r2, #1
 80093ce:	0112      	lsls	r2, r2, #4
 80093d0:	4311      	orrs	r1, r2
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80093d6:	0212      	lsls	r2, r2, #8
 80093d8:	4311      	orrs	r1, r2
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80093de:	0852      	lsrs	r2, r2, #1
 80093e0:	3a01      	subs	r2, #1
 80093e2:	0552      	lsls	r2, r2, #21
 80093e4:	4311      	orrs	r1, r2
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80093ea:	0852      	lsrs	r2, r2, #1
 80093ec:	3a01      	subs	r2, #1
 80093ee:	0652      	lsls	r2, r2, #25
 80093f0:	4311      	orrs	r1, r2
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80093f6:	06d2      	lsls	r2, r2, #27
 80093f8:	430a      	orrs	r2, r1
 80093fa:	4943      	ldr	r1, [pc, #268]	@ (8009508 <HAL_RCC_OscConfig+0x618>)
 80093fc:	4313      	orrs	r3, r2
 80093fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009400:	4b41      	ldr	r3, [pc, #260]	@ (8009508 <HAL_RCC_OscConfig+0x618>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a40      	ldr	r2, [pc, #256]	@ (8009508 <HAL_RCC_OscConfig+0x618>)
 8009406:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800940a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800940c:	4b3e      	ldr	r3, [pc, #248]	@ (8009508 <HAL_RCC_OscConfig+0x618>)
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	4a3d      	ldr	r2, [pc, #244]	@ (8009508 <HAL_RCC_OscConfig+0x618>)
 8009412:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009416:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009418:	f7fb f97e 	bl	8004718 <HAL_GetTick>
 800941c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800941e:	e008      	b.n	8009432 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009420:	f7fb f97a 	bl	8004718 <HAL_GetTick>
 8009424:	4602      	mov	r2, r0
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	2b02      	cmp	r3, #2
 800942c:	d901      	bls.n	8009432 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	e066      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009432:	4b35      	ldr	r3, [pc, #212]	@ (8009508 <HAL_RCC_OscConfig+0x618>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0f0      	beq.n	8009420 <HAL_RCC_OscConfig+0x530>
 800943e:	e05e      	b.n	80094fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009440:	4b31      	ldr	r3, [pc, #196]	@ (8009508 <HAL_RCC_OscConfig+0x618>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a30      	ldr	r2, [pc, #192]	@ (8009508 <HAL_RCC_OscConfig+0x618>)
 8009446:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800944a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800944c:	f7fb f964 	bl	8004718 <HAL_GetTick>
 8009450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009452:	e008      	b.n	8009466 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009454:	f7fb f960 	bl	8004718 <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	2b02      	cmp	r3, #2
 8009460:	d901      	bls.n	8009466 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e04c      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009466:	4b28      	ldr	r3, [pc, #160]	@ (8009508 <HAL_RCC_OscConfig+0x618>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1f0      	bne.n	8009454 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8009472:	4b25      	ldr	r3, [pc, #148]	@ (8009508 <HAL_RCC_OscConfig+0x618>)
 8009474:	68da      	ldr	r2, [r3, #12]
 8009476:	4924      	ldr	r1, [pc, #144]	@ (8009508 <HAL_RCC_OscConfig+0x618>)
 8009478:	4b25      	ldr	r3, [pc, #148]	@ (8009510 <HAL_RCC_OscConfig+0x620>)
 800947a:	4013      	ands	r3, r2
 800947c:	60cb      	str	r3, [r1, #12]
 800947e:	e03e      	b.n	80094fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	69db      	ldr	r3, [r3, #28]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d101      	bne.n	800948c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e039      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800948c:	4b1e      	ldr	r3, [pc, #120]	@ (8009508 <HAL_RCC_OscConfig+0x618>)
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f003 0203 	and.w	r2, r3, #3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6a1b      	ldr	r3, [r3, #32]
 800949c:	429a      	cmp	r2, r3
 800949e:	d12c      	bne.n	80094fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094aa:	3b01      	subs	r3, #1
 80094ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d123      	bne.n	80094fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80094be:	429a      	cmp	r2, r3
 80094c0:	d11b      	bne.n	80094fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80094c2:	697b      	ldr	r3, [r7, #20]
 80094c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d113      	bne.n	80094fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094dc:	085b      	lsrs	r3, r3, #1
 80094de:	3b01      	subs	r3, #1
 80094e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d109      	bne.n	80094fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094f0:	085b      	lsrs	r3, r3, #1
 80094f2:	3b01      	subs	r3, #1
 80094f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d001      	beq.n	80094fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e000      	b.n	8009500 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80094fe:	2300      	movs	r3, #0
}
 8009500:	4618      	mov	r0, r3
 8009502:	3720      	adds	r7, #32
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	40021000 	.word	0x40021000
 800950c:	019f800c 	.word	0x019f800c
 8009510:	feeefffc 	.word	0xfeeefffc

08009514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b086      	sub	sp, #24
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800951e:	2300      	movs	r3, #0
 8009520:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e11e      	b.n	800976a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800952c:	4b91      	ldr	r3, [pc, #580]	@ (8009774 <HAL_RCC_ClockConfig+0x260>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 030f 	and.w	r3, r3, #15
 8009534:	683a      	ldr	r2, [r7, #0]
 8009536:	429a      	cmp	r2, r3
 8009538:	d910      	bls.n	800955c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800953a:	4b8e      	ldr	r3, [pc, #568]	@ (8009774 <HAL_RCC_ClockConfig+0x260>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f023 020f 	bic.w	r2, r3, #15
 8009542:	498c      	ldr	r1, [pc, #560]	@ (8009774 <HAL_RCC_ClockConfig+0x260>)
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	4313      	orrs	r3, r2
 8009548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800954a:	4b8a      	ldr	r3, [pc, #552]	@ (8009774 <HAL_RCC_ClockConfig+0x260>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 030f 	and.w	r3, r3, #15
 8009552:	683a      	ldr	r2, [r7, #0]
 8009554:	429a      	cmp	r2, r3
 8009556:	d001      	beq.n	800955c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e106      	b.n	800976a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d073      	beq.n	8009650 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	2b03      	cmp	r3, #3
 800956e:	d129      	bne.n	80095c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009570:	4b81      	ldr	r3, [pc, #516]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009578:	2b00      	cmp	r3, #0
 800957a:	d101      	bne.n	8009580 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800957c:	2301      	movs	r3, #1
 800957e:	e0f4      	b.n	800976a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009580:	f000 f99e 	bl	80098c0 <RCC_GetSysClockFreqFromPLLSource>
 8009584:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	4a7c      	ldr	r2, [pc, #496]	@ (800977c <HAL_RCC_ClockConfig+0x268>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d93f      	bls.n	800960e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800958e:	4b7a      	ldr	r3, [pc, #488]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d009      	beq.n	80095ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d033      	beq.n	800960e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d12f      	bne.n	800960e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80095ae:	4b72      	ldr	r3, [pc, #456]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095b6:	4a70      	ldr	r2, [pc, #448]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 80095b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80095be:	2380      	movs	r3, #128	@ 0x80
 80095c0:	617b      	str	r3, [r7, #20]
 80095c2:	e024      	b.n	800960e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	685b      	ldr	r3, [r3, #4]
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d107      	bne.n	80095dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80095cc:	4b6a      	ldr	r3, [pc, #424]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d109      	bne.n	80095ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80095d8:	2301      	movs	r3, #1
 80095da:	e0c6      	b.n	800976a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80095dc:	4b66      	ldr	r3, [pc, #408]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d101      	bne.n	80095ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e0be      	b.n	800976a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80095ec:	f000 f8ce 	bl	800978c <HAL_RCC_GetSysClockFreq>
 80095f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	4a61      	ldr	r2, [pc, #388]	@ (800977c <HAL_RCC_ClockConfig+0x268>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d909      	bls.n	800960e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80095fa:	4b5f      	ldr	r3, [pc, #380]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009602:	4a5d      	ldr	r2, [pc, #372]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 8009604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009608:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800960a:	2380      	movs	r3, #128	@ 0x80
 800960c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800960e:	4b5a      	ldr	r3, [pc, #360]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	f023 0203 	bic.w	r2, r3, #3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	4957      	ldr	r1, [pc, #348]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 800961c:	4313      	orrs	r3, r2
 800961e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009620:	f7fb f87a 	bl	8004718 <HAL_GetTick>
 8009624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009626:	e00a      	b.n	800963e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009628:	f7fb f876 	bl	8004718 <HAL_GetTick>
 800962c:	4602      	mov	r2, r0
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	1ad3      	subs	r3, r2, r3
 8009632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009636:	4293      	cmp	r3, r2
 8009638:	d901      	bls.n	800963e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800963a:	2303      	movs	r3, #3
 800963c:	e095      	b.n	800976a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800963e:	4b4e      	ldr	r3, [pc, #312]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	f003 020c 	and.w	r2, r3, #12
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	429a      	cmp	r2, r3
 800964e:	d1eb      	bne.n	8009628 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 0302 	and.w	r3, r3, #2
 8009658:	2b00      	cmp	r3, #0
 800965a:	d023      	beq.n	80096a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	2b00      	cmp	r3, #0
 8009666:	d005      	beq.n	8009674 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009668:	4b43      	ldr	r3, [pc, #268]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	4a42      	ldr	r2, [pc, #264]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 800966e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009672:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0308 	and.w	r3, r3, #8
 800967c:	2b00      	cmp	r3, #0
 800967e:	d007      	beq.n	8009690 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009680:	4b3d      	ldr	r3, [pc, #244]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009688:	4a3b      	ldr	r2, [pc, #236]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 800968a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800968e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009690:	4b39      	ldr	r3, [pc, #228]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 8009692:	689b      	ldr	r3, [r3, #8]
 8009694:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	4936      	ldr	r1, [pc, #216]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	608b      	str	r3, [r1, #8]
 80096a2:	e008      	b.n	80096b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2b80      	cmp	r3, #128	@ 0x80
 80096a8:	d105      	bne.n	80096b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80096aa:	4b33      	ldr	r3, [pc, #204]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 80096ac:	689b      	ldr	r3, [r3, #8]
 80096ae:	4a32      	ldr	r2, [pc, #200]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 80096b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80096b6:	4b2f      	ldr	r3, [pc, #188]	@ (8009774 <HAL_RCC_ClockConfig+0x260>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 030f 	and.w	r3, r3, #15
 80096be:	683a      	ldr	r2, [r7, #0]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d21d      	bcs.n	8009700 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80096c4:	4b2b      	ldr	r3, [pc, #172]	@ (8009774 <HAL_RCC_ClockConfig+0x260>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f023 020f 	bic.w	r2, r3, #15
 80096cc:	4929      	ldr	r1, [pc, #164]	@ (8009774 <HAL_RCC_ClockConfig+0x260>)
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80096d4:	f7fb f820 	bl	8004718 <HAL_GetTick>
 80096d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096da:	e00a      	b.n	80096f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096dc:	f7fb f81c 	bl	8004718 <HAL_GetTick>
 80096e0:	4602      	mov	r2, r0
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d901      	bls.n	80096f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80096ee:	2303      	movs	r3, #3
 80096f0:	e03b      	b.n	800976a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096f2:	4b20      	ldr	r3, [pc, #128]	@ (8009774 <HAL_RCC_ClockConfig+0x260>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f003 030f 	and.w	r3, r3, #15
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d1ed      	bne.n	80096dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0304 	and.w	r3, r3, #4
 8009708:	2b00      	cmp	r3, #0
 800970a:	d008      	beq.n	800971e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800970c:	4b1a      	ldr	r3, [pc, #104]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	4917      	ldr	r1, [pc, #92]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 800971a:	4313      	orrs	r3, r2
 800971c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0308 	and.w	r3, r3, #8
 8009726:	2b00      	cmp	r3, #0
 8009728:	d009      	beq.n	800973e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800972a:	4b13      	ldr	r3, [pc, #76]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	00db      	lsls	r3, r3, #3
 8009738:	490f      	ldr	r1, [pc, #60]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 800973a:	4313      	orrs	r3, r2
 800973c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800973e:	f000 f825 	bl	800978c <HAL_RCC_GetSysClockFreq>
 8009742:	4602      	mov	r2, r0
 8009744:	4b0c      	ldr	r3, [pc, #48]	@ (8009778 <HAL_RCC_ClockConfig+0x264>)
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	091b      	lsrs	r3, r3, #4
 800974a:	f003 030f 	and.w	r3, r3, #15
 800974e:	490c      	ldr	r1, [pc, #48]	@ (8009780 <HAL_RCC_ClockConfig+0x26c>)
 8009750:	5ccb      	ldrb	r3, [r1, r3]
 8009752:	f003 031f 	and.w	r3, r3, #31
 8009756:	fa22 f303 	lsr.w	r3, r2, r3
 800975a:	4a0a      	ldr	r2, [pc, #40]	@ (8009784 <HAL_RCC_ClockConfig+0x270>)
 800975c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800975e:	4b0a      	ldr	r3, [pc, #40]	@ (8009788 <HAL_RCC_ClockConfig+0x274>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4618      	mov	r0, r3
 8009764:	f7fa ff8c 	bl	8004680 <HAL_InitTick>
 8009768:	4603      	mov	r3, r0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	40022000 	.word	0x40022000
 8009778:	40021000 	.word	0x40021000
 800977c:	04c4b400 	.word	0x04c4b400
 8009780:	08017080 	.word	0x08017080
 8009784:	20000054 	.word	0x20000054
 8009788:	20000058 	.word	0x20000058

0800978c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800978c:	b480      	push	{r7}
 800978e:	b087      	sub	sp, #28
 8009790:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009792:	4b2c      	ldr	r3, [pc, #176]	@ (8009844 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f003 030c 	and.w	r3, r3, #12
 800979a:	2b04      	cmp	r3, #4
 800979c:	d102      	bne.n	80097a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800979e:	4b2a      	ldr	r3, [pc, #168]	@ (8009848 <HAL_RCC_GetSysClockFreq+0xbc>)
 80097a0:	613b      	str	r3, [r7, #16]
 80097a2:	e047      	b.n	8009834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80097a4:	4b27      	ldr	r3, [pc, #156]	@ (8009844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f003 030c 	and.w	r3, r3, #12
 80097ac:	2b08      	cmp	r3, #8
 80097ae:	d102      	bne.n	80097b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80097b0:	4b26      	ldr	r3, [pc, #152]	@ (800984c <HAL_RCC_GetSysClockFreq+0xc0>)
 80097b2:	613b      	str	r3, [r7, #16]
 80097b4:	e03e      	b.n	8009834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80097b6:	4b23      	ldr	r3, [pc, #140]	@ (8009844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f003 030c 	and.w	r3, r3, #12
 80097be:	2b0c      	cmp	r3, #12
 80097c0:	d136      	bne.n	8009830 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80097c2:	4b20      	ldr	r3, [pc, #128]	@ (8009844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f003 0303 	and.w	r3, r3, #3
 80097ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80097cc:	4b1d      	ldr	r3, [pc, #116]	@ (8009844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	091b      	lsrs	r3, r3, #4
 80097d2:	f003 030f 	and.w	r3, r3, #15
 80097d6:	3301      	adds	r3, #1
 80097d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2b03      	cmp	r3, #3
 80097de:	d10c      	bne.n	80097fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80097e0:	4a1a      	ldr	r2, [pc, #104]	@ (800984c <HAL_RCC_GetSysClockFreq+0xc0>)
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e8:	4a16      	ldr	r2, [pc, #88]	@ (8009844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80097ea:	68d2      	ldr	r2, [r2, #12]
 80097ec:	0a12      	lsrs	r2, r2, #8
 80097ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80097f2:	fb02 f303 	mul.w	r3, r2, r3
 80097f6:	617b      	str	r3, [r7, #20]
      break;
 80097f8:	e00c      	b.n	8009814 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80097fa:	4a13      	ldr	r2, [pc, #76]	@ (8009848 <HAL_RCC_GetSysClockFreq+0xbc>)
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009802:	4a10      	ldr	r2, [pc, #64]	@ (8009844 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009804:	68d2      	ldr	r2, [r2, #12]
 8009806:	0a12      	lsrs	r2, r2, #8
 8009808:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800980c:	fb02 f303 	mul.w	r3, r2, r3
 8009810:	617b      	str	r3, [r7, #20]
      break;
 8009812:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009814:	4b0b      	ldr	r3, [pc, #44]	@ (8009844 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	0e5b      	lsrs	r3, r3, #25
 800981a:	f003 0303 	and.w	r3, r3, #3
 800981e:	3301      	adds	r3, #1
 8009820:	005b      	lsls	r3, r3, #1
 8009822:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009824:	697a      	ldr	r2, [r7, #20]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	fbb2 f3f3 	udiv	r3, r2, r3
 800982c:	613b      	str	r3, [r7, #16]
 800982e:	e001      	b.n	8009834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009830:	2300      	movs	r3, #0
 8009832:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009834:	693b      	ldr	r3, [r7, #16]
}
 8009836:	4618      	mov	r0, r3
 8009838:	371c      	adds	r7, #28
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	40021000 	.word	0x40021000
 8009848:	00f42400 	.word	0x00f42400
 800984c:	016e3600 	.word	0x016e3600

08009850 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009850:	b480      	push	{r7}
 8009852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009854:	4b03      	ldr	r3, [pc, #12]	@ (8009864 <HAL_RCC_GetHCLKFreq+0x14>)
 8009856:	681b      	ldr	r3, [r3, #0]
}
 8009858:	4618      	mov	r0, r3
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	20000054 	.word	0x20000054

08009868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800986c:	f7ff fff0 	bl	8009850 <HAL_RCC_GetHCLKFreq>
 8009870:	4602      	mov	r2, r0
 8009872:	4b06      	ldr	r3, [pc, #24]	@ (800988c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	0a1b      	lsrs	r3, r3, #8
 8009878:	f003 0307 	and.w	r3, r3, #7
 800987c:	4904      	ldr	r1, [pc, #16]	@ (8009890 <HAL_RCC_GetPCLK1Freq+0x28>)
 800987e:	5ccb      	ldrb	r3, [r1, r3]
 8009880:	f003 031f 	and.w	r3, r3, #31
 8009884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009888:	4618      	mov	r0, r3
 800988a:	bd80      	pop	{r7, pc}
 800988c:	40021000 	.word	0x40021000
 8009890:	08017090 	.word	0x08017090

08009894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009898:	f7ff ffda 	bl	8009850 <HAL_RCC_GetHCLKFreq>
 800989c:	4602      	mov	r2, r0
 800989e:	4b06      	ldr	r3, [pc, #24]	@ (80098b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	0adb      	lsrs	r3, r3, #11
 80098a4:	f003 0307 	and.w	r3, r3, #7
 80098a8:	4904      	ldr	r1, [pc, #16]	@ (80098bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80098aa:	5ccb      	ldrb	r3, [r1, r3]
 80098ac:	f003 031f 	and.w	r3, r3, #31
 80098b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	bd80      	pop	{r7, pc}
 80098b8:	40021000 	.word	0x40021000
 80098bc:	08017090 	.word	0x08017090

080098c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80098c6:	4b1e      	ldr	r3, [pc, #120]	@ (8009940 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	f003 0303 	and.w	r3, r3, #3
 80098ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80098d0:	4b1b      	ldr	r3, [pc, #108]	@ (8009940 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80098d2:	68db      	ldr	r3, [r3, #12]
 80098d4:	091b      	lsrs	r3, r3, #4
 80098d6:	f003 030f 	and.w	r3, r3, #15
 80098da:	3301      	adds	r3, #1
 80098dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d10c      	bne.n	80098fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80098e4:	4a17      	ldr	r2, [pc, #92]	@ (8009944 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ec:	4a14      	ldr	r2, [pc, #80]	@ (8009940 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80098ee:	68d2      	ldr	r2, [r2, #12]
 80098f0:	0a12      	lsrs	r2, r2, #8
 80098f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80098f6:	fb02 f303 	mul.w	r3, r2, r3
 80098fa:	617b      	str	r3, [r7, #20]
    break;
 80098fc:	e00c      	b.n	8009918 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80098fe:	4a12      	ldr	r2, [pc, #72]	@ (8009948 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	fbb2 f3f3 	udiv	r3, r2, r3
 8009906:	4a0e      	ldr	r2, [pc, #56]	@ (8009940 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009908:	68d2      	ldr	r2, [r2, #12]
 800990a:	0a12      	lsrs	r2, r2, #8
 800990c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009910:	fb02 f303 	mul.w	r3, r2, r3
 8009914:	617b      	str	r3, [r7, #20]
    break;
 8009916:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009918:	4b09      	ldr	r3, [pc, #36]	@ (8009940 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	0e5b      	lsrs	r3, r3, #25
 800991e:	f003 0303 	and.w	r3, r3, #3
 8009922:	3301      	adds	r3, #1
 8009924:	005b      	lsls	r3, r3, #1
 8009926:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009930:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009932:	687b      	ldr	r3, [r7, #4]
}
 8009934:	4618      	mov	r0, r3
 8009936:	371c      	adds	r7, #28
 8009938:	46bd      	mov	sp, r7
 800993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993e:	4770      	bx	lr
 8009940:	40021000 	.word	0x40021000
 8009944:	016e3600 	.word	0x016e3600
 8009948:	00f42400 	.word	0x00f42400

0800994c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b086      	sub	sp, #24
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009954:	2300      	movs	r3, #0
 8009956:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009958:	2300      	movs	r3, #0
 800995a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 8098 	beq.w	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800996a:	2300      	movs	r3, #0
 800996c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800996e:	4b43      	ldr	r3, [pc, #268]	@ (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10d      	bne.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800997a:	4b40      	ldr	r3, [pc, #256]	@ (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800997c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800997e:	4a3f      	ldr	r2, [pc, #252]	@ (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009984:	6593      	str	r3, [r2, #88]	@ 0x58
 8009986:	4b3d      	ldr	r3, [pc, #244]	@ (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800998a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800998e:	60bb      	str	r3, [r7, #8]
 8009990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009992:	2301      	movs	r3, #1
 8009994:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009996:	4b3a      	ldr	r3, [pc, #232]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a39      	ldr	r2, [pc, #228]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800999c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80099a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80099a2:	f7fa feb9 	bl	8004718 <HAL_GetTick>
 80099a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099a8:	e009      	b.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80099aa:	f7fa feb5 	bl	8004718 <HAL_GetTick>
 80099ae:	4602      	mov	r2, r0
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d902      	bls.n	80099be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	74fb      	strb	r3, [r7, #19]
        break;
 80099bc:	e005      	b.n	80099ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80099be:	4b30      	ldr	r3, [pc, #192]	@ (8009a80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d0ef      	beq.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80099ca:	7cfb      	ldrb	r3, [r7, #19]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d159      	bne.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80099d0:	4b2a      	ldr	r3, [pc, #168]	@ (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80099da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d01e      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d019      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80099ec:	4b23      	ldr	r3, [pc, #140]	@ (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80099f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80099f8:	4b20      	ldr	r3, [pc, #128]	@ (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099fe:	4a1f      	ldr	r2, [pc, #124]	@ (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009a08:	4b1c      	ldr	r3, [pc, #112]	@ (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009a18:	4a18      	ldr	r2, [pc, #96]	@ (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d016      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a2a:	f7fa fe75 	bl	8004718 <HAL_GetTick>
 8009a2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a30:	e00b      	b.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009a32:	f7fa fe71 	bl	8004718 <HAL_GetTick>
 8009a36:	4602      	mov	r2, r0
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d902      	bls.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009a44:	2303      	movs	r3, #3
 8009a46:	74fb      	strb	r3, [r7, #19]
            break;
 8009a48:	e006      	b.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a50:	f003 0302 	and.w	r3, r3, #2
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d0ec      	beq.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009a58:	7cfb      	ldrb	r3, [r7, #19]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10b      	bne.n	8009a76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009a5e:	4b07      	ldr	r3, [pc, #28]	@ (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a6c:	4903      	ldr	r1, [pc, #12]	@ (8009a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009a74:	e008      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009a76:	7cfb      	ldrb	r3, [r7, #19]
 8009a78:	74bb      	strb	r3, [r7, #18]
 8009a7a:	e005      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009a7c:	40021000 	.word	0x40021000
 8009a80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a84:	7cfb      	ldrb	r3, [r7, #19]
 8009a86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009a88:	7c7b      	ldrb	r3, [r7, #17]
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d105      	bne.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009a8e:	4ba7      	ldr	r3, [pc, #668]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a92:	4aa6      	ldr	r2, [pc, #664]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009a94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009a98:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00a      	beq.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009aa6:	4ba1      	ldr	r3, [pc, #644]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009aac:	f023 0203 	bic.w	r2, r3, #3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	499d      	ldr	r1, [pc, #628]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f003 0302 	and.w	r3, r3, #2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d00a      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009ac8:	4b98      	ldr	r3, [pc, #608]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ace:	f023 020c 	bic.w	r2, r3, #12
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	4995      	ldr	r1, [pc, #596]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f003 0304 	and.w	r3, r3, #4
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00a      	beq.n	8009b00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009aea:	4b90      	ldr	r3, [pc, #576]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009af0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	498c      	ldr	r1, [pc, #560]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009afa:	4313      	orrs	r3, r2
 8009afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 0308 	and.w	r3, r3, #8
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00a      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009b0c:	4b87      	ldr	r3, [pc, #540]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	691b      	ldr	r3, [r3, #16]
 8009b1a:	4984      	ldr	r1, [pc, #528]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0310 	and.w	r3, r3, #16
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d00a      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009b2e:	4b7f      	ldr	r3, [pc, #508]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	497b      	ldr	r1, [pc, #492]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 0320 	and.w	r3, r3, #32
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00a      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b50:	4b76      	ldr	r3, [pc, #472]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	4973      	ldr	r1, [pc, #460]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b60:	4313      	orrs	r3, r2
 8009b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00a      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009b72:	4b6e      	ldr	r3, [pc, #440]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b78:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	496a      	ldr	r1, [pc, #424]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d00a      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009b94:	4b65      	ldr	r3, [pc, #404]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b9a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6a1b      	ldr	r3, [r3, #32]
 8009ba2:	4962      	ldr	r1, [pc, #392]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d00a      	beq.n	8009bcc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc4:	4959      	ldr	r1, [pc, #356]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00a      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009bd8:	4b54      	ldr	r3, [pc, #336]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009bde:	f023 0203 	bic.w	r2, r3, #3
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009be6:	4951      	ldr	r1, [pc, #324]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009be8:	4313      	orrs	r3, r2
 8009bea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d00a      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009bfa:	4b4c      	ldr	r3, [pc, #304]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c08:	4948      	ldr	r1, [pc, #288]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d015      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009c1c:	4b43      	ldr	r3, [pc, #268]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c2a:	4940      	ldr	r1, [pc, #256]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c3a:	d105      	bne.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	4a3a      	ldr	r2, [pc, #232]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c46:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d015      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009c54:	4b35      	ldr	r3, [pc, #212]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c62:	4932      	ldr	r1, [pc, #200]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c64:	4313      	orrs	r3, r2
 8009c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009c6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c72:	d105      	bne.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c74:	4b2d      	ldr	r3, [pc, #180]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	4a2c      	ldr	r2, [pc, #176]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c7e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d015      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009c8c:	4b27      	ldr	r3, [pc, #156]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c9a:	4924      	ldr	r1, [pc, #144]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009caa:	d105      	bne.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009cac:	4b1f      	ldr	r3, [pc, #124]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cb6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d015      	beq.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009cc4:	4b19      	ldr	r3, [pc, #100]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cd2:	4916      	ldr	r1, [pc, #88]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ce2:	d105      	bne.n	8009cf0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009ce4:	4b11      	ldr	r3, [pc, #68]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	4a10      	ldr	r2, [pc, #64]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009cee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d019      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d0a:	4908      	ldr	r1, [pc, #32]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d1a:	d109      	bne.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d1c:	4b03      	ldr	r3, [pc, #12]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d1e:	68db      	ldr	r3, [r3, #12]
 8009d20:	4a02      	ldr	r2, [pc, #8]	@ (8009d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d26:	60d3      	str	r3, [r2, #12]
 8009d28:	e002      	b.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009d2a:	bf00      	nop
 8009d2c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d015      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009d3c:	4b29      	ldr	r3, [pc, #164]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d4a:	4926      	ldr	r1, [pc, #152]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d5a:	d105      	bne.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009d5c:	4b21      	ldr	r3, [pc, #132]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	4a20      	ldr	r2, [pc, #128]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d66:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d015      	beq.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009d74:	4b1b      	ldr	r3, [pc, #108]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d7a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d82:	4918      	ldr	r1, [pc, #96]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d84:	4313      	orrs	r3, r2
 8009d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d92:	d105      	bne.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009d94:	4b13      	ldr	r3, [pc, #76]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	4a12      	ldr	r2, [pc, #72]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009d9e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d015      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009dac:	4b0d      	ldr	r3, [pc, #52]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009db2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dba:	490a      	ldr	r1, [pc, #40]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009dc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009dca:	d105      	bne.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009dcc:	4b05      	ldr	r3, [pc, #20]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	4a04      	ldr	r2, [pc, #16]	@ (8009de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dd6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009dd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3718      	adds	r7, #24
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	40021000 	.word	0x40021000

08009de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e049      	b.n	8009e8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d106      	bne.n	8009e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7fa f930 	bl	8004074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2202      	movs	r2, #2
 8009e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	3304      	adds	r3, #4
 8009e24:	4619      	mov	r1, r3
 8009e26:	4610      	mov	r0, r2
 8009e28:	f000 fef4 	bl	800ac14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2201      	movs	r2, #1
 8009e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2201      	movs	r2, #1
 8009e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2201      	movs	r2, #1
 8009e78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
	...

08009e98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d001      	beq.n	8009eb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	e04c      	b.n	8009f4a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4a26      	ldr	r2, [pc, #152]	@ (8009f58 <HAL_TIM_Base_Start+0xc0>)
 8009ebe:	4293      	cmp	r3, r2
 8009ec0:	d022      	beq.n	8009f08 <HAL_TIM_Base_Start+0x70>
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eca:	d01d      	beq.n	8009f08 <HAL_TIM_Base_Start+0x70>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a22      	ldr	r2, [pc, #136]	@ (8009f5c <HAL_TIM_Base_Start+0xc4>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d018      	beq.n	8009f08 <HAL_TIM_Base_Start+0x70>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a21      	ldr	r2, [pc, #132]	@ (8009f60 <HAL_TIM_Base_Start+0xc8>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d013      	beq.n	8009f08 <HAL_TIM_Base_Start+0x70>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8009f64 <HAL_TIM_Base_Start+0xcc>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d00e      	beq.n	8009f08 <HAL_TIM_Base_Start+0x70>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a1e      	ldr	r2, [pc, #120]	@ (8009f68 <HAL_TIM_Base_Start+0xd0>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d009      	beq.n	8009f08 <HAL_TIM_Base_Start+0x70>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8009f6c <HAL_TIM_Base_Start+0xd4>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d004      	beq.n	8009f08 <HAL_TIM_Base_Start+0x70>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a1b      	ldr	r2, [pc, #108]	@ (8009f70 <HAL_TIM_Base_Start+0xd8>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d115      	bne.n	8009f34 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	689a      	ldr	r2, [r3, #8]
 8009f0e:	4b19      	ldr	r3, [pc, #100]	@ (8009f74 <HAL_TIM_Base_Start+0xdc>)
 8009f10:	4013      	ands	r3, r2
 8009f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2b06      	cmp	r3, #6
 8009f18:	d015      	beq.n	8009f46 <HAL_TIM_Base_Start+0xae>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f20:	d011      	beq.n	8009f46 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	681a      	ldr	r2, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f042 0201 	orr.w	r2, r2, #1
 8009f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f32:	e008      	b.n	8009f46 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f042 0201 	orr.w	r2, r2, #1
 8009f42:	601a      	str	r2, [r3, #0]
 8009f44:	e000      	b.n	8009f48 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f48:	2300      	movs	r3, #0
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3714      	adds	r7, #20
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr
 8009f56:	bf00      	nop
 8009f58:	40012c00 	.word	0x40012c00
 8009f5c:	40000400 	.word	0x40000400
 8009f60:	40000800 	.word	0x40000800
 8009f64:	40000c00 	.word	0x40000c00
 8009f68:	40013400 	.word	0x40013400
 8009f6c:	40014000 	.word	0x40014000
 8009f70:	40015000 	.word	0x40015000
 8009f74:	00010007 	.word	0x00010007

08009f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b085      	sub	sp, #20
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d001      	beq.n	8009f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e054      	b.n	800a03a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2202      	movs	r2, #2
 8009f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	68da      	ldr	r2, [r3, #12]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f042 0201 	orr.w	r2, r2, #1
 8009fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a26      	ldr	r2, [pc, #152]	@ (800a048 <HAL_TIM_Base_Start_IT+0xd0>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d022      	beq.n	8009ff8 <HAL_TIM_Base_Start_IT+0x80>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fba:	d01d      	beq.n	8009ff8 <HAL_TIM_Base_Start_IT+0x80>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a22      	ldr	r2, [pc, #136]	@ (800a04c <HAL_TIM_Base_Start_IT+0xd4>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d018      	beq.n	8009ff8 <HAL_TIM_Base_Start_IT+0x80>
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a21      	ldr	r2, [pc, #132]	@ (800a050 <HAL_TIM_Base_Start_IT+0xd8>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d013      	beq.n	8009ff8 <HAL_TIM_Base_Start_IT+0x80>
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a1f      	ldr	r2, [pc, #124]	@ (800a054 <HAL_TIM_Base_Start_IT+0xdc>)
 8009fd6:	4293      	cmp	r3, r2
 8009fd8:	d00e      	beq.n	8009ff8 <HAL_TIM_Base_Start_IT+0x80>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a1e      	ldr	r2, [pc, #120]	@ (800a058 <HAL_TIM_Base_Start_IT+0xe0>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d009      	beq.n	8009ff8 <HAL_TIM_Base_Start_IT+0x80>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800a05c <HAL_TIM_Base_Start_IT+0xe4>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d004      	beq.n	8009ff8 <HAL_TIM_Base_Start_IT+0x80>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a1b      	ldr	r2, [pc, #108]	@ (800a060 <HAL_TIM_Base_Start_IT+0xe8>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d115      	bne.n	800a024 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	689a      	ldr	r2, [r3, #8]
 8009ffe:	4b19      	ldr	r3, [pc, #100]	@ (800a064 <HAL_TIM_Base_Start_IT+0xec>)
 800a000:	4013      	ands	r3, r2
 800a002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2b06      	cmp	r3, #6
 800a008:	d015      	beq.n	800a036 <HAL_TIM_Base_Start_IT+0xbe>
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a010:	d011      	beq.n	800a036 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f042 0201 	orr.w	r2, r2, #1
 800a020:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a022:	e008      	b.n	800a036 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f042 0201 	orr.w	r2, r2, #1
 800a032:	601a      	str	r2, [r3, #0]
 800a034:	e000      	b.n	800a038 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a036:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	40012c00 	.word	0x40012c00
 800a04c:	40000400 	.word	0x40000400
 800a050:	40000800 	.word	0x40000800
 800a054:	40000c00 	.word	0x40000c00
 800a058:	40013400 	.word	0x40013400
 800a05c:	40014000 	.word	0x40014000
 800a060:	40015000 	.word	0x40015000
 800a064:	00010007 	.word	0x00010007

0800a068 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	68da      	ldr	r2, [r3, #12]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f022 0201 	bic.w	r2, r2, #1
 800a07e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	6a1a      	ldr	r2, [r3, #32]
 800a086:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a08a:	4013      	ands	r3, r2
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d10f      	bne.n	800a0b0 <HAL_TIM_Base_Stop_IT+0x48>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6a1a      	ldr	r2, [r3, #32]
 800a096:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a09a:	4013      	ands	r3, r2
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d107      	bne.n	800a0b0 <HAL_TIM_Base_Stop_IT+0x48>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f022 0201 	bic.w	r2, r2, #1
 800a0ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	370c      	adds	r7, #12
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b082      	sub	sp, #8
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d101      	bne.n	800a0d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e049      	b.n	800a16c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d106      	bne.n	800a0f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f7f9 ff7f 	bl	8003ff0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2202      	movs	r2, #2
 800a0f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	3304      	adds	r3, #4
 800a102:	4619      	mov	r1, r3
 800a104:	4610      	mov	r0, r2
 800a106:	f000 fd85 	bl	800ac14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2201      	movs	r2, #1
 800a11e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2201      	movs	r2, #1
 800a126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2201      	movs	r2, #1
 800a12e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2201      	movs	r2, #1
 800a136:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2201      	movs	r2, #1
 800a15e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2201      	movs	r2, #1
 800a166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
 800a17c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d109      	bne.n	800a198 <HAL_TIM_PWM_Start+0x24>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	bf14      	ite	ne
 800a190:	2301      	movne	r3, #1
 800a192:	2300      	moveq	r3, #0
 800a194:	b2db      	uxtb	r3, r3
 800a196:	e03c      	b.n	800a212 <HAL_TIM_PWM_Start+0x9e>
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	2b04      	cmp	r3, #4
 800a19c:	d109      	bne.n	800a1b2 <HAL_TIM_PWM_Start+0x3e>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	2b01      	cmp	r3, #1
 800a1a8:	bf14      	ite	ne
 800a1aa:	2301      	movne	r3, #1
 800a1ac:	2300      	moveq	r3, #0
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	e02f      	b.n	800a212 <HAL_TIM_PWM_Start+0x9e>
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b08      	cmp	r3, #8
 800a1b6:	d109      	bne.n	800a1cc <HAL_TIM_PWM_Start+0x58>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	bf14      	ite	ne
 800a1c4:	2301      	movne	r3, #1
 800a1c6:	2300      	moveq	r3, #0
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	e022      	b.n	800a212 <HAL_TIM_PWM_Start+0x9e>
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	2b0c      	cmp	r3, #12
 800a1d0:	d109      	bne.n	800a1e6 <HAL_TIM_PWM_Start+0x72>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a1d8:	b2db      	uxtb	r3, r3
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	bf14      	ite	ne
 800a1de:	2301      	movne	r3, #1
 800a1e0:	2300      	moveq	r3, #0
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	e015      	b.n	800a212 <HAL_TIM_PWM_Start+0x9e>
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	2b10      	cmp	r3, #16
 800a1ea:	d109      	bne.n	800a200 <HAL_TIM_PWM_Start+0x8c>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a1f2:	b2db      	uxtb	r3, r3
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	bf14      	ite	ne
 800a1f8:	2301      	movne	r3, #1
 800a1fa:	2300      	moveq	r3, #0
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	e008      	b.n	800a212 <HAL_TIM_PWM_Start+0x9e>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a206:	b2db      	uxtb	r3, r3
 800a208:	2b01      	cmp	r3, #1
 800a20a:	bf14      	ite	ne
 800a20c:	2301      	movne	r3, #1
 800a20e:	2300      	moveq	r3, #0
 800a210:	b2db      	uxtb	r3, r3
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e0a6      	b.n	800a368 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d104      	bne.n	800a22a <HAL_TIM_PWM_Start+0xb6>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2202      	movs	r2, #2
 800a224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a228:	e023      	b.n	800a272 <HAL_TIM_PWM_Start+0xfe>
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	2b04      	cmp	r3, #4
 800a22e:	d104      	bne.n	800a23a <HAL_TIM_PWM_Start+0xc6>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2202      	movs	r2, #2
 800a234:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a238:	e01b      	b.n	800a272 <HAL_TIM_PWM_Start+0xfe>
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	2b08      	cmp	r3, #8
 800a23e:	d104      	bne.n	800a24a <HAL_TIM_PWM_Start+0xd6>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2202      	movs	r2, #2
 800a244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a248:	e013      	b.n	800a272 <HAL_TIM_PWM_Start+0xfe>
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b0c      	cmp	r3, #12
 800a24e:	d104      	bne.n	800a25a <HAL_TIM_PWM_Start+0xe6>
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2202      	movs	r2, #2
 800a254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a258:	e00b      	b.n	800a272 <HAL_TIM_PWM_Start+0xfe>
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	2b10      	cmp	r3, #16
 800a25e:	d104      	bne.n	800a26a <HAL_TIM_PWM_Start+0xf6>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2202      	movs	r2, #2
 800a264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a268:	e003      	b.n	800a272 <HAL_TIM_PWM_Start+0xfe>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2202      	movs	r2, #2
 800a26e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	2201      	movs	r2, #1
 800a278:	6839      	ldr	r1, [r7, #0]
 800a27a:	4618      	mov	r0, r3
 800a27c:	f001 f944 	bl	800b508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a3a      	ldr	r2, [pc, #232]	@ (800a370 <HAL_TIM_PWM_Start+0x1fc>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d018      	beq.n	800a2bc <HAL_TIM_PWM_Start+0x148>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	4a39      	ldr	r2, [pc, #228]	@ (800a374 <HAL_TIM_PWM_Start+0x200>)
 800a290:	4293      	cmp	r3, r2
 800a292:	d013      	beq.n	800a2bc <HAL_TIM_PWM_Start+0x148>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	4a37      	ldr	r2, [pc, #220]	@ (800a378 <HAL_TIM_PWM_Start+0x204>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d00e      	beq.n	800a2bc <HAL_TIM_PWM_Start+0x148>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a36      	ldr	r2, [pc, #216]	@ (800a37c <HAL_TIM_PWM_Start+0x208>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d009      	beq.n	800a2bc <HAL_TIM_PWM_Start+0x148>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a34      	ldr	r2, [pc, #208]	@ (800a380 <HAL_TIM_PWM_Start+0x20c>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d004      	beq.n	800a2bc <HAL_TIM_PWM_Start+0x148>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a33      	ldr	r2, [pc, #204]	@ (800a384 <HAL_TIM_PWM_Start+0x210>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d101      	bne.n	800a2c0 <HAL_TIM_PWM_Start+0x14c>
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e000      	b.n	800a2c2 <HAL_TIM_PWM_Start+0x14e>
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d007      	beq.n	800a2d6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a2d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a25      	ldr	r2, [pc, #148]	@ (800a370 <HAL_TIM_PWM_Start+0x1fc>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d022      	beq.n	800a326 <HAL_TIM_PWM_Start+0x1b2>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a2e8:	d01d      	beq.n	800a326 <HAL_TIM_PWM_Start+0x1b2>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a26      	ldr	r2, [pc, #152]	@ (800a388 <HAL_TIM_PWM_Start+0x214>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d018      	beq.n	800a326 <HAL_TIM_PWM_Start+0x1b2>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a24      	ldr	r2, [pc, #144]	@ (800a38c <HAL_TIM_PWM_Start+0x218>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d013      	beq.n	800a326 <HAL_TIM_PWM_Start+0x1b2>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a23      	ldr	r2, [pc, #140]	@ (800a390 <HAL_TIM_PWM_Start+0x21c>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d00e      	beq.n	800a326 <HAL_TIM_PWM_Start+0x1b2>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a19      	ldr	r2, [pc, #100]	@ (800a374 <HAL_TIM_PWM_Start+0x200>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d009      	beq.n	800a326 <HAL_TIM_PWM_Start+0x1b2>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a18      	ldr	r2, [pc, #96]	@ (800a378 <HAL_TIM_PWM_Start+0x204>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d004      	beq.n	800a326 <HAL_TIM_PWM_Start+0x1b2>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a18      	ldr	r2, [pc, #96]	@ (800a384 <HAL_TIM_PWM_Start+0x210>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d115      	bne.n	800a352 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	689a      	ldr	r2, [r3, #8]
 800a32c:	4b19      	ldr	r3, [pc, #100]	@ (800a394 <HAL_TIM_PWM_Start+0x220>)
 800a32e:	4013      	ands	r3, r2
 800a330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b06      	cmp	r3, #6
 800a336:	d015      	beq.n	800a364 <HAL_TIM_PWM_Start+0x1f0>
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a33e:	d011      	beq.n	800a364 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f042 0201 	orr.w	r2, r2, #1
 800a34e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a350:	e008      	b.n	800a364 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f042 0201 	orr.w	r2, r2, #1
 800a360:	601a      	str	r2, [r3, #0]
 800a362:	e000      	b.n	800a366 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a364:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}
 800a370:	40012c00 	.word	0x40012c00
 800a374:	40013400 	.word	0x40013400
 800a378:	40014000 	.word	0x40014000
 800a37c:	40014400 	.word	0x40014400
 800a380:	40014800 	.word	0x40014800
 800a384:	40015000 	.word	0x40015000
 800a388:	40000400 	.word	0x40000400
 800a38c:	40000800 	.word	0x40000800
 800a390:	40000c00 	.word	0x40000c00
 800a394:	00010007 	.word	0x00010007

0800a398 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2200      	movs	r2, #0
 800a3a8:	6839      	ldr	r1, [r7, #0]
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	f001 f8ac 	bl	800b508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	4a40      	ldr	r2, [pc, #256]	@ (800a4b8 <HAL_TIM_PWM_Stop+0x120>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d018      	beq.n	800a3ec <HAL_TIM_PWM_Stop+0x54>
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a3f      	ldr	r2, [pc, #252]	@ (800a4bc <HAL_TIM_PWM_Stop+0x124>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d013      	beq.n	800a3ec <HAL_TIM_PWM_Stop+0x54>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a3d      	ldr	r2, [pc, #244]	@ (800a4c0 <HAL_TIM_PWM_Stop+0x128>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d00e      	beq.n	800a3ec <HAL_TIM_PWM_Stop+0x54>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	4a3c      	ldr	r2, [pc, #240]	@ (800a4c4 <HAL_TIM_PWM_Stop+0x12c>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d009      	beq.n	800a3ec <HAL_TIM_PWM_Stop+0x54>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4a3a      	ldr	r2, [pc, #232]	@ (800a4c8 <HAL_TIM_PWM_Stop+0x130>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d004      	beq.n	800a3ec <HAL_TIM_PWM_Stop+0x54>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a39      	ldr	r2, [pc, #228]	@ (800a4cc <HAL_TIM_PWM_Stop+0x134>)
 800a3e8:	4293      	cmp	r3, r2
 800a3ea:	d101      	bne.n	800a3f0 <HAL_TIM_PWM_Stop+0x58>
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e000      	b.n	800a3f2 <HAL_TIM_PWM_Stop+0x5a>
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d017      	beq.n	800a426 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	6a1a      	ldr	r2, [r3, #32]
 800a3fc:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a400:	4013      	ands	r3, r2
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10f      	bne.n	800a426 <HAL_TIM_PWM_Stop+0x8e>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6a1a      	ldr	r2, [r3, #32]
 800a40c:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a410:	4013      	ands	r3, r2
 800a412:	2b00      	cmp	r3, #0
 800a414:	d107      	bne.n	800a426 <HAL_TIM_PWM_Stop+0x8e>
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a424:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	6a1a      	ldr	r2, [r3, #32]
 800a42c:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a430:	4013      	ands	r3, r2
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10f      	bne.n	800a456 <HAL_TIM_PWM_Stop+0xbe>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	6a1a      	ldr	r2, [r3, #32]
 800a43c:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a440:	4013      	ands	r3, r2
 800a442:	2b00      	cmp	r3, #0
 800a444:	d107      	bne.n	800a456 <HAL_TIM_PWM_Stop+0xbe>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f022 0201 	bic.w	r2, r2, #1
 800a454:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d104      	bne.n	800a466 <HAL_TIM_PWM_Stop+0xce>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a464:	e023      	b.n	800a4ae <HAL_TIM_PWM_Stop+0x116>
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	2b04      	cmp	r3, #4
 800a46a:	d104      	bne.n	800a476 <HAL_TIM_PWM_Stop+0xde>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a474:	e01b      	b.n	800a4ae <HAL_TIM_PWM_Stop+0x116>
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	2b08      	cmp	r3, #8
 800a47a:	d104      	bne.n	800a486 <HAL_TIM_PWM_Stop+0xee>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a484:	e013      	b.n	800a4ae <HAL_TIM_PWM_Stop+0x116>
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	2b0c      	cmp	r3, #12
 800a48a:	d104      	bne.n	800a496 <HAL_TIM_PWM_Stop+0xfe>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a494:	e00b      	b.n	800a4ae <HAL_TIM_PWM_Stop+0x116>
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	2b10      	cmp	r3, #16
 800a49a:	d104      	bne.n	800a4a6 <HAL_TIM_PWM_Stop+0x10e>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a4a4:	e003      	b.n	800a4ae <HAL_TIM_PWM_Stop+0x116>
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3708      	adds	r7, #8
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	40012c00 	.word	0x40012c00
 800a4bc:	40013400 	.word	0x40013400
 800a4c0:	40014000 	.word	0x40014000
 800a4c4:	40014400 	.word	0x40014400
 800a4c8:	40014800 	.word	0x40014800
 800a4cc:	40015000 	.word	0x40015000

0800a4d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	f003 0302 	and.w	r3, r3, #2
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d020      	beq.n	800a534 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f003 0302 	and.w	r3, r3, #2
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01b      	beq.n	800a534 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f06f 0202 	mvn.w	r2, #2
 800a504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	699b      	ldr	r3, [r3, #24]
 800a512:	f003 0303 	and.w	r3, r3, #3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d003      	beq.n	800a522 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fb5c 	bl	800abd8 <HAL_TIM_IC_CaptureCallback>
 800a520:	e005      	b.n	800a52e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 fb4e 	bl	800abc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 fb5f 	bl	800abec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2200      	movs	r2, #0
 800a532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	f003 0304 	and.w	r3, r3, #4
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d020      	beq.n	800a580 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	f003 0304 	and.w	r3, r3, #4
 800a544:	2b00      	cmp	r3, #0
 800a546:	d01b      	beq.n	800a580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f06f 0204 	mvn.w	r2, #4
 800a550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2202      	movs	r2, #2
 800a556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a562:	2b00      	cmp	r3, #0
 800a564:	d003      	beq.n	800a56e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 fb36 	bl	800abd8 <HAL_TIM_IC_CaptureCallback>
 800a56c:	e005      	b.n	800a57a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fb28 	bl	800abc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 fb39 	bl	800abec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	f003 0308 	and.w	r3, r3, #8
 800a586:	2b00      	cmp	r3, #0
 800a588:	d020      	beq.n	800a5cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f003 0308 	and.w	r3, r3, #8
 800a590:	2b00      	cmp	r3, #0
 800a592:	d01b      	beq.n	800a5cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f06f 0208 	mvn.w	r2, #8
 800a59c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2204      	movs	r2, #4
 800a5a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	69db      	ldr	r3, [r3, #28]
 800a5aa:	f003 0303 	and.w	r3, r3, #3
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d003      	beq.n	800a5ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fb10 	bl	800abd8 <HAL_TIM_IC_CaptureCallback>
 800a5b8:	e005      	b.n	800a5c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 fb02 	bl	800abc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fb13 	bl	800abec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	f003 0310 	and.w	r3, r3, #16
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d020      	beq.n	800a618 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	f003 0310 	and.w	r3, r3, #16
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d01b      	beq.n	800a618 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f06f 0210 	mvn.w	r2, #16
 800a5e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2208      	movs	r2, #8
 800a5ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d003      	beq.n	800a606 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 faea 	bl	800abd8 <HAL_TIM_IC_CaptureCallback>
 800a604:	e005      	b.n	800a612 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fadc 	bl	800abc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 faed 	bl	800abec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d00c      	beq.n	800a63c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	f003 0301 	and.w	r3, r3, #1
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d007      	beq.n	800a63c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f06f 0201 	mvn.w	r2, #1
 800a634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7f8 fb1a 	bl	8002c70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a642:	2b00      	cmp	r3, #0
 800a644:	d104      	bne.n	800a650 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d00c      	beq.n	800a66a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a656:	2b00      	cmp	r3, #0
 800a658:	d007      	beq.n	800a66a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f001 f8a9 	bl	800b7bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00c      	beq.n	800a68e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d007      	beq.n	800a68e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f001 f8a1 	bl	800b7d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00c      	beq.n	800a6b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d007      	beq.n	800a6b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a6aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 faa7 	bl	800ac00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	f003 0320 	and.w	r3, r3, #32
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00c      	beq.n	800a6d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f003 0320 	and.w	r3, r3, #32
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d007      	beq.n	800a6d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f06f 0220 	mvn.w	r2, #32
 800a6ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f001 f869 	bl	800b7a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00c      	beq.n	800a6fa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d007      	beq.n	800a6fa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a6f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f001 f875 	bl	800b7e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a700:	2b00      	cmp	r3, #0
 800a702:	d00c      	beq.n	800a71e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d007      	beq.n	800a71e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f001 f86d 	bl	800b7f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a724:	2b00      	cmp	r3, #0
 800a726:	d00c      	beq.n	800a742 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d007      	beq.n	800a742 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a73a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f001 f865 	bl	800b80c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00c      	beq.n	800a766 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a752:	2b00      	cmp	r3, #0
 800a754:	d007      	beq.n	800a766 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a75e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 f85d 	bl	800b820 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a766:	bf00      	nop
 800a768:	3710      	adds	r7, #16
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
	...

0800a770 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b086      	sub	sp, #24
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a786:	2b01      	cmp	r3, #1
 800a788:	d101      	bne.n	800a78e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a78a:	2302      	movs	r3, #2
 800a78c:	e0ff      	b.n	800a98e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2201      	movs	r2, #1
 800a792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b14      	cmp	r3, #20
 800a79a:	f200 80f0 	bhi.w	800a97e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a79e:	a201      	add	r2, pc, #4	@ (adr r2, 800a7a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a4:	0800a7f9 	.word	0x0800a7f9
 800a7a8:	0800a97f 	.word	0x0800a97f
 800a7ac:	0800a97f 	.word	0x0800a97f
 800a7b0:	0800a97f 	.word	0x0800a97f
 800a7b4:	0800a839 	.word	0x0800a839
 800a7b8:	0800a97f 	.word	0x0800a97f
 800a7bc:	0800a97f 	.word	0x0800a97f
 800a7c0:	0800a97f 	.word	0x0800a97f
 800a7c4:	0800a87b 	.word	0x0800a87b
 800a7c8:	0800a97f 	.word	0x0800a97f
 800a7cc:	0800a97f 	.word	0x0800a97f
 800a7d0:	0800a97f 	.word	0x0800a97f
 800a7d4:	0800a8bb 	.word	0x0800a8bb
 800a7d8:	0800a97f 	.word	0x0800a97f
 800a7dc:	0800a97f 	.word	0x0800a97f
 800a7e0:	0800a97f 	.word	0x0800a97f
 800a7e4:	0800a8fd 	.word	0x0800a8fd
 800a7e8:	0800a97f 	.word	0x0800a97f
 800a7ec:	0800a97f 	.word	0x0800a97f
 800a7f0:	0800a97f 	.word	0x0800a97f
 800a7f4:	0800a93d 	.word	0x0800a93d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	68b9      	ldr	r1, [r7, #8]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f000 fabc 	bl	800ad7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	699a      	ldr	r2, [r3, #24]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f042 0208 	orr.w	r2, r2, #8
 800a812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	699a      	ldr	r2, [r3, #24]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f022 0204 	bic.w	r2, r2, #4
 800a822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	6999      	ldr	r1, [r3, #24]
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	691a      	ldr	r2, [r3, #16]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	430a      	orrs	r2, r1
 800a834:	619a      	str	r2, [r3, #24]
      break;
 800a836:	e0a5      	b.n	800a984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68b9      	ldr	r1, [r7, #8]
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fb36 	bl	800aeb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	699a      	ldr	r2, [r3, #24]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a852:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	699a      	ldr	r2, [r3, #24]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a862:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	6999      	ldr	r1, [r3, #24]
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	021a      	lsls	r2, r3, #8
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	430a      	orrs	r2, r1
 800a876:	619a      	str	r2, [r3, #24]
      break;
 800a878:	e084      	b.n	800a984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	68b9      	ldr	r1, [r7, #8]
 800a880:	4618      	mov	r0, r3
 800a882:	f000 fba9 	bl	800afd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	69da      	ldr	r2, [r3, #28]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f042 0208 	orr.w	r2, r2, #8
 800a894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	69da      	ldr	r2, [r3, #28]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f022 0204 	bic.w	r2, r2, #4
 800a8a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	69d9      	ldr	r1, [r3, #28]
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	691a      	ldr	r2, [r3, #16]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	430a      	orrs	r2, r1
 800a8b6:	61da      	str	r2, [r3, #28]
      break;
 800a8b8:	e064      	b.n	800a984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68b9      	ldr	r1, [r7, #8]
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 fc1b 	bl	800b0fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	69da      	ldr	r2, [r3, #28]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a8d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	69da      	ldr	r2, [r3, #28]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	69d9      	ldr	r1, [r3, #28]
 800a8ec:	68bb      	ldr	r3, [r7, #8]
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	021a      	lsls	r2, r3, #8
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	430a      	orrs	r2, r1
 800a8f8:	61da      	str	r2, [r3, #28]
      break;
 800a8fa:	e043      	b.n	800a984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68b9      	ldr	r1, [r7, #8]
 800a902:	4618      	mov	r0, r3
 800a904:	f000 fc8e 	bl	800b224 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f042 0208 	orr.w	r2, r2, #8
 800a916:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f022 0204 	bic.w	r2, r2, #4
 800a926:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	691a      	ldr	r2, [r3, #16]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	430a      	orrs	r2, r1
 800a938:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a93a:	e023      	b.n	800a984 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68b9      	ldr	r1, [r7, #8]
 800a942:	4618      	mov	r0, r3
 800a944:	f000 fcd8 	bl	800b2f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a956:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a966:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	021a      	lsls	r2, r3, #8
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	430a      	orrs	r2, r1
 800a97a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a97c:	e002      	b.n	800a984 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	75fb      	strb	r3, [r7, #23]
      break;
 800a982:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	2200      	movs	r2, #0
 800a988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a98c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3718      	adds	r7, #24
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop

0800a998 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a9ac:	2b01      	cmp	r3, #1
 800a9ae:	d101      	bne.n	800a9b4 <HAL_TIM_ConfigClockSource+0x1c>
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	e0f6      	b.n	800aba2 <HAL_TIM_ConfigClockSource+0x20a>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2202      	movs	r2, #2
 800a9c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a9d2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a9d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a9de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	68ba      	ldr	r2, [r7, #8]
 800a9e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a6f      	ldr	r2, [pc, #444]	@ (800abac <HAL_TIM_ConfigClockSource+0x214>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	f000 80c1 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1de>
 800a9f4:	4a6d      	ldr	r2, [pc, #436]	@ (800abac <HAL_TIM_ConfigClockSource+0x214>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	f200 80c6 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800a9fc:	4a6c      	ldr	r2, [pc, #432]	@ (800abb0 <HAL_TIM_ConfigClockSource+0x218>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	f000 80b9 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1de>
 800aa04:	4a6a      	ldr	r2, [pc, #424]	@ (800abb0 <HAL_TIM_ConfigClockSource+0x218>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	f200 80be 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa0c:	4a69      	ldr	r2, [pc, #420]	@ (800abb4 <HAL_TIM_ConfigClockSource+0x21c>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	f000 80b1 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1de>
 800aa14:	4a67      	ldr	r2, [pc, #412]	@ (800abb4 <HAL_TIM_ConfigClockSource+0x21c>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	f200 80b6 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa1c:	4a66      	ldr	r2, [pc, #408]	@ (800abb8 <HAL_TIM_ConfigClockSource+0x220>)
 800aa1e:	4293      	cmp	r3, r2
 800aa20:	f000 80a9 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1de>
 800aa24:	4a64      	ldr	r2, [pc, #400]	@ (800abb8 <HAL_TIM_ConfigClockSource+0x220>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	f200 80ae 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa2c:	4a63      	ldr	r2, [pc, #396]	@ (800abbc <HAL_TIM_ConfigClockSource+0x224>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	f000 80a1 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1de>
 800aa34:	4a61      	ldr	r2, [pc, #388]	@ (800abbc <HAL_TIM_ConfigClockSource+0x224>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	f200 80a6 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa3c:	4a60      	ldr	r2, [pc, #384]	@ (800abc0 <HAL_TIM_ConfigClockSource+0x228>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	f000 8099 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1de>
 800aa44:	4a5e      	ldr	r2, [pc, #376]	@ (800abc0 <HAL_TIM_ConfigClockSource+0x228>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	f200 809e 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa4c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa50:	f000 8091 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1de>
 800aa54:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800aa58:	f200 8096 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa60:	f000 8089 	beq.w	800ab76 <HAL_TIM_ConfigClockSource+0x1de>
 800aa64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa68:	f200 808e 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa70:	d03e      	beq.n	800aaf0 <HAL_TIM_ConfigClockSource+0x158>
 800aa72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa76:	f200 8087 	bhi.w	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa7e:	f000 8086 	beq.w	800ab8e <HAL_TIM_ConfigClockSource+0x1f6>
 800aa82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa86:	d87f      	bhi.n	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa88:	2b70      	cmp	r3, #112	@ 0x70
 800aa8a:	d01a      	beq.n	800aac2 <HAL_TIM_ConfigClockSource+0x12a>
 800aa8c:	2b70      	cmp	r3, #112	@ 0x70
 800aa8e:	d87b      	bhi.n	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa90:	2b60      	cmp	r3, #96	@ 0x60
 800aa92:	d050      	beq.n	800ab36 <HAL_TIM_ConfigClockSource+0x19e>
 800aa94:	2b60      	cmp	r3, #96	@ 0x60
 800aa96:	d877      	bhi.n	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800aa98:	2b50      	cmp	r3, #80	@ 0x50
 800aa9a:	d03c      	beq.n	800ab16 <HAL_TIM_ConfigClockSource+0x17e>
 800aa9c:	2b50      	cmp	r3, #80	@ 0x50
 800aa9e:	d873      	bhi.n	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800aaa0:	2b40      	cmp	r3, #64	@ 0x40
 800aaa2:	d058      	beq.n	800ab56 <HAL_TIM_ConfigClockSource+0x1be>
 800aaa4:	2b40      	cmp	r3, #64	@ 0x40
 800aaa6:	d86f      	bhi.n	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800aaa8:	2b30      	cmp	r3, #48	@ 0x30
 800aaaa:	d064      	beq.n	800ab76 <HAL_TIM_ConfigClockSource+0x1de>
 800aaac:	2b30      	cmp	r3, #48	@ 0x30
 800aaae:	d86b      	bhi.n	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800aab0:	2b20      	cmp	r3, #32
 800aab2:	d060      	beq.n	800ab76 <HAL_TIM_ConfigClockSource+0x1de>
 800aab4:	2b20      	cmp	r3, #32
 800aab6:	d867      	bhi.n	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d05c      	beq.n	800ab76 <HAL_TIM_ConfigClockSource+0x1de>
 800aabc:	2b10      	cmp	r3, #16
 800aabe:	d05a      	beq.n	800ab76 <HAL_TIM_ConfigClockSource+0x1de>
 800aac0:	e062      	b.n	800ab88 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aad2:	f000 fcf9 	bl	800b4c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	689b      	ldr	r3, [r3, #8]
 800aadc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800aae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	68ba      	ldr	r2, [r7, #8]
 800aaec:	609a      	str	r2, [r3, #8]
      break;
 800aaee:	e04f      	b.n	800ab90 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab00:	f000 fce2 	bl	800b4c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	689a      	ldr	r2, [r3, #8]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ab12:	609a      	str	r2, [r3, #8]
      break;
 800ab14:	e03c      	b.n	800ab90 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab22:	461a      	mov	r2, r3
 800ab24:	f000 fc54 	bl	800b3d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2150      	movs	r1, #80	@ 0x50
 800ab2e:	4618      	mov	r0, r3
 800ab30:	f000 fcad 	bl	800b48e <TIM_ITRx_SetConfig>
      break;
 800ab34:	e02c      	b.n	800ab90 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab42:	461a      	mov	r2, r3
 800ab44:	f000 fc73 	bl	800b42e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2160      	movs	r1, #96	@ 0x60
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f000 fc9d 	bl	800b48e <TIM_ITRx_SetConfig>
      break;
 800ab54:	e01c      	b.n	800ab90 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab62:	461a      	mov	r2, r3
 800ab64:	f000 fc34 	bl	800b3d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2140      	movs	r1, #64	@ 0x40
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 fc8d 	bl	800b48e <TIM_ITRx_SetConfig>
      break;
 800ab74:	e00c      	b.n	800ab90 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4610      	mov	r0, r2
 800ab82:	f000 fc84 	bl	800b48e <TIM_ITRx_SetConfig>
      break;
 800ab86:	e003      	b.n	800ab90 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ab8c:	e000      	b.n	800ab90 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800ab8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	00100070 	.word	0x00100070
 800abb0:	00100060 	.word	0x00100060
 800abb4:	00100050 	.word	0x00100050
 800abb8:	00100040 	.word	0x00100040
 800abbc:	00100030 	.word	0x00100030
 800abc0:	00100020 	.word	0x00100020

0800abc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abcc:	bf00      	nop
 800abce:	370c      	adds	r7, #12
 800abd0:	46bd      	mov	sp, r7
 800abd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd6:	4770      	bx	lr

0800abd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abd8:	b480      	push	{r7}
 800abda:	b083      	sub	sp, #12
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abe0:	bf00      	nop
 800abe2:	370c      	adds	r7, #12
 800abe4:	46bd      	mov	sp, r7
 800abe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abea:	4770      	bx	lr

0800abec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800abf4:	bf00      	nop
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a4c      	ldr	r2, [pc, #304]	@ (800ad58 <TIM_Base_SetConfig+0x144>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d017      	beq.n	800ac5c <TIM_Base_SetConfig+0x48>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac32:	d013      	beq.n	800ac5c <TIM_Base_SetConfig+0x48>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a49      	ldr	r2, [pc, #292]	@ (800ad5c <TIM_Base_SetConfig+0x148>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d00f      	beq.n	800ac5c <TIM_Base_SetConfig+0x48>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a48      	ldr	r2, [pc, #288]	@ (800ad60 <TIM_Base_SetConfig+0x14c>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d00b      	beq.n	800ac5c <TIM_Base_SetConfig+0x48>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a47      	ldr	r2, [pc, #284]	@ (800ad64 <TIM_Base_SetConfig+0x150>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d007      	beq.n	800ac5c <TIM_Base_SetConfig+0x48>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	4a46      	ldr	r2, [pc, #280]	@ (800ad68 <TIM_Base_SetConfig+0x154>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d003      	beq.n	800ac5c <TIM_Base_SetConfig+0x48>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	4a45      	ldr	r2, [pc, #276]	@ (800ad6c <TIM_Base_SetConfig+0x158>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d108      	bne.n	800ac6e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	4a39      	ldr	r2, [pc, #228]	@ (800ad58 <TIM_Base_SetConfig+0x144>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d023      	beq.n	800acbe <TIM_Base_SetConfig+0xaa>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac7c:	d01f      	beq.n	800acbe <TIM_Base_SetConfig+0xaa>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a36      	ldr	r2, [pc, #216]	@ (800ad5c <TIM_Base_SetConfig+0x148>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d01b      	beq.n	800acbe <TIM_Base_SetConfig+0xaa>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a35      	ldr	r2, [pc, #212]	@ (800ad60 <TIM_Base_SetConfig+0x14c>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d017      	beq.n	800acbe <TIM_Base_SetConfig+0xaa>
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	4a34      	ldr	r2, [pc, #208]	@ (800ad64 <TIM_Base_SetConfig+0x150>)
 800ac92:	4293      	cmp	r3, r2
 800ac94:	d013      	beq.n	800acbe <TIM_Base_SetConfig+0xaa>
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a33      	ldr	r2, [pc, #204]	@ (800ad68 <TIM_Base_SetConfig+0x154>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d00f      	beq.n	800acbe <TIM_Base_SetConfig+0xaa>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a33      	ldr	r2, [pc, #204]	@ (800ad70 <TIM_Base_SetConfig+0x15c>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d00b      	beq.n	800acbe <TIM_Base_SetConfig+0xaa>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a32      	ldr	r2, [pc, #200]	@ (800ad74 <TIM_Base_SetConfig+0x160>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d007      	beq.n	800acbe <TIM_Base_SetConfig+0xaa>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a31      	ldr	r2, [pc, #196]	@ (800ad78 <TIM_Base_SetConfig+0x164>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d003      	beq.n	800acbe <TIM_Base_SetConfig+0xaa>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a2c      	ldr	r2, [pc, #176]	@ (800ad6c <TIM_Base_SetConfig+0x158>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d108      	bne.n	800acd0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	68db      	ldr	r3, [r3, #12]
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	4313      	orrs	r3, r2
 800acce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	4313      	orrs	r3, r2
 800acdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	689a      	ldr	r2, [r3, #8]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	681a      	ldr	r2, [r3, #0]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a18      	ldr	r2, [pc, #96]	@ (800ad58 <TIM_Base_SetConfig+0x144>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d013      	beq.n	800ad24 <TIM_Base_SetConfig+0x110>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a1a      	ldr	r2, [pc, #104]	@ (800ad68 <TIM_Base_SetConfig+0x154>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d00f      	beq.n	800ad24 <TIM_Base_SetConfig+0x110>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a1a      	ldr	r2, [pc, #104]	@ (800ad70 <TIM_Base_SetConfig+0x15c>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d00b      	beq.n	800ad24 <TIM_Base_SetConfig+0x110>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a19      	ldr	r2, [pc, #100]	@ (800ad74 <TIM_Base_SetConfig+0x160>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d007      	beq.n	800ad24 <TIM_Base_SetConfig+0x110>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	4a18      	ldr	r2, [pc, #96]	@ (800ad78 <TIM_Base_SetConfig+0x164>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d003      	beq.n	800ad24 <TIM_Base_SetConfig+0x110>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a13      	ldr	r2, [pc, #76]	@ (800ad6c <TIM_Base_SetConfig+0x158>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d103      	bne.n	800ad2c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	691a      	ldr	r2, [r3, #16]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2201      	movs	r2, #1
 800ad30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	691b      	ldr	r3, [r3, #16]
 800ad36:	f003 0301 	and.w	r3, r3, #1
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d105      	bne.n	800ad4a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	f023 0201 	bic.w	r2, r3, #1
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	611a      	str	r2, [r3, #16]
  }
}
 800ad4a:	bf00      	nop
 800ad4c:	3714      	adds	r7, #20
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
 800ad56:	bf00      	nop
 800ad58:	40012c00 	.word	0x40012c00
 800ad5c:	40000400 	.word	0x40000400
 800ad60:	40000800 	.word	0x40000800
 800ad64:	40000c00 	.word	0x40000c00
 800ad68:	40013400 	.word	0x40013400
 800ad6c:	40015000 	.word	0x40015000
 800ad70:	40014000 	.word	0x40014000
 800ad74:	40014400 	.word	0x40014400
 800ad78:	40014800 	.word	0x40014800

0800ad7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b087      	sub	sp, #28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a1b      	ldr	r3, [r3, #32]
 800ad8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a1b      	ldr	r3, [r3, #32]
 800ad90:	f023 0201 	bic.w	r2, r3, #1
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	699b      	ldr	r3, [r3, #24]
 800ada2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f023 0303 	bic.w	r3, r3, #3
 800adb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68fa      	ldr	r2, [r7, #12]
 800adbe:	4313      	orrs	r3, r2
 800adc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	f023 0302 	bic.w	r3, r3, #2
 800adc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	689b      	ldr	r3, [r3, #8]
 800adce:	697a      	ldr	r2, [r7, #20]
 800add0:	4313      	orrs	r3, r2
 800add2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	4a30      	ldr	r2, [pc, #192]	@ (800ae98 <TIM_OC1_SetConfig+0x11c>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d013      	beq.n	800ae04 <TIM_OC1_SetConfig+0x88>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a2f      	ldr	r2, [pc, #188]	@ (800ae9c <TIM_OC1_SetConfig+0x120>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d00f      	beq.n	800ae04 <TIM_OC1_SetConfig+0x88>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a2e      	ldr	r2, [pc, #184]	@ (800aea0 <TIM_OC1_SetConfig+0x124>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d00b      	beq.n	800ae04 <TIM_OC1_SetConfig+0x88>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a2d      	ldr	r2, [pc, #180]	@ (800aea4 <TIM_OC1_SetConfig+0x128>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d007      	beq.n	800ae04 <TIM_OC1_SetConfig+0x88>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a2c      	ldr	r2, [pc, #176]	@ (800aea8 <TIM_OC1_SetConfig+0x12c>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d003      	beq.n	800ae04 <TIM_OC1_SetConfig+0x88>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a2b      	ldr	r2, [pc, #172]	@ (800aeac <TIM_OC1_SetConfig+0x130>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d10c      	bne.n	800ae1e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	f023 0308 	bic.w	r3, r3, #8
 800ae0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	68db      	ldr	r3, [r3, #12]
 800ae10:	697a      	ldr	r2, [r7, #20]
 800ae12:	4313      	orrs	r3, r2
 800ae14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	f023 0304 	bic.w	r3, r3, #4
 800ae1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4a1d      	ldr	r2, [pc, #116]	@ (800ae98 <TIM_OC1_SetConfig+0x11c>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d013      	beq.n	800ae4e <TIM_OC1_SetConfig+0xd2>
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4a1c      	ldr	r2, [pc, #112]	@ (800ae9c <TIM_OC1_SetConfig+0x120>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d00f      	beq.n	800ae4e <TIM_OC1_SetConfig+0xd2>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	4a1b      	ldr	r2, [pc, #108]	@ (800aea0 <TIM_OC1_SetConfig+0x124>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d00b      	beq.n	800ae4e <TIM_OC1_SetConfig+0xd2>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a1a      	ldr	r2, [pc, #104]	@ (800aea4 <TIM_OC1_SetConfig+0x128>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d007      	beq.n	800ae4e <TIM_OC1_SetConfig+0xd2>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a19      	ldr	r2, [pc, #100]	@ (800aea8 <TIM_OC1_SetConfig+0x12c>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d003      	beq.n	800ae4e <TIM_OC1_SetConfig+0xd2>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a18      	ldr	r2, [pc, #96]	@ (800aeac <TIM_OC1_SetConfig+0x130>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d111      	bne.n	800ae72 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ae5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	693a      	ldr	r2, [r7, #16]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	693a      	ldr	r2, [r7, #16]
 800ae76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	685a      	ldr	r2, [r3, #4]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	697a      	ldr	r2, [r7, #20]
 800ae8a:	621a      	str	r2, [r3, #32]
}
 800ae8c:	bf00      	nop
 800ae8e:	371c      	adds	r7, #28
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr
 800ae98:	40012c00 	.word	0x40012c00
 800ae9c:	40013400 	.word	0x40013400
 800aea0:	40014000 	.word	0x40014000
 800aea4:	40014400 	.word	0x40014400
 800aea8:	40014800 	.word	0x40014800
 800aeac:	40015000 	.word	0x40015000

0800aeb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b087      	sub	sp, #28
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a1b      	ldr	r3, [r3, #32]
 800aebe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6a1b      	ldr	r3, [r3, #32]
 800aec4:	f023 0210 	bic.w	r2, r3, #16
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	699b      	ldr	r3, [r3, #24]
 800aed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aeea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	021b      	lsls	r3, r3, #8
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	4313      	orrs	r3, r2
 800aef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	f023 0320 	bic.w	r3, r3, #32
 800aefe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af00:	683b      	ldr	r3, [r7, #0]
 800af02:	689b      	ldr	r3, [r3, #8]
 800af04:	011b      	lsls	r3, r3, #4
 800af06:	697a      	ldr	r2, [r7, #20]
 800af08:	4313      	orrs	r3, r2
 800af0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a2c      	ldr	r2, [pc, #176]	@ (800afc0 <TIM_OC2_SetConfig+0x110>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d007      	beq.n	800af24 <TIM_OC2_SetConfig+0x74>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a2b      	ldr	r2, [pc, #172]	@ (800afc4 <TIM_OC2_SetConfig+0x114>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d003      	beq.n	800af24 <TIM_OC2_SetConfig+0x74>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a2a      	ldr	r2, [pc, #168]	@ (800afc8 <TIM_OC2_SetConfig+0x118>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d10d      	bne.n	800af40 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	011b      	lsls	r3, r3, #4
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	4313      	orrs	r3, r2
 800af36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a1f      	ldr	r2, [pc, #124]	@ (800afc0 <TIM_OC2_SetConfig+0x110>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d013      	beq.n	800af70 <TIM_OC2_SetConfig+0xc0>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a1e      	ldr	r2, [pc, #120]	@ (800afc4 <TIM_OC2_SetConfig+0x114>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d00f      	beq.n	800af70 <TIM_OC2_SetConfig+0xc0>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a1e      	ldr	r2, [pc, #120]	@ (800afcc <TIM_OC2_SetConfig+0x11c>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d00b      	beq.n	800af70 <TIM_OC2_SetConfig+0xc0>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a1d      	ldr	r2, [pc, #116]	@ (800afd0 <TIM_OC2_SetConfig+0x120>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d007      	beq.n	800af70 <TIM_OC2_SetConfig+0xc0>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a1c      	ldr	r2, [pc, #112]	@ (800afd4 <TIM_OC2_SetConfig+0x124>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d003      	beq.n	800af70 <TIM_OC2_SetConfig+0xc0>
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	4a17      	ldr	r2, [pc, #92]	@ (800afc8 <TIM_OC2_SetConfig+0x118>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d113      	bne.n	800af98 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800af76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800af7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	695b      	ldr	r3, [r3, #20]
 800af84:	009b      	lsls	r3, r3, #2
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	4313      	orrs	r3, r2
 800af8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	4313      	orrs	r3, r2
 800af96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	693a      	ldr	r2, [r7, #16]
 800af9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	68fa      	ldr	r2, [r7, #12]
 800afa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	685a      	ldr	r2, [r3, #4]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	697a      	ldr	r2, [r7, #20]
 800afb0:	621a      	str	r2, [r3, #32]
}
 800afb2:	bf00      	nop
 800afb4:	371c      	adds	r7, #28
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	40012c00 	.word	0x40012c00
 800afc4:	40013400 	.word	0x40013400
 800afc8:	40015000 	.word	0x40015000
 800afcc:	40014000 	.word	0x40014000
 800afd0:	40014400 	.word	0x40014400
 800afd4:	40014800 	.word	0x40014800

0800afd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800afd8:	b480      	push	{r7}
 800afda:	b087      	sub	sp, #28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6a1b      	ldr	r3, [r3, #32]
 800afe6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6a1b      	ldr	r3, [r3, #32]
 800afec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	69db      	ldr	r3, [r3, #28]
 800affe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b006:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b00a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	f023 0303 	bic.w	r3, r3, #3
 800b012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	4313      	orrs	r3, r2
 800b01c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	021b      	lsls	r3, r3, #8
 800b02c:	697a      	ldr	r2, [r7, #20]
 800b02e:	4313      	orrs	r3, r2
 800b030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a2b      	ldr	r2, [pc, #172]	@ (800b0e4 <TIM_OC3_SetConfig+0x10c>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d007      	beq.n	800b04a <TIM_OC3_SetConfig+0x72>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a2a      	ldr	r2, [pc, #168]	@ (800b0e8 <TIM_OC3_SetConfig+0x110>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d003      	beq.n	800b04a <TIM_OC3_SetConfig+0x72>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4a29      	ldr	r2, [pc, #164]	@ (800b0ec <TIM_OC3_SetConfig+0x114>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d10d      	bne.n	800b066 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b050:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	021b      	lsls	r3, r3, #8
 800b058:	697a      	ldr	r2, [r7, #20]
 800b05a:	4313      	orrs	r3, r2
 800b05c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b064:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4a1e      	ldr	r2, [pc, #120]	@ (800b0e4 <TIM_OC3_SetConfig+0x10c>)
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d013      	beq.n	800b096 <TIM_OC3_SetConfig+0xbe>
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	4a1d      	ldr	r2, [pc, #116]	@ (800b0e8 <TIM_OC3_SetConfig+0x110>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d00f      	beq.n	800b096 <TIM_OC3_SetConfig+0xbe>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	4a1d      	ldr	r2, [pc, #116]	@ (800b0f0 <TIM_OC3_SetConfig+0x118>)
 800b07a:	4293      	cmp	r3, r2
 800b07c:	d00b      	beq.n	800b096 <TIM_OC3_SetConfig+0xbe>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a1c      	ldr	r2, [pc, #112]	@ (800b0f4 <TIM_OC3_SetConfig+0x11c>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d007      	beq.n	800b096 <TIM_OC3_SetConfig+0xbe>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	4a1b      	ldr	r2, [pc, #108]	@ (800b0f8 <TIM_OC3_SetConfig+0x120>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d003      	beq.n	800b096 <TIM_OC3_SetConfig+0xbe>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a16      	ldr	r2, [pc, #88]	@ (800b0ec <TIM_OC3_SetConfig+0x114>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d113      	bne.n	800b0be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b09c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b0a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	695b      	ldr	r3, [r3, #20]
 800b0aa:	011b      	lsls	r3, r3, #4
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	699b      	ldr	r3, [r3, #24]
 800b0b6:	011b      	lsls	r3, r3, #4
 800b0b8:	693a      	ldr	r2, [r7, #16]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	693a      	ldr	r2, [r7, #16]
 800b0c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	685a      	ldr	r2, [r3, #4]
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	697a      	ldr	r2, [r7, #20]
 800b0d6:	621a      	str	r2, [r3, #32]
}
 800b0d8:	bf00      	nop
 800b0da:	371c      	adds	r7, #28
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr
 800b0e4:	40012c00 	.word	0x40012c00
 800b0e8:	40013400 	.word	0x40013400
 800b0ec:	40015000 	.word	0x40015000
 800b0f0:	40014000 	.word	0x40014000
 800b0f4:	40014400 	.word	0x40014400
 800b0f8:	40014800 	.word	0x40014800

0800b0fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b087      	sub	sp, #28
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a1b      	ldr	r3, [r3, #32]
 800b110:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	69db      	ldr	r3, [r3, #28]
 800b122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b12a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b12e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	021b      	lsls	r3, r3, #8
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	4313      	orrs	r3, r2
 800b142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b14a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	031b      	lsls	r3, r3, #12
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	4313      	orrs	r3, r2
 800b156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4a2c      	ldr	r2, [pc, #176]	@ (800b20c <TIM_OC4_SetConfig+0x110>)
 800b15c:	4293      	cmp	r3, r2
 800b15e:	d007      	beq.n	800b170 <TIM_OC4_SetConfig+0x74>
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	4a2b      	ldr	r2, [pc, #172]	@ (800b210 <TIM_OC4_SetConfig+0x114>)
 800b164:	4293      	cmp	r3, r2
 800b166:	d003      	beq.n	800b170 <TIM_OC4_SetConfig+0x74>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	4a2a      	ldr	r2, [pc, #168]	@ (800b214 <TIM_OC4_SetConfig+0x118>)
 800b16c:	4293      	cmp	r3, r2
 800b16e:	d10d      	bne.n	800b18c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b176:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	68db      	ldr	r3, [r3, #12]
 800b17c:	031b      	lsls	r3, r3, #12
 800b17e:	697a      	ldr	r2, [r7, #20]
 800b180:	4313      	orrs	r3, r2
 800b182:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b18a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4a1f      	ldr	r2, [pc, #124]	@ (800b20c <TIM_OC4_SetConfig+0x110>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d013      	beq.n	800b1bc <TIM_OC4_SetConfig+0xc0>
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	4a1e      	ldr	r2, [pc, #120]	@ (800b210 <TIM_OC4_SetConfig+0x114>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d00f      	beq.n	800b1bc <TIM_OC4_SetConfig+0xc0>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	4a1e      	ldr	r2, [pc, #120]	@ (800b218 <TIM_OC4_SetConfig+0x11c>)
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	d00b      	beq.n	800b1bc <TIM_OC4_SetConfig+0xc0>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	4a1d      	ldr	r2, [pc, #116]	@ (800b21c <TIM_OC4_SetConfig+0x120>)
 800b1a8:	4293      	cmp	r3, r2
 800b1aa:	d007      	beq.n	800b1bc <TIM_OC4_SetConfig+0xc0>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	4a1c      	ldr	r2, [pc, #112]	@ (800b220 <TIM_OC4_SetConfig+0x124>)
 800b1b0:	4293      	cmp	r3, r2
 800b1b2:	d003      	beq.n	800b1bc <TIM_OC4_SetConfig+0xc0>
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a17      	ldr	r2, [pc, #92]	@ (800b214 <TIM_OC4_SetConfig+0x118>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d113      	bne.n	800b1e4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b1c2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b1ca:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	695b      	ldr	r3, [r3, #20]
 800b1d0:	019b      	lsls	r3, r3, #6
 800b1d2:	693a      	ldr	r2, [r7, #16]
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	699b      	ldr	r3, [r3, #24]
 800b1dc:	019b      	lsls	r3, r3, #6
 800b1de:	693a      	ldr	r2, [r7, #16]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68fa      	ldr	r2, [r7, #12]
 800b1ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	697a      	ldr	r2, [r7, #20]
 800b1fc:	621a      	str	r2, [r3, #32]
}
 800b1fe:	bf00      	nop
 800b200:	371c      	adds	r7, #28
 800b202:	46bd      	mov	sp, r7
 800b204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b208:	4770      	bx	lr
 800b20a:	bf00      	nop
 800b20c:	40012c00 	.word	0x40012c00
 800b210:	40013400 	.word	0x40013400
 800b214:	40015000 	.word	0x40015000
 800b218:	40014000 	.word	0x40014000
 800b21c:	40014400 	.word	0x40014400
 800b220:	40014800 	.word	0x40014800

0800b224 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b224:	b480      	push	{r7}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6a1b      	ldr	r3, [r3, #32]
 800b232:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6a1b      	ldr	r3, [r3, #32]
 800b238:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b24a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b252:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	4313      	orrs	r3, r2
 800b260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b268:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	041b      	lsls	r3, r3, #16
 800b270:	693a      	ldr	r2, [r7, #16]
 800b272:	4313      	orrs	r3, r2
 800b274:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a19      	ldr	r2, [pc, #100]	@ (800b2e0 <TIM_OC5_SetConfig+0xbc>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d013      	beq.n	800b2a6 <TIM_OC5_SetConfig+0x82>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	4a18      	ldr	r2, [pc, #96]	@ (800b2e4 <TIM_OC5_SetConfig+0xc0>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d00f      	beq.n	800b2a6 <TIM_OC5_SetConfig+0x82>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	4a17      	ldr	r2, [pc, #92]	@ (800b2e8 <TIM_OC5_SetConfig+0xc4>)
 800b28a:	4293      	cmp	r3, r2
 800b28c:	d00b      	beq.n	800b2a6 <TIM_OC5_SetConfig+0x82>
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a16      	ldr	r2, [pc, #88]	@ (800b2ec <TIM_OC5_SetConfig+0xc8>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d007      	beq.n	800b2a6 <TIM_OC5_SetConfig+0x82>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a15      	ldr	r2, [pc, #84]	@ (800b2f0 <TIM_OC5_SetConfig+0xcc>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d003      	beq.n	800b2a6 <TIM_OC5_SetConfig+0x82>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a14      	ldr	r2, [pc, #80]	@ (800b2f4 <TIM_OC5_SetConfig+0xd0>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d109      	bne.n	800b2ba <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b2ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	695b      	ldr	r3, [r3, #20]
 800b2b2:	021b      	lsls	r3, r3, #8
 800b2b4:	697a      	ldr	r2, [r7, #20]
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	697a      	ldr	r2, [r7, #20]
 800b2be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	68fa      	ldr	r2, [r7, #12]
 800b2c4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	685a      	ldr	r2, [r3, #4]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	621a      	str	r2, [r3, #32]
}
 800b2d4:	bf00      	nop
 800b2d6:	371c      	adds	r7, #28
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr
 800b2e0:	40012c00 	.word	0x40012c00
 800b2e4:	40013400 	.word	0x40013400
 800b2e8:	40014000 	.word	0x40014000
 800b2ec:	40014400 	.word	0x40014400
 800b2f0:	40014800 	.word	0x40014800
 800b2f4:	40015000 	.word	0x40015000

0800b2f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b087      	sub	sp, #28
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a1b      	ldr	r3, [r3, #32]
 800b306:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a1b      	ldr	r3, [r3, #32]
 800b30c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b31e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b32a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	021b      	lsls	r3, r3, #8
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	4313      	orrs	r3, r2
 800b336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b33e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	051b      	lsls	r3, r3, #20
 800b346:	693a      	ldr	r2, [r7, #16]
 800b348:	4313      	orrs	r3, r2
 800b34a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	4a1a      	ldr	r2, [pc, #104]	@ (800b3b8 <TIM_OC6_SetConfig+0xc0>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d013      	beq.n	800b37c <TIM_OC6_SetConfig+0x84>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a19      	ldr	r2, [pc, #100]	@ (800b3bc <TIM_OC6_SetConfig+0xc4>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d00f      	beq.n	800b37c <TIM_OC6_SetConfig+0x84>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a18      	ldr	r2, [pc, #96]	@ (800b3c0 <TIM_OC6_SetConfig+0xc8>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d00b      	beq.n	800b37c <TIM_OC6_SetConfig+0x84>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a17      	ldr	r2, [pc, #92]	@ (800b3c4 <TIM_OC6_SetConfig+0xcc>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d007      	beq.n	800b37c <TIM_OC6_SetConfig+0x84>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a16      	ldr	r2, [pc, #88]	@ (800b3c8 <TIM_OC6_SetConfig+0xd0>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d003      	beq.n	800b37c <TIM_OC6_SetConfig+0x84>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a15      	ldr	r2, [pc, #84]	@ (800b3cc <TIM_OC6_SetConfig+0xd4>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d109      	bne.n	800b390 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b382:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	029b      	lsls	r3, r3, #10
 800b38a:	697a      	ldr	r2, [r7, #20]
 800b38c:	4313      	orrs	r3, r2
 800b38e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	697a      	ldr	r2, [r7, #20]
 800b394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	68fa      	ldr	r2, [r7, #12]
 800b39a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	685a      	ldr	r2, [r3, #4]
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	621a      	str	r2, [r3, #32]
}
 800b3aa:	bf00      	nop
 800b3ac:	371c      	adds	r7, #28
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr
 800b3b6:	bf00      	nop
 800b3b8:	40012c00 	.word	0x40012c00
 800b3bc:	40013400 	.word	0x40013400
 800b3c0:	40014000 	.word	0x40014000
 800b3c4:	40014400 	.word	0x40014400
 800b3c8:	40014800 	.word	0x40014800
 800b3cc:	40015000 	.word	0x40015000

0800b3d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b087      	sub	sp, #28
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	60f8      	str	r0, [r7, #12]
 800b3d8:	60b9      	str	r1, [r7, #8]
 800b3da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	6a1b      	ldr	r3, [r3, #32]
 800b3e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	f023 0201 	bic.w	r2, r3, #1
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b3fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	011b      	lsls	r3, r3, #4
 800b400:	693a      	ldr	r2, [r7, #16]
 800b402:	4313      	orrs	r3, r2
 800b404:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	f023 030a 	bic.w	r3, r3, #10
 800b40c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b40e:	697a      	ldr	r2, [r7, #20]
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	4313      	orrs	r3, r2
 800b414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	693a      	ldr	r2, [r7, #16]
 800b41a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	697a      	ldr	r2, [r7, #20]
 800b420:	621a      	str	r2, [r3, #32]
}
 800b422:	bf00      	nop
 800b424:	371c      	adds	r7, #28
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b42e:	b480      	push	{r7}
 800b430:	b087      	sub	sp, #28
 800b432:	af00      	add	r7, sp, #0
 800b434:	60f8      	str	r0, [r7, #12]
 800b436:	60b9      	str	r1, [r7, #8]
 800b438:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6a1b      	ldr	r3, [r3, #32]
 800b444:	f023 0210 	bic.w	r2, r3, #16
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	699b      	ldr	r3, [r3, #24]
 800b450:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b452:	693b      	ldr	r3, [r7, #16]
 800b454:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b458:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	031b      	lsls	r3, r3, #12
 800b45e:	693a      	ldr	r2, [r7, #16]
 800b460:	4313      	orrs	r3, r2
 800b462:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b46a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	011b      	lsls	r3, r3, #4
 800b470:	697a      	ldr	r2, [r7, #20]
 800b472:	4313      	orrs	r3, r2
 800b474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	697a      	ldr	r2, [r7, #20]
 800b480:	621a      	str	r2, [r3, #32]
}
 800b482:	bf00      	nop
 800b484:	371c      	adds	r7, #28
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr

0800b48e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b48e:	b480      	push	{r7}
 800b490:	b085      	sub	sp, #20
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
 800b496:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b4a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	f043 0307 	orr.w	r3, r3, #7
 800b4b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	68fa      	ldr	r2, [r7, #12]
 800b4ba:	609a      	str	r2, [r3, #8]
}
 800b4bc:	bf00      	nop
 800b4be:	3714      	adds	r7, #20
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b087      	sub	sp, #28
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60f8      	str	r0, [r7, #12]
 800b4d0:	60b9      	str	r1, [r7, #8]
 800b4d2:	607a      	str	r2, [r7, #4]
 800b4d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b4e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	021a      	lsls	r2, r3, #8
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	431a      	orrs	r2, r3
 800b4ec:	68bb      	ldr	r3, [r7, #8]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	697a      	ldr	r2, [r7, #20]
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	697a      	ldr	r2, [r7, #20]
 800b4fa:	609a      	str	r2, [r3, #8]
}
 800b4fc:	bf00      	nop
 800b4fe:	371c      	adds	r7, #28
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b508:	b480      	push	{r7}
 800b50a:	b087      	sub	sp, #28
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	f003 031f 	and.w	r3, r3, #31
 800b51a:	2201      	movs	r2, #1
 800b51c:	fa02 f303 	lsl.w	r3, r2, r3
 800b520:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6a1a      	ldr	r2, [r3, #32]
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	43db      	mvns	r3, r3
 800b52a:	401a      	ands	r2, r3
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6a1a      	ldr	r2, [r3, #32]
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	f003 031f 	and.w	r3, r3, #31
 800b53a:	6879      	ldr	r1, [r7, #4]
 800b53c:	fa01 f303 	lsl.w	r3, r1, r3
 800b540:	431a      	orrs	r2, r3
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	621a      	str	r2, [r3, #32]
}
 800b546:	bf00      	nop
 800b548:	371c      	adds	r7, #28
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr
	...

0800b554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b564:	2b01      	cmp	r3, #1
 800b566:	d101      	bne.n	800b56c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b568:	2302      	movs	r3, #2
 800b56a:	e074      	b.n	800b656 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2202      	movs	r2, #2
 800b578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	685b      	ldr	r3, [r3, #4]
 800b582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a34      	ldr	r2, [pc, #208]	@ (800b664 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d009      	beq.n	800b5aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a33      	ldr	r2, [pc, #204]	@ (800b668 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b59c:	4293      	cmp	r3, r2
 800b59e:	d004      	beq.n	800b5aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a31      	ldr	r2, [pc, #196]	@ (800b66c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d108      	bne.n	800b5bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b5b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	68fa      	ldr	r2, [r7, #12]
 800b5b8:	4313      	orrs	r3, r2
 800b5ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b5c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4a21      	ldr	r2, [pc, #132]	@ (800b664 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d022      	beq.n	800b62a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ec:	d01d      	beq.n	800b62a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	4a1f      	ldr	r2, [pc, #124]	@ (800b670 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b5f4:	4293      	cmp	r3, r2
 800b5f6:	d018      	beq.n	800b62a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4a1d      	ldr	r2, [pc, #116]	@ (800b674 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d013      	beq.n	800b62a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	4a1c      	ldr	r2, [pc, #112]	@ (800b678 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b608:	4293      	cmp	r3, r2
 800b60a:	d00e      	beq.n	800b62a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	4a15      	ldr	r2, [pc, #84]	@ (800b668 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b612:	4293      	cmp	r3, r2
 800b614:	d009      	beq.n	800b62a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4a18      	ldr	r2, [pc, #96]	@ (800b67c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d004      	beq.n	800b62a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a11      	ldr	r2, [pc, #68]	@ (800b66c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d10c      	bne.n	800b644 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	68ba      	ldr	r2, [r7, #8]
 800b638:	4313      	orrs	r3, r2
 800b63a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2200      	movs	r2, #0
 800b650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3714      	adds	r7, #20
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	40012c00 	.word	0x40012c00
 800b668:	40013400 	.word	0x40013400
 800b66c:	40015000 	.word	0x40015000
 800b670:	40000400 	.word	0x40000400
 800b674:	40000800 	.word	0x40000800
 800b678:	40000c00 	.word	0x40000c00
 800b67c:	40014000 	.word	0x40014000

0800b680 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
 800b688:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b68a:	2300      	movs	r3, #0
 800b68c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b694:	2b01      	cmp	r3, #1
 800b696:	d101      	bne.n	800b69c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b698:	2302      	movs	r3, #2
 800b69a:	e078      	b.n	800b78e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	68db      	ldr	r3, [r3, #12]
 800b6ae:	4313      	orrs	r3, r2
 800b6b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	685b      	ldr	r3, [r3, #4]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	691b      	ldr	r3, [r3, #16]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	695b      	ldr	r3, [r3, #20]
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b702:	4313      	orrs	r3, r2
 800b704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	699b      	ldr	r3, [r3, #24]
 800b710:	041b      	lsls	r3, r3, #16
 800b712:	4313      	orrs	r3, r2
 800b714:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	69db      	ldr	r3, [r3, #28]
 800b720:	4313      	orrs	r3, r2
 800b722:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a1c      	ldr	r2, [pc, #112]	@ (800b79c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d009      	beq.n	800b742 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4a1b      	ldr	r2, [pc, #108]	@ (800b7a0 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b734:	4293      	cmp	r3, r2
 800b736:	d004      	beq.n	800b742 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a19      	ldr	r2, [pc, #100]	@ (800b7a4 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d11c      	bne.n	800b77c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b74c:	051b      	lsls	r3, r3, #20
 800b74e:	4313      	orrs	r3, r2
 800b750:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	6a1b      	ldr	r3, [r3, #32]
 800b75c:	4313      	orrs	r3, r2
 800b75e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b76a:	4313      	orrs	r3, r2
 800b76c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b778:	4313      	orrs	r3, r2
 800b77a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	68fa      	ldr	r2, [r7, #12]
 800b782:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3714      	adds	r7, #20
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr
 800b79a:	bf00      	nop
 800b79c:	40012c00 	.word	0x40012c00
 800b7a0:	40013400 	.word	0x40013400
 800b7a4:	40015000 	.word	0x40015000

0800b7a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b083      	sub	sp, #12
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b7c4:	bf00      	nop
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b7d8:	bf00      	nop
 800b7da:	370c      	adds	r7, #12
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b083      	sub	sp, #12
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b7ec:	bf00      	nop
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b083      	sub	sp, #12
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b800:	bf00      	nop
 800b802:	370c      	adds	r7, #12
 800b804:	46bd      	mov	sp, r7
 800b806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80a:	4770      	bx	lr

0800b80c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b083      	sub	sp, #12
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b814:	bf00      	nop
 800b816:	370c      	adds	r7, #12
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b820:	b480      	push	{r7}
 800b822:	b083      	sub	sp, #12
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b828:	bf00      	nop
 800b82a:	370c      	adds	r7, #12
 800b82c:	46bd      	mov	sp, r7
 800b82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b832:	4770      	bx	lr

0800b834 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d101      	bne.n	800b846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	e042      	b.n	800b8cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d106      	bne.n	800b85e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f7f8 fd0b 	bl	8004274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2224      	movs	r2, #36	@ 0x24
 800b862:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f022 0201 	bic.w	r2, r2, #1
 800b874:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d002      	beq.n	800b884 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b87e:	6878      	ldr	r0, [r7, #4]
 800b880:	f000 fb24 	bl	800becc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 f825 	bl	800b8d4 <UART_SetConfig>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d101      	bne.n	800b894 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b890:	2301      	movs	r3, #1
 800b892:	e01b      	b.n	800b8cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	685a      	ldr	r2, [r3, #4]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b8a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	689a      	ldr	r2, [r3, #8]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b8b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f042 0201 	orr.w	r2, r2, #1
 800b8c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fba3 	bl	800c010 <UART_CheckIdleState>
 800b8ca:	4603      	mov	r3, r0
}
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b8d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8d8:	b08c      	sub	sp, #48	@ 0x30
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	689a      	ldr	r2, [r3, #8]
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	431a      	orrs	r2, r3
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	695b      	ldr	r3, [r3, #20]
 800b8f2:	431a      	orrs	r2, r3
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	69db      	ldr	r3, [r3, #28]
 800b8f8:	4313      	orrs	r3, r2
 800b8fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	4baa      	ldr	r3, [pc, #680]	@ (800bbac <UART_SetConfig+0x2d8>)
 800b904:	4013      	ands	r3, r2
 800b906:	697a      	ldr	r2, [r7, #20]
 800b908:	6812      	ldr	r2, [r2, #0]
 800b90a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b90c:	430b      	orrs	r3, r1
 800b90e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	68da      	ldr	r2, [r3, #12]
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	430a      	orrs	r2, r1
 800b924:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	699b      	ldr	r3, [r3, #24]
 800b92a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b92c:	697b      	ldr	r3, [r7, #20]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a9f      	ldr	r2, [pc, #636]	@ (800bbb0 <UART_SetConfig+0x2dc>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d004      	beq.n	800b940 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	6a1b      	ldr	r3, [r3, #32]
 800b93a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b93c:	4313      	orrs	r3, r2
 800b93e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800b94a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800b94e:	697a      	ldr	r2, [r7, #20]
 800b950:	6812      	ldr	r2, [r2, #0]
 800b952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b954:	430b      	orrs	r3, r1
 800b956:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b95e:	f023 010f 	bic.w	r1, r3, #15
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	430a      	orrs	r2, r1
 800b96c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a90      	ldr	r2, [pc, #576]	@ (800bbb4 <UART_SetConfig+0x2e0>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d125      	bne.n	800b9c4 <UART_SetConfig+0xf0>
 800b978:	4b8f      	ldr	r3, [pc, #572]	@ (800bbb8 <UART_SetConfig+0x2e4>)
 800b97a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b97e:	f003 0303 	and.w	r3, r3, #3
 800b982:	2b03      	cmp	r3, #3
 800b984:	d81a      	bhi.n	800b9bc <UART_SetConfig+0xe8>
 800b986:	a201      	add	r2, pc, #4	@ (adr r2, 800b98c <UART_SetConfig+0xb8>)
 800b988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b98c:	0800b99d 	.word	0x0800b99d
 800b990:	0800b9ad 	.word	0x0800b9ad
 800b994:	0800b9a5 	.word	0x0800b9a5
 800b998:	0800b9b5 	.word	0x0800b9b5
 800b99c:	2301      	movs	r3, #1
 800b99e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9a2:	e116      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800b9a4:	2302      	movs	r3, #2
 800b9a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9aa:	e112      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800b9ac:	2304      	movs	r3, #4
 800b9ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9b2:	e10e      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800b9b4:	2308      	movs	r3, #8
 800b9b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9ba:	e10a      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800b9bc:	2310      	movs	r3, #16
 800b9be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800b9c2:	e106      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a7c      	ldr	r2, [pc, #496]	@ (800bbbc <UART_SetConfig+0x2e8>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d138      	bne.n	800ba40 <UART_SetConfig+0x16c>
 800b9ce:	4b7a      	ldr	r3, [pc, #488]	@ (800bbb8 <UART_SetConfig+0x2e4>)
 800b9d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b9d4:	f003 030c 	and.w	r3, r3, #12
 800b9d8:	2b0c      	cmp	r3, #12
 800b9da:	d82d      	bhi.n	800ba38 <UART_SetConfig+0x164>
 800b9dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b9e4 <UART_SetConfig+0x110>)
 800b9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e2:	bf00      	nop
 800b9e4:	0800ba19 	.word	0x0800ba19
 800b9e8:	0800ba39 	.word	0x0800ba39
 800b9ec:	0800ba39 	.word	0x0800ba39
 800b9f0:	0800ba39 	.word	0x0800ba39
 800b9f4:	0800ba29 	.word	0x0800ba29
 800b9f8:	0800ba39 	.word	0x0800ba39
 800b9fc:	0800ba39 	.word	0x0800ba39
 800ba00:	0800ba39 	.word	0x0800ba39
 800ba04:	0800ba21 	.word	0x0800ba21
 800ba08:	0800ba39 	.word	0x0800ba39
 800ba0c:	0800ba39 	.word	0x0800ba39
 800ba10:	0800ba39 	.word	0x0800ba39
 800ba14:	0800ba31 	.word	0x0800ba31
 800ba18:	2300      	movs	r3, #0
 800ba1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba1e:	e0d8      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800ba20:	2302      	movs	r3, #2
 800ba22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba26:	e0d4      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800ba28:	2304      	movs	r3, #4
 800ba2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba2e:	e0d0      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800ba30:	2308      	movs	r3, #8
 800ba32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba36:	e0cc      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800ba38:	2310      	movs	r3, #16
 800ba3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba3e:	e0c8      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a5e      	ldr	r2, [pc, #376]	@ (800bbc0 <UART_SetConfig+0x2ec>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d125      	bne.n	800ba96 <UART_SetConfig+0x1c2>
 800ba4a:	4b5b      	ldr	r3, [pc, #364]	@ (800bbb8 <UART_SetConfig+0x2e4>)
 800ba4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba50:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800ba54:	2b30      	cmp	r3, #48	@ 0x30
 800ba56:	d016      	beq.n	800ba86 <UART_SetConfig+0x1b2>
 800ba58:	2b30      	cmp	r3, #48	@ 0x30
 800ba5a:	d818      	bhi.n	800ba8e <UART_SetConfig+0x1ba>
 800ba5c:	2b20      	cmp	r3, #32
 800ba5e:	d00a      	beq.n	800ba76 <UART_SetConfig+0x1a2>
 800ba60:	2b20      	cmp	r3, #32
 800ba62:	d814      	bhi.n	800ba8e <UART_SetConfig+0x1ba>
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d002      	beq.n	800ba6e <UART_SetConfig+0x19a>
 800ba68:	2b10      	cmp	r3, #16
 800ba6a:	d008      	beq.n	800ba7e <UART_SetConfig+0x1aa>
 800ba6c:	e00f      	b.n	800ba8e <UART_SetConfig+0x1ba>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba74:	e0ad      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800ba76:	2302      	movs	r3, #2
 800ba78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba7c:	e0a9      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800ba7e:	2304      	movs	r3, #4
 800ba80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba84:	e0a5      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800ba86:	2308      	movs	r3, #8
 800ba88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba8c:	e0a1      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800ba8e:	2310      	movs	r3, #16
 800ba90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba94:	e09d      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a4a      	ldr	r2, [pc, #296]	@ (800bbc4 <UART_SetConfig+0x2f0>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d125      	bne.n	800baec <UART_SetConfig+0x218>
 800baa0:	4b45      	ldr	r3, [pc, #276]	@ (800bbb8 <UART_SetConfig+0x2e4>)
 800baa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800baa6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800baaa:	2bc0      	cmp	r3, #192	@ 0xc0
 800baac:	d016      	beq.n	800badc <UART_SetConfig+0x208>
 800baae:	2bc0      	cmp	r3, #192	@ 0xc0
 800bab0:	d818      	bhi.n	800bae4 <UART_SetConfig+0x210>
 800bab2:	2b80      	cmp	r3, #128	@ 0x80
 800bab4:	d00a      	beq.n	800bacc <UART_SetConfig+0x1f8>
 800bab6:	2b80      	cmp	r3, #128	@ 0x80
 800bab8:	d814      	bhi.n	800bae4 <UART_SetConfig+0x210>
 800baba:	2b00      	cmp	r3, #0
 800babc:	d002      	beq.n	800bac4 <UART_SetConfig+0x1f0>
 800babe:	2b40      	cmp	r3, #64	@ 0x40
 800bac0:	d008      	beq.n	800bad4 <UART_SetConfig+0x200>
 800bac2:	e00f      	b.n	800bae4 <UART_SetConfig+0x210>
 800bac4:	2300      	movs	r3, #0
 800bac6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baca:	e082      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800bacc:	2302      	movs	r3, #2
 800bace:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bad2:	e07e      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800bad4:	2304      	movs	r3, #4
 800bad6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bada:	e07a      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800badc:	2308      	movs	r3, #8
 800bade:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bae2:	e076      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800bae4:	2310      	movs	r3, #16
 800bae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baea:	e072      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a35      	ldr	r2, [pc, #212]	@ (800bbc8 <UART_SetConfig+0x2f4>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d12a      	bne.n	800bb4c <UART_SetConfig+0x278>
 800baf6:	4b30      	ldr	r3, [pc, #192]	@ (800bbb8 <UART_SetConfig+0x2e4>)
 800baf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bafc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bb00:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb04:	d01a      	beq.n	800bb3c <UART_SetConfig+0x268>
 800bb06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bb0a:	d81b      	bhi.n	800bb44 <UART_SetConfig+0x270>
 800bb0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb10:	d00c      	beq.n	800bb2c <UART_SetConfig+0x258>
 800bb12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb16:	d815      	bhi.n	800bb44 <UART_SetConfig+0x270>
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d003      	beq.n	800bb24 <UART_SetConfig+0x250>
 800bb1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb20:	d008      	beq.n	800bb34 <UART_SetConfig+0x260>
 800bb22:	e00f      	b.n	800bb44 <UART_SetConfig+0x270>
 800bb24:	2300      	movs	r3, #0
 800bb26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb2a:	e052      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb32:	e04e      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800bb34:	2304      	movs	r3, #4
 800bb36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb3a:	e04a      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800bb3c:	2308      	movs	r3, #8
 800bb3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb42:	e046      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800bb44:	2310      	movs	r3, #16
 800bb46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb4a:	e042      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a17      	ldr	r2, [pc, #92]	@ (800bbb0 <UART_SetConfig+0x2dc>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d13a      	bne.n	800bbcc <UART_SetConfig+0x2f8>
 800bb56:	4b18      	ldr	r3, [pc, #96]	@ (800bbb8 <UART_SetConfig+0x2e4>)
 800bb58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bb60:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bb64:	d01a      	beq.n	800bb9c <UART_SetConfig+0x2c8>
 800bb66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bb6a:	d81b      	bhi.n	800bba4 <UART_SetConfig+0x2d0>
 800bb6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb70:	d00c      	beq.n	800bb8c <UART_SetConfig+0x2b8>
 800bb72:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb76:	d815      	bhi.n	800bba4 <UART_SetConfig+0x2d0>
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d003      	beq.n	800bb84 <UART_SetConfig+0x2b0>
 800bb7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb80:	d008      	beq.n	800bb94 <UART_SetConfig+0x2c0>
 800bb82:	e00f      	b.n	800bba4 <UART_SetConfig+0x2d0>
 800bb84:	2300      	movs	r3, #0
 800bb86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb8a:	e022      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800bb8c:	2302      	movs	r3, #2
 800bb8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb92:	e01e      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800bb94:	2304      	movs	r3, #4
 800bb96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb9a:	e01a      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800bb9c:	2308      	movs	r3, #8
 800bb9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bba2:	e016      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800bba4:	2310      	movs	r3, #16
 800bba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbaa:	e012      	b.n	800bbd2 <UART_SetConfig+0x2fe>
 800bbac:	cfff69f3 	.word	0xcfff69f3
 800bbb0:	40008000 	.word	0x40008000
 800bbb4:	40013800 	.word	0x40013800
 800bbb8:	40021000 	.word	0x40021000
 800bbbc:	40004400 	.word	0x40004400
 800bbc0:	40004800 	.word	0x40004800
 800bbc4:	40004c00 	.word	0x40004c00
 800bbc8:	40005000 	.word	0x40005000
 800bbcc:	2310      	movs	r3, #16
 800bbce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	4aae      	ldr	r2, [pc, #696]	@ (800be90 <UART_SetConfig+0x5bc>)
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	f040 8097 	bne.w	800bd0c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bbde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bbe2:	2b08      	cmp	r3, #8
 800bbe4:	d823      	bhi.n	800bc2e <UART_SetConfig+0x35a>
 800bbe6:	a201      	add	r2, pc, #4	@ (adr r2, 800bbec <UART_SetConfig+0x318>)
 800bbe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbec:	0800bc11 	.word	0x0800bc11
 800bbf0:	0800bc2f 	.word	0x0800bc2f
 800bbf4:	0800bc19 	.word	0x0800bc19
 800bbf8:	0800bc2f 	.word	0x0800bc2f
 800bbfc:	0800bc1f 	.word	0x0800bc1f
 800bc00:	0800bc2f 	.word	0x0800bc2f
 800bc04:	0800bc2f 	.word	0x0800bc2f
 800bc08:	0800bc2f 	.word	0x0800bc2f
 800bc0c:	0800bc27 	.word	0x0800bc27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bc10:	f7fd fe2a 	bl	8009868 <HAL_RCC_GetPCLK1Freq>
 800bc14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc16:	e010      	b.n	800bc3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bc18:	4b9e      	ldr	r3, [pc, #632]	@ (800be94 <UART_SetConfig+0x5c0>)
 800bc1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc1c:	e00d      	b.n	800bc3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bc1e:	f7fd fdb5 	bl	800978c <HAL_RCC_GetSysClockFreq>
 800bc22:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bc24:	e009      	b.n	800bc3a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bc2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bc2c:	e005      	b.n	800bc3a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bc38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 8130 	beq.w	800bea2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc46:	4a94      	ldr	r2, [pc, #592]	@ (800be98 <UART_SetConfig+0x5c4>)
 800bc48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc50:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc54:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	685a      	ldr	r2, [r3, #4]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	005b      	lsls	r3, r3, #1
 800bc5e:	4413      	add	r3, r2
 800bc60:	69ba      	ldr	r2, [r7, #24]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d305      	bcc.n	800bc72 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc6c:	69ba      	ldr	r2, [r7, #24]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d903      	bls.n	800bc7a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bc72:	2301      	movs	r3, #1
 800bc74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bc78:	e113      	b.n	800bea2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	60bb      	str	r3, [r7, #8]
 800bc80:	60fa      	str	r2, [r7, #12]
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc86:	4a84      	ldr	r2, [pc, #528]	@ (800be98 <UART_SetConfig+0x5c4>)
 800bc88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	2200      	movs	r2, #0
 800bc90:	603b      	str	r3, [r7, #0]
 800bc92:	607a      	str	r2, [r7, #4]
 800bc94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bc9c:	f7f5 f81c 	bl	8000cd8 <__aeabi_uldivmod>
 800bca0:	4602      	mov	r2, r0
 800bca2:	460b      	mov	r3, r1
 800bca4:	4610      	mov	r0, r2
 800bca6:	4619      	mov	r1, r3
 800bca8:	f04f 0200 	mov.w	r2, #0
 800bcac:	f04f 0300 	mov.w	r3, #0
 800bcb0:	020b      	lsls	r3, r1, #8
 800bcb2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bcb6:	0202      	lsls	r2, r0, #8
 800bcb8:	6979      	ldr	r1, [r7, #20]
 800bcba:	6849      	ldr	r1, [r1, #4]
 800bcbc:	0849      	lsrs	r1, r1, #1
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	460c      	mov	r4, r1
 800bcc2:	4605      	mov	r5, r0
 800bcc4:	eb12 0804 	adds.w	r8, r2, r4
 800bcc8:	eb43 0905 	adc.w	r9, r3, r5
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	469a      	mov	sl, r3
 800bcd4:	4693      	mov	fp, r2
 800bcd6:	4652      	mov	r2, sl
 800bcd8:	465b      	mov	r3, fp
 800bcda:	4640      	mov	r0, r8
 800bcdc:	4649      	mov	r1, r9
 800bcde:	f7f4 fffb 	bl	8000cd8 <__aeabi_uldivmod>
 800bce2:	4602      	mov	r2, r0
 800bce4:	460b      	mov	r3, r1
 800bce6:	4613      	mov	r3, r2
 800bce8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bcea:	6a3b      	ldr	r3, [r7, #32]
 800bcec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bcf0:	d308      	bcc.n	800bd04 <UART_SetConfig+0x430>
 800bcf2:	6a3b      	ldr	r3, [r7, #32]
 800bcf4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bcf8:	d204      	bcs.n	800bd04 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	6a3a      	ldr	r2, [r7, #32]
 800bd00:	60da      	str	r2, [r3, #12]
 800bd02:	e0ce      	b.n	800bea2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bd0a:	e0ca      	b.n	800bea2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	69db      	ldr	r3, [r3, #28]
 800bd10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bd14:	d166      	bne.n	800bde4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bd16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bd1a:	2b08      	cmp	r3, #8
 800bd1c:	d827      	bhi.n	800bd6e <UART_SetConfig+0x49a>
 800bd1e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd24 <UART_SetConfig+0x450>)
 800bd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd24:	0800bd49 	.word	0x0800bd49
 800bd28:	0800bd51 	.word	0x0800bd51
 800bd2c:	0800bd59 	.word	0x0800bd59
 800bd30:	0800bd6f 	.word	0x0800bd6f
 800bd34:	0800bd5f 	.word	0x0800bd5f
 800bd38:	0800bd6f 	.word	0x0800bd6f
 800bd3c:	0800bd6f 	.word	0x0800bd6f
 800bd40:	0800bd6f 	.word	0x0800bd6f
 800bd44:	0800bd67 	.word	0x0800bd67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd48:	f7fd fd8e 	bl	8009868 <HAL_RCC_GetPCLK1Freq>
 800bd4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd4e:	e014      	b.n	800bd7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd50:	f7fd fda0 	bl	8009894 <HAL_RCC_GetPCLK2Freq>
 800bd54:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd56:	e010      	b.n	800bd7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd58:	4b4e      	ldr	r3, [pc, #312]	@ (800be94 <UART_SetConfig+0x5c0>)
 800bd5a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd5c:	e00d      	b.n	800bd7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd5e:	f7fd fd15 	bl	800978c <HAL_RCC_GetSysClockFreq>
 800bd62:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd64:	e009      	b.n	800bd7a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd6c:	e005      	b.n	800bd7a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bd72:	2301      	movs	r3, #1
 800bd74:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bd78:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f000 8090 	beq.w	800bea2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd86:	4a44      	ldr	r2, [pc, #272]	@ (800be98 <UART_SetConfig+0x5c4>)
 800bd88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd8c:	461a      	mov	r2, r3
 800bd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd90:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd94:	005a      	lsls	r2, r3, #1
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	685b      	ldr	r3, [r3, #4]
 800bd9a:	085b      	lsrs	r3, r3, #1
 800bd9c:	441a      	add	r2, r3
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bda6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bda8:	6a3b      	ldr	r3, [r7, #32]
 800bdaa:	2b0f      	cmp	r3, #15
 800bdac:	d916      	bls.n	800bddc <UART_SetConfig+0x508>
 800bdae:	6a3b      	ldr	r3, [r7, #32]
 800bdb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdb4:	d212      	bcs.n	800bddc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bdb6:	6a3b      	ldr	r3, [r7, #32]
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	f023 030f 	bic.w	r3, r3, #15
 800bdbe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bdc0:	6a3b      	ldr	r3, [r7, #32]
 800bdc2:	085b      	lsrs	r3, r3, #1
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	f003 0307 	and.w	r3, r3, #7
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	8bfb      	ldrh	r3, [r7, #30]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	8bfa      	ldrh	r2, [r7, #30]
 800bdd8:	60da      	str	r2, [r3, #12]
 800bdda:	e062      	b.n	800bea2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bde2:	e05e      	b.n	800bea2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bde4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bde8:	2b08      	cmp	r3, #8
 800bdea:	d828      	bhi.n	800be3e <UART_SetConfig+0x56a>
 800bdec:	a201      	add	r2, pc, #4	@ (adr r2, 800bdf4 <UART_SetConfig+0x520>)
 800bdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf2:	bf00      	nop
 800bdf4:	0800be19 	.word	0x0800be19
 800bdf8:	0800be21 	.word	0x0800be21
 800bdfc:	0800be29 	.word	0x0800be29
 800be00:	0800be3f 	.word	0x0800be3f
 800be04:	0800be2f 	.word	0x0800be2f
 800be08:	0800be3f 	.word	0x0800be3f
 800be0c:	0800be3f 	.word	0x0800be3f
 800be10:	0800be3f 	.word	0x0800be3f
 800be14:	0800be37 	.word	0x0800be37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be18:	f7fd fd26 	bl	8009868 <HAL_RCC_GetPCLK1Freq>
 800be1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800be1e:	e014      	b.n	800be4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be20:	f7fd fd38 	bl	8009894 <HAL_RCC_GetPCLK2Freq>
 800be24:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800be26:	e010      	b.n	800be4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be28:	4b1a      	ldr	r3, [pc, #104]	@ (800be94 <UART_SetConfig+0x5c0>)
 800be2a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800be2c:	e00d      	b.n	800be4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be2e:	f7fd fcad 	bl	800978c <HAL_RCC_GetSysClockFreq>
 800be32:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800be34:	e009      	b.n	800be4a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be3a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800be3c:	e005      	b.n	800be4a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800be3e:	2300      	movs	r3, #0
 800be40:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800be42:	2301      	movs	r3, #1
 800be44:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800be48:	bf00      	nop
    }

    if (pclk != 0U)
 800be4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d028      	beq.n	800bea2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be54:	4a10      	ldr	r2, [pc, #64]	@ (800be98 <UART_SetConfig+0x5c4>)
 800be56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be5a:	461a      	mov	r2, r3
 800be5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be5e:	fbb3 f2f2 	udiv	r2, r3, r2
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	085b      	lsrs	r3, r3, #1
 800be68:	441a      	add	r2, r3
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	685b      	ldr	r3, [r3, #4]
 800be6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800be72:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be74:	6a3b      	ldr	r3, [r7, #32]
 800be76:	2b0f      	cmp	r3, #15
 800be78:	d910      	bls.n	800be9c <UART_SetConfig+0x5c8>
 800be7a:	6a3b      	ldr	r3, [r7, #32]
 800be7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be80:	d20c      	bcs.n	800be9c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be82:	6a3b      	ldr	r3, [r7, #32]
 800be84:	b29a      	uxth	r2, r3
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	60da      	str	r2, [r3, #12]
 800be8c:	e009      	b.n	800bea2 <UART_SetConfig+0x5ce>
 800be8e:	bf00      	nop
 800be90:	40008000 	.word	0x40008000
 800be94:	00f42400 	.word	0x00f42400
 800be98:	08017098 	.word	0x08017098
      }
      else
      {
        ret = HAL_ERROR;
 800be9c:	2301      	movs	r3, #1
 800be9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	2201      	movs	r2, #1
 800bea6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	2201      	movs	r2, #1
 800beae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	2200      	movs	r2, #0
 800beb6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	2200      	movs	r2, #0
 800bebc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bebe:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3730      	adds	r7, #48	@ 0x30
 800bec6:	46bd      	mov	sp, r7
 800bec8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800becc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bed8:	f003 0308 	and.w	r3, r3, #8
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d00a      	beq.n	800bef6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	430a      	orrs	r2, r1
 800bef4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800befa:	f003 0301 	and.w	r3, r3, #1
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d00a      	beq.n	800bf18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	685b      	ldr	r3, [r3, #4]
 800bf08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	430a      	orrs	r2, r1
 800bf16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf1c:	f003 0302 	and.w	r3, r3, #2
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d00a      	beq.n	800bf3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	430a      	orrs	r2, r1
 800bf38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf3e:	f003 0304 	and.w	r3, r3, #4
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d00a      	beq.n	800bf5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	685b      	ldr	r3, [r3, #4]
 800bf4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	430a      	orrs	r2, r1
 800bf5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf60:	f003 0310 	and.w	r3, r3, #16
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d00a      	beq.n	800bf7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	430a      	orrs	r2, r1
 800bf7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf82:	f003 0320 	and.w	r3, r3, #32
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d00a      	beq.n	800bfa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	430a      	orrs	r2, r1
 800bf9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d01a      	beq.n	800bfe2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	430a      	orrs	r2, r1
 800bfc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bfca:	d10a      	bne.n	800bfe2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	430a      	orrs	r2, r1
 800bfe0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d00a      	beq.n	800c004 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	430a      	orrs	r2, r1
 800c002:	605a      	str	r2, [r3, #4]
  }
}
 800c004:	bf00      	nop
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b098      	sub	sp, #96	@ 0x60
 800c014:	af02      	add	r7, sp, #8
 800c016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c020:	f7f8 fb7a 	bl	8004718 <HAL_GetTick>
 800c024:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f003 0308 	and.w	r3, r3, #8
 800c030:	2b08      	cmp	r3, #8
 800c032:	d12f      	bne.n	800c094 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c034:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c038:	9300      	str	r3, [sp, #0]
 800c03a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c03c:	2200      	movs	r2, #0
 800c03e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 f88e 	bl	800c164 <UART_WaitOnFlagUntilTimeout>
 800c048:	4603      	mov	r3, r0
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d022      	beq.n	800c094 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c056:	e853 3f00 	ldrex	r3, [r3]
 800c05a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c05c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c05e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c062:	653b      	str	r3, [r7, #80]	@ 0x50
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	461a      	mov	r2, r3
 800c06a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c06c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c06e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c070:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c072:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c074:	e841 2300 	strex	r3, r2, [r1]
 800c078:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c07a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d1e6      	bne.n	800c04e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2220      	movs	r2, #32
 800c084:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c090:	2303      	movs	r3, #3
 800c092:	e063      	b.n	800c15c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f003 0304 	and.w	r3, r3, #4
 800c09e:	2b04      	cmp	r3, #4
 800c0a0:	d149      	bne.n	800c136 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c0a6:	9300      	str	r3, [sp, #0]
 800c0a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 f857 	bl	800c164 <UART_WaitOnFlagUntilTimeout>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d03c      	beq.n	800c136 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c4:	e853 3f00 	ldrex	r3, [r3]
 800c0c8:	623b      	str	r3, [r7, #32]
   return(result);
 800c0ca:	6a3b      	ldr	r3, [r7, #32]
 800c0cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c0d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0da:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c0e2:	e841 2300 	strex	r3, r2, [r1]
 800c0e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1e6      	bne.n	800c0bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3308      	adds	r3, #8
 800c0f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	e853 3f00 	ldrex	r3, [r3]
 800c0fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	f023 0301 	bic.w	r3, r3, #1
 800c104:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	3308      	adds	r3, #8
 800c10c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c10e:	61fa      	str	r2, [r7, #28]
 800c110:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c112:	69b9      	ldr	r1, [r7, #24]
 800c114:	69fa      	ldr	r2, [r7, #28]
 800c116:	e841 2300 	strex	r3, r2, [r1]
 800c11a:	617b      	str	r3, [r7, #20]
   return(result);
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d1e5      	bne.n	800c0ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	2220      	movs	r2, #32
 800c126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2200      	movs	r2, #0
 800c12e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c132:	2303      	movs	r3, #3
 800c134:	e012      	b.n	800c15c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2220      	movs	r2, #32
 800c13a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2220      	movs	r2, #32
 800c142:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2200      	movs	r2, #0
 800c150:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2200      	movs	r2, #0
 800c156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3758      	adds	r7, #88	@ 0x58
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	60f8      	str	r0, [r7, #12]
 800c16c:	60b9      	str	r1, [r7, #8]
 800c16e:	603b      	str	r3, [r7, #0]
 800c170:	4613      	mov	r3, r2
 800c172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c174:	e04f      	b.n	800c216 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c17c:	d04b      	beq.n	800c216 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c17e:	f7f8 facb 	bl	8004718 <HAL_GetTick>
 800c182:	4602      	mov	r2, r0
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	1ad3      	subs	r3, r2, r3
 800c188:	69ba      	ldr	r2, [r7, #24]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d302      	bcc.n	800c194 <UART_WaitOnFlagUntilTimeout+0x30>
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d101      	bne.n	800c198 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c194:	2303      	movs	r3, #3
 800c196:	e04e      	b.n	800c236 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f003 0304 	and.w	r3, r3, #4
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d037      	beq.n	800c216 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	2b80      	cmp	r3, #128	@ 0x80
 800c1aa:	d034      	beq.n	800c216 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	2b40      	cmp	r3, #64	@ 0x40
 800c1b0:	d031      	beq.n	800c216 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	69db      	ldr	r3, [r3, #28]
 800c1b8:	f003 0308 	and.w	r3, r3, #8
 800c1bc:	2b08      	cmp	r3, #8
 800c1be:	d110      	bne.n	800c1e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	2208      	movs	r2, #8
 800c1c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1c8:	68f8      	ldr	r0, [r7, #12]
 800c1ca:	f000 f838 	bl	800c23e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	2208      	movs	r2, #8
 800c1d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	e029      	b.n	800c236 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	69db      	ldr	r3, [r3, #28]
 800c1e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c1ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1f0:	d111      	bne.n	800c216 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c1fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c1fc:	68f8      	ldr	r0, [r7, #12]
 800c1fe:	f000 f81e 	bl	800c23e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	2220      	movs	r2, #32
 800c206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c212:	2303      	movs	r3, #3
 800c214:	e00f      	b.n	800c236 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	69da      	ldr	r2, [r3, #28]
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	4013      	ands	r3, r2
 800c220:	68ba      	ldr	r2, [r7, #8]
 800c222:	429a      	cmp	r2, r3
 800c224:	bf0c      	ite	eq
 800c226:	2301      	moveq	r3, #1
 800c228:	2300      	movne	r3, #0
 800c22a:	b2db      	uxtb	r3, r3
 800c22c:	461a      	mov	r2, r3
 800c22e:	79fb      	ldrb	r3, [r7, #7]
 800c230:	429a      	cmp	r2, r3
 800c232:	d0a0      	beq.n	800c176 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c234:	2300      	movs	r3, #0
}
 800c236:	4618      	mov	r0, r3
 800c238:	3710      	adds	r7, #16
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bd80      	pop	{r7, pc}

0800c23e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c23e:	b480      	push	{r7}
 800c240:	b095      	sub	sp, #84	@ 0x54
 800c242:	af00      	add	r7, sp, #0
 800c244:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c24e:	e853 3f00 	ldrex	r3, [r3]
 800c252:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c256:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c25a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	461a      	mov	r2, r3
 800c262:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c264:	643b      	str	r3, [r7, #64]	@ 0x40
 800c266:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c268:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c26a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c26c:	e841 2300 	strex	r3, r2, [r1]
 800c270:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c274:	2b00      	cmp	r3, #0
 800c276:	d1e6      	bne.n	800c246 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	3308      	adds	r3, #8
 800c27e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c280:	6a3b      	ldr	r3, [r7, #32]
 800c282:	e853 3f00 	ldrex	r3, [r3]
 800c286:	61fb      	str	r3, [r7, #28]
   return(result);
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c28e:	f023 0301 	bic.w	r3, r3, #1
 800c292:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3308      	adds	r3, #8
 800c29a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c29c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c29e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c2a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2a4:	e841 2300 	strex	r3, r2, [r1]
 800c2a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d1e3      	bne.n	800c278 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d118      	bne.n	800c2ea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	e853 3f00 	ldrex	r3, [r3]
 800c2c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	f023 0310 	bic.w	r3, r3, #16
 800c2cc:	647b      	str	r3, [r7, #68]	@ 0x44
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c2d6:	61bb      	str	r3, [r7, #24]
 800c2d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2da:	6979      	ldr	r1, [r7, #20]
 800c2dc:	69ba      	ldr	r2, [r7, #24]
 800c2de:	e841 2300 	strex	r3, r2, [r1]
 800c2e2:	613b      	str	r3, [r7, #16]
   return(result);
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1e6      	bne.n	800c2b8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2220      	movs	r2, #32
 800c2ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c2fe:	bf00      	nop
 800c300:	3754      	adds	r7, #84	@ 0x54
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr

0800c30a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c30a:	b480      	push	{r7}
 800c30c:	b085      	sub	sp, #20
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d101      	bne.n	800c320 <HAL_UARTEx_DisableFifoMode+0x16>
 800c31c:	2302      	movs	r3, #2
 800c31e:	e027      	b.n	800c370 <HAL_UARTEx_DisableFifoMode+0x66>
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2224      	movs	r2, #36	@ 0x24
 800c32c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	681a      	ldr	r2, [r3, #0]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f022 0201 	bic.w	r2, r2, #1
 800c346:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c34e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	68fa      	ldr	r2, [r7, #12]
 800c35c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2220      	movs	r2, #32
 800c362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2200      	movs	r2, #0
 800c36a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c36e:	2300      	movs	r3, #0
}
 800c370:	4618      	mov	r0, r3
 800c372:	3714      	adds	r7, #20
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr

0800c37c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c38c:	2b01      	cmp	r3, #1
 800c38e:	d101      	bne.n	800c394 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c390:	2302      	movs	r3, #2
 800c392:	e02d      	b.n	800c3f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2201      	movs	r2, #1
 800c398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2224      	movs	r2, #36	@ 0x24
 800c3a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f022 0201 	bic.w	r2, r2, #1
 800c3ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	683a      	ldr	r2, [r7, #0]
 800c3cc:	430a      	orrs	r2, r1
 800c3ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 f84f 	bl	800c474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	68fa      	ldr	r2, [r7, #12]
 800c3dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2220      	movs	r2, #32
 800c3e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d101      	bne.n	800c410 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c40c:	2302      	movs	r3, #2
 800c40e:	e02d      	b.n	800c46c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2201      	movs	r2, #1
 800c414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2224      	movs	r2, #36	@ 0x24
 800c41c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f022 0201 	bic.w	r2, r2, #1
 800c436:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	689b      	ldr	r3, [r3, #8]
 800c43e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	683a      	ldr	r2, [r7, #0]
 800c448:	430a      	orrs	r2, r1
 800c44a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f000 f811 	bl	800c474 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2220      	movs	r2, #32
 800c45e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3710      	adds	r7, #16
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c474:	b480      	push	{r7}
 800c476:	b085      	sub	sp, #20
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c480:	2b00      	cmp	r3, #0
 800c482:	d108      	bne.n	800c496 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c494:	e031      	b.n	800c4fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c496:	2308      	movs	r3, #8
 800c498:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c49a:	2308      	movs	r3, #8
 800c49c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	0e5b      	lsrs	r3, r3, #25
 800c4a6:	b2db      	uxtb	r3, r3
 800c4a8:	f003 0307 	and.w	r3, r3, #7
 800c4ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	0f5b      	lsrs	r3, r3, #29
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	f003 0307 	and.w	r3, r3, #7
 800c4bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4be:	7bbb      	ldrb	r3, [r7, #14]
 800c4c0:	7b3a      	ldrb	r2, [r7, #12]
 800c4c2:	4911      	ldr	r1, [pc, #68]	@ (800c508 <UARTEx_SetNbDataToProcess+0x94>)
 800c4c4:	5c8a      	ldrb	r2, [r1, r2]
 800c4c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c4ca:	7b3a      	ldrb	r2, [r7, #12]
 800c4cc:	490f      	ldr	r1, [pc, #60]	@ (800c50c <UARTEx_SetNbDataToProcess+0x98>)
 800c4ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c4d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4d4:	b29a      	uxth	r2, r3
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4dc:	7bfb      	ldrb	r3, [r7, #15]
 800c4de:	7b7a      	ldrb	r2, [r7, #13]
 800c4e0:	4909      	ldr	r1, [pc, #36]	@ (800c508 <UARTEx_SetNbDataToProcess+0x94>)
 800c4e2:	5c8a      	ldrb	r2, [r1, r2]
 800c4e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c4e8:	7b7a      	ldrb	r2, [r7, #13]
 800c4ea:	4908      	ldr	r1, [pc, #32]	@ (800c50c <UARTEx_SetNbDataToProcess+0x98>)
 800c4ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c4ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c4fa:	bf00      	nop
 800c4fc:	3714      	adds	r7, #20
 800c4fe:	46bd      	mov	sp, r7
 800c500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c504:	4770      	bx	lr
 800c506:	bf00      	nop
 800c508:	080170b0 	.word	0x080170b0
 800c50c:	080170b8 	.word	0x080170b8

0800c510 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c510:	b480      	push	{r7}
 800c512:	b085      	sub	sp, #20
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2200      	movs	r2, #0
 800c51c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c520:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c524:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	b29a      	uxth	r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c530:	2300      	movs	r3, #0
}
 800c532:	4618      	mov	r0, r3
 800c534:	3714      	adds	r7, #20
 800c536:	46bd      	mov	sp, r7
 800c538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53c:	4770      	bx	lr

0800c53e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c53e:	b480      	push	{r7}
 800c540:	b085      	sub	sp, #20
 800c542:	af00      	add	r7, sp, #0
 800c544:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c546:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c54a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c552:	b29a      	uxth	r2, r3
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	b29b      	uxth	r3, r3
 800c558:	43db      	mvns	r3, r3
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	4013      	ands	r3, r2
 800c55e:	b29a      	uxth	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c566:	2300      	movs	r3, #0
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3714      	adds	r7, #20
 800c56c:	46bd      	mov	sp, r7
 800c56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c572:	4770      	bx	lr

0800c574 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	1d3b      	adds	r3, r7, #4
 800c57e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2201      	movs	r2, #1
 800c586:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	2200      	movs	r2, #0
 800c58e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	2200      	movs	r2, #0
 800c596:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2200      	movs	r2, #0
 800c59e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3714      	adds	r7, #20
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b09d      	sub	sp, #116	@ 0x74
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c5c0:	687a      	ldr	r2, [r7, #4]
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4413      	add	r3, r2
 800c5ca:	881b      	ldrh	r3, [r3, #0]
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800c5d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5d6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	78db      	ldrb	r3, [r3, #3]
 800c5de:	2b03      	cmp	r3, #3
 800c5e0:	d81f      	bhi.n	800c622 <USB_ActivateEndpoint+0x72>
 800c5e2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5e8 <USB_ActivateEndpoint+0x38>)
 800c5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e8:	0800c5f9 	.word	0x0800c5f9
 800c5ec:	0800c615 	.word	0x0800c615
 800c5f0:	0800c62b 	.word	0x0800c62b
 800c5f4:	0800c607 	.word	0x0800c607
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c5f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c5fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c600:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c604:	e012      	b.n	800c62c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c606:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c60a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c60e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c612:	e00b      	b.n	800c62c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c614:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c618:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c61c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c620:	e004      	b.n	800c62c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800c628:	e000      	b.n	800c62c <USB_ActivateEndpoint+0x7c>
      break;
 800c62a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	009b      	lsls	r3, r3, #2
 800c634:	441a      	add	r2, r3
 800c636:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c63a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c63e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c642:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c64e:	687a      	ldr	r2, [r7, #4]
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	009b      	lsls	r3, r3, #2
 800c656:	4413      	add	r3, r2
 800c658:	881b      	ldrh	r3, [r3, #0]
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	b21b      	sxth	r3, r3
 800c65e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c666:	b21a      	sxth	r2, r3
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	b21b      	sxth	r3, r3
 800c66e:	4313      	orrs	r3, r2
 800c670:	b21b      	sxth	r3, r3
 800c672:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	009b      	lsls	r3, r3, #2
 800c67e:	441a      	add	r2, r3
 800c680:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c684:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c688:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c68c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c694:	b29b      	uxth	r3, r3
 800c696:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	7b1b      	ldrb	r3, [r3, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	f040 8178 	bne.w	800c992 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	785b      	ldrb	r3, [r3, #1]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f000 8084 	beq.w	800c7b4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	61bb      	str	r3, [r7, #24]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6b6:	b29b      	uxth	r3, r3
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	69bb      	ldr	r3, [r7, #24]
 800c6bc:	4413      	add	r3, r2
 800c6be:	61bb      	str	r3, [r7, #24]
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	00da      	lsls	r2, r3, #3
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c6ce:	617b      	str	r3, [r7, #20]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	88db      	ldrh	r3, [r3, #6]
 800c6d4:	085b      	lsrs	r3, r3, #1
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	005b      	lsls	r3, r3, #1
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	4413      	add	r3, r2
 800c6ea:	881b      	ldrh	r3, [r3, #0]
 800c6ec:	827b      	strh	r3, [r7, #18]
 800c6ee:	8a7b      	ldrh	r3, [r7, #18]
 800c6f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d01b      	beq.n	800c730 <USB_ActivateEndpoint+0x180>
 800c6f8:	687a      	ldr	r2, [r7, #4]
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	4413      	add	r3, r2
 800c702:	881b      	ldrh	r3, [r3, #0]
 800c704:	b29b      	uxth	r3, r3
 800c706:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c70a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c70e:	823b      	strh	r3, [r7, #16]
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	441a      	add	r2, r3
 800c71a:	8a3b      	ldrh	r3, [r7, #16]
 800c71c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c720:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c724:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c728:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c72c:	b29b      	uxth	r3, r3
 800c72e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	78db      	ldrb	r3, [r3, #3]
 800c734:	2b01      	cmp	r3, #1
 800c736:	d020      	beq.n	800c77a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c738:	687a      	ldr	r2, [r7, #4]
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	4413      	add	r3, r2
 800c742:	881b      	ldrh	r3, [r3, #0]
 800c744:	b29b      	uxth	r3, r3
 800c746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c74a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c74e:	81bb      	strh	r3, [r7, #12]
 800c750:	89bb      	ldrh	r3, [r7, #12]
 800c752:	f083 0320 	eor.w	r3, r3, #32
 800c756:	81bb      	strh	r3, [r7, #12]
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	009b      	lsls	r3, r3, #2
 800c760:	441a      	add	r2, r3
 800c762:	89bb      	ldrh	r3, [r7, #12]
 800c764:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c768:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c76c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c770:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c774:	b29b      	uxth	r3, r3
 800c776:	8013      	strh	r3, [r2, #0]
 800c778:	e2d5      	b.n	800cd26 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	4413      	add	r3, r2
 800c784:	881b      	ldrh	r3, [r3, #0]
 800c786:	b29b      	uxth	r3, r3
 800c788:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c78c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c790:	81fb      	strh	r3, [r7, #14]
 800c792:	687a      	ldr	r2, [r7, #4]
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	441a      	add	r2, r3
 800c79c:	89fb      	ldrh	r3, [r7, #14]
 800c79e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7ae:	b29b      	uxth	r3, r3
 800c7b0:	8013      	strh	r3, [r2, #0]
 800c7b2:	e2b8      	b.n	800cd26 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c4:	4413      	add	r3, r2
 800c7c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	00da      	lsls	r2, r3, #3
 800c7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d0:	4413      	add	r3, r2
 800c7d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c7d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	88db      	ldrh	r3, [r3, #6]
 800c7dc:	085b      	lsrs	r3, r3, #1
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	005b      	lsls	r3, r3, #1
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7e6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c7f2:	b29b      	uxth	r3, r3
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f8:	4413      	add	r3, r2
 800c7fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	00da      	lsls	r2, r3, #3
 800c802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c804:	4413      	add	r3, r2
 800c806:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c80a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80e:	881b      	ldrh	r3, [r3, #0]
 800c810:	b29b      	uxth	r3, r3
 800c812:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c816:	b29a      	uxth	r2, r3
 800c818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81a:	801a      	strh	r2, [r3, #0]
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	691b      	ldr	r3, [r3, #16]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10a      	bne.n	800c83a <USB_ActivateEndpoint+0x28a>
 800c824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c826:	881b      	ldrh	r3, [r3, #0]
 800c828:	b29b      	uxth	r3, r3
 800c82a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c82e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c832:	b29a      	uxth	r2, r3
 800c834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c836:	801a      	strh	r2, [r3, #0]
 800c838:	e039      	b.n	800c8ae <USB_ActivateEndpoint+0x2fe>
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c840:	d818      	bhi.n	800c874 <USB_ActivateEndpoint+0x2c4>
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	691b      	ldr	r3, [r3, #16]
 800c846:	085b      	lsrs	r3, r3, #1
 800c848:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	691b      	ldr	r3, [r3, #16]
 800c84e:	f003 0301 	and.w	r3, r3, #1
 800c852:	2b00      	cmp	r3, #0
 800c854:	d002      	beq.n	800c85c <USB_ActivateEndpoint+0x2ac>
 800c856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c858:	3301      	adds	r3, #1
 800c85a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c85c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85e:	881b      	ldrh	r3, [r3, #0]
 800c860:	b29a      	uxth	r2, r3
 800c862:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c864:	b29b      	uxth	r3, r3
 800c866:	029b      	lsls	r3, r3, #10
 800c868:	b29b      	uxth	r3, r3
 800c86a:	4313      	orrs	r3, r2
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c870:	801a      	strh	r2, [r3, #0]
 800c872:	e01c      	b.n	800c8ae <USB_ActivateEndpoint+0x2fe>
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	691b      	ldr	r3, [r3, #16]
 800c878:	095b      	lsrs	r3, r3, #5
 800c87a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	691b      	ldr	r3, [r3, #16]
 800c880:	f003 031f 	and.w	r3, r3, #31
 800c884:	2b00      	cmp	r3, #0
 800c886:	d102      	bne.n	800c88e <USB_ActivateEndpoint+0x2de>
 800c888:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c88a:	3b01      	subs	r3, #1
 800c88c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c890:	881b      	ldrh	r3, [r3, #0]
 800c892:	b29a      	uxth	r2, r3
 800c894:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c896:	b29b      	uxth	r3, r3
 800c898:	029b      	lsls	r3, r3, #10
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	4313      	orrs	r3, r2
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8a8:	b29a      	uxth	r2, r3
 800c8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ac:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c8ae:	687a      	ldr	r2, [r7, #4]
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	4413      	add	r3, r2
 800c8b8:	881b      	ldrh	r3, [r3, #0]
 800c8ba:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c8bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c8be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d01b      	beq.n	800c8fe <USB_ActivateEndpoint+0x34e>
 800c8c6:	687a      	ldr	r2, [r7, #4]
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	009b      	lsls	r3, r3, #2
 800c8ce:	4413      	add	r3, r2
 800c8d0:	881b      	ldrh	r3, [r3, #0]
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8dc:	843b      	strh	r3, [r7, #32]
 800c8de:	687a      	ldr	r2, [r7, #4]
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	781b      	ldrb	r3, [r3, #0]
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	441a      	add	r2, r3
 800c8e8:	8c3b      	ldrh	r3, [r7, #32]
 800c8ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c8f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d124      	bne.n	800c950 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	683b      	ldr	r3, [r7, #0]
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	4413      	add	r3, r2
 800c910:	881b      	ldrh	r3, [r3, #0]
 800c912:	b29b      	uxth	r3, r3
 800c914:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c918:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c91c:	83bb      	strh	r3, [r7, #28]
 800c91e:	8bbb      	ldrh	r3, [r7, #28]
 800c920:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c924:	83bb      	strh	r3, [r7, #28]
 800c926:	8bbb      	ldrh	r3, [r7, #28]
 800c928:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c92c:	83bb      	strh	r3, [r7, #28]
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	441a      	add	r2, r3
 800c938:	8bbb      	ldrh	r3, [r7, #28]
 800c93a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c93e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c942:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c946:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	8013      	strh	r3, [r2, #0]
 800c94e:	e1ea      	b.n	800cd26 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	781b      	ldrb	r3, [r3, #0]
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	4413      	add	r3, r2
 800c95a:	881b      	ldrh	r3, [r3, #0]
 800c95c:	b29b      	uxth	r3, r3
 800c95e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c966:	83fb      	strh	r3, [r7, #30]
 800c968:	8bfb      	ldrh	r3, [r7, #30]
 800c96a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c96e:	83fb      	strh	r3, [r7, #30]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	009b      	lsls	r3, r3, #2
 800c978:	441a      	add	r2, r3
 800c97a:	8bfb      	ldrh	r3, [r7, #30]
 800c97c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c980:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c984:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c988:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	8013      	strh	r3, [r2, #0]
 800c990:	e1c9      	b.n	800cd26 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	78db      	ldrb	r3, [r3, #3]
 800c996:	2b02      	cmp	r3, #2
 800c998:	d11e      	bne.n	800c9d8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c99a:	687a      	ldr	r2, [r7, #4]
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	4413      	add	r3, r2
 800c9a4:	881b      	ldrh	r3, [r3, #0]
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9b0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	441a      	add	r2, r3
 800c9be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c9c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9ca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c9ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	8013      	strh	r3, [r2, #0]
 800c9d6:	e01d      	b.n	800ca14 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	4413      	add	r3, r2
 800c9e2:	881b      	ldrh	r3, [r3, #0]
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c9ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9ee:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c9f2:	687a      	ldr	r2, [r7, #4]
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	009b      	lsls	r3, r3, #2
 800c9fa:	441a      	add	r2, r3
 800c9fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800ca00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca1e:	b29b      	uxth	r3, r3
 800ca20:	461a      	mov	r2, r3
 800ca22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca24:	4413      	add	r3, r2
 800ca26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	781b      	ldrb	r3, [r3, #0]
 800ca2c:	00da      	lsls	r2, r3, #3
 800ca2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ca30:	4413      	add	r3, r2
 800ca32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ca36:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	891b      	ldrh	r3, [r3, #8]
 800ca3c:	085b      	lsrs	r3, r3, #1
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	005b      	lsls	r3, r3, #1
 800ca42:	b29a      	uxth	r2, r3
 800ca44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca46:	801a      	strh	r2, [r3, #0]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	461a      	mov	r2, r3
 800ca56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca58:	4413      	add	r3, r2
 800ca5a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	00da      	lsls	r2, r3, #3
 800ca62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca64:	4413      	add	r3, r2
 800ca66:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800ca6a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	895b      	ldrh	r3, [r3, #10]
 800ca70:	085b      	lsrs	r3, r3, #1
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	005b      	lsls	r3, r3, #1
 800ca76:	b29a      	uxth	r2, r3
 800ca78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ca7a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	785b      	ldrb	r3, [r3, #1]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f040 8093 	bne.w	800cbac <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	4413      	add	r3, r2
 800ca90:	881b      	ldrh	r3, [r3, #0]
 800ca92:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800ca96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800ca9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d01b      	beq.n	800cada <USB_ActivateEndpoint+0x52a>
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	009b      	lsls	r3, r3, #2
 800caaa:	4413      	add	r3, r2
 800caac:	881b      	ldrh	r3, [r3, #0]
 800caae:	b29b      	uxth	r3, r3
 800cab0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cab4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cab8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	441a      	add	r2, r3
 800cac4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800cac6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800caca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cace:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4413      	add	r3, r2
 800cae4:	881b      	ldrh	r3, [r3, #0]
 800cae6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800cae8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800caea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d01b      	beq.n	800cb2a <USB_ActivateEndpoint+0x57a>
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	781b      	ldrb	r3, [r3, #0]
 800caf8:	009b      	lsls	r3, r3, #2
 800cafa:	4413      	add	r3, r2
 800cafc:	881b      	ldrh	r3, [r3, #0]
 800cafe:	b29b      	uxth	r3, r3
 800cb00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb08:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	441a      	add	r2, r3
 800cb14:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cb16:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb1a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb22:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cb2a:	687a      	ldr	r2, [r7, #4]
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	4413      	add	r3, r2
 800cb34:	881b      	ldrh	r3, [r3, #0]
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cb3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb40:	873b      	strh	r3, [r7, #56]	@ 0x38
 800cb42:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cb44:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cb48:	873b      	strh	r3, [r7, #56]	@ 0x38
 800cb4a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cb4c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cb50:	873b      	strh	r3, [r7, #56]	@ 0x38
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	441a      	add	r2, r3
 800cb5c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cb5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4413      	add	r3, r2
 800cb7c:	881b      	ldrh	r3, [r3, #0]
 800cb7e:	b29b      	uxth	r3, r3
 800cb80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb88:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	441a      	add	r2, r3
 800cb94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cb96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	8013      	strh	r3, [r2, #0]
 800cbaa:	e0bc      	b.n	800cd26 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	781b      	ldrb	r3, [r3, #0]
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	4413      	add	r3, r2
 800cbb6:	881b      	ldrh	r3, [r3, #0]
 800cbb8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800cbbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800cbc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d01d      	beq.n	800cc04 <USB_ActivateEndpoint+0x654>
 800cbc8:	687a      	ldr	r2, [r7, #4]
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	4413      	add	r3, r2
 800cbd2:	881b      	ldrh	r3, [r3, #0]
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbde:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	441a      	add	r2, r3
 800cbec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800cbf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cbfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	4413      	add	r3, r2
 800cc0e:	881b      	ldrh	r3, [r3, #0]
 800cc10:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800cc14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800cc18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d01d      	beq.n	800cc5c <USB_ActivateEndpoint+0x6ac>
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4413      	add	r3, r2
 800cc2a:	881b      	ldrh	r3, [r3, #0]
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc36:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	441a      	add	r2, r3
 800cc44:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800cc48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	78db      	ldrb	r3, [r3, #3]
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d024      	beq.n	800ccae <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4413      	add	r3, r2
 800cc6e:	881b      	ldrh	r3, [r3, #0]
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc7a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800cc7e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cc82:	f083 0320 	eor.w	r3, r3, #32
 800cc86:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	009b      	lsls	r3, r3, #2
 800cc92:	441a      	add	r2, r3
 800cc94:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cc98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cca0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	8013      	strh	r3, [r2, #0]
 800ccac:	e01d      	b.n	800ccea <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ccae:	687a      	ldr	r2, [r7, #4]
 800ccb0:	683b      	ldr	r3, [r7, #0]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	009b      	lsls	r3, r3, #2
 800ccb6:	4413      	add	r3, r2
 800ccb8:	881b      	ldrh	r3, [r3, #0]
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccc4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	009b      	lsls	r3, r3, #2
 800ccd0:	441a      	add	r2, r3
 800ccd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ccd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ccde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cce2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	009b      	lsls	r3, r3, #2
 800ccf2:	4413      	add	r3, r2
 800ccf4:	881b      	ldrh	r3, [r3, #0]
 800ccf6:	b29b      	uxth	r3, r3
 800ccf8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ccfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd00:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800cd04:	687a      	ldr	r2, [r7, #4]
 800cd06:	683b      	ldr	r3, [r7, #0]
 800cd08:	781b      	ldrb	r3, [r3, #0]
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	441a      	add	r2, r3
 800cd0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cd12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800cd26:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3774      	adds	r7, #116	@ 0x74
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr
 800cd36:	bf00      	nop

0800cd38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b08d      	sub	sp, #52	@ 0x34
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	7b1b      	ldrb	r3, [r3, #12]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	f040 808e 	bne.w	800ce68 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	785b      	ldrb	r3, [r3, #1]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d044      	beq.n	800cdde <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	781b      	ldrb	r3, [r3, #0]
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	4413      	add	r3, r2
 800cd5e:	881b      	ldrh	r3, [r3, #0]
 800cd60:	81bb      	strh	r3, [r7, #12]
 800cd62:	89bb      	ldrh	r3, [r7, #12]
 800cd64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d01b      	beq.n	800cda4 <USB_DeactivateEndpoint+0x6c>
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	009b      	lsls	r3, r3, #2
 800cd74:	4413      	add	r3, r2
 800cd76:	881b      	ldrh	r3, [r3, #0]
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd82:	817b      	strh	r3, [r7, #10]
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	781b      	ldrb	r3, [r3, #0]
 800cd8a:	009b      	lsls	r3, r3, #2
 800cd8c:	441a      	add	r2, r3
 800cd8e:	897b      	ldrh	r3, [r7, #10]
 800cd90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	4413      	add	r3, r2
 800cdae:	881b      	ldrh	r3, [r3, #0]
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cdb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdba:	813b      	strh	r3, [r7, #8]
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	441a      	add	r2, r3
 800cdc6:	893b      	ldrh	r3, [r7, #8]
 800cdc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	8013      	strh	r3, [r2, #0]
 800cddc:	e192      	b.n	800d104 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cdde:	687a      	ldr	r2, [r7, #4]
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	009b      	lsls	r3, r3, #2
 800cde6:	4413      	add	r3, r2
 800cde8:	881b      	ldrh	r3, [r3, #0]
 800cdea:	827b      	strh	r3, [r7, #18]
 800cdec:	8a7b      	ldrh	r3, [r7, #18]
 800cdee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d01b      	beq.n	800ce2e <USB_DeactivateEndpoint+0xf6>
 800cdf6:	687a      	ldr	r2, [r7, #4]
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	781b      	ldrb	r3, [r3, #0]
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	4413      	add	r3, r2
 800ce00:	881b      	ldrh	r3, [r3, #0]
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce0c:	823b      	strh	r3, [r7, #16]
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	441a      	add	r2, r3
 800ce18:	8a3b      	ldrh	r3, [r7, #16]
 800ce1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce22:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ce26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	781b      	ldrb	r3, [r3, #0]
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	4413      	add	r3, r2
 800ce38:	881b      	ldrh	r3, [r3, #0]
 800ce3a:	b29b      	uxth	r3, r3
 800ce3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ce40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce44:	81fb      	strh	r3, [r7, #14]
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	683b      	ldr	r3, [r7, #0]
 800ce4a:	781b      	ldrb	r3, [r3, #0]
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	441a      	add	r2, r3
 800ce50:	89fb      	ldrh	r3, [r7, #14]
 800ce52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce62:	b29b      	uxth	r3, r3
 800ce64:	8013      	strh	r3, [r2, #0]
 800ce66:	e14d      	b.n	800d104 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	785b      	ldrb	r3, [r3, #1]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f040 80a5 	bne.w	800cfbc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	781b      	ldrb	r3, [r3, #0]
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	4413      	add	r3, r2
 800ce7c:	881b      	ldrh	r3, [r3, #0]
 800ce7e:	843b      	strh	r3, [r7, #32]
 800ce80:	8c3b      	ldrh	r3, [r7, #32]
 800ce82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d01b      	beq.n	800cec2 <USB_DeactivateEndpoint+0x18a>
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	781b      	ldrb	r3, [r3, #0]
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	4413      	add	r3, r2
 800ce94:	881b      	ldrh	r3, [r3, #0]
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cea0:	83fb      	strh	r3, [r7, #30]
 800cea2:	687a      	ldr	r2, [r7, #4]
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	441a      	add	r2, r3
 800ceac:	8bfb      	ldrh	r3, [r7, #30]
 800ceae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ceb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ceb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ceba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cec2:	687a      	ldr	r2, [r7, #4]
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	4413      	add	r3, r2
 800cecc:	881b      	ldrh	r3, [r3, #0]
 800cece:	83bb      	strh	r3, [r7, #28]
 800ced0:	8bbb      	ldrh	r3, [r7, #28]
 800ced2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d01b      	beq.n	800cf12 <USB_DeactivateEndpoint+0x1da>
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	009b      	lsls	r3, r3, #2
 800cee2:	4413      	add	r3, r2
 800cee4:	881b      	ldrh	r3, [r3, #0]
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ceec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cef0:	837b      	strh	r3, [r7, #26]
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	683b      	ldr	r3, [r7, #0]
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	441a      	add	r2, r3
 800cefc:	8b7b      	ldrh	r3, [r7, #26]
 800cefe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	4413      	add	r3, r2
 800cf1c:	881b      	ldrh	r3, [r3, #0]
 800cf1e:	b29b      	uxth	r3, r3
 800cf20:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf28:	833b      	strh	r3, [r7, #24]
 800cf2a:	687a      	ldr	r2, [r7, #4]
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	781b      	ldrb	r3, [r3, #0]
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	441a      	add	r2, r3
 800cf34:	8b3b      	ldrh	r3, [r7, #24]
 800cf36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf42:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cf4a:	687a      	ldr	r2, [r7, #4]
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	781b      	ldrb	r3, [r3, #0]
 800cf50:	009b      	lsls	r3, r3, #2
 800cf52:	4413      	add	r3, r2
 800cf54:	881b      	ldrh	r3, [r3, #0]
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cf5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf60:	82fb      	strh	r3, [r7, #22]
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	009b      	lsls	r3, r3, #2
 800cf6a:	441a      	add	r2, r3
 800cf6c:	8afb      	ldrh	r3, [r7, #22]
 800cf6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cf82:	687a      	ldr	r2, [r7, #4]
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	009b      	lsls	r3, r3, #2
 800cf8a:	4413      	add	r3, r2
 800cf8c:	881b      	ldrh	r3, [r3, #0]
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf98:	82bb      	strh	r3, [r7, #20]
 800cf9a:	687a      	ldr	r2, [r7, #4]
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	781b      	ldrb	r3, [r3, #0]
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	441a      	add	r2, r3
 800cfa4:	8abb      	ldrh	r3, [r7, #20]
 800cfa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cfb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	8013      	strh	r3, [r2, #0]
 800cfba:	e0a3      	b.n	800d104 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cfbc:	687a      	ldr	r2, [r7, #4]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	881b      	ldrh	r3, [r3, #0]
 800cfc8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cfca:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cfcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d01b      	beq.n	800d00c <USB_DeactivateEndpoint+0x2d4>
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	4413      	add	r3, r2
 800cfde:	881b      	ldrh	r3, [r3, #0]
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cfe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfea:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	781b      	ldrb	r3, [r3, #0]
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	441a      	add	r2, r3
 800cff6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d000:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d004:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d008:	b29b      	uxth	r3, r3
 800d00a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	4413      	add	r3, r2
 800d016:	881b      	ldrh	r3, [r3, #0]
 800d018:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800d01a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d01c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d020:	2b00      	cmp	r3, #0
 800d022:	d01b      	beq.n	800d05c <USB_DeactivateEndpoint+0x324>
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	4413      	add	r3, r2
 800d02e:	881b      	ldrh	r3, [r3, #0]
 800d030:	b29b      	uxth	r3, r3
 800d032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d03a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d03c:	687a      	ldr	r2, [r7, #4]
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	441a      	add	r2, r3
 800d046:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d048:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d04c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d050:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d054:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d058:	b29b      	uxth	r3, r3
 800d05a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d05c:	687a      	ldr	r2, [r7, #4]
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	009b      	lsls	r3, r3, #2
 800d064:	4413      	add	r3, r2
 800d066:	881b      	ldrh	r3, [r3, #0]
 800d068:	b29b      	uxth	r3, r3
 800d06a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d06e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d072:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	781b      	ldrb	r3, [r3, #0]
 800d07a:	009b      	lsls	r3, r3, #2
 800d07c:	441a      	add	r2, r3
 800d07e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d080:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d084:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d088:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d08c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d090:	b29b      	uxth	r3, r3
 800d092:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	009b      	lsls	r3, r3, #2
 800d09c:	4413      	add	r3, r2
 800d09e:	881b      	ldrh	r3, [r3, #0]
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d0aa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	009b      	lsls	r3, r3, #2
 800d0b4:	441a      	add	r2, r3
 800d0b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d0cc:	687a      	ldr	r2, [r7, #4]
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	009b      	lsls	r3, r3, #2
 800d0d4:	4413      	add	r3, r2
 800d0d6:	881b      	ldrh	r3, [r3, #0]
 800d0d8:	b29b      	uxth	r3, r3
 800d0da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d0de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0e2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d0e4:	687a      	ldr	r2, [r7, #4]
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	781b      	ldrb	r3, [r3, #0]
 800d0ea:	009b      	lsls	r3, r3, #2
 800d0ec:	441a      	add	r2, r3
 800d0ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d0f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d0fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d100:	b29b      	uxth	r3, r3
 800d102:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3734      	adds	r7, #52	@ 0x34
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr

0800d112 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d112:	b580      	push	{r7, lr}
 800d114:	b0c2      	sub	sp, #264	@ 0x108
 800d116:	af00      	add	r7, sp, #0
 800d118:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d11c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d120:	6018      	str	r0, [r3, #0]
 800d122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d12a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d12c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	785b      	ldrb	r3, [r3, #1]
 800d138:	2b01      	cmp	r3, #1
 800d13a:	f040 86b7 	bne.w	800deac <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d13e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	699a      	ldr	r2, [r3, #24]
 800d14a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d14e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	429a      	cmp	r2, r3
 800d158:	d908      	bls.n	800d16c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800d15a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d15e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	691b      	ldr	r3, [r3, #16]
 800d166:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d16a:	e007      	b.n	800d17c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800d16c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d17c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d180:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	7b1b      	ldrb	r3, [r3, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d13a      	bne.n	800d202 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d18c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d190:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	6959      	ldr	r1, [r3, #20]
 800d198:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d19c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	88da      	ldrh	r2, [r3, #6]
 800d1a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1a8:	b29b      	uxth	r3, r3
 800d1aa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d1ae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d1b2:	6800      	ldr	r0, [r0, #0]
 800d1b4:	f001 fc99 	bl	800eaea <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d1b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	613b      	str	r3, [r7, #16]
 800d1c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	461a      	mov	r2, r3
 800d1d6:	693b      	ldr	r3, [r7, #16]
 800d1d8:	4413      	add	r3, r2
 800d1da:	613b      	str	r3, [r7, #16]
 800d1dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	00da      	lsls	r2, r3, #3
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d1f2:	60fb      	str	r3, [r7, #12]
 800d1f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1f8:	b29a      	uxth	r2, r3
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	801a      	strh	r2, [r3, #0]
 800d1fe:	f000 be1f 	b.w	800de40 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d202:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d206:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	78db      	ldrb	r3, [r3, #3]
 800d20e:	2b02      	cmp	r3, #2
 800d210:	f040 8462 	bne.w	800dad8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	6a1a      	ldr	r2, [r3, #32]
 800d220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d224:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	691b      	ldr	r3, [r3, #16]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	f240 83df 	bls.w	800d9f0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d236:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4413      	add	r3, r2
 800d24c:	881b      	ldrh	r3, [r3, #0]
 800d24e:	b29b      	uxth	r3, r3
 800d250:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d258:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800d25c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d264:	681a      	ldr	r2, [r3, #0]
 800d266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d26a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	009b      	lsls	r3, r3, #2
 800d274:	441a      	add	r2, r3
 800d276:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d27a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d27e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d282:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d28e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	6a1a      	ldr	r2, [r3, #32]
 800d29a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d29e:	1ad2      	subs	r2, r2, r3
 800d2a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d2ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	4413      	add	r3, r2
 800d2c6:	881b      	ldrh	r3, [r3, #0]
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	f000 81c7 	beq.w	800d662 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d2d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	633b      	str	r3, [r7, #48]	@ 0x30
 800d2e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	785b      	ldrb	r3, [r3, #1]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d177      	bne.n	800d3e0 <USB_EPStartXfer+0x2ce>
 800d2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d2fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d300:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d30a:	b29b      	uxth	r3, r3
 800d30c:	461a      	mov	r2, r3
 800d30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d310:	4413      	add	r3, r2
 800d312:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d318:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	00da      	lsls	r2, r3, #3
 800d322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d324:	4413      	add	r3, r2
 800d326:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d32a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d32e:	881b      	ldrh	r3, [r3, #0]
 800d330:	b29b      	uxth	r3, r3
 800d332:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d336:	b29a      	uxth	r2, r3
 800d338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d33a:	801a      	strh	r2, [r3, #0]
 800d33c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d340:	2b00      	cmp	r3, #0
 800d342:	d10a      	bne.n	800d35a <USB_EPStartXfer+0x248>
 800d344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d346:	881b      	ldrh	r3, [r3, #0]
 800d348:	b29b      	uxth	r3, r3
 800d34a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d34e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d352:	b29a      	uxth	r2, r3
 800d354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d356:	801a      	strh	r2, [r3, #0]
 800d358:	e067      	b.n	800d42a <USB_EPStartXfer+0x318>
 800d35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d35e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d360:	d81c      	bhi.n	800d39c <USB_EPStartXfer+0x28a>
 800d362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d366:	085b      	lsrs	r3, r3, #1
 800d368:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d370:	f003 0301 	and.w	r3, r3, #1
 800d374:	2b00      	cmp	r3, #0
 800d376:	d004      	beq.n	800d382 <USB_EPStartXfer+0x270>
 800d378:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d37c:	3301      	adds	r3, #1
 800d37e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d384:	881b      	ldrh	r3, [r3, #0]
 800d386:	b29a      	uxth	r2, r3
 800d388:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	029b      	lsls	r3, r3, #10
 800d390:	b29b      	uxth	r3, r3
 800d392:	4313      	orrs	r3, r2
 800d394:	b29a      	uxth	r2, r3
 800d396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d398:	801a      	strh	r2, [r3, #0]
 800d39a:	e046      	b.n	800d42a <USB_EPStartXfer+0x318>
 800d39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3a0:	095b      	lsrs	r3, r3, #5
 800d3a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3aa:	f003 031f 	and.w	r3, r3, #31
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d104      	bne.n	800d3bc <USB_EPStartXfer+0x2aa>
 800d3b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d3b6:	3b01      	subs	r3, #1
 800d3b8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3be:	881b      	ldrh	r3, [r3, #0]
 800d3c0:	b29a      	uxth	r2, r3
 800d3c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	029b      	lsls	r3, r3, #10
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	b29b      	uxth	r3, r3
 800d3d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3d8:	b29a      	uxth	r2, r3
 800d3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3dc:	801a      	strh	r2, [r3, #0]
 800d3de:	e024      	b.n	800d42a <USB_EPStartXfer+0x318>
 800d3e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	785b      	ldrb	r3, [r3, #1]
 800d3ec:	2b01      	cmp	r3, #1
 800d3ee:	d11c      	bne.n	800d42a <USB_EPStartXfer+0x318>
 800d3f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3fe:	b29b      	uxth	r3, r3
 800d400:	461a      	mov	r2, r3
 800d402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d404:	4413      	add	r3, r2
 800d406:	633b      	str	r3, [r7, #48]	@ 0x30
 800d408:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d40c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	00da      	lsls	r2, r3, #3
 800d416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d418:	4413      	add	r3, r2
 800d41a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d41e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d424:	b29a      	uxth	r2, r3
 800d426:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d428:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d42a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d42e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	895b      	ldrh	r3, [r3, #10]
 800d436:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d43a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d43e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	6959      	ldr	r1, [r3, #20]
 800d446:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d450:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d454:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d458:	6800      	ldr	r0, [r0, #0]
 800d45a:	f001 fb46 	bl	800eaea <USB_WritePMA>
            ep->xfer_buff += len;
 800d45e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	695a      	ldr	r2, [r3, #20]
 800d46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d46e:	441a      	add	r2, r3
 800d470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d47c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d480:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	6a1a      	ldr	r2, [r3, #32]
 800d488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d48c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	691b      	ldr	r3, [r3, #16]
 800d494:	429a      	cmp	r2, r3
 800d496:	d90f      	bls.n	800d4b8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d49c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	6a1a      	ldr	r2, [r3, #32]
 800d4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4a8:	1ad2      	subs	r2, r2, r3
 800d4aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	621a      	str	r2, [r3, #32]
 800d4b6:	e00e      	b.n	800d4d6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	6a1b      	ldr	r3, [r3, #32]
 800d4c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d4d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	785b      	ldrb	r3, [r3, #1]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d177      	bne.n	800d5d6 <USB_EPStartXfer+0x4c4>
 800d4e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	61bb      	str	r3, [r7, #24]
 800d4f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d500:	b29b      	uxth	r3, r3
 800d502:	461a      	mov	r2, r3
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	4413      	add	r3, r2
 800d508:	61bb      	str	r3, [r7, #24]
 800d50a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d50e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	00da      	lsls	r2, r3, #3
 800d518:	69bb      	ldr	r3, [r7, #24]
 800d51a:	4413      	add	r3, r2
 800d51c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d520:	617b      	str	r3, [r7, #20]
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	881b      	ldrh	r3, [r3, #0]
 800d526:	b29b      	uxth	r3, r3
 800d528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d52c:	b29a      	uxth	r2, r3
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	801a      	strh	r2, [r3, #0]
 800d532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d536:	2b00      	cmp	r3, #0
 800d538:	d10a      	bne.n	800d550 <USB_EPStartXfer+0x43e>
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	881b      	ldrh	r3, [r3, #0]
 800d53e:	b29b      	uxth	r3, r3
 800d540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d548:	b29a      	uxth	r2, r3
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	801a      	strh	r2, [r3, #0]
 800d54e:	e06d      	b.n	800d62c <USB_EPStartXfer+0x51a>
 800d550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d554:	2b3e      	cmp	r3, #62	@ 0x3e
 800d556:	d81c      	bhi.n	800d592 <USB_EPStartXfer+0x480>
 800d558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d55c:	085b      	lsrs	r3, r3, #1
 800d55e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d566:	f003 0301 	and.w	r3, r3, #1
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d004      	beq.n	800d578 <USB_EPStartXfer+0x466>
 800d56e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d572:	3301      	adds	r3, #1
 800d574:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	881b      	ldrh	r3, [r3, #0]
 800d57c:	b29a      	uxth	r2, r3
 800d57e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d582:	b29b      	uxth	r3, r3
 800d584:	029b      	lsls	r3, r3, #10
 800d586:	b29b      	uxth	r3, r3
 800d588:	4313      	orrs	r3, r2
 800d58a:	b29a      	uxth	r2, r3
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	801a      	strh	r2, [r3, #0]
 800d590:	e04c      	b.n	800d62c <USB_EPStartXfer+0x51a>
 800d592:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d596:	095b      	lsrs	r3, r3, #5
 800d598:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5a0:	f003 031f 	and.w	r3, r3, #31
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d104      	bne.n	800d5b2 <USB_EPStartXfer+0x4a0>
 800d5a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d5ac:	3b01      	subs	r3, #1
 800d5ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	881b      	ldrh	r3, [r3, #0]
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d5bc:	b29b      	uxth	r3, r3
 800d5be:	029b      	lsls	r3, r3, #10
 800d5c0:	b29b      	uxth	r3, r3
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	b29b      	uxth	r3, r3
 800d5c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5ce:	b29a      	uxth	r2, r3
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	801a      	strh	r2, [r3, #0]
 800d5d4:	e02a      	b.n	800d62c <USB_EPStartXfer+0x51a>
 800d5d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	785b      	ldrb	r3, [r3, #1]
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d122      	bne.n	800d62c <USB_EPStartXfer+0x51a>
 800d5e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	623b      	str	r3, [r7, #32]
 800d5f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d600:	b29b      	uxth	r3, r3
 800d602:	461a      	mov	r2, r3
 800d604:	6a3b      	ldr	r3, [r7, #32]
 800d606:	4413      	add	r3, r2
 800d608:	623b      	str	r3, [r7, #32]
 800d60a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d60e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	00da      	lsls	r2, r3, #3
 800d618:	6a3b      	ldr	r3, [r7, #32]
 800d61a:	4413      	add	r3, r2
 800d61c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d620:	61fb      	str	r3, [r7, #28]
 800d622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d626:	b29a      	uxth	r2, r3
 800d628:	69fb      	ldr	r3, [r7, #28]
 800d62a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d62c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d630:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	891b      	ldrh	r3, [r3, #8]
 800d638:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d63c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	6959      	ldr	r1, [r3, #20]
 800d648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d652:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d656:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d65a:	6800      	ldr	r0, [r0, #0]
 800d65c:	f001 fa45 	bl	800eaea <USB_WritePMA>
 800d660:	e3ee      	b.n	800de40 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d666:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	785b      	ldrb	r3, [r3, #1]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d177      	bne.n	800d762 <USB_EPStartXfer+0x650>
 800d672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d67e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d682:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d68c:	b29b      	uxth	r3, r3
 800d68e:	461a      	mov	r2, r3
 800d690:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d692:	4413      	add	r3, r2
 800d694:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d69a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	781b      	ldrb	r3, [r3, #0]
 800d6a2:	00da      	lsls	r2, r3, #3
 800d6a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d6a6:	4413      	add	r3, r2
 800d6a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d6ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6b0:	881b      	ldrh	r3, [r3, #0]
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d6b8:	b29a      	uxth	r2, r3
 800d6ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6bc:	801a      	strh	r2, [r3, #0]
 800d6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d10a      	bne.n	800d6dc <USB_EPStartXfer+0x5ca>
 800d6c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6c8:	881b      	ldrh	r3, [r3, #0]
 800d6ca:	b29b      	uxth	r3, r3
 800d6cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6d4:	b29a      	uxth	r2, r3
 800d6d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6d8:	801a      	strh	r2, [r3, #0]
 800d6da:	e06d      	b.n	800d7b8 <USB_EPStartXfer+0x6a6>
 800d6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6e0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d6e2:	d81c      	bhi.n	800d71e <USB_EPStartXfer+0x60c>
 800d6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6e8:	085b      	lsrs	r3, r3, #1
 800d6ea:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d6ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d6f2:	f003 0301 	and.w	r3, r3, #1
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d004      	beq.n	800d704 <USB_EPStartXfer+0x5f2>
 800d6fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d6fe:	3301      	adds	r3, #1
 800d700:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d706:	881b      	ldrh	r3, [r3, #0]
 800d708:	b29a      	uxth	r2, r3
 800d70a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d70e:	b29b      	uxth	r3, r3
 800d710:	029b      	lsls	r3, r3, #10
 800d712:	b29b      	uxth	r3, r3
 800d714:	4313      	orrs	r3, r2
 800d716:	b29a      	uxth	r2, r3
 800d718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d71a:	801a      	strh	r2, [r3, #0]
 800d71c:	e04c      	b.n	800d7b8 <USB_EPStartXfer+0x6a6>
 800d71e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d722:	095b      	lsrs	r3, r3, #5
 800d724:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d72c:	f003 031f 	and.w	r3, r3, #31
 800d730:	2b00      	cmp	r3, #0
 800d732:	d104      	bne.n	800d73e <USB_EPStartXfer+0x62c>
 800d734:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d738:	3b01      	subs	r3, #1
 800d73a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d73e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d740:	881b      	ldrh	r3, [r3, #0]
 800d742:	b29a      	uxth	r2, r3
 800d744:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d748:	b29b      	uxth	r3, r3
 800d74a:	029b      	lsls	r3, r3, #10
 800d74c:	b29b      	uxth	r3, r3
 800d74e:	4313      	orrs	r3, r2
 800d750:	b29b      	uxth	r3, r3
 800d752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d75a:	b29a      	uxth	r2, r3
 800d75c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d75e:	801a      	strh	r2, [r3, #0]
 800d760:	e02a      	b.n	800d7b8 <USB_EPStartXfer+0x6a6>
 800d762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	785b      	ldrb	r3, [r3, #1]
 800d76e:	2b01      	cmp	r3, #1
 800d770:	d122      	bne.n	800d7b8 <USB_EPStartXfer+0x6a6>
 800d772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d776:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d77e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d782:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d78c:	b29b      	uxth	r3, r3
 800d78e:	461a      	mov	r2, r3
 800d790:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d792:	4413      	add	r3, r2
 800d794:	653b      	str	r3, [r7, #80]	@ 0x50
 800d796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d79a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	00da      	lsls	r2, r3, #3
 800d7a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7a6:	4413      	add	r3, r2
 800d7a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d7ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7b2:	b29a      	uxth	r2, r3
 800d7b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d7b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	891b      	ldrh	r3, [r3, #8]
 800d7c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d7c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	6959      	ldr	r1, [r3, #20]
 800d7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d7de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d7e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d7e6:	6800      	ldr	r0, [r0, #0]
 800d7e8:	f001 f97f 	bl	800eaea <USB_WritePMA>
            ep->xfer_buff += len;
 800d7ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d7f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	695a      	ldr	r2, [r3, #20]
 800d7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7fc:	441a      	add	r2, r3
 800d7fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d802:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d80a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d80e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	6a1a      	ldr	r2, [r3, #32]
 800d816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d81a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	691b      	ldr	r3, [r3, #16]
 800d822:	429a      	cmp	r2, r3
 800d824:	d90f      	bls.n	800d846 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d826:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d82a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	6a1a      	ldr	r2, [r3, #32]
 800d832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d836:	1ad2      	subs	r2, r2, r3
 800d838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d83c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	621a      	str	r2, [r3, #32]
 800d844:	e00e      	b.n	800d864 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d846:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d84a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	6a1b      	ldr	r3, [r3, #32]
 800d852:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d85a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	2200      	movs	r2, #0
 800d862:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	643b      	str	r3, [r7, #64]	@ 0x40
 800d870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	785b      	ldrb	r3, [r3, #1]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d177      	bne.n	800d970 <USB_EPStartXfer+0x85e>
 800d880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d884:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d88c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d890:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	461a      	mov	r2, r3
 800d89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8a0:	4413      	add	r3, r2
 800d8a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d8a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	00da      	lsls	r2, r3, #3
 800d8b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8b4:	4413      	add	r3, r2
 800d8b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d8ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800d8bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8be:	881b      	ldrh	r3, [r3, #0]
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d8c6:	b29a      	uxth	r2, r3
 800d8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8ca:	801a      	strh	r2, [r3, #0]
 800d8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d10a      	bne.n	800d8ea <USB_EPStartXfer+0x7d8>
 800d8d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8d6:	881b      	ldrh	r3, [r3, #0]
 800d8d8:	b29b      	uxth	r3, r3
 800d8da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8e6:	801a      	strh	r2, [r3, #0]
 800d8e8:	e067      	b.n	800d9ba <USB_EPStartXfer+0x8a8>
 800d8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8ee:	2b3e      	cmp	r3, #62	@ 0x3e
 800d8f0:	d81c      	bhi.n	800d92c <USB_EPStartXfer+0x81a>
 800d8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8f6:	085b      	lsrs	r3, r3, #1
 800d8f8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d8fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d900:	f003 0301 	and.w	r3, r3, #1
 800d904:	2b00      	cmp	r3, #0
 800d906:	d004      	beq.n	800d912 <USB_EPStartXfer+0x800>
 800d908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d90c:	3301      	adds	r3, #1
 800d90e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d914:	881b      	ldrh	r3, [r3, #0]
 800d916:	b29a      	uxth	r2, r3
 800d918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d91c:	b29b      	uxth	r3, r3
 800d91e:	029b      	lsls	r3, r3, #10
 800d920:	b29b      	uxth	r3, r3
 800d922:	4313      	orrs	r3, r2
 800d924:	b29a      	uxth	r2, r3
 800d926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d928:	801a      	strh	r2, [r3, #0]
 800d92a:	e046      	b.n	800d9ba <USB_EPStartXfer+0x8a8>
 800d92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d930:	095b      	lsrs	r3, r3, #5
 800d932:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d936:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d93a:	f003 031f 	and.w	r3, r3, #31
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d104      	bne.n	800d94c <USB_EPStartXfer+0x83a>
 800d942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d946:	3b01      	subs	r3, #1
 800d948:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d94c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d94e:	881b      	ldrh	r3, [r3, #0]
 800d950:	b29a      	uxth	r2, r3
 800d952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d956:	b29b      	uxth	r3, r3
 800d958:	029b      	lsls	r3, r3, #10
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	4313      	orrs	r3, r2
 800d95e:	b29b      	uxth	r3, r3
 800d960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d968:	b29a      	uxth	r2, r3
 800d96a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d96c:	801a      	strh	r2, [r3, #0]
 800d96e:	e024      	b.n	800d9ba <USB_EPStartXfer+0x8a8>
 800d970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	785b      	ldrb	r3, [r3, #1]
 800d97c:	2b01      	cmp	r3, #1
 800d97e:	d11c      	bne.n	800d9ba <USB_EPStartXfer+0x8a8>
 800d980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d984:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d98e:	b29b      	uxth	r3, r3
 800d990:	461a      	mov	r2, r3
 800d992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d994:	4413      	add	r3, r2
 800d996:	643b      	str	r3, [r7, #64]	@ 0x40
 800d998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d99c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	00da      	lsls	r2, r3, #3
 800d9a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d9a8:	4413      	add	r3, r2
 800d9aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d9ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d9ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	895b      	ldrh	r3, [r3, #10]
 800d9c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d9ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	6959      	ldr	r1, [r3, #20]
 800d9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d9e0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d9e4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d9e8:	6800      	ldr	r0, [r0, #0]
 800d9ea:	f001 f87e 	bl	800eaea <USB_WritePMA>
 800d9ee:	e227      	b.n	800de40 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d9f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	6a1b      	ldr	r3, [r3, #32]
 800d9fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800da00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da08:	681a      	ldr	r2, [r3, #0]
 800da0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	4413      	add	r3, r2
 800da1a:	881b      	ldrh	r3, [r3, #0]
 800da1c:	b29b      	uxth	r3, r3
 800da1e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800da22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da26:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800da2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da32:	681a      	ldr	r2, [r3, #0]
 800da34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	009b      	lsls	r3, r3, #2
 800da42:	441a      	add	r2, r3
 800da44:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800da48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da58:	b29b      	uxth	r3, r3
 800da5a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800da5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da76:	b29b      	uxth	r3, r3
 800da78:	461a      	mov	r2, r3
 800da7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da7c:	4413      	add	r3, r2
 800da7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	00da      	lsls	r2, r3, #3
 800da8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da90:	4413      	add	r3, r2
 800da92:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800da96:	65bb      	str	r3, [r7, #88]	@ 0x58
 800da98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800daa0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800daa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	891b      	ldrh	r3, [r3, #8]
 800daae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	6959      	ldr	r1, [r3, #20]
 800dabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dac8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dacc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dad0:	6800      	ldr	r0, [r0, #0]
 800dad2:	f001 f80a 	bl	800eaea <USB_WritePMA>
 800dad6:	e1b3      	b.n	800de40 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800dad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dadc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	6a1a      	ldr	r2, [r3, #32]
 800dae4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dae8:	1ad2      	subs	r2, r2, r3
 800daea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800daf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dafa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	4413      	add	r3, r2
 800db10:	881b      	ldrh	r3, [r3, #0]
 800db12:	b29b      	uxth	r3, r3
 800db14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db18:	2b00      	cmp	r3, #0
 800db1a:	f000 80c6 	beq.w	800dcaa <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800db1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	673b      	str	r3, [r7, #112]	@ 0x70
 800db2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	785b      	ldrb	r3, [r3, #1]
 800db36:	2b00      	cmp	r3, #0
 800db38:	d177      	bne.n	800dc2a <USB_EPStartXfer+0xb18>
 800db3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	66bb      	str	r3, [r7, #104]	@ 0x68
 800db46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db4a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db54:	b29b      	uxth	r3, r3
 800db56:	461a      	mov	r2, r3
 800db58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800db5a:	4413      	add	r3, r2
 800db5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800db5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	00da      	lsls	r2, r3, #3
 800db6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800db6e:	4413      	add	r3, r2
 800db70:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800db74:	667b      	str	r3, [r7, #100]	@ 0x64
 800db76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db78:	881b      	ldrh	r3, [r3, #0]
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db80:	b29a      	uxth	r2, r3
 800db82:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db84:	801a      	strh	r2, [r3, #0]
 800db86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d10a      	bne.n	800dba4 <USB_EPStartXfer+0xa92>
 800db8e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800db90:	881b      	ldrh	r3, [r3, #0]
 800db92:	b29b      	uxth	r3, r3
 800db94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dba0:	801a      	strh	r2, [r3, #0]
 800dba2:	e067      	b.n	800dc74 <USB_EPStartXfer+0xb62>
 800dba4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dba8:	2b3e      	cmp	r3, #62	@ 0x3e
 800dbaa:	d81c      	bhi.n	800dbe6 <USB_EPStartXfer+0xad4>
 800dbac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbb0:	085b      	lsrs	r3, r3, #1
 800dbb2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dbb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbba:	f003 0301 	and.w	r3, r3, #1
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d004      	beq.n	800dbcc <USB_EPStartXfer+0xaba>
 800dbc2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dbcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dbce:	881b      	ldrh	r3, [r3, #0]
 800dbd0:	b29a      	uxth	r2, r3
 800dbd2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	029b      	lsls	r3, r3, #10
 800dbda:	b29b      	uxth	r3, r3
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	b29a      	uxth	r2, r3
 800dbe0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dbe2:	801a      	strh	r2, [r3, #0]
 800dbe4:	e046      	b.n	800dc74 <USB_EPStartXfer+0xb62>
 800dbe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbea:	095b      	lsrs	r3, r3, #5
 800dbec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dbf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbf4:	f003 031f 	and.w	r3, r3, #31
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d104      	bne.n	800dc06 <USB_EPStartXfer+0xaf4>
 800dbfc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800dc00:	3b01      	subs	r3, #1
 800dc02:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dc06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc08:	881b      	ldrh	r3, [r3, #0]
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800dc10:	b29b      	uxth	r3, r3
 800dc12:	029b      	lsls	r3, r3, #10
 800dc14:	b29b      	uxth	r3, r3
 800dc16:	4313      	orrs	r3, r2
 800dc18:	b29b      	uxth	r3, r3
 800dc1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc22:	b29a      	uxth	r2, r3
 800dc24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc26:	801a      	strh	r2, [r3, #0]
 800dc28:	e024      	b.n	800dc74 <USB_EPStartXfer+0xb62>
 800dc2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	785b      	ldrb	r3, [r3, #1]
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d11c      	bne.n	800dc74 <USB_EPStartXfer+0xb62>
 800dc3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dc4e:	4413      	add	r3, r2
 800dc50:	673b      	str	r3, [r7, #112]	@ 0x70
 800dc52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	00da      	lsls	r2, r3, #3
 800dc60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dc62:	4413      	add	r3, r2
 800dc64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dc68:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dc6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc6e:	b29a      	uxth	r2, r3
 800dc70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dc72:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800dc74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	895b      	ldrh	r3, [r3, #10]
 800dc80:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dc84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	6959      	ldr	r1, [r3, #20]
 800dc90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dc9a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dc9e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dca2:	6800      	ldr	r0, [r0, #0]
 800dca4:	f000 ff21 	bl	800eaea <USB_WritePMA>
 800dca8:	e0ca      	b.n	800de40 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dcaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	785b      	ldrb	r3, [r3, #1]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d177      	bne.n	800ddaa <USB_EPStartXfer+0xc98>
 800dcba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dcc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dcda:	4413      	add	r3, r2
 800dcdc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dcde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	00da      	lsls	r2, r3, #3
 800dcec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800dcee:	4413      	add	r3, r2
 800dcf0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dcf4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dcf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dcf8:	881b      	ldrh	r3, [r3, #0]
 800dcfa:	b29b      	uxth	r3, r3
 800dcfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd00:	b29a      	uxth	r2, r3
 800dd02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dd04:	801a      	strh	r2, [r3, #0]
 800dd06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d10a      	bne.n	800dd24 <USB_EPStartXfer+0xc12>
 800dd0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dd10:	881b      	ldrh	r3, [r3, #0]
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd1c:	b29a      	uxth	r2, r3
 800dd1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dd20:	801a      	strh	r2, [r3, #0]
 800dd22:	e073      	b.n	800de0c <USB_EPStartXfer+0xcfa>
 800dd24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd28:	2b3e      	cmp	r3, #62	@ 0x3e
 800dd2a:	d81c      	bhi.n	800dd66 <USB_EPStartXfer+0xc54>
 800dd2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd30:	085b      	lsrs	r3, r3, #1
 800dd32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dd36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd3a:	f003 0301 	and.w	r3, r3, #1
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d004      	beq.n	800dd4c <USB_EPStartXfer+0xc3a>
 800dd42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dd46:	3301      	adds	r3, #1
 800dd48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dd4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dd4e:	881b      	ldrh	r3, [r3, #0]
 800dd50:	b29a      	uxth	r2, r3
 800dd52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	029b      	lsls	r3, r3, #10
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	4313      	orrs	r3, r2
 800dd5e:	b29a      	uxth	r2, r3
 800dd60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dd62:	801a      	strh	r2, [r3, #0]
 800dd64:	e052      	b.n	800de0c <USB_EPStartXfer+0xcfa>
 800dd66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd6a:	095b      	lsrs	r3, r3, #5
 800dd6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dd70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd74:	f003 031f 	and.w	r3, r3, #31
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d104      	bne.n	800dd86 <USB_EPStartXfer+0xc74>
 800dd7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dd80:	3b01      	subs	r3, #1
 800dd82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800dd86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dd88:	881b      	ldrh	r3, [r3, #0]
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	029b      	lsls	r3, r3, #10
 800dd94:	b29b      	uxth	r3, r3
 800dd96:	4313      	orrs	r3, r2
 800dd98:	b29b      	uxth	r3, r3
 800dd9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dda2:	b29a      	uxth	r2, r3
 800dda4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dda6:	801a      	strh	r2, [r3, #0]
 800dda8:	e030      	b.n	800de0c <USB_EPStartXfer+0xcfa>
 800ddaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	785b      	ldrb	r3, [r3, #1]
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d128      	bne.n	800de0c <USB_EPStartXfer+0xcfa>
 800ddba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ddc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	461a      	mov	r2, r3
 800ddda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ddde:	4413      	add	r3, r2
 800dde0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800dde4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dde8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	00da      	lsls	r2, r3, #3
 800ddf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ddf6:	4413      	add	r3, r2
 800ddf8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ddfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800de00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de04:	b29a      	uxth	r2, r3
 800de06:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800de0a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800de0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	891b      	ldrh	r3, [r3, #8]
 800de18:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800de1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	6959      	ldr	r1, [r3, #20]
 800de28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800de32:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800de36:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800de3a:	6800      	ldr	r0, [r0, #0]
 800de3c:	f000 fe55 	bl	800eaea <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800de40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de44:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de48:	681a      	ldr	r2, [r3, #0]
 800de4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	4413      	add	r3, r2
 800de5a:	881b      	ldrh	r3, [r3, #0]
 800de5c:	b29b      	uxth	r3, r3
 800de5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800de62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800de66:	817b      	strh	r3, [r7, #10]
 800de68:	897b      	ldrh	r3, [r7, #10]
 800de6a:	f083 0310 	eor.w	r3, r3, #16
 800de6e:	817b      	strh	r3, [r7, #10]
 800de70:	897b      	ldrh	r3, [r7, #10]
 800de72:	f083 0320 	eor.w	r3, r3, #32
 800de76:	817b      	strh	r3, [r7, #10]
 800de78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de80:	681a      	ldr	r2, [r3, #0]
 800de82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	441a      	add	r2, r3
 800de92:	897b      	ldrh	r3, [r7, #10]
 800de94:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de98:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dea4:	b29b      	uxth	r3, r3
 800dea6:	8013      	strh	r3, [r2, #0]
 800dea8:	f000 bcdf 	b.w	800e86a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800deac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	7b1b      	ldrb	r3, [r3, #12]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	f040 80bc 	bne.w	800e036 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800debe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dec2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	699a      	ldr	r2, [r3, #24]
 800deca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	691b      	ldr	r3, [r3, #16]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d917      	bls.n	800df0a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800deda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	691b      	ldr	r3, [r3, #16]
 800dee6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800deea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	699a      	ldr	r2, [r3, #24]
 800def6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800defa:	1ad2      	subs	r2, r2, r3
 800defc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	619a      	str	r2, [r3, #24]
 800df08:	e00e      	b.n	800df28 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800df0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	699b      	ldr	r3, [r3, #24]
 800df16:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800df1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	2200      	movs	r2, #0
 800df26:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800df28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800df36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800df44:	b29b      	uxth	r3, r3
 800df46:	461a      	mov	r2, r3
 800df48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800df4c:	4413      	add	r3, r2
 800df4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800df52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	781b      	ldrb	r3, [r3, #0]
 800df5e:	00da      	lsls	r2, r3, #3
 800df60:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800df64:	4413      	add	r3, r2
 800df66:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800df6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800df6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df72:	881b      	ldrh	r3, [r3, #0]
 800df74:	b29b      	uxth	r3, r3
 800df76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df80:	801a      	strh	r2, [r3, #0]
 800df82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df86:	2b00      	cmp	r3, #0
 800df88:	d10d      	bne.n	800dfa6 <USB_EPStartXfer+0xe94>
 800df8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800df8e:	881b      	ldrh	r3, [r3, #0]
 800df90:	b29b      	uxth	r3, r3
 800df92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df9a:	b29a      	uxth	r2, r3
 800df9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dfa0:	801a      	strh	r2, [r3, #0]
 800dfa2:	f000 bc28 	b.w	800e7f6 <USB_EPStartXfer+0x16e4>
 800dfa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfaa:	2b3e      	cmp	r3, #62	@ 0x3e
 800dfac:	d81f      	bhi.n	800dfee <USB_EPStartXfer+0xedc>
 800dfae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfb2:	085b      	lsrs	r3, r3, #1
 800dfb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dfb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfbc:	f003 0301 	and.w	r3, r3, #1
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d004      	beq.n	800dfce <USB_EPStartXfer+0xebc>
 800dfc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800dfc8:	3301      	adds	r3, #1
 800dfca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dfce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dfd2:	881b      	ldrh	r3, [r3, #0]
 800dfd4:	b29a      	uxth	r2, r3
 800dfd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	029b      	lsls	r3, r3, #10
 800dfde:	b29b      	uxth	r3, r3
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	b29a      	uxth	r2, r3
 800dfe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800dfe8:	801a      	strh	r2, [r3, #0]
 800dfea:	f000 bc04 	b.w	800e7f6 <USB_EPStartXfer+0x16e4>
 800dfee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dff2:	095b      	lsrs	r3, r3, #5
 800dff4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800dff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dffc:	f003 031f 	and.w	r3, r3, #31
 800e000:	2b00      	cmp	r3, #0
 800e002:	d104      	bne.n	800e00e <USB_EPStartXfer+0xefc>
 800e004:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e008:	3b01      	subs	r3, #1
 800e00a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e00e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e012:	881b      	ldrh	r3, [r3, #0]
 800e014:	b29a      	uxth	r2, r3
 800e016:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	029b      	lsls	r3, r3, #10
 800e01e:	b29b      	uxth	r3, r3
 800e020:	4313      	orrs	r3, r2
 800e022:	b29b      	uxth	r3, r3
 800e024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e032:	801a      	strh	r2, [r3, #0]
 800e034:	e3df      	b.n	800e7f6 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e03a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	78db      	ldrb	r3, [r3, #3]
 800e042:	2b02      	cmp	r3, #2
 800e044:	f040 8218 	bne.w	800e478 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e04c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	785b      	ldrb	r3, [r3, #1]
 800e054:	2b00      	cmp	r3, #0
 800e056:	f040 809d 	bne.w	800e194 <USB_EPStartXfer+0x1082>
 800e05a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e05e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e06c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e076:	b29b      	uxth	r3, r3
 800e078:	461a      	mov	r2, r3
 800e07a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e07e:	4413      	add	r3, r2
 800e080:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	00da      	lsls	r2, r3, #3
 800e092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e096:	4413      	add	r3, r2
 800e098:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e09c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e0a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e0a4:	881b      	ldrh	r3, [r3, #0]
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e0ac:	b29a      	uxth	r2, r3
 800e0ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e0b2:	801a      	strh	r2, [r3, #0]
 800e0b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	691b      	ldr	r3, [r3, #16]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d10c      	bne.n	800e0de <USB_EPStartXfer+0xfcc>
 800e0c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e0c8:	881b      	ldrh	r3, [r3, #0]
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e0da:	801a      	strh	r2, [r3, #0]
 800e0dc:	e08f      	b.n	800e1fe <USB_EPStartXfer+0x10ec>
 800e0de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	691b      	ldr	r3, [r3, #16]
 800e0ea:	2b3e      	cmp	r3, #62	@ 0x3e
 800e0ec:	d826      	bhi.n	800e13c <USB_EPStartXfer+0x102a>
 800e0ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e0f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	691b      	ldr	r3, [r3, #16]
 800e0fa:	085b      	lsrs	r3, r3, #1
 800e0fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e100:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e104:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	691b      	ldr	r3, [r3, #16]
 800e10c:	f003 0301 	and.w	r3, r3, #1
 800e110:	2b00      	cmp	r3, #0
 800e112:	d004      	beq.n	800e11e <USB_EPStartXfer+0x100c>
 800e114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e118:	3301      	adds	r3, #1
 800e11a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e11e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e122:	881b      	ldrh	r3, [r3, #0]
 800e124:	b29a      	uxth	r2, r3
 800e126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	029b      	lsls	r3, r3, #10
 800e12e:	b29b      	uxth	r3, r3
 800e130:	4313      	orrs	r3, r2
 800e132:	b29a      	uxth	r2, r3
 800e134:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e138:	801a      	strh	r2, [r3, #0]
 800e13a:	e060      	b.n	800e1fe <USB_EPStartXfer+0x10ec>
 800e13c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	691b      	ldr	r3, [r3, #16]
 800e148:	095b      	lsrs	r3, r3, #5
 800e14a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e14e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e152:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	691b      	ldr	r3, [r3, #16]
 800e15a:	f003 031f 	and.w	r3, r3, #31
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d104      	bne.n	800e16c <USB_EPStartXfer+0x105a>
 800e162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e166:	3b01      	subs	r3, #1
 800e168:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e16c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e170:	881b      	ldrh	r3, [r3, #0]
 800e172:	b29a      	uxth	r2, r3
 800e174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e178:	b29b      	uxth	r3, r3
 800e17a:	029b      	lsls	r3, r3, #10
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	4313      	orrs	r3, r2
 800e180:	b29b      	uxth	r3, r3
 800e182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e18a:	b29a      	uxth	r2, r3
 800e18c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e190:	801a      	strh	r2, [r3, #0]
 800e192:	e034      	b.n	800e1fe <USB_EPStartXfer+0x10ec>
 800e194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	785b      	ldrb	r3, [r3, #1]
 800e1a0:	2b01      	cmp	r3, #1
 800e1a2:	d12c      	bne.n	800e1fe <USB_EPStartXfer+0x10ec>
 800e1a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e1b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e1c8:	4413      	add	r3, r2
 800e1ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e1ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	00da      	lsls	r2, r3, #3
 800e1dc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e1e0:	4413      	add	r3, r2
 800e1e2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e1e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e1ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	691b      	ldr	r3, [r3, #16]
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e1fc:	801a      	strh	r2, [r3, #0]
 800e1fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e202:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e20c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	785b      	ldrb	r3, [r3, #1]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	f040 809d 	bne.w	800e358 <USB_EPStartXfer+0x1246>
 800e21e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e222:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e22c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e230:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e23a:	b29b      	uxth	r3, r3
 800e23c:	461a      	mov	r2, r3
 800e23e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e242:	4413      	add	r3, r2
 800e244:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e24c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	781b      	ldrb	r3, [r3, #0]
 800e254:	00da      	lsls	r2, r3, #3
 800e256:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e25a:	4413      	add	r3, r2
 800e25c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e260:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e264:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e268:	881b      	ldrh	r3, [r3, #0]
 800e26a:	b29b      	uxth	r3, r3
 800e26c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e270:	b29a      	uxth	r2, r3
 800e272:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e276:	801a      	strh	r2, [r3, #0]
 800e278:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e27c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	691b      	ldr	r3, [r3, #16]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d10c      	bne.n	800e2a2 <USB_EPStartXfer+0x1190>
 800e288:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e28c:	881b      	ldrh	r3, [r3, #0]
 800e28e:	b29b      	uxth	r3, r3
 800e290:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e294:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e298:	b29a      	uxth	r2, r3
 800e29a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e29e:	801a      	strh	r2, [r3, #0]
 800e2a0:	e088      	b.n	800e3b4 <USB_EPStartXfer+0x12a2>
 800e2a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	691b      	ldr	r3, [r3, #16]
 800e2ae:	2b3e      	cmp	r3, #62	@ 0x3e
 800e2b0:	d826      	bhi.n	800e300 <USB_EPStartXfer+0x11ee>
 800e2b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	691b      	ldr	r3, [r3, #16]
 800e2be:	085b      	lsrs	r3, r3, #1
 800e2c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e2c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	691b      	ldr	r3, [r3, #16]
 800e2d0:	f003 0301 	and.w	r3, r3, #1
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d004      	beq.n	800e2e2 <USB_EPStartXfer+0x11d0>
 800e2d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2dc:	3301      	adds	r3, #1
 800e2de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e2e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e2e6:	881b      	ldrh	r3, [r3, #0]
 800e2e8:	b29a      	uxth	r2, r3
 800e2ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	029b      	lsls	r3, r3, #10
 800e2f2:	b29b      	uxth	r3, r3
 800e2f4:	4313      	orrs	r3, r2
 800e2f6:	b29a      	uxth	r2, r3
 800e2f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e2fc:	801a      	strh	r2, [r3, #0]
 800e2fe:	e059      	b.n	800e3b4 <USB_EPStartXfer+0x12a2>
 800e300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	691b      	ldr	r3, [r3, #16]
 800e30c:	095b      	lsrs	r3, r3, #5
 800e30e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	691b      	ldr	r3, [r3, #16]
 800e31e:	f003 031f 	and.w	r3, r3, #31
 800e322:	2b00      	cmp	r3, #0
 800e324:	d104      	bne.n	800e330 <USB_EPStartXfer+0x121e>
 800e326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e32a:	3b01      	subs	r3, #1
 800e32c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e330:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e334:	881b      	ldrh	r3, [r3, #0]
 800e336:	b29a      	uxth	r2, r3
 800e338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	029b      	lsls	r3, r3, #10
 800e340:	b29b      	uxth	r3, r3
 800e342:	4313      	orrs	r3, r2
 800e344:	b29b      	uxth	r3, r3
 800e346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e34a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e34e:	b29a      	uxth	r2, r3
 800e350:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e354:	801a      	strh	r2, [r3, #0]
 800e356:	e02d      	b.n	800e3b4 <USB_EPStartXfer+0x12a2>
 800e358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e35c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	785b      	ldrb	r3, [r3, #1]
 800e364:	2b01      	cmp	r3, #1
 800e366:	d125      	bne.n	800e3b4 <USB_EPStartXfer+0x12a2>
 800e368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e36c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e376:	b29b      	uxth	r3, r3
 800e378:	461a      	mov	r2, r3
 800e37a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e37e:	4413      	add	r3, r2
 800e380:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	00da      	lsls	r2, r3, #3
 800e392:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e396:	4413      	add	r3, r2
 800e398:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e39c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e3a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	691b      	ldr	r3, [r3, #16]
 800e3ac:	b29a      	uxth	r2, r3
 800e3ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e3b2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e3b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	69db      	ldr	r3, [r3, #28]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	f000 8218 	beq.w	800e7f6 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e3c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e3ce:	681a      	ldr	r2, [r3, #0]
 800e3d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	781b      	ldrb	r3, [r3, #0]
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	4413      	add	r3, r2
 800e3e0:	881b      	ldrh	r3, [r3, #0]
 800e3e2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e3e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e3ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d005      	beq.n	800e3fe <USB_EPStartXfer+0x12ec>
 800e3f2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e3f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d10d      	bne.n	800e41a <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e3fe:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e402:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e406:	2b00      	cmp	r3, #0
 800e408:	f040 81f5 	bne.w	800e7f6 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e40c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e414:	2b00      	cmp	r3, #0
 800e416:	f040 81ee 	bne.w	800e7f6 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e41a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e41e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e422:	681a      	ldr	r2, [r3, #0]
 800e424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	009b      	lsls	r3, r3, #2
 800e432:	4413      	add	r3, r2
 800e434:	881b      	ldrh	r3, [r3, #0]
 800e436:	b29b      	uxth	r3, r3
 800e438:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e43c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e440:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800e444:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e448:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e44c:	681a      	ldr	r2, [r3, #0]
 800e44e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	009b      	lsls	r3, r3, #2
 800e45c:	441a      	add	r2, r3
 800e45e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e462:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e466:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e46a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e46e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e472:	b29b      	uxth	r3, r3
 800e474:	8013      	strh	r3, [r2, #0]
 800e476:	e1be      	b.n	800e7f6 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e478:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e47c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	78db      	ldrb	r3, [r3, #3]
 800e484:	2b01      	cmp	r3, #1
 800e486:	f040 81b4 	bne.w	800e7f2 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e48a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e48e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	699a      	ldr	r2, [r3, #24]
 800e496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e49a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	691b      	ldr	r3, [r3, #16]
 800e4a2:	429a      	cmp	r2, r3
 800e4a4:	d917      	bls.n	800e4d6 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800e4a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	691b      	ldr	r3, [r3, #16]
 800e4b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800e4b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	699a      	ldr	r2, [r3, #24]
 800e4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4c6:	1ad2      	subs	r2, r2, r3
 800e4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	619a      	str	r2, [r3, #24]
 800e4d4:	e00e      	b.n	800e4f4 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800e4d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	699b      	ldr	r3, [r3, #24]
 800e4e2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800e4e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e4f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	785b      	ldrb	r3, [r3, #1]
 800e500:	2b00      	cmp	r3, #0
 800e502:	f040 8085 	bne.w	800e610 <USB_EPStartXfer+0x14fe>
 800e506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e50a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e514:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e518:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e522:	b29b      	uxth	r3, r3
 800e524:	461a      	mov	r2, r3
 800e526:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e52a:	4413      	add	r3, r2
 800e52c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	781b      	ldrb	r3, [r3, #0]
 800e53c:	00da      	lsls	r2, r3, #3
 800e53e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e542:	4413      	add	r3, r2
 800e544:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e548:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e54c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e550:	881b      	ldrh	r3, [r3, #0]
 800e552:	b29b      	uxth	r3, r3
 800e554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e558:	b29a      	uxth	r2, r3
 800e55a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e55e:	801a      	strh	r2, [r3, #0]
 800e560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e564:	2b00      	cmp	r3, #0
 800e566:	d10c      	bne.n	800e582 <USB_EPStartXfer+0x1470>
 800e568:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e56c:	881b      	ldrh	r3, [r3, #0]
 800e56e:	b29b      	uxth	r3, r3
 800e570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e578:	b29a      	uxth	r2, r3
 800e57a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e57e:	801a      	strh	r2, [r3, #0]
 800e580:	e077      	b.n	800e672 <USB_EPStartXfer+0x1560>
 800e582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e586:	2b3e      	cmp	r3, #62	@ 0x3e
 800e588:	d81e      	bhi.n	800e5c8 <USB_EPStartXfer+0x14b6>
 800e58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e58e:	085b      	lsrs	r3, r3, #1
 800e590:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e598:	f003 0301 	and.w	r3, r3, #1
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d004      	beq.n	800e5aa <USB_EPStartXfer+0x1498>
 800e5a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e5a4:	3301      	adds	r3, #1
 800e5a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e5aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e5ae:	881b      	ldrh	r3, [r3, #0]
 800e5b0:	b29a      	uxth	r2, r3
 800e5b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	029b      	lsls	r3, r3, #10
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	b29a      	uxth	r2, r3
 800e5c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e5c4:	801a      	strh	r2, [r3, #0]
 800e5c6:	e054      	b.n	800e672 <USB_EPStartXfer+0x1560>
 800e5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5cc:	095b      	lsrs	r3, r3, #5
 800e5ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5d6:	f003 031f 	and.w	r3, r3, #31
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d104      	bne.n	800e5e8 <USB_EPStartXfer+0x14d6>
 800e5de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e5e2:	3b01      	subs	r3, #1
 800e5e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e5e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e5ec:	881b      	ldrh	r3, [r3, #0]
 800e5ee:	b29a      	uxth	r2, r3
 800e5f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	029b      	lsls	r3, r3, #10
 800e5f8:	b29b      	uxth	r3, r3
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e606:	b29a      	uxth	r2, r3
 800e608:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e60c:	801a      	strh	r2, [r3, #0]
 800e60e:	e030      	b.n	800e672 <USB_EPStartXfer+0x1560>
 800e610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	785b      	ldrb	r3, [r3, #1]
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d128      	bne.n	800e672 <USB_EPStartXfer+0x1560>
 800e620:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e624:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e62e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e632:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e63c:	b29b      	uxth	r3, r3
 800e63e:	461a      	mov	r2, r3
 800e640:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e644:	4413      	add	r3, r2
 800e646:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e64a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e64e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	00da      	lsls	r2, r3, #3
 800e658:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e65c:	4413      	add	r3, r2
 800e65e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e662:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e670:	801a      	strh	r2, [r3, #0]
 800e672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	785b      	ldrb	r3, [r3, #1]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f040 8085 	bne.w	800e79c <USB_EPStartXfer+0x168a>
 800e692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e696:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e6a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e6ae:	b29b      	uxth	r3, r3
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e6b6:	4413      	add	r3, r2
 800e6b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e6bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	00da      	lsls	r2, r3, #3
 800e6ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e6ce:	4413      	add	r3, r2
 800e6d0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e6d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e6d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e6dc:	881b      	ldrh	r3, [r3, #0]
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e6ea:	801a      	strh	r2, [r3, #0]
 800e6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d10c      	bne.n	800e70e <USB_EPStartXfer+0x15fc>
 800e6f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e6f8:	881b      	ldrh	r3, [r3, #0]
 800e6fa:	b29b      	uxth	r3, r3
 800e6fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e704:	b29a      	uxth	r2, r3
 800e706:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e70a:	801a      	strh	r2, [r3, #0]
 800e70c:	e073      	b.n	800e7f6 <USB_EPStartXfer+0x16e4>
 800e70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e712:	2b3e      	cmp	r3, #62	@ 0x3e
 800e714:	d81e      	bhi.n	800e754 <USB_EPStartXfer+0x1642>
 800e716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e71a:	085b      	lsrs	r3, r3, #1
 800e71c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e724:	f003 0301 	and.w	r3, r3, #1
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d004      	beq.n	800e736 <USB_EPStartXfer+0x1624>
 800e72c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e730:	3301      	adds	r3, #1
 800e732:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e73a:	881b      	ldrh	r3, [r3, #0]
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e742:	b29b      	uxth	r3, r3
 800e744:	029b      	lsls	r3, r3, #10
 800e746:	b29b      	uxth	r3, r3
 800e748:	4313      	orrs	r3, r2
 800e74a:	b29a      	uxth	r2, r3
 800e74c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e750:	801a      	strh	r2, [r3, #0]
 800e752:	e050      	b.n	800e7f6 <USB_EPStartXfer+0x16e4>
 800e754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e758:	095b      	lsrs	r3, r3, #5
 800e75a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e762:	f003 031f 	and.w	r3, r3, #31
 800e766:	2b00      	cmp	r3, #0
 800e768:	d104      	bne.n	800e774 <USB_EPStartXfer+0x1662>
 800e76a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e76e:	3b01      	subs	r3, #1
 800e770:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e774:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e778:	881b      	ldrh	r3, [r3, #0]
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e780:	b29b      	uxth	r3, r3
 800e782:	029b      	lsls	r3, r3, #10
 800e784:	b29b      	uxth	r3, r3
 800e786:	4313      	orrs	r3, r2
 800e788:	b29b      	uxth	r3, r3
 800e78a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e78e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e792:	b29a      	uxth	r2, r3
 800e794:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e798:	801a      	strh	r2, [r3, #0]
 800e79a:	e02c      	b.n	800e7f6 <USB_EPStartXfer+0x16e4>
 800e79c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	785b      	ldrb	r3, [r3, #1]
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d124      	bne.n	800e7f6 <USB_EPStartXfer+0x16e4>
 800e7ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	461a      	mov	r2, r3
 800e7be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e7c2:	4413      	add	r3, r2
 800e7c4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e7c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	781b      	ldrb	r3, [r3, #0]
 800e7d4:	00da      	lsls	r2, r3, #3
 800e7d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e7da:	4413      	add	r3, r2
 800e7dc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e7e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e7e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7e8:	b29a      	uxth	r2, r3
 800e7ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e7ee:	801a      	strh	r2, [r3, #0]
 800e7f0:	e001      	b.n	800e7f6 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e03a      	b.n	800e86c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e7f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e804:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	009b      	lsls	r3, r3, #2
 800e80e:	4413      	add	r3, r2
 800e810:	881b      	ldrh	r3, [r3, #0]
 800e812:	b29b      	uxth	r3, r3
 800e814:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e81c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e820:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e824:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e828:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e82c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e830:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e834:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e83c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e840:	681a      	ldr	r2, [r3, #0]
 800e842:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e846:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	781b      	ldrb	r3, [r3, #0]
 800e84e:	009b      	lsls	r3, r3, #2
 800e850:	441a      	add	r2, r3
 800e852:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e85a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e85e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e866:	b29b      	uxth	r3, r3
 800e868:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e86a:	2300      	movs	r3, #0
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e876:	b480      	push	{r7}
 800e878:	b085      	sub	sp, #20
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
 800e87e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	785b      	ldrb	r3, [r3, #1]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d020      	beq.n	800e8ca <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e888:	687a      	ldr	r2, [r7, #4]
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	009b      	lsls	r3, r3, #2
 800e890:	4413      	add	r3, r2
 800e892:	881b      	ldrh	r3, [r3, #0]
 800e894:	b29b      	uxth	r3, r3
 800e896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e89a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e89e:	81bb      	strh	r3, [r7, #12]
 800e8a0:	89bb      	ldrh	r3, [r7, #12]
 800e8a2:	f083 0310 	eor.w	r3, r3, #16
 800e8a6:	81bb      	strh	r3, [r7, #12]
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	441a      	add	r2, r3
 800e8b2:	89bb      	ldrh	r3, [r7, #12]
 800e8b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e8c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e8c4:	b29b      	uxth	r3, r3
 800e8c6:	8013      	strh	r3, [r2, #0]
 800e8c8:	e01f      	b.n	800e90a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	781b      	ldrb	r3, [r3, #0]
 800e8d0:	009b      	lsls	r3, r3, #2
 800e8d2:	4413      	add	r3, r2
 800e8d4:	881b      	ldrh	r3, [r3, #0]
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e8dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e8e0:	81fb      	strh	r3, [r7, #14]
 800e8e2:	89fb      	ldrh	r3, [r7, #14]
 800e8e4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e8e8:	81fb      	strh	r3, [r7, #14]
 800e8ea:	687a      	ldr	r2, [r7, #4]
 800e8ec:	683b      	ldr	r3, [r7, #0]
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	009b      	lsls	r3, r3, #2
 800e8f2:	441a      	add	r2, r3
 800e8f4:	89fb      	ldrh	r3, [r7, #14]
 800e8f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e8fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e8fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e902:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e906:	b29b      	uxth	r3, r3
 800e908:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3714      	adds	r7, #20
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr

0800e918 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e918:	b480      	push	{r7}
 800e91a:	b087      	sub	sp, #28
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	6078      	str	r0, [r7, #4]
 800e920:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e922:	683b      	ldr	r3, [r7, #0]
 800e924:	7b1b      	ldrb	r3, [r3, #12]
 800e926:	2b00      	cmp	r3, #0
 800e928:	f040 809d 	bne.w	800ea66 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	785b      	ldrb	r3, [r3, #1]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d04c      	beq.n	800e9ce <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	009b      	lsls	r3, r3, #2
 800e93c:	4413      	add	r3, r2
 800e93e:	881b      	ldrh	r3, [r3, #0]
 800e940:	823b      	strh	r3, [r7, #16]
 800e942:	8a3b      	ldrh	r3, [r7, #16]
 800e944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d01b      	beq.n	800e984 <USB_EPClearStall+0x6c>
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	009b      	lsls	r3, r3, #2
 800e954:	4413      	add	r3, r2
 800e956:	881b      	ldrh	r3, [r3, #0]
 800e958:	b29b      	uxth	r3, r3
 800e95a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e95e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e962:	81fb      	strh	r3, [r7, #14]
 800e964:	687a      	ldr	r2, [r7, #4]
 800e966:	683b      	ldr	r3, [r7, #0]
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	009b      	lsls	r3, r3, #2
 800e96c:	441a      	add	r2, r3
 800e96e:	89fb      	ldrh	r3, [r7, #14]
 800e970:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e974:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e978:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e97c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e980:	b29b      	uxth	r3, r3
 800e982:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	78db      	ldrb	r3, [r3, #3]
 800e988:	2b01      	cmp	r3, #1
 800e98a:	d06c      	beq.n	800ea66 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e98c:	687a      	ldr	r2, [r7, #4]
 800e98e:	683b      	ldr	r3, [r7, #0]
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	009b      	lsls	r3, r3, #2
 800e994:	4413      	add	r3, r2
 800e996:	881b      	ldrh	r3, [r3, #0]
 800e998:	b29b      	uxth	r3, r3
 800e99a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e99e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e9a2:	81bb      	strh	r3, [r7, #12]
 800e9a4:	89bb      	ldrh	r3, [r7, #12]
 800e9a6:	f083 0320 	eor.w	r3, r3, #32
 800e9aa:	81bb      	strh	r3, [r7, #12]
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	683b      	ldr	r3, [r7, #0]
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	009b      	lsls	r3, r3, #2
 800e9b4:	441a      	add	r2, r3
 800e9b6:	89bb      	ldrh	r3, [r7, #12]
 800e9b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e9bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e9c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	8013      	strh	r3, [r2, #0]
 800e9cc:	e04b      	b.n	800ea66 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	781b      	ldrb	r3, [r3, #0]
 800e9d4:	009b      	lsls	r3, r3, #2
 800e9d6:	4413      	add	r3, r2
 800e9d8:	881b      	ldrh	r3, [r3, #0]
 800e9da:	82fb      	strh	r3, [r7, #22]
 800e9dc:	8afb      	ldrh	r3, [r7, #22]
 800e9de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d01b      	beq.n	800ea1e <USB_EPClearStall+0x106>
 800e9e6:	687a      	ldr	r2, [r7, #4]
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	009b      	lsls	r3, r3, #2
 800e9ee:	4413      	add	r3, r2
 800e9f0:	881b      	ldrh	r3, [r3, #0]
 800e9f2:	b29b      	uxth	r3, r3
 800e9f4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e9f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e9fc:	82bb      	strh	r3, [r7, #20]
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	683b      	ldr	r3, [r7, #0]
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	009b      	lsls	r3, r3, #2
 800ea06:	441a      	add	r2, r3
 800ea08:	8abb      	ldrh	r3, [r7, #20]
 800ea0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ea16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea1a:	b29b      	uxth	r3, r3
 800ea1c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ea1e:	687a      	ldr	r2, [r7, #4]
 800ea20:	683b      	ldr	r3, [r7, #0]
 800ea22:	781b      	ldrb	r3, [r3, #0]
 800ea24:	009b      	lsls	r3, r3, #2
 800ea26:	4413      	add	r3, r2
 800ea28:	881b      	ldrh	r3, [r3, #0]
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ea30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea34:	827b      	strh	r3, [r7, #18]
 800ea36:	8a7b      	ldrh	r3, [r7, #18]
 800ea38:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ea3c:	827b      	strh	r3, [r7, #18]
 800ea3e:	8a7b      	ldrh	r3, [r7, #18]
 800ea40:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ea44:	827b      	strh	r3, [r7, #18]
 800ea46:	687a      	ldr	r2, [r7, #4]
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	781b      	ldrb	r3, [r3, #0]
 800ea4c:	009b      	lsls	r3, r3, #2
 800ea4e:	441a      	add	r2, r3
 800ea50:	8a7b      	ldrh	r3, [r7, #18]
 800ea52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ea66:	2300      	movs	r3, #0
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	371c      	adds	r7, #28
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea72:	4770      	bx	lr

0800ea74 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ea80:	78fb      	ldrb	r3, [r7, #3]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d103      	bne.n	800ea8e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2280      	movs	r2, #128	@ 0x80
 800ea8a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800ea8e:	2300      	movs	r3, #0
}
 800ea90:	4618      	mov	r0, r3
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr

0800ea9c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800eaaa:	b29b      	uxth	r3, r3
 800eaac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eab4:	b29a      	uxth	r2, r3
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800eabc:	2300      	movs	r3, #0
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	370c      	adds	r7, #12
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr

0800eaca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800eaca:	b480      	push	{r7}
 800eacc:	b085      	sub	sp, #20
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ead8:	b29b      	uxth	r3, r3
 800eada:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800eadc:	68fb      	ldr	r3, [r7, #12]
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3714      	adds	r7, #20
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr

0800eaea <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800eaea:	b480      	push	{r7}
 800eaec:	b08b      	sub	sp, #44	@ 0x2c
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	60f8      	str	r0, [r7, #12]
 800eaf2:	60b9      	str	r1, [r7, #8]
 800eaf4:	4611      	mov	r1, r2
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	460b      	mov	r3, r1
 800eafa:	80fb      	strh	r3, [r7, #6]
 800eafc:	4613      	mov	r3, r2
 800eafe:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800eb00:	88bb      	ldrh	r3, [r7, #4]
 800eb02:	3301      	adds	r3, #1
 800eb04:	085b      	lsrs	r3, r3, #1
 800eb06:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800eb10:	88fa      	ldrh	r2, [r7, #6]
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	4413      	add	r3, r2
 800eb16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eb1a:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800eb1c:	69bb      	ldr	r3, [r7, #24]
 800eb1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb20:	e01b      	b.n	800eb5a <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	3301      	adds	r3, #1
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	021b      	lsls	r3, r3, #8
 800eb30:	b21a      	sxth	r2, r3
 800eb32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb36:	4313      	orrs	r3, r2
 800eb38:	b21b      	sxth	r3, r3
 800eb3a:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800eb3c:	6a3b      	ldr	r3, [r7, #32]
 800eb3e:	8a7a      	ldrh	r2, [r7, #18]
 800eb40:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800eb42:	6a3b      	ldr	r3, [r7, #32]
 800eb44:	3302      	adds	r3, #2
 800eb46:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800eb48:	69fb      	ldr	r3, [r7, #28]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800eb4e:	69fb      	ldr	r3, [r7, #28]
 800eb50:	3301      	adds	r3, #1
 800eb52:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800eb54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb56:	3b01      	subs	r3, #1
 800eb58:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d1e0      	bne.n	800eb22 <USB_WritePMA+0x38>
  }
}
 800eb60:	bf00      	nop
 800eb62:	bf00      	nop
 800eb64:	372c      	adds	r7, #44	@ 0x2c
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr

0800eb6e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800eb6e:	b480      	push	{r7}
 800eb70:	b08b      	sub	sp, #44	@ 0x2c
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	60f8      	str	r0, [r7, #12]
 800eb76:	60b9      	str	r1, [r7, #8]
 800eb78:	4611      	mov	r1, r2
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	80fb      	strh	r3, [r7, #6]
 800eb80:	4613      	mov	r3, r2
 800eb82:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800eb84:	88bb      	ldrh	r3, [r7, #4]
 800eb86:	085b      	lsrs	r3, r3, #1
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800eb94:	88fa      	ldrh	r2, [r7, #6]
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	4413      	add	r3, r2
 800eb9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800eb9e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	627b      	str	r3, [r7, #36]	@ 0x24
 800eba4:	e018      	b.n	800ebd8 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800eba6:	6a3b      	ldr	r3, [r7, #32]
 800eba8:	881b      	ldrh	r3, [r3, #0]
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ebae:	6a3b      	ldr	r3, [r7, #32]
 800ebb0:	3302      	adds	r3, #2
 800ebb2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	b2da      	uxtb	r2, r3
 800ebb8:	69fb      	ldr	r3, [r7, #28]
 800ebba:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ebbc:	69fb      	ldr	r3, [r7, #28]
 800ebbe:	3301      	adds	r3, #1
 800ebc0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	0a1b      	lsrs	r3, r3, #8
 800ebc6:	b2da      	uxtb	r2, r3
 800ebc8:	69fb      	ldr	r3, [r7, #28]
 800ebca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ebcc:	69fb      	ldr	r3, [r7, #28]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ebd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d1e3      	bne.n	800eba6 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ebde:	88bb      	ldrh	r3, [r7, #4]
 800ebe0:	f003 0301 	and.w	r3, r3, #1
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d007      	beq.n	800ebfa <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ebea:	6a3b      	ldr	r3, [r7, #32]
 800ebec:	881b      	ldrh	r3, [r3, #0]
 800ebee:	b29b      	uxth	r3, r3
 800ebf0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	b2da      	uxtb	r2, r3
 800ebf6:	69fb      	ldr	r3, [r7, #28]
 800ebf8:	701a      	strb	r2, [r3, #0]
  }
}
 800ebfa:	bf00      	nop
 800ebfc:	372c      	adds	r7, #44	@ 0x2c
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec04:	4770      	bx	lr

0800ec06 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b084      	sub	sp, #16
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
 800ec0e:	460b      	mov	r3, r1
 800ec10:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ec12:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ec16:	f002 f90f 	bl	8010e38 <USBD_static_malloc>
 800ec1a:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d105      	bne.n	800ec2e <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2200      	movs	r2, #0
 800ec26:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800ec2a:	2302      	movs	r3, #2
 800ec2c:	e066      	b.n	800ecfc <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	7c1b      	ldrb	r3, [r3, #16]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d119      	bne.n	800ec72 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ec3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec42:	2202      	movs	r2, #2
 800ec44:	2181      	movs	r1, #129	@ 0x81
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f001 ff9d 	bl	8010b86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2201      	movs	r2, #1
 800ec50:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ec52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ec56:	2202      	movs	r2, #2
 800ec58:	2101      	movs	r1, #1
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f001 ff93 	bl	8010b86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2201      	movs	r2, #1
 800ec64:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	2210      	movs	r2, #16
 800ec6c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800ec70:	e016      	b.n	800eca0 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ec72:	2340      	movs	r3, #64	@ 0x40
 800ec74:	2202      	movs	r2, #2
 800ec76:	2181      	movs	r1, #129	@ 0x81
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f001 ff84 	bl	8010b86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2201      	movs	r2, #1
 800ec82:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ec84:	2340      	movs	r3, #64	@ 0x40
 800ec86:	2202      	movs	r2, #2
 800ec88:	2101      	movs	r1, #1
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f001 ff7b 	bl	8010b86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2201      	movs	r2, #1
 800ec94:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2210      	movs	r2, #16
 800ec9c:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800eca0:	2308      	movs	r3, #8
 800eca2:	2203      	movs	r2, #3
 800eca4:	2182      	movs	r1, #130	@ 0x82
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f001 ff6d 	bl	8010b86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2201      	movs	r2, #1
 800ecb0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	7c1b      	ldrb	r3, [r3, #16]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d109      	bne.n	800ecea <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ecdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ece0:	2101      	movs	r1, #1
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f002 f83e 	bl	8010d64 <USBD_LL_PrepareReceive>
 800ece8:	e007      	b.n	800ecfa <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ecf0:	2340      	movs	r3, #64	@ 0x40
 800ecf2:	2101      	movs	r1, #1
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f002 f835 	bl	8010d64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ecfa:	2300      	movs	r3, #0
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3710      	adds	r7, #16
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ed10:	2181      	movs	r1, #129	@ 0x81
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f001 ff5d 	bl	8010bd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ed1e:	2101      	movs	r1, #1
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f001 ff56 	bl	8010bd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ed2e:	2182      	movs	r1, #130	@ 0x82
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f001 ff4e 	bl	8010bd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2200      	movs	r2, #0
 800ed42:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d00e      	beq.n	800ed6e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ed56:	685b      	ldr	r3, [r3, #4]
 800ed58:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ed60:	4618      	mov	r0, r3
 800ed62:	f002 f877 	bl	8010e54 <USBD_static_free>
    pdev->pClassData = NULL;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ed6e:	2300      	movs	r3, #0
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3708      	adds	r7, #8
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b086      	sub	sp, #24
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ed88:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed92:	2300      	movs	r3, #0
 800ed94:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d101      	bne.n	800eda0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ed9c:	2303      	movs	r3, #3
 800ed9e:	e0af      	b.n	800ef00 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	781b      	ldrb	r3, [r3, #0]
 800eda4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d03f      	beq.n	800ee2c <USBD_CDC_Setup+0xb4>
 800edac:	2b20      	cmp	r3, #32
 800edae:	f040 809f 	bne.w	800eef0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	88db      	ldrh	r3, [r3, #6]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d02e      	beq.n	800ee18 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	781b      	ldrb	r3, [r3, #0]
 800edbe:	b25b      	sxtb	r3, r3
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	da16      	bge.n	800edf2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800edca:	689b      	ldr	r3, [r3, #8]
 800edcc:	683a      	ldr	r2, [r7, #0]
 800edce:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800edd0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800edd2:	683a      	ldr	r2, [r7, #0]
 800edd4:	88d2      	ldrh	r2, [r2, #6]
 800edd6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	88db      	ldrh	r3, [r3, #6]
 800eddc:	2b07      	cmp	r3, #7
 800edde:	bf28      	it	cs
 800ede0:	2307      	movcs	r3, #7
 800ede2:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ede4:	693b      	ldr	r3, [r7, #16]
 800ede6:	89fa      	ldrh	r2, [r7, #14]
 800ede8:	4619      	mov	r1, r3
 800edea:	6878      	ldr	r0, [r7, #4]
 800edec:	f001 facd 	bl	801038a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800edf0:	e085      	b.n	800eefe <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800edf2:	683b      	ldr	r3, [r7, #0]
 800edf4:	785a      	ldrb	r2, [r3, #1]
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	88db      	ldrh	r3, [r3, #6]
 800ee00:	b2da      	uxtb	r2, r3
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ee08:	6939      	ldr	r1, [r7, #16]
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	88db      	ldrh	r3, [r3, #6]
 800ee0e:	461a      	mov	r2, r3
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f001 fae6 	bl	80103e2 <USBD_CtlPrepareRx>
      break;
 800ee16:	e072      	b.n	800eefe <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee1e:	689b      	ldr	r3, [r3, #8]
 800ee20:	683a      	ldr	r2, [r7, #0]
 800ee22:	7850      	ldrb	r0, [r2, #1]
 800ee24:	2200      	movs	r2, #0
 800ee26:	6839      	ldr	r1, [r7, #0]
 800ee28:	4798      	blx	r3
      break;
 800ee2a:	e068      	b.n	800eefe <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	785b      	ldrb	r3, [r3, #1]
 800ee30:	2b0b      	cmp	r3, #11
 800ee32:	d852      	bhi.n	800eeda <USBD_CDC_Setup+0x162>
 800ee34:	a201      	add	r2, pc, #4	@ (adr r2, 800ee3c <USBD_CDC_Setup+0xc4>)
 800ee36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee3a:	bf00      	nop
 800ee3c:	0800ee6d 	.word	0x0800ee6d
 800ee40:	0800eee9 	.word	0x0800eee9
 800ee44:	0800eedb 	.word	0x0800eedb
 800ee48:	0800eedb 	.word	0x0800eedb
 800ee4c:	0800eedb 	.word	0x0800eedb
 800ee50:	0800eedb 	.word	0x0800eedb
 800ee54:	0800eedb 	.word	0x0800eedb
 800ee58:	0800eedb 	.word	0x0800eedb
 800ee5c:	0800eedb 	.word	0x0800eedb
 800ee60:	0800eedb 	.word	0x0800eedb
 800ee64:	0800ee97 	.word	0x0800ee97
 800ee68:	0800eec1 	.word	0x0800eec1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	2b03      	cmp	r3, #3
 800ee76:	d107      	bne.n	800ee88 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ee78:	f107 030a 	add.w	r3, r7, #10
 800ee7c:	2202      	movs	r2, #2
 800ee7e:	4619      	mov	r1, r3
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f001 fa82 	bl	801038a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ee86:	e032      	b.n	800eeee <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ee88:	6839      	ldr	r1, [r7, #0]
 800ee8a:	6878      	ldr	r0, [r7, #4]
 800ee8c:	f001 fa0c 	bl	80102a8 <USBD_CtlError>
            ret = USBD_FAIL;
 800ee90:	2303      	movs	r3, #3
 800ee92:	75fb      	strb	r3, [r7, #23]
          break;
 800ee94:	e02b      	b.n	800eeee <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	2b03      	cmp	r3, #3
 800eea0:	d107      	bne.n	800eeb2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800eea2:	f107 030d 	add.w	r3, r7, #13
 800eea6:	2201      	movs	r2, #1
 800eea8:	4619      	mov	r1, r3
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f001 fa6d 	bl	801038a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eeb0:	e01d      	b.n	800eeee <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800eeb2:	6839      	ldr	r1, [r7, #0]
 800eeb4:	6878      	ldr	r0, [r7, #4]
 800eeb6:	f001 f9f7 	bl	80102a8 <USBD_CtlError>
            ret = USBD_FAIL;
 800eeba:	2303      	movs	r3, #3
 800eebc:	75fb      	strb	r3, [r7, #23]
          break;
 800eebe:	e016      	b.n	800eeee <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eec6:	b2db      	uxtb	r3, r3
 800eec8:	2b03      	cmp	r3, #3
 800eeca:	d00f      	beq.n	800eeec <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800eecc:	6839      	ldr	r1, [r7, #0]
 800eece:	6878      	ldr	r0, [r7, #4]
 800eed0:	f001 f9ea 	bl	80102a8 <USBD_CtlError>
            ret = USBD_FAIL;
 800eed4:	2303      	movs	r3, #3
 800eed6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800eed8:	e008      	b.n	800eeec <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800eeda:	6839      	ldr	r1, [r7, #0]
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f001 f9e3 	bl	80102a8 <USBD_CtlError>
          ret = USBD_FAIL;
 800eee2:	2303      	movs	r3, #3
 800eee4:	75fb      	strb	r3, [r7, #23]
          break;
 800eee6:	e002      	b.n	800eeee <USBD_CDC_Setup+0x176>
          break;
 800eee8:	bf00      	nop
 800eeea:	e008      	b.n	800eefe <USBD_CDC_Setup+0x186>
          break;
 800eeec:	bf00      	nop
      }
      break;
 800eeee:	e006      	b.n	800eefe <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800eef0:	6839      	ldr	r1, [r7, #0]
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f001 f9d8 	bl	80102a8 <USBD_CtlError>
      ret = USBD_FAIL;
 800eef8:	2303      	movs	r3, #3
 800eefa:	75fb      	strb	r3, [r7, #23]
      break;
 800eefc:	bf00      	nop
  }

  return (uint8_t)ret;
 800eefe:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3718      	adds	r7, #24
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b084      	sub	sp, #16
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	460b      	mov	r3, r1
 800ef12:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800ef1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d101      	bne.n	800ef2a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ef26:	2303      	movs	r3, #3
 800ef28:	e04f      	b.n	800efca <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ef30:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ef32:	78fa      	ldrb	r2, [r7, #3]
 800ef34:	6879      	ldr	r1, [r7, #4]
 800ef36:	4613      	mov	r3, r2
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	4413      	add	r3, r2
 800ef3c:	009b      	lsls	r3, r3, #2
 800ef3e:	440b      	add	r3, r1
 800ef40:	3318      	adds	r3, #24
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d029      	beq.n	800ef9c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ef48:	78fa      	ldrb	r2, [r7, #3]
 800ef4a:	6879      	ldr	r1, [r7, #4]
 800ef4c:	4613      	mov	r3, r2
 800ef4e:	009b      	lsls	r3, r3, #2
 800ef50:	4413      	add	r3, r2
 800ef52:	009b      	lsls	r3, r3, #2
 800ef54:	440b      	add	r3, r1
 800ef56:	3318      	adds	r3, #24
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	78f9      	ldrb	r1, [r7, #3]
 800ef5c:	68f8      	ldr	r0, [r7, #12]
 800ef5e:	460b      	mov	r3, r1
 800ef60:	009b      	lsls	r3, r3, #2
 800ef62:	440b      	add	r3, r1
 800ef64:	00db      	lsls	r3, r3, #3
 800ef66:	4403      	add	r3, r0
 800ef68:	3320      	adds	r3, #32
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ef70:	fb01 f303 	mul.w	r3, r1, r3
 800ef74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d110      	bne.n	800ef9c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ef7a:	78fa      	ldrb	r2, [r7, #3]
 800ef7c:	6879      	ldr	r1, [r7, #4]
 800ef7e:	4613      	mov	r3, r2
 800ef80:	009b      	lsls	r3, r3, #2
 800ef82:	4413      	add	r3, r2
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	440b      	add	r3, r1
 800ef88:	3318      	adds	r3, #24
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ef8e:	78f9      	ldrb	r1, [r7, #3]
 800ef90:	2300      	movs	r3, #0
 800ef92:	2200      	movs	r2, #0
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f001 fec4 	bl	8010d22 <USBD_LL_Transmit>
 800ef9a:	e015      	b.n	800efc8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800efaa:	691b      	ldr	r3, [r3, #16]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d00b      	beq.n	800efc8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800efb6:	691b      	ldr	r3, [r3, #16]
 800efb8:	68ba      	ldr	r2, [r7, #8]
 800efba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800efbe:	68ba      	ldr	r2, [r7, #8]
 800efc0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800efc4:	78fa      	ldrb	r2, [r7, #3]
 800efc6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800efc8:	2300      	movs	r3, #0
}
 800efca:	4618      	mov	r0, r3
 800efcc:	3710      	adds	r7, #16
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}

0800efd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800efd2:	b580      	push	{r7, lr}
 800efd4:	b084      	sub	sp, #16
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
 800efda:	460b      	mov	r3, r1
 800efdc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800efe4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800efec:	2b00      	cmp	r3, #0
 800efee:	d101      	bne.n	800eff4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eff0:	2303      	movs	r3, #3
 800eff2:	e015      	b.n	800f020 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800eff4:	78fb      	ldrb	r3, [r7, #3]
 800eff6:	4619      	mov	r1, r3
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f001 fed4 	bl	8010da6 <USBD_LL_GetRxDataSize>
 800effe:	4602      	mov	r2, r0
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f00c:	68db      	ldr	r3, [r3, #12]
 800f00e:	68fa      	ldr	r2, [r7, #12]
 800f010:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f01a:	4611      	mov	r1, r2
 800f01c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f01e:	2300      	movs	r3, #0
}
 800f020:	4618      	mov	r0, r3
 800f022:	3710      	adds	r7, #16
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}

0800f028 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f036:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d101      	bne.n	800f042 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f03e:	2303      	movs	r3, #3
 800f040:	e01a      	b.n	800f078 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d014      	beq.n	800f076 <USBD_CDC_EP0_RxReady+0x4e>
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f052:	2bff      	cmp	r3, #255	@ 0xff
 800f054:	d00f      	beq.n	800f076 <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f05c:	689b      	ldr	r3, [r3, #8]
 800f05e:	68fa      	ldr	r2, [r7, #12]
 800f060:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800f064:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f066:	68fa      	ldr	r2, [r7, #12]
 800f068:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f06c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	22ff      	movs	r2, #255	@ 0xff
 800f072:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f076:	2300      	movs	r3, #0
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3710      	adds	r7, #16
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f080:	b480      	push	{r7}
 800f082:	b083      	sub	sp, #12
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2243      	movs	r2, #67	@ 0x43
 800f08c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f08e:	4b03      	ldr	r3, [pc, #12]	@ (800f09c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f090:	4618      	mov	r0, r3
 800f092:	370c      	adds	r7, #12
 800f094:	46bd      	mov	sp, r7
 800f096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09a:	4770      	bx	lr
 800f09c:	200000e8 	.word	0x200000e8

0800f0a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f0a0:	b480      	push	{r7}
 800f0a2:	b083      	sub	sp, #12
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2243      	movs	r2, #67	@ 0x43
 800f0ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f0ae:	4b03      	ldr	r3, [pc, #12]	@ (800f0bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	370c      	adds	r7, #12
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr
 800f0bc:	200000a4 	.word	0x200000a4

0800f0c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b083      	sub	sp, #12
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2243      	movs	r2, #67	@ 0x43
 800f0cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f0ce:	4b03      	ldr	r3, [pc, #12]	@ (800f0dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	370c      	adds	r7, #12
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0da:	4770      	bx	lr
 800f0dc:	2000012c 	.word	0x2000012c

0800f0e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b083      	sub	sp, #12
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	220a      	movs	r2, #10
 800f0ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f0ee:	4b03      	ldr	r3, [pc, #12]	@ (800f0fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	370c      	adds	r7, #12
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fa:	4770      	bx	lr
 800f0fc:	20000060 	.word	0x20000060

0800f100 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f100:	b480      	push	{r7}
 800f102:	b083      	sub	sp, #12
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d101      	bne.n	800f114 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f110:	2303      	movs	r3, #3
 800f112:	e004      	b.n	800f11e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	683a      	ldr	r2, [r7, #0]
 800f118:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800f11c:	2300      	movs	r3, #0
}
 800f11e:	4618      	mov	r0, r3
 800f120:	370c      	adds	r7, #12
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr

0800f12a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f12a:	b480      	push	{r7}
 800f12c:	b087      	sub	sp, #28
 800f12e:	af00      	add	r7, sp, #0
 800f130:	60f8      	str	r0, [r7, #12]
 800f132:	60b9      	str	r1, [r7, #8]
 800f134:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f13c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f13e:	697b      	ldr	r3, [r7, #20]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d101      	bne.n	800f148 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f144:	2303      	movs	r3, #3
 800f146:	e008      	b.n	800f15a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f148:	697b      	ldr	r3, [r7, #20]
 800f14a:	68ba      	ldr	r2, [r7, #8]
 800f14c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	687a      	ldr	r2, [r7, #4]
 800f154:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f158:	2300      	movs	r3, #0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	371c      	adds	r7, #28
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr

0800f166 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f166:	b480      	push	{r7}
 800f168:	b085      	sub	sp, #20
 800f16a:	af00      	add	r7, sp, #0
 800f16c:	6078      	str	r0, [r7, #4]
 800f16e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f176:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d101      	bne.n	800f182 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f17e:	2303      	movs	r3, #3
 800f180:	e004      	b.n	800f18c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	683a      	ldr	r2, [r7, #0]
 800f186:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f18a:	2300      	movs	r3, #0
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3714      	adds	r7, #20
 800f190:	46bd      	mov	sp, r7
 800f192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f196:	4770      	bx	lr

0800f198 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b084      	sub	sp, #16
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f1a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f1a8:	2301      	movs	r3, #1
 800f1aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d101      	bne.n	800f1ba <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f1b6:	2303      	movs	r3, #3
 800f1b8:	e01a      	b.n	800f1f0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d114      	bne.n	800f1ee <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f1c4:	68bb      	ldr	r3, [r7, #8]
 800f1c6:	2201      	movs	r2, #1
 800f1c8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f1e2:	2181      	movs	r1, #129	@ 0x81
 800f1e4:	6878      	ldr	r0, [r7, #4]
 800f1e6:	f001 fd9c 	bl	8010d22 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f1ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3710      	adds	r7, #16
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b084      	sub	sp, #16
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f206:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d101      	bne.n	800f216 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f212:	2303      	movs	r3, #3
 800f214:	e016      	b.n	800f244 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	7c1b      	ldrb	r3, [r3, #16]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d109      	bne.n	800f232 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f224:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f228:	2101      	movs	r1, #1
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f001 fd9a 	bl	8010d64 <USBD_LL_PrepareReceive>
 800f230:	e007      	b.n	800f242 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f238:	2340      	movs	r3, #64	@ 0x40
 800f23a:	2101      	movs	r1, #1
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	f001 fd91 	bl	8010d64 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f242:	2300      	movs	r3, #0
}
 800f244:	4618      	mov	r0, r3
 800f246:	3710      	adds	r7, #16
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b086      	sub	sp, #24
 800f250:	af00      	add	r7, sp, #0
 800f252:	60f8      	str	r0, [r7, #12]
 800f254:	60b9      	str	r1, [r7, #8]
 800f256:	4613      	mov	r3, r2
 800f258:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d101      	bne.n	800f264 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f260:	2303      	movs	r3, #3
 800f262:	e01f      	b.n	800f2a4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	2200      	movs	r2, #0
 800f268:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	2200      	movs	r2, #0
 800f270:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2200      	movs	r2, #0
 800f278:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d003      	beq.n	800f28a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	68ba      	ldr	r2, [r7, #8]
 800f286:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2201      	movs	r2, #1
 800f28e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	79fa      	ldrb	r2, [r7, #7]
 800f296:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f298:	68f8      	ldr	r0, [r7, #12]
 800f29a:	f001 fbf9 	bl	8010a90 <USBD_LL_Init>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f2a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3718      	adds	r7, #24
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
 800f2b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d101      	bne.n	800f2c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f2c0:	2303      	movs	r3, #3
 800f2c2:	e016      	b.n	800f2f2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	683a      	ldr	r2, [r7, #0]
 800f2c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d00b      	beq.n	800f2f0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2e0:	f107 020e 	add.w	r2, r7, #14
 800f2e4:	4610      	mov	r0, r2
 800f2e6:	4798      	blx	r3
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f2f0:	2300      	movs	r3, #0
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3710      	adds	r7, #16
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}

0800f2fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b082      	sub	sp, #8
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f001 fc24 	bl	8010b50 <USBD_LL_Start>
 800f308:	4603      	mov	r3, r0
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3708      	adds	r7, #8
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}

0800f312 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f312:	b480      	push	{r7}
 800f314:	b083      	sub	sp, #12
 800f316:	af00      	add	r7, sp, #0
 800f318:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f31a:	2300      	movs	r3, #0
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b084      	sub	sp, #16
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	460b      	mov	r3, r1
 800f332:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f334:	2303      	movs	r3, #3
 800f336:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d009      	beq.n	800f356 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	78fa      	ldrb	r2, [r7, #3]
 800f34c:	4611      	mov	r1, r2
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	4798      	blx	r3
 800f352:	4603      	mov	r3, r0
 800f354:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f356:	7bfb      	ldrb	r3, [r7, #15]
}
 800f358:	4618      	mov	r0, r3
 800f35a:	3710      	adds	r7, #16
 800f35c:	46bd      	mov	sp, r7
 800f35e:	bd80      	pop	{r7, pc}

0800f360 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b082      	sub	sp, #8
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
 800f368:	460b      	mov	r3, r1
 800f36a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f372:	2b00      	cmp	r3, #0
 800f374:	d007      	beq.n	800f386 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	78fa      	ldrb	r2, [r7, #3]
 800f380:	4611      	mov	r1, r2
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	4798      	blx	r3
  }

  return USBD_OK;
 800f386:	2300      	movs	r3, #0
}
 800f388:	4618      	mov	r0, r3
 800f38a:	3708      	adds	r7, #8
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}

0800f390 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b084      	sub	sp, #16
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f3a0:	6839      	ldr	r1, [r7, #0]
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f000 ff46 	bl	8010234 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2201      	movs	r2, #1
 800f3ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f3c4:	f003 031f 	and.w	r3, r3, #31
 800f3c8:	2b02      	cmp	r3, #2
 800f3ca:	d01a      	beq.n	800f402 <USBD_LL_SetupStage+0x72>
 800f3cc:	2b02      	cmp	r3, #2
 800f3ce:	d822      	bhi.n	800f416 <USBD_LL_SetupStage+0x86>
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d002      	beq.n	800f3da <USBD_LL_SetupStage+0x4a>
 800f3d4:	2b01      	cmp	r3, #1
 800f3d6:	d00a      	beq.n	800f3ee <USBD_LL_SetupStage+0x5e>
 800f3d8:	e01d      	b.n	800f416 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 f9ee 	bl	800f7c4 <USBD_StdDevReq>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	73fb      	strb	r3, [r7, #15]
      break;
 800f3ec:	e020      	b.n	800f430 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 fa52 	bl	800f8a0 <USBD_StdItfReq>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	73fb      	strb	r3, [r7, #15]
      break;
 800f400:	e016      	b.n	800f430 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f408:	4619      	mov	r1, r3
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f000 fa91 	bl	800f932 <USBD_StdEPReq>
 800f410:	4603      	mov	r3, r0
 800f412:	73fb      	strb	r3, [r7, #15]
      break;
 800f414:	e00c      	b.n	800f430 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f41c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f420:	b2db      	uxtb	r3, r3
 800f422:	4619      	mov	r1, r3
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f001 fbf3 	bl	8010c10 <USBD_LL_StallEP>
 800f42a:	4603      	mov	r3, r0
 800f42c:	73fb      	strb	r3, [r7, #15]
      break;
 800f42e:	bf00      	nop
  }

  return ret;
 800f430:	7bfb      	ldrb	r3, [r7, #15]
}
 800f432:	4618      	mov	r0, r3
 800f434:	3710      	adds	r7, #16
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}

0800f43a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f43a:	b580      	push	{r7, lr}
 800f43c:	b086      	sub	sp, #24
 800f43e:	af00      	add	r7, sp, #0
 800f440:	60f8      	str	r0, [r7, #12]
 800f442:	460b      	mov	r3, r1
 800f444:	607a      	str	r2, [r7, #4]
 800f446:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f448:	7afb      	ldrb	r3, [r7, #11]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d138      	bne.n	800f4c0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f454:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f45c:	2b03      	cmp	r3, #3
 800f45e:	d14a      	bne.n	800f4f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f460:	693b      	ldr	r3, [r7, #16]
 800f462:	689a      	ldr	r2, [r3, #8]
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	68db      	ldr	r3, [r3, #12]
 800f468:	429a      	cmp	r2, r3
 800f46a:	d913      	bls.n	800f494 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	689a      	ldr	r2, [r3, #8]
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	1ad2      	subs	r2, r2, r3
 800f476:	693b      	ldr	r3, [r7, #16]
 800f478:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	68da      	ldr	r2, [r3, #12]
 800f47e:	693b      	ldr	r3, [r7, #16]
 800f480:	689b      	ldr	r3, [r3, #8]
 800f482:	4293      	cmp	r3, r2
 800f484:	bf28      	it	cs
 800f486:	4613      	movcs	r3, r2
 800f488:	461a      	mov	r2, r3
 800f48a:	6879      	ldr	r1, [r7, #4]
 800f48c:	68f8      	ldr	r0, [r7, #12]
 800f48e:	f000 ffc5 	bl	801041c <USBD_CtlContinueRx>
 800f492:	e030      	b.n	800f4f6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f49a:	b2db      	uxtb	r3, r3
 800f49c:	2b03      	cmp	r3, #3
 800f49e:	d10b      	bne.n	800f4b8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4a6:	691b      	ldr	r3, [r3, #16]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d005      	beq.n	800f4b8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4b2:	691b      	ldr	r3, [r3, #16]
 800f4b4:	68f8      	ldr	r0, [r7, #12]
 800f4b6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f4b8:	68f8      	ldr	r0, [r7, #12]
 800f4ba:	f000 ffc0 	bl	801043e <USBD_CtlSendStatus>
 800f4be:	e01a      	b.n	800f4f6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4c6:	b2db      	uxtb	r3, r3
 800f4c8:	2b03      	cmp	r3, #3
 800f4ca:	d114      	bne.n	800f4f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4d2:	699b      	ldr	r3, [r3, #24]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d00e      	beq.n	800f4f6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f4de:	699b      	ldr	r3, [r3, #24]
 800f4e0:	7afa      	ldrb	r2, [r7, #11]
 800f4e2:	4611      	mov	r1, r2
 800f4e4:	68f8      	ldr	r0, [r7, #12]
 800f4e6:	4798      	blx	r3
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f4ec:	7dfb      	ldrb	r3, [r7, #23]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d001      	beq.n	800f4f6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f4f2:	7dfb      	ldrb	r3, [r7, #23]
 800f4f4:	e000      	b.n	800f4f8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f4f6:	2300      	movs	r3, #0
}
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	3718      	adds	r7, #24
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	bd80      	pop	{r7, pc}

0800f500 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f500:	b580      	push	{r7, lr}
 800f502:	b086      	sub	sp, #24
 800f504:	af00      	add	r7, sp, #0
 800f506:	60f8      	str	r0, [r7, #12]
 800f508:	460b      	mov	r3, r1
 800f50a:	607a      	str	r2, [r7, #4]
 800f50c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f50e:	7afb      	ldrb	r3, [r7, #11]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d16b      	bne.n	800f5ec <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	3314      	adds	r3, #20
 800f518:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f520:	2b02      	cmp	r3, #2
 800f522:	d156      	bne.n	800f5d2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	689a      	ldr	r2, [r3, #8]
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d914      	bls.n	800f55a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	689a      	ldr	r2, [r3, #8]
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	1ad2      	subs	r2, r2, r3
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	689b      	ldr	r3, [r3, #8]
 800f542:	461a      	mov	r2, r3
 800f544:	6879      	ldr	r1, [r7, #4]
 800f546:	68f8      	ldr	r0, [r7, #12]
 800f548:	f000 ff3a 	bl	80103c0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f54c:	2300      	movs	r3, #0
 800f54e:	2200      	movs	r2, #0
 800f550:	2100      	movs	r1, #0
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	f001 fc06 	bl	8010d64 <USBD_LL_PrepareReceive>
 800f558:	e03b      	b.n	800f5d2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	68da      	ldr	r2, [r3, #12]
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	689b      	ldr	r3, [r3, #8]
 800f562:	429a      	cmp	r2, r3
 800f564:	d11c      	bne.n	800f5a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	685a      	ldr	r2, [r3, #4]
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f56e:	429a      	cmp	r2, r3
 800f570:	d316      	bcc.n	800f5a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	685a      	ldr	r2, [r3, #4]
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d20f      	bcs.n	800f5a0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f580:	2200      	movs	r2, #0
 800f582:	2100      	movs	r1, #0
 800f584:	68f8      	ldr	r0, [r7, #12]
 800f586:	f000 ff1b 	bl	80103c0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	2200      	movs	r2, #0
 800f58e:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f592:	2300      	movs	r3, #0
 800f594:	2200      	movs	r2, #0
 800f596:	2100      	movs	r1, #0
 800f598:	68f8      	ldr	r0, [r7, #12]
 800f59a:	f001 fbe3 	bl	8010d64 <USBD_LL_PrepareReceive>
 800f59e:	e018      	b.n	800f5d2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	2b03      	cmp	r3, #3
 800f5aa:	d10b      	bne.n	800f5c4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5b2:	68db      	ldr	r3, [r3, #12]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d005      	beq.n	800f5c4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5be:	68db      	ldr	r3, [r3, #12]
 800f5c0:	68f8      	ldr	r0, [r7, #12]
 800f5c2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f5c4:	2180      	movs	r1, #128	@ 0x80
 800f5c6:	68f8      	ldr	r0, [r7, #12]
 800f5c8:	f001 fb22 	bl	8010c10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	f000 ff49 	bl	8010464 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	d122      	bne.n	800f622 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f7ff fe98 	bl	800f312 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f5ea:	e01a      	b.n	800f622 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5f2:	b2db      	uxtb	r3, r3
 800f5f4:	2b03      	cmp	r3, #3
 800f5f6:	d114      	bne.n	800f622 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5fe:	695b      	ldr	r3, [r3, #20]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d00e      	beq.n	800f622 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f60a:	695b      	ldr	r3, [r3, #20]
 800f60c:	7afa      	ldrb	r2, [r7, #11]
 800f60e:	4611      	mov	r1, r2
 800f610:	68f8      	ldr	r0, [r7, #12]
 800f612:	4798      	blx	r3
 800f614:	4603      	mov	r3, r0
 800f616:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f618:	7dfb      	ldrb	r3, [r7, #23]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d001      	beq.n	800f622 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f61e:	7dfb      	ldrb	r3, [r7, #23]
 800f620:	e000      	b.n	800f624 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f622:	2300      	movs	r3, #0
}
 800f624:	4618      	mov	r0, r3
 800f626:	3718      	adds	r7, #24
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}

0800f62c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b082      	sub	sp, #8
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2201      	movs	r2, #1
 800f638:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2200      	movs	r2, #0
 800f648:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2200      	movs	r2, #0
 800f64e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d101      	bne.n	800f660 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f65c:	2303      	movs	r3, #3
 800f65e:	e02f      	b.n	800f6c0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f666:	2b00      	cmp	r3, #0
 800f668:	d00f      	beq.n	800f68a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d009      	beq.n	800f68a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f67c:	685b      	ldr	r3, [r3, #4]
 800f67e:	687a      	ldr	r2, [r7, #4]
 800f680:	6852      	ldr	r2, [r2, #4]
 800f682:	b2d2      	uxtb	r2, r2
 800f684:	4611      	mov	r1, r2
 800f686:	6878      	ldr	r0, [r7, #4]
 800f688:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f68a:	2340      	movs	r3, #64	@ 0x40
 800f68c:	2200      	movs	r2, #0
 800f68e:	2100      	movs	r1, #0
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f001 fa78 	bl	8010b86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2201      	movs	r2, #1
 800f69a:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	2240      	movs	r2, #64	@ 0x40
 800f6a2:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f6a6:	2340      	movs	r3, #64	@ 0x40
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	2180      	movs	r1, #128	@ 0x80
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f001 fa6a 	bl	8010b86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2240      	movs	r2, #64	@ 0x40
 800f6bc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f6be:	2300      	movs	r3, #0
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3708      	adds	r7, #8
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b083      	sub	sp, #12
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	6078      	str	r0, [r7, #4]
 800f6d0:	460b      	mov	r3, r1
 800f6d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	78fa      	ldrb	r2, [r7, #3]
 800f6d8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f6da:	2300      	movs	r3, #0
}
 800f6dc:	4618      	mov	r0, r3
 800f6de:	370c      	adds	r7, #12
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr

0800f6e8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b083      	sub	sp, #12
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6f6:	b2da      	uxtb	r2, r3
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	2204      	movs	r2, #4
 800f702:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f706:	2300      	movs	r3, #0
}
 800f708:	4618      	mov	r0, r3
 800f70a:	370c      	adds	r7, #12
 800f70c:	46bd      	mov	sp, r7
 800f70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f712:	4770      	bx	lr

0800f714 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f714:	b480      	push	{r7}
 800f716:	b083      	sub	sp, #12
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f722:	b2db      	uxtb	r3, r3
 800f724:	2b04      	cmp	r3, #4
 800f726:	d106      	bne.n	800f736 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f72e:	b2da      	uxtb	r2, r3
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f736:	2300      	movs	r3, #0
}
 800f738:	4618      	mov	r0, r3
 800f73a:	370c      	adds	r7, #12
 800f73c:	46bd      	mov	sp, r7
 800f73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f742:	4770      	bx	lr

0800f744 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b082      	sub	sp, #8
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f752:	2b00      	cmp	r3, #0
 800f754:	d101      	bne.n	800f75a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f756:	2303      	movs	r3, #3
 800f758:	e012      	b.n	800f780 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f760:	b2db      	uxtb	r3, r3
 800f762:	2b03      	cmp	r3, #3
 800f764:	d10b      	bne.n	800f77e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f76c:	69db      	ldr	r3, [r3, #28]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d005      	beq.n	800f77e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f778:	69db      	ldr	r3, [r3, #28]
 800f77a:	6878      	ldr	r0, [r7, #4]
 800f77c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f77e:	2300      	movs	r3, #0
}
 800f780:	4618      	mov	r0, r3
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f788:	b480      	push	{r7}
 800f78a:	b087      	sub	sp, #28
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	781b      	ldrb	r3, [r3, #0]
 800f798:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f79a:	697b      	ldr	r3, [r7, #20]
 800f79c:	3301      	adds	r3, #1
 800f79e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f7a6:	8a3b      	ldrh	r3, [r7, #16]
 800f7a8:	021b      	lsls	r3, r3, #8
 800f7aa:	b21a      	sxth	r2, r3
 800f7ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f7b0:	4313      	orrs	r3, r2
 800f7b2:	b21b      	sxth	r3, r3
 800f7b4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f7b6:	89fb      	ldrh	r3, [r7, #14]
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	371c      	adds	r7, #28
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7c2:	4770      	bx	lr

0800f7c4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	781b      	ldrb	r3, [r3, #0]
 800f7d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f7da:	2b40      	cmp	r3, #64	@ 0x40
 800f7dc:	d005      	beq.n	800f7ea <USBD_StdDevReq+0x26>
 800f7de:	2b40      	cmp	r3, #64	@ 0x40
 800f7e0:	d853      	bhi.n	800f88a <USBD_StdDevReq+0xc6>
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d00b      	beq.n	800f7fe <USBD_StdDevReq+0x3a>
 800f7e6:	2b20      	cmp	r3, #32
 800f7e8:	d14f      	bne.n	800f88a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f7f0:	689b      	ldr	r3, [r3, #8]
 800f7f2:	6839      	ldr	r1, [r7, #0]
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	4798      	blx	r3
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	73fb      	strb	r3, [r7, #15]
      break;
 800f7fc:	e04a      	b.n	800f894 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f7fe:	683b      	ldr	r3, [r7, #0]
 800f800:	785b      	ldrb	r3, [r3, #1]
 800f802:	2b09      	cmp	r3, #9
 800f804:	d83b      	bhi.n	800f87e <USBD_StdDevReq+0xba>
 800f806:	a201      	add	r2, pc, #4	@ (adr r2, 800f80c <USBD_StdDevReq+0x48>)
 800f808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f80c:	0800f861 	.word	0x0800f861
 800f810:	0800f875 	.word	0x0800f875
 800f814:	0800f87f 	.word	0x0800f87f
 800f818:	0800f86b 	.word	0x0800f86b
 800f81c:	0800f87f 	.word	0x0800f87f
 800f820:	0800f83f 	.word	0x0800f83f
 800f824:	0800f835 	.word	0x0800f835
 800f828:	0800f87f 	.word	0x0800f87f
 800f82c:	0800f857 	.word	0x0800f857
 800f830:	0800f849 	.word	0x0800f849
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f834:	6839      	ldr	r1, [r7, #0]
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 f9de 	bl	800fbf8 <USBD_GetDescriptor>
          break;
 800f83c:	e024      	b.n	800f888 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f83e:	6839      	ldr	r1, [r7, #0]
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f000 fb6d 	bl	800ff20 <USBD_SetAddress>
          break;
 800f846:	e01f      	b.n	800f888 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f848:	6839      	ldr	r1, [r7, #0]
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f000 fbac 	bl	800ffa8 <USBD_SetConfig>
 800f850:	4603      	mov	r3, r0
 800f852:	73fb      	strb	r3, [r7, #15]
          break;
 800f854:	e018      	b.n	800f888 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f856:	6839      	ldr	r1, [r7, #0]
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f000 fc4b 	bl	80100f4 <USBD_GetConfig>
          break;
 800f85e:	e013      	b.n	800f888 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f860:	6839      	ldr	r1, [r7, #0]
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 fc7c 	bl	8010160 <USBD_GetStatus>
          break;
 800f868:	e00e      	b.n	800f888 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f86a:	6839      	ldr	r1, [r7, #0]
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f000 fcab 	bl	80101c8 <USBD_SetFeature>
          break;
 800f872:	e009      	b.n	800f888 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f874:	6839      	ldr	r1, [r7, #0]
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f000 fcba 	bl	80101f0 <USBD_ClrFeature>
          break;
 800f87c:	e004      	b.n	800f888 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f87e:	6839      	ldr	r1, [r7, #0]
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f000 fd11 	bl	80102a8 <USBD_CtlError>
          break;
 800f886:	bf00      	nop
      }
      break;
 800f888:	e004      	b.n	800f894 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f88a:	6839      	ldr	r1, [r7, #0]
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f000 fd0b 	bl	80102a8 <USBD_CtlError>
      break;
 800f892:	bf00      	nop
  }

  return ret;
 800f894:	7bfb      	ldrb	r3, [r7, #15]
}
 800f896:	4618      	mov	r0, r3
 800f898:	3710      	adds	r7, #16
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
 800f89e:	bf00      	nop

0800f8a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f8b6:	2b40      	cmp	r3, #64	@ 0x40
 800f8b8:	d005      	beq.n	800f8c6 <USBD_StdItfReq+0x26>
 800f8ba:	2b40      	cmp	r3, #64	@ 0x40
 800f8bc:	d82f      	bhi.n	800f91e <USBD_StdItfReq+0x7e>
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d001      	beq.n	800f8c6 <USBD_StdItfReq+0x26>
 800f8c2:	2b20      	cmp	r3, #32
 800f8c4:	d12b      	bne.n	800f91e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	3b01      	subs	r3, #1
 800f8d0:	2b02      	cmp	r3, #2
 800f8d2:	d81d      	bhi.n	800f910 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f8d4:	683b      	ldr	r3, [r7, #0]
 800f8d6:	889b      	ldrh	r3, [r3, #4]
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	2b01      	cmp	r3, #1
 800f8dc:	d813      	bhi.n	800f906 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8e4:	689b      	ldr	r3, [r3, #8]
 800f8e6:	6839      	ldr	r1, [r7, #0]
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	4798      	blx	r3
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	88db      	ldrh	r3, [r3, #6]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d110      	bne.n	800f91a <USBD_StdItfReq+0x7a>
 800f8f8:	7bfb      	ldrb	r3, [r7, #15]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d10d      	bne.n	800f91a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f000 fd9d 	bl	801043e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f904:	e009      	b.n	800f91a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f906:	6839      	ldr	r1, [r7, #0]
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f000 fccd 	bl	80102a8 <USBD_CtlError>
          break;
 800f90e:	e004      	b.n	800f91a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f910:	6839      	ldr	r1, [r7, #0]
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 fcc8 	bl	80102a8 <USBD_CtlError>
          break;
 800f918:	e000      	b.n	800f91c <USBD_StdItfReq+0x7c>
          break;
 800f91a:	bf00      	nop
      }
      break;
 800f91c:	e004      	b.n	800f928 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f91e:	6839      	ldr	r1, [r7, #0]
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f000 fcc1 	bl	80102a8 <USBD_CtlError>
      break;
 800f926:	bf00      	nop
  }

  return ret;
 800f928:	7bfb      	ldrb	r3, [r7, #15]
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3710      	adds	r7, #16
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}

0800f932 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f932:	b580      	push	{r7, lr}
 800f934:	b084      	sub	sp, #16
 800f936:	af00      	add	r7, sp, #0
 800f938:	6078      	str	r0, [r7, #4]
 800f93a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f93c:	2300      	movs	r3, #0
 800f93e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	889b      	ldrh	r3, [r3, #4]
 800f944:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f94e:	2b40      	cmp	r3, #64	@ 0x40
 800f950:	d007      	beq.n	800f962 <USBD_StdEPReq+0x30>
 800f952:	2b40      	cmp	r3, #64	@ 0x40
 800f954:	f200 8145 	bhi.w	800fbe2 <USBD_StdEPReq+0x2b0>
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d00c      	beq.n	800f976 <USBD_StdEPReq+0x44>
 800f95c:	2b20      	cmp	r3, #32
 800f95e:	f040 8140 	bne.w	800fbe2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f968:	689b      	ldr	r3, [r3, #8]
 800f96a:	6839      	ldr	r1, [r7, #0]
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	4798      	blx	r3
 800f970:	4603      	mov	r3, r0
 800f972:	73fb      	strb	r3, [r7, #15]
      break;
 800f974:	e13a      	b.n	800fbec <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	785b      	ldrb	r3, [r3, #1]
 800f97a:	2b03      	cmp	r3, #3
 800f97c:	d007      	beq.n	800f98e <USBD_StdEPReq+0x5c>
 800f97e:	2b03      	cmp	r3, #3
 800f980:	f300 8129 	bgt.w	800fbd6 <USBD_StdEPReq+0x2a4>
 800f984:	2b00      	cmp	r3, #0
 800f986:	d07f      	beq.n	800fa88 <USBD_StdEPReq+0x156>
 800f988:	2b01      	cmp	r3, #1
 800f98a:	d03c      	beq.n	800fa06 <USBD_StdEPReq+0xd4>
 800f98c:	e123      	b.n	800fbd6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f994:	b2db      	uxtb	r3, r3
 800f996:	2b02      	cmp	r3, #2
 800f998:	d002      	beq.n	800f9a0 <USBD_StdEPReq+0x6e>
 800f99a:	2b03      	cmp	r3, #3
 800f99c:	d016      	beq.n	800f9cc <USBD_StdEPReq+0x9a>
 800f99e:	e02c      	b.n	800f9fa <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f9a0:	7bbb      	ldrb	r3, [r7, #14]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d00d      	beq.n	800f9c2 <USBD_StdEPReq+0x90>
 800f9a6:	7bbb      	ldrb	r3, [r7, #14]
 800f9a8:	2b80      	cmp	r3, #128	@ 0x80
 800f9aa:	d00a      	beq.n	800f9c2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f9ac:	7bbb      	ldrb	r3, [r7, #14]
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	f001 f92d 	bl	8010c10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f9b6:	2180      	movs	r1, #128	@ 0x80
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f001 f929 	bl	8010c10 <USBD_LL_StallEP>
 800f9be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f9c0:	e020      	b.n	800fa04 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f9c2:	6839      	ldr	r1, [r7, #0]
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f000 fc6f 	bl	80102a8 <USBD_CtlError>
              break;
 800f9ca:	e01b      	b.n	800fa04 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	885b      	ldrh	r3, [r3, #2]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d10e      	bne.n	800f9f2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f9d4:	7bbb      	ldrb	r3, [r7, #14]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d00b      	beq.n	800f9f2 <USBD_StdEPReq+0xc0>
 800f9da:	7bbb      	ldrb	r3, [r7, #14]
 800f9dc:	2b80      	cmp	r3, #128	@ 0x80
 800f9de:	d008      	beq.n	800f9f2 <USBD_StdEPReq+0xc0>
 800f9e0:	683b      	ldr	r3, [r7, #0]
 800f9e2:	88db      	ldrh	r3, [r3, #6]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d104      	bne.n	800f9f2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f9e8:	7bbb      	ldrb	r3, [r7, #14]
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	6878      	ldr	r0, [r7, #4]
 800f9ee:	f001 f90f 	bl	8010c10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 fd23 	bl	801043e <USBD_CtlSendStatus>

              break;
 800f9f8:	e004      	b.n	800fa04 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f9fa:	6839      	ldr	r1, [r7, #0]
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f000 fc53 	bl	80102a8 <USBD_CtlError>
              break;
 800fa02:	bf00      	nop
          }
          break;
 800fa04:	e0ec      	b.n	800fbe0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa0c:	b2db      	uxtb	r3, r3
 800fa0e:	2b02      	cmp	r3, #2
 800fa10:	d002      	beq.n	800fa18 <USBD_StdEPReq+0xe6>
 800fa12:	2b03      	cmp	r3, #3
 800fa14:	d016      	beq.n	800fa44 <USBD_StdEPReq+0x112>
 800fa16:	e030      	b.n	800fa7a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa18:	7bbb      	ldrb	r3, [r7, #14]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d00d      	beq.n	800fa3a <USBD_StdEPReq+0x108>
 800fa1e:	7bbb      	ldrb	r3, [r7, #14]
 800fa20:	2b80      	cmp	r3, #128	@ 0x80
 800fa22:	d00a      	beq.n	800fa3a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fa24:	7bbb      	ldrb	r3, [r7, #14]
 800fa26:	4619      	mov	r1, r3
 800fa28:	6878      	ldr	r0, [r7, #4]
 800fa2a:	f001 f8f1 	bl	8010c10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa2e:	2180      	movs	r1, #128	@ 0x80
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f001 f8ed 	bl	8010c10 <USBD_LL_StallEP>
 800fa36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fa38:	e025      	b.n	800fa86 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800fa3a:	6839      	ldr	r1, [r7, #0]
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f000 fc33 	bl	80102a8 <USBD_CtlError>
              break;
 800fa42:	e020      	b.n	800fa86 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	885b      	ldrh	r3, [r3, #2]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d11b      	bne.n	800fa84 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fa4c:	7bbb      	ldrb	r3, [r7, #14]
 800fa4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d004      	beq.n	800fa60 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fa56:	7bbb      	ldrb	r3, [r7, #14]
 800fa58:	4619      	mov	r1, r3
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f001 f8f7 	bl	8010c4e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f000 fcec 	bl	801043e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa6c:	689b      	ldr	r3, [r3, #8]
 800fa6e:	6839      	ldr	r1, [r7, #0]
 800fa70:	6878      	ldr	r0, [r7, #4]
 800fa72:	4798      	blx	r3
 800fa74:	4603      	mov	r3, r0
 800fa76:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800fa78:	e004      	b.n	800fa84 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800fa7a:	6839      	ldr	r1, [r7, #0]
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f000 fc13 	bl	80102a8 <USBD_CtlError>
              break;
 800fa82:	e000      	b.n	800fa86 <USBD_StdEPReq+0x154>
              break;
 800fa84:	bf00      	nop
          }
          break;
 800fa86:	e0ab      	b.n	800fbe0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa8e:	b2db      	uxtb	r3, r3
 800fa90:	2b02      	cmp	r3, #2
 800fa92:	d002      	beq.n	800fa9a <USBD_StdEPReq+0x168>
 800fa94:	2b03      	cmp	r3, #3
 800fa96:	d032      	beq.n	800fafe <USBD_StdEPReq+0x1cc>
 800fa98:	e097      	b.n	800fbca <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa9a:	7bbb      	ldrb	r3, [r7, #14]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d007      	beq.n	800fab0 <USBD_StdEPReq+0x17e>
 800faa0:	7bbb      	ldrb	r3, [r7, #14]
 800faa2:	2b80      	cmp	r3, #128	@ 0x80
 800faa4:	d004      	beq.n	800fab0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800faa6:	6839      	ldr	r1, [r7, #0]
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 fbfd 	bl	80102a8 <USBD_CtlError>
                break;
 800faae:	e091      	b.n	800fbd4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fab0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	da0b      	bge.n	800fad0 <USBD_StdEPReq+0x19e>
 800fab8:	7bbb      	ldrb	r3, [r7, #14]
 800faba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fabe:	4613      	mov	r3, r2
 800fac0:	009b      	lsls	r3, r3, #2
 800fac2:	4413      	add	r3, r2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	3310      	adds	r3, #16
 800fac8:	687a      	ldr	r2, [r7, #4]
 800faca:	4413      	add	r3, r2
 800facc:	3304      	adds	r3, #4
 800face:	e00b      	b.n	800fae8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fad0:	7bbb      	ldrb	r3, [r7, #14]
 800fad2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fad6:	4613      	mov	r3, r2
 800fad8:	009b      	lsls	r3, r3, #2
 800fada:	4413      	add	r3, r2
 800fadc:	009b      	lsls	r3, r3, #2
 800fade:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fae2:	687a      	ldr	r2, [r7, #4]
 800fae4:	4413      	add	r3, r2
 800fae6:	3304      	adds	r3, #4
 800fae8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	2200      	movs	r2, #0
 800faee:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800faf0:	68bb      	ldr	r3, [r7, #8]
 800faf2:	2202      	movs	r2, #2
 800faf4:	4619      	mov	r1, r3
 800faf6:	6878      	ldr	r0, [r7, #4]
 800faf8:	f000 fc47 	bl	801038a <USBD_CtlSendData>
              break;
 800fafc:	e06a      	b.n	800fbd4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fafe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	da11      	bge.n	800fb2a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fb06:	7bbb      	ldrb	r3, [r7, #14]
 800fb08:	f003 020f 	and.w	r2, r3, #15
 800fb0c:	6879      	ldr	r1, [r7, #4]
 800fb0e:	4613      	mov	r3, r2
 800fb10:	009b      	lsls	r3, r3, #2
 800fb12:	4413      	add	r3, r2
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	440b      	add	r3, r1
 800fb18:	3324      	adds	r3, #36	@ 0x24
 800fb1a:	881b      	ldrh	r3, [r3, #0]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d117      	bne.n	800fb50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fb20:	6839      	ldr	r1, [r7, #0]
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f000 fbc0 	bl	80102a8 <USBD_CtlError>
                  break;
 800fb28:	e054      	b.n	800fbd4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fb2a:	7bbb      	ldrb	r3, [r7, #14]
 800fb2c:	f003 020f 	and.w	r2, r3, #15
 800fb30:	6879      	ldr	r1, [r7, #4]
 800fb32:	4613      	mov	r3, r2
 800fb34:	009b      	lsls	r3, r3, #2
 800fb36:	4413      	add	r3, r2
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	440b      	add	r3, r1
 800fb3c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fb40:	881b      	ldrh	r3, [r3, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d104      	bne.n	800fb50 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fb46:	6839      	ldr	r1, [r7, #0]
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f000 fbad 	bl	80102a8 <USBD_CtlError>
                  break;
 800fb4e:	e041      	b.n	800fbd4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	da0b      	bge.n	800fb70 <USBD_StdEPReq+0x23e>
 800fb58:	7bbb      	ldrb	r3, [r7, #14]
 800fb5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fb5e:	4613      	mov	r3, r2
 800fb60:	009b      	lsls	r3, r3, #2
 800fb62:	4413      	add	r3, r2
 800fb64:	009b      	lsls	r3, r3, #2
 800fb66:	3310      	adds	r3, #16
 800fb68:	687a      	ldr	r2, [r7, #4]
 800fb6a:	4413      	add	r3, r2
 800fb6c:	3304      	adds	r3, #4
 800fb6e:	e00b      	b.n	800fb88 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fb70:	7bbb      	ldrb	r3, [r7, #14]
 800fb72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb76:	4613      	mov	r3, r2
 800fb78:	009b      	lsls	r3, r3, #2
 800fb7a:	4413      	add	r3, r2
 800fb7c:	009b      	lsls	r3, r3, #2
 800fb7e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fb82:	687a      	ldr	r2, [r7, #4]
 800fb84:	4413      	add	r3, r2
 800fb86:	3304      	adds	r3, #4
 800fb88:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fb8a:	7bbb      	ldrb	r3, [r7, #14]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d002      	beq.n	800fb96 <USBD_StdEPReq+0x264>
 800fb90:	7bbb      	ldrb	r3, [r7, #14]
 800fb92:	2b80      	cmp	r3, #128	@ 0x80
 800fb94:	d103      	bne.n	800fb9e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	601a      	str	r2, [r3, #0]
 800fb9c:	e00e      	b.n	800fbbc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fb9e:	7bbb      	ldrb	r3, [r7, #14]
 800fba0:	4619      	mov	r1, r3
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f001 f872 	bl	8010c8c <USBD_LL_IsStallEP>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d003      	beq.n	800fbb6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	2201      	movs	r2, #1
 800fbb2:	601a      	str	r2, [r3, #0]
 800fbb4:	e002      	b.n	800fbbc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	2200      	movs	r2, #0
 800fbba:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	2202      	movs	r2, #2
 800fbc0:	4619      	mov	r1, r3
 800fbc2:	6878      	ldr	r0, [r7, #4]
 800fbc4:	f000 fbe1 	bl	801038a <USBD_CtlSendData>
              break;
 800fbc8:	e004      	b.n	800fbd4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800fbca:	6839      	ldr	r1, [r7, #0]
 800fbcc:	6878      	ldr	r0, [r7, #4]
 800fbce:	f000 fb6b 	bl	80102a8 <USBD_CtlError>
              break;
 800fbd2:	bf00      	nop
          }
          break;
 800fbd4:	e004      	b.n	800fbe0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800fbd6:	6839      	ldr	r1, [r7, #0]
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f000 fb65 	bl	80102a8 <USBD_CtlError>
          break;
 800fbde:	bf00      	nop
      }
      break;
 800fbe0:	e004      	b.n	800fbec <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800fbe2:	6839      	ldr	r1, [r7, #0]
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f000 fb5f 	bl	80102a8 <USBD_CtlError>
      break;
 800fbea:	bf00      	nop
  }

  return ret;
 800fbec:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
	...

0800fbf8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fbf8:	b580      	push	{r7, lr}
 800fbfa:	b084      	sub	sp, #16
 800fbfc:	af00      	add	r7, sp, #0
 800fbfe:	6078      	str	r0, [r7, #4]
 800fc00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fc02:	2300      	movs	r3, #0
 800fc04:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fc06:	2300      	movs	r3, #0
 800fc08:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	885b      	ldrh	r3, [r3, #2]
 800fc12:	0a1b      	lsrs	r3, r3, #8
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	3b01      	subs	r3, #1
 800fc18:	2b0e      	cmp	r3, #14
 800fc1a:	f200 8152 	bhi.w	800fec2 <USBD_GetDescriptor+0x2ca>
 800fc1e:	a201      	add	r2, pc, #4	@ (adr r2, 800fc24 <USBD_GetDescriptor+0x2c>)
 800fc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc24:	0800fc95 	.word	0x0800fc95
 800fc28:	0800fcad 	.word	0x0800fcad
 800fc2c:	0800fced 	.word	0x0800fced
 800fc30:	0800fec3 	.word	0x0800fec3
 800fc34:	0800fec3 	.word	0x0800fec3
 800fc38:	0800fe63 	.word	0x0800fe63
 800fc3c:	0800fe8f 	.word	0x0800fe8f
 800fc40:	0800fec3 	.word	0x0800fec3
 800fc44:	0800fec3 	.word	0x0800fec3
 800fc48:	0800fec3 	.word	0x0800fec3
 800fc4c:	0800fec3 	.word	0x0800fec3
 800fc50:	0800fec3 	.word	0x0800fec3
 800fc54:	0800fec3 	.word	0x0800fec3
 800fc58:	0800fec3 	.word	0x0800fec3
 800fc5c:	0800fc61 	.word	0x0800fc61
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc66:	69db      	ldr	r3, [r3, #28]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d00b      	beq.n	800fc84 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc72:	69db      	ldr	r3, [r3, #28]
 800fc74:	687a      	ldr	r2, [r7, #4]
 800fc76:	7c12      	ldrb	r2, [r2, #16]
 800fc78:	f107 0108 	add.w	r1, r7, #8
 800fc7c:	4610      	mov	r0, r2
 800fc7e:	4798      	blx	r3
 800fc80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fc82:	e126      	b.n	800fed2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fc84:	6839      	ldr	r1, [r7, #0]
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f000 fb0e 	bl	80102a8 <USBD_CtlError>
        err++;
 800fc8c:	7afb      	ldrb	r3, [r7, #11]
 800fc8e:	3301      	adds	r3, #1
 800fc90:	72fb      	strb	r3, [r7, #11]
      break;
 800fc92:	e11e      	b.n	800fed2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	687a      	ldr	r2, [r7, #4]
 800fc9e:	7c12      	ldrb	r2, [r2, #16]
 800fca0:	f107 0108 	add.w	r1, r7, #8
 800fca4:	4610      	mov	r0, r2
 800fca6:	4798      	blx	r3
 800fca8:	60f8      	str	r0, [r7, #12]
      break;
 800fcaa:	e112      	b.n	800fed2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	7c1b      	ldrb	r3, [r3, #16]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d10d      	bne.n	800fcd0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fcba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcbc:	f107 0208 	add.w	r2, r7, #8
 800fcc0:	4610      	mov	r0, r2
 800fcc2:	4798      	blx	r3
 800fcc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	3301      	adds	r3, #1
 800fcca:	2202      	movs	r2, #2
 800fccc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fcce:	e100      	b.n	800fed2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fcd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcd8:	f107 0208 	add.w	r2, r7, #8
 800fcdc:	4610      	mov	r0, r2
 800fcde:	4798      	blx	r3
 800fce0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	3301      	adds	r3, #1
 800fce6:	2202      	movs	r2, #2
 800fce8:	701a      	strb	r2, [r3, #0]
      break;
 800fcea:	e0f2      	b.n	800fed2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	885b      	ldrh	r3, [r3, #2]
 800fcf0:	b2db      	uxtb	r3, r3
 800fcf2:	2b05      	cmp	r3, #5
 800fcf4:	f200 80ac 	bhi.w	800fe50 <USBD_GetDescriptor+0x258>
 800fcf8:	a201      	add	r2, pc, #4	@ (adr r2, 800fd00 <USBD_GetDescriptor+0x108>)
 800fcfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcfe:	bf00      	nop
 800fd00:	0800fd19 	.word	0x0800fd19
 800fd04:	0800fd4d 	.word	0x0800fd4d
 800fd08:	0800fd81 	.word	0x0800fd81
 800fd0c:	0800fdb5 	.word	0x0800fdb5
 800fd10:	0800fde9 	.word	0x0800fde9
 800fd14:	0800fe1d 	.word	0x0800fe1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d00b      	beq.n	800fd3c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	687a      	ldr	r2, [r7, #4]
 800fd2e:	7c12      	ldrb	r2, [r2, #16]
 800fd30:	f107 0108 	add.w	r1, r7, #8
 800fd34:	4610      	mov	r0, r2
 800fd36:	4798      	blx	r3
 800fd38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd3a:	e091      	b.n	800fe60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd3c:	6839      	ldr	r1, [r7, #0]
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f000 fab2 	bl	80102a8 <USBD_CtlError>
            err++;
 800fd44:	7afb      	ldrb	r3, [r7, #11]
 800fd46:	3301      	adds	r3, #1
 800fd48:	72fb      	strb	r3, [r7, #11]
          break;
 800fd4a:	e089      	b.n	800fe60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd52:	689b      	ldr	r3, [r3, #8]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d00b      	beq.n	800fd70 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd5e:	689b      	ldr	r3, [r3, #8]
 800fd60:	687a      	ldr	r2, [r7, #4]
 800fd62:	7c12      	ldrb	r2, [r2, #16]
 800fd64:	f107 0108 	add.w	r1, r7, #8
 800fd68:	4610      	mov	r0, r2
 800fd6a:	4798      	blx	r3
 800fd6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fd6e:	e077      	b.n	800fe60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fd70:	6839      	ldr	r1, [r7, #0]
 800fd72:	6878      	ldr	r0, [r7, #4]
 800fd74:	f000 fa98 	bl	80102a8 <USBD_CtlError>
            err++;
 800fd78:	7afb      	ldrb	r3, [r7, #11]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	72fb      	strb	r3, [r7, #11]
          break;
 800fd7e:	e06f      	b.n	800fe60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd86:	68db      	ldr	r3, [r3, #12]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d00b      	beq.n	800fda4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd92:	68db      	ldr	r3, [r3, #12]
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	7c12      	ldrb	r2, [r2, #16]
 800fd98:	f107 0108 	add.w	r1, r7, #8
 800fd9c:	4610      	mov	r0, r2
 800fd9e:	4798      	blx	r3
 800fda0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fda2:	e05d      	b.n	800fe60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fda4:	6839      	ldr	r1, [r7, #0]
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 fa7e 	bl	80102a8 <USBD_CtlError>
            err++;
 800fdac:	7afb      	ldrb	r3, [r7, #11]
 800fdae:	3301      	adds	r3, #1
 800fdb0:	72fb      	strb	r3, [r7, #11]
          break;
 800fdb2:	e055      	b.n	800fe60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fdba:	691b      	ldr	r3, [r3, #16]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d00b      	beq.n	800fdd8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fdc6:	691b      	ldr	r3, [r3, #16]
 800fdc8:	687a      	ldr	r2, [r7, #4]
 800fdca:	7c12      	ldrb	r2, [r2, #16]
 800fdcc:	f107 0108 	add.w	r1, r7, #8
 800fdd0:	4610      	mov	r0, r2
 800fdd2:	4798      	blx	r3
 800fdd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fdd6:	e043      	b.n	800fe60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fdd8:	6839      	ldr	r1, [r7, #0]
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f000 fa64 	bl	80102a8 <USBD_CtlError>
            err++;
 800fde0:	7afb      	ldrb	r3, [r7, #11]
 800fde2:	3301      	adds	r3, #1
 800fde4:	72fb      	strb	r3, [r7, #11]
          break;
 800fde6:	e03b      	b.n	800fe60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fdee:	695b      	ldr	r3, [r3, #20]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d00b      	beq.n	800fe0c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fdfa:	695b      	ldr	r3, [r3, #20]
 800fdfc:	687a      	ldr	r2, [r7, #4]
 800fdfe:	7c12      	ldrb	r2, [r2, #16]
 800fe00:	f107 0108 	add.w	r1, r7, #8
 800fe04:	4610      	mov	r0, r2
 800fe06:	4798      	blx	r3
 800fe08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe0a:	e029      	b.n	800fe60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe0c:	6839      	ldr	r1, [r7, #0]
 800fe0e:	6878      	ldr	r0, [r7, #4]
 800fe10:	f000 fa4a 	bl	80102a8 <USBD_CtlError>
            err++;
 800fe14:	7afb      	ldrb	r3, [r7, #11]
 800fe16:	3301      	adds	r3, #1
 800fe18:	72fb      	strb	r3, [r7, #11]
          break;
 800fe1a:	e021      	b.n	800fe60 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe22:	699b      	ldr	r3, [r3, #24]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d00b      	beq.n	800fe40 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe2e:	699b      	ldr	r3, [r3, #24]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	7c12      	ldrb	r2, [r2, #16]
 800fe34:	f107 0108 	add.w	r1, r7, #8
 800fe38:	4610      	mov	r0, r2
 800fe3a:	4798      	blx	r3
 800fe3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe3e:	e00f      	b.n	800fe60 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe40:	6839      	ldr	r1, [r7, #0]
 800fe42:	6878      	ldr	r0, [r7, #4]
 800fe44:	f000 fa30 	bl	80102a8 <USBD_CtlError>
            err++;
 800fe48:	7afb      	ldrb	r3, [r7, #11]
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	72fb      	strb	r3, [r7, #11]
          break;
 800fe4e:	e007      	b.n	800fe60 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fe50:	6839      	ldr	r1, [r7, #0]
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f000 fa28 	bl	80102a8 <USBD_CtlError>
          err++;
 800fe58:	7afb      	ldrb	r3, [r7, #11]
 800fe5a:	3301      	adds	r3, #1
 800fe5c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800fe5e:	bf00      	nop
      }
      break;
 800fe60:	e037      	b.n	800fed2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	7c1b      	ldrb	r3, [r3, #16]
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d109      	bne.n	800fe7e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe72:	f107 0208 	add.w	r2, r7, #8
 800fe76:	4610      	mov	r0, r2
 800fe78:	4798      	blx	r3
 800fe7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fe7c:	e029      	b.n	800fed2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fe7e:	6839      	ldr	r1, [r7, #0]
 800fe80:	6878      	ldr	r0, [r7, #4]
 800fe82:	f000 fa11 	bl	80102a8 <USBD_CtlError>
        err++;
 800fe86:	7afb      	ldrb	r3, [r7, #11]
 800fe88:	3301      	adds	r3, #1
 800fe8a:	72fb      	strb	r3, [r7, #11]
      break;
 800fe8c:	e021      	b.n	800fed2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	7c1b      	ldrb	r3, [r3, #16]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d10d      	bne.n	800feb2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe9e:	f107 0208 	add.w	r2, r7, #8
 800fea2:	4610      	mov	r0, r2
 800fea4:	4798      	blx	r3
 800fea6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	3301      	adds	r3, #1
 800feac:	2207      	movs	r2, #7
 800feae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800feb0:	e00f      	b.n	800fed2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800feb2:	6839      	ldr	r1, [r7, #0]
 800feb4:	6878      	ldr	r0, [r7, #4]
 800feb6:	f000 f9f7 	bl	80102a8 <USBD_CtlError>
        err++;
 800feba:	7afb      	ldrb	r3, [r7, #11]
 800febc:	3301      	adds	r3, #1
 800febe:	72fb      	strb	r3, [r7, #11]
      break;
 800fec0:	e007      	b.n	800fed2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fec2:	6839      	ldr	r1, [r7, #0]
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 f9ef 	bl	80102a8 <USBD_CtlError>
      err++;
 800feca:	7afb      	ldrb	r3, [r7, #11]
 800fecc:	3301      	adds	r3, #1
 800fece:	72fb      	strb	r3, [r7, #11]
      break;
 800fed0:	bf00      	nop
  }

  if (err != 0U)
 800fed2:	7afb      	ldrb	r3, [r7, #11]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d11e      	bne.n	800ff16 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	88db      	ldrh	r3, [r3, #6]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d016      	beq.n	800ff0e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fee0:	893b      	ldrh	r3, [r7, #8]
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d00e      	beq.n	800ff04 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	88da      	ldrh	r2, [r3, #6]
 800feea:	893b      	ldrh	r3, [r7, #8]
 800feec:	4293      	cmp	r3, r2
 800feee:	bf28      	it	cs
 800fef0:	4613      	movcs	r3, r2
 800fef2:	b29b      	uxth	r3, r3
 800fef4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fef6:	893b      	ldrh	r3, [r7, #8]
 800fef8:	461a      	mov	r2, r3
 800fefa:	68f9      	ldr	r1, [r7, #12]
 800fefc:	6878      	ldr	r0, [r7, #4]
 800fefe:	f000 fa44 	bl	801038a <USBD_CtlSendData>
 800ff02:	e009      	b.n	800ff18 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ff04:	6839      	ldr	r1, [r7, #0]
 800ff06:	6878      	ldr	r0, [r7, #4]
 800ff08:	f000 f9ce 	bl	80102a8 <USBD_CtlError>
 800ff0c:	e004      	b.n	800ff18 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f000 fa95 	bl	801043e <USBD_CtlSendStatus>
 800ff14:	e000      	b.n	800ff18 <USBD_GetDescriptor+0x320>
    return;
 800ff16:	bf00      	nop
  }
}
 800ff18:	3710      	adds	r7, #16
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	bd80      	pop	{r7, pc}
 800ff1e:	bf00      	nop

0800ff20 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b084      	sub	sp, #16
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	889b      	ldrh	r3, [r3, #4]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d131      	bne.n	800ff96 <USBD_SetAddress+0x76>
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	88db      	ldrh	r3, [r3, #6]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d12d      	bne.n	800ff96 <USBD_SetAddress+0x76>
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	885b      	ldrh	r3, [r3, #2]
 800ff3e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ff40:	d829      	bhi.n	800ff96 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	885b      	ldrh	r3, [r3, #2]
 800ff46:	b2db      	uxtb	r3, r3
 800ff48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff4c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff54:	b2db      	uxtb	r3, r3
 800ff56:	2b03      	cmp	r3, #3
 800ff58:	d104      	bne.n	800ff64 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ff5a:	6839      	ldr	r1, [r7, #0]
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f000 f9a3 	bl	80102a8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff62:	e01d      	b.n	800ffa0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	7bfa      	ldrb	r2, [r7, #15]
 800ff68:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ff6c:	7bfb      	ldrb	r3, [r7, #15]
 800ff6e:	4619      	mov	r1, r3
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f000 feb7 	bl	8010ce4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f000 fa61 	bl	801043e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ff7c:	7bfb      	ldrb	r3, [r7, #15]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d004      	beq.n	800ff8c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2202      	movs	r2, #2
 800ff86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff8a:	e009      	b.n	800ffa0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2201      	movs	r2, #1
 800ff90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff94:	e004      	b.n	800ffa0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ff96:	6839      	ldr	r1, [r7, #0]
 800ff98:	6878      	ldr	r0, [r7, #4]
 800ff9a:	f000 f985 	bl	80102a8 <USBD_CtlError>
  }
}
 800ff9e:	bf00      	nop
 800ffa0:	bf00      	nop
 800ffa2:	3710      	adds	r7, #16
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}

0800ffa8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b084      	sub	sp, #16
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]
 800ffb0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	885b      	ldrh	r3, [r3, #2]
 800ffba:	b2da      	uxtb	r2, r3
 800ffbc:	4b4c      	ldr	r3, [pc, #304]	@ (80100f0 <USBD_SetConfig+0x148>)
 800ffbe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ffc0:	4b4b      	ldr	r3, [pc, #300]	@ (80100f0 <USBD_SetConfig+0x148>)
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d905      	bls.n	800ffd4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ffc8:	6839      	ldr	r1, [r7, #0]
 800ffca:	6878      	ldr	r0, [r7, #4]
 800ffcc:	f000 f96c 	bl	80102a8 <USBD_CtlError>
    return USBD_FAIL;
 800ffd0:	2303      	movs	r3, #3
 800ffd2:	e088      	b.n	80100e6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffda:	b2db      	uxtb	r3, r3
 800ffdc:	2b02      	cmp	r3, #2
 800ffde:	d002      	beq.n	800ffe6 <USBD_SetConfig+0x3e>
 800ffe0:	2b03      	cmp	r3, #3
 800ffe2:	d025      	beq.n	8010030 <USBD_SetConfig+0x88>
 800ffe4:	e071      	b.n	80100ca <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ffe6:	4b42      	ldr	r3, [pc, #264]	@ (80100f0 <USBD_SetConfig+0x148>)
 800ffe8:	781b      	ldrb	r3, [r3, #0]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d01c      	beq.n	8010028 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ffee:	4b40      	ldr	r3, [pc, #256]	@ (80100f0 <USBD_SetConfig+0x148>)
 800fff0:	781b      	ldrb	r3, [r3, #0]
 800fff2:	461a      	mov	r2, r3
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fff8:	4b3d      	ldr	r3, [pc, #244]	@ (80100f0 <USBD_SetConfig+0x148>)
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	4619      	mov	r1, r3
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f7ff f992 	bl	800f328 <USBD_SetClassConfig>
 8010004:	4603      	mov	r3, r0
 8010006:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010008:	7bfb      	ldrb	r3, [r7, #15]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d004      	beq.n	8010018 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801000e:	6839      	ldr	r1, [r7, #0]
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f000 f949 	bl	80102a8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010016:	e065      	b.n	80100e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010018:	6878      	ldr	r0, [r7, #4]
 801001a:	f000 fa10 	bl	801043e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	2203      	movs	r2, #3
 8010022:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010026:	e05d      	b.n	80100e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f000 fa08 	bl	801043e <USBD_CtlSendStatus>
      break;
 801002e:	e059      	b.n	80100e4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010030:	4b2f      	ldr	r3, [pc, #188]	@ (80100f0 <USBD_SetConfig+0x148>)
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	2b00      	cmp	r3, #0
 8010036:	d112      	bne.n	801005e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2202      	movs	r2, #2
 801003c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010040:	4b2b      	ldr	r3, [pc, #172]	@ (80100f0 <USBD_SetConfig+0x148>)
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	461a      	mov	r2, r3
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801004a:	4b29      	ldr	r3, [pc, #164]	@ (80100f0 <USBD_SetConfig+0x148>)
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	4619      	mov	r1, r3
 8010050:	6878      	ldr	r0, [r7, #4]
 8010052:	f7ff f985 	bl	800f360 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f000 f9f1 	bl	801043e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801005c:	e042      	b.n	80100e4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801005e:	4b24      	ldr	r3, [pc, #144]	@ (80100f0 <USBD_SetConfig+0x148>)
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	461a      	mov	r2, r3
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	685b      	ldr	r3, [r3, #4]
 8010068:	429a      	cmp	r2, r3
 801006a:	d02a      	beq.n	80100c2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	b2db      	uxtb	r3, r3
 8010072:	4619      	mov	r1, r3
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f7ff f973 	bl	800f360 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801007a:	4b1d      	ldr	r3, [pc, #116]	@ (80100f0 <USBD_SetConfig+0x148>)
 801007c:	781b      	ldrb	r3, [r3, #0]
 801007e:	461a      	mov	r2, r3
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010084:	4b1a      	ldr	r3, [pc, #104]	@ (80100f0 <USBD_SetConfig+0x148>)
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	4619      	mov	r1, r3
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f7ff f94c 	bl	800f328 <USBD_SetClassConfig>
 8010090:	4603      	mov	r3, r0
 8010092:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010094:	7bfb      	ldrb	r3, [r7, #15]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d00f      	beq.n	80100ba <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 801009a:	6839      	ldr	r1, [r7, #0]
 801009c:	6878      	ldr	r0, [r7, #4]
 801009e:	f000 f903 	bl	80102a8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	b2db      	uxtb	r3, r3
 80100a8:	4619      	mov	r1, r3
 80100aa:	6878      	ldr	r0, [r7, #4]
 80100ac:	f7ff f958 	bl	800f360 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2202      	movs	r2, #2
 80100b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80100b8:	e014      	b.n	80100e4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f000 f9bf 	bl	801043e <USBD_CtlSendStatus>
      break;
 80100c0:	e010      	b.n	80100e4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80100c2:	6878      	ldr	r0, [r7, #4]
 80100c4:	f000 f9bb 	bl	801043e <USBD_CtlSendStatus>
      break;
 80100c8:	e00c      	b.n	80100e4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80100ca:	6839      	ldr	r1, [r7, #0]
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f000 f8eb 	bl	80102a8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80100d2:	4b07      	ldr	r3, [pc, #28]	@ (80100f0 <USBD_SetConfig+0x148>)
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	4619      	mov	r1, r3
 80100d8:	6878      	ldr	r0, [r7, #4]
 80100da:	f7ff f941 	bl	800f360 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80100de:	2303      	movs	r3, #3
 80100e0:	73fb      	strb	r3, [r7, #15]
      break;
 80100e2:	bf00      	nop
  }

  return ret;
 80100e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	3710      	adds	r7, #16
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}
 80100ee:	bf00      	nop
 80100f0:	20000bc8 	.word	0x20000bc8

080100f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	88db      	ldrh	r3, [r3, #6]
 8010102:	2b01      	cmp	r3, #1
 8010104:	d004      	beq.n	8010110 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010106:	6839      	ldr	r1, [r7, #0]
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f000 f8cd 	bl	80102a8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801010e:	e023      	b.n	8010158 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010116:	b2db      	uxtb	r3, r3
 8010118:	2b02      	cmp	r3, #2
 801011a:	dc02      	bgt.n	8010122 <USBD_GetConfig+0x2e>
 801011c:	2b00      	cmp	r3, #0
 801011e:	dc03      	bgt.n	8010128 <USBD_GetConfig+0x34>
 8010120:	e015      	b.n	801014e <USBD_GetConfig+0x5a>
 8010122:	2b03      	cmp	r3, #3
 8010124:	d00b      	beq.n	801013e <USBD_GetConfig+0x4a>
 8010126:	e012      	b.n	801014e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2200      	movs	r2, #0
 801012c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	3308      	adds	r3, #8
 8010132:	2201      	movs	r2, #1
 8010134:	4619      	mov	r1, r3
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f000 f927 	bl	801038a <USBD_CtlSendData>
        break;
 801013c:	e00c      	b.n	8010158 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	3304      	adds	r3, #4
 8010142:	2201      	movs	r2, #1
 8010144:	4619      	mov	r1, r3
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f000 f91f 	bl	801038a <USBD_CtlSendData>
        break;
 801014c:	e004      	b.n	8010158 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801014e:	6839      	ldr	r1, [r7, #0]
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f000 f8a9 	bl	80102a8 <USBD_CtlError>
        break;
 8010156:	bf00      	nop
}
 8010158:	bf00      	nop
 801015a:	3708      	adds	r7, #8
 801015c:	46bd      	mov	sp, r7
 801015e:	bd80      	pop	{r7, pc}

08010160 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
 8010168:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010170:	b2db      	uxtb	r3, r3
 8010172:	3b01      	subs	r3, #1
 8010174:	2b02      	cmp	r3, #2
 8010176:	d81e      	bhi.n	80101b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	88db      	ldrh	r3, [r3, #6]
 801017c:	2b02      	cmp	r3, #2
 801017e:	d004      	beq.n	801018a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010180:	6839      	ldr	r1, [r7, #0]
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	f000 f890 	bl	80102a8 <USBD_CtlError>
        break;
 8010188:	e01a      	b.n	80101c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2201      	movs	r2, #1
 801018e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010196:	2b00      	cmp	r3, #0
 8010198:	d005      	beq.n	80101a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	68db      	ldr	r3, [r3, #12]
 801019e:	f043 0202 	orr.w	r2, r3, #2
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	330c      	adds	r3, #12
 80101aa:	2202      	movs	r2, #2
 80101ac:	4619      	mov	r1, r3
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f000 f8eb 	bl	801038a <USBD_CtlSendData>
      break;
 80101b4:	e004      	b.n	80101c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80101b6:	6839      	ldr	r1, [r7, #0]
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 f875 	bl	80102a8 <USBD_CtlError>
      break;
 80101be:	bf00      	nop
  }
}
 80101c0:	bf00      	nop
 80101c2:	3708      	adds	r7, #8
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	885b      	ldrh	r3, [r3, #2]
 80101d6:	2b01      	cmp	r3, #1
 80101d8:	d106      	bne.n	80101e8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2201      	movs	r2, #1
 80101de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f000 f92b 	bl	801043e <USBD_CtlSendStatus>
  }
}
 80101e8:	bf00      	nop
 80101ea:	3708      	adds	r7, #8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b082      	sub	sp, #8
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010200:	b2db      	uxtb	r3, r3
 8010202:	3b01      	subs	r3, #1
 8010204:	2b02      	cmp	r3, #2
 8010206:	d80b      	bhi.n	8010220 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	885b      	ldrh	r3, [r3, #2]
 801020c:	2b01      	cmp	r3, #1
 801020e:	d10c      	bne.n	801022a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2200      	movs	r2, #0
 8010214:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010218:	6878      	ldr	r0, [r7, #4]
 801021a:	f000 f910 	bl	801043e <USBD_CtlSendStatus>
      }
      break;
 801021e:	e004      	b.n	801022a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010220:	6839      	ldr	r1, [r7, #0]
 8010222:	6878      	ldr	r0, [r7, #4]
 8010224:	f000 f840 	bl	80102a8 <USBD_CtlError>
      break;
 8010228:	e000      	b.n	801022c <USBD_ClrFeature+0x3c>
      break;
 801022a:	bf00      	nop
  }
}
 801022c:	bf00      	nop
 801022e:	3708      	adds	r7, #8
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b084      	sub	sp, #16
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	781a      	ldrb	r2, [r3, #0]
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	3301      	adds	r3, #1
 801024e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	781a      	ldrb	r2, [r3, #0]
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	3301      	adds	r3, #1
 801025c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801025e:	68f8      	ldr	r0, [r7, #12]
 8010260:	f7ff fa92 	bl	800f788 <SWAPBYTE>
 8010264:	4603      	mov	r3, r0
 8010266:	461a      	mov	r2, r3
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	3301      	adds	r3, #1
 8010270:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	3301      	adds	r3, #1
 8010276:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010278:	68f8      	ldr	r0, [r7, #12]
 801027a:	f7ff fa85 	bl	800f788 <SWAPBYTE>
 801027e:	4603      	mov	r3, r0
 8010280:	461a      	mov	r2, r3
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	3301      	adds	r3, #1
 801028a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	3301      	adds	r3, #1
 8010290:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010292:	68f8      	ldr	r0, [r7, #12]
 8010294:	f7ff fa78 	bl	800f788 <SWAPBYTE>
 8010298:	4603      	mov	r3, r0
 801029a:	461a      	mov	r2, r3
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	80da      	strh	r2, [r3, #6]
}
 80102a0:	bf00      	nop
 80102a2:	3710      	adds	r7, #16
 80102a4:	46bd      	mov	sp, r7
 80102a6:	bd80      	pop	{r7, pc}

080102a8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b082      	sub	sp, #8
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80102b2:	2180      	movs	r1, #128	@ 0x80
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f000 fcab 	bl	8010c10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80102ba:	2100      	movs	r1, #0
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f000 fca7 	bl	8010c10 <USBD_LL_StallEP>
}
 80102c2:	bf00      	nop
 80102c4:	3708      	adds	r7, #8
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}

080102ca <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80102ca:	b580      	push	{r7, lr}
 80102cc:	b086      	sub	sp, #24
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	60f8      	str	r0, [r7, #12]
 80102d2:	60b9      	str	r1, [r7, #8]
 80102d4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80102d6:	2300      	movs	r3, #0
 80102d8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d036      	beq.n	801034e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80102e4:	6938      	ldr	r0, [r7, #16]
 80102e6:	f000 f836 	bl	8010356 <USBD_GetLen>
 80102ea:	4603      	mov	r3, r0
 80102ec:	3301      	adds	r3, #1
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	005b      	lsls	r3, r3, #1
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80102f8:	7dfb      	ldrb	r3, [r7, #23]
 80102fa:	68ba      	ldr	r2, [r7, #8]
 80102fc:	4413      	add	r3, r2
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	7812      	ldrb	r2, [r2, #0]
 8010302:	701a      	strb	r2, [r3, #0]
  idx++;
 8010304:	7dfb      	ldrb	r3, [r7, #23]
 8010306:	3301      	adds	r3, #1
 8010308:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801030a:	7dfb      	ldrb	r3, [r7, #23]
 801030c:	68ba      	ldr	r2, [r7, #8]
 801030e:	4413      	add	r3, r2
 8010310:	2203      	movs	r2, #3
 8010312:	701a      	strb	r2, [r3, #0]
  idx++;
 8010314:	7dfb      	ldrb	r3, [r7, #23]
 8010316:	3301      	adds	r3, #1
 8010318:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801031a:	e013      	b.n	8010344 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801031c:	7dfb      	ldrb	r3, [r7, #23]
 801031e:	68ba      	ldr	r2, [r7, #8]
 8010320:	4413      	add	r3, r2
 8010322:	693a      	ldr	r2, [r7, #16]
 8010324:	7812      	ldrb	r2, [r2, #0]
 8010326:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	3301      	adds	r3, #1
 801032c:	613b      	str	r3, [r7, #16]
    idx++;
 801032e:	7dfb      	ldrb	r3, [r7, #23]
 8010330:	3301      	adds	r3, #1
 8010332:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010334:	7dfb      	ldrb	r3, [r7, #23]
 8010336:	68ba      	ldr	r2, [r7, #8]
 8010338:	4413      	add	r3, r2
 801033a:	2200      	movs	r2, #0
 801033c:	701a      	strb	r2, [r3, #0]
    idx++;
 801033e:	7dfb      	ldrb	r3, [r7, #23]
 8010340:	3301      	adds	r3, #1
 8010342:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	781b      	ldrb	r3, [r3, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d1e7      	bne.n	801031c <USBD_GetString+0x52>
 801034c:	e000      	b.n	8010350 <USBD_GetString+0x86>
    return;
 801034e:	bf00      	nop
  }
}
 8010350:	3718      	adds	r7, #24
 8010352:	46bd      	mov	sp, r7
 8010354:	bd80      	pop	{r7, pc}

08010356 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010356:	b480      	push	{r7}
 8010358:	b085      	sub	sp, #20
 801035a:	af00      	add	r7, sp, #0
 801035c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801035e:	2300      	movs	r3, #0
 8010360:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010366:	e005      	b.n	8010374 <USBD_GetLen+0x1e>
  {
    len++;
 8010368:	7bfb      	ldrb	r3, [r7, #15]
 801036a:	3301      	adds	r3, #1
 801036c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	3301      	adds	r3, #1
 8010372:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d1f5      	bne.n	8010368 <USBD_GetLen+0x12>
  }

  return len;
 801037c:	7bfb      	ldrb	r3, [r7, #15]
}
 801037e:	4618      	mov	r0, r3
 8010380:	3714      	adds	r7, #20
 8010382:	46bd      	mov	sp, r7
 8010384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010388:	4770      	bx	lr

0801038a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801038a:	b580      	push	{r7, lr}
 801038c:	b084      	sub	sp, #16
 801038e:	af00      	add	r7, sp, #0
 8010390:	60f8      	str	r0, [r7, #12]
 8010392:	60b9      	str	r1, [r7, #8]
 8010394:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	2202      	movs	r2, #2
 801039a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	687a      	ldr	r2, [r7, #4]
 80103a8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	68ba      	ldr	r2, [r7, #8]
 80103ae:	2100      	movs	r1, #0
 80103b0:	68f8      	ldr	r0, [r7, #12]
 80103b2:	f000 fcb6 	bl	8010d22 <USBD_LL_Transmit>

  return USBD_OK;
 80103b6:	2300      	movs	r3, #0
}
 80103b8:	4618      	mov	r0, r3
 80103ba:	3710      	adds	r7, #16
 80103bc:	46bd      	mov	sp, r7
 80103be:	bd80      	pop	{r7, pc}

080103c0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	60f8      	str	r0, [r7, #12]
 80103c8:	60b9      	str	r1, [r7, #8]
 80103ca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	68ba      	ldr	r2, [r7, #8]
 80103d0:	2100      	movs	r1, #0
 80103d2:	68f8      	ldr	r0, [r7, #12]
 80103d4:	f000 fca5 	bl	8010d22 <USBD_LL_Transmit>

  return USBD_OK;
 80103d8:	2300      	movs	r3, #0
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3710      	adds	r7, #16
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}

080103e2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80103e2:	b580      	push	{r7, lr}
 80103e4:	b084      	sub	sp, #16
 80103e6:	af00      	add	r7, sp, #0
 80103e8:	60f8      	str	r0, [r7, #12]
 80103ea:	60b9      	str	r1, [r7, #8]
 80103ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	2203      	movs	r2, #3
 80103f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	687a      	ldr	r2, [r7, #4]
 80103fa:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	687a      	ldr	r2, [r7, #4]
 8010402:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	68ba      	ldr	r2, [r7, #8]
 801040a:	2100      	movs	r1, #0
 801040c:	68f8      	ldr	r0, [r7, #12]
 801040e:	f000 fca9 	bl	8010d64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010412:	2300      	movs	r3, #0
}
 8010414:	4618      	mov	r0, r3
 8010416:	3710      	adds	r7, #16
 8010418:	46bd      	mov	sp, r7
 801041a:	bd80      	pop	{r7, pc}

0801041c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	b084      	sub	sp, #16
 8010420:	af00      	add	r7, sp, #0
 8010422:	60f8      	str	r0, [r7, #12]
 8010424:	60b9      	str	r1, [r7, #8]
 8010426:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	68ba      	ldr	r2, [r7, #8]
 801042c:	2100      	movs	r1, #0
 801042e:	68f8      	ldr	r0, [r7, #12]
 8010430:	f000 fc98 	bl	8010d64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010434:	2300      	movs	r3, #0
}
 8010436:	4618      	mov	r0, r3
 8010438:	3710      	adds	r7, #16
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}

0801043e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801043e:	b580      	push	{r7, lr}
 8010440:	b082      	sub	sp, #8
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2204      	movs	r2, #4
 801044a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801044e:	2300      	movs	r3, #0
 8010450:	2200      	movs	r2, #0
 8010452:	2100      	movs	r1, #0
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f000 fc64 	bl	8010d22 <USBD_LL_Transmit>

  return USBD_OK;
 801045a:	2300      	movs	r3, #0
}
 801045c:	4618      	mov	r0, r3
 801045e:	3708      	adds	r7, #8
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}

08010464 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2205      	movs	r2, #5
 8010470:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010474:	2300      	movs	r3, #0
 8010476:	2200      	movs	r2, #0
 8010478:	2100      	movs	r1, #0
 801047a:	6878      	ldr	r0, [r7, #4]
 801047c:	f000 fc72 	bl	8010d64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010480:	2300      	movs	r3, #0
}
 8010482:	4618      	mov	r0, r3
 8010484:	3708      	adds	r7, #8
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}
	...

0801048c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010490:	2200      	movs	r2, #0
 8010492:	4912      	ldr	r1, [pc, #72]	@ (80104dc <MX_USB_Device_Init+0x50>)
 8010494:	4812      	ldr	r0, [pc, #72]	@ (80104e0 <MX_USB_Device_Init+0x54>)
 8010496:	f7fe fed9 	bl	800f24c <USBD_Init>
 801049a:	4603      	mov	r3, r0
 801049c:	2b00      	cmp	r3, #0
 801049e:	d001      	beq.n	80104a4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80104a0:	f7f3 fabe 	bl	8003a20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80104a4:	490f      	ldr	r1, [pc, #60]	@ (80104e4 <MX_USB_Device_Init+0x58>)
 80104a6:	480e      	ldr	r0, [pc, #56]	@ (80104e0 <MX_USB_Device_Init+0x54>)
 80104a8:	f7fe ff00 	bl	800f2ac <USBD_RegisterClass>
 80104ac:	4603      	mov	r3, r0
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d001      	beq.n	80104b6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80104b2:	f7f3 fab5 	bl	8003a20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80104b6:	490c      	ldr	r1, [pc, #48]	@ (80104e8 <MX_USB_Device_Init+0x5c>)
 80104b8:	4809      	ldr	r0, [pc, #36]	@ (80104e0 <MX_USB_Device_Init+0x54>)
 80104ba:	f7fe fe21 	bl	800f100 <USBD_CDC_RegisterInterface>
 80104be:	4603      	mov	r3, r0
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d001      	beq.n	80104c8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80104c4:	f7f3 faac 	bl	8003a20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80104c8:	4805      	ldr	r0, [pc, #20]	@ (80104e0 <MX_USB_Device_Init+0x54>)
 80104ca:	f7fe ff16 	bl	800f2fa <USBD_Start>
 80104ce:	4603      	mov	r3, r0
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d001      	beq.n	80104d8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80104d4:	f7f3 faa4 	bl	8003a20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80104d8:	bf00      	nop
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	20000184 	.word	0x20000184
 80104e0:	20000bcc 	.word	0x20000bcc
 80104e4:	2000006c 	.word	0x2000006c
 80104e8:	20000170 	.word	0x20000170

080104ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80104f0:	2200      	movs	r2, #0
 80104f2:	4905      	ldr	r1, [pc, #20]	@ (8010508 <CDC_Init_FS+0x1c>)
 80104f4:	4805      	ldr	r0, [pc, #20]	@ (801050c <CDC_Init_FS+0x20>)
 80104f6:	f7fe fe18 	bl	800f12a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80104fa:	4905      	ldr	r1, [pc, #20]	@ (8010510 <CDC_Init_FS+0x24>)
 80104fc:	4803      	ldr	r0, [pc, #12]	@ (801050c <CDC_Init_FS+0x20>)
 80104fe:	f7fe fe32 	bl	800f166 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010502:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010504:	4618      	mov	r0, r3
 8010506:	bd80      	pop	{r7, pc}
 8010508:	2000169c 	.word	0x2000169c
 801050c:	20000bcc 	.word	0x20000bcc
 8010510:	20000e9c 	.word	0x20000e9c

08010514 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010514:	b480      	push	{r7}
 8010516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010518:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801051a:	4618      	mov	r0, r3
 801051c:	46bd      	mov	sp, r7
 801051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010522:	4770      	bx	lr

08010524 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010524:	b480      	push	{r7}
 8010526:	b083      	sub	sp, #12
 8010528:	af00      	add	r7, sp, #0
 801052a:	4603      	mov	r3, r0
 801052c:	6039      	str	r1, [r7, #0]
 801052e:	71fb      	strb	r3, [r7, #7]
 8010530:	4613      	mov	r3, r2
 8010532:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010534:	79fb      	ldrb	r3, [r7, #7]
 8010536:	2b23      	cmp	r3, #35	@ 0x23
 8010538:	d84a      	bhi.n	80105d0 <CDC_Control_FS+0xac>
 801053a:	a201      	add	r2, pc, #4	@ (adr r2, 8010540 <CDC_Control_FS+0x1c>)
 801053c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010540:	080105d1 	.word	0x080105d1
 8010544:	080105d1 	.word	0x080105d1
 8010548:	080105d1 	.word	0x080105d1
 801054c:	080105d1 	.word	0x080105d1
 8010550:	080105d1 	.word	0x080105d1
 8010554:	080105d1 	.word	0x080105d1
 8010558:	080105d1 	.word	0x080105d1
 801055c:	080105d1 	.word	0x080105d1
 8010560:	080105d1 	.word	0x080105d1
 8010564:	080105d1 	.word	0x080105d1
 8010568:	080105d1 	.word	0x080105d1
 801056c:	080105d1 	.word	0x080105d1
 8010570:	080105d1 	.word	0x080105d1
 8010574:	080105d1 	.word	0x080105d1
 8010578:	080105d1 	.word	0x080105d1
 801057c:	080105d1 	.word	0x080105d1
 8010580:	080105d1 	.word	0x080105d1
 8010584:	080105d1 	.word	0x080105d1
 8010588:	080105d1 	.word	0x080105d1
 801058c:	080105d1 	.word	0x080105d1
 8010590:	080105d1 	.word	0x080105d1
 8010594:	080105d1 	.word	0x080105d1
 8010598:	080105d1 	.word	0x080105d1
 801059c:	080105d1 	.word	0x080105d1
 80105a0:	080105d1 	.word	0x080105d1
 80105a4:	080105d1 	.word	0x080105d1
 80105a8:	080105d1 	.word	0x080105d1
 80105ac:	080105d1 	.word	0x080105d1
 80105b0:	080105d1 	.word	0x080105d1
 80105b4:	080105d1 	.word	0x080105d1
 80105b8:	080105d1 	.word	0x080105d1
 80105bc:	080105d1 	.word	0x080105d1
 80105c0:	080105d1 	.word	0x080105d1
 80105c4:	080105d1 	.word	0x080105d1
 80105c8:	080105d1 	.word	0x080105d1
 80105cc:	080105d1 	.word	0x080105d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80105d0:	bf00      	nop
  }

  return (USBD_OK);
 80105d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	370c      	adds	r7, #12
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr

080105e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
 80105e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > sizeof(USB_RX_Buffer)) {
 80105ea:	683b      	ldr	r3, [r7, #0]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80105f2:	d903      	bls.n	80105fc <CDC_Receive_FS+0x1c>
	          *Len = sizeof(USB_RX_Buffer);  // Prevent buffer overflow
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80105fa:	601a      	str	r2, [r3, #0]
	      }
	      memcpy(USB_RX_Buffer, Buf, *Len);
 80105fc:	683b      	ldr	r3, [r7, #0]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	461a      	mov	r2, r3
 8010602:	6879      	ldr	r1, [r7, #4]
 8010604:	4808      	ldr	r0, [pc, #32]	@ (8010628 <CDC_Receive_FS+0x48>)
 8010606:	f001 fcb0 	bl	8011f6a <memcpy>

	      dataReceivedFlag = 1;
 801060a:	4b08      	ldr	r3, [pc, #32]	@ (801062c <CDC_Receive_FS+0x4c>)
 801060c:	2201      	movs	r2, #1
 801060e:	601a      	str	r2, [r3, #0]

	      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010610:	6879      	ldr	r1, [r7, #4]
 8010612:	4807      	ldr	r0, [pc, #28]	@ (8010630 <CDC_Receive_FS+0x50>)
 8010614:	f7fe fda7 	bl	800f166 <USBD_CDC_SetRxBuffer>
	      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010618:	4805      	ldr	r0, [pc, #20]	@ (8010630 <CDC_Receive_FS+0x50>)
 801061a:	f7fe fded 	bl	800f1f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801061e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010620:	4618      	mov	r0, r3
 8010622:	3708      	adds	r7, #8
 8010624:	46bd      	mov	sp, r7
 8010626:	bd80      	pop	{r7, pc}
 8010628:	20000ab4 	.word	0x20000ab4
 801062c:	20000b74 	.word	0x20000b74
 8010630:	20000bcc 	.word	0x20000bcc

08010634 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010634:	b580      	push	{r7, lr}
 8010636:	b084      	sub	sp, #16
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	460b      	mov	r3, r1
 801063e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010640:	2300      	movs	r3, #0
 8010642:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010644:	4b0d      	ldr	r3, [pc, #52]	@ (801067c <CDC_Transmit_FS+0x48>)
 8010646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801064a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010652:	2b00      	cmp	r3, #0
 8010654:	d001      	beq.n	801065a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010656:	2301      	movs	r3, #1
 8010658:	e00b      	b.n	8010672 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801065a:	887b      	ldrh	r3, [r7, #2]
 801065c:	461a      	mov	r2, r3
 801065e:	6879      	ldr	r1, [r7, #4]
 8010660:	4806      	ldr	r0, [pc, #24]	@ (801067c <CDC_Transmit_FS+0x48>)
 8010662:	f7fe fd62 	bl	800f12a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010666:	4805      	ldr	r0, [pc, #20]	@ (801067c <CDC_Transmit_FS+0x48>)
 8010668:	f7fe fd96 	bl	800f198 <USBD_CDC_TransmitPacket>
 801066c:	4603      	mov	r3, r0
 801066e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010670:	7bfb      	ldrb	r3, [r7, #15]
}
 8010672:	4618      	mov	r0, r3
 8010674:	3710      	adds	r7, #16
 8010676:	46bd      	mov	sp, r7
 8010678:	bd80      	pop	{r7, pc}
 801067a:	bf00      	nop
 801067c:	20000bcc 	.word	0x20000bcc

08010680 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010680:	b480      	push	{r7}
 8010682:	b087      	sub	sp, #28
 8010684:	af00      	add	r7, sp, #0
 8010686:	60f8      	str	r0, [r7, #12]
 8010688:	60b9      	str	r1, [r7, #8]
 801068a:	4613      	mov	r3, r2
 801068c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801068e:	2300      	movs	r3, #0
 8010690:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010692:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010696:	4618      	mov	r0, r3
 8010698:	371c      	adds	r7, #28
 801069a:	46bd      	mov	sp, r7
 801069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a0:	4770      	bx	lr
	...

080106a4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106a4:	b480      	push	{r7}
 80106a6:	b083      	sub	sp, #12
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	4603      	mov	r3, r0
 80106ac:	6039      	str	r1, [r7, #0]
 80106ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	2212      	movs	r2, #18
 80106b4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80106b6:	4b03      	ldr	r3, [pc, #12]	@ (80106c4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80106b8:	4618      	mov	r0, r3
 80106ba:	370c      	adds	r7, #12
 80106bc:	46bd      	mov	sp, r7
 80106be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c2:	4770      	bx	lr
 80106c4:	200001a4 	.word	0x200001a4

080106c8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106c8:	b480      	push	{r7}
 80106ca:	b083      	sub	sp, #12
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	4603      	mov	r3, r0
 80106d0:	6039      	str	r1, [r7, #0]
 80106d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80106d4:	683b      	ldr	r3, [r7, #0]
 80106d6:	2204      	movs	r2, #4
 80106d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80106da:	4b03      	ldr	r3, [pc, #12]	@ (80106e8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80106dc:	4618      	mov	r0, r3
 80106de:	370c      	adds	r7, #12
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr
 80106e8:	200001b8 	.word	0x200001b8

080106ec <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	4603      	mov	r3, r0
 80106f4:	6039      	str	r1, [r7, #0]
 80106f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80106f8:	79fb      	ldrb	r3, [r7, #7]
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d105      	bne.n	801070a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80106fe:	683a      	ldr	r2, [r7, #0]
 8010700:	4907      	ldr	r1, [pc, #28]	@ (8010720 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010702:	4808      	ldr	r0, [pc, #32]	@ (8010724 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010704:	f7ff fde1 	bl	80102ca <USBD_GetString>
 8010708:	e004      	b.n	8010714 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801070a:	683a      	ldr	r2, [r7, #0]
 801070c:	4904      	ldr	r1, [pc, #16]	@ (8010720 <USBD_CDC_ProductStrDescriptor+0x34>)
 801070e:	4805      	ldr	r0, [pc, #20]	@ (8010724 <USBD_CDC_ProductStrDescriptor+0x38>)
 8010710:	f7ff fddb 	bl	80102ca <USBD_GetString>
  }
  return USBD_StrDesc;
 8010714:	4b02      	ldr	r3, [pc, #8]	@ (8010720 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8010716:	4618      	mov	r0, r3
 8010718:	3708      	adds	r7, #8
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
 801071e:	bf00      	nop
 8010720:	20001e9c 	.word	0x20001e9c
 8010724:	0801702c 	.word	0x0801702c

08010728 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b082      	sub	sp, #8
 801072c:	af00      	add	r7, sp, #0
 801072e:	4603      	mov	r3, r0
 8010730:	6039      	str	r1, [r7, #0]
 8010732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010734:	683a      	ldr	r2, [r7, #0]
 8010736:	4904      	ldr	r1, [pc, #16]	@ (8010748 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8010738:	4804      	ldr	r0, [pc, #16]	@ (801074c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801073a:	f7ff fdc6 	bl	80102ca <USBD_GetString>
  return USBD_StrDesc;
 801073e:	4b02      	ldr	r3, [pc, #8]	@ (8010748 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010740:	4618      	mov	r0, r3
 8010742:	3708      	adds	r7, #8
 8010744:	46bd      	mov	sp, r7
 8010746:	bd80      	pop	{r7, pc}
 8010748:	20001e9c 	.word	0x20001e9c
 801074c:	08017044 	.word	0x08017044

08010750 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010750:	b580      	push	{r7, lr}
 8010752:	b082      	sub	sp, #8
 8010754:	af00      	add	r7, sp, #0
 8010756:	4603      	mov	r3, r0
 8010758:	6039      	str	r1, [r7, #0]
 801075a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	221a      	movs	r2, #26
 8010760:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010762:	f000 f843 	bl	80107ec <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010766:	4b02      	ldr	r3, [pc, #8]	@ (8010770 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8010768:	4618      	mov	r0, r3
 801076a:	3708      	adds	r7, #8
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}
 8010770:	200001bc 	.word	0x200001bc

08010774 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b082      	sub	sp, #8
 8010778:	af00      	add	r7, sp, #0
 801077a:	4603      	mov	r3, r0
 801077c:	6039      	str	r1, [r7, #0]
 801077e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010780:	79fb      	ldrb	r3, [r7, #7]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d105      	bne.n	8010792 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010786:	683a      	ldr	r2, [r7, #0]
 8010788:	4907      	ldr	r1, [pc, #28]	@ (80107a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801078a:	4808      	ldr	r0, [pc, #32]	@ (80107ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 801078c:	f7ff fd9d 	bl	80102ca <USBD_GetString>
 8010790:	e004      	b.n	801079c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8010792:	683a      	ldr	r2, [r7, #0]
 8010794:	4904      	ldr	r1, [pc, #16]	@ (80107a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010796:	4805      	ldr	r0, [pc, #20]	@ (80107ac <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010798:	f7ff fd97 	bl	80102ca <USBD_GetString>
  }
  return USBD_StrDesc;
 801079c:	4b02      	ldr	r3, [pc, #8]	@ (80107a8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 801079e:	4618      	mov	r0, r3
 80107a0:	3708      	adds	r7, #8
 80107a2:	46bd      	mov	sp, r7
 80107a4:	bd80      	pop	{r7, pc}
 80107a6:	bf00      	nop
 80107a8:	20001e9c 	.word	0x20001e9c
 80107ac:	08017058 	.word	0x08017058

080107b0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b082      	sub	sp, #8
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	4603      	mov	r3, r0
 80107b8:	6039      	str	r1, [r7, #0]
 80107ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80107bc:	79fb      	ldrb	r3, [r7, #7]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	d105      	bne.n	80107ce <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80107c2:	683a      	ldr	r2, [r7, #0]
 80107c4:	4907      	ldr	r1, [pc, #28]	@ (80107e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80107c6:	4808      	ldr	r0, [pc, #32]	@ (80107e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80107c8:	f7ff fd7f 	bl	80102ca <USBD_GetString>
 80107cc:	e004      	b.n	80107d8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80107ce:	683a      	ldr	r2, [r7, #0]
 80107d0:	4904      	ldr	r1, [pc, #16]	@ (80107e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80107d2:	4805      	ldr	r0, [pc, #20]	@ (80107e8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80107d4:	f7ff fd79 	bl	80102ca <USBD_GetString>
  }
  return USBD_StrDesc;
 80107d8:	4b02      	ldr	r3, [pc, #8]	@ (80107e4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3708      	adds	r7, #8
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	20001e9c 	.word	0x20001e9c
 80107e8:	08017064 	.word	0x08017064

080107ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b084      	sub	sp, #16
 80107f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80107f2:	4b0f      	ldr	r3, [pc, #60]	@ (8010830 <Get_SerialNum+0x44>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80107f8:	4b0e      	ldr	r3, [pc, #56]	@ (8010834 <Get_SerialNum+0x48>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80107fe:	4b0e      	ldr	r3, [pc, #56]	@ (8010838 <Get_SerialNum+0x4c>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010804:	68fa      	ldr	r2, [r7, #12]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	4413      	add	r3, r2
 801080a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d009      	beq.n	8010826 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010812:	2208      	movs	r2, #8
 8010814:	4909      	ldr	r1, [pc, #36]	@ (801083c <Get_SerialNum+0x50>)
 8010816:	68f8      	ldr	r0, [r7, #12]
 8010818:	f000 f814 	bl	8010844 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801081c:	2204      	movs	r2, #4
 801081e:	4908      	ldr	r1, [pc, #32]	@ (8010840 <Get_SerialNum+0x54>)
 8010820:	68b8      	ldr	r0, [r7, #8]
 8010822:	f000 f80f 	bl	8010844 <IntToUnicode>
  }
}
 8010826:	bf00      	nop
 8010828:	3710      	adds	r7, #16
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	1fff7590 	.word	0x1fff7590
 8010834:	1fff7594 	.word	0x1fff7594
 8010838:	1fff7598 	.word	0x1fff7598
 801083c:	200001be 	.word	0x200001be
 8010840:	200001ce 	.word	0x200001ce

08010844 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010844:	b480      	push	{r7}
 8010846:	b087      	sub	sp, #28
 8010848:	af00      	add	r7, sp, #0
 801084a:	60f8      	str	r0, [r7, #12]
 801084c:	60b9      	str	r1, [r7, #8]
 801084e:	4613      	mov	r3, r2
 8010850:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010852:	2300      	movs	r3, #0
 8010854:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010856:	2300      	movs	r3, #0
 8010858:	75fb      	strb	r3, [r7, #23]
 801085a:	e027      	b.n	80108ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	0f1b      	lsrs	r3, r3, #28
 8010860:	2b09      	cmp	r3, #9
 8010862:	d80b      	bhi.n	801087c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	0f1b      	lsrs	r3, r3, #28
 8010868:	b2da      	uxtb	r2, r3
 801086a:	7dfb      	ldrb	r3, [r7, #23]
 801086c:	005b      	lsls	r3, r3, #1
 801086e:	4619      	mov	r1, r3
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	440b      	add	r3, r1
 8010874:	3230      	adds	r2, #48	@ 0x30
 8010876:	b2d2      	uxtb	r2, r2
 8010878:	701a      	strb	r2, [r3, #0]
 801087a:	e00a      	b.n	8010892 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801087c:	68fb      	ldr	r3, [r7, #12]
 801087e:	0f1b      	lsrs	r3, r3, #28
 8010880:	b2da      	uxtb	r2, r3
 8010882:	7dfb      	ldrb	r3, [r7, #23]
 8010884:	005b      	lsls	r3, r3, #1
 8010886:	4619      	mov	r1, r3
 8010888:	68bb      	ldr	r3, [r7, #8]
 801088a:	440b      	add	r3, r1
 801088c:	3237      	adds	r2, #55	@ 0x37
 801088e:	b2d2      	uxtb	r2, r2
 8010890:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	011b      	lsls	r3, r3, #4
 8010896:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010898:	7dfb      	ldrb	r3, [r7, #23]
 801089a:	005b      	lsls	r3, r3, #1
 801089c:	3301      	adds	r3, #1
 801089e:	68ba      	ldr	r2, [r7, #8]
 80108a0:	4413      	add	r3, r2
 80108a2:	2200      	movs	r2, #0
 80108a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80108a6:	7dfb      	ldrb	r3, [r7, #23]
 80108a8:	3301      	adds	r3, #1
 80108aa:	75fb      	strb	r3, [r7, #23]
 80108ac:	7dfa      	ldrb	r2, [r7, #23]
 80108ae:	79fb      	ldrb	r3, [r7, #7]
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d3d3      	bcc.n	801085c <IntToUnicode+0x18>
  }
}
 80108b4:	bf00      	nop
 80108b6:	bf00      	nop
 80108b8:	371c      	adds	r7, #28
 80108ba:	46bd      	mov	sp, r7
 80108bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c0:	4770      	bx	lr
	...

080108c4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b098      	sub	sp, #96	@ 0x60
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80108cc:	f107 030c 	add.w	r3, r7, #12
 80108d0:	2254      	movs	r2, #84	@ 0x54
 80108d2:	2100      	movs	r1, #0
 80108d4:	4618      	mov	r0, r3
 80108d6:	f001 fab6 	bl	8011e46 <memset>
  if(pcdHandle->Instance==USB)
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	4a15      	ldr	r2, [pc, #84]	@ (8010934 <HAL_PCD_MspInit+0x70>)
 80108e0:	4293      	cmp	r3, r2
 80108e2:	d122      	bne.n	801092a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80108e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80108e8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80108ea:	2300      	movs	r3, #0
 80108ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80108ee:	f107 030c 	add.w	r3, r7, #12
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7f9 f82a 	bl	800994c <HAL_RCCEx_PeriphCLKConfig>
 80108f8:	4603      	mov	r3, r0
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d001      	beq.n	8010902 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80108fe:	f7f3 f88f 	bl	8003a20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8010902:	4b0d      	ldr	r3, [pc, #52]	@ (8010938 <HAL_PCD_MspInit+0x74>)
 8010904:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010906:	4a0c      	ldr	r2, [pc, #48]	@ (8010938 <HAL_PCD_MspInit+0x74>)
 8010908:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801090c:	6593      	str	r3, [r2, #88]	@ 0x58
 801090e:	4b0a      	ldr	r3, [pc, #40]	@ (8010938 <HAL_PCD_MspInit+0x74>)
 8010910:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010912:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010916:	60bb      	str	r3, [r7, #8]
 8010918:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 801091a:	2200      	movs	r2, #0
 801091c:	2100      	movs	r1, #0
 801091e:	2014      	movs	r0, #20
 8010920:	f7f5 fdab 	bl	800647a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010924:	2014      	movs	r0, #20
 8010926:	f7f5 fdc2 	bl	80064ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801092a:	bf00      	nop
 801092c:	3760      	adds	r7, #96	@ 0x60
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}
 8010932:	bf00      	nop
 8010934:	40005c00 	.word	0x40005c00
 8010938:	40021000 	.word	0x40021000

0801093c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8010950:	4619      	mov	r1, r3
 8010952:	4610      	mov	r0, r2
 8010954:	f7fe fd1c 	bl	800f390 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010958:	bf00      	nop
 801095a:	3708      	adds	r7, #8
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	460b      	mov	r3, r1
 801096a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010972:	78fa      	ldrb	r2, [r7, #3]
 8010974:	6879      	ldr	r1, [r7, #4]
 8010976:	4613      	mov	r3, r2
 8010978:	009b      	lsls	r3, r3, #2
 801097a:	4413      	add	r3, r2
 801097c:	00db      	lsls	r3, r3, #3
 801097e:	440b      	add	r3, r1
 8010980:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010984:	681a      	ldr	r2, [r3, #0]
 8010986:	78fb      	ldrb	r3, [r7, #3]
 8010988:	4619      	mov	r1, r3
 801098a:	f7fe fd56 	bl	800f43a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801098e:	bf00      	nop
 8010990:	3708      	adds	r7, #8
 8010992:	46bd      	mov	sp, r7
 8010994:	bd80      	pop	{r7, pc}

08010996 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010996:	b580      	push	{r7, lr}
 8010998:	b082      	sub	sp, #8
 801099a:	af00      	add	r7, sp, #0
 801099c:	6078      	str	r0, [r7, #4]
 801099e:	460b      	mov	r3, r1
 80109a0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80109a8:	78fa      	ldrb	r2, [r7, #3]
 80109aa:	6879      	ldr	r1, [r7, #4]
 80109ac:	4613      	mov	r3, r2
 80109ae:	009b      	lsls	r3, r3, #2
 80109b0:	4413      	add	r3, r2
 80109b2:	00db      	lsls	r3, r3, #3
 80109b4:	440b      	add	r3, r1
 80109b6:	3324      	adds	r3, #36	@ 0x24
 80109b8:	681a      	ldr	r2, [r3, #0]
 80109ba:	78fb      	ldrb	r3, [r7, #3]
 80109bc:	4619      	mov	r1, r3
 80109be:	f7fe fd9f 	bl	800f500 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80109c2:	bf00      	nop
 80109c4:	3708      	adds	r7, #8
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd80      	pop	{r7, pc}

080109ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109ca:	b580      	push	{r7, lr}
 80109cc:	b082      	sub	sp, #8
 80109ce:	af00      	add	r7, sp, #0
 80109d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80109d8:	4618      	mov	r0, r3
 80109da:	f7fe feb3 	bl	800f744 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80109de:	bf00      	nop
 80109e0:	3708      	adds	r7, #8
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}

080109e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109e6:	b580      	push	{r7, lr}
 80109e8:	b084      	sub	sp, #16
 80109ea:	af00      	add	r7, sp, #0
 80109ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80109ee:	2301      	movs	r3, #1
 80109f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	795b      	ldrb	r3, [r3, #5]
 80109f6:	2b02      	cmp	r3, #2
 80109f8:	d001      	beq.n	80109fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80109fa:	f7f3 f811 	bl	8003a20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010a04:	7bfa      	ldrb	r2, [r7, #15]
 8010a06:	4611      	mov	r1, r2
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7fe fe5d 	bl	800f6c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7fe fe09 	bl	800f62c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010a1a:	bf00      	nop
 8010a1c:	3710      	adds	r7, #16
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	bd80      	pop	{r7, pc}
	...

08010a24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7fe fe58 	bl	800f6e8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	7a5b      	ldrb	r3, [r3, #9]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d005      	beq.n	8010a4c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010a40:	4b04      	ldr	r3, [pc, #16]	@ (8010a54 <HAL_PCD_SuspendCallback+0x30>)
 8010a42:	691b      	ldr	r3, [r3, #16]
 8010a44:	4a03      	ldr	r2, [pc, #12]	@ (8010a54 <HAL_PCD_SuspendCallback+0x30>)
 8010a46:	f043 0306 	orr.w	r3, r3, #6
 8010a4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8010a4c:	bf00      	nop
 8010a4e:	3708      	adds	r7, #8
 8010a50:	46bd      	mov	sp, r7
 8010a52:	bd80      	pop	{r7, pc}
 8010a54:	e000ed00 	.word	0xe000ed00

08010a58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a58:	b580      	push	{r7, lr}
 8010a5a:	b082      	sub	sp, #8
 8010a5c:	af00      	add	r7, sp, #0
 8010a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	7a5b      	ldrb	r3, [r3, #9]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d007      	beq.n	8010a78 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010a68:	4b08      	ldr	r3, [pc, #32]	@ (8010a8c <HAL_PCD_ResumeCallback+0x34>)
 8010a6a:	691b      	ldr	r3, [r3, #16]
 8010a6c:	4a07      	ldr	r2, [pc, #28]	@ (8010a8c <HAL_PCD_ResumeCallback+0x34>)
 8010a6e:	f023 0306 	bic.w	r3, r3, #6
 8010a72:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010a74:	f000 f9f8 	bl	8010e68 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7fe fe48 	bl	800f714 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010a84:	bf00      	nop
 8010a86:	3708      	adds	r7, #8
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	e000ed00 	.word	0xe000ed00

08010a90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	b082      	sub	sp, #8
 8010a94:	af00      	add	r7, sp, #0
 8010a96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010a98:	4a2b      	ldr	r2, [pc, #172]	@ (8010b48 <USBD_LL_Init+0xb8>)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	4a29      	ldr	r2, [pc, #164]	@ (8010b48 <USBD_LL_Init+0xb8>)
 8010aa4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010aa8:	4b27      	ldr	r3, [pc, #156]	@ (8010b48 <USBD_LL_Init+0xb8>)
 8010aaa:	4a28      	ldr	r2, [pc, #160]	@ (8010b4c <USBD_LL_Init+0xbc>)
 8010aac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010aae:	4b26      	ldr	r3, [pc, #152]	@ (8010b48 <USBD_LL_Init+0xb8>)
 8010ab0:	2208      	movs	r2, #8
 8010ab2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010ab4:	4b24      	ldr	r3, [pc, #144]	@ (8010b48 <USBD_LL_Init+0xb8>)
 8010ab6:	2202      	movs	r2, #2
 8010ab8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010aba:	4b23      	ldr	r3, [pc, #140]	@ (8010b48 <USBD_LL_Init+0xb8>)
 8010abc:	2202      	movs	r2, #2
 8010abe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010ac0:	4b21      	ldr	r3, [pc, #132]	@ (8010b48 <USBD_LL_Init+0xb8>)
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010ac6:	4b20      	ldr	r3, [pc, #128]	@ (8010b48 <USBD_LL_Init+0xb8>)
 8010ac8:	2200      	movs	r2, #0
 8010aca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010acc:	4b1e      	ldr	r3, [pc, #120]	@ (8010b48 <USBD_LL_Init+0xb8>)
 8010ace:	2200      	movs	r2, #0
 8010ad0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010ad2:	4b1d      	ldr	r3, [pc, #116]	@ (8010b48 <USBD_LL_Init+0xb8>)
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010ad8:	481b      	ldr	r0, [pc, #108]	@ (8010b48 <USBD_LL_Init+0xb8>)
 8010ada:	f7f6 fc1f 	bl	800731c <HAL_PCD_Init>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d001      	beq.n	8010ae8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8010ae4:	f7f2 ff9c 	bl	8003a20 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010aee:	2318      	movs	r3, #24
 8010af0:	2200      	movs	r2, #0
 8010af2:	2100      	movs	r1, #0
 8010af4:	f7f8 f8da 	bl	8008cac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010afe:	2358      	movs	r3, #88	@ 0x58
 8010b00:	2200      	movs	r2, #0
 8010b02:	2180      	movs	r1, #128	@ 0x80
 8010b04:	f7f8 f8d2 	bl	8008cac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010b0e:	23c0      	movs	r3, #192	@ 0xc0
 8010b10:	2200      	movs	r2, #0
 8010b12:	2181      	movs	r1, #129	@ 0x81
 8010b14:	f7f8 f8ca 	bl	8008cac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010b1e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8010b22:	2200      	movs	r2, #0
 8010b24:	2101      	movs	r1, #1
 8010b26:	f7f8 f8c1 	bl	8008cac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010b30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010b34:	2200      	movs	r2, #0
 8010b36:	2182      	movs	r1, #130	@ 0x82
 8010b38:	f7f8 f8b8 	bl	8008cac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010b3c:	2300      	movs	r3, #0
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3708      	adds	r7, #8
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	2000209c 	.word	0x2000209c
 8010b4c:	40005c00 	.word	0x40005c00

08010b50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b084      	sub	sp, #16
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7f6 fca6 	bl	80074b8 <HAL_PCD_Start>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b70:	7bfb      	ldrb	r3, [r7, #15]
 8010b72:	4618      	mov	r0, r3
 8010b74:	f000 f97e 	bl	8010e74 <USBD_Get_USB_Status>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3710      	adds	r7, #16
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b084      	sub	sp, #16
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
 8010b8e:	4608      	mov	r0, r1
 8010b90:	4611      	mov	r1, r2
 8010b92:	461a      	mov	r2, r3
 8010b94:	4603      	mov	r3, r0
 8010b96:	70fb      	strb	r3, [r7, #3]
 8010b98:	460b      	mov	r3, r1
 8010b9a:	70bb      	strb	r3, [r7, #2]
 8010b9c:	4613      	mov	r3, r2
 8010b9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010bae:	78bb      	ldrb	r3, [r7, #2]
 8010bb0:	883a      	ldrh	r2, [r7, #0]
 8010bb2:	78f9      	ldrb	r1, [r7, #3]
 8010bb4:	f7f6 fded 	bl	8007792 <HAL_PCD_EP_Open>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bbc:	7bfb      	ldrb	r3, [r7, #15]
 8010bbe:	4618      	mov	r0, r3
 8010bc0:	f000 f958 	bl	8010e74 <USBD_Get_USB_Status>
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3710      	adds	r7, #16
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}

08010bd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010bd2:	b580      	push	{r7, lr}
 8010bd4:	b084      	sub	sp, #16
 8010bd6:	af00      	add	r7, sp, #0
 8010bd8:	6078      	str	r0, [r7, #4]
 8010bda:	460b      	mov	r3, r1
 8010bdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bde:	2300      	movs	r3, #0
 8010be0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010be2:	2300      	movs	r3, #0
 8010be4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010bec:	78fa      	ldrb	r2, [r7, #3]
 8010bee:	4611      	mov	r1, r2
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f7f6 fe2d 	bl	8007850 <HAL_PCD_EP_Close>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bfa:	7bfb      	ldrb	r3, [r7, #15]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f000 f939 	bl	8010e74 <USBD_Get_USB_Status>
 8010c02:	4603      	mov	r3, r0
 8010c04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c06:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3710      	adds	r7, #16
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	460b      	mov	r3, r1
 8010c1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c20:	2300      	movs	r3, #0
 8010c22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010c2a:	78fa      	ldrb	r2, [r7, #3]
 8010c2c:	4611      	mov	r1, r2
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7f6 fed6 	bl	80079e0 <HAL_PCD_EP_SetStall>
 8010c34:	4603      	mov	r3, r0
 8010c36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c38:	7bfb      	ldrb	r3, [r7, #15]
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f000 f91a 	bl	8010e74 <USBD_Get_USB_Status>
 8010c40:	4603      	mov	r3, r0
 8010c42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c44:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3710      	adds	r7, #16
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}

08010c4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b084      	sub	sp, #16
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6078      	str	r0, [r7, #4]
 8010c56:	460b      	mov	r3, r1
 8010c58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010c68:	78fa      	ldrb	r2, [r7, #3]
 8010c6a:	4611      	mov	r1, r2
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7f6 ff09 	bl	8007a84 <HAL_PCD_EP_ClrStall>
 8010c72:	4603      	mov	r3, r0
 8010c74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c76:	7bfb      	ldrb	r3, [r7, #15]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f000 f8fb 	bl	8010e74 <USBD_Get_USB_Status>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c82:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c84:	4618      	mov	r0, r3
 8010c86:	3710      	adds	r7, #16
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	bd80      	pop	{r7, pc}

08010c8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c8c:	b480      	push	{r7}
 8010c8e:	b085      	sub	sp, #20
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	460b      	mov	r3, r1
 8010c96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010c9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	da0b      	bge.n	8010cc0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010ca8:	78fb      	ldrb	r3, [r7, #3]
 8010caa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010cae:	68f9      	ldr	r1, [r7, #12]
 8010cb0:	4613      	mov	r3, r2
 8010cb2:	009b      	lsls	r3, r3, #2
 8010cb4:	4413      	add	r3, r2
 8010cb6:	00db      	lsls	r3, r3, #3
 8010cb8:	440b      	add	r3, r1
 8010cba:	3312      	adds	r3, #18
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	e00b      	b.n	8010cd8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010cc0:	78fb      	ldrb	r3, [r7, #3]
 8010cc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010cc6:	68f9      	ldr	r1, [r7, #12]
 8010cc8:	4613      	mov	r3, r2
 8010cca:	009b      	lsls	r3, r3, #2
 8010ccc:	4413      	add	r3, r2
 8010cce:	00db      	lsls	r3, r3, #3
 8010cd0:	440b      	add	r3, r1
 8010cd2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010cd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010cd8:	4618      	mov	r0, r3
 8010cda:	3714      	adds	r7, #20
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce2:	4770      	bx	lr

08010ce4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b084      	sub	sp, #16
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
 8010cec:	460b      	mov	r3, r1
 8010cee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cf0:	2300      	movs	r3, #0
 8010cf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010cfe:	78fa      	ldrb	r2, [r7, #3]
 8010d00:	4611      	mov	r1, r2
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7f6 fd21 	bl	800774a <HAL_PCD_SetAddress>
 8010d08:	4603      	mov	r3, r0
 8010d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d0c:	7bfb      	ldrb	r3, [r7, #15]
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f000 f8b0 	bl	8010e74 <USBD_Get_USB_Status>
 8010d14:	4603      	mov	r3, r0
 8010d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	3710      	adds	r7, #16
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	bd80      	pop	{r7, pc}

08010d22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d22:	b580      	push	{r7, lr}
 8010d24:	b086      	sub	sp, #24
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	60f8      	str	r0, [r7, #12]
 8010d2a:	607a      	str	r2, [r7, #4]
 8010d2c:	603b      	str	r3, [r7, #0]
 8010d2e:	460b      	mov	r3, r1
 8010d30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d32:	2300      	movs	r3, #0
 8010d34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d36:	2300      	movs	r3, #0
 8010d38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010d40:	7af9      	ldrb	r1, [r7, #11]
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	687a      	ldr	r2, [r7, #4]
 8010d46:	f7f6 fe14 	bl	8007972 <HAL_PCD_EP_Transmit>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d4e:	7dfb      	ldrb	r3, [r7, #23]
 8010d50:	4618      	mov	r0, r3
 8010d52:	f000 f88f 	bl	8010e74 <USBD_Get_USB_Status>
 8010d56:	4603      	mov	r3, r0
 8010d58:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d5a:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3718      	adds	r7, #24
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b086      	sub	sp, #24
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	60f8      	str	r0, [r7, #12]
 8010d6c:	607a      	str	r2, [r7, #4]
 8010d6e:	603b      	str	r3, [r7, #0]
 8010d70:	460b      	mov	r3, r1
 8010d72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d74:	2300      	movs	r3, #0
 8010d76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d78:	2300      	movs	r3, #0
 8010d7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010d82:	7af9      	ldrb	r1, [r7, #11]
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	687a      	ldr	r2, [r7, #4]
 8010d88:	f7f6 fdaa 	bl	80078e0 <HAL_PCD_EP_Receive>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d90:	7dfb      	ldrb	r3, [r7, #23]
 8010d92:	4618      	mov	r0, r3
 8010d94:	f000 f86e 	bl	8010e74 <USBD_Get_USB_Status>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d9c:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d9e:	4618      	mov	r0, r3
 8010da0:	3718      	adds	r7, #24
 8010da2:	46bd      	mov	sp, r7
 8010da4:	bd80      	pop	{r7, pc}

08010da6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010da6:	b580      	push	{r7, lr}
 8010da8:	b082      	sub	sp, #8
 8010daa:	af00      	add	r7, sp, #0
 8010dac:	6078      	str	r0, [r7, #4]
 8010dae:	460b      	mov	r3, r1
 8010db0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010db8:	78fa      	ldrb	r2, [r7, #3]
 8010dba:	4611      	mov	r1, r2
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f7f6 fdc0 	bl	8007942 <HAL_PCD_EP_GetRxCount>
 8010dc2:	4603      	mov	r3, r0
}
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	3708      	adds	r7, #8
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	bd80      	pop	{r7, pc}

08010dcc <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b082      	sub	sp, #8
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010dd8:	78fb      	ldrb	r3, [r7, #3]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d002      	beq.n	8010de4 <HAL_PCDEx_LPM_Callback+0x18>
 8010dde:	2b01      	cmp	r3, #1
 8010de0:	d013      	beq.n	8010e0a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010de2:	e023      	b.n	8010e2c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	7a5b      	ldrb	r3, [r3, #9]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d007      	beq.n	8010dfc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010dec:	f000 f83c 	bl	8010e68 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010df0:	4b10      	ldr	r3, [pc, #64]	@ (8010e34 <HAL_PCDEx_LPM_Callback+0x68>)
 8010df2:	691b      	ldr	r3, [r3, #16]
 8010df4:	4a0f      	ldr	r2, [pc, #60]	@ (8010e34 <HAL_PCDEx_LPM_Callback+0x68>)
 8010df6:	f023 0306 	bic.w	r3, r3, #6
 8010dfa:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010e02:	4618      	mov	r0, r3
 8010e04:	f7fe fc86 	bl	800f714 <USBD_LL_Resume>
    break;
 8010e08:	e010      	b.n	8010e2c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7fe fc69 	bl	800f6e8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	7a5b      	ldrb	r3, [r3, #9]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d005      	beq.n	8010e2a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010e1e:	4b05      	ldr	r3, [pc, #20]	@ (8010e34 <HAL_PCDEx_LPM_Callback+0x68>)
 8010e20:	691b      	ldr	r3, [r3, #16]
 8010e22:	4a04      	ldr	r2, [pc, #16]	@ (8010e34 <HAL_PCDEx_LPM_Callback+0x68>)
 8010e24:	f043 0306 	orr.w	r3, r3, #6
 8010e28:	6113      	str	r3, [r2, #16]
    break;
 8010e2a:	bf00      	nop
}
 8010e2c:	bf00      	nop
 8010e2e:	3708      	adds	r7, #8
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}
 8010e34:	e000ed00 	.word	0xe000ed00

08010e38 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b083      	sub	sp, #12
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010e40:	4b03      	ldr	r3, [pc, #12]	@ (8010e50 <USBD_static_malloc+0x18>)
}
 8010e42:	4618      	mov	r0, r3
 8010e44:	370c      	adds	r7, #12
 8010e46:	46bd      	mov	sp, r7
 8010e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4c:	4770      	bx	lr
 8010e4e:	bf00      	nop
 8010e50:	20002378 	.word	0x20002378

08010e54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010e54:	b480      	push	{r7}
 8010e56:	b083      	sub	sp, #12
 8010e58:	af00      	add	r7, sp, #0
 8010e5a:	6078      	str	r0, [r7, #4]

}
 8010e5c:	bf00      	nop
 8010e5e:	370c      	adds	r7, #12
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr

08010e68 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010e6c:	f7f0 fdda 	bl	8001a24 <SystemClock_Config>
}
 8010e70:	bf00      	nop
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b085      	sub	sp, #20
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e7e:	2300      	movs	r3, #0
 8010e80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010e82:	79fb      	ldrb	r3, [r7, #7]
 8010e84:	2b03      	cmp	r3, #3
 8010e86:	d817      	bhi.n	8010eb8 <USBD_Get_USB_Status+0x44>
 8010e88:	a201      	add	r2, pc, #4	@ (adr r2, 8010e90 <USBD_Get_USB_Status+0x1c>)
 8010e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e8e:	bf00      	nop
 8010e90:	08010ea1 	.word	0x08010ea1
 8010e94:	08010ea7 	.word	0x08010ea7
 8010e98:	08010ead 	.word	0x08010ead
 8010e9c:	08010eb3 	.word	0x08010eb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	73fb      	strb	r3, [r7, #15]
    break;
 8010ea4:	e00b      	b.n	8010ebe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010ea6:	2303      	movs	r3, #3
 8010ea8:	73fb      	strb	r3, [r7, #15]
    break;
 8010eaa:	e008      	b.n	8010ebe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010eac:	2301      	movs	r3, #1
 8010eae:	73fb      	strb	r3, [r7, #15]
    break;
 8010eb0:	e005      	b.n	8010ebe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010eb2:	2303      	movs	r3, #3
 8010eb4:	73fb      	strb	r3, [r7, #15]
    break;
 8010eb6:	e002      	b.n	8010ebe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010eb8:	2303      	movs	r3, #3
 8010eba:	73fb      	strb	r3, [r7, #15]
    break;
 8010ebc:	bf00      	nop
  }
  return usb_status;
 8010ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3714      	adds	r7, #20
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr

08010ecc <__cvt>:
 8010ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010ed0:	ec57 6b10 	vmov	r6, r7, d0
 8010ed4:	2f00      	cmp	r7, #0
 8010ed6:	460c      	mov	r4, r1
 8010ed8:	4619      	mov	r1, r3
 8010eda:	463b      	mov	r3, r7
 8010edc:	bfbb      	ittet	lt
 8010ede:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010ee2:	461f      	movlt	r7, r3
 8010ee4:	2300      	movge	r3, #0
 8010ee6:	232d      	movlt	r3, #45	@ 0x2d
 8010ee8:	700b      	strb	r3, [r1, #0]
 8010eea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010eec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010ef0:	4691      	mov	r9, r2
 8010ef2:	f023 0820 	bic.w	r8, r3, #32
 8010ef6:	bfbc      	itt	lt
 8010ef8:	4632      	movlt	r2, r6
 8010efa:	4616      	movlt	r6, r2
 8010efc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010f00:	d005      	beq.n	8010f0e <__cvt+0x42>
 8010f02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010f06:	d100      	bne.n	8010f0a <__cvt+0x3e>
 8010f08:	3401      	adds	r4, #1
 8010f0a:	2102      	movs	r1, #2
 8010f0c:	e000      	b.n	8010f10 <__cvt+0x44>
 8010f0e:	2103      	movs	r1, #3
 8010f10:	ab03      	add	r3, sp, #12
 8010f12:	9301      	str	r3, [sp, #4]
 8010f14:	ab02      	add	r3, sp, #8
 8010f16:	9300      	str	r3, [sp, #0]
 8010f18:	ec47 6b10 	vmov	d0, r6, r7
 8010f1c:	4653      	mov	r3, sl
 8010f1e:	4622      	mov	r2, r4
 8010f20:	f001 f8c2 	bl	80120a8 <_dtoa_r>
 8010f24:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010f28:	4605      	mov	r5, r0
 8010f2a:	d119      	bne.n	8010f60 <__cvt+0x94>
 8010f2c:	f019 0f01 	tst.w	r9, #1
 8010f30:	d00e      	beq.n	8010f50 <__cvt+0x84>
 8010f32:	eb00 0904 	add.w	r9, r0, r4
 8010f36:	2200      	movs	r2, #0
 8010f38:	2300      	movs	r3, #0
 8010f3a:	4630      	mov	r0, r6
 8010f3c:	4639      	mov	r1, r7
 8010f3e:	f7ef fdeb 	bl	8000b18 <__aeabi_dcmpeq>
 8010f42:	b108      	cbz	r0, 8010f48 <__cvt+0x7c>
 8010f44:	f8cd 900c 	str.w	r9, [sp, #12]
 8010f48:	2230      	movs	r2, #48	@ 0x30
 8010f4a:	9b03      	ldr	r3, [sp, #12]
 8010f4c:	454b      	cmp	r3, r9
 8010f4e:	d31e      	bcc.n	8010f8e <__cvt+0xc2>
 8010f50:	9b03      	ldr	r3, [sp, #12]
 8010f52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f54:	1b5b      	subs	r3, r3, r5
 8010f56:	4628      	mov	r0, r5
 8010f58:	6013      	str	r3, [r2, #0]
 8010f5a:	b004      	add	sp, #16
 8010f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010f64:	eb00 0904 	add.w	r9, r0, r4
 8010f68:	d1e5      	bne.n	8010f36 <__cvt+0x6a>
 8010f6a:	7803      	ldrb	r3, [r0, #0]
 8010f6c:	2b30      	cmp	r3, #48	@ 0x30
 8010f6e:	d10a      	bne.n	8010f86 <__cvt+0xba>
 8010f70:	2200      	movs	r2, #0
 8010f72:	2300      	movs	r3, #0
 8010f74:	4630      	mov	r0, r6
 8010f76:	4639      	mov	r1, r7
 8010f78:	f7ef fdce 	bl	8000b18 <__aeabi_dcmpeq>
 8010f7c:	b918      	cbnz	r0, 8010f86 <__cvt+0xba>
 8010f7e:	f1c4 0401 	rsb	r4, r4, #1
 8010f82:	f8ca 4000 	str.w	r4, [sl]
 8010f86:	f8da 3000 	ldr.w	r3, [sl]
 8010f8a:	4499      	add	r9, r3
 8010f8c:	e7d3      	b.n	8010f36 <__cvt+0x6a>
 8010f8e:	1c59      	adds	r1, r3, #1
 8010f90:	9103      	str	r1, [sp, #12]
 8010f92:	701a      	strb	r2, [r3, #0]
 8010f94:	e7d9      	b.n	8010f4a <__cvt+0x7e>

08010f96 <__exponent>:
 8010f96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f98:	2900      	cmp	r1, #0
 8010f9a:	bfba      	itte	lt
 8010f9c:	4249      	neglt	r1, r1
 8010f9e:	232d      	movlt	r3, #45	@ 0x2d
 8010fa0:	232b      	movge	r3, #43	@ 0x2b
 8010fa2:	2909      	cmp	r1, #9
 8010fa4:	7002      	strb	r2, [r0, #0]
 8010fa6:	7043      	strb	r3, [r0, #1]
 8010fa8:	dd29      	ble.n	8010ffe <__exponent+0x68>
 8010faa:	f10d 0307 	add.w	r3, sp, #7
 8010fae:	461d      	mov	r5, r3
 8010fb0:	270a      	movs	r7, #10
 8010fb2:	461a      	mov	r2, r3
 8010fb4:	fbb1 f6f7 	udiv	r6, r1, r7
 8010fb8:	fb07 1416 	mls	r4, r7, r6, r1
 8010fbc:	3430      	adds	r4, #48	@ 0x30
 8010fbe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8010fc2:	460c      	mov	r4, r1
 8010fc4:	2c63      	cmp	r4, #99	@ 0x63
 8010fc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8010fca:	4631      	mov	r1, r6
 8010fcc:	dcf1      	bgt.n	8010fb2 <__exponent+0x1c>
 8010fce:	3130      	adds	r1, #48	@ 0x30
 8010fd0:	1e94      	subs	r4, r2, #2
 8010fd2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010fd6:	1c41      	adds	r1, r0, #1
 8010fd8:	4623      	mov	r3, r4
 8010fda:	42ab      	cmp	r3, r5
 8010fdc:	d30a      	bcc.n	8010ff4 <__exponent+0x5e>
 8010fde:	f10d 0309 	add.w	r3, sp, #9
 8010fe2:	1a9b      	subs	r3, r3, r2
 8010fe4:	42ac      	cmp	r4, r5
 8010fe6:	bf88      	it	hi
 8010fe8:	2300      	movhi	r3, #0
 8010fea:	3302      	adds	r3, #2
 8010fec:	4403      	add	r3, r0
 8010fee:	1a18      	subs	r0, r3, r0
 8010ff0:	b003      	add	sp, #12
 8010ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ff4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8010ff8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8010ffc:	e7ed      	b.n	8010fda <__exponent+0x44>
 8010ffe:	2330      	movs	r3, #48	@ 0x30
 8011000:	3130      	adds	r1, #48	@ 0x30
 8011002:	7083      	strb	r3, [r0, #2]
 8011004:	70c1      	strb	r1, [r0, #3]
 8011006:	1d03      	adds	r3, r0, #4
 8011008:	e7f1      	b.n	8010fee <__exponent+0x58>
	...

0801100c <_printf_float>:
 801100c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011010:	b08d      	sub	sp, #52	@ 0x34
 8011012:	460c      	mov	r4, r1
 8011014:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011018:	4616      	mov	r6, r2
 801101a:	461f      	mov	r7, r3
 801101c:	4605      	mov	r5, r0
 801101e:	f000 ff2d 	bl	8011e7c <_localeconv_r>
 8011022:	6803      	ldr	r3, [r0, #0]
 8011024:	9304      	str	r3, [sp, #16]
 8011026:	4618      	mov	r0, r3
 8011028:	f7ef f94a 	bl	80002c0 <strlen>
 801102c:	2300      	movs	r3, #0
 801102e:	930a      	str	r3, [sp, #40]	@ 0x28
 8011030:	f8d8 3000 	ldr.w	r3, [r8]
 8011034:	9005      	str	r0, [sp, #20]
 8011036:	3307      	adds	r3, #7
 8011038:	f023 0307 	bic.w	r3, r3, #7
 801103c:	f103 0208 	add.w	r2, r3, #8
 8011040:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011044:	f8d4 b000 	ldr.w	fp, [r4]
 8011048:	f8c8 2000 	str.w	r2, [r8]
 801104c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011050:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8011054:	9307      	str	r3, [sp, #28]
 8011056:	f8cd 8018 	str.w	r8, [sp, #24]
 801105a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801105e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011062:	4b9c      	ldr	r3, [pc, #624]	@ (80112d4 <_printf_float+0x2c8>)
 8011064:	f04f 32ff 	mov.w	r2, #4294967295
 8011068:	f7ef fd88 	bl	8000b7c <__aeabi_dcmpun>
 801106c:	bb70      	cbnz	r0, 80110cc <_printf_float+0xc0>
 801106e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011072:	4b98      	ldr	r3, [pc, #608]	@ (80112d4 <_printf_float+0x2c8>)
 8011074:	f04f 32ff 	mov.w	r2, #4294967295
 8011078:	f7ef fd62 	bl	8000b40 <__aeabi_dcmple>
 801107c:	bb30      	cbnz	r0, 80110cc <_printf_float+0xc0>
 801107e:	2200      	movs	r2, #0
 8011080:	2300      	movs	r3, #0
 8011082:	4640      	mov	r0, r8
 8011084:	4649      	mov	r1, r9
 8011086:	f7ef fd51 	bl	8000b2c <__aeabi_dcmplt>
 801108a:	b110      	cbz	r0, 8011092 <_printf_float+0x86>
 801108c:	232d      	movs	r3, #45	@ 0x2d
 801108e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011092:	4a91      	ldr	r2, [pc, #580]	@ (80112d8 <_printf_float+0x2cc>)
 8011094:	4b91      	ldr	r3, [pc, #580]	@ (80112dc <_printf_float+0x2d0>)
 8011096:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801109a:	bf94      	ite	ls
 801109c:	4690      	movls	r8, r2
 801109e:	4698      	movhi	r8, r3
 80110a0:	2303      	movs	r3, #3
 80110a2:	6123      	str	r3, [r4, #16]
 80110a4:	f02b 0304 	bic.w	r3, fp, #4
 80110a8:	6023      	str	r3, [r4, #0]
 80110aa:	f04f 0900 	mov.w	r9, #0
 80110ae:	9700      	str	r7, [sp, #0]
 80110b0:	4633      	mov	r3, r6
 80110b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80110b4:	4621      	mov	r1, r4
 80110b6:	4628      	mov	r0, r5
 80110b8:	f000 f9d2 	bl	8011460 <_printf_common>
 80110bc:	3001      	adds	r0, #1
 80110be:	f040 808d 	bne.w	80111dc <_printf_float+0x1d0>
 80110c2:	f04f 30ff 	mov.w	r0, #4294967295
 80110c6:	b00d      	add	sp, #52	@ 0x34
 80110c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80110cc:	4642      	mov	r2, r8
 80110ce:	464b      	mov	r3, r9
 80110d0:	4640      	mov	r0, r8
 80110d2:	4649      	mov	r1, r9
 80110d4:	f7ef fd52 	bl	8000b7c <__aeabi_dcmpun>
 80110d8:	b140      	cbz	r0, 80110ec <_printf_float+0xe0>
 80110da:	464b      	mov	r3, r9
 80110dc:	2b00      	cmp	r3, #0
 80110de:	bfbc      	itt	lt
 80110e0:	232d      	movlt	r3, #45	@ 0x2d
 80110e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80110e6:	4a7e      	ldr	r2, [pc, #504]	@ (80112e0 <_printf_float+0x2d4>)
 80110e8:	4b7e      	ldr	r3, [pc, #504]	@ (80112e4 <_printf_float+0x2d8>)
 80110ea:	e7d4      	b.n	8011096 <_printf_float+0x8a>
 80110ec:	6863      	ldr	r3, [r4, #4]
 80110ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80110f2:	9206      	str	r2, [sp, #24]
 80110f4:	1c5a      	adds	r2, r3, #1
 80110f6:	d13b      	bne.n	8011170 <_printf_float+0x164>
 80110f8:	2306      	movs	r3, #6
 80110fa:	6063      	str	r3, [r4, #4]
 80110fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011100:	2300      	movs	r3, #0
 8011102:	6022      	str	r2, [r4, #0]
 8011104:	9303      	str	r3, [sp, #12]
 8011106:	ab0a      	add	r3, sp, #40	@ 0x28
 8011108:	e9cd a301 	strd	sl, r3, [sp, #4]
 801110c:	ab09      	add	r3, sp, #36	@ 0x24
 801110e:	9300      	str	r3, [sp, #0]
 8011110:	6861      	ldr	r1, [r4, #4]
 8011112:	ec49 8b10 	vmov	d0, r8, r9
 8011116:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801111a:	4628      	mov	r0, r5
 801111c:	f7ff fed6 	bl	8010ecc <__cvt>
 8011120:	9b06      	ldr	r3, [sp, #24]
 8011122:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011124:	2b47      	cmp	r3, #71	@ 0x47
 8011126:	4680      	mov	r8, r0
 8011128:	d129      	bne.n	801117e <_printf_float+0x172>
 801112a:	1cc8      	adds	r0, r1, #3
 801112c:	db02      	blt.n	8011134 <_printf_float+0x128>
 801112e:	6863      	ldr	r3, [r4, #4]
 8011130:	4299      	cmp	r1, r3
 8011132:	dd41      	ble.n	80111b8 <_printf_float+0x1ac>
 8011134:	f1aa 0a02 	sub.w	sl, sl, #2
 8011138:	fa5f fa8a 	uxtb.w	sl, sl
 801113c:	3901      	subs	r1, #1
 801113e:	4652      	mov	r2, sl
 8011140:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011144:	9109      	str	r1, [sp, #36]	@ 0x24
 8011146:	f7ff ff26 	bl	8010f96 <__exponent>
 801114a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801114c:	1813      	adds	r3, r2, r0
 801114e:	2a01      	cmp	r2, #1
 8011150:	4681      	mov	r9, r0
 8011152:	6123      	str	r3, [r4, #16]
 8011154:	dc02      	bgt.n	801115c <_printf_float+0x150>
 8011156:	6822      	ldr	r2, [r4, #0]
 8011158:	07d2      	lsls	r2, r2, #31
 801115a:	d501      	bpl.n	8011160 <_printf_float+0x154>
 801115c:	3301      	adds	r3, #1
 801115e:	6123      	str	r3, [r4, #16]
 8011160:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8011164:	2b00      	cmp	r3, #0
 8011166:	d0a2      	beq.n	80110ae <_printf_float+0xa2>
 8011168:	232d      	movs	r3, #45	@ 0x2d
 801116a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801116e:	e79e      	b.n	80110ae <_printf_float+0xa2>
 8011170:	9a06      	ldr	r2, [sp, #24]
 8011172:	2a47      	cmp	r2, #71	@ 0x47
 8011174:	d1c2      	bne.n	80110fc <_printf_float+0xf0>
 8011176:	2b00      	cmp	r3, #0
 8011178:	d1c0      	bne.n	80110fc <_printf_float+0xf0>
 801117a:	2301      	movs	r3, #1
 801117c:	e7bd      	b.n	80110fa <_printf_float+0xee>
 801117e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8011182:	d9db      	bls.n	801113c <_printf_float+0x130>
 8011184:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011188:	d118      	bne.n	80111bc <_printf_float+0x1b0>
 801118a:	2900      	cmp	r1, #0
 801118c:	6863      	ldr	r3, [r4, #4]
 801118e:	dd0b      	ble.n	80111a8 <_printf_float+0x19c>
 8011190:	6121      	str	r1, [r4, #16]
 8011192:	b913      	cbnz	r3, 801119a <_printf_float+0x18e>
 8011194:	6822      	ldr	r2, [r4, #0]
 8011196:	07d0      	lsls	r0, r2, #31
 8011198:	d502      	bpl.n	80111a0 <_printf_float+0x194>
 801119a:	3301      	adds	r3, #1
 801119c:	440b      	add	r3, r1
 801119e:	6123      	str	r3, [r4, #16]
 80111a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80111a2:	f04f 0900 	mov.w	r9, #0
 80111a6:	e7db      	b.n	8011160 <_printf_float+0x154>
 80111a8:	b913      	cbnz	r3, 80111b0 <_printf_float+0x1a4>
 80111aa:	6822      	ldr	r2, [r4, #0]
 80111ac:	07d2      	lsls	r2, r2, #31
 80111ae:	d501      	bpl.n	80111b4 <_printf_float+0x1a8>
 80111b0:	3302      	adds	r3, #2
 80111b2:	e7f4      	b.n	801119e <_printf_float+0x192>
 80111b4:	2301      	movs	r3, #1
 80111b6:	e7f2      	b.n	801119e <_printf_float+0x192>
 80111b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80111bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80111be:	4299      	cmp	r1, r3
 80111c0:	db05      	blt.n	80111ce <_printf_float+0x1c2>
 80111c2:	6823      	ldr	r3, [r4, #0]
 80111c4:	6121      	str	r1, [r4, #16]
 80111c6:	07d8      	lsls	r0, r3, #31
 80111c8:	d5ea      	bpl.n	80111a0 <_printf_float+0x194>
 80111ca:	1c4b      	adds	r3, r1, #1
 80111cc:	e7e7      	b.n	801119e <_printf_float+0x192>
 80111ce:	2900      	cmp	r1, #0
 80111d0:	bfd4      	ite	le
 80111d2:	f1c1 0202 	rsble	r2, r1, #2
 80111d6:	2201      	movgt	r2, #1
 80111d8:	4413      	add	r3, r2
 80111da:	e7e0      	b.n	801119e <_printf_float+0x192>
 80111dc:	6823      	ldr	r3, [r4, #0]
 80111de:	055a      	lsls	r2, r3, #21
 80111e0:	d407      	bmi.n	80111f2 <_printf_float+0x1e6>
 80111e2:	6923      	ldr	r3, [r4, #16]
 80111e4:	4642      	mov	r2, r8
 80111e6:	4631      	mov	r1, r6
 80111e8:	4628      	mov	r0, r5
 80111ea:	47b8      	blx	r7
 80111ec:	3001      	adds	r0, #1
 80111ee:	d12b      	bne.n	8011248 <_printf_float+0x23c>
 80111f0:	e767      	b.n	80110c2 <_printf_float+0xb6>
 80111f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80111f6:	f240 80dd 	bls.w	80113b4 <_printf_float+0x3a8>
 80111fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80111fe:	2200      	movs	r2, #0
 8011200:	2300      	movs	r3, #0
 8011202:	f7ef fc89 	bl	8000b18 <__aeabi_dcmpeq>
 8011206:	2800      	cmp	r0, #0
 8011208:	d033      	beq.n	8011272 <_printf_float+0x266>
 801120a:	4a37      	ldr	r2, [pc, #220]	@ (80112e8 <_printf_float+0x2dc>)
 801120c:	2301      	movs	r3, #1
 801120e:	4631      	mov	r1, r6
 8011210:	4628      	mov	r0, r5
 8011212:	47b8      	blx	r7
 8011214:	3001      	adds	r0, #1
 8011216:	f43f af54 	beq.w	80110c2 <_printf_float+0xb6>
 801121a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801121e:	4543      	cmp	r3, r8
 8011220:	db02      	blt.n	8011228 <_printf_float+0x21c>
 8011222:	6823      	ldr	r3, [r4, #0]
 8011224:	07d8      	lsls	r0, r3, #31
 8011226:	d50f      	bpl.n	8011248 <_printf_float+0x23c>
 8011228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801122c:	4631      	mov	r1, r6
 801122e:	4628      	mov	r0, r5
 8011230:	47b8      	blx	r7
 8011232:	3001      	adds	r0, #1
 8011234:	f43f af45 	beq.w	80110c2 <_printf_float+0xb6>
 8011238:	f04f 0900 	mov.w	r9, #0
 801123c:	f108 38ff 	add.w	r8, r8, #4294967295
 8011240:	f104 0a1a 	add.w	sl, r4, #26
 8011244:	45c8      	cmp	r8, r9
 8011246:	dc09      	bgt.n	801125c <_printf_float+0x250>
 8011248:	6823      	ldr	r3, [r4, #0]
 801124a:	079b      	lsls	r3, r3, #30
 801124c:	f100 8103 	bmi.w	8011456 <_printf_float+0x44a>
 8011250:	68e0      	ldr	r0, [r4, #12]
 8011252:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011254:	4298      	cmp	r0, r3
 8011256:	bfb8      	it	lt
 8011258:	4618      	movlt	r0, r3
 801125a:	e734      	b.n	80110c6 <_printf_float+0xba>
 801125c:	2301      	movs	r3, #1
 801125e:	4652      	mov	r2, sl
 8011260:	4631      	mov	r1, r6
 8011262:	4628      	mov	r0, r5
 8011264:	47b8      	blx	r7
 8011266:	3001      	adds	r0, #1
 8011268:	f43f af2b 	beq.w	80110c2 <_printf_float+0xb6>
 801126c:	f109 0901 	add.w	r9, r9, #1
 8011270:	e7e8      	b.n	8011244 <_printf_float+0x238>
 8011272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011274:	2b00      	cmp	r3, #0
 8011276:	dc39      	bgt.n	80112ec <_printf_float+0x2e0>
 8011278:	4a1b      	ldr	r2, [pc, #108]	@ (80112e8 <_printf_float+0x2dc>)
 801127a:	2301      	movs	r3, #1
 801127c:	4631      	mov	r1, r6
 801127e:	4628      	mov	r0, r5
 8011280:	47b8      	blx	r7
 8011282:	3001      	adds	r0, #1
 8011284:	f43f af1d 	beq.w	80110c2 <_printf_float+0xb6>
 8011288:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801128c:	ea59 0303 	orrs.w	r3, r9, r3
 8011290:	d102      	bne.n	8011298 <_printf_float+0x28c>
 8011292:	6823      	ldr	r3, [r4, #0]
 8011294:	07d9      	lsls	r1, r3, #31
 8011296:	d5d7      	bpl.n	8011248 <_printf_float+0x23c>
 8011298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801129c:	4631      	mov	r1, r6
 801129e:	4628      	mov	r0, r5
 80112a0:	47b8      	blx	r7
 80112a2:	3001      	adds	r0, #1
 80112a4:	f43f af0d 	beq.w	80110c2 <_printf_float+0xb6>
 80112a8:	f04f 0a00 	mov.w	sl, #0
 80112ac:	f104 0b1a 	add.w	fp, r4, #26
 80112b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112b2:	425b      	negs	r3, r3
 80112b4:	4553      	cmp	r3, sl
 80112b6:	dc01      	bgt.n	80112bc <_printf_float+0x2b0>
 80112b8:	464b      	mov	r3, r9
 80112ba:	e793      	b.n	80111e4 <_printf_float+0x1d8>
 80112bc:	2301      	movs	r3, #1
 80112be:	465a      	mov	r2, fp
 80112c0:	4631      	mov	r1, r6
 80112c2:	4628      	mov	r0, r5
 80112c4:	47b8      	blx	r7
 80112c6:	3001      	adds	r0, #1
 80112c8:	f43f aefb 	beq.w	80110c2 <_printf_float+0xb6>
 80112cc:	f10a 0a01 	add.w	sl, sl, #1
 80112d0:	e7ee      	b.n	80112b0 <_printf_float+0x2a4>
 80112d2:	bf00      	nop
 80112d4:	7fefffff 	.word	0x7fefffff
 80112d8:	080170c0 	.word	0x080170c0
 80112dc:	080170c4 	.word	0x080170c4
 80112e0:	080170c8 	.word	0x080170c8
 80112e4:	080170cc 	.word	0x080170cc
 80112e8:	08017460 	.word	0x08017460
 80112ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80112ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80112f2:	4553      	cmp	r3, sl
 80112f4:	bfa8      	it	ge
 80112f6:	4653      	movge	r3, sl
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	4699      	mov	r9, r3
 80112fc:	dc36      	bgt.n	801136c <_printf_float+0x360>
 80112fe:	f04f 0b00 	mov.w	fp, #0
 8011302:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011306:	f104 021a 	add.w	r2, r4, #26
 801130a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801130c:	9306      	str	r3, [sp, #24]
 801130e:	eba3 0309 	sub.w	r3, r3, r9
 8011312:	455b      	cmp	r3, fp
 8011314:	dc31      	bgt.n	801137a <_printf_float+0x36e>
 8011316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011318:	459a      	cmp	sl, r3
 801131a:	dc3a      	bgt.n	8011392 <_printf_float+0x386>
 801131c:	6823      	ldr	r3, [r4, #0]
 801131e:	07da      	lsls	r2, r3, #31
 8011320:	d437      	bmi.n	8011392 <_printf_float+0x386>
 8011322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011324:	ebaa 0903 	sub.w	r9, sl, r3
 8011328:	9b06      	ldr	r3, [sp, #24]
 801132a:	ebaa 0303 	sub.w	r3, sl, r3
 801132e:	4599      	cmp	r9, r3
 8011330:	bfa8      	it	ge
 8011332:	4699      	movge	r9, r3
 8011334:	f1b9 0f00 	cmp.w	r9, #0
 8011338:	dc33      	bgt.n	80113a2 <_printf_float+0x396>
 801133a:	f04f 0800 	mov.w	r8, #0
 801133e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011342:	f104 0b1a 	add.w	fp, r4, #26
 8011346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011348:	ebaa 0303 	sub.w	r3, sl, r3
 801134c:	eba3 0309 	sub.w	r3, r3, r9
 8011350:	4543      	cmp	r3, r8
 8011352:	f77f af79 	ble.w	8011248 <_printf_float+0x23c>
 8011356:	2301      	movs	r3, #1
 8011358:	465a      	mov	r2, fp
 801135a:	4631      	mov	r1, r6
 801135c:	4628      	mov	r0, r5
 801135e:	47b8      	blx	r7
 8011360:	3001      	adds	r0, #1
 8011362:	f43f aeae 	beq.w	80110c2 <_printf_float+0xb6>
 8011366:	f108 0801 	add.w	r8, r8, #1
 801136a:	e7ec      	b.n	8011346 <_printf_float+0x33a>
 801136c:	4642      	mov	r2, r8
 801136e:	4631      	mov	r1, r6
 8011370:	4628      	mov	r0, r5
 8011372:	47b8      	blx	r7
 8011374:	3001      	adds	r0, #1
 8011376:	d1c2      	bne.n	80112fe <_printf_float+0x2f2>
 8011378:	e6a3      	b.n	80110c2 <_printf_float+0xb6>
 801137a:	2301      	movs	r3, #1
 801137c:	4631      	mov	r1, r6
 801137e:	4628      	mov	r0, r5
 8011380:	9206      	str	r2, [sp, #24]
 8011382:	47b8      	blx	r7
 8011384:	3001      	adds	r0, #1
 8011386:	f43f ae9c 	beq.w	80110c2 <_printf_float+0xb6>
 801138a:	9a06      	ldr	r2, [sp, #24]
 801138c:	f10b 0b01 	add.w	fp, fp, #1
 8011390:	e7bb      	b.n	801130a <_printf_float+0x2fe>
 8011392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011396:	4631      	mov	r1, r6
 8011398:	4628      	mov	r0, r5
 801139a:	47b8      	blx	r7
 801139c:	3001      	adds	r0, #1
 801139e:	d1c0      	bne.n	8011322 <_printf_float+0x316>
 80113a0:	e68f      	b.n	80110c2 <_printf_float+0xb6>
 80113a2:	9a06      	ldr	r2, [sp, #24]
 80113a4:	464b      	mov	r3, r9
 80113a6:	4442      	add	r2, r8
 80113a8:	4631      	mov	r1, r6
 80113aa:	4628      	mov	r0, r5
 80113ac:	47b8      	blx	r7
 80113ae:	3001      	adds	r0, #1
 80113b0:	d1c3      	bne.n	801133a <_printf_float+0x32e>
 80113b2:	e686      	b.n	80110c2 <_printf_float+0xb6>
 80113b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80113b8:	f1ba 0f01 	cmp.w	sl, #1
 80113bc:	dc01      	bgt.n	80113c2 <_printf_float+0x3b6>
 80113be:	07db      	lsls	r3, r3, #31
 80113c0:	d536      	bpl.n	8011430 <_printf_float+0x424>
 80113c2:	2301      	movs	r3, #1
 80113c4:	4642      	mov	r2, r8
 80113c6:	4631      	mov	r1, r6
 80113c8:	4628      	mov	r0, r5
 80113ca:	47b8      	blx	r7
 80113cc:	3001      	adds	r0, #1
 80113ce:	f43f ae78 	beq.w	80110c2 <_printf_float+0xb6>
 80113d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113d6:	4631      	mov	r1, r6
 80113d8:	4628      	mov	r0, r5
 80113da:	47b8      	blx	r7
 80113dc:	3001      	adds	r0, #1
 80113de:	f43f ae70 	beq.w	80110c2 <_printf_float+0xb6>
 80113e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80113e6:	2200      	movs	r2, #0
 80113e8:	2300      	movs	r3, #0
 80113ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80113ee:	f7ef fb93 	bl	8000b18 <__aeabi_dcmpeq>
 80113f2:	b9c0      	cbnz	r0, 8011426 <_printf_float+0x41a>
 80113f4:	4653      	mov	r3, sl
 80113f6:	f108 0201 	add.w	r2, r8, #1
 80113fa:	4631      	mov	r1, r6
 80113fc:	4628      	mov	r0, r5
 80113fe:	47b8      	blx	r7
 8011400:	3001      	adds	r0, #1
 8011402:	d10c      	bne.n	801141e <_printf_float+0x412>
 8011404:	e65d      	b.n	80110c2 <_printf_float+0xb6>
 8011406:	2301      	movs	r3, #1
 8011408:	465a      	mov	r2, fp
 801140a:	4631      	mov	r1, r6
 801140c:	4628      	mov	r0, r5
 801140e:	47b8      	blx	r7
 8011410:	3001      	adds	r0, #1
 8011412:	f43f ae56 	beq.w	80110c2 <_printf_float+0xb6>
 8011416:	f108 0801 	add.w	r8, r8, #1
 801141a:	45d0      	cmp	r8, sl
 801141c:	dbf3      	blt.n	8011406 <_printf_float+0x3fa>
 801141e:	464b      	mov	r3, r9
 8011420:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8011424:	e6df      	b.n	80111e6 <_printf_float+0x1da>
 8011426:	f04f 0800 	mov.w	r8, #0
 801142a:	f104 0b1a 	add.w	fp, r4, #26
 801142e:	e7f4      	b.n	801141a <_printf_float+0x40e>
 8011430:	2301      	movs	r3, #1
 8011432:	4642      	mov	r2, r8
 8011434:	e7e1      	b.n	80113fa <_printf_float+0x3ee>
 8011436:	2301      	movs	r3, #1
 8011438:	464a      	mov	r2, r9
 801143a:	4631      	mov	r1, r6
 801143c:	4628      	mov	r0, r5
 801143e:	47b8      	blx	r7
 8011440:	3001      	adds	r0, #1
 8011442:	f43f ae3e 	beq.w	80110c2 <_printf_float+0xb6>
 8011446:	f108 0801 	add.w	r8, r8, #1
 801144a:	68e3      	ldr	r3, [r4, #12]
 801144c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801144e:	1a5b      	subs	r3, r3, r1
 8011450:	4543      	cmp	r3, r8
 8011452:	dcf0      	bgt.n	8011436 <_printf_float+0x42a>
 8011454:	e6fc      	b.n	8011250 <_printf_float+0x244>
 8011456:	f04f 0800 	mov.w	r8, #0
 801145a:	f104 0919 	add.w	r9, r4, #25
 801145e:	e7f4      	b.n	801144a <_printf_float+0x43e>

08011460 <_printf_common>:
 8011460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011464:	4616      	mov	r6, r2
 8011466:	4698      	mov	r8, r3
 8011468:	688a      	ldr	r2, [r1, #8]
 801146a:	690b      	ldr	r3, [r1, #16]
 801146c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011470:	4293      	cmp	r3, r2
 8011472:	bfb8      	it	lt
 8011474:	4613      	movlt	r3, r2
 8011476:	6033      	str	r3, [r6, #0]
 8011478:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801147c:	4607      	mov	r7, r0
 801147e:	460c      	mov	r4, r1
 8011480:	b10a      	cbz	r2, 8011486 <_printf_common+0x26>
 8011482:	3301      	adds	r3, #1
 8011484:	6033      	str	r3, [r6, #0]
 8011486:	6823      	ldr	r3, [r4, #0]
 8011488:	0699      	lsls	r1, r3, #26
 801148a:	bf42      	ittt	mi
 801148c:	6833      	ldrmi	r3, [r6, #0]
 801148e:	3302      	addmi	r3, #2
 8011490:	6033      	strmi	r3, [r6, #0]
 8011492:	6825      	ldr	r5, [r4, #0]
 8011494:	f015 0506 	ands.w	r5, r5, #6
 8011498:	d106      	bne.n	80114a8 <_printf_common+0x48>
 801149a:	f104 0a19 	add.w	sl, r4, #25
 801149e:	68e3      	ldr	r3, [r4, #12]
 80114a0:	6832      	ldr	r2, [r6, #0]
 80114a2:	1a9b      	subs	r3, r3, r2
 80114a4:	42ab      	cmp	r3, r5
 80114a6:	dc26      	bgt.n	80114f6 <_printf_common+0x96>
 80114a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80114ac:	6822      	ldr	r2, [r4, #0]
 80114ae:	3b00      	subs	r3, #0
 80114b0:	bf18      	it	ne
 80114b2:	2301      	movne	r3, #1
 80114b4:	0692      	lsls	r2, r2, #26
 80114b6:	d42b      	bmi.n	8011510 <_printf_common+0xb0>
 80114b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80114bc:	4641      	mov	r1, r8
 80114be:	4638      	mov	r0, r7
 80114c0:	47c8      	blx	r9
 80114c2:	3001      	adds	r0, #1
 80114c4:	d01e      	beq.n	8011504 <_printf_common+0xa4>
 80114c6:	6823      	ldr	r3, [r4, #0]
 80114c8:	6922      	ldr	r2, [r4, #16]
 80114ca:	f003 0306 	and.w	r3, r3, #6
 80114ce:	2b04      	cmp	r3, #4
 80114d0:	bf02      	ittt	eq
 80114d2:	68e5      	ldreq	r5, [r4, #12]
 80114d4:	6833      	ldreq	r3, [r6, #0]
 80114d6:	1aed      	subeq	r5, r5, r3
 80114d8:	68a3      	ldr	r3, [r4, #8]
 80114da:	bf0c      	ite	eq
 80114dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80114e0:	2500      	movne	r5, #0
 80114e2:	4293      	cmp	r3, r2
 80114e4:	bfc4      	itt	gt
 80114e6:	1a9b      	subgt	r3, r3, r2
 80114e8:	18ed      	addgt	r5, r5, r3
 80114ea:	2600      	movs	r6, #0
 80114ec:	341a      	adds	r4, #26
 80114ee:	42b5      	cmp	r5, r6
 80114f0:	d11a      	bne.n	8011528 <_printf_common+0xc8>
 80114f2:	2000      	movs	r0, #0
 80114f4:	e008      	b.n	8011508 <_printf_common+0xa8>
 80114f6:	2301      	movs	r3, #1
 80114f8:	4652      	mov	r2, sl
 80114fa:	4641      	mov	r1, r8
 80114fc:	4638      	mov	r0, r7
 80114fe:	47c8      	blx	r9
 8011500:	3001      	adds	r0, #1
 8011502:	d103      	bne.n	801150c <_printf_common+0xac>
 8011504:	f04f 30ff 	mov.w	r0, #4294967295
 8011508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801150c:	3501      	adds	r5, #1
 801150e:	e7c6      	b.n	801149e <_printf_common+0x3e>
 8011510:	18e1      	adds	r1, r4, r3
 8011512:	1c5a      	adds	r2, r3, #1
 8011514:	2030      	movs	r0, #48	@ 0x30
 8011516:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801151a:	4422      	add	r2, r4
 801151c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011520:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011524:	3302      	adds	r3, #2
 8011526:	e7c7      	b.n	80114b8 <_printf_common+0x58>
 8011528:	2301      	movs	r3, #1
 801152a:	4622      	mov	r2, r4
 801152c:	4641      	mov	r1, r8
 801152e:	4638      	mov	r0, r7
 8011530:	47c8      	blx	r9
 8011532:	3001      	adds	r0, #1
 8011534:	d0e6      	beq.n	8011504 <_printf_common+0xa4>
 8011536:	3601      	adds	r6, #1
 8011538:	e7d9      	b.n	80114ee <_printf_common+0x8e>
	...

0801153c <_printf_i>:
 801153c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011540:	7e0f      	ldrb	r7, [r1, #24]
 8011542:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011544:	2f78      	cmp	r7, #120	@ 0x78
 8011546:	4691      	mov	r9, r2
 8011548:	4680      	mov	r8, r0
 801154a:	460c      	mov	r4, r1
 801154c:	469a      	mov	sl, r3
 801154e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011552:	d807      	bhi.n	8011564 <_printf_i+0x28>
 8011554:	2f62      	cmp	r7, #98	@ 0x62
 8011556:	d80a      	bhi.n	801156e <_printf_i+0x32>
 8011558:	2f00      	cmp	r7, #0
 801155a:	f000 80d2 	beq.w	8011702 <_printf_i+0x1c6>
 801155e:	2f58      	cmp	r7, #88	@ 0x58
 8011560:	f000 80b9 	beq.w	80116d6 <_printf_i+0x19a>
 8011564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011568:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801156c:	e03a      	b.n	80115e4 <_printf_i+0xa8>
 801156e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011572:	2b15      	cmp	r3, #21
 8011574:	d8f6      	bhi.n	8011564 <_printf_i+0x28>
 8011576:	a101      	add	r1, pc, #4	@ (adr r1, 801157c <_printf_i+0x40>)
 8011578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801157c:	080115d5 	.word	0x080115d5
 8011580:	080115e9 	.word	0x080115e9
 8011584:	08011565 	.word	0x08011565
 8011588:	08011565 	.word	0x08011565
 801158c:	08011565 	.word	0x08011565
 8011590:	08011565 	.word	0x08011565
 8011594:	080115e9 	.word	0x080115e9
 8011598:	08011565 	.word	0x08011565
 801159c:	08011565 	.word	0x08011565
 80115a0:	08011565 	.word	0x08011565
 80115a4:	08011565 	.word	0x08011565
 80115a8:	080116e9 	.word	0x080116e9
 80115ac:	08011613 	.word	0x08011613
 80115b0:	080116a3 	.word	0x080116a3
 80115b4:	08011565 	.word	0x08011565
 80115b8:	08011565 	.word	0x08011565
 80115bc:	0801170b 	.word	0x0801170b
 80115c0:	08011565 	.word	0x08011565
 80115c4:	08011613 	.word	0x08011613
 80115c8:	08011565 	.word	0x08011565
 80115cc:	08011565 	.word	0x08011565
 80115d0:	080116ab 	.word	0x080116ab
 80115d4:	6833      	ldr	r3, [r6, #0]
 80115d6:	1d1a      	adds	r2, r3, #4
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	6032      	str	r2, [r6, #0]
 80115dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80115e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80115e4:	2301      	movs	r3, #1
 80115e6:	e09d      	b.n	8011724 <_printf_i+0x1e8>
 80115e8:	6833      	ldr	r3, [r6, #0]
 80115ea:	6820      	ldr	r0, [r4, #0]
 80115ec:	1d19      	adds	r1, r3, #4
 80115ee:	6031      	str	r1, [r6, #0]
 80115f0:	0606      	lsls	r6, r0, #24
 80115f2:	d501      	bpl.n	80115f8 <_printf_i+0xbc>
 80115f4:	681d      	ldr	r5, [r3, #0]
 80115f6:	e003      	b.n	8011600 <_printf_i+0xc4>
 80115f8:	0645      	lsls	r5, r0, #25
 80115fa:	d5fb      	bpl.n	80115f4 <_printf_i+0xb8>
 80115fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011600:	2d00      	cmp	r5, #0
 8011602:	da03      	bge.n	801160c <_printf_i+0xd0>
 8011604:	232d      	movs	r3, #45	@ 0x2d
 8011606:	426d      	negs	r5, r5
 8011608:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801160c:	4859      	ldr	r0, [pc, #356]	@ (8011774 <_printf_i+0x238>)
 801160e:	230a      	movs	r3, #10
 8011610:	e011      	b.n	8011636 <_printf_i+0xfa>
 8011612:	6821      	ldr	r1, [r4, #0]
 8011614:	6833      	ldr	r3, [r6, #0]
 8011616:	0608      	lsls	r0, r1, #24
 8011618:	f853 5b04 	ldr.w	r5, [r3], #4
 801161c:	d402      	bmi.n	8011624 <_printf_i+0xe8>
 801161e:	0649      	lsls	r1, r1, #25
 8011620:	bf48      	it	mi
 8011622:	b2ad      	uxthmi	r5, r5
 8011624:	2f6f      	cmp	r7, #111	@ 0x6f
 8011626:	4853      	ldr	r0, [pc, #332]	@ (8011774 <_printf_i+0x238>)
 8011628:	6033      	str	r3, [r6, #0]
 801162a:	bf14      	ite	ne
 801162c:	230a      	movne	r3, #10
 801162e:	2308      	moveq	r3, #8
 8011630:	2100      	movs	r1, #0
 8011632:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011636:	6866      	ldr	r6, [r4, #4]
 8011638:	60a6      	str	r6, [r4, #8]
 801163a:	2e00      	cmp	r6, #0
 801163c:	bfa2      	ittt	ge
 801163e:	6821      	ldrge	r1, [r4, #0]
 8011640:	f021 0104 	bicge.w	r1, r1, #4
 8011644:	6021      	strge	r1, [r4, #0]
 8011646:	b90d      	cbnz	r5, 801164c <_printf_i+0x110>
 8011648:	2e00      	cmp	r6, #0
 801164a:	d04b      	beq.n	80116e4 <_printf_i+0x1a8>
 801164c:	4616      	mov	r6, r2
 801164e:	fbb5 f1f3 	udiv	r1, r5, r3
 8011652:	fb03 5711 	mls	r7, r3, r1, r5
 8011656:	5dc7      	ldrb	r7, [r0, r7]
 8011658:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801165c:	462f      	mov	r7, r5
 801165e:	42bb      	cmp	r3, r7
 8011660:	460d      	mov	r5, r1
 8011662:	d9f4      	bls.n	801164e <_printf_i+0x112>
 8011664:	2b08      	cmp	r3, #8
 8011666:	d10b      	bne.n	8011680 <_printf_i+0x144>
 8011668:	6823      	ldr	r3, [r4, #0]
 801166a:	07df      	lsls	r7, r3, #31
 801166c:	d508      	bpl.n	8011680 <_printf_i+0x144>
 801166e:	6923      	ldr	r3, [r4, #16]
 8011670:	6861      	ldr	r1, [r4, #4]
 8011672:	4299      	cmp	r1, r3
 8011674:	bfde      	ittt	le
 8011676:	2330      	movle	r3, #48	@ 0x30
 8011678:	f806 3c01 	strble.w	r3, [r6, #-1]
 801167c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011680:	1b92      	subs	r2, r2, r6
 8011682:	6122      	str	r2, [r4, #16]
 8011684:	f8cd a000 	str.w	sl, [sp]
 8011688:	464b      	mov	r3, r9
 801168a:	aa03      	add	r2, sp, #12
 801168c:	4621      	mov	r1, r4
 801168e:	4640      	mov	r0, r8
 8011690:	f7ff fee6 	bl	8011460 <_printf_common>
 8011694:	3001      	adds	r0, #1
 8011696:	d14a      	bne.n	801172e <_printf_i+0x1f2>
 8011698:	f04f 30ff 	mov.w	r0, #4294967295
 801169c:	b004      	add	sp, #16
 801169e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116a2:	6823      	ldr	r3, [r4, #0]
 80116a4:	f043 0320 	orr.w	r3, r3, #32
 80116a8:	6023      	str	r3, [r4, #0]
 80116aa:	4833      	ldr	r0, [pc, #204]	@ (8011778 <_printf_i+0x23c>)
 80116ac:	2778      	movs	r7, #120	@ 0x78
 80116ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80116b2:	6823      	ldr	r3, [r4, #0]
 80116b4:	6831      	ldr	r1, [r6, #0]
 80116b6:	061f      	lsls	r7, r3, #24
 80116b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80116bc:	d402      	bmi.n	80116c4 <_printf_i+0x188>
 80116be:	065f      	lsls	r7, r3, #25
 80116c0:	bf48      	it	mi
 80116c2:	b2ad      	uxthmi	r5, r5
 80116c4:	6031      	str	r1, [r6, #0]
 80116c6:	07d9      	lsls	r1, r3, #31
 80116c8:	bf44      	itt	mi
 80116ca:	f043 0320 	orrmi.w	r3, r3, #32
 80116ce:	6023      	strmi	r3, [r4, #0]
 80116d0:	b11d      	cbz	r5, 80116da <_printf_i+0x19e>
 80116d2:	2310      	movs	r3, #16
 80116d4:	e7ac      	b.n	8011630 <_printf_i+0xf4>
 80116d6:	4827      	ldr	r0, [pc, #156]	@ (8011774 <_printf_i+0x238>)
 80116d8:	e7e9      	b.n	80116ae <_printf_i+0x172>
 80116da:	6823      	ldr	r3, [r4, #0]
 80116dc:	f023 0320 	bic.w	r3, r3, #32
 80116e0:	6023      	str	r3, [r4, #0]
 80116e2:	e7f6      	b.n	80116d2 <_printf_i+0x196>
 80116e4:	4616      	mov	r6, r2
 80116e6:	e7bd      	b.n	8011664 <_printf_i+0x128>
 80116e8:	6833      	ldr	r3, [r6, #0]
 80116ea:	6825      	ldr	r5, [r4, #0]
 80116ec:	6961      	ldr	r1, [r4, #20]
 80116ee:	1d18      	adds	r0, r3, #4
 80116f0:	6030      	str	r0, [r6, #0]
 80116f2:	062e      	lsls	r6, r5, #24
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	d501      	bpl.n	80116fc <_printf_i+0x1c0>
 80116f8:	6019      	str	r1, [r3, #0]
 80116fa:	e002      	b.n	8011702 <_printf_i+0x1c6>
 80116fc:	0668      	lsls	r0, r5, #25
 80116fe:	d5fb      	bpl.n	80116f8 <_printf_i+0x1bc>
 8011700:	8019      	strh	r1, [r3, #0]
 8011702:	2300      	movs	r3, #0
 8011704:	6123      	str	r3, [r4, #16]
 8011706:	4616      	mov	r6, r2
 8011708:	e7bc      	b.n	8011684 <_printf_i+0x148>
 801170a:	6833      	ldr	r3, [r6, #0]
 801170c:	1d1a      	adds	r2, r3, #4
 801170e:	6032      	str	r2, [r6, #0]
 8011710:	681e      	ldr	r6, [r3, #0]
 8011712:	6862      	ldr	r2, [r4, #4]
 8011714:	2100      	movs	r1, #0
 8011716:	4630      	mov	r0, r6
 8011718:	f7ee fd82 	bl	8000220 <memchr>
 801171c:	b108      	cbz	r0, 8011722 <_printf_i+0x1e6>
 801171e:	1b80      	subs	r0, r0, r6
 8011720:	6060      	str	r0, [r4, #4]
 8011722:	6863      	ldr	r3, [r4, #4]
 8011724:	6123      	str	r3, [r4, #16]
 8011726:	2300      	movs	r3, #0
 8011728:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801172c:	e7aa      	b.n	8011684 <_printf_i+0x148>
 801172e:	6923      	ldr	r3, [r4, #16]
 8011730:	4632      	mov	r2, r6
 8011732:	4649      	mov	r1, r9
 8011734:	4640      	mov	r0, r8
 8011736:	47d0      	blx	sl
 8011738:	3001      	adds	r0, #1
 801173a:	d0ad      	beq.n	8011698 <_printf_i+0x15c>
 801173c:	6823      	ldr	r3, [r4, #0]
 801173e:	079b      	lsls	r3, r3, #30
 8011740:	d413      	bmi.n	801176a <_printf_i+0x22e>
 8011742:	68e0      	ldr	r0, [r4, #12]
 8011744:	9b03      	ldr	r3, [sp, #12]
 8011746:	4298      	cmp	r0, r3
 8011748:	bfb8      	it	lt
 801174a:	4618      	movlt	r0, r3
 801174c:	e7a6      	b.n	801169c <_printf_i+0x160>
 801174e:	2301      	movs	r3, #1
 8011750:	4632      	mov	r2, r6
 8011752:	4649      	mov	r1, r9
 8011754:	4640      	mov	r0, r8
 8011756:	47d0      	blx	sl
 8011758:	3001      	adds	r0, #1
 801175a:	d09d      	beq.n	8011698 <_printf_i+0x15c>
 801175c:	3501      	adds	r5, #1
 801175e:	68e3      	ldr	r3, [r4, #12]
 8011760:	9903      	ldr	r1, [sp, #12]
 8011762:	1a5b      	subs	r3, r3, r1
 8011764:	42ab      	cmp	r3, r5
 8011766:	dcf2      	bgt.n	801174e <_printf_i+0x212>
 8011768:	e7eb      	b.n	8011742 <_printf_i+0x206>
 801176a:	2500      	movs	r5, #0
 801176c:	f104 0619 	add.w	r6, r4, #25
 8011770:	e7f5      	b.n	801175e <_printf_i+0x222>
 8011772:	bf00      	nop
 8011774:	080170d0 	.word	0x080170d0
 8011778:	080170e1 	.word	0x080170e1

0801177c <_scanf_float>:
 801177c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011780:	b087      	sub	sp, #28
 8011782:	4617      	mov	r7, r2
 8011784:	9303      	str	r3, [sp, #12]
 8011786:	688b      	ldr	r3, [r1, #8]
 8011788:	1e5a      	subs	r2, r3, #1
 801178a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801178e:	bf81      	itttt	hi
 8011790:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011794:	eb03 0b05 	addhi.w	fp, r3, r5
 8011798:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801179c:	608b      	strhi	r3, [r1, #8]
 801179e:	680b      	ldr	r3, [r1, #0]
 80117a0:	460a      	mov	r2, r1
 80117a2:	f04f 0500 	mov.w	r5, #0
 80117a6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80117aa:	f842 3b1c 	str.w	r3, [r2], #28
 80117ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80117b2:	4680      	mov	r8, r0
 80117b4:	460c      	mov	r4, r1
 80117b6:	bf98      	it	ls
 80117b8:	f04f 0b00 	movls.w	fp, #0
 80117bc:	9201      	str	r2, [sp, #4]
 80117be:	4616      	mov	r6, r2
 80117c0:	46aa      	mov	sl, r5
 80117c2:	46a9      	mov	r9, r5
 80117c4:	9502      	str	r5, [sp, #8]
 80117c6:	68a2      	ldr	r2, [r4, #8]
 80117c8:	b152      	cbz	r2, 80117e0 <_scanf_float+0x64>
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	781b      	ldrb	r3, [r3, #0]
 80117ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80117d0:	d864      	bhi.n	801189c <_scanf_float+0x120>
 80117d2:	2b40      	cmp	r3, #64	@ 0x40
 80117d4:	d83c      	bhi.n	8011850 <_scanf_float+0xd4>
 80117d6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80117da:	b2c8      	uxtb	r0, r1
 80117dc:	280e      	cmp	r0, #14
 80117de:	d93a      	bls.n	8011856 <_scanf_float+0xda>
 80117e0:	f1b9 0f00 	cmp.w	r9, #0
 80117e4:	d003      	beq.n	80117ee <_scanf_float+0x72>
 80117e6:	6823      	ldr	r3, [r4, #0]
 80117e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80117ec:	6023      	str	r3, [r4, #0]
 80117ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80117f2:	f1ba 0f01 	cmp.w	sl, #1
 80117f6:	f200 8117 	bhi.w	8011a28 <_scanf_float+0x2ac>
 80117fa:	9b01      	ldr	r3, [sp, #4]
 80117fc:	429e      	cmp	r6, r3
 80117fe:	f200 8108 	bhi.w	8011a12 <_scanf_float+0x296>
 8011802:	2001      	movs	r0, #1
 8011804:	b007      	add	sp, #28
 8011806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801180a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801180e:	2a0d      	cmp	r2, #13
 8011810:	d8e6      	bhi.n	80117e0 <_scanf_float+0x64>
 8011812:	a101      	add	r1, pc, #4	@ (adr r1, 8011818 <_scanf_float+0x9c>)
 8011814:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011818:	0801195f 	.word	0x0801195f
 801181c:	080117e1 	.word	0x080117e1
 8011820:	080117e1 	.word	0x080117e1
 8011824:	080117e1 	.word	0x080117e1
 8011828:	080119bf 	.word	0x080119bf
 801182c:	08011997 	.word	0x08011997
 8011830:	080117e1 	.word	0x080117e1
 8011834:	080117e1 	.word	0x080117e1
 8011838:	0801196d 	.word	0x0801196d
 801183c:	080117e1 	.word	0x080117e1
 8011840:	080117e1 	.word	0x080117e1
 8011844:	080117e1 	.word	0x080117e1
 8011848:	080117e1 	.word	0x080117e1
 801184c:	08011925 	.word	0x08011925
 8011850:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8011854:	e7db      	b.n	801180e <_scanf_float+0x92>
 8011856:	290e      	cmp	r1, #14
 8011858:	d8c2      	bhi.n	80117e0 <_scanf_float+0x64>
 801185a:	a001      	add	r0, pc, #4	@ (adr r0, 8011860 <_scanf_float+0xe4>)
 801185c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011860:	08011915 	.word	0x08011915
 8011864:	080117e1 	.word	0x080117e1
 8011868:	08011915 	.word	0x08011915
 801186c:	080119ab 	.word	0x080119ab
 8011870:	080117e1 	.word	0x080117e1
 8011874:	080118bd 	.word	0x080118bd
 8011878:	080118fb 	.word	0x080118fb
 801187c:	080118fb 	.word	0x080118fb
 8011880:	080118fb 	.word	0x080118fb
 8011884:	080118fb 	.word	0x080118fb
 8011888:	080118fb 	.word	0x080118fb
 801188c:	080118fb 	.word	0x080118fb
 8011890:	080118fb 	.word	0x080118fb
 8011894:	080118fb 	.word	0x080118fb
 8011898:	080118fb 	.word	0x080118fb
 801189c:	2b6e      	cmp	r3, #110	@ 0x6e
 801189e:	d809      	bhi.n	80118b4 <_scanf_float+0x138>
 80118a0:	2b60      	cmp	r3, #96	@ 0x60
 80118a2:	d8b2      	bhi.n	801180a <_scanf_float+0x8e>
 80118a4:	2b54      	cmp	r3, #84	@ 0x54
 80118a6:	d07b      	beq.n	80119a0 <_scanf_float+0x224>
 80118a8:	2b59      	cmp	r3, #89	@ 0x59
 80118aa:	d199      	bne.n	80117e0 <_scanf_float+0x64>
 80118ac:	2d07      	cmp	r5, #7
 80118ae:	d197      	bne.n	80117e0 <_scanf_float+0x64>
 80118b0:	2508      	movs	r5, #8
 80118b2:	e02c      	b.n	801190e <_scanf_float+0x192>
 80118b4:	2b74      	cmp	r3, #116	@ 0x74
 80118b6:	d073      	beq.n	80119a0 <_scanf_float+0x224>
 80118b8:	2b79      	cmp	r3, #121	@ 0x79
 80118ba:	e7f6      	b.n	80118aa <_scanf_float+0x12e>
 80118bc:	6821      	ldr	r1, [r4, #0]
 80118be:	05c8      	lsls	r0, r1, #23
 80118c0:	d51b      	bpl.n	80118fa <_scanf_float+0x17e>
 80118c2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80118c6:	6021      	str	r1, [r4, #0]
 80118c8:	f109 0901 	add.w	r9, r9, #1
 80118cc:	f1bb 0f00 	cmp.w	fp, #0
 80118d0:	d003      	beq.n	80118da <_scanf_float+0x15e>
 80118d2:	3201      	adds	r2, #1
 80118d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80118d8:	60a2      	str	r2, [r4, #8]
 80118da:	68a3      	ldr	r3, [r4, #8]
 80118dc:	3b01      	subs	r3, #1
 80118de:	60a3      	str	r3, [r4, #8]
 80118e0:	6923      	ldr	r3, [r4, #16]
 80118e2:	3301      	adds	r3, #1
 80118e4:	6123      	str	r3, [r4, #16]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	3b01      	subs	r3, #1
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	607b      	str	r3, [r7, #4]
 80118ee:	f340 8087 	ble.w	8011a00 <_scanf_float+0x284>
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	3301      	adds	r3, #1
 80118f6:	603b      	str	r3, [r7, #0]
 80118f8:	e765      	b.n	80117c6 <_scanf_float+0x4a>
 80118fa:	eb1a 0105 	adds.w	r1, sl, r5
 80118fe:	f47f af6f 	bne.w	80117e0 <_scanf_float+0x64>
 8011902:	6822      	ldr	r2, [r4, #0]
 8011904:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8011908:	6022      	str	r2, [r4, #0]
 801190a:	460d      	mov	r5, r1
 801190c:	468a      	mov	sl, r1
 801190e:	f806 3b01 	strb.w	r3, [r6], #1
 8011912:	e7e2      	b.n	80118da <_scanf_float+0x15e>
 8011914:	6822      	ldr	r2, [r4, #0]
 8011916:	0610      	lsls	r0, r2, #24
 8011918:	f57f af62 	bpl.w	80117e0 <_scanf_float+0x64>
 801191c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011920:	6022      	str	r2, [r4, #0]
 8011922:	e7f4      	b.n	801190e <_scanf_float+0x192>
 8011924:	f1ba 0f00 	cmp.w	sl, #0
 8011928:	d10e      	bne.n	8011948 <_scanf_float+0x1cc>
 801192a:	f1b9 0f00 	cmp.w	r9, #0
 801192e:	d10e      	bne.n	801194e <_scanf_float+0x1d2>
 8011930:	6822      	ldr	r2, [r4, #0]
 8011932:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011936:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801193a:	d108      	bne.n	801194e <_scanf_float+0x1d2>
 801193c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011940:	6022      	str	r2, [r4, #0]
 8011942:	f04f 0a01 	mov.w	sl, #1
 8011946:	e7e2      	b.n	801190e <_scanf_float+0x192>
 8011948:	f1ba 0f02 	cmp.w	sl, #2
 801194c:	d055      	beq.n	80119fa <_scanf_float+0x27e>
 801194e:	2d01      	cmp	r5, #1
 8011950:	d002      	beq.n	8011958 <_scanf_float+0x1dc>
 8011952:	2d04      	cmp	r5, #4
 8011954:	f47f af44 	bne.w	80117e0 <_scanf_float+0x64>
 8011958:	3501      	adds	r5, #1
 801195a:	b2ed      	uxtb	r5, r5
 801195c:	e7d7      	b.n	801190e <_scanf_float+0x192>
 801195e:	f1ba 0f01 	cmp.w	sl, #1
 8011962:	f47f af3d 	bne.w	80117e0 <_scanf_float+0x64>
 8011966:	f04f 0a02 	mov.w	sl, #2
 801196a:	e7d0      	b.n	801190e <_scanf_float+0x192>
 801196c:	b97d      	cbnz	r5, 801198e <_scanf_float+0x212>
 801196e:	f1b9 0f00 	cmp.w	r9, #0
 8011972:	f47f af38 	bne.w	80117e6 <_scanf_float+0x6a>
 8011976:	6822      	ldr	r2, [r4, #0]
 8011978:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801197c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011980:	f040 8108 	bne.w	8011b94 <_scanf_float+0x418>
 8011984:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011988:	6022      	str	r2, [r4, #0]
 801198a:	2501      	movs	r5, #1
 801198c:	e7bf      	b.n	801190e <_scanf_float+0x192>
 801198e:	2d03      	cmp	r5, #3
 8011990:	d0e2      	beq.n	8011958 <_scanf_float+0x1dc>
 8011992:	2d05      	cmp	r5, #5
 8011994:	e7de      	b.n	8011954 <_scanf_float+0x1d8>
 8011996:	2d02      	cmp	r5, #2
 8011998:	f47f af22 	bne.w	80117e0 <_scanf_float+0x64>
 801199c:	2503      	movs	r5, #3
 801199e:	e7b6      	b.n	801190e <_scanf_float+0x192>
 80119a0:	2d06      	cmp	r5, #6
 80119a2:	f47f af1d 	bne.w	80117e0 <_scanf_float+0x64>
 80119a6:	2507      	movs	r5, #7
 80119a8:	e7b1      	b.n	801190e <_scanf_float+0x192>
 80119aa:	6822      	ldr	r2, [r4, #0]
 80119ac:	0591      	lsls	r1, r2, #22
 80119ae:	f57f af17 	bpl.w	80117e0 <_scanf_float+0x64>
 80119b2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80119b6:	6022      	str	r2, [r4, #0]
 80119b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80119bc:	e7a7      	b.n	801190e <_scanf_float+0x192>
 80119be:	6822      	ldr	r2, [r4, #0]
 80119c0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80119c4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80119c8:	d006      	beq.n	80119d8 <_scanf_float+0x25c>
 80119ca:	0550      	lsls	r0, r2, #21
 80119cc:	f57f af08 	bpl.w	80117e0 <_scanf_float+0x64>
 80119d0:	f1b9 0f00 	cmp.w	r9, #0
 80119d4:	f000 80de 	beq.w	8011b94 <_scanf_float+0x418>
 80119d8:	0591      	lsls	r1, r2, #22
 80119da:	bf58      	it	pl
 80119dc:	9902      	ldrpl	r1, [sp, #8]
 80119de:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80119e2:	bf58      	it	pl
 80119e4:	eba9 0101 	subpl.w	r1, r9, r1
 80119e8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80119ec:	bf58      	it	pl
 80119ee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80119f2:	6022      	str	r2, [r4, #0]
 80119f4:	f04f 0900 	mov.w	r9, #0
 80119f8:	e789      	b.n	801190e <_scanf_float+0x192>
 80119fa:	f04f 0a03 	mov.w	sl, #3
 80119fe:	e786      	b.n	801190e <_scanf_float+0x192>
 8011a00:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011a04:	4639      	mov	r1, r7
 8011a06:	4640      	mov	r0, r8
 8011a08:	4798      	blx	r3
 8011a0a:	2800      	cmp	r0, #0
 8011a0c:	f43f aedb 	beq.w	80117c6 <_scanf_float+0x4a>
 8011a10:	e6e6      	b.n	80117e0 <_scanf_float+0x64>
 8011a12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011a16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011a1a:	463a      	mov	r2, r7
 8011a1c:	4640      	mov	r0, r8
 8011a1e:	4798      	blx	r3
 8011a20:	6923      	ldr	r3, [r4, #16]
 8011a22:	3b01      	subs	r3, #1
 8011a24:	6123      	str	r3, [r4, #16]
 8011a26:	e6e8      	b.n	80117fa <_scanf_float+0x7e>
 8011a28:	1e6b      	subs	r3, r5, #1
 8011a2a:	2b06      	cmp	r3, #6
 8011a2c:	d824      	bhi.n	8011a78 <_scanf_float+0x2fc>
 8011a2e:	2d02      	cmp	r5, #2
 8011a30:	d836      	bhi.n	8011aa0 <_scanf_float+0x324>
 8011a32:	9b01      	ldr	r3, [sp, #4]
 8011a34:	429e      	cmp	r6, r3
 8011a36:	f67f aee4 	bls.w	8011802 <_scanf_float+0x86>
 8011a3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011a3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011a42:	463a      	mov	r2, r7
 8011a44:	4640      	mov	r0, r8
 8011a46:	4798      	blx	r3
 8011a48:	6923      	ldr	r3, [r4, #16]
 8011a4a:	3b01      	subs	r3, #1
 8011a4c:	6123      	str	r3, [r4, #16]
 8011a4e:	e7f0      	b.n	8011a32 <_scanf_float+0x2b6>
 8011a50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011a54:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011a58:	463a      	mov	r2, r7
 8011a5a:	4640      	mov	r0, r8
 8011a5c:	4798      	blx	r3
 8011a5e:	6923      	ldr	r3, [r4, #16]
 8011a60:	3b01      	subs	r3, #1
 8011a62:	6123      	str	r3, [r4, #16]
 8011a64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011a68:	fa5f fa8a 	uxtb.w	sl, sl
 8011a6c:	f1ba 0f02 	cmp.w	sl, #2
 8011a70:	d1ee      	bne.n	8011a50 <_scanf_float+0x2d4>
 8011a72:	3d03      	subs	r5, #3
 8011a74:	b2ed      	uxtb	r5, r5
 8011a76:	1b76      	subs	r6, r6, r5
 8011a78:	6823      	ldr	r3, [r4, #0]
 8011a7a:	05da      	lsls	r2, r3, #23
 8011a7c:	d530      	bpl.n	8011ae0 <_scanf_float+0x364>
 8011a7e:	055b      	lsls	r3, r3, #21
 8011a80:	d511      	bpl.n	8011aa6 <_scanf_float+0x32a>
 8011a82:	9b01      	ldr	r3, [sp, #4]
 8011a84:	429e      	cmp	r6, r3
 8011a86:	f67f aebc 	bls.w	8011802 <_scanf_float+0x86>
 8011a8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011a8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011a92:	463a      	mov	r2, r7
 8011a94:	4640      	mov	r0, r8
 8011a96:	4798      	blx	r3
 8011a98:	6923      	ldr	r3, [r4, #16]
 8011a9a:	3b01      	subs	r3, #1
 8011a9c:	6123      	str	r3, [r4, #16]
 8011a9e:	e7f0      	b.n	8011a82 <_scanf_float+0x306>
 8011aa0:	46aa      	mov	sl, r5
 8011aa2:	46b3      	mov	fp, r6
 8011aa4:	e7de      	b.n	8011a64 <_scanf_float+0x2e8>
 8011aa6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011aaa:	6923      	ldr	r3, [r4, #16]
 8011aac:	2965      	cmp	r1, #101	@ 0x65
 8011aae:	f103 33ff 	add.w	r3, r3, #4294967295
 8011ab2:	f106 35ff 	add.w	r5, r6, #4294967295
 8011ab6:	6123      	str	r3, [r4, #16]
 8011ab8:	d00c      	beq.n	8011ad4 <_scanf_float+0x358>
 8011aba:	2945      	cmp	r1, #69	@ 0x45
 8011abc:	d00a      	beq.n	8011ad4 <_scanf_float+0x358>
 8011abe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011ac2:	463a      	mov	r2, r7
 8011ac4:	4640      	mov	r0, r8
 8011ac6:	4798      	blx	r3
 8011ac8:	6923      	ldr	r3, [r4, #16]
 8011aca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011ace:	3b01      	subs	r3, #1
 8011ad0:	1eb5      	subs	r5, r6, #2
 8011ad2:	6123      	str	r3, [r4, #16]
 8011ad4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011ad8:	463a      	mov	r2, r7
 8011ada:	4640      	mov	r0, r8
 8011adc:	4798      	blx	r3
 8011ade:	462e      	mov	r6, r5
 8011ae0:	6822      	ldr	r2, [r4, #0]
 8011ae2:	f012 0210 	ands.w	r2, r2, #16
 8011ae6:	d001      	beq.n	8011aec <_scanf_float+0x370>
 8011ae8:	2000      	movs	r0, #0
 8011aea:	e68b      	b.n	8011804 <_scanf_float+0x88>
 8011aec:	7032      	strb	r2, [r6, #0]
 8011aee:	6823      	ldr	r3, [r4, #0]
 8011af0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011af8:	d11c      	bne.n	8011b34 <_scanf_float+0x3b8>
 8011afa:	9b02      	ldr	r3, [sp, #8]
 8011afc:	454b      	cmp	r3, r9
 8011afe:	eba3 0209 	sub.w	r2, r3, r9
 8011b02:	d123      	bne.n	8011b4c <_scanf_float+0x3d0>
 8011b04:	9901      	ldr	r1, [sp, #4]
 8011b06:	2200      	movs	r2, #0
 8011b08:	4640      	mov	r0, r8
 8011b0a:	f002 fc45 	bl	8014398 <_strtod_r>
 8011b0e:	9b03      	ldr	r3, [sp, #12]
 8011b10:	6821      	ldr	r1, [r4, #0]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	f011 0f02 	tst.w	r1, #2
 8011b18:	ec57 6b10 	vmov	r6, r7, d0
 8011b1c:	f103 0204 	add.w	r2, r3, #4
 8011b20:	d01f      	beq.n	8011b62 <_scanf_float+0x3e6>
 8011b22:	9903      	ldr	r1, [sp, #12]
 8011b24:	600a      	str	r2, [r1, #0]
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	e9c3 6700 	strd	r6, r7, [r3]
 8011b2c:	68e3      	ldr	r3, [r4, #12]
 8011b2e:	3301      	adds	r3, #1
 8011b30:	60e3      	str	r3, [r4, #12]
 8011b32:	e7d9      	b.n	8011ae8 <_scanf_float+0x36c>
 8011b34:	9b04      	ldr	r3, [sp, #16]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d0e4      	beq.n	8011b04 <_scanf_float+0x388>
 8011b3a:	9905      	ldr	r1, [sp, #20]
 8011b3c:	230a      	movs	r3, #10
 8011b3e:	3101      	adds	r1, #1
 8011b40:	4640      	mov	r0, r8
 8011b42:	f002 fca9 	bl	8014498 <_strtol_r>
 8011b46:	9b04      	ldr	r3, [sp, #16]
 8011b48:	9e05      	ldr	r6, [sp, #20]
 8011b4a:	1ac2      	subs	r2, r0, r3
 8011b4c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011b50:	429e      	cmp	r6, r3
 8011b52:	bf28      	it	cs
 8011b54:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011b58:	4910      	ldr	r1, [pc, #64]	@ (8011b9c <_scanf_float+0x420>)
 8011b5a:	4630      	mov	r0, r6
 8011b5c:	f000 f8e4 	bl	8011d28 <siprintf>
 8011b60:	e7d0      	b.n	8011b04 <_scanf_float+0x388>
 8011b62:	f011 0f04 	tst.w	r1, #4
 8011b66:	9903      	ldr	r1, [sp, #12]
 8011b68:	600a      	str	r2, [r1, #0]
 8011b6a:	d1dc      	bne.n	8011b26 <_scanf_float+0x3aa>
 8011b6c:	681d      	ldr	r5, [r3, #0]
 8011b6e:	4632      	mov	r2, r6
 8011b70:	463b      	mov	r3, r7
 8011b72:	4630      	mov	r0, r6
 8011b74:	4639      	mov	r1, r7
 8011b76:	f7ef f801 	bl	8000b7c <__aeabi_dcmpun>
 8011b7a:	b128      	cbz	r0, 8011b88 <_scanf_float+0x40c>
 8011b7c:	4808      	ldr	r0, [pc, #32]	@ (8011ba0 <_scanf_float+0x424>)
 8011b7e:	f000 fa03 	bl	8011f88 <nanf>
 8011b82:	ed85 0a00 	vstr	s0, [r5]
 8011b86:	e7d1      	b.n	8011b2c <_scanf_float+0x3b0>
 8011b88:	4630      	mov	r0, r6
 8011b8a:	4639      	mov	r1, r7
 8011b8c:	f7ef f854 	bl	8000c38 <__aeabi_d2f>
 8011b90:	6028      	str	r0, [r5, #0]
 8011b92:	e7cb      	b.n	8011b2c <_scanf_float+0x3b0>
 8011b94:	f04f 0900 	mov.w	r9, #0
 8011b98:	e629      	b.n	80117ee <_scanf_float+0x72>
 8011b9a:	bf00      	nop
 8011b9c:	080170f2 	.word	0x080170f2
 8011ba0:	080174a8 	.word	0x080174a8

08011ba4 <std>:
 8011ba4:	2300      	movs	r3, #0
 8011ba6:	b510      	push	{r4, lr}
 8011ba8:	4604      	mov	r4, r0
 8011baa:	e9c0 3300 	strd	r3, r3, [r0]
 8011bae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011bb2:	6083      	str	r3, [r0, #8]
 8011bb4:	8181      	strh	r1, [r0, #12]
 8011bb6:	6643      	str	r3, [r0, #100]	@ 0x64
 8011bb8:	81c2      	strh	r2, [r0, #14]
 8011bba:	6183      	str	r3, [r0, #24]
 8011bbc:	4619      	mov	r1, r3
 8011bbe:	2208      	movs	r2, #8
 8011bc0:	305c      	adds	r0, #92	@ 0x5c
 8011bc2:	f000 f940 	bl	8011e46 <memset>
 8011bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8011bfc <std+0x58>)
 8011bc8:	6263      	str	r3, [r4, #36]	@ 0x24
 8011bca:	4b0d      	ldr	r3, [pc, #52]	@ (8011c00 <std+0x5c>)
 8011bcc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011bce:	4b0d      	ldr	r3, [pc, #52]	@ (8011c04 <std+0x60>)
 8011bd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8011c08 <std+0x64>)
 8011bd4:	6323      	str	r3, [r4, #48]	@ 0x30
 8011bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8011c0c <std+0x68>)
 8011bd8:	6224      	str	r4, [r4, #32]
 8011bda:	429c      	cmp	r4, r3
 8011bdc:	d006      	beq.n	8011bec <std+0x48>
 8011bde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011be2:	4294      	cmp	r4, r2
 8011be4:	d002      	beq.n	8011bec <std+0x48>
 8011be6:	33d0      	adds	r3, #208	@ 0xd0
 8011be8:	429c      	cmp	r4, r3
 8011bea:	d105      	bne.n	8011bf8 <std+0x54>
 8011bec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011bf4:	f000 b9b6 	b.w	8011f64 <__retarget_lock_init_recursive>
 8011bf8:	bd10      	pop	{r4, pc}
 8011bfa:	bf00      	nop
 8011bfc:	08011dbd 	.word	0x08011dbd
 8011c00:	08011de3 	.word	0x08011de3
 8011c04:	08011e1b 	.word	0x08011e1b
 8011c08:	08011e3f 	.word	0x08011e3f
 8011c0c:	20002598 	.word	0x20002598

08011c10 <stdio_exit_handler>:
 8011c10:	4a02      	ldr	r2, [pc, #8]	@ (8011c1c <stdio_exit_handler+0xc>)
 8011c12:	4903      	ldr	r1, [pc, #12]	@ (8011c20 <stdio_exit_handler+0x10>)
 8011c14:	4803      	ldr	r0, [pc, #12]	@ (8011c24 <stdio_exit_handler+0x14>)
 8011c16:	f000 b869 	b.w	8011cec <_fwalk_sglue>
 8011c1a:	bf00      	nop
 8011c1c:	200001d8 	.word	0x200001d8
 8011c20:	08014e89 	.word	0x08014e89
 8011c24:	200001e8 	.word	0x200001e8

08011c28 <cleanup_stdio>:
 8011c28:	6841      	ldr	r1, [r0, #4]
 8011c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8011c5c <cleanup_stdio+0x34>)
 8011c2c:	4299      	cmp	r1, r3
 8011c2e:	b510      	push	{r4, lr}
 8011c30:	4604      	mov	r4, r0
 8011c32:	d001      	beq.n	8011c38 <cleanup_stdio+0x10>
 8011c34:	f003 f928 	bl	8014e88 <_fflush_r>
 8011c38:	68a1      	ldr	r1, [r4, #8]
 8011c3a:	4b09      	ldr	r3, [pc, #36]	@ (8011c60 <cleanup_stdio+0x38>)
 8011c3c:	4299      	cmp	r1, r3
 8011c3e:	d002      	beq.n	8011c46 <cleanup_stdio+0x1e>
 8011c40:	4620      	mov	r0, r4
 8011c42:	f003 f921 	bl	8014e88 <_fflush_r>
 8011c46:	68e1      	ldr	r1, [r4, #12]
 8011c48:	4b06      	ldr	r3, [pc, #24]	@ (8011c64 <cleanup_stdio+0x3c>)
 8011c4a:	4299      	cmp	r1, r3
 8011c4c:	d004      	beq.n	8011c58 <cleanup_stdio+0x30>
 8011c4e:	4620      	mov	r0, r4
 8011c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c54:	f003 b918 	b.w	8014e88 <_fflush_r>
 8011c58:	bd10      	pop	{r4, pc}
 8011c5a:	bf00      	nop
 8011c5c:	20002598 	.word	0x20002598
 8011c60:	20002600 	.word	0x20002600
 8011c64:	20002668 	.word	0x20002668

08011c68 <global_stdio_init.part.0>:
 8011c68:	b510      	push	{r4, lr}
 8011c6a:	4b0b      	ldr	r3, [pc, #44]	@ (8011c98 <global_stdio_init.part.0+0x30>)
 8011c6c:	4c0b      	ldr	r4, [pc, #44]	@ (8011c9c <global_stdio_init.part.0+0x34>)
 8011c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8011ca0 <global_stdio_init.part.0+0x38>)
 8011c70:	601a      	str	r2, [r3, #0]
 8011c72:	4620      	mov	r0, r4
 8011c74:	2200      	movs	r2, #0
 8011c76:	2104      	movs	r1, #4
 8011c78:	f7ff ff94 	bl	8011ba4 <std>
 8011c7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011c80:	2201      	movs	r2, #1
 8011c82:	2109      	movs	r1, #9
 8011c84:	f7ff ff8e 	bl	8011ba4 <std>
 8011c88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011c8c:	2202      	movs	r2, #2
 8011c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011c92:	2112      	movs	r1, #18
 8011c94:	f7ff bf86 	b.w	8011ba4 <std>
 8011c98:	200026d0 	.word	0x200026d0
 8011c9c:	20002598 	.word	0x20002598
 8011ca0:	08011c11 	.word	0x08011c11

08011ca4 <__sfp_lock_acquire>:
 8011ca4:	4801      	ldr	r0, [pc, #4]	@ (8011cac <__sfp_lock_acquire+0x8>)
 8011ca6:	f000 b95e 	b.w	8011f66 <__retarget_lock_acquire_recursive>
 8011caa:	bf00      	nop
 8011cac:	200026d9 	.word	0x200026d9

08011cb0 <__sfp_lock_release>:
 8011cb0:	4801      	ldr	r0, [pc, #4]	@ (8011cb8 <__sfp_lock_release+0x8>)
 8011cb2:	f000 b959 	b.w	8011f68 <__retarget_lock_release_recursive>
 8011cb6:	bf00      	nop
 8011cb8:	200026d9 	.word	0x200026d9

08011cbc <__sinit>:
 8011cbc:	b510      	push	{r4, lr}
 8011cbe:	4604      	mov	r4, r0
 8011cc0:	f7ff fff0 	bl	8011ca4 <__sfp_lock_acquire>
 8011cc4:	6a23      	ldr	r3, [r4, #32]
 8011cc6:	b11b      	cbz	r3, 8011cd0 <__sinit+0x14>
 8011cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ccc:	f7ff bff0 	b.w	8011cb0 <__sfp_lock_release>
 8011cd0:	4b04      	ldr	r3, [pc, #16]	@ (8011ce4 <__sinit+0x28>)
 8011cd2:	6223      	str	r3, [r4, #32]
 8011cd4:	4b04      	ldr	r3, [pc, #16]	@ (8011ce8 <__sinit+0x2c>)
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d1f5      	bne.n	8011cc8 <__sinit+0xc>
 8011cdc:	f7ff ffc4 	bl	8011c68 <global_stdio_init.part.0>
 8011ce0:	e7f2      	b.n	8011cc8 <__sinit+0xc>
 8011ce2:	bf00      	nop
 8011ce4:	08011c29 	.word	0x08011c29
 8011ce8:	200026d0 	.word	0x200026d0

08011cec <_fwalk_sglue>:
 8011cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cf0:	4607      	mov	r7, r0
 8011cf2:	4688      	mov	r8, r1
 8011cf4:	4614      	mov	r4, r2
 8011cf6:	2600      	movs	r6, #0
 8011cf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011cfc:	f1b9 0901 	subs.w	r9, r9, #1
 8011d00:	d505      	bpl.n	8011d0e <_fwalk_sglue+0x22>
 8011d02:	6824      	ldr	r4, [r4, #0]
 8011d04:	2c00      	cmp	r4, #0
 8011d06:	d1f7      	bne.n	8011cf8 <_fwalk_sglue+0xc>
 8011d08:	4630      	mov	r0, r6
 8011d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d0e:	89ab      	ldrh	r3, [r5, #12]
 8011d10:	2b01      	cmp	r3, #1
 8011d12:	d907      	bls.n	8011d24 <_fwalk_sglue+0x38>
 8011d14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d18:	3301      	adds	r3, #1
 8011d1a:	d003      	beq.n	8011d24 <_fwalk_sglue+0x38>
 8011d1c:	4629      	mov	r1, r5
 8011d1e:	4638      	mov	r0, r7
 8011d20:	47c0      	blx	r8
 8011d22:	4306      	orrs	r6, r0
 8011d24:	3568      	adds	r5, #104	@ 0x68
 8011d26:	e7e9      	b.n	8011cfc <_fwalk_sglue+0x10>

08011d28 <siprintf>:
 8011d28:	b40e      	push	{r1, r2, r3}
 8011d2a:	b500      	push	{lr}
 8011d2c:	b09c      	sub	sp, #112	@ 0x70
 8011d2e:	ab1d      	add	r3, sp, #116	@ 0x74
 8011d30:	9002      	str	r0, [sp, #8]
 8011d32:	9006      	str	r0, [sp, #24]
 8011d34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011d38:	4809      	ldr	r0, [pc, #36]	@ (8011d60 <siprintf+0x38>)
 8011d3a:	9107      	str	r1, [sp, #28]
 8011d3c:	9104      	str	r1, [sp, #16]
 8011d3e:	4909      	ldr	r1, [pc, #36]	@ (8011d64 <siprintf+0x3c>)
 8011d40:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d44:	9105      	str	r1, [sp, #20]
 8011d46:	6800      	ldr	r0, [r0, #0]
 8011d48:	9301      	str	r3, [sp, #4]
 8011d4a:	a902      	add	r1, sp, #8
 8011d4c:	f002 fc02 	bl	8014554 <_svfiprintf_r>
 8011d50:	9b02      	ldr	r3, [sp, #8]
 8011d52:	2200      	movs	r2, #0
 8011d54:	701a      	strb	r2, [r3, #0]
 8011d56:	b01c      	add	sp, #112	@ 0x70
 8011d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d5c:	b003      	add	sp, #12
 8011d5e:	4770      	bx	lr
 8011d60:	200001e4 	.word	0x200001e4
 8011d64:	ffff0208 	.word	0xffff0208

08011d68 <siscanf>:
 8011d68:	b40e      	push	{r1, r2, r3}
 8011d6a:	b530      	push	{r4, r5, lr}
 8011d6c:	b09c      	sub	sp, #112	@ 0x70
 8011d6e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8011d70:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011d74:	f854 5b04 	ldr.w	r5, [r4], #4
 8011d78:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011d7c:	9002      	str	r0, [sp, #8]
 8011d7e:	9006      	str	r0, [sp, #24]
 8011d80:	f7ee fa9e 	bl	80002c0 <strlen>
 8011d84:	4b0b      	ldr	r3, [pc, #44]	@ (8011db4 <siscanf+0x4c>)
 8011d86:	9003      	str	r0, [sp, #12]
 8011d88:	9007      	str	r0, [sp, #28]
 8011d8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011d8c:	480a      	ldr	r0, [pc, #40]	@ (8011db8 <siscanf+0x50>)
 8011d8e:	9401      	str	r4, [sp, #4]
 8011d90:	2300      	movs	r3, #0
 8011d92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011d94:	9314      	str	r3, [sp, #80]	@ 0x50
 8011d96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011d9a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011d9e:	462a      	mov	r2, r5
 8011da0:	4623      	mov	r3, r4
 8011da2:	a902      	add	r1, sp, #8
 8011da4:	6800      	ldr	r0, [r0, #0]
 8011da6:	f002 fd29 	bl	80147fc <__ssvfiscanf_r>
 8011daa:	b01c      	add	sp, #112	@ 0x70
 8011dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011db0:	b003      	add	sp, #12
 8011db2:	4770      	bx	lr
 8011db4:	08011ddf 	.word	0x08011ddf
 8011db8:	200001e4 	.word	0x200001e4

08011dbc <__sread>:
 8011dbc:	b510      	push	{r4, lr}
 8011dbe:	460c      	mov	r4, r1
 8011dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011dc4:	f000 f880 	bl	8011ec8 <_read_r>
 8011dc8:	2800      	cmp	r0, #0
 8011dca:	bfab      	itete	ge
 8011dcc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011dce:	89a3      	ldrhlt	r3, [r4, #12]
 8011dd0:	181b      	addge	r3, r3, r0
 8011dd2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011dd6:	bfac      	ite	ge
 8011dd8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011dda:	81a3      	strhlt	r3, [r4, #12]
 8011ddc:	bd10      	pop	{r4, pc}

08011dde <__seofread>:
 8011dde:	2000      	movs	r0, #0
 8011de0:	4770      	bx	lr

08011de2 <__swrite>:
 8011de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011de6:	461f      	mov	r7, r3
 8011de8:	898b      	ldrh	r3, [r1, #12]
 8011dea:	05db      	lsls	r3, r3, #23
 8011dec:	4605      	mov	r5, r0
 8011dee:	460c      	mov	r4, r1
 8011df0:	4616      	mov	r6, r2
 8011df2:	d505      	bpl.n	8011e00 <__swrite+0x1e>
 8011df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011df8:	2302      	movs	r3, #2
 8011dfa:	2200      	movs	r2, #0
 8011dfc:	f000 f852 	bl	8011ea4 <_lseek_r>
 8011e00:	89a3      	ldrh	r3, [r4, #12]
 8011e02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011e06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011e0a:	81a3      	strh	r3, [r4, #12]
 8011e0c:	4632      	mov	r2, r6
 8011e0e:	463b      	mov	r3, r7
 8011e10:	4628      	mov	r0, r5
 8011e12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e16:	f000 b869 	b.w	8011eec <_write_r>

08011e1a <__sseek>:
 8011e1a:	b510      	push	{r4, lr}
 8011e1c:	460c      	mov	r4, r1
 8011e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e22:	f000 f83f 	bl	8011ea4 <_lseek_r>
 8011e26:	1c43      	adds	r3, r0, #1
 8011e28:	89a3      	ldrh	r3, [r4, #12]
 8011e2a:	bf15      	itete	ne
 8011e2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011e2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011e32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011e36:	81a3      	strheq	r3, [r4, #12]
 8011e38:	bf18      	it	ne
 8011e3a:	81a3      	strhne	r3, [r4, #12]
 8011e3c:	bd10      	pop	{r4, pc}

08011e3e <__sclose>:
 8011e3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011e42:	f000 b81f 	b.w	8011e84 <_close_r>

08011e46 <memset>:
 8011e46:	4402      	add	r2, r0
 8011e48:	4603      	mov	r3, r0
 8011e4a:	4293      	cmp	r3, r2
 8011e4c:	d100      	bne.n	8011e50 <memset+0xa>
 8011e4e:	4770      	bx	lr
 8011e50:	f803 1b01 	strb.w	r1, [r3], #1
 8011e54:	e7f9      	b.n	8011e4a <memset+0x4>

08011e56 <strncmp>:
 8011e56:	b510      	push	{r4, lr}
 8011e58:	b16a      	cbz	r2, 8011e76 <strncmp+0x20>
 8011e5a:	3901      	subs	r1, #1
 8011e5c:	1884      	adds	r4, r0, r2
 8011e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011e62:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011e66:	429a      	cmp	r2, r3
 8011e68:	d103      	bne.n	8011e72 <strncmp+0x1c>
 8011e6a:	42a0      	cmp	r0, r4
 8011e6c:	d001      	beq.n	8011e72 <strncmp+0x1c>
 8011e6e:	2a00      	cmp	r2, #0
 8011e70:	d1f5      	bne.n	8011e5e <strncmp+0x8>
 8011e72:	1ad0      	subs	r0, r2, r3
 8011e74:	bd10      	pop	{r4, pc}
 8011e76:	4610      	mov	r0, r2
 8011e78:	e7fc      	b.n	8011e74 <strncmp+0x1e>
	...

08011e7c <_localeconv_r>:
 8011e7c:	4800      	ldr	r0, [pc, #0]	@ (8011e80 <_localeconv_r+0x4>)
 8011e7e:	4770      	bx	lr
 8011e80:	20000324 	.word	0x20000324

08011e84 <_close_r>:
 8011e84:	b538      	push	{r3, r4, r5, lr}
 8011e86:	4d06      	ldr	r5, [pc, #24]	@ (8011ea0 <_close_r+0x1c>)
 8011e88:	2300      	movs	r3, #0
 8011e8a:	4604      	mov	r4, r0
 8011e8c:	4608      	mov	r0, r1
 8011e8e:	602b      	str	r3, [r5, #0]
 8011e90:	f7f2 fb38 	bl	8004504 <_close>
 8011e94:	1c43      	adds	r3, r0, #1
 8011e96:	d102      	bne.n	8011e9e <_close_r+0x1a>
 8011e98:	682b      	ldr	r3, [r5, #0]
 8011e9a:	b103      	cbz	r3, 8011e9e <_close_r+0x1a>
 8011e9c:	6023      	str	r3, [r4, #0]
 8011e9e:	bd38      	pop	{r3, r4, r5, pc}
 8011ea0:	200026d4 	.word	0x200026d4

08011ea4 <_lseek_r>:
 8011ea4:	b538      	push	{r3, r4, r5, lr}
 8011ea6:	4d07      	ldr	r5, [pc, #28]	@ (8011ec4 <_lseek_r+0x20>)
 8011ea8:	4604      	mov	r4, r0
 8011eaa:	4608      	mov	r0, r1
 8011eac:	4611      	mov	r1, r2
 8011eae:	2200      	movs	r2, #0
 8011eb0:	602a      	str	r2, [r5, #0]
 8011eb2:	461a      	mov	r2, r3
 8011eb4:	f7f2 fb4d 	bl	8004552 <_lseek>
 8011eb8:	1c43      	adds	r3, r0, #1
 8011eba:	d102      	bne.n	8011ec2 <_lseek_r+0x1e>
 8011ebc:	682b      	ldr	r3, [r5, #0]
 8011ebe:	b103      	cbz	r3, 8011ec2 <_lseek_r+0x1e>
 8011ec0:	6023      	str	r3, [r4, #0]
 8011ec2:	bd38      	pop	{r3, r4, r5, pc}
 8011ec4:	200026d4 	.word	0x200026d4

08011ec8 <_read_r>:
 8011ec8:	b538      	push	{r3, r4, r5, lr}
 8011eca:	4d07      	ldr	r5, [pc, #28]	@ (8011ee8 <_read_r+0x20>)
 8011ecc:	4604      	mov	r4, r0
 8011ece:	4608      	mov	r0, r1
 8011ed0:	4611      	mov	r1, r2
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	602a      	str	r2, [r5, #0]
 8011ed6:	461a      	mov	r2, r3
 8011ed8:	f7f2 fadb 	bl	8004492 <_read>
 8011edc:	1c43      	adds	r3, r0, #1
 8011ede:	d102      	bne.n	8011ee6 <_read_r+0x1e>
 8011ee0:	682b      	ldr	r3, [r5, #0]
 8011ee2:	b103      	cbz	r3, 8011ee6 <_read_r+0x1e>
 8011ee4:	6023      	str	r3, [r4, #0]
 8011ee6:	bd38      	pop	{r3, r4, r5, pc}
 8011ee8:	200026d4 	.word	0x200026d4

08011eec <_write_r>:
 8011eec:	b538      	push	{r3, r4, r5, lr}
 8011eee:	4d07      	ldr	r5, [pc, #28]	@ (8011f0c <_write_r+0x20>)
 8011ef0:	4604      	mov	r4, r0
 8011ef2:	4608      	mov	r0, r1
 8011ef4:	4611      	mov	r1, r2
 8011ef6:	2200      	movs	r2, #0
 8011ef8:	602a      	str	r2, [r5, #0]
 8011efa:	461a      	mov	r2, r3
 8011efc:	f7f2 fae6 	bl	80044cc <_write>
 8011f00:	1c43      	adds	r3, r0, #1
 8011f02:	d102      	bne.n	8011f0a <_write_r+0x1e>
 8011f04:	682b      	ldr	r3, [r5, #0]
 8011f06:	b103      	cbz	r3, 8011f0a <_write_r+0x1e>
 8011f08:	6023      	str	r3, [r4, #0]
 8011f0a:	bd38      	pop	{r3, r4, r5, pc}
 8011f0c:	200026d4 	.word	0x200026d4

08011f10 <__errno>:
 8011f10:	4b01      	ldr	r3, [pc, #4]	@ (8011f18 <__errno+0x8>)
 8011f12:	6818      	ldr	r0, [r3, #0]
 8011f14:	4770      	bx	lr
 8011f16:	bf00      	nop
 8011f18:	200001e4 	.word	0x200001e4

08011f1c <__libc_init_array>:
 8011f1c:	b570      	push	{r4, r5, r6, lr}
 8011f1e:	4d0d      	ldr	r5, [pc, #52]	@ (8011f54 <__libc_init_array+0x38>)
 8011f20:	4c0d      	ldr	r4, [pc, #52]	@ (8011f58 <__libc_init_array+0x3c>)
 8011f22:	1b64      	subs	r4, r4, r5
 8011f24:	10a4      	asrs	r4, r4, #2
 8011f26:	2600      	movs	r6, #0
 8011f28:	42a6      	cmp	r6, r4
 8011f2a:	d109      	bne.n	8011f40 <__libc_init_array+0x24>
 8011f2c:	4d0b      	ldr	r5, [pc, #44]	@ (8011f5c <__libc_init_array+0x40>)
 8011f2e:	4c0c      	ldr	r4, [pc, #48]	@ (8011f60 <__libc_init_array+0x44>)
 8011f30:	f004 fee0 	bl	8016cf4 <_init>
 8011f34:	1b64      	subs	r4, r4, r5
 8011f36:	10a4      	asrs	r4, r4, #2
 8011f38:	2600      	movs	r6, #0
 8011f3a:	42a6      	cmp	r6, r4
 8011f3c:	d105      	bne.n	8011f4a <__libc_init_array+0x2e>
 8011f3e:	bd70      	pop	{r4, r5, r6, pc}
 8011f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f44:	4798      	blx	r3
 8011f46:	3601      	adds	r6, #1
 8011f48:	e7ee      	b.n	8011f28 <__libc_init_array+0xc>
 8011f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f4e:	4798      	blx	r3
 8011f50:	3601      	adds	r6, #1
 8011f52:	e7f2      	b.n	8011f3a <__libc_init_array+0x1e>
 8011f54:	08017548 	.word	0x08017548
 8011f58:	08017548 	.word	0x08017548
 8011f5c:	08017548 	.word	0x08017548
 8011f60:	0801754c 	.word	0x0801754c

08011f64 <__retarget_lock_init_recursive>:
 8011f64:	4770      	bx	lr

08011f66 <__retarget_lock_acquire_recursive>:
 8011f66:	4770      	bx	lr

08011f68 <__retarget_lock_release_recursive>:
 8011f68:	4770      	bx	lr

08011f6a <memcpy>:
 8011f6a:	440a      	add	r2, r1
 8011f6c:	4291      	cmp	r1, r2
 8011f6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8011f72:	d100      	bne.n	8011f76 <memcpy+0xc>
 8011f74:	4770      	bx	lr
 8011f76:	b510      	push	{r4, lr}
 8011f78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f80:	4291      	cmp	r1, r2
 8011f82:	d1f9      	bne.n	8011f78 <memcpy+0xe>
 8011f84:	bd10      	pop	{r4, pc}
	...

08011f88 <nanf>:
 8011f88:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8011f90 <nanf+0x8>
 8011f8c:	4770      	bx	lr
 8011f8e:	bf00      	nop
 8011f90:	7fc00000 	.word	0x7fc00000

08011f94 <quorem>:
 8011f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f98:	6903      	ldr	r3, [r0, #16]
 8011f9a:	690c      	ldr	r4, [r1, #16]
 8011f9c:	42a3      	cmp	r3, r4
 8011f9e:	4607      	mov	r7, r0
 8011fa0:	db7e      	blt.n	80120a0 <quorem+0x10c>
 8011fa2:	3c01      	subs	r4, #1
 8011fa4:	f101 0814 	add.w	r8, r1, #20
 8011fa8:	00a3      	lsls	r3, r4, #2
 8011faa:	f100 0514 	add.w	r5, r0, #20
 8011fae:	9300      	str	r3, [sp, #0]
 8011fb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011fb4:	9301      	str	r3, [sp, #4]
 8011fb6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011fba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011fbe:	3301      	adds	r3, #1
 8011fc0:	429a      	cmp	r2, r3
 8011fc2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011fc6:	fbb2 f6f3 	udiv	r6, r2, r3
 8011fca:	d32e      	bcc.n	801202a <quorem+0x96>
 8011fcc:	f04f 0a00 	mov.w	sl, #0
 8011fd0:	46c4      	mov	ip, r8
 8011fd2:	46ae      	mov	lr, r5
 8011fd4:	46d3      	mov	fp, sl
 8011fd6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8011fda:	b298      	uxth	r0, r3
 8011fdc:	fb06 a000 	mla	r0, r6, r0, sl
 8011fe0:	0c02      	lsrs	r2, r0, #16
 8011fe2:	0c1b      	lsrs	r3, r3, #16
 8011fe4:	fb06 2303 	mla	r3, r6, r3, r2
 8011fe8:	f8de 2000 	ldr.w	r2, [lr]
 8011fec:	b280      	uxth	r0, r0
 8011fee:	b292      	uxth	r2, r2
 8011ff0:	1a12      	subs	r2, r2, r0
 8011ff2:	445a      	add	r2, fp
 8011ff4:	f8de 0000 	ldr.w	r0, [lr]
 8011ff8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011ffc:	b29b      	uxth	r3, r3
 8011ffe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012002:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012006:	b292      	uxth	r2, r2
 8012008:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801200c:	45e1      	cmp	r9, ip
 801200e:	f84e 2b04 	str.w	r2, [lr], #4
 8012012:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012016:	d2de      	bcs.n	8011fd6 <quorem+0x42>
 8012018:	9b00      	ldr	r3, [sp, #0]
 801201a:	58eb      	ldr	r3, [r5, r3]
 801201c:	b92b      	cbnz	r3, 801202a <quorem+0x96>
 801201e:	9b01      	ldr	r3, [sp, #4]
 8012020:	3b04      	subs	r3, #4
 8012022:	429d      	cmp	r5, r3
 8012024:	461a      	mov	r2, r3
 8012026:	d32f      	bcc.n	8012088 <quorem+0xf4>
 8012028:	613c      	str	r4, [r7, #16]
 801202a:	4638      	mov	r0, r7
 801202c:	f001 f9c4 	bl	80133b8 <__mcmp>
 8012030:	2800      	cmp	r0, #0
 8012032:	db25      	blt.n	8012080 <quorem+0xec>
 8012034:	4629      	mov	r1, r5
 8012036:	2000      	movs	r0, #0
 8012038:	f858 2b04 	ldr.w	r2, [r8], #4
 801203c:	f8d1 c000 	ldr.w	ip, [r1]
 8012040:	fa1f fe82 	uxth.w	lr, r2
 8012044:	fa1f f38c 	uxth.w	r3, ip
 8012048:	eba3 030e 	sub.w	r3, r3, lr
 801204c:	4403      	add	r3, r0
 801204e:	0c12      	lsrs	r2, r2, #16
 8012050:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012054:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012058:	b29b      	uxth	r3, r3
 801205a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801205e:	45c1      	cmp	r9, r8
 8012060:	f841 3b04 	str.w	r3, [r1], #4
 8012064:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012068:	d2e6      	bcs.n	8012038 <quorem+0xa4>
 801206a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801206e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012072:	b922      	cbnz	r2, 801207e <quorem+0xea>
 8012074:	3b04      	subs	r3, #4
 8012076:	429d      	cmp	r5, r3
 8012078:	461a      	mov	r2, r3
 801207a:	d30b      	bcc.n	8012094 <quorem+0x100>
 801207c:	613c      	str	r4, [r7, #16]
 801207e:	3601      	adds	r6, #1
 8012080:	4630      	mov	r0, r6
 8012082:	b003      	add	sp, #12
 8012084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012088:	6812      	ldr	r2, [r2, #0]
 801208a:	3b04      	subs	r3, #4
 801208c:	2a00      	cmp	r2, #0
 801208e:	d1cb      	bne.n	8012028 <quorem+0x94>
 8012090:	3c01      	subs	r4, #1
 8012092:	e7c6      	b.n	8012022 <quorem+0x8e>
 8012094:	6812      	ldr	r2, [r2, #0]
 8012096:	3b04      	subs	r3, #4
 8012098:	2a00      	cmp	r2, #0
 801209a:	d1ef      	bne.n	801207c <quorem+0xe8>
 801209c:	3c01      	subs	r4, #1
 801209e:	e7ea      	b.n	8012076 <quorem+0xe2>
 80120a0:	2000      	movs	r0, #0
 80120a2:	e7ee      	b.n	8012082 <quorem+0xee>
 80120a4:	0000      	movs	r0, r0
	...

080120a8 <_dtoa_r>:
 80120a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120ac:	69c7      	ldr	r7, [r0, #28]
 80120ae:	b099      	sub	sp, #100	@ 0x64
 80120b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80120b4:	ec55 4b10 	vmov	r4, r5, d0
 80120b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80120ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80120bc:	4683      	mov	fp, r0
 80120be:	920e      	str	r2, [sp, #56]	@ 0x38
 80120c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80120c2:	b97f      	cbnz	r7, 80120e4 <_dtoa_r+0x3c>
 80120c4:	2010      	movs	r0, #16
 80120c6:	f000 fdfd 	bl	8012cc4 <malloc>
 80120ca:	4602      	mov	r2, r0
 80120cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80120d0:	b920      	cbnz	r0, 80120dc <_dtoa_r+0x34>
 80120d2:	4ba7      	ldr	r3, [pc, #668]	@ (8012370 <_dtoa_r+0x2c8>)
 80120d4:	21ef      	movs	r1, #239	@ 0xef
 80120d6:	48a7      	ldr	r0, [pc, #668]	@ (8012374 <_dtoa_r+0x2cc>)
 80120d8:	f002 ffa6 	bl	8015028 <__assert_func>
 80120dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80120e0:	6007      	str	r7, [r0, #0]
 80120e2:	60c7      	str	r7, [r0, #12]
 80120e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80120e8:	6819      	ldr	r1, [r3, #0]
 80120ea:	b159      	cbz	r1, 8012104 <_dtoa_r+0x5c>
 80120ec:	685a      	ldr	r2, [r3, #4]
 80120ee:	604a      	str	r2, [r1, #4]
 80120f0:	2301      	movs	r3, #1
 80120f2:	4093      	lsls	r3, r2
 80120f4:	608b      	str	r3, [r1, #8]
 80120f6:	4658      	mov	r0, fp
 80120f8:	f000 feda 	bl	8012eb0 <_Bfree>
 80120fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012100:	2200      	movs	r2, #0
 8012102:	601a      	str	r2, [r3, #0]
 8012104:	1e2b      	subs	r3, r5, #0
 8012106:	bfb9      	ittee	lt
 8012108:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801210c:	9303      	strlt	r3, [sp, #12]
 801210e:	2300      	movge	r3, #0
 8012110:	6033      	strge	r3, [r6, #0]
 8012112:	9f03      	ldr	r7, [sp, #12]
 8012114:	4b98      	ldr	r3, [pc, #608]	@ (8012378 <_dtoa_r+0x2d0>)
 8012116:	bfbc      	itt	lt
 8012118:	2201      	movlt	r2, #1
 801211a:	6032      	strlt	r2, [r6, #0]
 801211c:	43bb      	bics	r3, r7
 801211e:	d112      	bne.n	8012146 <_dtoa_r+0x9e>
 8012120:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012122:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012126:	6013      	str	r3, [r2, #0]
 8012128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801212c:	4323      	orrs	r3, r4
 801212e:	f000 854d 	beq.w	8012bcc <_dtoa_r+0xb24>
 8012132:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012134:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801238c <_dtoa_r+0x2e4>
 8012138:	2b00      	cmp	r3, #0
 801213a:	f000 854f 	beq.w	8012bdc <_dtoa_r+0xb34>
 801213e:	f10a 0303 	add.w	r3, sl, #3
 8012142:	f000 bd49 	b.w	8012bd8 <_dtoa_r+0xb30>
 8012146:	ed9d 7b02 	vldr	d7, [sp, #8]
 801214a:	2200      	movs	r2, #0
 801214c:	ec51 0b17 	vmov	r0, r1, d7
 8012150:	2300      	movs	r3, #0
 8012152:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012156:	f7ee fcdf 	bl	8000b18 <__aeabi_dcmpeq>
 801215a:	4680      	mov	r8, r0
 801215c:	b158      	cbz	r0, 8012176 <_dtoa_r+0xce>
 801215e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012160:	2301      	movs	r3, #1
 8012162:	6013      	str	r3, [r2, #0]
 8012164:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012166:	b113      	cbz	r3, 801216e <_dtoa_r+0xc6>
 8012168:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801216a:	4b84      	ldr	r3, [pc, #528]	@ (801237c <_dtoa_r+0x2d4>)
 801216c:	6013      	str	r3, [r2, #0]
 801216e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012390 <_dtoa_r+0x2e8>
 8012172:	f000 bd33 	b.w	8012bdc <_dtoa_r+0xb34>
 8012176:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801217a:	aa16      	add	r2, sp, #88	@ 0x58
 801217c:	a917      	add	r1, sp, #92	@ 0x5c
 801217e:	4658      	mov	r0, fp
 8012180:	f001 fa3a 	bl	80135f8 <__d2b>
 8012184:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012188:	4681      	mov	r9, r0
 801218a:	2e00      	cmp	r6, #0
 801218c:	d077      	beq.n	801227e <_dtoa_r+0x1d6>
 801218e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012190:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801219c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80121a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80121a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80121a8:	4619      	mov	r1, r3
 80121aa:	2200      	movs	r2, #0
 80121ac:	4b74      	ldr	r3, [pc, #464]	@ (8012380 <_dtoa_r+0x2d8>)
 80121ae:	f7ee f893 	bl	80002d8 <__aeabi_dsub>
 80121b2:	a369      	add	r3, pc, #420	@ (adr r3, 8012358 <_dtoa_r+0x2b0>)
 80121b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121b8:	f7ee fa46 	bl	8000648 <__aeabi_dmul>
 80121bc:	a368      	add	r3, pc, #416	@ (adr r3, 8012360 <_dtoa_r+0x2b8>)
 80121be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c2:	f7ee f88b 	bl	80002dc <__adddf3>
 80121c6:	4604      	mov	r4, r0
 80121c8:	4630      	mov	r0, r6
 80121ca:	460d      	mov	r5, r1
 80121cc:	f7ee f9d2 	bl	8000574 <__aeabi_i2d>
 80121d0:	a365      	add	r3, pc, #404	@ (adr r3, 8012368 <_dtoa_r+0x2c0>)
 80121d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121d6:	f7ee fa37 	bl	8000648 <__aeabi_dmul>
 80121da:	4602      	mov	r2, r0
 80121dc:	460b      	mov	r3, r1
 80121de:	4620      	mov	r0, r4
 80121e0:	4629      	mov	r1, r5
 80121e2:	f7ee f87b 	bl	80002dc <__adddf3>
 80121e6:	4604      	mov	r4, r0
 80121e8:	460d      	mov	r5, r1
 80121ea:	f7ee fcdd 	bl	8000ba8 <__aeabi_d2iz>
 80121ee:	2200      	movs	r2, #0
 80121f0:	4607      	mov	r7, r0
 80121f2:	2300      	movs	r3, #0
 80121f4:	4620      	mov	r0, r4
 80121f6:	4629      	mov	r1, r5
 80121f8:	f7ee fc98 	bl	8000b2c <__aeabi_dcmplt>
 80121fc:	b140      	cbz	r0, 8012210 <_dtoa_r+0x168>
 80121fe:	4638      	mov	r0, r7
 8012200:	f7ee f9b8 	bl	8000574 <__aeabi_i2d>
 8012204:	4622      	mov	r2, r4
 8012206:	462b      	mov	r3, r5
 8012208:	f7ee fc86 	bl	8000b18 <__aeabi_dcmpeq>
 801220c:	b900      	cbnz	r0, 8012210 <_dtoa_r+0x168>
 801220e:	3f01      	subs	r7, #1
 8012210:	2f16      	cmp	r7, #22
 8012212:	d851      	bhi.n	80122b8 <_dtoa_r+0x210>
 8012214:	4b5b      	ldr	r3, [pc, #364]	@ (8012384 <_dtoa_r+0x2dc>)
 8012216:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801221e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012222:	f7ee fc83 	bl	8000b2c <__aeabi_dcmplt>
 8012226:	2800      	cmp	r0, #0
 8012228:	d048      	beq.n	80122bc <_dtoa_r+0x214>
 801222a:	3f01      	subs	r7, #1
 801222c:	2300      	movs	r3, #0
 801222e:	9312      	str	r3, [sp, #72]	@ 0x48
 8012230:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012232:	1b9b      	subs	r3, r3, r6
 8012234:	1e5a      	subs	r2, r3, #1
 8012236:	bf44      	itt	mi
 8012238:	f1c3 0801 	rsbmi	r8, r3, #1
 801223c:	2300      	movmi	r3, #0
 801223e:	9208      	str	r2, [sp, #32]
 8012240:	bf54      	ite	pl
 8012242:	f04f 0800 	movpl.w	r8, #0
 8012246:	9308      	strmi	r3, [sp, #32]
 8012248:	2f00      	cmp	r7, #0
 801224a:	db39      	blt.n	80122c0 <_dtoa_r+0x218>
 801224c:	9b08      	ldr	r3, [sp, #32]
 801224e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012250:	443b      	add	r3, r7
 8012252:	9308      	str	r3, [sp, #32]
 8012254:	2300      	movs	r3, #0
 8012256:	930a      	str	r3, [sp, #40]	@ 0x28
 8012258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801225a:	2b09      	cmp	r3, #9
 801225c:	d864      	bhi.n	8012328 <_dtoa_r+0x280>
 801225e:	2b05      	cmp	r3, #5
 8012260:	bfc4      	itt	gt
 8012262:	3b04      	subgt	r3, #4
 8012264:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012268:	f1a3 0302 	sub.w	r3, r3, #2
 801226c:	bfcc      	ite	gt
 801226e:	2400      	movgt	r4, #0
 8012270:	2401      	movle	r4, #1
 8012272:	2b03      	cmp	r3, #3
 8012274:	d863      	bhi.n	801233e <_dtoa_r+0x296>
 8012276:	e8df f003 	tbb	[pc, r3]
 801227a:	372a      	.short	0x372a
 801227c:	5535      	.short	0x5535
 801227e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012282:	441e      	add	r6, r3
 8012284:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012288:	2b20      	cmp	r3, #32
 801228a:	bfc1      	itttt	gt
 801228c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012290:	409f      	lslgt	r7, r3
 8012292:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012296:	fa24 f303 	lsrgt.w	r3, r4, r3
 801229a:	bfd6      	itet	le
 801229c:	f1c3 0320 	rsble	r3, r3, #32
 80122a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80122a4:	fa04 f003 	lslle.w	r0, r4, r3
 80122a8:	f7ee f954 	bl	8000554 <__aeabi_ui2d>
 80122ac:	2201      	movs	r2, #1
 80122ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80122b2:	3e01      	subs	r6, #1
 80122b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80122b6:	e777      	b.n	80121a8 <_dtoa_r+0x100>
 80122b8:	2301      	movs	r3, #1
 80122ba:	e7b8      	b.n	801222e <_dtoa_r+0x186>
 80122bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80122be:	e7b7      	b.n	8012230 <_dtoa_r+0x188>
 80122c0:	427b      	negs	r3, r7
 80122c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80122c4:	2300      	movs	r3, #0
 80122c6:	eba8 0807 	sub.w	r8, r8, r7
 80122ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80122cc:	e7c4      	b.n	8012258 <_dtoa_r+0x1b0>
 80122ce:	2300      	movs	r3, #0
 80122d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80122d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	dc35      	bgt.n	8012344 <_dtoa_r+0x29c>
 80122d8:	2301      	movs	r3, #1
 80122da:	9300      	str	r3, [sp, #0]
 80122dc:	9307      	str	r3, [sp, #28]
 80122de:	461a      	mov	r2, r3
 80122e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80122e2:	e00b      	b.n	80122fc <_dtoa_r+0x254>
 80122e4:	2301      	movs	r3, #1
 80122e6:	e7f3      	b.n	80122d0 <_dtoa_r+0x228>
 80122e8:	2300      	movs	r3, #0
 80122ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80122ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80122ee:	18fb      	adds	r3, r7, r3
 80122f0:	9300      	str	r3, [sp, #0]
 80122f2:	3301      	adds	r3, #1
 80122f4:	2b01      	cmp	r3, #1
 80122f6:	9307      	str	r3, [sp, #28]
 80122f8:	bfb8      	it	lt
 80122fa:	2301      	movlt	r3, #1
 80122fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012300:	2100      	movs	r1, #0
 8012302:	2204      	movs	r2, #4
 8012304:	f102 0514 	add.w	r5, r2, #20
 8012308:	429d      	cmp	r5, r3
 801230a:	d91f      	bls.n	801234c <_dtoa_r+0x2a4>
 801230c:	6041      	str	r1, [r0, #4]
 801230e:	4658      	mov	r0, fp
 8012310:	f000 fd8e 	bl	8012e30 <_Balloc>
 8012314:	4682      	mov	sl, r0
 8012316:	2800      	cmp	r0, #0
 8012318:	d13c      	bne.n	8012394 <_dtoa_r+0x2ec>
 801231a:	4b1b      	ldr	r3, [pc, #108]	@ (8012388 <_dtoa_r+0x2e0>)
 801231c:	4602      	mov	r2, r0
 801231e:	f240 11af 	movw	r1, #431	@ 0x1af
 8012322:	e6d8      	b.n	80120d6 <_dtoa_r+0x2e>
 8012324:	2301      	movs	r3, #1
 8012326:	e7e0      	b.n	80122ea <_dtoa_r+0x242>
 8012328:	2401      	movs	r4, #1
 801232a:	2300      	movs	r3, #0
 801232c:	9309      	str	r3, [sp, #36]	@ 0x24
 801232e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012330:	f04f 33ff 	mov.w	r3, #4294967295
 8012334:	9300      	str	r3, [sp, #0]
 8012336:	9307      	str	r3, [sp, #28]
 8012338:	2200      	movs	r2, #0
 801233a:	2312      	movs	r3, #18
 801233c:	e7d0      	b.n	80122e0 <_dtoa_r+0x238>
 801233e:	2301      	movs	r3, #1
 8012340:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012342:	e7f5      	b.n	8012330 <_dtoa_r+0x288>
 8012344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012346:	9300      	str	r3, [sp, #0]
 8012348:	9307      	str	r3, [sp, #28]
 801234a:	e7d7      	b.n	80122fc <_dtoa_r+0x254>
 801234c:	3101      	adds	r1, #1
 801234e:	0052      	lsls	r2, r2, #1
 8012350:	e7d8      	b.n	8012304 <_dtoa_r+0x25c>
 8012352:	bf00      	nop
 8012354:	f3af 8000 	nop.w
 8012358:	636f4361 	.word	0x636f4361
 801235c:	3fd287a7 	.word	0x3fd287a7
 8012360:	8b60c8b3 	.word	0x8b60c8b3
 8012364:	3fc68a28 	.word	0x3fc68a28
 8012368:	509f79fb 	.word	0x509f79fb
 801236c:	3fd34413 	.word	0x3fd34413
 8012370:	08017104 	.word	0x08017104
 8012374:	0801711b 	.word	0x0801711b
 8012378:	7ff00000 	.word	0x7ff00000
 801237c:	08017461 	.word	0x08017461
 8012380:	3ff80000 	.word	0x3ff80000
 8012384:	08017218 	.word	0x08017218
 8012388:	08017173 	.word	0x08017173
 801238c:	08017100 	.word	0x08017100
 8012390:	08017460 	.word	0x08017460
 8012394:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012398:	6018      	str	r0, [r3, #0]
 801239a:	9b07      	ldr	r3, [sp, #28]
 801239c:	2b0e      	cmp	r3, #14
 801239e:	f200 80a4 	bhi.w	80124ea <_dtoa_r+0x442>
 80123a2:	2c00      	cmp	r4, #0
 80123a4:	f000 80a1 	beq.w	80124ea <_dtoa_r+0x442>
 80123a8:	2f00      	cmp	r7, #0
 80123aa:	dd33      	ble.n	8012414 <_dtoa_r+0x36c>
 80123ac:	4bad      	ldr	r3, [pc, #692]	@ (8012664 <_dtoa_r+0x5bc>)
 80123ae:	f007 020f 	and.w	r2, r7, #15
 80123b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123b6:	ed93 7b00 	vldr	d7, [r3]
 80123ba:	05f8      	lsls	r0, r7, #23
 80123bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80123c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80123c4:	d516      	bpl.n	80123f4 <_dtoa_r+0x34c>
 80123c6:	4ba8      	ldr	r3, [pc, #672]	@ (8012668 <_dtoa_r+0x5c0>)
 80123c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80123cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80123d0:	f7ee fa64 	bl	800089c <__aeabi_ddiv>
 80123d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123d8:	f004 040f 	and.w	r4, r4, #15
 80123dc:	2603      	movs	r6, #3
 80123de:	4da2      	ldr	r5, [pc, #648]	@ (8012668 <_dtoa_r+0x5c0>)
 80123e0:	b954      	cbnz	r4, 80123f8 <_dtoa_r+0x350>
 80123e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80123e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80123ea:	f7ee fa57 	bl	800089c <__aeabi_ddiv>
 80123ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123f2:	e028      	b.n	8012446 <_dtoa_r+0x39e>
 80123f4:	2602      	movs	r6, #2
 80123f6:	e7f2      	b.n	80123de <_dtoa_r+0x336>
 80123f8:	07e1      	lsls	r1, r4, #31
 80123fa:	d508      	bpl.n	801240e <_dtoa_r+0x366>
 80123fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012400:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012404:	f7ee f920 	bl	8000648 <__aeabi_dmul>
 8012408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801240c:	3601      	adds	r6, #1
 801240e:	1064      	asrs	r4, r4, #1
 8012410:	3508      	adds	r5, #8
 8012412:	e7e5      	b.n	80123e0 <_dtoa_r+0x338>
 8012414:	f000 80d2 	beq.w	80125bc <_dtoa_r+0x514>
 8012418:	427c      	negs	r4, r7
 801241a:	4b92      	ldr	r3, [pc, #584]	@ (8012664 <_dtoa_r+0x5bc>)
 801241c:	4d92      	ldr	r5, [pc, #584]	@ (8012668 <_dtoa_r+0x5c0>)
 801241e:	f004 020f 	and.w	r2, r4, #15
 8012422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801242e:	f7ee f90b 	bl	8000648 <__aeabi_dmul>
 8012432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012436:	1124      	asrs	r4, r4, #4
 8012438:	2300      	movs	r3, #0
 801243a:	2602      	movs	r6, #2
 801243c:	2c00      	cmp	r4, #0
 801243e:	f040 80b2 	bne.w	80125a6 <_dtoa_r+0x4fe>
 8012442:	2b00      	cmp	r3, #0
 8012444:	d1d3      	bne.n	80123ee <_dtoa_r+0x346>
 8012446:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012448:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801244c:	2b00      	cmp	r3, #0
 801244e:	f000 80b7 	beq.w	80125c0 <_dtoa_r+0x518>
 8012452:	4b86      	ldr	r3, [pc, #536]	@ (801266c <_dtoa_r+0x5c4>)
 8012454:	2200      	movs	r2, #0
 8012456:	4620      	mov	r0, r4
 8012458:	4629      	mov	r1, r5
 801245a:	f7ee fb67 	bl	8000b2c <__aeabi_dcmplt>
 801245e:	2800      	cmp	r0, #0
 8012460:	f000 80ae 	beq.w	80125c0 <_dtoa_r+0x518>
 8012464:	9b07      	ldr	r3, [sp, #28]
 8012466:	2b00      	cmp	r3, #0
 8012468:	f000 80aa 	beq.w	80125c0 <_dtoa_r+0x518>
 801246c:	9b00      	ldr	r3, [sp, #0]
 801246e:	2b00      	cmp	r3, #0
 8012470:	dd37      	ble.n	80124e2 <_dtoa_r+0x43a>
 8012472:	1e7b      	subs	r3, r7, #1
 8012474:	9304      	str	r3, [sp, #16]
 8012476:	4620      	mov	r0, r4
 8012478:	4b7d      	ldr	r3, [pc, #500]	@ (8012670 <_dtoa_r+0x5c8>)
 801247a:	2200      	movs	r2, #0
 801247c:	4629      	mov	r1, r5
 801247e:	f7ee f8e3 	bl	8000648 <__aeabi_dmul>
 8012482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012486:	9c00      	ldr	r4, [sp, #0]
 8012488:	3601      	adds	r6, #1
 801248a:	4630      	mov	r0, r6
 801248c:	f7ee f872 	bl	8000574 <__aeabi_i2d>
 8012490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012494:	f7ee f8d8 	bl	8000648 <__aeabi_dmul>
 8012498:	4b76      	ldr	r3, [pc, #472]	@ (8012674 <_dtoa_r+0x5cc>)
 801249a:	2200      	movs	r2, #0
 801249c:	f7ed ff1e 	bl	80002dc <__adddf3>
 80124a0:	4605      	mov	r5, r0
 80124a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80124a6:	2c00      	cmp	r4, #0
 80124a8:	f040 808d 	bne.w	80125c6 <_dtoa_r+0x51e>
 80124ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124b0:	4b71      	ldr	r3, [pc, #452]	@ (8012678 <_dtoa_r+0x5d0>)
 80124b2:	2200      	movs	r2, #0
 80124b4:	f7ed ff10 	bl	80002d8 <__aeabi_dsub>
 80124b8:	4602      	mov	r2, r0
 80124ba:	460b      	mov	r3, r1
 80124bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80124c0:	462a      	mov	r2, r5
 80124c2:	4633      	mov	r3, r6
 80124c4:	f7ee fb50 	bl	8000b68 <__aeabi_dcmpgt>
 80124c8:	2800      	cmp	r0, #0
 80124ca:	f040 828b 	bne.w	80129e4 <_dtoa_r+0x93c>
 80124ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124d2:	462a      	mov	r2, r5
 80124d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80124d8:	f7ee fb28 	bl	8000b2c <__aeabi_dcmplt>
 80124dc:	2800      	cmp	r0, #0
 80124de:	f040 8128 	bne.w	8012732 <_dtoa_r+0x68a>
 80124e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80124e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80124ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	f2c0 815a 	blt.w	80127a6 <_dtoa_r+0x6fe>
 80124f2:	2f0e      	cmp	r7, #14
 80124f4:	f300 8157 	bgt.w	80127a6 <_dtoa_r+0x6fe>
 80124f8:	4b5a      	ldr	r3, [pc, #360]	@ (8012664 <_dtoa_r+0x5bc>)
 80124fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80124fe:	ed93 7b00 	vldr	d7, [r3]
 8012502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012504:	2b00      	cmp	r3, #0
 8012506:	ed8d 7b00 	vstr	d7, [sp]
 801250a:	da03      	bge.n	8012514 <_dtoa_r+0x46c>
 801250c:	9b07      	ldr	r3, [sp, #28]
 801250e:	2b00      	cmp	r3, #0
 8012510:	f340 8101 	ble.w	8012716 <_dtoa_r+0x66e>
 8012514:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012518:	4656      	mov	r6, sl
 801251a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801251e:	4620      	mov	r0, r4
 8012520:	4629      	mov	r1, r5
 8012522:	f7ee f9bb 	bl	800089c <__aeabi_ddiv>
 8012526:	f7ee fb3f 	bl	8000ba8 <__aeabi_d2iz>
 801252a:	4680      	mov	r8, r0
 801252c:	f7ee f822 	bl	8000574 <__aeabi_i2d>
 8012530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012534:	f7ee f888 	bl	8000648 <__aeabi_dmul>
 8012538:	4602      	mov	r2, r0
 801253a:	460b      	mov	r3, r1
 801253c:	4620      	mov	r0, r4
 801253e:	4629      	mov	r1, r5
 8012540:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8012544:	f7ed fec8 	bl	80002d8 <__aeabi_dsub>
 8012548:	f806 4b01 	strb.w	r4, [r6], #1
 801254c:	9d07      	ldr	r5, [sp, #28]
 801254e:	eba6 040a 	sub.w	r4, r6, sl
 8012552:	42a5      	cmp	r5, r4
 8012554:	4602      	mov	r2, r0
 8012556:	460b      	mov	r3, r1
 8012558:	f040 8117 	bne.w	801278a <_dtoa_r+0x6e2>
 801255c:	f7ed febe 	bl	80002dc <__adddf3>
 8012560:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012564:	4604      	mov	r4, r0
 8012566:	460d      	mov	r5, r1
 8012568:	f7ee fafe 	bl	8000b68 <__aeabi_dcmpgt>
 801256c:	2800      	cmp	r0, #0
 801256e:	f040 80f9 	bne.w	8012764 <_dtoa_r+0x6bc>
 8012572:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012576:	4620      	mov	r0, r4
 8012578:	4629      	mov	r1, r5
 801257a:	f7ee facd 	bl	8000b18 <__aeabi_dcmpeq>
 801257e:	b118      	cbz	r0, 8012588 <_dtoa_r+0x4e0>
 8012580:	f018 0f01 	tst.w	r8, #1
 8012584:	f040 80ee 	bne.w	8012764 <_dtoa_r+0x6bc>
 8012588:	4649      	mov	r1, r9
 801258a:	4658      	mov	r0, fp
 801258c:	f000 fc90 	bl	8012eb0 <_Bfree>
 8012590:	2300      	movs	r3, #0
 8012592:	7033      	strb	r3, [r6, #0]
 8012594:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012596:	3701      	adds	r7, #1
 8012598:	601f      	str	r7, [r3, #0]
 801259a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801259c:	2b00      	cmp	r3, #0
 801259e:	f000 831d 	beq.w	8012bdc <_dtoa_r+0xb34>
 80125a2:	601e      	str	r6, [r3, #0]
 80125a4:	e31a      	b.n	8012bdc <_dtoa_r+0xb34>
 80125a6:	07e2      	lsls	r2, r4, #31
 80125a8:	d505      	bpl.n	80125b6 <_dtoa_r+0x50e>
 80125aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80125ae:	f7ee f84b 	bl	8000648 <__aeabi_dmul>
 80125b2:	3601      	adds	r6, #1
 80125b4:	2301      	movs	r3, #1
 80125b6:	1064      	asrs	r4, r4, #1
 80125b8:	3508      	adds	r5, #8
 80125ba:	e73f      	b.n	801243c <_dtoa_r+0x394>
 80125bc:	2602      	movs	r6, #2
 80125be:	e742      	b.n	8012446 <_dtoa_r+0x39e>
 80125c0:	9c07      	ldr	r4, [sp, #28]
 80125c2:	9704      	str	r7, [sp, #16]
 80125c4:	e761      	b.n	801248a <_dtoa_r+0x3e2>
 80125c6:	4b27      	ldr	r3, [pc, #156]	@ (8012664 <_dtoa_r+0x5bc>)
 80125c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80125ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80125ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80125d2:	4454      	add	r4, sl
 80125d4:	2900      	cmp	r1, #0
 80125d6:	d053      	beq.n	8012680 <_dtoa_r+0x5d8>
 80125d8:	4928      	ldr	r1, [pc, #160]	@ (801267c <_dtoa_r+0x5d4>)
 80125da:	2000      	movs	r0, #0
 80125dc:	f7ee f95e 	bl	800089c <__aeabi_ddiv>
 80125e0:	4633      	mov	r3, r6
 80125e2:	462a      	mov	r2, r5
 80125e4:	f7ed fe78 	bl	80002d8 <__aeabi_dsub>
 80125e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80125ec:	4656      	mov	r6, sl
 80125ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125f2:	f7ee fad9 	bl	8000ba8 <__aeabi_d2iz>
 80125f6:	4605      	mov	r5, r0
 80125f8:	f7ed ffbc 	bl	8000574 <__aeabi_i2d>
 80125fc:	4602      	mov	r2, r0
 80125fe:	460b      	mov	r3, r1
 8012600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012604:	f7ed fe68 	bl	80002d8 <__aeabi_dsub>
 8012608:	3530      	adds	r5, #48	@ 0x30
 801260a:	4602      	mov	r2, r0
 801260c:	460b      	mov	r3, r1
 801260e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012612:	f806 5b01 	strb.w	r5, [r6], #1
 8012616:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801261a:	f7ee fa87 	bl	8000b2c <__aeabi_dcmplt>
 801261e:	2800      	cmp	r0, #0
 8012620:	d171      	bne.n	8012706 <_dtoa_r+0x65e>
 8012622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012626:	4911      	ldr	r1, [pc, #68]	@ (801266c <_dtoa_r+0x5c4>)
 8012628:	2000      	movs	r0, #0
 801262a:	f7ed fe55 	bl	80002d8 <__aeabi_dsub>
 801262e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012632:	f7ee fa7b 	bl	8000b2c <__aeabi_dcmplt>
 8012636:	2800      	cmp	r0, #0
 8012638:	f040 8095 	bne.w	8012766 <_dtoa_r+0x6be>
 801263c:	42a6      	cmp	r6, r4
 801263e:	f43f af50 	beq.w	80124e2 <_dtoa_r+0x43a>
 8012642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8012646:	4b0a      	ldr	r3, [pc, #40]	@ (8012670 <_dtoa_r+0x5c8>)
 8012648:	2200      	movs	r2, #0
 801264a:	f7ed fffd 	bl	8000648 <__aeabi_dmul>
 801264e:	4b08      	ldr	r3, [pc, #32]	@ (8012670 <_dtoa_r+0x5c8>)
 8012650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012654:	2200      	movs	r2, #0
 8012656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801265a:	f7ed fff5 	bl	8000648 <__aeabi_dmul>
 801265e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012662:	e7c4      	b.n	80125ee <_dtoa_r+0x546>
 8012664:	08017218 	.word	0x08017218
 8012668:	080171f0 	.word	0x080171f0
 801266c:	3ff00000 	.word	0x3ff00000
 8012670:	40240000 	.word	0x40240000
 8012674:	401c0000 	.word	0x401c0000
 8012678:	40140000 	.word	0x40140000
 801267c:	3fe00000 	.word	0x3fe00000
 8012680:	4631      	mov	r1, r6
 8012682:	4628      	mov	r0, r5
 8012684:	f7ed ffe0 	bl	8000648 <__aeabi_dmul>
 8012688:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801268c:	9415      	str	r4, [sp, #84]	@ 0x54
 801268e:	4656      	mov	r6, sl
 8012690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012694:	f7ee fa88 	bl	8000ba8 <__aeabi_d2iz>
 8012698:	4605      	mov	r5, r0
 801269a:	f7ed ff6b 	bl	8000574 <__aeabi_i2d>
 801269e:	4602      	mov	r2, r0
 80126a0:	460b      	mov	r3, r1
 80126a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126a6:	f7ed fe17 	bl	80002d8 <__aeabi_dsub>
 80126aa:	3530      	adds	r5, #48	@ 0x30
 80126ac:	f806 5b01 	strb.w	r5, [r6], #1
 80126b0:	4602      	mov	r2, r0
 80126b2:	460b      	mov	r3, r1
 80126b4:	42a6      	cmp	r6, r4
 80126b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80126ba:	f04f 0200 	mov.w	r2, #0
 80126be:	d124      	bne.n	801270a <_dtoa_r+0x662>
 80126c0:	4bac      	ldr	r3, [pc, #688]	@ (8012974 <_dtoa_r+0x8cc>)
 80126c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80126c6:	f7ed fe09 	bl	80002dc <__adddf3>
 80126ca:	4602      	mov	r2, r0
 80126cc:	460b      	mov	r3, r1
 80126ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126d2:	f7ee fa49 	bl	8000b68 <__aeabi_dcmpgt>
 80126d6:	2800      	cmp	r0, #0
 80126d8:	d145      	bne.n	8012766 <_dtoa_r+0x6be>
 80126da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80126de:	49a5      	ldr	r1, [pc, #660]	@ (8012974 <_dtoa_r+0x8cc>)
 80126e0:	2000      	movs	r0, #0
 80126e2:	f7ed fdf9 	bl	80002d8 <__aeabi_dsub>
 80126e6:	4602      	mov	r2, r0
 80126e8:	460b      	mov	r3, r1
 80126ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126ee:	f7ee fa1d 	bl	8000b2c <__aeabi_dcmplt>
 80126f2:	2800      	cmp	r0, #0
 80126f4:	f43f aef5 	beq.w	80124e2 <_dtoa_r+0x43a>
 80126f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80126fa:	1e73      	subs	r3, r6, #1
 80126fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80126fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012702:	2b30      	cmp	r3, #48	@ 0x30
 8012704:	d0f8      	beq.n	80126f8 <_dtoa_r+0x650>
 8012706:	9f04      	ldr	r7, [sp, #16]
 8012708:	e73e      	b.n	8012588 <_dtoa_r+0x4e0>
 801270a:	4b9b      	ldr	r3, [pc, #620]	@ (8012978 <_dtoa_r+0x8d0>)
 801270c:	f7ed ff9c 	bl	8000648 <__aeabi_dmul>
 8012710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012714:	e7bc      	b.n	8012690 <_dtoa_r+0x5e8>
 8012716:	d10c      	bne.n	8012732 <_dtoa_r+0x68a>
 8012718:	4b98      	ldr	r3, [pc, #608]	@ (801297c <_dtoa_r+0x8d4>)
 801271a:	2200      	movs	r2, #0
 801271c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012720:	f7ed ff92 	bl	8000648 <__aeabi_dmul>
 8012724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012728:	f7ee fa14 	bl	8000b54 <__aeabi_dcmpge>
 801272c:	2800      	cmp	r0, #0
 801272e:	f000 8157 	beq.w	80129e0 <_dtoa_r+0x938>
 8012732:	2400      	movs	r4, #0
 8012734:	4625      	mov	r5, r4
 8012736:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012738:	43db      	mvns	r3, r3
 801273a:	9304      	str	r3, [sp, #16]
 801273c:	4656      	mov	r6, sl
 801273e:	2700      	movs	r7, #0
 8012740:	4621      	mov	r1, r4
 8012742:	4658      	mov	r0, fp
 8012744:	f000 fbb4 	bl	8012eb0 <_Bfree>
 8012748:	2d00      	cmp	r5, #0
 801274a:	d0dc      	beq.n	8012706 <_dtoa_r+0x65e>
 801274c:	b12f      	cbz	r7, 801275a <_dtoa_r+0x6b2>
 801274e:	42af      	cmp	r7, r5
 8012750:	d003      	beq.n	801275a <_dtoa_r+0x6b2>
 8012752:	4639      	mov	r1, r7
 8012754:	4658      	mov	r0, fp
 8012756:	f000 fbab 	bl	8012eb0 <_Bfree>
 801275a:	4629      	mov	r1, r5
 801275c:	4658      	mov	r0, fp
 801275e:	f000 fba7 	bl	8012eb0 <_Bfree>
 8012762:	e7d0      	b.n	8012706 <_dtoa_r+0x65e>
 8012764:	9704      	str	r7, [sp, #16]
 8012766:	4633      	mov	r3, r6
 8012768:	461e      	mov	r6, r3
 801276a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801276e:	2a39      	cmp	r2, #57	@ 0x39
 8012770:	d107      	bne.n	8012782 <_dtoa_r+0x6da>
 8012772:	459a      	cmp	sl, r3
 8012774:	d1f8      	bne.n	8012768 <_dtoa_r+0x6c0>
 8012776:	9a04      	ldr	r2, [sp, #16]
 8012778:	3201      	adds	r2, #1
 801277a:	9204      	str	r2, [sp, #16]
 801277c:	2230      	movs	r2, #48	@ 0x30
 801277e:	f88a 2000 	strb.w	r2, [sl]
 8012782:	781a      	ldrb	r2, [r3, #0]
 8012784:	3201      	adds	r2, #1
 8012786:	701a      	strb	r2, [r3, #0]
 8012788:	e7bd      	b.n	8012706 <_dtoa_r+0x65e>
 801278a:	4b7b      	ldr	r3, [pc, #492]	@ (8012978 <_dtoa_r+0x8d0>)
 801278c:	2200      	movs	r2, #0
 801278e:	f7ed ff5b 	bl	8000648 <__aeabi_dmul>
 8012792:	2200      	movs	r2, #0
 8012794:	2300      	movs	r3, #0
 8012796:	4604      	mov	r4, r0
 8012798:	460d      	mov	r5, r1
 801279a:	f7ee f9bd 	bl	8000b18 <__aeabi_dcmpeq>
 801279e:	2800      	cmp	r0, #0
 80127a0:	f43f aebb 	beq.w	801251a <_dtoa_r+0x472>
 80127a4:	e6f0      	b.n	8012588 <_dtoa_r+0x4e0>
 80127a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80127a8:	2a00      	cmp	r2, #0
 80127aa:	f000 80db 	beq.w	8012964 <_dtoa_r+0x8bc>
 80127ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80127b0:	2a01      	cmp	r2, #1
 80127b2:	f300 80bf 	bgt.w	8012934 <_dtoa_r+0x88c>
 80127b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80127b8:	2a00      	cmp	r2, #0
 80127ba:	f000 80b7 	beq.w	801292c <_dtoa_r+0x884>
 80127be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80127c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80127c4:	4646      	mov	r6, r8
 80127c6:	9a08      	ldr	r2, [sp, #32]
 80127c8:	2101      	movs	r1, #1
 80127ca:	441a      	add	r2, r3
 80127cc:	4658      	mov	r0, fp
 80127ce:	4498      	add	r8, r3
 80127d0:	9208      	str	r2, [sp, #32]
 80127d2:	f000 fc6b 	bl	80130ac <__i2b>
 80127d6:	4605      	mov	r5, r0
 80127d8:	b15e      	cbz	r6, 80127f2 <_dtoa_r+0x74a>
 80127da:	9b08      	ldr	r3, [sp, #32]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	dd08      	ble.n	80127f2 <_dtoa_r+0x74a>
 80127e0:	42b3      	cmp	r3, r6
 80127e2:	9a08      	ldr	r2, [sp, #32]
 80127e4:	bfa8      	it	ge
 80127e6:	4633      	movge	r3, r6
 80127e8:	eba8 0803 	sub.w	r8, r8, r3
 80127ec:	1af6      	subs	r6, r6, r3
 80127ee:	1ad3      	subs	r3, r2, r3
 80127f0:	9308      	str	r3, [sp, #32]
 80127f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80127f4:	b1f3      	cbz	r3, 8012834 <_dtoa_r+0x78c>
 80127f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	f000 80b7 	beq.w	801296c <_dtoa_r+0x8c4>
 80127fe:	b18c      	cbz	r4, 8012824 <_dtoa_r+0x77c>
 8012800:	4629      	mov	r1, r5
 8012802:	4622      	mov	r2, r4
 8012804:	4658      	mov	r0, fp
 8012806:	f000 fd11 	bl	801322c <__pow5mult>
 801280a:	464a      	mov	r2, r9
 801280c:	4601      	mov	r1, r0
 801280e:	4605      	mov	r5, r0
 8012810:	4658      	mov	r0, fp
 8012812:	f000 fc61 	bl	80130d8 <__multiply>
 8012816:	4649      	mov	r1, r9
 8012818:	9004      	str	r0, [sp, #16]
 801281a:	4658      	mov	r0, fp
 801281c:	f000 fb48 	bl	8012eb0 <_Bfree>
 8012820:	9b04      	ldr	r3, [sp, #16]
 8012822:	4699      	mov	r9, r3
 8012824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012826:	1b1a      	subs	r2, r3, r4
 8012828:	d004      	beq.n	8012834 <_dtoa_r+0x78c>
 801282a:	4649      	mov	r1, r9
 801282c:	4658      	mov	r0, fp
 801282e:	f000 fcfd 	bl	801322c <__pow5mult>
 8012832:	4681      	mov	r9, r0
 8012834:	2101      	movs	r1, #1
 8012836:	4658      	mov	r0, fp
 8012838:	f000 fc38 	bl	80130ac <__i2b>
 801283c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801283e:	4604      	mov	r4, r0
 8012840:	2b00      	cmp	r3, #0
 8012842:	f000 81cf 	beq.w	8012be4 <_dtoa_r+0xb3c>
 8012846:	461a      	mov	r2, r3
 8012848:	4601      	mov	r1, r0
 801284a:	4658      	mov	r0, fp
 801284c:	f000 fcee 	bl	801322c <__pow5mult>
 8012850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012852:	2b01      	cmp	r3, #1
 8012854:	4604      	mov	r4, r0
 8012856:	f300 8095 	bgt.w	8012984 <_dtoa_r+0x8dc>
 801285a:	9b02      	ldr	r3, [sp, #8]
 801285c:	2b00      	cmp	r3, #0
 801285e:	f040 8087 	bne.w	8012970 <_dtoa_r+0x8c8>
 8012862:	9b03      	ldr	r3, [sp, #12]
 8012864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012868:	2b00      	cmp	r3, #0
 801286a:	f040 8089 	bne.w	8012980 <_dtoa_r+0x8d8>
 801286e:	9b03      	ldr	r3, [sp, #12]
 8012870:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8012874:	0d1b      	lsrs	r3, r3, #20
 8012876:	051b      	lsls	r3, r3, #20
 8012878:	b12b      	cbz	r3, 8012886 <_dtoa_r+0x7de>
 801287a:	9b08      	ldr	r3, [sp, #32]
 801287c:	3301      	adds	r3, #1
 801287e:	9308      	str	r3, [sp, #32]
 8012880:	f108 0801 	add.w	r8, r8, #1
 8012884:	2301      	movs	r3, #1
 8012886:	930a      	str	r3, [sp, #40]	@ 0x28
 8012888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801288a:	2b00      	cmp	r3, #0
 801288c:	f000 81b0 	beq.w	8012bf0 <_dtoa_r+0xb48>
 8012890:	6923      	ldr	r3, [r4, #16]
 8012892:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8012896:	6918      	ldr	r0, [r3, #16]
 8012898:	f000 fbbc 	bl	8013014 <__hi0bits>
 801289c:	f1c0 0020 	rsb	r0, r0, #32
 80128a0:	9b08      	ldr	r3, [sp, #32]
 80128a2:	4418      	add	r0, r3
 80128a4:	f010 001f 	ands.w	r0, r0, #31
 80128a8:	d077      	beq.n	801299a <_dtoa_r+0x8f2>
 80128aa:	f1c0 0320 	rsb	r3, r0, #32
 80128ae:	2b04      	cmp	r3, #4
 80128b0:	dd6b      	ble.n	801298a <_dtoa_r+0x8e2>
 80128b2:	9b08      	ldr	r3, [sp, #32]
 80128b4:	f1c0 001c 	rsb	r0, r0, #28
 80128b8:	4403      	add	r3, r0
 80128ba:	4480      	add	r8, r0
 80128bc:	4406      	add	r6, r0
 80128be:	9308      	str	r3, [sp, #32]
 80128c0:	f1b8 0f00 	cmp.w	r8, #0
 80128c4:	dd05      	ble.n	80128d2 <_dtoa_r+0x82a>
 80128c6:	4649      	mov	r1, r9
 80128c8:	4642      	mov	r2, r8
 80128ca:	4658      	mov	r0, fp
 80128cc:	f000 fd08 	bl	80132e0 <__lshift>
 80128d0:	4681      	mov	r9, r0
 80128d2:	9b08      	ldr	r3, [sp, #32]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	dd05      	ble.n	80128e4 <_dtoa_r+0x83c>
 80128d8:	4621      	mov	r1, r4
 80128da:	461a      	mov	r2, r3
 80128dc:	4658      	mov	r0, fp
 80128de:	f000 fcff 	bl	80132e0 <__lshift>
 80128e2:	4604      	mov	r4, r0
 80128e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d059      	beq.n	801299e <_dtoa_r+0x8f6>
 80128ea:	4621      	mov	r1, r4
 80128ec:	4648      	mov	r0, r9
 80128ee:	f000 fd63 	bl	80133b8 <__mcmp>
 80128f2:	2800      	cmp	r0, #0
 80128f4:	da53      	bge.n	801299e <_dtoa_r+0x8f6>
 80128f6:	1e7b      	subs	r3, r7, #1
 80128f8:	9304      	str	r3, [sp, #16]
 80128fa:	4649      	mov	r1, r9
 80128fc:	2300      	movs	r3, #0
 80128fe:	220a      	movs	r2, #10
 8012900:	4658      	mov	r0, fp
 8012902:	f000 faf7 	bl	8012ef4 <__multadd>
 8012906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012908:	4681      	mov	r9, r0
 801290a:	2b00      	cmp	r3, #0
 801290c:	f000 8172 	beq.w	8012bf4 <_dtoa_r+0xb4c>
 8012910:	2300      	movs	r3, #0
 8012912:	4629      	mov	r1, r5
 8012914:	220a      	movs	r2, #10
 8012916:	4658      	mov	r0, fp
 8012918:	f000 faec 	bl	8012ef4 <__multadd>
 801291c:	9b00      	ldr	r3, [sp, #0]
 801291e:	2b00      	cmp	r3, #0
 8012920:	4605      	mov	r5, r0
 8012922:	dc67      	bgt.n	80129f4 <_dtoa_r+0x94c>
 8012924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012926:	2b02      	cmp	r3, #2
 8012928:	dc41      	bgt.n	80129ae <_dtoa_r+0x906>
 801292a:	e063      	b.n	80129f4 <_dtoa_r+0x94c>
 801292c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801292e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012932:	e746      	b.n	80127c2 <_dtoa_r+0x71a>
 8012934:	9b07      	ldr	r3, [sp, #28]
 8012936:	1e5c      	subs	r4, r3, #1
 8012938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801293a:	42a3      	cmp	r3, r4
 801293c:	bfbf      	itttt	lt
 801293e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012940:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012942:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012944:	1ae3      	sublt	r3, r4, r3
 8012946:	bfb4      	ite	lt
 8012948:	18d2      	addlt	r2, r2, r3
 801294a:	1b1c      	subge	r4, r3, r4
 801294c:	9b07      	ldr	r3, [sp, #28]
 801294e:	bfbc      	itt	lt
 8012950:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012952:	2400      	movlt	r4, #0
 8012954:	2b00      	cmp	r3, #0
 8012956:	bfb5      	itete	lt
 8012958:	eba8 0603 	sublt.w	r6, r8, r3
 801295c:	9b07      	ldrge	r3, [sp, #28]
 801295e:	2300      	movlt	r3, #0
 8012960:	4646      	movge	r6, r8
 8012962:	e730      	b.n	80127c6 <_dtoa_r+0x71e>
 8012964:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012966:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012968:	4646      	mov	r6, r8
 801296a:	e735      	b.n	80127d8 <_dtoa_r+0x730>
 801296c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801296e:	e75c      	b.n	801282a <_dtoa_r+0x782>
 8012970:	2300      	movs	r3, #0
 8012972:	e788      	b.n	8012886 <_dtoa_r+0x7de>
 8012974:	3fe00000 	.word	0x3fe00000
 8012978:	40240000 	.word	0x40240000
 801297c:	40140000 	.word	0x40140000
 8012980:	9b02      	ldr	r3, [sp, #8]
 8012982:	e780      	b.n	8012886 <_dtoa_r+0x7de>
 8012984:	2300      	movs	r3, #0
 8012986:	930a      	str	r3, [sp, #40]	@ 0x28
 8012988:	e782      	b.n	8012890 <_dtoa_r+0x7e8>
 801298a:	d099      	beq.n	80128c0 <_dtoa_r+0x818>
 801298c:	9a08      	ldr	r2, [sp, #32]
 801298e:	331c      	adds	r3, #28
 8012990:	441a      	add	r2, r3
 8012992:	4498      	add	r8, r3
 8012994:	441e      	add	r6, r3
 8012996:	9208      	str	r2, [sp, #32]
 8012998:	e792      	b.n	80128c0 <_dtoa_r+0x818>
 801299a:	4603      	mov	r3, r0
 801299c:	e7f6      	b.n	801298c <_dtoa_r+0x8e4>
 801299e:	9b07      	ldr	r3, [sp, #28]
 80129a0:	9704      	str	r7, [sp, #16]
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	dc20      	bgt.n	80129e8 <_dtoa_r+0x940>
 80129a6:	9300      	str	r3, [sp, #0]
 80129a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129aa:	2b02      	cmp	r3, #2
 80129ac:	dd1e      	ble.n	80129ec <_dtoa_r+0x944>
 80129ae:	9b00      	ldr	r3, [sp, #0]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	f47f aec0 	bne.w	8012736 <_dtoa_r+0x68e>
 80129b6:	4621      	mov	r1, r4
 80129b8:	2205      	movs	r2, #5
 80129ba:	4658      	mov	r0, fp
 80129bc:	f000 fa9a 	bl	8012ef4 <__multadd>
 80129c0:	4601      	mov	r1, r0
 80129c2:	4604      	mov	r4, r0
 80129c4:	4648      	mov	r0, r9
 80129c6:	f000 fcf7 	bl	80133b8 <__mcmp>
 80129ca:	2800      	cmp	r0, #0
 80129cc:	f77f aeb3 	ble.w	8012736 <_dtoa_r+0x68e>
 80129d0:	4656      	mov	r6, sl
 80129d2:	2331      	movs	r3, #49	@ 0x31
 80129d4:	f806 3b01 	strb.w	r3, [r6], #1
 80129d8:	9b04      	ldr	r3, [sp, #16]
 80129da:	3301      	adds	r3, #1
 80129dc:	9304      	str	r3, [sp, #16]
 80129de:	e6ae      	b.n	801273e <_dtoa_r+0x696>
 80129e0:	9c07      	ldr	r4, [sp, #28]
 80129e2:	9704      	str	r7, [sp, #16]
 80129e4:	4625      	mov	r5, r4
 80129e6:	e7f3      	b.n	80129d0 <_dtoa_r+0x928>
 80129e8:	9b07      	ldr	r3, [sp, #28]
 80129ea:	9300      	str	r3, [sp, #0]
 80129ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	f000 8104 	beq.w	8012bfc <_dtoa_r+0xb54>
 80129f4:	2e00      	cmp	r6, #0
 80129f6:	dd05      	ble.n	8012a04 <_dtoa_r+0x95c>
 80129f8:	4629      	mov	r1, r5
 80129fa:	4632      	mov	r2, r6
 80129fc:	4658      	mov	r0, fp
 80129fe:	f000 fc6f 	bl	80132e0 <__lshift>
 8012a02:	4605      	mov	r5, r0
 8012a04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d05a      	beq.n	8012ac0 <_dtoa_r+0xa18>
 8012a0a:	6869      	ldr	r1, [r5, #4]
 8012a0c:	4658      	mov	r0, fp
 8012a0e:	f000 fa0f 	bl	8012e30 <_Balloc>
 8012a12:	4606      	mov	r6, r0
 8012a14:	b928      	cbnz	r0, 8012a22 <_dtoa_r+0x97a>
 8012a16:	4b84      	ldr	r3, [pc, #528]	@ (8012c28 <_dtoa_r+0xb80>)
 8012a18:	4602      	mov	r2, r0
 8012a1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012a1e:	f7ff bb5a 	b.w	80120d6 <_dtoa_r+0x2e>
 8012a22:	692a      	ldr	r2, [r5, #16]
 8012a24:	3202      	adds	r2, #2
 8012a26:	0092      	lsls	r2, r2, #2
 8012a28:	f105 010c 	add.w	r1, r5, #12
 8012a2c:	300c      	adds	r0, #12
 8012a2e:	f7ff fa9c 	bl	8011f6a <memcpy>
 8012a32:	2201      	movs	r2, #1
 8012a34:	4631      	mov	r1, r6
 8012a36:	4658      	mov	r0, fp
 8012a38:	f000 fc52 	bl	80132e0 <__lshift>
 8012a3c:	f10a 0301 	add.w	r3, sl, #1
 8012a40:	9307      	str	r3, [sp, #28]
 8012a42:	9b00      	ldr	r3, [sp, #0]
 8012a44:	4453      	add	r3, sl
 8012a46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012a48:	9b02      	ldr	r3, [sp, #8]
 8012a4a:	f003 0301 	and.w	r3, r3, #1
 8012a4e:	462f      	mov	r7, r5
 8012a50:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a52:	4605      	mov	r5, r0
 8012a54:	9b07      	ldr	r3, [sp, #28]
 8012a56:	4621      	mov	r1, r4
 8012a58:	3b01      	subs	r3, #1
 8012a5a:	4648      	mov	r0, r9
 8012a5c:	9300      	str	r3, [sp, #0]
 8012a5e:	f7ff fa99 	bl	8011f94 <quorem>
 8012a62:	4639      	mov	r1, r7
 8012a64:	9002      	str	r0, [sp, #8]
 8012a66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012a6a:	4648      	mov	r0, r9
 8012a6c:	f000 fca4 	bl	80133b8 <__mcmp>
 8012a70:	462a      	mov	r2, r5
 8012a72:	9008      	str	r0, [sp, #32]
 8012a74:	4621      	mov	r1, r4
 8012a76:	4658      	mov	r0, fp
 8012a78:	f000 fcba 	bl	80133f0 <__mdiff>
 8012a7c:	68c2      	ldr	r2, [r0, #12]
 8012a7e:	4606      	mov	r6, r0
 8012a80:	bb02      	cbnz	r2, 8012ac4 <_dtoa_r+0xa1c>
 8012a82:	4601      	mov	r1, r0
 8012a84:	4648      	mov	r0, r9
 8012a86:	f000 fc97 	bl	80133b8 <__mcmp>
 8012a8a:	4602      	mov	r2, r0
 8012a8c:	4631      	mov	r1, r6
 8012a8e:	4658      	mov	r0, fp
 8012a90:	920e      	str	r2, [sp, #56]	@ 0x38
 8012a92:	f000 fa0d 	bl	8012eb0 <_Bfree>
 8012a96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012a9a:	9e07      	ldr	r6, [sp, #28]
 8012a9c:	ea43 0102 	orr.w	r1, r3, r2
 8012aa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012aa2:	4319      	orrs	r1, r3
 8012aa4:	d110      	bne.n	8012ac8 <_dtoa_r+0xa20>
 8012aa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012aaa:	d029      	beq.n	8012b00 <_dtoa_r+0xa58>
 8012aac:	9b08      	ldr	r3, [sp, #32]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	dd02      	ble.n	8012ab8 <_dtoa_r+0xa10>
 8012ab2:	9b02      	ldr	r3, [sp, #8]
 8012ab4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012ab8:	9b00      	ldr	r3, [sp, #0]
 8012aba:	f883 8000 	strb.w	r8, [r3]
 8012abe:	e63f      	b.n	8012740 <_dtoa_r+0x698>
 8012ac0:	4628      	mov	r0, r5
 8012ac2:	e7bb      	b.n	8012a3c <_dtoa_r+0x994>
 8012ac4:	2201      	movs	r2, #1
 8012ac6:	e7e1      	b.n	8012a8c <_dtoa_r+0x9e4>
 8012ac8:	9b08      	ldr	r3, [sp, #32]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	db04      	blt.n	8012ad8 <_dtoa_r+0xa30>
 8012ace:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012ad0:	430b      	orrs	r3, r1
 8012ad2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012ad4:	430b      	orrs	r3, r1
 8012ad6:	d120      	bne.n	8012b1a <_dtoa_r+0xa72>
 8012ad8:	2a00      	cmp	r2, #0
 8012ada:	dded      	ble.n	8012ab8 <_dtoa_r+0xa10>
 8012adc:	4649      	mov	r1, r9
 8012ade:	2201      	movs	r2, #1
 8012ae0:	4658      	mov	r0, fp
 8012ae2:	f000 fbfd 	bl	80132e0 <__lshift>
 8012ae6:	4621      	mov	r1, r4
 8012ae8:	4681      	mov	r9, r0
 8012aea:	f000 fc65 	bl	80133b8 <__mcmp>
 8012aee:	2800      	cmp	r0, #0
 8012af0:	dc03      	bgt.n	8012afa <_dtoa_r+0xa52>
 8012af2:	d1e1      	bne.n	8012ab8 <_dtoa_r+0xa10>
 8012af4:	f018 0f01 	tst.w	r8, #1
 8012af8:	d0de      	beq.n	8012ab8 <_dtoa_r+0xa10>
 8012afa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012afe:	d1d8      	bne.n	8012ab2 <_dtoa_r+0xa0a>
 8012b00:	9a00      	ldr	r2, [sp, #0]
 8012b02:	2339      	movs	r3, #57	@ 0x39
 8012b04:	7013      	strb	r3, [r2, #0]
 8012b06:	4633      	mov	r3, r6
 8012b08:	461e      	mov	r6, r3
 8012b0a:	3b01      	subs	r3, #1
 8012b0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012b10:	2a39      	cmp	r2, #57	@ 0x39
 8012b12:	d052      	beq.n	8012bba <_dtoa_r+0xb12>
 8012b14:	3201      	adds	r2, #1
 8012b16:	701a      	strb	r2, [r3, #0]
 8012b18:	e612      	b.n	8012740 <_dtoa_r+0x698>
 8012b1a:	2a00      	cmp	r2, #0
 8012b1c:	dd07      	ble.n	8012b2e <_dtoa_r+0xa86>
 8012b1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012b22:	d0ed      	beq.n	8012b00 <_dtoa_r+0xa58>
 8012b24:	9a00      	ldr	r2, [sp, #0]
 8012b26:	f108 0301 	add.w	r3, r8, #1
 8012b2a:	7013      	strb	r3, [r2, #0]
 8012b2c:	e608      	b.n	8012740 <_dtoa_r+0x698>
 8012b2e:	9b07      	ldr	r3, [sp, #28]
 8012b30:	9a07      	ldr	r2, [sp, #28]
 8012b32:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012b36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b38:	4293      	cmp	r3, r2
 8012b3a:	d028      	beq.n	8012b8e <_dtoa_r+0xae6>
 8012b3c:	4649      	mov	r1, r9
 8012b3e:	2300      	movs	r3, #0
 8012b40:	220a      	movs	r2, #10
 8012b42:	4658      	mov	r0, fp
 8012b44:	f000 f9d6 	bl	8012ef4 <__multadd>
 8012b48:	42af      	cmp	r7, r5
 8012b4a:	4681      	mov	r9, r0
 8012b4c:	f04f 0300 	mov.w	r3, #0
 8012b50:	f04f 020a 	mov.w	r2, #10
 8012b54:	4639      	mov	r1, r7
 8012b56:	4658      	mov	r0, fp
 8012b58:	d107      	bne.n	8012b6a <_dtoa_r+0xac2>
 8012b5a:	f000 f9cb 	bl	8012ef4 <__multadd>
 8012b5e:	4607      	mov	r7, r0
 8012b60:	4605      	mov	r5, r0
 8012b62:	9b07      	ldr	r3, [sp, #28]
 8012b64:	3301      	adds	r3, #1
 8012b66:	9307      	str	r3, [sp, #28]
 8012b68:	e774      	b.n	8012a54 <_dtoa_r+0x9ac>
 8012b6a:	f000 f9c3 	bl	8012ef4 <__multadd>
 8012b6e:	4629      	mov	r1, r5
 8012b70:	4607      	mov	r7, r0
 8012b72:	2300      	movs	r3, #0
 8012b74:	220a      	movs	r2, #10
 8012b76:	4658      	mov	r0, fp
 8012b78:	f000 f9bc 	bl	8012ef4 <__multadd>
 8012b7c:	4605      	mov	r5, r0
 8012b7e:	e7f0      	b.n	8012b62 <_dtoa_r+0xaba>
 8012b80:	9b00      	ldr	r3, [sp, #0]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	bfcc      	ite	gt
 8012b86:	461e      	movgt	r6, r3
 8012b88:	2601      	movle	r6, #1
 8012b8a:	4456      	add	r6, sl
 8012b8c:	2700      	movs	r7, #0
 8012b8e:	4649      	mov	r1, r9
 8012b90:	2201      	movs	r2, #1
 8012b92:	4658      	mov	r0, fp
 8012b94:	f000 fba4 	bl	80132e0 <__lshift>
 8012b98:	4621      	mov	r1, r4
 8012b9a:	4681      	mov	r9, r0
 8012b9c:	f000 fc0c 	bl	80133b8 <__mcmp>
 8012ba0:	2800      	cmp	r0, #0
 8012ba2:	dcb0      	bgt.n	8012b06 <_dtoa_r+0xa5e>
 8012ba4:	d102      	bne.n	8012bac <_dtoa_r+0xb04>
 8012ba6:	f018 0f01 	tst.w	r8, #1
 8012baa:	d1ac      	bne.n	8012b06 <_dtoa_r+0xa5e>
 8012bac:	4633      	mov	r3, r6
 8012bae:	461e      	mov	r6, r3
 8012bb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012bb4:	2a30      	cmp	r2, #48	@ 0x30
 8012bb6:	d0fa      	beq.n	8012bae <_dtoa_r+0xb06>
 8012bb8:	e5c2      	b.n	8012740 <_dtoa_r+0x698>
 8012bba:	459a      	cmp	sl, r3
 8012bbc:	d1a4      	bne.n	8012b08 <_dtoa_r+0xa60>
 8012bbe:	9b04      	ldr	r3, [sp, #16]
 8012bc0:	3301      	adds	r3, #1
 8012bc2:	9304      	str	r3, [sp, #16]
 8012bc4:	2331      	movs	r3, #49	@ 0x31
 8012bc6:	f88a 3000 	strb.w	r3, [sl]
 8012bca:	e5b9      	b.n	8012740 <_dtoa_r+0x698>
 8012bcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012bce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012c2c <_dtoa_r+0xb84>
 8012bd2:	b11b      	cbz	r3, 8012bdc <_dtoa_r+0xb34>
 8012bd4:	f10a 0308 	add.w	r3, sl, #8
 8012bd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012bda:	6013      	str	r3, [r2, #0]
 8012bdc:	4650      	mov	r0, sl
 8012bde:	b019      	add	sp, #100	@ 0x64
 8012be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012be6:	2b01      	cmp	r3, #1
 8012be8:	f77f ae37 	ble.w	801285a <_dtoa_r+0x7b2>
 8012bec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012bee:	930a      	str	r3, [sp, #40]	@ 0x28
 8012bf0:	2001      	movs	r0, #1
 8012bf2:	e655      	b.n	80128a0 <_dtoa_r+0x7f8>
 8012bf4:	9b00      	ldr	r3, [sp, #0]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	f77f aed6 	ble.w	80129a8 <_dtoa_r+0x900>
 8012bfc:	4656      	mov	r6, sl
 8012bfe:	4621      	mov	r1, r4
 8012c00:	4648      	mov	r0, r9
 8012c02:	f7ff f9c7 	bl	8011f94 <quorem>
 8012c06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012c0a:	f806 8b01 	strb.w	r8, [r6], #1
 8012c0e:	9b00      	ldr	r3, [sp, #0]
 8012c10:	eba6 020a 	sub.w	r2, r6, sl
 8012c14:	4293      	cmp	r3, r2
 8012c16:	ddb3      	ble.n	8012b80 <_dtoa_r+0xad8>
 8012c18:	4649      	mov	r1, r9
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	220a      	movs	r2, #10
 8012c1e:	4658      	mov	r0, fp
 8012c20:	f000 f968 	bl	8012ef4 <__multadd>
 8012c24:	4681      	mov	r9, r0
 8012c26:	e7ea      	b.n	8012bfe <_dtoa_r+0xb56>
 8012c28:	08017173 	.word	0x08017173
 8012c2c:	080170f7 	.word	0x080170f7

08012c30 <_free_r>:
 8012c30:	b538      	push	{r3, r4, r5, lr}
 8012c32:	4605      	mov	r5, r0
 8012c34:	2900      	cmp	r1, #0
 8012c36:	d041      	beq.n	8012cbc <_free_r+0x8c>
 8012c38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012c3c:	1f0c      	subs	r4, r1, #4
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	bfb8      	it	lt
 8012c42:	18e4      	addlt	r4, r4, r3
 8012c44:	f000 f8e8 	bl	8012e18 <__malloc_lock>
 8012c48:	4a1d      	ldr	r2, [pc, #116]	@ (8012cc0 <_free_r+0x90>)
 8012c4a:	6813      	ldr	r3, [r2, #0]
 8012c4c:	b933      	cbnz	r3, 8012c5c <_free_r+0x2c>
 8012c4e:	6063      	str	r3, [r4, #4]
 8012c50:	6014      	str	r4, [r2, #0]
 8012c52:	4628      	mov	r0, r5
 8012c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012c58:	f000 b8e4 	b.w	8012e24 <__malloc_unlock>
 8012c5c:	42a3      	cmp	r3, r4
 8012c5e:	d908      	bls.n	8012c72 <_free_r+0x42>
 8012c60:	6820      	ldr	r0, [r4, #0]
 8012c62:	1821      	adds	r1, r4, r0
 8012c64:	428b      	cmp	r3, r1
 8012c66:	bf01      	itttt	eq
 8012c68:	6819      	ldreq	r1, [r3, #0]
 8012c6a:	685b      	ldreq	r3, [r3, #4]
 8012c6c:	1809      	addeq	r1, r1, r0
 8012c6e:	6021      	streq	r1, [r4, #0]
 8012c70:	e7ed      	b.n	8012c4e <_free_r+0x1e>
 8012c72:	461a      	mov	r2, r3
 8012c74:	685b      	ldr	r3, [r3, #4]
 8012c76:	b10b      	cbz	r3, 8012c7c <_free_r+0x4c>
 8012c78:	42a3      	cmp	r3, r4
 8012c7a:	d9fa      	bls.n	8012c72 <_free_r+0x42>
 8012c7c:	6811      	ldr	r1, [r2, #0]
 8012c7e:	1850      	adds	r0, r2, r1
 8012c80:	42a0      	cmp	r0, r4
 8012c82:	d10b      	bne.n	8012c9c <_free_r+0x6c>
 8012c84:	6820      	ldr	r0, [r4, #0]
 8012c86:	4401      	add	r1, r0
 8012c88:	1850      	adds	r0, r2, r1
 8012c8a:	4283      	cmp	r3, r0
 8012c8c:	6011      	str	r1, [r2, #0]
 8012c8e:	d1e0      	bne.n	8012c52 <_free_r+0x22>
 8012c90:	6818      	ldr	r0, [r3, #0]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	6053      	str	r3, [r2, #4]
 8012c96:	4408      	add	r0, r1
 8012c98:	6010      	str	r0, [r2, #0]
 8012c9a:	e7da      	b.n	8012c52 <_free_r+0x22>
 8012c9c:	d902      	bls.n	8012ca4 <_free_r+0x74>
 8012c9e:	230c      	movs	r3, #12
 8012ca0:	602b      	str	r3, [r5, #0]
 8012ca2:	e7d6      	b.n	8012c52 <_free_r+0x22>
 8012ca4:	6820      	ldr	r0, [r4, #0]
 8012ca6:	1821      	adds	r1, r4, r0
 8012ca8:	428b      	cmp	r3, r1
 8012caa:	bf04      	itt	eq
 8012cac:	6819      	ldreq	r1, [r3, #0]
 8012cae:	685b      	ldreq	r3, [r3, #4]
 8012cb0:	6063      	str	r3, [r4, #4]
 8012cb2:	bf04      	itt	eq
 8012cb4:	1809      	addeq	r1, r1, r0
 8012cb6:	6021      	streq	r1, [r4, #0]
 8012cb8:	6054      	str	r4, [r2, #4]
 8012cba:	e7ca      	b.n	8012c52 <_free_r+0x22>
 8012cbc:	bd38      	pop	{r3, r4, r5, pc}
 8012cbe:	bf00      	nop
 8012cc0:	200026e0 	.word	0x200026e0

08012cc4 <malloc>:
 8012cc4:	4b02      	ldr	r3, [pc, #8]	@ (8012cd0 <malloc+0xc>)
 8012cc6:	4601      	mov	r1, r0
 8012cc8:	6818      	ldr	r0, [r3, #0]
 8012cca:	f000 b825 	b.w	8012d18 <_malloc_r>
 8012cce:	bf00      	nop
 8012cd0:	200001e4 	.word	0x200001e4

08012cd4 <sbrk_aligned>:
 8012cd4:	b570      	push	{r4, r5, r6, lr}
 8012cd6:	4e0f      	ldr	r6, [pc, #60]	@ (8012d14 <sbrk_aligned+0x40>)
 8012cd8:	460c      	mov	r4, r1
 8012cda:	6831      	ldr	r1, [r6, #0]
 8012cdc:	4605      	mov	r5, r0
 8012cde:	b911      	cbnz	r1, 8012ce6 <sbrk_aligned+0x12>
 8012ce0:	f002 f988 	bl	8014ff4 <_sbrk_r>
 8012ce4:	6030      	str	r0, [r6, #0]
 8012ce6:	4621      	mov	r1, r4
 8012ce8:	4628      	mov	r0, r5
 8012cea:	f002 f983 	bl	8014ff4 <_sbrk_r>
 8012cee:	1c43      	adds	r3, r0, #1
 8012cf0:	d103      	bne.n	8012cfa <sbrk_aligned+0x26>
 8012cf2:	f04f 34ff 	mov.w	r4, #4294967295
 8012cf6:	4620      	mov	r0, r4
 8012cf8:	bd70      	pop	{r4, r5, r6, pc}
 8012cfa:	1cc4      	adds	r4, r0, #3
 8012cfc:	f024 0403 	bic.w	r4, r4, #3
 8012d00:	42a0      	cmp	r0, r4
 8012d02:	d0f8      	beq.n	8012cf6 <sbrk_aligned+0x22>
 8012d04:	1a21      	subs	r1, r4, r0
 8012d06:	4628      	mov	r0, r5
 8012d08:	f002 f974 	bl	8014ff4 <_sbrk_r>
 8012d0c:	3001      	adds	r0, #1
 8012d0e:	d1f2      	bne.n	8012cf6 <sbrk_aligned+0x22>
 8012d10:	e7ef      	b.n	8012cf2 <sbrk_aligned+0x1e>
 8012d12:	bf00      	nop
 8012d14:	200026dc 	.word	0x200026dc

08012d18 <_malloc_r>:
 8012d18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d1c:	1ccd      	adds	r5, r1, #3
 8012d1e:	f025 0503 	bic.w	r5, r5, #3
 8012d22:	3508      	adds	r5, #8
 8012d24:	2d0c      	cmp	r5, #12
 8012d26:	bf38      	it	cc
 8012d28:	250c      	movcc	r5, #12
 8012d2a:	2d00      	cmp	r5, #0
 8012d2c:	4606      	mov	r6, r0
 8012d2e:	db01      	blt.n	8012d34 <_malloc_r+0x1c>
 8012d30:	42a9      	cmp	r1, r5
 8012d32:	d904      	bls.n	8012d3e <_malloc_r+0x26>
 8012d34:	230c      	movs	r3, #12
 8012d36:	6033      	str	r3, [r6, #0]
 8012d38:	2000      	movs	r0, #0
 8012d3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012e14 <_malloc_r+0xfc>
 8012d42:	f000 f869 	bl	8012e18 <__malloc_lock>
 8012d46:	f8d8 3000 	ldr.w	r3, [r8]
 8012d4a:	461c      	mov	r4, r3
 8012d4c:	bb44      	cbnz	r4, 8012da0 <_malloc_r+0x88>
 8012d4e:	4629      	mov	r1, r5
 8012d50:	4630      	mov	r0, r6
 8012d52:	f7ff ffbf 	bl	8012cd4 <sbrk_aligned>
 8012d56:	1c43      	adds	r3, r0, #1
 8012d58:	4604      	mov	r4, r0
 8012d5a:	d158      	bne.n	8012e0e <_malloc_r+0xf6>
 8012d5c:	f8d8 4000 	ldr.w	r4, [r8]
 8012d60:	4627      	mov	r7, r4
 8012d62:	2f00      	cmp	r7, #0
 8012d64:	d143      	bne.n	8012dee <_malloc_r+0xd6>
 8012d66:	2c00      	cmp	r4, #0
 8012d68:	d04b      	beq.n	8012e02 <_malloc_r+0xea>
 8012d6a:	6823      	ldr	r3, [r4, #0]
 8012d6c:	4639      	mov	r1, r7
 8012d6e:	4630      	mov	r0, r6
 8012d70:	eb04 0903 	add.w	r9, r4, r3
 8012d74:	f002 f93e 	bl	8014ff4 <_sbrk_r>
 8012d78:	4581      	cmp	r9, r0
 8012d7a:	d142      	bne.n	8012e02 <_malloc_r+0xea>
 8012d7c:	6821      	ldr	r1, [r4, #0]
 8012d7e:	1a6d      	subs	r5, r5, r1
 8012d80:	4629      	mov	r1, r5
 8012d82:	4630      	mov	r0, r6
 8012d84:	f7ff ffa6 	bl	8012cd4 <sbrk_aligned>
 8012d88:	3001      	adds	r0, #1
 8012d8a:	d03a      	beq.n	8012e02 <_malloc_r+0xea>
 8012d8c:	6823      	ldr	r3, [r4, #0]
 8012d8e:	442b      	add	r3, r5
 8012d90:	6023      	str	r3, [r4, #0]
 8012d92:	f8d8 3000 	ldr.w	r3, [r8]
 8012d96:	685a      	ldr	r2, [r3, #4]
 8012d98:	bb62      	cbnz	r2, 8012df4 <_malloc_r+0xdc>
 8012d9a:	f8c8 7000 	str.w	r7, [r8]
 8012d9e:	e00f      	b.n	8012dc0 <_malloc_r+0xa8>
 8012da0:	6822      	ldr	r2, [r4, #0]
 8012da2:	1b52      	subs	r2, r2, r5
 8012da4:	d420      	bmi.n	8012de8 <_malloc_r+0xd0>
 8012da6:	2a0b      	cmp	r2, #11
 8012da8:	d917      	bls.n	8012dda <_malloc_r+0xc2>
 8012daa:	1961      	adds	r1, r4, r5
 8012dac:	42a3      	cmp	r3, r4
 8012dae:	6025      	str	r5, [r4, #0]
 8012db0:	bf18      	it	ne
 8012db2:	6059      	strne	r1, [r3, #4]
 8012db4:	6863      	ldr	r3, [r4, #4]
 8012db6:	bf08      	it	eq
 8012db8:	f8c8 1000 	streq.w	r1, [r8]
 8012dbc:	5162      	str	r2, [r4, r5]
 8012dbe:	604b      	str	r3, [r1, #4]
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	f000 f82f 	bl	8012e24 <__malloc_unlock>
 8012dc6:	f104 000b 	add.w	r0, r4, #11
 8012dca:	1d23      	adds	r3, r4, #4
 8012dcc:	f020 0007 	bic.w	r0, r0, #7
 8012dd0:	1ac2      	subs	r2, r0, r3
 8012dd2:	bf1c      	itt	ne
 8012dd4:	1a1b      	subne	r3, r3, r0
 8012dd6:	50a3      	strne	r3, [r4, r2]
 8012dd8:	e7af      	b.n	8012d3a <_malloc_r+0x22>
 8012dda:	6862      	ldr	r2, [r4, #4]
 8012ddc:	42a3      	cmp	r3, r4
 8012dde:	bf0c      	ite	eq
 8012de0:	f8c8 2000 	streq.w	r2, [r8]
 8012de4:	605a      	strne	r2, [r3, #4]
 8012de6:	e7eb      	b.n	8012dc0 <_malloc_r+0xa8>
 8012de8:	4623      	mov	r3, r4
 8012dea:	6864      	ldr	r4, [r4, #4]
 8012dec:	e7ae      	b.n	8012d4c <_malloc_r+0x34>
 8012dee:	463c      	mov	r4, r7
 8012df0:	687f      	ldr	r7, [r7, #4]
 8012df2:	e7b6      	b.n	8012d62 <_malloc_r+0x4a>
 8012df4:	461a      	mov	r2, r3
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	42a3      	cmp	r3, r4
 8012dfa:	d1fb      	bne.n	8012df4 <_malloc_r+0xdc>
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	6053      	str	r3, [r2, #4]
 8012e00:	e7de      	b.n	8012dc0 <_malloc_r+0xa8>
 8012e02:	230c      	movs	r3, #12
 8012e04:	6033      	str	r3, [r6, #0]
 8012e06:	4630      	mov	r0, r6
 8012e08:	f000 f80c 	bl	8012e24 <__malloc_unlock>
 8012e0c:	e794      	b.n	8012d38 <_malloc_r+0x20>
 8012e0e:	6005      	str	r5, [r0, #0]
 8012e10:	e7d6      	b.n	8012dc0 <_malloc_r+0xa8>
 8012e12:	bf00      	nop
 8012e14:	200026e0 	.word	0x200026e0

08012e18 <__malloc_lock>:
 8012e18:	4801      	ldr	r0, [pc, #4]	@ (8012e20 <__malloc_lock+0x8>)
 8012e1a:	f7ff b8a4 	b.w	8011f66 <__retarget_lock_acquire_recursive>
 8012e1e:	bf00      	nop
 8012e20:	200026d8 	.word	0x200026d8

08012e24 <__malloc_unlock>:
 8012e24:	4801      	ldr	r0, [pc, #4]	@ (8012e2c <__malloc_unlock+0x8>)
 8012e26:	f7ff b89f 	b.w	8011f68 <__retarget_lock_release_recursive>
 8012e2a:	bf00      	nop
 8012e2c:	200026d8 	.word	0x200026d8

08012e30 <_Balloc>:
 8012e30:	b570      	push	{r4, r5, r6, lr}
 8012e32:	69c6      	ldr	r6, [r0, #28]
 8012e34:	4604      	mov	r4, r0
 8012e36:	460d      	mov	r5, r1
 8012e38:	b976      	cbnz	r6, 8012e58 <_Balloc+0x28>
 8012e3a:	2010      	movs	r0, #16
 8012e3c:	f7ff ff42 	bl	8012cc4 <malloc>
 8012e40:	4602      	mov	r2, r0
 8012e42:	61e0      	str	r0, [r4, #28]
 8012e44:	b920      	cbnz	r0, 8012e50 <_Balloc+0x20>
 8012e46:	4b18      	ldr	r3, [pc, #96]	@ (8012ea8 <_Balloc+0x78>)
 8012e48:	4818      	ldr	r0, [pc, #96]	@ (8012eac <_Balloc+0x7c>)
 8012e4a:	216b      	movs	r1, #107	@ 0x6b
 8012e4c:	f002 f8ec 	bl	8015028 <__assert_func>
 8012e50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012e54:	6006      	str	r6, [r0, #0]
 8012e56:	60c6      	str	r6, [r0, #12]
 8012e58:	69e6      	ldr	r6, [r4, #28]
 8012e5a:	68f3      	ldr	r3, [r6, #12]
 8012e5c:	b183      	cbz	r3, 8012e80 <_Balloc+0x50>
 8012e5e:	69e3      	ldr	r3, [r4, #28]
 8012e60:	68db      	ldr	r3, [r3, #12]
 8012e62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012e66:	b9b8      	cbnz	r0, 8012e98 <_Balloc+0x68>
 8012e68:	2101      	movs	r1, #1
 8012e6a:	fa01 f605 	lsl.w	r6, r1, r5
 8012e6e:	1d72      	adds	r2, r6, #5
 8012e70:	0092      	lsls	r2, r2, #2
 8012e72:	4620      	mov	r0, r4
 8012e74:	f002 f8f6 	bl	8015064 <_calloc_r>
 8012e78:	b160      	cbz	r0, 8012e94 <_Balloc+0x64>
 8012e7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012e7e:	e00e      	b.n	8012e9e <_Balloc+0x6e>
 8012e80:	2221      	movs	r2, #33	@ 0x21
 8012e82:	2104      	movs	r1, #4
 8012e84:	4620      	mov	r0, r4
 8012e86:	f002 f8ed 	bl	8015064 <_calloc_r>
 8012e8a:	69e3      	ldr	r3, [r4, #28]
 8012e8c:	60f0      	str	r0, [r6, #12]
 8012e8e:	68db      	ldr	r3, [r3, #12]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d1e4      	bne.n	8012e5e <_Balloc+0x2e>
 8012e94:	2000      	movs	r0, #0
 8012e96:	bd70      	pop	{r4, r5, r6, pc}
 8012e98:	6802      	ldr	r2, [r0, #0]
 8012e9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012ea4:	e7f7      	b.n	8012e96 <_Balloc+0x66>
 8012ea6:	bf00      	nop
 8012ea8:	08017104 	.word	0x08017104
 8012eac:	08017184 	.word	0x08017184

08012eb0 <_Bfree>:
 8012eb0:	b570      	push	{r4, r5, r6, lr}
 8012eb2:	69c6      	ldr	r6, [r0, #28]
 8012eb4:	4605      	mov	r5, r0
 8012eb6:	460c      	mov	r4, r1
 8012eb8:	b976      	cbnz	r6, 8012ed8 <_Bfree+0x28>
 8012eba:	2010      	movs	r0, #16
 8012ebc:	f7ff ff02 	bl	8012cc4 <malloc>
 8012ec0:	4602      	mov	r2, r0
 8012ec2:	61e8      	str	r0, [r5, #28]
 8012ec4:	b920      	cbnz	r0, 8012ed0 <_Bfree+0x20>
 8012ec6:	4b09      	ldr	r3, [pc, #36]	@ (8012eec <_Bfree+0x3c>)
 8012ec8:	4809      	ldr	r0, [pc, #36]	@ (8012ef0 <_Bfree+0x40>)
 8012eca:	218f      	movs	r1, #143	@ 0x8f
 8012ecc:	f002 f8ac 	bl	8015028 <__assert_func>
 8012ed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012ed4:	6006      	str	r6, [r0, #0]
 8012ed6:	60c6      	str	r6, [r0, #12]
 8012ed8:	b13c      	cbz	r4, 8012eea <_Bfree+0x3a>
 8012eda:	69eb      	ldr	r3, [r5, #28]
 8012edc:	6862      	ldr	r2, [r4, #4]
 8012ede:	68db      	ldr	r3, [r3, #12]
 8012ee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012ee4:	6021      	str	r1, [r4, #0]
 8012ee6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012eea:	bd70      	pop	{r4, r5, r6, pc}
 8012eec:	08017104 	.word	0x08017104
 8012ef0:	08017184 	.word	0x08017184

08012ef4 <__multadd>:
 8012ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ef8:	690d      	ldr	r5, [r1, #16]
 8012efa:	4607      	mov	r7, r0
 8012efc:	460c      	mov	r4, r1
 8012efe:	461e      	mov	r6, r3
 8012f00:	f101 0c14 	add.w	ip, r1, #20
 8012f04:	2000      	movs	r0, #0
 8012f06:	f8dc 3000 	ldr.w	r3, [ip]
 8012f0a:	b299      	uxth	r1, r3
 8012f0c:	fb02 6101 	mla	r1, r2, r1, r6
 8012f10:	0c1e      	lsrs	r6, r3, #16
 8012f12:	0c0b      	lsrs	r3, r1, #16
 8012f14:	fb02 3306 	mla	r3, r2, r6, r3
 8012f18:	b289      	uxth	r1, r1
 8012f1a:	3001      	adds	r0, #1
 8012f1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012f20:	4285      	cmp	r5, r0
 8012f22:	f84c 1b04 	str.w	r1, [ip], #4
 8012f26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012f2a:	dcec      	bgt.n	8012f06 <__multadd+0x12>
 8012f2c:	b30e      	cbz	r6, 8012f72 <__multadd+0x7e>
 8012f2e:	68a3      	ldr	r3, [r4, #8]
 8012f30:	42ab      	cmp	r3, r5
 8012f32:	dc19      	bgt.n	8012f68 <__multadd+0x74>
 8012f34:	6861      	ldr	r1, [r4, #4]
 8012f36:	4638      	mov	r0, r7
 8012f38:	3101      	adds	r1, #1
 8012f3a:	f7ff ff79 	bl	8012e30 <_Balloc>
 8012f3e:	4680      	mov	r8, r0
 8012f40:	b928      	cbnz	r0, 8012f4e <__multadd+0x5a>
 8012f42:	4602      	mov	r2, r0
 8012f44:	4b0c      	ldr	r3, [pc, #48]	@ (8012f78 <__multadd+0x84>)
 8012f46:	480d      	ldr	r0, [pc, #52]	@ (8012f7c <__multadd+0x88>)
 8012f48:	21ba      	movs	r1, #186	@ 0xba
 8012f4a:	f002 f86d 	bl	8015028 <__assert_func>
 8012f4e:	6922      	ldr	r2, [r4, #16]
 8012f50:	3202      	adds	r2, #2
 8012f52:	f104 010c 	add.w	r1, r4, #12
 8012f56:	0092      	lsls	r2, r2, #2
 8012f58:	300c      	adds	r0, #12
 8012f5a:	f7ff f806 	bl	8011f6a <memcpy>
 8012f5e:	4621      	mov	r1, r4
 8012f60:	4638      	mov	r0, r7
 8012f62:	f7ff ffa5 	bl	8012eb0 <_Bfree>
 8012f66:	4644      	mov	r4, r8
 8012f68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012f6c:	3501      	adds	r5, #1
 8012f6e:	615e      	str	r6, [r3, #20]
 8012f70:	6125      	str	r5, [r4, #16]
 8012f72:	4620      	mov	r0, r4
 8012f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f78:	08017173 	.word	0x08017173
 8012f7c:	08017184 	.word	0x08017184

08012f80 <__s2b>:
 8012f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f84:	460c      	mov	r4, r1
 8012f86:	4615      	mov	r5, r2
 8012f88:	461f      	mov	r7, r3
 8012f8a:	2209      	movs	r2, #9
 8012f8c:	3308      	adds	r3, #8
 8012f8e:	4606      	mov	r6, r0
 8012f90:	fb93 f3f2 	sdiv	r3, r3, r2
 8012f94:	2100      	movs	r1, #0
 8012f96:	2201      	movs	r2, #1
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	db09      	blt.n	8012fb0 <__s2b+0x30>
 8012f9c:	4630      	mov	r0, r6
 8012f9e:	f7ff ff47 	bl	8012e30 <_Balloc>
 8012fa2:	b940      	cbnz	r0, 8012fb6 <__s2b+0x36>
 8012fa4:	4602      	mov	r2, r0
 8012fa6:	4b19      	ldr	r3, [pc, #100]	@ (801300c <__s2b+0x8c>)
 8012fa8:	4819      	ldr	r0, [pc, #100]	@ (8013010 <__s2b+0x90>)
 8012faa:	21d3      	movs	r1, #211	@ 0xd3
 8012fac:	f002 f83c 	bl	8015028 <__assert_func>
 8012fb0:	0052      	lsls	r2, r2, #1
 8012fb2:	3101      	adds	r1, #1
 8012fb4:	e7f0      	b.n	8012f98 <__s2b+0x18>
 8012fb6:	9b08      	ldr	r3, [sp, #32]
 8012fb8:	6143      	str	r3, [r0, #20]
 8012fba:	2d09      	cmp	r5, #9
 8012fbc:	f04f 0301 	mov.w	r3, #1
 8012fc0:	6103      	str	r3, [r0, #16]
 8012fc2:	dd16      	ble.n	8012ff2 <__s2b+0x72>
 8012fc4:	f104 0909 	add.w	r9, r4, #9
 8012fc8:	46c8      	mov	r8, r9
 8012fca:	442c      	add	r4, r5
 8012fcc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012fd0:	4601      	mov	r1, r0
 8012fd2:	3b30      	subs	r3, #48	@ 0x30
 8012fd4:	220a      	movs	r2, #10
 8012fd6:	4630      	mov	r0, r6
 8012fd8:	f7ff ff8c 	bl	8012ef4 <__multadd>
 8012fdc:	45a0      	cmp	r8, r4
 8012fde:	d1f5      	bne.n	8012fcc <__s2b+0x4c>
 8012fe0:	f1a5 0408 	sub.w	r4, r5, #8
 8012fe4:	444c      	add	r4, r9
 8012fe6:	1b2d      	subs	r5, r5, r4
 8012fe8:	1963      	adds	r3, r4, r5
 8012fea:	42bb      	cmp	r3, r7
 8012fec:	db04      	blt.n	8012ff8 <__s2b+0x78>
 8012fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ff2:	340a      	adds	r4, #10
 8012ff4:	2509      	movs	r5, #9
 8012ff6:	e7f6      	b.n	8012fe6 <__s2b+0x66>
 8012ff8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8012ffc:	4601      	mov	r1, r0
 8012ffe:	3b30      	subs	r3, #48	@ 0x30
 8013000:	220a      	movs	r2, #10
 8013002:	4630      	mov	r0, r6
 8013004:	f7ff ff76 	bl	8012ef4 <__multadd>
 8013008:	e7ee      	b.n	8012fe8 <__s2b+0x68>
 801300a:	bf00      	nop
 801300c:	08017173 	.word	0x08017173
 8013010:	08017184 	.word	0x08017184

08013014 <__hi0bits>:
 8013014:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013018:	4603      	mov	r3, r0
 801301a:	bf36      	itet	cc
 801301c:	0403      	lslcc	r3, r0, #16
 801301e:	2000      	movcs	r0, #0
 8013020:	2010      	movcc	r0, #16
 8013022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013026:	bf3c      	itt	cc
 8013028:	021b      	lslcc	r3, r3, #8
 801302a:	3008      	addcc	r0, #8
 801302c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013030:	bf3c      	itt	cc
 8013032:	011b      	lslcc	r3, r3, #4
 8013034:	3004      	addcc	r0, #4
 8013036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801303a:	bf3c      	itt	cc
 801303c:	009b      	lslcc	r3, r3, #2
 801303e:	3002      	addcc	r0, #2
 8013040:	2b00      	cmp	r3, #0
 8013042:	db05      	blt.n	8013050 <__hi0bits+0x3c>
 8013044:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013048:	f100 0001 	add.w	r0, r0, #1
 801304c:	bf08      	it	eq
 801304e:	2020      	moveq	r0, #32
 8013050:	4770      	bx	lr

08013052 <__lo0bits>:
 8013052:	6803      	ldr	r3, [r0, #0]
 8013054:	4602      	mov	r2, r0
 8013056:	f013 0007 	ands.w	r0, r3, #7
 801305a:	d00b      	beq.n	8013074 <__lo0bits+0x22>
 801305c:	07d9      	lsls	r1, r3, #31
 801305e:	d421      	bmi.n	80130a4 <__lo0bits+0x52>
 8013060:	0798      	lsls	r0, r3, #30
 8013062:	bf49      	itett	mi
 8013064:	085b      	lsrmi	r3, r3, #1
 8013066:	089b      	lsrpl	r3, r3, #2
 8013068:	2001      	movmi	r0, #1
 801306a:	6013      	strmi	r3, [r2, #0]
 801306c:	bf5c      	itt	pl
 801306e:	6013      	strpl	r3, [r2, #0]
 8013070:	2002      	movpl	r0, #2
 8013072:	4770      	bx	lr
 8013074:	b299      	uxth	r1, r3
 8013076:	b909      	cbnz	r1, 801307c <__lo0bits+0x2a>
 8013078:	0c1b      	lsrs	r3, r3, #16
 801307a:	2010      	movs	r0, #16
 801307c:	b2d9      	uxtb	r1, r3
 801307e:	b909      	cbnz	r1, 8013084 <__lo0bits+0x32>
 8013080:	3008      	adds	r0, #8
 8013082:	0a1b      	lsrs	r3, r3, #8
 8013084:	0719      	lsls	r1, r3, #28
 8013086:	bf04      	itt	eq
 8013088:	091b      	lsreq	r3, r3, #4
 801308a:	3004      	addeq	r0, #4
 801308c:	0799      	lsls	r1, r3, #30
 801308e:	bf04      	itt	eq
 8013090:	089b      	lsreq	r3, r3, #2
 8013092:	3002      	addeq	r0, #2
 8013094:	07d9      	lsls	r1, r3, #31
 8013096:	d403      	bmi.n	80130a0 <__lo0bits+0x4e>
 8013098:	085b      	lsrs	r3, r3, #1
 801309a:	f100 0001 	add.w	r0, r0, #1
 801309e:	d003      	beq.n	80130a8 <__lo0bits+0x56>
 80130a0:	6013      	str	r3, [r2, #0]
 80130a2:	4770      	bx	lr
 80130a4:	2000      	movs	r0, #0
 80130a6:	4770      	bx	lr
 80130a8:	2020      	movs	r0, #32
 80130aa:	4770      	bx	lr

080130ac <__i2b>:
 80130ac:	b510      	push	{r4, lr}
 80130ae:	460c      	mov	r4, r1
 80130b0:	2101      	movs	r1, #1
 80130b2:	f7ff febd 	bl	8012e30 <_Balloc>
 80130b6:	4602      	mov	r2, r0
 80130b8:	b928      	cbnz	r0, 80130c6 <__i2b+0x1a>
 80130ba:	4b05      	ldr	r3, [pc, #20]	@ (80130d0 <__i2b+0x24>)
 80130bc:	4805      	ldr	r0, [pc, #20]	@ (80130d4 <__i2b+0x28>)
 80130be:	f240 1145 	movw	r1, #325	@ 0x145
 80130c2:	f001 ffb1 	bl	8015028 <__assert_func>
 80130c6:	2301      	movs	r3, #1
 80130c8:	6144      	str	r4, [r0, #20]
 80130ca:	6103      	str	r3, [r0, #16]
 80130cc:	bd10      	pop	{r4, pc}
 80130ce:	bf00      	nop
 80130d0:	08017173 	.word	0x08017173
 80130d4:	08017184 	.word	0x08017184

080130d8 <__multiply>:
 80130d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130dc:	4614      	mov	r4, r2
 80130de:	690a      	ldr	r2, [r1, #16]
 80130e0:	6923      	ldr	r3, [r4, #16]
 80130e2:	429a      	cmp	r2, r3
 80130e4:	bfa8      	it	ge
 80130e6:	4623      	movge	r3, r4
 80130e8:	460f      	mov	r7, r1
 80130ea:	bfa4      	itt	ge
 80130ec:	460c      	movge	r4, r1
 80130ee:	461f      	movge	r7, r3
 80130f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80130f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80130f8:	68a3      	ldr	r3, [r4, #8]
 80130fa:	6861      	ldr	r1, [r4, #4]
 80130fc:	eb0a 0609 	add.w	r6, sl, r9
 8013100:	42b3      	cmp	r3, r6
 8013102:	b085      	sub	sp, #20
 8013104:	bfb8      	it	lt
 8013106:	3101      	addlt	r1, #1
 8013108:	f7ff fe92 	bl	8012e30 <_Balloc>
 801310c:	b930      	cbnz	r0, 801311c <__multiply+0x44>
 801310e:	4602      	mov	r2, r0
 8013110:	4b44      	ldr	r3, [pc, #272]	@ (8013224 <__multiply+0x14c>)
 8013112:	4845      	ldr	r0, [pc, #276]	@ (8013228 <__multiply+0x150>)
 8013114:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013118:	f001 ff86 	bl	8015028 <__assert_func>
 801311c:	f100 0514 	add.w	r5, r0, #20
 8013120:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013124:	462b      	mov	r3, r5
 8013126:	2200      	movs	r2, #0
 8013128:	4543      	cmp	r3, r8
 801312a:	d321      	bcc.n	8013170 <__multiply+0x98>
 801312c:	f107 0114 	add.w	r1, r7, #20
 8013130:	f104 0214 	add.w	r2, r4, #20
 8013134:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013138:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801313c:	9302      	str	r3, [sp, #8]
 801313e:	1b13      	subs	r3, r2, r4
 8013140:	3b15      	subs	r3, #21
 8013142:	f023 0303 	bic.w	r3, r3, #3
 8013146:	3304      	adds	r3, #4
 8013148:	f104 0715 	add.w	r7, r4, #21
 801314c:	42ba      	cmp	r2, r7
 801314e:	bf38      	it	cc
 8013150:	2304      	movcc	r3, #4
 8013152:	9301      	str	r3, [sp, #4]
 8013154:	9b02      	ldr	r3, [sp, #8]
 8013156:	9103      	str	r1, [sp, #12]
 8013158:	428b      	cmp	r3, r1
 801315a:	d80c      	bhi.n	8013176 <__multiply+0x9e>
 801315c:	2e00      	cmp	r6, #0
 801315e:	dd03      	ble.n	8013168 <__multiply+0x90>
 8013160:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013164:	2b00      	cmp	r3, #0
 8013166:	d05b      	beq.n	8013220 <__multiply+0x148>
 8013168:	6106      	str	r6, [r0, #16]
 801316a:	b005      	add	sp, #20
 801316c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013170:	f843 2b04 	str.w	r2, [r3], #4
 8013174:	e7d8      	b.n	8013128 <__multiply+0x50>
 8013176:	f8b1 a000 	ldrh.w	sl, [r1]
 801317a:	f1ba 0f00 	cmp.w	sl, #0
 801317e:	d024      	beq.n	80131ca <__multiply+0xf2>
 8013180:	f104 0e14 	add.w	lr, r4, #20
 8013184:	46a9      	mov	r9, r5
 8013186:	f04f 0c00 	mov.w	ip, #0
 801318a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801318e:	f8d9 3000 	ldr.w	r3, [r9]
 8013192:	fa1f fb87 	uxth.w	fp, r7
 8013196:	b29b      	uxth	r3, r3
 8013198:	fb0a 330b 	mla	r3, sl, fp, r3
 801319c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80131a0:	f8d9 7000 	ldr.w	r7, [r9]
 80131a4:	4463      	add	r3, ip
 80131a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80131aa:	fb0a c70b 	mla	r7, sl, fp, ip
 80131ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80131b2:	b29b      	uxth	r3, r3
 80131b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80131b8:	4572      	cmp	r2, lr
 80131ba:	f849 3b04 	str.w	r3, [r9], #4
 80131be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80131c2:	d8e2      	bhi.n	801318a <__multiply+0xb2>
 80131c4:	9b01      	ldr	r3, [sp, #4]
 80131c6:	f845 c003 	str.w	ip, [r5, r3]
 80131ca:	9b03      	ldr	r3, [sp, #12]
 80131cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80131d0:	3104      	adds	r1, #4
 80131d2:	f1b9 0f00 	cmp.w	r9, #0
 80131d6:	d021      	beq.n	801321c <__multiply+0x144>
 80131d8:	682b      	ldr	r3, [r5, #0]
 80131da:	f104 0c14 	add.w	ip, r4, #20
 80131de:	46ae      	mov	lr, r5
 80131e0:	f04f 0a00 	mov.w	sl, #0
 80131e4:	f8bc b000 	ldrh.w	fp, [ip]
 80131e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80131ec:	fb09 770b 	mla	r7, r9, fp, r7
 80131f0:	4457      	add	r7, sl
 80131f2:	b29b      	uxth	r3, r3
 80131f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80131f8:	f84e 3b04 	str.w	r3, [lr], #4
 80131fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013200:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013204:	f8be 3000 	ldrh.w	r3, [lr]
 8013208:	fb09 330a 	mla	r3, r9, sl, r3
 801320c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013210:	4562      	cmp	r2, ip
 8013212:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013216:	d8e5      	bhi.n	80131e4 <__multiply+0x10c>
 8013218:	9f01      	ldr	r7, [sp, #4]
 801321a:	51eb      	str	r3, [r5, r7]
 801321c:	3504      	adds	r5, #4
 801321e:	e799      	b.n	8013154 <__multiply+0x7c>
 8013220:	3e01      	subs	r6, #1
 8013222:	e79b      	b.n	801315c <__multiply+0x84>
 8013224:	08017173 	.word	0x08017173
 8013228:	08017184 	.word	0x08017184

0801322c <__pow5mult>:
 801322c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013230:	4615      	mov	r5, r2
 8013232:	f012 0203 	ands.w	r2, r2, #3
 8013236:	4607      	mov	r7, r0
 8013238:	460e      	mov	r6, r1
 801323a:	d007      	beq.n	801324c <__pow5mult+0x20>
 801323c:	4c25      	ldr	r4, [pc, #148]	@ (80132d4 <__pow5mult+0xa8>)
 801323e:	3a01      	subs	r2, #1
 8013240:	2300      	movs	r3, #0
 8013242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013246:	f7ff fe55 	bl	8012ef4 <__multadd>
 801324a:	4606      	mov	r6, r0
 801324c:	10ad      	asrs	r5, r5, #2
 801324e:	d03d      	beq.n	80132cc <__pow5mult+0xa0>
 8013250:	69fc      	ldr	r4, [r7, #28]
 8013252:	b97c      	cbnz	r4, 8013274 <__pow5mult+0x48>
 8013254:	2010      	movs	r0, #16
 8013256:	f7ff fd35 	bl	8012cc4 <malloc>
 801325a:	4602      	mov	r2, r0
 801325c:	61f8      	str	r0, [r7, #28]
 801325e:	b928      	cbnz	r0, 801326c <__pow5mult+0x40>
 8013260:	4b1d      	ldr	r3, [pc, #116]	@ (80132d8 <__pow5mult+0xac>)
 8013262:	481e      	ldr	r0, [pc, #120]	@ (80132dc <__pow5mult+0xb0>)
 8013264:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013268:	f001 fede 	bl	8015028 <__assert_func>
 801326c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013270:	6004      	str	r4, [r0, #0]
 8013272:	60c4      	str	r4, [r0, #12]
 8013274:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801327c:	b94c      	cbnz	r4, 8013292 <__pow5mult+0x66>
 801327e:	f240 2171 	movw	r1, #625	@ 0x271
 8013282:	4638      	mov	r0, r7
 8013284:	f7ff ff12 	bl	80130ac <__i2b>
 8013288:	2300      	movs	r3, #0
 801328a:	f8c8 0008 	str.w	r0, [r8, #8]
 801328e:	4604      	mov	r4, r0
 8013290:	6003      	str	r3, [r0, #0]
 8013292:	f04f 0900 	mov.w	r9, #0
 8013296:	07eb      	lsls	r3, r5, #31
 8013298:	d50a      	bpl.n	80132b0 <__pow5mult+0x84>
 801329a:	4631      	mov	r1, r6
 801329c:	4622      	mov	r2, r4
 801329e:	4638      	mov	r0, r7
 80132a0:	f7ff ff1a 	bl	80130d8 <__multiply>
 80132a4:	4631      	mov	r1, r6
 80132a6:	4680      	mov	r8, r0
 80132a8:	4638      	mov	r0, r7
 80132aa:	f7ff fe01 	bl	8012eb0 <_Bfree>
 80132ae:	4646      	mov	r6, r8
 80132b0:	106d      	asrs	r5, r5, #1
 80132b2:	d00b      	beq.n	80132cc <__pow5mult+0xa0>
 80132b4:	6820      	ldr	r0, [r4, #0]
 80132b6:	b938      	cbnz	r0, 80132c8 <__pow5mult+0x9c>
 80132b8:	4622      	mov	r2, r4
 80132ba:	4621      	mov	r1, r4
 80132bc:	4638      	mov	r0, r7
 80132be:	f7ff ff0b 	bl	80130d8 <__multiply>
 80132c2:	6020      	str	r0, [r4, #0]
 80132c4:	f8c0 9000 	str.w	r9, [r0]
 80132c8:	4604      	mov	r4, r0
 80132ca:	e7e4      	b.n	8013296 <__pow5mult+0x6a>
 80132cc:	4630      	mov	r0, r6
 80132ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132d2:	bf00      	nop
 80132d4:	080171e0 	.word	0x080171e0
 80132d8:	08017104 	.word	0x08017104
 80132dc:	08017184 	.word	0x08017184

080132e0 <__lshift>:
 80132e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132e4:	460c      	mov	r4, r1
 80132e6:	6849      	ldr	r1, [r1, #4]
 80132e8:	6923      	ldr	r3, [r4, #16]
 80132ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80132ee:	68a3      	ldr	r3, [r4, #8]
 80132f0:	4607      	mov	r7, r0
 80132f2:	4691      	mov	r9, r2
 80132f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80132f8:	f108 0601 	add.w	r6, r8, #1
 80132fc:	42b3      	cmp	r3, r6
 80132fe:	db0b      	blt.n	8013318 <__lshift+0x38>
 8013300:	4638      	mov	r0, r7
 8013302:	f7ff fd95 	bl	8012e30 <_Balloc>
 8013306:	4605      	mov	r5, r0
 8013308:	b948      	cbnz	r0, 801331e <__lshift+0x3e>
 801330a:	4602      	mov	r2, r0
 801330c:	4b28      	ldr	r3, [pc, #160]	@ (80133b0 <__lshift+0xd0>)
 801330e:	4829      	ldr	r0, [pc, #164]	@ (80133b4 <__lshift+0xd4>)
 8013310:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013314:	f001 fe88 	bl	8015028 <__assert_func>
 8013318:	3101      	adds	r1, #1
 801331a:	005b      	lsls	r3, r3, #1
 801331c:	e7ee      	b.n	80132fc <__lshift+0x1c>
 801331e:	2300      	movs	r3, #0
 8013320:	f100 0114 	add.w	r1, r0, #20
 8013324:	f100 0210 	add.w	r2, r0, #16
 8013328:	4618      	mov	r0, r3
 801332a:	4553      	cmp	r3, sl
 801332c:	db33      	blt.n	8013396 <__lshift+0xb6>
 801332e:	6920      	ldr	r0, [r4, #16]
 8013330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013334:	f104 0314 	add.w	r3, r4, #20
 8013338:	f019 091f 	ands.w	r9, r9, #31
 801333c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013340:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013344:	d02b      	beq.n	801339e <__lshift+0xbe>
 8013346:	f1c9 0e20 	rsb	lr, r9, #32
 801334a:	468a      	mov	sl, r1
 801334c:	2200      	movs	r2, #0
 801334e:	6818      	ldr	r0, [r3, #0]
 8013350:	fa00 f009 	lsl.w	r0, r0, r9
 8013354:	4310      	orrs	r0, r2
 8013356:	f84a 0b04 	str.w	r0, [sl], #4
 801335a:	f853 2b04 	ldr.w	r2, [r3], #4
 801335e:	459c      	cmp	ip, r3
 8013360:	fa22 f20e 	lsr.w	r2, r2, lr
 8013364:	d8f3      	bhi.n	801334e <__lshift+0x6e>
 8013366:	ebac 0304 	sub.w	r3, ip, r4
 801336a:	3b15      	subs	r3, #21
 801336c:	f023 0303 	bic.w	r3, r3, #3
 8013370:	3304      	adds	r3, #4
 8013372:	f104 0015 	add.w	r0, r4, #21
 8013376:	4584      	cmp	ip, r0
 8013378:	bf38      	it	cc
 801337a:	2304      	movcc	r3, #4
 801337c:	50ca      	str	r2, [r1, r3]
 801337e:	b10a      	cbz	r2, 8013384 <__lshift+0xa4>
 8013380:	f108 0602 	add.w	r6, r8, #2
 8013384:	3e01      	subs	r6, #1
 8013386:	4638      	mov	r0, r7
 8013388:	612e      	str	r6, [r5, #16]
 801338a:	4621      	mov	r1, r4
 801338c:	f7ff fd90 	bl	8012eb0 <_Bfree>
 8013390:	4628      	mov	r0, r5
 8013392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013396:	f842 0f04 	str.w	r0, [r2, #4]!
 801339a:	3301      	adds	r3, #1
 801339c:	e7c5      	b.n	801332a <__lshift+0x4a>
 801339e:	3904      	subs	r1, #4
 80133a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80133a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80133a8:	459c      	cmp	ip, r3
 80133aa:	d8f9      	bhi.n	80133a0 <__lshift+0xc0>
 80133ac:	e7ea      	b.n	8013384 <__lshift+0xa4>
 80133ae:	bf00      	nop
 80133b0:	08017173 	.word	0x08017173
 80133b4:	08017184 	.word	0x08017184

080133b8 <__mcmp>:
 80133b8:	690a      	ldr	r2, [r1, #16]
 80133ba:	4603      	mov	r3, r0
 80133bc:	6900      	ldr	r0, [r0, #16]
 80133be:	1a80      	subs	r0, r0, r2
 80133c0:	b530      	push	{r4, r5, lr}
 80133c2:	d10e      	bne.n	80133e2 <__mcmp+0x2a>
 80133c4:	3314      	adds	r3, #20
 80133c6:	3114      	adds	r1, #20
 80133c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80133cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80133d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80133d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80133d8:	4295      	cmp	r5, r2
 80133da:	d003      	beq.n	80133e4 <__mcmp+0x2c>
 80133dc:	d205      	bcs.n	80133ea <__mcmp+0x32>
 80133de:	f04f 30ff 	mov.w	r0, #4294967295
 80133e2:	bd30      	pop	{r4, r5, pc}
 80133e4:	42a3      	cmp	r3, r4
 80133e6:	d3f3      	bcc.n	80133d0 <__mcmp+0x18>
 80133e8:	e7fb      	b.n	80133e2 <__mcmp+0x2a>
 80133ea:	2001      	movs	r0, #1
 80133ec:	e7f9      	b.n	80133e2 <__mcmp+0x2a>
	...

080133f0 <__mdiff>:
 80133f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133f4:	4689      	mov	r9, r1
 80133f6:	4606      	mov	r6, r0
 80133f8:	4611      	mov	r1, r2
 80133fa:	4648      	mov	r0, r9
 80133fc:	4614      	mov	r4, r2
 80133fe:	f7ff ffdb 	bl	80133b8 <__mcmp>
 8013402:	1e05      	subs	r5, r0, #0
 8013404:	d112      	bne.n	801342c <__mdiff+0x3c>
 8013406:	4629      	mov	r1, r5
 8013408:	4630      	mov	r0, r6
 801340a:	f7ff fd11 	bl	8012e30 <_Balloc>
 801340e:	4602      	mov	r2, r0
 8013410:	b928      	cbnz	r0, 801341e <__mdiff+0x2e>
 8013412:	4b3f      	ldr	r3, [pc, #252]	@ (8013510 <__mdiff+0x120>)
 8013414:	f240 2137 	movw	r1, #567	@ 0x237
 8013418:	483e      	ldr	r0, [pc, #248]	@ (8013514 <__mdiff+0x124>)
 801341a:	f001 fe05 	bl	8015028 <__assert_func>
 801341e:	2301      	movs	r3, #1
 8013420:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013424:	4610      	mov	r0, r2
 8013426:	b003      	add	sp, #12
 8013428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801342c:	bfbc      	itt	lt
 801342e:	464b      	movlt	r3, r9
 8013430:	46a1      	movlt	r9, r4
 8013432:	4630      	mov	r0, r6
 8013434:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013438:	bfba      	itte	lt
 801343a:	461c      	movlt	r4, r3
 801343c:	2501      	movlt	r5, #1
 801343e:	2500      	movge	r5, #0
 8013440:	f7ff fcf6 	bl	8012e30 <_Balloc>
 8013444:	4602      	mov	r2, r0
 8013446:	b918      	cbnz	r0, 8013450 <__mdiff+0x60>
 8013448:	4b31      	ldr	r3, [pc, #196]	@ (8013510 <__mdiff+0x120>)
 801344a:	f240 2145 	movw	r1, #581	@ 0x245
 801344e:	e7e3      	b.n	8013418 <__mdiff+0x28>
 8013450:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013454:	6926      	ldr	r6, [r4, #16]
 8013456:	60c5      	str	r5, [r0, #12]
 8013458:	f109 0310 	add.w	r3, r9, #16
 801345c:	f109 0514 	add.w	r5, r9, #20
 8013460:	f104 0e14 	add.w	lr, r4, #20
 8013464:	f100 0b14 	add.w	fp, r0, #20
 8013468:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801346c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013470:	9301      	str	r3, [sp, #4]
 8013472:	46d9      	mov	r9, fp
 8013474:	f04f 0c00 	mov.w	ip, #0
 8013478:	9b01      	ldr	r3, [sp, #4]
 801347a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801347e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013482:	9301      	str	r3, [sp, #4]
 8013484:	fa1f f38a 	uxth.w	r3, sl
 8013488:	4619      	mov	r1, r3
 801348a:	b283      	uxth	r3, r0
 801348c:	1acb      	subs	r3, r1, r3
 801348e:	0c00      	lsrs	r0, r0, #16
 8013490:	4463      	add	r3, ip
 8013492:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013496:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801349a:	b29b      	uxth	r3, r3
 801349c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80134a0:	4576      	cmp	r6, lr
 80134a2:	f849 3b04 	str.w	r3, [r9], #4
 80134a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80134aa:	d8e5      	bhi.n	8013478 <__mdiff+0x88>
 80134ac:	1b33      	subs	r3, r6, r4
 80134ae:	3b15      	subs	r3, #21
 80134b0:	f023 0303 	bic.w	r3, r3, #3
 80134b4:	3415      	adds	r4, #21
 80134b6:	3304      	adds	r3, #4
 80134b8:	42a6      	cmp	r6, r4
 80134ba:	bf38      	it	cc
 80134bc:	2304      	movcc	r3, #4
 80134be:	441d      	add	r5, r3
 80134c0:	445b      	add	r3, fp
 80134c2:	461e      	mov	r6, r3
 80134c4:	462c      	mov	r4, r5
 80134c6:	4544      	cmp	r4, r8
 80134c8:	d30e      	bcc.n	80134e8 <__mdiff+0xf8>
 80134ca:	f108 0103 	add.w	r1, r8, #3
 80134ce:	1b49      	subs	r1, r1, r5
 80134d0:	f021 0103 	bic.w	r1, r1, #3
 80134d4:	3d03      	subs	r5, #3
 80134d6:	45a8      	cmp	r8, r5
 80134d8:	bf38      	it	cc
 80134da:	2100      	movcc	r1, #0
 80134dc:	440b      	add	r3, r1
 80134de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80134e2:	b191      	cbz	r1, 801350a <__mdiff+0x11a>
 80134e4:	6117      	str	r7, [r2, #16]
 80134e6:	e79d      	b.n	8013424 <__mdiff+0x34>
 80134e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80134ec:	46e6      	mov	lr, ip
 80134ee:	0c08      	lsrs	r0, r1, #16
 80134f0:	fa1c fc81 	uxtah	ip, ip, r1
 80134f4:	4471      	add	r1, lr
 80134f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80134fa:	b289      	uxth	r1, r1
 80134fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013500:	f846 1b04 	str.w	r1, [r6], #4
 8013504:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013508:	e7dd      	b.n	80134c6 <__mdiff+0xd6>
 801350a:	3f01      	subs	r7, #1
 801350c:	e7e7      	b.n	80134de <__mdiff+0xee>
 801350e:	bf00      	nop
 8013510:	08017173 	.word	0x08017173
 8013514:	08017184 	.word	0x08017184

08013518 <__ulp>:
 8013518:	b082      	sub	sp, #8
 801351a:	ed8d 0b00 	vstr	d0, [sp]
 801351e:	9a01      	ldr	r2, [sp, #4]
 8013520:	4b0f      	ldr	r3, [pc, #60]	@ (8013560 <__ulp+0x48>)
 8013522:	4013      	ands	r3, r2
 8013524:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013528:	2b00      	cmp	r3, #0
 801352a:	dc08      	bgt.n	801353e <__ulp+0x26>
 801352c:	425b      	negs	r3, r3
 801352e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8013532:	ea4f 5223 	mov.w	r2, r3, asr #20
 8013536:	da04      	bge.n	8013542 <__ulp+0x2a>
 8013538:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801353c:	4113      	asrs	r3, r2
 801353e:	2200      	movs	r2, #0
 8013540:	e008      	b.n	8013554 <__ulp+0x3c>
 8013542:	f1a2 0314 	sub.w	r3, r2, #20
 8013546:	2b1e      	cmp	r3, #30
 8013548:	bfda      	itte	le
 801354a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801354e:	40da      	lsrle	r2, r3
 8013550:	2201      	movgt	r2, #1
 8013552:	2300      	movs	r3, #0
 8013554:	4619      	mov	r1, r3
 8013556:	4610      	mov	r0, r2
 8013558:	ec41 0b10 	vmov	d0, r0, r1
 801355c:	b002      	add	sp, #8
 801355e:	4770      	bx	lr
 8013560:	7ff00000 	.word	0x7ff00000

08013564 <__b2d>:
 8013564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013568:	6906      	ldr	r6, [r0, #16]
 801356a:	f100 0814 	add.w	r8, r0, #20
 801356e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8013572:	1f37      	subs	r7, r6, #4
 8013574:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013578:	4610      	mov	r0, r2
 801357a:	f7ff fd4b 	bl	8013014 <__hi0bits>
 801357e:	f1c0 0320 	rsb	r3, r0, #32
 8013582:	280a      	cmp	r0, #10
 8013584:	600b      	str	r3, [r1, #0]
 8013586:	491b      	ldr	r1, [pc, #108]	@ (80135f4 <__b2d+0x90>)
 8013588:	dc15      	bgt.n	80135b6 <__b2d+0x52>
 801358a:	f1c0 0c0b 	rsb	ip, r0, #11
 801358e:	fa22 f30c 	lsr.w	r3, r2, ip
 8013592:	45b8      	cmp	r8, r7
 8013594:	ea43 0501 	orr.w	r5, r3, r1
 8013598:	bf34      	ite	cc
 801359a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801359e:	2300      	movcs	r3, #0
 80135a0:	3015      	adds	r0, #21
 80135a2:	fa02 f000 	lsl.w	r0, r2, r0
 80135a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80135aa:	4303      	orrs	r3, r0
 80135ac:	461c      	mov	r4, r3
 80135ae:	ec45 4b10 	vmov	d0, r4, r5
 80135b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135b6:	45b8      	cmp	r8, r7
 80135b8:	bf3a      	itte	cc
 80135ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80135be:	f1a6 0708 	subcc.w	r7, r6, #8
 80135c2:	2300      	movcs	r3, #0
 80135c4:	380b      	subs	r0, #11
 80135c6:	d012      	beq.n	80135ee <__b2d+0x8a>
 80135c8:	f1c0 0120 	rsb	r1, r0, #32
 80135cc:	fa23 f401 	lsr.w	r4, r3, r1
 80135d0:	4082      	lsls	r2, r0
 80135d2:	4322      	orrs	r2, r4
 80135d4:	4547      	cmp	r7, r8
 80135d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80135da:	bf8c      	ite	hi
 80135dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80135e0:	2200      	movls	r2, #0
 80135e2:	4083      	lsls	r3, r0
 80135e4:	40ca      	lsrs	r2, r1
 80135e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80135ea:	4313      	orrs	r3, r2
 80135ec:	e7de      	b.n	80135ac <__b2d+0x48>
 80135ee:	ea42 0501 	orr.w	r5, r2, r1
 80135f2:	e7db      	b.n	80135ac <__b2d+0x48>
 80135f4:	3ff00000 	.word	0x3ff00000

080135f8 <__d2b>:
 80135f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80135fc:	460f      	mov	r7, r1
 80135fe:	2101      	movs	r1, #1
 8013600:	ec59 8b10 	vmov	r8, r9, d0
 8013604:	4616      	mov	r6, r2
 8013606:	f7ff fc13 	bl	8012e30 <_Balloc>
 801360a:	4604      	mov	r4, r0
 801360c:	b930      	cbnz	r0, 801361c <__d2b+0x24>
 801360e:	4602      	mov	r2, r0
 8013610:	4b23      	ldr	r3, [pc, #140]	@ (80136a0 <__d2b+0xa8>)
 8013612:	4824      	ldr	r0, [pc, #144]	@ (80136a4 <__d2b+0xac>)
 8013614:	f240 310f 	movw	r1, #783	@ 0x30f
 8013618:	f001 fd06 	bl	8015028 <__assert_func>
 801361c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013624:	b10d      	cbz	r5, 801362a <__d2b+0x32>
 8013626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801362a:	9301      	str	r3, [sp, #4]
 801362c:	f1b8 0300 	subs.w	r3, r8, #0
 8013630:	d023      	beq.n	801367a <__d2b+0x82>
 8013632:	4668      	mov	r0, sp
 8013634:	9300      	str	r3, [sp, #0]
 8013636:	f7ff fd0c 	bl	8013052 <__lo0bits>
 801363a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801363e:	b1d0      	cbz	r0, 8013676 <__d2b+0x7e>
 8013640:	f1c0 0320 	rsb	r3, r0, #32
 8013644:	fa02 f303 	lsl.w	r3, r2, r3
 8013648:	430b      	orrs	r3, r1
 801364a:	40c2      	lsrs	r2, r0
 801364c:	6163      	str	r3, [r4, #20]
 801364e:	9201      	str	r2, [sp, #4]
 8013650:	9b01      	ldr	r3, [sp, #4]
 8013652:	61a3      	str	r3, [r4, #24]
 8013654:	2b00      	cmp	r3, #0
 8013656:	bf0c      	ite	eq
 8013658:	2201      	moveq	r2, #1
 801365a:	2202      	movne	r2, #2
 801365c:	6122      	str	r2, [r4, #16]
 801365e:	b1a5      	cbz	r5, 801368a <__d2b+0x92>
 8013660:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013664:	4405      	add	r5, r0
 8013666:	603d      	str	r5, [r7, #0]
 8013668:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801366c:	6030      	str	r0, [r6, #0]
 801366e:	4620      	mov	r0, r4
 8013670:	b003      	add	sp, #12
 8013672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013676:	6161      	str	r1, [r4, #20]
 8013678:	e7ea      	b.n	8013650 <__d2b+0x58>
 801367a:	a801      	add	r0, sp, #4
 801367c:	f7ff fce9 	bl	8013052 <__lo0bits>
 8013680:	9b01      	ldr	r3, [sp, #4]
 8013682:	6163      	str	r3, [r4, #20]
 8013684:	3020      	adds	r0, #32
 8013686:	2201      	movs	r2, #1
 8013688:	e7e8      	b.n	801365c <__d2b+0x64>
 801368a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801368e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013692:	6038      	str	r0, [r7, #0]
 8013694:	6918      	ldr	r0, [r3, #16]
 8013696:	f7ff fcbd 	bl	8013014 <__hi0bits>
 801369a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801369e:	e7e5      	b.n	801366c <__d2b+0x74>
 80136a0:	08017173 	.word	0x08017173
 80136a4:	08017184 	.word	0x08017184

080136a8 <__ratio>:
 80136a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136ac:	b085      	sub	sp, #20
 80136ae:	e9cd 1000 	strd	r1, r0, [sp]
 80136b2:	a902      	add	r1, sp, #8
 80136b4:	f7ff ff56 	bl	8013564 <__b2d>
 80136b8:	9800      	ldr	r0, [sp, #0]
 80136ba:	a903      	add	r1, sp, #12
 80136bc:	ec55 4b10 	vmov	r4, r5, d0
 80136c0:	f7ff ff50 	bl	8013564 <__b2d>
 80136c4:	9b01      	ldr	r3, [sp, #4]
 80136c6:	6919      	ldr	r1, [r3, #16]
 80136c8:	9b00      	ldr	r3, [sp, #0]
 80136ca:	691b      	ldr	r3, [r3, #16]
 80136cc:	1ac9      	subs	r1, r1, r3
 80136ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80136d2:	1a9b      	subs	r3, r3, r2
 80136d4:	ec5b ab10 	vmov	sl, fp, d0
 80136d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80136dc:	2b00      	cmp	r3, #0
 80136de:	bfce      	itee	gt
 80136e0:	462a      	movgt	r2, r5
 80136e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80136e6:	465a      	movle	r2, fp
 80136e8:	462f      	mov	r7, r5
 80136ea:	46d9      	mov	r9, fp
 80136ec:	bfcc      	ite	gt
 80136ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80136f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80136f6:	464b      	mov	r3, r9
 80136f8:	4652      	mov	r2, sl
 80136fa:	4620      	mov	r0, r4
 80136fc:	4639      	mov	r1, r7
 80136fe:	f7ed f8cd 	bl	800089c <__aeabi_ddiv>
 8013702:	ec41 0b10 	vmov	d0, r0, r1
 8013706:	b005      	add	sp, #20
 8013708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801370c <__copybits>:
 801370c:	3901      	subs	r1, #1
 801370e:	b570      	push	{r4, r5, r6, lr}
 8013710:	1149      	asrs	r1, r1, #5
 8013712:	6914      	ldr	r4, [r2, #16]
 8013714:	3101      	adds	r1, #1
 8013716:	f102 0314 	add.w	r3, r2, #20
 801371a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801371e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013722:	1f05      	subs	r5, r0, #4
 8013724:	42a3      	cmp	r3, r4
 8013726:	d30c      	bcc.n	8013742 <__copybits+0x36>
 8013728:	1aa3      	subs	r3, r4, r2
 801372a:	3b11      	subs	r3, #17
 801372c:	f023 0303 	bic.w	r3, r3, #3
 8013730:	3211      	adds	r2, #17
 8013732:	42a2      	cmp	r2, r4
 8013734:	bf88      	it	hi
 8013736:	2300      	movhi	r3, #0
 8013738:	4418      	add	r0, r3
 801373a:	2300      	movs	r3, #0
 801373c:	4288      	cmp	r0, r1
 801373e:	d305      	bcc.n	801374c <__copybits+0x40>
 8013740:	bd70      	pop	{r4, r5, r6, pc}
 8013742:	f853 6b04 	ldr.w	r6, [r3], #4
 8013746:	f845 6f04 	str.w	r6, [r5, #4]!
 801374a:	e7eb      	b.n	8013724 <__copybits+0x18>
 801374c:	f840 3b04 	str.w	r3, [r0], #4
 8013750:	e7f4      	b.n	801373c <__copybits+0x30>

08013752 <__any_on>:
 8013752:	f100 0214 	add.w	r2, r0, #20
 8013756:	6900      	ldr	r0, [r0, #16]
 8013758:	114b      	asrs	r3, r1, #5
 801375a:	4298      	cmp	r0, r3
 801375c:	b510      	push	{r4, lr}
 801375e:	db11      	blt.n	8013784 <__any_on+0x32>
 8013760:	dd0a      	ble.n	8013778 <__any_on+0x26>
 8013762:	f011 011f 	ands.w	r1, r1, #31
 8013766:	d007      	beq.n	8013778 <__any_on+0x26>
 8013768:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801376c:	fa24 f001 	lsr.w	r0, r4, r1
 8013770:	fa00 f101 	lsl.w	r1, r0, r1
 8013774:	428c      	cmp	r4, r1
 8013776:	d10b      	bne.n	8013790 <__any_on+0x3e>
 8013778:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801377c:	4293      	cmp	r3, r2
 801377e:	d803      	bhi.n	8013788 <__any_on+0x36>
 8013780:	2000      	movs	r0, #0
 8013782:	bd10      	pop	{r4, pc}
 8013784:	4603      	mov	r3, r0
 8013786:	e7f7      	b.n	8013778 <__any_on+0x26>
 8013788:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801378c:	2900      	cmp	r1, #0
 801378e:	d0f5      	beq.n	801377c <__any_on+0x2a>
 8013790:	2001      	movs	r0, #1
 8013792:	e7f6      	b.n	8013782 <__any_on+0x30>

08013794 <sulp>:
 8013794:	b570      	push	{r4, r5, r6, lr}
 8013796:	4604      	mov	r4, r0
 8013798:	460d      	mov	r5, r1
 801379a:	ec45 4b10 	vmov	d0, r4, r5
 801379e:	4616      	mov	r6, r2
 80137a0:	f7ff feba 	bl	8013518 <__ulp>
 80137a4:	ec51 0b10 	vmov	r0, r1, d0
 80137a8:	b17e      	cbz	r6, 80137ca <sulp+0x36>
 80137aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80137ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	dd09      	ble.n	80137ca <sulp+0x36>
 80137b6:	051b      	lsls	r3, r3, #20
 80137b8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80137bc:	2400      	movs	r4, #0
 80137be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80137c2:	4622      	mov	r2, r4
 80137c4:	462b      	mov	r3, r5
 80137c6:	f7ec ff3f 	bl	8000648 <__aeabi_dmul>
 80137ca:	ec41 0b10 	vmov	d0, r0, r1
 80137ce:	bd70      	pop	{r4, r5, r6, pc}

080137d0 <_strtod_l>:
 80137d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137d4:	b09f      	sub	sp, #124	@ 0x7c
 80137d6:	460c      	mov	r4, r1
 80137d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80137da:	2200      	movs	r2, #0
 80137dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80137de:	9005      	str	r0, [sp, #20]
 80137e0:	f04f 0a00 	mov.w	sl, #0
 80137e4:	f04f 0b00 	mov.w	fp, #0
 80137e8:	460a      	mov	r2, r1
 80137ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80137ec:	7811      	ldrb	r1, [r2, #0]
 80137ee:	292b      	cmp	r1, #43	@ 0x2b
 80137f0:	d04a      	beq.n	8013888 <_strtod_l+0xb8>
 80137f2:	d838      	bhi.n	8013866 <_strtod_l+0x96>
 80137f4:	290d      	cmp	r1, #13
 80137f6:	d832      	bhi.n	801385e <_strtod_l+0x8e>
 80137f8:	2908      	cmp	r1, #8
 80137fa:	d832      	bhi.n	8013862 <_strtod_l+0x92>
 80137fc:	2900      	cmp	r1, #0
 80137fe:	d03b      	beq.n	8013878 <_strtod_l+0xa8>
 8013800:	2200      	movs	r2, #0
 8013802:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013804:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8013806:	782a      	ldrb	r2, [r5, #0]
 8013808:	2a30      	cmp	r2, #48	@ 0x30
 801380a:	f040 80b3 	bne.w	8013974 <_strtod_l+0x1a4>
 801380e:	786a      	ldrb	r2, [r5, #1]
 8013810:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8013814:	2a58      	cmp	r2, #88	@ 0x58
 8013816:	d16e      	bne.n	80138f6 <_strtod_l+0x126>
 8013818:	9302      	str	r3, [sp, #8]
 801381a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801381c:	9301      	str	r3, [sp, #4]
 801381e:	ab1a      	add	r3, sp, #104	@ 0x68
 8013820:	9300      	str	r3, [sp, #0]
 8013822:	4a8e      	ldr	r2, [pc, #568]	@ (8013a5c <_strtod_l+0x28c>)
 8013824:	9805      	ldr	r0, [sp, #20]
 8013826:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013828:	a919      	add	r1, sp, #100	@ 0x64
 801382a:	f001 fc97 	bl	801515c <__gethex>
 801382e:	f010 060f 	ands.w	r6, r0, #15
 8013832:	4604      	mov	r4, r0
 8013834:	d005      	beq.n	8013842 <_strtod_l+0x72>
 8013836:	2e06      	cmp	r6, #6
 8013838:	d128      	bne.n	801388c <_strtod_l+0xbc>
 801383a:	3501      	adds	r5, #1
 801383c:	2300      	movs	r3, #0
 801383e:	9519      	str	r5, [sp, #100]	@ 0x64
 8013840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013842:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013844:	2b00      	cmp	r3, #0
 8013846:	f040 858e 	bne.w	8014366 <_strtod_l+0xb96>
 801384a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801384c:	b1cb      	cbz	r3, 8013882 <_strtod_l+0xb2>
 801384e:	4652      	mov	r2, sl
 8013850:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8013854:	ec43 2b10 	vmov	d0, r2, r3
 8013858:	b01f      	add	sp, #124	@ 0x7c
 801385a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801385e:	2920      	cmp	r1, #32
 8013860:	d1ce      	bne.n	8013800 <_strtod_l+0x30>
 8013862:	3201      	adds	r2, #1
 8013864:	e7c1      	b.n	80137ea <_strtod_l+0x1a>
 8013866:	292d      	cmp	r1, #45	@ 0x2d
 8013868:	d1ca      	bne.n	8013800 <_strtod_l+0x30>
 801386a:	2101      	movs	r1, #1
 801386c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801386e:	1c51      	adds	r1, r2, #1
 8013870:	9119      	str	r1, [sp, #100]	@ 0x64
 8013872:	7852      	ldrb	r2, [r2, #1]
 8013874:	2a00      	cmp	r2, #0
 8013876:	d1c5      	bne.n	8013804 <_strtod_l+0x34>
 8013878:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801387a:	9419      	str	r4, [sp, #100]	@ 0x64
 801387c:	2b00      	cmp	r3, #0
 801387e:	f040 8570 	bne.w	8014362 <_strtod_l+0xb92>
 8013882:	4652      	mov	r2, sl
 8013884:	465b      	mov	r3, fp
 8013886:	e7e5      	b.n	8013854 <_strtod_l+0x84>
 8013888:	2100      	movs	r1, #0
 801388a:	e7ef      	b.n	801386c <_strtod_l+0x9c>
 801388c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801388e:	b13a      	cbz	r2, 80138a0 <_strtod_l+0xd0>
 8013890:	2135      	movs	r1, #53	@ 0x35
 8013892:	a81c      	add	r0, sp, #112	@ 0x70
 8013894:	f7ff ff3a 	bl	801370c <__copybits>
 8013898:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801389a:	9805      	ldr	r0, [sp, #20]
 801389c:	f7ff fb08 	bl	8012eb0 <_Bfree>
 80138a0:	3e01      	subs	r6, #1
 80138a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80138a4:	2e04      	cmp	r6, #4
 80138a6:	d806      	bhi.n	80138b6 <_strtod_l+0xe6>
 80138a8:	e8df f006 	tbb	[pc, r6]
 80138ac:	201d0314 	.word	0x201d0314
 80138b0:	14          	.byte	0x14
 80138b1:	00          	.byte	0x00
 80138b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80138b6:	05e1      	lsls	r1, r4, #23
 80138b8:	bf48      	it	mi
 80138ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80138be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80138c2:	0d1b      	lsrs	r3, r3, #20
 80138c4:	051b      	lsls	r3, r3, #20
 80138c6:	2b00      	cmp	r3, #0
 80138c8:	d1bb      	bne.n	8013842 <_strtod_l+0x72>
 80138ca:	f7fe fb21 	bl	8011f10 <__errno>
 80138ce:	2322      	movs	r3, #34	@ 0x22
 80138d0:	6003      	str	r3, [r0, #0]
 80138d2:	e7b6      	b.n	8013842 <_strtod_l+0x72>
 80138d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80138d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80138dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80138e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80138e4:	e7e7      	b.n	80138b6 <_strtod_l+0xe6>
 80138e6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8013a64 <_strtod_l+0x294>
 80138ea:	e7e4      	b.n	80138b6 <_strtod_l+0xe6>
 80138ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80138f0:	f04f 3aff 	mov.w	sl, #4294967295
 80138f4:	e7df      	b.n	80138b6 <_strtod_l+0xe6>
 80138f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80138f8:	1c5a      	adds	r2, r3, #1
 80138fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80138fc:	785b      	ldrb	r3, [r3, #1]
 80138fe:	2b30      	cmp	r3, #48	@ 0x30
 8013900:	d0f9      	beq.n	80138f6 <_strtod_l+0x126>
 8013902:	2b00      	cmp	r3, #0
 8013904:	d09d      	beq.n	8013842 <_strtod_l+0x72>
 8013906:	2301      	movs	r3, #1
 8013908:	9309      	str	r3, [sp, #36]	@ 0x24
 801390a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801390c:	930c      	str	r3, [sp, #48]	@ 0x30
 801390e:	2300      	movs	r3, #0
 8013910:	9308      	str	r3, [sp, #32]
 8013912:	930a      	str	r3, [sp, #40]	@ 0x28
 8013914:	461f      	mov	r7, r3
 8013916:	220a      	movs	r2, #10
 8013918:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801391a:	7805      	ldrb	r5, [r0, #0]
 801391c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013920:	b2d9      	uxtb	r1, r3
 8013922:	2909      	cmp	r1, #9
 8013924:	d928      	bls.n	8013978 <_strtod_l+0x1a8>
 8013926:	494e      	ldr	r1, [pc, #312]	@ (8013a60 <_strtod_l+0x290>)
 8013928:	2201      	movs	r2, #1
 801392a:	f7fe fa94 	bl	8011e56 <strncmp>
 801392e:	2800      	cmp	r0, #0
 8013930:	d032      	beq.n	8013998 <_strtod_l+0x1c8>
 8013932:	2000      	movs	r0, #0
 8013934:	462a      	mov	r2, r5
 8013936:	4681      	mov	r9, r0
 8013938:	463d      	mov	r5, r7
 801393a:	4603      	mov	r3, r0
 801393c:	2a65      	cmp	r2, #101	@ 0x65
 801393e:	d001      	beq.n	8013944 <_strtod_l+0x174>
 8013940:	2a45      	cmp	r2, #69	@ 0x45
 8013942:	d114      	bne.n	801396e <_strtod_l+0x19e>
 8013944:	b91d      	cbnz	r5, 801394e <_strtod_l+0x17e>
 8013946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013948:	4302      	orrs	r2, r0
 801394a:	d095      	beq.n	8013878 <_strtod_l+0xa8>
 801394c:	2500      	movs	r5, #0
 801394e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013950:	1c62      	adds	r2, r4, #1
 8013952:	9219      	str	r2, [sp, #100]	@ 0x64
 8013954:	7862      	ldrb	r2, [r4, #1]
 8013956:	2a2b      	cmp	r2, #43	@ 0x2b
 8013958:	d077      	beq.n	8013a4a <_strtod_l+0x27a>
 801395a:	2a2d      	cmp	r2, #45	@ 0x2d
 801395c:	d07b      	beq.n	8013a56 <_strtod_l+0x286>
 801395e:	f04f 0c00 	mov.w	ip, #0
 8013962:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013966:	2909      	cmp	r1, #9
 8013968:	f240 8082 	bls.w	8013a70 <_strtod_l+0x2a0>
 801396c:	9419      	str	r4, [sp, #100]	@ 0x64
 801396e:	f04f 0800 	mov.w	r8, #0
 8013972:	e0a2      	b.n	8013aba <_strtod_l+0x2ea>
 8013974:	2300      	movs	r3, #0
 8013976:	e7c7      	b.n	8013908 <_strtod_l+0x138>
 8013978:	2f08      	cmp	r7, #8
 801397a:	bfd5      	itete	le
 801397c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801397e:	9908      	ldrgt	r1, [sp, #32]
 8013980:	fb02 3301 	mlale	r3, r2, r1, r3
 8013984:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013988:	f100 0001 	add.w	r0, r0, #1
 801398c:	bfd4      	ite	le
 801398e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8013990:	9308      	strgt	r3, [sp, #32]
 8013992:	3701      	adds	r7, #1
 8013994:	9019      	str	r0, [sp, #100]	@ 0x64
 8013996:	e7bf      	b.n	8013918 <_strtod_l+0x148>
 8013998:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801399a:	1c5a      	adds	r2, r3, #1
 801399c:	9219      	str	r2, [sp, #100]	@ 0x64
 801399e:	785a      	ldrb	r2, [r3, #1]
 80139a0:	b37f      	cbz	r7, 8013a02 <_strtod_l+0x232>
 80139a2:	4681      	mov	r9, r0
 80139a4:	463d      	mov	r5, r7
 80139a6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80139aa:	2b09      	cmp	r3, #9
 80139ac:	d912      	bls.n	80139d4 <_strtod_l+0x204>
 80139ae:	2301      	movs	r3, #1
 80139b0:	e7c4      	b.n	801393c <_strtod_l+0x16c>
 80139b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80139b4:	1c5a      	adds	r2, r3, #1
 80139b6:	9219      	str	r2, [sp, #100]	@ 0x64
 80139b8:	785a      	ldrb	r2, [r3, #1]
 80139ba:	3001      	adds	r0, #1
 80139bc:	2a30      	cmp	r2, #48	@ 0x30
 80139be:	d0f8      	beq.n	80139b2 <_strtod_l+0x1e2>
 80139c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80139c4:	2b08      	cmp	r3, #8
 80139c6:	f200 84d3 	bhi.w	8014370 <_strtod_l+0xba0>
 80139ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80139cc:	930c      	str	r3, [sp, #48]	@ 0x30
 80139ce:	4681      	mov	r9, r0
 80139d0:	2000      	movs	r0, #0
 80139d2:	4605      	mov	r5, r0
 80139d4:	3a30      	subs	r2, #48	@ 0x30
 80139d6:	f100 0301 	add.w	r3, r0, #1
 80139da:	d02a      	beq.n	8013a32 <_strtod_l+0x262>
 80139dc:	4499      	add	r9, r3
 80139de:	eb00 0c05 	add.w	ip, r0, r5
 80139e2:	462b      	mov	r3, r5
 80139e4:	210a      	movs	r1, #10
 80139e6:	4563      	cmp	r3, ip
 80139e8:	d10d      	bne.n	8013a06 <_strtod_l+0x236>
 80139ea:	1c69      	adds	r1, r5, #1
 80139ec:	4401      	add	r1, r0
 80139ee:	4428      	add	r0, r5
 80139f0:	2808      	cmp	r0, #8
 80139f2:	dc16      	bgt.n	8013a22 <_strtod_l+0x252>
 80139f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80139f6:	230a      	movs	r3, #10
 80139f8:	fb03 2300 	mla	r3, r3, r0, r2
 80139fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80139fe:	2300      	movs	r3, #0
 8013a00:	e018      	b.n	8013a34 <_strtod_l+0x264>
 8013a02:	4638      	mov	r0, r7
 8013a04:	e7da      	b.n	80139bc <_strtod_l+0x1ec>
 8013a06:	2b08      	cmp	r3, #8
 8013a08:	f103 0301 	add.w	r3, r3, #1
 8013a0c:	dc03      	bgt.n	8013a16 <_strtod_l+0x246>
 8013a0e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013a10:	434e      	muls	r6, r1
 8013a12:	960a      	str	r6, [sp, #40]	@ 0x28
 8013a14:	e7e7      	b.n	80139e6 <_strtod_l+0x216>
 8013a16:	2b10      	cmp	r3, #16
 8013a18:	bfde      	ittt	le
 8013a1a:	9e08      	ldrle	r6, [sp, #32]
 8013a1c:	434e      	mulle	r6, r1
 8013a1e:	9608      	strle	r6, [sp, #32]
 8013a20:	e7e1      	b.n	80139e6 <_strtod_l+0x216>
 8013a22:	280f      	cmp	r0, #15
 8013a24:	dceb      	bgt.n	80139fe <_strtod_l+0x22e>
 8013a26:	9808      	ldr	r0, [sp, #32]
 8013a28:	230a      	movs	r3, #10
 8013a2a:	fb03 2300 	mla	r3, r3, r0, r2
 8013a2e:	9308      	str	r3, [sp, #32]
 8013a30:	e7e5      	b.n	80139fe <_strtod_l+0x22e>
 8013a32:	4629      	mov	r1, r5
 8013a34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013a36:	1c50      	adds	r0, r2, #1
 8013a38:	9019      	str	r0, [sp, #100]	@ 0x64
 8013a3a:	7852      	ldrb	r2, [r2, #1]
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	460d      	mov	r5, r1
 8013a40:	e7b1      	b.n	80139a6 <_strtod_l+0x1d6>
 8013a42:	f04f 0900 	mov.w	r9, #0
 8013a46:	2301      	movs	r3, #1
 8013a48:	e77d      	b.n	8013946 <_strtod_l+0x176>
 8013a4a:	f04f 0c00 	mov.w	ip, #0
 8013a4e:	1ca2      	adds	r2, r4, #2
 8013a50:	9219      	str	r2, [sp, #100]	@ 0x64
 8013a52:	78a2      	ldrb	r2, [r4, #2]
 8013a54:	e785      	b.n	8013962 <_strtod_l+0x192>
 8013a56:	f04f 0c01 	mov.w	ip, #1
 8013a5a:	e7f8      	b.n	8013a4e <_strtod_l+0x27e>
 8013a5c:	080172f8 	.word	0x080172f8
 8013a60:	080172e0 	.word	0x080172e0
 8013a64:	7ff00000 	.word	0x7ff00000
 8013a68:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013a6a:	1c51      	adds	r1, r2, #1
 8013a6c:	9119      	str	r1, [sp, #100]	@ 0x64
 8013a6e:	7852      	ldrb	r2, [r2, #1]
 8013a70:	2a30      	cmp	r2, #48	@ 0x30
 8013a72:	d0f9      	beq.n	8013a68 <_strtod_l+0x298>
 8013a74:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013a78:	2908      	cmp	r1, #8
 8013a7a:	f63f af78 	bhi.w	801396e <_strtod_l+0x19e>
 8013a7e:	3a30      	subs	r2, #48	@ 0x30
 8013a80:	920e      	str	r2, [sp, #56]	@ 0x38
 8013a82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013a84:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013a86:	f04f 080a 	mov.w	r8, #10
 8013a8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013a8c:	1c56      	adds	r6, r2, #1
 8013a8e:	9619      	str	r6, [sp, #100]	@ 0x64
 8013a90:	7852      	ldrb	r2, [r2, #1]
 8013a92:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013a96:	f1be 0f09 	cmp.w	lr, #9
 8013a9a:	d939      	bls.n	8013b10 <_strtod_l+0x340>
 8013a9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013a9e:	1a76      	subs	r6, r6, r1
 8013aa0:	2e08      	cmp	r6, #8
 8013aa2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013aa6:	dc03      	bgt.n	8013ab0 <_strtod_l+0x2e0>
 8013aa8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013aaa:	4588      	cmp	r8, r1
 8013aac:	bfa8      	it	ge
 8013aae:	4688      	movge	r8, r1
 8013ab0:	f1bc 0f00 	cmp.w	ip, #0
 8013ab4:	d001      	beq.n	8013aba <_strtod_l+0x2ea>
 8013ab6:	f1c8 0800 	rsb	r8, r8, #0
 8013aba:	2d00      	cmp	r5, #0
 8013abc:	d14e      	bne.n	8013b5c <_strtod_l+0x38c>
 8013abe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013ac0:	4308      	orrs	r0, r1
 8013ac2:	f47f aebe 	bne.w	8013842 <_strtod_l+0x72>
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	f47f aed6 	bne.w	8013878 <_strtod_l+0xa8>
 8013acc:	2a69      	cmp	r2, #105	@ 0x69
 8013ace:	d028      	beq.n	8013b22 <_strtod_l+0x352>
 8013ad0:	dc25      	bgt.n	8013b1e <_strtod_l+0x34e>
 8013ad2:	2a49      	cmp	r2, #73	@ 0x49
 8013ad4:	d025      	beq.n	8013b22 <_strtod_l+0x352>
 8013ad6:	2a4e      	cmp	r2, #78	@ 0x4e
 8013ad8:	f47f aece 	bne.w	8013878 <_strtod_l+0xa8>
 8013adc:	499b      	ldr	r1, [pc, #620]	@ (8013d4c <_strtod_l+0x57c>)
 8013ade:	a819      	add	r0, sp, #100	@ 0x64
 8013ae0:	f001 fd5e 	bl	80155a0 <__match>
 8013ae4:	2800      	cmp	r0, #0
 8013ae6:	f43f aec7 	beq.w	8013878 <_strtod_l+0xa8>
 8013aea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013aec:	781b      	ldrb	r3, [r3, #0]
 8013aee:	2b28      	cmp	r3, #40	@ 0x28
 8013af0:	d12e      	bne.n	8013b50 <_strtod_l+0x380>
 8013af2:	4997      	ldr	r1, [pc, #604]	@ (8013d50 <_strtod_l+0x580>)
 8013af4:	aa1c      	add	r2, sp, #112	@ 0x70
 8013af6:	a819      	add	r0, sp, #100	@ 0x64
 8013af8:	f001 fd66 	bl	80155c8 <__hexnan>
 8013afc:	2805      	cmp	r0, #5
 8013afe:	d127      	bne.n	8013b50 <_strtod_l+0x380>
 8013b00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013b02:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013b06:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013b0a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013b0e:	e698      	b.n	8013842 <_strtod_l+0x72>
 8013b10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013b12:	fb08 2101 	mla	r1, r8, r1, r2
 8013b16:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013b1a:	920e      	str	r2, [sp, #56]	@ 0x38
 8013b1c:	e7b5      	b.n	8013a8a <_strtod_l+0x2ba>
 8013b1e:	2a6e      	cmp	r2, #110	@ 0x6e
 8013b20:	e7da      	b.n	8013ad8 <_strtod_l+0x308>
 8013b22:	498c      	ldr	r1, [pc, #560]	@ (8013d54 <_strtod_l+0x584>)
 8013b24:	a819      	add	r0, sp, #100	@ 0x64
 8013b26:	f001 fd3b 	bl	80155a0 <__match>
 8013b2a:	2800      	cmp	r0, #0
 8013b2c:	f43f aea4 	beq.w	8013878 <_strtod_l+0xa8>
 8013b30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013b32:	4989      	ldr	r1, [pc, #548]	@ (8013d58 <_strtod_l+0x588>)
 8013b34:	3b01      	subs	r3, #1
 8013b36:	a819      	add	r0, sp, #100	@ 0x64
 8013b38:	9319      	str	r3, [sp, #100]	@ 0x64
 8013b3a:	f001 fd31 	bl	80155a0 <__match>
 8013b3e:	b910      	cbnz	r0, 8013b46 <_strtod_l+0x376>
 8013b40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013b42:	3301      	adds	r3, #1
 8013b44:	9319      	str	r3, [sp, #100]	@ 0x64
 8013b46:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8013d68 <_strtod_l+0x598>
 8013b4a:	f04f 0a00 	mov.w	sl, #0
 8013b4e:	e678      	b.n	8013842 <_strtod_l+0x72>
 8013b50:	4882      	ldr	r0, [pc, #520]	@ (8013d5c <_strtod_l+0x58c>)
 8013b52:	f001 fa61 	bl	8015018 <nan>
 8013b56:	ec5b ab10 	vmov	sl, fp, d0
 8013b5a:	e672      	b.n	8013842 <_strtod_l+0x72>
 8013b5c:	eba8 0309 	sub.w	r3, r8, r9
 8013b60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013b62:	9309      	str	r3, [sp, #36]	@ 0x24
 8013b64:	2f00      	cmp	r7, #0
 8013b66:	bf08      	it	eq
 8013b68:	462f      	moveq	r7, r5
 8013b6a:	2d10      	cmp	r5, #16
 8013b6c:	462c      	mov	r4, r5
 8013b6e:	bfa8      	it	ge
 8013b70:	2410      	movge	r4, #16
 8013b72:	f7ec fcef 	bl	8000554 <__aeabi_ui2d>
 8013b76:	2d09      	cmp	r5, #9
 8013b78:	4682      	mov	sl, r0
 8013b7a:	468b      	mov	fp, r1
 8013b7c:	dc13      	bgt.n	8013ba6 <_strtod_l+0x3d6>
 8013b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	f43f ae5e 	beq.w	8013842 <_strtod_l+0x72>
 8013b86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013b88:	dd78      	ble.n	8013c7c <_strtod_l+0x4ac>
 8013b8a:	2b16      	cmp	r3, #22
 8013b8c:	dc5f      	bgt.n	8013c4e <_strtod_l+0x47e>
 8013b8e:	4974      	ldr	r1, [pc, #464]	@ (8013d60 <_strtod_l+0x590>)
 8013b90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013b98:	4652      	mov	r2, sl
 8013b9a:	465b      	mov	r3, fp
 8013b9c:	f7ec fd54 	bl	8000648 <__aeabi_dmul>
 8013ba0:	4682      	mov	sl, r0
 8013ba2:	468b      	mov	fp, r1
 8013ba4:	e64d      	b.n	8013842 <_strtod_l+0x72>
 8013ba6:	4b6e      	ldr	r3, [pc, #440]	@ (8013d60 <_strtod_l+0x590>)
 8013ba8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013bac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013bb0:	f7ec fd4a 	bl	8000648 <__aeabi_dmul>
 8013bb4:	4682      	mov	sl, r0
 8013bb6:	9808      	ldr	r0, [sp, #32]
 8013bb8:	468b      	mov	fp, r1
 8013bba:	f7ec fccb 	bl	8000554 <__aeabi_ui2d>
 8013bbe:	4602      	mov	r2, r0
 8013bc0:	460b      	mov	r3, r1
 8013bc2:	4650      	mov	r0, sl
 8013bc4:	4659      	mov	r1, fp
 8013bc6:	f7ec fb89 	bl	80002dc <__adddf3>
 8013bca:	2d0f      	cmp	r5, #15
 8013bcc:	4682      	mov	sl, r0
 8013bce:	468b      	mov	fp, r1
 8013bd0:	ddd5      	ble.n	8013b7e <_strtod_l+0x3ae>
 8013bd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013bd4:	1b2c      	subs	r4, r5, r4
 8013bd6:	441c      	add	r4, r3
 8013bd8:	2c00      	cmp	r4, #0
 8013bda:	f340 8096 	ble.w	8013d0a <_strtod_l+0x53a>
 8013bde:	f014 030f 	ands.w	r3, r4, #15
 8013be2:	d00a      	beq.n	8013bfa <_strtod_l+0x42a>
 8013be4:	495e      	ldr	r1, [pc, #376]	@ (8013d60 <_strtod_l+0x590>)
 8013be6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013bea:	4652      	mov	r2, sl
 8013bec:	465b      	mov	r3, fp
 8013bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013bf2:	f7ec fd29 	bl	8000648 <__aeabi_dmul>
 8013bf6:	4682      	mov	sl, r0
 8013bf8:	468b      	mov	fp, r1
 8013bfa:	f034 040f 	bics.w	r4, r4, #15
 8013bfe:	d073      	beq.n	8013ce8 <_strtod_l+0x518>
 8013c00:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013c04:	dd48      	ble.n	8013c98 <_strtod_l+0x4c8>
 8013c06:	2400      	movs	r4, #0
 8013c08:	46a0      	mov	r8, r4
 8013c0a:	940a      	str	r4, [sp, #40]	@ 0x28
 8013c0c:	46a1      	mov	r9, r4
 8013c0e:	9a05      	ldr	r2, [sp, #20]
 8013c10:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013d68 <_strtod_l+0x598>
 8013c14:	2322      	movs	r3, #34	@ 0x22
 8013c16:	6013      	str	r3, [r2, #0]
 8013c18:	f04f 0a00 	mov.w	sl, #0
 8013c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	f43f ae0f 	beq.w	8013842 <_strtod_l+0x72>
 8013c24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013c26:	9805      	ldr	r0, [sp, #20]
 8013c28:	f7ff f942 	bl	8012eb0 <_Bfree>
 8013c2c:	9805      	ldr	r0, [sp, #20]
 8013c2e:	4649      	mov	r1, r9
 8013c30:	f7ff f93e 	bl	8012eb0 <_Bfree>
 8013c34:	9805      	ldr	r0, [sp, #20]
 8013c36:	4641      	mov	r1, r8
 8013c38:	f7ff f93a 	bl	8012eb0 <_Bfree>
 8013c3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013c3e:	9805      	ldr	r0, [sp, #20]
 8013c40:	f7ff f936 	bl	8012eb0 <_Bfree>
 8013c44:	9805      	ldr	r0, [sp, #20]
 8013c46:	4621      	mov	r1, r4
 8013c48:	f7ff f932 	bl	8012eb0 <_Bfree>
 8013c4c:	e5f9      	b.n	8013842 <_strtod_l+0x72>
 8013c4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013c50:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013c54:	4293      	cmp	r3, r2
 8013c56:	dbbc      	blt.n	8013bd2 <_strtod_l+0x402>
 8013c58:	4c41      	ldr	r4, [pc, #260]	@ (8013d60 <_strtod_l+0x590>)
 8013c5a:	f1c5 050f 	rsb	r5, r5, #15
 8013c5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013c62:	4652      	mov	r2, sl
 8013c64:	465b      	mov	r3, fp
 8013c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c6a:	f7ec fced 	bl	8000648 <__aeabi_dmul>
 8013c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c70:	1b5d      	subs	r5, r3, r5
 8013c72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013c76:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013c7a:	e78f      	b.n	8013b9c <_strtod_l+0x3cc>
 8013c7c:	3316      	adds	r3, #22
 8013c7e:	dba8      	blt.n	8013bd2 <_strtod_l+0x402>
 8013c80:	4b37      	ldr	r3, [pc, #220]	@ (8013d60 <_strtod_l+0x590>)
 8013c82:	eba9 0808 	sub.w	r8, r9, r8
 8013c86:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013c8a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013c8e:	4650      	mov	r0, sl
 8013c90:	4659      	mov	r1, fp
 8013c92:	f7ec fe03 	bl	800089c <__aeabi_ddiv>
 8013c96:	e783      	b.n	8013ba0 <_strtod_l+0x3d0>
 8013c98:	4b32      	ldr	r3, [pc, #200]	@ (8013d64 <_strtod_l+0x594>)
 8013c9a:	9308      	str	r3, [sp, #32]
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	1124      	asrs	r4, r4, #4
 8013ca0:	4650      	mov	r0, sl
 8013ca2:	4659      	mov	r1, fp
 8013ca4:	461e      	mov	r6, r3
 8013ca6:	2c01      	cmp	r4, #1
 8013ca8:	dc21      	bgt.n	8013cee <_strtod_l+0x51e>
 8013caa:	b10b      	cbz	r3, 8013cb0 <_strtod_l+0x4e0>
 8013cac:	4682      	mov	sl, r0
 8013cae:	468b      	mov	fp, r1
 8013cb0:	492c      	ldr	r1, [pc, #176]	@ (8013d64 <_strtod_l+0x594>)
 8013cb2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013cb6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013cba:	4652      	mov	r2, sl
 8013cbc:	465b      	mov	r3, fp
 8013cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cc2:	f7ec fcc1 	bl	8000648 <__aeabi_dmul>
 8013cc6:	4b28      	ldr	r3, [pc, #160]	@ (8013d68 <_strtod_l+0x598>)
 8013cc8:	460a      	mov	r2, r1
 8013cca:	400b      	ands	r3, r1
 8013ccc:	4927      	ldr	r1, [pc, #156]	@ (8013d6c <_strtod_l+0x59c>)
 8013cce:	428b      	cmp	r3, r1
 8013cd0:	4682      	mov	sl, r0
 8013cd2:	d898      	bhi.n	8013c06 <_strtod_l+0x436>
 8013cd4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013cd8:	428b      	cmp	r3, r1
 8013cda:	bf86      	itte	hi
 8013cdc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8013d70 <_strtod_l+0x5a0>
 8013ce0:	f04f 3aff 	movhi.w	sl, #4294967295
 8013ce4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013ce8:	2300      	movs	r3, #0
 8013cea:	9308      	str	r3, [sp, #32]
 8013cec:	e07a      	b.n	8013de4 <_strtod_l+0x614>
 8013cee:	07e2      	lsls	r2, r4, #31
 8013cf0:	d505      	bpl.n	8013cfe <_strtod_l+0x52e>
 8013cf2:	9b08      	ldr	r3, [sp, #32]
 8013cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cf8:	f7ec fca6 	bl	8000648 <__aeabi_dmul>
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	9a08      	ldr	r2, [sp, #32]
 8013d00:	3208      	adds	r2, #8
 8013d02:	3601      	adds	r6, #1
 8013d04:	1064      	asrs	r4, r4, #1
 8013d06:	9208      	str	r2, [sp, #32]
 8013d08:	e7cd      	b.n	8013ca6 <_strtod_l+0x4d6>
 8013d0a:	d0ed      	beq.n	8013ce8 <_strtod_l+0x518>
 8013d0c:	4264      	negs	r4, r4
 8013d0e:	f014 020f 	ands.w	r2, r4, #15
 8013d12:	d00a      	beq.n	8013d2a <_strtod_l+0x55a>
 8013d14:	4b12      	ldr	r3, [pc, #72]	@ (8013d60 <_strtod_l+0x590>)
 8013d16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013d1a:	4650      	mov	r0, sl
 8013d1c:	4659      	mov	r1, fp
 8013d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d22:	f7ec fdbb 	bl	800089c <__aeabi_ddiv>
 8013d26:	4682      	mov	sl, r0
 8013d28:	468b      	mov	fp, r1
 8013d2a:	1124      	asrs	r4, r4, #4
 8013d2c:	d0dc      	beq.n	8013ce8 <_strtod_l+0x518>
 8013d2e:	2c1f      	cmp	r4, #31
 8013d30:	dd20      	ble.n	8013d74 <_strtod_l+0x5a4>
 8013d32:	2400      	movs	r4, #0
 8013d34:	46a0      	mov	r8, r4
 8013d36:	940a      	str	r4, [sp, #40]	@ 0x28
 8013d38:	46a1      	mov	r9, r4
 8013d3a:	9a05      	ldr	r2, [sp, #20]
 8013d3c:	2322      	movs	r3, #34	@ 0x22
 8013d3e:	f04f 0a00 	mov.w	sl, #0
 8013d42:	f04f 0b00 	mov.w	fp, #0
 8013d46:	6013      	str	r3, [r2, #0]
 8013d48:	e768      	b.n	8013c1c <_strtod_l+0x44c>
 8013d4a:	bf00      	nop
 8013d4c:	080170cd 	.word	0x080170cd
 8013d50:	080172e4 	.word	0x080172e4
 8013d54:	080170c5 	.word	0x080170c5
 8013d58:	080170fa 	.word	0x080170fa
 8013d5c:	080174a8 	.word	0x080174a8
 8013d60:	08017218 	.word	0x08017218
 8013d64:	080171f0 	.word	0x080171f0
 8013d68:	7ff00000 	.word	0x7ff00000
 8013d6c:	7ca00000 	.word	0x7ca00000
 8013d70:	7fefffff 	.word	0x7fefffff
 8013d74:	f014 0310 	ands.w	r3, r4, #16
 8013d78:	bf18      	it	ne
 8013d7a:	236a      	movne	r3, #106	@ 0x6a
 8013d7c:	4ea9      	ldr	r6, [pc, #676]	@ (8014024 <_strtod_l+0x854>)
 8013d7e:	9308      	str	r3, [sp, #32]
 8013d80:	4650      	mov	r0, sl
 8013d82:	4659      	mov	r1, fp
 8013d84:	2300      	movs	r3, #0
 8013d86:	07e2      	lsls	r2, r4, #31
 8013d88:	d504      	bpl.n	8013d94 <_strtod_l+0x5c4>
 8013d8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013d8e:	f7ec fc5b 	bl	8000648 <__aeabi_dmul>
 8013d92:	2301      	movs	r3, #1
 8013d94:	1064      	asrs	r4, r4, #1
 8013d96:	f106 0608 	add.w	r6, r6, #8
 8013d9a:	d1f4      	bne.n	8013d86 <_strtod_l+0x5b6>
 8013d9c:	b10b      	cbz	r3, 8013da2 <_strtod_l+0x5d2>
 8013d9e:	4682      	mov	sl, r0
 8013da0:	468b      	mov	fp, r1
 8013da2:	9b08      	ldr	r3, [sp, #32]
 8013da4:	b1b3      	cbz	r3, 8013dd4 <_strtod_l+0x604>
 8013da6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013daa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	4659      	mov	r1, fp
 8013db2:	dd0f      	ble.n	8013dd4 <_strtod_l+0x604>
 8013db4:	2b1f      	cmp	r3, #31
 8013db6:	dd55      	ble.n	8013e64 <_strtod_l+0x694>
 8013db8:	2b34      	cmp	r3, #52	@ 0x34
 8013dba:	bfde      	ittt	le
 8013dbc:	f04f 33ff 	movle.w	r3, #4294967295
 8013dc0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013dc4:	4093      	lslle	r3, r2
 8013dc6:	f04f 0a00 	mov.w	sl, #0
 8013dca:	bfcc      	ite	gt
 8013dcc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013dd0:	ea03 0b01 	andle.w	fp, r3, r1
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	4650      	mov	r0, sl
 8013dda:	4659      	mov	r1, fp
 8013ddc:	f7ec fe9c 	bl	8000b18 <__aeabi_dcmpeq>
 8013de0:	2800      	cmp	r0, #0
 8013de2:	d1a6      	bne.n	8013d32 <_strtod_l+0x562>
 8013de4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013de6:	9300      	str	r3, [sp, #0]
 8013de8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013dea:	9805      	ldr	r0, [sp, #20]
 8013dec:	462b      	mov	r3, r5
 8013dee:	463a      	mov	r2, r7
 8013df0:	f7ff f8c6 	bl	8012f80 <__s2b>
 8013df4:	900a      	str	r0, [sp, #40]	@ 0x28
 8013df6:	2800      	cmp	r0, #0
 8013df8:	f43f af05 	beq.w	8013c06 <_strtod_l+0x436>
 8013dfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013dfe:	2a00      	cmp	r2, #0
 8013e00:	eba9 0308 	sub.w	r3, r9, r8
 8013e04:	bfa8      	it	ge
 8013e06:	2300      	movge	r3, #0
 8013e08:	9312      	str	r3, [sp, #72]	@ 0x48
 8013e0a:	2400      	movs	r4, #0
 8013e0c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013e10:	9316      	str	r3, [sp, #88]	@ 0x58
 8013e12:	46a0      	mov	r8, r4
 8013e14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e16:	9805      	ldr	r0, [sp, #20]
 8013e18:	6859      	ldr	r1, [r3, #4]
 8013e1a:	f7ff f809 	bl	8012e30 <_Balloc>
 8013e1e:	4681      	mov	r9, r0
 8013e20:	2800      	cmp	r0, #0
 8013e22:	f43f aef4 	beq.w	8013c0e <_strtod_l+0x43e>
 8013e26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e28:	691a      	ldr	r2, [r3, #16]
 8013e2a:	3202      	adds	r2, #2
 8013e2c:	f103 010c 	add.w	r1, r3, #12
 8013e30:	0092      	lsls	r2, r2, #2
 8013e32:	300c      	adds	r0, #12
 8013e34:	f7fe f899 	bl	8011f6a <memcpy>
 8013e38:	ec4b ab10 	vmov	d0, sl, fp
 8013e3c:	9805      	ldr	r0, [sp, #20]
 8013e3e:	aa1c      	add	r2, sp, #112	@ 0x70
 8013e40:	a91b      	add	r1, sp, #108	@ 0x6c
 8013e42:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013e46:	f7ff fbd7 	bl	80135f8 <__d2b>
 8013e4a:	901a      	str	r0, [sp, #104]	@ 0x68
 8013e4c:	2800      	cmp	r0, #0
 8013e4e:	f43f aede 	beq.w	8013c0e <_strtod_l+0x43e>
 8013e52:	9805      	ldr	r0, [sp, #20]
 8013e54:	2101      	movs	r1, #1
 8013e56:	f7ff f929 	bl	80130ac <__i2b>
 8013e5a:	4680      	mov	r8, r0
 8013e5c:	b948      	cbnz	r0, 8013e72 <_strtod_l+0x6a2>
 8013e5e:	f04f 0800 	mov.w	r8, #0
 8013e62:	e6d4      	b.n	8013c0e <_strtod_l+0x43e>
 8013e64:	f04f 32ff 	mov.w	r2, #4294967295
 8013e68:	fa02 f303 	lsl.w	r3, r2, r3
 8013e6c:	ea03 0a0a 	and.w	sl, r3, sl
 8013e70:	e7b0      	b.n	8013dd4 <_strtod_l+0x604>
 8013e72:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013e74:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013e76:	2d00      	cmp	r5, #0
 8013e78:	bfab      	itete	ge
 8013e7a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8013e7c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013e7e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013e80:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013e82:	bfac      	ite	ge
 8013e84:	18ef      	addge	r7, r5, r3
 8013e86:	1b5e      	sublt	r6, r3, r5
 8013e88:	9b08      	ldr	r3, [sp, #32]
 8013e8a:	1aed      	subs	r5, r5, r3
 8013e8c:	4415      	add	r5, r2
 8013e8e:	4b66      	ldr	r3, [pc, #408]	@ (8014028 <_strtod_l+0x858>)
 8013e90:	3d01      	subs	r5, #1
 8013e92:	429d      	cmp	r5, r3
 8013e94:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013e98:	da50      	bge.n	8013f3c <_strtod_l+0x76c>
 8013e9a:	1b5b      	subs	r3, r3, r5
 8013e9c:	2b1f      	cmp	r3, #31
 8013e9e:	eba2 0203 	sub.w	r2, r2, r3
 8013ea2:	f04f 0101 	mov.w	r1, #1
 8013ea6:	dc3d      	bgt.n	8013f24 <_strtod_l+0x754>
 8013ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8013eac:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013eae:	2300      	movs	r3, #0
 8013eb0:	9310      	str	r3, [sp, #64]	@ 0x40
 8013eb2:	18bd      	adds	r5, r7, r2
 8013eb4:	9b08      	ldr	r3, [sp, #32]
 8013eb6:	42af      	cmp	r7, r5
 8013eb8:	4416      	add	r6, r2
 8013eba:	441e      	add	r6, r3
 8013ebc:	463b      	mov	r3, r7
 8013ebe:	bfa8      	it	ge
 8013ec0:	462b      	movge	r3, r5
 8013ec2:	42b3      	cmp	r3, r6
 8013ec4:	bfa8      	it	ge
 8013ec6:	4633      	movge	r3, r6
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	bfc2      	ittt	gt
 8013ecc:	1aed      	subgt	r5, r5, r3
 8013ece:	1af6      	subgt	r6, r6, r3
 8013ed0:	1aff      	subgt	r7, r7, r3
 8013ed2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	dd16      	ble.n	8013f06 <_strtod_l+0x736>
 8013ed8:	4641      	mov	r1, r8
 8013eda:	9805      	ldr	r0, [sp, #20]
 8013edc:	461a      	mov	r2, r3
 8013ede:	f7ff f9a5 	bl	801322c <__pow5mult>
 8013ee2:	4680      	mov	r8, r0
 8013ee4:	2800      	cmp	r0, #0
 8013ee6:	d0ba      	beq.n	8013e5e <_strtod_l+0x68e>
 8013ee8:	4601      	mov	r1, r0
 8013eea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013eec:	9805      	ldr	r0, [sp, #20]
 8013eee:	f7ff f8f3 	bl	80130d8 <__multiply>
 8013ef2:	900e      	str	r0, [sp, #56]	@ 0x38
 8013ef4:	2800      	cmp	r0, #0
 8013ef6:	f43f ae8a 	beq.w	8013c0e <_strtod_l+0x43e>
 8013efa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013efc:	9805      	ldr	r0, [sp, #20]
 8013efe:	f7fe ffd7 	bl	8012eb0 <_Bfree>
 8013f02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013f04:	931a      	str	r3, [sp, #104]	@ 0x68
 8013f06:	2d00      	cmp	r5, #0
 8013f08:	dc1d      	bgt.n	8013f46 <_strtod_l+0x776>
 8013f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	dd23      	ble.n	8013f58 <_strtod_l+0x788>
 8013f10:	4649      	mov	r1, r9
 8013f12:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013f14:	9805      	ldr	r0, [sp, #20]
 8013f16:	f7ff f989 	bl	801322c <__pow5mult>
 8013f1a:	4681      	mov	r9, r0
 8013f1c:	b9e0      	cbnz	r0, 8013f58 <_strtod_l+0x788>
 8013f1e:	f04f 0900 	mov.w	r9, #0
 8013f22:	e674      	b.n	8013c0e <_strtod_l+0x43e>
 8013f24:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8013f28:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8013f2c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8013f30:	35e2      	adds	r5, #226	@ 0xe2
 8013f32:	fa01 f305 	lsl.w	r3, r1, r5
 8013f36:	9310      	str	r3, [sp, #64]	@ 0x40
 8013f38:	9113      	str	r1, [sp, #76]	@ 0x4c
 8013f3a:	e7ba      	b.n	8013eb2 <_strtod_l+0x6e2>
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8013f40:	2301      	movs	r3, #1
 8013f42:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013f44:	e7b5      	b.n	8013eb2 <_strtod_l+0x6e2>
 8013f46:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013f48:	9805      	ldr	r0, [sp, #20]
 8013f4a:	462a      	mov	r2, r5
 8013f4c:	f7ff f9c8 	bl	80132e0 <__lshift>
 8013f50:	901a      	str	r0, [sp, #104]	@ 0x68
 8013f52:	2800      	cmp	r0, #0
 8013f54:	d1d9      	bne.n	8013f0a <_strtod_l+0x73a>
 8013f56:	e65a      	b.n	8013c0e <_strtod_l+0x43e>
 8013f58:	2e00      	cmp	r6, #0
 8013f5a:	dd07      	ble.n	8013f6c <_strtod_l+0x79c>
 8013f5c:	4649      	mov	r1, r9
 8013f5e:	9805      	ldr	r0, [sp, #20]
 8013f60:	4632      	mov	r2, r6
 8013f62:	f7ff f9bd 	bl	80132e0 <__lshift>
 8013f66:	4681      	mov	r9, r0
 8013f68:	2800      	cmp	r0, #0
 8013f6a:	d0d8      	beq.n	8013f1e <_strtod_l+0x74e>
 8013f6c:	2f00      	cmp	r7, #0
 8013f6e:	dd08      	ble.n	8013f82 <_strtod_l+0x7b2>
 8013f70:	4641      	mov	r1, r8
 8013f72:	9805      	ldr	r0, [sp, #20]
 8013f74:	463a      	mov	r2, r7
 8013f76:	f7ff f9b3 	bl	80132e0 <__lshift>
 8013f7a:	4680      	mov	r8, r0
 8013f7c:	2800      	cmp	r0, #0
 8013f7e:	f43f ae46 	beq.w	8013c0e <_strtod_l+0x43e>
 8013f82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013f84:	9805      	ldr	r0, [sp, #20]
 8013f86:	464a      	mov	r2, r9
 8013f88:	f7ff fa32 	bl	80133f0 <__mdiff>
 8013f8c:	4604      	mov	r4, r0
 8013f8e:	2800      	cmp	r0, #0
 8013f90:	f43f ae3d 	beq.w	8013c0e <_strtod_l+0x43e>
 8013f94:	68c3      	ldr	r3, [r0, #12]
 8013f96:	930f      	str	r3, [sp, #60]	@ 0x3c
 8013f98:	2300      	movs	r3, #0
 8013f9a:	60c3      	str	r3, [r0, #12]
 8013f9c:	4641      	mov	r1, r8
 8013f9e:	f7ff fa0b 	bl	80133b8 <__mcmp>
 8013fa2:	2800      	cmp	r0, #0
 8013fa4:	da46      	bge.n	8014034 <_strtod_l+0x864>
 8013fa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8013fa8:	ea53 030a 	orrs.w	r3, r3, sl
 8013fac:	d16c      	bne.n	8014088 <_strtod_l+0x8b8>
 8013fae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d168      	bne.n	8014088 <_strtod_l+0x8b8>
 8013fb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013fba:	0d1b      	lsrs	r3, r3, #20
 8013fbc:	051b      	lsls	r3, r3, #20
 8013fbe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013fc2:	d961      	bls.n	8014088 <_strtod_l+0x8b8>
 8013fc4:	6963      	ldr	r3, [r4, #20]
 8013fc6:	b913      	cbnz	r3, 8013fce <_strtod_l+0x7fe>
 8013fc8:	6923      	ldr	r3, [r4, #16]
 8013fca:	2b01      	cmp	r3, #1
 8013fcc:	dd5c      	ble.n	8014088 <_strtod_l+0x8b8>
 8013fce:	4621      	mov	r1, r4
 8013fd0:	2201      	movs	r2, #1
 8013fd2:	9805      	ldr	r0, [sp, #20]
 8013fd4:	f7ff f984 	bl	80132e0 <__lshift>
 8013fd8:	4641      	mov	r1, r8
 8013fda:	4604      	mov	r4, r0
 8013fdc:	f7ff f9ec 	bl	80133b8 <__mcmp>
 8013fe0:	2800      	cmp	r0, #0
 8013fe2:	dd51      	ble.n	8014088 <_strtod_l+0x8b8>
 8013fe4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8013fe8:	9a08      	ldr	r2, [sp, #32]
 8013fea:	0d1b      	lsrs	r3, r3, #20
 8013fec:	051b      	lsls	r3, r3, #20
 8013fee:	2a00      	cmp	r2, #0
 8013ff0:	d06b      	beq.n	80140ca <_strtod_l+0x8fa>
 8013ff2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8013ff6:	d868      	bhi.n	80140ca <_strtod_l+0x8fa>
 8013ff8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8013ffc:	f67f ae9d 	bls.w	8013d3a <_strtod_l+0x56a>
 8014000:	4b0a      	ldr	r3, [pc, #40]	@ (801402c <_strtod_l+0x85c>)
 8014002:	4650      	mov	r0, sl
 8014004:	4659      	mov	r1, fp
 8014006:	2200      	movs	r2, #0
 8014008:	f7ec fb1e 	bl	8000648 <__aeabi_dmul>
 801400c:	4b08      	ldr	r3, [pc, #32]	@ (8014030 <_strtod_l+0x860>)
 801400e:	400b      	ands	r3, r1
 8014010:	4682      	mov	sl, r0
 8014012:	468b      	mov	fp, r1
 8014014:	2b00      	cmp	r3, #0
 8014016:	f47f ae05 	bne.w	8013c24 <_strtod_l+0x454>
 801401a:	9a05      	ldr	r2, [sp, #20]
 801401c:	2322      	movs	r3, #34	@ 0x22
 801401e:	6013      	str	r3, [r2, #0]
 8014020:	e600      	b.n	8013c24 <_strtod_l+0x454>
 8014022:	bf00      	nop
 8014024:	08017310 	.word	0x08017310
 8014028:	fffffc02 	.word	0xfffffc02
 801402c:	39500000 	.word	0x39500000
 8014030:	7ff00000 	.word	0x7ff00000
 8014034:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8014038:	d165      	bne.n	8014106 <_strtod_l+0x936>
 801403a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801403c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014040:	b35a      	cbz	r2, 801409a <_strtod_l+0x8ca>
 8014042:	4a9f      	ldr	r2, [pc, #636]	@ (80142c0 <_strtod_l+0xaf0>)
 8014044:	4293      	cmp	r3, r2
 8014046:	d12b      	bne.n	80140a0 <_strtod_l+0x8d0>
 8014048:	9b08      	ldr	r3, [sp, #32]
 801404a:	4651      	mov	r1, sl
 801404c:	b303      	cbz	r3, 8014090 <_strtod_l+0x8c0>
 801404e:	4b9d      	ldr	r3, [pc, #628]	@ (80142c4 <_strtod_l+0xaf4>)
 8014050:	465a      	mov	r2, fp
 8014052:	4013      	ands	r3, r2
 8014054:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8014058:	f04f 32ff 	mov.w	r2, #4294967295
 801405c:	d81b      	bhi.n	8014096 <_strtod_l+0x8c6>
 801405e:	0d1b      	lsrs	r3, r3, #20
 8014060:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8014064:	fa02 f303 	lsl.w	r3, r2, r3
 8014068:	4299      	cmp	r1, r3
 801406a:	d119      	bne.n	80140a0 <_strtod_l+0x8d0>
 801406c:	4b96      	ldr	r3, [pc, #600]	@ (80142c8 <_strtod_l+0xaf8>)
 801406e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014070:	429a      	cmp	r2, r3
 8014072:	d102      	bne.n	801407a <_strtod_l+0x8aa>
 8014074:	3101      	adds	r1, #1
 8014076:	f43f adca 	beq.w	8013c0e <_strtod_l+0x43e>
 801407a:	4b92      	ldr	r3, [pc, #584]	@ (80142c4 <_strtod_l+0xaf4>)
 801407c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801407e:	401a      	ands	r2, r3
 8014080:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8014084:	f04f 0a00 	mov.w	sl, #0
 8014088:	9b08      	ldr	r3, [sp, #32]
 801408a:	2b00      	cmp	r3, #0
 801408c:	d1b8      	bne.n	8014000 <_strtod_l+0x830>
 801408e:	e5c9      	b.n	8013c24 <_strtod_l+0x454>
 8014090:	f04f 33ff 	mov.w	r3, #4294967295
 8014094:	e7e8      	b.n	8014068 <_strtod_l+0x898>
 8014096:	4613      	mov	r3, r2
 8014098:	e7e6      	b.n	8014068 <_strtod_l+0x898>
 801409a:	ea53 030a 	orrs.w	r3, r3, sl
 801409e:	d0a1      	beq.n	8013fe4 <_strtod_l+0x814>
 80140a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80140a2:	b1db      	cbz	r3, 80140dc <_strtod_l+0x90c>
 80140a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80140a6:	4213      	tst	r3, r2
 80140a8:	d0ee      	beq.n	8014088 <_strtod_l+0x8b8>
 80140aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80140ac:	9a08      	ldr	r2, [sp, #32]
 80140ae:	4650      	mov	r0, sl
 80140b0:	4659      	mov	r1, fp
 80140b2:	b1bb      	cbz	r3, 80140e4 <_strtod_l+0x914>
 80140b4:	f7ff fb6e 	bl	8013794 <sulp>
 80140b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80140bc:	ec53 2b10 	vmov	r2, r3, d0
 80140c0:	f7ec f90c 	bl	80002dc <__adddf3>
 80140c4:	4682      	mov	sl, r0
 80140c6:	468b      	mov	fp, r1
 80140c8:	e7de      	b.n	8014088 <_strtod_l+0x8b8>
 80140ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80140ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80140d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80140d6:	f04f 3aff 	mov.w	sl, #4294967295
 80140da:	e7d5      	b.n	8014088 <_strtod_l+0x8b8>
 80140dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80140de:	ea13 0f0a 	tst.w	r3, sl
 80140e2:	e7e1      	b.n	80140a8 <_strtod_l+0x8d8>
 80140e4:	f7ff fb56 	bl	8013794 <sulp>
 80140e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80140ec:	ec53 2b10 	vmov	r2, r3, d0
 80140f0:	f7ec f8f2 	bl	80002d8 <__aeabi_dsub>
 80140f4:	2200      	movs	r2, #0
 80140f6:	2300      	movs	r3, #0
 80140f8:	4682      	mov	sl, r0
 80140fa:	468b      	mov	fp, r1
 80140fc:	f7ec fd0c 	bl	8000b18 <__aeabi_dcmpeq>
 8014100:	2800      	cmp	r0, #0
 8014102:	d0c1      	beq.n	8014088 <_strtod_l+0x8b8>
 8014104:	e619      	b.n	8013d3a <_strtod_l+0x56a>
 8014106:	4641      	mov	r1, r8
 8014108:	4620      	mov	r0, r4
 801410a:	f7ff facd 	bl	80136a8 <__ratio>
 801410e:	ec57 6b10 	vmov	r6, r7, d0
 8014112:	2200      	movs	r2, #0
 8014114:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014118:	4630      	mov	r0, r6
 801411a:	4639      	mov	r1, r7
 801411c:	f7ec fd10 	bl	8000b40 <__aeabi_dcmple>
 8014120:	2800      	cmp	r0, #0
 8014122:	d06f      	beq.n	8014204 <_strtod_l+0xa34>
 8014124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014126:	2b00      	cmp	r3, #0
 8014128:	d17a      	bne.n	8014220 <_strtod_l+0xa50>
 801412a:	f1ba 0f00 	cmp.w	sl, #0
 801412e:	d158      	bne.n	80141e2 <_strtod_l+0xa12>
 8014130:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014132:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014136:	2b00      	cmp	r3, #0
 8014138:	d15a      	bne.n	80141f0 <_strtod_l+0xa20>
 801413a:	4b64      	ldr	r3, [pc, #400]	@ (80142cc <_strtod_l+0xafc>)
 801413c:	2200      	movs	r2, #0
 801413e:	4630      	mov	r0, r6
 8014140:	4639      	mov	r1, r7
 8014142:	f7ec fcf3 	bl	8000b2c <__aeabi_dcmplt>
 8014146:	2800      	cmp	r0, #0
 8014148:	d159      	bne.n	80141fe <_strtod_l+0xa2e>
 801414a:	4630      	mov	r0, r6
 801414c:	4639      	mov	r1, r7
 801414e:	4b60      	ldr	r3, [pc, #384]	@ (80142d0 <_strtod_l+0xb00>)
 8014150:	2200      	movs	r2, #0
 8014152:	f7ec fa79 	bl	8000648 <__aeabi_dmul>
 8014156:	4606      	mov	r6, r0
 8014158:	460f      	mov	r7, r1
 801415a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801415e:	9606      	str	r6, [sp, #24]
 8014160:	9307      	str	r3, [sp, #28]
 8014162:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014166:	4d57      	ldr	r5, [pc, #348]	@ (80142c4 <_strtod_l+0xaf4>)
 8014168:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801416c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801416e:	401d      	ands	r5, r3
 8014170:	4b58      	ldr	r3, [pc, #352]	@ (80142d4 <_strtod_l+0xb04>)
 8014172:	429d      	cmp	r5, r3
 8014174:	f040 80b2 	bne.w	80142dc <_strtod_l+0xb0c>
 8014178:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801417a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801417e:	ec4b ab10 	vmov	d0, sl, fp
 8014182:	f7ff f9c9 	bl	8013518 <__ulp>
 8014186:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801418a:	ec51 0b10 	vmov	r0, r1, d0
 801418e:	f7ec fa5b 	bl	8000648 <__aeabi_dmul>
 8014192:	4652      	mov	r2, sl
 8014194:	465b      	mov	r3, fp
 8014196:	f7ec f8a1 	bl	80002dc <__adddf3>
 801419a:	460b      	mov	r3, r1
 801419c:	4949      	ldr	r1, [pc, #292]	@ (80142c4 <_strtod_l+0xaf4>)
 801419e:	4a4e      	ldr	r2, [pc, #312]	@ (80142d8 <_strtod_l+0xb08>)
 80141a0:	4019      	ands	r1, r3
 80141a2:	4291      	cmp	r1, r2
 80141a4:	4682      	mov	sl, r0
 80141a6:	d942      	bls.n	801422e <_strtod_l+0xa5e>
 80141a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80141aa:	4b47      	ldr	r3, [pc, #284]	@ (80142c8 <_strtod_l+0xaf8>)
 80141ac:	429a      	cmp	r2, r3
 80141ae:	d103      	bne.n	80141b8 <_strtod_l+0x9e8>
 80141b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80141b2:	3301      	adds	r3, #1
 80141b4:	f43f ad2b 	beq.w	8013c0e <_strtod_l+0x43e>
 80141b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80142c8 <_strtod_l+0xaf8>
 80141bc:	f04f 3aff 	mov.w	sl, #4294967295
 80141c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80141c2:	9805      	ldr	r0, [sp, #20]
 80141c4:	f7fe fe74 	bl	8012eb0 <_Bfree>
 80141c8:	9805      	ldr	r0, [sp, #20]
 80141ca:	4649      	mov	r1, r9
 80141cc:	f7fe fe70 	bl	8012eb0 <_Bfree>
 80141d0:	9805      	ldr	r0, [sp, #20]
 80141d2:	4641      	mov	r1, r8
 80141d4:	f7fe fe6c 	bl	8012eb0 <_Bfree>
 80141d8:	9805      	ldr	r0, [sp, #20]
 80141da:	4621      	mov	r1, r4
 80141dc:	f7fe fe68 	bl	8012eb0 <_Bfree>
 80141e0:	e618      	b.n	8013e14 <_strtod_l+0x644>
 80141e2:	f1ba 0f01 	cmp.w	sl, #1
 80141e6:	d103      	bne.n	80141f0 <_strtod_l+0xa20>
 80141e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	f43f ada5 	beq.w	8013d3a <_strtod_l+0x56a>
 80141f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80142a0 <_strtod_l+0xad0>
 80141f4:	4f35      	ldr	r7, [pc, #212]	@ (80142cc <_strtod_l+0xafc>)
 80141f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80141fa:	2600      	movs	r6, #0
 80141fc:	e7b1      	b.n	8014162 <_strtod_l+0x992>
 80141fe:	4f34      	ldr	r7, [pc, #208]	@ (80142d0 <_strtod_l+0xb00>)
 8014200:	2600      	movs	r6, #0
 8014202:	e7aa      	b.n	801415a <_strtod_l+0x98a>
 8014204:	4b32      	ldr	r3, [pc, #200]	@ (80142d0 <_strtod_l+0xb00>)
 8014206:	4630      	mov	r0, r6
 8014208:	4639      	mov	r1, r7
 801420a:	2200      	movs	r2, #0
 801420c:	f7ec fa1c 	bl	8000648 <__aeabi_dmul>
 8014210:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014212:	4606      	mov	r6, r0
 8014214:	460f      	mov	r7, r1
 8014216:	2b00      	cmp	r3, #0
 8014218:	d09f      	beq.n	801415a <_strtod_l+0x98a>
 801421a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801421e:	e7a0      	b.n	8014162 <_strtod_l+0x992>
 8014220:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80142a8 <_strtod_l+0xad8>
 8014224:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014228:	ec57 6b17 	vmov	r6, r7, d7
 801422c:	e799      	b.n	8014162 <_strtod_l+0x992>
 801422e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8014232:	9b08      	ldr	r3, [sp, #32]
 8014234:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8014238:	2b00      	cmp	r3, #0
 801423a:	d1c1      	bne.n	80141c0 <_strtod_l+0x9f0>
 801423c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014240:	0d1b      	lsrs	r3, r3, #20
 8014242:	051b      	lsls	r3, r3, #20
 8014244:	429d      	cmp	r5, r3
 8014246:	d1bb      	bne.n	80141c0 <_strtod_l+0x9f0>
 8014248:	4630      	mov	r0, r6
 801424a:	4639      	mov	r1, r7
 801424c:	f7ec fd5c 	bl	8000d08 <__aeabi_d2lz>
 8014250:	f7ec f9cc 	bl	80005ec <__aeabi_l2d>
 8014254:	4602      	mov	r2, r0
 8014256:	460b      	mov	r3, r1
 8014258:	4630      	mov	r0, r6
 801425a:	4639      	mov	r1, r7
 801425c:	f7ec f83c 	bl	80002d8 <__aeabi_dsub>
 8014260:	460b      	mov	r3, r1
 8014262:	4602      	mov	r2, r0
 8014264:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8014268:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801426c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801426e:	ea46 060a 	orr.w	r6, r6, sl
 8014272:	431e      	orrs	r6, r3
 8014274:	d06f      	beq.n	8014356 <_strtod_l+0xb86>
 8014276:	a30e      	add	r3, pc, #56	@ (adr r3, 80142b0 <_strtod_l+0xae0>)
 8014278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801427c:	f7ec fc56 	bl	8000b2c <__aeabi_dcmplt>
 8014280:	2800      	cmp	r0, #0
 8014282:	f47f accf 	bne.w	8013c24 <_strtod_l+0x454>
 8014286:	a30c      	add	r3, pc, #48	@ (adr r3, 80142b8 <_strtod_l+0xae8>)
 8014288:	e9d3 2300 	ldrd	r2, r3, [r3]
 801428c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014290:	f7ec fc6a 	bl	8000b68 <__aeabi_dcmpgt>
 8014294:	2800      	cmp	r0, #0
 8014296:	d093      	beq.n	80141c0 <_strtod_l+0x9f0>
 8014298:	e4c4      	b.n	8013c24 <_strtod_l+0x454>
 801429a:	bf00      	nop
 801429c:	f3af 8000 	nop.w
 80142a0:	00000000 	.word	0x00000000
 80142a4:	bff00000 	.word	0xbff00000
 80142a8:	00000000 	.word	0x00000000
 80142ac:	3ff00000 	.word	0x3ff00000
 80142b0:	94a03595 	.word	0x94a03595
 80142b4:	3fdfffff 	.word	0x3fdfffff
 80142b8:	35afe535 	.word	0x35afe535
 80142bc:	3fe00000 	.word	0x3fe00000
 80142c0:	000fffff 	.word	0x000fffff
 80142c4:	7ff00000 	.word	0x7ff00000
 80142c8:	7fefffff 	.word	0x7fefffff
 80142cc:	3ff00000 	.word	0x3ff00000
 80142d0:	3fe00000 	.word	0x3fe00000
 80142d4:	7fe00000 	.word	0x7fe00000
 80142d8:	7c9fffff 	.word	0x7c9fffff
 80142dc:	9b08      	ldr	r3, [sp, #32]
 80142de:	b323      	cbz	r3, 801432a <_strtod_l+0xb5a>
 80142e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80142e4:	d821      	bhi.n	801432a <_strtod_l+0xb5a>
 80142e6:	a328      	add	r3, pc, #160	@ (adr r3, 8014388 <_strtod_l+0xbb8>)
 80142e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ec:	4630      	mov	r0, r6
 80142ee:	4639      	mov	r1, r7
 80142f0:	f7ec fc26 	bl	8000b40 <__aeabi_dcmple>
 80142f4:	b1a0      	cbz	r0, 8014320 <_strtod_l+0xb50>
 80142f6:	4639      	mov	r1, r7
 80142f8:	4630      	mov	r0, r6
 80142fa:	f7ec fc7d 	bl	8000bf8 <__aeabi_d2uiz>
 80142fe:	2801      	cmp	r0, #1
 8014300:	bf38      	it	cc
 8014302:	2001      	movcc	r0, #1
 8014304:	f7ec f926 	bl	8000554 <__aeabi_ui2d>
 8014308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801430a:	4606      	mov	r6, r0
 801430c:	460f      	mov	r7, r1
 801430e:	b9fb      	cbnz	r3, 8014350 <_strtod_l+0xb80>
 8014310:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8014314:	9014      	str	r0, [sp, #80]	@ 0x50
 8014316:	9315      	str	r3, [sp, #84]	@ 0x54
 8014318:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801431c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014320:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8014322:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8014326:	1b5b      	subs	r3, r3, r5
 8014328:	9311      	str	r3, [sp, #68]	@ 0x44
 801432a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801432e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8014332:	f7ff f8f1 	bl	8013518 <__ulp>
 8014336:	4650      	mov	r0, sl
 8014338:	ec53 2b10 	vmov	r2, r3, d0
 801433c:	4659      	mov	r1, fp
 801433e:	f7ec f983 	bl	8000648 <__aeabi_dmul>
 8014342:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8014346:	f7eb ffc9 	bl	80002dc <__adddf3>
 801434a:	4682      	mov	sl, r0
 801434c:	468b      	mov	fp, r1
 801434e:	e770      	b.n	8014232 <_strtod_l+0xa62>
 8014350:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8014354:	e7e0      	b.n	8014318 <_strtod_l+0xb48>
 8014356:	a30e      	add	r3, pc, #56	@ (adr r3, 8014390 <_strtod_l+0xbc0>)
 8014358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801435c:	f7ec fbe6 	bl	8000b2c <__aeabi_dcmplt>
 8014360:	e798      	b.n	8014294 <_strtod_l+0xac4>
 8014362:	2300      	movs	r3, #0
 8014364:	930b      	str	r3, [sp, #44]	@ 0x2c
 8014366:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8014368:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801436a:	6013      	str	r3, [r2, #0]
 801436c:	f7ff ba6d 	b.w	801384a <_strtod_l+0x7a>
 8014370:	2a65      	cmp	r2, #101	@ 0x65
 8014372:	f43f ab66 	beq.w	8013a42 <_strtod_l+0x272>
 8014376:	2a45      	cmp	r2, #69	@ 0x45
 8014378:	f43f ab63 	beq.w	8013a42 <_strtod_l+0x272>
 801437c:	2301      	movs	r3, #1
 801437e:	f7ff bb9e 	b.w	8013abe <_strtod_l+0x2ee>
 8014382:	bf00      	nop
 8014384:	f3af 8000 	nop.w
 8014388:	ffc00000 	.word	0xffc00000
 801438c:	41dfffff 	.word	0x41dfffff
 8014390:	94a03595 	.word	0x94a03595
 8014394:	3fcfffff 	.word	0x3fcfffff

08014398 <_strtod_r>:
 8014398:	4b01      	ldr	r3, [pc, #4]	@ (80143a0 <_strtod_r+0x8>)
 801439a:	f7ff ba19 	b.w	80137d0 <_strtod_l>
 801439e:	bf00      	nop
 80143a0:	20000234 	.word	0x20000234

080143a4 <_strtol_l.constprop.0>:
 80143a4:	2b24      	cmp	r3, #36	@ 0x24
 80143a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143aa:	4686      	mov	lr, r0
 80143ac:	4690      	mov	r8, r2
 80143ae:	d801      	bhi.n	80143b4 <_strtol_l.constprop.0+0x10>
 80143b0:	2b01      	cmp	r3, #1
 80143b2:	d106      	bne.n	80143c2 <_strtol_l.constprop.0+0x1e>
 80143b4:	f7fd fdac 	bl	8011f10 <__errno>
 80143b8:	2316      	movs	r3, #22
 80143ba:	6003      	str	r3, [r0, #0]
 80143bc:	2000      	movs	r0, #0
 80143be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143c2:	4834      	ldr	r0, [pc, #208]	@ (8014494 <_strtol_l.constprop.0+0xf0>)
 80143c4:	460d      	mov	r5, r1
 80143c6:	462a      	mov	r2, r5
 80143c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80143cc:	5d06      	ldrb	r6, [r0, r4]
 80143ce:	f016 0608 	ands.w	r6, r6, #8
 80143d2:	d1f8      	bne.n	80143c6 <_strtol_l.constprop.0+0x22>
 80143d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80143d6:	d12d      	bne.n	8014434 <_strtol_l.constprop.0+0x90>
 80143d8:	782c      	ldrb	r4, [r5, #0]
 80143da:	2601      	movs	r6, #1
 80143dc:	1c95      	adds	r5, r2, #2
 80143de:	f033 0210 	bics.w	r2, r3, #16
 80143e2:	d109      	bne.n	80143f8 <_strtol_l.constprop.0+0x54>
 80143e4:	2c30      	cmp	r4, #48	@ 0x30
 80143e6:	d12a      	bne.n	801443e <_strtol_l.constprop.0+0x9a>
 80143e8:	782a      	ldrb	r2, [r5, #0]
 80143ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80143ee:	2a58      	cmp	r2, #88	@ 0x58
 80143f0:	d125      	bne.n	801443e <_strtol_l.constprop.0+0x9a>
 80143f2:	786c      	ldrb	r4, [r5, #1]
 80143f4:	2310      	movs	r3, #16
 80143f6:	3502      	adds	r5, #2
 80143f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80143fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014400:	2200      	movs	r2, #0
 8014402:	fbbc f9f3 	udiv	r9, ip, r3
 8014406:	4610      	mov	r0, r2
 8014408:	fb03 ca19 	mls	sl, r3, r9, ip
 801440c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8014410:	2f09      	cmp	r7, #9
 8014412:	d81b      	bhi.n	801444c <_strtol_l.constprop.0+0xa8>
 8014414:	463c      	mov	r4, r7
 8014416:	42a3      	cmp	r3, r4
 8014418:	dd27      	ble.n	801446a <_strtol_l.constprop.0+0xc6>
 801441a:	1c57      	adds	r7, r2, #1
 801441c:	d007      	beq.n	801442e <_strtol_l.constprop.0+0x8a>
 801441e:	4581      	cmp	r9, r0
 8014420:	d320      	bcc.n	8014464 <_strtol_l.constprop.0+0xc0>
 8014422:	d101      	bne.n	8014428 <_strtol_l.constprop.0+0x84>
 8014424:	45a2      	cmp	sl, r4
 8014426:	db1d      	blt.n	8014464 <_strtol_l.constprop.0+0xc0>
 8014428:	fb00 4003 	mla	r0, r0, r3, r4
 801442c:	2201      	movs	r2, #1
 801442e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014432:	e7eb      	b.n	801440c <_strtol_l.constprop.0+0x68>
 8014434:	2c2b      	cmp	r4, #43	@ 0x2b
 8014436:	bf04      	itt	eq
 8014438:	782c      	ldrbeq	r4, [r5, #0]
 801443a:	1c95      	addeq	r5, r2, #2
 801443c:	e7cf      	b.n	80143de <_strtol_l.constprop.0+0x3a>
 801443e:	2b00      	cmp	r3, #0
 8014440:	d1da      	bne.n	80143f8 <_strtol_l.constprop.0+0x54>
 8014442:	2c30      	cmp	r4, #48	@ 0x30
 8014444:	bf0c      	ite	eq
 8014446:	2308      	moveq	r3, #8
 8014448:	230a      	movne	r3, #10
 801444a:	e7d5      	b.n	80143f8 <_strtol_l.constprop.0+0x54>
 801444c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014450:	2f19      	cmp	r7, #25
 8014452:	d801      	bhi.n	8014458 <_strtol_l.constprop.0+0xb4>
 8014454:	3c37      	subs	r4, #55	@ 0x37
 8014456:	e7de      	b.n	8014416 <_strtol_l.constprop.0+0x72>
 8014458:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801445c:	2f19      	cmp	r7, #25
 801445e:	d804      	bhi.n	801446a <_strtol_l.constprop.0+0xc6>
 8014460:	3c57      	subs	r4, #87	@ 0x57
 8014462:	e7d8      	b.n	8014416 <_strtol_l.constprop.0+0x72>
 8014464:	f04f 32ff 	mov.w	r2, #4294967295
 8014468:	e7e1      	b.n	801442e <_strtol_l.constprop.0+0x8a>
 801446a:	1c53      	adds	r3, r2, #1
 801446c:	d108      	bne.n	8014480 <_strtol_l.constprop.0+0xdc>
 801446e:	2322      	movs	r3, #34	@ 0x22
 8014470:	f8ce 3000 	str.w	r3, [lr]
 8014474:	4660      	mov	r0, ip
 8014476:	f1b8 0f00 	cmp.w	r8, #0
 801447a:	d0a0      	beq.n	80143be <_strtol_l.constprop.0+0x1a>
 801447c:	1e69      	subs	r1, r5, #1
 801447e:	e006      	b.n	801448e <_strtol_l.constprop.0+0xea>
 8014480:	b106      	cbz	r6, 8014484 <_strtol_l.constprop.0+0xe0>
 8014482:	4240      	negs	r0, r0
 8014484:	f1b8 0f00 	cmp.w	r8, #0
 8014488:	d099      	beq.n	80143be <_strtol_l.constprop.0+0x1a>
 801448a:	2a00      	cmp	r2, #0
 801448c:	d1f6      	bne.n	801447c <_strtol_l.constprop.0+0xd8>
 801448e:	f8c8 1000 	str.w	r1, [r8]
 8014492:	e794      	b.n	80143be <_strtol_l.constprop.0+0x1a>
 8014494:	08017339 	.word	0x08017339

08014498 <_strtol_r>:
 8014498:	f7ff bf84 	b.w	80143a4 <_strtol_l.constprop.0>

0801449c <__ssputs_r>:
 801449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144a0:	688e      	ldr	r6, [r1, #8]
 80144a2:	461f      	mov	r7, r3
 80144a4:	42be      	cmp	r6, r7
 80144a6:	680b      	ldr	r3, [r1, #0]
 80144a8:	4682      	mov	sl, r0
 80144aa:	460c      	mov	r4, r1
 80144ac:	4690      	mov	r8, r2
 80144ae:	d82d      	bhi.n	801450c <__ssputs_r+0x70>
 80144b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80144b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80144b8:	d026      	beq.n	8014508 <__ssputs_r+0x6c>
 80144ba:	6965      	ldr	r5, [r4, #20]
 80144bc:	6909      	ldr	r1, [r1, #16]
 80144be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80144c2:	eba3 0901 	sub.w	r9, r3, r1
 80144c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80144ca:	1c7b      	adds	r3, r7, #1
 80144cc:	444b      	add	r3, r9
 80144ce:	106d      	asrs	r5, r5, #1
 80144d0:	429d      	cmp	r5, r3
 80144d2:	bf38      	it	cc
 80144d4:	461d      	movcc	r5, r3
 80144d6:	0553      	lsls	r3, r2, #21
 80144d8:	d527      	bpl.n	801452a <__ssputs_r+0x8e>
 80144da:	4629      	mov	r1, r5
 80144dc:	f7fe fc1c 	bl	8012d18 <_malloc_r>
 80144e0:	4606      	mov	r6, r0
 80144e2:	b360      	cbz	r0, 801453e <__ssputs_r+0xa2>
 80144e4:	6921      	ldr	r1, [r4, #16]
 80144e6:	464a      	mov	r2, r9
 80144e8:	f7fd fd3f 	bl	8011f6a <memcpy>
 80144ec:	89a3      	ldrh	r3, [r4, #12]
 80144ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80144f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80144f6:	81a3      	strh	r3, [r4, #12]
 80144f8:	6126      	str	r6, [r4, #16]
 80144fa:	6165      	str	r5, [r4, #20]
 80144fc:	444e      	add	r6, r9
 80144fe:	eba5 0509 	sub.w	r5, r5, r9
 8014502:	6026      	str	r6, [r4, #0]
 8014504:	60a5      	str	r5, [r4, #8]
 8014506:	463e      	mov	r6, r7
 8014508:	42be      	cmp	r6, r7
 801450a:	d900      	bls.n	801450e <__ssputs_r+0x72>
 801450c:	463e      	mov	r6, r7
 801450e:	6820      	ldr	r0, [r4, #0]
 8014510:	4632      	mov	r2, r6
 8014512:	4641      	mov	r1, r8
 8014514:	f000 fd53 	bl	8014fbe <memmove>
 8014518:	68a3      	ldr	r3, [r4, #8]
 801451a:	1b9b      	subs	r3, r3, r6
 801451c:	60a3      	str	r3, [r4, #8]
 801451e:	6823      	ldr	r3, [r4, #0]
 8014520:	4433      	add	r3, r6
 8014522:	6023      	str	r3, [r4, #0]
 8014524:	2000      	movs	r0, #0
 8014526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801452a:	462a      	mov	r2, r5
 801452c:	f001 f8f9 	bl	8015722 <_realloc_r>
 8014530:	4606      	mov	r6, r0
 8014532:	2800      	cmp	r0, #0
 8014534:	d1e0      	bne.n	80144f8 <__ssputs_r+0x5c>
 8014536:	6921      	ldr	r1, [r4, #16]
 8014538:	4650      	mov	r0, sl
 801453a:	f7fe fb79 	bl	8012c30 <_free_r>
 801453e:	230c      	movs	r3, #12
 8014540:	f8ca 3000 	str.w	r3, [sl]
 8014544:	89a3      	ldrh	r3, [r4, #12]
 8014546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801454a:	81a3      	strh	r3, [r4, #12]
 801454c:	f04f 30ff 	mov.w	r0, #4294967295
 8014550:	e7e9      	b.n	8014526 <__ssputs_r+0x8a>
	...

08014554 <_svfiprintf_r>:
 8014554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014558:	4698      	mov	r8, r3
 801455a:	898b      	ldrh	r3, [r1, #12]
 801455c:	061b      	lsls	r3, r3, #24
 801455e:	b09d      	sub	sp, #116	@ 0x74
 8014560:	4607      	mov	r7, r0
 8014562:	460d      	mov	r5, r1
 8014564:	4614      	mov	r4, r2
 8014566:	d510      	bpl.n	801458a <_svfiprintf_r+0x36>
 8014568:	690b      	ldr	r3, [r1, #16]
 801456a:	b973      	cbnz	r3, 801458a <_svfiprintf_r+0x36>
 801456c:	2140      	movs	r1, #64	@ 0x40
 801456e:	f7fe fbd3 	bl	8012d18 <_malloc_r>
 8014572:	6028      	str	r0, [r5, #0]
 8014574:	6128      	str	r0, [r5, #16]
 8014576:	b930      	cbnz	r0, 8014586 <_svfiprintf_r+0x32>
 8014578:	230c      	movs	r3, #12
 801457a:	603b      	str	r3, [r7, #0]
 801457c:	f04f 30ff 	mov.w	r0, #4294967295
 8014580:	b01d      	add	sp, #116	@ 0x74
 8014582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014586:	2340      	movs	r3, #64	@ 0x40
 8014588:	616b      	str	r3, [r5, #20]
 801458a:	2300      	movs	r3, #0
 801458c:	9309      	str	r3, [sp, #36]	@ 0x24
 801458e:	2320      	movs	r3, #32
 8014590:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014594:	f8cd 800c 	str.w	r8, [sp, #12]
 8014598:	2330      	movs	r3, #48	@ 0x30
 801459a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014738 <_svfiprintf_r+0x1e4>
 801459e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80145a2:	f04f 0901 	mov.w	r9, #1
 80145a6:	4623      	mov	r3, r4
 80145a8:	469a      	mov	sl, r3
 80145aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80145ae:	b10a      	cbz	r2, 80145b4 <_svfiprintf_r+0x60>
 80145b0:	2a25      	cmp	r2, #37	@ 0x25
 80145b2:	d1f9      	bne.n	80145a8 <_svfiprintf_r+0x54>
 80145b4:	ebba 0b04 	subs.w	fp, sl, r4
 80145b8:	d00b      	beq.n	80145d2 <_svfiprintf_r+0x7e>
 80145ba:	465b      	mov	r3, fp
 80145bc:	4622      	mov	r2, r4
 80145be:	4629      	mov	r1, r5
 80145c0:	4638      	mov	r0, r7
 80145c2:	f7ff ff6b 	bl	801449c <__ssputs_r>
 80145c6:	3001      	adds	r0, #1
 80145c8:	f000 80a7 	beq.w	801471a <_svfiprintf_r+0x1c6>
 80145cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80145ce:	445a      	add	r2, fp
 80145d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80145d2:	f89a 3000 	ldrb.w	r3, [sl]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	f000 809f 	beq.w	801471a <_svfiprintf_r+0x1c6>
 80145dc:	2300      	movs	r3, #0
 80145de:	f04f 32ff 	mov.w	r2, #4294967295
 80145e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80145e6:	f10a 0a01 	add.w	sl, sl, #1
 80145ea:	9304      	str	r3, [sp, #16]
 80145ec:	9307      	str	r3, [sp, #28]
 80145ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80145f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80145f4:	4654      	mov	r4, sl
 80145f6:	2205      	movs	r2, #5
 80145f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145fc:	484e      	ldr	r0, [pc, #312]	@ (8014738 <_svfiprintf_r+0x1e4>)
 80145fe:	f7eb fe0f 	bl	8000220 <memchr>
 8014602:	9a04      	ldr	r2, [sp, #16]
 8014604:	b9d8      	cbnz	r0, 801463e <_svfiprintf_r+0xea>
 8014606:	06d0      	lsls	r0, r2, #27
 8014608:	bf44      	itt	mi
 801460a:	2320      	movmi	r3, #32
 801460c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014610:	0711      	lsls	r1, r2, #28
 8014612:	bf44      	itt	mi
 8014614:	232b      	movmi	r3, #43	@ 0x2b
 8014616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801461a:	f89a 3000 	ldrb.w	r3, [sl]
 801461e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014620:	d015      	beq.n	801464e <_svfiprintf_r+0xfa>
 8014622:	9a07      	ldr	r2, [sp, #28]
 8014624:	4654      	mov	r4, sl
 8014626:	2000      	movs	r0, #0
 8014628:	f04f 0c0a 	mov.w	ip, #10
 801462c:	4621      	mov	r1, r4
 801462e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014632:	3b30      	subs	r3, #48	@ 0x30
 8014634:	2b09      	cmp	r3, #9
 8014636:	d94b      	bls.n	80146d0 <_svfiprintf_r+0x17c>
 8014638:	b1b0      	cbz	r0, 8014668 <_svfiprintf_r+0x114>
 801463a:	9207      	str	r2, [sp, #28]
 801463c:	e014      	b.n	8014668 <_svfiprintf_r+0x114>
 801463e:	eba0 0308 	sub.w	r3, r0, r8
 8014642:	fa09 f303 	lsl.w	r3, r9, r3
 8014646:	4313      	orrs	r3, r2
 8014648:	9304      	str	r3, [sp, #16]
 801464a:	46a2      	mov	sl, r4
 801464c:	e7d2      	b.n	80145f4 <_svfiprintf_r+0xa0>
 801464e:	9b03      	ldr	r3, [sp, #12]
 8014650:	1d19      	adds	r1, r3, #4
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	9103      	str	r1, [sp, #12]
 8014656:	2b00      	cmp	r3, #0
 8014658:	bfbb      	ittet	lt
 801465a:	425b      	neglt	r3, r3
 801465c:	f042 0202 	orrlt.w	r2, r2, #2
 8014660:	9307      	strge	r3, [sp, #28]
 8014662:	9307      	strlt	r3, [sp, #28]
 8014664:	bfb8      	it	lt
 8014666:	9204      	strlt	r2, [sp, #16]
 8014668:	7823      	ldrb	r3, [r4, #0]
 801466a:	2b2e      	cmp	r3, #46	@ 0x2e
 801466c:	d10a      	bne.n	8014684 <_svfiprintf_r+0x130>
 801466e:	7863      	ldrb	r3, [r4, #1]
 8014670:	2b2a      	cmp	r3, #42	@ 0x2a
 8014672:	d132      	bne.n	80146da <_svfiprintf_r+0x186>
 8014674:	9b03      	ldr	r3, [sp, #12]
 8014676:	1d1a      	adds	r2, r3, #4
 8014678:	681b      	ldr	r3, [r3, #0]
 801467a:	9203      	str	r2, [sp, #12]
 801467c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014680:	3402      	adds	r4, #2
 8014682:	9305      	str	r3, [sp, #20]
 8014684:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014748 <_svfiprintf_r+0x1f4>
 8014688:	7821      	ldrb	r1, [r4, #0]
 801468a:	2203      	movs	r2, #3
 801468c:	4650      	mov	r0, sl
 801468e:	f7eb fdc7 	bl	8000220 <memchr>
 8014692:	b138      	cbz	r0, 80146a4 <_svfiprintf_r+0x150>
 8014694:	9b04      	ldr	r3, [sp, #16]
 8014696:	eba0 000a 	sub.w	r0, r0, sl
 801469a:	2240      	movs	r2, #64	@ 0x40
 801469c:	4082      	lsls	r2, r0
 801469e:	4313      	orrs	r3, r2
 80146a0:	3401      	adds	r4, #1
 80146a2:	9304      	str	r3, [sp, #16]
 80146a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146a8:	4824      	ldr	r0, [pc, #144]	@ (801473c <_svfiprintf_r+0x1e8>)
 80146aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80146ae:	2206      	movs	r2, #6
 80146b0:	f7eb fdb6 	bl	8000220 <memchr>
 80146b4:	2800      	cmp	r0, #0
 80146b6:	d036      	beq.n	8014726 <_svfiprintf_r+0x1d2>
 80146b8:	4b21      	ldr	r3, [pc, #132]	@ (8014740 <_svfiprintf_r+0x1ec>)
 80146ba:	bb1b      	cbnz	r3, 8014704 <_svfiprintf_r+0x1b0>
 80146bc:	9b03      	ldr	r3, [sp, #12]
 80146be:	3307      	adds	r3, #7
 80146c0:	f023 0307 	bic.w	r3, r3, #7
 80146c4:	3308      	adds	r3, #8
 80146c6:	9303      	str	r3, [sp, #12]
 80146c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80146ca:	4433      	add	r3, r6
 80146cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80146ce:	e76a      	b.n	80145a6 <_svfiprintf_r+0x52>
 80146d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80146d4:	460c      	mov	r4, r1
 80146d6:	2001      	movs	r0, #1
 80146d8:	e7a8      	b.n	801462c <_svfiprintf_r+0xd8>
 80146da:	2300      	movs	r3, #0
 80146dc:	3401      	adds	r4, #1
 80146de:	9305      	str	r3, [sp, #20]
 80146e0:	4619      	mov	r1, r3
 80146e2:	f04f 0c0a 	mov.w	ip, #10
 80146e6:	4620      	mov	r0, r4
 80146e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80146ec:	3a30      	subs	r2, #48	@ 0x30
 80146ee:	2a09      	cmp	r2, #9
 80146f0:	d903      	bls.n	80146fa <_svfiprintf_r+0x1a6>
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d0c6      	beq.n	8014684 <_svfiprintf_r+0x130>
 80146f6:	9105      	str	r1, [sp, #20]
 80146f8:	e7c4      	b.n	8014684 <_svfiprintf_r+0x130>
 80146fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80146fe:	4604      	mov	r4, r0
 8014700:	2301      	movs	r3, #1
 8014702:	e7f0      	b.n	80146e6 <_svfiprintf_r+0x192>
 8014704:	ab03      	add	r3, sp, #12
 8014706:	9300      	str	r3, [sp, #0]
 8014708:	462a      	mov	r2, r5
 801470a:	4b0e      	ldr	r3, [pc, #56]	@ (8014744 <_svfiprintf_r+0x1f0>)
 801470c:	a904      	add	r1, sp, #16
 801470e:	4638      	mov	r0, r7
 8014710:	f7fc fc7c 	bl	801100c <_printf_float>
 8014714:	1c42      	adds	r2, r0, #1
 8014716:	4606      	mov	r6, r0
 8014718:	d1d6      	bne.n	80146c8 <_svfiprintf_r+0x174>
 801471a:	89ab      	ldrh	r3, [r5, #12]
 801471c:	065b      	lsls	r3, r3, #25
 801471e:	f53f af2d 	bmi.w	801457c <_svfiprintf_r+0x28>
 8014722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014724:	e72c      	b.n	8014580 <_svfiprintf_r+0x2c>
 8014726:	ab03      	add	r3, sp, #12
 8014728:	9300      	str	r3, [sp, #0]
 801472a:	462a      	mov	r2, r5
 801472c:	4b05      	ldr	r3, [pc, #20]	@ (8014744 <_svfiprintf_r+0x1f0>)
 801472e:	a904      	add	r1, sp, #16
 8014730:	4638      	mov	r0, r7
 8014732:	f7fc ff03 	bl	801153c <_printf_i>
 8014736:	e7ed      	b.n	8014714 <_svfiprintf_r+0x1c0>
 8014738:	08017439 	.word	0x08017439
 801473c:	08017443 	.word	0x08017443
 8014740:	0801100d 	.word	0x0801100d
 8014744:	0801449d 	.word	0x0801449d
 8014748:	0801743f 	.word	0x0801743f

0801474c <_sungetc_r>:
 801474c:	b538      	push	{r3, r4, r5, lr}
 801474e:	1c4b      	adds	r3, r1, #1
 8014750:	4614      	mov	r4, r2
 8014752:	d103      	bne.n	801475c <_sungetc_r+0x10>
 8014754:	f04f 35ff 	mov.w	r5, #4294967295
 8014758:	4628      	mov	r0, r5
 801475a:	bd38      	pop	{r3, r4, r5, pc}
 801475c:	8993      	ldrh	r3, [r2, #12]
 801475e:	f023 0320 	bic.w	r3, r3, #32
 8014762:	8193      	strh	r3, [r2, #12]
 8014764:	6853      	ldr	r3, [r2, #4]
 8014766:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8014768:	b2cd      	uxtb	r5, r1
 801476a:	b18a      	cbz	r2, 8014790 <_sungetc_r+0x44>
 801476c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 801476e:	429a      	cmp	r2, r3
 8014770:	dd08      	ble.n	8014784 <_sungetc_r+0x38>
 8014772:	6823      	ldr	r3, [r4, #0]
 8014774:	1e5a      	subs	r2, r3, #1
 8014776:	6022      	str	r2, [r4, #0]
 8014778:	f803 5c01 	strb.w	r5, [r3, #-1]
 801477c:	6863      	ldr	r3, [r4, #4]
 801477e:	3301      	adds	r3, #1
 8014780:	6063      	str	r3, [r4, #4]
 8014782:	e7e9      	b.n	8014758 <_sungetc_r+0xc>
 8014784:	4621      	mov	r1, r4
 8014786:	f000 fbe0 	bl	8014f4a <__submore>
 801478a:	2800      	cmp	r0, #0
 801478c:	d0f1      	beq.n	8014772 <_sungetc_r+0x26>
 801478e:	e7e1      	b.n	8014754 <_sungetc_r+0x8>
 8014790:	6921      	ldr	r1, [r4, #16]
 8014792:	6822      	ldr	r2, [r4, #0]
 8014794:	b141      	cbz	r1, 80147a8 <_sungetc_r+0x5c>
 8014796:	4291      	cmp	r1, r2
 8014798:	d206      	bcs.n	80147a8 <_sungetc_r+0x5c>
 801479a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801479e:	42a9      	cmp	r1, r5
 80147a0:	d102      	bne.n	80147a8 <_sungetc_r+0x5c>
 80147a2:	3a01      	subs	r2, #1
 80147a4:	6022      	str	r2, [r4, #0]
 80147a6:	e7ea      	b.n	801477e <_sungetc_r+0x32>
 80147a8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80147ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80147b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80147b2:	2303      	movs	r3, #3
 80147b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80147b6:	4623      	mov	r3, r4
 80147b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80147bc:	6023      	str	r3, [r4, #0]
 80147be:	2301      	movs	r3, #1
 80147c0:	e7de      	b.n	8014780 <_sungetc_r+0x34>

080147c2 <__ssrefill_r>:
 80147c2:	b510      	push	{r4, lr}
 80147c4:	460c      	mov	r4, r1
 80147c6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80147c8:	b169      	cbz	r1, 80147e6 <__ssrefill_r+0x24>
 80147ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80147ce:	4299      	cmp	r1, r3
 80147d0:	d001      	beq.n	80147d6 <__ssrefill_r+0x14>
 80147d2:	f7fe fa2d 	bl	8012c30 <_free_r>
 80147d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80147d8:	6063      	str	r3, [r4, #4]
 80147da:	2000      	movs	r0, #0
 80147dc:	6360      	str	r0, [r4, #52]	@ 0x34
 80147de:	b113      	cbz	r3, 80147e6 <__ssrefill_r+0x24>
 80147e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80147e2:	6023      	str	r3, [r4, #0]
 80147e4:	bd10      	pop	{r4, pc}
 80147e6:	6923      	ldr	r3, [r4, #16]
 80147e8:	6023      	str	r3, [r4, #0]
 80147ea:	2300      	movs	r3, #0
 80147ec:	6063      	str	r3, [r4, #4]
 80147ee:	89a3      	ldrh	r3, [r4, #12]
 80147f0:	f043 0320 	orr.w	r3, r3, #32
 80147f4:	81a3      	strh	r3, [r4, #12]
 80147f6:	f04f 30ff 	mov.w	r0, #4294967295
 80147fa:	e7f3      	b.n	80147e4 <__ssrefill_r+0x22>

080147fc <__ssvfiscanf_r>:
 80147fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014800:	460c      	mov	r4, r1
 8014802:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8014806:	2100      	movs	r1, #0
 8014808:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801480c:	49a5      	ldr	r1, [pc, #660]	@ (8014aa4 <__ssvfiscanf_r+0x2a8>)
 801480e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8014810:	f10d 0804 	add.w	r8, sp, #4
 8014814:	49a4      	ldr	r1, [pc, #656]	@ (8014aa8 <__ssvfiscanf_r+0x2ac>)
 8014816:	4fa5      	ldr	r7, [pc, #660]	@ (8014aac <__ssvfiscanf_r+0x2b0>)
 8014818:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801481c:	4606      	mov	r6, r0
 801481e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8014820:	9300      	str	r3, [sp, #0]
 8014822:	7813      	ldrb	r3, [r2, #0]
 8014824:	2b00      	cmp	r3, #0
 8014826:	f000 8158 	beq.w	8014ada <__ssvfiscanf_r+0x2de>
 801482a:	5cf9      	ldrb	r1, [r7, r3]
 801482c:	f011 0108 	ands.w	r1, r1, #8
 8014830:	f102 0501 	add.w	r5, r2, #1
 8014834:	d019      	beq.n	801486a <__ssvfiscanf_r+0x6e>
 8014836:	6863      	ldr	r3, [r4, #4]
 8014838:	2b00      	cmp	r3, #0
 801483a:	dd0f      	ble.n	801485c <__ssvfiscanf_r+0x60>
 801483c:	6823      	ldr	r3, [r4, #0]
 801483e:	781a      	ldrb	r2, [r3, #0]
 8014840:	5cba      	ldrb	r2, [r7, r2]
 8014842:	0712      	lsls	r2, r2, #28
 8014844:	d401      	bmi.n	801484a <__ssvfiscanf_r+0x4e>
 8014846:	462a      	mov	r2, r5
 8014848:	e7eb      	b.n	8014822 <__ssvfiscanf_r+0x26>
 801484a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801484c:	3201      	adds	r2, #1
 801484e:	9245      	str	r2, [sp, #276]	@ 0x114
 8014850:	6862      	ldr	r2, [r4, #4]
 8014852:	3301      	adds	r3, #1
 8014854:	3a01      	subs	r2, #1
 8014856:	6062      	str	r2, [r4, #4]
 8014858:	6023      	str	r3, [r4, #0]
 801485a:	e7ec      	b.n	8014836 <__ssvfiscanf_r+0x3a>
 801485c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801485e:	4621      	mov	r1, r4
 8014860:	4630      	mov	r0, r6
 8014862:	4798      	blx	r3
 8014864:	2800      	cmp	r0, #0
 8014866:	d0e9      	beq.n	801483c <__ssvfiscanf_r+0x40>
 8014868:	e7ed      	b.n	8014846 <__ssvfiscanf_r+0x4a>
 801486a:	2b25      	cmp	r3, #37	@ 0x25
 801486c:	d012      	beq.n	8014894 <__ssvfiscanf_r+0x98>
 801486e:	4699      	mov	r9, r3
 8014870:	6863      	ldr	r3, [r4, #4]
 8014872:	2b00      	cmp	r3, #0
 8014874:	f340 8093 	ble.w	801499e <__ssvfiscanf_r+0x1a2>
 8014878:	6822      	ldr	r2, [r4, #0]
 801487a:	7813      	ldrb	r3, [r2, #0]
 801487c:	454b      	cmp	r3, r9
 801487e:	f040 812c 	bne.w	8014ada <__ssvfiscanf_r+0x2de>
 8014882:	6863      	ldr	r3, [r4, #4]
 8014884:	3b01      	subs	r3, #1
 8014886:	6063      	str	r3, [r4, #4]
 8014888:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801488a:	3201      	adds	r2, #1
 801488c:	3301      	adds	r3, #1
 801488e:	6022      	str	r2, [r4, #0]
 8014890:	9345      	str	r3, [sp, #276]	@ 0x114
 8014892:	e7d8      	b.n	8014846 <__ssvfiscanf_r+0x4a>
 8014894:	9141      	str	r1, [sp, #260]	@ 0x104
 8014896:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014898:	7853      	ldrb	r3, [r2, #1]
 801489a:	2b2a      	cmp	r3, #42	@ 0x2a
 801489c:	bf02      	ittt	eq
 801489e:	2310      	moveq	r3, #16
 80148a0:	1c95      	addeq	r5, r2, #2
 80148a2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80148a4:	220a      	movs	r2, #10
 80148a6:	46a9      	mov	r9, r5
 80148a8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80148ac:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80148b0:	2b09      	cmp	r3, #9
 80148b2:	d91e      	bls.n	80148f2 <__ssvfiscanf_r+0xf6>
 80148b4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8014ab0 <__ssvfiscanf_r+0x2b4>
 80148b8:	2203      	movs	r2, #3
 80148ba:	4650      	mov	r0, sl
 80148bc:	f7eb fcb0 	bl	8000220 <memchr>
 80148c0:	b138      	cbz	r0, 80148d2 <__ssvfiscanf_r+0xd6>
 80148c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80148c4:	eba0 000a 	sub.w	r0, r0, sl
 80148c8:	2301      	movs	r3, #1
 80148ca:	4083      	lsls	r3, r0
 80148cc:	4313      	orrs	r3, r2
 80148ce:	9341      	str	r3, [sp, #260]	@ 0x104
 80148d0:	464d      	mov	r5, r9
 80148d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80148d6:	2b78      	cmp	r3, #120	@ 0x78
 80148d8:	d806      	bhi.n	80148e8 <__ssvfiscanf_r+0xec>
 80148da:	2b57      	cmp	r3, #87	@ 0x57
 80148dc:	d810      	bhi.n	8014900 <__ssvfiscanf_r+0x104>
 80148de:	2b25      	cmp	r3, #37	@ 0x25
 80148e0:	d0c5      	beq.n	801486e <__ssvfiscanf_r+0x72>
 80148e2:	d857      	bhi.n	8014994 <__ssvfiscanf_r+0x198>
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d065      	beq.n	80149b4 <__ssvfiscanf_r+0x1b8>
 80148e8:	2303      	movs	r3, #3
 80148ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 80148ec:	230a      	movs	r3, #10
 80148ee:	9342      	str	r3, [sp, #264]	@ 0x108
 80148f0:	e078      	b.n	80149e4 <__ssvfiscanf_r+0x1e8>
 80148f2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80148f4:	fb02 1103 	mla	r1, r2, r3, r1
 80148f8:	3930      	subs	r1, #48	@ 0x30
 80148fa:	9143      	str	r1, [sp, #268]	@ 0x10c
 80148fc:	464d      	mov	r5, r9
 80148fe:	e7d2      	b.n	80148a6 <__ssvfiscanf_r+0xaa>
 8014900:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8014904:	2a20      	cmp	r2, #32
 8014906:	d8ef      	bhi.n	80148e8 <__ssvfiscanf_r+0xec>
 8014908:	a101      	add	r1, pc, #4	@ (adr r1, 8014910 <__ssvfiscanf_r+0x114>)
 801490a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801490e:	bf00      	nop
 8014910:	080149c3 	.word	0x080149c3
 8014914:	080148e9 	.word	0x080148e9
 8014918:	080148e9 	.word	0x080148e9
 801491c:	08014a1d 	.word	0x08014a1d
 8014920:	080148e9 	.word	0x080148e9
 8014924:	080148e9 	.word	0x080148e9
 8014928:	080148e9 	.word	0x080148e9
 801492c:	080148e9 	.word	0x080148e9
 8014930:	080148e9 	.word	0x080148e9
 8014934:	080148e9 	.word	0x080148e9
 8014938:	080148e9 	.word	0x080148e9
 801493c:	08014a33 	.word	0x08014a33
 8014940:	08014a19 	.word	0x08014a19
 8014944:	0801499b 	.word	0x0801499b
 8014948:	0801499b 	.word	0x0801499b
 801494c:	0801499b 	.word	0x0801499b
 8014950:	080148e9 	.word	0x080148e9
 8014954:	080149d5 	.word	0x080149d5
 8014958:	080148e9 	.word	0x080148e9
 801495c:	080148e9 	.word	0x080148e9
 8014960:	080148e9 	.word	0x080148e9
 8014964:	080148e9 	.word	0x080148e9
 8014968:	08014a43 	.word	0x08014a43
 801496c:	080149dd 	.word	0x080149dd
 8014970:	080149bb 	.word	0x080149bb
 8014974:	080148e9 	.word	0x080148e9
 8014978:	080148e9 	.word	0x080148e9
 801497c:	08014a3f 	.word	0x08014a3f
 8014980:	080148e9 	.word	0x080148e9
 8014984:	08014a19 	.word	0x08014a19
 8014988:	080148e9 	.word	0x080148e9
 801498c:	080148e9 	.word	0x080148e9
 8014990:	080149c3 	.word	0x080149c3
 8014994:	3b45      	subs	r3, #69	@ 0x45
 8014996:	2b02      	cmp	r3, #2
 8014998:	d8a6      	bhi.n	80148e8 <__ssvfiscanf_r+0xec>
 801499a:	2305      	movs	r3, #5
 801499c:	e021      	b.n	80149e2 <__ssvfiscanf_r+0x1e6>
 801499e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80149a0:	4621      	mov	r1, r4
 80149a2:	4630      	mov	r0, r6
 80149a4:	4798      	blx	r3
 80149a6:	2800      	cmp	r0, #0
 80149a8:	f43f af66 	beq.w	8014878 <__ssvfiscanf_r+0x7c>
 80149ac:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80149ae:	2800      	cmp	r0, #0
 80149b0:	f040 808b 	bne.w	8014aca <__ssvfiscanf_r+0x2ce>
 80149b4:	f04f 30ff 	mov.w	r0, #4294967295
 80149b8:	e08b      	b.n	8014ad2 <__ssvfiscanf_r+0x2d6>
 80149ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80149bc:	f042 0220 	orr.w	r2, r2, #32
 80149c0:	9241      	str	r2, [sp, #260]	@ 0x104
 80149c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80149c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80149c8:	9241      	str	r2, [sp, #260]	@ 0x104
 80149ca:	2210      	movs	r2, #16
 80149cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80149ce:	9242      	str	r2, [sp, #264]	@ 0x108
 80149d0:	d902      	bls.n	80149d8 <__ssvfiscanf_r+0x1dc>
 80149d2:	e005      	b.n	80149e0 <__ssvfiscanf_r+0x1e4>
 80149d4:	2300      	movs	r3, #0
 80149d6:	9342      	str	r3, [sp, #264]	@ 0x108
 80149d8:	2303      	movs	r3, #3
 80149da:	e002      	b.n	80149e2 <__ssvfiscanf_r+0x1e6>
 80149dc:	2308      	movs	r3, #8
 80149de:	9342      	str	r3, [sp, #264]	@ 0x108
 80149e0:	2304      	movs	r3, #4
 80149e2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80149e4:	6863      	ldr	r3, [r4, #4]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	dd39      	ble.n	8014a5e <__ssvfiscanf_r+0x262>
 80149ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80149ec:	0659      	lsls	r1, r3, #25
 80149ee:	d404      	bmi.n	80149fa <__ssvfiscanf_r+0x1fe>
 80149f0:	6823      	ldr	r3, [r4, #0]
 80149f2:	781a      	ldrb	r2, [r3, #0]
 80149f4:	5cba      	ldrb	r2, [r7, r2]
 80149f6:	0712      	lsls	r2, r2, #28
 80149f8:	d438      	bmi.n	8014a6c <__ssvfiscanf_r+0x270>
 80149fa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80149fc:	2b02      	cmp	r3, #2
 80149fe:	dc47      	bgt.n	8014a90 <__ssvfiscanf_r+0x294>
 8014a00:	466b      	mov	r3, sp
 8014a02:	4622      	mov	r2, r4
 8014a04:	a941      	add	r1, sp, #260	@ 0x104
 8014a06:	4630      	mov	r0, r6
 8014a08:	f000 f86c 	bl	8014ae4 <_scanf_chars>
 8014a0c:	2801      	cmp	r0, #1
 8014a0e:	d064      	beq.n	8014ada <__ssvfiscanf_r+0x2de>
 8014a10:	2802      	cmp	r0, #2
 8014a12:	f47f af18 	bne.w	8014846 <__ssvfiscanf_r+0x4a>
 8014a16:	e7c9      	b.n	80149ac <__ssvfiscanf_r+0x1b0>
 8014a18:	220a      	movs	r2, #10
 8014a1a:	e7d7      	b.n	80149cc <__ssvfiscanf_r+0x1d0>
 8014a1c:	4629      	mov	r1, r5
 8014a1e:	4640      	mov	r0, r8
 8014a20:	f000 fa5a 	bl	8014ed8 <__sccl>
 8014a24:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a2a:	9341      	str	r3, [sp, #260]	@ 0x104
 8014a2c:	4605      	mov	r5, r0
 8014a2e:	2301      	movs	r3, #1
 8014a30:	e7d7      	b.n	80149e2 <__ssvfiscanf_r+0x1e6>
 8014a32:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014a38:	9341      	str	r3, [sp, #260]	@ 0x104
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	e7d1      	b.n	80149e2 <__ssvfiscanf_r+0x1e6>
 8014a3e:	2302      	movs	r3, #2
 8014a40:	e7cf      	b.n	80149e2 <__ssvfiscanf_r+0x1e6>
 8014a42:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8014a44:	06c3      	lsls	r3, r0, #27
 8014a46:	f53f aefe 	bmi.w	8014846 <__ssvfiscanf_r+0x4a>
 8014a4a:	9b00      	ldr	r3, [sp, #0]
 8014a4c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8014a4e:	1d19      	adds	r1, r3, #4
 8014a50:	9100      	str	r1, [sp, #0]
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	07c0      	lsls	r0, r0, #31
 8014a56:	bf4c      	ite	mi
 8014a58:	801a      	strhmi	r2, [r3, #0]
 8014a5a:	601a      	strpl	r2, [r3, #0]
 8014a5c:	e6f3      	b.n	8014846 <__ssvfiscanf_r+0x4a>
 8014a5e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014a60:	4621      	mov	r1, r4
 8014a62:	4630      	mov	r0, r6
 8014a64:	4798      	blx	r3
 8014a66:	2800      	cmp	r0, #0
 8014a68:	d0bf      	beq.n	80149ea <__ssvfiscanf_r+0x1ee>
 8014a6a:	e79f      	b.n	80149ac <__ssvfiscanf_r+0x1b0>
 8014a6c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8014a6e:	3201      	adds	r2, #1
 8014a70:	9245      	str	r2, [sp, #276]	@ 0x114
 8014a72:	6862      	ldr	r2, [r4, #4]
 8014a74:	3a01      	subs	r2, #1
 8014a76:	2a00      	cmp	r2, #0
 8014a78:	6062      	str	r2, [r4, #4]
 8014a7a:	dd02      	ble.n	8014a82 <__ssvfiscanf_r+0x286>
 8014a7c:	3301      	adds	r3, #1
 8014a7e:	6023      	str	r3, [r4, #0]
 8014a80:	e7b6      	b.n	80149f0 <__ssvfiscanf_r+0x1f4>
 8014a82:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014a84:	4621      	mov	r1, r4
 8014a86:	4630      	mov	r0, r6
 8014a88:	4798      	blx	r3
 8014a8a:	2800      	cmp	r0, #0
 8014a8c:	d0b0      	beq.n	80149f0 <__ssvfiscanf_r+0x1f4>
 8014a8e:	e78d      	b.n	80149ac <__ssvfiscanf_r+0x1b0>
 8014a90:	2b04      	cmp	r3, #4
 8014a92:	dc0f      	bgt.n	8014ab4 <__ssvfiscanf_r+0x2b8>
 8014a94:	466b      	mov	r3, sp
 8014a96:	4622      	mov	r2, r4
 8014a98:	a941      	add	r1, sp, #260	@ 0x104
 8014a9a:	4630      	mov	r0, r6
 8014a9c:	f000 f87c 	bl	8014b98 <_scanf_i>
 8014aa0:	e7b4      	b.n	8014a0c <__ssvfiscanf_r+0x210>
 8014aa2:	bf00      	nop
 8014aa4:	0801474d 	.word	0x0801474d
 8014aa8:	080147c3 	.word	0x080147c3
 8014aac:	08017339 	.word	0x08017339
 8014ab0:	0801743f 	.word	0x0801743f
 8014ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8014ae0 <__ssvfiscanf_r+0x2e4>)
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	f43f aec5 	beq.w	8014846 <__ssvfiscanf_r+0x4a>
 8014abc:	466b      	mov	r3, sp
 8014abe:	4622      	mov	r2, r4
 8014ac0:	a941      	add	r1, sp, #260	@ 0x104
 8014ac2:	4630      	mov	r0, r6
 8014ac4:	f7fc fe5a 	bl	801177c <_scanf_float>
 8014ac8:	e7a0      	b.n	8014a0c <__ssvfiscanf_r+0x210>
 8014aca:	89a3      	ldrh	r3, [r4, #12]
 8014acc:	065b      	lsls	r3, r3, #25
 8014ace:	f53f af71 	bmi.w	80149b4 <__ssvfiscanf_r+0x1b8>
 8014ad2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8014ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014ada:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014adc:	e7f9      	b.n	8014ad2 <__ssvfiscanf_r+0x2d6>
 8014ade:	bf00      	nop
 8014ae0:	0801177d 	.word	0x0801177d

08014ae4 <_scanf_chars>:
 8014ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ae8:	4615      	mov	r5, r2
 8014aea:	688a      	ldr	r2, [r1, #8]
 8014aec:	4680      	mov	r8, r0
 8014aee:	460c      	mov	r4, r1
 8014af0:	b932      	cbnz	r2, 8014b00 <_scanf_chars+0x1c>
 8014af2:	698a      	ldr	r2, [r1, #24]
 8014af4:	2a00      	cmp	r2, #0
 8014af6:	bf14      	ite	ne
 8014af8:	f04f 32ff 	movne.w	r2, #4294967295
 8014afc:	2201      	moveq	r2, #1
 8014afe:	608a      	str	r2, [r1, #8]
 8014b00:	6822      	ldr	r2, [r4, #0]
 8014b02:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8014b94 <_scanf_chars+0xb0>
 8014b06:	06d1      	lsls	r1, r2, #27
 8014b08:	bf5f      	itttt	pl
 8014b0a:	681a      	ldrpl	r2, [r3, #0]
 8014b0c:	1d11      	addpl	r1, r2, #4
 8014b0e:	6019      	strpl	r1, [r3, #0]
 8014b10:	6816      	ldrpl	r6, [r2, #0]
 8014b12:	2700      	movs	r7, #0
 8014b14:	69a0      	ldr	r0, [r4, #24]
 8014b16:	b188      	cbz	r0, 8014b3c <_scanf_chars+0x58>
 8014b18:	2801      	cmp	r0, #1
 8014b1a:	d107      	bne.n	8014b2c <_scanf_chars+0x48>
 8014b1c:	682b      	ldr	r3, [r5, #0]
 8014b1e:	781a      	ldrb	r2, [r3, #0]
 8014b20:	6963      	ldr	r3, [r4, #20]
 8014b22:	5c9b      	ldrb	r3, [r3, r2]
 8014b24:	b953      	cbnz	r3, 8014b3c <_scanf_chars+0x58>
 8014b26:	2f00      	cmp	r7, #0
 8014b28:	d031      	beq.n	8014b8e <_scanf_chars+0xaa>
 8014b2a:	e022      	b.n	8014b72 <_scanf_chars+0x8e>
 8014b2c:	2802      	cmp	r0, #2
 8014b2e:	d120      	bne.n	8014b72 <_scanf_chars+0x8e>
 8014b30:	682b      	ldr	r3, [r5, #0]
 8014b32:	781b      	ldrb	r3, [r3, #0]
 8014b34:	f819 3003 	ldrb.w	r3, [r9, r3]
 8014b38:	071b      	lsls	r3, r3, #28
 8014b3a:	d41a      	bmi.n	8014b72 <_scanf_chars+0x8e>
 8014b3c:	6823      	ldr	r3, [r4, #0]
 8014b3e:	06da      	lsls	r2, r3, #27
 8014b40:	bf5e      	ittt	pl
 8014b42:	682b      	ldrpl	r3, [r5, #0]
 8014b44:	781b      	ldrbpl	r3, [r3, #0]
 8014b46:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014b4a:	682a      	ldr	r2, [r5, #0]
 8014b4c:	686b      	ldr	r3, [r5, #4]
 8014b4e:	3201      	adds	r2, #1
 8014b50:	602a      	str	r2, [r5, #0]
 8014b52:	68a2      	ldr	r2, [r4, #8]
 8014b54:	3b01      	subs	r3, #1
 8014b56:	3a01      	subs	r2, #1
 8014b58:	606b      	str	r3, [r5, #4]
 8014b5a:	3701      	adds	r7, #1
 8014b5c:	60a2      	str	r2, [r4, #8]
 8014b5e:	b142      	cbz	r2, 8014b72 <_scanf_chars+0x8e>
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	dcd7      	bgt.n	8014b14 <_scanf_chars+0x30>
 8014b64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014b68:	4629      	mov	r1, r5
 8014b6a:	4640      	mov	r0, r8
 8014b6c:	4798      	blx	r3
 8014b6e:	2800      	cmp	r0, #0
 8014b70:	d0d0      	beq.n	8014b14 <_scanf_chars+0x30>
 8014b72:	6823      	ldr	r3, [r4, #0]
 8014b74:	f013 0310 	ands.w	r3, r3, #16
 8014b78:	d105      	bne.n	8014b86 <_scanf_chars+0xa2>
 8014b7a:	68e2      	ldr	r2, [r4, #12]
 8014b7c:	3201      	adds	r2, #1
 8014b7e:	60e2      	str	r2, [r4, #12]
 8014b80:	69a2      	ldr	r2, [r4, #24]
 8014b82:	b102      	cbz	r2, 8014b86 <_scanf_chars+0xa2>
 8014b84:	7033      	strb	r3, [r6, #0]
 8014b86:	6923      	ldr	r3, [r4, #16]
 8014b88:	443b      	add	r3, r7
 8014b8a:	6123      	str	r3, [r4, #16]
 8014b8c:	2000      	movs	r0, #0
 8014b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b92:	bf00      	nop
 8014b94:	08017339 	.word	0x08017339

08014b98 <_scanf_i>:
 8014b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b9c:	4698      	mov	r8, r3
 8014b9e:	4b74      	ldr	r3, [pc, #464]	@ (8014d70 <_scanf_i+0x1d8>)
 8014ba0:	460c      	mov	r4, r1
 8014ba2:	4682      	mov	sl, r0
 8014ba4:	4616      	mov	r6, r2
 8014ba6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014baa:	b087      	sub	sp, #28
 8014bac:	ab03      	add	r3, sp, #12
 8014bae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014bb2:	4b70      	ldr	r3, [pc, #448]	@ (8014d74 <_scanf_i+0x1dc>)
 8014bb4:	69a1      	ldr	r1, [r4, #24]
 8014bb6:	4a70      	ldr	r2, [pc, #448]	@ (8014d78 <_scanf_i+0x1e0>)
 8014bb8:	2903      	cmp	r1, #3
 8014bba:	bf08      	it	eq
 8014bbc:	461a      	moveq	r2, r3
 8014bbe:	68a3      	ldr	r3, [r4, #8]
 8014bc0:	9201      	str	r2, [sp, #4]
 8014bc2:	1e5a      	subs	r2, r3, #1
 8014bc4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014bc8:	bf88      	it	hi
 8014bca:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014bce:	4627      	mov	r7, r4
 8014bd0:	bf82      	ittt	hi
 8014bd2:	eb03 0905 	addhi.w	r9, r3, r5
 8014bd6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014bda:	60a3      	strhi	r3, [r4, #8]
 8014bdc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014be0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8014be4:	bf98      	it	ls
 8014be6:	f04f 0900 	movls.w	r9, #0
 8014bea:	6023      	str	r3, [r4, #0]
 8014bec:	463d      	mov	r5, r7
 8014bee:	f04f 0b00 	mov.w	fp, #0
 8014bf2:	6831      	ldr	r1, [r6, #0]
 8014bf4:	ab03      	add	r3, sp, #12
 8014bf6:	7809      	ldrb	r1, [r1, #0]
 8014bf8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014bfc:	2202      	movs	r2, #2
 8014bfe:	f7eb fb0f 	bl	8000220 <memchr>
 8014c02:	b328      	cbz	r0, 8014c50 <_scanf_i+0xb8>
 8014c04:	f1bb 0f01 	cmp.w	fp, #1
 8014c08:	d159      	bne.n	8014cbe <_scanf_i+0x126>
 8014c0a:	6862      	ldr	r2, [r4, #4]
 8014c0c:	b92a      	cbnz	r2, 8014c1a <_scanf_i+0x82>
 8014c0e:	6822      	ldr	r2, [r4, #0]
 8014c10:	2108      	movs	r1, #8
 8014c12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014c16:	6061      	str	r1, [r4, #4]
 8014c18:	6022      	str	r2, [r4, #0]
 8014c1a:	6822      	ldr	r2, [r4, #0]
 8014c1c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8014c20:	6022      	str	r2, [r4, #0]
 8014c22:	68a2      	ldr	r2, [r4, #8]
 8014c24:	1e51      	subs	r1, r2, #1
 8014c26:	60a1      	str	r1, [r4, #8]
 8014c28:	b192      	cbz	r2, 8014c50 <_scanf_i+0xb8>
 8014c2a:	6832      	ldr	r2, [r6, #0]
 8014c2c:	1c51      	adds	r1, r2, #1
 8014c2e:	6031      	str	r1, [r6, #0]
 8014c30:	7812      	ldrb	r2, [r2, #0]
 8014c32:	f805 2b01 	strb.w	r2, [r5], #1
 8014c36:	6872      	ldr	r2, [r6, #4]
 8014c38:	3a01      	subs	r2, #1
 8014c3a:	2a00      	cmp	r2, #0
 8014c3c:	6072      	str	r2, [r6, #4]
 8014c3e:	dc07      	bgt.n	8014c50 <_scanf_i+0xb8>
 8014c40:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8014c44:	4631      	mov	r1, r6
 8014c46:	4650      	mov	r0, sl
 8014c48:	4790      	blx	r2
 8014c4a:	2800      	cmp	r0, #0
 8014c4c:	f040 8085 	bne.w	8014d5a <_scanf_i+0x1c2>
 8014c50:	f10b 0b01 	add.w	fp, fp, #1
 8014c54:	f1bb 0f03 	cmp.w	fp, #3
 8014c58:	d1cb      	bne.n	8014bf2 <_scanf_i+0x5a>
 8014c5a:	6863      	ldr	r3, [r4, #4]
 8014c5c:	b90b      	cbnz	r3, 8014c62 <_scanf_i+0xca>
 8014c5e:	230a      	movs	r3, #10
 8014c60:	6063      	str	r3, [r4, #4]
 8014c62:	6863      	ldr	r3, [r4, #4]
 8014c64:	4945      	ldr	r1, [pc, #276]	@ (8014d7c <_scanf_i+0x1e4>)
 8014c66:	6960      	ldr	r0, [r4, #20]
 8014c68:	1ac9      	subs	r1, r1, r3
 8014c6a:	f000 f935 	bl	8014ed8 <__sccl>
 8014c6e:	f04f 0b00 	mov.w	fp, #0
 8014c72:	68a3      	ldr	r3, [r4, #8]
 8014c74:	6822      	ldr	r2, [r4, #0]
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d03d      	beq.n	8014cf6 <_scanf_i+0x15e>
 8014c7a:	6831      	ldr	r1, [r6, #0]
 8014c7c:	6960      	ldr	r0, [r4, #20]
 8014c7e:	f891 c000 	ldrb.w	ip, [r1]
 8014c82:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014c86:	2800      	cmp	r0, #0
 8014c88:	d035      	beq.n	8014cf6 <_scanf_i+0x15e>
 8014c8a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8014c8e:	d124      	bne.n	8014cda <_scanf_i+0x142>
 8014c90:	0510      	lsls	r0, r2, #20
 8014c92:	d522      	bpl.n	8014cda <_scanf_i+0x142>
 8014c94:	f10b 0b01 	add.w	fp, fp, #1
 8014c98:	f1b9 0f00 	cmp.w	r9, #0
 8014c9c:	d003      	beq.n	8014ca6 <_scanf_i+0x10e>
 8014c9e:	3301      	adds	r3, #1
 8014ca0:	f109 39ff 	add.w	r9, r9, #4294967295
 8014ca4:	60a3      	str	r3, [r4, #8]
 8014ca6:	6873      	ldr	r3, [r6, #4]
 8014ca8:	3b01      	subs	r3, #1
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	6073      	str	r3, [r6, #4]
 8014cae:	dd1b      	ble.n	8014ce8 <_scanf_i+0x150>
 8014cb0:	6833      	ldr	r3, [r6, #0]
 8014cb2:	3301      	adds	r3, #1
 8014cb4:	6033      	str	r3, [r6, #0]
 8014cb6:	68a3      	ldr	r3, [r4, #8]
 8014cb8:	3b01      	subs	r3, #1
 8014cba:	60a3      	str	r3, [r4, #8]
 8014cbc:	e7d9      	b.n	8014c72 <_scanf_i+0xda>
 8014cbe:	f1bb 0f02 	cmp.w	fp, #2
 8014cc2:	d1ae      	bne.n	8014c22 <_scanf_i+0x8a>
 8014cc4:	6822      	ldr	r2, [r4, #0]
 8014cc6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8014cca:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8014cce:	d1bf      	bne.n	8014c50 <_scanf_i+0xb8>
 8014cd0:	2110      	movs	r1, #16
 8014cd2:	6061      	str	r1, [r4, #4]
 8014cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014cd8:	e7a2      	b.n	8014c20 <_scanf_i+0x88>
 8014cda:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8014cde:	6022      	str	r2, [r4, #0]
 8014ce0:	780b      	ldrb	r3, [r1, #0]
 8014ce2:	f805 3b01 	strb.w	r3, [r5], #1
 8014ce6:	e7de      	b.n	8014ca6 <_scanf_i+0x10e>
 8014ce8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014cec:	4631      	mov	r1, r6
 8014cee:	4650      	mov	r0, sl
 8014cf0:	4798      	blx	r3
 8014cf2:	2800      	cmp	r0, #0
 8014cf4:	d0df      	beq.n	8014cb6 <_scanf_i+0x11e>
 8014cf6:	6823      	ldr	r3, [r4, #0]
 8014cf8:	05d9      	lsls	r1, r3, #23
 8014cfa:	d50d      	bpl.n	8014d18 <_scanf_i+0x180>
 8014cfc:	42bd      	cmp	r5, r7
 8014cfe:	d909      	bls.n	8014d14 <_scanf_i+0x17c>
 8014d00:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014d04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014d08:	4632      	mov	r2, r6
 8014d0a:	4650      	mov	r0, sl
 8014d0c:	4798      	blx	r3
 8014d0e:	f105 39ff 	add.w	r9, r5, #4294967295
 8014d12:	464d      	mov	r5, r9
 8014d14:	42bd      	cmp	r5, r7
 8014d16:	d028      	beq.n	8014d6a <_scanf_i+0x1d2>
 8014d18:	6822      	ldr	r2, [r4, #0]
 8014d1a:	f012 0210 	ands.w	r2, r2, #16
 8014d1e:	d113      	bne.n	8014d48 <_scanf_i+0x1b0>
 8014d20:	702a      	strb	r2, [r5, #0]
 8014d22:	6863      	ldr	r3, [r4, #4]
 8014d24:	9e01      	ldr	r6, [sp, #4]
 8014d26:	4639      	mov	r1, r7
 8014d28:	4650      	mov	r0, sl
 8014d2a:	47b0      	blx	r6
 8014d2c:	f8d8 3000 	ldr.w	r3, [r8]
 8014d30:	6821      	ldr	r1, [r4, #0]
 8014d32:	1d1a      	adds	r2, r3, #4
 8014d34:	f8c8 2000 	str.w	r2, [r8]
 8014d38:	f011 0f20 	tst.w	r1, #32
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	d00f      	beq.n	8014d60 <_scanf_i+0x1c8>
 8014d40:	6018      	str	r0, [r3, #0]
 8014d42:	68e3      	ldr	r3, [r4, #12]
 8014d44:	3301      	adds	r3, #1
 8014d46:	60e3      	str	r3, [r4, #12]
 8014d48:	6923      	ldr	r3, [r4, #16]
 8014d4a:	1bed      	subs	r5, r5, r7
 8014d4c:	445d      	add	r5, fp
 8014d4e:	442b      	add	r3, r5
 8014d50:	6123      	str	r3, [r4, #16]
 8014d52:	2000      	movs	r0, #0
 8014d54:	b007      	add	sp, #28
 8014d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d5a:	f04f 0b00 	mov.w	fp, #0
 8014d5e:	e7ca      	b.n	8014cf6 <_scanf_i+0x15e>
 8014d60:	07ca      	lsls	r2, r1, #31
 8014d62:	bf4c      	ite	mi
 8014d64:	8018      	strhmi	r0, [r3, #0]
 8014d66:	6018      	strpl	r0, [r3, #0]
 8014d68:	e7eb      	b.n	8014d42 <_scanf_i+0x1aa>
 8014d6a:	2001      	movs	r0, #1
 8014d6c:	e7f2      	b.n	8014d54 <_scanf_i+0x1bc>
 8014d6e:	bf00      	nop
 8014d70:	08017074 	.word	0x08017074
 8014d74:	08014499 	.word	0x08014499
 8014d78:	0801585d 	.word	0x0801585d
 8014d7c:	0801745a 	.word	0x0801745a

08014d80 <__sflush_r>:
 8014d80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d88:	0716      	lsls	r6, r2, #28
 8014d8a:	4605      	mov	r5, r0
 8014d8c:	460c      	mov	r4, r1
 8014d8e:	d454      	bmi.n	8014e3a <__sflush_r+0xba>
 8014d90:	684b      	ldr	r3, [r1, #4]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	dc02      	bgt.n	8014d9c <__sflush_r+0x1c>
 8014d96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014d98:	2b00      	cmp	r3, #0
 8014d9a:	dd48      	ble.n	8014e2e <__sflush_r+0xae>
 8014d9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014d9e:	2e00      	cmp	r6, #0
 8014da0:	d045      	beq.n	8014e2e <__sflush_r+0xae>
 8014da2:	2300      	movs	r3, #0
 8014da4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014da8:	682f      	ldr	r7, [r5, #0]
 8014daa:	6a21      	ldr	r1, [r4, #32]
 8014dac:	602b      	str	r3, [r5, #0]
 8014dae:	d030      	beq.n	8014e12 <__sflush_r+0x92>
 8014db0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014db2:	89a3      	ldrh	r3, [r4, #12]
 8014db4:	0759      	lsls	r1, r3, #29
 8014db6:	d505      	bpl.n	8014dc4 <__sflush_r+0x44>
 8014db8:	6863      	ldr	r3, [r4, #4]
 8014dba:	1ad2      	subs	r2, r2, r3
 8014dbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014dbe:	b10b      	cbz	r3, 8014dc4 <__sflush_r+0x44>
 8014dc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014dc2:	1ad2      	subs	r2, r2, r3
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014dc8:	6a21      	ldr	r1, [r4, #32]
 8014dca:	4628      	mov	r0, r5
 8014dcc:	47b0      	blx	r6
 8014dce:	1c43      	adds	r3, r0, #1
 8014dd0:	89a3      	ldrh	r3, [r4, #12]
 8014dd2:	d106      	bne.n	8014de2 <__sflush_r+0x62>
 8014dd4:	6829      	ldr	r1, [r5, #0]
 8014dd6:	291d      	cmp	r1, #29
 8014dd8:	d82b      	bhi.n	8014e32 <__sflush_r+0xb2>
 8014dda:	4a2a      	ldr	r2, [pc, #168]	@ (8014e84 <__sflush_r+0x104>)
 8014ddc:	410a      	asrs	r2, r1
 8014dde:	07d6      	lsls	r6, r2, #31
 8014de0:	d427      	bmi.n	8014e32 <__sflush_r+0xb2>
 8014de2:	2200      	movs	r2, #0
 8014de4:	6062      	str	r2, [r4, #4]
 8014de6:	04d9      	lsls	r1, r3, #19
 8014de8:	6922      	ldr	r2, [r4, #16]
 8014dea:	6022      	str	r2, [r4, #0]
 8014dec:	d504      	bpl.n	8014df8 <__sflush_r+0x78>
 8014dee:	1c42      	adds	r2, r0, #1
 8014df0:	d101      	bne.n	8014df6 <__sflush_r+0x76>
 8014df2:	682b      	ldr	r3, [r5, #0]
 8014df4:	b903      	cbnz	r3, 8014df8 <__sflush_r+0x78>
 8014df6:	6560      	str	r0, [r4, #84]	@ 0x54
 8014df8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014dfa:	602f      	str	r7, [r5, #0]
 8014dfc:	b1b9      	cbz	r1, 8014e2e <__sflush_r+0xae>
 8014dfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014e02:	4299      	cmp	r1, r3
 8014e04:	d002      	beq.n	8014e0c <__sflush_r+0x8c>
 8014e06:	4628      	mov	r0, r5
 8014e08:	f7fd ff12 	bl	8012c30 <_free_r>
 8014e0c:	2300      	movs	r3, #0
 8014e0e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014e10:	e00d      	b.n	8014e2e <__sflush_r+0xae>
 8014e12:	2301      	movs	r3, #1
 8014e14:	4628      	mov	r0, r5
 8014e16:	47b0      	blx	r6
 8014e18:	4602      	mov	r2, r0
 8014e1a:	1c50      	adds	r0, r2, #1
 8014e1c:	d1c9      	bne.n	8014db2 <__sflush_r+0x32>
 8014e1e:	682b      	ldr	r3, [r5, #0]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d0c6      	beq.n	8014db2 <__sflush_r+0x32>
 8014e24:	2b1d      	cmp	r3, #29
 8014e26:	d001      	beq.n	8014e2c <__sflush_r+0xac>
 8014e28:	2b16      	cmp	r3, #22
 8014e2a:	d11e      	bne.n	8014e6a <__sflush_r+0xea>
 8014e2c:	602f      	str	r7, [r5, #0]
 8014e2e:	2000      	movs	r0, #0
 8014e30:	e022      	b.n	8014e78 <__sflush_r+0xf8>
 8014e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e36:	b21b      	sxth	r3, r3
 8014e38:	e01b      	b.n	8014e72 <__sflush_r+0xf2>
 8014e3a:	690f      	ldr	r7, [r1, #16]
 8014e3c:	2f00      	cmp	r7, #0
 8014e3e:	d0f6      	beq.n	8014e2e <__sflush_r+0xae>
 8014e40:	0793      	lsls	r3, r2, #30
 8014e42:	680e      	ldr	r6, [r1, #0]
 8014e44:	bf08      	it	eq
 8014e46:	694b      	ldreq	r3, [r1, #20]
 8014e48:	600f      	str	r7, [r1, #0]
 8014e4a:	bf18      	it	ne
 8014e4c:	2300      	movne	r3, #0
 8014e4e:	eba6 0807 	sub.w	r8, r6, r7
 8014e52:	608b      	str	r3, [r1, #8]
 8014e54:	f1b8 0f00 	cmp.w	r8, #0
 8014e58:	dde9      	ble.n	8014e2e <__sflush_r+0xae>
 8014e5a:	6a21      	ldr	r1, [r4, #32]
 8014e5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014e5e:	4643      	mov	r3, r8
 8014e60:	463a      	mov	r2, r7
 8014e62:	4628      	mov	r0, r5
 8014e64:	47b0      	blx	r6
 8014e66:	2800      	cmp	r0, #0
 8014e68:	dc08      	bgt.n	8014e7c <__sflush_r+0xfc>
 8014e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e72:	81a3      	strh	r3, [r4, #12]
 8014e74:	f04f 30ff 	mov.w	r0, #4294967295
 8014e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e7c:	4407      	add	r7, r0
 8014e7e:	eba8 0800 	sub.w	r8, r8, r0
 8014e82:	e7e7      	b.n	8014e54 <__sflush_r+0xd4>
 8014e84:	dfbffffe 	.word	0xdfbffffe

08014e88 <_fflush_r>:
 8014e88:	b538      	push	{r3, r4, r5, lr}
 8014e8a:	690b      	ldr	r3, [r1, #16]
 8014e8c:	4605      	mov	r5, r0
 8014e8e:	460c      	mov	r4, r1
 8014e90:	b913      	cbnz	r3, 8014e98 <_fflush_r+0x10>
 8014e92:	2500      	movs	r5, #0
 8014e94:	4628      	mov	r0, r5
 8014e96:	bd38      	pop	{r3, r4, r5, pc}
 8014e98:	b118      	cbz	r0, 8014ea2 <_fflush_r+0x1a>
 8014e9a:	6a03      	ldr	r3, [r0, #32]
 8014e9c:	b90b      	cbnz	r3, 8014ea2 <_fflush_r+0x1a>
 8014e9e:	f7fc ff0d 	bl	8011cbc <__sinit>
 8014ea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d0f3      	beq.n	8014e92 <_fflush_r+0xa>
 8014eaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014eac:	07d0      	lsls	r0, r2, #31
 8014eae:	d404      	bmi.n	8014eba <_fflush_r+0x32>
 8014eb0:	0599      	lsls	r1, r3, #22
 8014eb2:	d402      	bmi.n	8014eba <_fflush_r+0x32>
 8014eb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014eb6:	f7fd f856 	bl	8011f66 <__retarget_lock_acquire_recursive>
 8014eba:	4628      	mov	r0, r5
 8014ebc:	4621      	mov	r1, r4
 8014ebe:	f7ff ff5f 	bl	8014d80 <__sflush_r>
 8014ec2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014ec4:	07da      	lsls	r2, r3, #31
 8014ec6:	4605      	mov	r5, r0
 8014ec8:	d4e4      	bmi.n	8014e94 <_fflush_r+0xc>
 8014eca:	89a3      	ldrh	r3, [r4, #12]
 8014ecc:	059b      	lsls	r3, r3, #22
 8014ece:	d4e1      	bmi.n	8014e94 <_fflush_r+0xc>
 8014ed0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014ed2:	f7fd f849 	bl	8011f68 <__retarget_lock_release_recursive>
 8014ed6:	e7dd      	b.n	8014e94 <_fflush_r+0xc>

08014ed8 <__sccl>:
 8014ed8:	b570      	push	{r4, r5, r6, lr}
 8014eda:	780b      	ldrb	r3, [r1, #0]
 8014edc:	4604      	mov	r4, r0
 8014ede:	2b5e      	cmp	r3, #94	@ 0x5e
 8014ee0:	bf0b      	itete	eq
 8014ee2:	784b      	ldrbeq	r3, [r1, #1]
 8014ee4:	1c4a      	addne	r2, r1, #1
 8014ee6:	1c8a      	addeq	r2, r1, #2
 8014ee8:	2100      	movne	r1, #0
 8014eea:	bf08      	it	eq
 8014eec:	2101      	moveq	r1, #1
 8014eee:	3801      	subs	r0, #1
 8014ef0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8014ef4:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014ef8:	42a8      	cmp	r0, r5
 8014efa:	d1fb      	bne.n	8014ef4 <__sccl+0x1c>
 8014efc:	b90b      	cbnz	r3, 8014f02 <__sccl+0x2a>
 8014efe:	1e50      	subs	r0, r2, #1
 8014f00:	bd70      	pop	{r4, r5, r6, pc}
 8014f02:	f081 0101 	eor.w	r1, r1, #1
 8014f06:	54e1      	strb	r1, [r4, r3]
 8014f08:	4610      	mov	r0, r2
 8014f0a:	4602      	mov	r2, r0
 8014f0c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014f10:	2d2d      	cmp	r5, #45	@ 0x2d
 8014f12:	d005      	beq.n	8014f20 <__sccl+0x48>
 8014f14:	2d5d      	cmp	r5, #93	@ 0x5d
 8014f16:	d016      	beq.n	8014f46 <__sccl+0x6e>
 8014f18:	2d00      	cmp	r5, #0
 8014f1a:	d0f1      	beq.n	8014f00 <__sccl+0x28>
 8014f1c:	462b      	mov	r3, r5
 8014f1e:	e7f2      	b.n	8014f06 <__sccl+0x2e>
 8014f20:	7846      	ldrb	r6, [r0, #1]
 8014f22:	2e5d      	cmp	r6, #93	@ 0x5d
 8014f24:	d0fa      	beq.n	8014f1c <__sccl+0x44>
 8014f26:	42b3      	cmp	r3, r6
 8014f28:	dcf8      	bgt.n	8014f1c <__sccl+0x44>
 8014f2a:	3002      	adds	r0, #2
 8014f2c:	461a      	mov	r2, r3
 8014f2e:	3201      	adds	r2, #1
 8014f30:	4296      	cmp	r6, r2
 8014f32:	54a1      	strb	r1, [r4, r2]
 8014f34:	dcfb      	bgt.n	8014f2e <__sccl+0x56>
 8014f36:	1af2      	subs	r2, r6, r3
 8014f38:	3a01      	subs	r2, #1
 8014f3a:	1c5d      	adds	r5, r3, #1
 8014f3c:	42b3      	cmp	r3, r6
 8014f3e:	bfa8      	it	ge
 8014f40:	2200      	movge	r2, #0
 8014f42:	18ab      	adds	r3, r5, r2
 8014f44:	e7e1      	b.n	8014f0a <__sccl+0x32>
 8014f46:	4610      	mov	r0, r2
 8014f48:	e7da      	b.n	8014f00 <__sccl+0x28>

08014f4a <__submore>:
 8014f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f4e:	460c      	mov	r4, r1
 8014f50:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8014f52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014f56:	4299      	cmp	r1, r3
 8014f58:	d11d      	bne.n	8014f96 <__submore+0x4c>
 8014f5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8014f5e:	f7fd fedb 	bl	8012d18 <_malloc_r>
 8014f62:	b918      	cbnz	r0, 8014f6c <__submore+0x22>
 8014f64:	f04f 30ff 	mov.w	r0, #4294967295
 8014f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014f70:	63a3      	str	r3, [r4, #56]	@ 0x38
 8014f72:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8014f76:	6360      	str	r0, [r4, #52]	@ 0x34
 8014f78:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8014f7c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8014f80:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8014f84:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014f88:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8014f8c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8014f90:	6020      	str	r0, [r4, #0]
 8014f92:	2000      	movs	r0, #0
 8014f94:	e7e8      	b.n	8014f68 <__submore+0x1e>
 8014f96:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8014f98:	0077      	lsls	r7, r6, #1
 8014f9a:	463a      	mov	r2, r7
 8014f9c:	f000 fbc1 	bl	8015722 <_realloc_r>
 8014fa0:	4605      	mov	r5, r0
 8014fa2:	2800      	cmp	r0, #0
 8014fa4:	d0de      	beq.n	8014f64 <__submore+0x1a>
 8014fa6:	eb00 0806 	add.w	r8, r0, r6
 8014faa:	4601      	mov	r1, r0
 8014fac:	4632      	mov	r2, r6
 8014fae:	4640      	mov	r0, r8
 8014fb0:	f7fc ffdb 	bl	8011f6a <memcpy>
 8014fb4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8014fb8:	f8c4 8000 	str.w	r8, [r4]
 8014fbc:	e7e9      	b.n	8014f92 <__submore+0x48>

08014fbe <memmove>:
 8014fbe:	4288      	cmp	r0, r1
 8014fc0:	b510      	push	{r4, lr}
 8014fc2:	eb01 0402 	add.w	r4, r1, r2
 8014fc6:	d902      	bls.n	8014fce <memmove+0x10>
 8014fc8:	4284      	cmp	r4, r0
 8014fca:	4623      	mov	r3, r4
 8014fcc:	d807      	bhi.n	8014fde <memmove+0x20>
 8014fce:	1e43      	subs	r3, r0, #1
 8014fd0:	42a1      	cmp	r1, r4
 8014fd2:	d008      	beq.n	8014fe6 <memmove+0x28>
 8014fd4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014fd8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014fdc:	e7f8      	b.n	8014fd0 <memmove+0x12>
 8014fde:	4402      	add	r2, r0
 8014fe0:	4601      	mov	r1, r0
 8014fe2:	428a      	cmp	r2, r1
 8014fe4:	d100      	bne.n	8014fe8 <memmove+0x2a>
 8014fe6:	bd10      	pop	{r4, pc}
 8014fe8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014fec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014ff0:	e7f7      	b.n	8014fe2 <memmove+0x24>
	...

08014ff4 <_sbrk_r>:
 8014ff4:	b538      	push	{r3, r4, r5, lr}
 8014ff6:	4d06      	ldr	r5, [pc, #24]	@ (8015010 <_sbrk_r+0x1c>)
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	4604      	mov	r4, r0
 8014ffc:	4608      	mov	r0, r1
 8014ffe:	602b      	str	r3, [r5, #0]
 8015000:	f7ef fab4 	bl	800456c <_sbrk>
 8015004:	1c43      	adds	r3, r0, #1
 8015006:	d102      	bne.n	801500e <_sbrk_r+0x1a>
 8015008:	682b      	ldr	r3, [r5, #0]
 801500a:	b103      	cbz	r3, 801500e <_sbrk_r+0x1a>
 801500c:	6023      	str	r3, [r4, #0]
 801500e:	bd38      	pop	{r3, r4, r5, pc}
 8015010:	200026d4 	.word	0x200026d4
 8015014:	00000000 	.word	0x00000000

08015018 <nan>:
 8015018:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015020 <nan+0x8>
 801501c:	4770      	bx	lr
 801501e:	bf00      	nop
 8015020:	00000000 	.word	0x00000000
 8015024:	7ff80000 	.word	0x7ff80000

08015028 <__assert_func>:
 8015028:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801502a:	4614      	mov	r4, r2
 801502c:	461a      	mov	r2, r3
 801502e:	4b09      	ldr	r3, [pc, #36]	@ (8015054 <__assert_func+0x2c>)
 8015030:	681b      	ldr	r3, [r3, #0]
 8015032:	4605      	mov	r5, r0
 8015034:	68d8      	ldr	r0, [r3, #12]
 8015036:	b954      	cbnz	r4, 801504e <__assert_func+0x26>
 8015038:	4b07      	ldr	r3, [pc, #28]	@ (8015058 <__assert_func+0x30>)
 801503a:	461c      	mov	r4, r3
 801503c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015040:	9100      	str	r1, [sp, #0]
 8015042:	462b      	mov	r3, r5
 8015044:	4905      	ldr	r1, [pc, #20]	@ (801505c <__assert_func+0x34>)
 8015046:	f000 fc19 	bl	801587c <fiprintf>
 801504a:	f000 fc29 	bl	80158a0 <abort>
 801504e:	4b04      	ldr	r3, [pc, #16]	@ (8015060 <__assert_func+0x38>)
 8015050:	e7f4      	b.n	801503c <__assert_func+0x14>
 8015052:	bf00      	nop
 8015054:	200001e4 	.word	0x200001e4
 8015058:	080174a8 	.word	0x080174a8
 801505c:	0801747a 	.word	0x0801747a
 8015060:	0801746d 	.word	0x0801746d

08015064 <_calloc_r>:
 8015064:	b570      	push	{r4, r5, r6, lr}
 8015066:	fba1 5402 	umull	r5, r4, r1, r2
 801506a:	b93c      	cbnz	r4, 801507c <_calloc_r+0x18>
 801506c:	4629      	mov	r1, r5
 801506e:	f7fd fe53 	bl	8012d18 <_malloc_r>
 8015072:	4606      	mov	r6, r0
 8015074:	b928      	cbnz	r0, 8015082 <_calloc_r+0x1e>
 8015076:	2600      	movs	r6, #0
 8015078:	4630      	mov	r0, r6
 801507a:	bd70      	pop	{r4, r5, r6, pc}
 801507c:	220c      	movs	r2, #12
 801507e:	6002      	str	r2, [r0, #0]
 8015080:	e7f9      	b.n	8015076 <_calloc_r+0x12>
 8015082:	462a      	mov	r2, r5
 8015084:	4621      	mov	r1, r4
 8015086:	f7fc fede 	bl	8011e46 <memset>
 801508a:	e7f5      	b.n	8015078 <_calloc_r+0x14>

0801508c <rshift>:
 801508c:	6903      	ldr	r3, [r0, #16]
 801508e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015092:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015096:	ea4f 1261 	mov.w	r2, r1, asr #5
 801509a:	f100 0414 	add.w	r4, r0, #20
 801509e:	dd45      	ble.n	801512c <rshift+0xa0>
 80150a0:	f011 011f 	ands.w	r1, r1, #31
 80150a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80150a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80150ac:	d10c      	bne.n	80150c8 <rshift+0x3c>
 80150ae:	f100 0710 	add.w	r7, r0, #16
 80150b2:	4629      	mov	r1, r5
 80150b4:	42b1      	cmp	r1, r6
 80150b6:	d334      	bcc.n	8015122 <rshift+0x96>
 80150b8:	1a9b      	subs	r3, r3, r2
 80150ba:	009b      	lsls	r3, r3, #2
 80150bc:	1eea      	subs	r2, r5, #3
 80150be:	4296      	cmp	r6, r2
 80150c0:	bf38      	it	cc
 80150c2:	2300      	movcc	r3, #0
 80150c4:	4423      	add	r3, r4
 80150c6:	e015      	b.n	80150f4 <rshift+0x68>
 80150c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80150cc:	f1c1 0820 	rsb	r8, r1, #32
 80150d0:	40cf      	lsrs	r7, r1
 80150d2:	f105 0e04 	add.w	lr, r5, #4
 80150d6:	46a1      	mov	r9, r4
 80150d8:	4576      	cmp	r6, lr
 80150da:	46f4      	mov	ip, lr
 80150dc:	d815      	bhi.n	801510a <rshift+0x7e>
 80150de:	1a9a      	subs	r2, r3, r2
 80150e0:	0092      	lsls	r2, r2, #2
 80150e2:	3a04      	subs	r2, #4
 80150e4:	3501      	adds	r5, #1
 80150e6:	42ae      	cmp	r6, r5
 80150e8:	bf38      	it	cc
 80150ea:	2200      	movcc	r2, #0
 80150ec:	18a3      	adds	r3, r4, r2
 80150ee:	50a7      	str	r7, [r4, r2]
 80150f0:	b107      	cbz	r7, 80150f4 <rshift+0x68>
 80150f2:	3304      	adds	r3, #4
 80150f4:	1b1a      	subs	r2, r3, r4
 80150f6:	42a3      	cmp	r3, r4
 80150f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80150fc:	bf08      	it	eq
 80150fe:	2300      	moveq	r3, #0
 8015100:	6102      	str	r2, [r0, #16]
 8015102:	bf08      	it	eq
 8015104:	6143      	streq	r3, [r0, #20]
 8015106:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801510a:	f8dc c000 	ldr.w	ip, [ip]
 801510e:	fa0c fc08 	lsl.w	ip, ip, r8
 8015112:	ea4c 0707 	orr.w	r7, ip, r7
 8015116:	f849 7b04 	str.w	r7, [r9], #4
 801511a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801511e:	40cf      	lsrs	r7, r1
 8015120:	e7da      	b.n	80150d8 <rshift+0x4c>
 8015122:	f851 cb04 	ldr.w	ip, [r1], #4
 8015126:	f847 cf04 	str.w	ip, [r7, #4]!
 801512a:	e7c3      	b.n	80150b4 <rshift+0x28>
 801512c:	4623      	mov	r3, r4
 801512e:	e7e1      	b.n	80150f4 <rshift+0x68>

08015130 <__hexdig_fun>:
 8015130:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8015134:	2b09      	cmp	r3, #9
 8015136:	d802      	bhi.n	801513e <__hexdig_fun+0xe>
 8015138:	3820      	subs	r0, #32
 801513a:	b2c0      	uxtb	r0, r0
 801513c:	4770      	bx	lr
 801513e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8015142:	2b05      	cmp	r3, #5
 8015144:	d801      	bhi.n	801514a <__hexdig_fun+0x1a>
 8015146:	3847      	subs	r0, #71	@ 0x47
 8015148:	e7f7      	b.n	801513a <__hexdig_fun+0xa>
 801514a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801514e:	2b05      	cmp	r3, #5
 8015150:	d801      	bhi.n	8015156 <__hexdig_fun+0x26>
 8015152:	3827      	subs	r0, #39	@ 0x27
 8015154:	e7f1      	b.n	801513a <__hexdig_fun+0xa>
 8015156:	2000      	movs	r0, #0
 8015158:	4770      	bx	lr
	...

0801515c <__gethex>:
 801515c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015160:	b085      	sub	sp, #20
 8015162:	468a      	mov	sl, r1
 8015164:	9302      	str	r3, [sp, #8]
 8015166:	680b      	ldr	r3, [r1, #0]
 8015168:	9001      	str	r0, [sp, #4]
 801516a:	4690      	mov	r8, r2
 801516c:	1c9c      	adds	r4, r3, #2
 801516e:	46a1      	mov	r9, r4
 8015170:	f814 0b01 	ldrb.w	r0, [r4], #1
 8015174:	2830      	cmp	r0, #48	@ 0x30
 8015176:	d0fa      	beq.n	801516e <__gethex+0x12>
 8015178:	eba9 0303 	sub.w	r3, r9, r3
 801517c:	f1a3 0b02 	sub.w	fp, r3, #2
 8015180:	f7ff ffd6 	bl	8015130 <__hexdig_fun>
 8015184:	4605      	mov	r5, r0
 8015186:	2800      	cmp	r0, #0
 8015188:	d168      	bne.n	801525c <__gethex+0x100>
 801518a:	49a0      	ldr	r1, [pc, #640]	@ (801540c <__gethex+0x2b0>)
 801518c:	2201      	movs	r2, #1
 801518e:	4648      	mov	r0, r9
 8015190:	f7fc fe61 	bl	8011e56 <strncmp>
 8015194:	4607      	mov	r7, r0
 8015196:	2800      	cmp	r0, #0
 8015198:	d167      	bne.n	801526a <__gethex+0x10e>
 801519a:	f899 0001 	ldrb.w	r0, [r9, #1]
 801519e:	4626      	mov	r6, r4
 80151a0:	f7ff ffc6 	bl	8015130 <__hexdig_fun>
 80151a4:	2800      	cmp	r0, #0
 80151a6:	d062      	beq.n	801526e <__gethex+0x112>
 80151a8:	4623      	mov	r3, r4
 80151aa:	7818      	ldrb	r0, [r3, #0]
 80151ac:	2830      	cmp	r0, #48	@ 0x30
 80151ae:	4699      	mov	r9, r3
 80151b0:	f103 0301 	add.w	r3, r3, #1
 80151b4:	d0f9      	beq.n	80151aa <__gethex+0x4e>
 80151b6:	f7ff ffbb 	bl	8015130 <__hexdig_fun>
 80151ba:	fab0 f580 	clz	r5, r0
 80151be:	096d      	lsrs	r5, r5, #5
 80151c0:	f04f 0b01 	mov.w	fp, #1
 80151c4:	464a      	mov	r2, r9
 80151c6:	4616      	mov	r6, r2
 80151c8:	3201      	adds	r2, #1
 80151ca:	7830      	ldrb	r0, [r6, #0]
 80151cc:	f7ff ffb0 	bl	8015130 <__hexdig_fun>
 80151d0:	2800      	cmp	r0, #0
 80151d2:	d1f8      	bne.n	80151c6 <__gethex+0x6a>
 80151d4:	498d      	ldr	r1, [pc, #564]	@ (801540c <__gethex+0x2b0>)
 80151d6:	2201      	movs	r2, #1
 80151d8:	4630      	mov	r0, r6
 80151da:	f7fc fe3c 	bl	8011e56 <strncmp>
 80151de:	2800      	cmp	r0, #0
 80151e0:	d13f      	bne.n	8015262 <__gethex+0x106>
 80151e2:	b944      	cbnz	r4, 80151f6 <__gethex+0x9a>
 80151e4:	1c74      	adds	r4, r6, #1
 80151e6:	4622      	mov	r2, r4
 80151e8:	4616      	mov	r6, r2
 80151ea:	3201      	adds	r2, #1
 80151ec:	7830      	ldrb	r0, [r6, #0]
 80151ee:	f7ff ff9f 	bl	8015130 <__hexdig_fun>
 80151f2:	2800      	cmp	r0, #0
 80151f4:	d1f8      	bne.n	80151e8 <__gethex+0x8c>
 80151f6:	1ba4      	subs	r4, r4, r6
 80151f8:	00a7      	lsls	r7, r4, #2
 80151fa:	7833      	ldrb	r3, [r6, #0]
 80151fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8015200:	2b50      	cmp	r3, #80	@ 0x50
 8015202:	d13e      	bne.n	8015282 <__gethex+0x126>
 8015204:	7873      	ldrb	r3, [r6, #1]
 8015206:	2b2b      	cmp	r3, #43	@ 0x2b
 8015208:	d033      	beq.n	8015272 <__gethex+0x116>
 801520a:	2b2d      	cmp	r3, #45	@ 0x2d
 801520c:	d034      	beq.n	8015278 <__gethex+0x11c>
 801520e:	1c71      	adds	r1, r6, #1
 8015210:	2400      	movs	r4, #0
 8015212:	7808      	ldrb	r0, [r1, #0]
 8015214:	f7ff ff8c 	bl	8015130 <__hexdig_fun>
 8015218:	1e43      	subs	r3, r0, #1
 801521a:	b2db      	uxtb	r3, r3
 801521c:	2b18      	cmp	r3, #24
 801521e:	d830      	bhi.n	8015282 <__gethex+0x126>
 8015220:	f1a0 0210 	sub.w	r2, r0, #16
 8015224:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015228:	f7ff ff82 	bl	8015130 <__hexdig_fun>
 801522c:	f100 3cff 	add.w	ip, r0, #4294967295
 8015230:	fa5f fc8c 	uxtb.w	ip, ip
 8015234:	f1bc 0f18 	cmp.w	ip, #24
 8015238:	f04f 030a 	mov.w	r3, #10
 801523c:	d91e      	bls.n	801527c <__gethex+0x120>
 801523e:	b104      	cbz	r4, 8015242 <__gethex+0xe6>
 8015240:	4252      	negs	r2, r2
 8015242:	4417      	add	r7, r2
 8015244:	f8ca 1000 	str.w	r1, [sl]
 8015248:	b1ed      	cbz	r5, 8015286 <__gethex+0x12a>
 801524a:	f1bb 0f00 	cmp.w	fp, #0
 801524e:	bf0c      	ite	eq
 8015250:	2506      	moveq	r5, #6
 8015252:	2500      	movne	r5, #0
 8015254:	4628      	mov	r0, r5
 8015256:	b005      	add	sp, #20
 8015258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801525c:	2500      	movs	r5, #0
 801525e:	462c      	mov	r4, r5
 8015260:	e7b0      	b.n	80151c4 <__gethex+0x68>
 8015262:	2c00      	cmp	r4, #0
 8015264:	d1c7      	bne.n	80151f6 <__gethex+0x9a>
 8015266:	4627      	mov	r7, r4
 8015268:	e7c7      	b.n	80151fa <__gethex+0x9e>
 801526a:	464e      	mov	r6, r9
 801526c:	462f      	mov	r7, r5
 801526e:	2501      	movs	r5, #1
 8015270:	e7c3      	b.n	80151fa <__gethex+0x9e>
 8015272:	2400      	movs	r4, #0
 8015274:	1cb1      	adds	r1, r6, #2
 8015276:	e7cc      	b.n	8015212 <__gethex+0xb6>
 8015278:	2401      	movs	r4, #1
 801527a:	e7fb      	b.n	8015274 <__gethex+0x118>
 801527c:	fb03 0002 	mla	r0, r3, r2, r0
 8015280:	e7ce      	b.n	8015220 <__gethex+0xc4>
 8015282:	4631      	mov	r1, r6
 8015284:	e7de      	b.n	8015244 <__gethex+0xe8>
 8015286:	eba6 0309 	sub.w	r3, r6, r9
 801528a:	3b01      	subs	r3, #1
 801528c:	4629      	mov	r1, r5
 801528e:	2b07      	cmp	r3, #7
 8015290:	dc0a      	bgt.n	80152a8 <__gethex+0x14c>
 8015292:	9801      	ldr	r0, [sp, #4]
 8015294:	f7fd fdcc 	bl	8012e30 <_Balloc>
 8015298:	4604      	mov	r4, r0
 801529a:	b940      	cbnz	r0, 80152ae <__gethex+0x152>
 801529c:	4b5c      	ldr	r3, [pc, #368]	@ (8015410 <__gethex+0x2b4>)
 801529e:	4602      	mov	r2, r0
 80152a0:	21e4      	movs	r1, #228	@ 0xe4
 80152a2:	485c      	ldr	r0, [pc, #368]	@ (8015414 <__gethex+0x2b8>)
 80152a4:	f7ff fec0 	bl	8015028 <__assert_func>
 80152a8:	3101      	adds	r1, #1
 80152aa:	105b      	asrs	r3, r3, #1
 80152ac:	e7ef      	b.n	801528e <__gethex+0x132>
 80152ae:	f100 0a14 	add.w	sl, r0, #20
 80152b2:	2300      	movs	r3, #0
 80152b4:	4655      	mov	r5, sl
 80152b6:	469b      	mov	fp, r3
 80152b8:	45b1      	cmp	r9, r6
 80152ba:	d337      	bcc.n	801532c <__gethex+0x1d0>
 80152bc:	f845 bb04 	str.w	fp, [r5], #4
 80152c0:	eba5 050a 	sub.w	r5, r5, sl
 80152c4:	10ad      	asrs	r5, r5, #2
 80152c6:	6125      	str	r5, [r4, #16]
 80152c8:	4658      	mov	r0, fp
 80152ca:	f7fd fea3 	bl	8013014 <__hi0bits>
 80152ce:	016d      	lsls	r5, r5, #5
 80152d0:	f8d8 6000 	ldr.w	r6, [r8]
 80152d4:	1a2d      	subs	r5, r5, r0
 80152d6:	42b5      	cmp	r5, r6
 80152d8:	dd54      	ble.n	8015384 <__gethex+0x228>
 80152da:	1bad      	subs	r5, r5, r6
 80152dc:	4629      	mov	r1, r5
 80152de:	4620      	mov	r0, r4
 80152e0:	f7fe fa37 	bl	8013752 <__any_on>
 80152e4:	4681      	mov	r9, r0
 80152e6:	b178      	cbz	r0, 8015308 <__gethex+0x1ac>
 80152e8:	1e6b      	subs	r3, r5, #1
 80152ea:	1159      	asrs	r1, r3, #5
 80152ec:	f003 021f 	and.w	r2, r3, #31
 80152f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80152f4:	f04f 0901 	mov.w	r9, #1
 80152f8:	fa09 f202 	lsl.w	r2, r9, r2
 80152fc:	420a      	tst	r2, r1
 80152fe:	d003      	beq.n	8015308 <__gethex+0x1ac>
 8015300:	454b      	cmp	r3, r9
 8015302:	dc36      	bgt.n	8015372 <__gethex+0x216>
 8015304:	f04f 0902 	mov.w	r9, #2
 8015308:	4629      	mov	r1, r5
 801530a:	4620      	mov	r0, r4
 801530c:	f7ff febe 	bl	801508c <rshift>
 8015310:	442f      	add	r7, r5
 8015312:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015316:	42bb      	cmp	r3, r7
 8015318:	da42      	bge.n	80153a0 <__gethex+0x244>
 801531a:	9801      	ldr	r0, [sp, #4]
 801531c:	4621      	mov	r1, r4
 801531e:	f7fd fdc7 	bl	8012eb0 <_Bfree>
 8015322:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015324:	2300      	movs	r3, #0
 8015326:	6013      	str	r3, [r2, #0]
 8015328:	25a3      	movs	r5, #163	@ 0xa3
 801532a:	e793      	b.n	8015254 <__gethex+0xf8>
 801532c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015330:	2a2e      	cmp	r2, #46	@ 0x2e
 8015332:	d012      	beq.n	801535a <__gethex+0x1fe>
 8015334:	2b20      	cmp	r3, #32
 8015336:	d104      	bne.n	8015342 <__gethex+0x1e6>
 8015338:	f845 bb04 	str.w	fp, [r5], #4
 801533c:	f04f 0b00 	mov.w	fp, #0
 8015340:	465b      	mov	r3, fp
 8015342:	7830      	ldrb	r0, [r6, #0]
 8015344:	9303      	str	r3, [sp, #12]
 8015346:	f7ff fef3 	bl	8015130 <__hexdig_fun>
 801534a:	9b03      	ldr	r3, [sp, #12]
 801534c:	f000 000f 	and.w	r0, r0, #15
 8015350:	4098      	lsls	r0, r3
 8015352:	ea4b 0b00 	orr.w	fp, fp, r0
 8015356:	3304      	adds	r3, #4
 8015358:	e7ae      	b.n	80152b8 <__gethex+0x15c>
 801535a:	45b1      	cmp	r9, r6
 801535c:	d8ea      	bhi.n	8015334 <__gethex+0x1d8>
 801535e:	492b      	ldr	r1, [pc, #172]	@ (801540c <__gethex+0x2b0>)
 8015360:	9303      	str	r3, [sp, #12]
 8015362:	2201      	movs	r2, #1
 8015364:	4630      	mov	r0, r6
 8015366:	f7fc fd76 	bl	8011e56 <strncmp>
 801536a:	9b03      	ldr	r3, [sp, #12]
 801536c:	2800      	cmp	r0, #0
 801536e:	d1e1      	bne.n	8015334 <__gethex+0x1d8>
 8015370:	e7a2      	b.n	80152b8 <__gethex+0x15c>
 8015372:	1ea9      	subs	r1, r5, #2
 8015374:	4620      	mov	r0, r4
 8015376:	f7fe f9ec 	bl	8013752 <__any_on>
 801537a:	2800      	cmp	r0, #0
 801537c:	d0c2      	beq.n	8015304 <__gethex+0x1a8>
 801537e:	f04f 0903 	mov.w	r9, #3
 8015382:	e7c1      	b.n	8015308 <__gethex+0x1ac>
 8015384:	da09      	bge.n	801539a <__gethex+0x23e>
 8015386:	1b75      	subs	r5, r6, r5
 8015388:	4621      	mov	r1, r4
 801538a:	9801      	ldr	r0, [sp, #4]
 801538c:	462a      	mov	r2, r5
 801538e:	f7fd ffa7 	bl	80132e0 <__lshift>
 8015392:	1b7f      	subs	r7, r7, r5
 8015394:	4604      	mov	r4, r0
 8015396:	f100 0a14 	add.w	sl, r0, #20
 801539a:	f04f 0900 	mov.w	r9, #0
 801539e:	e7b8      	b.n	8015312 <__gethex+0x1b6>
 80153a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80153a4:	42bd      	cmp	r5, r7
 80153a6:	dd6f      	ble.n	8015488 <__gethex+0x32c>
 80153a8:	1bed      	subs	r5, r5, r7
 80153aa:	42ae      	cmp	r6, r5
 80153ac:	dc34      	bgt.n	8015418 <__gethex+0x2bc>
 80153ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80153b2:	2b02      	cmp	r3, #2
 80153b4:	d022      	beq.n	80153fc <__gethex+0x2a0>
 80153b6:	2b03      	cmp	r3, #3
 80153b8:	d024      	beq.n	8015404 <__gethex+0x2a8>
 80153ba:	2b01      	cmp	r3, #1
 80153bc:	d115      	bne.n	80153ea <__gethex+0x28e>
 80153be:	42ae      	cmp	r6, r5
 80153c0:	d113      	bne.n	80153ea <__gethex+0x28e>
 80153c2:	2e01      	cmp	r6, #1
 80153c4:	d10b      	bne.n	80153de <__gethex+0x282>
 80153c6:	9a02      	ldr	r2, [sp, #8]
 80153c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80153cc:	6013      	str	r3, [r2, #0]
 80153ce:	2301      	movs	r3, #1
 80153d0:	6123      	str	r3, [r4, #16]
 80153d2:	f8ca 3000 	str.w	r3, [sl]
 80153d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80153d8:	2562      	movs	r5, #98	@ 0x62
 80153da:	601c      	str	r4, [r3, #0]
 80153dc:	e73a      	b.n	8015254 <__gethex+0xf8>
 80153de:	1e71      	subs	r1, r6, #1
 80153e0:	4620      	mov	r0, r4
 80153e2:	f7fe f9b6 	bl	8013752 <__any_on>
 80153e6:	2800      	cmp	r0, #0
 80153e8:	d1ed      	bne.n	80153c6 <__gethex+0x26a>
 80153ea:	9801      	ldr	r0, [sp, #4]
 80153ec:	4621      	mov	r1, r4
 80153ee:	f7fd fd5f 	bl	8012eb0 <_Bfree>
 80153f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80153f4:	2300      	movs	r3, #0
 80153f6:	6013      	str	r3, [r2, #0]
 80153f8:	2550      	movs	r5, #80	@ 0x50
 80153fa:	e72b      	b.n	8015254 <__gethex+0xf8>
 80153fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d1f3      	bne.n	80153ea <__gethex+0x28e>
 8015402:	e7e0      	b.n	80153c6 <__gethex+0x26a>
 8015404:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015406:	2b00      	cmp	r3, #0
 8015408:	d1dd      	bne.n	80153c6 <__gethex+0x26a>
 801540a:	e7ee      	b.n	80153ea <__gethex+0x28e>
 801540c:	080172e0 	.word	0x080172e0
 8015410:	08017173 	.word	0x08017173
 8015414:	080174a9 	.word	0x080174a9
 8015418:	1e6f      	subs	r7, r5, #1
 801541a:	f1b9 0f00 	cmp.w	r9, #0
 801541e:	d130      	bne.n	8015482 <__gethex+0x326>
 8015420:	b127      	cbz	r7, 801542c <__gethex+0x2d0>
 8015422:	4639      	mov	r1, r7
 8015424:	4620      	mov	r0, r4
 8015426:	f7fe f994 	bl	8013752 <__any_on>
 801542a:	4681      	mov	r9, r0
 801542c:	117a      	asrs	r2, r7, #5
 801542e:	2301      	movs	r3, #1
 8015430:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015434:	f007 071f 	and.w	r7, r7, #31
 8015438:	40bb      	lsls	r3, r7
 801543a:	4213      	tst	r3, r2
 801543c:	4629      	mov	r1, r5
 801543e:	4620      	mov	r0, r4
 8015440:	bf18      	it	ne
 8015442:	f049 0902 	orrne.w	r9, r9, #2
 8015446:	f7ff fe21 	bl	801508c <rshift>
 801544a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801544e:	1b76      	subs	r6, r6, r5
 8015450:	2502      	movs	r5, #2
 8015452:	f1b9 0f00 	cmp.w	r9, #0
 8015456:	d047      	beq.n	80154e8 <__gethex+0x38c>
 8015458:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801545c:	2b02      	cmp	r3, #2
 801545e:	d015      	beq.n	801548c <__gethex+0x330>
 8015460:	2b03      	cmp	r3, #3
 8015462:	d017      	beq.n	8015494 <__gethex+0x338>
 8015464:	2b01      	cmp	r3, #1
 8015466:	d109      	bne.n	801547c <__gethex+0x320>
 8015468:	f019 0f02 	tst.w	r9, #2
 801546c:	d006      	beq.n	801547c <__gethex+0x320>
 801546e:	f8da 3000 	ldr.w	r3, [sl]
 8015472:	ea49 0903 	orr.w	r9, r9, r3
 8015476:	f019 0f01 	tst.w	r9, #1
 801547a:	d10e      	bne.n	801549a <__gethex+0x33e>
 801547c:	f045 0510 	orr.w	r5, r5, #16
 8015480:	e032      	b.n	80154e8 <__gethex+0x38c>
 8015482:	f04f 0901 	mov.w	r9, #1
 8015486:	e7d1      	b.n	801542c <__gethex+0x2d0>
 8015488:	2501      	movs	r5, #1
 801548a:	e7e2      	b.n	8015452 <__gethex+0x2f6>
 801548c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801548e:	f1c3 0301 	rsb	r3, r3, #1
 8015492:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015496:	2b00      	cmp	r3, #0
 8015498:	d0f0      	beq.n	801547c <__gethex+0x320>
 801549a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801549e:	f104 0314 	add.w	r3, r4, #20
 80154a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80154a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80154aa:	f04f 0c00 	mov.w	ip, #0
 80154ae:	4618      	mov	r0, r3
 80154b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80154b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80154b8:	d01b      	beq.n	80154f2 <__gethex+0x396>
 80154ba:	3201      	adds	r2, #1
 80154bc:	6002      	str	r2, [r0, #0]
 80154be:	2d02      	cmp	r5, #2
 80154c0:	f104 0314 	add.w	r3, r4, #20
 80154c4:	d13c      	bne.n	8015540 <__gethex+0x3e4>
 80154c6:	f8d8 2000 	ldr.w	r2, [r8]
 80154ca:	3a01      	subs	r2, #1
 80154cc:	42b2      	cmp	r2, r6
 80154ce:	d109      	bne.n	80154e4 <__gethex+0x388>
 80154d0:	1171      	asrs	r1, r6, #5
 80154d2:	2201      	movs	r2, #1
 80154d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80154d8:	f006 061f 	and.w	r6, r6, #31
 80154dc:	fa02 f606 	lsl.w	r6, r2, r6
 80154e0:	421e      	tst	r6, r3
 80154e2:	d13a      	bne.n	801555a <__gethex+0x3fe>
 80154e4:	f045 0520 	orr.w	r5, r5, #32
 80154e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80154ea:	601c      	str	r4, [r3, #0]
 80154ec:	9b02      	ldr	r3, [sp, #8]
 80154ee:	601f      	str	r7, [r3, #0]
 80154f0:	e6b0      	b.n	8015254 <__gethex+0xf8>
 80154f2:	4299      	cmp	r1, r3
 80154f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80154f8:	d8d9      	bhi.n	80154ae <__gethex+0x352>
 80154fa:	68a3      	ldr	r3, [r4, #8]
 80154fc:	459b      	cmp	fp, r3
 80154fe:	db17      	blt.n	8015530 <__gethex+0x3d4>
 8015500:	6861      	ldr	r1, [r4, #4]
 8015502:	9801      	ldr	r0, [sp, #4]
 8015504:	3101      	adds	r1, #1
 8015506:	f7fd fc93 	bl	8012e30 <_Balloc>
 801550a:	4681      	mov	r9, r0
 801550c:	b918      	cbnz	r0, 8015516 <__gethex+0x3ba>
 801550e:	4b1a      	ldr	r3, [pc, #104]	@ (8015578 <__gethex+0x41c>)
 8015510:	4602      	mov	r2, r0
 8015512:	2184      	movs	r1, #132	@ 0x84
 8015514:	e6c5      	b.n	80152a2 <__gethex+0x146>
 8015516:	6922      	ldr	r2, [r4, #16]
 8015518:	3202      	adds	r2, #2
 801551a:	f104 010c 	add.w	r1, r4, #12
 801551e:	0092      	lsls	r2, r2, #2
 8015520:	300c      	adds	r0, #12
 8015522:	f7fc fd22 	bl	8011f6a <memcpy>
 8015526:	4621      	mov	r1, r4
 8015528:	9801      	ldr	r0, [sp, #4]
 801552a:	f7fd fcc1 	bl	8012eb0 <_Bfree>
 801552e:	464c      	mov	r4, r9
 8015530:	6923      	ldr	r3, [r4, #16]
 8015532:	1c5a      	adds	r2, r3, #1
 8015534:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015538:	6122      	str	r2, [r4, #16]
 801553a:	2201      	movs	r2, #1
 801553c:	615a      	str	r2, [r3, #20]
 801553e:	e7be      	b.n	80154be <__gethex+0x362>
 8015540:	6922      	ldr	r2, [r4, #16]
 8015542:	455a      	cmp	r2, fp
 8015544:	dd0b      	ble.n	801555e <__gethex+0x402>
 8015546:	2101      	movs	r1, #1
 8015548:	4620      	mov	r0, r4
 801554a:	f7ff fd9f 	bl	801508c <rshift>
 801554e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015552:	3701      	adds	r7, #1
 8015554:	42bb      	cmp	r3, r7
 8015556:	f6ff aee0 	blt.w	801531a <__gethex+0x1be>
 801555a:	2501      	movs	r5, #1
 801555c:	e7c2      	b.n	80154e4 <__gethex+0x388>
 801555e:	f016 061f 	ands.w	r6, r6, #31
 8015562:	d0fa      	beq.n	801555a <__gethex+0x3fe>
 8015564:	4453      	add	r3, sl
 8015566:	f1c6 0620 	rsb	r6, r6, #32
 801556a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801556e:	f7fd fd51 	bl	8013014 <__hi0bits>
 8015572:	42b0      	cmp	r0, r6
 8015574:	dbe7      	blt.n	8015546 <__gethex+0x3ea>
 8015576:	e7f0      	b.n	801555a <__gethex+0x3fe>
 8015578:	08017173 	.word	0x08017173

0801557c <L_shift>:
 801557c:	f1c2 0208 	rsb	r2, r2, #8
 8015580:	0092      	lsls	r2, r2, #2
 8015582:	b570      	push	{r4, r5, r6, lr}
 8015584:	f1c2 0620 	rsb	r6, r2, #32
 8015588:	6843      	ldr	r3, [r0, #4]
 801558a:	6804      	ldr	r4, [r0, #0]
 801558c:	fa03 f506 	lsl.w	r5, r3, r6
 8015590:	432c      	orrs	r4, r5
 8015592:	40d3      	lsrs	r3, r2
 8015594:	6004      	str	r4, [r0, #0]
 8015596:	f840 3f04 	str.w	r3, [r0, #4]!
 801559a:	4288      	cmp	r0, r1
 801559c:	d3f4      	bcc.n	8015588 <L_shift+0xc>
 801559e:	bd70      	pop	{r4, r5, r6, pc}

080155a0 <__match>:
 80155a0:	b530      	push	{r4, r5, lr}
 80155a2:	6803      	ldr	r3, [r0, #0]
 80155a4:	3301      	adds	r3, #1
 80155a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80155aa:	b914      	cbnz	r4, 80155b2 <__match+0x12>
 80155ac:	6003      	str	r3, [r0, #0]
 80155ae:	2001      	movs	r0, #1
 80155b0:	bd30      	pop	{r4, r5, pc}
 80155b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80155b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80155ba:	2d19      	cmp	r5, #25
 80155bc:	bf98      	it	ls
 80155be:	3220      	addls	r2, #32
 80155c0:	42a2      	cmp	r2, r4
 80155c2:	d0f0      	beq.n	80155a6 <__match+0x6>
 80155c4:	2000      	movs	r0, #0
 80155c6:	e7f3      	b.n	80155b0 <__match+0x10>

080155c8 <__hexnan>:
 80155c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155cc:	680b      	ldr	r3, [r1, #0]
 80155ce:	6801      	ldr	r1, [r0, #0]
 80155d0:	115e      	asrs	r6, r3, #5
 80155d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80155d6:	f013 031f 	ands.w	r3, r3, #31
 80155da:	b087      	sub	sp, #28
 80155dc:	bf18      	it	ne
 80155de:	3604      	addne	r6, #4
 80155e0:	2500      	movs	r5, #0
 80155e2:	1f37      	subs	r7, r6, #4
 80155e4:	4682      	mov	sl, r0
 80155e6:	4690      	mov	r8, r2
 80155e8:	9301      	str	r3, [sp, #4]
 80155ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80155ee:	46b9      	mov	r9, r7
 80155f0:	463c      	mov	r4, r7
 80155f2:	9502      	str	r5, [sp, #8]
 80155f4:	46ab      	mov	fp, r5
 80155f6:	784a      	ldrb	r2, [r1, #1]
 80155f8:	1c4b      	adds	r3, r1, #1
 80155fa:	9303      	str	r3, [sp, #12]
 80155fc:	b342      	cbz	r2, 8015650 <__hexnan+0x88>
 80155fe:	4610      	mov	r0, r2
 8015600:	9105      	str	r1, [sp, #20]
 8015602:	9204      	str	r2, [sp, #16]
 8015604:	f7ff fd94 	bl	8015130 <__hexdig_fun>
 8015608:	2800      	cmp	r0, #0
 801560a:	d151      	bne.n	80156b0 <__hexnan+0xe8>
 801560c:	9a04      	ldr	r2, [sp, #16]
 801560e:	9905      	ldr	r1, [sp, #20]
 8015610:	2a20      	cmp	r2, #32
 8015612:	d818      	bhi.n	8015646 <__hexnan+0x7e>
 8015614:	9b02      	ldr	r3, [sp, #8]
 8015616:	459b      	cmp	fp, r3
 8015618:	dd13      	ble.n	8015642 <__hexnan+0x7a>
 801561a:	454c      	cmp	r4, r9
 801561c:	d206      	bcs.n	801562c <__hexnan+0x64>
 801561e:	2d07      	cmp	r5, #7
 8015620:	dc04      	bgt.n	801562c <__hexnan+0x64>
 8015622:	462a      	mov	r2, r5
 8015624:	4649      	mov	r1, r9
 8015626:	4620      	mov	r0, r4
 8015628:	f7ff ffa8 	bl	801557c <L_shift>
 801562c:	4544      	cmp	r4, r8
 801562e:	d952      	bls.n	80156d6 <__hexnan+0x10e>
 8015630:	2300      	movs	r3, #0
 8015632:	f1a4 0904 	sub.w	r9, r4, #4
 8015636:	f844 3c04 	str.w	r3, [r4, #-4]
 801563a:	f8cd b008 	str.w	fp, [sp, #8]
 801563e:	464c      	mov	r4, r9
 8015640:	461d      	mov	r5, r3
 8015642:	9903      	ldr	r1, [sp, #12]
 8015644:	e7d7      	b.n	80155f6 <__hexnan+0x2e>
 8015646:	2a29      	cmp	r2, #41	@ 0x29
 8015648:	d157      	bne.n	80156fa <__hexnan+0x132>
 801564a:	3102      	adds	r1, #2
 801564c:	f8ca 1000 	str.w	r1, [sl]
 8015650:	f1bb 0f00 	cmp.w	fp, #0
 8015654:	d051      	beq.n	80156fa <__hexnan+0x132>
 8015656:	454c      	cmp	r4, r9
 8015658:	d206      	bcs.n	8015668 <__hexnan+0xa0>
 801565a:	2d07      	cmp	r5, #7
 801565c:	dc04      	bgt.n	8015668 <__hexnan+0xa0>
 801565e:	462a      	mov	r2, r5
 8015660:	4649      	mov	r1, r9
 8015662:	4620      	mov	r0, r4
 8015664:	f7ff ff8a 	bl	801557c <L_shift>
 8015668:	4544      	cmp	r4, r8
 801566a:	d936      	bls.n	80156da <__hexnan+0x112>
 801566c:	f1a8 0204 	sub.w	r2, r8, #4
 8015670:	4623      	mov	r3, r4
 8015672:	f853 1b04 	ldr.w	r1, [r3], #4
 8015676:	f842 1f04 	str.w	r1, [r2, #4]!
 801567a:	429f      	cmp	r7, r3
 801567c:	d2f9      	bcs.n	8015672 <__hexnan+0xaa>
 801567e:	1b3b      	subs	r3, r7, r4
 8015680:	f023 0303 	bic.w	r3, r3, #3
 8015684:	3304      	adds	r3, #4
 8015686:	3401      	adds	r4, #1
 8015688:	3e03      	subs	r6, #3
 801568a:	42b4      	cmp	r4, r6
 801568c:	bf88      	it	hi
 801568e:	2304      	movhi	r3, #4
 8015690:	4443      	add	r3, r8
 8015692:	2200      	movs	r2, #0
 8015694:	f843 2b04 	str.w	r2, [r3], #4
 8015698:	429f      	cmp	r7, r3
 801569a:	d2fb      	bcs.n	8015694 <__hexnan+0xcc>
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	b91b      	cbnz	r3, 80156a8 <__hexnan+0xe0>
 80156a0:	4547      	cmp	r7, r8
 80156a2:	d128      	bne.n	80156f6 <__hexnan+0x12e>
 80156a4:	2301      	movs	r3, #1
 80156a6:	603b      	str	r3, [r7, #0]
 80156a8:	2005      	movs	r0, #5
 80156aa:	b007      	add	sp, #28
 80156ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156b0:	3501      	adds	r5, #1
 80156b2:	2d08      	cmp	r5, #8
 80156b4:	f10b 0b01 	add.w	fp, fp, #1
 80156b8:	dd06      	ble.n	80156c8 <__hexnan+0x100>
 80156ba:	4544      	cmp	r4, r8
 80156bc:	d9c1      	bls.n	8015642 <__hexnan+0x7a>
 80156be:	2300      	movs	r3, #0
 80156c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80156c4:	2501      	movs	r5, #1
 80156c6:	3c04      	subs	r4, #4
 80156c8:	6822      	ldr	r2, [r4, #0]
 80156ca:	f000 000f 	and.w	r0, r0, #15
 80156ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80156d2:	6020      	str	r0, [r4, #0]
 80156d4:	e7b5      	b.n	8015642 <__hexnan+0x7a>
 80156d6:	2508      	movs	r5, #8
 80156d8:	e7b3      	b.n	8015642 <__hexnan+0x7a>
 80156da:	9b01      	ldr	r3, [sp, #4]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d0dd      	beq.n	801569c <__hexnan+0xd4>
 80156e0:	f1c3 0320 	rsb	r3, r3, #32
 80156e4:	f04f 32ff 	mov.w	r2, #4294967295
 80156e8:	40da      	lsrs	r2, r3
 80156ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80156ee:	4013      	ands	r3, r2
 80156f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80156f4:	e7d2      	b.n	801569c <__hexnan+0xd4>
 80156f6:	3f04      	subs	r7, #4
 80156f8:	e7d0      	b.n	801569c <__hexnan+0xd4>
 80156fa:	2004      	movs	r0, #4
 80156fc:	e7d5      	b.n	80156aa <__hexnan+0xe2>

080156fe <__ascii_mbtowc>:
 80156fe:	b082      	sub	sp, #8
 8015700:	b901      	cbnz	r1, 8015704 <__ascii_mbtowc+0x6>
 8015702:	a901      	add	r1, sp, #4
 8015704:	b142      	cbz	r2, 8015718 <__ascii_mbtowc+0x1a>
 8015706:	b14b      	cbz	r3, 801571c <__ascii_mbtowc+0x1e>
 8015708:	7813      	ldrb	r3, [r2, #0]
 801570a:	600b      	str	r3, [r1, #0]
 801570c:	7812      	ldrb	r2, [r2, #0]
 801570e:	1e10      	subs	r0, r2, #0
 8015710:	bf18      	it	ne
 8015712:	2001      	movne	r0, #1
 8015714:	b002      	add	sp, #8
 8015716:	4770      	bx	lr
 8015718:	4610      	mov	r0, r2
 801571a:	e7fb      	b.n	8015714 <__ascii_mbtowc+0x16>
 801571c:	f06f 0001 	mvn.w	r0, #1
 8015720:	e7f8      	b.n	8015714 <__ascii_mbtowc+0x16>

08015722 <_realloc_r>:
 8015722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015726:	4680      	mov	r8, r0
 8015728:	4615      	mov	r5, r2
 801572a:	460c      	mov	r4, r1
 801572c:	b921      	cbnz	r1, 8015738 <_realloc_r+0x16>
 801572e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015732:	4611      	mov	r1, r2
 8015734:	f7fd baf0 	b.w	8012d18 <_malloc_r>
 8015738:	b92a      	cbnz	r2, 8015746 <_realloc_r+0x24>
 801573a:	f7fd fa79 	bl	8012c30 <_free_r>
 801573e:	2400      	movs	r4, #0
 8015740:	4620      	mov	r0, r4
 8015742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015746:	f000 f8b2 	bl	80158ae <_malloc_usable_size_r>
 801574a:	4285      	cmp	r5, r0
 801574c:	4606      	mov	r6, r0
 801574e:	d802      	bhi.n	8015756 <_realloc_r+0x34>
 8015750:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8015754:	d8f4      	bhi.n	8015740 <_realloc_r+0x1e>
 8015756:	4629      	mov	r1, r5
 8015758:	4640      	mov	r0, r8
 801575a:	f7fd fadd 	bl	8012d18 <_malloc_r>
 801575e:	4607      	mov	r7, r0
 8015760:	2800      	cmp	r0, #0
 8015762:	d0ec      	beq.n	801573e <_realloc_r+0x1c>
 8015764:	42b5      	cmp	r5, r6
 8015766:	462a      	mov	r2, r5
 8015768:	4621      	mov	r1, r4
 801576a:	bf28      	it	cs
 801576c:	4632      	movcs	r2, r6
 801576e:	f7fc fbfc 	bl	8011f6a <memcpy>
 8015772:	4621      	mov	r1, r4
 8015774:	4640      	mov	r0, r8
 8015776:	f7fd fa5b 	bl	8012c30 <_free_r>
 801577a:	463c      	mov	r4, r7
 801577c:	e7e0      	b.n	8015740 <_realloc_r+0x1e>
	...

08015780 <_strtoul_l.constprop.0>:
 8015780:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015784:	4e34      	ldr	r6, [pc, #208]	@ (8015858 <_strtoul_l.constprop.0+0xd8>)
 8015786:	4686      	mov	lr, r0
 8015788:	460d      	mov	r5, r1
 801578a:	4628      	mov	r0, r5
 801578c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015790:	5d37      	ldrb	r7, [r6, r4]
 8015792:	f017 0708 	ands.w	r7, r7, #8
 8015796:	d1f8      	bne.n	801578a <_strtoul_l.constprop.0+0xa>
 8015798:	2c2d      	cmp	r4, #45	@ 0x2d
 801579a:	d12f      	bne.n	80157fc <_strtoul_l.constprop.0+0x7c>
 801579c:	782c      	ldrb	r4, [r5, #0]
 801579e:	2701      	movs	r7, #1
 80157a0:	1c85      	adds	r5, r0, #2
 80157a2:	f033 0010 	bics.w	r0, r3, #16
 80157a6:	d109      	bne.n	80157bc <_strtoul_l.constprop.0+0x3c>
 80157a8:	2c30      	cmp	r4, #48	@ 0x30
 80157aa:	d12c      	bne.n	8015806 <_strtoul_l.constprop.0+0x86>
 80157ac:	7828      	ldrb	r0, [r5, #0]
 80157ae:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80157b2:	2858      	cmp	r0, #88	@ 0x58
 80157b4:	d127      	bne.n	8015806 <_strtoul_l.constprop.0+0x86>
 80157b6:	786c      	ldrb	r4, [r5, #1]
 80157b8:	2310      	movs	r3, #16
 80157ba:	3502      	adds	r5, #2
 80157bc:	f04f 38ff 	mov.w	r8, #4294967295
 80157c0:	2600      	movs	r6, #0
 80157c2:	fbb8 f8f3 	udiv	r8, r8, r3
 80157c6:	fb03 f908 	mul.w	r9, r3, r8
 80157ca:	ea6f 0909 	mvn.w	r9, r9
 80157ce:	4630      	mov	r0, r6
 80157d0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80157d4:	f1bc 0f09 	cmp.w	ip, #9
 80157d8:	d81c      	bhi.n	8015814 <_strtoul_l.constprop.0+0x94>
 80157da:	4664      	mov	r4, ip
 80157dc:	42a3      	cmp	r3, r4
 80157de:	dd2a      	ble.n	8015836 <_strtoul_l.constprop.0+0xb6>
 80157e0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80157e4:	d007      	beq.n	80157f6 <_strtoul_l.constprop.0+0x76>
 80157e6:	4580      	cmp	r8, r0
 80157e8:	d322      	bcc.n	8015830 <_strtoul_l.constprop.0+0xb0>
 80157ea:	d101      	bne.n	80157f0 <_strtoul_l.constprop.0+0x70>
 80157ec:	45a1      	cmp	r9, r4
 80157ee:	db1f      	blt.n	8015830 <_strtoul_l.constprop.0+0xb0>
 80157f0:	fb00 4003 	mla	r0, r0, r3, r4
 80157f4:	2601      	movs	r6, #1
 80157f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80157fa:	e7e9      	b.n	80157d0 <_strtoul_l.constprop.0+0x50>
 80157fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80157fe:	bf04      	itt	eq
 8015800:	782c      	ldrbeq	r4, [r5, #0]
 8015802:	1c85      	addeq	r5, r0, #2
 8015804:	e7cd      	b.n	80157a2 <_strtoul_l.constprop.0+0x22>
 8015806:	2b00      	cmp	r3, #0
 8015808:	d1d8      	bne.n	80157bc <_strtoul_l.constprop.0+0x3c>
 801580a:	2c30      	cmp	r4, #48	@ 0x30
 801580c:	bf0c      	ite	eq
 801580e:	2308      	moveq	r3, #8
 8015810:	230a      	movne	r3, #10
 8015812:	e7d3      	b.n	80157bc <_strtoul_l.constprop.0+0x3c>
 8015814:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015818:	f1bc 0f19 	cmp.w	ip, #25
 801581c:	d801      	bhi.n	8015822 <_strtoul_l.constprop.0+0xa2>
 801581e:	3c37      	subs	r4, #55	@ 0x37
 8015820:	e7dc      	b.n	80157dc <_strtoul_l.constprop.0+0x5c>
 8015822:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8015826:	f1bc 0f19 	cmp.w	ip, #25
 801582a:	d804      	bhi.n	8015836 <_strtoul_l.constprop.0+0xb6>
 801582c:	3c57      	subs	r4, #87	@ 0x57
 801582e:	e7d5      	b.n	80157dc <_strtoul_l.constprop.0+0x5c>
 8015830:	f04f 36ff 	mov.w	r6, #4294967295
 8015834:	e7df      	b.n	80157f6 <_strtoul_l.constprop.0+0x76>
 8015836:	1c73      	adds	r3, r6, #1
 8015838:	d106      	bne.n	8015848 <_strtoul_l.constprop.0+0xc8>
 801583a:	2322      	movs	r3, #34	@ 0x22
 801583c:	f8ce 3000 	str.w	r3, [lr]
 8015840:	4630      	mov	r0, r6
 8015842:	b932      	cbnz	r2, 8015852 <_strtoul_l.constprop.0+0xd2>
 8015844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015848:	b107      	cbz	r7, 801584c <_strtoul_l.constprop.0+0xcc>
 801584a:	4240      	negs	r0, r0
 801584c:	2a00      	cmp	r2, #0
 801584e:	d0f9      	beq.n	8015844 <_strtoul_l.constprop.0+0xc4>
 8015850:	b106      	cbz	r6, 8015854 <_strtoul_l.constprop.0+0xd4>
 8015852:	1e69      	subs	r1, r5, #1
 8015854:	6011      	str	r1, [r2, #0]
 8015856:	e7f5      	b.n	8015844 <_strtoul_l.constprop.0+0xc4>
 8015858:	08017339 	.word	0x08017339

0801585c <_strtoul_r>:
 801585c:	f7ff bf90 	b.w	8015780 <_strtoul_l.constprop.0>

08015860 <__ascii_wctomb>:
 8015860:	4603      	mov	r3, r0
 8015862:	4608      	mov	r0, r1
 8015864:	b141      	cbz	r1, 8015878 <__ascii_wctomb+0x18>
 8015866:	2aff      	cmp	r2, #255	@ 0xff
 8015868:	d904      	bls.n	8015874 <__ascii_wctomb+0x14>
 801586a:	228a      	movs	r2, #138	@ 0x8a
 801586c:	601a      	str	r2, [r3, #0]
 801586e:	f04f 30ff 	mov.w	r0, #4294967295
 8015872:	4770      	bx	lr
 8015874:	700a      	strb	r2, [r1, #0]
 8015876:	2001      	movs	r0, #1
 8015878:	4770      	bx	lr
	...

0801587c <fiprintf>:
 801587c:	b40e      	push	{r1, r2, r3}
 801587e:	b503      	push	{r0, r1, lr}
 8015880:	4601      	mov	r1, r0
 8015882:	ab03      	add	r3, sp, #12
 8015884:	4805      	ldr	r0, [pc, #20]	@ (801589c <fiprintf+0x20>)
 8015886:	f853 2b04 	ldr.w	r2, [r3], #4
 801588a:	6800      	ldr	r0, [r0, #0]
 801588c:	9301      	str	r3, [sp, #4]
 801588e:	f000 f83f 	bl	8015910 <_vfiprintf_r>
 8015892:	b002      	add	sp, #8
 8015894:	f85d eb04 	ldr.w	lr, [sp], #4
 8015898:	b003      	add	sp, #12
 801589a:	4770      	bx	lr
 801589c:	200001e4 	.word	0x200001e4

080158a0 <abort>:
 80158a0:	b508      	push	{r3, lr}
 80158a2:	2006      	movs	r0, #6
 80158a4:	f000 fa08 	bl	8015cb8 <raise>
 80158a8:	2001      	movs	r0, #1
 80158aa:	f7ee fde7 	bl	800447c <_exit>

080158ae <_malloc_usable_size_r>:
 80158ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80158b2:	1f18      	subs	r0, r3, #4
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	bfbc      	itt	lt
 80158b8:	580b      	ldrlt	r3, [r1, r0]
 80158ba:	18c0      	addlt	r0, r0, r3
 80158bc:	4770      	bx	lr

080158be <__sfputc_r>:
 80158be:	6893      	ldr	r3, [r2, #8]
 80158c0:	3b01      	subs	r3, #1
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	b410      	push	{r4}
 80158c6:	6093      	str	r3, [r2, #8]
 80158c8:	da08      	bge.n	80158dc <__sfputc_r+0x1e>
 80158ca:	6994      	ldr	r4, [r2, #24]
 80158cc:	42a3      	cmp	r3, r4
 80158ce:	db01      	blt.n	80158d4 <__sfputc_r+0x16>
 80158d0:	290a      	cmp	r1, #10
 80158d2:	d103      	bne.n	80158dc <__sfputc_r+0x1e>
 80158d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158d8:	f000 b932 	b.w	8015b40 <__swbuf_r>
 80158dc:	6813      	ldr	r3, [r2, #0]
 80158de:	1c58      	adds	r0, r3, #1
 80158e0:	6010      	str	r0, [r2, #0]
 80158e2:	7019      	strb	r1, [r3, #0]
 80158e4:	4608      	mov	r0, r1
 80158e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80158ea:	4770      	bx	lr

080158ec <__sfputs_r>:
 80158ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158ee:	4606      	mov	r6, r0
 80158f0:	460f      	mov	r7, r1
 80158f2:	4614      	mov	r4, r2
 80158f4:	18d5      	adds	r5, r2, r3
 80158f6:	42ac      	cmp	r4, r5
 80158f8:	d101      	bne.n	80158fe <__sfputs_r+0x12>
 80158fa:	2000      	movs	r0, #0
 80158fc:	e007      	b.n	801590e <__sfputs_r+0x22>
 80158fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015902:	463a      	mov	r2, r7
 8015904:	4630      	mov	r0, r6
 8015906:	f7ff ffda 	bl	80158be <__sfputc_r>
 801590a:	1c43      	adds	r3, r0, #1
 801590c:	d1f3      	bne.n	80158f6 <__sfputs_r+0xa>
 801590e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015910 <_vfiprintf_r>:
 8015910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015914:	460d      	mov	r5, r1
 8015916:	b09d      	sub	sp, #116	@ 0x74
 8015918:	4614      	mov	r4, r2
 801591a:	4698      	mov	r8, r3
 801591c:	4606      	mov	r6, r0
 801591e:	b118      	cbz	r0, 8015928 <_vfiprintf_r+0x18>
 8015920:	6a03      	ldr	r3, [r0, #32]
 8015922:	b90b      	cbnz	r3, 8015928 <_vfiprintf_r+0x18>
 8015924:	f7fc f9ca 	bl	8011cbc <__sinit>
 8015928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801592a:	07d9      	lsls	r1, r3, #31
 801592c:	d405      	bmi.n	801593a <_vfiprintf_r+0x2a>
 801592e:	89ab      	ldrh	r3, [r5, #12]
 8015930:	059a      	lsls	r2, r3, #22
 8015932:	d402      	bmi.n	801593a <_vfiprintf_r+0x2a>
 8015934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015936:	f7fc fb16 	bl	8011f66 <__retarget_lock_acquire_recursive>
 801593a:	89ab      	ldrh	r3, [r5, #12]
 801593c:	071b      	lsls	r3, r3, #28
 801593e:	d501      	bpl.n	8015944 <_vfiprintf_r+0x34>
 8015940:	692b      	ldr	r3, [r5, #16]
 8015942:	b99b      	cbnz	r3, 801596c <_vfiprintf_r+0x5c>
 8015944:	4629      	mov	r1, r5
 8015946:	4630      	mov	r0, r6
 8015948:	f000 f938 	bl	8015bbc <__swsetup_r>
 801594c:	b170      	cbz	r0, 801596c <_vfiprintf_r+0x5c>
 801594e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015950:	07dc      	lsls	r4, r3, #31
 8015952:	d504      	bpl.n	801595e <_vfiprintf_r+0x4e>
 8015954:	f04f 30ff 	mov.w	r0, #4294967295
 8015958:	b01d      	add	sp, #116	@ 0x74
 801595a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801595e:	89ab      	ldrh	r3, [r5, #12]
 8015960:	0598      	lsls	r0, r3, #22
 8015962:	d4f7      	bmi.n	8015954 <_vfiprintf_r+0x44>
 8015964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015966:	f7fc faff 	bl	8011f68 <__retarget_lock_release_recursive>
 801596a:	e7f3      	b.n	8015954 <_vfiprintf_r+0x44>
 801596c:	2300      	movs	r3, #0
 801596e:	9309      	str	r3, [sp, #36]	@ 0x24
 8015970:	2320      	movs	r3, #32
 8015972:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015976:	f8cd 800c 	str.w	r8, [sp, #12]
 801597a:	2330      	movs	r3, #48	@ 0x30
 801597c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015b2c <_vfiprintf_r+0x21c>
 8015980:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015984:	f04f 0901 	mov.w	r9, #1
 8015988:	4623      	mov	r3, r4
 801598a:	469a      	mov	sl, r3
 801598c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015990:	b10a      	cbz	r2, 8015996 <_vfiprintf_r+0x86>
 8015992:	2a25      	cmp	r2, #37	@ 0x25
 8015994:	d1f9      	bne.n	801598a <_vfiprintf_r+0x7a>
 8015996:	ebba 0b04 	subs.w	fp, sl, r4
 801599a:	d00b      	beq.n	80159b4 <_vfiprintf_r+0xa4>
 801599c:	465b      	mov	r3, fp
 801599e:	4622      	mov	r2, r4
 80159a0:	4629      	mov	r1, r5
 80159a2:	4630      	mov	r0, r6
 80159a4:	f7ff ffa2 	bl	80158ec <__sfputs_r>
 80159a8:	3001      	adds	r0, #1
 80159aa:	f000 80a7 	beq.w	8015afc <_vfiprintf_r+0x1ec>
 80159ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80159b0:	445a      	add	r2, fp
 80159b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80159b4:	f89a 3000 	ldrb.w	r3, [sl]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	f000 809f 	beq.w	8015afc <_vfiprintf_r+0x1ec>
 80159be:	2300      	movs	r3, #0
 80159c0:	f04f 32ff 	mov.w	r2, #4294967295
 80159c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80159c8:	f10a 0a01 	add.w	sl, sl, #1
 80159cc:	9304      	str	r3, [sp, #16]
 80159ce:	9307      	str	r3, [sp, #28]
 80159d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80159d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80159d6:	4654      	mov	r4, sl
 80159d8:	2205      	movs	r2, #5
 80159da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159de:	4853      	ldr	r0, [pc, #332]	@ (8015b2c <_vfiprintf_r+0x21c>)
 80159e0:	f7ea fc1e 	bl	8000220 <memchr>
 80159e4:	9a04      	ldr	r2, [sp, #16]
 80159e6:	b9d8      	cbnz	r0, 8015a20 <_vfiprintf_r+0x110>
 80159e8:	06d1      	lsls	r1, r2, #27
 80159ea:	bf44      	itt	mi
 80159ec:	2320      	movmi	r3, #32
 80159ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80159f2:	0713      	lsls	r3, r2, #28
 80159f4:	bf44      	itt	mi
 80159f6:	232b      	movmi	r3, #43	@ 0x2b
 80159f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80159fc:	f89a 3000 	ldrb.w	r3, [sl]
 8015a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8015a02:	d015      	beq.n	8015a30 <_vfiprintf_r+0x120>
 8015a04:	9a07      	ldr	r2, [sp, #28]
 8015a06:	4654      	mov	r4, sl
 8015a08:	2000      	movs	r0, #0
 8015a0a:	f04f 0c0a 	mov.w	ip, #10
 8015a0e:	4621      	mov	r1, r4
 8015a10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a14:	3b30      	subs	r3, #48	@ 0x30
 8015a16:	2b09      	cmp	r3, #9
 8015a18:	d94b      	bls.n	8015ab2 <_vfiprintf_r+0x1a2>
 8015a1a:	b1b0      	cbz	r0, 8015a4a <_vfiprintf_r+0x13a>
 8015a1c:	9207      	str	r2, [sp, #28]
 8015a1e:	e014      	b.n	8015a4a <_vfiprintf_r+0x13a>
 8015a20:	eba0 0308 	sub.w	r3, r0, r8
 8015a24:	fa09 f303 	lsl.w	r3, r9, r3
 8015a28:	4313      	orrs	r3, r2
 8015a2a:	9304      	str	r3, [sp, #16]
 8015a2c:	46a2      	mov	sl, r4
 8015a2e:	e7d2      	b.n	80159d6 <_vfiprintf_r+0xc6>
 8015a30:	9b03      	ldr	r3, [sp, #12]
 8015a32:	1d19      	adds	r1, r3, #4
 8015a34:	681b      	ldr	r3, [r3, #0]
 8015a36:	9103      	str	r1, [sp, #12]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	bfbb      	ittet	lt
 8015a3c:	425b      	neglt	r3, r3
 8015a3e:	f042 0202 	orrlt.w	r2, r2, #2
 8015a42:	9307      	strge	r3, [sp, #28]
 8015a44:	9307      	strlt	r3, [sp, #28]
 8015a46:	bfb8      	it	lt
 8015a48:	9204      	strlt	r2, [sp, #16]
 8015a4a:	7823      	ldrb	r3, [r4, #0]
 8015a4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8015a4e:	d10a      	bne.n	8015a66 <_vfiprintf_r+0x156>
 8015a50:	7863      	ldrb	r3, [r4, #1]
 8015a52:	2b2a      	cmp	r3, #42	@ 0x2a
 8015a54:	d132      	bne.n	8015abc <_vfiprintf_r+0x1ac>
 8015a56:	9b03      	ldr	r3, [sp, #12]
 8015a58:	1d1a      	adds	r2, r3, #4
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	9203      	str	r2, [sp, #12]
 8015a5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015a62:	3402      	adds	r4, #2
 8015a64:	9305      	str	r3, [sp, #20]
 8015a66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015b3c <_vfiprintf_r+0x22c>
 8015a6a:	7821      	ldrb	r1, [r4, #0]
 8015a6c:	2203      	movs	r2, #3
 8015a6e:	4650      	mov	r0, sl
 8015a70:	f7ea fbd6 	bl	8000220 <memchr>
 8015a74:	b138      	cbz	r0, 8015a86 <_vfiprintf_r+0x176>
 8015a76:	9b04      	ldr	r3, [sp, #16]
 8015a78:	eba0 000a 	sub.w	r0, r0, sl
 8015a7c:	2240      	movs	r2, #64	@ 0x40
 8015a7e:	4082      	lsls	r2, r0
 8015a80:	4313      	orrs	r3, r2
 8015a82:	3401      	adds	r4, #1
 8015a84:	9304      	str	r3, [sp, #16]
 8015a86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a8a:	4829      	ldr	r0, [pc, #164]	@ (8015b30 <_vfiprintf_r+0x220>)
 8015a8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015a90:	2206      	movs	r2, #6
 8015a92:	f7ea fbc5 	bl	8000220 <memchr>
 8015a96:	2800      	cmp	r0, #0
 8015a98:	d03f      	beq.n	8015b1a <_vfiprintf_r+0x20a>
 8015a9a:	4b26      	ldr	r3, [pc, #152]	@ (8015b34 <_vfiprintf_r+0x224>)
 8015a9c:	bb1b      	cbnz	r3, 8015ae6 <_vfiprintf_r+0x1d6>
 8015a9e:	9b03      	ldr	r3, [sp, #12]
 8015aa0:	3307      	adds	r3, #7
 8015aa2:	f023 0307 	bic.w	r3, r3, #7
 8015aa6:	3308      	adds	r3, #8
 8015aa8:	9303      	str	r3, [sp, #12]
 8015aaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015aac:	443b      	add	r3, r7
 8015aae:	9309      	str	r3, [sp, #36]	@ 0x24
 8015ab0:	e76a      	b.n	8015988 <_vfiprintf_r+0x78>
 8015ab2:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ab6:	460c      	mov	r4, r1
 8015ab8:	2001      	movs	r0, #1
 8015aba:	e7a8      	b.n	8015a0e <_vfiprintf_r+0xfe>
 8015abc:	2300      	movs	r3, #0
 8015abe:	3401      	adds	r4, #1
 8015ac0:	9305      	str	r3, [sp, #20]
 8015ac2:	4619      	mov	r1, r3
 8015ac4:	f04f 0c0a 	mov.w	ip, #10
 8015ac8:	4620      	mov	r0, r4
 8015aca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ace:	3a30      	subs	r2, #48	@ 0x30
 8015ad0:	2a09      	cmp	r2, #9
 8015ad2:	d903      	bls.n	8015adc <_vfiprintf_r+0x1cc>
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d0c6      	beq.n	8015a66 <_vfiprintf_r+0x156>
 8015ad8:	9105      	str	r1, [sp, #20]
 8015ada:	e7c4      	b.n	8015a66 <_vfiprintf_r+0x156>
 8015adc:	fb0c 2101 	mla	r1, ip, r1, r2
 8015ae0:	4604      	mov	r4, r0
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	e7f0      	b.n	8015ac8 <_vfiprintf_r+0x1b8>
 8015ae6:	ab03      	add	r3, sp, #12
 8015ae8:	9300      	str	r3, [sp, #0]
 8015aea:	462a      	mov	r2, r5
 8015aec:	4b12      	ldr	r3, [pc, #72]	@ (8015b38 <_vfiprintf_r+0x228>)
 8015aee:	a904      	add	r1, sp, #16
 8015af0:	4630      	mov	r0, r6
 8015af2:	f7fb fa8b 	bl	801100c <_printf_float>
 8015af6:	4607      	mov	r7, r0
 8015af8:	1c78      	adds	r0, r7, #1
 8015afa:	d1d6      	bne.n	8015aaa <_vfiprintf_r+0x19a>
 8015afc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015afe:	07d9      	lsls	r1, r3, #31
 8015b00:	d405      	bmi.n	8015b0e <_vfiprintf_r+0x1fe>
 8015b02:	89ab      	ldrh	r3, [r5, #12]
 8015b04:	059a      	lsls	r2, r3, #22
 8015b06:	d402      	bmi.n	8015b0e <_vfiprintf_r+0x1fe>
 8015b08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015b0a:	f7fc fa2d 	bl	8011f68 <__retarget_lock_release_recursive>
 8015b0e:	89ab      	ldrh	r3, [r5, #12]
 8015b10:	065b      	lsls	r3, r3, #25
 8015b12:	f53f af1f 	bmi.w	8015954 <_vfiprintf_r+0x44>
 8015b16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015b18:	e71e      	b.n	8015958 <_vfiprintf_r+0x48>
 8015b1a:	ab03      	add	r3, sp, #12
 8015b1c:	9300      	str	r3, [sp, #0]
 8015b1e:	462a      	mov	r2, r5
 8015b20:	4b05      	ldr	r3, [pc, #20]	@ (8015b38 <_vfiprintf_r+0x228>)
 8015b22:	a904      	add	r1, sp, #16
 8015b24:	4630      	mov	r0, r6
 8015b26:	f7fb fd09 	bl	801153c <_printf_i>
 8015b2a:	e7e4      	b.n	8015af6 <_vfiprintf_r+0x1e6>
 8015b2c:	08017439 	.word	0x08017439
 8015b30:	08017443 	.word	0x08017443
 8015b34:	0801100d 	.word	0x0801100d
 8015b38:	080158ed 	.word	0x080158ed
 8015b3c:	0801743f 	.word	0x0801743f

08015b40 <__swbuf_r>:
 8015b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015b42:	460e      	mov	r6, r1
 8015b44:	4614      	mov	r4, r2
 8015b46:	4605      	mov	r5, r0
 8015b48:	b118      	cbz	r0, 8015b52 <__swbuf_r+0x12>
 8015b4a:	6a03      	ldr	r3, [r0, #32]
 8015b4c:	b90b      	cbnz	r3, 8015b52 <__swbuf_r+0x12>
 8015b4e:	f7fc f8b5 	bl	8011cbc <__sinit>
 8015b52:	69a3      	ldr	r3, [r4, #24]
 8015b54:	60a3      	str	r3, [r4, #8]
 8015b56:	89a3      	ldrh	r3, [r4, #12]
 8015b58:	071a      	lsls	r2, r3, #28
 8015b5a:	d501      	bpl.n	8015b60 <__swbuf_r+0x20>
 8015b5c:	6923      	ldr	r3, [r4, #16]
 8015b5e:	b943      	cbnz	r3, 8015b72 <__swbuf_r+0x32>
 8015b60:	4621      	mov	r1, r4
 8015b62:	4628      	mov	r0, r5
 8015b64:	f000 f82a 	bl	8015bbc <__swsetup_r>
 8015b68:	b118      	cbz	r0, 8015b72 <__swbuf_r+0x32>
 8015b6a:	f04f 37ff 	mov.w	r7, #4294967295
 8015b6e:	4638      	mov	r0, r7
 8015b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015b72:	6823      	ldr	r3, [r4, #0]
 8015b74:	6922      	ldr	r2, [r4, #16]
 8015b76:	1a98      	subs	r0, r3, r2
 8015b78:	6963      	ldr	r3, [r4, #20]
 8015b7a:	b2f6      	uxtb	r6, r6
 8015b7c:	4283      	cmp	r3, r0
 8015b7e:	4637      	mov	r7, r6
 8015b80:	dc05      	bgt.n	8015b8e <__swbuf_r+0x4e>
 8015b82:	4621      	mov	r1, r4
 8015b84:	4628      	mov	r0, r5
 8015b86:	f7ff f97f 	bl	8014e88 <_fflush_r>
 8015b8a:	2800      	cmp	r0, #0
 8015b8c:	d1ed      	bne.n	8015b6a <__swbuf_r+0x2a>
 8015b8e:	68a3      	ldr	r3, [r4, #8]
 8015b90:	3b01      	subs	r3, #1
 8015b92:	60a3      	str	r3, [r4, #8]
 8015b94:	6823      	ldr	r3, [r4, #0]
 8015b96:	1c5a      	adds	r2, r3, #1
 8015b98:	6022      	str	r2, [r4, #0]
 8015b9a:	701e      	strb	r6, [r3, #0]
 8015b9c:	6962      	ldr	r2, [r4, #20]
 8015b9e:	1c43      	adds	r3, r0, #1
 8015ba0:	429a      	cmp	r2, r3
 8015ba2:	d004      	beq.n	8015bae <__swbuf_r+0x6e>
 8015ba4:	89a3      	ldrh	r3, [r4, #12]
 8015ba6:	07db      	lsls	r3, r3, #31
 8015ba8:	d5e1      	bpl.n	8015b6e <__swbuf_r+0x2e>
 8015baa:	2e0a      	cmp	r6, #10
 8015bac:	d1df      	bne.n	8015b6e <__swbuf_r+0x2e>
 8015bae:	4621      	mov	r1, r4
 8015bb0:	4628      	mov	r0, r5
 8015bb2:	f7ff f969 	bl	8014e88 <_fflush_r>
 8015bb6:	2800      	cmp	r0, #0
 8015bb8:	d0d9      	beq.n	8015b6e <__swbuf_r+0x2e>
 8015bba:	e7d6      	b.n	8015b6a <__swbuf_r+0x2a>

08015bbc <__swsetup_r>:
 8015bbc:	b538      	push	{r3, r4, r5, lr}
 8015bbe:	4b29      	ldr	r3, [pc, #164]	@ (8015c64 <__swsetup_r+0xa8>)
 8015bc0:	4605      	mov	r5, r0
 8015bc2:	6818      	ldr	r0, [r3, #0]
 8015bc4:	460c      	mov	r4, r1
 8015bc6:	b118      	cbz	r0, 8015bd0 <__swsetup_r+0x14>
 8015bc8:	6a03      	ldr	r3, [r0, #32]
 8015bca:	b90b      	cbnz	r3, 8015bd0 <__swsetup_r+0x14>
 8015bcc:	f7fc f876 	bl	8011cbc <__sinit>
 8015bd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015bd4:	0719      	lsls	r1, r3, #28
 8015bd6:	d422      	bmi.n	8015c1e <__swsetup_r+0x62>
 8015bd8:	06da      	lsls	r2, r3, #27
 8015bda:	d407      	bmi.n	8015bec <__swsetup_r+0x30>
 8015bdc:	2209      	movs	r2, #9
 8015bde:	602a      	str	r2, [r5, #0]
 8015be0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015be4:	81a3      	strh	r3, [r4, #12]
 8015be6:	f04f 30ff 	mov.w	r0, #4294967295
 8015bea:	e033      	b.n	8015c54 <__swsetup_r+0x98>
 8015bec:	0758      	lsls	r0, r3, #29
 8015bee:	d512      	bpl.n	8015c16 <__swsetup_r+0x5a>
 8015bf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015bf2:	b141      	cbz	r1, 8015c06 <__swsetup_r+0x4a>
 8015bf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015bf8:	4299      	cmp	r1, r3
 8015bfa:	d002      	beq.n	8015c02 <__swsetup_r+0x46>
 8015bfc:	4628      	mov	r0, r5
 8015bfe:	f7fd f817 	bl	8012c30 <_free_r>
 8015c02:	2300      	movs	r3, #0
 8015c04:	6363      	str	r3, [r4, #52]	@ 0x34
 8015c06:	89a3      	ldrh	r3, [r4, #12]
 8015c08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015c0c:	81a3      	strh	r3, [r4, #12]
 8015c0e:	2300      	movs	r3, #0
 8015c10:	6063      	str	r3, [r4, #4]
 8015c12:	6923      	ldr	r3, [r4, #16]
 8015c14:	6023      	str	r3, [r4, #0]
 8015c16:	89a3      	ldrh	r3, [r4, #12]
 8015c18:	f043 0308 	orr.w	r3, r3, #8
 8015c1c:	81a3      	strh	r3, [r4, #12]
 8015c1e:	6923      	ldr	r3, [r4, #16]
 8015c20:	b94b      	cbnz	r3, 8015c36 <__swsetup_r+0x7a>
 8015c22:	89a3      	ldrh	r3, [r4, #12]
 8015c24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015c2c:	d003      	beq.n	8015c36 <__swsetup_r+0x7a>
 8015c2e:	4621      	mov	r1, r4
 8015c30:	4628      	mov	r0, r5
 8015c32:	f000 f883 	bl	8015d3c <__smakebuf_r>
 8015c36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c3a:	f013 0201 	ands.w	r2, r3, #1
 8015c3e:	d00a      	beq.n	8015c56 <__swsetup_r+0x9a>
 8015c40:	2200      	movs	r2, #0
 8015c42:	60a2      	str	r2, [r4, #8]
 8015c44:	6962      	ldr	r2, [r4, #20]
 8015c46:	4252      	negs	r2, r2
 8015c48:	61a2      	str	r2, [r4, #24]
 8015c4a:	6922      	ldr	r2, [r4, #16]
 8015c4c:	b942      	cbnz	r2, 8015c60 <__swsetup_r+0xa4>
 8015c4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015c52:	d1c5      	bne.n	8015be0 <__swsetup_r+0x24>
 8015c54:	bd38      	pop	{r3, r4, r5, pc}
 8015c56:	0799      	lsls	r1, r3, #30
 8015c58:	bf58      	it	pl
 8015c5a:	6962      	ldrpl	r2, [r4, #20]
 8015c5c:	60a2      	str	r2, [r4, #8]
 8015c5e:	e7f4      	b.n	8015c4a <__swsetup_r+0x8e>
 8015c60:	2000      	movs	r0, #0
 8015c62:	e7f7      	b.n	8015c54 <__swsetup_r+0x98>
 8015c64:	200001e4 	.word	0x200001e4

08015c68 <_raise_r>:
 8015c68:	291f      	cmp	r1, #31
 8015c6a:	b538      	push	{r3, r4, r5, lr}
 8015c6c:	4605      	mov	r5, r0
 8015c6e:	460c      	mov	r4, r1
 8015c70:	d904      	bls.n	8015c7c <_raise_r+0x14>
 8015c72:	2316      	movs	r3, #22
 8015c74:	6003      	str	r3, [r0, #0]
 8015c76:	f04f 30ff 	mov.w	r0, #4294967295
 8015c7a:	bd38      	pop	{r3, r4, r5, pc}
 8015c7c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015c7e:	b112      	cbz	r2, 8015c86 <_raise_r+0x1e>
 8015c80:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015c84:	b94b      	cbnz	r3, 8015c9a <_raise_r+0x32>
 8015c86:	4628      	mov	r0, r5
 8015c88:	f000 f830 	bl	8015cec <_getpid_r>
 8015c8c:	4622      	mov	r2, r4
 8015c8e:	4601      	mov	r1, r0
 8015c90:	4628      	mov	r0, r5
 8015c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015c96:	f000 b817 	b.w	8015cc8 <_kill_r>
 8015c9a:	2b01      	cmp	r3, #1
 8015c9c:	d00a      	beq.n	8015cb4 <_raise_r+0x4c>
 8015c9e:	1c59      	adds	r1, r3, #1
 8015ca0:	d103      	bne.n	8015caa <_raise_r+0x42>
 8015ca2:	2316      	movs	r3, #22
 8015ca4:	6003      	str	r3, [r0, #0]
 8015ca6:	2001      	movs	r0, #1
 8015ca8:	e7e7      	b.n	8015c7a <_raise_r+0x12>
 8015caa:	2100      	movs	r1, #0
 8015cac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015cb0:	4620      	mov	r0, r4
 8015cb2:	4798      	blx	r3
 8015cb4:	2000      	movs	r0, #0
 8015cb6:	e7e0      	b.n	8015c7a <_raise_r+0x12>

08015cb8 <raise>:
 8015cb8:	4b02      	ldr	r3, [pc, #8]	@ (8015cc4 <raise+0xc>)
 8015cba:	4601      	mov	r1, r0
 8015cbc:	6818      	ldr	r0, [r3, #0]
 8015cbe:	f7ff bfd3 	b.w	8015c68 <_raise_r>
 8015cc2:	bf00      	nop
 8015cc4:	200001e4 	.word	0x200001e4

08015cc8 <_kill_r>:
 8015cc8:	b538      	push	{r3, r4, r5, lr}
 8015cca:	4d07      	ldr	r5, [pc, #28]	@ (8015ce8 <_kill_r+0x20>)
 8015ccc:	2300      	movs	r3, #0
 8015cce:	4604      	mov	r4, r0
 8015cd0:	4608      	mov	r0, r1
 8015cd2:	4611      	mov	r1, r2
 8015cd4:	602b      	str	r3, [r5, #0]
 8015cd6:	f7ee fbc1 	bl	800445c <_kill>
 8015cda:	1c43      	adds	r3, r0, #1
 8015cdc:	d102      	bne.n	8015ce4 <_kill_r+0x1c>
 8015cde:	682b      	ldr	r3, [r5, #0]
 8015ce0:	b103      	cbz	r3, 8015ce4 <_kill_r+0x1c>
 8015ce2:	6023      	str	r3, [r4, #0]
 8015ce4:	bd38      	pop	{r3, r4, r5, pc}
 8015ce6:	bf00      	nop
 8015ce8:	200026d4 	.word	0x200026d4

08015cec <_getpid_r>:
 8015cec:	f7ee bbae 	b.w	800444c <_getpid>

08015cf0 <__swhatbuf_r>:
 8015cf0:	b570      	push	{r4, r5, r6, lr}
 8015cf2:	460c      	mov	r4, r1
 8015cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015cf8:	2900      	cmp	r1, #0
 8015cfa:	b096      	sub	sp, #88	@ 0x58
 8015cfc:	4615      	mov	r5, r2
 8015cfe:	461e      	mov	r6, r3
 8015d00:	da0d      	bge.n	8015d1e <__swhatbuf_r+0x2e>
 8015d02:	89a3      	ldrh	r3, [r4, #12]
 8015d04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015d08:	f04f 0100 	mov.w	r1, #0
 8015d0c:	bf14      	ite	ne
 8015d0e:	2340      	movne	r3, #64	@ 0x40
 8015d10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015d14:	2000      	movs	r0, #0
 8015d16:	6031      	str	r1, [r6, #0]
 8015d18:	602b      	str	r3, [r5, #0]
 8015d1a:	b016      	add	sp, #88	@ 0x58
 8015d1c:	bd70      	pop	{r4, r5, r6, pc}
 8015d1e:	466a      	mov	r2, sp
 8015d20:	f000 f848 	bl	8015db4 <_fstat_r>
 8015d24:	2800      	cmp	r0, #0
 8015d26:	dbec      	blt.n	8015d02 <__swhatbuf_r+0x12>
 8015d28:	9901      	ldr	r1, [sp, #4]
 8015d2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015d2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015d32:	4259      	negs	r1, r3
 8015d34:	4159      	adcs	r1, r3
 8015d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015d3a:	e7eb      	b.n	8015d14 <__swhatbuf_r+0x24>

08015d3c <__smakebuf_r>:
 8015d3c:	898b      	ldrh	r3, [r1, #12]
 8015d3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015d40:	079d      	lsls	r5, r3, #30
 8015d42:	4606      	mov	r6, r0
 8015d44:	460c      	mov	r4, r1
 8015d46:	d507      	bpl.n	8015d58 <__smakebuf_r+0x1c>
 8015d48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015d4c:	6023      	str	r3, [r4, #0]
 8015d4e:	6123      	str	r3, [r4, #16]
 8015d50:	2301      	movs	r3, #1
 8015d52:	6163      	str	r3, [r4, #20]
 8015d54:	b003      	add	sp, #12
 8015d56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d58:	ab01      	add	r3, sp, #4
 8015d5a:	466a      	mov	r2, sp
 8015d5c:	f7ff ffc8 	bl	8015cf0 <__swhatbuf_r>
 8015d60:	9f00      	ldr	r7, [sp, #0]
 8015d62:	4605      	mov	r5, r0
 8015d64:	4639      	mov	r1, r7
 8015d66:	4630      	mov	r0, r6
 8015d68:	f7fc ffd6 	bl	8012d18 <_malloc_r>
 8015d6c:	b948      	cbnz	r0, 8015d82 <__smakebuf_r+0x46>
 8015d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d72:	059a      	lsls	r2, r3, #22
 8015d74:	d4ee      	bmi.n	8015d54 <__smakebuf_r+0x18>
 8015d76:	f023 0303 	bic.w	r3, r3, #3
 8015d7a:	f043 0302 	orr.w	r3, r3, #2
 8015d7e:	81a3      	strh	r3, [r4, #12]
 8015d80:	e7e2      	b.n	8015d48 <__smakebuf_r+0xc>
 8015d82:	89a3      	ldrh	r3, [r4, #12]
 8015d84:	6020      	str	r0, [r4, #0]
 8015d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015d8a:	81a3      	strh	r3, [r4, #12]
 8015d8c:	9b01      	ldr	r3, [sp, #4]
 8015d8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015d92:	b15b      	cbz	r3, 8015dac <__smakebuf_r+0x70>
 8015d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015d98:	4630      	mov	r0, r6
 8015d9a:	f000 f81d 	bl	8015dd8 <_isatty_r>
 8015d9e:	b128      	cbz	r0, 8015dac <__smakebuf_r+0x70>
 8015da0:	89a3      	ldrh	r3, [r4, #12]
 8015da2:	f023 0303 	bic.w	r3, r3, #3
 8015da6:	f043 0301 	orr.w	r3, r3, #1
 8015daa:	81a3      	strh	r3, [r4, #12]
 8015dac:	89a3      	ldrh	r3, [r4, #12]
 8015dae:	431d      	orrs	r5, r3
 8015db0:	81a5      	strh	r5, [r4, #12]
 8015db2:	e7cf      	b.n	8015d54 <__smakebuf_r+0x18>

08015db4 <_fstat_r>:
 8015db4:	b538      	push	{r3, r4, r5, lr}
 8015db6:	4d07      	ldr	r5, [pc, #28]	@ (8015dd4 <_fstat_r+0x20>)
 8015db8:	2300      	movs	r3, #0
 8015dba:	4604      	mov	r4, r0
 8015dbc:	4608      	mov	r0, r1
 8015dbe:	4611      	mov	r1, r2
 8015dc0:	602b      	str	r3, [r5, #0]
 8015dc2:	f7ee fbab 	bl	800451c <_fstat>
 8015dc6:	1c43      	adds	r3, r0, #1
 8015dc8:	d102      	bne.n	8015dd0 <_fstat_r+0x1c>
 8015dca:	682b      	ldr	r3, [r5, #0]
 8015dcc:	b103      	cbz	r3, 8015dd0 <_fstat_r+0x1c>
 8015dce:	6023      	str	r3, [r4, #0]
 8015dd0:	bd38      	pop	{r3, r4, r5, pc}
 8015dd2:	bf00      	nop
 8015dd4:	200026d4 	.word	0x200026d4

08015dd8 <_isatty_r>:
 8015dd8:	b538      	push	{r3, r4, r5, lr}
 8015dda:	4d06      	ldr	r5, [pc, #24]	@ (8015df4 <_isatty_r+0x1c>)
 8015ddc:	2300      	movs	r3, #0
 8015dde:	4604      	mov	r4, r0
 8015de0:	4608      	mov	r0, r1
 8015de2:	602b      	str	r3, [r5, #0]
 8015de4:	f7ee fbaa 	bl	800453c <_isatty>
 8015de8:	1c43      	adds	r3, r0, #1
 8015dea:	d102      	bne.n	8015df2 <_isatty_r+0x1a>
 8015dec:	682b      	ldr	r3, [r5, #0]
 8015dee:	b103      	cbz	r3, 8015df2 <_isatty_r+0x1a>
 8015df0:	6023      	str	r3, [r4, #0]
 8015df2:	bd38      	pop	{r3, r4, r5, pc}
 8015df4:	200026d4 	.word	0x200026d4

08015df8 <pow>:
 8015df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015dfa:	ed2d 8b02 	vpush	{d8}
 8015dfe:	eeb0 8a40 	vmov.f32	s16, s0
 8015e02:	eef0 8a60 	vmov.f32	s17, s1
 8015e06:	ec55 4b11 	vmov	r4, r5, d1
 8015e0a:	f000 f891 	bl	8015f30 <__ieee754_pow>
 8015e0e:	4622      	mov	r2, r4
 8015e10:	462b      	mov	r3, r5
 8015e12:	4620      	mov	r0, r4
 8015e14:	4629      	mov	r1, r5
 8015e16:	ec57 6b10 	vmov	r6, r7, d0
 8015e1a:	f7ea feaf 	bl	8000b7c <__aeabi_dcmpun>
 8015e1e:	2800      	cmp	r0, #0
 8015e20:	d13b      	bne.n	8015e9a <pow+0xa2>
 8015e22:	ec51 0b18 	vmov	r0, r1, d8
 8015e26:	2200      	movs	r2, #0
 8015e28:	2300      	movs	r3, #0
 8015e2a:	f7ea fe75 	bl	8000b18 <__aeabi_dcmpeq>
 8015e2e:	b1b8      	cbz	r0, 8015e60 <pow+0x68>
 8015e30:	2200      	movs	r2, #0
 8015e32:	2300      	movs	r3, #0
 8015e34:	4620      	mov	r0, r4
 8015e36:	4629      	mov	r1, r5
 8015e38:	f7ea fe6e 	bl	8000b18 <__aeabi_dcmpeq>
 8015e3c:	2800      	cmp	r0, #0
 8015e3e:	d146      	bne.n	8015ece <pow+0xd6>
 8015e40:	ec45 4b10 	vmov	d0, r4, r5
 8015e44:	f000 f866 	bl	8015f14 <finite>
 8015e48:	b338      	cbz	r0, 8015e9a <pow+0xa2>
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	4620      	mov	r0, r4
 8015e50:	4629      	mov	r1, r5
 8015e52:	f7ea fe6b 	bl	8000b2c <__aeabi_dcmplt>
 8015e56:	b300      	cbz	r0, 8015e9a <pow+0xa2>
 8015e58:	f7fc f85a 	bl	8011f10 <__errno>
 8015e5c:	2322      	movs	r3, #34	@ 0x22
 8015e5e:	e01b      	b.n	8015e98 <pow+0xa0>
 8015e60:	ec47 6b10 	vmov	d0, r6, r7
 8015e64:	f000 f856 	bl	8015f14 <finite>
 8015e68:	b9e0      	cbnz	r0, 8015ea4 <pow+0xac>
 8015e6a:	eeb0 0a48 	vmov.f32	s0, s16
 8015e6e:	eef0 0a68 	vmov.f32	s1, s17
 8015e72:	f000 f84f 	bl	8015f14 <finite>
 8015e76:	b1a8      	cbz	r0, 8015ea4 <pow+0xac>
 8015e78:	ec45 4b10 	vmov	d0, r4, r5
 8015e7c:	f000 f84a 	bl	8015f14 <finite>
 8015e80:	b180      	cbz	r0, 8015ea4 <pow+0xac>
 8015e82:	4632      	mov	r2, r6
 8015e84:	463b      	mov	r3, r7
 8015e86:	4630      	mov	r0, r6
 8015e88:	4639      	mov	r1, r7
 8015e8a:	f7ea fe77 	bl	8000b7c <__aeabi_dcmpun>
 8015e8e:	2800      	cmp	r0, #0
 8015e90:	d0e2      	beq.n	8015e58 <pow+0x60>
 8015e92:	f7fc f83d 	bl	8011f10 <__errno>
 8015e96:	2321      	movs	r3, #33	@ 0x21
 8015e98:	6003      	str	r3, [r0, #0]
 8015e9a:	ecbd 8b02 	vpop	{d8}
 8015e9e:	ec47 6b10 	vmov	d0, r6, r7
 8015ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	4630      	mov	r0, r6
 8015eaa:	4639      	mov	r1, r7
 8015eac:	f7ea fe34 	bl	8000b18 <__aeabi_dcmpeq>
 8015eb0:	2800      	cmp	r0, #0
 8015eb2:	d0f2      	beq.n	8015e9a <pow+0xa2>
 8015eb4:	eeb0 0a48 	vmov.f32	s0, s16
 8015eb8:	eef0 0a68 	vmov.f32	s1, s17
 8015ebc:	f000 f82a 	bl	8015f14 <finite>
 8015ec0:	2800      	cmp	r0, #0
 8015ec2:	d0ea      	beq.n	8015e9a <pow+0xa2>
 8015ec4:	ec45 4b10 	vmov	d0, r4, r5
 8015ec8:	f000 f824 	bl	8015f14 <finite>
 8015ecc:	e7c3      	b.n	8015e56 <pow+0x5e>
 8015ece:	4f01      	ldr	r7, [pc, #4]	@ (8015ed4 <pow+0xdc>)
 8015ed0:	2600      	movs	r6, #0
 8015ed2:	e7e2      	b.n	8015e9a <pow+0xa2>
 8015ed4:	3ff00000 	.word	0x3ff00000

08015ed8 <sqrtf>:
 8015ed8:	b508      	push	{r3, lr}
 8015eda:	ed2d 8b02 	vpush	{d8}
 8015ede:	eeb0 8a40 	vmov.f32	s16, s0
 8015ee2:	f000 f822 	bl	8015f2a <__ieee754_sqrtf>
 8015ee6:	eeb4 8a48 	vcmp.f32	s16, s16
 8015eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015eee:	d60c      	bvs.n	8015f0a <sqrtf+0x32>
 8015ef0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8015f10 <sqrtf+0x38>
 8015ef4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015efc:	d505      	bpl.n	8015f0a <sqrtf+0x32>
 8015efe:	f7fc f807 	bl	8011f10 <__errno>
 8015f02:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8015f06:	2321      	movs	r3, #33	@ 0x21
 8015f08:	6003      	str	r3, [r0, #0]
 8015f0a:	ecbd 8b02 	vpop	{d8}
 8015f0e:	bd08      	pop	{r3, pc}
 8015f10:	00000000 	.word	0x00000000

08015f14 <finite>:
 8015f14:	b082      	sub	sp, #8
 8015f16:	ed8d 0b00 	vstr	d0, [sp]
 8015f1a:	9801      	ldr	r0, [sp, #4]
 8015f1c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8015f20:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8015f24:	0fc0      	lsrs	r0, r0, #31
 8015f26:	b002      	add	sp, #8
 8015f28:	4770      	bx	lr

08015f2a <__ieee754_sqrtf>:
 8015f2a:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015f2e:	4770      	bx	lr

08015f30 <__ieee754_pow>:
 8015f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f34:	b091      	sub	sp, #68	@ 0x44
 8015f36:	ed8d 1b00 	vstr	d1, [sp]
 8015f3a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8015f3e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8015f42:	ea5a 0001 	orrs.w	r0, sl, r1
 8015f46:	ec57 6b10 	vmov	r6, r7, d0
 8015f4a:	d113      	bne.n	8015f74 <__ieee754_pow+0x44>
 8015f4c:	19b3      	adds	r3, r6, r6
 8015f4e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8015f52:	4152      	adcs	r2, r2
 8015f54:	4298      	cmp	r0, r3
 8015f56:	4b98      	ldr	r3, [pc, #608]	@ (80161b8 <__ieee754_pow+0x288>)
 8015f58:	4193      	sbcs	r3, r2
 8015f5a:	f080 84ea 	bcs.w	8016932 <__ieee754_pow+0xa02>
 8015f5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015f62:	4630      	mov	r0, r6
 8015f64:	4639      	mov	r1, r7
 8015f66:	f7ea f9b9 	bl	80002dc <__adddf3>
 8015f6a:	ec41 0b10 	vmov	d0, r0, r1
 8015f6e:	b011      	add	sp, #68	@ 0x44
 8015f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f74:	4a91      	ldr	r2, [pc, #580]	@ (80161bc <__ieee754_pow+0x28c>)
 8015f76:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8015f7a:	4590      	cmp	r8, r2
 8015f7c:	463d      	mov	r5, r7
 8015f7e:	4633      	mov	r3, r6
 8015f80:	d806      	bhi.n	8015f90 <__ieee754_pow+0x60>
 8015f82:	d101      	bne.n	8015f88 <__ieee754_pow+0x58>
 8015f84:	2e00      	cmp	r6, #0
 8015f86:	d1ea      	bne.n	8015f5e <__ieee754_pow+0x2e>
 8015f88:	4592      	cmp	sl, r2
 8015f8a:	d801      	bhi.n	8015f90 <__ieee754_pow+0x60>
 8015f8c:	d10e      	bne.n	8015fac <__ieee754_pow+0x7c>
 8015f8e:	b169      	cbz	r1, 8015fac <__ieee754_pow+0x7c>
 8015f90:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8015f94:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8015f98:	431d      	orrs	r5, r3
 8015f9a:	d1e0      	bne.n	8015f5e <__ieee754_pow+0x2e>
 8015f9c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015fa0:	18db      	adds	r3, r3, r3
 8015fa2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8015fa6:	4152      	adcs	r2, r2
 8015fa8:	429d      	cmp	r5, r3
 8015faa:	e7d4      	b.n	8015f56 <__ieee754_pow+0x26>
 8015fac:	2d00      	cmp	r5, #0
 8015fae:	46c3      	mov	fp, r8
 8015fb0:	da3a      	bge.n	8016028 <__ieee754_pow+0xf8>
 8015fb2:	4a83      	ldr	r2, [pc, #524]	@ (80161c0 <__ieee754_pow+0x290>)
 8015fb4:	4592      	cmp	sl, r2
 8015fb6:	d84d      	bhi.n	8016054 <__ieee754_pow+0x124>
 8015fb8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8015fbc:	4592      	cmp	sl, r2
 8015fbe:	f240 84c7 	bls.w	8016950 <__ieee754_pow+0xa20>
 8015fc2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8015fc6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8015fca:	2a14      	cmp	r2, #20
 8015fcc:	dd0f      	ble.n	8015fee <__ieee754_pow+0xbe>
 8015fce:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8015fd2:	fa21 f402 	lsr.w	r4, r1, r2
 8015fd6:	fa04 f202 	lsl.w	r2, r4, r2
 8015fda:	428a      	cmp	r2, r1
 8015fdc:	f040 84b8 	bne.w	8016950 <__ieee754_pow+0xa20>
 8015fe0:	f004 0401 	and.w	r4, r4, #1
 8015fe4:	f1c4 0402 	rsb	r4, r4, #2
 8015fe8:	2900      	cmp	r1, #0
 8015fea:	d158      	bne.n	801609e <__ieee754_pow+0x16e>
 8015fec:	e00e      	b.n	801600c <__ieee754_pow+0xdc>
 8015fee:	2900      	cmp	r1, #0
 8015ff0:	d154      	bne.n	801609c <__ieee754_pow+0x16c>
 8015ff2:	f1c2 0214 	rsb	r2, r2, #20
 8015ff6:	fa4a f402 	asr.w	r4, sl, r2
 8015ffa:	fa04 f202 	lsl.w	r2, r4, r2
 8015ffe:	4552      	cmp	r2, sl
 8016000:	f040 84a3 	bne.w	801694a <__ieee754_pow+0xa1a>
 8016004:	f004 0401 	and.w	r4, r4, #1
 8016008:	f1c4 0402 	rsb	r4, r4, #2
 801600c:	4a6d      	ldr	r2, [pc, #436]	@ (80161c4 <__ieee754_pow+0x294>)
 801600e:	4592      	cmp	sl, r2
 8016010:	d12e      	bne.n	8016070 <__ieee754_pow+0x140>
 8016012:	f1b9 0f00 	cmp.w	r9, #0
 8016016:	f280 8494 	bge.w	8016942 <__ieee754_pow+0xa12>
 801601a:	496a      	ldr	r1, [pc, #424]	@ (80161c4 <__ieee754_pow+0x294>)
 801601c:	4632      	mov	r2, r6
 801601e:	463b      	mov	r3, r7
 8016020:	2000      	movs	r0, #0
 8016022:	f7ea fc3b 	bl	800089c <__aeabi_ddiv>
 8016026:	e7a0      	b.n	8015f6a <__ieee754_pow+0x3a>
 8016028:	2400      	movs	r4, #0
 801602a:	bbc1      	cbnz	r1, 801609e <__ieee754_pow+0x16e>
 801602c:	4a63      	ldr	r2, [pc, #396]	@ (80161bc <__ieee754_pow+0x28c>)
 801602e:	4592      	cmp	sl, r2
 8016030:	d1ec      	bne.n	801600c <__ieee754_pow+0xdc>
 8016032:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8016036:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 801603a:	431a      	orrs	r2, r3
 801603c:	f000 8479 	beq.w	8016932 <__ieee754_pow+0xa02>
 8016040:	4b61      	ldr	r3, [pc, #388]	@ (80161c8 <__ieee754_pow+0x298>)
 8016042:	4598      	cmp	r8, r3
 8016044:	d908      	bls.n	8016058 <__ieee754_pow+0x128>
 8016046:	f1b9 0f00 	cmp.w	r9, #0
 801604a:	f2c0 8476 	blt.w	801693a <__ieee754_pow+0xa0a>
 801604e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016052:	e78a      	b.n	8015f6a <__ieee754_pow+0x3a>
 8016054:	2402      	movs	r4, #2
 8016056:	e7e8      	b.n	801602a <__ieee754_pow+0xfa>
 8016058:	f1b9 0f00 	cmp.w	r9, #0
 801605c:	f04f 0000 	mov.w	r0, #0
 8016060:	f04f 0100 	mov.w	r1, #0
 8016064:	da81      	bge.n	8015f6a <__ieee754_pow+0x3a>
 8016066:	e9dd 0300 	ldrd	r0, r3, [sp]
 801606a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 801606e:	e77c      	b.n	8015f6a <__ieee754_pow+0x3a>
 8016070:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8016074:	d106      	bne.n	8016084 <__ieee754_pow+0x154>
 8016076:	4632      	mov	r2, r6
 8016078:	463b      	mov	r3, r7
 801607a:	4630      	mov	r0, r6
 801607c:	4639      	mov	r1, r7
 801607e:	f7ea fae3 	bl	8000648 <__aeabi_dmul>
 8016082:	e772      	b.n	8015f6a <__ieee754_pow+0x3a>
 8016084:	4a51      	ldr	r2, [pc, #324]	@ (80161cc <__ieee754_pow+0x29c>)
 8016086:	4591      	cmp	r9, r2
 8016088:	d109      	bne.n	801609e <__ieee754_pow+0x16e>
 801608a:	2d00      	cmp	r5, #0
 801608c:	db07      	blt.n	801609e <__ieee754_pow+0x16e>
 801608e:	ec47 6b10 	vmov	d0, r6, r7
 8016092:	b011      	add	sp, #68	@ 0x44
 8016094:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016098:	f000 bd52 	b.w	8016b40 <__ieee754_sqrt>
 801609c:	2400      	movs	r4, #0
 801609e:	ec47 6b10 	vmov	d0, r6, r7
 80160a2:	9302      	str	r3, [sp, #8]
 80160a4:	f000 fc88 	bl	80169b8 <fabs>
 80160a8:	9b02      	ldr	r3, [sp, #8]
 80160aa:	ec51 0b10 	vmov	r0, r1, d0
 80160ae:	bb53      	cbnz	r3, 8016106 <__ieee754_pow+0x1d6>
 80160b0:	4b44      	ldr	r3, [pc, #272]	@ (80161c4 <__ieee754_pow+0x294>)
 80160b2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80160b6:	429a      	cmp	r2, r3
 80160b8:	d002      	beq.n	80160c0 <__ieee754_pow+0x190>
 80160ba:	f1b8 0f00 	cmp.w	r8, #0
 80160be:	d122      	bne.n	8016106 <__ieee754_pow+0x1d6>
 80160c0:	f1b9 0f00 	cmp.w	r9, #0
 80160c4:	da05      	bge.n	80160d2 <__ieee754_pow+0x1a2>
 80160c6:	4602      	mov	r2, r0
 80160c8:	460b      	mov	r3, r1
 80160ca:	2000      	movs	r0, #0
 80160cc:	493d      	ldr	r1, [pc, #244]	@ (80161c4 <__ieee754_pow+0x294>)
 80160ce:	f7ea fbe5 	bl	800089c <__aeabi_ddiv>
 80160d2:	2d00      	cmp	r5, #0
 80160d4:	f6bf af49 	bge.w	8015f6a <__ieee754_pow+0x3a>
 80160d8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80160dc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80160e0:	ea58 0804 	orrs.w	r8, r8, r4
 80160e4:	d108      	bne.n	80160f8 <__ieee754_pow+0x1c8>
 80160e6:	4602      	mov	r2, r0
 80160e8:	460b      	mov	r3, r1
 80160ea:	4610      	mov	r0, r2
 80160ec:	4619      	mov	r1, r3
 80160ee:	f7ea f8f3 	bl	80002d8 <__aeabi_dsub>
 80160f2:	4602      	mov	r2, r0
 80160f4:	460b      	mov	r3, r1
 80160f6:	e794      	b.n	8016022 <__ieee754_pow+0xf2>
 80160f8:	2c01      	cmp	r4, #1
 80160fa:	f47f af36 	bne.w	8015f6a <__ieee754_pow+0x3a>
 80160fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016102:	4619      	mov	r1, r3
 8016104:	e731      	b.n	8015f6a <__ieee754_pow+0x3a>
 8016106:	0feb      	lsrs	r3, r5, #31
 8016108:	3b01      	subs	r3, #1
 801610a:	ea53 0204 	orrs.w	r2, r3, r4
 801610e:	d102      	bne.n	8016116 <__ieee754_pow+0x1e6>
 8016110:	4632      	mov	r2, r6
 8016112:	463b      	mov	r3, r7
 8016114:	e7e9      	b.n	80160ea <__ieee754_pow+0x1ba>
 8016116:	3c01      	subs	r4, #1
 8016118:	431c      	orrs	r4, r3
 801611a:	d016      	beq.n	801614a <__ieee754_pow+0x21a>
 801611c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80161a8 <__ieee754_pow+0x278>
 8016120:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8016124:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016128:	f240 8112 	bls.w	8016350 <__ieee754_pow+0x420>
 801612c:	4b28      	ldr	r3, [pc, #160]	@ (80161d0 <__ieee754_pow+0x2a0>)
 801612e:	459a      	cmp	sl, r3
 8016130:	4b25      	ldr	r3, [pc, #148]	@ (80161c8 <__ieee754_pow+0x298>)
 8016132:	d916      	bls.n	8016162 <__ieee754_pow+0x232>
 8016134:	4598      	cmp	r8, r3
 8016136:	d80b      	bhi.n	8016150 <__ieee754_pow+0x220>
 8016138:	f1b9 0f00 	cmp.w	r9, #0
 801613c:	da0b      	bge.n	8016156 <__ieee754_pow+0x226>
 801613e:	2000      	movs	r0, #0
 8016140:	b011      	add	sp, #68	@ 0x44
 8016142:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016146:	f000 bcf3 	b.w	8016b30 <__math_oflow>
 801614a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80161b0 <__ieee754_pow+0x280>
 801614e:	e7e7      	b.n	8016120 <__ieee754_pow+0x1f0>
 8016150:	f1b9 0f00 	cmp.w	r9, #0
 8016154:	dcf3      	bgt.n	801613e <__ieee754_pow+0x20e>
 8016156:	2000      	movs	r0, #0
 8016158:	b011      	add	sp, #68	@ 0x44
 801615a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801615e:	f000 bcdf 	b.w	8016b20 <__math_uflow>
 8016162:	4598      	cmp	r8, r3
 8016164:	d20c      	bcs.n	8016180 <__ieee754_pow+0x250>
 8016166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801616a:	2200      	movs	r2, #0
 801616c:	2300      	movs	r3, #0
 801616e:	f7ea fcdd 	bl	8000b2c <__aeabi_dcmplt>
 8016172:	3800      	subs	r0, #0
 8016174:	bf18      	it	ne
 8016176:	2001      	movne	r0, #1
 8016178:	f1b9 0f00 	cmp.w	r9, #0
 801617c:	daec      	bge.n	8016158 <__ieee754_pow+0x228>
 801617e:	e7df      	b.n	8016140 <__ieee754_pow+0x210>
 8016180:	4b10      	ldr	r3, [pc, #64]	@ (80161c4 <__ieee754_pow+0x294>)
 8016182:	4598      	cmp	r8, r3
 8016184:	f04f 0200 	mov.w	r2, #0
 8016188:	d924      	bls.n	80161d4 <__ieee754_pow+0x2a4>
 801618a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801618e:	2300      	movs	r3, #0
 8016190:	f7ea fccc 	bl	8000b2c <__aeabi_dcmplt>
 8016194:	3800      	subs	r0, #0
 8016196:	bf18      	it	ne
 8016198:	2001      	movne	r0, #1
 801619a:	f1b9 0f00 	cmp.w	r9, #0
 801619e:	dccf      	bgt.n	8016140 <__ieee754_pow+0x210>
 80161a0:	e7da      	b.n	8016158 <__ieee754_pow+0x228>
 80161a2:	bf00      	nop
 80161a4:	f3af 8000 	nop.w
 80161a8:	00000000 	.word	0x00000000
 80161ac:	3ff00000 	.word	0x3ff00000
 80161b0:	00000000 	.word	0x00000000
 80161b4:	bff00000 	.word	0xbff00000
 80161b8:	fff00000 	.word	0xfff00000
 80161bc:	7ff00000 	.word	0x7ff00000
 80161c0:	433fffff 	.word	0x433fffff
 80161c4:	3ff00000 	.word	0x3ff00000
 80161c8:	3fefffff 	.word	0x3fefffff
 80161cc:	3fe00000 	.word	0x3fe00000
 80161d0:	43f00000 	.word	0x43f00000
 80161d4:	4b5a      	ldr	r3, [pc, #360]	@ (8016340 <__ieee754_pow+0x410>)
 80161d6:	f7ea f87f 	bl	80002d8 <__aeabi_dsub>
 80161da:	a351      	add	r3, pc, #324	@ (adr r3, 8016320 <__ieee754_pow+0x3f0>)
 80161dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e0:	4604      	mov	r4, r0
 80161e2:	460d      	mov	r5, r1
 80161e4:	f7ea fa30 	bl	8000648 <__aeabi_dmul>
 80161e8:	a34f      	add	r3, pc, #316	@ (adr r3, 8016328 <__ieee754_pow+0x3f8>)
 80161ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161ee:	4606      	mov	r6, r0
 80161f0:	460f      	mov	r7, r1
 80161f2:	4620      	mov	r0, r4
 80161f4:	4629      	mov	r1, r5
 80161f6:	f7ea fa27 	bl	8000648 <__aeabi_dmul>
 80161fa:	4b52      	ldr	r3, [pc, #328]	@ (8016344 <__ieee754_pow+0x414>)
 80161fc:	4682      	mov	sl, r0
 80161fe:	468b      	mov	fp, r1
 8016200:	2200      	movs	r2, #0
 8016202:	4620      	mov	r0, r4
 8016204:	4629      	mov	r1, r5
 8016206:	f7ea fa1f 	bl	8000648 <__aeabi_dmul>
 801620a:	4602      	mov	r2, r0
 801620c:	460b      	mov	r3, r1
 801620e:	a148      	add	r1, pc, #288	@ (adr r1, 8016330 <__ieee754_pow+0x400>)
 8016210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016214:	f7ea f860 	bl	80002d8 <__aeabi_dsub>
 8016218:	4622      	mov	r2, r4
 801621a:	462b      	mov	r3, r5
 801621c:	f7ea fa14 	bl	8000648 <__aeabi_dmul>
 8016220:	4602      	mov	r2, r0
 8016222:	460b      	mov	r3, r1
 8016224:	2000      	movs	r0, #0
 8016226:	4948      	ldr	r1, [pc, #288]	@ (8016348 <__ieee754_pow+0x418>)
 8016228:	f7ea f856 	bl	80002d8 <__aeabi_dsub>
 801622c:	4622      	mov	r2, r4
 801622e:	4680      	mov	r8, r0
 8016230:	4689      	mov	r9, r1
 8016232:	462b      	mov	r3, r5
 8016234:	4620      	mov	r0, r4
 8016236:	4629      	mov	r1, r5
 8016238:	f7ea fa06 	bl	8000648 <__aeabi_dmul>
 801623c:	4602      	mov	r2, r0
 801623e:	460b      	mov	r3, r1
 8016240:	4640      	mov	r0, r8
 8016242:	4649      	mov	r1, r9
 8016244:	f7ea fa00 	bl	8000648 <__aeabi_dmul>
 8016248:	a33b      	add	r3, pc, #236	@ (adr r3, 8016338 <__ieee754_pow+0x408>)
 801624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801624e:	f7ea f9fb 	bl	8000648 <__aeabi_dmul>
 8016252:	4602      	mov	r2, r0
 8016254:	460b      	mov	r3, r1
 8016256:	4650      	mov	r0, sl
 8016258:	4659      	mov	r1, fp
 801625a:	f7ea f83d 	bl	80002d8 <__aeabi_dsub>
 801625e:	4602      	mov	r2, r0
 8016260:	460b      	mov	r3, r1
 8016262:	4680      	mov	r8, r0
 8016264:	4689      	mov	r9, r1
 8016266:	4630      	mov	r0, r6
 8016268:	4639      	mov	r1, r7
 801626a:	f7ea f837 	bl	80002dc <__adddf3>
 801626e:	2400      	movs	r4, #0
 8016270:	4632      	mov	r2, r6
 8016272:	463b      	mov	r3, r7
 8016274:	4620      	mov	r0, r4
 8016276:	460d      	mov	r5, r1
 8016278:	f7ea f82e 	bl	80002d8 <__aeabi_dsub>
 801627c:	4602      	mov	r2, r0
 801627e:	460b      	mov	r3, r1
 8016280:	4640      	mov	r0, r8
 8016282:	4649      	mov	r1, r9
 8016284:	f7ea f828 	bl	80002d8 <__aeabi_dsub>
 8016288:	e9dd 2300 	ldrd	r2, r3, [sp]
 801628c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016290:	2300      	movs	r3, #0
 8016292:	9304      	str	r3, [sp, #16]
 8016294:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016298:	4606      	mov	r6, r0
 801629a:	460f      	mov	r7, r1
 801629c:	4652      	mov	r2, sl
 801629e:	465b      	mov	r3, fp
 80162a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80162a4:	f7ea f818 	bl	80002d8 <__aeabi_dsub>
 80162a8:	4622      	mov	r2, r4
 80162aa:	462b      	mov	r3, r5
 80162ac:	f7ea f9cc 	bl	8000648 <__aeabi_dmul>
 80162b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80162b4:	4680      	mov	r8, r0
 80162b6:	4689      	mov	r9, r1
 80162b8:	4630      	mov	r0, r6
 80162ba:	4639      	mov	r1, r7
 80162bc:	f7ea f9c4 	bl	8000648 <__aeabi_dmul>
 80162c0:	4602      	mov	r2, r0
 80162c2:	460b      	mov	r3, r1
 80162c4:	4640      	mov	r0, r8
 80162c6:	4649      	mov	r1, r9
 80162c8:	f7ea f808 	bl	80002dc <__adddf3>
 80162cc:	4652      	mov	r2, sl
 80162ce:	465b      	mov	r3, fp
 80162d0:	4606      	mov	r6, r0
 80162d2:	460f      	mov	r7, r1
 80162d4:	4620      	mov	r0, r4
 80162d6:	4629      	mov	r1, r5
 80162d8:	f7ea f9b6 	bl	8000648 <__aeabi_dmul>
 80162dc:	460b      	mov	r3, r1
 80162de:	4602      	mov	r2, r0
 80162e0:	4680      	mov	r8, r0
 80162e2:	4689      	mov	r9, r1
 80162e4:	4630      	mov	r0, r6
 80162e6:	4639      	mov	r1, r7
 80162e8:	f7e9 fff8 	bl	80002dc <__adddf3>
 80162ec:	4b17      	ldr	r3, [pc, #92]	@ (801634c <__ieee754_pow+0x41c>)
 80162ee:	4299      	cmp	r1, r3
 80162f0:	4604      	mov	r4, r0
 80162f2:	460d      	mov	r5, r1
 80162f4:	468a      	mov	sl, r1
 80162f6:	468b      	mov	fp, r1
 80162f8:	f340 82ef 	ble.w	80168da <__ieee754_pow+0x9aa>
 80162fc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8016300:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8016304:	4303      	orrs	r3, r0
 8016306:	f000 81e8 	beq.w	80166da <__ieee754_pow+0x7aa>
 801630a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801630e:	2200      	movs	r2, #0
 8016310:	2300      	movs	r3, #0
 8016312:	f7ea fc0b 	bl	8000b2c <__aeabi_dcmplt>
 8016316:	3800      	subs	r0, #0
 8016318:	bf18      	it	ne
 801631a:	2001      	movne	r0, #1
 801631c:	e710      	b.n	8016140 <__ieee754_pow+0x210>
 801631e:	bf00      	nop
 8016320:	60000000 	.word	0x60000000
 8016324:	3ff71547 	.word	0x3ff71547
 8016328:	f85ddf44 	.word	0xf85ddf44
 801632c:	3e54ae0b 	.word	0x3e54ae0b
 8016330:	55555555 	.word	0x55555555
 8016334:	3fd55555 	.word	0x3fd55555
 8016338:	652b82fe 	.word	0x652b82fe
 801633c:	3ff71547 	.word	0x3ff71547
 8016340:	3ff00000 	.word	0x3ff00000
 8016344:	3fd00000 	.word	0x3fd00000
 8016348:	3fe00000 	.word	0x3fe00000
 801634c:	408fffff 	.word	0x408fffff
 8016350:	4bd5      	ldr	r3, [pc, #852]	@ (80166a8 <__ieee754_pow+0x778>)
 8016352:	402b      	ands	r3, r5
 8016354:	2200      	movs	r2, #0
 8016356:	b92b      	cbnz	r3, 8016364 <__ieee754_pow+0x434>
 8016358:	4bd4      	ldr	r3, [pc, #848]	@ (80166ac <__ieee754_pow+0x77c>)
 801635a:	f7ea f975 	bl	8000648 <__aeabi_dmul>
 801635e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8016362:	468b      	mov	fp, r1
 8016364:	ea4f 532b 	mov.w	r3, fp, asr #20
 8016368:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 801636c:	4413      	add	r3, r2
 801636e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016370:	4bcf      	ldr	r3, [pc, #828]	@ (80166b0 <__ieee754_pow+0x780>)
 8016372:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8016376:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 801637a:	459b      	cmp	fp, r3
 801637c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016380:	dd08      	ble.n	8016394 <__ieee754_pow+0x464>
 8016382:	4bcc      	ldr	r3, [pc, #816]	@ (80166b4 <__ieee754_pow+0x784>)
 8016384:	459b      	cmp	fp, r3
 8016386:	f340 81a5 	ble.w	80166d4 <__ieee754_pow+0x7a4>
 801638a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801638c:	3301      	adds	r3, #1
 801638e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016390:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8016394:	f04f 0a00 	mov.w	sl, #0
 8016398:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801639c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801639e:	4bc6      	ldr	r3, [pc, #792]	@ (80166b8 <__ieee754_pow+0x788>)
 80163a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80163a4:	ed93 7b00 	vldr	d7, [r3]
 80163a8:	4629      	mov	r1, r5
 80163aa:	ec53 2b17 	vmov	r2, r3, d7
 80163ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80163b2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80163b6:	f7e9 ff8f 	bl	80002d8 <__aeabi_dsub>
 80163ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80163be:	4606      	mov	r6, r0
 80163c0:	460f      	mov	r7, r1
 80163c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80163c6:	f7e9 ff89 	bl	80002dc <__adddf3>
 80163ca:	4602      	mov	r2, r0
 80163cc:	460b      	mov	r3, r1
 80163ce:	2000      	movs	r0, #0
 80163d0:	49ba      	ldr	r1, [pc, #744]	@ (80166bc <__ieee754_pow+0x78c>)
 80163d2:	f7ea fa63 	bl	800089c <__aeabi_ddiv>
 80163d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80163da:	4602      	mov	r2, r0
 80163dc:	460b      	mov	r3, r1
 80163de:	4630      	mov	r0, r6
 80163e0:	4639      	mov	r1, r7
 80163e2:	f7ea f931 	bl	8000648 <__aeabi_dmul>
 80163e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80163ea:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80163ee:	106d      	asrs	r5, r5, #1
 80163f0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80163f4:	f04f 0b00 	mov.w	fp, #0
 80163f8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80163fc:	4661      	mov	r1, ip
 80163fe:	2200      	movs	r2, #0
 8016400:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8016404:	4658      	mov	r0, fp
 8016406:	46e1      	mov	r9, ip
 8016408:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 801640c:	4614      	mov	r4, r2
 801640e:	461d      	mov	r5, r3
 8016410:	f7ea f91a 	bl	8000648 <__aeabi_dmul>
 8016414:	4602      	mov	r2, r0
 8016416:	460b      	mov	r3, r1
 8016418:	4630      	mov	r0, r6
 801641a:	4639      	mov	r1, r7
 801641c:	f7e9 ff5c 	bl	80002d8 <__aeabi_dsub>
 8016420:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016424:	4606      	mov	r6, r0
 8016426:	460f      	mov	r7, r1
 8016428:	4620      	mov	r0, r4
 801642a:	4629      	mov	r1, r5
 801642c:	f7e9 ff54 	bl	80002d8 <__aeabi_dsub>
 8016430:	4602      	mov	r2, r0
 8016432:	460b      	mov	r3, r1
 8016434:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016438:	f7e9 ff4e 	bl	80002d8 <__aeabi_dsub>
 801643c:	465a      	mov	r2, fp
 801643e:	464b      	mov	r3, r9
 8016440:	f7ea f902 	bl	8000648 <__aeabi_dmul>
 8016444:	4602      	mov	r2, r0
 8016446:	460b      	mov	r3, r1
 8016448:	4630      	mov	r0, r6
 801644a:	4639      	mov	r1, r7
 801644c:	f7e9 ff44 	bl	80002d8 <__aeabi_dsub>
 8016450:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8016454:	f7ea f8f8 	bl	8000648 <__aeabi_dmul>
 8016458:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801645c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016460:	4610      	mov	r0, r2
 8016462:	4619      	mov	r1, r3
 8016464:	f7ea f8f0 	bl	8000648 <__aeabi_dmul>
 8016468:	a37d      	add	r3, pc, #500	@ (adr r3, 8016660 <__ieee754_pow+0x730>)
 801646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801646e:	4604      	mov	r4, r0
 8016470:	460d      	mov	r5, r1
 8016472:	f7ea f8e9 	bl	8000648 <__aeabi_dmul>
 8016476:	a37c      	add	r3, pc, #496	@ (adr r3, 8016668 <__ieee754_pow+0x738>)
 8016478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801647c:	f7e9 ff2e 	bl	80002dc <__adddf3>
 8016480:	4622      	mov	r2, r4
 8016482:	462b      	mov	r3, r5
 8016484:	f7ea f8e0 	bl	8000648 <__aeabi_dmul>
 8016488:	a379      	add	r3, pc, #484	@ (adr r3, 8016670 <__ieee754_pow+0x740>)
 801648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801648e:	f7e9 ff25 	bl	80002dc <__adddf3>
 8016492:	4622      	mov	r2, r4
 8016494:	462b      	mov	r3, r5
 8016496:	f7ea f8d7 	bl	8000648 <__aeabi_dmul>
 801649a:	a377      	add	r3, pc, #476	@ (adr r3, 8016678 <__ieee754_pow+0x748>)
 801649c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164a0:	f7e9 ff1c 	bl	80002dc <__adddf3>
 80164a4:	4622      	mov	r2, r4
 80164a6:	462b      	mov	r3, r5
 80164a8:	f7ea f8ce 	bl	8000648 <__aeabi_dmul>
 80164ac:	a374      	add	r3, pc, #464	@ (adr r3, 8016680 <__ieee754_pow+0x750>)
 80164ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164b2:	f7e9 ff13 	bl	80002dc <__adddf3>
 80164b6:	4622      	mov	r2, r4
 80164b8:	462b      	mov	r3, r5
 80164ba:	f7ea f8c5 	bl	8000648 <__aeabi_dmul>
 80164be:	a372      	add	r3, pc, #456	@ (adr r3, 8016688 <__ieee754_pow+0x758>)
 80164c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164c4:	f7e9 ff0a 	bl	80002dc <__adddf3>
 80164c8:	4622      	mov	r2, r4
 80164ca:	4606      	mov	r6, r0
 80164cc:	460f      	mov	r7, r1
 80164ce:	462b      	mov	r3, r5
 80164d0:	4620      	mov	r0, r4
 80164d2:	4629      	mov	r1, r5
 80164d4:	f7ea f8b8 	bl	8000648 <__aeabi_dmul>
 80164d8:	4602      	mov	r2, r0
 80164da:	460b      	mov	r3, r1
 80164dc:	4630      	mov	r0, r6
 80164de:	4639      	mov	r1, r7
 80164e0:	f7ea f8b2 	bl	8000648 <__aeabi_dmul>
 80164e4:	465a      	mov	r2, fp
 80164e6:	4604      	mov	r4, r0
 80164e8:	460d      	mov	r5, r1
 80164ea:	464b      	mov	r3, r9
 80164ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80164f0:	f7e9 fef4 	bl	80002dc <__adddf3>
 80164f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80164f8:	f7ea f8a6 	bl	8000648 <__aeabi_dmul>
 80164fc:	4622      	mov	r2, r4
 80164fe:	462b      	mov	r3, r5
 8016500:	f7e9 feec 	bl	80002dc <__adddf3>
 8016504:	465a      	mov	r2, fp
 8016506:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801650a:	464b      	mov	r3, r9
 801650c:	4658      	mov	r0, fp
 801650e:	4649      	mov	r1, r9
 8016510:	f7ea f89a 	bl	8000648 <__aeabi_dmul>
 8016514:	4b6a      	ldr	r3, [pc, #424]	@ (80166c0 <__ieee754_pow+0x790>)
 8016516:	2200      	movs	r2, #0
 8016518:	4606      	mov	r6, r0
 801651a:	460f      	mov	r7, r1
 801651c:	f7e9 fede 	bl	80002dc <__adddf3>
 8016520:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016524:	f7e9 feda 	bl	80002dc <__adddf3>
 8016528:	46d8      	mov	r8, fp
 801652a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 801652e:	460d      	mov	r5, r1
 8016530:	465a      	mov	r2, fp
 8016532:	460b      	mov	r3, r1
 8016534:	4640      	mov	r0, r8
 8016536:	4649      	mov	r1, r9
 8016538:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 801653c:	f7ea f884 	bl	8000648 <__aeabi_dmul>
 8016540:	465c      	mov	r4, fp
 8016542:	4680      	mov	r8, r0
 8016544:	4689      	mov	r9, r1
 8016546:	4b5e      	ldr	r3, [pc, #376]	@ (80166c0 <__ieee754_pow+0x790>)
 8016548:	2200      	movs	r2, #0
 801654a:	4620      	mov	r0, r4
 801654c:	4629      	mov	r1, r5
 801654e:	f7e9 fec3 	bl	80002d8 <__aeabi_dsub>
 8016552:	4632      	mov	r2, r6
 8016554:	463b      	mov	r3, r7
 8016556:	f7e9 febf 	bl	80002d8 <__aeabi_dsub>
 801655a:	4602      	mov	r2, r0
 801655c:	460b      	mov	r3, r1
 801655e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016562:	f7e9 feb9 	bl	80002d8 <__aeabi_dsub>
 8016566:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801656a:	f7ea f86d 	bl	8000648 <__aeabi_dmul>
 801656e:	4622      	mov	r2, r4
 8016570:	4606      	mov	r6, r0
 8016572:	460f      	mov	r7, r1
 8016574:	462b      	mov	r3, r5
 8016576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801657a:	f7ea f865 	bl	8000648 <__aeabi_dmul>
 801657e:	4602      	mov	r2, r0
 8016580:	460b      	mov	r3, r1
 8016582:	4630      	mov	r0, r6
 8016584:	4639      	mov	r1, r7
 8016586:	f7e9 fea9 	bl	80002dc <__adddf3>
 801658a:	4606      	mov	r6, r0
 801658c:	460f      	mov	r7, r1
 801658e:	4602      	mov	r2, r0
 8016590:	460b      	mov	r3, r1
 8016592:	4640      	mov	r0, r8
 8016594:	4649      	mov	r1, r9
 8016596:	f7e9 fea1 	bl	80002dc <__adddf3>
 801659a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 801659e:	a33c      	add	r3, pc, #240	@ (adr r3, 8016690 <__ieee754_pow+0x760>)
 80165a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165a4:	4658      	mov	r0, fp
 80165a6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80165aa:	460d      	mov	r5, r1
 80165ac:	f7ea f84c 	bl	8000648 <__aeabi_dmul>
 80165b0:	465c      	mov	r4, fp
 80165b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80165b6:	4642      	mov	r2, r8
 80165b8:	464b      	mov	r3, r9
 80165ba:	4620      	mov	r0, r4
 80165bc:	4629      	mov	r1, r5
 80165be:	f7e9 fe8b 	bl	80002d8 <__aeabi_dsub>
 80165c2:	4602      	mov	r2, r0
 80165c4:	460b      	mov	r3, r1
 80165c6:	4630      	mov	r0, r6
 80165c8:	4639      	mov	r1, r7
 80165ca:	f7e9 fe85 	bl	80002d8 <__aeabi_dsub>
 80165ce:	a332      	add	r3, pc, #200	@ (adr r3, 8016698 <__ieee754_pow+0x768>)
 80165d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165d4:	f7ea f838 	bl	8000648 <__aeabi_dmul>
 80165d8:	a331      	add	r3, pc, #196	@ (adr r3, 80166a0 <__ieee754_pow+0x770>)
 80165da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165de:	4606      	mov	r6, r0
 80165e0:	460f      	mov	r7, r1
 80165e2:	4620      	mov	r0, r4
 80165e4:	4629      	mov	r1, r5
 80165e6:	f7ea f82f 	bl	8000648 <__aeabi_dmul>
 80165ea:	4602      	mov	r2, r0
 80165ec:	460b      	mov	r3, r1
 80165ee:	4630      	mov	r0, r6
 80165f0:	4639      	mov	r1, r7
 80165f2:	f7e9 fe73 	bl	80002dc <__adddf3>
 80165f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80165f8:	4b32      	ldr	r3, [pc, #200]	@ (80166c4 <__ieee754_pow+0x794>)
 80165fa:	4413      	add	r3, r2
 80165fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016600:	f7e9 fe6c 	bl	80002dc <__adddf3>
 8016604:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016608:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801660a:	f7e9 ffb3 	bl	8000574 <__aeabi_i2d>
 801660e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016610:	4b2d      	ldr	r3, [pc, #180]	@ (80166c8 <__ieee754_pow+0x798>)
 8016612:	4413      	add	r3, r2
 8016614:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016618:	4606      	mov	r6, r0
 801661a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801661e:	460f      	mov	r7, r1
 8016620:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016624:	f7e9 fe5a 	bl	80002dc <__adddf3>
 8016628:	4642      	mov	r2, r8
 801662a:	464b      	mov	r3, r9
 801662c:	f7e9 fe56 	bl	80002dc <__adddf3>
 8016630:	4632      	mov	r2, r6
 8016632:	463b      	mov	r3, r7
 8016634:	f7e9 fe52 	bl	80002dc <__adddf3>
 8016638:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 801663c:	4632      	mov	r2, r6
 801663e:	463b      	mov	r3, r7
 8016640:	4658      	mov	r0, fp
 8016642:	460d      	mov	r5, r1
 8016644:	f7e9 fe48 	bl	80002d8 <__aeabi_dsub>
 8016648:	4642      	mov	r2, r8
 801664a:	464b      	mov	r3, r9
 801664c:	f7e9 fe44 	bl	80002d8 <__aeabi_dsub>
 8016650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016654:	f7e9 fe40 	bl	80002d8 <__aeabi_dsub>
 8016658:	465c      	mov	r4, fp
 801665a:	4602      	mov	r2, r0
 801665c:	e036      	b.n	80166cc <__ieee754_pow+0x79c>
 801665e:	bf00      	nop
 8016660:	4a454eef 	.word	0x4a454eef
 8016664:	3fca7e28 	.word	0x3fca7e28
 8016668:	93c9db65 	.word	0x93c9db65
 801666c:	3fcd864a 	.word	0x3fcd864a
 8016670:	a91d4101 	.word	0xa91d4101
 8016674:	3fd17460 	.word	0x3fd17460
 8016678:	518f264d 	.word	0x518f264d
 801667c:	3fd55555 	.word	0x3fd55555
 8016680:	db6fabff 	.word	0xdb6fabff
 8016684:	3fdb6db6 	.word	0x3fdb6db6
 8016688:	33333303 	.word	0x33333303
 801668c:	3fe33333 	.word	0x3fe33333
 8016690:	e0000000 	.word	0xe0000000
 8016694:	3feec709 	.word	0x3feec709
 8016698:	dc3a03fd 	.word	0xdc3a03fd
 801669c:	3feec709 	.word	0x3feec709
 80166a0:	145b01f5 	.word	0x145b01f5
 80166a4:	be3e2fe0 	.word	0xbe3e2fe0
 80166a8:	7ff00000 	.word	0x7ff00000
 80166ac:	43400000 	.word	0x43400000
 80166b0:	0003988e 	.word	0x0003988e
 80166b4:	000bb679 	.word	0x000bb679
 80166b8:	08017530 	.word	0x08017530
 80166bc:	3ff00000 	.word	0x3ff00000
 80166c0:	40080000 	.word	0x40080000
 80166c4:	08017510 	.word	0x08017510
 80166c8:	08017520 	.word	0x08017520
 80166cc:	460b      	mov	r3, r1
 80166ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80166d2:	e5d7      	b.n	8016284 <__ieee754_pow+0x354>
 80166d4:	f04f 0a01 	mov.w	sl, #1
 80166d8:	e65e      	b.n	8016398 <__ieee754_pow+0x468>
 80166da:	a3b4      	add	r3, pc, #720	@ (adr r3, 80169ac <__ieee754_pow+0xa7c>)
 80166dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e0:	4630      	mov	r0, r6
 80166e2:	4639      	mov	r1, r7
 80166e4:	f7e9 fdfa 	bl	80002dc <__adddf3>
 80166e8:	4642      	mov	r2, r8
 80166ea:	e9cd 0100 	strd	r0, r1, [sp]
 80166ee:	464b      	mov	r3, r9
 80166f0:	4620      	mov	r0, r4
 80166f2:	4629      	mov	r1, r5
 80166f4:	f7e9 fdf0 	bl	80002d8 <__aeabi_dsub>
 80166f8:	4602      	mov	r2, r0
 80166fa:	460b      	mov	r3, r1
 80166fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016700:	f7ea fa32 	bl	8000b68 <__aeabi_dcmpgt>
 8016704:	2800      	cmp	r0, #0
 8016706:	f47f ae00 	bne.w	801630a <__ieee754_pow+0x3da>
 801670a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 801670e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8016712:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8016716:	fa43 fa0a 	asr.w	sl, r3, sl
 801671a:	44da      	add	sl, fp
 801671c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8016720:	489d      	ldr	r0, [pc, #628]	@ (8016998 <__ieee754_pow+0xa68>)
 8016722:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8016726:	4108      	asrs	r0, r1
 8016728:	ea00 030a 	and.w	r3, r0, sl
 801672c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8016730:	f1c1 0114 	rsb	r1, r1, #20
 8016734:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8016738:	fa4a fa01 	asr.w	sl, sl, r1
 801673c:	f1bb 0f00 	cmp.w	fp, #0
 8016740:	4640      	mov	r0, r8
 8016742:	4649      	mov	r1, r9
 8016744:	f04f 0200 	mov.w	r2, #0
 8016748:	bfb8      	it	lt
 801674a:	f1ca 0a00 	rsblt	sl, sl, #0
 801674e:	f7e9 fdc3 	bl	80002d8 <__aeabi_dsub>
 8016752:	4680      	mov	r8, r0
 8016754:	4689      	mov	r9, r1
 8016756:	4632      	mov	r2, r6
 8016758:	463b      	mov	r3, r7
 801675a:	4640      	mov	r0, r8
 801675c:	4649      	mov	r1, r9
 801675e:	f7e9 fdbd 	bl	80002dc <__adddf3>
 8016762:	2400      	movs	r4, #0
 8016764:	a37c      	add	r3, pc, #496	@ (adr r3, 8016958 <__ieee754_pow+0xa28>)
 8016766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801676a:	4620      	mov	r0, r4
 801676c:	460d      	mov	r5, r1
 801676e:	f7e9 ff6b 	bl	8000648 <__aeabi_dmul>
 8016772:	4642      	mov	r2, r8
 8016774:	e9cd 0100 	strd	r0, r1, [sp]
 8016778:	464b      	mov	r3, r9
 801677a:	4620      	mov	r0, r4
 801677c:	4629      	mov	r1, r5
 801677e:	f7e9 fdab 	bl	80002d8 <__aeabi_dsub>
 8016782:	4602      	mov	r2, r0
 8016784:	460b      	mov	r3, r1
 8016786:	4630      	mov	r0, r6
 8016788:	4639      	mov	r1, r7
 801678a:	f7e9 fda5 	bl	80002d8 <__aeabi_dsub>
 801678e:	a374      	add	r3, pc, #464	@ (adr r3, 8016960 <__ieee754_pow+0xa30>)
 8016790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016794:	f7e9 ff58 	bl	8000648 <__aeabi_dmul>
 8016798:	a373      	add	r3, pc, #460	@ (adr r3, 8016968 <__ieee754_pow+0xa38>)
 801679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801679e:	4680      	mov	r8, r0
 80167a0:	4689      	mov	r9, r1
 80167a2:	4620      	mov	r0, r4
 80167a4:	4629      	mov	r1, r5
 80167a6:	f7e9 ff4f 	bl	8000648 <__aeabi_dmul>
 80167aa:	4602      	mov	r2, r0
 80167ac:	460b      	mov	r3, r1
 80167ae:	4640      	mov	r0, r8
 80167b0:	4649      	mov	r1, r9
 80167b2:	f7e9 fd93 	bl	80002dc <__adddf3>
 80167b6:	4604      	mov	r4, r0
 80167b8:	460d      	mov	r5, r1
 80167ba:	4602      	mov	r2, r0
 80167bc:	460b      	mov	r3, r1
 80167be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167c2:	f7e9 fd8b 	bl	80002dc <__adddf3>
 80167c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80167ca:	4680      	mov	r8, r0
 80167cc:	4689      	mov	r9, r1
 80167ce:	f7e9 fd83 	bl	80002d8 <__aeabi_dsub>
 80167d2:	4602      	mov	r2, r0
 80167d4:	460b      	mov	r3, r1
 80167d6:	4620      	mov	r0, r4
 80167d8:	4629      	mov	r1, r5
 80167da:	f7e9 fd7d 	bl	80002d8 <__aeabi_dsub>
 80167de:	4642      	mov	r2, r8
 80167e0:	4606      	mov	r6, r0
 80167e2:	460f      	mov	r7, r1
 80167e4:	464b      	mov	r3, r9
 80167e6:	4640      	mov	r0, r8
 80167e8:	4649      	mov	r1, r9
 80167ea:	f7e9 ff2d 	bl	8000648 <__aeabi_dmul>
 80167ee:	a360      	add	r3, pc, #384	@ (adr r3, 8016970 <__ieee754_pow+0xa40>)
 80167f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167f4:	4604      	mov	r4, r0
 80167f6:	460d      	mov	r5, r1
 80167f8:	f7e9 ff26 	bl	8000648 <__aeabi_dmul>
 80167fc:	a35e      	add	r3, pc, #376	@ (adr r3, 8016978 <__ieee754_pow+0xa48>)
 80167fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016802:	f7e9 fd69 	bl	80002d8 <__aeabi_dsub>
 8016806:	4622      	mov	r2, r4
 8016808:	462b      	mov	r3, r5
 801680a:	f7e9 ff1d 	bl	8000648 <__aeabi_dmul>
 801680e:	a35c      	add	r3, pc, #368	@ (adr r3, 8016980 <__ieee754_pow+0xa50>)
 8016810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016814:	f7e9 fd62 	bl	80002dc <__adddf3>
 8016818:	4622      	mov	r2, r4
 801681a:	462b      	mov	r3, r5
 801681c:	f7e9 ff14 	bl	8000648 <__aeabi_dmul>
 8016820:	a359      	add	r3, pc, #356	@ (adr r3, 8016988 <__ieee754_pow+0xa58>)
 8016822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016826:	f7e9 fd57 	bl	80002d8 <__aeabi_dsub>
 801682a:	4622      	mov	r2, r4
 801682c:	462b      	mov	r3, r5
 801682e:	f7e9 ff0b 	bl	8000648 <__aeabi_dmul>
 8016832:	a357      	add	r3, pc, #348	@ (adr r3, 8016990 <__ieee754_pow+0xa60>)
 8016834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016838:	f7e9 fd50 	bl	80002dc <__adddf3>
 801683c:	4622      	mov	r2, r4
 801683e:	462b      	mov	r3, r5
 8016840:	f7e9 ff02 	bl	8000648 <__aeabi_dmul>
 8016844:	4602      	mov	r2, r0
 8016846:	460b      	mov	r3, r1
 8016848:	4640      	mov	r0, r8
 801684a:	4649      	mov	r1, r9
 801684c:	f7e9 fd44 	bl	80002d8 <__aeabi_dsub>
 8016850:	4604      	mov	r4, r0
 8016852:	460d      	mov	r5, r1
 8016854:	4602      	mov	r2, r0
 8016856:	460b      	mov	r3, r1
 8016858:	4640      	mov	r0, r8
 801685a:	4649      	mov	r1, r9
 801685c:	f7e9 fef4 	bl	8000648 <__aeabi_dmul>
 8016860:	2200      	movs	r2, #0
 8016862:	e9cd 0100 	strd	r0, r1, [sp]
 8016866:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801686a:	4620      	mov	r0, r4
 801686c:	4629      	mov	r1, r5
 801686e:	f7e9 fd33 	bl	80002d8 <__aeabi_dsub>
 8016872:	4602      	mov	r2, r0
 8016874:	460b      	mov	r3, r1
 8016876:	e9dd 0100 	ldrd	r0, r1, [sp]
 801687a:	f7ea f80f 	bl	800089c <__aeabi_ddiv>
 801687e:	4632      	mov	r2, r6
 8016880:	4604      	mov	r4, r0
 8016882:	460d      	mov	r5, r1
 8016884:	463b      	mov	r3, r7
 8016886:	4640      	mov	r0, r8
 8016888:	4649      	mov	r1, r9
 801688a:	f7e9 fedd 	bl	8000648 <__aeabi_dmul>
 801688e:	4632      	mov	r2, r6
 8016890:	463b      	mov	r3, r7
 8016892:	f7e9 fd23 	bl	80002dc <__adddf3>
 8016896:	4602      	mov	r2, r0
 8016898:	460b      	mov	r3, r1
 801689a:	4620      	mov	r0, r4
 801689c:	4629      	mov	r1, r5
 801689e:	f7e9 fd1b 	bl	80002d8 <__aeabi_dsub>
 80168a2:	4642      	mov	r2, r8
 80168a4:	464b      	mov	r3, r9
 80168a6:	f7e9 fd17 	bl	80002d8 <__aeabi_dsub>
 80168aa:	460b      	mov	r3, r1
 80168ac:	4602      	mov	r2, r0
 80168ae:	493b      	ldr	r1, [pc, #236]	@ (801699c <__ieee754_pow+0xa6c>)
 80168b0:	2000      	movs	r0, #0
 80168b2:	f7e9 fd11 	bl	80002d8 <__aeabi_dsub>
 80168b6:	ec41 0b10 	vmov	d0, r0, r1
 80168ba:	ee10 3a90 	vmov	r3, s1
 80168be:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80168c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80168c6:	da30      	bge.n	801692a <__ieee754_pow+0x9fa>
 80168c8:	4650      	mov	r0, sl
 80168ca:	f000 f87d 	bl	80169c8 <scalbn>
 80168ce:	ec51 0b10 	vmov	r0, r1, d0
 80168d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80168d6:	f7ff bbd2 	b.w	801607e <__ieee754_pow+0x14e>
 80168da:	4c31      	ldr	r4, [pc, #196]	@ (80169a0 <__ieee754_pow+0xa70>)
 80168dc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80168e0:	42a3      	cmp	r3, r4
 80168e2:	d91a      	bls.n	801691a <__ieee754_pow+0x9ea>
 80168e4:	4b2f      	ldr	r3, [pc, #188]	@ (80169a4 <__ieee754_pow+0xa74>)
 80168e6:	440b      	add	r3, r1
 80168e8:	4303      	orrs	r3, r0
 80168ea:	d009      	beq.n	8016900 <__ieee754_pow+0x9d0>
 80168ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80168f0:	2200      	movs	r2, #0
 80168f2:	2300      	movs	r3, #0
 80168f4:	f7ea f91a 	bl	8000b2c <__aeabi_dcmplt>
 80168f8:	3800      	subs	r0, #0
 80168fa:	bf18      	it	ne
 80168fc:	2001      	movne	r0, #1
 80168fe:	e42b      	b.n	8016158 <__ieee754_pow+0x228>
 8016900:	4642      	mov	r2, r8
 8016902:	464b      	mov	r3, r9
 8016904:	f7e9 fce8 	bl	80002d8 <__aeabi_dsub>
 8016908:	4632      	mov	r2, r6
 801690a:	463b      	mov	r3, r7
 801690c:	f7ea f922 	bl	8000b54 <__aeabi_dcmpge>
 8016910:	2800      	cmp	r0, #0
 8016912:	d1eb      	bne.n	80168ec <__ieee754_pow+0x9bc>
 8016914:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80169b4 <__ieee754_pow+0xa84>
 8016918:	e6f7      	b.n	801670a <__ieee754_pow+0x7da>
 801691a:	469a      	mov	sl, r3
 801691c:	4b22      	ldr	r3, [pc, #136]	@ (80169a8 <__ieee754_pow+0xa78>)
 801691e:	459a      	cmp	sl, r3
 8016920:	f63f aef3 	bhi.w	801670a <__ieee754_pow+0x7da>
 8016924:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016928:	e715      	b.n	8016756 <__ieee754_pow+0x826>
 801692a:	ec51 0b10 	vmov	r0, r1, d0
 801692e:	4619      	mov	r1, r3
 8016930:	e7cf      	b.n	80168d2 <__ieee754_pow+0x9a2>
 8016932:	491a      	ldr	r1, [pc, #104]	@ (801699c <__ieee754_pow+0xa6c>)
 8016934:	2000      	movs	r0, #0
 8016936:	f7ff bb18 	b.w	8015f6a <__ieee754_pow+0x3a>
 801693a:	2000      	movs	r0, #0
 801693c:	2100      	movs	r1, #0
 801693e:	f7ff bb14 	b.w	8015f6a <__ieee754_pow+0x3a>
 8016942:	4630      	mov	r0, r6
 8016944:	4639      	mov	r1, r7
 8016946:	f7ff bb10 	b.w	8015f6a <__ieee754_pow+0x3a>
 801694a:	460c      	mov	r4, r1
 801694c:	f7ff bb5e 	b.w	801600c <__ieee754_pow+0xdc>
 8016950:	2400      	movs	r4, #0
 8016952:	f7ff bb49 	b.w	8015fe8 <__ieee754_pow+0xb8>
 8016956:	bf00      	nop
 8016958:	00000000 	.word	0x00000000
 801695c:	3fe62e43 	.word	0x3fe62e43
 8016960:	fefa39ef 	.word	0xfefa39ef
 8016964:	3fe62e42 	.word	0x3fe62e42
 8016968:	0ca86c39 	.word	0x0ca86c39
 801696c:	be205c61 	.word	0xbe205c61
 8016970:	72bea4d0 	.word	0x72bea4d0
 8016974:	3e663769 	.word	0x3e663769
 8016978:	c5d26bf1 	.word	0xc5d26bf1
 801697c:	3ebbbd41 	.word	0x3ebbbd41
 8016980:	af25de2c 	.word	0xaf25de2c
 8016984:	3f11566a 	.word	0x3f11566a
 8016988:	16bebd93 	.word	0x16bebd93
 801698c:	3f66c16c 	.word	0x3f66c16c
 8016990:	5555553e 	.word	0x5555553e
 8016994:	3fc55555 	.word	0x3fc55555
 8016998:	fff00000 	.word	0xfff00000
 801699c:	3ff00000 	.word	0x3ff00000
 80169a0:	4090cbff 	.word	0x4090cbff
 80169a4:	3f6f3400 	.word	0x3f6f3400
 80169a8:	3fe00000 	.word	0x3fe00000
 80169ac:	652b82fe 	.word	0x652b82fe
 80169b0:	3c971547 	.word	0x3c971547
 80169b4:	4090cc00 	.word	0x4090cc00

080169b8 <fabs>:
 80169b8:	ec51 0b10 	vmov	r0, r1, d0
 80169bc:	4602      	mov	r2, r0
 80169be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80169c2:	ec43 2b10 	vmov	d0, r2, r3
 80169c6:	4770      	bx	lr

080169c8 <scalbn>:
 80169c8:	b570      	push	{r4, r5, r6, lr}
 80169ca:	ec55 4b10 	vmov	r4, r5, d0
 80169ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80169d2:	4606      	mov	r6, r0
 80169d4:	462b      	mov	r3, r5
 80169d6:	b991      	cbnz	r1, 80169fe <scalbn+0x36>
 80169d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80169dc:	4323      	orrs	r3, r4
 80169de:	d03d      	beq.n	8016a5c <scalbn+0x94>
 80169e0:	4b35      	ldr	r3, [pc, #212]	@ (8016ab8 <scalbn+0xf0>)
 80169e2:	4620      	mov	r0, r4
 80169e4:	4629      	mov	r1, r5
 80169e6:	2200      	movs	r2, #0
 80169e8:	f7e9 fe2e 	bl	8000648 <__aeabi_dmul>
 80169ec:	4b33      	ldr	r3, [pc, #204]	@ (8016abc <scalbn+0xf4>)
 80169ee:	429e      	cmp	r6, r3
 80169f0:	4604      	mov	r4, r0
 80169f2:	460d      	mov	r5, r1
 80169f4:	da0f      	bge.n	8016a16 <scalbn+0x4e>
 80169f6:	a328      	add	r3, pc, #160	@ (adr r3, 8016a98 <scalbn+0xd0>)
 80169f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169fc:	e01e      	b.n	8016a3c <scalbn+0x74>
 80169fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8016a02:	4291      	cmp	r1, r2
 8016a04:	d10b      	bne.n	8016a1e <scalbn+0x56>
 8016a06:	4622      	mov	r2, r4
 8016a08:	4620      	mov	r0, r4
 8016a0a:	4629      	mov	r1, r5
 8016a0c:	f7e9 fc66 	bl	80002dc <__adddf3>
 8016a10:	4604      	mov	r4, r0
 8016a12:	460d      	mov	r5, r1
 8016a14:	e022      	b.n	8016a5c <scalbn+0x94>
 8016a16:	460b      	mov	r3, r1
 8016a18:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016a1c:	3936      	subs	r1, #54	@ 0x36
 8016a1e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016a22:	4296      	cmp	r6, r2
 8016a24:	dd0d      	ble.n	8016a42 <scalbn+0x7a>
 8016a26:	2d00      	cmp	r5, #0
 8016a28:	a11d      	add	r1, pc, #116	@ (adr r1, 8016aa0 <scalbn+0xd8>)
 8016a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a2e:	da02      	bge.n	8016a36 <scalbn+0x6e>
 8016a30:	a11d      	add	r1, pc, #116	@ (adr r1, 8016aa8 <scalbn+0xe0>)
 8016a32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a36:	a31a      	add	r3, pc, #104	@ (adr r3, 8016aa0 <scalbn+0xd8>)
 8016a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a3c:	f7e9 fe04 	bl	8000648 <__aeabi_dmul>
 8016a40:	e7e6      	b.n	8016a10 <scalbn+0x48>
 8016a42:	1872      	adds	r2, r6, r1
 8016a44:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8016a48:	428a      	cmp	r2, r1
 8016a4a:	dcec      	bgt.n	8016a26 <scalbn+0x5e>
 8016a4c:	2a00      	cmp	r2, #0
 8016a4e:	dd08      	ble.n	8016a62 <scalbn+0x9a>
 8016a50:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016a54:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8016a58:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016a5c:	ec45 4b10 	vmov	d0, r4, r5
 8016a60:	bd70      	pop	{r4, r5, r6, pc}
 8016a62:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8016a66:	da08      	bge.n	8016a7a <scalbn+0xb2>
 8016a68:	2d00      	cmp	r5, #0
 8016a6a:	a10b      	add	r1, pc, #44	@ (adr r1, 8016a98 <scalbn+0xd0>)
 8016a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a70:	dac1      	bge.n	80169f6 <scalbn+0x2e>
 8016a72:	a10f      	add	r1, pc, #60	@ (adr r1, 8016ab0 <scalbn+0xe8>)
 8016a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016a78:	e7bd      	b.n	80169f6 <scalbn+0x2e>
 8016a7a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016a7e:	3236      	adds	r2, #54	@ 0x36
 8016a80:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8016a84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016a88:	4620      	mov	r0, r4
 8016a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8016ac0 <scalbn+0xf8>)
 8016a8c:	4629      	mov	r1, r5
 8016a8e:	2200      	movs	r2, #0
 8016a90:	e7d4      	b.n	8016a3c <scalbn+0x74>
 8016a92:	bf00      	nop
 8016a94:	f3af 8000 	nop.w
 8016a98:	c2f8f359 	.word	0xc2f8f359
 8016a9c:	01a56e1f 	.word	0x01a56e1f
 8016aa0:	8800759c 	.word	0x8800759c
 8016aa4:	7e37e43c 	.word	0x7e37e43c
 8016aa8:	8800759c 	.word	0x8800759c
 8016aac:	fe37e43c 	.word	0xfe37e43c
 8016ab0:	c2f8f359 	.word	0xc2f8f359
 8016ab4:	81a56e1f 	.word	0x81a56e1f
 8016ab8:	43500000 	.word	0x43500000
 8016abc:	ffff3cb0 	.word	0xffff3cb0
 8016ac0:	3c900000 	.word	0x3c900000

08016ac4 <with_errno>:
 8016ac4:	b510      	push	{r4, lr}
 8016ac6:	ed2d 8b02 	vpush	{d8}
 8016aca:	eeb0 8a40 	vmov.f32	s16, s0
 8016ace:	eef0 8a60 	vmov.f32	s17, s1
 8016ad2:	4604      	mov	r4, r0
 8016ad4:	f7fb fa1c 	bl	8011f10 <__errno>
 8016ad8:	eeb0 0a48 	vmov.f32	s0, s16
 8016adc:	eef0 0a68 	vmov.f32	s1, s17
 8016ae0:	ecbd 8b02 	vpop	{d8}
 8016ae4:	6004      	str	r4, [r0, #0]
 8016ae6:	bd10      	pop	{r4, pc}

08016ae8 <xflow>:
 8016ae8:	4603      	mov	r3, r0
 8016aea:	b507      	push	{r0, r1, r2, lr}
 8016aec:	ec51 0b10 	vmov	r0, r1, d0
 8016af0:	b183      	cbz	r3, 8016b14 <xflow+0x2c>
 8016af2:	4602      	mov	r2, r0
 8016af4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016af8:	e9cd 2300 	strd	r2, r3, [sp]
 8016afc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016b00:	f7e9 fda2 	bl	8000648 <__aeabi_dmul>
 8016b04:	ec41 0b10 	vmov	d0, r0, r1
 8016b08:	2022      	movs	r0, #34	@ 0x22
 8016b0a:	b003      	add	sp, #12
 8016b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016b10:	f7ff bfd8 	b.w	8016ac4 <with_errno>
 8016b14:	4602      	mov	r2, r0
 8016b16:	460b      	mov	r3, r1
 8016b18:	e7ee      	b.n	8016af8 <xflow+0x10>
 8016b1a:	0000      	movs	r0, r0
 8016b1c:	0000      	movs	r0, r0
	...

08016b20 <__math_uflow>:
 8016b20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016b28 <__math_uflow+0x8>
 8016b24:	f7ff bfe0 	b.w	8016ae8 <xflow>
 8016b28:	00000000 	.word	0x00000000
 8016b2c:	10000000 	.word	0x10000000

08016b30 <__math_oflow>:
 8016b30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016b38 <__math_oflow+0x8>
 8016b34:	f7ff bfd8 	b.w	8016ae8 <xflow>
 8016b38:	00000000 	.word	0x00000000
 8016b3c:	70000000 	.word	0x70000000

08016b40 <__ieee754_sqrt>:
 8016b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b44:	4a68      	ldr	r2, [pc, #416]	@ (8016ce8 <__ieee754_sqrt+0x1a8>)
 8016b46:	ec55 4b10 	vmov	r4, r5, d0
 8016b4a:	43aa      	bics	r2, r5
 8016b4c:	462b      	mov	r3, r5
 8016b4e:	4621      	mov	r1, r4
 8016b50:	d110      	bne.n	8016b74 <__ieee754_sqrt+0x34>
 8016b52:	4622      	mov	r2, r4
 8016b54:	4620      	mov	r0, r4
 8016b56:	4629      	mov	r1, r5
 8016b58:	f7e9 fd76 	bl	8000648 <__aeabi_dmul>
 8016b5c:	4602      	mov	r2, r0
 8016b5e:	460b      	mov	r3, r1
 8016b60:	4620      	mov	r0, r4
 8016b62:	4629      	mov	r1, r5
 8016b64:	f7e9 fbba 	bl	80002dc <__adddf3>
 8016b68:	4604      	mov	r4, r0
 8016b6a:	460d      	mov	r5, r1
 8016b6c:	ec45 4b10 	vmov	d0, r4, r5
 8016b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b74:	2d00      	cmp	r5, #0
 8016b76:	dc0e      	bgt.n	8016b96 <__ieee754_sqrt+0x56>
 8016b78:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8016b7c:	4322      	orrs	r2, r4
 8016b7e:	d0f5      	beq.n	8016b6c <__ieee754_sqrt+0x2c>
 8016b80:	b19d      	cbz	r5, 8016baa <__ieee754_sqrt+0x6a>
 8016b82:	4622      	mov	r2, r4
 8016b84:	4620      	mov	r0, r4
 8016b86:	4629      	mov	r1, r5
 8016b88:	f7e9 fba6 	bl	80002d8 <__aeabi_dsub>
 8016b8c:	4602      	mov	r2, r0
 8016b8e:	460b      	mov	r3, r1
 8016b90:	f7e9 fe84 	bl	800089c <__aeabi_ddiv>
 8016b94:	e7e8      	b.n	8016b68 <__ieee754_sqrt+0x28>
 8016b96:	152a      	asrs	r2, r5, #20
 8016b98:	d115      	bne.n	8016bc6 <__ieee754_sqrt+0x86>
 8016b9a:	2000      	movs	r0, #0
 8016b9c:	e009      	b.n	8016bb2 <__ieee754_sqrt+0x72>
 8016b9e:	0acb      	lsrs	r3, r1, #11
 8016ba0:	3a15      	subs	r2, #21
 8016ba2:	0549      	lsls	r1, r1, #21
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d0fa      	beq.n	8016b9e <__ieee754_sqrt+0x5e>
 8016ba8:	e7f7      	b.n	8016b9a <__ieee754_sqrt+0x5a>
 8016baa:	462a      	mov	r2, r5
 8016bac:	e7fa      	b.n	8016ba4 <__ieee754_sqrt+0x64>
 8016bae:	005b      	lsls	r3, r3, #1
 8016bb0:	3001      	adds	r0, #1
 8016bb2:	02dc      	lsls	r4, r3, #11
 8016bb4:	d5fb      	bpl.n	8016bae <__ieee754_sqrt+0x6e>
 8016bb6:	1e44      	subs	r4, r0, #1
 8016bb8:	1b12      	subs	r2, r2, r4
 8016bba:	f1c0 0420 	rsb	r4, r0, #32
 8016bbe:	fa21 f404 	lsr.w	r4, r1, r4
 8016bc2:	4323      	orrs	r3, r4
 8016bc4:	4081      	lsls	r1, r0
 8016bc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016bca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8016bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016bd2:	07d2      	lsls	r2, r2, #31
 8016bd4:	bf5c      	itt	pl
 8016bd6:	005b      	lslpl	r3, r3, #1
 8016bd8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8016bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016be0:	bf58      	it	pl
 8016be2:	0049      	lslpl	r1, r1, #1
 8016be4:	2600      	movs	r6, #0
 8016be6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8016bea:	106d      	asrs	r5, r5, #1
 8016bec:	0049      	lsls	r1, r1, #1
 8016bee:	2016      	movs	r0, #22
 8016bf0:	4632      	mov	r2, r6
 8016bf2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8016bf6:	1917      	adds	r7, r2, r4
 8016bf8:	429f      	cmp	r7, r3
 8016bfa:	bfde      	ittt	le
 8016bfc:	193a      	addle	r2, r7, r4
 8016bfe:	1bdb      	suble	r3, r3, r7
 8016c00:	1936      	addle	r6, r6, r4
 8016c02:	0fcf      	lsrs	r7, r1, #31
 8016c04:	3801      	subs	r0, #1
 8016c06:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016c0a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016c0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8016c12:	d1f0      	bne.n	8016bf6 <__ieee754_sqrt+0xb6>
 8016c14:	4604      	mov	r4, r0
 8016c16:	2720      	movs	r7, #32
 8016c18:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8016c1c:	429a      	cmp	r2, r3
 8016c1e:	eb00 0e0c 	add.w	lr, r0, ip
 8016c22:	db02      	blt.n	8016c2a <__ieee754_sqrt+0xea>
 8016c24:	d113      	bne.n	8016c4e <__ieee754_sqrt+0x10e>
 8016c26:	458e      	cmp	lr, r1
 8016c28:	d811      	bhi.n	8016c4e <__ieee754_sqrt+0x10e>
 8016c2a:	f1be 0f00 	cmp.w	lr, #0
 8016c2e:	eb0e 000c 	add.w	r0, lr, ip
 8016c32:	da42      	bge.n	8016cba <__ieee754_sqrt+0x17a>
 8016c34:	2800      	cmp	r0, #0
 8016c36:	db40      	blt.n	8016cba <__ieee754_sqrt+0x17a>
 8016c38:	f102 0801 	add.w	r8, r2, #1
 8016c3c:	1a9b      	subs	r3, r3, r2
 8016c3e:	458e      	cmp	lr, r1
 8016c40:	bf88      	it	hi
 8016c42:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8016c46:	eba1 010e 	sub.w	r1, r1, lr
 8016c4a:	4464      	add	r4, ip
 8016c4c:	4642      	mov	r2, r8
 8016c4e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8016c52:	3f01      	subs	r7, #1
 8016c54:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8016c58:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016c5c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8016c60:	d1dc      	bne.n	8016c1c <__ieee754_sqrt+0xdc>
 8016c62:	4319      	orrs	r1, r3
 8016c64:	d01b      	beq.n	8016c9e <__ieee754_sqrt+0x15e>
 8016c66:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8016cec <__ieee754_sqrt+0x1ac>
 8016c6a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8016cf0 <__ieee754_sqrt+0x1b0>
 8016c6e:	e9da 0100 	ldrd	r0, r1, [sl]
 8016c72:	e9db 2300 	ldrd	r2, r3, [fp]
 8016c76:	f7e9 fb2f 	bl	80002d8 <__aeabi_dsub>
 8016c7a:	e9da 8900 	ldrd	r8, r9, [sl]
 8016c7e:	4602      	mov	r2, r0
 8016c80:	460b      	mov	r3, r1
 8016c82:	4640      	mov	r0, r8
 8016c84:	4649      	mov	r1, r9
 8016c86:	f7e9 ff5b 	bl	8000b40 <__aeabi_dcmple>
 8016c8a:	b140      	cbz	r0, 8016c9e <__ieee754_sqrt+0x15e>
 8016c8c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8016c90:	e9da 0100 	ldrd	r0, r1, [sl]
 8016c94:	e9db 2300 	ldrd	r2, r3, [fp]
 8016c98:	d111      	bne.n	8016cbe <__ieee754_sqrt+0x17e>
 8016c9a:	3601      	adds	r6, #1
 8016c9c:	463c      	mov	r4, r7
 8016c9e:	1072      	asrs	r2, r6, #1
 8016ca0:	0863      	lsrs	r3, r4, #1
 8016ca2:	07f1      	lsls	r1, r6, #31
 8016ca4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8016ca8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8016cac:	bf48      	it	mi
 8016cae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8016cb2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	e756      	b.n	8016b68 <__ieee754_sqrt+0x28>
 8016cba:	4690      	mov	r8, r2
 8016cbc:	e7be      	b.n	8016c3c <__ieee754_sqrt+0xfc>
 8016cbe:	f7e9 fb0d 	bl	80002dc <__adddf3>
 8016cc2:	e9da 8900 	ldrd	r8, r9, [sl]
 8016cc6:	4602      	mov	r2, r0
 8016cc8:	460b      	mov	r3, r1
 8016cca:	4640      	mov	r0, r8
 8016ccc:	4649      	mov	r1, r9
 8016cce:	f7e9 ff2d 	bl	8000b2c <__aeabi_dcmplt>
 8016cd2:	b120      	cbz	r0, 8016cde <__ieee754_sqrt+0x19e>
 8016cd4:	1ca0      	adds	r0, r4, #2
 8016cd6:	bf08      	it	eq
 8016cd8:	3601      	addeq	r6, #1
 8016cda:	3402      	adds	r4, #2
 8016cdc:	e7df      	b.n	8016c9e <__ieee754_sqrt+0x15e>
 8016cde:	1c63      	adds	r3, r4, #1
 8016ce0:	f023 0401 	bic.w	r4, r3, #1
 8016ce4:	e7db      	b.n	8016c9e <__ieee754_sqrt+0x15e>
 8016ce6:	bf00      	nop
 8016ce8:	7ff00000 	.word	0x7ff00000
 8016cec:	200003a8 	.word	0x200003a8
 8016cf0:	200003a0 	.word	0x200003a0

08016cf4 <_init>:
 8016cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cf6:	bf00      	nop
 8016cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cfa:	bc08      	pop	{r3}
 8016cfc:	469e      	mov	lr, r3
 8016cfe:	4770      	bx	lr

08016d00 <_fini>:
 8016d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d02:	bf00      	nop
 8016d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d06:	bc08      	pop	{r3}
 8016d08:	469e      	mov	lr, r3
 8016d0a:	4770      	bx	lr
