
Magisterka.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016c14  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  08016df8  08016df8  00017df8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017628  08017628  000193c8  2**0
                  CONTENTS
  4 .ARM          00000008  08017628  08017628  00018628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017630  08017630  000193c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017630  08017630  00018630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017634  08017634  00018634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  08017638  00019000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002324  200003c8  08017a00  000193c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026ec  08017a00  000196ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000193c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025b09  00000000  00000000  000193f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004eb9  00000000  00000000  0003ef01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f40  00000000  00000000  00043dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001816  00000000  00000000  00045d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d58d  00000000  00000000  00047516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026837  00000000  00000000  00074aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011f322  00000000  00000000  0009b2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001ba5fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009fe0  00000000  00000000  001ba640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  001c4620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200003c8 	.word	0x200003c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016ddc 	.word	0x08016ddc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200003cc 	.word	0x200003cc
 800021c:	08016ddc 	.word	0x08016ddc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	0000      	movs	r0, r0
	...

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b085      	sub	sp, #20
 800103c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f003 fb7a 	bl	8004736 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 fd29 	bl	8001a98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f001 fb5b 	bl	8002700 <MX_GPIO_Init>
  MX_DMA_Init();
 800104a:	f001 fb0f 	bl	800266c <MX_DMA_Init>
  MX_ADC3_Init();
 800104e:	f000 fde9 	bl	8001c24 <MX_ADC3_Init>
  MX_ADC4_Init();
 8001052:	f000 feb3 	bl	8001dbc <MX_ADC4_Init>
  MX_ADC5_Init();
 8001056:	f000 ff17 	bl	8001e88 <MX_ADC5_Init>
  MX_DAC1_Init();
 800105a:	f000 ff9b 	bl	8001f94 <MX_DAC1_Init>
  MX_DAC2_Init();
 800105e:	f000 ffe5 	bl	800202c <MX_DAC2_Init>
  MX_TIM1_Init();
 8001062:	f001 f81d 	bl	80020a0 <MX_TIM1_Init>
  MX_TIM8_Init();
 8001066:	f001 f9a3 	bl	80023b0 <MX_TIM8_Init>
  MX_UART4_Init();
 800106a:	f001 fab3 	bl	80025d4 <MX_UART4_Init>
  MX_ADC1_Init();
 800106e:	f000 fd61 	bl	8001b34 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001072:	f001 f8af 	bl	80021d4 <MX_TIM4_Init>
  MX_USB_Device_Init();
 8001076:	f00f fa7d 	bl	8010574 <MX_USB_Device_Init>
  MX_TIM15_Init();
 800107a:	f001 fa33 	bl	80024e4 <MX_TIM15_Init>
  MX_TIM16_Init();
 800107e:	f001 fa83 	bl	8002588 <MX_TIM16_Init>
  MX_TIM7_Init();
 8001082:	f001 f95f 	bl	8002344 <MX_TIM7_Init>
  MX_TIM6_Init();
 8001086:	f001 f91d 	bl	80022c4 <MX_TIM6_Init>
  MX_CORDIC_Init();
 800108a:	f000 ff6f 	bl	8001f6c <MX_CORDIC_Init>
  /* USER CODE BEGIN 2 */

  sCordicConfig.Function   = CORDIC_FUNCTION_SQUAREROOT;       /* Compute sine (and cosine) */
 800108e:	4b85      	ldr	r3, [pc, #532]	@ (80012a4 <main+0x26c>)
 8001090:	2209      	movs	r2, #9
 8001092:	601a      	str	r2, [r3, #0]
  sCordicConfig.Precision  = CORDIC_PRECISION_6CYCLES;    /* Maximum precision (24 iterations) */
 8001094:	4b83      	ldr	r3, [pc, #524]	@ (80012a4 <main+0x26c>)
 8001096:	2260      	movs	r2, #96	@ 0x60
 8001098:	619a      	str	r2, [r3, #24]
  sCordicConfig.Scale      = CORDIC_SCALE_0;              /* No additional scaling */
 800109a:	4b82      	ldr	r3, [pc, #520]	@ (80012a4 <main+0x26c>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  sCordicConfig.NbWrite    = CORDIC_NBWRITE_1;            /* One input (angle); implicit modulus = 1 */
 80010a0:	4b80      	ldr	r3, [pc, #512]	@ (80012a4 <main+0x26c>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  sCordicConfig.NbRead     = CORDIC_NBREAD_1;             /* Two outputs (sine and cosine) */
 80010a6:	4b7f      	ldr	r3, [pc, #508]	@ (80012a4 <main+0x26c>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	615a      	str	r2, [r3, #20]
  sCordicConfig.InSize     = CORDIC_INSIZE_32BITS;        /* 32-bit input (Q1.31 format) */
 80010ac:	4b7d      	ldr	r3, [pc, #500]	@ (80012a4 <main+0x26c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  sCordicConfig.OutSize    = CORDIC_OUTSIZE_32BITS;       /* 32-bit output (Q1.31 format) */
 80010b2:	4b7c      	ldr	r3, [pc, #496]	@ (80012a4 <main+0x26c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]


  if (HAL_CORDIC_Configure(&hcordic, &sCordicConfig) != HAL_OK)
 80010b8:	497a      	ldr	r1, [pc, #488]	@ (80012a4 <main+0x26c>)
 80010ba:	487b      	ldr	r0, [pc, #492]	@ (80012a8 <main+0x270>)
 80010bc:	f005 f86e 	bl	800619c <HAL_CORDIC_Configure>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <main+0x92>
    {
      /* Configuration Error */
      Error_Handler();
 80010c6:	f002 fd1f 	bl	8003b08 <Error_Handler>

  while (1)
  {


	  	  	  	  checkfaults = Check_Faults();
 80010ca:	f001 fdc1 	bl	8002c50 <Check_Faults>
 80010ce:	4603      	mov	r3, r0
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b76      	ldr	r3, [pc, #472]	@ (80012ac <main+0x274>)
 80010d4:	701a      	strb	r2, [r3, #0]

	  	  	  	  if (dataReceivedFlag) {
 80010d6:	4b76      	ldr	r3, [pc, #472]	@ (80012b0 <main+0x278>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <main+0xb2>
	  	  	  	      // Process the data
	  	  	  	      ParseUSBCommand();  // Function to handle the received command
 80010e0:	f002 f910 	bl	8003304 <ParseUSBCommand>

	  	  	  	      // Clear the flag after processing
	  	  	  	      dataReceivedFlag = 0;
 80010e4:	4b72      	ldr	r3, [pc, #456]	@ (80012b0 <main+0x278>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
	  	  	  	  }

	  	  	  	  interlock = HAL_GPIO_ReadPin(INTERLOCK_GPIO_Port, INTERLOCK_Pin);
 80010ea:	2104      	movs	r1, #4
 80010ec:	4871      	ldr	r0, [pc, #452]	@ (80012b4 <main+0x27c>)
 80010ee:	f006 f93f 	bl	8007370 <HAL_GPIO_ReadPin>
 80010f2:	4603      	mov	r3, r0
 80010f4:	461a      	mov	r2, r3
 80010f6:	4b70      	ldr	r3, [pc, #448]	@ (80012b8 <main+0x280>)
 80010f8:	701a      	strb	r2, [r3, #0]

	  	          if (interlock &&  start_program && !(checkfaults)) {
 80010fa:	4b6f      	ldr	r3, [pc, #444]	@ (80012b8 <main+0x280>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00e      	beq.n	8001120 <main+0xe8>
 8001102:	4b6e      	ldr	r3, [pc, #440]	@ (80012bc <main+0x284>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00a      	beq.n	8001120 <main+0xe8>
 800110a:	4b68      	ldr	r3, [pc, #416]	@ (80012ac <main+0x274>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d106      	bne.n	8001120 <main+0xe8>
	  	        	//USB_SendString("State: EVENT start_program \r\n");
	  	              event = EVENT_START;
 8001112:	4b6b      	ldr	r3, [pc, #428]	@ (80012c0 <main+0x288>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
	  	              start_program = 0;
 8001118:	4b68      	ldr	r3, [pc, #416]	@ (80012bc <main+0x284>)
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
 800111e:	e019      	b.n	8001154 <main+0x11c>
	  	          }else if (interlock &&  stop_program && !(checkfaults)) {
 8001120:	4b65      	ldr	r3, [pc, #404]	@ (80012b8 <main+0x280>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d00e      	beq.n	8001146 <main+0x10e>
 8001128:	4b66      	ldr	r3, [pc, #408]	@ (80012c4 <main+0x28c>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00a      	beq.n	8001146 <main+0x10e>
 8001130:	4b5e      	ldr	r3, [pc, #376]	@ (80012ac <main+0x274>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d106      	bne.n	8001146 <main+0x10e>
		  	        	//USB_SendString("State: EVENT start_program \r\n");
		  	              event = EVENT_SHUTDOWN;
 8001138:	4b61      	ldr	r3, [pc, #388]	@ (80012c0 <main+0x288>)
 800113a:	2203      	movs	r2, #3
 800113c:	701a      	strb	r2, [r3, #0]
		  	              stop_program = 0;
 800113e:	4b61      	ldr	r3, [pc, #388]	@ (80012c4 <main+0x28c>)
 8001140:	2200      	movs	r2, #0
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e006      	b.n	8001154 <main+0x11c>
		  	          }
	  	          else if (clear_fault) {
 8001146:	4b60      	ldr	r3, [pc, #384]	@ (80012c8 <main+0x290>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d002      	beq.n	8001154 <main+0x11c>
	  	        	  /* clear fault condition */
	  	              event = EVENT_CLEAR_FAULT;
 800114e:	4b5c      	ldr	r3, [pc, #368]	@ (80012c0 <main+0x288>)
 8001150:	2202      	movs	r2, #2
 8001152:	701a      	strb	r2, [r3, #0]
	  	          }

	  	         if (!interlock || checkfaults /* fault condition */)
 8001154:	4b58      	ldr	r3, [pc, #352]	@ (80012b8 <main+0x280>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <main+0x12c>
 800115c:	4b53      	ldr	r3, [pc, #332]	@ (80012ac <main+0x274>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d002      	beq.n	800116a <main+0x132>
	  	       	 {
	  	       	  	event = EVENT_FAULT;
 8001164:	4b56      	ldr	r3, [pc, #344]	@ (80012c0 <main+0x288>)
 8001166:	2201      	movs	r2, #1
 8001168:	701a      	strb	r2, [r3, #0]
	  	       	 }

	  	          // Handle the event and update the state
	  	          currentState = handle_event(currentState, event);
 800116a:	4b58      	ldr	r3, [pc, #352]	@ (80012cc <main+0x294>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4a54      	ldr	r2, [pc, #336]	@ (80012c0 <main+0x288>)
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	4611      	mov	r1, r2
 8001174:	4618      	mov	r0, r3
 8001176:	f001 fc0f 	bl	8002998 <handle_event>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	4b53      	ldr	r3, [pc, #332]	@ (80012cc <main+0x294>)
 8001180:	701a      	strb	r2, [r3, #0]

	  	          // Perform actions based on the current state
	  	          switch (currentState) {
 8001182:	4b52      	ldr	r3, [pc, #328]	@ (80012cc <main+0x294>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b04      	cmp	r3, #4
 8001188:	f200 843d 	bhi.w	8001a06 <main+0x9ce>
 800118c:	a201      	add	r2, pc, #4	@ (adr r2, 8001194 <main+0x15c>)
 800118e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001192:	bf00      	nop
 8001194:	080011a9 	.word	0x080011a9
 8001198:	08001267 	.word	0x08001267
 800119c:	08001315 	.word	0x08001315
 80011a0:	080018dd 	.word	0x080018dd
 80011a4:	08001951 	.word	0x08001951
	  	              {
	  	            	//GPIOs
	  	            	//CUrrent Sensors OCD pin needed to go low in reset condition after fault event
	  	            	//HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_SET);
	  	            	//HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 80011a8:	2201      	movs	r2, #1
 80011aa:	2104      	movs	r1, #4
 80011ac:	4848      	ldr	r0, [pc, #288]	@ (80012d0 <main+0x298>)
 80011ae:	f006 f8f7 	bl	80073a0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	483f      	ldr	r0, [pc, #252]	@ (80012b4 <main+0x27c>)
 80011b8:	f006 f8f2 	bl	80073a0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	2120      	movs	r1, #32
 80011c0:	4844      	ldr	r0, [pc, #272]	@ (80012d4 <main+0x29c>)
 80011c2:	f006 f8ed 	bl	80073a0 <HAL_GPIO_WritePin>
	  	            	HAL_Delay(1000);
 80011c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011ca:	f003 fb25 	bl	8004818 <HAL_Delay>
	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2120      	movs	r1, #32
 80011d2:	4840      	ldr	r0, [pc, #256]	@ (80012d4 <main+0x29c>)
 80011d4:	f006 f8e4 	bl	80073a0 <HAL_GPIO_WritePin>
	  	            	  // Start PWM for delay time transfer to FPGA
	  	            	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011d8:	2100      	movs	r1, #0
 80011da:	483f      	ldr	r0, [pc, #252]	@ (80012d8 <main+0x2a0>)
 80011dc:	f009 f83e 	bl	800a25c <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80011e0:	2104      	movs	r1, #4
 80011e2:	483e      	ldr	r0, [pc, #248]	@ (80012dc <main+0x2a4>)
 80011e4:	f009 f83a 	bl	800a25c <HAL_TIM_PWM_Start>

	  	            	  //DAC for  current reference
	  	            	  ///DAC1_OUT1 	- MAX1
	  	            	  //DAC1_OUT2 	- MAX2
	  	            	  //DAC2_OUT1	- MIN
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_1);
 80011e8:	2100      	movs	r1, #0
 80011ea:	483d      	ldr	r0, [pc, #244]	@ (80012e0 <main+0x2a8>)
 80011ec:	f005 fa10 	bl	8006610 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac1,DAC1_CHANNEL_2);
 80011f0:	2110      	movs	r1, #16
 80011f2:	483b      	ldr	r0, [pc, #236]	@ (80012e0 <main+0x2a8>)
 80011f4:	f005 fa0c 	bl	8006610 <HAL_DAC_Start>
	  	            	HAL_DAC_Start(&hdac2,DAC2_CHANNEL_1);
 80011f8:	2100      	movs	r1, #0
 80011fa:	483a      	ldr	r0, [pc, #232]	@ (80012e4 <main+0x2ac>)
 80011fc:	f005 fa08 	bl	8006610 <HAL_DAC_Start>

	  	            	//if( HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_buffer, BUFFER_SIZE, DAC_ALIGN_12B_R)!= HAL_OK) printf("error");
	  	            	//HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);

	  	            	  // FAN PWM and 5s timer6 for check temperature and change duty cycle
	  	            	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001200:	2100      	movs	r1, #0
 8001202:	4839      	ldr	r0, [pc, #228]	@ (80012e8 <main+0x2b0>)
 8001204:	f009 f82a 	bl	800a25c <HAL_TIM_PWM_Start>
	  	            	HAL_TIM_Base_Start_IT(&htim6);
 8001208:	4838      	ldr	r0, [pc, #224]	@ (80012ec <main+0x2b4>)
 800120a:	f008 ff29 	bl	800a060 <HAL_TIM_Base_Start_IT>

	  	            	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800120e:	217f      	movs	r1, #127	@ 0x7f
 8001210:	4837      	ldr	r0, [pc, #220]	@ (80012f0 <main+0x2b8>)
 8001212:	f004 fe27 	bl	8005e64 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8001216:	217f      	movs	r1, #127	@ 0x7f
 8001218:	4836      	ldr	r0, [pc, #216]	@ (80012f4 <main+0x2bc>)
 800121a:	f004 fe23 	bl	8005e64 <HAL_ADCEx_Calibration_Start>
	  	            	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 800121e:	217f      	movs	r1, #127	@ 0x7f
 8001220:	4835      	ldr	r0, [pc, #212]	@ (80012f8 <main+0x2c0>)
 8001222:	f004 fe1f 	bl	8005e64 <HAL_ADCEx_Calibration_Start>

	  	            	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_dma_buffer, 5);
 8001226:	2205      	movs	r2, #5
 8001228:	4934      	ldr	r1, [pc, #208]	@ (80012fc <main+0x2c4>)
 800122a:	4831      	ldr	r0, [pc, #196]	@ (80012f0 <main+0x2b8>)
 800122c:	f003 ff16 	bl	800505c <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc4_dma_buffer, 2);
 8001230:	2202      	movs	r2, #2
 8001232:	4933      	ldr	r1, [pc, #204]	@ (8001300 <main+0x2c8>)
 8001234:	482f      	ldr	r0, [pc, #188]	@ (80012f4 <main+0x2bc>)
 8001236:	f003 ff11 	bl	800505c <HAL_ADC_Start_DMA>
	  	            	HAL_ADC_Start_DMA(&hadc5, (uint32_t*)adc5_dma_buffer, 10);
 800123a:	220a      	movs	r2, #10
 800123c:	4931      	ldr	r1, [pc, #196]	@ (8001304 <main+0x2cc>)
 800123e:	482e      	ldr	r0, [pc, #184]	@ (80012f8 <main+0x2c0>)
 8001240:	f003 ff0c 	bl	800505c <HAL_ADC_Start_DMA>

	  	            	Set_PWM_DutyCycle(20);
 8001244:	2014      	movs	r0, #20
 8001246:	f001 fc01 	bl	8002a4c <Set_PWM_DutyCycle>

	  	            	current_sensor1_vref = adc3_dma_buffer[0];// reference for imax imin
 800124a:	4b2c      	ldr	r3, [pc, #176]	@ (80012fc <main+0x2c4>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	b29a      	uxth	r2, r3
 8001250:	4b2d      	ldr	r3, [pc, #180]	@ (8001308 <main+0x2d0>)
 8001252:	801a      	strh	r2, [r3, #0]
	  	            	current_sensor2_vref = adc3_dma_buffer[1];// reference for imax imin
 8001254:	4b29      	ldr	r3, [pc, #164]	@ (80012fc <main+0x2c4>)
 8001256:	885b      	ldrh	r3, [r3, #2]
 8001258:	b29a      	uxth	r2, r3
 800125a:	4b2c      	ldr	r3, [pc, #176]	@ (800130c <main+0x2d4>)
 800125c:	801a      	strh	r2, [r3, #0]

	  	            	currentState = STATE_STANDBY;
 800125e:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <main+0x294>)
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 8001264:	e3d6      	b.n	8001a14 <main+0x9dc>
	  	              case STATE_STANDBY:
	  	                  // Wait for start_program signal
	  	              {
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
	  	            	//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
	  	            	checkreads = Check_Ready();
 8001266:	f001 fd2d 	bl	8002cc4 <Check_Ready>
 800126a:	4603      	mov	r3, r0
 800126c:	461a      	mov	r2, r3
 800126e:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <main+0x2d8>)
 8001270:	701a      	strb	r2, [r3, #0]
	  	            	  if(start_program && interlock &&  !(checkfaults)   && checkreads){
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <main+0x284>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 83c8 	beq.w	8001a0c <main+0x9d4>
 800127c:	4b0e      	ldr	r3, [pc, #56]	@ (80012b8 <main+0x280>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 83c3 	beq.w	8001a0c <main+0x9d4>
 8001286:	4b09      	ldr	r3, [pc, #36]	@ (80012ac <main+0x274>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f040 83be 	bne.w	8001a0c <main+0x9d4>
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <main+0x2d8>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	f000 83b9 	beq.w	8001a0c <main+0x9d4>
	  	            		  currentState = STATE_REGULATION;//STATE_SOFT_START;
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <main+0x294>)
 800129c:	2202      	movs	r2, #2
 800129e:	701a      	strb	r2, [r3, #0]
		  	            	//once = 1;
		  	            	  }*/
	  	            	  }

	  	              }
	  	                  break;
 80012a0:	e3b4      	b.n	8001a0c <main+0x9d4>
 80012a2:	bf00      	nop
 80012a4:	20000b9c 	.word	0x20000b9c
 80012a8:	200006b4 	.word	0x200006b4
 80012ac:	20000b90 	.word	0x20000b90
 80012b0:	20000b7c 	.word	0x20000b7c
 80012b4:	48000800 	.word	0x48000800
 80012b8:	20000b98 	.word	0x20000b98
 80012bc:	20000b8c 	.word	0x20000b8c
 80012c0:	20000038 	.word	0x20000038
 80012c4:	20000b8d 	.word	0x20000b8d
 80012c8:	20000b8e 	.word	0x20000b8e
 80012cc:	20000b8f 	.word	0x20000b8f
 80012d0:	48001400 	.word	0x48001400
 80012d4:	48001000 	.word	0x48001000
 80012d8:	200007c4 	.word	0x200007c4
 80012dc:	200008f4 	.word	0x200008f4
 80012e0:	200006dc 	.word	0x200006dc
 80012e4:	200006f0 	.word	0x200006f0
 80012e8:	20000810 	.word	0x20000810
 80012ec:	2000085c 	.word	0x2000085c
 80012f0:	20000450 	.word	0x20000450
 80012f4:	200004bc 	.word	0x200004bc
 80012f8:	20000528 	.word	0x20000528
 80012fc:	20000a88 	.word	0x20000a88
 8001300:	20000a94 	.word	0x20000a94
 8001304:	20000aa4 	.word	0x20000aa4
 8001308:	20000a6c 	.word	0x20000a6c
 800130c:	20000a6e 	.word	0x20000a6e
 8001310:	20000b91 	.word	0x20000b91

	  	              case STATE_REGULATION:
	  	                  // Maintain output voltage/current
	  	            	  // 20khz sample time of regulators Timer 15
	  	                  {
	  	                	if(once == 0){
 8001314:	4b96      	ldr	r3, [pc, #600]	@ (8001570 <main+0x538>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d10f      	bne.n	800133c <main+0x304>
	  	                		//Start timer that start_program ramp and pi regulation
	  	                		HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  0  = reset turn off
 800131c:	2200      	movs	r2, #0
 800131e:	2104      	movs	r1, #4
 8001320:	4894      	ldr	r0, [pc, #592]	@ (8001574 <main+0x53c>)
 8001322:	f006 f83d 	bl	80073a0 <HAL_GPIO_WritePin>
	  	                		HAL_TIM_Base_Start_IT(&htim15); // START TIM15 THATS IS MAIN CONTROL LOOP
 8001326:	4894      	ldr	r0, [pc, #592]	@ (8001578 <main+0x540>)
 8001328:	f008 fe9a 	bl	800a060 <HAL_TIM_Base_Start_IT>
	  	                		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800132c:	2100      	movs	r1, #0
 800132e:	4893      	ldr	r0, [pc, #588]	@ (800157c <main+0x544>)
 8001330:	f008 ff94 	bl	800a25c <HAL_TIM_PWM_Start>
	  	                		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001334:	2104      	movs	r1, #4
 8001336:	4892      	ldr	r0, [pc, #584]	@ (8001580 <main+0x548>)
 8001338:	f008 ff90 	bl	800a25c <HAL_TIM_PWM_Start>
	  	                		 }
	  	                	  if(flag_control)
 800133c:	4b91      	ldr	r3, [pc, #580]	@ (8001584 <main+0x54c>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 8366 	beq.w	8001a12 <main+0x9da>
	  	                	  {
	  	                		// start_ticks = SysTick->VAL;


	  	                		  	  	input_vol = (int32_t)Low_pass_filter(input_voltage, input_vol, input_vol_x_n1, input_vol_y_n1); //input_voltage;
 8001346:	4b90      	ldr	r3, [pc, #576]	@ (8001588 <main+0x550>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001352:	4b8e      	ldr	r3, [pc, #568]	@ (800158c <main+0x554>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	ee07 3a10 	vmov	s14, r3
 800135a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800135e:	4b8c      	ldr	r3, [pc, #560]	@ (8001590 <main+0x558>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	ee06 3a90 	vmov	s13, r3
 8001366:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800136a:	4b8a      	ldr	r3, [pc, #552]	@ (8001594 <main+0x55c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	ee06 3a10 	vmov	s12, r3
 8001372:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8001376:	eef0 1a46 	vmov.f32	s3, s12
 800137a:	eeb0 1a66 	vmov.f32	s2, s13
 800137e:	eef0 0a47 	vmov.f32	s1, s14
 8001382:	eeb0 0a67 	vmov.f32	s0, s15
 8001386:	f001 febf 	bl	8003108 <Low_pass_filter>
 800138a:	eef0 7a40 	vmov.f32	s15, s0
 800138e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001392:	ee17 2a90 	vmov	r2, s15
 8001396:	4b7d      	ldr	r3, [pc, #500]	@ (800158c <main+0x554>)
 8001398:	601a      	str	r2, [r3, #0]
	  	                		  	  	output_vol = (int32_t)Low_pass_filter(output_voltage, output_vol, output_vol_x_n1, output_vol_y_n1); //output_voltage;
 800139a:	4b7f      	ldr	r3, [pc, #508]	@ (8001598 <main+0x560>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	4b7d      	ldr	r3, [pc, #500]	@ (800159c <main+0x564>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	ee07 3a10 	vmov	s14, r3
 80013ae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80013b2:	4b7b      	ldr	r3, [pc, #492]	@ (80015a0 <main+0x568>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	ee06 3a90 	vmov	s13, r3
 80013ba:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80013be:	4b79      	ldr	r3, [pc, #484]	@ (80015a4 <main+0x56c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	ee06 3a10 	vmov	s12, r3
 80013c6:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80013ca:	eef0 1a46 	vmov.f32	s3, s12
 80013ce:	eeb0 1a66 	vmov.f32	s2, s13
 80013d2:	eef0 0a47 	vmov.f32	s1, s14
 80013d6:	eeb0 0a67 	vmov.f32	s0, s15
 80013da:	f001 fe95 	bl	8003108 <Low_pass_filter>
 80013de:	eef0 7a40 	vmov.f32	s15, s0
 80013e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013e6:	ee17 2a90 	vmov	r2, s15
 80013ea:	4b6c      	ldr	r3, [pc, #432]	@ (800159c <main+0x564>)
 80013ec:	601a      	str	r2, [r3, #0]
	  	                		  	  	 //yfilter[1] = a*yfilter[];
	  	                		  	  	float rel_output_voltage_error = fabs(((float)(output_vol - vref)/(float)vref));
 80013ee:	4b6b      	ldr	r3, [pc, #428]	@ (800159c <main+0x564>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a6d      	ldr	r2, [pc, #436]	@ (80015a8 <main+0x570>)
 80013f4:	6812      	ldr	r2, [r2, #0]
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	ee07 3a90 	vmov	s15, r3
 80013fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001400:	4b69      	ldr	r3, [pc, #420]	@ (80015a8 <main+0x570>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	ee07 3a90 	vmov	s15, r3
 8001408:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800140c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001410:	eef0 7ae7 	vabs.f32	s15, s15
 8001414:	edc7 7a01 	vstr	s15, [r7, #4]

	  	                		  	  	if(rel_output_voltage_error > OUTPUT_TOLERANCE || RAMP_FINISHED  == 0){
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f7ff f8bd 	bl	8000598 <__aeabi_f2d>
 800141e:	a34e      	add	r3, pc, #312	@ (adr r3, 8001558 <main+0x520>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7ff fba0 	bl	8000b68 <__aeabi_dcmpgt>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d104      	bne.n	8001438 <main+0x400>
 800142e:	4b5f      	ldr	r3, [pc, #380]	@ (80015ac <main+0x574>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f040 81fd 	bne.w	8001832 <main+0x7fa>

	  	                		  	  	Gv = (float)output_vol/(float)input_vol;//output_voltage/input_voltage;
 8001438:	4b58      	ldr	r3, [pc, #352]	@ (800159c <main+0x564>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001444:	4b51      	ldr	r3, [pc, #324]	@ (800158c <main+0x554>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	ee07 3a90 	vmov	s15, r3
 800144c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001454:	4b56      	ldr	r3, [pc, #344]	@ (80015b0 <main+0x578>)
 8001456:	edc3 7a00 	vstr	s15, [r3]
	  	                		  	  	//if(abs(Gv-Gv_prev)>=0.02)
	  	                		  	  	//{
	  	                				if(Gv<2) //CZARY
 800145a:	4b55      	ldr	r3, [pc, #340]	@ (80015b0 <main+0x578>)
 800145c:	edd3 7a00 	vldr	s15, [r3]
 8001460:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146c:	f140 80b0 	bpl.w	80015d0 <main+0x598>
	  	                				{

	  	                					delay_tr = approx_acos2((1-Gv))*INV_wr;
 8001470:	4b4f      	ldr	r3, [pc, #316]	@ (80015b0 <main+0x578>)
 8001472:	edd3 7a00 	vldr	s15, [r3]
 8001476:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800147a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800147e:	eeb0 0a67 	vmov.f32	s0, s15
 8001482:	f002 f9f9 	bl	8003878 <approx_acos2>
 8001486:	ee10 3a10 	vmov	r3, s0
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff f884 	bl	8000598 <__aeabi_f2d>
 8001490:	a333      	add	r3, pc, #204	@ (adr r3, 8001560 <main+0x528>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7ff f8d7 	bl	8000648 <__aeabi_dmul>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f7ff fbc9 	bl	8000c38 <__aeabi_d2f>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a42      	ldr	r2, [pc, #264]	@ (80015b4 <main+0x57c>)
 80014aa:	6013      	str	r3, [r2, #0]
	  	                					 // start_ticks = SysTick->VAL;

	  	                					cordic_input = float_to_integer(((2-Gv)/Gv), 100, 32);
 80014ac:	4b40      	ldr	r3, [pc, #256]	@ (80015b0 <main+0x578>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80014b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80014ba:	4b3d      	ldr	r3, [pc, #244]	@ (80015b0 <main+0x578>)
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014c4:	2120      	movs	r1, #32
 80014c6:	2064      	movs	r0, #100	@ 0x64
 80014c8:	eeb0 0a66 	vmov.f32	s0, s13
 80014cc:	f002 f8d6 	bl	800367c <float_to_integer>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4a39      	ldr	r2, [pc, #228]	@ (80015b8 <main+0x580>)
 80014d4:	6013      	str	r3, [r2, #0]
	  	                					HAL_CORDIC_Calculate(&hcordic, &cordic_input, &result_q31, 1, 100);//sqrt((2-Gv)/Gv))
 80014d6:	2364      	movs	r3, #100	@ 0x64
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2301      	movs	r3, #1
 80014dc:	4a37      	ldr	r2, [pc, #220]	@ (80015bc <main+0x584>)
 80014de:	4936      	ldr	r1, [pc, #216]	@ (80015b8 <main+0x580>)
 80014e0:	4837      	ldr	r0, [pc, #220]	@ (80015c0 <main+0x588>)
 80014e2:	f004 fe97 	bl	8006214 <HAL_CORDIC_Calculate>
	  	                					resultcordic = integer_to_float(result_q31, 10, 1, 32); // result of sqrt((((2-Gv)/Gv)) ) in float
 80014e6:	4b35      	ldr	r3, [pc, #212]	@ (80015bc <main+0x584>)
 80014e8:	6818      	ldr	r0, [r3, #0]
 80014ea:	2320      	movs	r3, #32
 80014ec:	2201      	movs	r2, #1
 80014ee:	210a      	movs	r1, #10
 80014f0:	f002 f94a 	bl	8003788 <integer_to_float>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	4b32      	ldr	r3, [pc, #200]	@ (80015c4 <main+0x58c>)
 80014fa:	edc3 7a00 	vstr	s15, [r3]


	  	                					imin = (int)(Imin_Factor*output_vol*resultcordic*INV_Z); //[mA] Negative current needed to Zero voltage switching in resonance
 80014fe:	4b27      	ldr	r3, [pc, #156]	@ (800159c <main+0x564>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	ee07 3a90 	vmov	s15, r3
 8001506:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800150a:	4b2f      	ldr	r3, [pc, #188]	@ (80015c8 <main+0x590>)
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001514:	4b2b      	ldr	r3, [pc, #172]	@ (80015c4 <main+0x58c>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151e:	ee17 0a90 	vmov	r0, s15
 8001522:	f7ff f839 	bl	8000598 <__aeabi_f2d>
 8001526:	a310      	add	r3, pc, #64	@ (adr r3, 8001568 <main+0x530>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f88c 	bl	8000648 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff fb36 	bl	8000ba8 <__aeabi_d2iz>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	4b22      	ldr	r3, [pc, #136]	@ (80015cc <main+0x594>)
 8001542:	601a      	str	r2, [r3, #0]

	  	                					if(imin>4000) imin = 4000;
 8001544:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <main+0x594>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800154c:	d97a      	bls.n	8001644 <main+0x60c>
 800154e:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <main+0x594>)
 8001550:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	e075      	b.n	8001644 <main+0x60c>
 8001558:	47ae147b 	.word	0x47ae147b
 800155c:	3f947ae1 	.word	0x3f947ae1
 8001560:	db0b953a 	.word	0xdb0b953a
 8001564:	3ea5942f 	.word	0x3ea5942f
 8001568:	03a35639 	.word	0x03a35639
 800156c:	3f7c0604 	.word	0x3f7c0604
 8001570:	20000b94 	.word	0x20000b94
 8001574:	48001400 	.word	0x48001400
 8001578:	20000940 	.word	0x20000940
 800157c:	200007c4 	.word	0x200007c4
 8001580:	200008f4 	.word	0x200008f4
 8001584:	20000b99 	.word	0x20000b99
 8001588:	20000a7c 	.word	0x20000a7c
 800158c:	20000044 	.word	0x20000044
 8001590:	2000004c 	.word	0x2000004c
 8001594:	20000050 	.word	0x20000050
 8001598:	20000004 	.word	0x20000004
 800159c:	20000048 	.word	0x20000048
 80015a0:	20000054 	.word	0x20000054
 80015a4:	20000058 	.word	0x20000058
 80015a8:	20000000 	.word	0x20000000
 80015ac:	20000a98 	.word	0x20000a98
 80015b0:	20000028 	.word	0x20000028
 80015b4:	20000010 	.word	0x20000010
 80015b8:	20000064 	.word	0x20000064
 80015bc:	2000005c 	.word	0x2000005c
 80015c0:	200006b4 	.word	0x200006b4
 80015c4:	20000060 	.word	0x20000060
 80015c8:	20000040 	.word	0x20000040
 80015cc:	20000a78 	.word	0x20000a78
	  	                				} else if(Gv >= 2)
 80015d0:	4ba1      	ldr	r3, [pc, #644]	@ (8001858 <main+0x820>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80015da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e2:	db2f      	blt.n	8001644 <main+0x60c>
	  	                				{
	  	                					delay_tr = (M_PI-approx_acos2((1/(Gv-1)))) * INV_wr;
 80015e4:	4b9c      	ldr	r3, [pc, #624]	@ (8001858 <main+0x820>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80015f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015fa:	eeb0 0a47 	vmov.f32	s0, s14
 80015fe:	f002 f93b 	bl	8003878 <approx_acos2>
 8001602:	ee10 3a10 	vmov	r3, s0
 8001606:	4618      	mov	r0, r3
 8001608:	f7fe ffc6 	bl	8000598 <__aeabi_f2d>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	a18b      	add	r1, pc, #556	@ (adr r1, 8001840 <main+0x808>)
 8001612:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001616:	f7fe fe5f 	bl	80002d8 <__aeabi_dsub>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	a389      	add	r3, pc, #548	@ (adr r3, 8001848 <main+0x810>)
 8001624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001628:	f7ff f80e 	bl	8000648 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f7ff fb00 	bl	8000c38 <__aeabi_d2f>
 8001638:	4603      	mov	r3, r0
 800163a:	4a88      	ldr	r2, [pc, #544]	@ (800185c <main+0x824>)
 800163c:	6013      	str	r3, [r2, #0]
	  	                					imin = 0;
 800163e:	4b88      	ldr	r3, [pc, #544]	@ (8001860 <main+0x828>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
	  	                				}
	  	                		  	  	//}
	  	                		  		//Gv_prev = Gv;
	  	                				if(/*once == 0*/delay_tr < 0.001 /*&& RAMP_FINISHED == 1*/){
 8001644:	4b85      	ldr	r3, [pc, #532]	@ (800185c <main+0x824>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ffa5 	bl	8000598 <__aeabi_f2d>
 800164e:	a380      	add	r3, pc, #512	@ (adr r3, 8001850 <main+0x818>)
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f7ff fa6a 	bl	8000b2c <__aeabi_dcmplt>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d03e      	beq.n	80016dc <main+0x6a4>

	  	                					delay_tr_freq = (int)(1/delay_tr);
 800165e:	4b7f      	ldr	r3, [pc, #508]	@ (800185c <main+0x824>)
 8001660:	ed93 7a00 	vldr	s14, [r3]
 8001664:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800166c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001670:	ee17 2a90 	vmov	r2, s15
 8001674:	4b7b      	ldr	r3, [pc, #492]	@ (8001864 <main+0x82c>)
 8001676:	601a      	str	r2, [r3, #0]

	  	                					if(delay_tr_freq>20000000) delay_tr_freq = 20000000;//10Mhz
 8001678:	4b7a      	ldr	r3, [pc, #488]	@ (8001864 <main+0x82c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a7a      	ldr	r2, [pc, #488]	@ (8001868 <main+0x830>)
 800167e:	4293      	cmp	r3, r2
 8001680:	dd02      	ble.n	8001688 <main+0x650>
 8001682:	4b78      	ldr	r3, [pc, #480]	@ (8001864 <main+0x82c>)
 8001684:	4a78      	ldr	r2, [pc, #480]	@ (8001868 <main+0x830>)
 8001686:	601a      	str	r2, [r3, #0]

	  	                					if(abs(delay_tr_freq_ACC-delay_tr_freq) >= 20000) {
 8001688:	4b78      	ldr	r3, [pc, #480]	@ (800186c <main+0x834>)
 800168a:	ed93 7a00 	vldr	s14, [r3]
 800168e:	4b75      	ldr	r3, [pc, #468]	@ (8001864 <main+0x82c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800169e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a2:	ee17 3a90 	vmov	r3, s15
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bfb8      	it	lt
 80016aa:	425b      	neglt	r3, r3
 80016ac:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80016b0:	4293      	cmp	r3, r2
 80016b2:	dd13      	ble.n	80016dc <main+0x6a4>
	  	                						if(RAMP_FINISHED == 0) Update_PWM_Frequency(&htim1, TIM_CHANNEL_1, delay_tr_freq); // Set TIM1 CH1 to freq that is delay tr and send to fpga
 80016b4:	4b6e      	ldr	r3, [pc, #440]	@ (8001870 <main+0x838>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d106      	bne.n	80016ca <main+0x692>
 80016bc:	4b69      	ldr	r3, [pc, #420]	@ (8001864 <main+0x82c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	2100      	movs	r1, #0
 80016c4:	486b      	ldr	r0, [pc, #428]	@ (8001874 <main+0x83c>)
 80016c6:	f001 fa53 	bl	8002b70 <Update_PWM_Frequency>
	  	                						delay_tr_freq_ACC = delay_tr_freq;
 80016ca:	4b66      	ldr	r3, [pc, #408]	@ (8001864 <main+0x82c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	ee07 3a90 	vmov	s15, r3
 80016d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d6:	4b65      	ldr	r3, [pc, #404]	@ (800186c <main+0x834>)
 80016d8:	edc3 7a00 	vstr	s15, [r3]
	  	                					}
	  	                				}

	  	                				if(/*once == 0 output_vol> 47000 && RAMP_FINISHED == 1 */ imax1 > 0 /*&& output_vol> 47000 */ ){
 80016dc:	4b66      	ldr	r3, [pc, #408]	@ (8001878 <main+0x840>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	dd63      	ble.n	80017ac <main+0x774>

	  	            	  	                		delay_hc = (float)(((float)C_CAP*output_vol) * (float)(1/(float)imax1));
 80016e4:	4b65      	ldr	r3, [pc, #404]	@ (800187c <main+0x844>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	ee07 3a90 	vmov	s15, r3
 80016ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016f0:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8001880 <main+0x848>
 80016f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001878 <main+0x840>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001704:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8001708:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800170c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001710:	4b5c      	ldr	r3, [pc, #368]	@ (8001884 <main+0x84c>)
 8001712:	edc3 7a00 	vstr	s15, [r3]
	  	                					  	    delay_hc_freq = (int)(1/delay_hc);
 8001716:	4b5b      	ldr	r3, [pc, #364]	@ (8001884 <main+0x84c>)
 8001718:	ed93 7a00 	vldr	s14, [r3]
 800171c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001720:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001724:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001728:	ee17 2a90 	vmov	r2, s15
 800172c:	4b56      	ldr	r3, [pc, #344]	@ (8001888 <main+0x850>)
 800172e:	601a      	str	r2, [r3, #0]

	  	                					  	   if(delay_hc_freq>20000000) delay_hc_freq = 20000000;//10Mhz jakis problem
 8001730:	4b55      	ldr	r3, [pc, #340]	@ (8001888 <main+0x850>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a4c      	ldr	r2, [pc, #304]	@ (8001868 <main+0x830>)
 8001736:	4293      	cmp	r3, r2
 8001738:	dd02      	ble.n	8001740 <main+0x708>
 800173a:	4b53      	ldr	r3, [pc, #332]	@ (8001888 <main+0x850>)
 800173c:	4a4a      	ldr	r2, [pc, #296]	@ (8001868 <main+0x830>)
 800173e:	601a      	str	r2, [r3, #0]

	  	                					  	   if(abs(delay_hc_freq_ACC-delay_hc_freq) >= 100000) {
 8001740:	4b52      	ldr	r3, [pc, #328]	@ (800188c <main+0x854>)
 8001742:	ed93 7a00 	vldr	s14, [r3]
 8001746:	4b50      	ldr	r3, [pc, #320]	@ (8001888 <main+0x850>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800175a:	ee17 3a90 	vmov	r3, s15
 800175e:	2b00      	cmp	r3, #0
 8001760:	bfb8      	it	lt
 8001762:	425b      	neglt	r3, r3
 8001764:	4a4a      	ldr	r2, [pc, #296]	@ (8001890 <main+0x858>)
 8001766:	4293      	cmp	r3, r2
 8001768:	dd20      	ble.n	80017ac <main+0x774>
	  	                					  		 start_ticks = SysTick->VAL;
 800176a:	4b4a      	ldr	r3, [pc, #296]	@ (8001894 <main+0x85c>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	461a      	mov	r2, r3
 8001770:	4b49      	ldr	r3, [pc, #292]	@ (8001898 <main+0x860>)
 8001772:	601a      	str	r2, [r3, #0]

	  	                					  	     Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, delay_hc_freq); // Set TIM8 CH1 o freq that is delay hc and send to fpga
 8001774:	4b44      	ldr	r3, [pc, #272]	@ (8001888 <main+0x850>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	461a      	mov	r2, r3
 800177a:	2104      	movs	r1, #4
 800177c:	4847      	ldr	r0, [pc, #284]	@ (800189c <main+0x864>)
 800177e:	f001 f9f7 	bl	8002b70 <Update_PWM_Frequency>

	  	                					  	    stop_ticks = SysTick->VAL;
 8001782:	4b44      	ldr	r3, [pc, #272]	@ (8001894 <main+0x85c>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	461a      	mov	r2, r3
 8001788:	4b45      	ldr	r3, [pc, #276]	@ (80018a0 <main+0x868>)
 800178a:	601a      	str	r2, [r3, #0]
	  	                					  	    elapsed_ticks = start_ticks-stop_ticks;
 800178c:	4b42      	ldr	r3, [pc, #264]	@ (8001898 <main+0x860>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b43      	ldr	r3, [pc, #268]	@ (80018a0 <main+0x868>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	4a43      	ldr	r2, [pc, #268]	@ (80018a4 <main+0x86c>)
 8001798:	6013      	str	r3, [r2, #0]

	  	                					  	    delay_hc_freq_ACC = delay_hc_freq;
 800179a:	4b3b      	ldr	r3, [pc, #236]	@ (8001888 <main+0x850>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	ee07 3a90 	vmov	s15, r3
 80017a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a6:	4b39      	ldr	r3, [pc, #228]	@ (800188c <main+0x854>)
 80017a8:	edc3 7a00 	vstr	s15, [r3]
	  	                					  	   }
	  	                				}
	  	                				if(RAMP_FINISHED == 0) Vramp = RAMP(Vramp, vref, 160000, Ts); // Adding to Vramp stepping voltage to create starting ramp  21 07 2025 was 160000 rate
 80017ac:	4b30      	ldr	r3, [pc, #192]	@ (8001870 <main+0x838>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10c      	bne.n	80017ce <main+0x796>
 80017b4:	4b3c      	ldr	r3, [pc, #240]	@ (80018a8 <main+0x870>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a3c      	ldr	r2, [pc, #240]	@ (80018ac <main+0x874>)
 80017ba:	6811      	ldr	r1, [r2, #0]
 80017bc:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 80018b0 <main+0x878>
 80017c0:	4a3c      	ldr	r2, [pc, #240]	@ (80018b4 <main+0x87c>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f001 fbd2 	bl	8002f6c <RAMP>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4a37      	ldr	r2, [pc, #220]	@ (80018a8 <main+0x870>)
 80017cc:	6013      	str	r3, [r2, #0]

	  	                				if (Vramp > 0 ) regulatorPI(&imax1, &Integral_I, output_vol, Vramp, LIM_PEAK_POS, LIM_PEAK_NEG, Kp, Ti, Ts);
 80017ce:	4b36      	ldr	r3, [pc, #216]	@ (80018a8 <main+0x870>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	dd1c      	ble.n	8001810 <main+0x7d8>
 80017d6:	4b29      	ldr	r3, [pc, #164]	@ (800187c <main+0x844>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	461c      	mov	r4, r3
 80017dc:	4b32      	ldr	r3, [pc, #200]	@ (80018a8 <main+0x870>)
 80017de:	6819      	ldr	r1, [r3, #0]
 80017e0:	4b35      	ldr	r3, [pc, #212]	@ (80018b8 <main+0x880>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a35      	ldr	r2, [pc, #212]	@ (80018bc <main+0x884>)
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	4835      	ldr	r0, [pc, #212]	@ (80018c0 <main+0x888>)
 80017ea:	edd0 7a00 	vldr	s15, [r0]
 80017ee:	4835      	ldr	r0, [pc, #212]	@ (80018c4 <main+0x88c>)
 80017f0:	ed90 7a00 	vldr	s14, [r0]
 80017f4:	9201      	str	r2, [sp, #4]
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	ed9f 1a2d 	vldr	s2, [pc, #180]	@ 80018b0 <main+0x878>
 80017fc:	eef0 0a47 	vmov.f32	s1, s14
 8001800:	eeb0 0a67 	vmov.f32	s0, s15
 8001804:	460b      	mov	r3, r1
 8001806:	4622      	mov	r2, r4
 8001808:	492f      	ldr	r1, [pc, #188]	@ (80018c8 <main+0x890>)
 800180a:	481b      	ldr	r0, [pc, #108]	@ (8001878 <main+0x840>)
 800180c:	f001 fc00 	bl	8003010 <regulatorPI>



	  	                				imax2 =  imax1;  //+ imax2_sum;//
 8001810:	4b19      	ldr	r3, [pc, #100]	@ (8001878 <main+0x840>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a2d      	ldr	r2, [pc, #180]	@ (80018cc <main+0x894>)
 8001816:	6013      	str	r3, [r2, #0]

	  	                				if(once == 0){
 8001818:	4b2d      	ldr	r3, [pc, #180]	@ (80018d0 <main+0x898>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d10c      	bne.n	800183a <main+0x802>
	  	                					//HAL_Delay(500);
	  	                					HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
 8001820:	2201      	movs	r2, #1
 8001822:	2120      	movs	r1, #32
 8001824:	482b      	ldr	r0, [pc, #172]	@ (80018d4 <main+0x89c>)
 8001826:	f005 fdbb 	bl	80073a0 <HAL_GPIO_WritePin>
	  	                					once = 1;
 800182a:	4b29      	ldr	r3, [pc, #164]	@ (80018d0 <main+0x898>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
	  	                				if(once == 0){
 8001830:	e003      	b.n	800183a <main+0x802>
	  	                				}
	  	                		  	  	}
	  	                		  	  	else
	  	                		  	  	{

	  	                				flag_control = 0;
 8001832:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <main+0x8a0>)
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
	  	                		  	  	}

	  	                	  }

	  	                  }
	  	                  break;
 8001838:	e0eb      	b.n	8001a12 <main+0x9da>
 800183a:	e0ea      	b.n	8001a12 <main+0x9da>
 800183c:	f3af 8000 	nop.w
 8001840:	54442d18 	.word	0x54442d18
 8001844:	400921fb 	.word	0x400921fb
 8001848:	db0b953a 	.word	0xdb0b953a
 800184c:	3ea5942f 	.word	0x3ea5942f
 8001850:	d2f1a9fc 	.word	0xd2f1a9fc
 8001854:	3f50624d 	.word	0x3f50624d
 8001858:	20000028 	.word	0x20000028
 800185c:	20000010 	.word	0x20000010
 8001860:	20000a78 	.word	0x20000a78
 8001864:	20000018 	.word	0x20000018
 8001868:	01312d00 	.word	0x01312d00
 800186c:	20000020 	.word	0x20000020
 8001870:	20000a98 	.word	0x20000a98
 8001874:	200007c4 	.word	0x200007c4
 8001878:	20000a70 	.word	0x20000a70
 800187c:	20000048 	.word	0x20000048
 8001880:	31972ecf 	.word	0x31972ecf
 8001884:	20000014 	.word	0x20000014
 8001888:	2000001c 	.word	0x2000001c
 800188c:	20000024 	.word	0x20000024
 8001890:	0001869f 	.word	0x0001869f
 8001894:	e000e010 	.word	0xe000e010
 8001898:	20000bb8 	.word	0x20000bb8
 800189c:	200008f4 	.word	0x200008f4
 80018a0:	20000bbc 	.word	0x20000bbc
 80018a4:	20000bc0 	.word	0x20000bc0
 80018a8:	2000000c 	.word	0x2000000c
 80018ac:	20000000 	.word	0x20000000
 80018b0:	3851b717 	.word	0x3851b717
 80018b4:	00027100 	.word	0x00027100
 80018b8:	20000034 	.word	0x20000034
 80018bc:	20000b80 	.word	0x20000b80
 80018c0:	2000002c 	.word	0x2000002c
 80018c4:	20000030 	.word	0x20000030
 80018c8:	20000b84 	.word	0x20000b84
 80018cc:	20000a74 	.word	0x20000a74
 80018d0:	20000b94 	.word	0x20000b94
 80018d4:	48000800 	.word	0x48000800
 80018d8:	20000b99 	.word	0x20000b99
	  	              case STATE_FAULT:
	  	                  // Handle fault condition
	  	            	  // Turn off all gate drivers and stop FPGA
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET); // STOP drives mosfet etc
 80018dc:	2200      	movs	r2, #0
 80018de:	2120      	movs	r1, #32
 80018e0:	484d      	ldr	r0, [pc, #308]	@ (8001a18 <main+0x9e0>)
 80018e2:	f005 fd5d 	bl	80073a0 <HAL_GPIO_WritePin>

	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!


	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 80018e6:	484d      	ldr	r0, [pc, #308]	@ (8001a1c <main+0x9e4>)
 80018e8:	f008 fc32 	bl	800a150 <HAL_TIM_Base_Stop_IT>

	  	            	HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port,NOT_RST_1_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2180      	movs	r1, #128	@ 0x80
 80018f0:	484b      	ldr	r0, [pc, #300]	@ (8001a20 <main+0x9e8>)
 80018f2:	f005 fd55 	bl	80073a0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_2_GPIO_Port,NOT_RST_2_Pin, GPIO_PIN_RESET);
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80018fc:	4849      	ldr	r0, [pc, #292]	@ (8001a24 <main+0x9ec>)
 80018fe:	f005 fd4f 	bl	80073a0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port,NOT_RST_3_Pin, GPIO_PIN_RESET);
 8001902:	2200      	movs	r2, #0
 8001904:	2101      	movs	r1, #1
 8001906:	4848      	ldr	r0, [pc, #288]	@ (8001a28 <main+0x9f0>)
 8001908:	f005 fd4a 	bl	80073a0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port,NOT_RST_4_Pin, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	2140      	movs	r1, #64	@ 0x40
 8001910:	4841      	ldr	r0, [pc, #260]	@ (8001a18 <main+0x9e0>)
 8001912:	f005 fd45 	bl	80073a0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin, GPIO_PIN_RESET);
 8001916:	2200      	movs	r2, #0
 8001918:	2102      	movs	r1, #2
 800191a:	4842      	ldr	r0, [pc, #264]	@ (8001a24 <main+0x9ec>)
 800191c:	f005 fd40 	bl	80073a0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001926:	4841      	ldr	r0, [pc, #260]	@ (8001a2c <main+0x9f4>)
 8001928:	f005 fd3a 	bl	80073a0 <HAL_GPIO_WritePin>

	  	            	HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	2120      	movs	r1, #32
 8001930:	483c      	ldr	r0, [pc, #240]	@ (8001a24 <main+0x9ec>)
 8001932:	f005 fd35 	bl	80073a0 <HAL_GPIO_WritePin>

	  	            	HAL_TIM_Base_Start(&htim7); // timer for reset OCD and INTERLOCK reset turn off
 8001936:	483e      	ldr	r0, [pc, #248]	@ (8001a30 <main+0x9f8>)
 8001938:	f008 fb22 	bl	8009f80 <HAL_TIM_Base_Start>


	  	            	once = 0;
 800193c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a34 <main+0x9fc>)
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
	  	            	start_program = 0;
 8001942:	4b3d      	ldr	r3, [pc, #244]	@ (8001a38 <main+0xa00>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
	  	            	currentState = STATE_SHUTDOWN;
 8001948:	4b3c      	ldr	r3, [pc, #240]	@ (8001a3c <main+0xa04>)
 800194a:	2204      	movs	r2, #4
 800194c:	701a      	strb	r2, [r3, #0]
	  	              }
	  	                  break;
 800194e:	e061      	b.n	8001a14 <main+0x9dc>
	  	              case STATE_SHUTDOWN:
	  	                  // Safely shut down the converter
	  	              {
	  	            	HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 8001950:	2200      	movs	r2, #0
 8001952:	2120      	movs	r1, #32
 8001954:	4830      	ldr	r0, [pc, #192]	@ (8001a18 <main+0x9e0>)
 8001956:	f005 fd23 	bl	80073a0 <HAL_GPIO_WritePin>
	  	            	HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 1); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
 800195a:	2201      	movs	r2, #1
 800195c:	2104      	movs	r1, #4
 800195e:	4833      	ldr	r0, [pc, #204]	@ (8001a2c <main+0x9f4>)
 8001960:	f005 fd1e 	bl	80073a0 <HAL_GPIO_WritePin>
	  	            	HAL_TIM_Base_Stop_IT(&htim15);
 8001964:	482d      	ldr	r0, [pc, #180]	@ (8001a1c <main+0x9e4>)
 8001966:	f008 fbf3 	bl	800a150 <HAL_TIM_Base_Stop_IT>
	  	            	//HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, 0); // RESET =  1  = reset turn on IMPORTANT!! WAZNE!!!
	  	            	RAMP_FINISHED = 0;
 800196a:	4b35      	ldr	r3, [pc, #212]	@ (8001a40 <main+0xa08>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
						once = 0;
 8001970:	4b30      	ldr	r3, [pc, #192]	@ (8001a34 <main+0x9fc>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
	  	            	imax1 = 1;
 8001976:	4b33      	ldr	r3, [pc, #204]	@ (8001a44 <main+0xa0c>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]
						imax2 = 1;
 800197c:	4b32      	ldr	r3, [pc, #200]	@ (8001a48 <main+0xa10>)
 800197e:	2201      	movs	r2, #1
 8001980:	601a      	str	r2, [r3, #0]
						imax2_sum = 1;
 8001982:	4b32      	ldr	r3, [pc, #200]	@ (8001a4c <main+0xa14>)
 8001984:	2201      	movs	r2, #1
 8001986:	801a      	strh	r2, [r3, #0]
						vout = 1;
 8001988:	4b31      	ldr	r3, [pc, #196]	@ (8001a50 <main+0xa18>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
						Vramp = 1;
 800198e:	4b31      	ldr	r3, [pc, #196]	@ (8001a54 <main+0xa1c>)
 8001990:	2201      	movs	r2, #1
 8001992:	601a      	str	r2, [r3, #0]
						delay_tr = 1;
 8001994:	4b30      	ldr	r3, [pc, #192]	@ (8001a58 <main+0xa20>)
 8001996:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800199a:	601a      	str	r2, [r3, #0]
						delay_hc = 1;
 800199c:	4b2f      	ldr	r3, [pc, #188]	@ (8001a5c <main+0xa24>)
 800199e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019a2:	601a      	str	r2, [r3, #0]
						Gv = 1;
 80019a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a60 <main+0xa28>)
 80019a6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80019aa:	601a      	str	r2, [r3, #0]
						Integral_I = 1;
 80019ac:	4b2d      	ldr	r3, [pc, #180]	@ (8001a64 <main+0xa2c>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
						prev_delta = 1;
 80019b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a68 <main+0xa30>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
						input_vol = 1;
 80019b8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a6c <main+0xa34>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
						input_voltage =1;
 80019be:	4b2c      	ldr	r3, [pc, #176]	@ (8001a70 <main+0xa38>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
						output_vol = 1;
 80019c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a74 <main+0xa3c>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	601a      	str	r2, [r3, #0]
						output_voltage =1;
 80019ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001a78 <main+0xa40>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
						input_vol_x_n1 = 1;
 80019d0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a7c <main+0xa44>)
 80019d2:	2201      	movs	r2, #1
 80019d4:	601a      	str	r2, [r3, #0]
						input_vol_y_n1 = 1;
 80019d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a80 <main+0xa48>)
 80019d8:	2201      	movs	r2, #1
 80019da:	601a      	str	r2, [r3, #0]
						output_vol_x_n1 = 1;
 80019dc:	4b29      	ldr	r3, [pc, #164]	@ (8001a84 <main+0xa4c>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
						output_vol_y_n1 = 1;
 80019e2:	4b29      	ldr	r3, [pc, #164]	@ (8001a88 <main+0xa50>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
						imin = 1;
 80019e8:	4b28      	ldr	r3, [pc, #160]	@ (8001a8c <main+0xa54>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]
						HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 80019ee:	2104      	movs	r1, #4
 80019f0:	4827      	ldr	r0, [pc, #156]	@ (8001a90 <main+0xa58>)
 80019f2:	f008 fd45 	bl	800a480 <HAL_TIM_PWM_Stop>
						HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80019f6:	2100      	movs	r1, #0
 80019f8:	4826      	ldr	r0, [pc, #152]	@ (8001a94 <main+0xa5c>)
 80019fa:	f008 fd41 	bl	800a480 <HAL_TIM_PWM_Stop>
	  	            	currentState = STATE_STANDBY;
 80019fe:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <main+0xa04>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
	  	              }

	  	                  break;
 8001a04:	e006      	b.n	8001a14 <main+0x9dc>
	  	              default:
	  	                  break;
 8001a06:	bf00      	nop
 8001a08:	f7ff bb5f 	b.w	80010ca <main+0x92>
	  	                  break;
 8001a0c:	bf00      	nop
 8001a0e:	f7ff bb5c 	b.w	80010ca <main+0x92>
	  	                  break;
 8001a12:	bf00      	nop
	  	  	  	  checkfaults = Check_Faults();
 8001a14:	f7ff bb59 	b.w	80010ca <main+0x92>
 8001a18:	48000800 	.word	0x48000800
 8001a1c:	20000940 	.word	0x20000940
 8001a20:	48000400 	.word	0x48000400
 8001a24:	48001000 	.word	0x48001000
 8001a28:	48000c00 	.word	0x48000c00
 8001a2c:	48001400 	.word	0x48001400
 8001a30:	200008a8 	.word	0x200008a8
 8001a34:	20000b94 	.word	0x20000b94
 8001a38:	20000b8c 	.word	0x20000b8c
 8001a3c:	20000b8f 	.word	0x20000b8f
 8001a40:	20000a98 	.word	0x20000a98
 8001a44:	20000a70 	.word	0x20000a70
 8001a48:	20000a74 	.word	0x20000a74
 8001a4c:	20000aa0 	.word	0x20000aa0
 8001a50:	20000008 	.word	0x20000008
 8001a54:	2000000c 	.word	0x2000000c
 8001a58:	20000010 	.word	0x20000010
 8001a5c:	20000014 	.word	0x20000014
 8001a60:	20000028 	.word	0x20000028
 8001a64:	20000b84 	.word	0x20000b84
 8001a68:	20000b88 	.word	0x20000b88
 8001a6c:	20000044 	.word	0x20000044
 8001a70:	20000a7c 	.word	0x20000a7c
 8001a74:	20000048 	.word	0x20000048
 8001a78:	20000004 	.word	0x20000004
 8001a7c:	2000004c 	.word	0x2000004c
 8001a80:	20000050 	.word	0x20000050
 8001a84:	20000054 	.word	0x20000054
 8001a88:	20000058 	.word	0x20000058
 8001a8c:	20000a78 	.word	0x20000a78
 8001a90:	200008f4 	.word	0x200008f4
 8001a94:	200007c4 	.word	0x200007c4

08001a98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b094      	sub	sp, #80	@ 0x50
 8001a9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a9e:	f107 0318 	add.w	r3, r7, #24
 8001aa2:	2238      	movs	r2, #56	@ 0x38
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f010 fa41 	bl	8011f2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001aba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001abe:	f007 f9d7 	bl	8008e70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001ac2:	2322      	movs	r3, #34	@ 0x22
 8001ac4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aca:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001acc:	2340      	movs	r3, #64	@ 0x40
 8001ace:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001adc:	2304      	movs	r3, #4
 8001ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8001ae0:	234b      	movs	r3, #75	@ 0x4b
 8001ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001aec:	2302      	movs	r3, #2
 8001aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001af0:	f107 0318 	add.w	r3, r7, #24
 8001af4:	4618      	mov	r0, r3
 8001af6:	f007 fa6f 	bl	8008fd8 <HAL_RCC_OscConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001b00:	f002 f802 	bl	8003b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b04:	230f      	movs	r3, #15
 8001b06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2104      	movs	r1, #4
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f007 fd6d 	bl	80095fc <HAL_RCC_ClockConfig>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b28:	f001 ffee 	bl	8003b08 <Error_Handler>
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3750      	adds	r7, #80	@ 0x50
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	@ 0x30
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2220      	movs	r2, #32
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f010 f9ee 	bl	8011f2e <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001b52:	4b32      	ldr	r3, [pc, #200]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b54:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001b58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001b5a:	4b30      	ldr	r3, [pc, #192]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b5c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b62:	4b2e      	ldr	r3, [pc, #184]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b68:	4b2c      	ldr	r3, [pc, #176]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001b6e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001b74:	4b29      	ldr	r3, [pc, #164]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b7a:	4b28      	ldr	r3, [pc, #160]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001b80:	4b26      	ldr	r3, [pc, #152]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b86:	4b25      	ldr	r3, [pc, #148]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001b8c:	4b23      	ldr	r3, [pc, #140]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b92:	4b22      	ldr	r3, [pc, #136]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b9a:	4b20      	ldr	r3, [pc, #128]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ba0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bae:	4b1b      	ldr	r3, [pc, #108]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001bb4:	4b19      	ldr	r3, [pc, #100]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bbc:	4817      	ldr	r0, [pc, #92]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001bbe:	f003 f891 	bl	8004ce4 <HAL_ADC_Init>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001bc8:	f001 ff9e 	bl	8003b08 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4811      	ldr	r0, [pc, #68]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001bd8:	f004 f9a6 	bl	8005f28 <HAL_ADCEx_MultiModeConfigChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001be2:	f001 ff91 	bl	8003b08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <MX_ADC1_Init+0xec>)
 8001be8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001bea:	2306      	movs	r3, #6
 8001bec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001bee:	2307      	movs	r3, #7
 8001bf0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001bf2:	237f      	movs	r3, #127	@ 0x7f
 8001bf4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bfe:	1d3b      	adds	r3, r7, #4
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	@ (8001c1c <MX_ADC1_Init+0xe8>)
 8001c04:	f003 fb12 	bl	800522c <HAL_ADC_ConfigChannel>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001c0e:	f001 ff7b 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c12:	bf00      	nop
 8001c14:	3730      	adds	r7, #48	@ 0x30
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	200003e4 	.word	0x200003e4
 8001c20:	cb840000 	.word	0xcb840000

08001c24 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08c      	sub	sp, #48	@ 0x30
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2220      	movs	r2, #32
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f010 f976 	bl	8011f2e <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001c42:	4b57      	ldr	r3, [pc, #348]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001c44:	4a57      	ldr	r2, [pc, #348]	@ (8001da4 <MX_ADC3_Init+0x180>)
 8001c46:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001c48:	4b55      	ldr	r3, [pc, #340]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001c4a:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001c4e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001c50:	4b53      	ldr	r3, [pc, #332]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c56:	4b52      	ldr	r3, [pc, #328]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001c5c:	4b50      	ldr	r3, [pc, #320]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001c62:	4b4f      	ldr	r3, [pc, #316]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001c68:	4b4d      	ldr	r3, [pc, #308]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001c6e:	4b4c      	ldr	r3, [pc, #304]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001c74:	4b4a      	ldr	r3, [pc, #296]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001c76:	2201      	movs	r2, #1
 8001c78:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 5;
 8001c7a:	4b49      	ldr	r3, [pc, #292]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001c7c:	2205      	movs	r2, #5
 8001c7e:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001c80:	4b47      	ldr	r3, [pc, #284]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c88:	4b45      	ldr	r3, [pc, #276]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c8e:	4b44      	ldr	r3, [pc, #272]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001c94:	4b42      	ldr	r3, [pc, #264]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001c9c:	4b40      	ldr	r3, [pc, #256]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001c9e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ca2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8001ca4:	4b3e      	ldr	r3, [pc, #248]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001cac:	483c      	ldr	r0, [pc, #240]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001cae:	f003 f819 	bl	8004ce4 <HAL_ADC_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_ADC3_Init+0x98>
  {
    Error_Handler();
 8001cb8:	f001 ff26 	bl	8003b08 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8001cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4836      	ldr	r0, [pc, #216]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001cc8:	f004 f92e 	bl	8005f28 <HAL_ADCEx_MultiModeConfigChannel>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001cd2:	f001 ff19 	bl	8003b08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001cd6:	4b34      	ldr	r3, [pc, #208]	@ (8001da8 <MX_ADC3_Init+0x184>)
 8001cd8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001cda:	2306      	movs	r3, #6
 8001cdc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ce2:	237f      	movs	r3, #127	@ 0x7f
 8001ce4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 38;
 8001cea:	2326      	movs	r3, #38	@ 0x26
 8001cec:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC_OFFSET_SIGN_POSITIVE;
 8001cee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cf2:	61fb      	str	r3, [r7, #28]
  sConfig.OffsetSaturation = DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 3020 	strb.w	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4828      	ldr	r0, [pc, #160]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001d00:	f003 fa94 	bl	800522c <HAL_ADC_ConfigChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 8001d0a:	f001 fefd 	bl	8003b08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001d0e:	4b27      	ldr	r3, [pc, #156]	@ (8001dac <MX_ADC3_Init+0x188>)
 8001d10:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001d12:	230c      	movs	r3, #12
 8001d14:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_2;
 8001d16:	2301      	movs	r3, #1
 8001d18:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 37;
 8001d1a:	2325      	movs	r3, #37	@ 0x25
 8001d1c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	481f      	ldr	r0, [pc, #124]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001d24:	f003 fa82 	bl	800522c <HAL_ADC_ConfigChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_ADC3_Init+0x10e>
  {
    Error_Handler();
 8001d2e:	f001 feeb 	bl	8003b08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001d32:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <MX_ADC3_Init+0x18c>)
 8001d34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001d36:	2312      	movs	r3, #18
 8001d38:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_3;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 8;
 8001d3e:	2308      	movs	r3, #8
 8001d40:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4816      	ldr	r0, [pc, #88]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001d48:	f003 fa70 	bl	800522c <HAL_ADC_ConfigChannel>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <MX_ADC3_Init+0x132>
  {
    Error_Handler();
 8001d52:	f001 fed9 	bl	8003b08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001d56:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <MX_ADC3_Init+0x190>)
 8001d58:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001d5a:	2318      	movs	r3, #24
 8001d5c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d5e:	2304      	movs	r3, #4
 8001d60:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	480d      	ldr	r0, [pc, #52]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001d6c:	f003 fa5e 	bl	800522c <HAL_ADC_ConfigChannel>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 8001d76:	f001 fec7 	bl	8003b08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <MX_ADC3_Init+0x194>)
 8001d7c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001d7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d84:	1d3b      	adds	r3, r7, #4
 8001d86:	4619      	mov	r1, r3
 8001d88:	4805      	ldr	r0, [pc, #20]	@ (8001da0 <MX_ADC3_Init+0x17c>)
 8001d8a:	f003 fa4f 	bl	800522c <HAL_ADC_ConfigChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_ADC3_Init+0x174>
  {
    Error_Handler();
 8001d94:	f001 feb8 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d98:	bf00      	nop
 8001d9a:	3730      	adds	r7, #48	@ 0x30
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000450 	.word	0x20000450
 8001da4:	50000400 	.word	0x50000400
 8001da8:	04300002 	.word	0x04300002
 8001dac:	08600004 	.word	0x08600004
 8001db0:	0c900008 	.word	0x0c900008
 8001db4:	10c00010 	.word	0x10c00010
 8001db8:	14f00020 	.word	0x14f00020

08001dbc <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001dc2:	463b      	mov	r3, r7
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f010 f8b0 	bl	8011f2e <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001dce:	4b2b      	ldr	r3, [pc, #172]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001dd0:	4a2b      	ldr	r2, [pc, #172]	@ (8001e80 <MX_ADC4_Init+0xc4>)
 8001dd2:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001dd4:	4b29      	ldr	r3, [pc, #164]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001dd6:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001dda:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001ddc:	4b27      	ldr	r3, [pc, #156]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001de2:	4b26      	ldr	r3, [pc, #152]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8001de8:	4b24      	ldr	r3, [pc, #144]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001dee:	4b23      	ldr	r3, [pc, #140]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001df4:	4b21      	ldr	r3, [pc, #132]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001df6:	2204      	movs	r2, #4
 8001df8:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8001dfa:	4b20      	ldr	r3, [pc, #128]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = ENABLE;
 8001e00:	4b1e      	ldr	r3, [pc, #120]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001e06:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e14:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e1a:	4b18      	ldr	r3, [pc, #96]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001e20:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001e28:	4b14      	ldr	r3, [pc, #80]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001e2a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001e30:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001e38:	4810      	ldr	r0, [pc, #64]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001e3a:	f002 ff53 	bl	8004ce4 <HAL_ADC_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_ADC4_Init+0x8c>
  {
    Error_Handler();
 8001e44:	f001 fe60 	bl	8003b08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001e48:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <MX_ADC4_Init+0xc8>)
 8001e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e4c:	2306      	movs	r3, #6
 8001e4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001e50:	2307      	movs	r3, #7
 8001e52:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001e54:	237f      	movs	r3, #127	@ 0x7f
 8001e56:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001e58:	2304      	movs	r3, #4
 8001e5a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001e60:	463b      	mov	r3, r7
 8001e62:	4619      	mov	r1, r3
 8001e64:	4805      	ldr	r0, [pc, #20]	@ (8001e7c <MX_ADC4_Init+0xc0>)
 8001e66:	f003 f9e1 	bl	800522c <HAL_ADC_ConfigChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_ADC4_Init+0xb8>
  {
    Error_Handler();
 8001e70:	f001 fe4a 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001e74:	bf00      	nop
 8001e76:	3720      	adds	r7, #32
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	200004bc 	.word	0x200004bc
 8001e80:	50000500 	.word	0x50000500
 8001e84:	04300002 	.word	0x04300002

08001e88 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e8e:	463b      	mov	r3, r7
 8001e90:	2220      	movs	r2, #32
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f010 f84a 	bl	8011f2e <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 8001e9a:	4b31      	ldr	r3, [pc, #196]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001e9c:	4a31      	ldr	r2, [pc, #196]	@ (8001f64 <MX_ADC5_Init+0xdc>)
 8001e9e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8001ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001ea2:	f44f 12a0 	mov.w	r2, #1310720	@ 0x140000
 8001ea6:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001eae:	4b2c      	ldr	r3, [pc, #176]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001eba:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ec0:	4b27      	ldr	r3, [pc, #156]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001ec6:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = ENABLE;
 8001ecc:	4b24      	ldr	r3, [pc, #144]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001ed2:	4b23      	ldr	r3, [pc, #140]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001ed8:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = ENABLE;
 8001eec:	4b1c      	ldr	r3, [pc, #112]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = ENABLE;
 8001efa:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc5.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 8001f02:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001f04:	221c      	movs	r2, #28
 8001f06:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc5.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_8;
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001f0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f0e:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc5.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001f10:	4b13      	ldr	r3, [pc, #76]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc5.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8001f16:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001f18:	2201      	movs	r2, #1
 8001f1a:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001f1c:	4810      	ldr	r0, [pc, #64]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001f1e:	f002 fee1 	bl	8004ce4 <HAL_ADC_Init>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_ADC5_Init+0xa4>
  {
    Error_Handler();
 8001f28:	f001 fdee 	bl	8003b08 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <MX_ADC5_Init+0xe0>)
 8001f2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f30:	2306      	movs	r3, #6
 8001f32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f38:	237f      	movs	r3, #127	@ 0x7f
 8001f3a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 8001f44:	463b      	mov	r3, r7
 8001f46:	4619      	mov	r1, r3
 8001f48:	4805      	ldr	r0, [pc, #20]	@ (8001f60 <MX_ADC5_Init+0xd8>)
 8001f4a:	f003 f96f 	bl	800522c <HAL_ADC_ConfigChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_ADC5_Init+0xd0>
  {
    Error_Handler();
 8001f54:	f001 fdd8 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000528 	.word	0x20000528
 8001f64:	50000600 	.word	0x50000600
 8001f68:	04300002 	.word	0x04300002

08001f6c <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001f70:	4b06      	ldr	r3, [pc, #24]	@ (8001f8c <MX_CORDIC_Init+0x20>)
 8001f72:	4a07      	ldr	r2, [pc, #28]	@ (8001f90 <MX_CORDIC_Init+0x24>)
 8001f74:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001f76:	4805      	ldr	r0, [pc, #20]	@ (8001f8c <MX_CORDIC_Init+0x20>)
 8001f78:	f004 f8de 	bl	8006138 <HAL_CORDIC_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8001f82:	f001 fdc1 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200006b4 	.word	0x200006b4
 8001f90:	40020c00 	.word	0x40020c00

08001f94 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08c      	sub	sp, #48	@ 0x30
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001f9a:	463b      	mov	r3, r7
 8001f9c:	2230      	movs	r2, #48	@ 0x30
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f00f ffc4 	bl	8011f2e <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8002020 <MX_DAC1_Init+0x8c>)
 8001fa8:	4a1e      	ldr	r2, [pc, #120]	@ (8002024 <MX_DAC1_Init+0x90>)
 8001faa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001fac:	481c      	ldr	r0, [pc, #112]	@ (8002020 <MX_DAC1_Init+0x8c>)
 8001fae:	f004 fb0c 	bl	80065ca <HAL_DAC_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001fb8:	f001 fda6 	bl	8003b08 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	480e      	ldr	r0, [pc, #56]	@ (8002020 <MX_DAC1_Init+0x8c>)
 8001fe8:	f004 fc0c 	bl	8006804 <HAL_DAC_ConfigChannel>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001ff2:	f001 fd89 	bl	8003b08 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4808      	ldr	r0, [pc, #32]	@ (8002020 <MX_DAC1_Init+0x8c>)
 8001ffe:	f004 fc01 	bl	8006804 <HAL_DAC_ConfigChannel>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8002008:	f001 fd7e 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  __HAL_LINKDMA(&hdac1, DMA_Handle1, hdma_dac1_ch1);
 800200c:	4b04      	ldr	r3, [pc, #16]	@ (8002020 <MX_DAC1_Init+0x8c>)
 800200e:	4a06      	ldr	r2, [pc, #24]	@ (8002028 <MX_DAC1_Init+0x94>)
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <MX_DAC1_Init+0x94>)
 8002014:	4a02      	ldr	r2, [pc, #8]	@ (8002020 <MX_DAC1_Init+0x8c>)
 8002016:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE END DAC1_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	3730      	adds	r7, #48	@ 0x30
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	200006dc 	.word	0x200006dc
 8002024:	50000800 	.word	0x50000800
 8002028:	20000704 	.word	0x20000704

0800202c <MX_DAC2_Init>:
  * @brief DAC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC2_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08c      	sub	sp, #48	@ 0x30
 8002030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC2_Init 0 */

  /* USER CODE END DAC2_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002032:	463b      	mov	r3, r7
 8002034:	2230      	movs	r2, #48	@ 0x30
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f00f ff78 	bl	8011f2e <memset>

  /* USER CODE END DAC2_Init 1 */

  /** DAC Initialization
  */
  hdac2.Instance = DAC2;
 800203e:	4b16      	ldr	r3, [pc, #88]	@ (8002098 <MX_DAC2_Init+0x6c>)
 8002040:	4a16      	ldr	r2, [pc, #88]	@ (800209c <MX_DAC2_Init+0x70>)
 8002042:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8002044:	4814      	ldr	r0, [pc, #80]	@ (8002098 <MX_DAC2_Init+0x6c>)
 8002046:	f004 fac0 	bl	80065ca <HAL_DAC_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8002050:	f001 fd5a 	bl	8003b08 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002054:	2302      	movs	r3, #2
 8002056:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8002070:	2301      	movs	r3, #1
 8002072:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002074:	2300      	movs	r3, #0
 8002076:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002078:	463b      	mov	r3, r7
 800207a:	2200      	movs	r2, #0
 800207c:	4619      	mov	r1, r3
 800207e:	4806      	ldr	r0, [pc, #24]	@ (8002098 <MX_DAC2_Init+0x6c>)
 8002080:	f004 fbc0 	bl	8006804 <HAL_DAC_ConfigChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800208a:	f001 fd3d 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN DAC2_Init 2 */

  /* USER CODE END DAC2_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	3730      	adds	r7, #48	@ 0x30
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200006f0 	.word	0x200006f0
 800209c:	50000c00 	.word	0x50000c00

080020a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b098      	sub	sp, #96	@ 0x60
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80020aa:	2200      	movs	r2, #0
 80020ac:	601a      	str	r2, [r3, #0]
 80020ae:	605a      	str	r2, [r3, #4]
 80020b0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020b2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	609a      	str	r2, [r3, #8]
 80020be:	60da      	str	r2, [r3, #12]
 80020c0:	611a      	str	r2, [r3, #16]
 80020c2:	615a      	str	r2, [r3, #20]
 80020c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	2234      	movs	r2, #52	@ 0x34
 80020ca:	2100      	movs	r1, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	f00f ff2e 	bl	8011f2e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020d2:	4b3e      	ldr	r3, [pc, #248]	@ (80021cc <MX_TIM1_Init+0x12c>)
 80020d4:	4a3e      	ldr	r2, [pc, #248]	@ (80021d0 <MX_TIM1_Init+0x130>)
 80020d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020d8:	4b3c      	ldr	r3, [pc, #240]	@ (80021cc <MX_TIM1_Init+0x12c>)
 80020da:	2200      	movs	r2, #0
 80020dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020de:	4b3b      	ldr	r3, [pc, #236]	@ (80021cc <MX_TIM1_Init+0x12c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 210;
 80020e4:	4b39      	ldr	r3, [pc, #228]	@ (80021cc <MX_TIM1_Init+0x12c>)
 80020e6:	22d2      	movs	r2, #210	@ 0xd2
 80020e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ea:	4b38      	ldr	r3, [pc, #224]	@ (80021cc <MX_TIM1_Init+0x12c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020f0:	4b36      	ldr	r3, [pc, #216]	@ (80021cc <MX_TIM1_Init+0x12c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f6:	4b35      	ldr	r3, [pc, #212]	@ (80021cc <MX_TIM1_Init+0x12c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80020fc:	4833      	ldr	r0, [pc, #204]	@ (80021cc <MX_TIM1_Init+0x12c>)
 80020fe:	f008 f856 	bl	800a1ae <HAL_TIM_PWM_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002108:	f001 fcfe 	bl	8003b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002110:	2300      	movs	r3, #0
 8002112:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002114:	2300      	movs	r3, #0
 8002116:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002118:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800211c:	4619      	mov	r1, r3
 800211e:	482b      	ldr	r0, [pc, #172]	@ (80021cc <MX_TIM1_Init+0x12c>)
 8002120:	f009 fa8c 	bl	800b63c <HAL_TIMEx_MasterConfigSynchronization>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 800212a:	f001 fced 	bl	8003b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800212e:	2360      	movs	r3, #96	@ 0x60
 8002130:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002136:	2300      	movs	r3, #0
 8002138:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800213a:	2300      	movs	r3, #0
 800213c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002146:	2300      	movs	r3, #0
 8002148:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800214a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800214e:	2200      	movs	r2, #0
 8002150:	4619      	mov	r1, r3
 8002152:	481e      	ldr	r0, [pc, #120]	@ (80021cc <MX_TIM1_Init+0x12c>)
 8002154:	f008 fb80 	bl	800a858 <HAL_TIM_PWM_ConfigChannel>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800215e:	f001 fcd3 	bl	8003b08 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8002162:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <MX_TIM1_Init+0x12c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	4b18      	ldr	r3, [pc, #96]	@ (80021cc <MX_TIM1_Init+0x12c>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0208 	bic.w	r2, r2, #8
 8002170:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002176:	2300      	movs	r3, #0
 8002178:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002186:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800218a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002190:	2300      	movs	r3, #0
 8002192:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002198:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800219c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800219e:	2300      	movs	r3, #0
 80021a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80021a2:	2300      	movs	r3, #0
 80021a4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021aa:	1d3b      	adds	r3, r7, #4
 80021ac:	4619      	mov	r1, r3
 80021ae:	4807      	ldr	r0, [pc, #28]	@ (80021cc <MX_TIM1_Init+0x12c>)
 80021b0:	f009 fada 	bl	800b768 <HAL_TIMEx_ConfigBreakDeadTime>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 80021ba:	f001 fca5 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80021be:	4803      	ldr	r0, [pc, #12]	@ (80021cc <MX_TIM1_Init+0x12c>)
 80021c0:	f002 f84a 	bl	8004258 <HAL_TIM_MspPostInit>

}
 80021c4:	bf00      	nop
 80021c6:	3760      	adds	r7, #96	@ 0x60
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	200007c4 	.word	0x200007c4
 80021d0:	40012c00 	.word	0x40012c00

080021d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08e      	sub	sp, #56	@ 0x38
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f4:	463b      	mov	r3, r7
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	611a      	str	r2, [r3, #16]
 8002202:	615a      	str	r2, [r3, #20]
 8002204:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002206:	4b2d      	ldr	r3, [pc, #180]	@ (80022bc <MX_TIM4_Init+0xe8>)
 8002208:	4a2d      	ldr	r2, [pc, #180]	@ (80022c0 <MX_TIM4_Init+0xec>)
 800220a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800220c:	4b2b      	ldr	r3, [pc, #172]	@ (80022bc <MX_TIM4_Init+0xe8>)
 800220e:	2200      	movs	r2, #0
 8002210:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002212:	4b2a      	ldr	r3, [pc, #168]	@ (80022bc <MX_TIM4_Init+0xe8>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 679;
 8002218:	4b28      	ldr	r3, [pc, #160]	@ (80022bc <MX_TIM4_Init+0xe8>)
 800221a:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800221e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002220:	4b26      	ldr	r3, [pc, #152]	@ (80022bc <MX_TIM4_Init+0xe8>)
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002226:	4b25      	ldr	r3, [pc, #148]	@ (80022bc <MX_TIM4_Init+0xe8>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800222c:	4823      	ldr	r0, [pc, #140]	@ (80022bc <MX_TIM4_Init+0xe8>)
 800222e:	f007 fe4f 	bl	8009ed0 <HAL_TIM_Base_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8002238:	f001 fc66 	bl	8003b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800223c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002240:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002242:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002246:	4619      	mov	r1, r3
 8002248:	481c      	ldr	r0, [pc, #112]	@ (80022bc <MX_TIM4_Init+0xe8>)
 800224a:	f008 fc19 	bl	800aa80 <HAL_TIM_ConfigClockSource>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002254:	f001 fc58 	bl	8003b08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002258:	4818      	ldr	r0, [pc, #96]	@ (80022bc <MX_TIM4_Init+0xe8>)
 800225a:	f007 ffa8 	bl	800a1ae <HAL_TIM_PWM_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8002264:	f001 fc50 	bl	8003b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002270:	f107 031c 	add.w	r3, r7, #28
 8002274:	4619      	mov	r1, r3
 8002276:	4811      	ldr	r0, [pc, #68]	@ (80022bc <MX_TIM4_Init+0xe8>)
 8002278:	f009 f9e0 	bl	800b63c <HAL_TIMEx_MasterConfigSynchronization>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002282:	f001 fc41 	bl	8003b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002286:	2360      	movs	r3, #96	@ 0x60
 8002288:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002296:	463b      	mov	r3, r7
 8002298:	2200      	movs	r2, #0
 800229a:	4619      	mov	r1, r3
 800229c:	4807      	ldr	r0, [pc, #28]	@ (80022bc <MX_TIM4_Init+0xe8>)
 800229e:	f008 fadb 	bl	800a858 <HAL_TIM_PWM_ConfigChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80022a8:	f001 fc2e 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022ac:	4803      	ldr	r0, [pc, #12]	@ (80022bc <MX_TIM4_Init+0xe8>)
 80022ae:	f001 ffd3 	bl	8004258 <HAL_TIM_MspPostInit>

}
 80022b2:	bf00      	nop
 80022b4:	3738      	adds	r7, #56	@ 0x38
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000810 	.word	0x20000810
 80022c0:	40000800 	.word	0x40000800

080022c4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022d4:	4b19      	ldr	r3, [pc, #100]	@ (800233c <MX_TIM6_Init+0x78>)
 80022d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002340 <MX_TIM6_Init+0x7c>)
 80022d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 11549;
 80022da:	4b18      	ldr	r3, [pc, #96]	@ (800233c <MX_TIM6_Init+0x78>)
 80022dc:	f642 521d 	movw	r2, #11549	@ 0x2d1d
 80022e0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022e2:	4b16      	ldr	r3, [pc, #88]	@ (800233c <MX_TIM6_Init+0x78>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 64934;
 80022e8:	4b14      	ldr	r3, [pc, #80]	@ (800233c <MX_TIM6_Init+0x78>)
 80022ea:	f64f 52a6 	movw	r2, #64934	@ 0xfda6
 80022ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022f0:	4b12      	ldr	r3, [pc, #72]	@ (800233c <MX_TIM6_Init+0x78>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022f6:	4811      	ldr	r0, [pc, #68]	@ (800233c <MX_TIM6_Init+0x78>)
 80022f8:	f007 fdea 	bl	8009ed0 <HAL_TIM_Base_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002302:	f001 fc01 	bl	8003b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800230e:	1d3b      	adds	r3, r7, #4
 8002310:	4619      	mov	r1, r3
 8002312:	480a      	ldr	r0, [pc, #40]	@ (800233c <MX_TIM6_Init+0x78>)
 8002314:	f009 f992 	bl	800b63c <HAL_TIMEx_MasterConfigSynchronization>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800231e:	f001 fbf3 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2100      	movs	r1, #0
 8002326:	2036      	movs	r0, #54	@ 0x36
 8002328:	f004 f91b 	bl	8006562 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800232c:	2036      	movs	r0, #54	@ 0x36
 800232e:	f004 f932 	bl	8006596 <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM6_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000085c 	.word	0x2000085c
 8002340:	40001000 	.word	0x40001000

08002344 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002354:	4b14      	ldr	r3, [pc, #80]	@ (80023a8 <MX_TIM7_Init+0x64>)
 8002356:	4a15      	ldr	r2, [pc, #84]	@ (80023ac <MX_TIM7_Init+0x68>)
 8002358:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 14999;
 800235a:	4b13      	ldr	r3, [pc, #76]	@ (80023a8 <MX_TIM7_Init+0x64>)
 800235c:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002360:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002362:	4b11      	ldr	r3, [pc, #68]	@ (80023a8 <MX_TIM7_Init+0x64>)
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 8002368:	4b0f      	ldr	r3, [pc, #60]	@ (80023a8 <MX_TIM7_Init+0x64>)
 800236a:	2209      	movs	r2, #9
 800236c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236e:	4b0e      	ldr	r3, [pc, #56]	@ (80023a8 <MX_TIM7_Init+0x64>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002374:	480c      	ldr	r0, [pc, #48]	@ (80023a8 <MX_TIM7_Init+0x64>)
 8002376:	f007 fdab 	bl	8009ed0 <HAL_TIM_Base_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002380:	f001 fbc2 	bl	8003b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002384:	2300      	movs	r3, #0
 8002386:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800238c:	1d3b      	adds	r3, r7, #4
 800238e:	4619      	mov	r1, r3
 8002390:	4805      	ldr	r0, [pc, #20]	@ (80023a8 <MX_TIM7_Init+0x64>)
 8002392:	f009 f953 	bl	800b63c <HAL_TIMEx_MasterConfigSynchronization>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800239c:	f001 fbb4 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	200008a8 	.word	0x200008a8
 80023ac:	40001400 	.word	0x40001400

080023b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b098      	sub	sp, #96	@ 0x60
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]
 80023c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	605a      	str	r2, [r3, #4]
 80023cc:	609a      	str	r2, [r3, #8]
 80023ce:	60da      	str	r2, [r3, #12]
 80023d0:	611a      	str	r2, [r3, #16]
 80023d2:	615a      	str	r2, [r3, #20]
 80023d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023d6:	1d3b      	adds	r3, r7, #4
 80023d8:	2234      	movs	r2, #52	@ 0x34
 80023da:	2100      	movs	r1, #0
 80023dc:	4618      	mov	r0, r3
 80023de:	f00f fda6 	bl	8011f2e <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80023e2:	4b3e      	ldr	r3, [pc, #248]	@ (80024dc <MX_TIM8_Init+0x12c>)
 80023e4:	4a3e      	ldr	r2, [pc, #248]	@ (80024e0 <MX_TIM8_Init+0x130>)
 80023e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80023e8:	4b3c      	ldr	r3, [pc, #240]	@ (80024dc <MX_TIM8_Init+0x12c>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ee:	4b3b      	ldr	r3, [pc, #236]	@ (80024dc <MX_TIM8_Init+0x12c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 210;
 80023f4:	4b39      	ldr	r3, [pc, #228]	@ (80024dc <MX_TIM8_Init+0x12c>)
 80023f6:	22d2      	movs	r2, #210	@ 0xd2
 80023f8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023fa:	4b38      	ldr	r3, [pc, #224]	@ (80024dc <MX_TIM8_Init+0x12c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002400:	4b36      	ldr	r3, [pc, #216]	@ (80024dc <MX_TIM8_Init+0x12c>)
 8002402:	2200      	movs	r2, #0
 8002404:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002406:	4b35      	ldr	r3, [pc, #212]	@ (80024dc <MX_TIM8_Init+0x12c>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800240c:	4833      	ldr	r0, [pc, #204]	@ (80024dc <MX_TIM8_Init+0x12c>)
 800240e:	f007 fece 	bl	800a1ae <HAL_TIM_PWM_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002418:	f001 fb76 	bl	8003b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241c:	2300      	movs	r3, #0
 800241e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002420:	2300      	movs	r3, #0
 8002422:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002428:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800242c:	4619      	mov	r1, r3
 800242e:	482b      	ldr	r0, [pc, #172]	@ (80024dc <MX_TIM8_Init+0x12c>)
 8002430:	f009 f904 	bl	800b63c <HAL_TIMEx_MasterConfigSynchronization>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 800243a:	f001 fb65 	bl	8003b08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800243e:	2360      	movs	r3, #96	@ 0x60
 8002440:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002446:	2300      	movs	r3, #0
 8002448:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800244a:	2300      	movs	r3, #0
 800244c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800244e:	2300      	movs	r3, #0
 8002450:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002452:	2300      	movs	r3, #0
 8002454:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800245a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800245e:	2204      	movs	r2, #4
 8002460:	4619      	mov	r1, r3
 8002462:	481e      	ldr	r0, [pc, #120]	@ (80024dc <MX_TIM8_Init+0x12c>)
 8002464:	f008 f9f8 	bl	800a858 <HAL_TIM_PWM_ConfigChannel>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 800246e:	f001 fb4b 	bl	8003b08 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim8, TIM_CHANNEL_2);
 8002472:	4b1a      	ldr	r3, [pc, #104]	@ (80024dc <MX_TIM8_Init+0x12c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699a      	ldr	r2, [r3, #24]
 8002478:	4b18      	ldr	r3, [pc, #96]	@ (80024dc <MX_TIM8_Init+0x12c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002480:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002496:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800249a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80024a0:	2300      	movs	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80024a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80024ae:	2300      	movs	r3, #0
 80024b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80024b2:	2300      	movs	r3, #0
 80024b4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80024ba:	1d3b      	adds	r3, r7, #4
 80024bc:	4619      	mov	r1, r3
 80024be:	4807      	ldr	r0, [pc, #28]	@ (80024dc <MX_TIM8_Init+0x12c>)
 80024c0:	f009 f952 	bl	800b768 <HAL_TIMEx_ConfigBreakDeadTime>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 80024ca:	f001 fb1d 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80024ce:	4803      	ldr	r0, [pc, #12]	@ (80024dc <MX_TIM8_Init+0x12c>)
 80024d0:	f001 fec2 	bl	8004258 <HAL_TIM_MspPostInit>

}
 80024d4:	bf00      	nop
 80024d6:	3760      	adds	r7, #96	@ 0x60
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	200008f4 	.word	0x200008f4
 80024e0:	40013400 	.word	0x40013400

080024e4 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024ea:	f107 0310 	add.w	r3, r7, #16
 80024ee:	2200      	movs	r2, #0
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	605a      	str	r2, [r3, #4]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002502:	4b1f      	ldr	r3, [pc, #124]	@ (8002580 <MX_TIM15_Init+0x9c>)
 8002504:	4a1f      	ldr	r2, [pc, #124]	@ (8002584 <MX_TIM15_Init+0xa0>)
 8002506:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1499;
 8002508:	4b1d      	ldr	r3, [pc, #116]	@ (8002580 <MX_TIM15_Init+0x9c>)
 800250a:	f240 52db 	movw	r2, #1499	@ 0x5db
 800250e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002510:	4b1b      	ldr	r3, [pc, #108]	@ (8002580 <MX_TIM15_Init+0x9c>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 4;
 8002516:	4b1a      	ldr	r3, [pc, #104]	@ (8002580 <MX_TIM15_Init+0x9c>)
 8002518:	2204      	movs	r2, #4
 800251a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800251c:	4b18      	ldr	r3, [pc, #96]	@ (8002580 <MX_TIM15_Init+0x9c>)
 800251e:	2200      	movs	r2, #0
 8002520:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002522:	4b17      	ldr	r3, [pc, #92]	@ (8002580 <MX_TIM15_Init+0x9c>)
 8002524:	2200      	movs	r2, #0
 8002526:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002528:	4b15      	ldr	r3, [pc, #84]	@ (8002580 <MX_TIM15_Init+0x9c>)
 800252a:	2200      	movs	r2, #0
 800252c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800252e:	4814      	ldr	r0, [pc, #80]	@ (8002580 <MX_TIM15_Init+0x9c>)
 8002530:	f007 fcce 	bl	8009ed0 <HAL_TIM_Base_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800253a:	f001 fae5 	bl	8003b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800253e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002542:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002544:	f107 0310 	add.w	r3, r7, #16
 8002548:	4619      	mov	r1, r3
 800254a:	480d      	ldr	r0, [pc, #52]	@ (8002580 <MX_TIM15_Init+0x9c>)
 800254c:	f008 fa98 	bl	800aa80 <HAL_TIM_ConfigClockSource>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8002556:	f001 fad7 	bl	8003b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800255e:	2300      	movs	r3, #0
 8002560:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002562:	1d3b      	adds	r3, r7, #4
 8002564:	4619      	mov	r1, r3
 8002566:	4806      	ldr	r0, [pc, #24]	@ (8002580 <MX_TIM15_Init+0x9c>)
 8002568:	f009 f868 	bl	800b63c <HAL_TIMEx_MasterConfigSynchronization>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8002572:	f001 fac9 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000940 	.word	0x20000940
 8002584:	40014000 	.word	0x40014000

08002588 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800258c:	4b0f      	ldr	r3, [pc, #60]	@ (80025cc <MX_TIM16_Init+0x44>)
 800258e:	4a10      	ldr	r2, [pc, #64]	@ (80025d0 <MX_TIM16_Init+0x48>)
 8002590:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 14999;
 8002592:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <MX_TIM16_Init+0x44>)
 8002594:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8002598:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259a:	4b0c      	ldr	r3, [pc, #48]	@ (80025cc <MX_TIM16_Init+0x44>)
 800259c:	2200      	movs	r2, #0
 800259e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 9;
 80025a0:	4b0a      	ldr	r3, [pc, #40]	@ (80025cc <MX_TIM16_Init+0x44>)
 80025a2:	2209      	movs	r2, #9
 80025a4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a6:	4b09      	ldr	r3, [pc, #36]	@ (80025cc <MX_TIM16_Init+0x44>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80025ac:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <MX_TIM16_Init+0x44>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b2:	4b06      	ldr	r3, [pc, #24]	@ (80025cc <MX_TIM16_Init+0x44>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80025b8:	4804      	ldr	r0, [pc, #16]	@ (80025cc <MX_TIM16_Init+0x44>)
 80025ba:	f007 fc89 	bl	8009ed0 <HAL_TIM_Base_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80025c4:	f001 faa0 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80025c8:	bf00      	nop
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	2000098c 	.word	0x2000098c
 80025d0:	40014400 	.word	0x40014400

080025d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80025d8:	4b22      	ldr	r3, [pc, #136]	@ (8002664 <MX_UART4_Init+0x90>)
 80025da:	4a23      	ldr	r2, [pc, #140]	@ (8002668 <MX_UART4_Init+0x94>)
 80025dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80025de:	4b21      	ldr	r3, [pc, #132]	@ (8002664 <MX_UART4_Init+0x90>)
 80025e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80025e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002664 <MX_UART4_Init+0x90>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80025ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002664 <MX_UART4_Init+0x90>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80025f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002664 <MX_UART4_Init+0x90>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80025f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002664 <MX_UART4_Init+0x90>)
 80025fa:	220c      	movs	r2, #12
 80025fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025fe:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <MX_UART4_Init+0x90>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002604:	4b17      	ldr	r3, [pc, #92]	@ (8002664 <MX_UART4_Init+0x90>)
 8002606:	2200      	movs	r2, #0
 8002608:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800260a:	4b16      	ldr	r3, [pc, #88]	@ (8002664 <MX_UART4_Init+0x90>)
 800260c:	2200      	movs	r2, #0
 800260e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002610:	4b14      	ldr	r3, [pc, #80]	@ (8002664 <MX_UART4_Init+0x90>)
 8002612:	2200      	movs	r2, #0
 8002614:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002616:	4b13      	ldr	r3, [pc, #76]	@ (8002664 <MX_UART4_Init+0x90>)
 8002618:	2200      	movs	r2, #0
 800261a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800261c:	4811      	ldr	r0, [pc, #68]	@ (8002664 <MX_UART4_Init+0x90>)
 800261e:	f009 f97d 	bl	800b91c <HAL_UART_Init>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002628:	f001 fa6e 	bl	8003b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800262c:	2100      	movs	r1, #0
 800262e:	480d      	ldr	r0, [pc, #52]	@ (8002664 <MX_UART4_Init+0x90>)
 8002630:	f009 ff18 	bl	800c464 <HAL_UARTEx_SetTxFifoThreshold>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800263a:	f001 fa65 	bl	8003b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800263e:	2100      	movs	r1, #0
 8002640:	4808      	ldr	r0, [pc, #32]	@ (8002664 <MX_UART4_Init+0x90>)
 8002642:	f009 ff4d 	bl	800c4e0 <HAL_UARTEx_SetRxFifoThreshold>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800264c:	f001 fa5c 	bl	8003b08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002650:	4804      	ldr	r0, [pc, #16]	@ (8002664 <MX_UART4_Init+0x90>)
 8002652:	f009 fece 	bl	800c3f2 <HAL_UARTEx_DisableFifoMode>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800265c:	f001 fa54 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	200009d8 	.word	0x200009d8
 8002668:	40004c00 	.word	0x40004c00

0800266c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002672:	4b22      	ldr	r3, [pc, #136]	@ (80026fc <MX_DMA_Init+0x90>)
 8002674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002676:	4a21      	ldr	r2, [pc, #132]	@ (80026fc <MX_DMA_Init+0x90>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	6493      	str	r3, [r2, #72]	@ 0x48
 800267e:	4b1f      	ldr	r3, [pc, #124]	@ (80026fc <MX_DMA_Init+0x90>)
 8002680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	607b      	str	r3, [r7, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800268a:	4b1c      	ldr	r3, [pc, #112]	@ (80026fc <MX_DMA_Init+0x90>)
 800268c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800268e:	4a1b      	ldr	r2, [pc, #108]	@ (80026fc <MX_DMA_Init+0x90>)
 8002690:	f043 0301 	orr.w	r3, r3, #1
 8002694:	6493      	str	r3, [r2, #72]	@ 0x48
 8002696:	4b19      	ldr	r3, [pc, #100]	@ (80026fc <MX_DMA_Init+0x90>)
 8002698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	603b      	str	r3, [r7, #0]
 80026a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	200b      	movs	r0, #11
 80026a8:	f003 ff5b 	bl	8006562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80026ac:	200b      	movs	r0, #11
 80026ae:	f003 ff72 	bl	8006596 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80026b2:	2200      	movs	r2, #0
 80026b4:	2100      	movs	r1, #0
 80026b6:	200c      	movs	r0, #12
 80026b8:	f003 ff53 	bl	8006562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80026bc:	200c      	movs	r0, #12
 80026be:	f003 ff6a 	bl	8006596 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	200d      	movs	r0, #13
 80026c8:	f003 ff4b 	bl	8006562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80026cc:	200d      	movs	r0, #13
 80026ce:	f003 ff62 	bl	8006596 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2100      	movs	r1, #0
 80026d6:	200e      	movs	r0, #14
 80026d8:	f003 ff43 	bl	8006562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80026dc:	200e      	movs	r0, #14
 80026de:	f003 ff5a 	bl	8006596 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80026e2:	2200      	movs	r2, #0
 80026e4:	2100      	movs	r1, #0
 80026e6:	200f      	movs	r0, #15
 80026e8:	f003 ff3b 	bl	8006562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80026ec:	200f      	movs	r0, #15
 80026ee:	f003 ff52 	bl	8006596 <HAL_NVIC_EnableIRQ>

}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000

08002700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b08c      	sub	sp, #48	@ 0x30
 8002704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002706:	f107 031c 	add.w	r3, r7, #28
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	605a      	str	r2, [r3, #4]
 8002710:	609a      	str	r2, [r3, #8]
 8002712:	60da      	str	r2, [r3, #12]
 8002714:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002716:	4b9a      	ldr	r3, [pc, #616]	@ (8002980 <MX_GPIO_Init+0x280>)
 8002718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800271a:	4a99      	ldr	r2, [pc, #612]	@ (8002980 <MX_GPIO_Init+0x280>)
 800271c:	f043 0310 	orr.w	r3, r3, #16
 8002720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002722:	4b97      	ldr	r3, [pc, #604]	@ (8002980 <MX_GPIO_Init+0x280>)
 8002724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	61bb      	str	r3, [r7, #24]
 800272c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800272e:	4b94      	ldr	r3, [pc, #592]	@ (8002980 <MX_GPIO_Init+0x280>)
 8002730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002732:	4a93      	ldr	r2, [pc, #588]	@ (8002980 <MX_GPIO_Init+0x280>)
 8002734:	f043 0304 	orr.w	r3, r3, #4
 8002738:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800273a:	4b91      	ldr	r3, [pc, #580]	@ (8002980 <MX_GPIO_Init+0x280>)
 800273c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800273e:	f003 0304 	and.w	r3, r3, #4
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002746:	4b8e      	ldr	r3, [pc, #568]	@ (8002980 <MX_GPIO_Init+0x280>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274a:	4a8d      	ldr	r2, [pc, #564]	@ (8002980 <MX_GPIO_Init+0x280>)
 800274c:	f043 0320 	orr.w	r3, r3, #32
 8002750:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002752:	4b8b      	ldr	r3, [pc, #556]	@ (8002980 <MX_GPIO_Init+0x280>)
 8002754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	4b88      	ldr	r3, [pc, #544]	@ (8002980 <MX_GPIO_Init+0x280>)
 8002760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002762:	4a87      	ldr	r2, [pc, #540]	@ (8002980 <MX_GPIO_Init+0x280>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800276a:	4b85      	ldr	r3, [pc, #532]	@ (8002980 <MX_GPIO_Init+0x280>)
 800276c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002776:	4b82      	ldr	r3, [pc, #520]	@ (8002980 <MX_GPIO_Init+0x280>)
 8002778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277a:	4a81      	ldr	r2, [pc, #516]	@ (8002980 <MX_GPIO_Init+0x280>)
 800277c:	f043 0302 	orr.w	r3, r3, #2
 8002780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002782:	4b7f      	ldr	r3, [pc, #508]	@ (8002980 <MX_GPIO_Init+0x280>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	60bb      	str	r3, [r7, #8]
 800278c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800278e:	4b7c      	ldr	r3, [pc, #496]	@ (8002980 <MX_GPIO_Init+0x280>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002792:	4a7b      	ldr	r2, [pc, #492]	@ (8002980 <MX_GPIO_Init+0x280>)
 8002794:	f043 0308 	orr.w	r3, r3, #8
 8002798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800279a:	4b79      	ldr	r3, [pc, #484]	@ (8002980 <MX_GPIO_Init+0x280>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	607b      	str	r3, [r7, #4]
 80027a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 80027a6:	2200      	movs	r2, #0
 80027a8:	2120      	movs	r1, #32
 80027aa:	4876      	ldr	r0, [pc, #472]	@ (8002984 <MX_GPIO_Init+0x284>)
 80027ac:	f004 fdf8 	bl	80073a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin, GPIO_PIN_SET);
 80027b0:	2201      	movs	r2, #1
 80027b2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80027b6:	4874      	ldr	r0, [pc, #464]	@ (8002988 <MX_GPIO_Init+0x288>)
 80027b8:	f004 fdf2 	bl	80073a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUTPUT_COTROL_Pin|START_STOP_FPGA_Pin, GPIO_PIN_RESET);
 80027bc:	2200      	movs	r2, #0
 80027be:	2128      	movs	r1, #40	@ 0x28
 80027c0:	4872      	ldr	r0, [pc, #456]	@ (800298c <MX_GPIO_Init+0x28c>)
 80027c2:	f004 fded 	bl	80073a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_FPGA_GPIO_Port, RESET_FPGA_Pin, GPIO_PIN_RESET);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2104      	movs	r1, #4
 80027ca:	486f      	ldr	r0, [pc, #444]	@ (8002988 <MX_GPIO_Init+0x288>)
 80027cc:	f004 fde8 	bl	80073a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, NOT_RST_2_Pin|CS_OCD_1_Pin, GPIO_PIN_SET);
 80027d0:	2201      	movs	r2, #1
 80027d2:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80027d6:	486b      	ldr	r0, [pc, #428]	@ (8002984 <MX_GPIO_Init+0x284>)
 80027d8:	f004 fde2 	bl	80073a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_4_GPIO_Port, NOT_RST_4_Pin, GPIO_PIN_SET);
 80027dc:	2201      	movs	r2, #1
 80027de:	2140      	movs	r1, #64	@ 0x40
 80027e0:	486a      	ldr	r0, [pc, #424]	@ (800298c <MX_GPIO_Init+0x28c>)
 80027e2:	f004 fddd 	bl	80073a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_3_GPIO_Port, NOT_RST_3_Pin, GPIO_PIN_SET);
 80027e6:	2201      	movs	r2, #1
 80027e8:	2101      	movs	r1, #1
 80027ea:	4869      	ldr	r0, [pc, #420]	@ (8002990 <MX_GPIO_Init+0x290>)
 80027ec:	f004 fdd8 	bl	80073a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NOT_RST_1_GPIO_Port, NOT_RST_1_Pin, GPIO_PIN_SET);
 80027f0:	2201      	movs	r2, #1
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	4867      	ldr	r0, [pc, #412]	@ (8002994 <MX_GPIO_Init+0x294>)
 80027f6:	f004 fdd3 	bl	80073a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NOT_FAULT_1_Pin CS_FAULT_2_Pin NOT_FAULT_2_Pin CS_FAULT_1_Pin */
  GPIO_InitStruct.Pin = NOT_FAULT_1_Pin|CS_FAULT_2_Pin|NOT_FAULT_2_Pin|CS_FAULT_1_Pin;
 80027fa:	f640 0315 	movw	r3, #2069	@ 0x815
 80027fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002800:	2300      	movs	r3, #0
 8002802:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002808:	f107 031c 	add.w	r3, r7, #28
 800280c:	4619      	mov	r1, r3
 800280e:	485d      	ldr	r0, [pc, #372]	@ (8002984 <MX_GPIO_Init+0x284>)
 8002810:	f004 fc2c 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_INTERLOCK_Pin */
  GPIO_InitStruct.Pin = RESET_INTERLOCK_Pin;
 8002814:	2320      	movs	r3, #32
 8002816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002818:	2301      	movs	r3, #1
 800281a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002820:	2300      	movs	r3, #0
 8002822:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_INTERLOCK_GPIO_Port, &GPIO_InitStruct);
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4619      	mov	r1, r3
 800282a:	4856      	ldr	r0, [pc, #344]	@ (8002984 <MX_GPIO_Init+0x284>)
 800282c:	f004 fc1e 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_OCD_2_Pin */
  GPIO_InitStruct.Pin = CS_OCD_2_Pin;
 8002830:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002836:	2311      	movs	r3, #17
 8002838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283a:	2300      	movs	r3, #0
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283e:	2300      	movs	r3, #0
 8002840:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_OCD_2_GPIO_Port, &GPIO_InitStruct);
 8002842:	f107 031c 	add.w	r3, r7, #28
 8002846:	4619      	mov	r1, r3
 8002848:	484f      	ldr	r0, [pc, #316]	@ (8002988 <MX_GPIO_Init+0x288>)
 800284a:	f004 fc0f 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_3_Pin */
  GPIO_InitStruct.Pin = READY_3_Pin;
 800284e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_3_GPIO_Port, &GPIO_InitStruct);
 800285c:	f107 031c 	add.w	r3, r7, #28
 8002860:	4619      	mov	r1, r3
 8002862:	4849      	ldr	r0, [pc, #292]	@ (8002988 <MX_GPIO_Init+0x288>)
 8002864:	f004 fc02 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERLOCK_Pin NOT_FAULT_4_Pin */
  GPIO_InitStruct.Pin = INTERLOCK_Pin|NOT_FAULT_4_Pin;
 8002868:	f44f 7301 	mov.w	r3, #516	@ 0x204
 800286c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800286e:	2300      	movs	r3, #0
 8002870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002876:	f107 031c 	add.w	r3, r7, #28
 800287a:	4619      	mov	r1, r3
 800287c:	4843      	ldr	r0, [pc, #268]	@ (800298c <MX_GPIO_Init+0x28c>)
 800287e:	f004 fbf5 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUTPUT_COTROL_Pin START_STOP_FPGA_Pin */
  GPIO_InitStruct.Pin = OUTPUT_COTROL_Pin|START_STOP_FPGA_Pin;
 8002882:	2328      	movs	r3, #40	@ 0x28
 8002884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002886:	2301      	movs	r3, #1
 8002888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002892:	f107 031c 	add.w	r3, r7, #28
 8002896:	4619      	mov	r1, r3
 8002898:	483c      	ldr	r0, [pc, #240]	@ (800298c <MX_GPIO_Init+0x28c>)
 800289a:	f004 fbe7 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_FPGA_Pin */
  GPIO_InitStruct.Pin = RESET_FPGA_Pin;
 800289e:	2304      	movs	r3, #4
 80028a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a2:	2301      	movs	r3, #1
 80028a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028aa:	2300      	movs	r3, #0
 80028ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(RESET_FPGA_GPIO_Port, &GPIO_InitStruct);
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	4619      	mov	r1, r3
 80028b4:	4834      	ldr	r0, [pc, #208]	@ (8002988 <MX_GPIO_Init+0x288>)
 80028b6:	f004 fbd9 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_2_Pin */
  GPIO_InitStruct.Pin = READY_2_Pin;
 80028ba:	2301      	movs	r3, #1
 80028bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_2_GPIO_Port, &GPIO_InitStruct);
 80028c6:	f107 031c 	add.w	r3, r7, #28
 80028ca:	4619      	mov	r1, r3
 80028cc:	4831      	ldr	r0, [pc, #196]	@ (8002994 <MX_GPIO_Init+0x294>)
 80028ce:	f004 fbcd 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pins : NOT_RST_2_Pin CS_OCD_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_2_Pin|CS_OCD_1_Pin;
 80028d2:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80028d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028d8:	2311      	movs	r3, #17
 80028da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e0:	2300      	movs	r3, #0
 80028e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028e4:	f107 031c 	add.w	r3, r7, #28
 80028e8:	4619      	mov	r1, r3
 80028ea:	4826      	ldr	r0, [pc, #152]	@ (8002984 <MX_GPIO_Init+0x284>)
 80028ec:	f004 fbbe 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_4_Pin */
  GPIO_InitStruct.Pin = NOT_RST_4_Pin;
 80028f0:	2340      	movs	r3, #64	@ 0x40
 80028f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80028f4:	2311      	movs	r3, #17
 80028f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fc:	2300      	movs	r3, #0
 80028fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_4_GPIO_Port, &GPIO_InitStruct);
 8002900:	f107 031c 	add.w	r3, r7, #28
 8002904:	4619      	mov	r1, r3
 8002906:	4821      	ldr	r0, [pc, #132]	@ (800298c <MX_GPIO_Init+0x28c>)
 8002908:	f004 fbb0 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pin : READY_4_Pin */
  GPIO_InitStruct.Pin = READY_4_Pin;
 800290c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002912:	2300      	movs	r3, #0
 8002914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002916:	2300      	movs	r3, #0
 8002918:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(READY_4_GPIO_Port, &GPIO_InitStruct);
 800291a:	f107 031c 	add.w	r3, r7, #28
 800291e:	4619      	mov	r1, r3
 8002920:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002924:	f004 fba2 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_3_Pin */
  GPIO_InitStruct.Pin = NOT_RST_3_Pin;
 8002928:	2301      	movs	r3, #1
 800292a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800292c:	2311      	movs	r3, #17
 800292e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	2300      	movs	r3, #0
 8002936:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_3_GPIO_Port, &GPIO_InitStruct);
 8002938:	f107 031c 	add.w	r3, r7, #28
 800293c:	4619      	mov	r1, r3
 800293e:	4814      	ldr	r0, [pc, #80]	@ (8002990 <MX_GPIO_Init+0x290>)
 8002940:	f004 fb94 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_1_Pin PD5 NOT_FAULT_3_Pin */
  GPIO_InitStruct.Pin = READY_1_Pin|GPIO_PIN_5|NOT_FAULT_3_Pin;
 8002944:	2370      	movs	r3, #112	@ 0x70
 8002946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002948:	2300      	movs	r3, #0
 800294a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294c:	2300      	movs	r3, #0
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002950:	f107 031c 	add.w	r3, r7, #28
 8002954:	4619      	mov	r1, r3
 8002956:	480e      	ldr	r0, [pc, #56]	@ (8002990 <MX_GPIO_Init+0x290>)
 8002958:	f004 fb88 	bl	800706c <HAL_GPIO_Init>

  /*Configure GPIO pin : NOT_RST_1_Pin */
  GPIO_InitStruct.Pin = NOT_RST_1_Pin;
 800295c:	2380      	movs	r3, #128	@ 0x80
 800295e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002960:	2311      	movs	r3, #17
 8002962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002968:	2300      	movs	r3, #0
 800296a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NOT_RST_1_GPIO_Port, &GPIO_InitStruct);
 800296c:	f107 031c 	add.w	r3, r7, #28
 8002970:	4619      	mov	r1, r3
 8002972:	4808      	ldr	r0, [pc, #32]	@ (8002994 <MX_GPIO_Init+0x294>)
 8002974:	f004 fb7a 	bl	800706c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002978:	bf00      	nop
 800297a:	3730      	adds	r7, #48	@ 0x30
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40021000 	.word	0x40021000
 8002984:	48001000 	.word	0x48001000
 8002988:	48001400 	.word	0x48001400
 800298c:	48000800 	.word	0x48000800
 8002990:	48000c00 	.word	0x48000c00
 8002994:	48000400 	.word	0x48000400

08002998 <handle_event>:

/* USER CODE BEGIN 4 */

ConverterState handle_event(ConverterState currentState, ConverterEvent event) {
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	460a      	mov	r2, r1
 80029a2:	71fb      	strb	r3, [r7, #7]
 80029a4:	4613      	mov	r3, r2
 80029a6:	71bb      	strb	r3, [r7, #6]
    switch (currentState) {
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d839      	bhi.n	8002a22 <handle_event+0x8a>
 80029ae:	a201      	add	r2, pc, #4	@ (adr r2, 80029b4 <handle_event+0x1c>)
 80029b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b4:	080029c9 	.word	0x080029c9
 80029b8:	080029d7 	.word	0x080029d7
 80029bc:	080029e5 	.word	0x080029e5
 80029c0:	08002a01 	.word	0x08002a01
 80029c4:	08002a0f 	.word	0x08002a0f
        case STATE_INIT:
            if (event == EVENT_START)
 80029c8:	79bb      	ldrb	r3, [r7, #6]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d12b      	bne.n	8002a26 <handle_event+0x8e>
            {

            	currentState = STATE_STANDBY;
 80029ce:	2301      	movs	r3, #1
 80029d0:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e031      	b.n	8002a3a <handle_event+0xa2>
            }
            break;

        case STATE_STANDBY:
            if (event == EVENT_START)
 80029d6:	79bb      	ldrb	r3, [r7, #6]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d126      	bne.n	8002a2a <handle_event+0x92>
            {
            	currentState = STATE_REGULATION;
 80029dc:	2302      	movs	r3, #2
 80029de:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 80029e0:	2302      	movs	r3, #2
 80029e2:	e02a      	b.n	8002a3a <handle_event+0xa2>
            }
            break;

        case STATE_REGULATION:
        	//USB_SendString("State: INIT -> RUNNING\r\n");
            if (event == EVENT_FAULT)
 80029e4:	79bb      	ldrb	r3, [r7, #6]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d103      	bne.n	80029f2 <handle_event+0x5a>
            {
            	currentState = STATE_FAULT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	71fb      	strb	r3, [r7, #7]
                return STATE_FAULT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e023      	b.n	8002a3a <handle_event+0xa2>

            } else if (event == EVENT_SHUTDOWN)
 80029f2:	79bb      	ldrb	r3, [r7, #6]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d11a      	bne.n	8002a2e <handle_event+0x96>
            {
            	currentState = STATE_SHUTDOWN;
 80029f8:	2304      	movs	r3, #4
 80029fa:	71fb      	strb	r3, [r7, #7]
                return STATE_SHUTDOWN;
 80029fc:	2304      	movs	r3, #4
 80029fe:	e01c      	b.n	8002a3a <handle_event+0xa2>
            }

            break;

        case STATE_FAULT:
            if (event == EVENT_CLEAR_FAULT)
 8002a00:	79bb      	ldrb	r3, [r7, #6]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d115      	bne.n	8002a32 <handle_event+0x9a>
            {
            	currentState = STATE_STANDBY;
 8002a06:	2301      	movs	r3, #1
 8002a08:	71fb      	strb	r3, [r7, #7]
                return STATE_STANDBY;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e015      	b.n	8002a3a <handle_event+0xa2>
            }
            break;

        case STATE_SHUTDOWN:
            if (event == EVENT_START)
 8002a0e:	79bb      	ldrb	r3, [r7, #6]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d110      	bne.n	8002a36 <handle_event+0x9e>
            {
            	once = 0;
 8002a14:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <handle_event+0xb0>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
            	currentState = STATE_REGULATION;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	71fb      	strb	r3, [r7, #7]
                return STATE_REGULATION;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e00b      	b.n	8002a3a <handle_event+0xa2>
            }
            break;
        default:
            break;
 8002a22:	bf00      	nop
 8002a24:	e008      	b.n	8002a38 <handle_event+0xa0>
            break;
 8002a26:	bf00      	nop
 8002a28:	e006      	b.n	8002a38 <handle_event+0xa0>
            break;
 8002a2a:	bf00      	nop
 8002a2c:	e004      	b.n	8002a38 <handle_event+0xa0>
            break;
 8002a2e:	bf00      	nop
 8002a30:	e002      	b.n	8002a38 <handle_event+0xa0>
            break;
 8002a32:	bf00      	nop
 8002a34:	e000      	b.n	8002a38 <handle_event+0xa0>
            break;
 8002a36:	bf00      	nop
    }
    return currentState; // No state change
 8002a38:	79fb      	ldrb	r3, [r7, #7]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000b94 	.word	0x20000b94

08002a4c <Set_PWM_DutyCycle>:
       // float TEMPERATURE_AFTER_CONVERSION_FROM_ADC = (((adc_value/4096.0f)*3.3f) - 0.4f)/0.0195f;
       // return TEMPERATURE_AFTER_CONVERSION_FROM_ADC;

}

void Set_PWM_DutyCycle(uint32_t dutyCycle) { // dutycyle for FAN SPEED CONTROl
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
    if (dutyCycle > 100) dutyCycle = 100;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b64      	cmp	r3, #100	@ 0x64
 8002a58:	d901      	bls.n	8002a5e <Set_PWM_DutyCycle+0x12>
 8002a5a:	2364      	movs	r3, #100	@ 0x64
 8002a5c:	607b      	str	r3, [r7, #4]
    uint32_t pulse = (htim4.Init.Period + 1) * dutyCycle / 100 - 1;
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <Set_PWM_DutyCycle+0x40>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	3301      	adds	r3, #1
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	4a09      	ldr	r2, [pc, #36]	@ (8002a90 <Set_PWM_DutyCycle+0x44>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	3b01      	subs	r3, #1
 8002a74:	60fb      	str	r3, [r7, #12]
        __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 8002a76:	4b05      	ldr	r3, [pc, #20]	@ (8002a8c <Set_PWM_DutyCycle+0x40>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000810 	.word	0x20000810
 8002a90:	51eb851f 	.word	0x51eb851f
 8002a94:	00000000 	.word	0x00000000

08002a98 <HAL_ADC_ConvCpltCallback>:
//ADC save to array and moving average
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC5)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2c      	ldr	r2, [pc, #176]	@ (8002b58 <HAL_ADC_ConvCpltCallback+0xc0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d14e      	bne.n	8002b48 <HAL_ADC_ConvCpltCallback+0xb0>
		    {
				if(flag_control){
 8002aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8002b5c <HAL_ADC_ConvCpltCallback+0xc4>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d04a      	beq.n	8002b48 <HAL_ADC_ConvCpltCallback+0xb0>
		        uint32_t sum = 0;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	e00b      	b.n	8002ad4 <HAL_ADC_ConvCpltCallback+0x3c>
		        {
		            sum += adc5_dma_buffer[i];
 8002abc:	4a28      	ldr	r2, [pc, #160]	@ (8002b60 <HAL_ADC_ConvCpltCallback+0xc8>)
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4413      	add	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
		        for (int i = 0; i < MA_WINDOW_SIZE; i++)
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b09      	cmp	r3, #9
 8002ad8:	ddf0      	ble.n	8002abc <HAL_ADC_ConvCpltCallback+0x24>
		        }
		        adc_moving_average = ((sum / MA_WINDOW_SIZE)*3300)/4096;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4a21      	ldr	r2, [pc, #132]	@ (8002b64 <HAL_ADC_ConvCpltCallback+0xcc>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	08db      	lsrs	r3, r3, #3
 8002ae4:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8002ae8:	fb02 f303 	mul.w	r3, r2, r3
 8002aec:	0b1b      	lsrs	r3, r3, #12
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b68 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002af2:	801a      	strh	r2, [r3, #0]
		        imax2_sum=(adc_moving_average-1450)*0.384;
 8002af4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b68 <HAL_ADC_ConvCpltCallback+0xd0>)
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	f2a3 53aa 	subw	r3, r3, #1450	@ 0x5aa
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fd fd39 	bl	8000574 <__aeabi_i2d>
 8002b02:	a313      	add	r3, pc, #76	@ (adr r3, 8002b50 <HAL_ADC_ConvCpltCallback+0xb8>)
 8002b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b08:	f7fd fd9e 	bl	8000648 <__aeabi_dmul>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	f7fe f848 	bl	8000ba8 <__aeabi_d2iz>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	b21a      	sxth	r2, r3
 8002b1c:	4b13      	ldr	r3, [pc, #76]	@ (8002b6c <HAL_ADC_ConvCpltCallback+0xd4>)
 8002b1e:	801a      	strh	r2, [r3, #0]
		        if(imax2_sum<-1000) imax2_sum = -1000;
 8002b20:	4b12      	ldr	r3, [pc, #72]	@ (8002b6c <HAL_ADC_ConvCpltCallback+0xd4>)
 8002b22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b26:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8002b2a:	da03      	bge.n	8002b34 <HAL_ADC_ConvCpltCallback+0x9c>
 8002b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b6c <HAL_ADC_ConvCpltCallback+0xd4>)
 8002b2e:	f64f 4218 	movw	r2, #64536	@ 0xfc18
 8002b32:	801a      	strh	r2, [r3, #0]
		        if(imax2_sum>1000) imax2_sum = 1000;
 8002b34:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <HAL_ADC_ConvCpltCallback+0xd4>)
 8002b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b3e:	dd03      	ble.n	8002b48 <HAL_ADC_ConvCpltCallback+0xb0>
 8002b40:	4b0a      	ldr	r3, [pc, #40]	@ (8002b6c <HAL_ADC_ConvCpltCallback+0xd4>)
 8002b42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b46:	801a      	strh	r2, [r3, #0]
		        // Restart the DMA transfer
		       // HAL_ADC_Start_DMA(hadc, (uint32_t*)adc5_dma_buffer, MA_WINDOW_SIZE);
		    }


}
 8002b48:	bf00      	nop
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	bc6a7efa 	.word	0xbc6a7efa
 8002b54:	3fd89374 	.word	0x3fd89374
 8002b58:	50000600 	.word	0x50000600
 8002b5c:	20000b99 	.word	0x20000b99
 8002b60:	20000aa4 	.word	0x20000aa4
 8002b64:	cccccccd 	.word	0xcccccccd
 8002b68:	20000ab8 	.word	0x20000ab8
 8002b6c:	20000aa0 	.word	0x20000aa0

08002b70 <Update_PWM_Frequency>:
        }
    }
}

void Update_PWM_Frequency(TIM_HandleTypeDef *htim, uint32_t channel, uint32_t frequency)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	@ 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
	 uint32_t timer_clock = 150000000;  // Assuming a 150 MHz timer clock
 8002b7c:	4b33      	ldr	r3, [pc, #204]	@ (8002c4c <Update_PWM_Frequency+0xdc>)
 8002b7e:	61bb      	str	r3, [r7, #24]
	    uint32_t prescaler = htim->Init.Prescaler + 1;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	3301      	adds	r3, #1
 8002b86:	617b      	str	r3, [r7, #20]
	    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	69ba      	ldr	r2, [r7, #24]
 8002b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b96:	3b01      	subs	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]

	    // Ensure period is within valid range
	    if (period > 65535) {
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ba0:	d314      	bcc.n	8002bcc <Update_PWM_Frequency+0x5c>
	        // Adjust prescaler to bring period within range
	        prescaler = (prescaler * (period / 65536)) + 1;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	fb02 f303 	mul.w	r3, r2, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	617b      	str	r3, [r7, #20]
	        period = (timer_clock / (prescaler * frequency)) - 1;
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	fb02 f303 	mul.w	r3, r2, r3
 8002bb8:	69ba      	ldr	r2, [r7, #24]
 8002bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	61fb      	str	r3, [r7, #28]
	        __HAL_TIM_SET_PRESCALER(htim, prescaler - 1);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	3a01      	subs	r2, #1
 8002bca:	629a      	str	r2, [r3, #40]	@ 0x28
	    }

	    // Update the period register (ARR) with double buffering
	    __HAL_TIM_SET_AUTORELOAD(htim, period);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	60da      	str	r2, [r3, #12]

	    // Set the duty cycle to approximately 50%
	    uint32_t pulse = period / 2;
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	085b      	lsrs	r3, r3, #1
 8002bde:	613b      	str	r3, [r7, #16]
	    __HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d104      	bne.n	8002bf0 <Update_PWM_Frequency+0x80>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bee:	e023      	b.n	8002c38 <Update_PWM_Frequency+0xc8>
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d104      	bne.n	8002c00 <Update_PWM_Frequency+0x90>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	6393      	str	r3, [r2, #56]	@ 0x38
 8002bfe:	e01b      	b.n	8002c38 <Update_PWM_Frequency+0xc8>
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d104      	bne.n	8002c10 <Update_PWM_Frequency+0xa0>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002c0e:	e013      	b.n	8002c38 <Update_PWM_Frequency+0xc8>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b0c      	cmp	r3, #12
 8002c14:	d104      	bne.n	8002c20 <Update_PWM_Frequency+0xb0>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c1e:	e00b      	b.n	8002c38 <Update_PWM_Frequency+0xc8>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	2b10      	cmp	r3, #16
 8002c24:	d104      	bne.n	8002c30 <Update_PWM_Frequency+0xc0>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	6493      	str	r3, [r2, #72]	@ 0x48
 8002c2e:	e003      	b.n	8002c38 <Update_PWM_Frequency+0xc8>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	64d3      	str	r3, [r2, #76]	@ 0x4c

	    // Manually generate an update event by setting the UG bit in the EGR register
	    htim->Instance->EGR = TIM_EGR_UG;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	615a      	str	r2, [r3, #20]
    __HAL_TIM_SET_AUTORELOAD(htim, period);

    // Restart the timer PWM generation
    HAL_TIM_PWM_Stop(htim, channel);
    HAL_TIM_PWM_Start(htim, channel);*/
}
 8002c40:	bf00      	nop
 8002c42:	3724      	adds	r7, #36	@ 0x24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	08f0d180 	.word	0x08f0d180

08002c50 <Check_Faults>:
	        dac_buffer[i] = (((1/3.3)*res12_b) + ((0.5/3.3)*res12_b) * sin(2 * M_PI * i/BUFFER_SIZE));
	    }
}

uint8_t Check_Faults()
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
	// Faults pins are from gate driver and they are active pull down
	// 4 fault pins from 4 gate driver + 2 fault pins from  2 currents sensors  = 6 pins
	if(HAL_GPIO_ReadPin(CS_FAULT_1_GPIO_Port, CS_FAULT_1_Pin) && HAL_GPIO_ReadPin(CS_FAULT_2_GPIO_Port, CS_FAULT_2_Pin)
 8002c54:	2101      	movs	r1, #1
 8002c56:	4818      	ldr	r0, [pc, #96]	@ (8002cb8 <Check_Faults+0x68>)
 8002c58:	f004 fb8a 	bl	8007370 <HAL_GPIO_ReadPin>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d026      	beq.n	8002cb0 <Check_Faults+0x60>
 8002c62:	2110      	movs	r1, #16
 8002c64:	4814      	ldr	r0, [pc, #80]	@ (8002cb8 <Check_Faults+0x68>)
 8002c66:	f004 fb83 	bl	8007370 <HAL_GPIO_ReadPin>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01f      	beq.n	8002cb0 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_1_GPIO_Port, NOT_FAULT_1_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_2_GPIO_Port, NOT_FAULT_2_Pin)
 8002c70:	2104      	movs	r1, #4
 8002c72:	4811      	ldr	r0, [pc, #68]	@ (8002cb8 <Check_Faults+0x68>)
 8002c74:	f004 fb7c 	bl	8007370 <HAL_GPIO_ReadPin>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d018      	beq.n	8002cb0 <Check_Faults+0x60>
 8002c7e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002c82:	480d      	ldr	r0, [pc, #52]	@ (8002cb8 <Check_Faults+0x68>)
 8002c84:	f004 fb74 	bl	8007370 <HAL_GPIO_ReadPin>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d010      	beq.n	8002cb0 <Check_Faults+0x60>
			&& HAL_GPIO_ReadPin(NOT_FAULT_3_GPIO_Port, NOT_FAULT_3_Pin) && HAL_GPIO_ReadPin(NOT_FAULT_4_GPIO_Port, NOT_FAULT_4_Pin) )
 8002c8e:	2140      	movs	r1, #64	@ 0x40
 8002c90:	480a      	ldr	r0, [pc, #40]	@ (8002cbc <Check_Faults+0x6c>)
 8002c92:	f004 fb6d 	bl	8007370 <HAL_GPIO_ReadPin>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d009      	beq.n	8002cb0 <Check_Faults+0x60>
 8002c9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002ca0:	4807      	ldr	r0, [pc, #28]	@ (8002cc0 <Check_Faults+0x70>)
 8002ca2:	f004 fb65 	bl	8007370 <HAL_GPIO_ReadPin>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <Check_Faults+0x60>
		return 0; // if all pins is 1 then all is ready, there is not faults then return 0
 8002cac:	2300      	movs	r3, #0
 8002cae:	e000      	b.n	8002cb2 <Check_Faults+0x62>

	return 1;
 8002cb0:	2301      	movs	r3, #1
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	48001000 	.word	0x48001000
 8002cbc:	48000c00 	.word	0x48000c00
 8002cc0:	48000800 	.word	0x48000800

08002cc4 <Check_Ready>:

uint8_t Check_Ready()
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
	// Ready pins are from gate driver and they are active pull up
	// 4 ready pins from 4 gate drivers
	if(HAL_GPIO_ReadPin(READY_1_GPIO_Port, READY_1_Pin) && HAL_GPIO_ReadPin(READY_2_GPIO_Port, READY_2_Pin)
 8002cc8:	2110      	movs	r1, #16
 8002cca:	4811      	ldr	r0, [pc, #68]	@ (8002d10 <Check_Ready+0x4c>)
 8002ccc:	f004 fb50 	bl	8007370 <HAL_GPIO_ReadPin>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d019      	beq.n	8002d0a <Check_Ready+0x46>
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	480e      	ldr	r0, [pc, #56]	@ (8002d14 <Check_Ready+0x50>)
 8002cda:	f004 fb49 	bl	8007370 <HAL_GPIO_ReadPin>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d012      	beq.n	8002d0a <Check_Ready+0x46>
			&& HAL_GPIO_ReadPin(READY_3_GPIO_Port, READY_3_Pin) && HAL_GPIO_ReadPin(READY_4_GPIO_Port, READY_4_Pin) )
 8002ce4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002ce8:	480b      	ldr	r0, [pc, #44]	@ (8002d18 <Check_Ready+0x54>)
 8002cea:	f004 fb41 	bl	8007370 <HAL_GPIO_ReadPin>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00a      	beq.n	8002d0a <Check_Ready+0x46>
 8002cf4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002cf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002cfc:	f004 fb38 	bl	8007370 <HAL_GPIO_ReadPin>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <Check_Ready+0x46>
			return 1; // return 1 when is gate drivers ready
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <Check_Ready+0x48>

		return 0;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	48000c00 	.word	0x48000c00
 8002d14:	48000400 	.word	0x48000400
 8002d18:	48001400 	.word	0x48001400
 8002d1c:	00000000 	.word	0x00000000

08002d20 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8002d20:	b5b0      	push	{r4, r5, r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
	// SOFT start_program RAMP REALISATION
	//  Ts 20khz
	if(htim->Instance == TIM15)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a7a      	ldr	r2, [pc, #488]	@ (8002f18 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	f040 80c2 	bne.w	8002eb8 <HAL_TIM_PeriodElapsedCallback+0x198>
	{
		//sythick1 =  HAL_GetTick();
		if(currentState == STATE_REGULATION )
 8002d34:	4b79      	ldr	r3, [pc, #484]	@ (8002f1c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	f040 80b6 	bne.w	8002eaa <HAL_TIM_PeriodElapsedCallback+0x18a>
		{
		//current_sensor1_vref = adc3_dma_buffer[0]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[0], pcb_temp)/4096)*3.3;
		//current_sensor2_vref = adc3_dma_buffer[1]*3300/4096;//(Low_pass_filter(adc3_dma_buffer[1], pcb_temp)/4096)*3.3;

		input_voltage = (int)((((adc3_dma_buffer[2])*0.8056)-200)*18.81);//[mV]		((Low_pass_filter(adc3_dma_buffer[2], input_voltage)/4096)*3.3-0.2)*27.1;
 8002d3e:	4b78      	ldr	r3, [pc, #480]	@ (8002f20 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8002d40:	889b      	ldrh	r3, [r3, #4]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fd fc15 	bl	8000574 <__aeabi_i2d>
 8002d4a:	a36d      	add	r3, pc, #436	@ (adr r3, 8002f00 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d50:	f7fd fc7a 	bl	8000648 <__aeabi_dmul>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4610      	mov	r0, r2
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	4b70      	ldr	r3, [pc, #448]	@ (8002f24 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002d62:	f7fd fab9 	bl	80002d8 <__aeabi_dsub>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	a366      	add	r3, pc, #408	@ (adr r3, 8002f08 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	f7fd fc68 	bl	8000648 <__aeabi_dmul>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f7fd ff12 	bl	8000ba8 <__aeabi_d2iz>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b67      	ldr	r3, [pc, #412]	@ (8002f28 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8002d8a:	601a      	str	r2, [r3, #0]
		output_voltage = (int)((((adc4_dma_buffer[1])*0.8056)-200)*18.81);//[mV] 		((Low_pass_filter(adc4_dma_buffer, output_voltage)/4096)*3.3-0.2)*27.1;
 8002d8c:	4b67      	ldr	r3, [pc, #412]	@ (8002f2c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8002d8e:	885b      	ldrh	r3, [r3, #2]
 8002d90:	b29b      	uxth	r3, r3
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd fbee 	bl	8000574 <__aeabi_i2d>
 8002d98:	a359      	add	r3, pc, #356	@ (adr r3, 8002f00 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9e:	f7fd fc53 	bl	8000648 <__aeabi_dmul>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	4b5d      	ldr	r3, [pc, #372]	@ (8002f24 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8002db0:	f7fd fa92 	bl	80002d8 <__aeabi_dsub>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	a352      	add	r3, pc, #328	@ (adr r3, 8002f08 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	f7fd fc41 	bl	8000648 <__aeabi_dmul>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4610      	mov	r0, r2
 8002dcc:	4619      	mov	r1, r3
 8002dce:	f7fd feeb 	bl	8000ba8 <__aeabi_d2iz>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	4a56      	ldr	r2, [pc, #344]	@ (8002f30 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8002dd6:	6013      	str	r3, [r2, #0]
		if(once == 0) Update_PWM_Frequency(&htim8, TIM_CHANNEL_2, 7100000); // Set TIM8 CH1 o freq that is delay hc and send to fpga
		}

		imax2 = imax1 + imax2_sum; // imax2_sum signal from FPGA
		// imax1,2 each for branches to make 180 degree shift*/
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref+((int32_t)imax1*0.025)); // imax1  1.5V is 0A;  1A is 20mV; 1 bit is 0.8mV; imax[mA]*0.02 [V/A]/0.8[mV] = Value for DAC
 8002dd8:	4b56      	ldr	r3, [pc, #344]	@ (8002f34 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd fbc9 	bl	8000574 <__aeabi_i2d>
 8002de2:	4604      	mov	r4, r0
 8002de4:	460d      	mov	r5, r1
 8002de6:	4b54      	ldr	r3, [pc, #336]	@ (8002f38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7fd fbc2 	bl	8000574 <__aeabi_i2d>
 8002df0:	a347      	add	r3, pc, #284	@ (adr r3, 8002f10 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df6:	f7fd fc27 	bl	8000648 <__aeabi_dmul>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4620      	mov	r0, r4
 8002e00:	4629      	mov	r1, r5
 8002e02:	f7fd fa6b 	bl	80002dc <__adddf3>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	f7fd fef3 	bl	8000bf8 <__aeabi_d2uiz>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2200      	movs	r2, #0
 8002e16:	2100      	movs	r1, #0
 8002e18:	4848      	ldr	r0, [pc, #288]	@ (8002f3c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002e1a:	f003 fcbb 	bl	8006794 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, current_sensor2_vref+((int32_t)imax1*0.025)); // imax2
 8002e1e:	4b48      	ldr	r3, [pc, #288]	@ (8002f40 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002e20:	881b      	ldrh	r3, [r3, #0]
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fd fba6 	bl	8000574 <__aeabi_i2d>
 8002e28:	4604      	mov	r4, r0
 8002e2a:	460d      	mov	r5, r1
 8002e2c:	4b42      	ldr	r3, [pc, #264]	@ (8002f38 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fb9f 	bl	8000574 <__aeabi_i2d>
 8002e36:	a336      	add	r3, pc, #216	@ (adr r3, 8002f10 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8002e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3c:	f7fd fc04 	bl	8000648 <__aeabi_dmul>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4620      	mov	r0, r4
 8002e46:	4629      	mov	r1, r5
 8002e48:	f7fd fa48 	bl	80002dc <__adddf3>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4610      	mov	r0, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	f7fd fed0 	bl	8000bf8 <__aeabi_d2uiz>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2110      	movs	r1, #16
 8002e5e:	4837      	ldr	r0, [pc, #220]	@ (8002f3c <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002e60:	f003 fc98 	bl	8006794 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac2, DAC_CHANNEL_1, DAC_ALIGN_12B_R, current_sensor1_vref-((int32_t)imin*0.25)); // imin uzyto tutaj wzmacniacza 10x dla sygnalu z sensora pradu wiec ma wzmocnienie 200mv/A a nie 20mv/a
 8002e64:	4b33      	ldr	r3, [pc, #204]	@ (8002f34 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002e66:	881b      	ldrh	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7fd fb83 	bl	8000574 <__aeabi_i2d>
 8002e6e:	4604      	mov	r4, r0
 8002e70:	460d      	mov	r5, r1
 8002e72:	4b34      	ldr	r3, [pc, #208]	@ (8002f44 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd fb7c 	bl	8000574 <__aeabi_i2d>
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	4b31      	ldr	r3, [pc, #196]	@ (8002f48 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8002e82:	f7fd fbe1 	bl	8000648 <__aeabi_dmul>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	f7fd fa23 	bl	80002d8 <__aeabi_dsub>
 8002e92:	4602      	mov	r2, r0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4610      	mov	r0, r2
 8002e98:	4619      	mov	r1, r3
 8002e9a:	f7fd fead 	bl	8000bf8 <__aeabi_d2uiz>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	4829      	ldr	r0, [pc, #164]	@ (8002f4c <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002ea6:	f003 fc75 	bl	8006794 <HAL_DAC_SetValue>
		//if(once == 0){
		//	HAL_Delay(10);
		//HAL_GPIO_WritePin(START_STOP_FPGA_GPIO_Port, START_STOP_FPGA_Pin, 1); // START FPGA DANCE
		//once = 1;
		//}
		HAL_GPIO_TogglePin(OUTPUT_COTROL_GPIO_Port, OUTPUT_COTROL_Pin);
 8002eaa:	2108      	movs	r1, #8
 8002eac:	4828      	ldr	r0, [pc, #160]	@ (8002f50 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002eae:	f004 fa8f 	bl	80073d0 <HAL_GPIO_TogglePin>
		//sythick2 =  HAL_GetTick() - sythick1;
		flag_control = 1;
 8002eb2:	4b28      	ldr	r3, [pc, #160]	@ (8002f54 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM6) // 5 sec period
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a26      	ldr	r2, [pc, #152]	@ (8002f58 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_TIM_PeriodElapsedCallback+0x1a6>
		    {
		//if(currentState == STATE_SOFT_START || currentState == STATE_REGULATION )
				//{
				FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
 8002ec2:	f000 f95d 	bl	8003180 <FAN_Drive>
				//}
		    }


	if (htim->Instance == TIM7)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a24      	ldr	r2, [pc, #144]	@ (8002f5c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d110      	bne.n	8002ef2 <HAL_TIM_PeriodElapsedCallback+0x1d2>
	    {
	        // Turn off OCD pins of currents sensors to reset current sensor 1us

	        HAL_GPIO_TogglePin(CS_OCD_1_GPIO_Port, CS_OCD_1_Pin);
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	4823      	ldr	r0, [pc, #140]	@ (8002f60 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002ed4:	f004 fa7c 	bl	80073d0 <HAL_GPIO_TogglePin>
	        HAL_GPIO_TogglePin(CS_OCD_2_GPIO_Port, CS_OCD_2_Pin);
 8002ed8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002edc:	4821      	ldr	r0, [pc, #132]	@ (8002f64 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8002ede:	f004 fa77 	bl	80073d0 <HAL_GPIO_TogglePin>
	        HAL_GPIO_WritePin(RESET_INTERLOCK_GPIO_Port, RESET_INTERLOCK_Pin, GPIO_PIN_RESET);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2120      	movs	r1, #32
 8002ee6:	481e      	ldr	r0, [pc, #120]	@ (8002f60 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8002ee8:	f004 fa5a 	bl	80073a0 <HAL_GPIO_WritePin>
	        // Stop the timer
	        HAL_TIM_Base_Stop_IT(&htim7);
 8002eec:	481e      	ldr	r0, [pc, #120]	@ (8002f68 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8002eee:	f007 f92f 	bl	800a150 <HAL_TIM_Base_Stop_IT>
	    }


}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bdb0      	pop	{r4, r5, r7, pc}
 8002efa:	bf00      	nop
 8002efc:	f3af 8000 	nop.w
 8002f00:	a6b50b0f 	.word	0xa6b50b0f
 8002f04:	3fe9c779 	.word	0x3fe9c779
 8002f08:	28f5c28f 	.word	0x28f5c28f
 8002f0c:	4032cf5c 	.word	0x4032cf5c
 8002f10:	9999999a 	.word	0x9999999a
 8002f14:	3f999999 	.word	0x3f999999
 8002f18:	40014000 	.word	0x40014000
 8002f1c:	20000b8f 	.word	0x20000b8f
 8002f20:	20000a88 	.word	0x20000a88
 8002f24:	40690000 	.word	0x40690000
 8002f28:	20000a7c 	.word	0x20000a7c
 8002f2c:	20000a94 	.word	0x20000a94
 8002f30:	20000004 	.word	0x20000004
 8002f34:	20000a6c 	.word	0x20000a6c
 8002f38:	20000a70 	.word	0x20000a70
 8002f3c:	200006dc 	.word	0x200006dc
 8002f40:	20000a6e 	.word	0x20000a6e
 8002f44:	20000a78 	.word	0x20000a78
 8002f48:	3fd00000 	.word	0x3fd00000
 8002f4c:	200006f0 	.word	0x200006f0
 8002f50:	48000800 	.word	0x48000800
 8002f54:	20000b99 	.word	0x20000b99
 8002f58:	40001000 	.word	0x40001000
 8002f5c:	40001400 	.word	0x40001400
 8002f60:	48001000 	.word	0x48001000
 8002f64:	48001400 	.word	0x48001400
 8002f68:	200008a8 	.word	0x200008a8

08002f6c <RAMP>:

int32_t RAMP(int32_t Vout, int32_t Vref, int32_t Ramp_ratio, float period_loop)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	ed87 0a00 	vstr	s0, [r7]
	// RAMP Voltage to soft-start
				if(((int32_t)Vref - (int32_t)Vout) > 10)
 8002f7c:	68ba      	ldr	r2, [r7, #8]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b0a      	cmp	r3, #10
 8002f84:	dd15      	ble.n	8002fb2 <RAMP+0x46>
				{

					Vout = (int32_t)(Vout + Ramp_ratio * period_loop); // 20khz loop - preferred 0.1V/Ts voltage ramp   that mean ramp ratio = 2000
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	ee07 3a90 	vmov	s15, r3
 8002f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	ee07 3a90 	vmov	s15, r3
 8002f96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002f9a:	edd7 7a00 	vldr	s15, [r7]
 8002f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002faa:	ee17 3a90 	vmov	r3, s15
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	e01a      	b.n	8002fe8 <RAMP+0x7c>
					//RAMP_FINISHED = 0;
				}
				else if(((int32_t)Vref - (int32_t)Vout) < -10) // 100 = 100mV
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	f113 0f0a 	cmn.w	r3, #10
 8002fbc:	da14      	bge.n	8002fe8 <RAMP+0x7c>
				{
					Vout = (int32_t)(Vout - Ramp_ratio * period_loop);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	ee07 3a90 	vmov	s15, r3
 8002fc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002fd2:	edd7 7a00 	vldr	s15, [r7]
 8002fd6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fe2:	ee17 3a90 	vmov	r3, s15
 8002fe6:	60fb      	str	r3, [r7, #12]
				}
				if(Vout >= Vref-50)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	3b32      	subs	r3, #50	@ 0x32
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	db04      	blt.n	8002ffc <RAMP+0x90>
				{
					Vout = Vref; // 48V
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	60fb      	str	r3, [r7, #12]
					RAMP_FINISHED = 1;
 8002ff6:	4b05      	ldr	r3, [pc, #20]	@ (800300c <RAMP+0xa0>)
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	701a      	strb	r2, [r3, #0]
					//currentState = STATE_REGULATION;
				}

				return Vout;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	20000a98 	.word	0x20000a98

08003010 <regulatorPI>:

void regulatorPI(int32_t *out, int32_t *integral, int32_t in, int32_t in_zad, int32_t limp, int32_t limn, float kp, float ti, float Ts1)
{
 8003010:	b480      	push	{r7}
 8003012:	b089      	sub	sp, #36	@ 0x24
 8003014:	af00      	add	r7, sp, #0
 8003016:	61f8      	str	r0, [r7, #28]
 8003018:	61b9      	str	r1, [r7, #24]
 800301a:	617a      	str	r2, [r7, #20]
 800301c:	613b      	str	r3, [r7, #16]
 800301e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003022:	edc7 0a02 	vstr	s1, [r7, #8]
 8003026:	ed87 1a01 	vstr	s2, [r7, #4]
	// Tustin transfrom of PI regulator s -> 2/T * (Z-1)/(Z+1)


    delta = in_zad - in; // error
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	4a32      	ldr	r2, [pc, #200]	@ (80030fc <regulatorPI+0xec>)
 8003032:	6013      	str	r3, [r2, #0]
    *integral = (*integral + (int32_t)((delta + prev_delta) * ((kp / ti) * Ts1 * 0.5f))) ; // I part
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a30      	ldr	r2, [pc, #192]	@ (80030fc <regulatorPI+0xec>)
 800303a:	6811      	ldr	r1, [r2, #0]
 800303c:	4a30      	ldr	r2, [pc, #192]	@ (8003100 <regulatorPI+0xf0>)
 800303e:	6812      	ldr	r2, [r2, #0]
 8003040:	440a      	add	r2, r1
 8003042:	ee07 2a90 	vmov	s15, r2
 8003046:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800304a:	ed97 6a03 	vldr	s12, [r7, #12]
 800304e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003052:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8003056:	edd7 7a01 	vldr	s15, [r7, #4]
 800305a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800305e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003062:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800306a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800306e:	ee17 2a90 	vmov	r2, s15
 8003072:	441a      	add	r2, r3
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	601a      	str	r2, [r3, #0]
    prev_delta = delta;
 8003078:	4b20      	ldr	r3, [pc, #128]	@ (80030fc <regulatorPI+0xec>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a20      	ldr	r2, [pc, #128]	@ (8003100 <regulatorPI+0xf0>)
 800307e:	6013      	str	r3, [r2, #0]
    if (*integral >= limp) // limit peak positive
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003086:	429a      	cmp	r2, r3
 8003088:	dc02      	bgt.n	8003090 <regulatorPI+0x80>
    {
        *integral = limp;
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800308e:	601a      	str	r2, [r3, #0]
    }
    if (*integral <= limn)// limit peak negative
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003096:	429a      	cmp	r2, r3
 8003098:	db02      	blt.n	80030a0 <regulatorPI+0x90>
    {
        *integral = limn;
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800309e:	601a      	str	r2, [r3, #0]
    }
    *out = (int32_t)(delta*kp + *integral); // Sum of P and I
 80030a0:	4b16      	ldr	r3, [pc, #88]	@ (80030fc <regulatorPI+0xec>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	ee07 3a90 	vmov	s15, r3
 80030a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80030b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	ee07 3a90 	vmov	s15, r3
 80030bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030c8:	ee17 2a90 	vmov	r2, s15
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	601a      	str	r2, [r3, #0]
    if (*out >= limp) // limit peak positive
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030d6:	429a      	cmp	r2, r3
 80030d8:	dc02      	bgt.n	80030e0 <regulatorPI+0xd0>
    {
        *out = limp;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030de:	601a      	str	r2, [r3, #0]
    }
    if (*out <= limn)// limit peak negative
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030e6:	429a      	cmp	r2, r3
 80030e8:	db02      	blt.n	80030f0 <regulatorPI+0xe0>
    {
        *out = limn;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030ee:	601a      	str	r2, [r3, #0]
   // prev_out = *out;
   // if(abs((*out - prev_out)) <= 50) // histeresis to probably prevent jitter must be checked
  //  {
   // 	*out = prev_out;
   // }
}
 80030f0:	bf00      	nop
 80030f2:	3724      	adds	r7, #36	@ 0x24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	20000a9c 	.word	0x20000a9c
 8003100:	20000b88 	.word	0x20000b88
 8003104:	00000000 	.word	0x00000000

08003108 <Low_pass_filter>:

	    return y[0];
}*/

float Low_pass_filter(float new_sample, float old_sample, float old_sample_n1, float old_passed)
{
 8003108:	b5b0      	push	{r4, r5, r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003112:	edc7 0a02 	vstr	s1, [r7, #8]
 8003116:	ed87 1a01 	vstr	s2, [r7, #4]
 800311a:	edc7 1a00 	vstr	s3, [r7]

	//Low_passed_sample = (float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;
	//(1-ALPHA)*0.5*(new_sample+old_sample_n1+ALPHA*old_passed);//(float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;
	return ((1-ALPHA) * old_sample + ALPHA * new_sample) ;//(float)ALPHA * new_sample + (1.0 - ALPHA) * old_sample;
 800311e:	68b8      	ldr	r0, [r7, #8]
 8003120:	f7fd fa3a 	bl	8000598 <__aeabi_f2d>
 8003124:	a312      	add	r3, pc, #72	@ (adr r3, 8003170 <Low_pass_filter+0x68>)
 8003126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800312a:	f7fd fa8d 	bl	8000648 <__aeabi_dmul>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4614      	mov	r4, r2
 8003134:	461d      	mov	r5, r3
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f7fd fa2e 	bl	8000598 <__aeabi_f2d>
 800313c:	a30e      	add	r3, pc, #56	@ (adr r3, 8003178 <Low_pass_filter+0x70>)
 800313e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003142:	f7fd fa81 	bl	8000648 <__aeabi_dmul>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4620      	mov	r0, r4
 800314c:	4629      	mov	r1, r5
 800314e:	f7fd f8c5 	bl	80002dc <__adddf3>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	f7fd fd6d 	bl	8000c38 <__aeabi_d2f>
 800315e:	4603      	mov	r3, r0
 8003160:	ee07 3a90 	vmov	s15, r3

}
 8003164:	eeb0 0a67 	vmov.f32	s0, s15
 8003168:	3710      	adds	r7, #16
 800316a:	46bd      	mov	sp, r7
 800316c:	bdb0      	pop	{r4, r5, r7, pc}
 800316e:	bf00      	nop
 8003170:	cccccccd 	.word	0xcccccccd
 8003174:	3feccccc 	.word	0x3feccccc
 8003178:	9999999a 	.word	0x9999999a
 800317c:	3fb99999 	.word	0x3fb99999

08003180 <FAN_Drive>:
void FAN_Drive()
{ //@ToDo poprawic ogarnac zeby a intach bylo
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
		pcb_temp = (adc3_dma_buffer[3]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[3], pcb_temp)/4096)*3.3;
 8003186:	4b44      	ldr	r3, [pc, #272]	@ (8003298 <FAN_Drive+0x118>)
 8003188:	88db      	ldrh	r3, [r3, #6]
 800318a:	b29b      	uxth	r3, r3
 800318c:	461a      	mov	r2, r3
 800318e:	f640 43e4 	movw	r3, #3300	@ 0xce4
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	da01      	bge.n	800319e <FAN_Drive+0x1e>
 800319a:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800319e:	131b      	asrs	r3, r3, #12
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b3e      	ldr	r3, [pc, #248]	@ (800329c <FAN_Drive+0x11c>)
 80031a4:	601a      	str	r2, [r3, #0]
		heat_sink_temp = (adc3_dma_buffer[4]*3300)/4096;//(Low_pass_filter(adc3_dma_buffer[4], heat_sink_temp)/4096)*3.3;
 80031a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003298 <FAN_Drive+0x118>)
 80031a8:	891b      	ldrh	r3, [r3, #8]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80031b2:	fb02 f303 	mul.w	r3, r2, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	da01      	bge.n	80031be <FAN_Drive+0x3e>
 80031ba:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80031be:	131b      	asrs	r3, r3, #12
 80031c0:	461a      	mov	r2, r3
 80031c2:	4b37      	ldr	r3, [pc, #220]	@ (80032a0 <FAN_Drive+0x120>)
 80031c4:	601a      	str	r2, [r3, #0]

		uint32_t temperature = 20;
 80031c6:	2314      	movs	r3, #20
 80031c8:	603b      	str	r3, [r7, #0]

		pcb_temp = (pcb_temp-400)/20;
 80031ca:	4b34      	ldr	r3, [pc, #208]	@ (800329c <FAN_Drive+0x11c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80031d2:	4a34      	ldr	r2, [pc, #208]	@ (80032a4 <FAN_Drive+0x124>)
 80031d4:	fba2 2303 	umull	r2, r3, r2, r3
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	4a30      	ldr	r2, [pc, #192]	@ (800329c <FAN_Drive+0x11c>)
 80031dc:	6013      	str	r3, [r2, #0]
		heat_sink_temp = (heat_sink_temp-500)/10;
 80031de:	4b30      	ldr	r3, [pc, #192]	@ (80032a0 <FAN_Drive+0x120>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80031e6:	4a2f      	ldr	r2, [pc, #188]	@ (80032a4 <FAN_Drive+0x124>)
 80031e8:	fba2 2303 	umull	r2, r3, r2, r3
 80031ec:	08db      	lsrs	r3, r3, #3
 80031ee:	4a2c      	ldr	r2, [pc, #176]	@ (80032a0 <FAN_Drive+0x120>)
 80031f0:	6013      	str	r3, [r2, #0]
		// Choose the higher of the two temperatures
		temperature = (pcb_temp > heat_sink_temp) ? pcb_temp : heat_sink_temp;
 80031f2:	4b2b      	ldr	r3, [pc, #172]	@ (80032a0 <FAN_Drive+0x120>)
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	4b29      	ldr	r3, [pc, #164]	@ (800329c <FAN_Drive+0x11c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4293      	cmp	r3, r2
 80031fc:	bf38      	it	cc
 80031fe:	4613      	movcc	r3, r2
 8003200:	603b      	str	r3, [r7, #0]
		// Apply a non-linear (exponential) scaling for the fan speed
		// This scales the temperature to a value between 0 and 1, then applies an exponential curve
		uint32_t normalized_temp = ((temperature - 20) *100)/ 80;  // Normalizing between 0 (20°C) and 1000 (100°C)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	2264      	movs	r2, #100	@ 0x64
 8003206:	fb02 f303 	mul.w	r3, r2, r3
 800320a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800320e:	4a25      	ldr	r2, [pc, #148]	@ (80032a4 <FAN_Drive+0x124>)
 8003210:	fba2 2303 	umull	r2, r3, r2, r3
 8003214:	099b      	lsrs	r3, r3, #6
 8003216:	607b      	str	r3, [r7, #4]
		if (normalized_temp > 100) normalized_temp = 100;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b64      	cmp	r3, #100	@ 0x64
 800321c:	d901      	bls.n	8003222 <FAN_Drive+0xa2>
 800321e:	2364      	movs	r3, #100	@ 0x64
 8003220:	607b      	str	r3, [r7, #4]
		if (normalized_temp < 0) normalized_temp = 0;

		duty_cycle = 20 + ((int)(pow(normalized_temp, 3) * 79))/1000000;  // Cubic curve for fan speed control
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fd f996 	bl	8000554 <__aeabi_ui2d>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8003288 <FAN_Drive+0x108>
 8003230:	ec43 2b10 	vmov	d0, r2, r3
 8003234:	f012 fe54 	bl	8015ee0 <pow>
 8003238:	ec51 0b10 	vmov	r0, r1, d0
 800323c:	a314      	add	r3, pc, #80	@ (adr r3, 8003290 <FAN_Drive+0x110>)
 800323e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003242:	f7fd fa01 	bl	8000648 <__aeabi_dmul>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	f7fd fcab 	bl	8000ba8 <__aeabi_d2iz>
 8003252:	4603      	mov	r3, r0
 8003254:	4a14      	ldr	r2, [pc, #80]	@ (80032a8 <FAN_Drive+0x128>)
 8003256:	fb82 1203 	smull	r1, r2, r2, r3
 800325a:	1492      	asrs	r2, r2, #18
 800325c:	17db      	asrs	r3, r3, #31
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	3314      	adds	r3, #20
 8003262:	4a12      	ldr	r2, [pc, #72]	@ (80032ac <FAN_Drive+0x12c>)
 8003264:	6013      	str	r3, [r2, #0]

		// Enforce minimum and maximum duty cycles
		if (temperature < 20) {
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b13      	cmp	r3, #19
 800326a:	d803      	bhi.n	8003274 <FAN_Drive+0xf4>
		        duty_cycle = 20;
 800326c:	4b0f      	ldr	r3, [pc, #60]	@ (80032ac <FAN_Drive+0x12c>)
 800326e:	2214      	movs	r2, #20
 8003270:	601a      	str	r2, [r3, #0]
		    	duty_cycle = 99;
		}

		//Set_PWM_DutyCycle(duty_cycle);

}
 8003272:	e005      	b.n	8003280 <FAN_Drive+0x100>
		} else if (temperature > 100) {
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b64      	cmp	r3, #100	@ 0x64
 8003278:	d902      	bls.n	8003280 <FAN_Drive+0x100>
		    	duty_cycle = 99;
 800327a:	4b0c      	ldr	r3, [pc, #48]	@ (80032ac <FAN_Drive+0x12c>)
 800327c:	2263      	movs	r2, #99	@ 0x63
 800327e:	601a      	str	r2, [r3, #0]
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	00000000 	.word	0x00000000
 800328c:	40080000 	.word	0x40080000
 8003290:	00000000 	.word	0x00000000
 8003294:	4053c000 	.word	0x4053c000
 8003298:	20000a88 	.word	0x20000a88
 800329c:	20000a80 	.word	0x20000a80
 80032a0:	20000a84 	.word	0x20000a84
 80032a4:	cccccccd 	.word	0xcccccccd
 80032a8:	431bde83 	.word	0x431bde83
 80032ac:	2000003c 	.word	0x2000003c

080032b0 <SendUSBMessage>:



void SendUSBMessage(const char* message) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
    uint16_t len = strlen(message);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f7fd f801 	bl	80002c0 <strlen>
 80032be:	4603      	mov	r3, r0
 80032c0:	81fb      	strh	r3, [r7, #14]
    if (len > 127) len = 127;  // Limit to buffer size
 80032c2:	89fb      	ldrh	r3, [r7, #14]
 80032c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80032c6:	d901      	bls.n	80032cc <SendUSBMessage+0x1c>
 80032c8:	237f      	movs	r3, #127	@ 0x7f
 80032ca:	81fb      	strh	r3, [r7, #14]
    memcpy(USB_TX_Buffer, message, len);
 80032cc:	89fb      	ldrh	r3, [r7, #14]
 80032ce:	461a      	mov	r2, r3
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	480b      	ldr	r0, [pc, #44]	@ (8003300 <SendUSBMessage+0x50>)
 80032d4:	f00e febd 	bl	8012052 <memcpy>
    USB_TX_Buffer[len] = '\0';  // Ensure null-terminated string
 80032d8:	89fb      	ldrh	r3, [r7, #14]
 80032da:	4a09      	ldr	r2, [pc, #36]	@ (8003300 <SendUSBMessage+0x50>)
 80032dc:	2100      	movs	r1, #0
 80032de:	54d1      	strb	r1, [r2, r3]
            break;
        }
      // HAL_Delay(10);  // Small delay before retrying
    } while (retry_count-- > 0);*/
    do {
            result = CDC_Transmit_FS((uint8_t*)message, len);
 80032e0:	89fb      	ldrh	r3, [r7, #14]
 80032e2:	4619      	mov	r1, r3
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f00d fa19 	bl	801071c <CDC_Transmit_FS>
 80032ea:	4603      	mov	r3, r0
 80032ec:	737b      	strb	r3, [r7, #13]
        } while (result == USBD_BUSY); // Retry while USB is busy
 80032ee:	7b7b      	ldrb	r3, [r7, #13]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d0f5      	beq.n	80032e0 <SendUSBMessage+0x30>


}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000afc 	.word	0x20000afc

08003304 <ParseUSBCommand>:

void ParseUSBCommand(void) {
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
	 if (dataReceivedFlag) {
 8003308:	4ba7      	ldr	r3, [pc, #668]	@ (80035a8 <ParseUSBCommand+0x2a4>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8147 	beq.w	80035a2 <ParseUSBCommand+0x29e>
	        if (strncmp((char*)USB_RX_Buffer, "SET_KP", 6) == 0) {
 8003314:	2206      	movs	r2, #6
 8003316:	49a5      	ldr	r1, [pc, #660]	@ (80035ac <ParseUSBCommand+0x2a8>)
 8003318:	48a5      	ldr	r0, [pc, #660]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 800331a:	f00e fe10 	bl	8011f3e <strncmp>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d108      	bne.n	8003336 <ParseUSBCommand+0x32>
	            sscanf((char*)USB_RX_Buffer, "SET_KP %f", &Kp);
 8003324:	4aa3      	ldr	r2, [pc, #652]	@ (80035b4 <ParseUSBCommand+0x2b0>)
 8003326:	49a4      	ldr	r1, [pc, #656]	@ (80035b8 <ParseUSBCommand+0x2b4>)
 8003328:	48a1      	ldr	r0, [pc, #644]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 800332a:	f00e fd91 	bl	8011e50 <siscanf>
	            SendUSBMessage("KP Updated\n");
 800332e:	48a3      	ldr	r0, [pc, #652]	@ (80035bc <ParseUSBCommand+0x2b8>)
 8003330:	f7ff ffbe 	bl	80032b0 <SendUSBMessage>
 8003334:	e12d      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_Ti", 6) == 0) {
 8003336:	2206      	movs	r2, #6
 8003338:	49a1      	ldr	r1, [pc, #644]	@ (80035c0 <ParseUSBCommand+0x2bc>)
 800333a:	489d      	ldr	r0, [pc, #628]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 800333c:	f00e fdff 	bl	8011f3e <strncmp>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d108      	bne.n	8003358 <ParseUSBCommand+0x54>
	            sscanf((char*)USB_RX_Buffer, "SET_Ti %f", &Ti);
 8003346:	4a9f      	ldr	r2, [pc, #636]	@ (80035c4 <ParseUSBCommand+0x2c0>)
 8003348:	499f      	ldr	r1, [pc, #636]	@ (80035c8 <ParseUSBCommand+0x2c4>)
 800334a:	4899      	ldr	r0, [pc, #612]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 800334c:	f00e fd80 	bl	8011e50 <siscanf>
	            SendUSBMessage("Ti Updated\n");
 8003350:	489e      	ldr	r0, [pc, #632]	@ (80035cc <ParseUSBCommand+0x2c8>)
 8003352:	f7ff ffad 	bl	80032b0 <SendUSBMessage>
 8003356:	e11c      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_VREF", 8) == 0) {
 8003358:	2208      	movs	r2, #8
 800335a:	499d      	ldr	r1, [pc, #628]	@ (80035d0 <ParseUSBCommand+0x2cc>)
 800335c:	4894      	ldr	r0, [pc, #592]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 800335e:	f00e fdee 	bl	8011f3e <strncmp>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d108      	bne.n	800337a <ParseUSBCommand+0x76>
	            sscanf((char*)USB_RX_Buffer, "SET_VREF %hu", &vref);
 8003368:	4a9a      	ldr	r2, [pc, #616]	@ (80035d4 <ParseUSBCommand+0x2d0>)
 800336a:	499b      	ldr	r1, [pc, #620]	@ (80035d8 <ParseUSBCommand+0x2d4>)
 800336c:	4890      	ldr	r0, [pc, #576]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 800336e:	f00e fd6f 	bl	8011e50 <siscanf>
	            SendUSBMessage("vref Updated\n");
 8003372:	489a      	ldr	r0, [pc, #616]	@ (80035dc <ParseUSBCommand+0x2d8>)
 8003374:	f7ff ff9c 	bl	80032b0 <SendUSBMessage>
 8003378:	e10b      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS1_VREF", 12) == 0) {
 800337a:	220c      	movs	r2, #12
 800337c:	4998      	ldr	r1, [pc, #608]	@ (80035e0 <ParseUSBCommand+0x2dc>)
 800337e:	488c      	ldr	r0, [pc, #560]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 8003380:	f00e fddd 	bl	8011f3e <strncmp>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d108      	bne.n	800339c <ParseUSBCommand+0x98>
	            sscanf((char*)USB_RX_Buffer, "SET_CS1_VREF %d", &current_sensor1_vref);
 800338a:	4a96      	ldr	r2, [pc, #600]	@ (80035e4 <ParseUSBCommand+0x2e0>)
 800338c:	4996      	ldr	r1, [pc, #600]	@ (80035e8 <ParseUSBCommand+0x2e4>)
 800338e:	4888      	ldr	r0, [pc, #544]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 8003390:	f00e fd5e 	bl	8011e50 <siscanf>
	            SendUSBMessage("current_sensor1_vref Updated\n");
 8003394:	4895      	ldr	r0, [pc, #596]	@ (80035ec <ParseUSBCommand+0x2e8>)
 8003396:	f7ff ff8b 	bl	80032b0 <SendUSBMessage>
 800339a:	e0fa      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_CS2_VREF", 12) == 0) {
 800339c:	220c      	movs	r2, #12
 800339e:	4994      	ldr	r1, [pc, #592]	@ (80035f0 <ParseUSBCommand+0x2ec>)
 80033a0:	4883      	ldr	r0, [pc, #524]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 80033a2:	f00e fdcc 	bl	8011f3e <strncmp>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d108      	bne.n	80033be <ParseUSBCommand+0xba>
	            sscanf((char*)USB_RX_Buffer, "SET_CS2_VREF %d", &current_sensor2_vref);
 80033ac:	4a91      	ldr	r2, [pc, #580]	@ (80035f4 <ParseUSBCommand+0x2f0>)
 80033ae:	4992      	ldr	r1, [pc, #584]	@ (80035f8 <ParseUSBCommand+0x2f4>)
 80033b0:	487f      	ldr	r0, [pc, #508]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 80033b2:	f00e fd4d 	bl	8011e50 <siscanf>
	            SendUSBMessage("current_sensor2_vref Updated\n");
 80033b6:	4891      	ldr	r0, [pc, #580]	@ (80035fc <ParseUSBCommand+0x2f8>)
 80033b8:	f7ff ff7a 	bl	80032b0 <SendUSBMessage>
 80033bc:	e0e9      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_IMAX2_SUM", 13) == 0) {
 80033be:	220d      	movs	r2, #13
 80033c0:	498f      	ldr	r1, [pc, #572]	@ (8003600 <ParseUSBCommand+0x2fc>)
 80033c2:	487b      	ldr	r0, [pc, #492]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 80033c4:	f00e fdbb 	bl	8011f3e <strncmp>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d108      	bne.n	80033e0 <ParseUSBCommand+0xdc>
	            sscanf((char*)USB_RX_Buffer, "SET_IMAX2_SUM %d", &imax2_sum);
 80033ce:	4a8d      	ldr	r2, [pc, #564]	@ (8003604 <ParseUSBCommand+0x300>)
 80033d0:	498d      	ldr	r1, [pc, #564]	@ (8003608 <ParseUSBCommand+0x304>)
 80033d2:	4877      	ldr	r0, [pc, #476]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 80033d4:	f00e fd3c 	bl	8011e50 <siscanf>
	            SendUSBMessage("imax2_sum Updated\n");
 80033d8:	488c      	ldr	r0, [pc, #560]	@ (800360c <ParseUSBCommand+0x308>)
 80033da:	f7ff ff69 	bl	80032b0 <SendUSBMessage>
 80033de:	e0d8      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_TR", 12) == 0) {
 80033e0:	220c      	movs	r2, #12
 80033e2:	498b      	ldr	r1, [pc, #556]	@ (8003610 <ParseUSBCommand+0x30c>)
 80033e4:	4872      	ldr	r0, [pc, #456]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 80033e6:	f00e fdaa 	bl	8011f3e <strncmp>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d108      	bne.n	8003402 <ParseUSBCommand+0xfe>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_TR %f", &delay_tr);
 80033f0:	4a88      	ldr	r2, [pc, #544]	@ (8003614 <ParseUSBCommand+0x310>)
 80033f2:	4989      	ldr	r1, [pc, #548]	@ (8003618 <ParseUSBCommand+0x314>)
 80033f4:	486e      	ldr	r0, [pc, #440]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 80033f6:	f00e fd2b 	bl	8011e50 <siscanf>
	            SendUSBMessage("delay_tr Updated\n");
 80033fa:	4888      	ldr	r0, [pc, #544]	@ (800361c <ParseUSBCommand+0x318>)
 80033fc:	f7ff ff58 	bl	80032b0 <SendUSBMessage>
 8003400:	e0c7      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "SET_DELAY_HC", 12) == 0) {
 8003402:	220c      	movs	r2, #12
 8003404:	4986      	ldr	r1, [pc, #536]	@ (8003620 <ParseUSBCommand+0x31c>)
 8003406:	486a      	ldr	r0, [pc, #424]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 8003408:	f00e fd99 	bl	8011f3e <strncmp>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d108      	bne.n	8003424 <ParseUSBCommand+0x120>
	            sscanf((char*)USB_RX_Buffer, "SET_DELAY_HC %f", &delay_hc);
 8003412:	4a84      	ldr	r2, [pc, #528]	@ (8003624 <ParseUSBCommand+0x320>)
 8003414:	4984      	ldr	r1, [pc, #528]	@ (8003628 <ParseUSBCommand+0x324>)
 8003416:	4866      	ldr	r0, [pc, #408]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 8003418:	f00e fd1a 	bl	8011e50 <siscanf>
	            SendUSBMessage("delay_hc Updated\n");
 800341c:	4883      	ldr	r0, [pc, #524]	@ (800362c <ParseUSBCommand+0x328>)
 800341e:	f7ff ff47 	bl	80032b0 <SendUSBMessage>
 8003422:	e0b6      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_KP", 6) == 0) {
 8003424:	2206      	movs	r2, #6
 8003426:	4982      	ldr	r1, [pc, #520]	@ (8003630 <ParseUSBCommand+0x32c>)
 8003428:	4861      	ldr	r0, [pc, #388]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 800342a:	f00e fd88 	bl	8011f3e <strncmp>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d10e      	bne.n	8003452 <ParseUSBCommand+0x14e>
	            sprintf((char*)USB_TX_Buffer, "KP = %f\n", Kp);
 8003434:	4b5f      	ldr	r3, [pc, #380]	@ (80035b4 <ParseUSBCommand+0x2b0>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd f8ad 	bl	8000598 <__aeabi_f2d>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	497c      	ldr	r1, [pc, #496]	@ (8003634 <ParseUSBCommand+0x330>)
 8003444:	487c      	ldr	r0, [pc, #496]	@ (8003638 <ParseUSBCommand+0x334>)
 8003446:	f00e fce3 	bl	8011e10 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800344a:	487b      	ldr	r0, [pc, #492]	@ (8003638 <ParseUSBCommand+0x334>)
 800344c:	f7ff ff30 	bl	80032b0 <SendUSBMessage>
 8003450:	e09f      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_Ti", 6) == 0) {
 8003452:	2206      	movs	r2, #6
 8003454:	4979      	ldr	r1, [pc, #484]	@ (800363c <ParseUSBCommand+0x338>)
 8003456:	4856      	ldr	r0, [pc, #344]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 8003458:	f00e fd71 	bl	8011f3e <strncmp>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10e      	bne.n	8003480 <ParseUSBCommand+0x17c>
	            sprintf((char*)USB_TX_Buffer, "Ti = %f\n", Ti);
 8003462:	4b58      	ldr	r3, [pc, #352]	@ (80035c4 <ParseUSBCommand+0x2c0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd f896 	bl	8000598 <__aeabi_f2d>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4973      	ldr	r1, [pc, #460]	@ (8003640 <ParseUSBCommand+0x33c>)
 8003472:	4871      	ldr	r0, [pc, #452]	@ (8003638 <ParseUSBCommand+0x334>)
 8003474:	f00e fccc 	bl	8011e10 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003478:	486f      	ldr	r0, [pc, #444]	@ (8003638 <ParseUSBCommand+0x334>)
 800347a:	f7ff ff19 	bl	80032b0 <SendUSBMessage>
 800347e:	e088      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_VREF", 8) == 0) {
 8003480:	2208      	movs	r2, #8
 8003482:	4970      	ldr	r1, [pc, #448]	@ (8003644 <ParseUSBCommand+0x340>)
 8003484:	484a      	ldr	r0, [pc, #296]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 8003486:	f00e fd5a 	bl	8011f3e <strncmp>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <ParseUSBCommand+0x1a2>
	            sprintf((char*)USB_TX_Buffer, "vref = %hu\n", vref);
 8003490:	4b50      	ldr	r3, [pc, #320]	@ (80035d4 <ParseUSBCommand+0x2d0>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	461a      	mov	r2, r3
 8003496:	496c      	ldr	r1, [pc, #432]	@ (8003648 <ParseUSBCommand+0x344>)
 8003498:	4867      	ldr	r0, [pc, #412]	@ (8003638 <ParseUSBCommand+0x334>)
 800349a:	f00e fcb9 	bl	8011e10 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800349e:	4866      	ldr	r0, [pc, #408]	@ (8003638 <ParseUSBCommand+0x334>)
 80034a0:	f7ff ff06 	bl	80032b0 <SendUSBMessage>
 80034a4:	e075      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS1_VREF", 12) == 0) {
 80034a6:	220c      	movs	r2, #12
 80034a8:	4968      	ldr	r1, [pc, #416]	@ (800364c <ParseUSBCommand+0x348>)
 80034aa:	4841      	ldr	r0, [pc, #260]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 80034ac:	f00e fd47 	bl	8011f3e <strncmp>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10a      	bne.n	80034cc <ParseUSBCommand+0x1c8>
	            sprintf((char*)USB_TX_Buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 80034b6:	4b4b      	ldr	r3, [pc, #300]	@ (80035e4 <ParseUSBCommand+0x2e0>)
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	4964      	ldr	r1, [pc, #400]	@ (8003650 <ParseUSBCommand+0x34c>)
 80034be:	485e      	ldr	r0, [pc, #376]	@ (8003638 <ParseUSBCommand+0x334>)
 80034c0:	f00e fca6 	bl	8011e10 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80034c4:	485c      	ldr	r0, [pc, #368]	@ (8003638 <ParseUSBCommand+0x334>)
 80034c6:	f7ff fef3 	bl	80032b0 <SendUSBMessage>
 80034ca:	e062      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_CS2_VREF", 12) == 0) {
 80034cc:	220c      	movs	r2, #12
 80034ce:	4961      	ldr	r1, [pc, #388]	@ (8003654 <ParseUSBCommand+0x350>)
 80034d0:	4837      	ldr	r0, [pc, #220]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 80034d2:	f00e fd34 	bl	8011f3e <strncmp>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <ParseUSBCommand+0x1ee>
	            sprintf((char*)USB_TX_Buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 80034dc:	4b45      	ldr	r3, [pc, #276]	@ (80035f4 <ParseUSBCommand+0x2f0>)
 80034de:	881b      	ldrh	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	495d      	ldr	r1, [pc, #372]	@ (8003658 <ParseUSBCommand+0x354>)
 80034e4:	4854      	ldr	r0, [pc, #336]	@ (8003638 <ParseUSBCommand+0x334>)
 80034e6:	f00e fc93 	bl	8011e10 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 80034ea:	4853      	ldr	r0, [pc, #332]	@ (8003638 <ParseUSBCommand+0x334>)
 80034ec:	f7ff fee0 	bl	80032b0 <SendUSBMessage>
 80034f0:	e04f      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_IMAX2_SUM", 13) == 0) {
 80034f2:	220d      	movs	r2, #13
 80034f4:	4959      	ldr	r1, [pc, #356]	@ (800365c <ParseUSBCommand+0x358>)
 80034f6:	482e      	ldr	r0, [pc, #184]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 80034f8:	f00e fd21 	bl	8011f3e <strncmp>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10b      	bne.n	800351a <ParseUSBCommand+0x216>
	            sprintf((char*)USB_TX_Buffer, "imax2_sum = %f\n", imax2_sum);
 8003502:	4b40      	ldr	r3, [pc, #256]	@ (8003604 <ParseUSBCommand+0x300>)
 8003504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003508:	461a      	mov	r2, r3
 800350a:	4955      	ldr	r1, [pc, #340]	@ (8003660 <ParseUSBCommand+0x35c>)
 800350c:	484a      	ldr	r0, [pc, #296]	@ (8003638 <ParseUSBCommand+0x334>)
 800350e:	f00e fc7f 	bl	8011e10 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003512:	4849      	ldr	r0, [pc, #292]	@ (8003638 <ParseUSBCommand+0x334>)
 8003514:	f7ff fecc 	bl	80032b0 <SendUSBMessage>
 8003518:	e03b      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_TR", 12) == 0) {
 800351a:	220c      	movs	r2, #12
 800351c:	4951      	ldr	r1, [pc, #324]	@ (8003664 <ParseUSBCommand+0x360>)
 800351e:	4824      	ldr	r0, [pc, #144]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 8003520:	f00e fd0d 	bl	8011f3e <strncmp>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10e      	bne.n	8003548 <ParseUSBCommand+0x244>
	            sprintf((char*)USB_TX_Buffer, "delay_tr = %f\n", delay_tr);
 800352a:	4b3a      	ldr	r3, [pc, #232]	@ (8003614 <ParseUSBCommand+0x310>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7fd f832 	bl	8000598 <__aeabi_f2d>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	494b      	ldr	r1, [pc, #300]	@ (8003668 <ParseUSBCommand+0x364>)
 800353a:	483f      	ldr	r0, [pc, #252]	@ (8003638 <ParseUSBCommand+0x334>)
 800353c:	f00e fc68 	bl	8011e10 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 8003540:	483d      	ldr	r0, [pc, #244]	@ (8003638 <ParseUSBCommand+0x334>)
 8003542:	f7ff feb5 	bl	80032b0 <SendUSBMessage>
 8003546:	e024      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "GET_DELAY_HC", 12) == 0) {
 8003548:	220c      	movs	r2, #12
 800354a:	4948      	ldr	r1, [pc, #288]	@ (800366c <ParseUSBCommand+0x368>)
 800354c:	4818      	ldr	r0, [pc, #96]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 800354e:	f00e fcf6 	bl	8011f3e <strncmp>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10e      	bne.n	8003576 <ParseUSBCommand+0x272>
	            sprintf((char*)USB_TX_Buffer, "delay_hc = %f\n", delay_hc);
 8003558:	4b32      	ldr	r3, [pc, #200]	@ (8003624 <ParseUSBCommand+0x320>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f7fd f81b 	bl	8000598 <__aeabi_f2d>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4942      	ldr	r1, [pc, #264]	@ (8003670 <ParseUSBCommand+0x36c>)
 8003568:	4833      	ldr	r0, [pc, #204]	@ (8003638 <ParseUSBCommand+0x334>)
 800356a:	f00e fc51 	bl	8011e10 <siprintf>
	            SendUSBMessage((char*)USB_TX_Buffer);
 800356e:	4832      	ldr	r0, [pc, #200]	@ (8003638 <ParseUSBCommand+0x334>)
 8003570:	f7ff fe9e 	bl	80032b0 <SendUSBMessage>
 8003574:	e00d      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else if (strncmp((char*)USB_RX_Buffer, "DISPLAY_ALL", 11) == 0) {
 8003576:	220b      	movs	r2, #11
 8003578:	493e      	ldr	r1, [pc, #248]	@ (8003674 <ParseUSBCommand+0x370>)
 800357a:	480d      	ldr	r0, [pc, #52]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 800357c:	f00e fcdf 	bl	8011f3e <strncmp>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d102      	bne.n	800358c <ParseUSBCommand+0x288>
	            DisplayAllVariables();
 8003586:	f000 f9c3 	bl	8003910 <DisplayAllVariables>
 800358a:	e002      	b.n	8003592 <ParseUSBCommand+0x28e>

	        } else {
	            SendUSBMessage("Unknown Command\n");
 800358c:	483a      	ldr	r0, [pc, #232]	@ (8003678 <ParseUSBCommand+0x374>)
 800358e:	f7ff fe8f 	bl	80032b0 <SendUSBMessage>
	        }
	        memset(USB_RX_Buffer, 0, sizeof(USB_RX_Buffer));  // Clear buffer
 8003592:	2240      	movs	r2, #64	@ 0x40
 8003594:	2100      	movs	r1, #0
 8003596:	4806      	ldr	r0, [pc, #24]	@ (80035b0 <ParseUSBCommand+0x2ac>)
 8003598:	f00e fcc9 	bl	8011f2e <memset>
	        dataReceivedFlag = 0;
 800359c:	4b02      	ldr	r3, [pc, #8]	@ (80035a8 <ParseUSBCommand+0x2a4>)
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
	    }
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000b7c 	.word	0x20000b7c
 80035ac:	08016df8 	.word	0x08016df8
 80035b0:	20000abc 	.word	0x20000abc
 80035b4:	2000002c 	.word	0x2000002c
 80035b8:	08016e00 	.word	0x08016e00
 80035bc:	08016e0c 	.word	0x08016e0c
 80035c0:	08016e18 	.word	0x08016e18
 80035c4:	20000030 	.word	0x20000030
 80035c8:	08016e20 	.word	0x08016e20
 80035cc:	08016e2c 	.word	0x08016e2c
 80035d0:	08016e38 	.word	0x08016e38
 80035d4:	20000000 	.word	0x20000000
 80035d8:	08016e44 	.word	0x08016e44
 80035dc:	08016e54 	.word	0x08016e54
 80035e0:	08016e64 	.word	0x08016e64
 80035e4:	20000a6c 	.word	0x20000a6c
 80035e8:	08016e74 	.word	0x08016e74
 80035ec:	08016e84 	.word	0x08016e84
 80035f0:	08016ea4 	.word	0x08016ea4
 80035f4:	20000a6e 	.word	0x20000a6e
 80035f8:	08016eb4 	.word	0x08016eb4
 80035fc:	08016ec4 	.word	0x08016ec4
 8003600:	08016ee4 	.word	0x08016ee4
 8003604:	20000aa0 	.word	0x20000aa0
 8003608:	08016ef4 	.word	0x08016ef4
 800360c:	08016f08 	.word	0x08016f08
 8003610:	08016f1c 	.word	0x08016f1c
 8003614:	20000010 	.word	0x20000010
 8003618:	08016f2c 	.word	0x08016f2c
 800361c:	08016f3c 	.word	0x08016f3c
 8003620:	08016f50 	.word	0x08016f50
 8003624:	20000014 	.word	0x20000014
 8003628:	08016f60 	.word	0x08016f60
 800362c:	08016f70 	.word	0x08016f70
 8003630:	08016f84 	.word	0x08016f84
 8003634:	08016f8c 	.word	0x08016f8c
 8003638:	20000afc 	.word	0x20000afc
 800363c:	08016f98 	.word	0x08016f98
 8003640:	08016fa0 	.word	0x08016fa0
 8003644:	08016fac 	.word	0x08016fac
 8003648:	08016fb8 	.word	0x08016fb8
 800364c:	08016fc4 	.word	0x08016fc4
 8003650:	08016fd4 	.word	0x08016fd4
 8003654:	08016ff0 	.word	0x08016ff0
 8003658:	08017000 	.word	0x08017000
 800365c:	0801701c 	.word	0x0801701c
 8003660:	0801702c 	.word	0x0801702c
 8003664:	0801703c 	.word	0x0801703c
 8003668:	0801704c 	.word	0x0801704c
 800366c:	0801705c 	.word	0x0801705c
 8003670:	0801706c 	.word	0x0801706c
 8003674:	0801707c 	.word	0x0801707c
 8003678:	08017088 	.word	0x08017088

0800367c <float_to_integer>:

// CORDIC
int32_t float_to_integer(float in, int scaling_factor, uint8_t bits){
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	ed87 0a03 	vstr	s0, [r7, #12]
 8003686:	60b8      	str	r0, [r7, #8]
 8003688:	460b      	mov	r3, r1
 800368a:	71fb      	strb	r3, [r7, #7]

	int32_t acc;
	if(bits == 32){
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	2b20      	cmp	r3, #32
 8003690:	d135      	bne.n	80036fe <float_to_integer+0x82>
	if(in <= 1){
 8003692:	edd7 7a03 	vldr	s15, [r7, #12]
 8003696:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800369a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800369e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a2:	d811      	bhi.n	80036c8 <float_to_integer+0x4c>
		 acc = (uint32_t)(in*scaling_factor*2147483648);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	ee07 3a90 	vmov	s15, r3
 80036aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80036b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b6:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8003780 <float_to_integer+0x104>
 80036ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036c2:	ee17 3a90 	vmov	r3, s15
 80036c6:	617b      	str	r3, [r7, #20]
	}

	if(in > 1){
 80036c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80036cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80036d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d8:	dd11      	ble.n	80036fe <float_to_integer+0x82>
		 acc = (uint32_t)((in/scaling_factor)*2147483648);
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	ee07 3a90 	vmov	s15, r3
 80036e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036e4:	edd7 6a03 	vldr	s13, [r7, #12]
 80036e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ec:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8003780 <float_to_integer+0x104>
 80036f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036f8:	ee17 3a90 	vmov	r3, s15
 80036fc:	617b      	str	r3, [r7, #20]
		}
}
	if(bits == 16){
 80036fe:	79fb      	ldrb	r3, [r7, #7]
 8003700:	2b10      	cmp	r3, #16
 8003702:	d135      	bne.n	8003770 <float_to_integer+0xf4>
		if(in <= 1){
 8003704:	edd7 7a03 	vldr	s15, [r7, #12]
 8003708:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800370c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003714:	d811      	bhi.n	800373a <float_to_integer+0xbe>
			 acc = (uint32_t)(in*scaling_factor*32767);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	ee07 3a90 	vmov	s15, r3
 800371c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003720:	edd7 7a03 	vldr	s15, [r7, #12]
 8003724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003728:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003784 <float_to_integer+0x108>
 800372c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003730:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003734:	ee17 3a90 	vmov	r3, s15
 8003738:	617b      	str	r3, [r7, #20]
		}

		if(in > 1){
 800373a:	edd7 7a03 	vldr	s15, [r7, #12]
 800373e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003742:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374a:	dd11      	ble.n	8003770 <float_to_integer+0xf4>
			 acc = (uint32_t)((in/scaling_factor)*32767);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	ee07 3a90 	vmov	s15, r3
 8003752:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003756:	edd7 6a03 	vldr	s13, [r7, #12]
 800375a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800375e:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8003784 <float_to_integer+0x108>
 8003762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800376a:	ee17 3a90 	vmov	r3, s15
 800376e:	617b      	str	r3, [r7, #20]
			}
	}


	return acc;
 8003770:	697b      	ldr	r3, [r7, #20]
}
 8003772:	4618      	mov	r0, r3
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	4f000000 	.word	0x4f000000
 8003784:	46fffe00 	.word	0x46fffe00

08003788 <integer_to_float>:

float integer_to_float(int32_t result_cordic_integer, int squarted_scaling_factor, int8_t mode, uint8_t bits){
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	4611      	mov	r1, r2
 8003794:	461a      	mov	r2, r3
 8003796:	460b      	mov	r3, r1
 8003798:	71fb      	strb	r3, [r7, #7]
 800379a:	4613      	mov	r3, r2
 800379c:	71bb      	strb	r3, [r7, #6]
	float acc;

	if(bits == 32){
 800379e:	79bb      	ldrb	r3, [r7, #6]
 80037a0:	2b20      	cmp	r3, #32
 80037a2:	d12b      	bne.n	80037fc <integer_to_float+0x74>
		// mode = 1 when float_to_integer() in is  <= 1
		if(mode){
 80037a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d011      	beq.n	80037d0 <integer_to_float+0x48>
			acc = (float)((result_cordic_integer/2147483648.0f)/squarted_scaling_factor);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037b6:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8003870 <integer_to_float+0xe8>
 80037ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	ee07 3a90 	vmov	s15, r3
 80037c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037cc:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		// mode = 0 when float_to_integer() in is > 1
		if(!mode){
 80037d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d111      	bne.n	80037fc <integer_to_float+0x74>
			acc = (float)((result_cordic_integer/2147483648.0f)*squarted_scaling_factor);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037e2:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8003870 <integer_to_float+0xe8>
 80037e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	ee07 3a90 	vmov	s15, r3
 80037f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f8:	edc7 7a05 	vstr	s15, [r7, #20]
		}
	}

	if(bits == 16){
 80037fc:	79bb      	ldrb	r3, [r7, #6]
 80037fe:	2b10      	cmp	r3, #16
 8003800:	d12b      	bne.n	800385a <integer_to_float+0xd2>
		// mode = 1 when float_to_integer() in is  <= 1
		if(mode){
 8003802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d011      	beq.n	800382e <integer_to_float+0xa6>
			acc = (float)((result_cordic_integer/32767.0f)/squarted_scaling_factor);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	ee07 3a90 	vmov	s15, r3
 8003810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003814:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8003874 <integer_to_float+0xec>
 8003818:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	ee07 3a90 	vmov	s15, r3
 8003822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800382a:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		// mode = 0 when float_to_integer() in is > 1
		if(!mode){
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d111      	bne.n	800385a <integer_to_float+0xd2>
			acc = (float)((result_cordic_integer/32767.0f)*squarted_scaling_factor);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	ee07 3a90 	vmov	s15, r3
 800383c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003840:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8003874 <integer_to_float+0xec>
 8003844:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	ee07 3a90 	vmov	s15, r3
 800384e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003856:	edc7 7a05 	vstr	s15, [r7, #20]
		}
	}

	return acc;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	ee07 3a90 	vmov	s15, r3

}
 8003860:	eeb0 0a67 	vmov.f32	s0, s15
 8003864:	371c      	adds	r7, #28
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	4f000000 	.word	0x4f000000
 8003874:	46fffe00 	.word	0x46fffe00

08003878 <approx_acos2>:
    // Example coefficients – you would need to adjust these for your range and precision.
    float a0 = 1.5708f;  // ~pi/2
    float a1 = -1.5700f;
    return a0 + a1 * x;
}
static inline float approx_acos2(float x) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Example coefficients – you would need to adjust these for your range and precision.
	if (x < -1.0f) x = -1.0f;
 8003882:	edd7 7a01 	vldr	s15, [r7, #4]
 8003886:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800388a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800388e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003892:	d502      	bpl.n	800389a <approx_acos2+0x22>
 8003894:	4b1a      	ldr	r3, [pc, #104]	@ (8003900 <approx_acos2+0x88>)
 8003896:	607b      	str	r3, [r7, #4]
 8003898:	e00b      	b.n	80038b2 <approx_acos2+0x3a>
	    else if (x > 1.0f) x = 1.0f;
 800389a:	edd7 7a01 	vldr	s15, [r7, #4]
 800389e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038aa:	dd02      	ble.n	80038b2 <approx_acos2+0x3a>
 80038ac:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80038b0:	607b      	str	r3, [r7, #4]
	    float sqrt_val = sqrtf(1.0f - x);
 80038b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80038b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80038ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038be:	eeb0 0a67 	vmov.f32	s0, s15
 80038c2:	f012 fb7d 	bl	8015fc0 <sqrtf>
 80038c6:	ed87 0a03 	vstr	s0, [r7, #12]
	    return sqrt_val * (1.5707963050f + x * (-0.2145988016f + 0.0889789874f * x));
 80038ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80038ce:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8003904 <approx_acos2+0x8c>
 80038d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038d6:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8003908 <approx_acos2+0x90>
 80038da:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80038de:	edd7 7a01 	vldr	s15, [r7, #4]
 80038e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800390c <approx_acos2+0x94>
 80038ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80038ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80038f2:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80038f6:	eeb0 0a67 	vmov.f32	s0, s15
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	bf800000 	.word	0xbf800000
 8003904:	3db63a9e 	.word	0x3db63a9e
 8003908:	3e5bbfca 	.word	0x3e5bbfca
 800390c:	3fc90fda 	.word	0x3fc90fda

08003910 <DisplayAllVariables>:

	    // Return the corresponding LUT entry.
	    return acos_lut[index - 1];
}

void DisplayAllVariables(void) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b0a0      	sub	sp, #128	@ 0x80
 8003914:	af00      	add	r7, sp, #0
    char buffer[128];

    sprintf(buffer, "KP = %f\n", Kp);
 8003916:	4b5e      	ldr	r3, [pc, #376]	@ (8003a90 <DisplayAllVariables+0x180>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f7fc fe3c 	bl	8000598 <__aeabi_f2d>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	4638      	mov	r0, r7
 8003926:	495b      	ldr	r1, [pc, #364]	@ (8003a94 <DisplayAllVariables+0x184>)
 8003928:	f00e fa72 	bl	8011e10 <siprintf>
        SendUSBMessage(buffer);
 800392c:	463b      	mov	r3, r7
 800392e:	4618      	mov	r0, r3
 8003930:	f7ff fcbe 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "Ti = %f\n", Ti);
 8003934:	4b58      	ldr	r3, [pc, #352]	@ (8003a98 <DisplayAllVariables+0x188>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4618      	mov	r0, r3
 800393a:	f7fc fe2d 	bl	8000598 <__aeabi_f2d>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4638      	mov	r0, r7
 8003944:	4955      	ldr	r1, [pc, #340]	@ (8003a9c <DisplayAllVariables+0x18c>)
 8003946:	f00e fa63 	bl	8011e10 <siprintf>
        SendUSBMessage(buffer);
 800394a:	463b      	mov	r3, r7
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff fcaf 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "vref = %hu\n", vref);
 8003952:	4b53      	ldr	r3, [pc, #332]	@ (8003aa0 <DisplayAllVariables+0x190>)
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	463b      	mov	r3, r7
 8003958:	4952      	ldr	r1, [pc, #328]	@ (8003aa4 <DisplayAllVariables+0x194>)
 800395a:	4618      	mov	r0, r3
 800395c:	f00e fa58 	bl	8011e10 <siprintf>
        SendUSBMessage(buffer);
 8003960:	463b      	mov	r3, r7
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff fca4 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "imax1 = %f\n", imax1);
 8003968:	4b4f      	ldr	r3, [pc, #316]	@ (8003aa8 <DisplayAllVariables+0x198>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	463b      	mov	r3, r7
 800396e:	494f      	ldr	r1, [pc, #316]	@ (8003aac <DisplayAllVariables+0x19c>)
 8003970:	4618      	mov	r0, r3
 8003972:	f00e fa4d 	bl	8011e10 <siprintf>
        SendUSBMessage(buffer);
 8003976:	463b      	mov	r3, r7
 8003978:	4618      	mov	r0, r3
 800397a:	f7ff fc99 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "imax2 = %f\n", imax2);
 800397e:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab0 <DisplayAllVariables+0x1a0>)
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	463b      	mov	r3, r7
 8003984:	494b      	ldr	r1, [pc, #300]	@ (8003ab4 <DisplayAllVariables+0x1a4>)
 8003986:	4618      	mov	r0, r3
 8003988:	f00e fa42 	bl	8011e10 <siprintf>
        SendUSBMessage(buffer);
 800398c:	463b      	mov	r3, r7
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff fc8e 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "imin = %f\n", imin);
 8003994:	4b48      	ldr	r3, [pc, #288]	@ (8003ab8 <DisplayAllVariables+0x1a8>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	463b      	mov	r3, r7
 800399a:	4948      	ldr	r1, [pc, #288]	@ (8003abc <DisplayAllVariables+0x1ac>)
 800399c:	4618      	mov	r0, r3
 800399e:	f00e fa37 	bl	8011e10 <siprintf>
        SendUSBMessage(buffer);
 80039a2:	463b      	mov	r3, r7
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7ff fc83 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "input_voltage = %f\n", input_voltage);
 80039aa:	4b45      	ldr	r3, [pc, #276]	@ (8003ac0 <DisplayAllVariables+0x1b0>)
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	463b      	mov	r3, r7
 80039b0:	4944      	ldr	r1, [pc, #272]	@ (8003ac4 <DisplayAllVariables+0x1b4>)
 80039b2:	4618      	mov	r0, r3
 80039b4:	f00e fa2c 	bl	8011e10 <siprintf>
        SendUSBMessage(buffer);
 80039b8:	463b      	mov	r3, r7
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff fc78 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "output_voltage = %f\n", output_voltage);
 80039c0:	4b41      	ldr	r3, [pc, #260]	@ (8003ac8 <DisplayAllVariables+0x1b8>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	463b      	mov	r3, r7
 80039c6:	4941      	ldr	r1, [pc, #260]	@ (8003acc <DisplayAllVariables+0x1bc>)
 80039c8:	4618      	mov	r0, r3
 80039ca:	f00e fa21 	bl	8011e10 <siprintf>
        SendUSBMessage(buffer);
 80039ce:	463b      	mov	r3, r7
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fc6d 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "pcb_temp = %f\n", pcb_temp);
 80039d6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ad0 <DisplayAllVariables+0x1c0>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	463b      	mov	r3, r7
 80039dc:	493d      	ldr	r1, [pc, #244]	@ (8003ad4 <DisplayAllVariables+0x1c4>)
 80039de:	4618      	mov	r0, r3
 80039e0:	f00e fa16 	bl	8011e10 <siprintf>
        SendUSBMessage(buffer);
 80039e4:	463b      	mov	r3, r7
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7ff fc62 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "heat_sink_temp = %f\n", heat_sink_temp);
 80039ec:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad8 <DisplayAllVariables+0x1c8>)
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	463b      	mov	r3, r7
 80039f2:	493a      	ldr	r1, [pc, #232]	@ (8003adc <DisplayAllVariables+0x1cc>)
 80039f4:	4618      	mov	r0, r3
 80039f6:	f00e fa0b 	bl	8011e10 <siprintf>
        SendUSBMessage(buffer);
 80039fa:	463b      	mov	r3, r7
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fc57 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "current_sensor1_vref = %f\n", current_sensor1_vref);
 8003a02:	4b37      	ldr	r3, [pc, #220]	@ (8003ae0 <DisplayAllVariables+0x1d0>)
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	463b      	mov	r3, r7
 8003a0a:	4936      	ldr	r1, [pc, #216]	@ (8003ae4 <DisplayAllVariables+0x1d4>)
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f00e f9ff 	bl	8011e10 <siprintf>
        SendUSBMessage(buffer);
 8003a12:	463b      	mov	r3, r7
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fc4b 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "current_sensor2_vref = %f\n", current_sensor2_vref);
 8003a1a:	4b33      	ldr	r3, [pc, #204]	@ (8003ae8 <DisplayAllVariables+0x1d8>)
 8003a1c:	881b      	ldrh	r3, [r3, #0]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	463b      	mov	r3, r7
 8003a22:	4932      	ldr	r1, [pc, #200]	@ (8003aec <DisplayAllVariables+0x1dc>)
 8003a24:	4618      	mov	r0, r3
 8003a26:	f00e f9f3 	bl	8011e10 <siprintf>
        SendUSBMessage(buffer);
 8003a2a:	463b      	mov	r3, r7
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff fc3f 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "imax2_sum = %f\n", imax2_sum);
 8003a32:	4b2f      	ldr	r3, [pc, #188]	@ (8003af0 <DisplayAllVariables+0x1e0>)
 8003a34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a38:	461a      	mov	r2, r3
 8003a3a:	463b      	mov	r3, r7
 8003a3c:	492d      	ldr	r1, [pc, #180]	@ (8003af4 <DisplayAllVariables+0x1e4>)
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f00e f9e6 	bl	8011e10 <siprintf>
        SendUSBMessage(buffer);
 8003a44:	463b      	mov	r3, r7
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff fc32 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "delay_tr = %f\n", delay_tr);
 8003a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003af8 <DisplayAllVariables+0x1e8>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7fc fda1 	bl	8000598 <__aeabi_f2d>
 8003a56:	4602      	mov	r2, r0
 8003a58:	460b      	mov	r3, r1
 8003a5a:	4638      	mov	r0, r7
 8003a5c:	4927      	ldr	r1, [pc, #156]	@ (8003afc <DisplayAllVariables+0x1ec>)
 8003a5e:	f00e f9d7 	bl	8011e10 <siprintf>
        SendUSBMessage(buffer);
 8003a62:	463b      	mov	r3, r7
 8003a64:	4618      	mov	r0, r3
 8003a66:	f7ff fc23 	bl	80032b0 <SendUSBMessage>

        sprintf(buffer, "delay_hc = %f\n", delay_hc);
 8003a6a:	4b25      	ldr	r3, [pc, #148]	@ (8003b00 <DisplayAllVariables+0x1f0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7fc fd92 	bl	8000598 <__aeabi_f2d>
 8003a74:	4602      	mov	r2, r0
 8003a76:	460b      	mov	r3, r1
 8003a78:	4638      	mov	r0, r7
 8003a7a:	4922      	ldr	r1, [pc, #136]	@ (8003b04 <DisplayAllVariables+0x1f4>)
 8003a7c:	f00e f9c8 	bl	8011e10 <siprintf>
        SendUSBMessage(buffer);
 8003a80:	463b      	mov	r3, r7
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff fc14 	bl	80032b0 <SendUSBMessage>
}
 8003a88:	bf00      	nop
 8003a8a:	3780      	adds	r7, #128	@ 0x80
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	2000002c 	.word	0x2000002c
 8003a94:	08016f8c 	.word	0x08016f8c
 8003a98:	20000030 	.word	0x20000030
 8003a9c:	08016fa0 	.word	0x08016fa0
 8003aa0:	20000000 	.word	0x20000000
 8003aa4:	08016fb8 	.word	0x08016fb8
 8003aa8:	20000a70 	.word	0x20000a70
 8003aac:	0801709c 	.word	0x0801709c
 8003ab0:	20000a74 	.word	0x20000a74
 8003ab4:	080170a8 	.word	0x080170a8
 8003ab8:	20000a78 	.word	0x20000a78
 8003abc:	080170b4 	.word	0x080170b4
 8003ac0:	20000a7c 	.word	0x20000a7c
 8003ac4:	080170c0 	.word	0x080170c0
 8003ac8:	20000004 	.word	0x20000004
 8003acc:	080170d4 	.word	0x080170d4
 8003ad0:	20000a80 	.word	0x20000a80
 8003ad4:	080170ec 	.word	0x080170ec
 8003ad8:	20000a84 	.word	0x20000a84
 8003adc:	080170fc 	.word	0x080170fc
 8003ae0:	20000a6c 	.word	0x20000a6c
 8003ae4:	08016fd4 	.word	0x08016fd4
 8003ae8:	20000a6e 	.word	0x20000a6e
 8003aec:	08017000 	.word	0x08017000
 8003af0:	20000aa0 	.word	0x20000aa0
 8003af4:	0801702c 	.word	0x0801702c
 8003af8:	20000010 	.word	0x20000010
 8003afc:	0801704c 	.word	0x0801704c
 8003b00:	20000014 	.word	0x20000014
 8003b04:	0801706c 	.word	0x0801706c

08003b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b0c:	b672      	cpsid	i
}
 8003b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b10:	bf00      	nop
 8003b12:	e7fd      	b.n	8003b10 <Error_Handler+0x8>

08003b14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b58 <HAL_MspInit+0x44>)
 8003b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8003b58 <HAL_MspInit+0x44>)
 8003b20:	f043 0301 	orr.w	r3, r3, #1
 8003b24:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b26:	4b0c      	ldr	r3, [pc, #48]	@ (8003b58 <HAL_MspInit+0x44>)
 8003b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	607b      	str	r3, [r7, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b32:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <HAL_MspInit+0x44>)
 8003b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b36:	4a08      	ldr	r2, [pc, #32]	@ (8003b58 <HAL_MspInit+0x44>)
 8003b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b3e:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <HAL_MspInit+0x44>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003b4a:	f005 fa35 	bl	8008fb8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40021000 	.word	0x40021000

08003b5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b0a4      	sub	sp, #144	@ 0x90
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b64:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b78:	2254      	movs	r2, #84	@ 0x54
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f00e f9d6 	bl	8011f2e <memset>
  if(hadc->Instance==ADC1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b8a:	d11c      	bne.n	8003bc6 <HAL_ADC_MspInit+0x6a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003b8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b90:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003b92:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003b96:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f005 ff49 	bl	8009a34 <HAL_RCCEx_PeriphCLKConfig>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003ba8:	f7ff ffae 	bl	8003b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003bac:	4b86      	ldr	r3, [pc, #536]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bb0:	4a85      	ldr	r2, [pc, #532]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003bb2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003bb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003bb8:	4b83      	ldr	r3, [pc, #524]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8003bc4:	e185      	b.n	8003ed2 <HAL_ADC_MspInit+0x376>
  else if(hadc->Instance==ADC3)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a80      	ldr	r2, [pc, #512]	@ (8003dcc <HAL_ADC_MspInit+0x270>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	f040 8087 	bne.w	8003ce0 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003bd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003bd8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003bdc:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bde:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003be2:	4618      	mov	r0, r3
 8003be4:	f005 ff26 	bl	8009a34 <HAL_RCCEx_PeriphCLKConfig>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_ADC_MspInit+0x96>
      Error_Handler();
 8003bee:	f7ff ff8b 	bl	8003b08 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003bf2:	4b77      	ldr	r3, [pc, #476]	@ (8003dd0 <HAL_ADC_MspInit+0x274>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	4a75      	ldr	r2, [pc, #468]	@ (8003dd0 <HAL_ADC_MspInit+0x274>)
 8003bfa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003bfc:	4b74      	ldr	r3, [pc, #464]	@ (8003dd0 <HAL_ADC_MspInit+0x274>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d10b      	bne.n	8003c1c <HAL_ADC_MspInit+0xc0>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003c04:	4b70      	ldr	r3, [pc, #448]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003c06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c08:	4a6f      	ldr	r2, [pc, #444]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003c0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c10:	4b6d      	ldr	r3, [pc, #436]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c18:	623b      	str	r3, [r7, #32]
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c1c:	4b6a      	ldr	r3, [pc, #424]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c20:	4a69      	ldr	r2, [pc, #420]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003c22:	f043 0302 	orr.w	r3, r3, #2
 8003c26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c28:	4b67      	ldr	r3, [pc, #412]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c34:	4b64      	ldr	r3, [pc, #400]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c38:	4a63      	ldr	r2, [pc, #396]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003c3a:	f043 0310 	orr.w	r3, r3, #16
 8003c3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c40:	4b61      	ldr	r3, [pc, #388]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c44:	f003 0310 	and.w	r3, r3, #16
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = CS_VREF_1_Pin|HEATSINK_TEMP_Pin;
 8003c4c:	f242 0302 	movw	r3, #8194	@ 0x2002
 8003c50:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c52:	2303      	movs	r3, #3
 8003c54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c5e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003c62:	4619      	mov	r1, r3
 8003c64:	485b      	ldr	r0, [pc, #364]	@ (8003dd4 <HAL_ADC_MspInit+0x278>)
 8003c66:	f003 fa01 	bl	800706c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PCB_TEMP_Pin|CS_VREF_2_Pin|INPUT_V_ADC_Pin;
 8003c6a:	f44f 530a 	mov.w	r3, #8832	@ 0x2280
 8003c6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c70:	2303      	movs	r3, #3
 8003c72:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c7c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003c80:	4619      	mov	r1, r3
 8003c82:	4855      	ldr	r0, [pc, #340]	@ (8003dd8 <HAL_ADC_MspInit+0x27c>)
 8003c84:	f003 f9f2 	bl	800706c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel1;
 8003c88:	4b54      	ldr	r3, [pc, #336]	@ (8003ddc <HAL_ADC_MspInit+0x280>)
 8003c8a:	4a55      	ldr	r2, [pc, #340]	@ (8003de0 <HAL_ADC_MspInit+0x284>)
 8003c8c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8003c8e:	4b53      	ldr	r3, [pc, #332]	@ (8003ddc <HAL_ADC_MspInit+0x280>)
 8003c90:	2225      	movs	r2, #37	@ 0x25
 8003c92:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c94:	4b51      	ldr	r3, [pc, #324]	@ (8003ddc <HAL_ADC_MspInit+0x280>)
 8003c96:	2200      	movs	r2, #0
 8003c98:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c9a:	4b50      	ldr	r3, [pc, #320]	@ (8003ddc <HAL_ADC_MspInit+0x280>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003ca0:	4b4e      	ldr	r3, [pc, #312]	@ (8003ddc <HAL_ADC_MspInit+0x280>)
 8003ca2:	2280      	movs	r2, #128	@ 0x80
 8003ca4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ca6:	4b4d      	ldr	r3, [pc, #308]	@ (8003ddc <HAL_ADC_MspInit+0x280>)
 8003ca8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cac:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003cae:	4b4b      	ldr	r3, [pc, #300]	@ (8003ddc <HAL_ADC_MspInit+0x280>)
 8003cb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cb4:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003cb6:	4b49      	ldr	r3, [pc, #292]	@ (8003ddc <HAL_ADC_MspInit+0x280>)
 8003cb8:	2220      	movs	r2, #32
 8003cba:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8003cbc:	4b47      	ldr	r3, [pc, #284]	@ (8003ddc <HAL_ADC_MspInit+0x280>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003cc2:	4846      	ldr	r0, [pc, #280]	@ (8003ddc <HAL_ADC_MspInit+0x280>)
 8003cc4:	f002 ff60 	bl	8006b88 <HAL_DMA_Init>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_ADC_MspInit+0x176>
      Error_Handler();
 8003cce:	f7ff ff1b 	bl	8003b08 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a41      	ldr	r2, [pc, #260]	@ (8003ddc <HAL_ADC_MspInit+0x280>)
 8003cd6:	655a      	str	r2, [r3, #84]	@ 0x54
 8003cd8:	4a40      	ldr	r2, [pc, #256]	@ (8003ddc <HAL_ADC_MspInit+0x280>)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003cde:	e0f8      	b.n	8003ed2 <HAL_ADC_MspInit+0x376>
  else if(hadc->Instance==ADC4)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a3f      	ldr	r2, [pc, #252]	@ (8003de4 <HAL_ADC_MspInit+0x288>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	f040 8082 	bne.w	8003df0 <HAL_ADC_MspInit+0x294>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003cec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003cf2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003cf6:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cf8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f005 fe99 	bl	8009a34 <HAL_RCCEx_PeriphCLKConfig>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_ADC_MspInit+0x1b0>
      Error_Handler();
 8003d08:	f7ff fefe 	bl	8003b08 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003d0c:	4b30      	ldr	r3, [pc, #192]	@ (8003dd0 <HAL_ADC_MspInit+0x274>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	3301      	adds	r3, #1
 8003d12:	4a2f      	ldr	r2, [pc, #188]	@ (8003dd0 <HAL_ADC_MspInit+0x274>)
 8003d14:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003d16:	4b2e      	ldr	r3, [pc, #184]	@ (8003dd0 <HAL_ADC_MspInit+0x274>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d10b      	bne.n	8003d36 <HAL_ADC_MspInit+0x1da>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d22:	4a29      	ldr	r2, [pc, #164]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003d24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d2a:	4b27      	ldr	r3, [pc, #156]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003d2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d36:	4b24      	ldr	r3, [pc, #144]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3a:	4a23      	ldr	r2, [pc, #140]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003d3c:	f043 0310 	orr.w	r3, r3, #16
 8003d40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d42:	4b21      	ldr	r3, [pc, #132]	@ (8003dc8 <HAL_ADC_MspInit+0x26c>)
 8003d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = OUTPUT_V_ADC_Pin;
 8003d4e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d52:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d54:	2303      	movs	r3, #3
 8003d56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(OUTPUT_V_ADC_GPIO_Port, &GPIO_InitStruct);
 8003d60:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003d64:	4619      	mov	r1, r3
 8003d66:	481c      	ldr	r0, [pc, #112]	@ (8003dd8 <HAL_ADC_MspInit+0x27c>)
 8003d68:	f003 f980 	bl	800706c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel2;
 8003d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8003de8 <HAL_ADC_MspInit+0x28c>)
 8003d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8003dec <HAL_ADC_MspInit+0x290>)
 8003d70:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8003d72:	4b1d      	ldr	r3, [pc, #116]	@ (8003de8 <HAL_ADC_MspInit+0x28c>)
 8003d74:	2226      	movs	r2, #38	@ 0x26
 8003d76:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d78:	4b1b      	ldr	r3, [pc, #108]	@ (8003de8 <HAL_ADC_MspInit+0x28c>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003de8 <HAL_ADC_MspInit+0x28c>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8003d84:	4b18      	ldr	r3, [pc, #96]	@ (8003de8 <HAL_ADC_MspInit+0x28c>)
 8003d86:	2280      	movs	r2, #128	@ 0x80
 8003d88:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d8a:	4b17      	ldr	r3, [pc, #92]	@ (8003de8 <HAL_ADC_MspInit+0x28c>)
 8003d8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d90:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d92:	4b15      	ldr	r3, [pc, #84]	@ (8003de8 <HAL_ADC_MspInit+0x28c>)
 8003d94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d98:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8003d9a:	4b13      	ldr	r3, [pc, #76]	@ (8003de8 <HAL_ADC_MspInit+0x28c>)
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003da0:	4b11      	ldr	r3, [pc, #68]	@ (8003de8 <HAL_ADC_MspInit+0x28c>)
 8003da2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8003da6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8003da8:	480f      	ldr	r0, [pc, #60]	@ (8003de8 <HAL_ADC_MspInit+0x28c>)
 8003daa:	f002 feed 	bl	8006b88 <HAL_DMA_Init>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_ADC_MspInit+0x25c>
      Error_Handler();
 8003db4:	f7ff fea8 	bl	8003b08 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a0b      	ldr	r2, [pc, #44]	@ (8003de8 <HAL_ADC_MspInit+0x28c>)
 8003dbc:	655a      	str	r2, [r3, #84]	@ 0x54
 8003dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003de8 <HAL_ADC_MspInit+0x28c>)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003dc4:	e085      	b.n	8003ed2 <HAL_ADC_MspInit+0x376>
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	50000400 	.word	0x50000400
 8003dd0:	20000bc4 	.word	0x20000bc4
 8003dd4:	48000400 	.word	0x48000400
 8003dd8:	48001000 	.word	0x48001000
 8003ddc:	20000594 	.word	0x20000594
 8003de0:	40020008 	.word	0x40020008
 8003de4:	50000500 	.word	0x50000500
 8003de8:	200005f4 	.word	0x200005f4
 8003dec:	4002001c 	.word	0x4002001c
  else if(hadc->Instance==ADC5)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a39      	ldr	r2, [pc, #228]	@ (8003edc <HAL_ADC_MspInit+0x380>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d16b      	bne.n	8003ed2 <HAL_ADC_MspInit+0x376>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8003dfa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8003e00:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003e04:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e06:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f005 fe12 	bl	8009a34 <HAL_RCCEx_PeriphCLKConfig>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_ADC_MspInit+0x2be>
      Error_Handler();
 8003e16:	f7ff fe77 	bl	8003b08 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8003e1a:	4b31      	ldr	r3, [pc, #196]	@ (8003ee0 <HAL_ADC_MspInit+0x384>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	4a2f      	ldr	r2, [pc, #188]	@ (8003ee0 <HAL_ADC_MspInit+0x384>)
 8003e22:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8003e24:	4b2e      	ldr	r3, [pc, #184]	@ (8003ee0 <HAL_ADC_MspInit+0x384>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d10b      	bne.n	8003e44 <HAL_ADC_MspInit+0x2e8>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8003e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ee4 <HAL_ADC_MspInit+0x388>)
 8003e2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e30:	4a2c      	ldr	r2, [pc, #176]	@ (8003ee4 <HAL_ADC_MspInit+0x388>)
 8003e32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e38:	4b2a      	ldr	r3, [pc, #168]	@ (8003ee4 <HAL_ADC_MspInit+0x388>)
 8003e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e44:	4b27      	ldr	r3, [pc, #156]	@ (8003ee4 <HAL_ADC_MspInit+0x388>)
 8003e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e48:	4a26      	ldr	r2, [pc, #152]	@ (8003ee4 <HAL_ADC_MspInit+0x388>)
 8003e4a:	f043 0301 	orr.w	r3, r3, #1
 8003e4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e50:	4b24      	ldr	r3, [pc, #144]	@ (8003ee4 <HAL_ADC_MspInit+0x388>)
 8003e52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e54:	f003 0301 	and.w	r3, r3, #1
 8003e58:	60bb      	str	r3, [r7, #8]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = IMAX2_SUM_Pin;
 8003e5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003e60:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e62:	2303      	movs	r3, #3
 8003e64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    HAL_GPIO_Init(IMAX2_SUM_GPIO_Port, &GPIO_InitStruct);
 8003e6e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003e72:	4619      	mov	r1, r3
 8003e74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e78:	f003 f8f8 	bl	800706c <HAL_GPIO_Init>
    hdma_adc5.Instance = DMA1_Channel3;
 8003e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee8 <HAL_ADC_MspInit+0x38c>)
 8003e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003eec <HAL_ADC_MspInit+0x390>)
 8003e80:	601a      	str	r2, [r3, #0]
    hdma_adc5.Init.Request = DMA_REQUEST_ADC5;
 8003e82:	4b19      	ldr	r3, [pc, #100]	@ (8003ee8 <HAL_ADC_MspInit+0x38c>)
 8003e84:	2227      	movs	r2, #39	@ 0x27
 8003e86:	605a      	str	r2, [r3, #4]
    hdma_adc5.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e88:	4b17      	ldr	r3, [pc, #92]	@ (8003ee8 <HAL_ADC_MspInit+0x38c>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	609a      	str	r2, [r3, #8]
    hdma_adc5.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e8e:	4b16      	ldr	r3, [pc, #88]	@ (8003ee8 <HAL_ADC_MspInit+0x38c>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	60da      	str	r2, [r3, #12]
    hdma_adc5.Init.MemInc = DMA_MINC_ENABLE;
 8003e94:	4b14      	ldr	r3, [pc, #80]	@ (8003ee8 <HAL_ADC_MspInit+0x38c>)
 8003e96:	2280      	movs	r2, #128	@ 0x80
 8003e98:	611a      	str	r2, [r3, #16]
    hdma_adc5.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e9a:	4b13      	ldr	r3, [pc, #76]	@ (8003ee8 <HAL_ADC_MspInit+0x38c>)
 8003e9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ea0:	615a      	str	r2, [r3, #20]
    hdma_adc5.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ea2:	4b11      	ldr	r3, [pc, #68]	@ (8003ee8 <HAL_ADC_MspInit+0x38c>)
 8003ea4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ea8:	619a      	str	r2, [r3, #24]
    hdma_adc5.Init.Mode = DMA_CIRCULAR;
 8003eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee8 <HAL_ADC_MspInit+0x38c>)
 8003eac:	2220      	movs	r2, #32
 8003eae:	61da      	str	r2, [r3, #28]
    hdma_adc5.Init.Priority = DMA_PRIORITY_LOW;
 8003eb0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee8 <HAL_ADC_MspInit+0x38c>)
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc5) != HAL_OK)
 8003eb6:	480c      	ldr	r0, [pc, #48]	@ (8003ee8 <HAL_ADC_MspInit+0x38c>)
 8003eb8:	f002 fe66 	bl	8006b88 <HAL_DMA_Init>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_ADC_MspInit+0x36a>
      Error_Handler();
 8003ec2:	f7ff fe21 	bl	8003b08 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc5);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a07      	ldr	r2, [pc, #28]	@ (8003ee8 <HAL_ADC_MspInit+0x38c>)
 8003eca:	655a      	str	r2, [r3, #84]	@ 0x54
 8003ecc:	4a06      	ldr	r2, [pc, #24]	@ (8003ee8 <HAL_ADC_MspInit+0x38c>)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8003ed2:	bf00      	nop
 8003ed4:	3790      	adds	r7, #144	@ 0x90
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	50000600 	.word	0x50000600
 8003ee0:	20000bc4 	.word	0x20000bc4
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	20000654 	.word	0x20000654
 8003eec:	40020030 	.word	0x40020030

08003ef0 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a0a      	ldr	r2, [pc, #40]	@ (8003f28 <HAL_CORDIC_MspInit+0x38>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d10b      	bne.n	8003f1a <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003f02:	4b0a      	ldr	r3, [pc, #40]	@ (8003f2c <HAL_CORDIC_MspInit+0x3c>)
 8003f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f06:	4a09      	ldr	r2, [pc, #36]	@ (8003f2c <HAL_CORDIC_MspInit+0x3c>)
 8003f08:	f043 0308 	orr.w	r3, r3, #8
 8003f0c:	6493      	str	r3, [r2, #72]	@ 0x48
 8003f0e:	4b07      	ldr	r3, [pc, #28]	@ (8003f2c <HAL_CORDIC_MspInit+0x3c>)
 8003f10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8003f1a:	bf00      	nop
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	40020c00 	.word	0x40020c00
 8003f2c:	40021000 	.word	0x40021000

08003f30 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08c      	sub	sp, #48	@ 0x30
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f38:	f107 031c 	add.w	r3, r7, #28
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a5b      	ldr	r2, [pc, #364]	@ (80040bc <HAL_DAC_MspInit+0x18c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d159      	bne.n	8004006 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003f52:	4b5b      	ldr	r3, [pc, #364]	@ (80040c0 <HAL_DAC_MspInit+0x190>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f56:	4a5a      	ldr	r2, [pc, #360]	@ (80040c0 <HAL_DAC_MspInit+0x190>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f5e:	4b58      	ldr	r3, [pc, #352]	@ (80040c0 <HAL_DAC_MspInit+0x190>)
 8003f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f6a:	4b55      	ldr	r3, [pc, #340]	@ (80040c0 <HAL_DAC_MspInit+0x190>)
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6e:	4a54      	ldr	r2, [pc, #336]	@ (80040c0 <HAL_DAC_MspInit+0x190>)
 8003f70:	f043 0301 	orr.w	r3, r3, #1
 8003f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f76:	4b52      	ldr	r3, [pc, #328]	@ (80040c0 <HAL_DAC_MspInit+0x190>)
 8003f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = IMAX_Pin|IMAX2_Pin;
 8003f82:	2330      	movs	r3, #48	@ 0x30
 8003f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f86:	2303      	movs	r3, #3
 8003f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8e:	f107 031c 	add.w	r3, r7, #28
 8003f92:	4619      	mov	r1, r3
 8003f94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003f98:	f003 f868 	bl	800706c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel4;
 8003f9c:	4b49      	ldr	r3, [pc, #292]	@ (80040c4 <HAL_DAC_MspInit+0x194>)
 8003f9e:	4a4a      	ldr	r2, [pc, #296]	@ (80040c8 <HAL_DAC_MspInit+0x198>)
 8003fa0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003fa2:	4b48      	ldr	r3, [pc, #288]	@ (80040c4 <HAL_DAC_MspInit+0x194>)
 8003fa4:	2206      	movs	r2, #6
 8003fa6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fa8:	4b46      	ldr	r3, [pc, #280]	@ (80040c4 <HAL_DAC_MspInit+0x194>)
 8003faa:	2210      	movs	r2, #16
 8003fac:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fae:	4b45      	ldr	r3, [pc, #276]	@ (80040c4 <HAL_DAC_MspInit+0x194>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003fb4:	4b43      	ldr	r3, [pc, #268]	@ (80040c4 <HAL_DAC_MspInit+0x194>)
 8003fb6:	2280      	movs	r2, #128	@ 0x80
 8003fb8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003fba:	4b42      	ldr	r3, [pc, #264]	@ (80040c4 <HAL_DAC_MspInit+0x194>)
 8003fbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fc0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003fc2:	4b40      	ldr	r3, [pc, #256]	@ (80040c4 <HAL_DAC_MspInit+0x194>)
 8003fc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fc8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003fca:	4b3e      	ldr	r3, [pc, #248]	@ (80040c4 <HAL_DAC_MspInit+0x194>)
 8003fcc:	2220      	movs	r2, #32
 8003fce:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80040c4 <HAL_DAC_MspInit+0x194>)
 8003fd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003fd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003fd8:	483a      	ldr	r0, [pc, #232]	@ (80040c4 <HAL_DAC_MspInit+0x194>)
 8003fda:	f002 fdd5 	bl	8006b88 <HAL_DMA_Init>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8003fe4:	f7ff fd90 	bl	8003b08 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a36      	ldr	r2, [pc, #216]	@ (80040c4 <HAL_DAC_MspInit+0x194>)
 8003fec:	609a      	str	r2, [r3, #8]
 8003fee:	4a35      	ldr	r2, [pc, #212]	@ (80040c4 <HAL_DAC_MspInit+0x194>)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	2036      	movs	r0, #54	@ 0x36
 8003ffa:	f002 fab2 	bl	8006562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ffe:	2036      	movs	r0, #54	@ 0x36
 8004000:	f002 fac9 	bl	8006596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8004004:	e055      	b.n	80040b2 <HAL_DAC_MspInit+0x182>
  else if(hdac->Instance==DAC2)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a30      	ldr	r2, [pc, #192]	@ (80040cc <HAL_DAC_MspInit+0x19c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d150      	bne.n	80040b2 <HAL_DAC_MspInit+0x182>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8004010:	4b2b      	ldr	r3, [pc, #172]	@ (80040c0 <HAL_DAC_MspInit+0x190>)
 8004012:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004014:	4a2a      	ldr	r2, [pc, #168]	@ (80040c0 <HAL_DAC_MspInit+0x190>)
 8004016:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800401a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800401c:	4b28      	ldr	r3, [pc, #160]	@ (80040c0 <HAL_DAC_MspInit+0x190>)
 800401e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004024:	613b      	str	r3, [r7, #16]
 8004026:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004028:	4b25      	ldr	r3, [pc, #148]	@ (80040c0 <HAL_DAC_MspInit+0x190>)
 800402a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402c:	4a24      	ldr	r2, [pc, #144]	@ (80040c0 <HAL_DAC_MspInit+0x190>)
 800402e:	f043 0301 	orr.w	r3, r3, #1
 8004032:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004034:	4b22      	ldr	r3, [pc, #136]	@ (80040c0 <HAL_DAC_MspInit+0x190>)
 8004036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = IMIN_Pin;
 8004040:	2340      	movs	r3, #64	@ 0x40
 8004042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004044:	2303      	movs	r3, #3
 8004046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004048:	2300      	movs	r3, #0
 800404a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(IMIN_GPIO_Port, &GPIO_InitStruct);
 800404c:	f107 031c 	add.w	r3, r7, #28
 8004050:	4619      	mov	r1, r3
 8004052:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004056:	f003 f809 	bl	800706c <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel5;
 800405a:	4b1d      	ldr	r3, [pc, #116]	@ (80040d0 <HAL_DAC_MspInit+0x1a0>)
 800405c:	4a1d      	ldr	r2, [pc, #116]	@ (80040d4 <HAL_DAC_MspInit+0x1a4>)
 800405e:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8004060:	4b1b      	ldr	r3, [pc, #108]	@ (80040d0 <HAL_DAC_MspInit+0x1a0>)
 8004062:	2229      	movs	r2, #41	@ 0x29
 8004064:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004066:	4b1a      	ldr	r3, [pc, #104]	@ (80040d0 <HAL_DAC_MspInit+0x1a0>)
 8004068:	2210      	movs	r2, #16
 800406a:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800406c:	4b18      	ldr	r3, [pc, #96]	@ (80040d0 <HAL_DAC_MspInit+0x1a0>)
 800406e:	2200      	movs	r2, #0
 8004070:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004072:	4b17      	ldr	r3, [pc, #92]	@ (80040d0 <HAL_DAC_MspInit+0x1a0>)
 8004074:	2280      	movs	r2, #128	@ 0x80
 8004076:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004078:	4b15      	ldr	r3, [pc, #84]	@ (80040d0 <HAL_DAC_MspInit+0x1a0>)
 800407a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800407e:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004080:	4b13      	ldr	r3, [pc, #76]	@ (80040d0 <HAL_DAC_MspInit+0x1a0>)
 8004082:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004086:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8004088:	4b11      	ldr	r3, [pc, #68]	@ (80040d0 <HAL_DAC_MspInit+0x1a0>)
 800408a:	2220      	movs	r2, #32
 800408c:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 800408e:	4b10      	ldr	r3, [pc, #64]	@ (80040d0 <HAL_DAC_MspInit+0x1a0>)
 8004090:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004094:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8004096:	480e      	ldr	r0, [pc, #56]	@ (80040d0 <HAL_DAC_MspInit+0x1a0>)
 8004098:	f002 fd76 	bl	8006b88 <HAL_DMA_Init>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_DAC_MspInit+0x176>
      Error_Handler();
 80040a2:	f7ff fd31 	bl	8003b08 <Error_Handler>
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a09      	ldr	r2, [pc, #36]	@ (80040d0 <HAL_DAC_MspInit+0x1a0>)
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	4a08      	ldr	r2, [pc, #32]	@ (80040d0 <HAL_DAC_MspInit+0x1a0>)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80040b2:	bf00      	nop
 80040b4:	3730      	adds	r7, #48	@ 0x30
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	50000800 	.word	0x50000800
 80040c0:	40021000 	.word	0x40021000
 80040c4:	20000704 	.word	0x20000704
 80040c8:	40020044 	.word	0x40020044
 80040cc:	50000c00 	.word	0x50000c00
 80040d0:	20000764 	.word	0x20000764
 80040d4:	40020058 	.word	0x40020058

080040d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004150 <HAL_TIM_PWM_MspInit+0x78>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d114      	bne.n	8004114 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80040ea:	4b1a      	ldr	r3, [pc, #104]	@ (8004154 <HAL_TIM_PWM_MspInit+0x7c>)
 80040ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ee:	4a19      	ldr	r2, [pc, #100]	@ (8004154 <HAL_TIM_PWM_MspInit+0x7c>)
 80040f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80040f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80040f6:	4b17      	ldr	r3, [pc, #92]	@ (8004154 <HAL_TIM_PWM_MspInit+0x7c>)
 80040f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004102:	2200      	movs	r2, #0
 8004104:	2100      	movs	r1, #0
 8004106:	2018      	movs	r0, #24
 8004108:	f002 fa2b 	bl	8006562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800410c:	2018      	movs	r0, #24
 800410e:	f002 fa42 	bl	8006596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004112:	e018      	b.n	8004146 <HAL_TIM_PWM_MspInit+0x6e>
  else if(htim_pwm->Instance==TIM8)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a0f      	ldr	r2, [pc, #60]	@ (8004158 <HAL_TIM_PWM_MspInit+0x80>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d113      	bne.n	8004146 <HAL_TIM_PWM_MspInit+0x6e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800411e:	4b0d      	ldr	r3, [pc, #52]	@ (8004154 <HAL_TIM_PWM_MspInit+0x7c>)
 8004120:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004122:	4a0c      	ldr	r2, [pc, #48]	@ (8004154 <HAL_TIM_PWM_MspInit+0x7c>)
 8004124:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004128:	6613      	str	r3, [r2, #96]	@ 0x60
 800412a:	4b0a      	ldr	r3, [pc, #40]	@ (8004154 <HAL_TIM_PWM_MspInit+0x7c>)
 800412c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800412e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004132:	60bb      	str	r3, [r7, #8]
 8004134:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_IRQn, 0, 0);
 8004136:	2200      	movs	r2, #0
 8004138:	2100      	movs	r1, #0
 800413a:	202b      	movs	r0, #43	@ 0x2b
 800413c:	f002 fa11 	bl	8006562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_IRQn);
 8004140:	202b      	movs	r0, #43	@ 0x2b
 8004142:	f002 fa28 	bl	8006596 <HAL_NVIC_EnableIRQ>
}
 8004146:	bf00      	nop
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	40012c00 	.word	0x40012c00
 8004154:	40021000 	.word	0x40021000
 8004158:	40013400 	.word	0x40013400

0800415c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b088      	sub	sp, #32
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a35      	ldr	r2, [pc, #212]	@ (8004240 <HAL_TIM_Base_MspInit+0xe4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d10c      	bne.n	8004188 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800416e:	4b35      	ldr	r3, [pc, #212]	@ (8004244 <HAL_TIM_Base_MspInit+0xe8>)
 8004170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004172:	4a34      	ldr	r2, [pc, #208]	@ (8004244 <HAL_TIM_Base_MspInit+0xe8>)
 8004174:	f043 0304 	orr.w	r3, r3, #4
 8004178:	6593      	str	r3, [r2, #88]	@ 0x58
 800417a:	4b32      	ldr	r3, [pc, #200]	@ (8004244 <HAL_TIM_Base_MspInit+0xe8>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004186:	e056      	b.n	8004236 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM6)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a2e      	ldr	r2, [pc, #184]	@ (8004248 <HAL_TIM_Base_MspInit+0xec>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d114      	bne.n	80041bc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004192:	4b2c      	ldr	r3, [pc, #176]	@ (8004244 <HAL_TIM_Base_MspInit+0xe8>)
 8004194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004196:	4a2b      	ldr	r2, [pc, #172]	@ (8004244 <HAL_TIM_Base_MspInit+0xe8>)
 8004198:	f043 0310 	orr.w	r3, r3, #16
 800419c:	6593      	str	r3, [r2, #88]	@ 0x58
 800419e:	4b29      	ldr	r3, [pc, #164]	@ (8004244 <HAL_TIM_Base_MspInit+0xe8>)
 80041a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80041aa:	2200      	movs	r2, #0
 80041ac:	2100      	movs	r1, #0
 80041ae:	2036      	movs	r0, #54	@ 0x36
 80041b0:	f002 f9d7 	bl	8006562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80041b4:	2036      	movs	r0, #54	@ 0x36
 80041b6:	f002 f9ee 	bl	8006596 <HAL_NVIC_EnableIRQ>
}
 80041ba:	e03c      	b.n	8004236 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM7)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a22      	ldr	r2, [pc, #136]	@ (800424c <HAL_TIM_Base_MspInit+0xf0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d10c      	bne.n	80041e0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80041c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004244 <HAL_TIM_Base_MspInit+0xe8>)
 80041c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004244 <HAL_TIM_Base_MspInit+0xe8>)
 80041cc:	f043 0320 	orr.w	r3, r3, #32
 80041d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80041d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004244 <HAL_TIM_Base_MspInit+0xe8>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	697b      	ldr	r3, [r7, #20]
}
 80041de:	e02a      	b.n	8004236 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM15)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004250 <HAL_TIM_Base_MspInit+0xf4>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d114      	bne.n	8004214 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80041ea:	4b16      	ldr	r3, [pc, #88]	@ (8004244 <HAL_TIM_Base_MspInit+0xe8>)
 80041ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041ee:	4a15      	ldr	r2, [pc, #84]	@ (8004244 <HAL_TIM_Base_MspInit+0xe8>)
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80041f6:	4b13      	ldr	r3, [pc, #76]	@ (8004244 <HAL_TIM_Base_MspInit+0xe8>)
 80041f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004202:	2200      	movs	r2, #0
 8004204:	2100      	movs	r1, #0
 8004206:	2018      	movs	r0, #24
 8004208:	f002 f9ab 	bl	8006562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800420c:	2018      	movs	r0, #24
 800420e:	f002 f9c2 	bl	8006596 <HAL_NVIC_EnableIRQ>
}
 8004212:	e010      	b.n	8004236 <HAL_TIM_Base_MspInit+0xda>
  else if(htim_base->Instance==TIM16)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a0e      	ldr	r2, [pc, #56]	@ (8004254 <HAL_TIM_Base_MspInit+0xf8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d10b      	bne.n	8004236 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800421e:	4b09      	ldr	r3, [pc, #36]	@ (8004244 <HAL_TIM_Base_MspInit+0xe8>)
 8004220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004222:	4a08      	ldr	r2, [pc, #32]	@ (8004244 <HAL_TIM_Base_MspInit+0xe8>)
 8004224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004228:	6613      	str	r3, [r2, #96]	@ 0x60
 800422a:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <HAL_TIM_Base_MspInit+0xe8>)
 800422c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800422e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	68fb      	ldr	r3, [r7, #12]
}
 8004236:	bf00      	nop
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	40000800 	.word	0x40000800
 8004244:	40021000 	.word	0x40021000
 8004248:	40001000 	.word	0x40001000
 800424c:	40001400 	.word	0x40001400
 8004250:	40014000 	.word	0x40014000
 8004254:	40014400 	.word	0x40014400

08004258 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	@ 0x28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004260:	f107 0314 	add.w	r3, r7, #20
 8004264:	2200      	movs	r2, #0
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	605a      	str	r2, [r3, #4]
 800426a:	609a      	str	r2, [r3, #8]
 800426c:	60da      	str	r2, [r3, #12]
 800426e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a33      	ldr	r2, [pc, #204]	@ (8004344 <HAL_TIM_MspPostInit+0xec>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d11c      	bne.n	80042b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800427a:	4b33      	ldr	r3, [pc, #204]	@ (8004348 <HAL_TIM_MspPostInit+0xf0>)
 800427c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800427e:	4a32      	ldr	r2, [pc, #200]	@ (8004348 <HAL_TIM_MspPostInit+0xf0>)
 8004280:	f043 0304 	orr.w	r3, r3, #4
 8004284:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004286:	4b30      	ldr	r3, [pc, #192]	@ (8004348 <HAL_TIM_MspPostInit+0xf0>)
 8004288:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800428a:	f003 0304 	and.w	r3, r3, #4
 800428e:	613b      	str	r3, [r7, #16]
 8004290:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = DEADTIME_TR_Pin;
 8004292:	2301      	movs	r3, #1
 8004294:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004296:	2302      	movs	r3, #2
 8004298:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800429a:	2300      	movs	r3, #0
 800429c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800429e:	2302      	movs	r3, #2
 80042a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80042a2:	2302      	movs	r3, #2
 80042a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_TR_GPIO_Port, &GPIO_InitStruct);
 80042a6:	f107 0314 	add.w	r3, r7, #20
 80042aa:	4619      	mov	r1, r3
 80042ac:	4827      	ldr	r0, [pc, #156]	@ (800434c <HAL_TIM_MspPostInit+0xf4>)
 80042ae:	f002 fedd 	bl	800706c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80042b2:	e043      	b.n	800433c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM4)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a25      	ldr	r2, [pc, #148]	@ (8004350 <HAL_TIM_MspPostInit+0xf8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d11d      	bne.n	80042fa <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80042be:	4b22      	ldr	r3, [pc, #136]	@ (8004348 <HAL_TIM_MspPostInit+0xf0>)
 80042c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c2:	4a21      	ldr	r2, [pc, #132]	@ (8004348 <HAL_TIM_MspPostInit+0xf0>)
 80042c4:	f043 0308 	orr.w	r3, r3, #8
 80042c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004348 <HAL_TIM_MspPostInit+0xf0>)
 80042cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ce:	f003 0308 	and.w	r3, r3, #8
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_PWM_Pin;
 80042d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042dc:	2302      	movs	r3, #2
 80042de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e4:	2300      	movs	r3, #0
 80042e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80042e8:	2302      	movs	r3, #2
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FAN_PWM_GPIO_Port, &GPIO_InitStruct);
 80042ec:	f107 0314 	add.w	r3, r7, #20
 80042f0:	4619      	mov	r1, r3
 80042f2:	4818      	ldr	r0, [pc, #96]	@ (8004354 <HAL_TIM_MspPostInit+0xfc>)
 80042f4:	f002 feba 	bl	800706c <HAL_GPIO_Init>
}
 80042f8:	e020      	b.n	800433c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM8)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a16      	ldr	r2, [pc, #88]	@ (8004358 <HAL_TIM_MspPostInit+0x100>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d11b      	bne.n	800433c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004304:	4b10      	ldr	r3, [pc, #64]	@ (8004348 <HAL_TIM_MspPostInit+0xf0>)
 8004306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004308:	4a0f      	ldr	r2, [pc, #60]	@ (8004348 <HAL_TIM_MspPostInit+0xf0>)
 800430a:	f043 0304 	orr.w	r3, r3, #4
 800430e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004310:	4b0d      	ldr	r3, [pc, #52]	@ (8004348 <HAL_TIM_MspPostInit+0xf0>)
 8004312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DEADTIME_HC_Pin;
 800431c:	2380      	movs	r3, #128	@ 0x80
 800431e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004320:	2302      	movs	r3, #2
 8004322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004328:	2302      	movs	r3, #2
 800432a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800432c:	2304      	movs	r3, #4
 800432e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(DEADTIME_HC_GPIO_Port, &GPIO_InitStruct);
 8004330:	f107 0314 	add.w	r3, r7, #20
 8004334:	4619      	mov	r1, r3
 8004336:	4805      	ldr	r0, [pc, #20]	@ (800434c <HAL_TIM_MspPostInit+0xf4>)
 8004338:	f002 fe98 	bl	800706c <HAL_GPIO_Init>
}
 800433c:	bf00      	nop
 800433e:	3728      	adds	r7, #40	@ 0x28
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40021000 	.word	0x40021000
 800434c:	48000800 	.word	0x48000800
 8004350:	40000800 	.word	0x40000800
 8004354:	48000c00 	.word	0x48000c00
 8004358:	40013400 	.word	0x40013400

0800435c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b09e      	sub	sp, #120	@ 0x78
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004364:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004368:	2200      	movs	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	605a      	str	r2, [r3, #4]
 800436e:	609a      	str	r2, [r3, #8]
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004374:	f107 0310 	add.w	r3, r7, #16
 8004378:	2254      	movs	r2, #84	@ 0x54
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f00d fdd6 	bl	8011f2e <memset>
  if(huart->Instance==UART4)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a1f      	ldr	r2, [pc, #124]	@ (8004404 <HAL_UART_MspInit+0xa8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d136      	bne.n	80043fa <HAL_UART_MspInit+0x9e>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800438c:	2308      	movs	r3, #8
 800438e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_HSI;
 8004390:	2380      	movs	r3, #128	@ 0x80
 8004392:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004394:	f107 0310 	add.w	r3, r7, #16
 8004398:	4618      	mov	r0, r3
 800439a:	f005 fb4b 	bl	8009a34 <HAL_RCCEx_PeriphCLKConfig>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80043a4:	f7ff fbb0 	bl	8003b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80043a8:	4b17      	ldr	r3, [pc, #92]	@ (8004408 <HAL_UART_MspInit+0xac>)
 80043aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ac:	4a16      	ldr	r2, [pc, #88]	@ (8004408 <HAL_UART_MspInit+0xac>)
 80043ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80043b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80043b4:	4b14      	ldr	r3, [pc, #80]	@ (8004408 <HAL_UART_MspInit+0xac>)
 80043b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043bc:	60fb      	str	r3, [r7, #12]
 80043be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043c0:	4b11      	ldr	r3, [pc, #68]	@ (8004408 <HAL_UART_MspInit+0xac>)
 80043c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043c4:	4a10      	ldr	r2, [pc, #64]	@ (8004408 <HAL_UART_MspInit+0xac>)
 80043c6:	f043 0304 	orr.w	r3, r3, #4
 80043ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004408 <HAL_UART_MspInit+0xac>)
 80043ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80043d8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80043dc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043de:	2302      	movs	r3, #2
 80043e0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e2:	2300      	movs	r3, #0
 80043e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e6:	2300      	movs	r3, #0
 80043e8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80043ea:	2305      	movs	r3, #5
 80043ec:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ee:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80043f2:	4619      	mov	r1, r3
 80043f4:	4805      	ldr	r0, [pc, #20]	@ (800440c <HAL_UART_MspInit+0xb0>)
 80043f6:	f002 fe39 	bl	800706c <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 80043fa:	bf00      	nop
 80043fc:	3778      	adds	r7, #120	@ 0x78
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40004c00 	.word	0x40004c00
 8004408:	40021000 	.word	0x40021000
 800440c:	48000800 	.word	0x48000800

08004410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004414:	bf00      	nop
 8004416:	e7fd      	b.n	8004414 <NMI_Handler+0x4>

08004418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800441c:	bf00      	nop
 800441e:	e7fd      	b.n	800441c <HardFault_Handler+0x4>

08004420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004424:	bf00      	nop
 8004426:	e7fd      	b.n	8004424 <MemManage_Handler+0x4>

08004428 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800442c:	bf00      	nop
 800442e:	e7fd      	b.n	800442c <BusFault_Handler+0x4>

08004430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004434:	bf00      	nop
 8004436:	e7fd      	b.n	8004434 <UsageFault_Handler+0x4>

08004438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004446:	b480      	push	{r7}
 8004448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800444a:	bf00      	nop
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004458:	bf00      	nop
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004466:	f000 f9b9 	bl	80047dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800446a:	bf00      	nop
 800446c:	bd80      	pop	{r7, pc}
	...

08004470 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004474:	4802      	ldr	r0, [pc, #8]	@ (8004480 <DMA1_Channel1_IRQHandler+0x10>)
 8004476:	f002 fcaa 	bl	8006dce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800447a:	bf00      	nop
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20000594 	.word	0x20000594

08004484 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8004488:	4802      	ldr	r0, [pc, #8]	@ (8004494 <DMA1_Channel2_IRQHandler+0x10>)
 800448a:	f002 fca0 	bl	8006dce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800448e:	bf00      	nop
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	200005f4 	.word	0x200005f4

08004498 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc5);
 800449c:	4802      	ldr	r0, [pc, #8]	@ (80044a8 <DMA1_Channel3_IRQHandler+0x10>)
 800449e:	f002 fc96 	bl	8006dce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80044a2:	bf00      	nop
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20000654 	.word	0x20000654

080044ac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80044b0:	4802      	ldr	r0, [pc, #8]	@ (80044bc <DMA1_Channel4_IRQHandler+0x10>)
 80044b2:	f002 fc8c 	bl	8006dce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80044b6:	bf00      	nop
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000704 	.word	0x20000704

080044c0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80044c4:	4802      	ldr	r0, [pc, #8]	@ (80044d0 <DMA1_Channel5_IRQHandler+0x10>)
 80044c6:	f002 fc82 	bl	8006dce <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80044ca:	bf00      	nop
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000764 	.word	0x20000764

080044d4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80044d8:	4802      	ldr	r0, [pc, #8]	@ (80044e4 <USB_LP_IRQHandler+0x10>)
 80044da:	f003 f883 	bl	80075e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80044de:	bf00      	nop
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	200020a4 	.word	0x200020a4

080044e8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044ec:	4803      	ldr	r0, [pc, #12]	@ (80044fc <TIM1_BRK_TIM15_IRQHandler+0x14>)
 80044ee:	f006 f863 	bl	800a5b8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80044f2:	4803      	ldr	r0, [pc, #12]	@ (8004500 <TIM1_BRK_TIM15_IRQHandler+0x18>)
 80044f4:	f006 f860 	bl	800a5b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80044f8:	bf00      	nop
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	200007c4 	.word	0x200007c4
 8004500:	20000940 	.word	0x20000940

08004504 <TIM8_BRK_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt.
  */
void TIM8_BRK_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_IRQn 0 */

  /* USER CODE END TIM8_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004508:	4802      	ldr	r0, [pc, #8]	@ (8004514 <TIM8_BRK_IRQHandler+0x10>)
 800450a:	f006 f855 	bl	800a5b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_IRQn 1 */

  /* USER CODE END TIM8_BRK_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	200008f4 	.word	0x200008f4

08004518 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
					HEAT_SINK_TEMP = (ADC3_DMA_BUFFER[4]/4096)*3.3;//(Low_pass_filter(ADC3_DMA_BUFFER[4], HEAT_SINK_TEMP)/4096)*3.3;
					FAN_Drive(); // Control Fan speed dpend on two temperatures pcb and radiator
					}*/

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800451c:	4803      	ldr	r0, [pc, #12]	@ (800452c <TIM6_DAC_IRQHandler+0x14>)
 800451e:	f006 f84b 	bl	800a5b8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8004522:	4803      	ldr	r0, [pc, #12]	@ (8004530 <TIM6_DAC_IRQHandler+0x18>)
 8004524:	f002 f8e0 	bl	80066e8 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004528:	bf00      	nop
 800452a:	bd80      	pop	{r7, pc}
 800452c:	2000085c 	.word	0x2000085c
 8004530:	200006dc 	.word	0x200006dc

08004534 <_getpid>:
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
 8004538:	2301      	movs	r3, #1
 800453a:	4618      	mov	r0, r3
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <_kill>:
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
 800454e:	f00d fd53 	bl	8011ff8 <__errno>
 8004552:	4603      	mov	r3, r0
 8004554:	2216      	movs	r2, #22
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	f04f 33ff 	mov.w	r3, #4294967295
 800455c:	4618      	mov	r0, r3
 800455e:	3708      	adds	r7, #8
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <_exit>:
 8004564:	b580      	push	{r7, lr}
 8004566:	b082      	sub	sp, #8
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	f04f 31ff 	mov.w	r1, #4294967295
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff ffe7 	bl	8004544 <_kill>
 8004576:	bf00      	nop
 8004578:	e7fd      	b.n	8004576 <_exit+0x12>

0800457a <_read>:
 800457a:	b580      	push	{r7, lr}
 800457c:	b086      	sub	sp, #24
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	607a      	str	r2, [r7, #4]
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	e00a      	b.n	80045a2 <_read+0x28>
 800458c:	f3af 8000 	nop.w
 8004590:	4601      	mov	r1, r0
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	1c5a      	adds	r2, r3, #1
 8004596:	60ba      	str	r2, [r7, #8]
 8004598:	b2ca      	uxtb	r2, r1
 800459a:	701a      	strb	r2, [r3, #0]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	3301      	adds	r3, #1
 80045a0:	617b      	str	r3, [r7, #20]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	dbf0      	blt.n	800458c <_read+0x12>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4618      	mov	r0, r3
 80045ae:	3718      	adds	r7, #24
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <_write>:
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	2300      	movs	r3, #0
 80045c2:	617b      	str	r3, [r7, #20]
 80045c4:	e009      	b.n	80045da <_write+0x26>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	1c5a      	adds	r2, r3, #1
 80045ca:	60ba      	str	r2, [r7, #8]
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	4618      	mov	r0, r3
 80045d0:	f3af 8000 	nop.w
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	3301      	adds	r3, #1
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	429a      	cmp	r2, r3
 80045e0:	dbf1      	blt.n	80045c6 <_write+0x12>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <_close>:
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	f04f 33ff 	mov.w	r3, #4294967295
 80045f8:	4618      	mov	r0, r3
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <_fstat>:
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004614:	605a      	str	r2, [r3, #4]
 8004616:	2300      	movs	r3, #0
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <_isatty>:
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	2301      	movs	r3, #1
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <_lseek>:
 800463a:	b480      	push	{r7}
 800463c:	b085      	sub	sp, #20
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	2300      	movs	r3, #0
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <_sbrk>:
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	4a14      	ldr	r2, [pc, #80]	@ (80046b0 <_sbrk+0x5c>)
 800465e:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <_sbrk+0x60>)
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	4b13      	ldr	r3, [pc, #76]	@ (80046b8 <_sbrk+0x64>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <_sbrk+0x22>
 8004670:	4b11      	ldr	r3, [pc, #68]	@ (80046b8 <_sbrk+0x64>)
 8004672:	4a12      	ldr	r2, [pc, #72]	@ (80046bc <_sbrk+0x68>)
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	4b10      	ldr	r3, [pc, #64]	@ (80046b8 <_sbrk+0x64>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4413      	add	r3, r2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d207      	bcs.n	8004694 <_sbrk+0x40>
 8004684:	f00d fcb8 	bl	8011ff8 <__errno>
 8004688:	4603      	mov	r3, r0
 800468a:	220c      	movs	r2, #12
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	f04f 33ff 	mov.w	r3, #4294967295
 8004692:	e009      	b.n	80046a8 <_sbrk+0x54>
 8004694:	4b08      	ldr	r3, [pc, #32]	@ (80046b8 <_sbrk+0x64>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	4b07      	ldr	r3, [pc, #28]	@ (80046b8 <_sbrk+0x64>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4413      	add	r3, r2
 80046a2:	4a05      	ldr	r2, [pc, #20]	@ (80046b8 <_sbrk+0x64>)
 80046a4:	6013      	str	r3, [r2, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20020000 	.word	0x20020000
 80046b4:	00000400 	.word	0x00000400
 80046b8:	20000bc8 	.word	0x20000bc8
 80046bc:	200026f0 	.word	0x200026f0

080046c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80046c4:	4b06      	ldr	r3, [pc, #24]	@ (80046e0 <SystemInit+0x20>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ca:	4a05      	ldr	r2, [pc, #20]	@ (80046e0 <SystemInit+0x20>)
 80046cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80046d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80046d4:	bf00      	nop
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	e000ed00 	.word	0xe000ed00

080046e4 <Reset_Handler>:
 80046e4:	480d      	ldr	r0, [pc, #52]	@ (800471c <LoopForever+0x2>)
 80046e6:	4685      	mov	sp, r0
 80046e8:	f7ff ffea 	bl	80046c0 <SystemInit>
 80046ec:	480c      	ldr	r0, [pc, #48]	@ (8004720 <LoopForever+0x6>)
 80046ee:	490d      	ldr	r1, [pc, #52]	@ (8004724 <LoopForever+0xa>)
 80046f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004728 <LoopForever+0xe>)
 80046f2:	2300      	movs	r3, #0
 80046f4:	e002      	b.n	80046fc <LoopCopyDataInit>

080046f6 <CopyDataInit>:
 80046f6:	58d4      	ldr	r4, [r2, r3]
 80046f8:	50c4      	str	r4, [r0, r3]
 80046fa:	3304      	adds	r3, #4

080046fc <LoopCopyDataInit>:
 80046fc:	18c4      	adds	r4, r0, r3
 80046fe:	428c      	cmp	r4, r1
 8004700:	d3f9      	bcc.n	80046f6 <CopyDataInit>
 8004702:	4a0a      	ldr	r2, [pc, #40]	@ (800472c <LoopForever+0x12>)
 8004704:	4c0a      	ldr	r4, [pc, #40]	@ (8004730 <LoopForever+0x16>)
 8004706:	2300      	movs	r3, #0
 8004708:	e001      	b.n	800470e <LoopFillZerobss>

0800470a <FillZerobss>:
 800470a:	6013      	str	r3, [r2, #0]
 800470c:	3204      	adds	r2, #4

0800470e <LoopFillZerobss>:
 800470e:	42a2      	cmp	r2, r4
 8004710:	d3fb      	bcc.n	800470a <FillZerobss>
 8004712:	f00d fc77 	bl	8012004 <__libc_init_array>
 8004716:	f7fc fc8f 	bl	8001038 <main>

0800471a <LoopForever>:
 800471a:	e7fe      	b.n	800471a <LoopForever>
 800471c:	20020000 	.word	0x20020000
 8004720:	20000000 	.word	0x20000000
 8004724:	200003c8 	.word	0x200003c8
 8004728:	08017638 	.word	0x08017638
 800472c:	200003c8 	.word	0x200003c8
 8004730:	200026ec 	.word	0x200026ec

08004734 <ADC1_2_IRQHandler>:
 8004734:	e7fe      	b.n	8004734 <ADC1_2_IRQHandler>

08004736 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004736:	b580      	push	{r7, lr}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004740:	2003      	movs	r0, #3
 8004742:	f001 ff03 	bl	800654c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004746:	2000      	movs	r0, #0
 8004748:	f000 f80e 	bl	8004768 <HAL_InitTick>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	71fb      	strb	r3, [r7, #7]
 8004756:	e001      	b.n	800475c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004758:	f7ff f9dc 	bl	8003b14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800475c:	79fb      	ldrb	r3, [r7, #7]

}
 800475e:	4618      	mov	r0, r3
 8004760:	3708      	adds	r7, #8
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004770:	2300      	movs	r3, #0
 8004772:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004774:	4b16      	ldr	r3, [pc, #88]	@ (80047d0 <HAL_InitTick+0x68>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d022      	beq.n	80047c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800477c:	4b15      	ldr	r3, [pc, #84]	@ (80047d4 <HAL_InitTick+0x6c>)
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	4b13      	ldr	r3, [pc, #76]	@ (80047d0 <HAL_InitTick+0x68>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004788:	fbb1 f3f3 	udiv	r3, r1, r3
 800478c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004790:	4618      	mov	r0, r3
 8004792:	f001 ff0e 	bl	80065b2 <HAL_SYSTICK_Config>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10f      	bne.n	80047bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b0f      	cmp	r3, #15
 80047a0:	d809      	bhi.n	80047b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047a2:	2200      	movs	r2, #0
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	f04f 30ff 	mov.w	r0, #4294967295
 80047aa:	f001 feda 	bl	8006562 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80047ae:	4a0a      	ldr	r2, [pc, #40]	@ (80047d8 <HAL_InitTick+0x70>)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	e007      	b.n	80047c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]
 80047ba:	e004      	b.n	80047c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	73fb      	strb	r3, [r7, #15]
 80047c0:	e001      	b.n	80047c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	20000070 	.word	0x20000070
 80047d4:	20000068 	.word	0x20000068
 80047d8:	2000006c 	.word	0x2000006c

080047dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047e0:	4b05      	ldr	r3, [pc, #20]	@ (80047f8 <HAL_IncTick+0x1c>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b05      	ldr	r3, [pc, #20]	@ (80047fc <HAL_IncTick+0x20>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4413      	add	r3, r2
 80047ea:	4a03      	ldr	r2, [pc, #12]	@ (80047f8 <HAL_IncTick+0x1c>)
 80047ec:	6013      	str	r3, [r2, #0]
}
 80047ee:	bf00      	nop
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	20000bcc 	.word	0x20000bcc
 80047fc:	20000070 	.word	0x20000070

08004800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  return uwTick;
 8004804:	4b03      	ldr	r3, [pc, #12]	@ (8004814 <HAL_GetTick+0x14>)
 8004806:	681b      	ldr	r3, [r3, #0]
}
 8004808:	4618      	mov	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20000bcc 	.word	0x20000bcc

08004818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004820:	f7ff ffee 	bl	8004800 <HAL_GetTick>
 8004824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004830:	d004      	beq.n	800483c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8004832:	4b09      	ldr	r3, [pc, #36]	@ (8004858 <HAL_Delay+0x40>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	4413      	add	r3, r2
 800483a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800483c:	bf00      	nop
 800483e:	f7ff ffdf 	bl	8004800 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	68fa      	ldr	r2, [r7, #12]
 800484a:	429a      	cmp	r2, r3
 800484c:	d8f7      	bhi.n	800483e <HAL_Delay+0x26>
  {
  }
}
 800484e:	bf00      	nop
 8004850:	bf00      	nop
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	20000070 	.word	0x20000070

0800485c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	609a      	str	r2, [r3, #8]
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	609a      	str	r2, [r3, #8]
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3360      	adds	r3, #96	@ 0x60
 80048d6:	461a      	mov	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	4413      	add	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	4b08      	ldr	r3, [pc, #32]	@ (8004908 <LL_ADC_SetOffset+0x44>)
 80048e6:	4013      	ands	r3, r2
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80048fc:	bf00      	nop
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	03fff000 	.word	0x03fff000

0800490c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800490c:	b480      	push	{r7}
 800490e:	b085      	sub	sp, #20
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	3360      	adds	r3, #96	@ 0x60
 800491a:	461a      	mov	r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800492c:	4618      	mov	r0, r3
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3360      	adds	r3, #96	@ 0x60
 8004948:	461a      	mov	r2, r3
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	431a      	orrs	r2, r3
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800496e:	b480      	push	{r7}
 8004970:	b087      	sub	sp, #28
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3360      	adds	r3, #96	@ 0x60
 800497e:	461a      	mov	r2, r3
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	431a      	orrs	r2, r3
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8004998:	bf00      	nop
 800499a:	371c      	adds	r7, #28
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	3360      	adds	r3, #96	@ 0x60
 80049b4:	461a      	mov	r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80049da:	b480      	push	{r7}
 80049dc:	b083      	sub	sp, #12
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	615a      	str	r2, [r3, #20]
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b087      	sub	sp, #28
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	3330      	adds	r3, #48	@ 0x30
 8004a36:	461a      	mov	r2, r3
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	0a1b      	lsrs	r3, r3, #8
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	f003 030c 	and.w	r3, r3, #12
 8004a42:	4413      	add	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f003 031f 	and.w	r3, r3, #31
 8004a50:	211f      	movs	r1, #31
 8004a52:	fa01 f303 	lsl.w	r3, r1, r3
 8004a56:	43db      	mvns	r3, r3
 8004a58:	401a      	ands	r2, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	0e9b      	lsrs	r3, r3, #26
 8004a5e:	f003 011f 	and.w	r1, r3, #31
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004a72:	bf00      	nop
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b087      	sub	sp, #28
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3314      	adds	r3, #20
 8004a8e:	461a      	mov	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	0e5b      	lsrs	r3, r3, #25
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	4413      	add	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	0d1b      	lsrs	r3, r3, #20
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	2107      	movs	r1, #7
 8004aac:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	401a      	ands	r2, r3
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	0d1b      	lsrs	r3, r3, #20
 8004ab8:	f003 031f 	and.w	r3, r3, #31
 8004abc:	6879      	ldr	r1, [r7, #4]
 8004abe:	fa01 f303 	lsl.w	r3, r1, r3
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004ac8:	bf00      	nop
 8004aca:	371c      	adds	r7, #28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b085      	sub	sp, #20
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aec:	43db      	mvns	r3, r3
 8004aee:	401a      	ands	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f003 0318 	and.w	r3, r3, #24
 8004af6:	4908      	ldr	r1, [pc, #32]	@ (8004b18 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004af8:	40d9      	lsrs	r1, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	400b      	ands	r3, r1
 8004afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b02:	431a      	orrs	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8004b0a:	bf00      	nop
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	0007ffff 	.word	0x0007ffff

08004b1c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f003 031f 	and.w	r3, r3, #31
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8004b48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6093      	str	r3, [r2, #8]
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b70:	d101      	bne.n	8004b76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004b94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004b98:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bc0:	d101      	bne.n	8004bc6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	370c      	adds	r7, #12
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004be4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004be8:	f043 0201 	orr.w	r2, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c10:	f043 0202 	orr.w	r2, r3, #2
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <LL_ADC_IsEnabled+0x18>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <LL_ADC_IsEnabled+0x1a>
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d101      	bne.n	8004c62 <LL_ADC_IsDisableOngoing+0x18>
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <LL_ADC_IsDisableOngoing+0x1a>
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004c80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004c84:	f043 0204 	orr.w	r2, r3, #4
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d101      	bne.n	8004cb0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d101      	bne.n	8004cd6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004ce4:	b590      	push	{r4, r7, lr}
 8004ce6:	b089      	sub	sp, #36	@ 0x24
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e1a9      	b.n	8005052 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
 8004d02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d109      	bne.n	8004d20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7fe ff25 	bl	8003b5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff ff19 	bl	8004b5c <LL_ADC_IsDeepPowerDownEnabled>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff feff 	bl	8004b38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff ff34 	bl	8004bac <LL_ADC_IsInternalRegulatorEnabled>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d115      	bne.n	8004d76 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff ff18 	bl	8004b84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d54:	4b9c      	ldr	r3, [pc, #624]	@ (8004fc8 <HAL_ADC_Init+0x2e4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	099b      	lsrs	r3, r3, #6
 8004d5a:	4a9c      	ldr	r2, [pc, #624]	@ (8004fcc <HAL_ADC_Init+0x2e8>)
 8004d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d60:	099b      	lsrs	r3, r3, #6
 8004d62:	3301      	adds	r3, #1
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d68:	e002      	b.n	8004d70 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f9      	bne.n	8004d6a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7ff ff16 	bl	8004bac <LL_ADC_IsInternalRegulatorEnabled>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d10d      	bne.n	8004da2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d8a:	f043 0210 	orr.w	r2, r3, #16
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d96:	f043 0201 	orr.w	r2, r3, #1
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7ff ff76 	bl	8004c98 <LL_ADC_REG_IsConversionOngoing>
 8004dac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db2:	f003 0310 	and.w	r3, r3, #16
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f040 8142 	bne.w	8005040 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f040 813e 	bne.w	8005040 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8004dcc:	f043 0202 	orr.w	r2, r3, #2
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7ff ff23 	bl	8004c24 <LL_ADC_IsEnabled>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d141      	bne.n	8004e68 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dec:	d004      	beq.n	8004df8 <HAL_ADC_Init+0x114>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a77      	ldr	r2, [pc, #476]	@ (8004fd0 <HAL_ADC_Init+0x2ec>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d10f      	bne.n	8004e18 <HAL_ADC_Init+0x134>
 8004df8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004dfc:	f7ff ff12 	bl	8004c24 <LL_ADC_IsEnabled>
 8004e00:	4604      	mov	r4, r0
 8004e02:	4873      	ldr	r0, [pc, #460]	@ (8004fd0 <HAL_ADC_Init+0x2ec>)
 8004e04:	f7ff ff0e 	bl	8004c24 <LL_ADC_IsEnabled>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	4323      	orrs	r3, r4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bf0c      	ite	eq
 8004e10:	2301      	moveq	r3, #1
 8004e12:	2300      	movne	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	e012      	b.n	8004e3e <HAL_ADC_Init+0x15a>
 8004e18:	486e      	ldr	r0, [pc, #440]	@ (8004fd4 <HAL_ADC_Init+0x2f0>)
 8004e1a:	f7ff ff03 	bl	8004c24 <LL_ADC_IsEnabled>
 8004e1e:	4604      	mov	r4, r0
 8004e20:	486d      	ldr	r0, [pc, #436]	@ (8004fd8 <HAL_ADC_Init+0x2f4>)
 8004e22:	f7ff feff 	bl	8004c24 <LL_ADC_IsEnabled>
 8004e26:	4603      	mov	r3, r0
 8004e28:	431c      	orrs	r4, r3
 8004e2a:	486c      	ldr	r0, [pc, #432]	@ (8004fdc <HAL_ADC_Init+0x2f8>)
 8004e2c:	f7ff fefa 	bl	8004c24 <LL_ADC_IsEnabled>
 8004e30:	4603      	mov	r3, r0
 8004e32:	4323      	orrs	r3, r4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	bf0c      	ite	eq
 8004e38:	2301      	moveq	r3, #1
 8004e3a:	2300      	movne	r3, #0
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d012      	beq.n	8004e68 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e4a:	d004      	beq.n	8004e56 <HAL_ADC_Init+0x172>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a5f      	ldr	r2, [pc, #380]	@ (8004fd0 <HAL_ADC_Init+0x2ec>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d101      	bne.n	8004e5a <HAL_ADC_Init+0x176>
 8004e56:	4a62      	ldr	r2, [pc, #392]	@ (8004fe0 <HAL_ADC_Init+0x2fc>)
 8004e58:	e000      	b.n	8004e5c <HAL_ADC_Init+0x178>
 8004e5a:	4a62      	ldr	r2, [pc, #392]	@ (8004fe4 <HAL_ADC_Init+0x300>)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f7ff fcfa 	bl	800485c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	7f5b      	ldrb	r3, [r3, #29]
 8004e6c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e72:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8004e78:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8004e7e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e86:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d106      	bne.n	8004ea4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	045b      	lsls	r3, r3, #17
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d009      	beq.n	8004ec0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	4b48      	ldr	r3, [pc, #288]	@ (8004fe8 <HAL_ADC_Init+0x304>)
 8004ec8:	4013      	ands	r3, r2
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6812      	ldr	r2, [r2, #0]
 8004ece:	69b9      	ldr	r1, [r7, #24]
 8004ed0:	430b      	orrs	r3, r1
 8004ed2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7ff fee5 	bl	8004cbe <LL_ADC_INJ_IsConversionOngoing>
 8004ef4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d17f      	bne.n	8004ffc <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d17c      	bne.n	8004ffc <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f06:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f0e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f1e:	f023 0302 	bic.w	r3, r3, #2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	69b9      	ldr	r1, [r7, #24]
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	691b      	ldr	r3, [r3, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d017      	beq.n	8004f64 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004f42:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f4c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f50:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6911      	ldr	r1, [r2, #16]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6812      	ldr	r2, [r2, #0]
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8004f62:	e013      	b.n	8004f8c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691a      	ldr	r2, [r3, #16]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004f72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8004f84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004f88:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d12a      	bne.n	8004fec <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004fa0:	f023 0304 	bic.w	r3, r3, #4
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004fac:	4311      	orrs	r1, r2
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004fb2:	4311      	orrs	r1, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f042 0201 	orr.w	r2, r2, #1
 8004fc4:	611a      	str	r2, [r3, #16]
 8004fc6:	e019      	b.n	8004ffc <HAL_ADC_Init+0x318>
 8004fc8:	20000068 	.word	0x20000068
 8004fcc:	053e2d63 	.word	0x053e2d63
 8004fd0:	50000100 	.word	0x50000100
 8004fd4:	50000400 	.word	0x50000400
 8004fd8:	50000500 	.word	0x50000500
 8004fdc:	50000600 	.word	0x50000600
 8004fe0:	50000300 	.word	0x50000300
 8004fe4:	50000700 	.word	0x50000700
 8004fe8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0201 	bic.w	r2, r2, #1
 8004ffa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d10c      	bne.n	800501e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500a:	f023 010f 	bic.w	r1, r3, #15
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	1e5a      	subs	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	631a      	str	r2, [r3, #48]	@ 0x30
 800501c:	e007      	b.n	800502e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 020f 	bic.w	r2, r2, #15
 800502c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005032:	f023 0303 	bic.w	r3, r3, #3
 8005036:	f043 0201 	orr.w	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800503e:	e007      	b.n	8005050 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005044:	f043 0210 	orr.w	r2, r3, #16
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005050:	7ffb      	ldrb	r3, [r7, #31]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3724      	adds	r7, #36	@ 0x24
 8005056:	46bd      	mov	sp, r7
 8005058:	bd90      	pop	{r4, r7, pc}
 800505a:	bf00      	nop

0800505c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005070:	d004      	beq.n	800507c <HAL_ADC_Start_DMA+0x20>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a5a      	ldr	r2, [pc, #360]	@ (80051e0 <HAL_ADC_Start_DMA+0x184>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d101      	bne.n	8005080 <HAL_ADC_Start_DMA+0x24>
 800507c:	4b59      	ldr	r3, [pc, #356]	@ (80051e4 <HAL_ADC_Start_DMA+0x188>)
 800507e:	e000      	b.n	8005082 <HAL_ADC_Start_DMA+0x26>
 8005080:	4b59      	ldr	r3, [pc, #356]	@ (80051e8 <HAL_ADC_Start_DMA+0x18c>)
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff fd4a 	bl	8004b1c <LL_ADC_GetMultimode>
 8005088:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4618      	mov	r0, r3
 8005090:	f7ff fe02 	bl	8004c98 <LL_ADC_REG_IsConversionOngoing>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	f040 809b 	bne.w	80051d2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d101      	bne.n	80050aa <HAL_ADC_Start_DMA+0x4e>
 80050a6:	2302      	movs	r3, #2
 80050a8:	e096      	b.n	80051d8 <HAL_ADC_Start_DMA+0x17c>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a4d      	ldr	r2, [pc, #308]	@ (80051ec <HAL_ADC_Start_DMA+0x190>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d008      	beq.n	80050ce <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	2b05      	cmp	r3, #5
 80050c6:	d002      	beq.n	80050ce <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	2b09      	cmp	r3, #9
 80050cc:	d17a      	bne.n	80051c4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80050ce:	68f8      	ldr	r0, [r7, #12]
 80050d0:	f000 fcec 	bl	8005aac <ADC_Enable>
 80050d4:	4603      	mov	r3, r0
 80050d6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d16d      	bne.n	80051ba <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80050e6:	f023 0301 	bic.w	r3, r3, #1
 80050ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a3a      	ldr	r2, [pc, #232]	@ (80051e0 <HAL_ADC_Start_DMA+0x184>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d009      	beq.n	8005110 <HAL_ADC_Start_DMA+0xb4>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a3b      	ldr	r2, [pc, #236]	@ (80051f0 <HAL_ADC_Start_DMA+0x194>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d002      	beq.n	800510c <HAL_ADC_Start_DMA+0xb0>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	e003      	b.n	8005114 <HAL_ADC_Start_DMA+0xb8>
 800510c:	4b39      	ldr	r3, [pc, #228]	@ (80051f4 <HAL_ADC_Start_DMA+0x198>)
 800510e:	e001      	b.n	8005114 <HAL_ADC_Start_DMA+0xb8>
 8005110:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	6812      	ldr	r2, [r2, #0]
 8005118:	4293      	cmp	r3, r2
 800511a:	d002      	beq.n	8005122 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d105      	bne.n	800512e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005126:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005132:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d006      	beq.n	8005148 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800513e:	f023 0206 	bic.w	r2, r3, #6
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	661a      	str	r2, [r3, #96]	@ 0x60
 8005146:	e002      	b.n	800514e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2200      	movs	r2, #0
 800514c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005152:	4a29      	ldr	r2, [pc, #164]	@ (80051f8 <HAL_ADC_Start_DMA+0x19c>)
 8005154:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800515a:	4a28      	ldr	r2, [pc, #160]	@ (80051fc <HAL_ADC_Start_DMA+0x1a0>)
 800515c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005162:	4a27      	ldr	r2, [pc, #156]	@ (8005200 <HAL_ADC_Start_DMA+0x1a4>)
 8005164:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	221c      	movs	r2, #28
 800516c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0210 	orr.w	r2, r2, #16
 8005184:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0201 	orr.w	r2, r2, #1
 8005194:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	3340      	adds	r3, #64	@ 0x40
 80051a0:	4619      	mov	r1, r3
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f001 fd97 	bl	8006cd8 <HAL_DMA_Start_IT>
 80051aa:	4603      	mov	r3, r0
 80051ac:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7ff fd5c 	bl	8004c70 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80051b8:	e00d      	b.n	80051d6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80051c2:	e008      	b.n	80051d6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80051d0:	e001      	b.n	80051d6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80051d2:	2302      	movs	r3, #2
 80051d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80051d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	50000100 	.word	0x50000100
 80051e4:	50000300 	.word	0x50000300
 80051e8:	50000700 	.word	0x50000700
 80051ec:	50000600 	.word	0x50000600
 80051f0:	50000500 	.word	0x50000500
 80051f4:	50000400 	.word	0x50000400
 80051f8:	08005c97 	.word	0x08005c97
 80051fc:	08005d6f 	.word	0x08005d6f
 8005200:	08005d8b 	.word	0x08005d8b

08005204 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b0b6      	sub	sp, #216	@ 0xd8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800523c:	2300      	movs	r3, #0
 800523e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005246:	2b01      	cmp	r3, #1
 8005248:	d102      	bne.n	8005250 <HAL_ADC_ConfigChannel+0x24>
 800524a:	2302      	movs	r3, #2
 800524c:	f000 bc13 	b.w	8005a76 <HAL_ADC_ConfigChannel+0x84a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f7ff fd1b 	bl	8004c98 <LL_ADC_REG_IsConversionOngoing>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	f040 83f3 	bne.w	8005a50 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6859      	ldr	r1, [r3, #4]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	f7ff fbd5 	bl	8004a26 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff fd09 	bl	8004c98 <LL_ADC_REG_IsConversionOngoing>
 8005286:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4618      	mov	r0, r3
 8005290:	f7ff fd15 	bl	8004cbe <LL_ADC_INJ_IsConversionOngoing>
 8005294:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005298:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800529c:	2b00      	cmp	r3, #0
 800529e:	f040 81d9 	bne.w	8005654 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80052a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f040 81d4 	bne.w	8005654 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80052b4:	d10f      	bne.n	80052d6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6818      	ldr	r0, [r3, #0]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2200      	movs	r2, #0
 80052c0:	4619      	mov	r1, r3
 80052c2:	f7ff fbdc 	bl	8004a7e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff fb83 	bl	80049da <LL_ADC_SetSamplingTimeCommonConfig>
 80052d4:	e00e      	b.n	80052f4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6819      	ldr	r1, [r3, #0]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f7ff fbcb 	bl	8004a7e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2100      	movs	r1, #0
 80052ee:	4618      	mov	r0, r3
 80052f0:	f7ff fb73 	bl	80049da <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	08db      	lsrs	r3, r3, #3
 8005300:	f003 0303 	and.w	r3, r3, #3
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	2b04      	cmp	r3, #4
 8005314:	d022      	beq.n	800535c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6818      	ldr	r0, [r3, #0]
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	6919      	ldr	r1, [r3, #16]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005326:	f7ff facd 	bl	80048c4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6919      	ldr	r1, [r3, #16]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	461a      	mov	r2, r3
 8005338:	f7ff fb19 	bl	800496e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005348:	2b01      	cmp	r3, #1
 800534a:	d102      	bne.n	8005352 <HAL_ADC_ConfigChannel+0x126>
 800534c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005350:	e000      	b.n	8005354 <HAL_ADC_ConfigChannel+0x128>
 8005352:	2300      	movs	r3, #0
 8005354:	461a      	mov	r2, r3
 8005356:	f7ff fb25 	bl	80049a4 <LL_ADC_SetOffsetSaturation>
 800535a:	e17b      	b.n	8005654 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2100      	movs	r1, #0
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff fad2 	bl	800490c <LL_ADC_GetOffsetChannel>
 8005368:	4603      	mov	r3, r0
 800536a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10a      	bne.n	8005388 <HAL_ADC_ConfigChannel+0x15c>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f7ff fac7 	bl	800490c <LL_ADC_GetOffsetChannel>
 800537e:	4603      	mov	r3, r0
 8005380:	0e9b      	lsrs	r3, r3, #26
 8005382:	f003 021f 	and.w	r2, r3, #31
 8005386:	e01e      	b.n	80053c6 <HAL_ADC_ConfigChannel+0x19a>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2100      	movs	r1, #0
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fabc 	bl	800490c <LL_ADC_GetOffsetChannel>
 8005394:	4603      	mov	r3, r0
 8005396:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800539e:	fa93 f3a3 	rbit	r3, r3
 80053a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80053a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80053aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80053ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80053b6:	2320      	movs	r3, #32
 80053b8:	e004      	b.n	80053c4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80053ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80053be:	fab3 f383 	clz	r3, r3
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d105      	bne.n	80053de <HAL_ADC_ConfigChannel+0x1b2>
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	0e9b      	lsrs	r3, r3, #26
 80053d8:	f003 031f 	and.w	r3, r3, #31
 80053dc:	e018      	b.n	8005410 <HAL_ADC_ConfigChannel+0x1e4>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80053ea:	fa93 f3a3 	rbit	r3, r3
 80053ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80053f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80053f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80053fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005402:	2320      	movs	r3, #32
 8005404:	e004      	b.n	8005410 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800540a:	fab3 f383 	clz	r3, r3
 800540e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005410:	429a      	cmp	r2, r3
 8005412:	d106      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2200      	movs	r2, #0
 800541a:	2100      	movs	r1, #0
 800541c:	4618      	mov	r0, r3
 800541e:	f7ff fa8b 	bl	8004938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2101      	movs	r1, #1
 8005428:	4618      	mov	r0, r3
 800542a:	f7ff fa6f 	bl	800490c <LL_ADC_GetOffsetChannel>
 800542e:	4603      	mov	r3, r0
 8005430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <HAL_ADC_ConfigChannel+0x222>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2101      	movs	r1, #1
 800543e:	4618      	mov	r0, r3
 8005440:	f7ff fa64 	bl	800490c <LL_ADC_GetOffsetChannel>
 8005444:	4603      	mov	r3, r0
 8005446:	0e9b      	lsrs	r3, r3, #26
 8005448:	f003 021f 	and.w	r2, r3, #31
 800544c:	e01e      	b.n	800548c <HAL_ADC_ConfigChannel+0x260>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2101      	movs	r1, #1
 8005454:	4618      	mov	r0, r3
 8005456:	f7ff fa59 	bl	800490c <LL_ADC_GetOffsetChannel>
 800545a:	4603      	mov	r3, r0
 800545c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005460:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005464:	fa93 f3a3 	rbit	r3, r3
 8005468:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 800546c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005470:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005478:	2b00      	cmp	r3, #0
 800547a:	d101      	bne.n	8005480 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800547c:	2320      	movs	r3, #32
 800547e:	e004      	b.n	800548a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005480:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005484:	fab3 f383 	clz	r3, r3
 8005488:	b2db      	uxtb	r3, r3
 800548a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005494:	2b00      	cmp	r3, #0
 8005496:	d105      	bne.n	80054a4 <HAL_ADC_ConfigChannel+0x278>
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	0e9b      	lsrs	r3, r3, #26
 800549e:	f003 031f 	and.w	r3, r3, #31
 80054a2:	e018      	b.n	80054d6 <HAL_ADC_ConfigChannel+0x2aa>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80054b0:	fa93 f3a3 	rbit	r3, r3
 80054b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80054b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80054bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80054c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d101      	bne.n	80054cc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80054c8:	2320      	movs	r3, #32
 80054ca:	e004      	b.n	80054d6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80054cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80054d0:	fab3 f383 	clz	r3, r3
 80054d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d106      	bne.n	80054e8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2200      	movs	r2, #0
 80054e0:	2101      	movs	r1, #1
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7ff fa28 	bl	8004938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2102      	movs	r1, #2
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff fa0c 	bl	800490c <LL_ADC_GetOffsetChannel>
 80054f4:	4603      	mov	r3, r0
 80054f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10a      	bne.n	8005514 <HAL_ADC_ConfigChannel+0x2e8>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2102      	movs	r1, #2
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff fa01 	bl	800490c <LL_ADC_GetOffsetChannel>
 800550a:	4603      	mov	r3, r0
 800550c:	0e9b      	lsrs	r3, r3, #26
 800550e:	f003 021f 	and.w	r2, r3, #31
 8005512:	e01e      	b.n	8005552 <HAL_ADC_ConfigChannel+0x326>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2102      	movs	r1, #2
 800551a:	4618      	mov	r0, r3
 800551c:	f7ff f9f6 	bl	800490c <LL_ADC_GetOffsetChannel>
 8005520:	4603      	mov	r3, r0
 8005522:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005526:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800552a:	fa93 f3a3 	rbit	r3, r3
 800552e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005532:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005536:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800553a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800553e:	2b00      	cmp	r3, #0
 8005540:	d101      	bne.n	8005546 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005542:	2320      	movs	r3, #32
 8005544:	e004      	b.n	8005550 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005546:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800554a:	fab3 f383 	clz	r3, r3
 800554e:	b2db      	uxtb	r3, r3
 8005550:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800555a:	2b00      	cmp	r3, #0
 800555c:	d105      	bne.n	800556a <HAL_ADC_ConfigChannel+0x33e>
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	0e9b      	lsrs	r3, r3, #26
 8005564:	f003 031f 	and.w	r3, r3, #31
 8005568:	e016      	b.n	8005598 <HAL_ADC_ConfigChannel+0x36c>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005572:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005576:	fa93 f3a3 	rbit	r3, r3
 800557a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 800557c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800557e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005582:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800558a:	2320      	movs	r3, #32
 800558c:	e004      	b.n	8005598 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800558e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005592:	fab3 f383 	clz	r3, r3
 8005596:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005598:	429a      	cmp	r2, r3
 800559a:	d106      	bne.n	80055aa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2200      	movs	r2, #0
 80055a2:	2102      	movs	r1, #2
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7ff f9c7 	bl	8004938 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2103      	movs	r1, #3
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7ff f9ab 	bl	800490c <LL_ADC_GetOffsetChannel>
 80055b6:	4603      	mov	r3, r0
 80055b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <HAL_ADC_ConfigChannel+0x3aa>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2103      	movs	r1, #3
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff f9a0 	bl	800490c <LL_ADC_GetOffsetChannel>
 80055cc:	4603      	mov	r3, r0
 80055ce:	0e9b      	lsrs	r3, r3, #26
 80055d0:	f003 021f 	and.w	r2, r3, #31
 80055d4:	e017      	b.n	8005606 <HAL_ADC_ConfigChannel+0x3da>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2103      	movs	r1, #3
 80055dc:	4618      	mov	r0, r3
 80055de:	f7ff f995 	bl	800490c <LL_ADC_GetOffsetChannel>
 80055e2:	4603      	mov	r3, r0
 80055e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055e8:	fa93 f3a3 	rbit	r3, r3
 80055ec:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80055ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055f0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80055f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80055f8:	2320      	movs	r3, #32
 80055fa:	e003      	b.n	8005604 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80055fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055fe:	fab3 f383 	clz	r3, r3
 8005602:	b2db      	uxtb	r3, r3
 8005604:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800560e:	2b00      	cmp	r3, #0
 8005610:	d105      	bne.n	800561e <HAL_ADC_ConfigChannel+0x3f2>
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	0e9b      	lsrs	r3, r3, #26
 8005618:	f003 031f 	and.w	r3, r3, #31
 800561c:	e011      	b.n	8005642 <HAL_ADC_ConfigChannel+0x416>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005624:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005626:	fa93 f3a3 	rbit	r3, r3
 800562a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 800562c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800562e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005630:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8005636:	2320      	movs	r3, #32
 8005638:	e003      	b.n	8005642 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800563a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800563c:	fab3 f383 	clz	r3, r3
 8005640:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005642:	429a      	cmp	r2, r3
 8005644:	d106      	bne.n	8005654 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2200      	movs	r2, #0
 800564c:	2103      	movs	r1, #3
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff f972 	bl	8004938 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff fae3 	bl	8004c24 <LL_ADC_IsEnabled>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	f040 813d 	bne.w	80058e0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	6819      	ldr	r1, [r3, #0]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	461a      	mov	r2, r3
 8005674:	f7ff fa2e 	bl	8004ad4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	4aa2      	ldr	r2, [pc, #648]	@ (8005908 <HAL_ADC_ConfigChannel+0x6dc>)
 800567e:	4293      	cmp	r3, r2
 8005680:	f040 812e 	bne.w	80058e0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005690:	2b00      	cmp	r3, #0
 8005692:	d10b      	bne.n	80056ac <HAL_ADC_ConfigChannel+0x480>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	0e9b      	lsrs	r3, r3, #26
 800569a:	3301      	adds	r3, #1
 800569c:	f003 031f 	and.w	r3, r3, #31
 80056a0:	2b09      	cmp	r3, #9
 80056a2:	bf94      	ite	ls
 80056a4:	2301      	movls	r3, #1
 80056a6:	2300      	movhi	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	e019      	b.n	80056e0 <HAL_ADC_ConfigChannel+0x4b4>
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056b4:	fa93 f3a3 	rbit	r3, r3
 80056b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80056ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80056bc:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80056be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80056c4:	2320      	movs	r3, #32
 80056c6:	e003      	b.n	80056d0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80056c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056ca:	fab3 f383 	clz	r3, r3
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	3301      	adds	r3, #1
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	2b09      	cmp	r3, #9
 80056d8:	bf94      	ite	ls
 80056da:	2301      	movls	r3, #1
 80056dc:	2300      	movhi	r3, #0
 80056de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d079      	beq.n	80057d8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d107      	bne.n	8005700 <HAL_ADC_ConfigChannel+0x4d4>
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	0e9b      	lsrs	r3, r3, #26
 80056f6:	3301      	adds	r3, #1
 80056f8:	069b      	lsls	r3, r3, #26
 80056fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80056fe:	e015      	b.n	800572c <HAL_ADC_ConfigChannel+0x500>
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005708:	fa93 f3a3 	rbit	r3, r3
 800570c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800570e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005710:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8005718:	2320      	movs	r3, #32
 800571a:	e003      	b.n	8005724 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800571c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800571e:	fab3 f383 	clz	r3, r3
 8005722:	b2db      	uxtb	r3, r3
 8005724:	3301      	adds	r3, #1
 8005726:	069b      	lsls	r3, r3, #26
 8005728:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <HAL_ADC_ConfigChannel+0x520>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	0e9b      	lsrs	r3, r3, #26
 800573e:	3301      	adds	r3, #1
 8005740:	f003 031f 	and.w	r3, r3, #31
 8005744:	2101      	movs	r1, #1
 8005746:	fa01 f303 	lsl.w	r3, r1, r3
 800574a:	e017      	b.n	800577c <HAL_ADC_ConfigChannel+0x550>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005754:	fa93 f3a3 	rbit	r3, r3
 8005758:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800575a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800575c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800575e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005760:	2b00      	cmp	r3, #0
 8005762:	d101      	bne.n	8005768 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8005764:	2320      	movs	r3, #32
 8005766:	e003      	b.n	8005770 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8005768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800576a:	fab3 f383 	clz	r3, r3
 800576e:	b2db      	uxtb	r3, r3
 8005770:	3301      	adds	r3, #1
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	2101      	movs	r1, #1
 8005778:	fa01 f303 	lsl.w	r3, r1, r3
 800577c:	ea42 0103 	orr.w	r1, r2, r3
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10a      	bne.n	80057a2 <HAL_ADC_ConfigChannel+0x576>
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	0e9b      	lsrs	r3, r3, #26
 8005792:	3301      	adds	r3, #1
 8005794:	f003 021f 	and.w	r2, r3, #31
 8005798:	4613      	mov	r3, r2
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	4413      	add	r3, r2
 800579e:	051b      	lsls	r3, r3, #20
 80057a0:	e018      	b.n	80057d4 <HAL_ADC_ConfigChannel+0x5a8>
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057aa:	fa93 f3a3 	rbit	r3, r3
 80057ae:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80057b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80057b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80057ba:	2320      	movs	r3, #32
 80057bc:	e003      	b.n	80057c6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80057be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c0:	fab3 f383 	clz	r3, r3
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	3301      	adds	r3, #1
 80057c8:	f003 021f 	and.w	r2, r3, #31
 80057cc:	4613      	mov	r3, r2
 80057ce:	005b      	lsls	r3, r3, #1
 80057d0:	4413      	add	r3, r2
 80057d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057d4:	430b      	orrs	r3, r1
 80057d6:	e07e      	b.n	80058d6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d107      	bne.n	80057f4 <HAL_ADC_ConfigChannel+0x5c8>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	0e9b      	lsrs	r3, r3, #26
 80057ea:	3301      	adds	r3, #1
 80057ec:	069b      	lsls	r3, r3, #26
 80057ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80057f2:	e015      	b.n	8005820 <HAL_ADC_ConfigChannel+0x5f4>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057fc:	fa93 f3a3 	rbit	r3, r3
 8005800:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005804:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800580c:	2320      	movs	r3, #32
 800580e:	e003      	b.n	8005818 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005812:	fab3 f383 	clz	r3, r3
 8005816:	b2db      	uxtb	r3, r3
 8005818:	3301      	adds	r3, #1
 800581a:	069b      	lsls	r3, r3, #26
 800581c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005828:	2b00      	cmp	r3, #0
 800582a:	d109      	bne.n	8005840 <HAL_ADC_ConfigChannel+0x614>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	0e9b      	lsrs	r3, r3, #26
 8005832:	3301      	adds	r3, #1
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	2101      	movs	r1, #1
 800583a:	fa01 f303 	lsl.w	r3, r1, r3
 800583e:	e017      	b.n	8005870 <HAL_ADC_ConfigChannel+0x644>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	fa93 f3a3 	rbit	r3, r3
 800584c:	61fb      	str	r3, [r7, #28]
  return result;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8005858:	2320      	movs	r3, #32
 800585a:	e003      	b.n	8005864 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	3301      	adds	r3, #1
 8005866:	f003 031f 	and.w	r3, r3, #31
 800586a:	2101      	movs	r1, #1
 800586c:	fa01 f303 	lsl.w	r3, r1, r3
 8005870:	ea42 0103 	orr.w	r1, r2, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10d      	bne.n	800589c <HAL_ADC_ConfigChannel+0x670>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	0e9b      	lsrs	r3, r3, #26
 8005886:	3301      	adds	r3, #1
 8005888:	f003 021f 	and.w	r2, r3, #31
 800588c:	4613      	mov	r3, r2
 800588e:	005b      	lsls	r3, r3, #1
 8005890:	4413      	add	r3, r2
 8005892:	3b1e      	subs	r3, #30
 8005894:	051b      	lsls	r3, r3, #20
 8005896:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800589a:	e01b      	b.n	80058d4 <HAL_ADC_ConfigChannel+0x6a8>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	fa93 f3a3 	rbit	r3, r3
 80058a8:	613b      	str	r3, [r7, #16]
  return result;
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80058b4:	2320      	movs	r3, #32
 80058b6:	e003      	b.n	80058c0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	fab3 f383 	clz	r3, r3
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	3301      	adds	r3, #1
 80058c2:	f003 021f 	and.w	r2, r3, #31
 80058c6:	4613      	mov	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	4413      	add	r3, r2
 80058cc:	3b1e      	subs	r3, #30
 80058ce:	051b      	lsls	r3, r3, #20
 80058d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058d4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80058da:	4619      	mov	r1, r3
 80058dc:	f7ff f8cf 	bl	8004a7e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681a      	ldr	r2, [r3, #0]
 80058e4:	4b09      	ldr	r3, [pc, #36]	@ (800590c <HAL_ADC_ConfigChannel+0x6e0>)
 80058e6:	4013      	ands	r3, r2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 80be 	beq.w	8005a6a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058f6:	d004      	beq.n	8005902 <HAL_ADC_ConfigChannel+0x6d6>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a04      	ldr	r2, [pc, #16]	@ (8005910 <HAL_ADC_ConfigChannel+0x6e4>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d10a      	bne.n	8005918 <HAL_ADC_ConfigChannel+0x6ec>
 8005902:	4b04      	ldr	r3, [pc, #16]	@ (8005914 <HAL_ADC_ConfigChannel+0x6e8>)
 8005904:	e009      	b.n	800591a <HAL_ADC_ConfigChannel+0x6ee>
 8005906:	bf00      	nop
 8005908:	407f0000 	.word	0x407f0000
 800590c:	80080000 	.word	0x80080000
 8005910:	50000100 	.word	0x50000100
 8005914:	50000300 	.word	0x50000300
 8005918:	4b59      	ldr	r3, [pc, #356]	@ (8005a80 <HAL_ADC_ConfigChannel+0x854>)
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe ffc4 	bl	80048a8 <LL_ADC_GetCommonPathInternalCh>
 8005920:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a56      	ldr	r2, [pc, #344]	@ (8005a84 <HAL_ADC_ConfigChannel+0x858>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d004      	beq.n	8005938 <HAL_ADC_ConfigChannel+0x70c>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a55      	ldr	r2, [pc, #340]	@ (8005a88 <HAL_ADC_ConfigChannel+0x85c>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d13a      	bne.n	80059ae <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005938:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800593c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d134      	bne.n	80059ae <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800594c:	d005      	beq.n	800595a <HAL_ADC_ConfigChannel+0x72e>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a4e      	ldr	r2, [pc, #312]	@ (8005a8c <HAL_ADC_ConfigChannel+0x860>)
 8005954:	4293      	cmp	r3, r2
 8005956:	f040 8085 	bne.w	8005a64 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005962:	d004      	beq.n	800596e <HAL_ADC_ConfigChannel+0x742>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a49      	ldr	r2, [pc, #292]	@ (8005a90 <HAL_ADC_ConfigChannel+0x864>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d101      	bne.n	8005972 <HAL_ADC_ConfigChannel+0x746>
 800596e:	4a49      	ldr	r2, [pc, #292]	@ (8005a94 <HAL_ADC_ConfigChannel+0x868>)
 8005970:	e000      	b.n	8005974 <HAL_ADC_ConfigChannel+0x748>
 8005972:	4a43      	ldr	r2, [pc, #268]	@ (8005a80 <HAL_ADC_ConfigChannel+0x854>)
 8005974:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005978:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800597c:	4619      	mov	r1, r3
 800597e:	4610      	mov	r0, r2
 8005980:	f7fe ff7f 	bl	8004882 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005984:	4b44      	ldr	r3, [pc, #272]	@ (8005a98 <HAL_ADC_ConfigChannel+0x86c>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	099b      	lsrs	r3, r3, #6
 800598a:	4a44      	ldr	r2, [pc, #272]	@ (8005a9c <HAL_ADC_ConfigChannel+0x870>)
 800598c:	fba2 2303 	umull	r2, r3, r2, r3
 8005990:	099b      	lsrs	r3, r3, #6
 8005992:	1c5a      	adds	r2, r3, #1
 8005994:	4613      	mov	r3, r2
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	4413      	add	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800599e:	e002      	b.n	80059a6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	3b01      	subs	r3, #1
 80059a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f9      	bne.n	80059a0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80059ac:	e05a      	b.n	8005a64 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a3b      	ldr	r2, [pc, #236]	@ (8005aa0 <HAL_ADC_ConfigChannel+0x874>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d125      	bne.n	8005a04 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80059b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d11f      	bne.n	8005a04 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a31      	ldr	r2, [pc, #196]	@ (8005a90 <HAL_ADC_ConfigChannel+0x864>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d104      	bne.n	80059d8 <HAL_ADC_ConfigChannel+0x7ac>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a34      	ldr	r2, [pc, #208]	@ (8005aa4 <HAL_ADC_ConfigChannel+0x878>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d047      	beq.n	8005a68 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80059e0:	d004      	beq.n	80059ec <HAL_ADC_ConfigChannel+0x7c0>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a2a      	ldr	r2, [pc, #168]	@ (8005a90 <HAL_ADC_ConfigChannel+0x864>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d101      	bne.n	80059f0 <HAL_ADC_ConfigChannel+0x7c4>
 80059ec:	4a29      	ldr	r2, [pc, #164]	@ (8005a94 <HAL_ADC_ConfigChannel+0x868>)
 80059ee:	e000      	b.n	80059f2 <HAL_ADC_ConfigChannel+0x7c6>
 80059f0:	4a23      	ldr	r2, [pc, #140]	@ (8005a80 <HAL_ADC_ConfigChannel+0x854>)
 80059f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80059f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80059fa:	4619      	mov	r1, r3
 80059fc:	4610      	mov	r0, r2
 80059fe:	f7fe ff40 	bl	8004882 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a02:	e031      	b.n	8005a68 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a27      	ldr	r2, [pc, #156]	@ (8005aa8 <HAL_ADC_ConfigChannel+0x87c>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d12d      	bne.n	8005a6a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005a0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d127      	bne.n	8005a6a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a1c      	ldr	r2, [pc, #112]	@ (8005a90 <HAL_ADC_ConfigChannel+0x864>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d022      	beq.n	8005a6a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a2c:	d004      	beq.n	8005a38 <HAL_ADC_ConfigChannel+0x80c>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a17      	ldr	r2, [pc, #92]	@ (8005a90 <HAL_ADC_ConfigChannel+0x864>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d101      	bne.n	8005a3c <HAL_ADC_ConfigChannel+0x810>
 8005a38:	4a16      	ldr	r2, [pc, #88]	@ (8005a94 <HAL_ADC_ConfigChannel+0x868>)
 8005a3a:	e000      	b.n	8005a3e <HAL_ADC_ConfigChannel+0x812>
 8005a3c:	4a10      	ldr	r2, [pc, #64]	@ (8005a80 <HAL_ADC_ConfigChannel+0x854>)
 8005a3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005a42:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005a46:	4619      	mov	r1, r3
 8005a48:	4610      	mov	r0, r2
 8005a4a:	f7fe ff1a 	bl	8004882 <LL_ADC_SetCommonPathInternalCh>
 8005a4e:	e00c      	b.n	8005a6a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a54:	f043 0220 	orr.w	r2, r3, #32
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8005a62:	e002      	b.n	8005a6a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005a64:	bf00      	nop
 8005a66:	e000      	b.n	8005a6a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005a68:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a72:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	37d8      	adds	r7, #216	@ 0xd8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	50000700 	.word	0x50000700
 8005a84:	c3210000 	.word	0xc3210000
 8005a88:	90c00010 	.word	0x90c00010
 8005a8c:	50000600 	.word	0x50000600
 8005a90:	50000100 	.word	0x50000100
 8005a94:	50000300 	.word	0x50000300
 8005a98:	20000068 	.word	0x20000068
 8005a9c:	053e2d63 	.word	0x053e2d63
 8005aa0:	c7520000 	.word	0xc7520000
 8005aa4:	50000500 	.word	0x50000500
 8005aa8:	cb840000 	.word	0xcb840000

08005aac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff f8b1 	bl	8004c24 <LL_ADC_IsEnabled>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d176      	bne.n	8005bb6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689a      	ldr	r2, [r3, #8]
 8005ace:	4b3c      	ldr	r3, [pc, #240]	@ (8005bc0 <ADC_Enable+0x114>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00d      	beq.n	8005af2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ada:	f043 0210 	orr.w	r2, r3, #16
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae6:	f043 0201 	orr.w	r2, r3, #1
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e062      	b.n	8005bb8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff f86c 	bl	8004bd4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b04:	d004      	beq.n	8005b10 <ADC_Enable+0x64>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8005bc4 <ADC_Enable+0x118>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d101      	bne.n	8005b14 <ADC_Enable+0x68>
 8005b10:	4b2d      	ldr	r3, [pc, #180]	@ (8005bc8 <ADC_Enable+0x11c>)
 8005b12:	e000      	b.n	8005b16 <ADC_Enable+0x6a>
 8005b14:	4b2d      	ldr	r3, [pc, #180]	@ (8005bcc <ADC_Enable+0x120>)
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe fec6 	bl	80048a8 <LL_ADC_GetCommonPathInternalCh>
 8005b1c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005b1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d013      	beq.n	8005b4e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005b26:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd0 <ADC_Enable+0x124>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	099b      	lsrs	r3, r3, #6
 8005b2c:	4a29      	ldr	r2, [pc, #164]	@ (8005bd4 <ADC_Enable+0x128>)
 8005b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b32:	099b      	lsrs	r3, r3, #6
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	4613      	mov	r3, r2
 8005b38:	005b      	lsls	r3, r3, #1
 8005b3a:	4413      	add	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005b40:	e002      	b.n	8005b48 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1f9      	bne.n	8005b42 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005b4e:	f7fe fe57 	bl	8004800 <HAL_GetTick>
 8005b52:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b54:	e028      	b.n	8005ba8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff f862 	bl	8004c24 <LL_ADC_IsEnabled>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d104      	bne.n	8005b70 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff f832 	bl	8004bd4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005b70:	f7fe fe46 	bl	8004800 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d914      	bls.n	8005ba8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d00d      	beq.n	8005ba8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b90:	f043 0210 	orr.w	r2, r3, #16
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b9c:	f043 0201 	orr.w	r2, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e007      	b.n	8005bb8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d1cf      	bne.n	8005b56 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	8000003f 	.word	0x8000003f
 8005bc4:	50000100 	.word	0x50000100
 8005bc8:	50000300 	.word	0x50000300
 8005bcc:	50000700 	.word	0x50000700
 8005bd0:	20000068 	.word	0x20000068
 8005bd4:	053e2d63 	.word	0x053e2d63

08005bd8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff f830 	bl	8004c4a <LL_ADC_IsDisableOngoing>
 8005bea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff f817 	bl	8004c24 <LL_ADC_IsEnabled>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d047      	beq.n	8005c8c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d144      	bne.n	8005c8c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	f003 030d 	and.w	r3, r3, #13
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d10c      	bne.n	8005c2a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fe fff1 	bl	8004bfc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2203      	movs	r2, #3
 8005c20:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005c22:	f7fe fded 	bl	8004800 <HAL_GetTick>
 8005c26:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c28:	e029      	b.n	8005c7e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c2e:	f043 0210 	orr.w	r2, r3, #16
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c3a:	f043 0201 	orr.w	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e023      	b.n	8005c8e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005c46:	f7fe fddb 	bl	8004800 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d914      	bls.n	8005c7e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00d      	beq.n	8005c7e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c66:	f043 0210 	orr.w	r2, r3, #16
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c72:	f043 0201 	orr.w	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e007      	b.n	8005c8e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1dc      	bne.n	8005c46 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b084      	sub	sp, #16
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d14b      	bne.n	8005d48 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d021      	beq.n	8005d0e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fe fe96 	bl	8004a00 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d032      	beq.n	8005d40 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d12b      	bne.n	8005d40 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d11f      	bne.n	8005d40 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d04:	f043 0201 	orr.w	r2, r3, #1
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d0c:	e018      	b.n	8005d40 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f003 0302 	and.w	r3, r3, #2
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d111      	bne.n	8005d40 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d105      	bne.n	8005d40 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d38:	f043 0201 	orr.w	r2, r3, #1
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f7fc fea9 	bl	8002a98 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005d46:	e00e      	b.n	8005d66 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d4c:	f003 0310 	and.w	r3, r3, #16
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d003      	beq.n	8005d5c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f7ff fa5f 	bl	8005218 <HAL_ADC_ErrorCallback>
}
 8005d5a:	e004      	b.n	8005d66 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	4798      	blx	r3
}
 8005d66:	bf00      	nop
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}

08005d6e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005d6e:	b580      	push	{r7, lr}
 8005d70:	b084      	sub	sp, #16
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff fa41 	bl	8005204 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005d82:	bf00      	nop
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d9c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da8:	f043 0204 	orr.w	r2, r3, #4
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f7ff fa31 	bl	8005218 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005db6:	bf00      	nop
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <LL_ADC_IsEnabled>:
{
 8005dbe:	b480      	push	{r7}
 8005dc0:	b083      	sub	sp, #12
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <LL_ADC_IsEnabled+0x18>
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e000      	b.n	8005dd8 <LL_ADC_IsEnabled+0x1a>
 8005dd6:	2300      	movs	r3, #0
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <LL_ADC_StartCalibration>:
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8005df6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	609a      	str	r2, [r3, #8]
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <LL_ADC_IsCalibrationOnGoing>:
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e2a:	d101      	bne.n	8005e30 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e000      	b.n	8005e32 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005e30:	2300      	movs	r3, #0
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <LL_ADC_REG_IsConversionOngoing>:
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 0304 	and.w	r3, r3, #4
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	d101      	bne.n	8005e56 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005e52:	2301      	movs	r3, #1
 8005e54:	e000      	b.n	8005e58 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <HAL_ADCEx_Calibration_Start+0x1c>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e04d      	b.n	8005f1c <HAL_ADCEx_Calibration_Start+0xb8>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff fea5 	bl	8005bd8 <ADC_Disable>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d136      	bne.n	8005f06 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e9c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8005ea0:	f023 0302 	bic.w	r3, r3, #2
 8005ea4:	f043 0202 	orr.w	r2, r3, #2
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff ff96 	bl	8005de4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005eb8:	e014      	b.n	8005ee4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4a18      	ldr	r2, [pc, #96]	@ (8005f24 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d90d      	bls.n	8005ee4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ecc:	f023 0312 	bic.w	r3, r3, #18
 8005ed0:	f043 0210 	orr.w	r2, r3, #16
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e01b      	b.n	8005f1c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff ff94 	bl	8005e16 <LL_ADC_IsCalibrationOnGoing>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e2      	bne.n	8005eba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ef8:	f023 0303 	bic.w	r3, r3, #3
 8005efc:	f043 0201 	orr.w	r2, r3, #1
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f04:	e005      	b.n	8005f12 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f0a:	f043 0210 	orr.w	r2, r3, #16
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	0004de01 	.word	0x0004de01

08005f28 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005f28:	b590      	push	{r4, r7, lr}
 8005f2a:	b0a1      	sub	sp, #132	@ 0x84
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f32:	2300      	movs	r3, #0
 8005f34:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d101      	bne.n	8005f46 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005f42:	2302      	movs	r3, #2
 8005f44:	e0e7      	b.n	8006116 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8005f4e:	2300      	movs	r3, #0
 8005f50:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005f52:	2300      	movs	r3, #0
 8005f54:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f5e:	d102      	bne.n	8005f66 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005f60:	4b6f      	ldr	r3, [pc, #444]	@ (8006120 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005f62:	60bb      	str	r3, [r7, #8]
 8005f64:	e009      	b.n	8005f7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a6e      	ldr	r2, [pc, #440]	@ (8006124 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d102      	bne.n	8005f76 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8005f70:	4b6d      	ldr	r3, [pc, #436]	@ (8006128 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8005f72:	60bb      	str	r3, [r7, #8]
 8005f74:	e001      	b.n	8005f7a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10b      	bne.n	8005f98 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f84:	f043 0220 	orr.w	r2, r3, #32
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e0be      	b.n	8006116 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f7ff ff4f 	bl	8005e3e <LL_ADC_REG_IsConversionOngoing>
 8005fa0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7ff ff49 	bl	8005e3e <LL_ADC_REG_IsConversionOngoing>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f040 80a0 	bne.w	80060f4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f040 809c 	bne.w	80060f4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005fc4:	d004      	beq.n	8005fd0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a55      	ldr	r2, [pc, #340]	@ (8006120 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d101      	bne.n	8005fd4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8005fd0:	4b56      	ldr	r3, [pc, #344]	@ (800612c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8005fd2:	e000      	b.n	8005fd6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005fd4:	4b56      	ldr	r3, [pc, #344]	@ (8006130 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005fd6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d04b      	beq.n	8006078 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005fe0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	6859      	ldr	r1, [r3, #4]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005ff2:	035b      	lsls	r3, r3, #13
 8005ff4:	430b      	orrs	r3, r1
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ffa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006004:	d004      	beq.n	8006010 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a45      	ldr	r2, [pc, #276]	@ (8006120 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d10f      	bne.n	8006030 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8006010:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006014:	f7ff fed3 	bl	8005dbe <LL_ADC_IsEnabled>
 8006018:	4604      	mov	r4, r0
 800601a:	4841      	ldr	r0, [pc, #260]	@ (8006120 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800601c:	f7ff fecf 	bl	8005dbe <LL_ADC_IsEnabled>
 8006020:	4603      	mov	r3, r0
 8006022:	4323      	orrs	r3, r4
 8006024:	2b00      	cmp	r3, #0
 8006026:	bf0c      	ite	eq
 8006028:	2301      	moveq	r3, #1
 800602a:	2300      	movne	r3, #0
 800602c:	b2db      	uxtb	r3, r3
 800602e:	e012      	b.n	8006056 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006030:	483c      	ldr	r0, [pc, #240]	@ (8006124 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8006032:	f7ff fec4 	bl	8005dbe <LL_ADC_IsEnabled>
 8006036:	4604      	mov	r4, r0
 8006038:	483b      	ldr	r0, [pc, #236]	@ (8006128 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800603a:	f7ff fec0 	bl	8005dbe <LL_ADC_IsEnabled>
 800603e:	4603      	mov	r3, r0
 8006040:	431c      	orrs	r4, r3
 8006042:	483c      	ldr	r0, [pc, #240]	@ (8006134 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8006044:	f7ff febb 	bl	8005dbe <LL_ADC_IsEnabled>
 8006048:	4603      	mov	r3, r0
 800604a:	4323      	orrs	r3, r4
 800604c:	2b00      	cmp	r3, #0
 800604e:	bf0c      	ite	eq
 8006050:	2301      	moveq	r3, #1
 8006052:	2300      	movne	r3, #0
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d056      	beq.n	8006108 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800605a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006062:	f023 030f 	bic.w	r3, r3, #15
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	6811      	ldr	r1, [r2, #0]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	6892      	ldr	r2, [r2, #8]
 800606e:	430a      	orrs	r2, r1
 8006070:	431a      	orrs	r2, r3
 8006072:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006074:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006076:	e047      	b.n	8006108 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006078:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006080:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006082:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800608c:	d004      	beq.n	8006098 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a23      	ldr	r2, [pc, #140]	@ (8006120 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d10f      	bne.n	80060b8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8006098:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800609c:	f7ff fe8f 	bl	8005dbe <LL_ADC_IsEnabled>
 80060a0:	4604      	mov	r4, r0
 80060a2:	481f      	ldr	r0, [pc, #124]	@ (8006120 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80060a4:	f7ff fe8b 	bl	8005dbe <LL_ADC_IsEnabled>
 80060a8:	4603      	mov	r3, r0
 80060aa:	4323      	orrs	r3, r4
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	bf0c      	ite	eq
 80060b0:	2301      	moveq	r3, #1
 80060b2:	2300      	movne	r3, #0
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	e012      	b.n	80060de <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80060b8:	481a      	ldr	r0, [pc, #104]	@ (8006124 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80060ba:	f7ff fe80 	bl	8005dbe <LL_ADC_IsEnabled>
 80060be:	4604      	mov	r4, r0
 80060c0:	4819      	ldr	r0, [pc, #100]	@ (8006128 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80060c2:	f7ff fe7c 	bl	8005dbe <LL_ADC_IsEnabled>
 80060c6:	4603      	mov	r3, r0
 80060c8:	431c      	orrs	r4, r3
 80060ca:	481a      	ldr	r0, [pc, #104]	@ (8006134 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80060cc:	f7ff fe77 	bl	8005dbe <LL_ADC_IsEnabled>
 80060d0:	4603      	mov	r3, r0
 80060d2:	4323      	orrs	r3, r4
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	bf0c      	ite	eq
 80060d8:	2301      	moveq	r3, #1
 80060da:	2300      	movne	r3, #0
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d012      	beq.n	8006108 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80060e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80060ea:	f023 030f 	bic.w	r3, r3, #15
 80060ee:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80060f0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80060f2:	e009      	b.n	8006108 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060f8:	f043 0220 	orr.w	r2, r3, #32
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006106:	e000      	b.n	800610a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006108:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006112:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006116:	4618      	mov	r0, r3
 8006118:	3784      	adds	r7, #132	@ 0x84
 800611a:	46bd      	mov	sp, r7
 800611c:	bd90      	pop	{r4, r7, pc}
 800611e:	bf00      	nop
 8006120:	50000100 	.word	0x50000100
 8006124:	50000400 	.word	0x50000400
 8006128:	50000500 	.word	0x50000500
 800612c:	50000300 	.word	0x50000300
 8006130:	50000700 	.word	0x50000700
 8006134:	50000600 	.word	0x50000600

08006138 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e023      	b.n	8006192 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fd fec6 	bl	8003ef0 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8006190:	2300      	movs	r3, #0
}
 8006192:	4618      	mov	r0, r3
 8006194:	3708      	adds	r7, #8
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
	...

0800619c <HAL_CORDIC_Configure>:
  * @param  sConfig pointer to a CORDIC_ConfigTypeDef structure that
  *         contains the CORDIC configuration information.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Configure(CORDIC_HandleTypeDef *hcordic, const CORDIC_ConfigTypeDef *sConfig)
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CORDIC_NBREAD(sConfig->NbRead));
  assert_param(IS_CORDIC_INSIZE(sConfig->InSize));
  assert_param(IS_CORDIC_OUTSIZE(sConfig->OutSize));

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d11d      	bne.n	80061f2 <HAL_CORDIC_Configure+0x56>
  {
    /* Apply all configuration parameters in CORDIC control register */
    MODIFY_REG(hcordic->Instance->CSR,                                                         \
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	4b14      	ldr	r3, [pc, #80]	@ (8006210 <HAL_CORDIC_Configure+0x74>)
 80061be:	4013      	ands	r3, r2
 80061c0:	683a      	ldr	r2, [r7, #0]
 80061c2:	6811      	ldr	r1, [r2, #0]
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	6992      	ldr	r2, [r2, #24]
 80061c8:	4311      	orrs	r1, r2
 80061ca:	683a      	ldr	r2, [r7, #0]
 80061cc:	6852      	ldr	r2, [r2, #4]
 80061ce:	4311      	orrs	r1, r2
 80061d0:	683a      	ldr	r2, [r7, #0]
 80061d2:	6912      	ldr	r2, [r2, #16]
 80061d4:	4311      	orrs	r1, r2
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	6952      	ldr	r2, [r2, #20]
 80061da:	4311      	orrs	r1, r2
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	6892      	ldr	r2, [r2, #8]
 80061e0:	4311      	orrs	r1, r2
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	68d2      	ldr	r2, [r2, #12]
 80061e6:	4311      	orrs	r1, r2
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6812      	ldr	r2, [r2, #0]
 80061ec:	430b      	orrs	r3, r1
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	e007      	b.n	8006202 <HAL_CORDIC_Configure+0x66>
                sConfig->NbWrite | sConfig->NbRead | sConfig->InSize | sConfig->OutSize));
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f6:	f043 0202 	orr.w	r2, r3, #2
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006202:	7bfb      	ldrb	r3, [r7, #15]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	ff87f800 	.word	0xff87f800

08006214 <HAL_CORDIC_Calculate>:
  * @param  Timeout Specify Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Calculate(CORDIC_HandleTypeDef *hcordic, const int32_t *pInBuff, int32_t *pOutBuff,
                                       uint32_t NbCalc, uint32_t Timeout)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b088      	sub	sp, #32
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
 8006220:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t index;
  const int32_t *p_tmp_in_buff = pInBuff;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	617b      	str	r3, [r7, #20]
  int32_t *p_tmp_out_buff = pOutBuff;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	613b      	str	r3, [r7, #16]

  /* Check parameters setting */
  if ((pInBuff == NULL) || (pOutBuff == NULL) || (NbCalc == 0U))
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <HAL_CORDIC_Calculate+0x28>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <HAL_CORDIC_Calculate+0x28>
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d107      	bne.n	800624c <HAL_CORDIC_Calculate+0x38>
  {
    /* Update the error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_PARAM;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006240:	f043 0201 	orr.w	r2, r3, #1
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return error status */
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e058      	b.n	80062fe <HAL_CORDIC_Calculate+0xea>
  }

  /* Check handle state is ready */
  if (hcordic->State == HAL_CORDIC_STATE_READY)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006252:	b2db      	uxtb	r3, r3
 8006254:	2b01      	cmp	r3, #1
 8006256:	d14b      	bne.n	80062f0 <HAL_CORDIC_Calculate+0xdc>
  {
    /* Reset CORDIC error code */
    hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_BUSY;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2202      	movs	r2, #2
 8006262:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Get tick */
    tickstart = HAL_GetTick();
 8006266:	f7fe facb 	bl	8004800 <HAL_GetTick>
 800626a:	61b8      	str	r0, [r7, #24]

    /* Write of input data in Write Data register, and increment input buffer pointer */
    CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 800626c:	f107 0314 	add.w	r3, r7, #20
 8006270:	4619      	mov	r1, r3
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 f847 	bl	8006306 <CORDIC_WriteInDataIncrementPtr>

    /* Calculation is started.
       Provide next set of input data, until number of calculation is achieved */
    for (index = (NbCalc - 1U); index > 0U; index--)
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	3b01      	subs	r3, #1
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	e028      	b.n	80062d2 <HAL_CORDIC_Calculate+0xbe>
    {
      /* Write of input data in Write Data register, and increment input buffer pointer */
      CORDIC_WriteInDataIncrementPtr(hcordic, &p_tmp_in_buff);
 8006280:	f107 0314 	add.w	r3, r7, #20
 8006284:	4619      	mov	r1, r3
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f000 f83d 	bl	8006306 <CORDIC_WriteInDataIncrementPtr>

      /* Wait for RRDY flag to be raised */
      do
      {
        /* Check for the Timeout */
        if (Timeout != HAL_MAX_DELAY)
 800628c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	d010      	beq.n	80062b6 <HAL_CORDIC_Calculate+0xa2>
        {
          if ((HAL_GetTick() - tickstart) > Timeout)
 8006294:	f7fe fab4 	bl	8004800 <HAL_GetTick>
 8006298:	4602      	mov	r2, r0
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d208      	bcs.n	80062b6 <HAL_CORDIC_Calculate+0xa2>
          {
            /* Set CORDIC error code */
            hcordic->ErrorCode = HAL_CORDIC_ERROR_TIMEOUT;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2204      	movs	r2, #4
 80062a8:	625a      	str	r2, [r3, #36]	@ 0x24

            /* Change the CORDIC state */
            hcordic->State = HAL_CORDIC_STATE_READY;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

            /* Return function status */
            return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e023      	b.n	80062fe <HAL_CORDIC_Calculate+0xea>
          }
        }
      } while (HAL_IS_BIT_CLR(hcordic->Instance->CSR, CORDIC_CSR_RRDY));
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	dae5      	bge.n	800628c <HAL_CORDIC_Calculate+0x78>

      /* Read output data from Read Data register, and increment output buffer pointer */
      CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 80062c0:	f107 0310 	add.w	r3, r7, #16
 80062c4:	4619      	mov	r1, r3
 80062c6:	68f8      	ldr	r0, [r7, #12]
 80062c8:	f000 f846 	bl	8006358 <CORDIC_ReadOutDataIncrementPtr>
    for (index = (NbCalc - 1U); index > 0U; index--)
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	61fb      	str	r3, [r7, #28]
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1d3      	bne.n	8006280 <HAL_CORDIC_Calculate+0x6c>
    }

    /* Read output data from Read Data register, and increment output buffer pointer */
    CORDIC_ReadOutDataIncrementPtr(hcordic, &p_tmp_out_buff);
 80062d8:	f107 0310 	add.w	r3, r7, #16
 80062dc:	4619      	mov	r1, r3
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f83a 	bl	8006358 <CORDIC_ReadOutDataIncrementPtr>

    /* Change the CORDIC state */
    hcordic->State = HAL_CORDIC_STATE_READY;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Return function status */
    return HAL_OK;
 80062ec:	2300      	movs	r3, #0
 80062ee:	e006      	b.n	80062fe <HAL_CORDIC_Calculate+0xea>
  }
  else
  {
    /* Set CORDIC error code */
    hcordic->ErrorCode |= HAL_CORDIC_ERROR_NOT_READY;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f4:	f043 0202 	orr.w	r2, r3, #2
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
  }
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3720      	adds	r7, #32
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <CORDIC_WriteInDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppInBuff Pointer to pointer to input buffer.
  * @retval none
  */
static void CORDIC_WriteInDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, const int32_t **ppInBuff)
{
 8006306:	b480      	push	{r7}
 8006308:	b083      	sub	sp, #12
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	6039      	str	r1, [r7, #0]
  /* First write of input data in the Write Data register */
  WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	605a      	str	r2, [r3, #4]

  /* Increment input data pointer */
  (*ppInBuff)++;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	1d1a      	adds	r2, r3, #4
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	601a      	str	r2, [r3, #0]

  /* Check if second write of input data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NARGS))
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006330:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006334:	d10a      	bne.n	800634c <CORDIC_WriteInDataIncrementPtr+0x46>
  {
    /* Second write of input data in the Write Data register */
    WRITE_REG(hcordic->Instance->WDATA, (uint32_t) **ppInBuff);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	605a      	str	r2, [r3, #4]

    /* Increment input data pointer */
    (*ppInBuff)++;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	1d1a      	adds	r2, r3, #4
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	601a      	str	r2, [r3, #0]
  }
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <CORDIC_ReadOutDataIncrementPtr>:
  *         the configuration information for CORDIC module.
  * @param  ppOutBuff Pointer to pointer to output buffer.
  * @retval none
  */
static void CORDIC_ReadOutDataIncrementPtr(const CORDIC_HandleTypeDef *hcordic, int32_t **ppOutBuff)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  /* First read of output data from the Read Data register */
  **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	601a      	str	r2, [r3, #0]

  /* Increment output data pointer */
  (*ppOutBuff)++;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	1d1a      	adds	r2, r3, #4
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	601a      	str	r2, [r3, #0]

  /* Check if second read of output data is expected */
  if (HAL_IS_BIT_SET(hcordic->Instance->CSR, CORDIC_CSR_NRES))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006382:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006386:	d10a      	bne.n	800639e <CORDIC_ReadOutDataIncrementPtr+0x46>
  {
    /* Second read of output data from the Read Data register */
    **ppOutBuff = (int32_t)READ_REG(hcordic->Instance->RDATA);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	601a      	str	r2, [r3, #0]

    /* Increment output data pointer */
    (*ppOutBuff)++;
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	1d1a      	adds	r2, r3, #4
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	601a      	str	r2, [r3, #0]
  }
}
 800639e:	bf00      	nop
 80063a0:	370c      	adds	r7, #12
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
	...

080063ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063bc:	4b0c      	ldr	r3, [pc, #48]	@ (80063f0 <__NVIC_SetPriorityGrouping+0x44>)
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063c2:	68ba      	ldr	r2, [r7, #8]
 80063c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80063c8:	4013      	ands	r3, r2
 80063ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80063d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063de:	4a04      	ldr	r2, [pc, #16]	@ (80063f0 <__NVIC_SetPriorityGrouping+0x44>)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	60d3      	str	r3, [r2, #12]
}
 80063e4:	bf00      	nop
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	e000ed00 	.word	0xe000ed00

080063f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063f8:	4b04      	ldr	r3, [pc, #16]	@ (800640c <__NVIC_GetPriorityGrouping+0x18>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	0a1b      	lsrs	r3, r3, #8
 80063fe:	f003 0307 	and.w	r3, r3, #7
}
 8006402:	4618      	mov	r0, r3
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	e000ed00 	.word	0xe000ed00

08006410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	4603      	mov	r3, r0
 8006418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800641a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800641e:	2b00      	cmp	r3, #0
 8006420:	db0b      	blt.n	800643a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006422:	79fb      	ldrb	r3, [r7, #7]
 8006424:	f003 021f 	and.w	r2, r3, #31
 8006428:	4907      	ldr	r1, [pc, #28]	@ (8006448 <__NVIC_EnableIRQ+0x38>)
 800642a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	2001      	movs	r0, #1
 8006432:	fa00 f202 	lsl.w	r2, r0, r2
 8006436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800643a:	bf00      	nop
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	e000e100 	.word	0xe000e100

0800644c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	4603      	mov	r3, r0
 8006454:	6039      	str	r1, [r7, #0]
 8006456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800645c:	2b00      	cmp	r3, #0
 800645e:	db0a      	blt.n	8006476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	b2da      	uxtb	r2, r3
 8006464:	490c      	ldr	r1, [pc, #48]	@ (8006498 <__NVIC_SetPriority+0x4c>)
 8006466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800646a:	0112      	lsls	r2, r2, #4
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	440b      	add	r3, r1
 8006470:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006474:	e00a      	b.n	800648c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	b2da      	uxtb	r2, r3
 800647a:	4908      	ldr	r1, [pc, #32]	@ (800649c <__NVIC_SetPriority+0x50>)
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	3b04      	subs	r3, #4
 8006484:	0112      	lsls	r2, r2, #4
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	440b      	add	r3, r1
 800648a:	761a      	strb	r2, [r3, #24]
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	e000e100 	.word	0xe000e100
 800649c:	e000ed00 	.word	0xe000ed00

080064a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b089      	sub	sp, #36	@ 0x24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	f1c3 0307 	rsb	r3, r3, #7
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	bf28      	it	cs
 80064be:	2304      	movcs	r3, #4
 80064c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	3304      	adds	r3, #4
 80064c6:	2b06      	cmp	r3, #6
 80064c8:	d902      	bls.n	80064d0 <NVIC_EncodePriority+0x30>
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	3b03      	subs	r3, #3
 80064ce:	e000      	b.n	80064d2 <NVIC_EncodePriority+0x32>
 80064d0:	2300      	movs	r3, #0
 80064d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064d4:	f04f 32ff 	mov.w	r2, #4294967295
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	fa02 f303 	lsl.w	r3, r2, r3
 80064de:	43da      	mvns	r2, r3
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	401a      	ands	r2, r3
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064e8:	f04f 31ff 	mov.w	r1, #4294967295
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	fa01 f303 	lsl.w	r3, r1, r3
 80064f2:	43d9      	mvns	r1, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064f8:	4313      	orrs	r3, r2
         );
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3724      	adds	r7, #36	@ 0x24
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
	...

08006508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	3b01      	subs	r3, #1
 8006514:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006518:	d301      	bcc.n	800651e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800651a:	2301      	movs	r3, #1
 800651c:	e00f      	b.n	800653e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800651e:	4a0a      	ldr	r2, [pc, #40]	@ (8006548 <SysTick_Config+0x40>)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3b01      	subs	r3, #1
 8006524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006526:	210f      	movs	r1, #15
 8006528:	f04f 30ff 	mov.w	r0, #4294967295
 800652c:	f7ff ff8e 	bl	800644c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006530:	4b05      	ldr	r3, [pc, #20]	@ (8006548 <SysTick_Config+0x40>)
 8006532:	2200      	movs	r2, #0
 8006534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006536:	4b04      	ldr	r3, [pc, #16]	@ (8006548 <SysTick_Config+0x40>)
 8006538:	2207      	movs	r2, #7
 800653a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	e000e010 	.word	0xe000e010

0800654c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff ff29 	bl	80063ac <__NVIC_SetPriorityGrouping>
}
 800655a:	bf00      	nop
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b086      	sub	sp, #24
 8006566:	af00      	add	r7, sp, #0
 8006568:	4603      	mov	r3, r0
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	607a      	str	r2, [r7, #4]
 800656e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006570:	f7ff ff40 	bl	80063f4 <__NVIC_GetPriorityGrouping>
 8006574:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	68b9      	ldr	r1, [r7, #8]
 800657a:	6978      	ldr	r0, [r7, #20]
 800657c:	f7ff ff90 	bl	80064a0 <NVIC_EncodePriority>
 8006580:	4602      	mov	r2, r0
 8006582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006586:	4611      	mov	r1, r2
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff ff5f 	bl	800644c <__NVIC_SetPriority>
}
 800658e:	bf00      	nop
 8006590:	3718      	adds	r7, #24
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b082      	sub	sp, #8
 800659a:	af00      	add	r7, sp, #0
 800659c:	4603      	mov	r3, r0
 800659e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff ff33 	bl	8006410 <__NVIC_EnableIRQ>
}
 80065aa:	bf00      	nop
 80065ac:	3708      	adds	r7, #8
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b082      	sub	sp, #8
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7ff ffa4 	bl	8006508 <SysTick_Config>
 80065c0:	4603      	mov	r3, r0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e014      	b.n	8006606 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	791b      	ldrb	r3, [r3, #4]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d105      	bne.n	80065f2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7fd fc9f 	bl	8003f30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2202      	movs	r2, #2
 80065f6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e056      	b.n	80066d2 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	795b      	ldrb	r3, [r3, #5]
 8006628:	2b01      	cmp	r3, #1
 800662a:	d101      	bne.n	8006630 <HAL_DAC_Start+0x20>
 800662c:	2302      	movs	r3, #2
 800662e:	e050      	b.n	80066d2 <HAL_DAC_Start+0xc2>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2202      	movs	r2, #2
 800663a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	6819      	ldr	r1, [r3, #0]
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2201      	movs	r2, #1
 800664a:	409a      	lsls	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	430a      	orrs	r2, r1
 8006652:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006654:	4b22      	ldr	r3, [pc, #136]	@ (80066e0 <HAL_DAC_Start+0xd0>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	099b      	lsrs	r3, r3, #6
 800665a:	4a22      	ldr	r2, [pc, #136]	@ (80066e4 <HAL_DAC_Start+0xd4>)
 800665c:	fba2 2303 	umull	r2, r3, r2, r3
 8006660:	099b      	lsrs	r3, r3, #6
 8006662:	3301      	adds	r3, #1
 8006664:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8006666:	e002      	b.n	800666e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	3b01      	subs	r3, #1
 800666c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1f9      	bne.n	8006668 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10f      	bne.n	800669a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8006684:	2b02      	cmp	r3, #2
 8006686:	d11d      	bne.n	80066c4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0201 	orr.w	r2, r2, #1
 8006696:	605a      	str	r2, [r3, #4]
 8006698:	e014      	b.n	80066c4 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	f003 0310 	and.w	r3, r3, #16
 80066aa:	2102      	movs	r1, #2
 80066ac:	fa01 f303 	lsl.w	r3, r1, r3
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d107      	bne.n	80066c4 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0202 	orr.w	r2, r2, #2
 80066c2:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80066d0:	2300      	movs	r3, #0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	20000068 	.word	0x20000068
 80066e4:	053e2d63 	.word	0x053e2d63

080066e8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066fe:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d01d      	beq.n	8006746 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d018      	beq.n	8006746 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2204      	movs	r2, #4
 8006718:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	f043 0201 	orr.w	r2, r3, #1
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800672e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800673e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f854 	bl	80067ee <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d01d      	beq.n	800678c <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d018      	beq.n	800678c <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2204      	movs	r2, #4
 800675e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	f043 0202 	orr.w	r2, r3, #2
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006774:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8006784:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 f9f4 	bl	8006b74 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 800678c:	bf00      	nop
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006794:	b480      	push	{r7}
 8006796:	b087      	sub	sp, #28
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80067a2:	2300      	movs	r3, #0
 80067a4:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e018      	b.n	80067e2 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d105      	bne.n	80067ce <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4413      	add	r3, r2
 80067c8:	3308      	adds	r3, #8
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	e004      	b.n	80067d8 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4413      	add	r3, r2
 80067d4:	3314      	adds	r3, #20
 80067d6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	461a      	mov	r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
	...

08006804 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08a      	sub	sp, #40	@ 0x28
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006810:	2300      	movs	r3, #0
 8006812:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <HAL_DAC_ConfigChannel+0x1c>
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e19e      	b.n	8006b62 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	795b      	ldrb	r3, [r3, #5]
 8006828:	2b01      	cmp	r3, #1
 800682a:	d101      	bne.n	8006830 <HAL_DAC_ConfigChannel+0x2c>
 800682c:	2302      	movs	r3, #2
 800682e:	e198      	b.n	8006b62 <HAL_DAC_ConfigChannel+0x35e>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2201      	movs	r2, #1
 8006834:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2202      	movs	r2, #2
 800683a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2b04      	cmp	r3, #4
 8006842:	d17a      	bne.n	800693a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8006844:	f7fd ffdc 	bl	8004800 <HAL_GetTick>
 8006848:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d13d      	bne.n	80068cc <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006850:	e018      	b.n	8006884 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006852:	f7fd ffd5 	bl	8004800 <HAL_GetTick>
 8006856:	4602      	mov	r2, r0
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	2b01      	cmp	r3, #1
 800685e:	d911      	bls.n	8006884 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006866:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00a      	beq.n	8006884 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f043 0208 	orr.w	r2, r3, #8
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2203      	movs	r2, #3
 800687e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e16e      	b.n	8006b62 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800688a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1df      	bne.n	8006852 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	68ba      	ldr	r2, [r7, #8]
 8006898:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800689a:	641a      	str	r2, [r3, #64]	@ 0x40
 800689c:	e020      	b.n	80068e0 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800689e:	f7fd ffaf 	bl	8004800 <HAL_GetTick>
 80068a2:	4602      	mov	r2, r0
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d90f      	bls.n	80068cc <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	da0a      	bge.n	80068cc <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	f043 0208 	orr.w	r2, r3, #8
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2203      	movs	r2, #3
 80068c6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80068c8:	2303      	movs	r3, #3
 80068ca:	e14a      	b.n	8006b62 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	dbe3      	blt.n	800689e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80068de:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f003 0310 	and.w	r3, r3, #16
 80068ec:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80068f0:	fa01 f303 	lsl.w	r3, r1, r3
 80068f4:	43db      	mvns	r3, r3
 80068f6:	ea02 0103 	and.w	r1, r2, r3
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f003 0310 	and.w	r3, r3, #16
 8006904:	409a      	lsls	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f003 0310 	and.w	r3, r3, #16
 800691a:	21ff      	movs	r1, #255	@ 0xff
 800691c:	fa01 f303 	lsl.w	r3, r1, r3
 8006920:	43db      	mvns	r3, r3
 8006922:	ea02 0103 	and.w	r1, r2, r3
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f003 0310 	and.w	r3, r3, #16
 8006930:	409a      	lsls	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d11d      	bne.n	800697e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f003 0310 	and.w	r3, r3, #16
 8006950:	221f      	movs	r2, #31
 8006952:	fa02 f303 	lsl.w	r3, r2, r3
 8006956:	43db      	mvns	r3, r3
 8006958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800695a:	4013      	ands	r3, r2
 800695c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f003 0310 	and.w	r3, r3, #16
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	fa02 f303 	lsl.w	r3, r2, r3
 8006970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006972:	4313      	orrs	r3, r2
 8006974:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800697c:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006984:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2207      	movs	r2, #7
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	43db      	mvns	r3, r3
 8006994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006996:	4013      	ands	r3, r2
 8006998:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	2b01      	cmp	r3, #1
 80069a0:	d102      	bne.n	80069a8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	623b      	str	r3, [r7, #32]
 80069a6:	e00f      	b.n	80069c8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d102      	bne.n	80069b6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80069b0:	2301      	movs	r3, #1
 80069b2:	623b      	str	r3, [r7, #32]
 80069b4:	e008      	b.n	80069c8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80069be:	2301      	movs	r3, #1
 80069c0:	623b      	str	r3, [r7, #32]
 80069c2:	e001      	b.n	80069c8 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80069c4:	2300      	movs	r3, #0
 80069c6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	689a      	ldr	r2, [r3, #8]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	695b      	ldr	r3, [r3, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	6a3a      	ldr	r2, [r7, #32]
 80069d4:	4313      	orrs	r3, r2
 80069d6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f003 0310 	and.w	r3, r3, #16
 80069de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80069e2:	fa02 f303 	lsl.w	r3, r2, r3
 80069e6:	43db      	mvns	r3, r3
 80069e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069ea:	4013      	ands	r3, r2
 80069ec:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	791b      	ldrb	r3, [r3, #4]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d102      	bne.n	80069fc <HAL_DAC_ConfigChannel+0x1f8>
 80069f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069fa:	e000      	b.n	80069fe <HAL_DAC_ConfigChannel+0x1fa>
 80069fc:	2300      	movs	r3, #0
 80069fe:	697a      	ldr	r2, [r7, #20]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f003 0310 	and.w	r3, r3, #16
 8006a0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a12:	43db      	mvns	r3, r3
 8006a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a16:	4013      	ands	r3, r2
 8006a18:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	795b      	ldrb	r3, [r3, #5]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d102      	bne.n	8006a28 <HAL_DAC_ConfigChannel+0x224>
 8006a22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006a26:	e000      	b.n	8006a2a <HAL_DAC_ConfigChannel+0x226>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8006a36:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d114      	bne.n	8006a6a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006a40:	f002 ff7a 	bl	8009938 <HAL_RCC_GetHCLKFreq>
 8006a44:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	4a48      	ldr	r2, [pc, #288]	@ (8006b6c <HAL_DAC_ConfigChannel+0x368>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d904      	bls.n	8006a58 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a56:	e00f      	b.n	8006a78 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	4a45      	ldr	r2, [pc, #276]	@ (8006b70 <HAL_DAC_ConfigChannel+0x36c>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d90a      	bls.n	8006a76 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a68:	e006      	b.n	8006a78 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a70:	4313      	orrs	r3, r2
 8006a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a74:	e000      	b.n	8006a78 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8006a76:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f003 0310 	and.w	r3, r3, #16
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	fa02 f303 	lsl.w	r3, r2, r3
 8006a84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a86:	4313      	orrs	r3, r2
 8006a88:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6819      	ldr	r1, [r3, #0]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f003 0310 	and.w	r3, r3, #16
 8006a9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa6:	43da      	mvns	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	400a      	ands	r2, r1
 8006aae:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f003 0310 	and.w	r3, r3, #16
 8006abe:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8006ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac6:	43db      	mvns	r3, r3
 8006ac8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aca:	4013      	ands	r3, r2
 8006acc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f003 0310 	and.w	r3, r3, #16
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6819      	ldr	r1, [r3, #0]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f003 0310 	and.w	r3, r3, #16
 8006afa:	22c0      	movs	r2, #192	@ 0xc0
 8006afc:	fa02 f303 	lsl.w	r3, r2, r3
 8006b00:	43da      	mvns	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	400a      	ands	r2, r1
 8006b08:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	089b      	lsrs	r3, r3, #2
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	089b      	lsrs	r3, r3, #2
 8006b1c:	021b      	lsls	r3, r3, #8
 8006b1e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	f640 710f 	movw	r1, #3855	@ 0xf0f
 8006b38:	fa01 f303 	lsl.w	r3, r1, r3
 8006b3c:	43db      	mvns	r3, r3
 8006b3e:	ea02 0103 	and.w	r1, r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	409a      	lsls	r2, r3
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8006b60:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3728      	adds	r7, #40	@ 0x28
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	09896800 	.word	0x09896800
 8006b70:	04c4b400 	.word	0x04c4b400

08006b74 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b084      	sub	sp, #16
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e08d      	b.n	8006cb6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	4b47      	ldr	r3, [pc, #284]	@ (8006cc0 <HAL_DMA_Init+0x138>)
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d80f      	bhi.n	8006bc6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	461a      	mov	r2, r3
 8006bac:	4b45      	ldr	r3, [pc, #276]	@ (8006cc4 <HAL_DMA_Init+0x13c>)
 8006bae:	4413      	add	r3, r2
 8006bb0:	4a45      	ldr	r2, [pc, #276]	@ (8006cc8 <HAL_DMA_Init+0x140>)
 8006bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb6:	091b      	lsrs	r3, r3, #4
 8006bb8:	009a      	lsls	r2, r3, #2
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a42      	ldr	r2, [pc, #264]	@ (8006ccc <HAL_DMA_Init+0x144>)
 8006bc2:	641a      	str	r2, [r3, #64]	@ 0x40
 8006bc4:	e00e      	b.n	8006be4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	4b40      	ldr	r3, [pc, #256]	@ (8006cd0 <HAL_DMA_Init+0x148>)
 8006bce:	4413      	add	r3, r2
 8006bd0:	4a3d      	ldr	r2, [pc, #244]	@ (8006cc8 <HAL_DMA_Init+0x140>)
 8006bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd6:	091b      	lsrs	r3, r3, #4
 8006bd8:	009a      	lsls	r2, r3, #2
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a3c      	ldr	r2, [pc, #240]	@ (8006cd4 <HAL_DMA_Init+0x14c>)
 8006be2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006bfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 f9b6 	bl	8006fa8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c44:	d102      	bne.n	8006c4c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006c60:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d010      	beq.n	8006c8c <HAL_DMA_Init+0x104>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d80c      	bhi.n	8006c8c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f9d6 	bl	8007024 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006c88:	605a      	str	r2, [r3, #4]
 8006c8a:	e008      	b.n	8006c9e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40020407 	.word	0x40020407
 8006cc4:	bffdfff8 	.word	0xbffdfff8
 8006cc8:	cccccccd 	.word	0xcccccccd
 8006ccc:	40020000 	.word	0x40020000
 8006cd0:	bffdfbf8 	.word	0xbffdfbf8
 8006cd4:	40020400 	.word	0x40020400

08006cd8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d101      	bne.n	8006cf8 <HAL_DMA_Start_IT+0x20>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e066      	b.n	8006dc6 <HAL_DMA_Start_IT+0xee>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d155      	bne.n	8006db8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2202      	movs	r2, #2
 8006d10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 0201 	bic.w	r2, r2, #1
 8006d28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	68b9      	ldr	r1, [r7, #8]
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 f8fb 	bl	8006f2c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d008      	beq.n	8006d50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 020e 	orr.w	r2, r2, #14
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	e00f      	b.n	8006d70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	681a      	ldr	r2, [r3, #0]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f022 0204 	bic.w	r2, r2, #4
 8006d5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f042 020a 	orr.w	r2, r2, #10
 8006d6e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d007      	beq.n	8006d8e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d88:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d8c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d007      	beq.n	8006da6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006da4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f042 0201 	orr.w	r2, r2, #1
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	e005      	b.n	8006dc4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3718      	adds	r7, #24
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dea:	f003 031f 	and.w	r3, r3, #31
 8006dee:	2204      	movs	r2, #4
 8006df0:	409a      	lsls	r2, r3
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4013      	ands	r3, r2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d026      	beq.n	8006e48 <HAL_DMA_IRQHandler+0x7a>
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d021      	beq.n	8006e48 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d107      	bne.n	8006e22 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f022 0204 	bic.w	r2, r2, #4
 8006e20:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e26:	f003 021f 	and.w	r2, r3, #31
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2e:	2104      	movs	r1, #4
 8006e30:	fa01 f202 	lsl.w	r2, r1, r2
 8006e34:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d071      	beq.n	8006f22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006e46:	e06c      	b.n	8006f22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	2202      	movs	r2, #2
 8006e52:	409a      	lsls	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4013      	ands	r3, r2
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d02e      	beq.n	8006eba <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	f003 0302 	and.w	r3, r3, #2
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d029      	beq.n	8006eba <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 0320 	and.w	r3, r3, #32
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10b      	bne.n	8006e8c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 020a 	bic.w	r2, r2, #10
 8006e82:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e90:	f003 021f 	and.w	r2, r3, #31
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e98:	2102      	movs	r1, #2
 8006e9a:	fa01 f202 	lsl.w	r2, r1, r2
 8006e9e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d038      	beq.n	8006f22 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006eb8:	e033      	b.n	8006f22 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ebe:	f003 031f 	and.w	r3, r3, #31
 8006ec2:	2208      	movs	r2, #8
 8006ec4:	409a      	lsls	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d02a      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f003 0308 	and.w	r3, r3, #8
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d025      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f022 020e 	bic.w	r2, r2, #14
 8006ee6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eec:	f003 021f 	and.w	r2, r3, #31
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8006efa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2201      	movs	r2, #1
 8006f06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d004      	beq.n	8006f24 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
}
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
 8006f38:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006f42:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d004      	beq.n	8006f56 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006f54:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f5a:	f003 021f 	and.w	r2, r3, #31
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f62:	2101      	movs	r1, #1
 8006f64:	fa01 f202 	lsl.w	r2, r1, r2
 8006f68:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	d108      	bne.n	8006f8c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	687a      	ldr	r2, [r7, #4]
 8006f80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006f8a:	e007      	b.n	8006f9c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	60da      	str	r2, [r3, #12]
}
 8006f9c:	bf00      	nop
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	4b16      	ldr	r3, [pc, #88]	@ (8007010 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d802      	bhi.n	8006fc2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006fbc:	4b15      	ldr	r3, [pc, #84]	@ (8007014 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	e001      	b.n	8006fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8006fc2:	4b15      	ldr	r3, [pc, #84]	@ (8007018 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006fc4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	3b08      	subs	r3, #8
 8006fd2:	4a12      	ldr	r2, [pc, #72]	@ (800701c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd8:	091b      	lsrs	r3, r3, #4
 8006fda:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe0:	089b      	lsrs	r3, r3, #2
 8006fe2:	009a      	lsls	r2, r3, #2
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	461a      	mov	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	4a0b      	ldr	r2, [pc, #44]	@ (8007020 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006ff2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f003 031f 	and.w	r3, r3, #31
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	409a      	lsls	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007002:	bf00      	nop
 8007004:	371c      	adds	r7, #28
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	40020407 	.word	0x40020407
 8007014:	40020800 	.word	0x40020800
 8007018:	40020820 	.word	0x40020820
 800701c:	cccccccd 	.word	0xcccccccd
 8007020:	40020880 	.word	0x40020880

08007024 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	b2db      	uxtb	r3, r3
 8007032:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4b0b      	ldr	r3, [pc, #44]	@ (8007064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007038:	4413      	add	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	461a      	mov	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a08      	ldr	r2, [pc, #32]	@ (8007068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007046:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	3b01      	subs	r3, #1
 800704c:	f003 031f 	and.w	r3, r3, #31
 8007050:	2201      	movs	r2, #1
 8007052:	409a      	lsls	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007058:	bf00      	nop
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr
 8007064:	1000823f 	.word	0x1000823f
 8007068:	40020940 	.word	0x40020940

0800706c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800706c:	b480      	push	{r7}
 800706e:	b087      	sub	sp, #28
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007076:	2300      	movs	r3, #0
 8007078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800707a:	e15a      	b.n	8007332 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	2101      	movs	r1, #1
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	fa01 f303 	lsl.w	r3, r1, r3
 8007088:	4013      	ands	r3, r2
 800708a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 814c 	beq.w	800732c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f003 0303 	and.w	r3, r3, #3
 800709c:	2b01      	cmp	r3, #1
 800709e:	d005      	beq.n	80070ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d130      	bne.n	800710e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	2203      	movs	r2, #3
 80070b8:	fa02 f303 	lsl.w	r3, r2, r3
 80070bc:	43db      	mvns	r3, r3
 80070be:	693a      	ldr	r2, [r7, #16]
 80070c0:	4013      	ands	r3, r2
 80070c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	68da      	ldr	r2, [r3, #12]
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	005b      	lsls	r3, r3, #1
 80070cc:	fa02 f303 	lsl.w	r3, r2, r3
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80070e2:	2201      	movs	r2, #1
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ea:	43db      	mvns	r3, r3
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	4013      	ands	r3, r2
 80070f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	091b      	lsrs	r3, r3, #4
 80070f8:	f003 0201 	and.w	r2, r3, #1
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007102:	693a      	ldr	r2, [r7, #16]
 8007104:	4313      	orrs	r3, r2
 8007106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	2b03      	cmp	r3, #3
 8007118:	d017      	beq.n	800714a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	2203      	movs	r2, #3
 8007126:	fa02 f303 	lsl.w	r3, r2, r3
 800712a:	43db      	mvns	r3, r3
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	4013      	ands	r3, r2
 8007130:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	005b      	lsls	r3, r3, #1
 800713a:	fa02 f303 	lsl.w	r3, r2, r3
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	2b02      	cmp	r3, #2
 8007154:	d123      	bne.n	800719e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	08da      	lsrs	r2, r3, #3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	3208      	adds	r2, #8
 800715e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007162:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f003 0307 	and.w	r3, r3, #7
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	220f      	movs	r2, #15
 800716e:	fa02 f303 	lsl.w	r3, r2, r3
 8007172:	43db      	mvns	r3, r3
 8007174:	693a      	ldr	r2, [r7, #16]
 8007176:	4013      	ands	r3, r2
 8007178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	691a      	ldr	r2, [r3, #16]
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	fa02 f303 	lsl.w	r3, r2, r3
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	4313      	orrs	r3, r2
 800718e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	08da      	lsrs	r2, r3, #3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3208      	adds	r2, #8
 8007198:	6939      	ldr	r1, [r7, #16]
 800719a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	2203      	movs	r2, #3
 80071aa:	fa02 f303 	lsl.w	r3, r2, r3
 80071ae:	43db      	mvns	r3, r3
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4013      	ands	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f003 0203 	and.w	r2, r3, #3
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	fa02 f303 	lsl.w	r3, r2, r3
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	f000 80a6 	beq.w	800732c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071e0:	4b5b      	ldr	r3, [pc, #364]	@ (8007350 <HAL_GPIO_Init+0x2e4>)
 80071e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071e4:	4a5a      	ldr	r2, [pc, #360]	@ (8007350 <HAL_GPIO_Init+0x2e4>)
 80071e6:	f043 0301 	orr.w	r3, r3, #1
 80071ea:	6613      	str	r3, [r2, #96]	@ 0x60
 80071ec:	4b58      	ldr	r3, [pc, #352]	@ (8007350 <HAL_GPIO_Init+0x2e4>)
 80071ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	60bb      	str	r3, [r7, #8]
 80071f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071f8:	4a56      	ldr	r2, [pc, #344]	@ (8007354 <HAL_GPIO_Init+0x2e8>)
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	089b      	lsrs	r3, r3, #2
 80071fe:	3302      	adds	r3, #2
 8007200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f003 0303 	and.w	r3, r3, #3
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	220f      	movs	r2, #15
 8007210:	fa02 f303 	lsl.w	r3, r2, r3
 8007214:	43db      	mvns	r3, r3
 8007216:	693a      	ldr	r2, [r7, #16]
 8007218:	4013      	ands	r3, r2
 800721a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007222:	d01f      	beq.n	8007264 <HAL_GPIO_Init+0x1f8>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a4c      	ldr	r2, [pc, #304]	@ (8007358 <HAL_GPIO_Init+0x2ec>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d019      	beq.n	8007260 <HAL_GPIO_Init+0x1f4>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a4b      	ldr	r2, [pc, #300]	@ (800735c <HAL_GPIO_Init+0x2f0>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d013      	beq.n	800725c <HAL_GPIO_Init+0x1f0>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	4a4a      	ldr	r2, [pc, #296]	@ (8007360 <HAL_GPIO_Init+0x2f4>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d00d      	beq.n	8007258 <HAL_GPIO_Init+0x1ec>
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a49      	ldr	r2, [pc, #292]	@ (8007364 <HAL_GPIO_Init+0x2f8>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d007      	beq.n	8007254 <HAL_GPIO_Init+0x1e8>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4a48      	ldr	r2, [pc, #288]	@ (8007368 <HAL_GPIO_Init+0x2fc>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d101      	bne.n	8007250 <HAL_GPIO_Init+0x1e4>
 800724c:	2305      	movs	r3, #5
 800724e:	e00a      	b.n	8007266 <HAL_GPIO_Init+0x1fa>
 8007250:	2306      	movs	r3, #6
 8007252:	e008      	b.n	8007266 <HAL_GPIO_Init+0x1fa>
 8007254:	2304      	movs	r3, #4
 8007256:	e006      	b.n	8007266 <HAL_GPIO_Init+0x1fa>
 8007258:	2303      	movs	r3, #3
 800725a:	e004      	b.n	8007266 <HAL_GPIO_Init+0x1fa>
 800725c:	2302      	movs	r3, #2
 800725e:	e002      	b.n	8007266 <HAL_GPIO_Init+0x1fa>
 8007260:	2301      	movs	r3, #1
 8007262:	e000      	b.n	8007266 <HAL_GPIO_Init+0x1fa>
 8007264:	2300      	movs	r3, #0
 8007266:	697a      	ldr	r2, [r7, #20]
 8007268:	f002 0203 	and.w	r2, r2, #3
 800726c:	0092      	lsls	r2, r2, #2
 800726e:	4093      	lsls	r3, r2
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	4313      	orrs	r3, r2
 8007274:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007276:	4937      	ldr	r1, [pc, #220]	@ (8007354 <HAL_GPIO_Init+0x2e8>)
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	089b      	lsrs	r3, r3, #2
 800727c:	3302      	adds	r3, #2
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007284:	4b39      	ldr	r3, [pc, #228]	@ (800736c <HAL_GPIO_Init+0x300>)
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	43db      	mvns	r3, r3
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	4013      	ands	r3, r2
 8007292:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d003      	beq.n	80072a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80072a8:	4a30      	ldr	r2, [pc, #192]	@ (800736c <HAL_GPIO_Init+0x300>)
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80072ae:	4b2f      	ldr	r3, [pc, #188]	@ (800736c <HAL_GPIO_Init+0x300>)
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	43db      	mvns	r3, r3
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	4013      	ands	r3, r2
 80072bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80072d2:	4a26      	ldr	r2, [pc, #152]	@ (800736c <HAL_GPIO_Init+0x300>)
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80072d8:	4b24      	ldr	r3, [pc, #144]	@ (800736c <HAL_GPIO_Init+0x300>)
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	43db      	mvns	r3, r3
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	4013      	ands	r3, r2
 80072e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80072fc:	4a1b      	ldr	r2, [pc, #108]	@ (800736c <HAL_GPIO_Init+0x300>)
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007302:	4b1a      	ldr	r3, [pc, #104]	@ (800736c <HAL_GPIO_Init+0x300>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	43db      	mvns	r3, r3
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	4013      	ands	r3, r2
 8007310:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	4313      	orrs	r3, r2
 8007324:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007326:	4a11      	ldr	r2, [pc, #68]	@ (800736c <HAL_GPIO_Init+0x300>)
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	3301      	adds	r3, #1
 8007330:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	fa22 f303 	lsr.w	r3, r2, r3
 800733c:	2b00      	cmp	r3, #0
 800733e:	f47f ae9d 	bne.w	800707c <HAL_GPIO_Init+0x10>
  }
}
 8007342:	bf00      	nop
 8007344:	bf00      	nop
 8007346:	371c      	adds	r7, #28
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr
 8007350:	40021000 	.word	0x40021000
 8007354:	40010000 	.word	0x40010000
 8007358:	48000400 	.word	0x48000400
 800735c:	48000800 	.word	0x48000800
 8007360:	48000c00 	.word	0x48000c00
 8007364:	48001000 	.word	0x48001000
 8007368:	48001400 	.word	0x48001400
 800736c:	40010400 	.word	0x40010400

08007370 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	460b      	mov	r3, r1
 800737a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	887b      	ldrh	r3, [r7, #2]
 8007382:	4013      	ands	r3, r2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007388:	2301      	movs	r3, #1
 800738a:	73fb      	strb	r3, [r7, #15]
 800738c:	e001      	b.n	8007392 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800738e:	2300      	movs	r3, #0
 8007390:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	807b      	strh	r3, [r7, #2]
 80073ac:	4613      	mov	r3, r2
 80073ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80073b0:	787b      	ldrb	r3, [r7, #1]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d003      	beq.n	80073be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80073b6:	887a      	ldrh	r2, [r7, #2]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80073bc:	e002      	b.n	80073c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80073be:	887a      	ldrh	r2, [r7, #2]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80073c4:	bf00      	nop
 80073c6:	370c      	adds	r7, #12
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b085      	sub	sp, #20
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	460b      	mov	r3, r1
 80073da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80073e2:	887a      	ldrh	r2, [r7, #2]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4013      	ands	r3, r2
 80073e8:	041a      	lsls	r2, r3, #16
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	43d9      	mvns	r1, r3
 80073ee:	887b      	ldrh	r3, [r7, #2]
 80073f0:	400b      	ands	r3, r1
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	619a      	str	r2, [r3, #24]
}
 80073f8:	bf00      	nop
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d101      	bne.n	8007416 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e0c0      	b.n	8007598 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d106      	bne.n	8007430 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f009 fabe 	bl	80109ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2203      	movs	r2, #3
 8007434:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f005 f8f2 	bl	800c626 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007442:	2300      	movs	r3, #0
 8007444:	73fb      	strb	r3, [r7, #15]
 8007446:	e03e      	b.n	80074c6 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007448:	7bfa      	ldrb	r2, [r7, #15]
 800744a:	6879      	ldr	r1, [r7, #4]
 800744c:	4613      	mov	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	4413      	add	r3, r2
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	440b      	add	r3, r1
 8007456:	3311      	adds	r3, #17
 8007458:	2201      	movs	r2, #1
 800745a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800745c:	7bfa      	ldrb	r2, [r7, #15]
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	440b      	add	r3, r1
 800746a:	3310      	adds	r3, #16
 800746c:	7bfa      	ldrb	r2, [r7, #15]
 800746e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007470:	7bfa      	ldrb	r2, [r7, #15]
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	440b      	add	r3, r1
 800747e:	3313      	adds	r3, #19
 8007480:	2200      	movs	r2, #0
 8007482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007484:	7bfa      	ldrb	r2, [r7, #15]
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	4613      	mov	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	440b      	add	r3, r1
 8007492:	3320      	adds	r3, #32
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007498:	7bfa      	ldrb	r2, [r7, #15]
 800749a:	6879      	ldr	r1, [r7, #4]
 800749c:	4613      	mov	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	4413      	add	r3, r2
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	440b      	add	r3, r1
 80074a6:	3324      	adds	r3, #36	@ 0x24
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	6879      	ldr	r1, [r7, #4]
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	4613      	mov	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	440b      	add	r3, r1
 80074bc:	2200      	movs	r2, #0
 80074be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
 80074c2:	3301      	adds	r3, #1
 80074c4:	73fb      	strb	r3, [r7, #15]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	791b      	ldrb	r3, [r3, #4]
 80074ca:	7bfa      	ldrb	r2, [r7, #15]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d3bb      	bcc.n	8007448 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074d0:	2300      	movs	r3, #0
 80074d2:	73fb      	strb	r3, [r7, #15]
 80074d4:	e044      	b.n	8007560 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80074d6:	7bfa      	ldrb	r2, [r7, #15]
 80074d8:	6879      	ldr	r1, [r7, #4]
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	440b      	add	r3, r1
 80074e4:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80074e8:	2200      	movs	r2, #0
 80074ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80074ec:	7bfa      	ldrb	r2, [r7, #15]
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	00db      	lsls	r3, r3, #3
 80074f8:	440b      	add	r3, r1
 80074fa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80074fe:	7bfa      	ldrb	r2, [r7, #15]
 8007500:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007502:	7bfa      	ldrb	r2, [r7, #15]
 8007504:	6879      	ldr	r1, [r7, #4]
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	00db      	lsls	r3, r3, #3
 800750e:	440b      	add	r3, r1
 8007510:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8007514:	2200      	movs	r2, #0
 8007516:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007518:	7bfa      	ldrb	r2, [r7, #15]
 800751a:	6879      	ldr	r1, [r7, #4]
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	440b      	add	r3, r1
 8007526:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800752a:	2200      	movs	r2, #0
 800752c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800752e:	7bfa      	ldrb	r2, [r7, #15]
 8007530:	6879      	ldr	r1, [r7, #4]
 8007532:	4613      	mov	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	4413      	add	r3, r2
 8007538:	00db      	lsls	r3, r3, #3
 800753a:	440b      	add	r3, r1
 800753c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007540:	2200      	movs	r2, #0
 8007542:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007544:	7bfa      	ldrb	r2, [r7, #15]
 8007546:	6879      	ldr	r1, [r7, #4]
 8007548:	4613      	mov	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	4413      	add	r3, r2
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	440b      	add	r3, r1
 8007552:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8007556:	2200      	movs	r2, #0
 8007558:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800755a:	7bfb      	ldrb	r3, [r7, #15]
 800755c:	3301      	adds	r3, #1
 800755e:	73fb      	strb	r3, [r7, #15]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	791b      	ldrb	r3, [r3, #4]
 8007564:	7bfa      	ldrb	r2, [r7, #15]
 8007566:	429a      	cmp	r2, r3
 8007568:	d3b5      	bcc.n	80074d6 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	3304      	adds	r3, #4
 8007572:	e893 0006 	ldmia.w	r3, {r1, r2}
 8007576:	f005 f871 	bl	800c65c <USB_DevInit>

  hpcd->USB_Address = 0U;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	7a9b      	ldrb	r3, [r3, #10]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d102      	bne.n	8007596 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 fc42 	bl	8008e1a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d101      	bne.n	80075b6 <HAL_PCD_Start+0x16>
 80075b2:	2302      	movs	r3, #2
 80075b4:	e012      	b.n	80075dc <HAL_PCD_Start+0x3c>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4618      	mov	r0, r3
 80075c4:	f005 f818 	bl	800c5f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f007 fad9 	bl	800eb84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4618      	mov	r0, r3
 80075f2:	f007 fade 	bl	800ebb2 <USB_ReadInterrupts>
 80075f6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d003      	beq.n	800760a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fb06 	bl	8007c14 <PCD_EP_ISR_Handler>

    return;
 8007608:	e110      	b.n	800782c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007610:	2b00      	cmp	r3, #0
 8007612:	d013      	beq.n	800763c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800761c:	b29a      	uxth	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007626:	b292      	uxth	r2, r2
 8007628:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f009 fa4e 	bl	8010ace <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8007632:	2100      	movs	r1, #0
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f8fc 	bl	8007832 <HAL_PCD_SetAddress>

    return;
 800763a:	e0f7      	b.n	800782c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00c      	beq.n	8007660 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800764e:	b29a      	uxth	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007658:	b292      	uxth	r2, r2
 800765a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800765e:	e0e5      	b.n	800782c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00c      	beq.n	8007684 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007672:	b29a      	uxth	r2, r3
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800767c:	b292      	uxth	r2, r2
 800767e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8007682:	e0d3      	b.n	800782c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d034      	beq.n	80076f8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007696:	b29a      	uxth	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f022 0204 	bic.w	r2, r2, #4
 80076a0:	b292      	uxth	r2, r2
 80076a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0208 	bic.w	r2, r2, #8
 80076b8:	b292      	uxth	r2, r2
 80076ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d107      	bne.n	80076d8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80076d0:	2100      	movs	r1, #0
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f009 fbee 	bl	8010eb4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f009 fa31 	bl	8010b40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80076e6:	b29a      	uxth	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80076f0:	b292      	uxth	r2, r2
 80076f2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80076f6:	e099      	b.n	800782c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d027      	beq.n	8007752 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800770a:	b29a      	uxth	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f042 0208 	orr.w	r2, r2, #8
 8007714:	b292      	uxth	r2, r2
 8007716:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007722:	b29a      	uxth	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800772c:	b292      	uxth	r2, r2
 800772e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800773a:	b29a      	uxth	r2, r3
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f042 0204 	orr.w	r2, r2, #4
 8007744:	b292      	uxth	r2, r2
 8007746:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f009 f9de 	bl	8010b0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007750:	e06c      	b.n	800782c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007758:	2b00      	cmp	r3, #0
 800775a:	d040      	beq.n	80077de <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007764:	b29a      	uxth	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800776e:	b292      	uxth	r2, r2
 8007770:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800777a:	2b00      	cmp	r3, #0
 800777c:	d12b      	bne.n	80077d6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8007786:	b29a      	uxth	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f042 0204 	orr.w	r2, r2, #4
 8007790:	b292      	uxth	r2, r2
 8007792:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800779e:	b29a      	uxth	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0208 	orr.w	r2, r2, #8
 80077a8:	b292      	uxth	r2, r2
 80077aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80077be:	b29b      	uxth	r3, r3
 80077c0:	089b      	lsrs	r3, r3, #2
 80077c2:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80077cc:	2101      	movs	r1, #1
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f009 fb70 	bl	8010eb4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80077d4:	e02a      	b.n	800782c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f009 f998 	bl	8010b0c <HAL_PCD_SuspendCallback>
    return;
 80077dc:	e026      	b.n	800782c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00f      	beq.n	8007808 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80077fa:	b292      	uxth	r2, r2
 80077fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f009 f956 	bl	8010ab2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8007806:	e011      	b.n	800782c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00c      	beq.n	800782c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800781a:	b29a      	uxth	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007824:	b292      	uxth	r2, r2
 8007826:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800782a:	bf00      	nop
  }
}
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}

08007832 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007832:	b580      	push	{r7, lr}
 8007834:	b082      	sub	sp, #8
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	460b      	mov	r3, r1
 800783c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007844:	2b01      	cmp	r3, #1
 8007846:	d101      	bne.n	800784c <HAL_PCD_SetAddress+0x1a>
 8007848:	2302      	movs	r3, #2
 800784a:	e012      	b.n	8007872 <HAL_PCD_SetAddress+0x40>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	78fa      	ldrb	r2, [r7, #3]
 8007858:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	78fa      	ldrb	r2, [r7, #3]
 8007860:	4611      	mov	r1, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f007 f97a 	bl	800eb5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	4608      	mov	r0, r1
 8007884:	4611      	mov	r1, r2
 8007886:	461a      	mov	r2, r3
 8007888:	4603      	mov	r3, r0
 800788a:	70fb      	strb	r3, [r7, #3]
 800788c:	460b      	mov	r3, r1
 800788e:	803b      	strh	r3, [r7, #0]
 8007890:	4613      	mov	r3, r2
 8007892:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800789c:	2b00      	cmp	r3, #0
 800789e:	da0e      	bge.n	80078be <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078a0:	78fb      	ldrb	r3, [r7, #3]
 80078a2:	f003 0207 	and.w	r2, r3, #7
 80078a6:	4613      	mov	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4413      	add	r3, r2
 80078ac:	00db      	lsls	r3, r3, #3
 80078ae:	3310      	adds	r3, #16
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	4413      	add	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	705a      	strb	r2, [r3, #1]
 80078bc:	e00e      	b.n	80078dc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	f003 0207 	and.w	r2, r3, #7
 80078c4:	4613      	mov	r3, r2
 80078c6:	009b      	lsls	r3, r3, #2
 80078c8:	4413      	add	r3, r2
 80078ca:	00db      	lsls	r3, r3, #3
 80078cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	4413      	add	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2200      	movs	r2, #0
 80078da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80078e8:	883b      	ldrh	r3, [r7, #0]
 80078ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	78ba      	ldrb	r2, [r7, #2]
 80078f6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80078f8:	78bb      	ldrb	r3, [r7, #2]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d102      	bne.n	8007904 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800790a:	2b01      	cmp	r3, #1
 800790c:	d101      	bne.n	8007912 <HAL_PCD_EP_Open+0x98>
 800790e:	2302      	movs	r3, #2
 8007910:	e00e      	b.n	8007930 <HAL_PCD_EP_Open+0xb6>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68f9      	ldr	r1, [r7, #12]
 8007920:	4618      	mov	r0, r3
 8007922:	f004 feb9 	bl	800c698 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800792e:	7afb      	ldrb	r3, [r7, #11]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3710      	adds	r7, #16
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	460b      	mov	r3, r1
 8007942:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007948:	2b00      	cmp	r3, #0
 800794a:	da0e      	bge.n	800796a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800794c:	78fb      	ldrb	r3, [r7, #3]
 800794e:	f003 0207 	and.w	r2, r3, #7
 8007952:	4613      	mov	r3, r2
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	4413      	add	r3, r2
 8007958:	00db      	lsls	r3, r3, #3
 800795a:	3310      	adds	r3, #16
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	4413      	add	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2201      	movs	r2, #1
 8007966:	705a      	strb	r2, [r3, #1]
 8007968:	e00e      	b.n	8007988 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800796a:	78fb      	ldrb	r3, [r7, #3]
 800796c:	f003 0207 	and.w	r2, r3, #7
 8007970:	4613      	mov	r3, r2
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	4413      	add	r3, r2
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	4413      	add	r3, r2
 8007980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2200      	movs	r2, #0
 8007986:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	b2da      	uxtb	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800799a:	2b01      	cmp	r3, #1
 800799c:	d101      	bne.n	80079a2 <HAL_PCD_EP_Close+0x6a>
 800799e:	2302      	movs	r3, #2
 80079a0:	e00e      	b.n	80079c0 <HAL_PCD_EP_Close+0x88>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2201      	movs	r2, #1
 80079a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68f9      	ldr	r1, [r7, #12]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f005 fa35 	bl	800ce20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b086      	sub	sp, #24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	607a      	str	r2, [r7, #4]
 80079d2:	603b      	str	r3, [r7, #0]
 80079d4:	460b      	mov	r3, r1
 80079d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	f003 0207 	and.w	r2, r3, #7
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	00db      	lsls	r3, r3, #3
 80079e6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	4413      	add	r3, r2
 80079ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2200      	movs	r2, #0
 8007a00:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2200      	movs	r2, #0
 8007a06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a08:	7afb      	ldrb	r3, [r7, #11]
 8007a0a:	f003 0307 	and.w	r3, r3, #7
 8007a0e:	b2da      	uxtb	r2, r3
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6979      	ldr	r1, [r7, #20]
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	f005 fbed 	bl	800d1fa <USB_EPStartXfer>

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b083      	sub	sp, #12
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]
 8007a32:	460b      	mov	r3, r1
 8007a34:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007a36:	78fb      	ldrb	r3, [r7, #3]
 8007a38:	f003 0207 	and.w	r2, r3, #7
 8007a3c:	6879      	ldr	r1, [r7, #4]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	00db      	lsls	r3, r3, #3
 8007a46:	440b      	add	r3, r1
 8007a48:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8007a4c:	681b      	ldr	r3, [r3, #0]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b086      	sub	sp, #24
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	603b      	str	r3, [r7, #0]
 8007a66:	460b      	mov	r3, r1
 8007a68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a6a:	7afb      	ldrb	r3, [r7, #11]
 8007a6c:	f003 0207 	and.w	r2, r3, #7
 8007a70:	4613      	mov	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	3310      	adds	r3, #16
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	683a      	ldr	r2, [r7, #0]
 8007a8a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007aa6:	7afb      	ldrb	r3, [r7, #11]
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6979      	ldr	r1, [r7, #20]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f005 fb9e 	bl	800d1fa <USB_EPStartXfer>

  return HAL_OK;
 8007abe:	2300      	movs	r3, #0
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007ad4:	78fb      	ldrb	r3, [r7, #3]
 8007ad6:	f003 0307 	and.w	r3, r3, #7
 8007ada:	687a      	ldr	r2, [r7, #4]
 8007adc:	7912      	ldrb	r2, [r2, #4]
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d901      	bls.n	8007ae6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	e03e      	b.n	8007b64 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ae6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	da0e      	bge.n	8007b0c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007aee:	78fb      	ldrb	r3, [r7, #3]
 8007af0:	f003 0207 	and.w	r2, r3, #7
 8007af4:	4613      	mov	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	00db      	lsls	r3, r3, #3
 8007afc:	3310      	adds	r3, #16
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	4413      	add	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2201      	movs	r2, #1
 8007b08:	705a      	strb	r2, [r3, #1]
 8007b0a:	e00c      	b.n	8007b26 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007b0c:	78fa      	ldrb	r2, [r7, #3]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	00db      	lsls	r3, r3, #3
 8007b16:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b2c:	78fb      	ldrb	r3, [r7, #3]
 8007b2e:	f003 0307 	and.w	r3, r3, #7
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d101      	bne.n	8007b46 <HAL_PCD_EP_SetStall+0x7e>
 8007b42:	2302      	movs	r3, #2
 8007b44:	e00e      	b.n	8007b64 <HAL_PCD_EP_SetStall+0x9c>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2201      	movs	r2, #1
 8007b4a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68f9      	ldr	r1, [r7, #12]
 8007b54:	4618      	mov	r0, r3
 8007b56:	f006 ff02 	bl	800e95e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	460b      	mov	r3, r1
 8007b76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007b78:	78fb      	ldrb	r3, [r7, #3]
 8007b7a:	f003 030f 	and.w	r3, r3, #15
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	7912      	ldrb	r2, [r2, #4]
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d901      	bls.n	8007b8a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	e040      	b.n	8007c0c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	da0e      	bge.n	8007bb0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b92:	78fb      	ldrb	r3, [r7, #3]
 8007b94:	f003 0207 	and.w	r2, r3, #7
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	00db      	lsls	r3, r3, #3
 8007ba0:	3310      	adds	r3, #16
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2201      	movs	r2, #1
 8007bac:	705a      	strb	r2, [r3, #1]
 8007bae:	e00e      	b.n	8007bce <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	f003 0207 	and.w	r2, r3, #7
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	00db      	lsls	r3, r3, #3
 8007bbe:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007bc2:	687a      	ldr	r2, [r7, #4]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bd4:	78fb      	ldrb	r3, [r7, #3]
 8007bd6:	f003 0307 	and.w	r3, r3, #7
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d101      	bne.n	8007bee <HAL_PCD_EP_ClrStall+0x82>
 8007bea:	2302      	movs	r3, #2
 8007bec:	e00e      	b.n	8007c0c <HAL_PCD_EP_ClrStall+0xa0>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68f9      	ldr	r1, [r7, #12]
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f006 feff 	bl	800ea00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2200      	movs	r2, #0
 8007c06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8007c0a:	2300      	movs	r3, #0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b096      	sub	sp, #88	@ 0x58
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8007c1c:	e3ad      	b.n	800837a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007c26:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8007c2a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	f003 030f 	and.w	r3, r3, #15
 8007c34:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8007c38:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f040 816f 	bne.w	8007f20 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8007c42:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8007c46:	f003 0310 	and.w	r3, r3, #16
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d14c      	bne.n	8007ce8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	881b      	ldrh	r3, [r3, #0]
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c5e:	81fb      	strh	r3, [r7, #14]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	89fb      	ldrh	r3, [r7, #14]
 8007c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3310      	adds	r3, #16
 8007c76:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	461a      	mov	r2, r3
 8007c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	00db      	lsls	r3, r3, #3
 8007c8a:	4413      	add	r3, r2
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	6812      	ldr	r2, [r2, #0]
 8007c90:	4413      	add	r3, r2
 8007c92:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007c96:	881b      	ldrh	r3, [r3, #0]
 8007c98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007c9e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007ca0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ca2:	695a      	ldr	r2, [r3, #20]
 8007ca4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	441a      	add	r2, r3
 8007caa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cac:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007cae:	2100      	movs	r1, #0
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f008 fee4 	bl	8010a7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	7b1b      	ldrb	r3, [r3, #12]
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 835c 	beq.w	800837a <PCD_EP_ISR_Handler+0x766>
 8007cc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f040 8357 	bne.w	800837a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	7b1b      	ldrb	r3, [r3, #12]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007cd6:	b2da      	uxtb	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	731a      	strb	r2, [r3, #12]
 8007ce6:	e348      	b.n	800837a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007cee:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	881b      	ldrh	r3, [r3, #0]
 8007cf6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8007cfa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007cfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d032      	beq.n	8007d6c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	461a      	mov	r2, r3
 8007d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	4413      	add	r3, r2
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	6812      	ldr	r2, [r2, #0]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007d2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d2c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6818      	ldr	r0, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8007d38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d3a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8007d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d3e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007d40:	b29b      	uxth	r3, r3
 8007d42:	f006 ff88 	bl	800ec56 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	881b      	ldrh	r3, [r3, #0]
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007d52:	4013      	ands	r3, r2
 8007d54:	823b      	strh	r3, [r7, #16]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	8a3a      	ldrh	r2, [r7, #16]
 8007d5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d60:	b292      	uxth	r2, r2
 8007d62:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f008 fe5d 	bl	8010a24 <HAL_PCD_SetupStageCallback>
 8007d6a:	e306      	b.n	800837a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007d6c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f280 8302 	bge.w	800837a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007d82:	4013      	ands	r3, r2
 8007d84:	83fb      	strh	r3, [r7, #30]
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	8bfa      	ldrh	r2, [r7, #30]
 8007d8c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007d90:	b292      	uxth	r2, r2
 8007d92:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d9c:	b29b      	uxth	r3, r3
 8007d9e:	461a      	mov	r2, r3
 8007da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	00db      	lsls	r3, r3, #3
 8007da6:	4413      	add	r3, r2
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	6812      	ldr	r2, [r2, #0]
 8007dac:	4413      	add	r3, r2
 8007dae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007db2:	881b      	ldrh	r3, [r3, #0]
 8007db4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007db8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dba:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8007dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dbe:	69db      	ldr	r3, [r3, #28]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d019      	beq.n	8007df8 <PCD_EP_ISR_Handler+0x1e4>
 8007dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dc6:	695b      	ldr	r3, [r3, #20]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d015      	beq.n	8007df8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6818      	ldr	r0, [r3, #0]
 8007dd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dd2:	6959      	ldr	r1, [r3, #20]
 8007dd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dd6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8007dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dda:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	f006 ff3a 	bl	800ec56 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8007de2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007de4:	695a      	ldr	r2, [r3, #20]
 8007de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	441a      	add	r2, r3
 8007dec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dee:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8007df0:	2100      	movs	r1, #0
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f008 fe28 	bl	8010a48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8007e02:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007e06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f040 82b5 	bne.w	800837a <PCD_EP_ISR_Handler+0x766>
 8007e10:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007e14:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8007e18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007e1c:	f000 82ad 	beq.w	800837a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	61bb      	str	r3, [r7, #24]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	461a      	mov	r2, r3
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	4413      	add	r3, r2
 8007e36:	61bb      	str	r3, [r7, #24]
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007e3e:	617b      	str	r3, [r7, #20]
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	801a      	strh	r2, [r3, #0]
 8007e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10a      	bne.n	8007e6e <PCD_EP_ISR_Handler+0x25a>
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007e62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007e66:	b29a      	uxth	r2, r3
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	801a      	strh	r2, [r3, #0]
 8007e6c:	e039      	b.n	8007ee2 <PCD_EP_ISR_Handler+0x2ce>
 8007e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e70:	691b      	ldr	r3, [r3, #16]
 8007e72:	2b3e      	cmp	r3, #62	@ 0x3e
 8007e74:	d818      	bhi.n	8007ea8 <PCD_EP_ISR_Handler+0x294>
 8007e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	085b      	lsrs	r3, r3, #1
 8007e7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <PCD_EP_ISR_Handler+0x27c>
 8007e8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	881b      	ldrh	r3, [r3, #0]
 8007e94:	b29a      	uxth	r2, r3
 8007e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	029b      	lsls	r3, r3, #10
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	801a      	strh	r2, [r3, #0]
 8007ea6:	e01c      	b.n	8007ee2 <PCD_EP_ISR_Handler+0x2ce>
 8007ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	095b      	lsrs	r3, r3, #5
 8007eae:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	f003 031f 	and.w	r3, r3, #31
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d102      	bne.n	8007ec2 <PCD_EP_ISR_Handler+0x2ae>
 8007ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	029b      	lsls	r3, r3, #10
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007edc:	b29a      	uxth	r2, r3
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	881b      	ldrh	r3, [r3, #0]
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ef2:	827b      	strh	r3, [r7, #18]
 8007ef4:	8a7b      	ldrh	r3, [r7, #18]
 8007ef6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007efa:	827b      	strh	r3, [r7, #18]
 8007efc:	8a7b      	ldrh	r3, [r7, #18]
 8007efe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f02:	827b      	strh	r3, [r7, #18]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	8a7b      	ldrh	r3, [r7, #18]
 8007f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	8013      	strh	r3, [r2, #0]
 8007f1e:	e22c      	b.n	800837a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	461a      	mov	r2, r3
 8007f26:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	4413      	add	r3, r2
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007f34:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f280 80f6 	bge.w	800812a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	461a      	mov	r2, r3
 8007f44:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	4413      	add	r3, r2
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8007f54:	4013      	ands	r3, r2
 8007f56:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8007f6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007f70:	b292      	uxth	r2, r2
 8007f72:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007f74:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007f78:	4613      	mov	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	00db      	lsls	r3, r3, #3
 8007f80:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	4413      	add	r3, r2
 8007f88:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8007f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007f8c:	7b1b      	ldrb	r3, [r3, #12]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d123      	bne.n	8007fda <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f9a:	b29b      	uxth	r3, r3
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	4413      	add	r3, r2
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	4413      	add	r3, r2
 8007fac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fb6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8007fba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f000 808e 	beq.w	80080e0 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6818      	ldr	r0, [r3, #0]
 8007fc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fca:	6959      	ldr	r1, [r3, #20]
 8007fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fce:	88da      	ldrh	r2, [r3, #6]
 8007fd0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007fd4:	f006 fe3f 	bl	800ec56 <USB_ReadPMA>
 8007fd8:	e082      	b.n	80080e0 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8007fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fdc:	78db      	ldrb	r3, [r3, #3]
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d10a      	bne.n	8007ff8 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007fe2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f9d3 	bl	8008396 <HAL_PCD_EP_DB_Receive>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8007ff6:	e073      	b.n	80080e0 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	881b      	ldrh	r3, [r3, #0]
 8008008:	b29b      	uxth	r3, r3
 800800a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800800e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008012:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	461a      	mov	r2, r3
 800801c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	441a      	add	r2, r3
 8008024:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8008028:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800802c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008030:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008034:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008038:	b29b      	uxth	r3, r3
 800803a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	461a      	mov	r2, r3
 8008042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008044:	781b      	ldrb	r3, [r3, #0]
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	4413      	add	r3, r2
 800804a:	881b      	ldrh	r3, [r3, #0]
 800804c:	b29b      	uxth	r3, r3
 800804e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008052:	2b00      	cmp	r3, #0
 8008054:	d022      	beq.n	800809c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800805e:	b29b      	uxth	r3, r3
 8008060:	461a      	mov	r2, r3
 8008062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	4413      	add	r3, r2
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	6812      	ldr	r2, [r2, #0]
 800806e:	4413      	add	r3, r2
 8008070:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008074:	881b      	ldrh	r3, [r3, #0]
 8008076:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800807a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800807e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008082:	2b00      	cmp	r3, #0
 8008084:	d02c      	beq.n	80080e0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6818      	ldr	r0, [r3, #0]
 800808a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800808c:	6959      	ldr	r1, [r3, #20]
 800808e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008090:	891a      	ldrh	r2, [r3, #8]
 8008092:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8008096:	f006 fdde 	bl	800ec56 <USB_ReadPMA>
 800809a:	e021      	b.n	80080e0 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	461a      	mov	r2, r3
 80080a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	00db      	lsls	r3, r3, #3
 80080ae:	4413      	add	r3, r2
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	6812      	ldr	r2, [r2, #0]
 80080b4:	4413      	add	r3, r2
 80080b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080c0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80080c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d009      	beq.n	80080e0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6818      	ldr	r0, [r3, #0]
 80080d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080d2:	6959      	ldr	r1, [r3, #20]
 80080d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080d6:	895a      	ldrh	r2, [r3, #10]
 80080d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80080dc:	f006 fdbb 	bl	800ec56 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80080e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080e2:	69da      	ldr	r2, [r3, #28]
 80080e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80080e8:	441a      	add	r2, r3
 80080ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080ec:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80080ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080f0:	695a      	ldr	r2, [r3, #20]
 80080f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80080f6:	441a      	add	r2, r3
 80080f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080fa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80080fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d005      	beq.n	8008110 <PCD_EP_ISR_Handler+0x4fc>
 8008104:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8008108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	429a      	cmp	r2, r3
 800810e:	d206      	bcs.n	800811e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008110:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f008 fc96 	bl	8010a48 <HAL_PCD_DataOutStageCallback>
 800811c:	e005      	b.n	800812a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008124:	4618      	mov	r0, r3
 8008126:	f005 f868 	bl	800d1fa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800812a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800812e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 8121 	beq.w	800837a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8008138:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800813c:	4613      	mov	r3, r2
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	00db      	lsls	r3, r3, #3
 8008144:	3310      	adds	r3, #16
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	4413      	add	r3, r2
 800814a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	461a      	mov	r2, r3
 8008152:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	4413      	add	r3, r2
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8008162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008166:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	441a      	add	r2, r3
 8008178:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800817c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008184:	b29b      	uxth	r3, r3
 8008186:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800818a:	78db      	ldrb	r3, [r3, #3]
 800818c:	2b01      	cmp	r3, #1
 800818e:	f040 80a2 	bne.w	80082d6 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8008192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008194:	2200      	movs	r2, #0
 8008196:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800819a:	7b1b      	ldrb	r3, [r3, #12]
 800819c:	2b00      	cmp	r3, #0
 800819e:	f000 8093 	beq.w	80082c8 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80081a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80081a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d046      	beq.n	800823c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80081ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081b0:	785b      	ldrb	r3, [r3, #1]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d126      	bne.n	8008204 <PCD_EP_ISR_Handler+0x5f0>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081c4:	b29b      	uxth	r3, r3
 80081c6:	461a      	mov	r2, r3
 80081c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ca:	4413      	add	r3, r2
 80081cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80081ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	00da      	lsls	r2, r3, #3
 80081d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d6:	4413      	add	r3, r2
 80081d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80081dc:	623b      	str	r3, [r7, #32]
 80081de:	6a3b      	ldr	r3, [r7, #32]
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081e8:	b29a      	uxth	r2, r3
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	801a      	strh	r2, [r3, #0]
 80081ee:	6a3b      	ldr	r3, [r7, #32]
 80081f0:	881b      	ldrh	r3, [r3, #0]
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80081f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	801a      	strh	r2, [r3, #0]
 8008202:	e061      	b.n	80082c8 <PCD_EP_ISR_Handler+0x6b4>
 8008204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008206:	785b      	ldrb	r3, [r3, #1]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d15d      	bne.n	80082c8 <PCD_EP_ISR_Handler+0x6b4>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800821a:	b29b      	uxth	r3, r3
 800821c:	461a      	mov	r2, r3
 800821e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008220:	4413      	add	r3, r2
 8008222:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	00da      	lsls	r2, r3, #3
 800822a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800822c:	4413      	add	r3, r2
 800822e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008232:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008236:	2200      	movs	r2, #0
 8008238:	801a      	strh	r2, [r3, #0]
 800823a:	e045      	b.n	80082c8 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008244:	785b      	ldrb	r3, [r3, #1]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d126      	bne.n	8008298 <PCD_EP_ISR_Handler+0x684>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008258:	b29b      	uxth	r3, r3
 800825a:	461a      	mov	r2, r3
 800825c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825e:	4413      	add	r3, r2
 8008260:	637b      	str	r3, [r7, #52]	@ 0x34
 8008262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	00da      	lsls	r2, r3, #3
 8008268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800826a:	4413      	add	r3, r2
 800826c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008270:	633b      	str	r3, [r7, #48]	@ 0x30
 8008272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29b      	uxth	r3, r3
 8008278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800827c:	b29a      	uxth	r2, r3
 800827e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008280:	801a      	strh	r2, [r3, #0]
 8008282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800828c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008290:	b29a      	uxth	r2, r3
 8008292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008294:	801a      	strh	r2, [r3, #0]
 8008296:	e017      	b.n	80082c8 <PCD_EP_ISR_Handler+0x6b4>
 8008298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800829a:	785b      	ldrb	r3, [r3, #1]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d113      	bne.n	80082c8 <PCD_EP_ISR_Handler+0x6b4>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	461a      	mov	r2, r3
 80082ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ae:	4413      	add	r3, r2
 80082b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80082b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	00da      	lsls	r2, r3, #3
 80082b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082ba:	4413      	add	r3, r2
 80082bc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80082c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80082c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082c4:	2200      	movs	r2, #0
 80082c6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80082c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	4619      	mov	r1, r3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f008 fbd5 	bl	8010a7e <HAL_PCD_DataInStageCallback>
 80082d4:	e051      	b.n	800837a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80082d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80082da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d144      	bne.n	800836c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	461a      	mov	r2, r3
 80082ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	4413      	add	r3, r2
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	6812      	ldr	r2, [r2, #0]
 80082fa:	4413      	add	r3, r2
 80082fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008306:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800830a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800830c:	699a      	ldr	r2, [r3, #24]
 800830e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008312:	429a      	cmp	r2, r3
 8008314:	d907      	bls.n	8008326 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8008316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008318:	699a      	ldr	r2, [r3, #24]
 800831a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800831e:	1ad2      	subs	r2, r2, r3
 8008320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008322:	619a      	str	r2, [r3, #24]
 8008324:	e002      	b.n	800832c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8008326:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008328:	2200      	movs	r2, #0
 800832a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800832c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d106      	bne.n	8008342 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f008 fb9f 	bl	8010a7e <HAL_PCD_DataInStageCallback>
 8008340:	e01b      	b.n	800837a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008344:	695a      	ldr	r2, [r3, #20]
 8008346:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800834a:	441a      	add	r2, r3
 800834c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800834e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008350:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008352:	69da      	ldr	r2, [r3, #28]
 8008354:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8008358:	441a      	add	r2, r3
 800835a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800835c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008364:	4618      	mov	r0, r3
 8008366:	f004 ff48 	bl	800d1fa <USB_EPStartXfer>
 800836a:	e006      	b.n	800837a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800836c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8008370:	461a      	mov	r2, r3
 8008372:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f917 	bl	80085a8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008382:	b29b      	uxth	r3, r3
 8008384:	b21b      	sxth	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	f6ff ac49 	blt.w	8007c1e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	3758      	adds	r7, #88	@ 0x58
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b088      	sub	sp, #32
 800839a:	af00      	add	r7, sp, #0
 800839c:	60f8      	str	r0, [r7, #12]
 800839e:	60b9      	str	r1, [r7, #8]
 80083a0:	4613      	mov	r3, r2
 80083a2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80083a4:	88fb      	ldrh	r3, [r7, #6]
 80083a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d07c      	beq.n	80084a8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	461a      	mov	r2, r3
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	00db      	lsls	r3, r3, #3
 80083c0:	4413      	add	r3, r2
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	6812      	ldr	r2, [r2, #0]
 80083c6:	4413      	add	r3, r2
 80083c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	699a      	ldr	r2, [r3, #24]
 80083d8:	8b7b      	ldrh	r3, [r7, #26]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d306      	bcc.n	80083ec <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	699a      	ldr	r2, [r3, #24]
 80083e2:	8b7b      	ldrh	r3, [r7, #26]
 80083e4:	1ad2      	subs	r2, r2, r3
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	619a      	str	r2, [r3, #24]
 80083ea:	e002      	b.n	80083f2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	2200      	movs	r2, #0
 80083f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d123      	bne.n	8008442 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	461a      	mov	r2, r3
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	b29b      	uxth	r3, r3
 800840c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008414:	833b      	strh	r3, [r7, #24]
 8008416:	8b3b      	ldrh	r3, [r7, #24]
 8008418:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800841c:	833b      	strh	r3, [r7, #24]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	441a      	add	r2, r3
 800842c:	8b3b      	ldrh	r3, [r7, #24]
 800842e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008432:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008436:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800843a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800843e:	b29b      	uxth	r3, r3
 8008440:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008442:	88fb      	ldrh	r3, [r7, #6]
 8008444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008448:	2b00      	cmp	r3, #0
 800844a:	d01f      	beq.n	800848c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	461a      	mov	r2, r3
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	009b      	lsls	r3, r3, #2
 8008458:	4413      	add	r3, r2
 800845a:	881b      	ldrh	r3, [r3, #0]
 800845c:	b29b      	uxth	r3, r3
 800845e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008466:	82fb      	strh	r3, [r7, #22]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	461a      	mov	r2, r3
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	441a      	add	r2, r3
 8008476:	8afb      	ldrh	r3, [r7, #22]
 8008478:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800847c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008480:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008484:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008488:	b29b      	uxth	r3, r3
 800848a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800848c:	8b7b      	ldrh	r3, [r7, #26]
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 8085 	beq.w	800859e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6818      	ldr	r0, [r3, #0]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	6959      	ldr	r1, [r3, #20]
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	891a      	ldrh	r2, [r3, #8]
 80084a0:	8b7b      	ldrh	r3, [r7, #26]
 80084a2:	f006 fbd8 	bl	800ec56 <USB_ReadPMA>
 80084a6:	e07a      	b.n	800859e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	461a      	mov	r2, r3
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	00db      	lsls	r3, r3, #3
 80084ba:	4413      	add	r3, r2
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	6812      	ldr	r2, [r2, #0]
 80084c0:	4413      	add	r3, r2
 80084c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80084cc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	699a      	ldr	r2, [r3, #24]
 80084d2:	8b7b      	ldrh	r3, [r7, #26]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	d306      	bcc.n	80084e6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	699a      	ldr	r2, [r3, #24]
 80084dc:	8b7b      	ldrh	r3, [r7, #26]
 80084de:	1ad2      	subs	r2, r2, r3
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	619a      	str	r2, [r3, #24]
 80084e4:	e002      	b.n	80084ec <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	2200      	movs	r2, #0
 80084ea:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d123      	bne.n	800853c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	461a      	mov	r2, r3
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	b29b      	uxth	r3, r3
 8008506:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800850a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800850e:	83fb      	strh	r3, [r7, #30]
 8008510:	8bfb      	ldrh	r3, [r7, #30]
 8008512:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008516:	83fb      	strh	r3, [r7, #30]
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	461a      	mov	r2, r3
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	441a      	add	r2, r3
 8008526:	8bfb      	ldrh	r3, [r7, #30]
 8008528:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800852c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008530:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008534:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008538:	b29b      	uxth	r3, r3
 800853a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800853c:	88fb      	ldrh	r3, [r7, #6]
 800853e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008542:	2b00      	cmp	r3, #0
 8008544:	d11f      	bne.n	8008586 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	461a      	mov	r2, r3
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	009b      	lsls	r3, r3, #2
 8008552:	4413      	add	r3, r2
 8008554:	881b      	ldrh	r3, [r3, #0]
 8008556:	b29b      	uxth	r3, r3
 8008558:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800855c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008560:	83bb      	strh	r3, [r7, #28]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	441a      	add	r2, r3
 8008570:	8bbb      	ldrh	r3, [r7, #28]
 8008572:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008576:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800857a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800857e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008582:	b29b      	uxth	r3, r3
 8008584:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8008586:	8b7b      	ldrh	r3, [r7, #26]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d008      	beq.n	800859e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6818      	ldr	r0, [r3, #0]
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	6959      	ldr	r1, [r3, #20]
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	895a      	ldrh	r2, [r3, #10]
 8008598:	8b7b      	ldrh	r3, [r7, #26]
 800859a:	f006 fb5c 	bl	800ec56 <USB_ReadPMA>
    }
  }

  return count;
 800859e:	8b7b      	ldrh	r3, [r7, #26]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3720      	adds	r7, #32
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b0a4      	sub	sp, #144	@ 0x90
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	4613      	mov	r3, r2
 80085b4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80085b6:	88fb      	ldrh	r3, [r7, #6]
 80085b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 81db 	beq.w	8008978 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	461a      	mov	r2, r3
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	00db      	lsls	r3, r3, #3
 80085d4:	4413      	add	r3, r2
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	6812      	ldr	r2, [r2, #0]
 80085da:	4413      	add	r3, r2
 80085dc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80085e0:	881b      	ldrh	r3, [r3, #0]
 80085e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085e6:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	699a      	ldr	r2, [r3, #24]
 80085ee:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d907      	bls.n	8008606 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	699a      	ldr	r2, [r3, #24]
 80085fa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80085fe:	1ad2      	subs	r2, r2, r3
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	619a      	str	r2, [r3, #24]
 8008604:	e002      	b.n	800860c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	2200      	movs	r2, #0
 800860a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	2b00      	cmp	r3, #0
 8008612:	f040 80b9 	bne.w	8008788 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	785b      	ldrb	r3, [r3, #1]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d126      	bne.n	800866c <HAL_PCD_EP_DB_Transmit+0xc4>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800862c:	b29b      	uxth	r3, r3
 800862e:	461a      	mov	r2, r3
 8008630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008632:	4413      	add	r3, r2
 8008634:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	00da      	lsls	r2, r3, #3
 800863c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800863e:	4413      	add	r3, r2
 8008640:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008648:	881b      	ldrh	r3, [r3, #0]
 800864a:	b29b      	uxth	r3, r3
 800864c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008650:	b29a      	uxth	r2, r3
 8008652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008654:	801a      	strh	r2, [r3, #0]
 8008656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008658:	881b      	ldrh	r3, [r3, #0]
 800865a:	b29b      	uxth	r3, r3
 800865c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008660:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008664:	b29a      	uxth	r2, r3
 8008666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008668:	801a      	strh	r2, [r3, #0]
 800866a:	e01a      	b.n	80086a2 <HAL_PCD_EP_DB_Transmit+0xfa>
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	785b      	ldrb	r3, [r3, #1]
 8008670:	2b01      	cmp	r3, #1
 8008672:	d116      	bne.n	80086a2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	637b      	str	r3, [r7, #52]	@ 0x34
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008682:	b29b      	uxth	r3, r3
 8008684:	461a      	mov	r2, r3
 8008686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008688:	4413      	add	r3, r2
 800868a:	637b      	str	r3, [r7, #52]	@ 0x34
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	00da      	lsls	r2, r3, #3
 8008692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008694:	4413      	add	r3, r2
 8008696:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800869a:	633b      	str	r3, [r7, #48]	@ 0x30
 800869c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800869e:	2200      	movs	r2, #0
 80086a0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	785b      	ldrb	r3, [r3, #1]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d126      	bne.n	80086fe <HAL_PCD_EP_DB_Transmit+0x156>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	61fb      	str	r3, [r7, #28]
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086be:	b29b      	uxth	r3, r3
 80086c0:	461a      	mov	r2, r3
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	4413      	add	r3, r2
 80086c6:	61fb      	str	r3, [r7, #28]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	00da      	lsls	r2, r3, #3
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	4413      	add	r3, r2
 80086d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80086d6:	61bb      	str	r3, [r7, #24]
 80086d8:	69bb      	ldr	r3, [r7, #24]
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	b29b      	uxth	r3, r3
 80086de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80086e2:	b29a      	uxth	r2, r3
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	801a      	strh	r2, [r3, #0]
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	881b      	ldrh	r3, [r3, #0]
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80086f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	801a      	strh	r2, [r3, #0]
 80086fc:	e017      	b.n	800872e <HAL_PCD_EP_DB_Transmit+0x186>
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	785b      	ldrb	r3, [r3, #1]
 8008702:	2b01      	cmp	r3, #1
 8008704:	d113      	bne.n	800872e <HAL_PCD_EP_DB_Transmit+0x186>
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800870e:	b29b      	uxth	r3, r3
 8008710:	461a      	mov	r2, r3
 8008712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008714:	4413      	add	r3, r2
 8008716:	627b      	str	r3, [r7, #36]	@ 0x24
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	781b      	ldrb	r3, [r3, #0]
 800871c:	00da      	lsls	r2, r3, #3
 800871e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008720:	4413      	add	r3, r2
 8008722:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008726:	623b      	str	r3, [r7, #32]
 8008728:	6a3b      	ldr	r3, [r7, #32]
 800872a:	2200      	movs	r2, #0
 800872c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	4619      	mov	r1, r3
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	f008 f9a2 	bl	8010a7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800873a:	88fb      	ldrh	r3, [r7, #6]
 800873c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 82fa 	beq.w	8008d3a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	4413      	add	r3, r2
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	b29b      	uxth	r3, r3
 8008758:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800875c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008760:	82fb      	strh	r3, [r7, #22]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	461a      	mov	r2, r3
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	441a      	add	r2, r3
 8008770:	8afb      	ldrh	r3, [r7, #22]
 8008772:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008776:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800877a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800877e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008782:	b29b      	uxth	r3, r3
 8008784:	8013      	strh	r3, [r2, #0]
 8008786:	e2d8      	b.n	8008d3a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008788:	88fb      	ldrh	r3, [r7, #6]
 800878a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d021      	beq.n	80087d6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	881b      	ldrh	r3, [r3, #0]
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ac:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	461a      	mov	r2, r3
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	441a      	add	r2, r3
 80087be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80087c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80087c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80087ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80087ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80087dc:	2b01      	cmp	r3, #1
 80087de:	f040 82ac 	bne.w	8008d3a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	695a      	ldr	r2, [r3, #20]
 80087e6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80087ea:	441a      	add	r2, r3
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	69da      	ldr	r2, [r3, #28]
 80087f4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80087f8:	441a      	add	r2, r3
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	6a1a      	ldr	r2, [r3, #32]
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	429a      	cmp	r2, r3
 8008808:	d30b      	bcc.n	8008822 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	691b      	ldr	r3, [r3, #16]
 800880e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	6a1a      	ldr	r2, [r3, #32]
 8008816:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800881a:	1ad2      	subs	r2, r2, r3
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	621a      	str	r2, [r3, #32]
 8008820:	e017      	b.n	8008852 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d108      	bne.n	800883c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800882a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800882e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800883a:	e00a      	b.n	8008852 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2200      	movs	r2, #0
 8008840:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	6a1b      	ldr	r3, [r3, #32]
 8008848:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2200      	movs	r2, #0
 8008850:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	785b      	ldrb	r3, [r3, #1]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d165      	bne.n	8008926 <HAL_PCD_EP_DB_Transmit+0x37e>
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008868:	b29b      	uxth	r3, r3
 800886a:	461a      	mov	r2, r3
 800886c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800886e:	4413      	add	r3, r2
 8008870:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	00da      	lsls	r2, r3, #3
 8008878:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800887a:	4413      	add	r3, r2
 800887c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008880:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	b29b      	uxth	r3, r3
 8008888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800888c:	b29a      	uxth	r2, r3
 800888e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008890:	801a      	strh	r2, [r3, #0]
 8008892:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10a      	bne.n	80088b0 <HAL_PCD_EP_DB_Transmit+0x308>
 800889a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ac:	801a      	strh	r2, [r3, #0]
 80088ae:	e057      	b.n	8008960 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80088b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088b4:	2b3e      	cmp	r3, #62	@ 0x3e
 80088b6:	d818      	bhi.n	80088ea <HAL_PCD_EP_DB_Transmit+0x342>
 80088b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088bc:	085b      	lsrs	r3, r3, #1
 80088be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088c4:	f003 0301 	and.w	r3, r3, #1
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <HAL_PCD_EP_DB_Transmit+0x32a>
 80088cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088ce:	3301      	adds	r3, #1
 80088d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088da:	b29b      	uxth	r3, r3
 80088dc:	029b      	lsls	r3, r3, #10
 80088de:	b29b      	uxth	r3, r3
 80088e0:	4313      	orrs	r3, r2
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e6:	801a      	strh	r2, [r3, #0]
 80088e8:	e03a      	b.n	8008960 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80088ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088ee:	095b      	lsrs	r3, r3, #5
 80088f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80088f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80088f6:	f003 031f 	and.w	r3, r3, #31
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d102      	bne.n	8008904 <HAL_PCD_EP_DB_Transmit+0x35c>
 80088fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008900:	3b01      	subs	r3, #1
 8008902:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008906:	881b      	ldrh	r3, [r3, #0]
 8008908:	b29a      	uxth	r2, r3
 800890a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800890c:	b29b      	uxth	r3, r3
 800890e:	029b      	lsls	r3, r3, #10
 8008910:	b29b      	uxth	r3, r3
 8008912:	4313      	orrs	r3, r2
 8008914:	b29b      	uxth	r3, r3
 8008916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800891a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800891e:	b29a      	uxth	r2, r3
 8008920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008922:	801a      	strh	r2, [r3, #0]
 8008924:	e01c      	b.n	8008960 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	785b      	ldrb	r3, [r3, #1]
 800892a:	2b01      	cmp	r3, #1
 800892c:	d118      	bne.n	8008960 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	647b      	str	r3, [r7, #68]	@ 0x44
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800893c:	b29b      	uxth	r3, r3
 800893e:	461a      	mov	r2, r3
 8008940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008942:	4413      	add	r3, r2
 8008944:	647b      	str	r3, [r7, #68]	@ 0x44
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	00da      	lsls	r2, r3, #3
 800894c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800894e:	4413      	add	r3, r2
 8008950:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008954:	643b      	str	r3, [r7, #64]	@ 0x40
 8008956:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800895a:	b29a      	uxth	r2, r3
 800895c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800895e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6818      	ldr	r0, [r3, #0]
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	6959      	ldr	r1, [r3, #20]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	891a      	ldrh	r2, [r3, #8]
 800896c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008970:	b29b      	uxth	r3, r3
 8008972:	f006 f92e 	bl	800ebd2 <USB_WritePMA>
 8008976:	e1e0      	b.n	8008d3a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008980:	b29b      	uxth	r3, r3
 8008982:	461a      	mov	r2, r3
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	00db      	lsls	r3, r3, #3
 800898a:	4413      	add	r3, r2
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	6812      	ldr	r2, [r2, #0]
 8008990:	4413      	add	r3, r2
 8008992:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008996:	881b      	ldrh	r3, [r3, #0]
 8008998:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800899c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	699a      	ldr	r2, [r3, #24]
 80089a4:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d307      	bcc.n	80089bc <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	699a      	ldr	r2, [r3, #24]
 80089b0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80089b4:	1ad2      	subs	r2, r2, r3
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	619a      	str	r2, [r3, #24]
 80089ba:	e002      	b.n	80089c2 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2200      	movs	r2, #0
 80089c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f040 80c0 	bne.w	8008b4c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	785b      	ldrb	r3, [r3, #1]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d126      	bne.n	8008a22 <HAL_PCD_EP_DB_Transmit+0x47a>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089e2:	b29b      	uxth	r3, r3
 80089e4:	461a      	mov	r2, r3
 80089e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089e8:	4413      	add	r3, r2
 80089ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	00da      	lsls	r2, r3, #3
 80089f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089f4:	4413      	add	r3, r2
 80089f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80089fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a0a:	801a      	strh	r2, [r3, #0]
 8008a0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a0e:	881b      	ldrh	r3, [r3, #0]
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a1e:	801a      	strh	r2, [r3, #0]
 8008a20:	e01a      	b.n	8008a58 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	785b      	ldrb	r3, [r3, #1]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d116      	bne.n	8008a58 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a3e:	4413      	add	r3, r2
 8008a40:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	781b      	ldrb	r3, [r3, #0]
 8008a46:	00da      	lsls	r2, r3, #3
 8008a48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a4a:	4413      	add	r3, r2
 8008a4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008a50:	663b      	str	r3, [r7, #96]	@ 0x60
 8008a52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008a54:	2200      	movs	r2, #0
 8008a56:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	785b      	ldrb	r3, [r3, #1]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d12b      	bne.n	8008abe <HAL_PCD_EP_DB_Transmit+0x516>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	461a      	mov	r2, r3
 8008a78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a7a:	4413      	add	r3, r2
 8008a7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	00da      	lsls	r2, r3, #3
 8008a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a86:	4413      	add	r3, r2
 8008a88:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008a8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a9c:	b29a      	uxth	r2, r3
 8008a9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008aa2:	801a      	strh	r2, [r3, #0]
 8008aa4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008aa8:	881b      	ldrh	r3, [r3, #0]
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008aba:	801a      	strh	r2, [r3, #0]
 8008abc:	e017      	b.n	8008aee <HAL_PCD_EP_DB_Transmit+0x546>
 8008abe:	68bb      	ldr	r3, [r7, #8]
 8008ac0:	785b      	ldrb	r3, [r3, #1]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d113      	bne.n	8008aee <HAL_PCD_EP_DB_Transmit+0x546>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ad4:	4413      	add	r3, r2
 8008ad6:	677b      	str	r3, [r7, #116]	@ 0x74
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	00da      	lsls	r2, r3, #3
 8008ade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008ae6:	673b      	str	r3, [r7, #112]	@ 0x70
 8008ae8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008aea:	2200      	movs	r2, #0
 8008aec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	4619      	mov	r1, r3
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f007 ffc2 	bl	8010a7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008afa:	88fb      	ldrh	r3, [r7, #6]
 8008afc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f040 811a 	bne.w	8008d3a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	881b      	ldrh	r3, [r3, #0]
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b20:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	441a      	add	r2, r3
 8008b32:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8008b36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	8013      	strh	r3, [r2, #0]
 8008b4a:	e0f6      	b.n	8008d3a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8008b4c:	88fb      	ldrh	r3, [r7, #6]
 8008b4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d121      	bne.n	8008b9a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	881b      	ldrh	r3, [r3, #0]
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b70:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	441a      	add	r2, r3
 8008b82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008b86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008b8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008b8e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	f040 80ca 	bne.w	8008d3a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	695a      	ldr	r2, [r3, #20]
 8008baa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008bae:	441a      	add	r2, r3
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	69da      	ldr	r2, [r3, #28]
 8008bb8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008bbc:	441a      	add	r2, r3
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	6a1a      	ldr	r2, [r3, #32]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d30b      	bcc.n	8008be6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	691b      	ldr	r3, [r3, #16]
 8008bd2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	6a1a      	ldr	r2, [r3, #32]
 8008bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008bde:	1ad2      	subs	r2, r2, r3
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	621a      	str	r2, [r3, #32]
 8008be4:	e017      	b.n	8008c16 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d108      	bne.n	8008c00 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8008bee:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8008bf2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8008bfe:	e00a      	b.n	8008c16 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	785b      	ldrb	r3, [r3, #1]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d165      	bne.n	8008cf0 <HAL_PCD_EP_DB_Transmit+0x748>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008c32:	b29b      	uxth	r3, r3
 8008c34:	461a      	mov	r2, r3
 8008c36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c38:	4413      	add	r3, r2
 8008c3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	00da      	lsls	r2, r3, #3
 8008c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c44:	4413      	add	r3, r2
 8008c46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008c4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008c4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c4e:	881b      	ldrh	r3, [r3, #0]
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c5a:	801a      	strh	r2, [r3, #0]
 8008c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10a      	bne.n	8008c7a <HAL_PCD_EP_DB_Transmit+0x6d2>
 8008c64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c66:	881b      	ldrh	r3, [r3, #0]
 8008c68:	b29b      	uxth	r3, r3
 8008c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c76:	801a      	strh	r2, [r3, #0]
 8008c78:	e054      	b.n	8008d24 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c7e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008c80:	d818      	bhi.n	8008cb4 <HAL_PCD_EP_DB_Transmit+0x70c>
 8008c82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c86:	085b      	lsrs	r3, r3, #1
 8008c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d002      	beq.n	8008c9c <HAL_PCD_EP_DB_Transmit+0x6f4>
 8008c96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c98:	3301      	adds	r3, #1
 8008c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008c9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c9e:	881b      	ldrh	r3, [r3, #0]
 8008ca0:	b29a      	uxth	r2, r3
 8008ca2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	029b      	lsls	r3, r3, #10
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	4313      	orrs	r3, r2
 8008cac:	b29a      	uxth	r2, r3
 8008cae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cb0:	801a      	strh	r2, [r3, #0]
 8008cb2:	e037      	b.n	8008d24 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cb8:	095b      	lsrs	r3, r3, #5
 8008cba:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cc0:	f003 031f 	and.w	r3, r3, #31
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d102      	bne.n	8008cce <HAL_PCD_EP_DB_Transmit+0x726>
 8008cc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cd0:	881b      	ldrh	r3, [r3, #0]
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	029b      	lsls	r3, r3, #10
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cec:	801a      	strh	r2, [r3, #0]
 8008cee:	e019      	b.n	8008d24 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	785b      	ldrb	r3, [r3, #1]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d115      	bne.n	8008d24 <HAL_PCD_EP_DB_Transmit+0x77c>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	461a      	mov	r2, r3
 8008d04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d06:	4413      	add	r3, r2
 8008d08:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	00da      	lsls	r2, r3, #3
 8008d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d12:	4413      	add	r3, r2
 8008d14:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008d18:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d22:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6818      	ldr	r0, [r3, #0]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	6959      	ldr	r1, [r3, #20]
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	895a      	ldrh	r2, [r3, #10]
 8008d30:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	f005 ff4c 	bl	800ebd2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	461a      	mov	r2, r3
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	881b      	ldrh	r3, [r3, #0]
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d54:	82bb      	strh	r3, [r7, #20]
 8008d56:	8abb      	ldrh	r3, [r7, #20]
 8008d58:	f083 0310 	eor.w	r3, r3, #16
 8008d5c:	82bb      	strh	r3, [r7, #20]
 8008d5e:	8abb      	ldrh	r3, [r7, #20]
 8008d60:	f083 0320 	eor.w	r3, r3, #32
 8008d64:	82bb      	strh	r3, [r7, #20]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	441a      	add	r2, r3
 8008d74:	8abb      	ldrh	r3, [r7, #20]
 8008d76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008d7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d86:	b29b      	uxth	r3, r3
 8008d88:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8008d8a:	2300      	movs	r3, #0
}
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	3790      	adds	r7, #144	@ 0x90
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	60f8      	str	r0, [r7, #12]
 8008d9c:	607b      	str	r3, [r7, #4]
 8008d9e:	460b      	mov	r3, r1
 8008da0:	817b      	strh	r3, [r7, #10]
 8008da2:	4613      	mov	r3, r2
 8008da4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8008da6:	897b      	ldrh	r3, [r7, #10]
 8008da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00b      	beq.n	8008dca <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008db2:	897b      	ldrh	r3, [r7, #10]
 8008db4:	f003 0207 	and.w	r2, r3, #7
 8008db8:	4613      	mov	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	00db      	lsls	r3, r3, #3
 8008dc0:	3310      	adds	r3, #16
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	617b      	str	r3, [r7, #20]
 8008dc8:	e009      	b.n	8008dde <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008dca:	897a      	ldrh	r2, [r7, #10]
 8008dcc:	4613      	mov	r3, r2
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4413      	add	r3, r2
 8008ddc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8008dde:	893b      	ldrh	r3, [r7, #8]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d107      	bne.n	8008df4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	2200      	movs	r2, #0
 8008de8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	80da      	strh	r2, [r3, #6]
 8008df2:	e00b      	b.n	8008e0c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	2201      	movs	r2, #1
 8008df8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	0c1b      	lsrs	r3, r3, #16
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	371c      	adds	r7, #28
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b085      	sub	sp, #20
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	f043 0301 	orr.w	r3, r3, #1
 8008e44:	b29a      	uxth	r2, r3
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	f043 0302 	orr.w	r3, r3, #2
 8008e58:	b29a      	uxth	r2, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
	...

08008e70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b085      	sub	sp, #20
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d141      	bne.n	8008f02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e8a:	d131      	bne.n	8008ef0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e8c:	4b47      	ldr	r3, [pc, #284]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e92:	4a46      	ldr	r2, [pc, #280]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e9c:	4b43      	ldr	r3, [pc, #268]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008ea4:	4a41      	ldr	r2, [pc, #260]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008eaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008eac:	4b40      	ldr	r3, [pc, #256]	@ (8008fb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2232      	movs	r2, #50	@ 0x32
 8008eb2:	fb02 f303 	mul.w	r3, r2, r3
 8008eb6:	4a3f      	ldr	r2, [pc, #252]	@ (8008fb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8008ebc:	0c9b      	lsrs	r3, r3, #18
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008ec2:	e002      	b.n	8008eca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008eca:	4b38      	ldr	r3, [pc, #224]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ed6:	d102      	bne.n	8008ede <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1f2      	bne.n	8008ec4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008ede:	4b33      	ldr	r3, [pc, #204]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ee0:	695b      	ldr	r3, [r3, #20]
 8008ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008eea:	d158      	bne.n	8008f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e057      	b.n	8008fa0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008efc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008f00:	e04d      	b.n	8008f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f08:	d141      	bne.n	8008f8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f0a:	4b28      	ldr	r3, [pc, #160]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f16:	d131      	bne.n	8008f7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f18:	4b24      	ldr	r3, [pc, #144]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f1e:	4a23      	ldr	r2, [pc, #140]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f28:	4b20      	ldr	r3, [pc, #128]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008f30:	4a1e      	ldr	r2, [pc, #120]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008f36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008f38:	4b1d      	ldr	r3, [pc, #116]	@ (8008fb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2232      	movs	r2, #50	@ 0x32
 8008f3e:	fb02 f303 	mul.w	r3, r2, r3
 8008f42:	4a1c      	ldr	r2, [pc, #112]	@ (8008fb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008f44:	fba2 2303 	umull	r2, r3, r2, r3
 8008f48:	0c9b      	lsrs	r3, r3, #18
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f4e:	e002      	b.n	8008f56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f56:	4b15      	ldr	r3, [pc, #84]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f62:	d102      	bne.n	8008f6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1f2      	bne.n	8008f50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f6a:	4b10      	ldr	r3, [pc, #64]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f6c:	695b      	ldr	r3, [r3, #20]
 8008f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f76:	d112      	bne.n	8008f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	e011      	b.n	8008fa0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f82:	4a0a      	ldr	r2, [pc, #40]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008f8c:	e007      	b.n	8008f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008f8e:	4b07      	ldr	r3, [pc, #28]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008f96:	4a05      	ldr	r2, [pc, #20]	@ (8008fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008f9c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3714      	adds	r7, #20
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr
 8008fac:	40007000 	.word	0x40007000
 8008fb0:	20000068 	.word	0x20000068
 8008fb4:	431bde83 	.word	0x431bde83

08008fb8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008fbc:	4b05      	ldr	r3, [pc, #20]	@ (8008fd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	4a04      	ldr	r2, [pc, #16]	@ (8008fd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008fc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008fc6:	6093      	str	r3, [r2, #8]
}
 8008fc8:	bf00      	nop
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	40007000 	.word	0x40007000

08008fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b088      	sub	sp, #32
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d101      	bne.n	8008fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	e2fe      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d075      	beq.n	80090e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ff6:	4b97      	ldr	r3, [pc, #604]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f003 030c 	and.w	r3, r3, #12
 8008ffe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009000:	4b94      	ldr	r3, [pc, #592]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f003 0303 	and.w	r3, r3, #3
 8009008:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	2b0c      	cmp	r3, #12
 800900e:	d102      	bne.n	8009016 <HAL_RCC_OscConfig+0x3e>
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	2b03      	cmp	r3, #3
 8009014:	d002      	beq.n	800901c <HAL_RCC_OscConfig+0x44>
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	2b08      	cmp	r3, #8
 800901a:	d10b      	bne.n	8009034 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800901c:	4b8d      	ldr	r3, [pc, #564]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009024:	2b00      	cmp	r3, #0
 8009026:	d05b      	beq.n	80090e0 <HAL_RCC_OscConfig+0x108>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d157      	bne.n	80090e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009030:	2301      	movs	r3, #1
 8009032:	e2d9      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800903c:	d106      	bne.n	800904c <HAL_RCC_OscConfig+0x74>
 800903e:	4b85      	ldr	r3, [pc, #532]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a84      	ldr	r2, [pc, #528]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 8009044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009048:	6013      	str	r3, [r2, #0]
 800904a:	e01d      	b.n	8009088 <HAL_RCC_OscConfig+0xb0>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009054:	d10c      	bne.n	8009070 <HAL_RCC_OscConfig+0x98>
 8009056:	4b7f      	ldr	r3, [pc, #508]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a7e      	ldr	r2, [pc, #504]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 800905c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009060:	6013      	str	r3, [r2, #0]
 8009062:	4b7c      	ldr	r3, [pc, #496]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	4a7b      	ldr	r2, [pc, #492]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 8009068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800906c:	6013      	str	r3, [r2, #0]
 800906e:	e00b      	b.n	8009088 <HAL_RCC_OscConfig+0xb0>
 8009070:	4b78      	ldr	r3, [pc, #480]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a77      	ldr	r2, [pc, #476]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 8009076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800907a:	6013      	str	r3, [r2, #0]
 800907c:	4b75      	ldr	r3, [pc, #468]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a74      	ldr	r2, [pc, #464]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 8009082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	685b      	ldr	r3, [r3, #4]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d013      	beq.n	80090b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009090:	f7fb fbb6 	bl	8004800 <HAL_GetTick>
 8009094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009096:	e008      	b.n	80090aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009098:	f7fb fbb2 	bl	8004800 <HAL_GetTick>
 800909c:	4602      	mov	r2, r0
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	2b64      	cmp	r3, #100	@ 0x64
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e29e      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090aa:	4b6a      	ldr	r3, [pc, #424]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0f0      	beq.n	8009098 <HAL_RCC_OscConfig+0xc0>
 80090b6:	e014      	b.n	80090e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090b8:	f7fb fba2 	bl	8004800 <HAL_GetTick>
 80090bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80090be:	e008      	b.n	80090d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090c0:	f7fb fb9e 	bl	8004800 <HAL_GetTick>
 80090c4:	4602      	mov	r2, r0
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	1ad3      	subs	r3, r2, r3
 80090ca:	2b64      	cmp	r3, #100	@ 0x64
 80090cc:	d901      	bls.n	80090d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e28a      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80090d2:	4b60      	ldr	r3, [pc, #384]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d1f0      	bne.n	80090c0 <HAL_RCC_OscConfig+0xe8>
 80090de:	e000      	b.n	80090e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0302 	and.w	r3, r3, #2
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d075      	beq.n	80091da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090ee:	4b59      	ldr	r3, [pc, #356]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	f003 030c 	and.w	r3, r3, #12
 80090f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80090f8:	4b56      	ldr	r3, [pc, #344]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	f003 0303 	and.w	r3, r3, #3
 8009100:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009102:	69bb      	ldr	r3, [r7, #24]
 8009104:	2b0c      	cmp	r3, #12
 8009106:	d102      	bne.n	800910e <HAL_RCC_OscConfig+0x136>
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	2b02      	cmp	r3, #2
 800910c:	d002      	beq.n	8009114 <HAL_RCC_OscConfig+0x13c>
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	2b04      	cmp	r3, #4
 8009112:	d11f      	bne.n	8009154 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009114:	4b4f      	ldr	r3, [pc, #316]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800911c:	2b00      	cmp	r3, #0
 800911e:	d005      	beq.n	800912c <HAL_RCC_OscConfig+0x154>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d101      	bne.n	800912c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009128:	2301      	movs	r3, #1
 800912a:	e25d      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800912c:	4b49      	ldr	r3, [pc, #292]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	061b      	lsls	r3, r3, #24
 800913a:	4946      	ldr	r1, [pc, #280]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 800913c:	4313      	orrs	r3, r2
 800913e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009140:	4b45      	ldr	r3, [pc, #276]	@ (8009258 <HAL_RCC_OscConfig+0x280>)
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4618      	mov	r0, r3
 8009146:	f7fb fb0f 	bl	8004768 <HAL_InitTick>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d043      	beq.n	80091d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e249      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d023      	beq.n	80091a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800915c:	4b3d      	ldr	r3, [pc, #244]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a3c      	ldr	r2, [pc, #240]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 8009162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009168:	f7fb fb4a 	bl	8004800 <HAL_GetTick>
 800916c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800916e:	e008      	b.n	8009182 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009170:	f7fb fb46 	bl	8004800 <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	2b02      	cmp	r3, #2
 800917c:	d901      	bls.n	8009182 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800917e:	2303      	movs	r3, #3
 8009180:	e232      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009182:	4b34      	ldr	r3, [pc, #208]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800918a:	2b00      	cmp	r3, #0
 800918c:	d0f0      	beq.n	8009170 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800918e:	4b31      	ldr	r3, [pc, #196]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	061b      	lsls	r3, r3, #24
 800919c:	492d      	ldr	r1, [pc, #180]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 800919e:	4313      	orrs	r3, r2
 80091a0:	604b      	str	r3, [r1, #4]
 80091a2:	e01a      	b.n	80091da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091a4:	4b2b      	ldr	r3, [pc, #172]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a2a      	ldr	r2, [pc, #168]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 80091aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b0:	f7fb fb26 	bl	8004800 <HAL_GetTick>
 80091b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80091b6:	e008      	b.n	80091ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091b8:	f7fb fb22 	bl	8004800 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e20e      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80091ca:	4b22      	ldr	r3, [pc, #136]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1f0      	bne.n	80091b8 <HAL_RCC_OscConfig+0x1e0>
 80091d6:	e000      	b.n	80091da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80091d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0308 	and.w	r3, r3, #8
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d041      	beq.n	800926a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	695b      	ldr	r3, [r3, #20]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d01c      	beq.n	8009228 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091ee:	4b19      	ldr	r3, [pc, #100]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 80091f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80091f4:	4a17      	ldr	r2, [pc, #92]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 80091f6:	f043 0301 	orr.w	r3, r3, #1
 80091fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091fe:	f7fb faff 	bl	8004800 <HAL_GetTick>
 8009202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009204:	e008      	b.n	8009218 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009206:	f7fb fafb 	bl	8004800 <HAL_GetTick>
 800920a:	4602      	mov	r2, r0
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	1ad3      	subs	r3, r2, r3
 8009210:	2b02      	cmp	r3, #2
 8009212:	d901      	bls.n	8009218 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009214:	2303      	movs	r3, #3
 8009216:	e1e7      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009218:	4b0e      	ldr	r3, [pc, #56]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 800921a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b00      	cmp	r3, #0
 8009224:	d0ef      	beq.n	8009206 <HAL_RCC_OscConfig+0x22e>
 8009226:	e020      	b.n	800926a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009228:	4b0a      	ldr	r3, [pc, #40]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 800922a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800922e:	4a09      	ldr	r2, [pc, #36]	@ (8009254 <HAL_RCC_OscConfig+0x27c>)
 8009230:	f023 0301 	bic.w	r3, r3, #1
 8009234:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009238:	f7fb fae2 	bl	8004800 <HAL_GetTick>
 800923c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800923e:	e00d      	b.n	800925c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009240:	f7fb fade 	bl	8004800 <HAL_GetTick>
 8009244:	4602      	mov	r2, r0
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	1ad3      	subs	r3, r2, r3
 800924a:	2b02      	cmp	r3, #2
 800924c:	d906      	bls.n	800925c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	e1ca      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
 8009252:	bf00      	nop
 8009254:	40021000 	.word	0x40021000
 8009258:	2000006c 	.word	0x2000006c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800925c:	4b8c      	ldr	r3, [pc, #560]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 800925e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009262:	f003 0302 	and.w	r3, r3, #2
 8009266:	2b00      	cmp	r3, #0
 8009268:	d1ea      	bne.n	8009240 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 0304 	and.w	r3, r3, #4
 8009272:	2b00      	cmp	r3, #0
 8009274:	f000 80a6 	beq.w	80093c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009278:	2300      	movs	r3, #0
 800927a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800927c:	4b84      	ldr	r3, [pc, #528]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 800927e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d101      	bne.n	800928c <HAL_RCC_OscConfig+0x2b4>
 8009288:	2301      	movs	r3, #1
 800928a:	e000      	b.n	800928e <HAL_RCC_OscConfig+0x2b6>
 800928c:	2300      	movs	r3, #0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d00d      	beq.n	80092ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009292:	4b7f      	ldr	r3, [pc, #508]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 8009294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009296:	4a7e      	ldr	r2, [pc, #504]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 8009298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800929c:	6593      	str	r3, [r2, #88]	@ 0x58
 800929e:	4b7c      	ldr	r3, [pc, #496]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 80092a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80092aa:	2301      	movs	r3, #1
 80092ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092ae:	4b79      	ldr	r3, [pc, #484]	@ (8009494 <HAL_RCC_OscConfig+0x4bc>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d118      	bne.n	80092ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80092ba:	4b76      	ldr	r3, [pc, #472]	@ (8009494 <HAL_RCC_OscConfig+0x4bc>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4a75      	ldr	r2, [pc, #468]	@ (8009494 <HAL_RCC_OscConfig+0x4bc>)
 80092c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80092c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092c6:	f7fb fa9b 	bl	8004800 <HAL_GetTick>
 80092ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092cc:	e008      	b.n	80092e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092ce:	f7fb fa97 	bl	8004800 <HAL_GetTick>
 80092d2:	4602      	mov	r2, r0
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	1ad3      	subs	r3, r2, r3
 80092d8:	2b02      	cmp	r3, #2
 80092da:	d901      	bls.n	80092e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e183      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092e0:	4b6c      	ldr	r3, [pc, #432]	@ (8009494 <HAL_RCC_OscConfig+0x4bc>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d0f0      	beq.n	80092ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d108      	bne.n	8009306 <HAL_RCC_OscConfig+0x32e>
 80092f4:	4b66      	ldr	r3, [pc, #408]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 80092f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092fa:	4a65      	ldr	r2, [pc, #404]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 80092fc:	f043 0301 	orr.w	r3, r3, #1
 8009300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009304:	e024      	b.n	8009350 <HAL_RCC_OscConfig+0x378>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	2b05      	cmp	r3, #5
 800930c:	d110      	bne.n	8009330 <HAL_RCC_OscConfig+0x358>
 800930e:	4b60      	ldr	r3, [pc, #384]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 8009310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009314:	4a5e      	ldr	r2, [pc, #376]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 8009316:	f043 0304 	orr.w	r3, r3, #4
 800931a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800931e:	4b5c      	ldr	r3, [pc, #368]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 8009320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009324:	4a5a      	ldr	r2, [pc, #360]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 8009326:	f043 0301 	orr.w	r3, r3, #1
 800932a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800932e:	e00f      	b.n	8009350 <HAL_RCC_OscConfig+0x378>
 8009330:	4b57      	ldr	r3, [pc, #348]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 8009332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009336:	4a56      	ldr	r2, [pc, #344]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 8009338:	f023 0301 	bic.w	r3, r3, #1
 800933c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009340:	4b53      	ldr	r3, [pc, #332]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 8009342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009346:	4a52      	ldr	r2, [pc, #328]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 8009348:	f023 0304 	bic.w	r3, r3, #4
 800934c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	689b      	ldr	r3, [r3, #8]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d016      	beq.n	8009386 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009358:	f7fb fa52 	bl	8004800 <HAL_GetTick>
 800935c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800935e:	e00a      	b.n	8009376 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009360:	f7fb fa4e 	bl	8004800 <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800936e:	4293      	cmp	r3, r2
 8009370:	d901      	bls.n	8009376 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009372:	2303      	movs	r3, #3
 8009374:	e138      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009376:	4b46      	ldr	r3, [pc, #280]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 8009378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800937c:	f003 0302 	and.w	r3, r3, #2
 8009380:	2b00      	cmp	r3, #0
 8009382:	d0ed      	beq.n	8009360 <HAL_RCC_OscConfig+0x388>
 8009384:	e015      	b.n	80093b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009386:	f7fb fa3b 	bl	8004800 <HAL_GetTick>
 800938a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800938c:	e00a      	b.n	80093a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800938e:	f7fb fa37 	bl	8004800 <HAL_GetTick>
 8009392:	4602      	mov	r2, r0
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800939c:	4293      	cmp	r3, r2
 800939e:	d901      	bls.n	80093a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80093a0:	2303      	movs	r3, #3
 80093a2:	e121      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80093a4:	4b3a      	ldr	r3, [pc, #232]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 80093a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093aa:	f003 0302 	and.w	r3, r3, #2
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1ed      	bne.n	800938e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80093b2:	7ffb      	ldrb	r3, [r7, #31]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d105      	bne.n	80093c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80093b8:	4b35      	ldr	r3, [pc, #212]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 80093ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093bc:	4a34      	ldr	r2, [pc, #208]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 80093be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 0320 	and.w	r3, r3, #32
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d03c      	beq.n	800944a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d01c      	beq.n	8009412 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80093d8:	4b2d      	ldr	r3, [pc, #180]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 80093da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80093de:	4a2c      	ldr	r2, [pc, #176]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 80093e0:	f043 0301 	orr.w	r3, r3, #1
 80093e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093e8:	f7fb fa0a 	bl	8004800 <HAL_GetTick>
 80093ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80093ee:	e008      	b.n	8009402 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093f0:	f7fb fa06 	bl	8004800 <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	2b02      	cmp	r3, #2
 80093fc:	d901      	bls.n	8009402 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80093fe:	2303      	movs	r3, #3
 8009400:	e0f2      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009402:	4b23      	ldr	r3, [pc, #140]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 8009404:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009408:	f003 0302 	and.w	r3, r3, #2
 800940c:	2b00      	cmp	r3, #0
 800940e:	d0ef      	beq.n	80093f0 <HAL_RCC_OscConfig+0x418>
 8009410:	e01b      	b.n	800944a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009412:	4b1f      	ldr	r3, [pc, #124]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 8009414:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009418:	4a1d      	ldr	r2, [pc, #116]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 800941a:	f023 0301 	bic.w	r3, r3, #1
 800941e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009422:	f7fb f9ed 	bl	8004800 <HAL_GetTick>
 8009426:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009428:	e008      	b.n	800943c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800942a:	f7fb f9e9 	bl	8004800 <HAL_GetTick>
 800942e:	4602      	mov	r2, r0
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	2b02      	cmp	r3, #2
 8009436:	d901      	bls.n	800943c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009438:	2303      	movs	r3, #3
 800943a:	e0d5      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800943c:	4b14      	ldr	r3, [pc, #80]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 800943e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009442:	f003 0302 	and.w	r3, r3, #2
 8009446:	2b00      	cmp	r3, #0
 8009448:	d1ef      	bne.n	800942a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	2b00      	cmp	r3, #0
 8009450:	f000 80c9 	beq.w	80095e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009454:	4b0e      	ldr	r3, [pc, #56]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	f003 030c 	and.w	r3, r3, #12
 800945c:	2b0c      	cmp	r3, #12
 800945e:	f000 8083 	beq.w	8009568 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	2b02      	cmp	r3, #2
 8009468:	d15e      	bne.n	8009528 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800946a:	4b09      	ldr	r3, [pc, #36]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a08      	ldr	r2, [pc, #32]	@ (8009490 <HAL_RCC_OscConfig+0x4b8>)
 8009470:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009476:	f7fb f9c3 	bl	8004800 <HAL_GetTick>
 800947a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800947c:	e00c      	b.n	8009498 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800947e:	f7fb f9bf 	bl	8004800 <HAL_GetTick>
 8009482:	4602      	mov	r2, r0
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	1ad3      	subs	r3, r2, r3
 8009488:	2b02      	cmp	r3, #2
 800948a:	d905      	bls.n	8009498 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	e0ab      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
 8009490:	40021000 	.word	0x40021000
 8009494:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009498:	4b55      	ldr	r3, [pc, #340]	@ (80095f0 <HAL_RCC_OscConfig+0x618>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d1ec      	bne.n	800947e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094a4:	4b52      	ldr	r3, [pc, #328]	@ (80095f0 <HAL_RCC_OscConfig+0x618>)
 80094a6:	68da      	ldr	r2, [r3, #12]
 80094a8:	4b52      	ldr	r3, [pc, #328]	@ (80095f4 <HAL_RCC_OscConfig+0x61c>)
 80094aa:	4013      	ands	r3, r2
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	6a11      	ldr	r1, [r2, #32]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80094b4:	3a01      	subs	r2, #1
 80094b6:	0112      	lsls	r2, r2, #4
 80094b8:	4311      	orrs	r1, r2
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80094be:	0212      	lsls	r2, r2, #8
 80094c0:	4311      	orrs	r1, r2
 80094c2:	687a      	ldr	r2, [r7, #4]
 80094c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80094c6:	0852      	lsrs	r2, r2, #1
 80094c8:	3a01      	subs	r2, #1
 80094ca:	0552      	lsls	r2, r2, #21
 80094cc:	4311      	orrs	r1, r2
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80094d2:	0852      	lsrs	r2, r2, #1
 80094d4:	3a01      	subs	r2, #1
 80094d6:	0652      	lsls	r2, r2, #25
 80094d8:	4311      	orrs	r1, r2
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80094de:	06d2      	lsls	r2, r2, #27
 80094e0:	430a      	orrs	r2, r1
 80094e2:	4943      	ldr	r1, [pc, #268]	@ (80095f0 <HAL_RCC_OscConfig+0x618>)
 80094e4:	4313      	orrs	r3, r2
 80094e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094e8:	4b41      	ldr	r3, [pc, #260]	@ (80095f0 <HAL_RCC_OscConfig+0x618>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a40      	ldr	r2, [pc, #256]	@ (80095f0 <HAL_RCC_OscConfig+0x618>)
 80094ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80094f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80094f4:	4b3e      	ldr	r3, [pc, #248]	@ (80095f0 <HAL_RCC_OscConfig+0x618>)
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	4a3d      	ldr	r2, [pc, #244]	@ (80095f0 <HAL_RCC_OscConfig+0x618>)
 80094fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80094fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009500:	f7fb f97e 	bl	8004800 <HAL_GetTick>
 8009504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009506:	e008      	b.n	800951a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009508:	f7fb f97a 	bl	8004800 <HAL_GetTick>
 800950c:	4602      	mov	r2, r0
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	2b02      	cmp	r3, #2
 8009514:	d901      	bls.n	800951a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009516:	2303      	movs	r3, #3
 8009518:	e066      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800951a:	4b35      	ldr	r3, [pc, #212]	@ (80095f0 <HAL_RCC_OscConfig+0x618>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009522:	2b00      	cmp	r3, #0
 8009524:	d0f0      	beq.n	8009508 <HAL_RCC_OscConfig+0x530>
 8009526:	e05e      	b.n	80095e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009528:	4b31      	ldr	r3, [pc, #196]	@ (80095f0 <HAL_RCC_OscConfig+0x618>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a30      	ldr	r2, [pc, #192]	@ (80095f0 <HAL_RCC_OscConfig+0x618>)
 800952e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009534:	f7fb f964 	bl	8004800 <HAL_GetTick>
 8009538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800953a:	e008      	b.n	800954e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800953c:	f7fb f960 	bl	8004800 <HAL_GetTick>
 8009540:	4602      	mov	r2, r0
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	1ad3      	subs	r3, r2, r3
 8009546:	2b02      	cmp	r3, #2
 8009548:	d901      	bls.n	800954e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800954a:	2303      	movs	r3, #3
 800954c:	e04c      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800954e:	4b28      	ldr	r3, [pc, #160]	@ (80095f0 <HAL_RCC_OscConfig+0x618>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009556:	2b00      	cmp	r3, #0
 8009558:	d1f0      	bne.n	800953c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800955a:	4b25      	ldr	r3, [pc, #148]	@ (80095f0 <HAL_RCC_OscConfig+0x618>)
 800955c:	68da      	ldr	r2, [r3, #12]
 800955e:	4924      	ldr	r1, [pc, #144]	@ (80095f0 <HAL_RCC_OscConfig+0x618>)
 8009560:	4b25      	ldr	r3, [pc, #148]	@ (80095f8 <HAL_RCC_OscConfig+0x620>)
 8009562:	4013      	ands	r3, r2
 8009564:	60cb      	str	r3, [r1, #12]
 8009566:	e03e      	b.n	80095e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	69db      	ldr	r3, [r3, #28]
 800956c:	2b01      	cmp	r3, #1
 800956e:	d101      	bne.n	8009574 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	e039      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009574:	4b1e      	ldr	r3, [pc, #120]	@ (80095f0 <HAL_RCC_OscConfig+0x618>)
 8009576:	68db      	ldr	r3, [r3, #12]
 8009578:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	f003 0203 	and.w	r2, r3, #3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	429a      	cmp	r2, r3
 8009586:	d12c      	bne.n	80095e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009592:	3b01      	subs	r3, #1
 8009594:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009596:	429a      	cmp	r2, r3
 8009598:	d123      	bne.n	80095e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d11b      	bne.n	80095e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d113      	bne.n	80095e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095c4:	085b      	lsrs	r3, r3, #1
 80095c6:	3b01      	subs	r3, #1
 80095c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d109      	bne.n	80095e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095d8:	085b      	lsrs	r3, r3, #1
 80095da:	3b01      	subs	r3, #1
 80095dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80095de:	429a      	cmp	r2, r3
 80095e0:	d001      	beq.n	80095e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80095e2:	2301      	movs	r3, #1
 80095e4:	e000      	b.n	80095e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3720      	adds	r7, #32
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	40021000 	.word	0x40021000
 80095f4:	019f800c 	.word	0x019f800c
 80095f8:	feeefffc 	.word	0xfeeefffc

080095fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009606:	2300      	movs	r3, #0
 8009608:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d101      	bne.n	8009614 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e11e      	b.n	8009852 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009614:	4b91      	ldr	r3, [pc, #580]	@ (800985c <HAL_RCC_ClockConfig+0x260>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 030f 	and.w	r3, r3, #15
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	429a      	cmp	r2, r3
 8009620:	d910      	bls.n	8009644 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009622:	4b8e      	ldr	r3, [pc, #568]	@ (800985c <HAL_RCC_ClockConfig+0x260>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f023 020f 	bic.w	r2, r3, #15
 800962a:	498c      	ldr	r1, [pc, #560]	@ (800985c <HAL_RCC_ClockConfig+0x260>)
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	4313      	orrs	r3, r2
 8009630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009632:	4b8a      	ldr	r3, [pc, #552]	@ (800985c <HAL_RCC_ClockConfig+0x260>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 030f 	and.w	r3, r3, #15
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d001      	beq.n	8009644 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e106      	b.n	8009852 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0301 	and.w	r3, r3, #1
 800964c:	2b00      	cmp	r3, #0
 800964e:	d073      	beq.n	8009738 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	2b03      	cmp	r3, #3
 8009656:	d129      	bne.n	80096ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009658:	4b81      	ldr	r3, [pc, #516]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	e0f4      	b.n	8009852 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009668:	f000 f99e 	bl	80099a8 <RCC_GetSysClockFreqFromPLLSource>
 800966c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	4a7c      	ldr	r2, [pc, #496]	@ (8009864 <HAL_RCC_ClockConfig+0x268>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d93f      	bls.n	80096f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009676:	4b7a      	ldr	r3, [pc, #488]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d009      	beq.n	8009696 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800968a:	2b00      	cmp	r3, #0
 800968c:	d033      	beq.n	80096f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009692:	2b00      	cmp	r3, #0
 8009694:	d12f      	bne.n	80096f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009696:	4b72      	ldr	r3, [pc, #456]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800969e:	4a70      	ldr	r2, [pc, #448]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 80096a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80096a6:	2380      	movs	r3, #128	@ 0x80
 80096a8:	617b      	str	r3, [r7, #20]
 80096aa:	e024      	b.n	80096f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	2b02      	cmp	r3, #2
 80096b2:	d107      	bne.n	80096c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096b4:	4b6a      	ldr	r3, [pc, #424]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d109      	bne.n	80096d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80096c0:	2301      	movs	r3, #1
 80096c2:	e0c6      	b.n	8009852 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80096c4:	4b66      	ldr	r3, [pc, #408]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d101      	bne.n	80096d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80096d0:	2301      	movs	r3, #1
 80096d2:	e0be      	b.n	8009852 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80096d4:	f000 f8ce 	bl	8009874 <HAL_RCC_GetSysClockFreq>
 80096d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80096da:	693b      	ldr	r3, [r7, #16]
 80096dc:	4a61      	ldr	r2, [pc, #388]	@ (8009864 <HAL_RCC_ClockConfig+0x268>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d909      	bls.n	80096f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80096e2:	4b5f      	ldr	r3, [pc, #380]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096ea:	4a5d      	ldr	r2, [pc, #372]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 80096ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80096f2:	2380      	movs	r3, #128	@ 0x80
 80096f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096f6:	4b5a      	ldr	r3, [pc, #360]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	f023 0203 	bic.w	r2, r3, #3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	4957      	ldr	r1, [pc, #348]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 8009704:	4313      	orrs	r3, r2
 8009706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009708:	f7fb f87a 	bl	8004800 <HAL_GetTick>
 800970c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800970e:	e00a      	b.n	8009726 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009710:	f7fb f876 	bl	8004800 <HAL_GetTick>
 8009714:	4602      	mov	r2, r0
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800971e:	4293      	cmp	r3, r2
 8009720:	d901      	bls.n	8009726 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e095      	b.n	8009852 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009726:	4b4e      	ldr	r3, [pc, #312]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f003 020c 	and.w	r2, r3, #12
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	429a      	cmp	r2, r3
 8009736:	d1eb      	bne.n	8009710 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0302 	and.w	r3, r3, #2
 8009740:	2b00      	cmp	r3, #0
 8009742:	d023      	beq.n	800978c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f003 0304 	and.w	r3, r3, #4
 800974c:	2b00      	cmp	r3, #0
 800974e:	d005      	beq.n	800975c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009750:	4b43      	ldr	r3, [pc, #268]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	4a42      	ldr	r2, [pc, #264]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 8009756:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800975a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 0308 	and.w	r3, r3, #8
 8009764:	2b00      	cmp	r3, #0
 8009766:	d007      	beq.n	8009778 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009768:	4b3d      	ldr	r3, [pc, #244]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 800976a:	689b      	ldr	r3, [r3, #8]
 800976c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009770:	4a3b      	ldr	r2, [pc, #236]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 8009772:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009776:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009778:	4b39      	ldr	r3, [pc, #228]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	4936      	ldr	r1, [pc, #216]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 8009786:	4313      	orrs	r3, r2
 8009788:	608b      	str	r3, [r1, #8]
 800978a:	e008      	b.n	800979e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	2b80      	cmp	r3, #128	@ 0x80
 8009790:	d105      	bne.n	800979e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009792:	4b33      	ldr	r3, [pc, #204]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	4a32      	ldr	r2, [pc, #200]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 8009798:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800979c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800979e:	4b2f      	ldr	r3, [pc, #188]	@ (800985c <HAL_RCC_ClockConfig+0x260>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f003 030f 	and.w	r3, r3, #15
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d21d      	bcs.n	80097e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097ac:	4b2b      	ldr	r3, [pc, #172]	@ (800985c <HAL_RCC_ClockConfig+0x260>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f023 020f 	bic.w	r2, r3, #15
 80097b4:	4929      	ldr	r1, [pc, #164]	@ (800985c <HAL_RCC_ClockConfig+0x260>)
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80097bc:	f7fb f820 	bl	8004800 <HAL_GetTick>
 80097c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80097c2:	e00a      	b.n	80097da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80097c4:	f7fb f81c 	bl	8004800 <HAL_GetTick>
 80097c8:	4602      	mov	r2, r0
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	1ad3      	subs	r3, r2, r3
 80097ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d901      	bls.n	80097da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80097d6:	2303      	movs	r3, #3
 80097d8:	e03b      	b.n	8009852 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80097da:	4b20      	ldr	r3, [pc, #128]	@ (800985c <HAL_RCC_ClockConfig+0x260>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 030f 	and.w	r3, r3, #15
 80097e2:	683a      	ldr	r2, [r7, #0]
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d1ed      	bne.n	80097c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f003 0304 	and.w	r3, r3, #4
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d008      	beq.n	8009806 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097f4:	4b1a      	ldr	r3, [pc, #104]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 80097f6:	689b      	ldr	r3, [r3, #8]
 80097f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	4917      	ldr	r1, [pc, #92]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 8009802:	4313      	orrs	r3, r2
 8009804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 0308 	and.w	r3, r3, #8
 800980e:	2b00      	cmp	r3, #0
 8009810:	d009      	beq.n	8009826 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009812:	4b13      	ldr	r3, [pc, #76]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 8009814:	689b      	ldr	r3, [r3, #8]
 8009816:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	490f      	ldr	r1, [pc, #60]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 8009822:	4313      	orrs	r3, r2
 8009824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009826:	f000 f825 	bl	8009874 <HAL_RCC_GetSysClockFreq>
 800982a:	4602      	mov	r2, r0
 800982c:	4b0c      	ldr	r3, [pc, #48]	@ (8009860 <HAL_RCC_ClockConfig+0x264>)
 800982e:	689b      	ldr	r3, [r3, #8]
 8009830:	091b      	lsrs	r3, r3, #4
 8009832:	f003 030f 	and.w	r3, r3, #15
 8009836:	490c      	ldr	r1, [pc, #48]	@ (8009868 <HAL_RCC_ClockConfig+0x26c>)
 8009838:	5ccb      	ldrb	r3, [r1, r3]
 800983a:	f003 031f 	and.w	r3, r3, #31
 800983e:	fa22 f303 	lsr.w	r3, r2, r3
 8009842:	4a0a      	ldr	r2, [pc, #40]	@ (800986c <HAL_RCC_ClockConfig+0x270>)
 8009844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009846:	4b0a      	ldr	r3, [pc, #40]	@ (8009870 <HAL_RCC_ClockConfig+0x274>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	4618      	mov	r0, r3
 800984c:	f7fa ff8c 	bl	8004768 <HAL_InitTick>
 8009850:	4603      	mov	r3, r0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3718      	adds	r7, #24
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}
 800985a:	bf00      	nop
 800985c:	40022000 	.word	0x40022000
 8009860:	40021000 	.word	0x40021000
 8009864:	04c4b400 	.word	0x04c4b400
 8009868:	08017168 	.word	0x08017168
 800986c:	20000068 	.word	0x20000068
 8009870:	2000006c 	.word	0x2000006c

08009874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009874:	b480      	push	{r7}
 8009876:	b087      	sub	sp, #28
 8009878:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800987a:	4b2c      	ldr	r3, [pc, #176]	@ (800992c <HAL_RCC_GetSysClockFreq+0xb8>)
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	f003 030c 	and.w	r3, r3, #12
 8009882:	2b04      	cmp	r3, #4
 8009884:	d102      	bne.n	800988c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009886:	4b2a      	ldr	r3, [pc, #168]	@ (8009930 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009888:	613b      	str	r3, [r7, #16]
 800988a:	e047      	b.n	800991c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800988c:	4b27      	ldr	r3, [pc, #156]	@ (800992c <HAL_RCC_GetSysClockFreq+0xb8>)
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	f003 030c 	and.w	r3, r3, #12
 8009894:	2b08      	cmp	r3, #8
 8009896:	d102      	bne.n	800989e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009898:	4b26      	ldr	r3, [pc, #152]	@ (8009934 <HAL_RCC_GetSysClockFreq+0xc0>)
 800989a:	613b      	str	r3, [r7, #16]
 800989c:	e03e      	b.n	800991c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800989e:	4b23      	ldr	r3, [pc, #140]	@ (800992c <HAL_RCC_GetSysClockFreq+0xb8>)
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	f003 030c 	and.w	r3, r3, #12
 80098a6:	2b0c      	cmp	r3, #12
 80098a8:	d136      	bne.n	8009918 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80098aa:	4b20      	ldr	r3, [pc, #128]	@ (800992c <HAL_RCC_GetSysClockFreq+0xb8>)
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	f003 0303 	and.w	r3, r3, #3
 80098b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80098b4:	4b1d      	ldr	r3, [pc, #116]	@ (800992c <HAL_RCC_GetSysClockFreq+0xb8>)
 80098b6:	68db      	ldr	r3, [r3, #12]
 80098b8:	091b      	lsrs	r3, r3, #4
 80098ba:	f003 030f 	and.w	r3, r3, #15
 80098be:	3301      	adds	r3, #1
 80098c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d10c      	bne.n	80098e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80098c8:	4a1a      	ldr	r2, [pc, #104]	@ (8009934 <HAL_RCC_GetSysClockFreq+0xc0>)
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80098d0:	4a16      	ldr	r2, [pc, #88]	@ (800992c <HAL_RCC_GetSysClockFreq+0xb8>)
 80098d2:	68d2      	ldr	r2, [r2, #12]
 80098d4:	0a12      	lsrs	r2, r2, #8
 80098d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80098da:	fb02 f303 	mul.w	r3, r2, r3
 80098de:	617b      	str	r3, [r7, #20]
      break;
 80098e0:	e00c      	b.n	80098fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80098e2:	4a13      	ldr	r2, [pc, #76]	@ (8009930 <HAL_RCC_GetSysClockFreq+0xbc>)
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ea:	4a10      	ldr	r2, [pc, #64]	@ (800992c <HAL_RCC_GetSysClockFreq+0xb8>)
 80098ec:	68d2      	ldr	r2, [r2, #12]
 80098ee:	0a12      	lsrs	r2, r2, #8
 80098f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80098f4:	fb02 f303 	mul.w	r3, r2, r3
 80098f8:	617b      	str	r3, [r7, #20]
      break;
 80098fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80098fc:	4b0b      	ldr	r3, [pc, #44]	@ (800992c <HAL_RCC_GetSysClockFreq+0xb8>)
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	0e5b      	lsrs	r3, r3, #25
 8009902:	f003 0303 	and.w	r3, r3, #3
 8009906:	3301      	adds	r3, #1
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800990c:	697a      	ldr	r2, [r7, #20]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	fbb2 f3f3 	udiv	r3, r2, r3
 8009914:	613b      	str	r3, [r7, #16]
 8009916:	e001      	b.n	800991c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009918:	2300      	movs	r3, #0
 800991a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800991c:	693b      	ldr	r3, [r7, #16]
}
 800991e:	4618      	mov	r0, r3
 8009920:	371c      	adds	r7, #28
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	40021000 	.word	0x40021000
 8009930:	00f42400 	.word	0x00f42400
 8009934:	016e3600 	.word	0x016e3600

08009938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009938:	b480      	push	{r7}
 800993a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800993c:	4b03      	ldr	r3, [pc, #12]	@ (800994c <HAL_RCC_GetHCLKFreq+0x14>)
 800993e:	681b      	ldr	r3, [r3, #0]
}
 8009940:	4618      	mov	r0, r3
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	20000068 	.word	0x20000068

08009950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009954:	f7ff fff0 	bl	8009938 <HAL_RCC_GetHCLKFreq>
 8009958:	4602      	mov	r2, r0
 800995a:	4b06      	ldr	r3, [pc, #24]	@ (8009974 <HAL_RCC_GetPCLK1Freq+0x24>)
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	0a1b      	lsrs	r3, r3, #8
 8009960:	f003 0307 	and.w	r3, r3, #7
 8009964:	4904      	ldr	r1, [pc, #16]	@ (8009978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009966:	5ccb      	ldrb	r3, [r1, r3]
 8009968:	f003 031f 	and.w	r3, r3, #31
 800996c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009970:	4618      	mov	r0, r3
 8009972:	bd80      	pop	{r7, pc}
 8009974:	40021000 	.word	0x40021000
 8009978:	08017178 	.word	0x08017178

0800997c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009980:	f7ff ffda 	bl	8009938 <HAL_RCC_GetHCLKFreq>
 8009984:	4602      	mov	r2, r0
 8009986:	4b06      	ldr	r3, [pc, #24]	@ (80099a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	0adb      	lsrs	r3, r3, #11
 800998c:	f003 0307 	and.w	r3, r3, #7
 8009990:	4904      	ldr	r1, [pc, #16]	@ (80099a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009992:	5ccb      	ldrb	r3, [r1, r3]
 8009994:	f003 031f 	and.w	r3, r3, #31
 8009998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800999c:	4618      	mov	r0, r3
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	40021000 	.word	0x40021000
 80099a4:	08017178 	.word	0x08017178

080099a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b087      	sub	sp, #28
 80099ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80099ae:	4b1e      	ldr	r3, [pc, #120]	@ (8009a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	f003 0303 	and.w	r3, r3, #3
 80099b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80099b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	091b      	lsrs	r3, r3, #4
 80099be:	f003 030f 	and.w	r3, r3, #15
 80099c2:	3301      	adds	r3, #1
 80099c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	2b03      	cmp	r3, #3
 80099ca:	d10c      	bne.n	80099e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80099cc:	4a17      	ldr	r2, [pc, #92]	@ (8009a2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099d4:	4a14      	ldr	r2, [pc, #80]	@ (8009a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80099d6:	68d2      	ldr	r2, [r2, #12]
 80099d8:	0a12      	lsrs	r2, r2, #8
 80099da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80099de:	fb02 f303 	mul.w	r3, r2, r3
 80099e2:	617b      	str	r3, [r7, #20]
    break;
 80099e4:	e00c      	b.n	8009a00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80099e6:	4a12      	ldr	r2, [pc, #72]	@ (8009a30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ee:	4a0e      	ldr	r2, [pc, #56]	@ (8009a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80099f0:	68d2      	ldr	r2, [r2, #12]
 80099f2:	0a12      	lsrs	r2, r2, #8
 80099f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80099f8:	fb02 f303 	mul.w	r3, r2, r3
 80099fc:	617b      	str	r3, [r7, #20]
    break;
 80099fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009a00:	4b09      	ldr	r3, [pc, #36]	@ (8009a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009a02:	68db      	ldr	r3, [r3, #12]
 8009a04:	0e5b      	lsrs	r3, r3, #25
 8009a06:	f003 0303 	and.w	r3, r3, #3
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009a1a:	687b      	ldr	r3, [r7, #4]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	371c      	adds	r7, #28
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr
 8009a28:	40021000 	.word	0x40021000
 8009a2c:	016e3600 	.word	0x016e3600
 8009a30:	00f42400 	.word	0x00f42400

08009a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b086      	sub	sp, #24
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a40:	2300      	movs	r3, #0
 8009a42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f000 8098 	beq.w	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a52:	2300      	movs	r3, #0
 8009a54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a56:	4b43      	ldr	r3, [pc, #268]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10d      	bne.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a62:	4b40      	ldr	r3, [pc, #256]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a66:	4a3f      	ldr	r2, [pc, #252]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a76:	60bb      	str	r3, [r7, #8]
 8009a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a39      	ldr	r2, [pc, #228]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a8a:	f7fa feb9 	bl	8004800 <HAL_GetTick>
 8009a8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a90:	e009      	b.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a92:	f7fa feb5 	bl	8004800 <HAL_GetTick>
 8009a96:	4602      	mov	r2, r0
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	1ad3      	subs	r3, r2, r3
 8009a9c:	2b02      	cmp	r3, #2
 8009a9e:	d902      	bls.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009aa0:	2303      	movs	r3, #3
 8009aa2:	74fb      	strb	r3, [r7, #19]
        break;
 8009aa4:	e005      	b.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009aa6:	4b30      	ldr	r3, [pc, #192]	@ (8009b68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d0ef      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009ab2:	7cfb      	ldrb	r3, [r7, #19]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d159      	bne.n	8009b6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009ac2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d01e      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ace:	697a      	ldr	r2, [r7, #20]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d019      	beq.n	8009b08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009ad4:	4b23      	ldr	r3, [pc, #140]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ade:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ae0:	4b20      	ldr	r3, [pc, #128]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009af0:	4b1c      	ldr	r3, [pc, #112]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009af6:	4a1b      	ldr	r2, [pc, #108]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009b00:	4a18      	ldr	r2, [pc, #96]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009b08:	697b      	ldr	r3, [r7, #20]
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d016      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b12:	f7fa fe75 	bl	8004800 <HAL_GetTick>
 8009b16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b18:	e00b      	b.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b1a:	f7fa fe71 	bl	8004800 <HAL_GetTick>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	1ad3      	subs	r3, r2, r3
 8009b24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b28:	4293      	cmp	r3, r2
 8009b2a:	d902      	bls.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	74fb      	strb	r3, [r7, #19]
            break;
 8009b30:	e006      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b32:	4b0c      	ldr	r3, [pc, #48]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b38:	f003 0302 	and.w	r3, r3, #2
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d0ec      	beq.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009b40:	7cfb      	ldrb	r3, [r7, #19]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10b      	bne.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b46:	4b07      	ldr	r3, [pc, #28]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b54:	4903      	ldr	r1, [pc, #12]	@ (8009b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b56:	4313      	orrs	r3, r2
 8009b58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009b5c:	e008      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b5e:	7cfb      	ldrb	r3, [r7, #19]
 8009b60:	74bb      	strb	r3, [r7, #18]
 8009b62:	e005      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009b64:	40021000 	.word	0x40021000
 8009b68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b6c:	7cfb      	ldrb	r3, [r7, #19]
 8009b6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b70:	7c7b      	ldrb	r3, [r7, #17]
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d105      	bne.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b76:	4ba7      	ldr	r3, [pc, #668]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b7a:	4aa6      	ldr	r2, [pc, #664]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 0301 	and.w	r3, r3, #1
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d00a      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009b8e:	4ba1      	ldr	r3, [pc, #644]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b94:	f023 0203 	bic.w	r2, r3, #3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	499d      	ldr	r1, [pc, #628]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00a      	beq.n	8009bc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009bb0:	4b98      	ldr	r3, [pc, #608]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bb6:	f023 020c 	bic.w	r2, r3, #12
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	4995      	ldr	r1, [pc, #596]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0304 	and.w	r3, r3, #4
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d00a      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009bd2:	4b90      	ldr	r3, [pc, #576]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	498c      	ldr	r1, [pc, #560]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009be2:	4313      	orrs	r3, r2
 8009be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 0308 	and.w	r3, r3, #8
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d00a      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009bf4:	4b87      	ldr	r3, [pc, #540]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	4984      	ldr	r1, [pc, #528]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c04:	4313      	orrs	r3, r2
 8009c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f003 0310 	and.w	r3, r3, #16
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009c16:	4b7f      	ldr	r3, [pc, #508]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	497b      	ldr	r1, [pc, #492]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f003 0320 	and.w	r3, r3, #32
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d00a      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c38:	4b76      	ldr	r3, [pc, #472]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c3e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	4973      	ldr	r1, [pc, #460]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00a      	beq.n	8009c70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c60:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	69db      	ldr	r3, [r3, #28]
 8009c68:	496a      	ldr	r1, [pc, #424]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00a      	beq.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009c7c:	4b65      	ldr	r3, [pc, #404]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c82:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	4962      	ldr	r1, [pc, #392]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00a      	beq.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009c9e:	4b5d      	ldr	r3, [pc, #372]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ca4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cac:	4959      	ldr	r1, [pc, #356]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00a      	beq.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009cc0:	4b54      	ldr	r3, [pc, #336]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009cc6:	f023 0203 	bic.w	r2, r3, #3
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cce:	4951      	ldr	r1, [pc, #324]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d00a      	beq.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ce8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cf0:	4948      	ldr	r1, [pc, #288]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d015      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009d04:	4b43      	ldr	r3, [pc, #268]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d12:	4940      	ldr	r1, [pc, #256]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d14:	4313      	orrs	r3, r2
 8009d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d22:	d105      	bne.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d24:	4b3b      	ldr	r3, [pc, #236]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	4a3a      	ldr	r2, [pc, #232]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d2e:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d015      	beq.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009d3c:	4b35      	ldr	r3, [pc, #212]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d42:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d4a:	4932      	ldr	r1, [pc, #200]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d5a:	d105      	bne.n	8009d68 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d5c:	4b2d      	ldr	r3, [pc, #180]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d5e:	68db      	ldr	r3, [r3, #12]
 8009d60:	4a2c      	ldr	r2, [pc, #176]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d66:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d015      	beq.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d74:	4b27      	ldr	r3, [pc, #156]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d7a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d82:	4924      	ldr	r1, [pc, #144]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d84:	4313      	orrs	r3, r2
 8009d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d92:	d105      	bne.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d94:	4b1f      	ldr	r3, [pc, #124]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	4a1e      	ldr	r2, [pc, #120]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d9e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d015      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009dac:	4b19      	ldr	r3, [pc, #100]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009db2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dba:	4916      	ldr	r1, [pc, #88]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dbc:	4313      	orrs	r3, r2
 8009dbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009dca:	d105      	bne.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009dcc:	4b11      	ldr	r3, [pc, #68]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	4a10      	ldr	r2, [pc, #64]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dd6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d019      	beq.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009de4:	4b0b      	ldr	r3, [pc, #44]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009df2:	4908      	ldr	r1, [pc, #32]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009df4:	4313      	orrs	r3, r2
 8009df6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009e02:	d109      	bne.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e04:	4b03      	ldr	r3, [pc, #12]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	4a02      	ldr	r2, [pc, #8]	@ (8009e14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009e0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e0e:	60d3      	str	r3, [r2, #12]
 8009e10:	e002      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009e12:	bf00      	nop
 8009e14:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d015      	beq.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009e24:	4b29      	ldr	r3, [pc, #164]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e32:	4926      	ldr	r1, [pc, #152]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e34:	4313      	orrs	r3, r2
 8009e36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e42:	d105      	bne.n	8009e50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009e44:	4b21      	ldr	r3, [pc, #132]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	4a20      	ldr	r2, [pc, #128]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e4e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d015      	beq.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e62:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e6a:	4918      	ldr	r1, [pc, #96]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e7a:	d105      	bne.n	8009e88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009e7c:	4b13      	ldr	r3, [pc, #76]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e7e:	68db      	ldr	r3, [r3, #12]
 8009e80:	4a12      	ldr	r2, [pc, #72]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e86:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d015      	beq.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009e94:	4b0d      	ldr	r3, [pc, #52]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ea2:	490a      	ldr	r1, [pc, #40]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009ea4:	4313      	orrs	r3, r2
 8009ea6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009eae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009eb2:	d105      	bne.n	8009ec0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009eb4:	4b05      	ldr	r3, [pc, #20]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	4a04      	ldr	r2, [pc, #16]	@ (8009ecc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8009eba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ebe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009ec0:	7cbb      	ldrb	r3, [r7, #18]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	40021000 	.word	0x40021000

08009ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d101      	bne.n	8009ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e049      	b.n	8009f76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d106      	bne.n	8009efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7fa f930 	bl	800415c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2202      	movs	r2, #2
 8009f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	4610      	mov	r0, r2
 8009f10:	f000 fef4 	bl	800acfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2201      	movs	r2, #1
 8009f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2201      	movs	r2, #1
 8009f48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2201      	movs	r2, #1
 8009f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2201      	movs	r2, #1
 8009f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
	...

08009f80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d001      	beq.n	8009f98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e04c      	b.n	800a032 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2202      	movs	r2, #2
 8009f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a26      	ldr	r2, [pc, #152]	@ (800a040 <HAL_TIM_Base_Start+0xc0>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d022      	beq.n	8009ff0 <HAL_TIM_Base_Start+0x70>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fb2:	d01d      	beq.n	8009ff0 <HAL_TIM_Base_Start+0x70>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a22      	ldr	r2, [pc, #136]	@ (800a044 <HAL_TIM_Base_Start+0xc4>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d018      	beq.n	8009ff0 <HAL_TIM_Base_Start+0x70>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	4a21      	ldr	r2, [pc, #132]	@ (800a048 <HAL_TIM_Base_Start+0xc8>)
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d013      	beq.n	8009ff0 <HAL_TIM_Base_Start+0x70>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800a04c <HAL_TIM_Base_Start+0xcc>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d00e      	beq.n	8009ff0 <HAL_TIM_Base_Start+0x70>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a1e      	ldr	r2, [pc, #120]	@ (800a050 <HAL_TIM_Base_Start+0xd0>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d009      	beq.n	8009ff0 <HAL_TIM_Base_Start+0x70>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a1c      	ldr	r2, [pc, #112]	@ (800a054 <HAL_TIM_Base_Start+0xd4>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d004      	beq.n	8009ff0 <HAL_TIM_Base_Start+0x70>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a1b      	ldr	r2, [pc, #108]	@ (800a058 <HAL_TIM_Base_Start+0xd8>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d115      	bne.n	800a01c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	689a      	ldr	r2, [r3, #8]
 8009ff6:	4b19      	ldr	r3, [pc, #100]	@ (800a05c <HAL_TIM_Base_Start+0xdc>)
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2b06      	cmp	r3, #6
 800a000:	d015      	beq.n	800a02e <HAL_TIM_Base_Start+0xae>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a008:	d011      	beq.n	800a02e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f042 0201 	orr.w	r2, r2, #1
 800a018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a01a:	e008      	b.n	800a02e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f042 0201 	orr.w	r2, r2, #1
 800a02a:	601a      	str	r2, [r3, #0]
 800a02c:	e000      	b.n	800a030 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a02e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3714      	adds	r7, #20
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	40012c00 	.word	0x40012c00
 800a044:	40000400 	.word	0x40000400
 800a048:	40000800 	.word	0x40000800
 800a04c:	40000c00 	.word	0x40000c00
 800a050:	40013400 	.word	0x40013400
 800a054:	40014000 	.word	0x40014000
 800a058:	40015000 	.word	0x40015000
 800a05c:	00010007 	.word	0x00010007

0800a060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	2b01      	cmp	r3, #1
 800a072:	d001      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e054      	b.n	800a122 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2202      	movs	r2, #2
 800a07c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68da      	ldr	r2, [r3, #12]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f042 0201 	orr.w	r2, r2, #1
 800a08e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a26      	ldr	r2, [pc, #152]	@ (800a130 <HAL_TIM_Base_Start_IT+0xd0>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d022      	beq.n	800a0e0 <HAL_TIM_Base_Start_IT+0x80>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0a2:	d01d      	beq.n	800a0e0 <HAL_TIM_Base_Start_IT+0x80>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a22      	ldr	r2, [pc, #136]	@ (800a134 <HAL_TIM_Base_Start_IT+0xd4>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d018      	beq.n	800a0e0 <HAL_TIM_Base_Start_IT+0x80>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a21      	ldr	r2, [pc, #132]	@ (800a138 <HAL_TIM_Base_Start_IT+0xd8>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d013      	beq.n	800a0e0 <HAL_TIM_Base_Start_IT+0x80>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a1f      	ldr	r2, [pc, #124]	@ (800a13c <HAL_TIM_Base_Start_IT+0xdc>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d00e      	beq.n	800a0e0 <HAL_TIM_Base_Start_IT+0x80>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a1e      	ldr	r2, [pc, #120]	@ (800a140 <HAL_TIM_Base_Start_IT+0xe0>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d009      	beq.n	800a0e0 <HAL_TIM_Base_Start_IT+0x80>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a1c      	ldr	r2, [pc, #112]	@ (800a144 <HAL_TIM_Base_Start_IT+0xe4>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d004      	beq.n	800a0e0 <HAL_TIM_Base_Start_IT+0x80>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	4a1b      	ldr	r2, [pc, #108]	@ (800a148 <HAL_TIM_Base_Start_IT+0xe8>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d115      	bne.n	800a10c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689a      	ldr	r2, [r3, #8]
 800a0e6:	4b19      	ldr	r3, [pc, #100]	@ (800a14c <HAL_TIM_Base_Start_IT+0xec>)
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2b06      	cmp	r3, #6
 800a0f0:	d015      	beq.n	800a11e <HAL_TIM_Base_Start_IT+0xbe>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0f8:	d011      	beq.n	800a11e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f042 0201 	orr.w	r2, r2, #1
 800a108:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a10a:	e008      	b.n	800a11e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f042 0201 	orr.w	r2, r2, #1
 800a11a:	601a      	str	r2, [r3, #0]
 800a11c:	e000      	b.n	800a120 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a11e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a120:	2300      	movs	r3, #0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr
 800a12e:	bf00      	nop
 800a130:	40012c00 	.word	0x40012c00
 800a134:	40000400 	.word	0x40000400
 800a138:	40000800 	.word	0x40000800
 800a13c:	40000c00 	.word	0x40000c00
 800a140:	40013400 	.word	0x40013400
 800a144:	40014000 	.word	0x40014000
 800a148:	40015000 	.word	0x40015000
 800a14c:	00010007 	.word	0x00010007

0800a150 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68da      	ldr	r2, [r3, #12]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f022 0201 	bic.w	r2, r2, #1
 800a166:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6a1a      	ldr	r2, [r3, #32]
 800a16e:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a172:	4013      	ands	r3, r2
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10f      	bne.n	800a198 <HAL_TIM_Base_Stop_IT+0x48>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6a1a      	ldr	r2, [r3, #32]
 800a17e:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a182:	4013      	ands	r3, r2
 800a184:	2b00      	cmp	r3, #0
 800a186:	d107      	bne.n	800a198 <HAL_TIM_Base_Stop_IT+0x48>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f022 0201 	bic.w	r2, r2, #1
 800a196:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a1a0:	2300      	movs	r3, #0
}
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	370c      	adds	r7, #12
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr

0800a1ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b082      	sub	sp, #8
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d101      	bne.n	800a1c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e049      	b.n	800a254 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d106      	bne.n	800a1da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7f9 ff7f 	bl	80040d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2202      	movs	r2, #2
 800a1de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681a      	ldr	r2, [r3, #0]
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	3304      	adds	r3, #4
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	f000 fd85 	bl	800acfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	2201      	movs	r2, #1
 800a216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	2201      	movs	r2, #1
 800a226:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2201      	movs	r2, #1
 800a22e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3708      	adds	r7, #8
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}

0800a25c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b084      	sub	sp, #16
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d109      	bne.n	800a280 <HAL_TIM_PWM_Start+0x24>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b01      	cmp	r3, #1
 800a276:	bf14      	ite	ne
 800a278:	2301      	movne	r3, #1
 800a27a:	2300      	moveq	r3, #0
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	e03c      	b.n	800a2fa <HAL_TIM_PWM_Start+0x9e>
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	2b04      	cmp	r3, #4
 800a284:	d109      	bne.n	800a29a <HAL_TIM_PWM_Start+0x3e>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a28c:	b2db      	uxtb	r3, r3
 800a28e:	2b01      	cmp	r3, #1
 800a290:	bf14      	ite	ne
 800a292:	2301      	movne	r3, #1
 800a294:	2300      	moveq	r3, #0
 800a296:	b2db      	uxtb	r3, r3
 800a298:	e02f      	b.n	800a2fa <HAL_TIM_PWM_Start+0x9e>
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2b08      	cmp	r3, #8
 800a29e:	d109      	bne.n	800a2b4 <HAL_TIM_PWM_Start+0x58>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	bf14      	ite	ne
 800a2ac:	2301      	movne	r3, #1
 800a2ae:	2300      	moveq	r3, #0
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	e022      	b.n	800a2fa <HAL_TIM_PWM_Start+0x9e>
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	2b0c      	cmp	r3, #12
 800a2b8:	d109      	bne.n	800a2ce <HAL_TIM_PWM_Start+0x72>
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	bf14      	ite	ne
 800a2c6:	2301      	movne	r3, #1
 800a2c8:	2300      	moveq	r3, #0
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	e015      	b.n	800a2fa <HAL_TIM_PWM_Start+0x9e>
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	2b10      	cmp	r3, #16
 800a2d2:	d109      	bne.n	800a2e8 <HAL_TIM_PWM_Start+0x8c>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	bf14      	ite	ne
 800a2e0:	2301      	movne	r3, #1
 800a2e2:	2300      	moveq	r3, #0
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	e008      	b.n	800a2fa <HAL_TIM_PWM_Start+0x9e>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	bf14      	ite	ne
 800a2f4:	2301      	movne	r3, #1
 800a2f6:	2300      	moveq	r3, #0
 800a2f8:	b2db      	uxtb	r3, r3
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d001      	beq.n	800a302 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a2fe:	2301      	movs	r3, #1
 800a300:	e0a6      	b.n	800a450 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d104      	bne.n	800a312 <HAL_TIM_PWM_Start+0xb6>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2202      	movs	r2, #2
 800a30c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a310:	e023      	b.n	800a35a <HAL_TIM_PWM_Start+0xfe>
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	2b04      	cmp	r3, #4
 800a316:	d104      	bne.n	800a322 <HAL_TIM_PWM_Start+0xc6>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2202      	movs	r2, #2
 800a31c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a320:	e01b      	b.n	800a35a <HAL_TIM_PWM_Start+0xfe>
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b08      	cmp	r3, #8
 800a326:	d104      	bne.n	800a332 <HAL_TIM_PWM_Start+0xd6>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2202      	movs	r2, #2
 800a32c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a330:	e013      	b.n	800a35a <HAL_TIM_PWM_Start+0xfe>
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b0c      	cmp	r3, #12
 800a336:	d104      	bne.n	800a342 <HAL_TIM_PWM_Start+0xe6>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2202      	movs	r2, #2
 800a33c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a340:	e00b      	b.n	800a35a <HAL_TIM_PWM_Start+0xfe>
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	2b10      	cmp	r3, #16
 800a346:	d104      	bne.n	800a352 <HAL_TIM_PWM_Start+0xf6>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2202      	movs	r2, #2
 800a34c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a350:	e003      	b.n	800a35a <HAL_TIM_PWM_Start+0xfe>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2202      	movs	r2, #2
 800a356:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2201      	movs	r2, #1
 800a360:	6839      	ldr	r1, [r7, #0]
 800a362:	4618      	mov	r0, r3
 800a364:	f001 f944 	bl	800b5f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4a3a      	ldr	r2, [pc, #232]	@ (800a458 <HAL_TIM_PWM_Start+0x1fc>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d018      	beq.n	800a3a4 <HAL_TIM_PWM_Start+0x148>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a39      	ldr	r2, [pc, #228]	@ (800a45c <HAL_TIM_PWM_Start+0x200>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d013      	beq.n	800a3a4 <HAL_TIM_PWM_Start+0x148>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a37      	ldr	r2, [pc, #220]	@ (800a460 <HAL_TIM_PWM_Start+0x204>)
 800a382:	4293      	cmp	r3, r2
 800a384:	d00e      	beq.n	800a3a4 <HAL_TIM_PWM_Start+0x148>
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a36      	ldr	r2, [pc, #216]	@ (800a464 <HAL_TIM_PWM_Start+0x208>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d009      	beq.n	800a3a4 <HAL_TIM_PWM_Start+0x148>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4a34      	ldr	r2, [pc, #208]	@ (800a468 <HAL_TIM_PWM_Start+0x20c>)
 800a396:	4293      	cmp	r3, r2
 800a398:	d004      	beq.n	800a3a4 <HAL_TIM_PWM_Start+0x148>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a33      	ldr	r2, [pc, #204]	@ (800a46c <HAL_TIM_PWM_Start+0x210>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d101      	bne.n	800a3a8 <HAL_TIM_PWM_Start+0x14c>
 800a3a4:	2301      	movs	r3, #1
 800a3a6:	e000      	b.n	800a3aa <HAL_TIM_PWM_Start+0x14e>
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d007      	beq.n	800a3be <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a3bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a25      	ldr	r2, [pc, #148]	@ (800a458 <HAL_TIM_PWM_Start+0x1fc>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d022      	beq.n	800a40e <HAL_TIM_PWM_Start+0x1b2>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3d0:	d01d      	beq.n	800a40e <HAL_TIM_PWM_Start+0x1b2>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a26      	ldr	r2, [pc, #152]	@ (800a470 <HAL_TIM_PWM_Start+0x214>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d018      	beq.n	800a40e <HAL_TIM_PWM_Start+0x1b2>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a24      	ldr	r2, [pc, #144]	@ (800a474 <HAL_TIM_PWM_Start+0x218>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d013      	beq.n	800a40e <HAL_TIM_PWM_Start+0x1b2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a23      	ldr	r2, [pc, #140]	@ (800a478 <HAL_TIM_PWM_Start+0x21c>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d00e      	beq.n	800a40e <HAL_TIM_PWM_Start+0x1b2>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a19      	ldr	r2, [pc, #100]	@ (800a45c <HAL_TIM_PWM_Start+0x200>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d009      	beq.n	800a40e <HAL_TIM_PWM_Start+0x1b2>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a18      	ldr	r2, [pc, #96]	@ (800a460 <HAL_TIM_PWM_Start+0x204>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d004      	beq.n	800a40e <HAL_TIM_PWM_Start+0x1b2>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a18      	ldr	r2, [pc, #96]	@ (800a46c <HAL_TIM_PWM_Start+0x210>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d115      	bne.n	800a43a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	689a      	ldr	r2, [r3, #8]
 800a414:	4b19      	ldr	r3, [pc, #100]	@ (800a47c <HAL_TIM_PWM_Start+0x220>)
 800a416:	4013      	ands	r3, r2
 800a418:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2b06      	cmp	r3, #6
 800a41e:	d015      	beq.n	800a44c <HAL_TIM_PWM_Start+0x1f0>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a426:	d011      	beq.n	800a44c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	681a      	ldr	r2, [r3, #0]
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f042 0201 	orr.w	r2, r2, #1
 800a436:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a438:	e008      	b.n	800a44c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f042 0201 	orr.w	r2, r2, #1
 800a448:	601a      	str	r2, [r3, #0]
 800a44a:	e000      	b.n	800a44e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a44c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
}
 800a450:	4618      	mov	r0, r3
 800a452:	3710      	adds	r7, #16
 800a454:	46bd      	mov	sp, r7
 800a456:	bd80      	pop	{r7, pc}
 800a458:	40012c00 	.word	0x40012c00
 800a45c:	40013400 	.word	0x40013400
 800a460:	40014000 	.word	0x40014000
 800a464:	40014400 	.word	0x40014400
 800a468:	40014800 	.word	0x40014800
 800a46c:	40015000 	.word	0x40015000
 800a470:	40000400 	.word	0x40000400
 800a474:	40000800 	.word	0x40000800
 800a478:	40000c00 	.word	0x40000c00
 800a47c:	00010007 	.word	0x00010007

0800a480 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b082      	sub	sp, #8
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
 800a488:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	2200      	movs	r2, #0
 800a490:	6839      	ldr	r1, [r7, #0]
 800a492:	4618      	mov	r0, r3
 800a494:	f001 f8ac 	bl	800b5f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	4a40      	ldr	r2, [pc, #256]	@ (800a5a0 <HAL_TIM_PWM_Stop+0x120>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d018      	beq.n	800a4d4 <HAL_TIM_PWM_Stop+0x54>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4a3f      	ldr	r2, [pc, #252]	@ (800a5a4 <HAL_TIM_PWM_Stop+0x124>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d013      	beq.n	800a4d4 <HAL_TIM_PWM_Stop+0x54>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a3d      	ldr	r2, [pc, #244]	@ (800a5a8 <HAL_TIM_PWM_Stop+0x128>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d00e      	beq.n	800a4d4 <HAL_TIM_PWM_Stop+0x54>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a3c      	ldr	r2, [pc, #240]	@ (800a5ac <HAL_TIM_PWM_Stop+0x12c>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d009      	beq.n	800a4d4 <HAL_TIM_PWM_Stop+0x54>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a3a      	ldr	r2, [pc, #232]	@ (800a5b0 <HAL_TIM_PWM_Stop+0x130>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d004      	beq.n	800a4d4 <HAL_TIM_PWM_Stop+0x54>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	4a39      	ldr	r2, [pc, #228]	@ (800a5b4 <HAL_TIM_PWM_Stop+0x134>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d101      	bne.n	800a4d8 <HAL_TIM_PWM_Stop+0x58>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e000      	b.n	800a4da <HAL_TIM_PWM_Stop+0x5a>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d017      	beq.n	800a50e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	6a1a      	ldr	r2, [r3, #32]
 800a4e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a4e8:	4013      	ands	r3, r2
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10f      	bne.n	800a50e <HAL_TIM_PWM_Stop+0x8e>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	6a1a      	ldr	r2, [r3, #32]
 800a4f4:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d107      	bne.n	800a50e <HAL_TIM_PWM_Stop+0x8e>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a50c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6a1a      	ldr	r2, [r3, #32]
 800a514:	f241 1311 	movw	r3, #4369	@ 0x1111
 800a518:	4013      	ands	r3, r2
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10f      	bne.n	800a53e <HAL_TIM_PWM_Stop+0xbe>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	6a1a      	ldr	r2, [r3, #32]
 800a524:	f244 4344 	movw	r3, #17476	@ 0x4444
 800a528:	4013      	ands	r3, r2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d107      	bne.n	800a53e <HAL_TIM_PWM_Stop+0xbe>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f022 0201 	bic.w	r2, r2, #1
 800a53c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d104      	bne.n	800a54e <HAL_TIM_PWM_Stop+0xce>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2201      	movs	r2, #1
 800a548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a54c:	e023      	b.n	800a596 <HAL_TIM_PWM_Stop+0x116>
 800a54e:	683b      	ldr	r3, [r7, #0]
 800a550:	2b04      	cmp	r3, #4
 800a552:	d104      	bne.n	800a55e <HAL_TIM_PWM_Stop+0xde>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2201      	movs	r2, #1
 800a558:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a55c:	e01b      	b.n	800a596 <HAL_TIM_PWM_Stop+0x116>
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b08      	cmp	r3, #8
 800a562:	d104      	bne.n	800a56e <HAL_TIM_PWM_Stop+0xee>
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2201      	movs	r2, #1
 800a568:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a56c:	e013      	b.n	800a596 <HAL_TIM_PWM_Stop+0x116>
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b0c      	cmp	r3, #12
 800a572:	d104      	bne.n	800a57e <HAL_TIM_PWM_Stop+0xfe>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2201      	movs	r2, #1
 800a578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a57c:	e00b      	b.n	800a596 <HAL_TIM_PWM_Stop+0x116>
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	2b10      	cmp	r3, #16
 800a582:	d104      	bne.n	800a58e <HAL_TIM_PWM_Stop+0x10e>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2201      	movs	r2, #1
 800a588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a58c:	e003      	b.n	800a596 <HAL_TIM_PWM_Stop+0x116>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800a596:	2300      	movs	r3, #0
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}
 800a5a0:	40012c00 	.word	0x40012c00
 800a5a4:	40013400 	.word	0x40013400
 800a5a8:	40014000 	.word	0x40014000
 800a5ac:	40014400 	.word	0x40014400
 800a5b0:	40014800 	.word	0x40014800
 800a5b4:	40015000 	.word	0x40015000

0800a5b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b084      	sub	sp, #16
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68db      	ldr	r3, [r3, #12]
 800a5c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	f003 0302 	and.w	r3, r3, #2
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d020      	beq.n	800a61c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f003 0302 	and.w	r3, r3, #2
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d01b      	beq.n	800a61c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f06f 0202 	mvn.w	r2, #2
 800a5ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	699b      	ldr	r3, [r3, #24]
 800a5fa:	f003 0303 	and.w	r3, r3, #3
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 fb5c 	bl	800acc0 <HAL_TIM_IC_CaptureCallback>
 800a608:	e005      	b.n	800a616 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f000 fb4e 	bl	800acac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f000 fb5f 	bl	800acd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	f003 0304 	and.w	r3, r3, #4
 800a622:	2b00      	cmp	r3, #0
 800a624:	d020      	beq.n	800a668 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f003 0304 	and.w	r3, r3, #4
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d01b      	beq.n	800a668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f06f 0204 	mvn.w	r2, #4
 800a638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2202      	movs	r2, #2
 800a63e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d003      	beq.n	800a656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 fb36 	bl	800acc0 <HAL_TIM_IC_CaptureCallback>
 800a654:	e005      	b.n	800a662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fb28 	bl	800acac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fb39 	bl	800acd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	f003 0308 	and.w	r3, r3, #8
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d020      	beq.n	800a6b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f003 0308 	and.w	r3, r3, #8
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d01b      	beq.n	800a6b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f06f 0208 	mvn.w	r2, #8
 800a684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2204      	movs	r2, #4
 800a68a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	69db      	ldr	r3, [r3, #28]
 800a692:	f003 0303 	and.w	r3, r3, #3
 800a696:	2b00      	cmp	r3, #0
 800a698:	d003      	beq.n	800a6a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 fb10 	bl	800acc0 <HAL_TIM_IC_CaptureCallback>
 800a6a0:	e005      	b.n	800a6ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 fb02 	bl	800acac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fb13 	bl	800acd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	f003 0310 	and.w	r3, r3, #16
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d020      	beq.n	800a700 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f003 0310 	and.w	r3, r3, #16
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d01b      	beq.n	800a700 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f06f 0210 	mvn.w	r2, #16
 800a6d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2208      	movs	r2, #8
 800a6d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	69db      	ldr	r3, [r3, #28]
 800a6de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 faea 	bl	800acc0 <HAL_TIM_IC_CaptureCallback>
 800a6ec:	e005      	b.n	800a6fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	f000 fadc 	bl	800acac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 faed 	bl	800acd4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	f003 0301 	and.w	r3, r3, #1
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00c      	beq.n	800a724 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	2b00      	cmp	r3, #0
 800a712:	d007      	beq.n	800a724 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f06f 0201 	mvn.w	r2, #1
 800a71c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7f8 fafe 	bl	8002d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d104      	bne.n	800a738 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00c      	beq.n	800a752 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d007      	beq.n	800a752 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a74a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f001 f8a9 	bl	800b8a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d00c      	beq.n	800a776 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a762:	2b00      	cmp	r3, #0
 800a764:	d007      	beq.n	800a776 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a76e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f001 f8a1 	bl	800b8b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00c      	beq.n	800a79a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a786:	2b00      	cmp	r3, #0
 800a788:	d007      	beq.n	800a79a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 faa7 	bl	800ace8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	f003 0320 	and.w	r3, r3, #32
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00c      	beq.n	800a7be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f003 0320 	and.w	r3, r3, #32
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d007      	beq.n	800a7be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f06f 0220 	mvn.w	r2, #32
 800a7b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f001 f869 	bl	800b890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00c      	beq.n	800a7e2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d007      	beq.n	800a7e2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a7da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f001 f875 	bl	800b8cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d00c      	beq.n	800a806 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d007      	beq.n	800a806 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a7fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f001 f86d 	bl	800b8e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d00c      	beq.n	800a82a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a816:	2b00      	cmp	r3, #0
 800a818:	d007      	beq.n	800a82a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 f865 	bl	800b8f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00c      	beq.n	800a84e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d007      	beq.n	800a84e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f001 f85d 	bl	800b908 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a84e:	bf00      	nop
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
	...

0800a858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b086      	sub	sp, #24
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	60b9      	str	r1, [r7, #8]
 800a862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a864:	2300      	movs	r3, #0
 800a866:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d101      	bne.n	800a876 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a872:	2302      	movs	r3, #2
 800a874:	e0ff      	b.n	800aa76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2b14      	cmp	r3, #20
 800a882:	f200 80f0 	bhi.w	800aa66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a886:	a201      	add	r2, pc, #4	@ (adr r2, 800a88c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a88c:	0800a8e1 	.word	0x0800a8e1
 800a890:	0800aa67 	.word	0x0800aa67
 800a894:	0800aa67 	.word	0x0800aa67
 800a898:	0800aa67 	.word	0x0800aa67
 800a89c:	0800a921 	.word	0x0800a921
 800a8a0:	0800aa67 	.word	0x0800aa67
 800a8a4:	0800aa67 	.word	0x0800aa67
 800a8a8:	0800aa67 	.word	0x0800aa67
 800a8ac:	0800a963 	.word	0x0800a963
 800a8b0:	0800aa67 	.word	0x0800aa67
 800a8b4:	0800aa67 	.word	0x0800aa67
 800a8b8:	0800aa67 	.word	0x0800aa67
 800a8bc:	0800a9a3 	.word	0x0800a9a3
 800a8c0:	0800aa67 	.word	0x0800aa67
 800a8c4:	0800aa67 	.word	0x0800aa67
 800a8c8:	0800aa67 	.word	0x0800aa67
 800a8cc:	0800a9e5 	.word	0x0800a9e5
 800a8d0:	0800aa67 	.word	0x0800aa67
 800a8d4:	0800aa67 	.word	0x0800aa67
 800a8d8:	0800aa67 	.word	0x0800aa67
 800a8dc:	0800aa25 	.word	0x0800aa25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	68b9      	ldr	r1, [r7, #8]
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f000 fabc 	bl	800ae64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	699a      	ldr	r2, [r3, #24]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f042 0208 	orr.w	r2, r2, #8
 800a8fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	699a      	ldr	r2, [r3, #24]
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f022 0204 	bic.w	r2, r2, #4
 800a90a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	6999      	ldr	r1, [r3, #24]
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	691a      	ldr	r2, [r3, #16]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	430a      	orrs	r2, r1
 800a91c:	619a      	str	r2, [r3, #24]
      break;
 800a91e:	e0a5      	b.n	800aa6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68b9      	ldr	r1, [r7, #8]
 800a926:	4618      	mov	r0, r3
 800a928:	f000 fb36 	bl	800af98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	699a      	ldr	r2, [r3, #24]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a93a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	699a      	ldr	r2, [r3, #24]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a94a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	6999      	ldr	r1, [r3, #24]
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	021a      	lsls	r2, r3, #8
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	430a      	orrs	r2, r1
 800a95e:	619a      	str	r2, [r3, #24]
      break;
 800a960:	e084      	b.n	800aa6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	68b9      	ldr	r1, [r7, #8]
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 fba9 	bl	800b0c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	69da      	ldr	r2, [r3, #28]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f042 0208 	orr.w	r2, r2, #8
 800a97c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	69da      	ldr	r2, [r3, #28]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f022 0204 	bic.w	r2, r2, #4
 800a98c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	69d9      	ldr	r1, [r3, #28]
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	691a      	ldr	r2, [r3, #16]
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	430a      	orrs	r2, r1
 800a99e:	61da      	str	r2, [r3, #28]
      break;
 800a9a0:	e064      	b.n	800aa6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	68b9      	ldr	r1, [r7, #8]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f000 fc1b 	bl	800b1e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	69da      	ldr	r2, [r3, #28]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a9bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	69da      	ldr	r2, [r3, #28]
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a9cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	69d9      	ldr	r1, [r3, #28]
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	691b      	ldr	r3, [r3, #16]
 800a9d8:	021a      	lsls	r2, r3, #8
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	430a      	orrs	r2, r1
 800a9e0:	61da      	str	r2, [r3, #28]
      break;
 800a9e2:	e043      	b.n	800aa6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	68b9      	ldr	r1, [r7, #8]
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f000 fc8e 	bl	800b30c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f042 0208 	orr.w	r2, r2, #8
 800a9fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f022 0204 	bic.w	r2, r2, #4
 800aa0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	691a      	ldr	r2, [r3, #16]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800aa22:	e023      	b.n	800aa6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	68b9      	ldr	r1, [r7, #8]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 fcd8 	bl	800b3e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aa3e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aa4e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	021a      	lsls	r2, r3, #8
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	430a      	orrs	r2, r1
 800aa62:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800aa64:	e002      	b.n	800aa6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	75fb      	strb	r3, [r7, #23]
      break;
 800aa6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aa74:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3718      	adds	r7, #24
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop

0800aa80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d101      	bne.n	800aa9c <HAL_TIM_ConfigClockSource+0x1c>
 800aa98:	2302      	movs	r3, #2
 800aa9a:	e0f6      	b.n	800ac8a <HAL_TIM_ConfigClockSource+0x20a>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2202      	movs	r2, #2
 800aaa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	689b      	ldr	r3, [r3, #8]
 800aab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800aaba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800aabe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aac6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	68ba      	ldr	r2, [r7, #8]
 800aace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a6f      	ldr	r2, [pc, #444]	@ (800ac94 <HAL_TIM_ConfigClockSource+0x214>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	f000 80c1 	beq.w	800ac5e <HAL_TIM_ConfigClockSource+0x1de>
 800aadc:	4a6d      	ldr	r2, [pc, #436]	@ (800ac94 <HAL_TIM_ConfigClockSource+0x214>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	f200 80c6 	bhi.w	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800aae4:	4a6c      	ldr	r2, [pc, #432]	@ (800ac98 <HAL_TIM_ConfigClockSource+0x218>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	f000 80b9 	beq.w	800ac5e <HAL_TIM_ConfigClockSource+0x1de>
 800aaec:	4a6a      	ldr	r2, [pc, #424]	@ (800ac98 <HAL_TIM_ConfigClockSource+0x218>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	f200 80be 	bhi.w	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800aaf4:	4a69      	ldr	r2, [pc, #420]	@ (800ac9c <HAL_TIM_ConfigClockSource+0x21c>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	f000 80b1 	beq.w	800ac5e <HAL_TIM_ConfigClockSource+0x1de>
 800aafc:	4a67      	ldr	r2, [pc, #412]	@ (800ac9c <HAL_TIM_ConfigClockSource+0x21c>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	f200 80b6 	bhi.w	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800ab04:	4a66      	ldr	r2, [pc, #408]	@ (800aca0 <HAL_TIM_ConfigClockSource+0x220>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	f000 80a9 	beq.w	800ac5e <HAL_TIM_ConfigClockSource+0x1de>
 800ab0c:	4a64      	ldr	r2, [pc, #400]	@ (800aca0 <HAL_TIM_ConfigClockSource+0x220>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	f200 80ae 	bhi.w	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800ab14:	4a63      	ldr	r2, [pc, #396]	@ (800aca4 <HAL_TIM_ConfigClockSource+0x224>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	f000 80a1 	beq.w	800ac5e <HAL_TIM_ConfigClockSource+0x1de>
 800ab1c:	4a61      	ldr	r2, [pc, #388]	@ (800aca4 <HAL_TIM_ConfigClockSource+0x224>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	f200 80a6 	bhi.w	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800ab24:	4a60      	ldr	r2, [pc, #384]	@ (800aca8 <HAL_TIM_ConfigClockSource+0x228>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	f000 8099 	beq.w	800ac5e <HAL_TIM_ConfigClockSource+0x1de>
 800ab2c:	4a5e      	ldr	r2, [pc, #376]	@ (800aca8 <HAL_TIM_ConfigClockSource+0x228>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	f200 809e 	bhi.w	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800ab34:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ab38:	f000 8091 	beq.w	800ac5e <HAL_TIM_ConfigClockSource+0x1de>
 800ab3c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800ab40:	f200 8096 	bhi.w	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800ab44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab48:	f000 8089 	beq.w	800ac5e <HAL_TIM_ConfigClockSource+0x1de>
 800ab4c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab50:	f200 808e 	bhi.w	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800ab54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab58:	d03e      	beq.n	800abd8 <HAL_TIM_ConfigClockSource+0x158>
 800ab5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ab5e:	f200 8087 	bhi.w	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800ab62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab66:	f000 8086 	beq.w	800ac76 <HAL_TIM_ConfigClockSource+0x1f6>
 800ab6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab6e:	d87f      	bhi.n	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800ab70:	2b70      	cmp	r3, #112	@ 0x70
 800ab72:	d01a      	beq.n	800abaa <HAL_TIM_ConfigClockSource+0x12a>
 800ab74:	2b70      	cmp	r3, #112	@ 0x70
 800ab76:	d87b      	bhi.n	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800ab78:	2b60      	cmp	r3, #96	@ 0x60
 800ab7a:	d050      	beq.n	800ac1e <HAL_TIM_ConfigClockSource+0x19e>
 800ab7c:	2b60      	cmp	r3, #96	@ 0x60
 800ab7e:	d877      	bhi.n	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800ab80:	2b50      	cmp	r3, #80	@ 0x50
 800ab82:	d03c      	beq.n	800abfe <HAL_TIM_ConfigClockSource+0x17e>
 800ab84:	2b50      	cmp	r3, #80	@ 0x50
 800ab86:	d873      	bhi.n	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800ab88:	2b40      	cmp	r3, #64	@ 0x40
 800ab8a:	d058      	beq.n	800ac3e <HAL_TIM_ConfigClockSource+0x1be>
 800ab8c:	2b40      	cmp	r3, #64	@ 0x40
 800ab8e:	d86f      	bhi.n	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800ab90:	2b30      	cmp	r3, #48	@ 0x30
 800ab92:	d064      	beq.n	800ac5e <HAL_TIM_ConfigClockSource+0x1de>
 800ab94:	2b30      	cmp	r3, #48	@ 0x30
 800ab96:	d86b      	bhi.n	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800ab98:	2b20      	cmp	r3, #32
 800ab9a:	d060      	beq.n	800ac5e <HAL_TIM_ConfigClockSource+0x1de>
 800ab9c:	2b20      	cmp	r3, #32
 800ab9e:	d867      	bhi.n	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d05c      	beq.n	800ac5e <HAL_TIM_ConfigClockSource+0x1de>
 800aba4:	2b10      	cmp	r3, #16
 800aba6:	d05a      	beq.n	800ac5e <HAL_TIM_ConfigClockSource+0x1de>
 800aba8:	e062      	b.n	800ac70 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800abba:	f000 fcf9 	bl	800b5b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800abcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	609a      	str	r2, [r3, #8]
      break;
 800abd6:	e04f      	b.n	800ac78 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800abe8:	f000 fce2 	bl	800b5b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	689a      	ldr	r2, [r3, #8]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800abfa:	609a      	str	r2, [r3, #8]
      break;
 800abfc:	e03c      	b.n	800ac78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	f000 fc54 	bl	800b4b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2150      	movs	r1, #80	@ 0x50
 800ac16:	4618      	mov	r0, r3
 800ac18:	f000 fcad 	bl	800b576 <TIM_ITRx_SetConfig>
      break;
 800ac1c:	e02c      	b.n	800ac78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	f000 fc73 	bl	800b516 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	2160      	movs	r1, #96	@ 0x60
 800ac36:	4618      	mov	r0, r3
 800ac38:	f000 fc9d 	bl	800b576 <TIM_ITRx_SetConfig>
      break;
 800ac3c:	e01c      	b.n	800ac78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	f000 fc34 	bl	800b4b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2140      	movs	r1, #64	@ 0x40
 800ac56:	4618      	mov	r0, r3
 800ac58:	f000 fc8d 	bl	800b576 <TIM_ITRx_SetConfig>
      break;
 800ac5c:	e00c      	b.n	800ac78 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4619      	mov	r1, r3
 800ac68:	4610      	mov	r0, r2
 800ac6a:	f000 fc84 	bl	800b576 <TIM_ITRx_SetConfig>
      break;
 800ac6e:	e003      	b.n	800ac78 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	73fb      	strb	r3, [r7, #15]
      break;
 800ac74:	e000      	b.n	800ac78 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800ac76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2200      	movs	r2, #0
 800ac84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ac88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3710      	adds	r7, #16
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	00100070 	.word	0x00100070
 800ac98:	00100060 	.word	0x00100060
 800ac9c:	00100050 	.word	0x00100050
 800aca0:	00100040 	.word	0x00100040
 800aca4:	00100030 	.word	0x00100030
 800aca8:	00100020 	.word	0x00100020

0800acac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800acc8:	bf00      	nop
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b083      	sub	sp, #12
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acdc:	bf00      	nop
 800acde:	370c      	adds	r7, #12
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ace8:	b480      	push	{r7}
 800acea:	b083      	sub	sp, #12
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acf0:	bf00      	nop
 800acf2:	370c      	adds	r7, #12
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b085      	sub	sp, #20
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a4c      	ldr	r2, [pc, #304]	@ (800ae40 <TIM_Base_SetConfig+0x144>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d017      	beq.n	800ad44 <TIM_Base_SetConfig+0x48>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad1a:	d013      	beq.n	800ad44 <TIM_Base_SetConfig+0x48>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a49      	ldr	r2, [pc, #292]	@ (800ae44 <TIM_Base_SetConfig+0x148>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d00f      	beq.n	800ad44 <TIM_Base_SetConfig+0x48>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a48      	ldr	r2, [pc, #288]	@ (800ae48 <TIM_Base_SetConfig+0x14c>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d00b      	beq.n	800ad44 <TIM_Base_SetConfig+0x48>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a47      	ldr	r2, [pc, #284]	@ (800ae4c <TIM_Base_SetConfig+0x150>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d007      	beq.n	800ad44 <TIM_Base_SetConfig+0x48>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a46      	ldr	r2, [pc, #280]	@ (800ae50 <TIM_Base_SetConfig+0x154>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d003      	beq.n	800ad44 <TIM_Base_SetConfig+0x48>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a45      	ldr	r2, [pc, #276]	@ (800ae54 <TIM_Base_SetConfig+0x158>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d108      	bne.n	800ad56 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	685b      	ldr	r3, [r3, #4]
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a39      	ldr	r2, [pc, #228]	@ (800ae40 <TIM_Base_SetConfig+0x144>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d023      	beq.n	800ada6 <TIM_Base_SetConfig+0xaa>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad64:	d01f      	beq.n	800ada6 <TIM_Base_SetConfig+0xaa>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a36      	ldr	r2, [pc, #216]	@ (800ae44 <TIM_Base_SetConfig+0x148>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d01b      	beq.n	800ada6 <TIM_Base_SetConfig+0xaa>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a35      	ldr	r2, [pc, #212]	@ (800ae48 <TIM_Base_SetConfig+0x14c>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d017      	beq.n	800ada6 <TIM_Base_SetConfig+0xaa>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a34      	ldr	r2, [pc, #208]	@ (800ae4c <TIM_Base_SetConfig+0x150>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d013      	beq.n	800ada6 <TIM_Base_SetConfig+0xaa>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a33      	ldr	r2, [pc, #204]	@ (800ae50 <TIM_Base_SetConfig+0x154>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d00f      	beq.n	800ada6 <TIM_Base_SetConfig+0xaa>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4a33      	ldr	r2, [pc, #204]	@ (800ae58 <TIM_Base_SetConfig+0x15c>)
 800ad8a:	4293      	cmp	r3, r2
 800ad8c:	d00b      	beq.n	800ada6 <TIM_Base_SetConfig+0xaa>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	4a32      	ldr	r2, [pc, #200]	@ (800ae5c <TIM_Base_SetConfig+0x160>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d007      	beq.n	800ada6 <TIM_Base_SetConfig+0xaa>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4a31      	ldr	r2, [pc, #196]	@ (800ae60 <TIM_Base_SetConfig+0x164>)
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d003      	beq.n	800ada6 <TIM_Base_SetConfig+0xaa>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4a2c      	ldr	r2, [pc, #176]	@ (800ae54 <TIM_Base_SetConfig+0x158>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d108      	bne.n	800adb8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800adac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800adae:	683b      	ldr	r3, [r7, #0]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	68fa      	ldr	r2, [r7, #12]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	695b      	ldr	r3, [r3, #20]
 800adc2:	4313      	orrs	r3, r2
 800adc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	68fa      	ldr	r2, [r7, #12]
 800adca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	689a      	ldr	r2, [r3, #8]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	4a18      	ldr	r2, [pc, #96]	@ (800ae40 <TIM_Base_SetConfig+0x144>)
 800ade0:	4293      	cmp	r3, r2
 800ade2:	d013      	beq.n	800ae0c <TIM_Base_SetConfig+0x110>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4a1a      	ldr	r2, [pc, #104]	@ (800ae50 <TIM_Base_SetConfig+0x154>)
 800ade8:	4293      	cmp	r3, r2
 800adea:	d00f      	beq.n	800ae0c <TIM_Base_SetConfig+0x110>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4a1a      	ldr	r2, [pc, #104]	@ (800ae58 <TIM_Base_SetConfig+0x15c>)
 800adf0:	4293      	cmp	r3, r2
 800adf2:	d00b      	beq.n	800ae0c <TIM_Base_SetConfig+0x110>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4a19      	ldr	r2, [pc, #100]	@ (800ae5c <TIM_Base_SetConfig+0x160>)
 800adf8:	4293      	cmp	r3, r2
 800adfa:	d007      	beq.n	800ae0c <TIM_Base_SetConfig+0x110>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a18      	ldr	r2, [pc, #96]	@ (800ae60 <TIM_Base_SetConfig+0x164>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d003      	beq.n	800ae0c <TIM_Base_SetConfig+0x110>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a13      	ldr	r2, [pc, #76]	@ (800ae54 <TIM_Base_SetConfig+0x158>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d103      	bne.n	800ae14 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	691a      	ldr	r2, [r3, #16]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	691b      	ldr	r3, [r3, #16]
 800ae1e:	f003 0301 	and.w	r3, r3, #1
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d105      	bne.n	800ae32 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	691b      	ldr	r3, [r3, #16]
 800ae2a:	f023 0201 	bic.w	r2, r3, #1
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	611a      	str	r2, [r3, #16]
  }
}
 800ae32:	bf00      	nop
 800ae34:	3714      	adds	r7, #20
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	40012c00 	.word	0x40012c00
 800ae44:	40000400 	.word	0x40000400
 800ae48:	40000800 	.word	0x40000800
 800ae4c:	40000c00 	.word	0x40000c00
 800ae50:	40013400 	.word	0x40013400
 800ae54:	40015000 	.word	0x40015000
 800ae58:	40014000 	.word	0x40014000
 800ae5c:	40014400 	.word	0x40014400
 800ae60:	40014800 	.word	0x40014800

0800ae64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b087      	sub	sp, #28
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a1b      	ldr	r3, [r3, #32]
 800ae72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6a1b      	ldr	r3, [r3, #32]
 800ae78:	f023 0201 	bic.w	r2, r3, #1
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	685b      	ldr	r3, [r3, #4]
 800ae84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	699b      	ldr	r3, [r3, #24]
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ae92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f023 0303 	bic.w	r3, r3, #3
 800ae9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	f023 0302 	bic.w	r3, r3, #2
 800aeb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a30      	ldr	r2, [pc, #192]	@ (800af80 <TIM_OC1_SetConfig+0x11c>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d013      	beq.n	800aeec <TIM_OC1_SetConfig+0x88>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a2f      	ldr	r2, [pc, #188]	@ (800af84 <TIM_OC1_SetConfig+0x120>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d00f      	beq.n	800aeec <TIM_OC1_SetConfig+0x88>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a2e      	ldr	r2, [pc, #184]	@ (800af88 <TIM_OC1_SetConfig+0x124>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d00b      	beq.n	800aeec <TIM_OC1_SetConfig+0x88>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a2d      	ldr	r2, [pc, #180]	@ (800af8c <TIM_OC1_SetConfig+0x128>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d007      	beq.n	800aeec <TIM_OC1_SetConfig+0x88>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	4a2c      	ldr	r2, [pc, #176]	@ (800af90 <TIM_OC1_SetConfig+0x12c>)
 800aee0:	4293      	cmp	r3, r2
 800aee2:	d003      	beq.n	800aeec <TIM_OC1_SetConfig+0x88>
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	4a2b      	ldr	r2, [pc, #172]	@ (800af94 <TIM_OC1_SetConfig+0x130>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d10c      	bne.n	800af06 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	f023 0308 	bic.w	r3, r3, #8
 800aef2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	68db      	ldr	r3, [r3, #12]
 800aef8:	697a      	ldr	r2, [r7, #20]
 800aefa:	4313      	orrs	r3, r2
 800aefc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800aefe:	697b      	ldr	r3, [r7, #20]
 800af00:	f023 0304 	bic.w	r3, r3, #4
 800af04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4a1d      	ldr	r2, [pc, #116]	@ (800af80 <TIM_OC1_SetConfig+0x11c>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d013      	beq.n	800af36 <TIM_OC1_SetConfig+0xd2>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a1c      	ldr	r2, [pc, #112]	@ (800af84 <TIM_OC1_SetConfig+0x120>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d00f      	beq.n	800af36 <TIM_OC1_SetConfig+0xd2>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a1b      	ldr	r2, [pc, #108]	@ (800af88 <TIM_OC1_SetConfig+0x124>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d00b      	beq.n	800af36 <TIM_OC1_SetConfig+0xd2>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4a1a      	ldr	r2, [pc, #104]	@ (800af8c <TIM_OC1_SetConfig+0x128>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d007      	beq.n	800af36 <TIM_OC1_SetConfig+0xd2>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a19      	ldr	r2, [pc, #100]	@ (800af90 <TIM_OC1_SetConfig+0x12c>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d003      	beq.n	800af36 <TIM_OC1_SetConfig+0xd2>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a18      	ldr	r2, [pc, #96]	@ (800af94 <TIM_OC1_SetConfig+0x130>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d111      	bne.n	800af5a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800af3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800af44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	695b      	ldr	r3, [r3, #20]
 800af4a:	693a      	ldr	r2, [r7, #16]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	699b      	ldr	r3, [r3, #24]
 800af54:	693a      	ldr	r2, [r7, #16]
 800af56:	4313      	orrs	r3, r2
 800af58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	693a      	ldr	r2, [r7, #16]
 800af5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	68fa      	ldr	r2, [r7, #12]
 800af64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	685a      	ldr	r2, [r3, #4]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	697a      	ldr	r2, [r7, #20]
 800af72:	621a      	str	r2, [r3, #32]
}
 800af74:	bf00      	nop
 800af76:	371c      	adds	r7, #28
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr
 800af80:	40012c00 	.word	0x40012c00
 800af84:	40013400 	.word	0x40013400
 800af88:	40014000 	.word	0x40014000
 800af8c:	40014400 	.word	0x40014400
 800af90:	40014800 	.word	0x40014800
 800af94:	40015000 	.word	0x40015000

0800af98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800af98:	b480      	push	{r7}
 800af9a:	b087      	sub	sp, #28
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6a1b      	ldr	r3, [r3, #32]
 800afa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6a1b      	ldr	r3, [r3, #32]
 800afac:	f023 0210 	bic.w	r2, r3, #16
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	699b      	ldr	r3, [r3, #24]
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800afc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	021b      	lsls	r3, r3, #8
 800afda:	68fa      	ldr	r2, [r7, #12]
 800afdc:	4313      	orrs	r3, r2
 800afde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	f023 0320 	bic.w	r3, r3, #32
 800afe6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	011b      	lsls	r3, r3, #4
 800afee:	697a      	ldr	r2, [r7, #20]
 800aff0:	4313      	orrs	r3, r2
 800aff2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4a2c      	ldr	r2, [pc, #176]	@ (800b0a8 <TIM_OC2_SetConfig+0x110>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d007      	beq.n	800b00c <TIM_OC2_SetConfig+0x74>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4a2b      	ldr	r2, [pc, #172]	@ (800b0ac <TIM_OC2_SetConfig+0x114>)
 800b000:	4293      	cmp	r3, r2
 800b002:	d003      	beq.n	800b00c <TIM_OC2_SetConfig+0x74>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	4a2a      	ldr	r2, [pc, #168]	@ (800b0b0 <TIM_OC2_SetConfig+0x118>)
 800b008:	4293      	cmp	r3, r2
 800b00a:	d10d      	bne.n	800b028 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	68db      	ldr	r3, [r3, #12]
 800b018:	011b      	lsls	r3, r3, #4
 800b01a:	697a      	ldr	r2, [r7, #20]
 800b01c:	4313      	orrs	r3, r2
 800b01e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b026:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a1f      	ldr	r2, [pc, #124]	@ (800b0a8 <TIM_OC2_SetConfig+0x110>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d013      	beq.n	800b058 <TIM_OC2_SetConfig+0xc0>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	4a1e      	ldr	r2, [pc, #120]	@ (800b0ac <TIM_OC2_SetConfig+0x114>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d00f      	beq.n	800b058 <TIM_OC2_SetConfig+0xc0>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4a1e      	ldr	r2, [pc, #120]	@ (800b0b4 <TIM_OC2_SetConfig+0x11c>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d00b      	beq.n	800b058 <TIM_OC2_SetConfig+0xc0>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	4a1d      	ldr	r2, [pc, #116]	@ (800b0b8 <TIM_OC2_SetConfig+0x120>)
 800b044:	4293      	cmp	r3, r2
 800b046:	d007      	beq.n	800b058 <TIM_OC2_SetConfig+0xc0>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a1c      	ldr	r2, [pc, #112]	@ (800b0bc <TIM_OC2_SetConfig+0x124>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d003      	beq.n	800b058 <TIM_OC2_SetConfig+0xc0>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a17      	ldr	r2, [pc, #92]	@ (800b0b0 <TIM_OC2_SetConfig+0x118>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d113      	bne.n	800b080 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b058:	693b      	ldr	r3, [r7, #16]
 800b05a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b05e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b066:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	695b      	ldr	r3, [r3, #20]
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	4313      	orrs	r3, r2
 800b072:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	693a      	ldr	r2, [r7, #16]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	693a      	ldr	r2, [r7, #16]
 800b084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68fa      	ldr	r2, [r7, #12]
 800b08a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	685a      	ldr	r2, [r3, #4]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	621a      	str	r2, [r3, #32]
}
 800b09a:	bf00      	nop
 800b09c:	371c      	adds	r7, #28
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr
 800b0a6:	bf00      	nop
 800b0a8:	40012c00 	.word	0x40012c00
 800b0ac:	40013400 	.word	0x40013400
 800b0b0:	40015000 	.word	0x40015000
 800b0b4:	40014000 	.word	0x40014000
 800b0b8:	40014400 	.word	0x40014400
 800b0bc:	40014800 	.word	0x40014800

0800b0c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b087      	sub	sp, #28
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a1b      	ldr	r3, [r3, #32]
 800b0ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a1b      	ldr	r3, [r3, #32]
 800b0d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	69db      	ldr	r3, [r3, #28]
 800b0e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b0ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f023 0303 	bic.w	r3, r3, #3
 800b0fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	4313      	orrs	r3, r2
 800b104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b10c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	021b      	lsls	r3, r3, #8
 800b114:	697a      	ldr	r2, [r7, #20]
 800b116:	4313      	orrs	r3, r2
 800b118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a2b      	ldr	r2, [pc, #172]	@ (800b1cc <TIM_OC3_SetConfig+0x10c>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d007      	beq.n	800b132 <TIM_OC3_SetConfig+0x72>
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	4a2a      	ldr	r2, [pc, #168]	@ (800b1d0 <TIM_OC3_SetConfig+0x110>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d003      	beq.n	800b132 <TIM_OC3_SetConfig+0x72>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4a29      	ldr	r2, [pc, #164]	@ (800b1d4 <TIM_OC3_SetConfig+0x114>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d10d      	bne.n	800b14e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	021b      	lsls	r3, r3, #8
 800b140:	697a      	ldr	r2, [r7, #20]
 800b142:	4313      	orrs	r3, r2
 800b144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b146:	697b      	ldr	r3, [r7, #20]
 800b148:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b14c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	4a1e      	ldr	r2, [pc, #120]	@ (800b1cc <TIM_OC3_SetConfig+0x10c>)
 800b152:	4293      	cmp	r3, r2
 800b154:	d013      	beq.n	800b17e <TIM_OC3_SetConfig+0xbe>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a1d      	ldr	r2, [pc, #116]	@ (800b1d0 <TIM_OC3_SetConfig+0x110>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	d00f      	beq.n	800b17e <TIM_OC3_SetConfig+0xbe>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	4a1d      	ldr	r2, [pc, #116]	@ (800b1d8 <TIM_OC3_SetConfig+0x118>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d00b      	beq.n	800b17e <TIM_OC3_SetConfig+0xbe>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4a1c      	ldr	r2, [pc, #112]	@ (800b1dc <TIM_OC3_SetConfig+0x11c>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d007      	beq.n	800b17e <TIM_OC3_SetConfig+0xbe>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	4a1b      	ldr	r2, [pc, #108]	@ (800b1e0 <TIM_OC3_SetConfig+0x120>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d003      	beq.n	800b17e <TIM_OC3_SetConfig+0xbe>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	4a16      	ldr	r2, [pc, #88]	@ (800b1d4 <TIM_OC3_SetConfig+0x114>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d113      	bne.n	800b1a6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b184:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b18c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	695b      	ldr	r3, [r3, #20]
 800b192:	011b      	lsls	r3, r3, #4
 800b194:	693a      	ldr	r2, [r7, #16]
 800b196:	4313      	orrs	r3, r2
 800b198:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	699b      	ldr	r3, [r3, #24]
 800b19e:	011b      	lsls	r3, r3, #4
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	693a      	ldr	r2, [r7, #16]
 800b1aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	68fa      	ldr	r2, [r7, #12]
 800b1b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	685a      	ldr	r2, [r3, #4]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	621a      	str	r2, [r3, #32]
}
 800b1c0:	bf00      	nop
 800b1c2:	371c      	adds	r7, #28
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr
 800b1cc:	40012c00 	.word	0x40012c00
 800b1d0:	40013400 	.word	0x40013400
 800b1d4:	40015000 	.word	0x40015000
 800b1d8:	40014000 	.word	0x40014000
 800b1dc:	40014400 	.word	0x40014400
 800b1e0:	40014800 	.word	0x40014800

0800b1e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1e4:	b480      	push	{r7}
 800b1e6:	b087      	sub	sp, #28
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a1b      	ldr	r3, [r3, #32]
 800b1f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6a1b      	ldr	r3, [r3, #32]
 800b1f8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	69db      	ldr	r3, [r3, #28]
 800b20a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b21e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	021b      	lsls	r3, r3, #8
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	4313      	orrs	r3, r2
 800b22a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	031b      	lsls	r3, r3, #12
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	4313      	orrs	r3, r2
 800b23e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a2c      	ldr	r2, [pc, #176]	@ (800b2f4 <TIM_OC4_SetConfig+0x110>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d007      	beq.n	800b258 <TIM_OC4_SetConfig+0x74>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a2b      	ldr	r2, [pc, #172]	@ (800b2f8 <TIM_OC4_SetConfig+0x114>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d003      	beq.n	800b258 <TIM_OC4_SetConfig+0x74>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a2a      	ldr	r2, [pc, #168]	@ (800b2fc <TIM_OC4_SetConfig+0x118>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d10d      	bne.n	800b274 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b25e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b260:	683b      	ldr	r3, [r7, #0]
 800b262:	68db      	ldr	r3, [r3, #12]
 800b264:	031b      	lsls	r3, r3, #12
 800b266:	697a      	ldr	r2, [r7, #20]
 800b268:	4313      	orrs	r3, r2
 800b26a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b272:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a1f      	ldr	r2, [pc, #124]	@ (800b2f4 <TIM_OC4_SetConfig+0x110>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d013      	beq.n	800b2a4 <TIM_OC4_SetConfig+0xc0>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a1e      	ldr	r2, [pc, #120]	@ (800b2f8 <TIM_OC4_SetConfig+0x114>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d00f      	beq.n	800b2a4 <TIM_OC4_SetConfig+0xc0>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a1e      	ldr	r2, [pc, #120]	@ (800b300 <TIM_OC4_SetConfig+0x11c>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d00b      	beq.n	800b2a4 <TIM_OC4_SetConfig+0xc0>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4a1d      	ldr	r2, [pc, #116]	@ (800b304 <TIM_OC4_SetConfig+0x120>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d007      	beq.n	800b2a4 <TIM_OC4_SetConfig+0xc0>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	4a1c      	ldr	r2, [pc, #112]	@ (800b308 <TIM_OC4_SetConfig+0x124>)
 800b298:	4293      	cmp	r3, r2
 800b29a:	d003      	beq.n	800b2a4 <TIM_OC4_SetConfig+0xc0>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4a17      	ldr	r2, [pc, #92]	@ (800b2fc <TIM_OC4_SetConfig+0x118>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d113      	bne.n	800b2cc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b2aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b2b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	019b      	lsls	r3, r3, #6
 800b2ba:	693a      	ldr	r2, [r7, #16]
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	699b      	ldr	r3, [r3, #24]
 800b2c4:	019b      	lsls	r3, r3, #6
 800b2c6:	693a      	ldr	r2, [r7, #16]
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	693a      	ldr	r2, [r7, #16]
 800b2d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	68fa      	ldr	r2, [r7, #12]
 800b2d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	685a      	ldr	r2, [r3, #4]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	697a      	ldr	r2, [r7, #20]
 800b2e4:	621a      	str	r2, [r3, #32]
}
 800b2e6:	bf00      	nop
 800b2e8:	371c      	adds	r7, #28
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop
 800b2f4:	40012c00 	.word	0x40012c00
 800b2f8:	40013400 	.word	0x40013400
 800b2fc:	40015000 	.word	0x40015000
 800b300:	40014000 	.word	0x40014000
 800b304:	40014400 	.word	0x40014400
 800b308:	40014800 	.word	0x40014800

0800b30c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b087      	sub	sp, #28
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6a1b      	ldr	r3, [r3, #32]
 800b31a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6a1b      	ldr	r3, [r3, #32]
 800b320:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b33a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b33e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	4313      	orrs	r3, r2
 800b348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b350:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	041b      	lsls	r3, r3, #16
 800b358:	693a      	ldr	r2, [r7, #16]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a19      	ldr	r2, [pc, #100]	@ (800b3c8 <TIM_OC5_SetConfig+0xbc>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d013      	beq.n	800b38e <TIM_OC5_SetConfig+0x82>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a18      	ldr	r2, [pc, #96]	@ (800b3cc <TIM_OC5_SetConfig+0xc0>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d00f      	beq.n	800b38e <TIM_OC5_SetConfig+0x82>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a17      	ldr	r2, [pc, #92]	@ (800b3d0 <TIM_OC5_SetConfig+0xc4>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d00b      	beq.n	800b38e <TIM_OC5_SetConfig+0x82>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a16      	ldr	r2, [pc, #88]	@ (800b3d4 <TIM_OC5_SetConfig+0xc8>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d007      	beq.n	800b38e <TIM_OC5_SetConfig+0x82>
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a15      	ldr	r2, [pc, #84]	@ (800b3d8 <TIM_OC5_SetConfig+0xcc>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d003      	beq.n	800b38e <TIM_OC5_SetConfig+0x82>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a14      	ldr	r2, [pc, #80]	@ (800b3dc <TIM_OC5_SetConfig+0xd0>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d109      	bne.n	800b3a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b394:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	021b      	lsls	r3, r3, #8
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	685a      	ldr	r2, [r3, #4]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	621a      	str	r2, [r3, #32]
}
 800b3bc:	bf00      	nop
 800b3be:	371c      	adds	r7, #28
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr
 800b3c8:	40012c00 	.word	0x40012c00
 800b3cc:	40013400 	.word	0x40013400
 800b3d0:	40014000 	.word	0x40014000
 800b3d4:	40014400 	.word	0x40014400
 800b3d8:	40014800 	.word	0x40014800
 800b3dc:	40015000 	.word	0x40015000

0800b3e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b087      	sub	sp, #28
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a1b      	ldr	r3, [r3, #32]
 800b3ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6a1b      	ldr	r3, [r3, #32]
 800b3f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b40e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	021b      	lsls	r3, r3, #8
 800b41a:	68fa      	ldr	r2, [r7, #12]
 800b41c:	4313      	orrs	r3, r2
 800b41e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	689b      	ldr	r3, [r3, #8]
 800b42c:	051b      	lsls	r3, r3, #20
 800b42e:	693a      	ldr	r2, [r7, #16]
 800b430:	4313      	orrs	r3, r2
 800b432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	4a1a      	ldr	r2, [pc, #104]	@ (800b4a0 <TIM_OC6_SetConfig+0xc0>)
 800b438:	4293      	cmp	r3, r2
 800b43a:	d013      	beq.n	800b464 <TIM_OC6_SetConfig+0x84>
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	4a19      	ldr	r2, [pc, #100]	@ (800b4a4 <TIM_OC6_SetConfig+0xc4>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d00f      	beq.n	800b464 <TIM_OC6_SetConfig+0x84>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4a18      	ldr	r2, [pc, #96]	@ (800b4a8 <TIM_OC6_SetConfig+0xc8>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d00b      	beq.n	800b464 <TIM_OC6_SetConfig+0x84>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a17      	ldr	r2, [pc, #92]	@ (800b4ac <TIM_OC6_SetConfig+0xcc>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d007      	beq.n	800b464 <TIM_OC6_SetConfig+0x84>
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4a16      	ldr	r2, [pc, #88]	@ (800b4b0 <TIM_OC6_SetConfig+0xd0>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d003      	beq.n	800b464 <TIM_OC6_SetConfig+0x84>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	4a15      	ldr	r2, [pc, #84]	@ (800b4b4 <TIM_OC6_SetConfig+0xd4>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d109      	bne.n	800b478 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b46a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	695b      	ldr	r3, [r3, #20]
 800b470:	029b      	lsls	r3, r3, #10
 800b472:	697a      	ldr	r2, [r7, #20]
 800b474:	4313      	orrs	r3, r2
 800b476:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	697a      	ldr	r2, [r7, #20]
 800b47c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	685a      	ldr	r2, [r3, #4]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	621a      	str	r2, [r3, #32]
}
 800b492:	bf00      	nop
 800b494:	371c      	adds	r7, #28
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr
 800b49e:	bf00      	nop
 800b4a0:	40012c00 	.word	0x40012c00
 800b4a4:	40013400 	.word	0x40013400
 800b4a8:	40014000 	.word	0x40014000
 800b4ac:	40014400 	.word	0x40014400
 800b4b0:	40014800 	.word	0x40014800
 800b4b4:	40015000 	.word	0x40015000

0800b4b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	60f8      	str	r0, [r7, #12]
 800b4c0:	60b9      	str	r1, [r7, #8]
 800b4c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	6a1b      	ldr	r3, [r3, #32]
 800b4c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6a1b      	ldr	r3, [r3, #32]
 800b4ce:	f023 0201 	bic.w	r2, r3, #1
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	699b      	ldr	r3, [r3, #24]
 800b4da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b4e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	011b      	lsls	r3, r3, #4
 800b4e8:	693a      	ldr	r2, [r7, #16]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f023 030a 	bic.w	r3, r3, #10
 800b4f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b4f6:	697a      	ldr	r2, [r7, #20]
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	4313      	orrs	r3, r2
 800b4fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	693a      	ldr	r2, [r7, #16]
 800b502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	697a      	ldr	r2, [r7, #20]
 800b508:	621a      	str	r2, [r3, #32]
}
 800b50a:	bf00      	nop
 800b50c:	371c      	adds	r7, #28
 800b50e:	46bd      	mov	sp, r7
 800b510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b514:	4770      	bx	lr

0800b516 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b516:	b480      	push	{r7}
 800b518:	b087      	sub	sp, #28
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	60f8      	str	r0, [r7, #12]
 800b51e:	60b9      	str	r1, [r7, #8]
 800b520:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6a1b      	ldr	r3, [r3, #32]
 800b52c:	f023 0210 	bic.w	r2, r3, #16
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	699b      	ldr	r3, [r3, #24]
 800b538:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b540:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	031b      	lsls	r3, r3, #12
 800b546:	693a      	ldr	r2, [r7, #16]
 800b548:	4313      	orrs	r3, r2
 800b54a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b552:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	011b      	lsls	r3, r3, #4
 800b558:	697a      	ldr	r2, [r7, #20]
 800b55a:	4313      	orrs	r3, r2
 800b55c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	697a      	ldr	r2, [r7, #20]
 800b568:	621a      	str	r2, [r3, #32]
}
 800b56a:	bf00      	nop
 800b56c:	371c      	adds	r7, #28
 800b56e:	46bd      	mov	sp, r7
 800b570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b574:	4770      	bx	lr

0800b576 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b576:	b480      	push	{r7}
 800b578:	b085      	sub	sp, #20
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	689b      	ldr	r3, [r3, #8]
 800b584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b58c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b592:	683a      	ldr	r2, [r7, #0]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	4313      	orrs	r3, r2
 800b598:	f043 0307 	orr.w	r3, r3, #7
 800b59c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	609a      	str	r2, [r3, #8]
}
 800b5a4:	bf00      	nop
 800b5a6:	3714      	adds	r7, #20
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr

0800b5b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b087      	sub	sp, #28
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	60f8      	str	r0, [r7, #12]
 800b5b8:	60b9      	str	r1, [r7, #8]
 800b5ba:	607a      	str	r2, [r7, #4]
 800b5bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	689b      	ldr	r3, [r3, #8]
 800b5c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b5ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	021a      	lsls	r2, r3, #8
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	431a      	orrs	r2, r3
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	697a      	ldr	r2, [r7, #20]
 800b5e2:	609a      	str	r2, [r3, #8]
}
 800b5e4:	bf00      	nop
 800b5e6:	371c      	adds	r7, #28
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b087      	sub	sp, #28
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	f003 031f 	and.w	r3, r3, #31
 800b602:	2201      	movs	r2, #1
 800b604:	fa02 f303 	lsl.w	r3, r2, r3
 800b608:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6a1a      	ldr	r2, [r3, #32]
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	43db      	mvns	r3, r3
 800b612:	401a      	ands	r2, r3
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6a1a      	ldr	r2, [r3, #32]
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	f003 031f 	and.w	r3, r3, #31
 800b622:	6879      	ldr	r1, [r7, #4]
 800b624:	fa01 f303 	lsl.w	r3, r1, r3
 800b628:	431a      	orrs	r2, r3
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	621a      	str	r2, [r3, #32]
}
 800b62e:	bf00      	nop
 800b630:	371c      	adds	r7, #28
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
	...

0800b63c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b63c:	b480      	push	{r7}
 800b63e:	b085      	sub	sp, #20
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
 800b644:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d101      	bne.n	800b654 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b650:	2302      	movs	r3, #2
 800b652:	e074      	b.n	800b73e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2202      	movs	r2, #2
 800b660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	689b      	ldr	r3, [r3, #8]
 800b672:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a34      	ldr	r2, [pc, #208]	@ (800b74c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d009      	beq.n	800b692 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a33      	ldr	r2, [pc, #204]	@ (800b750 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b684:	4293      	cmp	r3, r2
 800b686:	d004      	beq.n	800b692 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	4a31      	ldr	r2, [pc, #196]	@ (800b754 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d108      	bne.n	800b6a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b698:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	68fa      	ldr	r2, [r7, #12]
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b6aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a21      	ldr	r2, [pc, #132]	@ (800b74c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d022      	beq.n	800b712 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6d4:	d01d      	beq.n	800b712 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a1f      	ldr	r2, [pc, #124]	@ (800b758 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d018      	beq.n	800b712 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a1d      	ldr	r2, [pc, #116]	@ (800b75c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d013      	beq.n	800b712 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a1c      	ldr	r2, [pc, #112]	@ (800b760 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d00e      	beq.n	800b712 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a15      	ldr	r2, [pc, #84]	@ (800b750 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d009      	beq.n	800b712 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a18      	ldr	r2, [pc, #96]	@ (800b764 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d004      	beq.n	800b712 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	4a11      	ldr	r2, [pc, #68]	@ (800b754 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d10c      	bne.n	800b72c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b718:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	4313      	orrs	r3, r2
 800b722:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	68ba      	ldr	r2, [r7, #8]
 800b72a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2200      	movs	r2, #0
 800b738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3714      	adds	r7, #20
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	40012c00 	.word	0x40012c00
 800b750:	40013400 	.word	0x40013400
 800b754:	40015000 	.word	0x40015000
 800b758:	40000400 	.word	0x40000400
 800b75c:	40000800 	.word	0x40000800
 800b760:	40000c00 	.word	0x40000c00
 800b764:	40014000 	.word	0x40014000

0800b768 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
 800b770:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b772:	2300      	movs	r3, #0
 800b774:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d101      	bne.n	800b784 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b780:	2302      	movs	r3, #2
 800b782:	e078      	b.n	800b876 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	4313      	orrs	r3, r2
 800b798:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b7d8:	683b      	ldr	r3, [r7, #0]
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	041b      	lsls	r3, r3, #16
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	69db      	ldr	r3, [r3, #28]
 800b808:	4313      	orrs	r3, r2
 800b80a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4a1c      	ldr	r2, [pc, #112]	@ (800b884 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d009      	beq.n	800b82a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	4a1b      	ldr	r2, [pc, #108]	@ (800b888 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b81c:	4293      	cmp	r3, r2
 800b81e:	d004      	beq.n	800b82a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4a19      	ldr	r2, [pc, #100]	@ (800b88c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d11c      	bne.n	800b864 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b834:	051b      	lsls	r3, r3, #20
 800b836:	4313      	orrs	r3, r2
 800b838:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	6a1b      	ldr	r3, [r3, #32]
 800b844:	4313      	orrs	r3, r2
 800b846:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b852:	4313      	orrs	r3, r2
 800b854:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b860:	4313      	orrs	r3, r2
 800b862:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	68fa      	ldr	r2, [r7, #12]
 800b86a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3714      	adds	r7, #20
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	40012c00 	.word	0x40012c00
 800b888:	40013400 	.word	0x40013400
 800b88c:	40015000 	.word	0x40015000

0800b890 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b898:	bf00      	nop
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b8ac:	bf00      	nop
 800b8ae:	370c      	adds	r7, #12
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b083      	sub	sp, #12
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b8c0:	bf00      	nop
 800b8c2:	370c      	adds	r7, #12
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b083      	sub	sp, #12
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b8d4:	bf00      	nop
 800b8d6:	370c      	adds	r7, #12
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8de:	4770      	bx	lr

0800b8e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b8e8:	bf00      	nop
 800b8ea:	370c      	adds	r7, #12
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr

0800b8f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b8fc:	bf00      	nop
 800b8fe:	370c      	adds	r7, #12
 800b900:	46bd      	mov	sp, r7
 800b902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b906:	4770      	bx	lr

0800b908 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b908:	b480      	push	{r7}
 800b90a:	b083      	sub	sp, #12
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b910:	bf00      	nop
 800b912:	370c      	adds	r7, #12
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e042      	b.n	800b9b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b934:	2b00      	cmp	r3, #0
 800b936:	d106      	bne.n	800b946 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b940:	6878      	ldr	r0, [r7, #4]
 800b942:	f7f8 fd0b 	bl	800435c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2224      	movs	r2, #36	@ 0x24
 800b94a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	681a      	ldr	r2, [r3, #0]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f022 0201 	bic.w	r2, r2, #1
 800b95c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b962:	2b00      	cmp	r3, #0
 800b964:	d002      	beq.n	800b96c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 fb24 	bl	800bfb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f000 f825 	bl	800b9bc <UART_SetConfig>
 800b972:	4603      	mov	r3, r0
 800b974:	2b01      	cmp	r3, #1
 800b976:	d101      	bne.n	800b97c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b978:	2301      	movs	r3, #1
 800b97a:	e01b      	b.n	800b9b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	685a      	ldr	r2, [r3, #4]
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b98a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	689a      	ldr	r2, [r3, #8]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b99a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f042 0201 	orr.w	r2, r2, #1
 800b9aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fba3 	bl	800c0f8 <UART_CheckIdleState>
 800b9b2:	4603      	mov	r3, r0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b9c0:	b08c      	sub	sp, #48	@ 0x30
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	689a      	ldr	r2, [r3, #8]
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	691b      	ldr	r3, [r3, #16]
 800b9d4:	431a      	orrs	r2, r3
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	695b      	ldr	r3, [r3, #20]
 800b9da:	431a      	orrs	r2, r3
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	69db      	ldr	r3, [r3, #28]
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	4baa      	ldr	r3, [pc, #680]	@ (800bc94 <UART_SetConfig+0x2d8>)
 800b9ec:	4013      	ands	r3, r2
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	6812      	ldr	r2, [r2, #0]
 800b9f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9f4:	430b      	orrs	r3, r1
 800b9f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	68da      	ldr	r2, [r3, #12]
 800ba06:	697b      	ldr	r3, [r7, #20]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	430a      	orrs	r2, r1
 800ba0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	699b      	ldr	r3, [r3, #24]
 800ba12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a9f      	ldr	r2, [pc, #636]	@ (800bc98 <UART_SetConfig+0x2dc>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d004      	beq.n	800ba28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	6a1b      	ldr	r3, [r3, #32]
 800ba22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba24:	4313      	orrs	r3, r2
 800ba26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ba32:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	6812      	ldr	r2, [r2, #0]
 800ba3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba3c:	430b      	orrs	r3, r1
 800ba3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba46:	f023 010f 	bic.w	r1, r3, #15
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	430a      	orrs	r2, r1
 800ba54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a90      	ldr	r2, [pc, #576]	@ (800bc9c <UART_SetConfig+0x2e0>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d125      	bne.n	800baac <UART_SetConfig+0xf0>
 800ba60:	4b8f      	ldr	r3, [pc, #572]	@ (800bca0 <UART_SetConfig+0x2e4>)
 800ba62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ba66:	f003 0303 	and.w	r3, r3, #3
 800ba6a:	2b03      	cmp	r3, #3
 800ba6c:	d81a      	bhi.n	800baa4 <UART_SetConfig+0xe8>
 800ba6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba74 <UART_SetConfig+0xb8>)
 800ba70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba74:	0800ba85 	.word	0x0800ba85
 800ba78:	0800ba95 	.word	0x0800ba95
 800ba7c:	0800ba8d 	.word	0x0800ba8d
 800ba80:	0800ba9d 	.word	0x0800ba9d
 800ba84:	2301      	movs	r3, #1
 800ba86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba8a:	e116      	b.n	800bcba <UART_SetConfig+0x2fe>
 800ba8c:	2302      	movs	r3, #2
 800ba8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba92:	e112      	b.n	800bcba <UART_SetConfig+0x2fe>
 800ba94:	2304      	movs	r3, #4
 800ba96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ba9a:	e10e      	b.n	800bcba <UART_SetConfig+0x2fe>
 800ba9c:	2308      	movs	r3, #8
 800ba9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baa2:	e10a      	b.n	800bcba <UART_SetConfig+0x2fe>
 800baa4:	2310      	movs	r3, #16
 800baa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800baaa:	e106      	b.n	800bcba <UART_SetConfig+0x2fe>
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4a7c      	ldr	r2, [pc, #496]	@ (800bca4 <UART_SetConfig+0x2e8>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d138      	bne.n	800bb28 <UART_SetConfig+0x16c>
 800bab6:	4b7a      	ldr	r3, [pc, #488]	@ (800bca0 <UART_SetConfig+0x2e4>)
 800bab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800babc:	f003 030c 	and.w	r3, r3, #12
 800bac0:	2b0c      	cmp	r3, #12
 800bac2:	d82d      	bhi.n	800bb20 <UART_SetConfig+0x164>
 800bac4:	a201      	add	r2, pc, #4	@ (adr r2, 800bacc <UART_SetConfig+0x110>)
 800bac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baca:	bf00      	nop
 800bacc:	0800bb01 	.word	0x0800bb01
 800bad0:	0800bb21 	.word	0x0800bb21
 800bad4:	0800bb21 	.word	0x0800bb21
 800bad8:	0800bb21 	.word	0x0800bb21
 800badc:	0800bb11 	.word	0x0800bb11
 800bae0:	0800bb21 	.word	0x0800bb21
 800bae4:	0800bb21 	.word	0x0800bb21
 800bae8:	0800bb21 	.word	0x0800bb21
 800baec:	0800bb09 	.word	0x0800bb09
 800baf0:	0800bb21 	.word	0x0800bb21
 800baf4:	0800bb21 	.word	0x0800bb21
 800baf8:	0800bb21 	.word	0x0800bb21
 800bafc:	0800bb19 	.word	0x0800bb19
 800bb00:	2300      	movs	r3, #0
 800bb02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb06:	e0d8      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bb08:	2302      	movs	r3, #2
 800bb0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb0e:	e0d4      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bb10:	2304      	movs	r3, #4
 800bb12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb16:	e0d0      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bb18:	2308      	movs	r3, #8
 800bb1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb1e:	e0cc      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bb20:	2310      	movs	r3, #16
 800bb22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb26:	e0c8      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bb28:	697b      	ldr	r3, [r7, #20]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4a5e      	ldr	r2, [pc, #376]	@ (800bca8 <UART_SetConfig+0x2ec>)
 800bb2e:	4293      	cmp	r3, r2
 800bb30:	d125      	bne.n	800bb7e <UART_SetConfig+0x1c2>
 800bb32:	4b5b      	ldr	r3, [pc, #364]	@ (800bca0 <UART_SetConfig+0x2e4>)
 800bb34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb38:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800bb3c:	2b30      	cmp	r3, #48	@ 0x30
 800bb3e:	d016      	beq.n	800bb6e <UART_SetConfig+0x1b2>
 800bb40:	2b30      	cmp	r3, #48	@ 0x30
 800bb42:	d818      	bhi.n	800bb76 <UART_SetConfig+0x1ba>
 800bb44:	2b20      	cmp	r3, #32
 800bb46:	d00a      	beq.n	800bb5e <UART_SetConfig+0x1a2>
 800bb48:	2b20      	cmp	r3, #32
 800bb4a:	d814      	bhi.n	800bb76 <UART_SetConfig+0x1ba>
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d002      	beq.n	800bb56 <UART_SetConfig+0x19a>
 800bb50:	2b10      	cmp	r3, #16
 800bb52:	d008      	beq.n	800bb66 <UART_SetConfig+0x1aa>
 800bb54:	e00f      	b.n	800bb76 <UART_SetConfig+0x1ba>
 800bb56:	2300      	movs	r3, #0
 800bb58:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb5c:	e0ad      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bb5e:	2302      	movs	r3, #2
 800bb60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb64:	e0a9      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bb66:	2304      	movs	r3, #4
 800bb68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb6c:	e0a5      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bb6e:	2308      	movs	r3, #8
 800bb70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb74:	e0a1      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bb76:	2310      	movs	r3, #16
 800bb78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bb7c:	e09d      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a4a      	ldr	r2, [pc, #296]	@ (800bcac <UART_SetConfig+0x2f0>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d125      	bne.n	800bbd4 <UART_SetConfig+0x218>
 800bb88:	4b45      	ldr	r3, [pc, #276]	@ (800bca0 <UART_SetConfig+0x2e4>)
 800bb8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb8e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800bb92:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb94:	d016      	beq.n	800bbc4 <UART_SetConfig+0x208>
 800bb96:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb98:	d818      	bhi.n	800bbcc <UART_SetConfig+0x210>
 800bb9a:	2b80      	cmp	r3, #128	@ 0x80
 800bb9c:	d00a      	beq.n	800bbb4 <UART_SetConfig+0x1f8>
 800bb9e:	2b80      	cmp	r3, #128	@ 0x80
 800bba0:	d814      	bhi.n	800bbcc <UART_SetConfig+0x210>
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d002      	beq.n	800bbac <UART_SetConfig+0x1f0>
 800bba6:	2b40      	cmp	r3, #64	@ 0x40
 800bba8:	d008      	beq.n	800bbbc <UART_SetConfig+0x200>
 800bbaa:	e00f      	b.n	800bbcc <UART_SetConfig+0x210>
 800bbac:	2300      	movs	r3, #0
 800bbae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbb2:	e082      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bbb4:	2302      	movs	r3, #2
 800bbb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbba:	e07e      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bbbc:	2304      	movs	r3, #4
 800bbbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbc2:	e07a      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bbc4:	2308      	movs	r3, #8
 800bbc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbca:	e076      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bbcc:	2310      	movs	r3, #16
 800bbce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bbd2:	e072      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4a35      	ldr	r2, [pc, #212]	@ (800bcb0 <UART_SetConfig+0x2f4>)
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d12a      	bne.n	800bc34 <UART_SetConfig+0x278>
 800bbde:	4b30      	ldr	r3, [pc, #192]	@ (800bca0 <UART_SetConfig+0x2e4>)
 800bbe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbe4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bbe8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bbec:	d01a      	beq.n	800bc24 <UART_SetConfig+0x268>
 800bbee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bbf2:	d81b      	bhi.n	800bc2c <UART_SetConfig+0x270>
 800bbf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbf8:	d00c      	beq.n	800bc14 <UART_SetConfig+0x258>
 800bbfa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbfe:	d815      	bhi.n	800bc2c <UART_SetConfig+0x270>
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d003      	beq.n	800bc0c <UART_SetConfig+0x250>
 800bc04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bc08:	d008      	beq.n	800bc1c <UART_SetConfig+0x260>
 800bc0a:	e00f      	b.n	800bc2c <UART_SetConfig+0x270>
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc12:	e052      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bc14:	2302      	movs	r3, #2
 800bc16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc1a:	e04e      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bc1c:	2304      	movs	r3, #4
 800bc1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc22:	e04a      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bc24:	2308      	movs	r3, #8
 800bc26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc2a:	e046      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bc2c:	2310      	movs	r3, #16
 800bc2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc32:	e042      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	4a17      	ldr	r2, [pc, #92]	@ (800bc98 <UART_SetConfig+0x2dc>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d13a      	bne.n	800bcb4 <UART_SetConfig+0x2f8>
 800bc3e:	4b18      	ldr	r3, [pc, #96]	@ (800bca0 <UART_SetConfig+0x2e4>)
 800bc40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc44:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800bc48:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bc4c:	d01a      	beq.n	800bc84 <UART_SetConfig+0x2c8>
 800bc4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800bc52:	d81b      	bhi.n	800bc8c <UART_SetConfig+0x2d0>
 800bc54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc58:	d00c      	beq.n	800bc74 <UART_SetConfig+0x2b8>
 800bc5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bc5e:	d815      	bhi.n	800bc8c <UART_SetConfig+0x2d0>
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d003      	beq.n	800bc6c <UART_SetConfig+0x2b0>
 800bc64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bc68:	d008      	beq.n	800bc7c <UART_SetConfig+0x2c0>
 800bc6a:	e00f      	b.n	800bc8c <UART_SetConfig+0x2d0>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc72:	e022      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bc74:	2302      	movs	r3, #2
 800bc76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc7a:	e01e      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bc7c:	2304      	movs	r3, #4
 800bc7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc82:	e01a      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bc84:	2308      	movs	r3, #8
 800bc86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc8a:	e016      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bc8c:	2310      	movs	r3, #16
 800bc8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800bc92:	e012      	b.n	800bcba <UART_SetConfig+0x2fe>
 800bc94:	cfff69f3 	.word	0xcfff69f3
 800bc98:	40008000 	.word	0x40008000
 800bc9c:	40013800 	.word	0x40013800
 800bca0:	40021000 	.word	0x40021000
 800bca4:	40004400 	.word	0x40004400
 800bca8:	40004800 	.word	0x40004800
 800bcac:	40004c00 	.word	0x40004c00
 800bcb0:	40005000 	.word	0x40005000
 800bcb4:	2310      	movs	r3, #16
 800bcb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4aae      	ldr	r2, [pc, #696]	@ (800bf78 <UART_SetConfig+0x5bc>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	f040 8097 	bne.w	800bdf4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bcc6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bcca:	2b08      	cmp	r3, #8
 800bccc:	d823      	bhi.n	800bd16 <UART_SetConfig+0x35a>
 800bcce:	a201      	add	r2, pc, #4	@ (adr r2, 800bcd4 <UART_SetConfig+0x318>)
 800bcd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcd4:	0800bcf9 	.word	0x0800bcf9
 800bcd8:	0800bd17 	.word	0x0800bd17
 800bcdc:	0800bd01 	.word	0x0800bd01
 800bce0:	0800bd17 	.word	0x0800bd17
 800bce4:	0800bd07 	.word	0x0800bd07
 800bce8:	0800bd17 	.word	0x0800bd17
 800bcec:	0800bd17 	.word	0x0800bd17
 800bcf0:	0800bd17 	.word	0x0800bd17
 800bcf4:	0800bd0f 	.word	0x0800bd0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bcf8:	f7fd fe2a 	bl	8009950 <HAL_RCC_GetPCLK1Freq>
 800bcfc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bcfe:	e010      	b.n	800bd22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd00:	4b9e      	ldr	r3, [pc, #632]	@ (800bf7c <UART_SetConfig+0x5c0>)
 800bd02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd04:	e00d      	b.n	800bd22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd06:	f7fd fdb5 	bl	8009874 <HAL_RCC_GetSysClockFreq>
 800bd0a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bd0c:	e009      	b.n	800bd22 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bd12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bd14:	e005      	b.n	800bd22 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800bd16:	2300      	movs	r3, #0
 800bd18:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bd20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bd22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f000 8130 	beq.w	800bf8a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd2e:	4a94      	ldr	r2, [pc, #592]	@ (800bf80 <UART_SetConfig+0x5c4>)
 800bd30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd34:	461a      	mov	r2, r3
 800bd36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd38:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd3c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	685a      	ldr	r2, [r3, #4]
 800bd42:	4613      	mov	r3, r2
 800bd44:	005b      	lsls	r3, r3, #1
 800bd46:	4413      	add	r3, r2
 800bd48:	69ba      	ldr	r2, [r7, #24]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d305      	bcc.n	800bd5a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd54:	69ba      	ldr	r2, [r7, #24]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d903      	bls.n	800bd62 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bd60:	e113      	b.n	800bf8a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd64:	2200      	movs	r2, #0
 800bd66:	60bb      	str	r3, [r7, #8]
 800bd68:	60fa      	str	r2, [r7, #12]
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd6e:	4a84      	ldr	r2, [pc, #528]	@ (800bf80 <UART_SetConfig+0x5c4>)
 800bd70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	2200      	movs	r2, #0
 800bd78:	603b      	str	r3, [r7, #0]
 800bd7a:	607a      	str	r2, [r7, #4]
 800bd7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bd84:	f7f4 ffa8 	bl	8000cd8 <__aeabi_uldivmod>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	4619      	mov	r1, r3
 800bd90:	f04f 0200 	mov.w	r2, #0
 800bd94:	f04f 0300 	mov.w	r3, #0
 800bd98:	020b      	lsls	r3, r1, #8
 800bd9a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bd9e:	0202      	lsls	r2, r0, #8
 800bda0:	6979      	ldr	r1, [r7, #20]
 800bda2:	6849      	ldr	r1, [r1, #4]
 800bda4:	0849      	lsrs	r1, r1, #1
 800bda6:	2000      	movs	r0, #0
 800bda8:	460c      	mov	r4, r1
 800bdaa:	4605      	mov	r5, r0
 800bdac:	eb12 0804 	adds.w	r8, r2, r4
 800bdb0:	eb43 0905 	adc.w	r9, r3, r5
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	469a      	mov	sl, r3
 800bdbc:	4693      	mov	fp, r2
 800bdbe:	4652      	mov	r2, sl
 800bdc0:	465b      	mov	r3, fp
 800bdc2:	4640      	mov	r0, r8
 800bdc4:	4649      	mov	r1, r9
 800bdc6:	f7f4 ff87 	bl	8000cd8 <__aeabi_uldivmod>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	460b      	mov	r3, r1
 800bdce:	4613      	mov	r3, r2
 800bdd0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bdd2:	6a3b      	ldr	r3, [r7, #32]
 800bdd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bdd8:	d308      	bcc.n	800bdec <UART_SetConfig+0x430>
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bde0:	d204      	bcs.n	800bdec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	6a3a      	ldr	r2, [r7, #32]
 800bde8:	60da      	str	r2, [r3, #12]
 800bdea:	e0ce      	b.n	800bf8a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800bdec:	2301      	movs	r3, #1
 800bdee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800bdf2:	e0ca      	b.n	800bf8a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bdf4:	697b      	ldr	r3, [r7, #20]
 800bdf6:	69db      	ldr	r3, [r3, #28]
 800bdf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800bdfc:	d166      	bne.n	800becc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800bdfe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800be02:	2b08      	cmp	r3, #8
 800be04:	d827      	bhi.n	800be56 <UART_SetConfig+0x49a>
 800be06:	a201      	add	r2, pc, #4	@ (adr r2, 800be0c <UART_SetConfig+0x450>)
 800be08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be0c:	0800be31 	.word	0x0800be31
 800be10:	0800be39 	.word	0x0800be39
 800be14:	0800be41 	.word	0x0800be41
 800be18:	0800be57 	.word	0x0800be57
 800be1c:	0800be47 	.word	0x0800be47
 800be20:	0800be57 	.word	0x0800be57
 800be24:	0800be57 	.word	0x0800be57
 800be28:	0800be57 	.word	0x0800be57
 800be2c:	0800be4f 	.word	0x0800be4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be30:	f7fd fd8e 	bl	8009950 <HAL_RCC_GetPCLK1Freq>
 800be34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800be36:	e014      	b.n	800be62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be38:	f7fd fda0 	bl	800997c <HAL_RCC_GetPCLK2Freq>
 800be3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800be3e:	e010      	b.n	800be62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800be40:	4b4e      	ldr	r3, [pc, #312]	@ (800bf7c <UART_SetConfig+0x5c0>)
 800be42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800be44:	e00d      	b.n	800be62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800be46:	f7fd fd15 	bl	8009874 <HAL_RCC_GetSysClockFreq>
 800be4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800be4c:	e009      	b.n	800be62 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800be4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800be52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800be54:	e005      	b.n	800be62 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800be56:	2300      	movs	r3, #0
 800be58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800be60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800be62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be64:	2b00      	cmp	r3, #0
 800be66:	f000 8090 	beq.w	800bf8a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be6e:	4a44      	ldr	r2, [pc, #272]	@ (800bf80 <UART_SetConfig+0x5c4>)
 800be70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be74:	461a      	mov	r2, r3
 800be76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be78:	fbb3 f3f2 	udiv	r3, r3, r2
 800be7c:	005a      	lsls	r2, r3, #1
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	685b      	ldr	r3, [r3, #4]
 800be82:	085b      	lsrs	r3, r3, #1
 800be84:	441a      	add	r2, r3
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be90:	6a3b      	ldr	r3, [r7, #32]
 800be92:	2b0f      	cmp	r3, #15
 800be94:	d916      	bls.n	800bec4 <UART_SetConfig+0x508>
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be9c:	d212      	bcs.n	800bec4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be9e:	6a3b      	ldr	r3, [r7, #32]
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	f023 030f 	bic.w	r3, r3, #15
 800bea6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bea8:	6a3b      	ldr	r3, [r7, #32]
 800beaa:	085b      	lsrs	r3, r3, #1
 800beac:	b29b      	uxth	r3, r3
 800beae:	f003 0307 	and.w	r3, r3, #7
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	8bfb      	ldrh	r3, [r7, #30]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	8bfa      	ldrh	r2, [r7, #30]
 800bec0:	60da      	str	r2, [r3, #12]
 800bec2:	e062      	b.n	800bf8a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800bec4:	2301      	movs	r3, #1
 800bec6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800beca:	e05e      	b.n	800bf8a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800becc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800bed0:	2b08      	cmp	r3, #8
 800bed2:	d828      	bhi.n	800bf26 <UART_SetConfig+0x56a>
 800bed4:	a201      	add	r2, pc, #4	@ (adr r2, 800bedc <UART_SetConfig+0x520>)
 800bed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beda:	bf00      	nop
 800bedc:	0800bf01 	.word	0x0800bf01
 800bee0:	0800bf09 	.word	0x0800bf09
 800bee4:	0800bf11 	.word	0x0800bf11
 800bee8:	0800bf27 	.word	0x0800bf27
 800beec:	0800bf17 	.word	0x0800bf17
 800bef0:	0800bf27 	.word	0x0800bf27
 800bef4:	0800bf27 	.word	0x0800bf27
 800bef8:	0800bf27 	.word	0x0800bf27
 800befc:	0800bf1f 	.word	0x0800bf1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf00:	f7fd fd26 	bl	8009950 <HAL_RCC_GetPCLK1Freq>
 800bf04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bf06:	e014      	b.n	800bf32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf08:	f7fd fd38 	bl	800997c <HAL_RCC_GetPCLK2Freq>
 800bf0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bf0e:	e010      	b.n	800bf32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf10:	4b1a      	ldr	r3, [pc, #104]	@ (800bf7c <UART_SetConfig+0x5c0>)
 800bf12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bf14:	e00d      	b.n	800bf32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf16:	f7fd fcad 	bl	8009874 <HAL_RCC_GetSysClockFreq>
 800bf1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800bf1c:	e009      	b.n	800bf32 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800bf22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800bf24:	e005      	b.n	800bf32 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800bf26:	2300      	movs	r3, #0
 800bf28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800bf30:	bf00      	nop
    }

    if (pclk != 0U)
 800bf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d028      	beq.n	800bf8a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf3c:	4a10      	ldr	r2, [pc, #64]	@ (800bf80 <UART_SetConfig+0x5c4>)
 800bf3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf42:	461a      	mov	r2, r3
 800bf44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf46:	fbb3 f2f2 	udiv	r2, r3, r2
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	085b      	lsrs	r3, r3, #1
 800bf50:	441a      	add	r2, r3
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf5a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf5c:	6a3b      	ldr	r3, [r7, #32]
 800bf5e:	2b0f      	cmp	r3, #15
 800bf60:	d910      	bls.n	800bf84 <UART_SetConfig+0x5c8>
 800bf62:	6a3b      	ldr	r3, [r7, #32]
 800bf64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf68:	d20c      	bcs.n	800bf84 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bf6a:	6a3b      	ldr	r3, [r7, #32]
 800bf6c:	b29a      	uxth	r2, r3
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	60da      	str	r2, [r3, #12]
 800bf74:	e009      	b.n	800bf8a <UART_SetConfig+0x5ce>
 800bf76:	bf00      	nop
 800bf78:	40008000 	.word	0x40008000
 800bf7c:	00f42400 	.word	0x00f42400
 800bf80:	08017180 	.word	0x08017180
      }
      else
      {
        ret = HAL_ERROR;
 800bf84:	2301      	movs	r3, #1
 800bf86:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2201      	movs	r2, #1
 800bf96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800bfa6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3730      	adds	r7, #48	@ 0x30
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800bfb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfc0:	f003 0308 	and.w	r3, r3, #8
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00a      	beq.n	800bfde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	430a      	orrs	r2, r1
 800bfdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe2:	f003 0301 	and.w	r3, r3, #1
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d00a      	beq.n	800c000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	685b      	ldr	r3, [r3, #4]
 800bff0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	430a      	orrs	r2, r1
 800bffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c004:	f003 0302 	and.w	r3, r3, #2
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d00a      	beq.n	800c022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	430a      	orrs	r2, r1
 800c020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c026:	f003 0304 	and.w	r3, r3, #4
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d00a      	beq.n	800c044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	430a      	orrs	r2, r1
 800c042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c048:	f003 0310 	and.w	r3, r3, #16
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d00a      	beq.n	800c066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	689b      	ldr	r3, [r3, #8]
 800c056:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	430a      	orrs	r2, r1
 800c064:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c06a:	f003 0320 	and.w	r3, r3, #32
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d00a      	beq.n	800c088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	689b      	ldr	r3, [r3, #8]
 800c078:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	430a      	orrs	r2, r1
 800c086:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c08c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c090:	2b00      	cmp	r3, #0
 800c092:	d01a      	beq.n	800c0ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	685b      	ldr	r3, [r3, #4]
 800c09a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	430a      	orrs	r2, r1
 800c0a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c0ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c0b2:	d10a      	bne.n	800c0ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	685b      	ldr	r3, [r3, #4]
 800c0ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	430a      	orrs	r2, r1
 800c0c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d00a      	beq.n	800c0ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	430a      	orrs	r2, r1
 800c0ea:	605a      	str	r2, [r3, #4]
  }
}
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b098      	sub	sp, #96	@ 0x60
 800c0fc:	af02      	add	r7, sp, #8
 800c0fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2200      	movs	r2, #0
 800c104:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c108:	f7f8 fb7a 	bl	8004800 <HAL_GetTick>
 800c10c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f003 0308 	and.w	r3, r3, #8
 800c118:	2b08      	cmp	r3, #8
 800c11a:	d12f      	bne.n	800c17c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c11c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c124:	2200      	movs	r2, #0
 800c126:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f88e 	bl	800c24c <UART_WaitOnFlagUntilTimeout>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d022      	beq.n	800c17c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c13e:	e853 3f00 	ldrex	r3, [r3]
 800c142:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c146:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c14a:	653b      	str	r3, [r7, #80]	@ 0x50
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	461a      	mov	r2, r3
 800c152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c154:	647b      	str	r3, [r7, #68]	@ 0x44
 800c156:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c158:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c15a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c15c:	e841 2300 	strex	r3, r2, [r1]
 800c160:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c164:	2b00      	cmp	r3, #0
 800c166:	d1e6      	bne.n	800c136 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	2220      	movs	r2, #32
 800c16c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c178:	2303      	movs	r3, #3
 800c17a:	e063      	b.n	800c244 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	f003 0304 	and.w	r3, r3, #4
 800c186:	2b04      	cmp	r3, #4
 800c188:	d149      	bne.n	800c21e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c18a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c18e:	9300      	str	r3, [sp, #0]
 800c190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c192:	2200      	movs	r2, #0
 800c194:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 f857 	bl	800c24c <UART_WaitOnFlagUntilTimeout>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d03c      	beq.n	800c21e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ac:	e853 3f00 	ldrex	r3, [r3]
 800c1b0:	623b      	str	r3, [r7, #32]
   return(result);
 800c1b2:	6a3b      	ldr	r3, [r7, #32]
 800c1b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c1b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	461a      	mov	r2, r3
 800c1c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c1c2:	633b      	str	r3, [r7, #48]	@ 0x30
 800c1c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c1c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c1ca:	e841 2300 	strex	r3, r2, [r1]
 800c1ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d1e6      	bne.n	800c1a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	3308      	adds	r3, #8
 800c1dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	e853 3f00 	ldrex	r3, [r3]
 800c1e4:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	f023 0301 	bic.w	r3, r3, #1
 800c1ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	3308      	adds	r3, #8
 800c1f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c1f6:	61fa      	str	r2, [r7, #28]
 800c1f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fa:	69b9      	ldr	r1, [r7, #24]
 800c1fc:	69fa      	ldr	r2, [r7, #28]
 800c1fe:	e841 2300 	strex	r3, r2, [r1]
 800c202:	617b      	str	r3, [r7, #20]
   return(result);
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1e5      	bne.n	800c1d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2220      	movs	r2, #32
 800c20e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c21a:	2303      	movs	r3, #3
 800c21c:	e012      	b.n	800c244 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2220      	movs	r2, #32
 800c222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2220      	movs	r2, #32
 800c22a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2200      	movs	r2, #0
 800c23e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3758      	adds	r7, #88	@ 0x58
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	603b      	str	r3, [r7, #0]
 800c258:	4613      	mov	r3, r2
 800c25a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c25c:	e04f      	b.n	800c2fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c264:	d04b      	beq.n	800c2fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c266:	f7f8 facb 	bl	8004800 <HAL_GetTick>
 800c26a:	4602      	mov	r2, r0
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	69ba      	ldr	r2, [r7, #24]
 800c272:	429a      	cmp	r2, r3
 800c274:	d302      	bcc.n	800c27c <UART_WaitOnFlagUntilTimeout+0x30>
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d101      	bne.n	800c280 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c27c:	2303      	movs	r3, #3
 800c27e:	e04e      	b.n	800c31e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f003 0304 	and.w	r3, r3, #4
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d037      	beq.n	800c2fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	2b80      	cmp	r3, #128	@ 0x80
 800c292:	d034      	beq.n	800c2fe <UART_WaitOnFlagUntilTimeout+0xb2>
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	2b40      	cmp	r3, #64	@ 0x40
 800c298:	d031      	beq.n	800c2fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	69db      	ldr	r3, [r3, #28]
 800c2a0:	f003 0308 	and.w	r3, r3, #8
 800c2a4:	2b08      	cmp	r3, #8
 800c2a6:	d110      	bne.n	800c2ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2208      	movs	r2, #8
 800c2ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f000 f838 	bl	800c326 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2208      	movs	r2, #8
 800c2ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	e029      	b.n	800c31e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	69db      	ldr	r3, [r3, #28]
 800c2d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c2d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c2d8:	d111      	bne.n	800c2fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c2e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c2e4:	68f8      	ldr	r0, [r7, #12]
 800c2e6:	f000 f81e 	bl	800c326 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	2220      	movs	r2, #32
 800c2ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c2fa:	2303      	movs	r3, #3
 800c2fc:	e00f      	b.n	800c31e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	69da      	ldr	r2, [r3, #28]
 800c304:	68bb      	ldr	r3, [r7, #8]
 800c306:	4013      	ands	r3, r2
 800c308:	68ba      	ldr	r2, [r7, #8]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	bf0c      	ite	eq
 800c30e:	2301      	moveq	r3, #1
 800c310:	2300      	movne	r3, #0
 800c312:	b2db      	uxtb	r3, r3
 800c314:	461a      	mov	r2, r3
 800c316:	79fb      	ldrb	r3, [r7, #7]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d0a0      	beq.n	800c25e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c31c:	2300      	movs	r3, #0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c326:	b480      	push	{r7}
 800c328:	b095      	sub	sp, #84	@ 0x54
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c336:	e853 3f00 	ldrex	r3, [r3]
 800c33a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c33e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c342:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	461a      	mov	r2, r3
 800c34a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c34c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c34e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c350:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c352:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c354:	e841 2300 	strex	r3, r2, [r1]
 800c358:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d1e6      	bne.n	800c32e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	3308      	adds	r3, #8
 800c366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c368:	6a3b      	ldr	r3, [r7, #32]
 800c36a:	e853 3f00 	ldrex	r3, [r3]
 800c36e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c370:	69fb      	ldr	r3, [r7, #28]
 800c372:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c376:	f023 0301 	bic.w	r3, r3, #1
 800c37a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	3308      	adds	r3, #8
 800c382:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c384:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c386:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c388:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c38a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c38c:	e841 2300 	strex	r3, r2, [r1]
 800c390:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c394:	2b00      	cmp	r3, #0
 800c396:	d1e3      	bne.n	800c360 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d118      	bne.n	800c3d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	e853 3f00 	ldrex	r3, [r3]
 800c3ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	f023 0310 	bic.w	r3, r3, #16
 800c3b4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	461a      	mov	r2, r3
 800c3bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c3be:	61bb      	str	r3, [r7, #24]
 800c3c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3c2:	6979      	ldr	r1, [r7, #20]
 800c3c4:	69ba      	ldr	r2, [r7, #24]
 800c3c6:	e841 2300 	strex	r3, r2, [r1]
 800c3ca:	613b      	str	r3, [r7, #16]
   return(result);
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d1e6      	bne.n	800c3a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2220      	movs	r2, #32
 800c3d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2200      	movs	r2, #0
 800c3de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c3e6:	bf00      	nop
 800c3e8:	3754      	adds	r7, #84	@ 0x54
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c3f2:	b480      	push	{r7}
 800c3f4:	b085      	sub	sp, #20
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c400:	2b01      	cmp	r3, #1
 800c402:	d101      	bne.n	800c408 <HAL_UARTEx_DisableFifoMode+0x16>
 800c404:	2302      	movs	r3, #2
 800c406:	e027      	b.n	800c458 <HAL_UARTEx_DisableFifoMode+0x66>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2201      	movs	r2, #1
 800c40c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2224      	movs	r2, #36	@ 0x24
 800c414:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f022 0201 	bic.w	r2, r2, #1
 800c42e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c436:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2200      	movs	r2, #0
 800c43c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68fa      	ldr	r2, [r7, #12]
 800c444:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2220      	movs	r2, #32
 800c44a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c474:	2b01      	cmp	r3, #1
 800c476:	d101      	bne.n	800c47c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c478:	2302      	movs	r3, #2
 800c47a:	e02d      	b.n	800c4d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2224      	movs	r2, #36	@ 0x24
 800c488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f022 0201 	bic.w	r2, r2, #1
 800c4a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	689b      	ldr	r3, [r3, #8]
 800c4aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	683a      	ldr	r2, [r7, #0]
 800c4b4:	430a      	orrs	r2, r1
 800c4b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 f84f 	bl	800c55c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	68fa      	ldr	r2, [r7, #12]
 800c4c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2220      	movs	r2, #32
 800c4ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c4d6:	2300      	movs	r3, #0
}
 800c4d8:	4618      	mov	r0, r3
 800c4da:	3710      	adds	r7, #16
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c4f0:	2b01      	cmp	r3, #1
 800c4f2:	d101      	bne.n	800c4f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c4f4:	2302      	movs	r3, #2
 800c4f6:	e02d      	b.n	800c554 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2224      	movs	r2, #36	@ 0x24
 800c504:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f022 0201 	bic.w	r2, r2, #1
 800c51e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	430a      	orrs	r2, r1
 800c532:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c534:	6878      	ldr	r0, [r7, #4]
 800c536:	f000 f811 	bl	800c55c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2220      	movs	r2, #32
 800c546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c552:	2300      	movs	r3, #0
}
 800c554:	4618      	mov	r0, r3
 800c556:	3710      	adds	r7, #16
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b085      	sub	sp, #20
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d108      	bne.n	800c57e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2201      	movs	r2, #1
 800c570:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2201      	movs	r2, #1
 800c578:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c57c:	e031      	b.n	800c5e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c57e:	2308      	movs	r3, #8
 800c580:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c582:	2308      	movs	r3, #8
 800c584:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	0e5b      	lsrs	r3, r3, #25
 800c58e:	b2db      	uxtb	r3, r3
 800c590:	f003 0307 	and.w	r3, r3, #7
 800c594:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	689b      	ldr	r3, [r3, #8]
 800c59c:	0f5b      	lsrs	r3, r3, #29
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	f003 0307 	and.w	r3, r3, #7
 800c5a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c5a6:	7bbb      	ldrb	r3, [r7, #14]
 800c5a8:	7b3a      	ldrb	r2, [r7, #12]
 800c5aa:	4911      	ldr	r1, [pc, #68]	@ (800c5f0 <UARTEx_SetNbDataToProcess+0x94>)
 800c5ac:	5c8a      	ldrb	r2, [r1, r2]
 800c5ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c5b2:	7b3a      	ldrb	r2, [r7, #12]
 800c5b4:	490f      	ldr	r1, [pc, #60]	@ (800c5f4 <UARTEx_SetNbDataToProcess+0x98>)
 800c5b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c5b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5bc:	b29a      	uxth	r2, r3
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c5c4:	7bfb      	ldrb	r3, [r7, #15]
 800c5c6:	7b7a      	ldrb	r2, [r7, #13]
 800c5c8:	4909      	ldr	r1, [pc, #36]	@ (800c5f0 <UARTEx_SetNbDataToProcess+0x94>)
 800c5ca:	5c8a      	ldrb	r2, [r1, r2]
 800c5cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c5d0:	7b7a      	ldrb	r2, [r7, #13]
 800c5d2:	4908      	ldr	r1, [pc, #32]	@ (800c5f4 <UARTEx_SetNbDataToProcess+0x98>)
 800c5d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c5d6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c5da:	b29a      	uxth	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c5e2:	bf00      	nop
 800c5e4:	3714      	adds	r7, #20
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
 800c5ee:	bf00      	nop
 800c5f0:	08017198 	.word	0x08017198
 800c5f4:	080171a0 	.word	0x080171a0

0800c5f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b085      	sub	sp, #20
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c608:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c60c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	b29a      	uxth	r2, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c618:	2300      	movs	r3, #0
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3714      	adds	r7, #20
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr

0800c626 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800c626:	b480      	push	{r7}
 800c628:	b085      	sub	sp, #20
 800c62a:	af00      	add	r7, sp, #0
 800c62c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800c62e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800c632:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800c63a:	b29a      	uxth	r2, r3
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	b29b      	uxth	r3, r3
 800c640:	43db      	mvns	r3, r3
 800c642:	b29b      	uxth	r3, r3
 800c644:	4013      	ands	r3, r2
 800c646:	b29a      	uxth	r2, r3
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800c64e:	2300      	movs	r3, #0
}
 800c650:	4618      	mov	r0, r3
 800c652:	3714      	adds	r7, #20
 800c654:	46bd      	mov	sp, r7
 800c656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65a:	4770      	bx	lr

0800c65c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b085      	sub	sp, #20
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	1d3b      	adds	r3, r7, #4
 800c666:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2201      	movs	r2, #1
 800c66e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2200      	movs	r2, #0
 800c676:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	2200      	movs	r2, #0
 800c67e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	2200      	movs	r2, #0
 800c686:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800c68a:	2300      	movs	r3, #0
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr

0800c698 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c698:	b480      	push	{r7}
 800c69a:	b09d      	sub	sp, #116	@ 0x74
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c6a8:	687a      	ldr	r2, [r7, #4]
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	4413      	add	r3, r2
 800c6b2:	881b      	ldrh	r3, [r3, #0]
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800c6ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6be:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	78db      	ldrb	r3, [r3, #3]
 800c6c6:	2b03      	cmp	r3, #3
 800c6c8:	d81f      	bhi.n	800c70a <USB_ActivateEndpoint+0x72>
 800c6ca:	a201      	add	r2, pc, #4	@ (adr r2, 800c6d0 <USB_ActivateEndpoint+0x38>)
 800c6cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6d0:	0800c6e1 	.word	0x0800c6e1
 800c6d4:	0800c6fd 	.word	0x0800c6fd
 800c6d8:	0800c713 	.word	0x0800c713
 800c6dc:	0800c6ef 	.word	0x0800c6ef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800c6e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c6e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c6e8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c6ec:	e012      	b.n	800c714 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c6ee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c6f2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800c6f6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c6fa:	e00b      	b.n	800c714 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c6fc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c700:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c704:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800c708:	e004      	b.n	800c714 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800c710:	e000      	b.n	800c714 <USB_ActivateEndpoint+0x7c>
      break;
 800c712:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800c714:	687a      	ldr	r2, [r7, #4]
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	441a      	add	r2, r3
 800c71e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c722:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c726:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c72a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c72e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c732:	b29b      	uxth	r3, r3
 800c734:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	4413      	add	r3, r2
 800c740:	881b      	ldrh	r3, [r3, #0]
 800c742:	b29b      	uxth	r3, r3
 800c744:	b21b      	sxth	r3, r3
 800c746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c74a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c74e:	b21a      	sxth	r2, r3
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	b21b      	sxth	r3, r3
 800c756:	4313      	orrs	r3, r2
 800c758:	b21b      	sxth	r3, r3
 800c75a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	009b      	lsls	r3, r3, #2
 800c766:	441a      	add	r2, r3
 800c768:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c76c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c770:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c778:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	7b1b      	ldrb	r3, [r3, #12]
 800c784:	2b00      	cmp	r3, #0
 800c786:	f040 8178 	bne.w	800ca7a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	785b      	ldrb	r3, [r3, #1]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	f000 8084 	beq.w	800c89c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	61bb      	str	r3, [r7, #24]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c79e:	b29b      	uxth	r3, r3
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	61bb      	str	r3, [r7, #24]
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	00da      	lsls	r2, r3, #3
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c7b6:	617b      	str	r3, [r7, #20]
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	88db      	ldrh	r3, [r3, #6]
 800c7bc:	085b      	lsrs	r3, r3, #1
 800c7be:	b29b      	uxth	r3, r3
 800c7c0:	005b      	lsls	r3, r3, #1
 800c7c2:	b29a      	uxth	r2, r3
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c7c8:	687a      	ldr	r2, [r7, #4]
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4413      	add	r3, r2
 800c7d2:	881b      	ldrh	r3, [r3, #0]
 800c7d4:	827b      	strh	r3, [r7, #18]
 800c7d6:	8a7b      	ldrh	r3, [r7, #18]
 800c7d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d01b      	beq.n	800c818 <USB_ActivateEndpoint+0x180>
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	4413      	add	r3, r2
 800c7ea:	881b      	ldrh	r3, [r3, #0]
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7f6:	823b      	strh	r3, [r7, #16]
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	441a      	add	r2, r3
 800c802:	8a3b      	ldrh	r3, [r7, #16]
 800c804:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c808:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c80c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c810:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c814:	b29b      	uxth	r3, r3
 800c816:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	78db      	ldrb	r3, [r3, #3]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d020      	beq.n	800c862 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	4413      	add	r3, r2
 800c82a:	881b      	ldrh	r3, [r3, #0]
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c832:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c836:	81bb      	strh	r3, [r7, #12]
 800c838:	89bb      	ldrh	r3, [r7, #12]
 800c83a:	f083 0320 	eor.w	r3, r3, #32
 800c83e:	81bb      	strh	r3, [r7, #12]
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	441a      	add	r2, r3
 800c84a:	89bb      	ldrh	r3, [r7, #12]
 800c84c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c854:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	8013      	strh	r3, [r2, #0]
 800c860:	e2d5      	b.n	800ce0e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	4413      	add	r3, r2
 800c86c:	881b      	ldrh	r3, [r3, #0]
 800c86e:	b29b      	uxth	r3, r3
 800c870:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c874:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c878:	81fb      	strh	r3, [r7, #14]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	441a      	add	r2, r3
 800c884:	89fb      	ldrh	r3, [r7, #14]
 800c886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c88a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c88e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c896:	b29b      	uxth	r3, r3
 800c898:	8013      	strh	r3, [r2, #0]
 800c89a:	e2b8      	b.n	800ce0e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c8a6:	b29b      	uxth	r3, r3
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8ac:	4413      	add	r3, r2
 800c8ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	00da      	lsls	r2, r3, #3
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b8:	4413      	add	r3, r2
 800c8ba:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c8be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	88db      	ldrh	r3, [r3, #6]
 800c8c4:	085b      	lsrs	r3, r3, #1
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	b29a      	uxth	r2, r3
 800c8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8ce:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c8da:	b29b      	uxth	r3, r3
 800c8dc:	461a      	mov	r2, r3
 800c8de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e0:	4413      	add	r3, r2
 800c8e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	00da      	lsls	r2, r3, #3
 800c8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ec:	4413      	add	r3, r2
 800c8ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c8f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c8f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f6:	881b      	ldrh	r3, [r3, #0]
 800c8f8:	b29b      	uxth	r3, r3
 800c8fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c8fe:	b29a      	uxth	r2, r3
 800c900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c902:	801a      	strh	r2, [r3, #0]
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d10a      	bne.n	800c922 <USB_ActivateEndpoint+0x28a>
 800c90c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c90e:	881b      	ldrh	r3, [r3, #0]
 800c910:	b29b      	uxth	r3, r3
 800c912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91e:	801a      	strh	r2, [r3, #0]
 800c920:	e039      	b.n	800c996 <USB_ActivateEndpoint+0x2fe>
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	691b      	ldr	r3, [r3, #16]
 800c926:	2b3e      	cmp	r3, #62	@ 0x3e
 800c928:	d818      	bhi.n	800c95c <USB_ActivateEndpoint+0x2c4>
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	691b      	ldr	r3, [r3, #16]
 800c92e:	085b      	lsrs	r3, r3, #1
 800c930:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	f003 0301 	and.w	r3, r3, #1
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d002      	beq.n	800c944 <USB_ActivateEndpoint+0x2ac>
 800c93e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c940:	3301      	adds	r3, #1
 800c942:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c946:	881b      	ldrh	r3, [r3, #0]
 800c948:	b29a      	uxth	r2, r3
 800c94a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c94c:	b29b      	uxth	r3, r3
 800c94e:	029b      	lsls	r3, r3, #10
 800c950:	b29b      	uxth	r3, r3
 800c952:	4313      	orrs	r3, r2
 800c954:	b29a      	uxth	r2, r3
 800c956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c958:	801a      	strh	r2, [r3, #0]
 800c95a:	e01c      	b.n	800c996 <USB_ActivateEndpoint+0x2fe>
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	691b      	ldr	r3, [r3, #16]
 800c960:	095b      	lsrs	r3, r3, #5
 800c962:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	691b      	ldr	r3, [r3, #16]
 800c968:	f003 031f 	and.w	r3, r3, #31
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d102      	bne.n	800c976 <USB_ActivateEndpoint+0x2de>
 800c970:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c972:	3b01      	subs	r3, #1
 800c974:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c978:	881b      	ldrh	r3, [r3, #0]
 800c97a:	b29a      	uxth	r2, r3
 800c97c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c97e:	b29b      	uxth	r3, r3
 800c980:	029b      	lsls	r3, r3, #10
 800c982:	b29b      	uxth	r3, r3
 800c984:	4313      	orrs	r3, r2
 800c986:	b29b      	uxth	r3, r3
 800c988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c98c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c990:	b29a      	uxth	r2, r3
 800c992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c994:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	781b      	ldrb	r3, [r3, #0]
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	4413      	add	r3, r2
 800c9a0:	881b      	ldrh	r3, [r3, #0]
 800c9a2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c9a4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c9a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d01b      	beq.n	800c9e6 <USB_ActivateEndpoint+0x34e>
 800c9ae:	687a      	ldr	r2, [r7, #4]
 800c9b0:	683b      	ldr	r3, [r7, #0]
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	009b      	lsls	r3, r3, #2
 800c9b6:	4413      	add	r3, r2
 800c9b8:	881b      	ldrh	r3, [r3, #0]
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9c4:	843b      	strh	r3, [r7, #32]
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	441a      	add	r2, r3
 800c9d0:	8c3b      	ldrh	r3, [r7, #32]
 800c9d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c9de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9e2:	b29b      	uxth	r3, r3
 800c9e4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	781b      	ldrb	r3, [r3, #0]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d124      	bne.n	800ca38 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	009b      	lsls	r3, r3, #2
 800c9f6:	4413      	add	r3, r2
 800c9f8:	881b      	ldrh	r3, [r3, #0]
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ca00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca04:	83bb      	strh	r3, [r7, #28]
 800ca06:	8bbb      	ldrh	r3, [r7, #28]
 800ca08:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ca0c:	83bb      	strh	r3, [r7, #28]
 800ca0e:	8bbb      	ldrh	r3, [r7, #28]
 800ca10:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ca14:	83bb      	strh	r3, [r7, #28]
 800ca16:	687a      	ldr	r2, [r7, #4]
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	441a      	add	r2, r3
 800ca20:	8bbb      	ldrh	r3, [r7, #28]
 800ca22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca32:	b29b      	uxth	r3, r3
 800ca34:	8013      	strh	r3, [r2, #0]
 800ca36:	e1ea      	b.n	800ce0e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	009b      	lsls	r3, r3, #2
 800ca40:	4413      	add	r3, r2
 800ca42:	881b      	ldrh	r3, [r3, #0]
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ca4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca4e:	83fb      	strh	r3, [r7, #30]
 800ca50:	8bfb      	ldrh	r3, [r7, #30]
 800ca52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ca56:	83fb      	strh	r3, [r7, #30]
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	441a      	add	r2, r3
 800ca62:	8bfb      	ldrh	r3, [r7, #30]
 800ca64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ca70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	8013      	strh	r3, [r2, #0]
 800ca78:	e1c9      	b.n	800ce0e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	78db      	ldrb	r3, [r3, #3]
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d11e      	bne.n	800cac0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	009b      	lsls	r3, r3, #2
 800ca8a:	4413      	add	r3, r2
 800ca8c:	881b      	ldrh	r3, [r3, #0]
 800ca8e:	b29b      	uxth	r3, r3
 800ca90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca98:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	781b      	ldrb	r3, [r3, #0]
 800caa2:	009b      	lsls	r3, r3, #2
 800caa4:	441a      	add	r2, r3
 800caa6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800caaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800caae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cab2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caba:	b29b      	uxth	r3, r3
 800cabc:	8013      	strh	r3, [r2, #0]
 800cabe:	e01d      	b.n	800cafc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	4413      	add	r3, r2
 800caca:	881b      	ldrh	r3, [r3, #0]
 800cacc:	b29b      	uxth	r3, r3
 800cace:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800cad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cad6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	441a      	add	r2, r3
 800cae4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800cae8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800caec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800caf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800caf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	461a      	mov	r2, r3
 800cb0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb0c:	4413      	add	r3, r2
 800cb0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	00da      	lsls	r2, r3, #3
 800cb16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cb18:	4413      	add	r3, r2
 800cb1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cb1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	891b      	ldrh	r3, [r3, #8]
 800cb24:	085b      	lsrs	r3, r3, #1
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	005b      	lsls	r3, r3, #1
 800cb2a:	b29a      	uxth	r2, r3
 800cb2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb2e:	801a      	strh	r2, [r3, #0]
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	461a      	mov	r2, r3
 800cb3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb40:	4413      	add	r3, r2
 800cb42:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	00da      	lsls	r2, r3, #3
 800cb4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb4c:	4413      	add	r3, r2
 800cb4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800cb52:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	895b      	ldrh	r3, [r3, #10]
 800cb58:	085b      	lsrs	r3, r3, #1
 800cb5a:	b29b      	uxth	r3, r3
 800cb5c:	005b      	lsls	r3, r3, #1
 800cb5e:	b29a      	uxth	r2, r3
 800cb60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb62:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	785b      	ldrb	r3, [r3, #1]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f040 8093 	bne.w	800cc94 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4413      	add	r3, r2
 800cb78:	881b      	ldrh	r3, [r3, #0]
 800cb7a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800cb7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800cb82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d01b      	beq.n	800cbc2 <USB_ActivateEndpoint+0x52a>
 800cb8a:	687a      	ldr	r2, [r7, #4]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	781b      	ldrb	r3, [r3, #0]
 800cb90:	009b      	lsls	r3, r3, #2
 800cb92:	4413      	add	r3, r2
 800cb94:	881b      	ldrh	r3, [r3, #0]
 800cb96:	b29b      	uxth	r3, r3
 800cb98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cba0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800cba2:	687a      	ldr	r2, [r7, #4]
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	441a      	add	r2, r3
 800cbac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800cbae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cbba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cbc2:	687a      	ldr	r2, [r7, #4]
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	781b      	ldrb	r3, [r3, #0]
 800cbc8:	009b      	lsls	r3, r3, #2
 800cbca:	4413      	add	r3, r2
 800cbcc:	881b      	ldrh	r3, [r3, #0]
 800cbce:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800cbd0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800cbd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d01b      	beq.n	800cc12 <USB_ActivateEndpoint+0x57a>
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	4413      	add	r3, r2
 800cbe4:	881b      	ldrh	r3, [r3, #0]
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbf0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	009b      	lsls	r3, r3, #2
 800cbfa:	441a      	add	r2, r3
 800cbfc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cbfe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc0a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	683b      	ldr	r3, [r7, #0]
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	4413      	add	r3, r2
 800cc1c:	881b      	ldrh	r3, [r3, #0]
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cc24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc28:	873b      	strh	r3, [r7, #56]	@ 0x38
 800cc2a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cc2c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800cc30:	873b      	strh	r3, [r7, #56]	@ 0x38
 800cc32:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cc34:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800cc38:	873b      	strh	r3, [r7, #56]	@ 0x38
 800cc3a:	687a      	ldr	r2, [r7, #4]
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	441a      	add	r2, r3
 800cc44:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800cc46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc56:	b29b      	uxth	r3, r3
 800cc58:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	4413      	add	r3, r2
 800cc64:	881b      	ldrh	r3, [r3, #0]
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc70:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	781b      	ldrb	r3, [r3, #0]
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	441a      	add	r2, r3
 800cc7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800cc7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	8013      	strh	r3, [r2, #0]
 800cc92:	e0bc      	b.n	800ce0e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	781b      	ldrb	r3, [r3, #0]
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	4413      	add	r3, r2
 800cc9e:	881b      	ldrh	r3, [r3, #0]
 800cca0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800cca4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800cca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d01d      	beq.n	800ccec <USB_ActivateEndpoint+0x654>
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	781b      	ldrb	r3, [r3, #0]
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	4413      	add	r3, r2
 800ccba:	881b      	ldrh	r3, [r3, #0]
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ccc6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	009b      	lsls	r3, r3, #2
 800ccd2:	441a      	add	r2, r3
 800ccd4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ccd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ccdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cce0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cce4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cce8:	b29b      	uxth	r3, r3
 800ccea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	4413      	add	r3, r2
 800ccf6:	881b      	ldrh	r3, [r3, #0]
 800ccf8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800ccfc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800cd00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d01d      	beq.n	800cd44 <USB_ActivateEndpoint+0x6ac>
 800cd08:	687a      	ldr	r2, [r7, #4]
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	009b      	lsls	r3, r3, #2
 800cd10:	4413      	add	r3, r2
 800cd12:	881b      	ldrh	r3, [r3, #0]
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd1e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	441a      	add	r2, r3
 800cd2c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800cd30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd3c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cd40:	b29b      	uxth	r3, r3
 800cd42:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	78db      	ldrb	r3, [r3, #3]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d024      	beq.n	800cd96 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cd4c:	687a      	ldr	r2, [r7, #4]
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	4413      	add	r3, r2
 800cd56:	881b      	ldrh	r3, [r3, #0]
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd62:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800cd66:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cd6a:	f083 0320 	eor.w	r3, r3, #32
 800cd6e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	009b      	lsls	r3, r3, #2
 800cd7a:	441a      	add	r2, r3
 800cd7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800cd80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	8013      	strh	r3, [r2, #0]
 800cd94:	e01d      	b.n	800cdd2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	4413      	add	r3, r2
 800cda0:	881b      	ldrh	r3, [r3, #0]
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cda8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdac:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	683b      	ldr	r3, [r7, #0]
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	441a      	add	r2, r3
 800cdba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800cdbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cdc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cdca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	4413      	add	r3, r2
 800cddc:	881b      	ldrh	r3, [r3, #0]
 800cdde:	b29b      	uxth	r3, r3
 800cde0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cde4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cde8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800cdec:	687a      	ldr	r2, [r7, #4]
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	441a      	add	r2, r3
 800cdf6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800cdfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cdfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ce0e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3774      	adds	r7, #116	@ 0x74
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop

0800ce20 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b08d      	sub	sp, #52	@ 0x34
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	7b1b      	ldrb	r3, [r3, #12]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	f040 808e 	bne.w	800cf50 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	785b      	ldrb	r3, [r3, #1]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d044      	beq.n	800cec6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	009b      	lsls	r3, r3, #2
 800ce44:	4413      	add	r3, r2
 800ce46:	881b      	ldrh	r3, [r3, #0]
 800ce48:	81bb      	strh	r3, [r7, #12]
 800ce4a:	89bb      	ldrh	r3, [r7, #12]
 800ce4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d01b      	beq.n	800ce8c <USB_DeactivateEndpoint+0x6c>
 800ce54:	687a      	ldr	r2, [r7, #4]
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	4413      	add	r3, r2
 800ce5e:	881b      	ldrh	r3, [r3, #0]
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce6a:	817b      	strh	r3, [r7, #10]
 800ce6c:	687a      	ldr	r2, [r7, #4]
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	781b      	ldrb	r3, [r3, #0]
 800ce72:	009b      	lsls	r3, r3, #2
 800ce74:	441a      	add	r2, r3
 800ce76:	897b      	ldrh	r3, [r7, #10]
 800ce78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ce7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ce80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ce84:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ce88:	b29b      	uxth	r3, r3
 800ce8a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ce8c:	687a      	ldr	r2, [r7, #4]
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	4413      	add	r3, r2
 800ce96:	881b      	ldrh	r3, [r3, #0]
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ce9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cea2:	813b      	strh	r3, [r7, #8]
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	441a      	add	r2, r3
 800ceae:	893b      	ldrh	r3, [r7, #8]
 800ceb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ceb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ceb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cec0:	b29b      	uxth	r3, r3
 800cec2:	8013      	strh	r3, [r2, #0]
 800cec4:	e192      	b.n	800d1ec <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cec6:	687a      	ldr	r2, [r7, #4]
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	4413      	add	r3, r2
 800ced0:	881b      	ldrh	r3, [r3, #0]
 800ced2:	827b      	strh	r3, [r7, #18]
 800ced4:	8a7b      	ldrh	r3, [r7, #18]
 800ced6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d01b      	beq.n	800cf16 <USB_DeactivateEndpoint+0xf6>
 800cede:	687a      	ldr	r2, [r7, #4]
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	009b      	lsls	r3, r3, #2
 800cee6:	4413      	add	r3, r2
 800cee8:	881b      	ldrh	r3, [r3, #0]
 800ceea:	b29b      	uxth	r3, r3
 800ceec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cef4:	823b      	strh	r3, [r7, #16]
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	683b      	ldr	r3, [r7, #0]
 800cefa:	781b      	ldrb	r3, [r3, #0]
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	441a      	add	r2, r3
 800cf00:	8a3b      	ldrh	r3, [r7, #16]
 800cf02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cf0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf12:	b29b      	uxth	r3, r3
 800cf14:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	4413      	add	r3, r2
 800cf20:	881b      	ldrh	r3, [r3, #0]
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cf28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf2c:	81fb      	strh	r3, [r7, #14]
 800cf2e:	687a      	ldr	r2, [r7, #4]
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	441a      	add	r2, r3
 800cf38:	89fb      	ldrh	r3, [r7, #14]
 800cf3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cf46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	8013      	strh	r3, [r2, #0]
 800cf4e:	e14d      	b.n	800d1ec <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	785b      	ldrb	r3, [r3, #1]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	f040 80a5 	bne.w	800d0a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	009b      	lsls	r3, r3, #2
 800cf62:	4413      	add	r3, r2
 800cf64:	881b      	ldrh	r3, [r3, #0]
 800cf66:	843b      	strh	r3, [r7, #32]
 800cf68:	8c3b      	ldrh	r3, [r7, #32]
 800cf6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d01b      	beq.n	800cfaa <USB_DeactivateEndpoint+0x18a>
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	781b      	ldrb	r3, [r3, #0]
 800cf78:	009b      	lsls	r3, r3, #2
 800cf7a:	4413      	add	r3, r2
 800cf7c:	881b      	ldrh	r3, [r3, #0]
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf88:	83fb      	strh	r3, [r7, #30]
 800cf8a:	687a      	ldr	r2, [r7, #4]
 800cf8c:	683b      	ldr	r3, [r7, #0]
 800cf8e:	781b      	ldrb	r3, [r3, #0]
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	441a      	add	r2, r3
 800cf94:	8bfb      	ldrh	r3, [r7, #30]
 800cf96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cf9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cf9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cfa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfa6:	b29b      	uxth	r3, r3
 800cfa8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	4413      	add	r3, r2
 800cfb4:	881b      	ldrh	r3, [r3, #0]
 800cfb6:	83bb      	strh	r3, [r7, #28]
 800cfb8:	8bbb      	ldrh	r3, [r7, #28]
 800cfba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d01b      	beq.n	800cffa <USB_DeactivateEndpoint+0x1da>
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	009b      	lsls	r3, r3, #2
 800cfca:	4413      	add	r3, r2
 800cfcc:	881b      	ldrh	r3, [r3, #0]
 800cfce:	b29b      	uxth	r3, r3
 800cfd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cfd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfd8:	837b      	strh	r3, [r7, #26]
 800cfda:	687a      	ldr	r2, [r7, #4]
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	781b      	ldrb	r3, [r3, #0]
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	441a      	add	r2, r3
 800cfe4:	8b7b      	ldrh	r3, [r7, #26]
 800cfe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cfea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cfee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cff2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cff6:	b29b      	uxth	r3, r3
 800cff8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	009b      	lsls	r3, r3, #2
 800d002:	4413      	add	r3, r2
 800d004:	881b      	ldrh	r3, [r3, #0]
 800d006:	b29b      	uxth	r3, r3
 800d008:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d00c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d010:	833b      	strh	r3, [r7, #24]
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	441a      	add	r2, r3
 800d01c:	8b3b      	ldrh	r3, [r7, #24]
 800d01e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d022:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d026:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d02a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d02e:	b29b      	uxth	r3, r3
 800d030:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	4413      	add	r3, r2
 800d03c:	881b      	ldrh	r3, [r3, #0]
 800d03e:	b29b      	uxth	r3, r3
 800d040:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d044:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d048:	82fb      	strh	r3, [r7, #22]
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	441a      	add	r2, r3
 800d054:	8afb      	ldrh	r3, [r7, #22]
 800d056:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d05a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d05e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d066:	b29b      	uxth	r3, r3
 800d068:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	4413      	add	r3, r2
 800d074:	881b      	ldrh	r3, [r3, #0]
 800d076:	b29b      	uxth	r3, r3
 800d078:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d07c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d080:	82bb      	strh	r3, [r7, #20]
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	009b      	lsls	r3, r3, #2
 800d08a:	441a      	add	r2, r3
 800d08c:	8abb      	ldrh	r3, [r7, #20]
 800d08e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d092:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d096:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d09a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d09e:	b29b      	uxth	r3, r3
 800d0a0:	8013      	strh	r3, [r2, #0]
 800d0a2:	e0a3      	b.n	800d1ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	009b      	lsls	r3, r3, #2
 800d0ac:	4413      	add	r3, r2
 800d0ae:	881b      	ldrh	r3, [r3, #0]
 800d0b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d0b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d0b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d01b      	beq.n	800d0f4 <USB_DeactivateEndpoint+0x2d4>
 800d0bc:	687a      	ldr	r2, [r7, #4]
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	4413      	add	r3, r2
 800d0c6:	881b      	ldrh	r3, [r3, #0]
 800d0c8:	b29b      	uxth	r3, r3
 800d0ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0d2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800d0d4:	687a      	ldr	r2, [r7, #4]
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	441a      	add	r2, r3
 800d0de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d0e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d0ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d0f4:	687a      	ldr	r2, [r7, #4]
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	009b      	lsls	r3, r3, #2
 800d0fc:	4413      	add	r3, r2
 800d0fe:	881b      	ldrh	r3, [r3, #0]
 800d100:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800d102:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d01b      	beq.n	800d144 <USB_DeactivateEndpoint+0x324>
 800d10c:	687a      	ldr	r2, [r7, #4]
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	009b      	lsls	r3, r3, #2
 800d114:	4413      	add	r3, r2
 800d116:	881b      	ldrh	r3, [r3, #0]
 800d118:	b29b      	uxth	r3, r3
 800d11a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d11e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d122:	853b      	strh	r3, [r7, #40]	@ 0x28
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	441a      	add	r2, r3
 800d12e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d13c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d140:	b29b      	uxth	r3, r3
 800d142:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800d144:	687a      	ldr	r2, [r7, #4]
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	4413      	add	r3, r2
 800d14e:	881b      	ldrh	r3, [r3, #0]
 800d150:	b29b      	uxth	r3, r3
 800d152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d15a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800d15c:	687a      	ldr	r2, [r7, #4]
 800d15e:	683b      	ldr	r3, [r7, #0]
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	441a      	add	r2, r3
 800d166:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d168:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d16c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d170:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d178:	b29b      	uxth	r3, r3
 800d17a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	4413      	add	r3, r2
 800d186:	881b      	ldrh	r3, [r3, #0]
 800d188:	b29b      	uxth	r3, r3
 800d18a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d18e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d192:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	441a      	add	r2, r3
 800d19e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d1a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1b0:	b29b      	uxth	r3, r3
 800d1b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	4413      	add	r3, r2
 800d1be:	881b      	ldrh	r3, [r3, #0]
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d1c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d1ca:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	441a      	add	r2, r3
 800d1d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d1d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d1dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d1e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d1e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800d1ec:	2300      	movs	r3, #0
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3734      	adds	r7, #52	@ 0x34
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f8:	4770      	bx	lr

0800d1fa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b0c2      	sub	sp, #264	@ 0x108
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d204:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d208:	6018      	str	r0, [r3, #0]
 800d20a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d20e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d212:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d214:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d218:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	785b      	ldrb	r3, [r3, #1]
 800d220:	2b01      	cmp	r3, #1
 800d222:	f040 86b7 	bne.w	800df94 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800d226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d22a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	699a      	ldr	r2, [r3, #24]
 800d232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	691b      	ldr	r3, [r3, #16]
 800d23e:	429a      	cmp	r2, r3
 800d240:	d908      	bls.n	800d254 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800d242:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d246:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800d252:	e007      	b.n	800d264 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800d254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d258:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	699b      	ldr	r3, [r3, #24]
 800d260:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800d264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	7b1b      	ldrb	r3, [r3, #12]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d13a      	bne.n	800d2ea <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800d274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	6959      	ldr	r1, [r3, #20]
 800d280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d284:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	88da      	ldrh	r2, [r3, #6]
 800d28c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d290:	b29b      	uxth	r3, r3
 800d292:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d296:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d29a:	6800      	ldr	r0, [r0, #0]
 800d29c:	f001 fc99 	bl	800ebd2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d2a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	613b      	str	r3, [r7, #16]
 800d2ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	461a      	mov	r2, r3
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	4413      	add	r3, r2
 800d2c2:	613b      	str	r3, [r7, #16]
 800d2c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	00da      	lsls	r2, r3, #3
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d2da:	60fb      	str	r3, [r7, #12]
 800d2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	801a      	strh	r2, [r3, #0]
 800d2e6:	f000 be1f 	b.w	800df28 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800d2ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	78db      	ldrb	r3, [r3, #3]
 800d2f6:	2b02      	cmp	r3, #2
 800d2f8:	f040 8462 	bne.w	800dbc0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800d2fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d300:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	6a1a      	ldr	r2, [r3, #32]
 800d308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d30c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	691b      	ldr	r3, [r3, #16]
 800d314:	429a      	cmp	r2, r3
 800d316:	f240 83df 	bls.w	800dad8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d31a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d31e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	4413      	add	r3, r2
 800d334:	881b      	ldrh	r3, [r3, #0]
 800d336:	b29b      	uxth	r3, r3
 800d338:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d33c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d340:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800d344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d348:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	441a      	add	r2, r3
 800d35e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800d362:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d366:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d36a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d36e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d372:	b29b      	uxth	r3, r3
 800d374:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800d376:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d37a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	6a1a      	ldr	r2, [r3, #32]
 800d382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d386:	1ad2      	subs	r2, r2, r3
 800d388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d38c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d398:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	781b      	ldrb	r3, [r3, #0]
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	4413      	add	r3, r2
 800d3ae:	881b      	ldrh	r3, [r3, #0]
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	f000 81c7 	beq.w	800d74a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d3bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d3c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	785b      	ldrb	r3, [r3, #1]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d177      	bne.n	800d4c8 <USB_EPStartXfer+0x2ce>
 800d3d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d3e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	461a      	mov	r2, r3
 800d3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f8:	4413      	add	r3, r2
 800d3fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d3fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	00da      	lsls	r2, r3, #3
 800d40a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d40c:	4413      	add	r3, r2
 800d40e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d412:	627b      	str	r3, [r7, #36]	@ 0x24
 800d414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d416:	881b      	ldrh	r3, [r3, #0]
 800d418:	b29b      	uxth	r3, r3
 800d41a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d41e:	b29a      	uxth	r2, r3
 800d420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d422:	801a      	strh	r2, [r3, #0]
 800d424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d10a      	bne.n	800d442 <USB_EPStartXfer+0x248>
 800d42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d42e:	881b      	ldrh	r3, [r3, #0]
 800d430:	b29b      	uxth	r3, r3
 800d432:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d436:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d43a:	b29a      	uxth	r2, r3
 800d43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43e:	801a      	strh	r2, [r3, #0]
 800d440:	e067      	b.n	800d512 <USB_EPStartXfer+0x318>
 800d442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d446:	2b3e      	cmp	r3, #62	@ 0x3e
 800d448:	d81c      	bhi.n	800d484 <USB_EPStartXfer+0x28a>
 800d44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d44e:	085b      	lsrs	r3, r3, #1
 800d450:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d458:	f003 0301 	and.w	r3, r3, #1
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d004      	beq.n	800d46a <USB_EPStartXfer+0x270>
 800d460:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d464:	3301      	adds	r3, #1
 800d466:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d46c:	881b      	ldrh	r3, [r3, #0]
 800d46e:	b29a      	uxth	r2, r3
 800d470:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d474:	b29b      	uxth	r3, r3
 800d476:	029b      	lsls	r3, r3, #10
 800d478:	b29b      	uxth	r3, r3
 800d47a:	4313      	orrs	r3, r2
 800d47c:	b29a      	uxth	r2, r3
 800d47e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d480:	801a      	strh	r2, [r3, #0]
 800d482:	e046      	b.n	800d512 <USB_EPStartXfer+0x318>
 800d484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d488:	095b      	lsrs	r3, r3, #5
 800d48a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d492:	f003 031f 	and.w	r3, r3, #31
 800d496:	2b00      	cmp	r3, #0
 800d498:	d104      	bne.n	800d4a4 <USB_EPStartXfer+0x2aa>
 800d49a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d49e:	3b01      	subs	r3, #1
 800d4a0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4a6:	881b      	ldrh	r3, [r3, #0]
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	029b      	lsls	r3, r3, #10
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	4313      	orrs	r3, r2
 800d4b6:	b29b      	uxth	r3, r3
 800d4b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4c0:	b29a      	uxth	r2, r3
 800d4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4c4:	801a      	strh	r2, [r3, #0]
 800d4c6:	e024      	b.n	800d512 <USB_EPStartXfer+0x318>
 800d4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	785b      	ldrb	r3, [r3, #1]
 800d4d4:	2b01      	cmp	r3, #1
 800d4d6:	d11c      	bne.n	800d512 <USB_EPStartXfer+0x318>
 800d4d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	461a      	mov	r2, r3
 800d4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4ec:	4413      	add	r3, r2
 800d4ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800d4f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	00da      	lsls	r2, r3, #3
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d500:	4413      	add	r3, r2
 800d502:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d506:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d50c:	b29a      	uxth	r2, r3
 800d50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d510:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	895b      	ldrh	r3, [r3, #10]
 800d51e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	6959      	ldr	r1, [r3, #20]
 800d52e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d532:	b29b      	uxth	r3, r3
 800d534:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d538:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d53c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d540:	6800      	ldr	r0, [r0, #0]
 800d542:	f001 fb46 	bl	800ebd2 <USB_WritePMA>
            ep->xfer_buff += len;
 800d546:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d54a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	695a      	ldr	r2, [r3, #20]
 800d552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d556:	441a      	add	r2, r3
 800d558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d55c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	6a1a      	ldr	r2, [r3, #32]
 800d570:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d574:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	691b      	ldr	r3, [r3, #16]
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d90f      	bls.n	800d5a0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800d580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d584:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	6a1a      	ldr	r2, [r3, #32]
 800d58c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d590:	1ad2      	subs	r2, r2, r3
 800d592:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d596:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	621a      	str	r2, [r3, #32]
 800d59e:	e00e      	b.n	800d5be <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800d5a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	6a1b      	ldr	r3, [r3, #32]
 800d5ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d5b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d5be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	785b      	ldrb	r3, [r3, #1]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d177      	bne.n	800d6be <USB_EPStartXfer+0x4c4>
 800d5ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	61bb      	str	r3, [r7, #24]
 800d5da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5e8:	b29b      	uxth	r3, r3
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	4413      	add	r3, r2
 800d5f0:	61bb      	str	r3, [r7, #24]
 800d5f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	00da      	lsls	r2, r3, #3
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	4413      	add	r3, r2
 800d604:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d608:	617b      	str	r3, [r7, #20]
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	881b      	ldrh	r3, [r3, #0]
 800d60e:	b29b      	uxth	r3, r3
 800d610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d614:	b29a      	uxth	r2, r3
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	801a      	strh	r2, [r3, #0]
 800d61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d10a      	bne.n	800d638 <USB_EPStartXfer+0x43e>
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	881b      	ldrh	r3, [r3, #0]
 800d626:	b29b      	uxth	r3, r3
 800d628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d62c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d630:	b29a      	uxth	r2, r3
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	801a      	strh	r2, [r3, #0]
 800d636:	e06d      	b.n	800d714 <USB_EPStartXfer+0x51a>
 800d638:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d63c:	2b3e      	cmp	r3, #62	@ 0x3e
 800d63e:	d81c      	bhi.n	800d67a <USB_EPStartXfer+0x480>
 800d640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d644:	085b      	lsrs	r3, r3, #1
 800d646:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d64e:	f003 0301 	and.w	r3, r3, #1
 800d652:	2b00      	cmp	r3, #0
 800d654:	d004      	beq.n	800d660 <USB_EPStartXfer+0x466>
 800d656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d65a:	3301      	adds	r3, #1
 800d65c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	881b      	ldrh	r3, [r3, #0]
 800d664:	b29a      	uxth	r2, r3
 800d666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d66a:	b29b      	uxth	r3, r3
 800d66c:	029b      	lsls	r3, r3, #10
 800d66e:	b29b      	uxth	r3, r3
 800d670:	4313      	orrs	r3, r2
 800d672:	b29a      	uxth	r2, r3
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	801a      	strh	r2, [r3, #0]
 800d678:	e04c      	b.n	800d714 <USB_EPStartXfer+0x51a>
 800d67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d67e:	095b      	lsrs	r3, r3, #5
 800d680:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d688:	f003 031f 	and.w	r3, r3, #31
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d104      	bne.n	800d69a <USB_EPStartXfer+0x4a0>
 800d690:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d694:	3b01      	subs	r3, #1
 800d696:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	881b      	ldrh	r3, [r3, #0]
 800d69e:	b29a      	uxth	r2, r3
 800d6a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	029b      	lsls	r3, r3, #10
 800d6a8:	b29b      	uxth	r3, r3
 800d6aa:	4313      	orrs	r3, r2
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	801a      	strh	r2, [r3, #0]
 800d6bc:	e02a      	b.n	800d714 <USB_EPStartXfer+0x51a>
 800d6be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	785b      	ldrb	r3, [r3, #1]
 800d6ca:	2b01      	cmp	r3, #1
 800d6cc:	d122      	bne.n	800d714 <USB_EPStartXfer+0x51a>
 800d6ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	623b      	str	r3, [r7, #32]
 800d6da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	461a      	mov	r2, r3
 800d6ec:	6a3b      	ldr	r3, [r7, #32]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	623b      	str	r3, [r7, #32]
 800d6f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	00da      	lsls	r2, r3, #3
 800d700:	6a3b      	ldr	r3, [r7, #32]
 800d702:	4413      	add	r3, r2
 800d704:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d708:	61fb      	str	r3, [r7, #28]
 800d70a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d70e:	b29a      	uxth	r2, r3
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d718:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	891b      	ldrh	r3, [r3, #8]
 800d720:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	6959      	ldr	r1, [r3, #20]
 800d730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d734:	b29b      	uxth	r3, r3
 800d736:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d73a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d73e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d742:	6800      	ldr	r0, [r0, #0]
 800d744:	f001 fa45 	bl	800ebd2 <USB_WritePMA>
 800d748:	e3ee      	b.n	800df28 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d74a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d74e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	785b      	ldrb	r3, [r3, #1]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d177      	bne.n	800d84a <USB_EPStartXfer+0x650>
 800d75a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d75e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d76a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d774:	b29b      	uxth	r3, r3
 800d776:	461a      	mov	r2, r3
 800d778:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d77a:	4413      	add	r3, r2
 800d77c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d77e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	00da      	lsls	r2, r3, #3
 800d78c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d78e:	4413      	add	r3, r2
 800d790:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d794:	647b      	str	r3, [r7, #68]	@ 0x44
 800d796:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d798:	881b      	ldrh	r3, [r3, #0]
 800d79a:	b29b      	uxth	r3, r3
 800d79c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d7a0:	b29a      	uxth	r2, r3
 800d7a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7a4:	801a      	strh	r2, [r3, #0]
 800d7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d10a      	bne.n	800d7c4 <USB_EPStartXfer+0x5ca>
 800d7ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7b0:	881b      	ldrh	r3, [r3, #0]
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7c0:	801a      	strh	r2, [r3, #0]
 800d7c2:	e06d      	b.n	800d8a0 <USB_EPStartXfer+0x6a6>
 800d7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7c8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d7ca:	d81c      	bhi.n	800d806 <USB_EPStartXfer+0x60c>
 800d7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7d0:	085b      	lsrs	r3, r3, #1
 800d7d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d7d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7da:	f003 0301 	and.w	r3, r3, #1
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d004      	beq.n	800d7ec <USB_EPStartXfer+0x5f2>
 800d7e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d7e6:	3301      	adds	r3, #1
 800d7e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d7ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d7ee:	881b      	ldrh	r3, [r3, #0]
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	029b      	lsls	r3, r3, #10
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	4313      	orrs	r3, r2
 800d7fe:	b29a      	uxth	r2, r3
 800d800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d802:	801a      	strh	r2, [r3, #0]
 800d804:	e04c      	b.n	800d8a0 <USB_EPStartXfer+0x6a6>
 800d806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d80a:	095b      	lsrs	r3, r3, #5
 800d80c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d810:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d814:	f003 031f 	and.w	r3, r3, #31
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d104      	bne.n	800d826 <USB_EPStartXfer+0x62c>
 800d81c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d820:	3b01      	subs	r3, #1
 800d822:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d826:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d828:	881b      	ldrh	r3, [r3, #0]
 800d82a:	b29a      	uxth	r2, r3
 800d82c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800d830:	b29b      	uxth	r3, r3
 800d832:	029b      	lsls	r3, r3, #10
 800d834:	b29b      	uxth	r3, r3
 800d836:	4313      	orrs	r3, r2
 800d838:	b29b      	uxth	r3, r3
 800d83a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d83e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d842:	b29a      	uxth	r2, r3
 800d844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d846:	801a      	strh	r2, [r3, #0]
 800d848:	e02a      	b.n	800d8a0 <USB_EPStartXfer+0x6a6>
 800d84a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d84e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	785b      	ldrb	r3, [r3, #1]
 800d856:	2b01      	cmp	r3, #1
 800d858:	d122      	bne.n	800d8a0 <USB_EPStartXfer+0x6a6>
 800d85a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d85e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	653b      	str	r3, [r7, #80]	@ 0x50
 800d866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d86a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d874:	b29b      	uxth	r3, r3
 800d876:	461a      	mov	r2, r3
 800d878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d87a:	4413      	add	r3, r2
 800d87c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d87e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d882:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	781b      	ldrb	r3, [r3, #0]
 800d88a:	00da      	lsls	r2, r3, #3
 800d88c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d88e:	4413      	add	r3, r2
 800d890:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d894:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d896:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d89e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d8a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	891b      	ldrh	r3, [r3, #8]
 800d8ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d8b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	6959      	ldr	r1, [r3, #20]
 800d8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8c0:	b29b      	uxth	r3, r3
 800d8c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d8c6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d8ca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d8ce:	6800      	ldr	r0, [r0, #0]
 800d8d0:	f001 f97f 	bl	800ebd2 <USB_WritePMA>
            ep->xfer_buff += len;
 800d8d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	695a      	ldr	r2, [r3, #20]
 800d8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d8e4:	441a      	add	r2, r3
 800d8e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d8f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	6a1a      	ldr	r2, [r3, #32]
 800d8fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d902:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	691b      	ldr	r3, [r3, #16]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d90f      	bls.n	800d92e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d90e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d912:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	6a1a      	ldr	r2, [r3, #32]
 800d91a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d91e:	1ad2      	subs	r2, r2, r3
 800d920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d924:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	621a      	str	r2, [r3, #32]
 800d92c:	e00e      	b.n	800d94c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d92e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	6a1b      	ldr	r3, [r3, #32]
 800d93a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d93e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d942:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2200      	movs	r2, #0
 800d94a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d94c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d950:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	643b      	str	r3, [r7, #64]	@ 0x40
 800d958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d95c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	785b      	ldrb	r3, [r3, #1]
 800d964:	2b00      	cmp	r3, #0
 800d966:	d177      	bne.n	800da58 <USB_EPStartXfer+0x85e>
 800d968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d96c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d974:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d978:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d982:	b29b      	uxth	r3, r3
 800d984:	461a      	mov	r2, r3
 800d986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d988:	4413      	add	r3, r2
 800d98a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d98c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	00da      	lsls	r2, r3, #3
 800d99a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d99c:	4413      	add	r3, r2
 800d99e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d9a2:	637b      	str	r3, [r7, #52]	@ 0x34
 800d9a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9a6:	881b      	ldrh	r3, [r3, #0]
 800d9a8:	b29b      	uxth	r3, r3
 800d9aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d9ae:	b29a      	uxth	r2, r3
 800d9b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9b2:	801a      	strh	r2, [r3, #0]
 800d9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d10a      	bne.n	800d9d2 <USB_EPStartXfer+0x7d8>
 800d9bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9be:	881b      	ldrh	r3, [r3, #0]
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9ca:	b29a      	uxth	r2, r3
 800d9cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9ce:	801a      	strh	r2, [r3, #0]
 800d9d0:	e067      	b.n	800daa2 <USB_EPStartXfer+0x8a8>
 800d9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9d6:	2b3e      	cmp	r3, #62	@ 0x3e
 800d9d8:	d81c      	bhi.n	800da14 <USB_EPStartXfer+0x81a>
 800d9da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9de:	085b      	lsrs	r3, r3, #1
 800d9e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d9e8:	f003 0301 	and.w	r3, r3, #1
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d004      	beq.n	800d9fa <USB_EPStartXfer+0x800>
 800d9f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d9fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9fc:	881b      	ldrh	r3, [r3, #0]
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da04:	b29b      	uxth	r3, r3
 800da06:	029b      	lsls	r3, r3, #10
 800da08:	b29b      	uxth	r3, r3
 800da0a:	4313      	orrs	r3, r2
 800da0c:	b29a      	uxth	r2, r3
 800da0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da10:	801a      	strh	r2, [r3, #0]
 800da12:	e046      	b.n	800daa2 <USB_EPStartXfer+0x8a8>
 800da14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da18:	095b      	lsrs	r3, r3, #5
 800da1a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800da1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da22:	f003 031f 	and.w	r3, r3, #31
 800da26:	2b00      	cmp	r3, #0
 800da28:	d104      	bne.n	800da34 <USB_EPStartXfer+0x83a>
 800da2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da2e:	3b01      	subs	r3, #1
 800da30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800da34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da36:	881b      	ldrh	r3, [r3, #0]
 800da38:	b29a      	uxth	r2, r3
 800da3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800da3e:	b29b      	uxth	r3, r3
 800da40:	029b      	lsls	r3, r3, #10
 800da42:	b29b      	uxth	r3, r3
 800da44:	4313      	orrs	r3, r2
 800da46:	b29b      	uxth	r3, r3
 800da48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da50:	b29a      	uxth	r2, r3
 800da52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da54:	801a      	strh	r2, [r3, #0]
 800da56:	e024      	b.n	800daa2 <USB_EPStartXfer+0x8a8>
 800da58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	785b      	ldrb	r3, [r3, #1]
 800da64:	2b01      	cmp	r3, #1
 800da66:	d11c      	bne.n	800daa2 <USB_EPStartXfer+0x8a8>
 800da68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da76:	b29b      	uxth	r3, r3
 800da78:	461a      	mov	r2, r3
 800da7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da7c:	4413      	add	r3, r2
 800da7e:	643b      	str	r3, [r7, #64]	@ 0x40
 800da80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	781b      	ldrb	r3, [r3, #0]
 800da8c:	00da      	lsls	r2, r3, #3
 800da8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800da90:	4413      	add	r3, r2
 800da92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800da96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800da98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daa0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800daa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	895b      	ldrh	r3, [r3, #10]
 800daae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	6959      	ldr	r1, [r3, #20]
 800dabe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dac8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dacc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dad0:	6800      	ldr	r0, [r0, #0]
 800dad2:	f001 f87e 	bl	800ebd2 <USB_WritePMA>
 800dad6:	e227      	b.n	800df28 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800dad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dadc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	6a1b      	ldr	r3, [r3, #32]
 800dae4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800dae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	4413      	add	r3, r2
 800db02:	881b      	ldrh	r3, [r3, #0]
 800db04:	b29b      	uxth	r3, r3
 800db06:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800db0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db0e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800db12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	441a      	add	r2, r3
 800db2c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800db30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db40:	b29b      	uxth	r3, r3
 800db42:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800db44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800db5e:	b29b      	uxth	r3, r3
 800db60:	461a      	mov	r2, r3
 800db62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db64:	4413      	add	r3, r2
 800db66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800db68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	781b      	ldrb	r3, [r3, #0]
 800db74:	00da      	lsls	r2, r3, #3
 800db76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800db78:	4413      	add	r3, r2
 800db7a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800db7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800db80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db84:	b29a      	uxth	r2, r3
 800db86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800db88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800db8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	891b      	ldrh	r3, [r3, #8]
 800db96:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800db9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	6959      	ldr	r1, [r3, #20]
 800dba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dbb0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dbb4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dbb8:	6800      	ldr	r0, [r0, #0]
 800dbba:	f001 f80a 	bl	800ebd2 <USB_WritePMA>
 800dbbe:	e1b3      	b.n	800df28 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800dbc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	6a1a      	ldr	r2, [r3, #32]
 800dbcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbd0:	1ad2      	subs	r2, r2, r3
 800dbd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800dbde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbe6:	681a      	ldr	r2, [r3, #0]
 800dbe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	4413      	add	r3, r2
 800dbf8:	881b      	ldrh	r3, [r3, #0]
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f000 80c6 	beq.w	800dd92 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dc06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	673b      	str	r3, [r7, #112]	@ 0x70
 800dc12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	785b      	ldrb	r3, [r3, #1]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d177      	bne.n	800dd12 <USB_EPStartXfer+0xb18>
 800dc22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	461a      	mov	r2, r3
 800dc40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dc42:	4413      	add	r3, r2
 800dc44:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dc46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	00da      	lsls	r2, r3, #3
 800dc54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800dc56:	4413      	add	r3, r2
 800dc58:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dc5c:	667b      	str	r3, [r7, #100]	@ 0x64
 800dc5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc60:	881b      	ldrh	r3, [r3, #0]
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dc68:	b29a      	uxth	r2, r3
 800dc6a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc6c:	801a      	strh	r2, [r3, #0]
 800dc6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d10a      	bne.n	800dc8c <USB_EPStartXfer+0xa92>
 800dc76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc78:	881b      	ldrh	r3, [r3, #0]
 800dc7a:	b29b      	uxth	r3, r3
 800dc7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dc80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dc84:	b29a      	uxth	r2, r3
 800dc86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dc88:	801a      	strh	r2, [r3, #0]
 800dc8a:	e067      	b.n	800dd5c <USB_EPStartXfer+0xb62>
 800dc8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc90:	2b3e      	cmp	r3, #62	@ 0x3e
 800dc92:	d81c      	bhi.n	800dcce <USB_EPStartXfer+0xad4>
 800dc94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc98:	085b      	lsrs	r3, r3, #1
 800dc9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dc9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dca2:	f003 0301 	and.w	r3, r3, #1
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d004      	beq.n	800dcb4 <USB_EPStartXfer+0xaba>
 800dcaa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800dcae:	3301      	adds	r3, #1
 800dcb0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dcb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dcb6:	881b      	ldrh	r3, [r3, #0]
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	029b      	lsls	r3, r3, #10
 800dcc2:	b29b      	uxth	r3, r3
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	b29a      	uxth	r2, r3
 800dcc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dcca:	801a      	strh	r2, [r3, #0]
 800dccc:	e046      	b.n	800dd5c <USB_EPStartXfer+0xb62>
 800dcce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcd2:	095b      	lsrs	r3, r3, #5
 800dcd4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dcd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcdc:	f003 031f 	and.w	r3, r3, #31
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d104      	bne.n	800dcee <USB_EPStartXfer+0xaf4>
 800dce4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800dce8:	3b01      	subs	r3, #1
 800dcea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800dcee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dcf0:	881b      	ldrh	r3, [r3, #0]
 800dcf2:	b29a      	uxth	r2, r3
 800dcf4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	029b      	lsls	r3, r3, #10
 800dcfc:	b29b      	uxth	r3, r3
 800dcfe:	4313      	orrs	r3, r2
 800dd00:	b29b      	uxth	r3, r3
 800dd02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dd0e:	801a      	strh	r2, [r3, #0]
 800dd10:	e024      	b.n	800dd5c <USB_EPStartXfer+0xb62>
 800dd12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	785b      	ldrb	r3, [r3, #1]
 800dd1e:	2b01      	cmp	r3, #1
 800dd20:	d11c      	bne.n	800dd5c <USB_EPStartXfer+0xb62>
 800dd22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd30:	b29b      	uxth	r3, r3
 800dd32:	461a      	mov	r2, r3
 800dd34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dd36:	4413      	add	r3, r2
 800dd38:	673b      	str	r3, [r7, #112]	@ 0x70
 800dd3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	00da      	lsls	r2, r3, #3
 800dd48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800dd4a:	4413      	add	r3, r2
 800dd4c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dd50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dd52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd56:	b29a      	uxth	r2, r3
 800dd58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800dd5a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800dd5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	895b      	ldrh	r3, [r3, #10]
 800dd68:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dd6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	6959      	ldr	r1, [r3, #20]
 800dd78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800dd82:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800dd86:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800dd8a:	6800      	ldr	r0, [r0, #0]
 800dd8c:	f000 ff21 	bl	800ebd2 <USB_WritePMA>
 800dd90:	e0ca      	b.n	800df28 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800dd92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	785b      	ldrb	r3, [r3, #1]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d177      	bne.n	800de92 <USB_EPStartXfer+0xc98>
 800dda2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dda6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ddae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ddc2:	4413      	add	r3, r2
 800ddc4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ddc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	00da      	lsls	r2, r3, #3
 800ddd4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ddd6:	4413      	add	r3, r2
 800ddd8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dddc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ddde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dde0:	881b      	ldrh	r3, [r3, #0]
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dde8:	b29a      	uxth	r2, r3
 800ddea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ddec:	801a      	strh	r2, [r3, #0]
 800ddee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d10a      	bne.n	800de0c <USB_EPStartXfer+0xc12>
 800ddf6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ddf8:	881b      	ldrh	r3, [r3, #0]
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de04:	b29a      	uxth	r2, r3
 800de06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de08:	801a      	strh	r2, [r3, #0]
 800de0a:	e073      	b.n	800def4 <USB_EPStartXfer+0xcfa>
 800de0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de10:	2b3e      	cmp	r3, #62	@ 0x3e
 800de12:	d81c      	bhi.n	800de4e <USB_EPStartXfer+0xc54>
 800de14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de18:	085b      	lsrs	r3, r3, #1
 800de1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800de1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de22:	f003 0301 	and.w	r3, r3, #1
 800de26:	2b00      	cmp	r3, #0
 800de28:	d004      	beq.n	800de34 <USB_EPStartXfer+0xc3a>
 800de2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800de2e:	3301      	adds	r3, #1
 800de30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800de34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de36:	881b      	ldrh	r3, [r3, #0]
 800de38:	b29a      	uxth	r2, r3
 800de3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800de3e:	b29b      	uxth	r3, r3
 800de40:	029b      	lsls	r3, r3, #10
 800de42:	b29b      	uxth	r3, r3
 800de44:	4313      	orrs	r3, r2
 800de46:	b29a      	uxth	r2, r3
 800de48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de4a:	801a      	strh	r2, [r3, #0]
 800de4c:	e052      	b.n	800def4 <USB_EPStartXfer+0xcfa>
 800de4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de52:	095b      	lsrs	r3, r3, #5
 800de54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800de58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de5c:	f003 031f 	and.w	r3, r3, #31
 800de60:	2b00      	cmp	r3, #0
 800de62:	d104      	bne.n	800de6e <USB_EPStartXfer+0xc74>
 800de64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800de68:	3b01      	subs	r3, #1
 800de6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800de6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de70:	881b      	ldrh	r3, [r3, #0]
 800de72:	b29a      	uxth	r2, r3
 800de74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800de78:	b29b      	uxth	r3, r3
 800de7a:	029b      	lsls	r3, r3, #10
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	4313      	orrs	r3, r2
 800de80:	b29b      	uxth	r3, r3
 800de82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de8a:	b29a      	uxth	r2, r3
 800de8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800de8e:	801a      	strh	r2, [r3, #0]
 800de90:	e030      	b.n	800def4 <USB_EPStartXfer+0xcfa>
 800de92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	785b      	ldrb	r3, [r3, #1]
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d128      	bne.n	800def4 <USB_EPStartXfer+0xcfa>
 800dea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dea6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800deb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800debe:	b29b      	uxth	r3, r3
 800dec0:	461a      	mov	r2, r3
 800dec2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dec6:	4413      	add	r3, r2
 800dec8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800decc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ded0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	00da      	lsls	r2, r3, #3
 800deda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dede:	4413      	add	r3, r2
 800dee0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dee4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800dee8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800deec:	b29a      	uxth	r2, r3
 800deee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800def2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800def4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800def8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	891b      	ldrh	r3, [r3, #8]
 800df00:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800df04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	6959      	ldr	r1, [r3, #20]
 800df10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df14:	b29b      	uxth	r3, r3
 800df16:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800df1a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800df1e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800df22:	6800      	ldr	r0, [r0, #0]
 800df24:	f000 fe55 	bl	800ebd2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800df28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	009b      	lsls	r3, r3, #2
 800df40:	4413      	add	r3, r2
 800df42:	881b      	ldrh	r3, [r3, #0]
 800df44:	b29b      	uxth	r3, r3
 800df46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800df4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800df4e:	817b      	strh	r3, [r7, #10]
 800df50:	897b      	ldrh	r3, [r7, #10]
 800df52:	f083 0310 	eor.w	r3, r3, #16
 800df56:	817b      	strh	r3, [r7, #10]
 800df58:	897b      	ldrh	r3, [r7, #10]
 800df5a:	f083 0320 	eor.w	r3, r3, #32
 800df5e:	817b      	strh	r3, [r7, #10]
 800df60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	009b      	lsls	r3, r3, #2
 800df78:	441a      	add	r2, r3
 800df7a:	897b      	ldrh	r3, [r7, #10]
 800df7c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df80:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df84:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	8013      	strh	r3, [r2, #0]
 800df90:	f000 bcdf 	b.w	800e952 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800df94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800df98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	7b1b      	ldrb	r3, [r3, #12]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	f040 80bc 	bne.w	800e11e <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800dfa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	699a      	ldr	r2, [r3, #24]
 800dfb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	691b      	ldr	r3, [r3, #16]
 800dfbe:	429a      	cmp	r2, r3
 800dfc0:	d917      	bls.n	800dff2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800dfc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800dfd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	699a      	ldr	r2, [r3, #24]
 800dfde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dfe2:	1ad2      	subs	r2, r2, r3
 800dfe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	619a      	str	r2, [r3, #24]
 800dff0:	e00e      	b.n	800e010 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800dff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	699b      	ldr	r3, [r3, #24]
 800dffe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800e002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e006:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	2200      	movs	r2, #0
 800e00e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e014:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e01e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e022:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	461a      	mov	r2, r3
 800e030:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e034:	4413      	add	r3, r2
 800e036:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e03a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e03e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	00da      	lsls	r2, r3, #3
 800e048:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e04c:	4413      	add	r3, r2
 800e04e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e052:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e056:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e05a:	881b      	ldrh	r3, [r3, #0]
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e062:	b29a      	uxth	r2, r3
 800e064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e068:	801a      	strh	r2, [r3, #0]
 800e06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d10d      	bne.n	800e08e <USB_EPStartXfer+0xe94>
 800e072:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e076:	881b      	ldrh	r3, [r3, #0]
 800e078:	b29b      	uxth	r3, r3
 800e07a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e07e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e082:	b29a      	uxth	r2, r3
 800e084:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e088:	801a      	strh	r2, [r3, #0]
 800e08a:	f000 bc28 	b.w	800e8de <USB_EPStartXfer+0x16e4>
 800e08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e092:	2b3e      	cmp	r3, #62	@ 0x3e
 800e094:	d81f      	bhi.n	800e0d6 <USB_EPStartXfer+0xedc>
 800e096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e09a:	085b      	lsrs	r3, r3, #1
 800e09c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e0a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0a4:	f003 0301 	and.w	r3, r3, #1
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d004      	beq.n	800e0b6 <USB_EPStartXfer+0xebc>
 800e0ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e0b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e0ba:	881b      	ldrh	r3, [r3, #0]
 800e0bc:	b29a      	uxth	r2, r3
 800e0be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	029b      	lsls	r3, r3, #10
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	b29a      	uxth	r2, r3
 800e0cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e0d0:	801a      	strh	r2, [r3, #0]
 800e0d2:	f000 bc04 	b.w	800e8de <USB_EPStartXfer+0x16e4>
 800e0d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0da:	095b      	lsrs	r3, r3, #5
 800e0dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e0e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0e4:	f003 031f 	and.w	r3, r3, #31
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d104      	bne.n	800e0f6 <USB_EPStartXfer+0xefc>
 800e0ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e0f0:	3b01      	subs	r3, #1
 800e0f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e0f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e0fa:	881b      	ldrh	r3, [r3, #0]
 800e0fc:	b29a      	uxth	r2, r3
 800e0fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e102:	b29b      	uxth	r3, r3
 800e104:	029b      	lsls	r3, r3, #10
 800e106:	b29b      	uxth	r3, r3
 800e108:	4313      	orrs	r3, r2
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e114:	b29a      	uxth	r2, r3
 800e116:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e11a:	801a      	strh	r2, [r3, #0]
 800e11c:	e3df      	b.n	800e8de <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e11e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e122:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	78db      	ldrb	r3, [r3, #3]
 800e12a:	2b02      	cmp	r3, #2
 800e12c:	f040 8218 	bne.w	800e560 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e130:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	785b      	ldrb	r3, [r3, #1]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f040 809d 	bne.w	800e27c <USB_EPStartXfer+0x1082>
 800e142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e154:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e15e:	b29b      	uxth	r3, r3
 800e160:	461a      	mov	r2, r3
 800e162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e166:	4413      	add	r3, r2
 800e168:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800e16c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	00da      	lsls	r2, r3, #3
 800e17a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800e17e:	4413      	add	r3, r2
 800e180:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e184:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800e188:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e18c:	881b      	ldrh	r3, [r3, #0]
 800e18e:	b29b      	uxth	r3, r3
 800e190:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e194:	b29a      	uxth	r2, r3
 800e196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e19a:	801a      	strh	r2, [r3, #0]
 800e19c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	691b      	ldr	r3, [r3, #16]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d10c      	bne.n	800e1c6 <USB_EPStartXfer+0xfcc>
 800e1ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e1b0:	881b      	ldrh	r3, [r3, #0]
 800e1b2:	b29b      	uxth	r3, r3
 800e1b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e1b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e1bc:	b29a      	uxth	r2, r3
 800e1be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e1c2:	801a      	strh	r2, [r3, #0]
 800e1c4:	e08f      	b.n	800e2e6 <USB_EPStartXfer+0x10ec>
 800e1c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	691b      	ldr	r3, [r3, #16]
 800e1d2:	2b3e      	cmp	r3, #62	@ 0x3e
 800e1d4:	d826      	bhi.n	800e224 <USB_EPStartXfer+0x102a>
 800e1d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	691b      	ldr	r3, [r3, #16]
 800e1e2:	085b      	lsrs	r3, r3, #1
 800e1e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e1e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	691b      	ldr	r3, [r3, #16]
 800e1f4:	f003 0301 	and.w	r3, r3, #1
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d004      	beq.n	800e206 <USB_EPStartXfer+0x100c>
 800e1fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e200:	3301      	adds	r3, #1
 800e202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e206:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e20a:	881b      	ldrh	r3, [r3, #0]
 800e20c:	b29a      	uxth	r2, r3
 800e20e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e212:	b29b      	uxth	r3, r3
 800e214:	029b      	lsls	r3, r3, #10
 800e216:	b29b      	uxth	r3, r3
 800e218:	4313      	orrs	r3, r2
 800e21a:	b29a      	uxth	r2, r3
 800e21c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e220:	801a      	strh	r2, [r3, #0]
 800e222:	e060      	b.n	800e2e6 <USB_EPStartXfer+0x10ec>
 800e224:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e228:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	691b      	ldr	r3, [r3, #16]
 800e230:	095b      	lsrs	r3, r3, #5
 800e232:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e23a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	691b      	ldr	r3, [r3, #16]
 800e242:	f003 031f 	and.w	r3, r3, #31
 800e246:	2b00      	cmp	r3, #0
 800e248:	d104      	bne.n	800e254 <USB_EPStartXfer+0x105a>
 800e24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e24e:	3b01      	subs	r3, #1
 800e250:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800e254:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e258:	881b      	ldrh	r3, [r3, #0]
 800e25a:	b29a      	uxth	r2, r3
 800e25c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800e260:	b29b      	uxth	r3, r3
 800e262:	029b      	lsls	r3, r3, #10
 800e264:	b29b      	uxth	r3, r3
 800e266:	4313      	orrs	r3, r2
 800e268:	b29b      	uxth	r3, r3
 800e26a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e26e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e272:	b29a      	uxth	r2, r3
 800e274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800e278:	801a      	strh	r2, [r3, #0]
 800e27a:	e034      	b.n	800e2e6 <USB_EPStartXfer+0x10ec>
 800e27c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	785b      	ldrb	r3, [r3, #1]
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d12c      	bne.n	800e2e6 <USB_EPStartXfer+0x10ec>
 800e28c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e290:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e29a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e29e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	461a      	mov	r2, r3
 800e2ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e2b0:	4413      	add	r3, r2
 800e2b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800e2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	00da      	lsls	r2, r3, #3
 800e2c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e2c8:	4413      	add	r3, r2
 800e2ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e2ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800e2d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	691b      	ldr	r3, [r3, #16]
 800e2de:	b29a      	uxth	r2, r3
 800e2e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e2e4:	801a      	strh	r2, [r3, #0]
 800e2e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e2f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	785b      	ldrb	r3, [r3, #1]
 800e300:	2b00      	cmp	r3, #0
 800e302:	f040 809d 	bne.w	800e440 <USB_EPStartXfer+0x1246>
 800e306:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e30a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e318:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e322:	b29b      	uxth	r3, r3
 800e324:	461a      	mov	r2, r3
 800e326:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e32a:	4413      	add	r3, r2
 800e32c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800e330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e334:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	781b      	ldrb	r3, [r3, #0]
 800e33c:	00da      	lsls	r2, r3, #3
 800e33e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800e342:	4413      	add	r3, r2
 800e344:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e348:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800e34c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	b29b      	uxth	r3, r3
 800e354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e358:	b29a      	uxth	r2, r3
 800e35a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e35e:	801a      	strh	r2, [r3, #0]
 800e360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	691b      	ldr	r3, [r3, #16]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d10c      	bne.n	800e38a <USB_EPStartXfer+0x1190>
 800e370:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e374:	881b      	ldrh	r3, [r3, #0]
 800e376:	b29b      	uxth	r3, r3
 800e378:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e37c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e380:	b29a      	uxth	r2, r3
 800e382:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e386:	801a      	strh	r2, [r3, #0]
 800e388:	e088      	b.n	800e49c <USB_EPStartXfer+0x12a2>
 800e38a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e38e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	691b      	ldr	r3, [r3, #16]
 800e396:	2b3e      	cmp	r3, #62	@ 0x3e
 800e398:	d826      	bhi.n	800e3e8 <USB_EPStartXfer+0x11ee>
 800e39a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e39e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	691b      	ldr	r3, [r3, #16]
 800e3a6:	085b      	lsrs	r3, r3, #1
 800e3a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e3ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	691b      	ldr	r3, [r3, #16]
 800e3b8:	f003 0301 	and.w	r3, r3, #1
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d004      	beq.n	800e3ca <USB_EPStartXfer+0x11d0>
 800e3c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e3c4:	3301      	adds	r3, #1
 800e3c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e3ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e3ce:	881b      	ldrh	r3, [r3, #0]
 800e3d0:	b29a      	uxth	r2, r3
 800e3d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	029b      	lsls	r3, r3, #10
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	4313      	orrs	r3, r2
 800e3de:	b29a      	uxth	r2, r3
 800e3e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e3e4:	801a      	strh	r2, [r3, #0]
 800e3e6:	e059      	b.n	800e49c <USB_EPStartXfer+0x12a2>
 800e3e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	095b      	lsrs	r3, r3, #5
 800e3f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e3fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	691b      	ldr	r3, [r3, #16]
 800e406:	f003 031f 	and.w	r3, r3, #31
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d104      	bne.n	800e418 <USB_EPStartXfer+0x121e>
 800e40e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e412:	3b01      	subs	r3, #1
 800e414:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800e418:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e41c:	881b      	ldrh	r3, [r3, #0]
 800e41e:	b29a      	uxth	r2, r3
 800e420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800e424:	b29b      	uxth	r3, r3
 800e426:	029b      	lsls	r3, r3, #10
 800e428:	b29b      	uxth	r3, r3
 800e42a:	4313      	orrs	r3, r2
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e432:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e436:	b29a      	uxth	r2, r3
 800e438:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e43c:	801a      	strh	r2, [r3, #0]
 800e43e:	e02d      	b.n	800e49c <USB_EPStartXfer+0x12a2>
 800e440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	785b      	ldrb	r3, [r3, #1]
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d125      	bne.n	800e49c <USB_EPStartXfer+0x12a2>
 800e450:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e454:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e45e:	b29b      	uxth	r3, r3
 800e460:	461a      	mov	r2, r3
 800e462:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e466:	4413      	add	r3, r2
 800e468:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800e46c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e470:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	00da      	lsls	r2, r3, #3
 800e47a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800e47e:	4413      	add	r3, r2
 800e480:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e484:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800e488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e48c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	691b      	ldr	r3, [r3, #16]
 800e494:	b29a      	uxth	r2, r3
 800e496:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800e49a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800e49c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	69db      	ldr	r3, [r3, #28]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	f000 8218 	beq.w	800e8de <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800e4ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4b6:	681a      	ldr	r2, [r3, #0]
 800e4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	4413      	add	r3, r2
 800e4c8:	881b      	ldrh	r3, [r3, #0]
 800e4ca:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e4ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e4d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d005      	beq.n	800e4e6 <USB_EPStartXfer+0x12ec>
 800e4da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e4de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d10d      	bne.n	800e502 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e4e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e4ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	f040 81f5 	bne.w	800e8de <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800e4f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800e4f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	f040 81ee 	bne.w	800e8de <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800e502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e506:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	4413      	add	r3, r2
 800e51c:	881b      	ldrh	r3, [r3, #0]
 800e51e:	b29b      	uxth	r3, r3
 800e520:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e528:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800e52c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e530:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e534:	681a      	ldr	r2, [r3, #0]
 800e536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e53a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	441a      	add	r2, r3
 800e546:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e54a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e54e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e552:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e556:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e55a:	b29b      	uxth	r3, r3
 800e55c:	8013      	strh	r3, [r2, #0]
 800e55e:	e1be      	b.n	800e8de <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800e560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e564:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	78db      	ldrb	r3, [r3, #3]
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	f040 81b4 	bne.w	800e8da <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800e572:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e576:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	699a      	ldr	r2, [r3, #24]
 800e57e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e582:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	691b      	ldr	r3, [r3, #16]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d917      	bls.n	800e5be <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800e58e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e592:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	691b      	ldr	r3, [r3, #16]
 800e59a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800e59e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	699a      	ldr	r2, [r3, #24]
 800e5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ae:	1ad2      	subs	r2, r2, r3
 800e5b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	619a      	str	r2, [r3, #24]
 800e5bc:	e00e      	b.n	800e5dc <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 800e5be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	699b      	ldr	r3, [r3, #24]
 800e5ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800e5ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800e5dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	785b      	ldrb	r3, [r3, #1]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f040 8085 	bne.w	800e6f8 <USB_EPStartXfer+0x14fe>
 800e5ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e5fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e600:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e60a:	b29b      	uxth	r3, r3
 800e60c:	461a      	mov	r2, r3
 800e60e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e612:	4413      	add	r3, r2
 800e614:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800e618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e61c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	00da      	lsls	r2, r3, #3
 800e626:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e62a:	4413      	add	r3, r2
 800e62c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e630:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800e634:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e638:	881b      	ldrh	r3, [r3, #0]
 800e63a:	b29b      	uxth	r3, r3
 800e63c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e640:	b29a      	uxth	r2, r3
 800e642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e646:	801a      	strh	r2, [r3, #0]
 800e648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d10c      	bne.n	800e66a <USB_EPStartXfer+0x1470>
 800e650:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e654:	881b      	ldrh	r3, [r3, #0]
 800e656:	b29b      	uxth	r3, r3
 800e658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e65c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e660:	b29a      	uxth	r2, r3
 800e662:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e666:	801a      	strh	r2, [r3, #0]
 800e668:	e077      	b.n	800e75a <USB_EPStartXfer+0x1560>
 800e66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e66e:	2b3e      	cmp	r3, #62	@ 0x3e
 800e670:	d81e      	bhi.n	800e6b0 <USB_EPStartXfer+0x14b6>
 800e672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e676:	085b      	lsrs	r3, r3, #1
 800e678:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e680:	f003 0301 	and.w	r3, r3, #1
 800e684:	2b00      	cmp	r3, #0
 800e686:	d004      	beq.n	800e692 <USB_EPStartXfer+0x1498>
 800e688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e68c:	3301      	adds	r3, #1
 800e68e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e692:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e696:	881b      	ldrh	r3, [r3, #0]
 800e698:	b29a      	uxth	r2, r3
 800e69a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e69e:	b29b      	uxth	r3, r3
 800e6a0:	029b      	lsls	r3, r3, #10
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	4313      	orrs	r3, r2
 800e6a6:	b29a      	uxth	r2, r3
 800e6a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e6ac:	801a      	strh	r2, [r3, #0]
 800e6ae:	e054      	b.n	800e75a <USB_EPStartXfer+0x1560>
 800e6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6b4:	095b      	lsrs	r3, r3, #5
 800e6b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6be:	f003 031f 	and.w	r3, r3, #31
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d104      	bne.n	800e6d0 <USB_EPStartXfer+0x14d6>
 800e6c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6ca:	3b01      	subs	r3, #1
 800e6cc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800e6d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e6d4:	881b      	ldrh	r3, [r3, #0]
 800e6d6:	b29a      	uxth	r2, r3
 800e6d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	029b      	lsls	r3, r3, #10
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	4313      	orrs	r3, r2
 800e6e4:	b29b      	uxth	r3, r3
 800e6e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e6ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6ee:	b29a      	uxth	r2, r3
 800e6f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e6f4:	801a      	strh	r2, [r3, #0]
 800e6f6:	e030      	b.n	800e75a <USB_EPStartXfer+0x1560>
 800e6f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	785b      	ldrb	r3, [r3, #1]
 800e704:	2b01      	cmp	r3, #1
 800e706:	d128      	bne.n	800e75a <USB_EPStartXfer+0x1560>
 800e708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e70c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e71a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e724:	b29b      	uxth	r3, r3
 800e726:	461a      	mov	r2, r3
 800e728:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e72c:	4413      	add	r3, r2
 800e72e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800e732:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e736:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	781b      	ldrb	r3, [r3, #0]
 800e73e:	00da      	lsls	r2, r3, #3
 800e740:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e744:	4413      	add	r3, r2
 800e746:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e74a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800e74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e752:	b29a      	uxth	r2, r3
 800e754:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e758:	801a      	strh	r2, [r3, #0]
 800e75a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e75e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e76c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	785b      	ldrb	r3, [r3, #1]
 800e774:	2b00      	cmp	r3, #0
 800e776:	f040 8085 	bne.w	800e884 <USB_EPStartXfer+0x168a>
 800e77a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e77e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e78c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e796:	b29b      	uxth	r3, r3
 800e798:	461a      	mov	r2, r3
 800e79a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e79e:	4413      	add	r3, r2
 800e7a0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800e7a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	781b      	ldrb	r3, [r3, #0]
 800e7b0:	00da      	lsls	r2, r3, #3
 800e7b2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e7b6:	4413      	add	r3, r2
 800e7b8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e7bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800e7c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e7c4:	881b      	ldrh	r3, [r3, #0]
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e7d2:	801a      	strh	r2, [r3, #0]
 800e7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d10c      	bne.n	800e7f6 <USB_EPStartXfer+0x15fc>
 800e7dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e7e0:	881b      	ldrh	r3, [r3, #0]
 800e7e2:	b29b      	uxth	r3, r3
 800e7e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7ec:	b29a      	uxth	r2, r3
 800e7ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e7f2:	801a      	strh	r2, [r3, #0]
 800e7f4:	e073      	b.n	800e8de <USB_EPStartXfer+0x16e4>
 800e7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7fa:	2b3e      	cmp	r3, #62	@ 0x3e
 800e7fc:	d81e      	bhi.n	800e83c <USB_EPStartXfer+0x1642>
 800e7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e802:	085b      	lsrs	r3, r3, #1
 800e804:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e80c:	f003 0301 	and.w	r3, r3, #1
 800e810:	2b00      	cmp	r3, #0
 800e812:	d004      	beq.n	800e81e <USB_EPStartXfer+0x1624>
 800e814:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e818:	3301      	adds	r3, #1
 800e81a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e81e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e822:	881b      	ldrh	r3, [r3, #0]
 800e824:	b29a      	uxth	r2, r3
 800e826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e82a:	b29b      	uxth	r3, r3
 800e82c:	029b      	lsls	r3, r3, #10
 800e82e:	b29b      	uxth	r3, r3
 800e830:	4313      	orrs	r3, r2
 800e832:	b29a      	uxth	r2, r3
 800e834:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e838:	801a      	strh	r2, [r3, #0]
 800e83a:	e050      	b.n	800e8de <USB_EPStartXfer+0x16e4>
 800e83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e840:	095b      	lsrs	r3, r3, #5
 800e842:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e84a:	f003 031f 	and.w	r3, r3, #31
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d104      	bne.n	800e85c <USB_EPStartXfer+0x1662>
 800e852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e856:	3b01      	subs	r3, #1
 800e858:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800e85c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e860:	881b      	ldrh	r3, [r3, #0]
 800e862:	b29a      	uxth	r2, r3
 800e864:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800e868:	b29b      	uxth	r3, r3
 800e86a:	029b      	lsls	r3, r3, #10
 800e86c:	b29b      	uxth	r3, r3
 800e86e:	4313      	orrs	r3, r2
 800e870:	b29b      	uxth	r3, r3
 800e872:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e876:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e87a:	b29a      	uxth	r2, r3
 800e87c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800e880:	801a      	strh	r2, [r3, #0]
 800e882:	e02c      	b.n	800e8de <USB_EPStartXfer+0x16e4>
 800e884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	785b      	ldrb	r3, [r3, #1]
 800e890:	2b01      	cmp	r3, #1
 800e892:	d124      	bne.n	800e8de <USB_EPStartXfer+0x16e4>
 800e894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e898:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e8a2:	b29b      	uxth	r3, r3
 800e8a4:	461a      	mov	r2, r3
 800e8a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e8aa:	4413      	add	r3, r2
 800e8ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800e8b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	781b      	ldrb	r3, [r3, #0]
 800e8bc:	00da      	lsls	r2, r3, #3
 800e8be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e8c2:	4413      	add	r3, r2
 800e8c4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e8c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e8cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8d0:	b29a      	uxth	r2, r3
 800e8d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e8d6:	801a      	strh	r2, [r3, #0]
 800e8d8:	e001      	b.n	800e8de <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	e03a      	b.n	800e954 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e8de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e8e6:	681a      	ldr	r2, [r3, #0]
 800e8e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	4413      	add	r3, r2
 800e8f8:	881b      	ldrh	r3, [r3, #0]
 800e8fa:	b29b      	uxth	r3, r3
 800e8fc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e900:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e904:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e908:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e90c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e910:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e914:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e918:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e91c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e920:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e924:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e928:	681a      	ldr	r2, [r3, #0]
 800e92a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e92e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	009b      	lsls	r3, r3, #2
 800e938:	441a      	add	r2, r3
 800e93a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e93e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e942:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e94a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e94e:	b29b      	uxth	r3, r3
 800e950:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e952:	2300      	movs	r3, #0
}
 800e954:	4618      	mov	r0, r3
 800e956:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e95a:	46bd      	mov	sp, r7
 800e95c:	bd80      	pop	{r7, pc}

0800e95e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e95e:	b480      	push	{r7}
 800e960:	b085      	sub	sp, #20
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]
 800e966:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	785b      	ldrb	r3, [r3, #1]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d020      	beq.n	800e9b2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	781b      	ldrb	r3, [r3, #0]
 800e976:	009b      	lsls	r3, r3, #2
 800e978:	4413      	add	r3, r2
 800e97a:	881b      	ldrh	r3, [r3, #0]
 800e97c:	b29b      	uxth	r3, r3
 800e97e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e986:	81bb      	strh	r3, [r7, #12]
 800e988:	89bb      	ldrh	r3, [r7, #12]
 800e98a:	f083 0310 	eor.w	r3, r3, #16
 800e98e:	81bb      	strh	r3, [r7, #12]
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	781b      	ldrb	r3, [r3, #0]
 800e996:	009b      	lsls	r3, r3, #2
 800e998:	441a      	add	r2, r3
 800e99a:	89bb      	ldrh	r3, [r7, #12]
 800e99c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e9a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e9a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	8013      	strh	r3, [r2, #0]
 800e9b0:	e01f      	b.n	800e9f2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	009b      	lsls	r3, r3, #2
 800e9ba:	4413      	add	r3, r2
 800e9bc:	881b      	ldrh	r3, [r3, #0]
 800e9be:	b29b      	uxth	r3, r3
 800e9c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e9c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e9c8:	81fb      	strh	r3, [r7, #14]
 800e9ca:	89fb      	ldrh	r3, [r7, #14]
 800e9cc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e9d0:	81fb      	strh	r3, [r7, #14]
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	009b      	lsls	r3, r3, #2
 800e9da:	441a      	add	r2, r3
 800e9dc:	89fb      	ldrh	r3, [r7, #14]
 800e9de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e9e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e9e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e9ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e9ee:	b29b      	uxth	r3, r3
 800e9f0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e9f2:	2300      	movs	r3, #0
}
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	3714      	adds	r7, #20
 800e9f8:	46bd      	mov	sp, r7
 800e9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fe:	4770      	bx	lr

0800ea00 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b087      	sub	sp, #28
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	7b1b      	ldrb	r3, [r3, #12]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	f040 809d 	bne.w	800eb4e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	785b      	ldrb	r3, [r3, #1]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d04c      	beq.n	800eab6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	781b      	ldrb	r3, [r3, #0]
 800ea22:	009b      	lsls	r3, r3, #2
 800ea24:	4413      	add	r3, r2
 800ea26:	881b      	ldrh	r3, [r3, #0]
 800ea28:	823b      	strh	r3, [r7, #16]
 800ea2a:	8a3b      	ldrh	r3, [r7, #16]
 800ea2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d01b      	beq.n	800ea6c <USB_EPClearStall+0x6c>
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	4413      	add	r3, r2
 800ea3e:	881b      	ldrh	r3, [r3, #0]
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea4a:	81fb      	strh	r3, [r7, #14]
 800ea4c:	687a      	ldr	r2, [r7, #4]
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	441a      	add	r2, r3
 800ea56:	89fb      	ldrh	r3, [r7, #14]
 800ea58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	78db      	ldrb	r3, [r3, #3]
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d06c      	beq.n	800eb4e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	009b      	lsls	r3, r3, #2
 800ea7c:	4413      	add	r3, r2
 800ea7e:	881b      	ldrh	r3, [r3, #0]
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ea86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ea8a:	81bb      	strh	r3, [r7, #12]
 800ea8c:	89bb      	ldrh	r3, [r7, #12]
 800ea8e:	f083 0320 	eor.w	r3, r3, #32
 800ea92:	81bb      	strh	r3, [r7, #12]
 800ea94:	687a      	ldr	r2, [r7, #4]
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	009b      	lsls	r3, r3, #2
 800ea9c:	441a      	add	r2, r3
 800ea9e:	89bb      	ldrh	r3, [r7, #12]
 800eaa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eaa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eaa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eaac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	8013      	strh	r3, [r2, #0]
 800eab4:	e04b      	b.n	800eb4e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800eab6:	687a      	ldr	r2, [r7, #4]
 800eab8:	683b      	ldr	r3, [r7, #0]
 800eaba:	781b      	ldrb	r3, [r3, #0]
 800eabc:	009b      	lsls	r3, r3, #2
 800eabe:	4413      	add	r3, r2
 800eac0:	881b      	ldrh	r3, [r3, #0]
 800eac2:	82fb      	strh	r3, [r7, #22]
 800eac4:	8afb      	ldrh	r3, [r7, #22]
 800eac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d01b      	beq.n	800eb06 <USB_EPClearStall+0x106>
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	009b      	lsls	r3, r3, #2
 800ead6:	4413      	add	r3, r2
 800ead8:	881b      	ldrh	r3, [r3, #0]
 800eada:	b29b      	uxth	r3, r3
 800eadc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eae4:	82bb      	strh	r3, [r7, #20]
 800eae6:	687a      	ldr	r2, [r7, #4]
 800eae8:	683b      	ldr	r3, [r7, #0]
 800eaea:	781b      	ldrb	r3, [r3, #0]
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	441a      	add	r2, r3
 800eaf0:	8abb      	ldrh	r3, [r7, #20]
 800eaf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eaf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eafa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800eafe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb02:	b29b      	uxth	r3, r3
 800eb04:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	683b      	ldr	r3, [r7, #0]
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	009b      	lsls	r3, r3, #2
 800eb0e:	4413      	add	r3, r2
 800eb10:	881b      	ldrh	r3, [r3, #0]
 800eb12:	b29b      	uxth	r3, r3
 800eb14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800eb18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb1c:	827b      	strh	r3, [r7, #18]
 800eb1e:	8a7b      	ldrh	r3, [r7, #18]
 800eb20:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800eb24:	827b      	strh	r3, [r7, #18]
 800eb26:	8a7b      	ldrh	r3, [r7, #18]
 800eb28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800eb2c:	827b      	strh	r3, [r7, #18]
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	009b      	lsls	r3, r3, #2
 800eb36:	441a      	add	r2, r3
 800eb38:	8a7b      	ldrh	r3, [r7, #18]
 800eb3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eb3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eb42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eb46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800eb4e:	2300      	movs	r3, #0
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	371c      	adds	r7, #28
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	b083      	sub	sp, #12
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	460b      	mov	r3, r1
 800eb66:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800eb68:	78fb      	ldrb	r3, [r7, #3]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d103      	bne.n	800eb76 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	2280      	movs	r2, #128	@ 0x80
 800eb72:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800eb76:	2300      	movs	r3, #0
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	370c      	adds	r7, #12
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb82:	4770      	bx	lr

0800eb84 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb9c:	b29a      	uxth	r2, r3
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800eba4:	2300      	movs	r3, #0
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	370c      	adds	r7, #12
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr

0800ebb2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ebb2:	b480      	push	{r7}
 800ebb4:	b085      	sub	sp, #20
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ebc0:	b29b      	uxth	r3, r3
 800ebc2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	3714      	adds	r7, #20
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd0:	4770      	bx	lr

0800ebd2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ebd2:	b480      	push	{r7}
 800ebd4:	b08b      	sub	sp, #44	@ 0x2c
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	60f8      	str	r0, [r7, #12]
 800ebda:	60b9      	str	r1, [r7, #8]
 800ebdc:	4611      	mov	r1, r2
 800ebde:	461a      	mov	r2, r3
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	80fb      	strh	r3, [r7, #6]
 800ebe4:	4613      	mov	r3, r2
 800ebe6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ebe8:	88bb      	ldrh	r3, [r7, #4]
 800ebea:	3301      	adds	r3, #1
 800ebec:	085b      	lsrs	r3, r3, #1
 800ebee:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ebf4:	68bb      	ldr	r3, [r7, #8]
 800ebf6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ebf8:	88fa      	ldrh	r2, [r7, #6]
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ec02:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec08:	e01b      	b.n	800ec42 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ec10:	69fb      	ldr	r3, [r7, #28]
 800ec12:	3301      	adds	r3, #1
 800ec14:	781b      	ldrb	r3, [r3, #0]
 800ec16:	021b      	lsls	r3, r3, #8
 800ec18:	b21a      	sxth	r2, r3
 800ec1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ec1e:	4313      	orrs	r3, r2
 800ec20:	b21b      	sxth	r3, r3
 800ec22:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ec24:	6a3b      	ldr	r3, [r7, #32]
 800ec26:	8a7a      	ldrh	r2, [r7, #18]
 800ec28:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ec2a:	6a3b      	ldr	r3, [r7, #32]
 800ec2c:	3302      	adds	r3, #2
 800ec2e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ec30:	69fb      	ldr	r3, [r7, #28]
 800ec32:	3301      	adds	r3, #1
 800ec34:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ec36:	69fb      	ldr	r3, [r7, #28]
 800ec38:	3301      	adds	r3, #1
 800ec3a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ec3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d1e0      	bne.n	800ec0a <USB_WritePMA+0x38>
  }
}
 800ec48:	bf00      	nop
 800ec4a:	bf00      	nop
 800ec4c:	372c      	adds	r7, #44	@ 0x2c
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec54:	4770      	bx	lr

0800ec56 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ec56:	b480      	push	{r7}
 800ec58:	b08b      	sub	sp, #44	@ 0x2c
 800ec5a:	af00      	add	r7, sp, #0
 800ec5c:	60f8      	str	r0, [r7, #12]
 800ec5e:	60b9      	str	r1, [r7, #8]
 800ec60:	4611      	mov	r1, r2
 800ec62:	461a      	mov	r2, r3
 800ec64:	460b      	mov	r3, r1
 800ec66:	80fb      	strh	r3, [r7, #6]
 800ec68:	4613      	mov	r3, r2
 800ec6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ec6c:	88bb      	ldrh	r3, [r7, #4]
 800ec6e:	085b      	lsrs	r3, r3, #1
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ec78:	68bb      	ldr	r3, [r7, #8]
 800ec7a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ec7c:	88fa      	ldrh	r2, [r7, #6]
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	4413      	add	r3, r2
 800ec82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ec86:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ec88:	69bb      	ldr	r3, [r7, #24]
 800ec8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ec8c:	e018      	b.n	800ecc0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ec8e:	6a3b      	ldr	r3, [r7, #32]
 800ec90:	881b      	ldrh	r3, [r3, #0]
 800ec92:	b29b      	uxth	r3, r3
 800ec94:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ec96:	6a3b      	ldr	r3, [r7, #32]
 800ec98:	3302      	adds	r3, #2
 800ec9a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	b2da      	uxtb	r2, r3
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800eca4:	69fb      	ldr	r3, [r7, #28]
 800eca6:	3301      	adds	r3, #1
 800eca8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ecaa:	693b      	ldr	r3, [r7, #16]
 800ecac:	0a1b      	lsrs	r3, r3, #8
 800ecae:	b2da      	uxtb	r2, r3
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ecb4:	69fb      	ldr	r3, [r7, #28]
 800ecb6:	3301      	adds	r3, #1
 800ecb8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ecba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800ecc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1e3      	bne.n	800ec8e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ecc6:	88bb      	ldrh	r3, [r7, #4]
 800ecc8:	f003 0301 	and.w	r3, r3, #1
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d007      	beq.n	800ece2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ecd2:	6a3b      	ldr	r3, [r7, #32]
 800ecd4:	881b      	ldrh	r3, [r3, #0]
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	b2da      	uxtb	r2, r3
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	701a      	strb	r2, [r3, #0]
  }
}
 800ece2:	bf00      	nop
 800ece4:	372c      	adds	r7, #44	@ 0x2c
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr

0800ecee <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ecee:	b580      	push	{r7, lr}
 800ecf0:	b084      	sub	sp, #16
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
 800ecf6:	460b      	mov	r3, r1
 800ecf8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ecfa:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ecfe:	f002 f90f 	bl	8010f20 <USBD_static_malloc>
 800ed02:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d105      	bne.n	800ed16 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2200      	movs	r2, #0
 800ed0e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    return (uint8_t)USBD_EMEM;
 800ed12:	2302      	movs	r3, #2
 800ed14:	e066      	b.n	800ede4 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	68fa      	ldr	r2, [r7, #12]
 800ed1a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	7c1b      	ldrb	r3, [r3, #16]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d119      	bne.n	800ed5a <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ed26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ed2a:	2202      	movs	r2, #2
 800ed2c:	2181      	movs	r1, #129	@ 0x81
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f001 ff9d 	bl	8010c6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2201      	movs	r2, #1
 800ed38:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ed3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ed3e:	2202      	movs	r2, #2
 800ed40:	2101      	movs	r1, #1
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f001 ff93 	bl	8010c6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2210      	movs	r2, #16
 800ed54:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
 800ed58:	e016      	b.n	800ed88 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ed5a:	2340      	movs	r3, #64	@ 0x40
 800ed5c:	2202      	movs	r2, #2
 800ed5e:	2181      	movs	r1, #129	@ 0x81
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f001 ff84 	bl	8010c6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2201      	movs	r2, #1
 800ed6a:	871a      	strh	r2, [r3, #56]	@ 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ed6c:	2340      	movs	r3, #64	@ 0x40
 800ed6e:	2202      	movs	r2, #2
 800ed70:	2101      	movs	r1, #1
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f001 ff7b 	bl	8010c6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2201      	movs	r2, #1
 800ed7c:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2210      	movs	r2, #16
 800ed84:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ed88:	2308      	movs	r3, #8
 800ed8a:	2203      	movs	r2, #3
 800ed8c:	2182      	movs	r1, #130	@ 0x82
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f001 ff6d 	bl	8010c6e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2201      	movs	r2, #1
 800ed98:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	2200      	movs	r2, #0
 800edaa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	2200      	movs	r2, #0
 800edb2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	7c1b      	ldrb	r3, [r3, #16]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d109      	bne.n	800edd2 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800edc4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800edc8:	2101      	movs	r1, #1
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f002 f83e 	bl	8010e4c <USBD_LL_PrepareReceive>
 800edd0:	e007      	b.n	800ede2 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800edd8:	2340      	movs	r3, #64	@ 0x40
 800edda:	2101      	movs	r1, #1
 800eddc:	6878      	ldr	r0, [r7, #4]
 800edde:	f002 f835 	bl	8010e4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ede2:	2300      	movs	r3, #0
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	3710      	adds	r7, #16
 800ede8:	46bd      	mov	sp, r7
 800edea:	bd80      	pop	{r7, pc}

0800edec <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	460b      	mov	r3, r1
 800edf6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800edf8:	2181      	movs	r1, #129	@ 0x81
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f001 ff5d 	bl	8010cba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	2200      	movs	r2, #0
 800ee04:	871a      	strh	r2, [r3, #56]	@ 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ee06:	2101      	movs	r1, #1
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f001 ff56 	bl	8010cba <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2200      	movs	r2, #0
 800ee12:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ee16:	2182      	movs	r1, #130	@ 0x82
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f001 ff4e 	bl	8010cba <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2200      	movs	r2, #0
 800ee22:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d00e      	beq.n	800ee56 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ee3e:	685b      	ldr	r3, [r3, #4]
 800ee40:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f002 f877 	bl	8010f3c <USBD_static_free>
    pdev->pClassData = NULL;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2200      	movs	r2, #0
 800ee52:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ee56:	2300      	movs	r3, #0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b086      	sub	sp, #24
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
 800ee68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ee72:	2300      	movs	r3, #0
 800ee74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ee76:	2300      	movs	r3, #0
 800ee78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d101      	bne.n	800ee88 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800ee84:	2303      	movs	r3, #3
 800ee86:	e0af      	b.n	800efe8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d03f      	beq.n	800ef14 <USBD_CDC_Setup+0xb4>
 800ee94:	2b20      	cmp	r3, #32
 800ee96:	f040 809f 	bne.w	800efd8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	88db      	ldrh	r3, [r3, #6]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d02e      	beq.n	800ef00 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	781b      	ldrb	r3, [r3, #0]
 800eea6:	b25b      	sxtb	r3, r3
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	da16      	bge.n	800eeda <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800eeb2:	689b      	ldr	r3, [r3, #8]
 800eeb4:	683a      	ldr	r2, [r7, #0]
 800eeb6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800eeb8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800eeba:	683a      	ldr	r2, [r7, #0]
 800eebc:	88d2      	ldrh	r2, [r2, #6]
 800eebe:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	88db      	ldrh	r3, [r3, #6]
 800eec4:	2b07      	cmp	r3, #7
 800eec6:	bf28      	it	cs
 800eec8:	2307      	movcs	r3, #7
 800eeca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800eecc:	693b      	ldr	r3, [r7, #16]
 800eece:	89fa      	ldrh	r2, [r7, #14]
 800eed0:	4619      	mov	r1, r3
 800eed2:	6878      	ldr	r0, [r7, #4]
 800eed4:	f001 facd 	bl	8010472 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800eed8:	e085      	b.n	800efe6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	785a      	ldrb	r2, [r3, #1]
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	88db      	ldrh	r3, [r3, #6]
 800eee8:	b2da      	uxtb	r2, r3
 800eeea:	693b      	ldr	r3, [r7, #16]
 800eeec:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800eef0:	6939      	ldr	r1, [r7, #16]
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	88db      	ldrh	r3, [r3, #6]
 800eef6:	461a      	mov	r2, r3
 800eef8:	6878      	ldr	r0, [r7, #4]
 800eefa:	f001 fae6 	bl	80104ca <USBD_CtlPrepareRx>
      break;
 800eefe:	e072      	b.n	800efe6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800ef06:	689b      	ldr	r3, [r3, #8]
 800ef08:	683a      	ldr	r2, [r7, #0]
 800ef0a:	7850      	ldrb	r0, [r2, #1]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	6839      	ldr	r1, [r7, #0]
 800ef10:	4798      	blx	r3
      break;
 800ef12:	e068      	b.n	800efe6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	785b      	ldrb	r3, [r3, #1]
 800ef18:	2b0b      	cmp	r3, #11
 800ef1a:	d852      	bhi.n	800efc2 <USBD_CDC_Setup+0x162>
 800ef1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ef24 <USBD_CDC_Setup+0xc4>)
 800ef1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef22:	bf00      	nop
 800ef24:	0800ef55 	.word	0x0800ef55
 800ef28:	0800efd1 	.word	0x0800efd1
 800ef2c:	0800efc3 	.word	0x0800efc3
 800ef30:	0800efc3 	.word	0x0800efc3
 800ef34:	0800efc3 	.word	0x0800efc3
 800ef38:	0800efc3 	.word	0x0800efc3
 800ef3c:	0800efc3 	.word	0x0800efc3
 800ef40:	0800efc3 	.word	0x0800efc3
 800ef44:	0800efc3 	.word	0x0800efc3
 800ef48:	0800efc3 	.word	0x0800efc3
 800ef4c:	0800ef7f 	.word	0x0800ef7f
 800ef50:	0800efa9 	.word	0x0800efa9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef5a:	b2db      	uxtb	r3, r3
 800ef5c:	2b03      	cmp	r3, #3
 800ef5e:	d107      	bne.n	800ef70 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ef60:	f107 030a 	add.w	r3, r7, #10
 800ef64:	2202      	movs	r2, #2
 800ef66:	4619      	mov	r1, r3
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f001 fa82 	bl	8010472 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ef6e:	e032      	b.n	800efd6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ef70:	6839      	ldr	r1, [r7, #0]
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f001 fa0c 	bl	8010390 <USBD_CtlError>
            ret = USBD_FAIL;
 800ef78:	2303      	movs	r3, #3
 800ef7a:	75fb      	strb	r3, [r7, #23]
          break;
 800ef7c:	e02b      	b.n	800efd6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef84:	b2db      	uxtb	r3, r3
 800ef86:	2b03      	cmp	r3, #3
 800ef88:	d107      	bne.n	800ef9a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ef8a:	f107 030d 	add.w	r3, r7, #13
 800ef8e:	2201      	movs	r2, #1
 800ef90:	4619      	mov	r1, r3
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f001 fa6d 	bl	8010472 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ef98:	e01d      	b.n	800efd6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ef9a:	6839      	ldr	r1, [r7, #0]
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f001 f9f7 	bl	8010390 <USBD_CtlError>
            ret = USBD_FAIL;
 800efa2:	2303      	movs	r3, #3
 800efa4:	75fb      	strb	r3, [r7, #23]
          break;
 800efa6:	e016      	b.n	800efd6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	2b03      	cmp	r3, #3
 800efb2:	d00f      	beq.n	800efd4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800efb4:	6839      	ldr	r1, [r7, #0]
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f001 f9ea 	bl	8010390 <USBD_CtlError>
            ret = USBD_FAIL;
 800efbc:	2303      	movs	r3, #3
 800efbe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800efc0:	e008      	b.n	800efd4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800efc2:	6839      	ldr	r1, [r7, #0]
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f001 f9e3 	bl	8010390 <USBD_CtlError>
          ret = USBD_FAIL;
 800efca:	2303      	movs	r3, #3
 800efcc:	75fb      	strb	r3, [r7, #23]
          break;
 800efce:	e002      	b.n	800efd6 <USBD_CDC_Setup+0x176>
          break;
 800efd0:	bf00      	nop
 800efd2:	e008      	b.n	800efe6 <USBD_CDC_Setup+0x186>
          break;
 800efd4:	bf00      	nop
      }
      break;
 800efd6:	e006      	b.n	800efe6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800efd8:	6839      	ldr	r1, [r7, #0]
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f001 f9d8 	bl	8010390 <USBD_CtlError>
      ret = USBD_FAIL;
 800efe0:	2303      	movs	r3, #3
 800efe2:	75fb      	strb	r3, [r7, #23]
      break;
 800efe4:	bf00      	nop
  }

  return (uint8_t)ret;
 800efe6:	7dfb      	ldrb	r3, [r7, #23]
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3718      	adds	r7, #24
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}

0800eff0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eff0:	b580      	push	{r7, lr}
 800eff2:	b084      	sub	sp, #16
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
 800eff8:	460b      	mov	r3, r1
 800effa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 800f002:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d101      	bne.n	800f012 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f00e:	2303      	movs	r3, #3
 800f010:	e04f      	b.n	800f0b2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f018:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f01a:	78fa      	ldrb	r2, [r7, #3]
 800f01c:	6879      	ldr	r1, [r7, #4]
 800f01e:	4613      	mov	r3, r2
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	4413      	add	r3, r2
 800f024:	009b      	lsls	r3, r3, #2
 800f026:	440b      	add	r3, r1
 800f028:	3318      	adds	r3, #24
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d029      	beq.n	800f084 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f030:	78fa      	ldrb	r2, [r7, #3]
 800f032:	6879      	ldr	r1, [r7, #4]
 800f034:	4613      	mov	r3, r2
 800f036:	009b      	lsls	r3, r3, #2
 800f038:	4413      	add	r3, r2
 800f03a:	009b      	lsls	r3, r3, #2
 800f03c:	440b      	add	r3, r1
 800f03e:	3318      	adds	r3, #24
 800f040:	681a      	ldr	r2, [r3, #0]
 800f042:	78f9      	ldrb	r1, [r7, #3]
 800f044:	68f8      	ldr	r0, [r7, #12]
 800f046:	460b      	mov	r3, r1
 800f048:	009b      	lsls	r3, r3, #2
 800f04a:	440b      	add	r3, r1
 800f04c:	00db      	lsls	r3, r3, #3
 800f04e:	4403      	add	r3, r0
 800f050:	3320      	adds	r3, #32
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	fbb2 f1f3 	udiv	r1, r2, r3
 800f058:	fb01 f303 	mul.w	r3, r1, r3
 800f05c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d110      	bne.n	800f084 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f062:	78fa      	ldrb	r2, [r7, #3]
 800f064:	6879      	ldr	r1, [r7, #4]
 800f066:	4613      	mov	r3, r2
 800f068:	009b      	lsls	r3, r3, #2
 800f06a:	4413      	add	r3, r2
 800f06c:	009b      	lsls	r3, r3, #2
 800f06e:	440b      	add	r3, r1
 800f070:	3318      	adds	r3, #24
 800f072:	2200      	movs	r2, #0
 800f074:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f076:	78f9      	ldrb	r1, [r7, #3]
 800f078:	2300      	movs	r3, #0
 800f07a:	2200      	movs	r2, #0
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f001 fec4 	bl	8010e0a <USBD_LL_Transmit>
 800f082:	e015      	b.n	800f0b0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	2200      	movs	r2, #0
 800f088:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f092:	691b      	ldr	r3, [r3, #16]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d00b      	beq.n	800f0b0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f09e:	691b      	ldr	r3, [r3, #16]
 800f0a0:	68ba      	ldr	r2, [r7, #8]
 800f0a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f0a6:	68ba      	ldr	r2, [r7, #8]
 800f0a8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f0ac:	78fa      	ldrb	r2, [r7, #3]
 800f0ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f0b0:	2300      	movs	r3, #0
}
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	3710      	adds	r7, #16
 800f0b6:	46bd      	mov	sp, r7
 800f0b8:	bd80      	pop	{r7, pc}

0800f0ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f0ba:	b580      	push	{r7, lr}
 800f0bc:	b084      	sub	sp, #16
 800f0be:	af00      	add	r7, sp, #0
 800f0c0:	6078      	str	r0, [r7, #4]
 800f0c2:	460b      	mov	r3, r1
 800f0c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f0cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d101      	bne.n	800f0dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f0d8:	2303      	movs	r3, #3
 800f0da:	e015      	b.n	800f108 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f0dc:	78fb      	ldrb	r3, [r7, #3]
 800f0de:	4619      	mov	r1, r3
 800f0e0:	6878      	ldr	r0, [r7, #4]
 800f0e2:	f001 fed4 	bl	8010e8e <USBD_LL_GetRxDataSize>
 800f0e6:	4602      	mov	r2, r0
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f0f4:	68db      	ldr	r3, [r3, #12]
 800f0f6:	68fa      	ldr	r2, [r7, #12]
 800f0f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f102:	4611      	mov	r1, r2
 800f104:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f106:	2300      	movs	r3, #0
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3710      	adds	r7, #16
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f11e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d101      	bne.n	800f12a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f126:	2303      	movs	r3, #3
 800f128:	e01a      	b.n	800f160 <USBD_CDC_EP0_RxReady+0x50>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f130:	2b00      	cmp	r3, #0
 800f132:	d014      	beq.n	800f15e <USBD_CDC_EP0_RxReady+0x4e>
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f13a:	2bff      	cmp	r3, #255	@ 0xff
 800f13c:	d00f      	beq.n	800f15e <USBD_CDC_EP0_RxReady+0x4e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800f144:	689b      	ldr	r3, [r3, #8]
 800f146:	68fa      	ldr	r2, [r7, #12]
 800f148:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)hcdc->data,
 800f14c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f14e:	68fa      	ldr	r2, [r7, #12]
 800f150:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f154:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	22ff      	movs	r2, #255	@ 0xff
 800f15a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f15e:	2300      	movs	r3, #0
}
 800f160:	4618      	mov	r0, r3
 800f162:	3710      	adds	r7, #16
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}

0800f168 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	2243      	movs	r2, #67	@ 0x43
 800f174:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f176:	4b03      	ldr	r3, [pc, #12]	@ (800f184 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f178:	4618      	mov	r0, r3
 800f17a:	370c      	adds	r7, #12
 800f17c:	46bd      	mov	sp, r7
 800f17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f182:	4770      	bx	lr
 800f184:	200000fc 	.word	0x200000fc

0800f188 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f188:	b480      	push	{r7}
 800f18a:	b083      	sub	sp, #12
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2243      	movs	r2, #67	@ 0x43
 800f194:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f196:	4b03      	ldr	r3, [pc, #12]	@ (800f1a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f198:	4618      	mov	r0, r3
 800f19a:	370c      	adds	r7, #12
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr
 800f1a4:	200000b8 	.word	0x200000b8

0800f1a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	2243      	movs	r2, #67	@ 0x43
 800f1b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f1b6:	4b03      	ldr	r3, [pc, #12]	@ (800f1c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	370c      	adds	r7, #12
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr
 800f1c4:	20000140 	.word	0x20000140

0800f1c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b083      	sub	sp, #12
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	220a      	movs	r2, #10
 800f1d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f1d6:	4b03      	ldr	r3, [pc, #12]	@ (800f1e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	370c      	adds	r7, #12
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr
 800f1e4:	20000074 	.word	0x20000074

0800f1e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f1e8:	b480      	push	{r7}
 800f1ea:	b083      	sub	sp, #12
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d101      	bne.n	800f1fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f1f8:	2303      	movs	r3, #3
 800f1fa:	e004      	b.n	800f206 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	683a      	ldr	r2, [r7, #0]
 800f200:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  return (uint8_t)USBD_OK;
 800f204:	2300      	movs	r3, #0
}
 800f206:	4618      	mov	r0, r3
 800f208:	370c      	adds	r7, #12
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr

0800f212 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f212:	b480      	push	{r7}
 800f214:	b087      	sub	sp, #28
 800f216:	af00      	add	r7, sp, #0
 800f218:	60f8      	str	r0, [r7, #12]
 800f21a:	60b9      	str	r1, [r7, #8]
 800f21c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f21e:	68fb      	ldr	r3, [r7, #12]
 800f220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f224:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d101      	bne.n	800f230 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f22c:	2303      	movs	r3, #3
 800f22e:	e008      	b.n	800f242 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	68ba      	ldr	r2, [r7, #8]
 800f234:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	687a      	ldr	r2, [r7, #4]
 800f23c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800f240:	2300      	movs	r3, #0
}
 800f242:	4618      	mov	r0, r3
 800f244:	371c      	adds	r7, #28
 800f246:	46bd      	mov	sp, r7
 800f248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24c:	4770      	bx	lr

0800f24e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f24e:	b480      	push	{r7}
 800f250:	b085      	sub	sp, #20
 800f252:	af00      	add	r7, sp, #0
 800f254:	6078      	str	r0, [r7, #4]
 800f256:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f25e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d101      	bne.n	800f26a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f266:	2303      	movs	r3, #3
 800f268:	e004      	b.n	800f274 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	683a      	ldr	r2, [r7, #0]
 800f26e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800f272:	2300      	movs	r3, #0
}
 800f274:	4618      	mov	r0, r3
 800f276:	3714      	adds	r7, #20
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr

0800f280 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b084      	sub	sp, #16
 800f284:	af00      	add	r7, sp, #0
 800f286:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f28e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f290:	2301      	movs	r3, #1
 800f292:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d101      	bne.n	800f2a2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f29e:	2303      	movs	r3, #3
 800f2a0:	e01a      	b.n	800f2d8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d114      	bne.n	800f2d6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800f2c4:	68bb      	ldr	r3, [r7, #8]
 800f2c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800f2ca:	2181      	movs	r1, #129	@ 0x81
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f001 fd9c 	bl	8010e0a <USBD_LL_Transmit>

    ret = USBD_OK;
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3710      	adds	r7, #16
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}

0800f2e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f2e0:	b580      	push	{r7, lr}
 800f2e2:	b084      	sub	sp, #16
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f2ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d101      	bne.n	800f2fe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f2fa:	2303      	movs	r3, #3
 800f2fc:	e016      	b.n	800f32c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	7c1b      	ldrb	r3, [r3, #16]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d109      	bne.n	800f31a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f30c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f310:	2101      	movs	r1, #1
 800f312:	6878      	ldr	r0, [r7, #4]
 800f314:	f001 fd9a 	bl	8010e4c <USBD_LL_PrepareReceive>
 800f318:	e007      	b.n	800f32a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f320:	2340      	movs	r3, #64	@ 0x40
 800f322:	2101      	movs	r1, #1
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f001 fd91 	bl	8010e4c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f32a:	2300      	movs	r3, #0
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3710      	adds	r7, #16
 800f330:	46bd      	mov	sp, r7
 800f332:	bd80      	pop	{r7, pc}

0800f334 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b086      	sub	sp, #24
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	4613      	mov	r3, r2
 800f340:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d101      	bne.n	800f34c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f348:	2303      	movs	r3, #3
 800f34a:	e01f      	b.n	800f38c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	2200      	movs	r2, #0
 800f350:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData = NULL;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2200      	movs	r2, #0
 800f358:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
  pdev->pConfDesc = NULL;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	2200      	movs	r2, #0
 800f360:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d003      	beq.n	800f372 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	68ba      	ldr	r2, [r7, #8]
 800f36e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2201      	movs	r2, #1
 800f376:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	79fa      	ldrb	r2, [r7, #7]
 800f37e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f380:	68f8      	ldr	r0, [r7, #12]
 800f382:	f001 fbf9 	bl	8010b78 <USBD_LL_Init>
 800f386:	4603      	mov	r3, r0
 800f388:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f38a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3718      	adds	r7, #24
 800f390:	46bd      	mov	sp, r7
 800f392:	bd80      	pop	{r7, pc}

0800f394 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b084      	sub	sp, #16
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f39e:	2300      	movs	r3, #0
 800f3a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d101      	bne.n	800f3ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f3a8:	2303      	movs	r3, #3
 800f3aa:	e016      	b.n	800f3da <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	683a      	ldr	r2, [r7, #0]
 800f3b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d00b      	beq.n	800f3d8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f3c8:	f107 020e 	add.w	r2, r7, #14
 800f3cc:	4610      	mov	r0, r2
 800f3ce:	4798      	blx	r3
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f3d8:	2300      	movs	r3, #0
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3710      	adds	r7, #16
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}

0800f3e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f3e2:	b580      	push	{r7, lr}
 800f3e4:	b082      	sub	sp, #8
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f001 fc24 	bl	8010c38 <USBD_LL_Start>
 800f3f0:	4603      	mov	r3, r0
}
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	3708      	adds	r7, #8
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}

0800f3fa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f3fa:	b480      	push	{r7}
 800f3fc:	b083      	sub	sp, #12
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f402:	2300      	movs	r3, #0
}
 800f404:	4618      	mov	r0, r3
 800f406:	370c      	adds	r7, #12
 800f408:	46bd      	mov	sp, r7
 800f40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f40e:	4770      	bx	lr

0800f410 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	460b      	mov	r3, r1
 800f41a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f41c:	2303      	movs	r3, #3
 800f41e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f426:	2b00      	cmp	r3, #0
 800f428:	d009      	beq.n	800f43e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	78fa      	ldrb	r2, [r7, #3]
 800f434:	4611      	mov	r1, r2
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	4798      	blx	r3
 800f43a:	4603      	mov	r3, r0
 800f43c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f43e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f440:	4618      	mov	r0, r3
 800f442:	3710      	adds	r7, #16
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}

0800f448 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	460b      	mov	r3, r1
 800f452:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d007      	beq.n	800f46e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f464:	685b      	ldr	r3, [r3, #4]
 800f466:	78fa      	ldrb	r2, [r7, #3]
 800f468:	4611      	mov	r1, r2
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	4798      	blx	r3
  }

  return USBD_OK;
 800f46e:	2300      	movs	r3, #0
}
 800f470:	4618      	mov	r0, r3
 800f472:	3708      	adds	r7, #8
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}

0800f478 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f478:	b580      	push	{r7, lr}
 800f47a:	b084      	sub	sp, #16
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
 800f480:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f488:	6839      	ldr	r1, [r7, #0]
 800f48a:	4618      	mov	r0, r3
 800f48c:	f000 ff46 	bl	801031c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2201      	movs	r2, #1
 800f494:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800f49e:	461a      	mov	r2, r3
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f4ac:	f003 031f 	and.w	r3, r3, #31
 800f4b0:	2b02      	cmp	r3, #2
 800f4b2:	d01a      	beq.n	800f4ea <USBD_LL_SetupStage+0x72>
 800f4b4:	2b02      	cmp	r3, #2
 800f4b6:	d822      	bhi.n	800f4fe <USBD_LL_SetupStage+0x86>
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d002      	beq.n	800f4c2 <USBD_LL_SetupStage+0x4a>
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d00a      	beq.n	800f4d6 <USBD_LL_SetupStage+0x5e>
 800f4c0:	e01d      	b.n	800f4fe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f000 f9ee 	bl	800f8ac <USBD_StdDevReq>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	73fb      	strb	r3, [r7, #15]
      break;
 800f4d4:	e020      	b.n	800f518 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f4dc:	4619      	mov	r1, r3
 800f4de:	6878      	ldr	r0, [r7, #4]
 800f4e0:	f000 fa52 	bl	800f988 <USBD_StdItfReq>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	73fb      	strb	r3, [r7, #15]
      break;
 800f4e8:	e016      	b.n	800f518 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800f4f0:	4619      	mov	r1, r3
 800f4f2:	6878      	ldr	r0, [r7, #4]
 800f4f4:	f000 fa91 	bl	800fa1a <USBD_StdEPReq>
 800f4f8:	4603      	mov	r3, r0
 800f4fa:	73fb      	strb	r3, [r7, #15]
      break;
 800f4fc:	e00c      	b.n	800f518 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f504:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f508:	b2db      	uxtb	r3, r3
 800f50a:	4619      	mov	r1, r3
 800f50c:	6878      	ldr	r0, [r7, #4]
 800f50e:	f001 fbf3 	bl	8010cf8 <USBD_LL_StallEP>
 800f512:	4603      	mov	r3, r0
 800f514:	73fb      	strb	r3, [r7, #15]
      break;
 800f516:	bf00      	nop
  }

  return ret;
 800f518:	7bfb      	ldrb	r3, [r7, #15]
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3710      	adds	r7, #16
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}

0800f522 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f522:	b580      	push	{r7, lr}
 800f524:	b086      	sub	sp, #24
 800f526:	af00      	add	r7, sp, #0
 800f528:	60f8      	str	r0, [r7, #12]
 800f52a:	460b      	mov	r3, r1
 800f52c:	607a      	str	r2, [r7, #4]
 800f52e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f530:	7afb      	ldrb	r3, [r7, #11]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d138      	bne.n	800f5a8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800f53c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f544:	2b03      	cmp	r3, #3
 800f546:	d14a      	bne.n	800f5de <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	689a      	ldr	r2, [r3, #8]
 800f54c:	693b      	ldr	r3, [r7, #16]
 800f54e:	68db      	ldr	r3, [r3, #12]
 800f550:	429a      	cmp	r2, r3
 800f552:	d913      	bls.n	800f57c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	689a      	ldr	r2, [r3, #8]
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	1ad2      	subs	r2, r2, r3
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	68da      	ldr	r2, [r3, #12]
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	689b      	ldr	r3, [r3, #8]
 800f56a:	4293      	cmp	r3, r2
 800f56c:	bf28      	it	cs
 800f56e:	4613      	movcs	r3, r2
 800f570:	461a      	mov	r2, r3
 800f572:	6879      	ldr	r1, [r7, #4]
 800f574:	68f8      	ldr	r0, [r7, #12]
 800f576:	f000 ffc5 	bl	8010504 <USBD_CtlContinueRx>
 800f57a:	e030      	b.n	800f5de <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f582:	b2db      	uxtb	r3, r3
 800f584:	2b03      	cmp	r3, #3
 800f586:	d10b      	bne.n	800f5a0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f58e:	691b      	ldr	r3, [r3, #16]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d005      	beq.n	800f5a0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f59a:	691b      	ldr	r3, [r3, #16]
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f5a0:	68f8      	ldr	r0, [r7, #12]
 800f5a2:	f000 ffc0 	bl	8010526 <USBD_CtlSendStatus>
 800f5a6:	e01a      	b.n	800f5de <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	2b03      	cmp	r3, #3
 800f5b2:	d114      	bne.n	800f5de <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5ba:	699b      	ldr	r3, [r3, #24]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d00e      	beq.n	800f5de <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f5c6:	699b      	ldr	r3, [r3, #24]
 800f5c8:	7afa      	ldrb	r2, [r7, #11]
 800f5ca:	4611      	mov	r1, r2
 800f5cc:	68f8      	ldr	r0, [r7, #12]
 800f5ce:	4798      	blx	r3
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f5d4:	7dfb      	ldrb	r3, [r7, #23]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d001      	beq.n	800f5de <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f5da:	7dfb      	ldrb	r3, [r7, #23]
 800f5dc:	e000      	b.n	800f5e0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f5de:	2300      	movs	r3, #0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3718      	adds	r7, #24
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b086      	sub	sp, #24
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	607a      	str	r2, [r7, #4]
 800f5f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f5f6:	7afb      	ldrb	r3, [r7, #11]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d16b      	bne.n	800f6d4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	3314      	adds	r3, #20
 800f600:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f608:	2b02      	cmp	r3, #2
 800f60a:	d156      	bne.n	800f6ba <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f60c:	693b      	ldr	r3, [r7, #16]
 800f60e:	689a      	ldr	r2, [r3, #8]
 800f610:	693b      	ldr	r3, [r7, #16]
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	429a      	cmp	r2, r3
 800f616:	d914      	bls.n	800f642 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f618:	693b      	ldr	r3, [r7, #16]
 800f61a:	689a      	ldr	r2, [r3, #8]
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	1ad2      	subs	r2, r2, r3
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	689b      	ldr	r3, [r3, #8]
 800f62a:	461a      	mov	r2, r3
 800f62c:	6879      	ldr	r1, [r7, #4]
 800f62e:	68f8      	ldr	r0, [r7, #12]
 800f630:	f000 ff3a 	bl	80104a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f634:	2300      	movs	r3, #0
 800f636:	2200      	movs	r2, #0
 800f638:	2100      	movs	r1, #0
 800f63a:	68f8      	ldr	r0, [r7, #12]
 800f63c:	f001 fc06 	bl	8010e4c <USBD_LL_PrepareReceive>
 800f640:	e03b      	b.n	800f6ba <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f642:	693b      	ldr	r3, [r7, #16]
 800f644:	68da      	ldr	r2, [r3, #12]
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	689b      	ldr	r3, [r3, #8]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d11c      	bne.n	800f688 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	685a      	ldr	r2, [r3, #4]
 800f652:	693b      	ldr	r3, [r7, #16]
 800f654:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f656:	429a      	cmp	r2, r3
 800f658:	d316      	bcc.n	800f688 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	685a      	ldr	r2, [r3, #4]
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f664:	429a      	cmp	r2, r3
 800f666:	d20f      	bcs.n	800f688 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f668:	2200      	movs	r2, #0
 800f66a:	2100      	movs	r1, #0
 800f66c:	68f8      	ldr	r0, [r7, #12]
 800f66e:	f000 ff1b 	bl	80104a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	2200      	movs	r2, #0
 800f676:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f67a:	2300      	movs	r3, #0
 800f67c:	2200      	movs	r2, #0
 800f67e:	2100      	movs	r1, #0
 800f680:	68f8      	ldr	r0, [r7, #12]
 800f682:	f001 fbe3 	bl	8010e4c <USBD_LL_PrepareReceive>
 800f686:	e018      	b.n	800f6ba <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	2b03      	cmp	r3, #3
 800f692:	d10b      	bne.n	800f6ac <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f69a:	68db      	ldr	r3, [r3, #12]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d005      	beq.n	800f6ac <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6a6:	68db      	ldr	r3, [r3, #12]
 800f6a8:	68f8      	ldr	r0, [r7, #12]
 800f6aa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f6ac:	2180      	movs	r1, #128	@ 0x80
 800f6ae:	68f8      	ldr	r0, [r7, #12]
 800f6b0:	f001 fb22 	bl	8010cf8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	f000 ff49 	bl	801054c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f6c0:	2b01      	cmp	r3, #1
 800f6c2:	d122      	bne.n	800f70a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f6c4:	68f8      	ldr	r0, [r7, #12]
 800f6c6:	f7ff fe98 	bl	800f3fa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f6d2:	e01a      	b.n	800f70a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6da:	b2db      	uxtb	r3, r3
 800f6dc:	2b03      	cmp	r3, #3
 800f6de:	d114      	bne.n	800f70a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6e6:	695b      	ldr	r3, [r3, #20]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d00e      	beq.n	800f70a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f6f2:	695b      	ldr	r3, [r3, #20]
 800f6f4:	7afa      	ldrb	r2, [r7, #11]
 800f6f6:	4611      	mov	r1, r2
 800f6f8:	68f8      	ldr	r0, [r7, #12]
 800f6fa:	4798      	blx	r3
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f700:	7dfb      	ldrb	r3, [r7, #23]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d001      	beq.n	800f70a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800f706:	7dfb      	ldrb	r3, [r7, #23]
 800f708:	e000      	b.n	800f70c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800f70a:	2300      	movs	r3, #0
}
 800f70c:	4618      	mov	r0, r3
 800f70e:	3718      	adds	r7, #24
 800f710:	46bd      	mov	sp, r7
 800f712:	bd80      	pop	{r7, pc}

0800f714 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2201      	movs	r2, #1
 800f720:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2200      	movs	r2, #0
 800f728:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	2200      	movs	r2, #0
 800f730:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2200      	movs	r2, #0
 800f736:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClass == NULL)
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f740:	2b00      	cmp	r3, #0
 800f742:	d101      	bne.n	800f748 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800f744:	2303      	movs	r3, #3
 800f746:	e02f      	b.n	800f7a8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00f      	beq.n	800f772 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f758:	685b      	ldr	r3, [r3, #4]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d009      	beq.n	800f772 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f764:	685b      	ldr	r3, [r3, #4]
 800f766:	687a      	ldr	r2, [r7, #4]
 800f768:	6852      	ldr	r2, [r2, #4]
 800f76a:	b2d2      	uxtb	r2, r2
 800f76c:	4611      	mov	r1, r2
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f772:	2340      	movs	r3, #64	@ 0x40
 800f774:	2200      	movs	r2, #0
 800f776:	2100      	movs	r1, #0
 800f778:	6878      	ldr	r0, [r7, #4]
 800f77a:	f001 fa78 	bl	8010c6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	2201      	movs	r2, #1
 800f782:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	2240      	movs	r2, #64	@ 0x40
 800f78a:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f78e:	2340      	movs	r3, #64	@ 0x40
 800f790:	2200      	movs	r2, #0
 800f792:	2180      	movs	r1, #128	@ 0x80
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f001 fa6a 	bl	8010c6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	2201      	movs	r2, #1
 800f79e:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2240      	movs	r2, #64	@ 0x40
 800f7a4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f7a6:	2300      	movs	r3, #0
}
 800f7a8:	4618      	mov	r0, r3
 800f7aa:	3708      	adds	r7, #8
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	bd80      	pop	{r7, pc}

0800f7b0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b083      	sub	sp, #12
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	78fa      	ldrb	r2, [r7, #3]
 800f7c0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f7c2:	2300      	movs	r3, #0
}
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	370c      	adds	r7, #12
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr

0800f7d0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f7d0:	b480      	push	{r7}
 800f7d2:	b083      	sub	sp, #12
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7de:	b2da      	uxtb	r2, r3
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2204      	movs	r2, #4
 800f7ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f7ee:	2300      	movs	r3, #0
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	370c      	adds	r7, #12
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f80a:	b2db      	uxtb	r3, r3
 800f80c:	2b04      	cmp	r3, #4
 800f80e:	d106      	bne.n	800f81e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f816:	b2da      	uxtb	r2, r3
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f81e:	2300      	movs	r3, #0
}
 800f820:	4618      	mov	r0, r3
 800f822:	370c      	adds	r7, #12
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr

0800f82c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b082      	sub	sp, #8
 800f830:	af00      	add	r7, sp, #0
 800f832:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d101      	bne.n	800f842 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800f83e:	2303      	movs	r3, #3
 800f840:	e012      	b.n	800f868 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	2b03      	cmp	r3, #3
 800f84c:	d10b      	bne.n	800f866 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f854:	69db      	ldr	r3, [r3, #28]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d005      	beq.n	800f866 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f860:	69db      	ldr	r3, [r3, #28]
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f866:	2300      	movs	r3, #0
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3708      	adds	r7, #8
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f870:	b480      	push	{r7}
 800f872:	b087      	sub	sp, #28
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f87c:	697b      	ldr	r3, [r7, #20]
 800f87e:	781b      	ldrb	r3, [r3, #0]
 800f880:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	3301      	adds	r3, #1
 800f886:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f88e:	8a3b      	ldrh	r3, [r7, #16]
 800f890:	021b      	lsls	r3, r3, #8
 800f892:	b21a      	sxth	r2, r3
 800f894:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f898:	4313      	orrs	r3, r2
 800f89a:	b21b      	sxth	r3, r3
 800f89c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f89e:	89fb      	ldrh	r3, [r7, #14]
}
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	371c      	adds	r7, #28
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b084      	sub	sp, #16
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
 800f8b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	781b      	ldrb	r3, [r3, #0]
 800f8be:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f8c2:	2b40      	cmp	r3, #64	@ 0x40
 800f8c4:	d005      	beq.n	800f8d2 <USBD_StdDevReq+0x26>
 800f8c6:	2b40      	cmp	r3, #64	@ 0x40
 800f8c8:	d853      	bhi.n	800f972 <USBD_StdDevReq+0xc6>
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d00b      	beq.n	800f8e6 <USBD_StdDevReq+0x3a>
 800f8ce:	2b20      	cmp	r3, #32
 800f8d0:	d14f      	bne.n	800f972 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f8d8:	689b      	ldr	r3, [r3, #8]
 800f8da:	6839      	ldr	r1, [r7, #0]
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	4798      	blx	r3
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	73fb      	strb	r3, [r7, #15]
      break;
 800f8e4:	e04a      	b.n	800f97c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f8e6:	683b      	ldr	r3, [r7, #0]
 800f8e8:	785b      	ldrb	r3, [r3, #1]
 800f8ea:	2b09      	cmp	r3, #9
 800f8ec:	d83b      	bhi.n	800f966 <USBD_StdDevReq+0xba>
 800f8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800f8f4 <USBD_StdDevReq+0x48>)
 800f8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f4:	0800f949 	.word	0x0800f949
 800f8f8:	0800f95d 	.word	0x0800f95d
 800f8fc:	0800f967 	.word	0x0800f967
 800f900:	0800f953 	.word	0x0800f953
 800f904:	0800f967 	.word	0x0800f967
 800f908:	0800f927 	.word	0x0800f927
 800f90c:	0800f91d 	.word	0x0800f91d
 800f910:	0800f967 	.word	0x0800f967
 800f914:	0800f93f 	.word	0x0800f93f
 800f918:	0800f931 	.word	0x0800f931
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f91c:	6839      	ldr	r1, [r7, #0]
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f000 f9de 	bl	800fce0 <USBD_GetDescriptor>
          break;
 800f924:	e024      	b.n	800f970 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f926:	6839      	ldr	r1, [r7, #0]
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f000 fb6d 	bl	8010008 <USBD_SetAddress>
          break;
 800f92e:	e01f      	b.n	800f970 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f930:	6839      	ldr	r1, [r7, #0]
 800f932:	6878      	ldr	r0, [r7, #4]
 800f934:	f000 fbac 	bl	8010090 <USBD_SetConfig>
 800f938:	4603      	mov	r3, r0
 800f93a:	73fb      	strb	r3, [r7, #15]
          break;
 800f93c:	e018      	b.n	800f970 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f93e:	6839      	ldr	r1, [r7, #0]
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f000 fc4b 	bl	80101dc <USBD_GetConfig>
          break;
 800f946:	e013      	b.n	800f970 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f948:	6839      	ldr	r1, [r7, #0]
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 fc7c 	bl	8010248 <USBD_GetStatus>
          break;
 800f950:	e00e      	b.n	800f970 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f952:	6839      	ldr	r1, [r7, #0]
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f000 fcab 	bl	80102b0 <USBD_SetFeature>
          break;
 800f95a:	e009      	b.n	800f970 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f95c:	6839      	ldr	r1, [r7, #0]
 800f95e:	6878      	ldr	r0, [r7, #4]
 800f960:	f000 fcba 	bl	80102d8 <USBD_ClrFeature>
          break;
 800f964:	e004      	b.n	800f970 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f966:	6839      	ldr	r1, [r7, #0]
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f000 fd11 	bl	8010390 <USBD_CtlError>
          break;
 800f96e:	bf00      	nop
      }
      break;
 800f970:	e004      	b.n	800f97c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f972:	6839      	ldr	r1, [r7, #0]
 800f974:	6878      	ldr	r0, [r7, #4]
 800f976:	f000 fd0b 	bl	8010390 <USBD_CtlError>
      break;
 800f97a:	bf00      	nop
  }

  return ret;
 800f97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f97e:	4618      	mov	r0, r3
 800f980:	3710      	adds	r7, #16
 800f982:	46bd      	mov	sp, r7
 800f984:	bd80      	pop	{r7, pc}
 800f986:	bf00      	nop

0800f988 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b084      	sub	sp, #16
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f992:	2300      	movs	r3, #0
 800f994:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	781b      	ldrb	r3, [r3, #0]
 800f99a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f99e:	2b40      	cmp	r3, #64	@ 0x40
 800f9a0:	d005      	beq.n	800f9ae <USBD_StdItfReq+0x26>
 800f9a2:	2b40      	cmp	r3, #64	@ 0x40
 800f9a4:	d82f      	bhi.n	800fa06 <USBD_StdItfReq+0x7e>
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d001      	beq.n	800f9ae <USBD_StdItfReq+0x26>
 800f9aa:	2b20      	cmp	r3, #32
 800f9ac:	d12b      	bne.n	800fa06 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9b4:	b2db      	uxtb	r3, r3
 800f9b6:	3b01      	subs	r3, #1
 800f9b8:	2b02      	cmp	r3, #2
 800f9ba:	d81d      	bhi.n	800f9f8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	889b      	ldrh	r3, [r3, #4]
 800f9c0:	b2db      	uxtb	r3, r3
 800f9c2:	2b01      	cmp	r3, #1
 800f9c4:	d813      	bhi.n	800f9ee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f9cc:	689b      	ldr	r3, [r3, #8]
 800f9ce:	6839      	ldr	r1, [r7, #0]
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	4798      	blx	r3
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f9d8:	683b      	ldr	r3, [r7, #0]
 800f9da:	88db      	ldrh	r3, [r3, #6]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d110      	bne.n	800fa02 <USBD_StdItfReq+0x7a>
 800f9e0:	7bfb      	ldrb	r3, [r7, #15]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d10d      	bne.n	800fa02 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 fd9d 	bl	8010526 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f9ec:	e009      	b.n	800fa02 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f9ee:	6839      	ldr	r1, [r7, #0]
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f000 fccd 	bl	8010390 <USBD_CtlError>
          break;
 800f9f6:	e004      	b.n	800fa02 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f9f8:	6839      	ldr	r1, [r7, #0]
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 fcc8 	bl	8010390 <USBD_CtlError>
          break;
 800fa00:	e000      	b.n	800fa04 <USBD_StdItfReq+0x7c>
          break;
 800fa02:	bf00      	nop
      }
      break;
 800fa04:	e004      	b.n	800fa10 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800fa06:	6839      	ldr	r1, [r7, #0]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 fcc1 	bl	8010390 <USBD_CtlError>
      break;
 800fa0e:	bf00      	nop
  }

  return ret;
 800fa10:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3710      	adds	r7, #16
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}

0800fa1a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa1a:	b580      	push	{r7, lr}
 800fa1c:	b084      	sub	sp, #16
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	6078      	str	r0, [r7, #4]
 800fa22:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fa24:	2300      	movs	r3, #0
 800fa26:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	889b      	ldrh	r3, [r3, #4]
 800fa2c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fa36:	2b40      	cmp	r3, #64	@ 0x40
 800fa38:	d007      	beq.n	800fa4a <USBD_StdEPReq+0x30>
 800fa3a:	2b40      	cmp	r3, #64	@ 0x40
 800fa3c:	f200 8145 	bhi.w	800fcca <USBD_StdEPReq+0x2b0>
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d00c      	beq.n	800fa5e <USBD_StdEPReq+0x44>
 800fa44:	2b20      	cmp	r3, #32
 800fa46:	f040 8140 	bne.w	800fcca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fa50:	689b      	ldr	r3, [r3, #8]
 800fa52:	6839      	ldr	r1, [r7, #0]
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	4798      	blx	r3
 800fa58:	4603      	mov	r3, r0
 800fa5a:	73fb      	strb	r3, [r7, #15]
      break;
 800fa5c:	e13a      	b.n	800fcd4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fa5e:	683b      	ldr	r3, [r7, #0]
 800fa60:	785b      	ldrb	r3, [r3, #1]
 800fa62:	2b03      	cmp	r3, #3
 800fa64:	d007      	beq.n	800fa76 <USBD_StdEPReq+0x5c>
 800fa66:	2b03      	cmp	r3, #3
 800fa68:	f300 8129 	bgt.w	800fcbe <USBD_StdEPReq+0x2a4>
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d07f      	beq.n	800fb70 <USBD_StdEPReq+0x156>
 800fa70:	2b01      	cmp	r3, #1
 800fa72:	d03c      	beq.n	800faee <USBD_StdEPReq+0xd4>
 800fa74:	e123      	b.n	800fcbe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa7c:	b2db      	uxtb	r3, r3
 800fa7e:	2b02      	cmp	r3, #2
 800fa80:	d002      	beq.n	800fa88 <USBD_StdEPReq+0x6e>
 800fa82:	2b03      	cmp	r3, #3
 800fa84:	d016      	beq.n	800fab4 <USBD_StdEPReq+0x9a>
 800fa86:	e02c      	b.n	800fae2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fa88:	7bbb      	ldrb	r3, [r7, #14]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d00d      	beq.n	800faaa <USBD_StdEPReq+0x90>
 800fa8e:	7bbb      	ldrb	r3, [r7, #14]
 800fa90:	2b80      	cmp	r3, #128	@ 0x80
 800fa92:	d00a      	beq.n	800faaa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fa94:	7bbb      	ldrb	r3, [r7, #14]
 800fa96:	4619      	mov	r1, r3
 800fa98:	6878      	ldr	r0, [r7, #4]
 800fa9a:	f001 f92d 	bl	8010cf8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa9e:	2180      	movs	r1, #128	@ 0x80
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f001 f929 	bl	8010cf8 <USBD_LL_StallEP>
 800faa6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800faa8:	e020      	b.n	800faec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800faaa:	6839      	ldr	r1, [r7, #0]
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f000 fc6f 	bl	8010390 <USBD_CtlError>
              break;
 800fab2:	e01b      	b.n	800faec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	885b      	ldrh	r3, [r3, #2]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d10e      	bne.n	800fada <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fabc:	7bbb      	ldrb	r3, [r7, #14]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d00b      	beq.n	800fada <USBD_StdEPReq+0xc0>
 800fac2:	7bbb      	ldrb	r3, [r7, #14]
 800fac4:	2b80      	cmp	r3, #128	@ 0x80
 800fac6:	d008      	beq.n	800fada <USBD_StdEPReq+0xc0>
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	88db      	ldrh	r3, [r3, #6]
 800facc:	2b00      	cmp	r3, #0
 800face:	d104      	bne.n	800fada <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fad0:	7bbb      	ldrb	r3, [r7, #14]
 800fad2:	4619      	mov	r1, r3
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f001 f90f 	bl	8010cf8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f000 fd23 	bl	8010526 <USBD_CtlSendStatus>

              break;
 800fae0:	e004      	b.n	800faec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800fae2:	6839      	ldr	r1, [r7, #0]
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f000 fc53 	bl	8010390 <USBD_CtlError>
              break;
 800faea:	bf00      	nop
          }
          break;
 800faec:	e0ec      	b.n	800fcc8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800faf4:	b2db      	uxtb	r3, r3
 800faf6:	2b02      	cmp	r3, #2
 800faf8:	d002      	beq.n	800fb00 <USBD_StdEPReq+0xe6>
 800fafa:	2b03      	cmp	r3, #3
 800fafc:	d016      	beq.n	800fb2c <USBD_StdEPReq+0x112>
 800fafe:	e030      	b.n	800fb62 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fb00:	7bbb      	ldrb	r3, [r7, #14]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d00d      	beq.n	800fb22 <USBD_StdEPReq+0x108>
 800fb06:	7bbb      	ldrb	r3, [r7, #14]
 800fb08:	2b80      	cmp	r3, #128	@ 0x80
 800fb0a:	d00a      	beq.n	800fb22 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fb0c:	7bbb      	ldrb	r3, [r7, #14]
 800fb0e:	4619      	mov	r1, r3
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f001 f8f1 	bl	8010cf8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb16:	2180      	movs	r1, #128	@ 0x80
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f001 f8ed 	bl	8010cf8 <USBD_LL_StallEP>
 800fb1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fb20:	e025      	b.n	800fb6e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800fb22:	6839      	ldr	r1, [r7, #0]
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f000 fc33 	bl	8010390 <USBD_CtlError>
              break;
 800fb2a:	e020      	b.n	800fb6e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	885b      	ldrh	r3, [r3, #2]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d11b      	bne.n	800fb6c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800fb34:	7bbb      	ldrb	r3, [r7, #14]
 800fb36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d004      	beq.n	800fb48 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fb3e:	7bbb      	ldrb	r3, [r7, #14]
 800fb40:	4619      	mov	r1, r3
 800fb42:	6878      	ldr	r0, [r7, #4]
 800fb44:	f001 f8f7 	bl	8010d36 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800fb48:	6878      	ldr	r0, [r7, #4]
 800fb4a:	f000 fcec 	bl	8010526 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb54:	689b      	ldr	r3, [r3, #8]
 800fb56:	6839      	ldr	r1, [r7, #0]
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	4798      	blx	r3
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800fb60:	e004      	b.n	800fb6c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800fb62:	6839      	ldr	r1, [r7, #0]
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 fc13 	bl	8010390 <USBD_CtlError>
              break;
 800fb6a:	e000      	b.n	800fb6e <USBD_StdEPReq+0x154>
              break;
 800fb6c:	bf00      	nop
          }
          break;
 800fb6e:	e0ab      	b.n	800fcc8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fb76:	b2db      	uxtb	r3, r3
 800fb78:	2b02      	cmp	r3, #2
 800fb7a:	d002      	beq.n	800fb82 <USBD_StdEPReq+0x168>
 800fb7c:	2b03      	cmp	r3, #3
 800fb7e:	d032      	beq.n	800fbe6 <USBD_StdEPReq+0x1cc>
 800fb80:	e097      	b.n	800fcb2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fb82:	7bbb      	ldrb	r3, [r7, #14]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d007      	beq.n	800fb98 <USBD_StdEPReq+0x17e>
 800fb88:	7bbb      	ldrb	r3, [r7, #14]
 800fb8a:	2b80      	cmp	r3, #128	@ 0x80
 800fb8c:	d004      	beq.n	800fb98 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800fb8e:	6839      	ldr	r1, [r7, #0]
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 fbfd 	bl	8010390 <USBD_CtlError>
                break;
 800fb96:	e091      	b.n	800fcbc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fb98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	da0b      	bge.n	800fbb8 <USBD_StdEPReq+0x19e>
 800fba0:	7bbb      	ldrb	r3, [r7, #14]
 800fba2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fba6:	4613      	mov	r3, r2
 800fba8:	009b      	lsls	r3, r3, #2
 800fbaa:	4413      	add	r3, r2
 800fbac:	009b      	lsls	r3, r3, #2
 800fbae:	3310      	adds	r3, #16
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	4413      	add	r3, r2
 800fbb4:	3304      	adds	r3, #4
 800fbb6:	e00b      	b.n	800fbd0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fbb8:	7bbb      	ldrb	r3, [r7, #14]
 800fbba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fbbe:	4613      	mov	r3, r2
 800fbc0:	009b      	lsls	r3, r3, #2
 800fbc2:	4413      	add	r3, r2
 800fbc4:	009b      	lsls	r3, r3, #2
 800fbc6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	4413      	add	r3, r2
 800fbce:	3304      	adds	r3, #4
 800fbd0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	2202      	movs	r2, #2
 800fbdc:	4619      	mov	r1, r3
 800fbde:	6878      	ldr	r0, [r7, #4]
 800fbe0:	f000 fc47 	bl	8010472 <USBD_CtlSendData>
              break;
 800fbe4:	e06a      	b.n	800fcbc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800fbe6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	da11      	bge.n	800fc12 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fbee:	7bbb      	ldrb	r3, [r7, #14]
 800fbf0:	f003 020f 	and.w	r2, r3, #15
 800fbf4:	6879      	ldr	r1, [r7, #4]
 800fbf6:	4613      	mov	r3, r2
 800fbf8:	009b      	lsls	r3, r3, #2
 800fbfa:	4413      	add	r3, r2
 800fbfc:	009b      	lsls	r3, r3, #2
 800fbfe:	440b      	add	r3, r1
 800fc00:	3324      	adds	r3, #36	@ 0x24
 800fc02:	881b      	ldrh	r3, [r3, #0]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d117      	bne.n	800fc38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fc08:	6839      	ldr	r1, [r7, #0]
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f000 fbc0 	bl	8010390 <USBD_CtlError>
                  break;
 800fc10:	e054      	b.n	800fcbc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fc12:	7bbb      	ldrb	r3, [r7, #14]
 800fc14:	f003 020f 	and.w	r2, r3, #15
 800fc18:	6879      	ldr	r1, [r7, #4]
 800fc1a:	4613      	mov	r3, r2
 800fc1c:	009b      	lsls	r3, r3, #2
 800fc1e:	4413      	add	r3, r2
 800fc20:	009b      	lsls	r3, r3, #2
 800fc22:	440b      	add	r3, r1
 800fc24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fc28:	881b      	ldrh	r3, [r3, #0]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d104      	bne.n	800fc38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800fc2e:	6839      	ldr	r1, [r7, #0]
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f000 fbad 	bl	8010390 <USBD_CtlError>
                  break;
 800fc36:	e041      	b.n	800fcbc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	da0b      	bge.n	800fc58 <USBD_StdEPReq+0x23e>
 800fc40:	7bbb      	ldrb	r3, [r7, #14]
 800fc42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fc46:	4613      	mov	r3, r2
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	4413      	add	r3, r2
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	3310      	adds	r3, #16
 800fc50:	687a      	ldr	r2, [r7, #4]
 800fc52:	4413      	add	r3, r2
 800fc54:	3304      	adds	r3, #4
 800fc56:	e00b      	b.n	800fc70 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fc58:	7bbb      	ldrb	r3, [r7, #14]
 800fc5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fc5e:	4613      	mov	r3, r2
 800fc60:	009b      	lsls	r3, r3, #2
 800fc62:	4413      	add	r3, r2
 800fc64:	009b      	lsls	r3, r3, #2
 800fc66:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fc6a:	687a      	ldr	r2, [r7, #4]
 800fc6c:	4413      	add	r3, r2
 800fc6e:	3304      	adds	r3, #4
 800fc70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fc72:	7bbb      	ldrb	r3, [r7, #14]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d002      	beq.n	800fc7e <USBD_StdEPReq+0x264>
 800fc78:	7bbb      	ldrb	r3, [r7, #14]
 800fc7a:	2b80      	cmp	r3, #128	@ 0x80
 800fc7c:	d103      	bne.n	800fc86 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800fc7e:	68bb      	ldr	r3, [r7, #8]
 800fc80:	2200      	movs	r2, #0
 800fc82:	601a      	str	r2, [r3, #0]
 800fc84:	e00e      	b.n	800fca4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fc86:	7bbb      	ldrb	r3, [r7, #14]
 800fc88:	4619      	mov	r1, r3
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	f001 f872 	bl	8010d74 <USBD_LL_IsStallEP>
 800fc90:	4603      	mov	r3, r0
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d003      	beq.n	800fc9e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	2201      	movs	r2, #1
 800fc9a:	601a      	str	r2, [r3, #0]
 800fc9c:	e002      	b.n	800fca4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	2200      	movs	r2, #0
 800fca2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	2202      	movs	r2, #2
 800fca8:	4619      	mov	r1, r3
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f000 fbe1 	bl	8010472 <USBD_CtlSendData>
              break;
 800fcb0:	e004      	b.n	800fcbc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800fcb2:	6839      	ldr	r1, [r7, #0]
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 fb6b 	bl	8010390 <USBD_CtlError>
              break;
 800fcba:	bf00      	nop
          }
          break;
 800fcbc:	e004      	b.n	800fcc8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800fcbe:	6839      	ldr	r1, [r7, #0]
 800fcc0:	6878      	ldr	r0, [r7, #4]
 800fcc2:	f000 fb65 	bl	8010390 <USBD_CtlError>
          break;
 800fcc6:	bf00      	nop
      }
      break;
 800fcc8:	e004      	b.n	800fcd4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800fcca:	6839      	ldr	r1, [r7, #0]
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 fb5f 	bl	8010390 <USBD_CtlError>
      break;
 800fcd2:	bf00      	nop
  }

  return ret;
 800fcd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	3710      	adds	r7, #16
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	bd80      	pop	{r7, pc}
	...

0800fce0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fcea:	2300      	movs	r3, #0
 800fcec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	885b      	ldrh	r3, [r3, #2]
 800fcfa:	0a1b      	lsrs	r3, r3, #8
 800fcfc:	b29b      	uxth	r3, r3
 800fcfe:	3b01      	subs	r3, #1
 800fd00:	2b0e      	cmp	r3, #14
 800fd02:	f200 8152 	bhi.w	800ffaa <USBD_GetDescriptor+0x2ca>
 800fd06:	a201      	add	r2, pc, #4	@ (adr r2, 800fd0c <USBD_GetDescriptor+0x2c>)
 800fd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd0c:	0800fd7d 	.word	0x0800fd7d
 800fd10:	0800fd95 	.word	0x0800fd95
 800fd14:	0800fdd5 	.word	0x0800fdd5
 800fd18:	0800ffab 	.word	0x0800ffab
 800fd1c:	0800ffab 	.word	0x0800ffab
 800fd20:	0800ff4b 	.word	0x0800ff4b
 800fd24:	0800ff77 	.word	0x0800ff77
 800fd28:	0800ffab 	.word	0x0800ffab
 800fd2c:	0800ffab 	.word	0x0800ffab
 800fd30:	0800ffab 	.word	0x0800ffab
 800fd34:	0800ffab 	.word	0x0800ffab
 800fd38:	0800ffab 	.word	0x0800ffab
 800fd3c:	0800ffab 	.word	0x0800ffab
 800fd40:	0800ffab 	.word	0x0800ffab
 800fd44:	0800fd49 	.word	0x0800fd49
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd4e:	69db      	ldr	r3, [r3, #28]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d00b      	beq.n	800fd6c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd5a:	69db      	ldr	r3, [r3, #28]
 800fd5c:	687a      	ldr	r2, [r7, #4]
 800fd5e:	7c12      	ldrb	r2, [r2, #16]
 800fd60:	f107 0108 	add.w	r1, r7, #8
 800fd64:	4610      	mov	r0, r2
 800fd66:	4798      	blx	r3
 800fd68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd6a:	e126      	b.n	800ffba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fd6c:	6839      	ldr	r1, [r7, #0]
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f000 fb0e 	bl	8010390 <USBD_CtlError>
        err++;
 800fd74:	7afb      	ldrb	r3, [r7, #11]
 800fd76:	3301      	adds	r3, #1
 800fd78:	72fb      	strb	r3, [r7, #11]
      break;
 800fd7a:	e11e      	b.n	800ffba <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	687a      	ldr	r2, [r7, #4]
 800fd86:	7c12      	ldrb	r2, [r2, #16]
 800fd88:	f107 0108 	add.w	r1, r7, #8
 800fd8c:	4610      	mov	r0, r2
 800fd8e:	4798      	blx	r3
 800fd90:	60f8      	str	r0, [r7, #12]
      break;
 800fd92:	e112      	b.n	800ffba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	7c1b      	ldrb	r3, [r3, #16]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d10d      	bne.n	800fdb8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fda2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fda4:	f107 0208 	add.w	r2, r7, #8
 800fda8:	4610      	mov	r0, r2
 800fdaa:	4798      	blx	r3
 800fdac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	2202      	movs	r2, #2
 800fdb4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fdb6:	e100      	b.n	800ffba <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdc0:	f107 0208 	add.w	r2, r7, #8
 800fdc4:	4610      	mov	r0, r2
 800fdc6:	4798      	blx	r3
 800fdc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	3301      	adds	r3, #1
 800fdce:	2202      	movs	r2, #2
 800fdd0:	701a      	strb	r2, [r3, #0]
      break;
 800fdd2:	e0f2      	b.n	800ffba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	885b      	ldrh	r3, [r3, #2]
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	2b05      	cmp	r3, #5
 800fddc:	f200 80ac 	bhi.w	800ff38 <USBD_GetDescriptor+0x258>
 800fde0:	a201      	add	r2, pc, #4	@ (adr r2, 800fde8 <USBD_GetDescriptor+0x108>)
 800fde2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fde6:	bf00      	nop
 800fde8:	0800fe01 	.word	0x0800fe01
 800fdec:	0800fe35 	.word	0x0800fe35
 800fdf0:	0800fe69 	.word	0x0800fe69
 800fdf4:	0800fe9d 	.word	0x0800fe9d
 800fdf8:	0800fed1 	.word	0x0800fed1
 800fdfc:	0800ff05 	.word	0x0800ff05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe06:	685b      	ldr	r3, [r3, #4]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d00b      	beq.n	800fe24 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe12:	685b      	ldr	r3, [r3, #4]
 800fe14:	687a      	ldr	r2, [r7, #4]
 800fe16:	7c12      	ldrb	r2, [r2, #16]
 800fe18:	f107 0108 	add.w	r1, r7, #8
 800fe1c:	4610      	mov	r0, r2
 800fe1e:	4798      	blx	r3
 800fe20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe22:	e091      	b.n	800ff48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe24:	6839      	ldr	r1, [r7, #0]
 800fe26:	6878      	ldr	r0, [r7, #4]
 800fe28:	f000 fab2 	bl	8010390 <USBD_CtlError>
            err++;
 800fe2c:	7afb      	ldrb	r3, [r7, #11]
 800fe2e:	3301      	adds	r3, #1
 800fe30:	72fb      	strb	r3, [r7, #11]
          break;
 800fe32:	e089      	b.n	800ff48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe3a:	689b      	ldr	r3, [r3, #8]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d00b      	beq.n	800fe58 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe46:	689b      	ldr	r3, [r3, #8]
 800fe48:	687a      	ldr	r2, [r7, #4]
 800fe4a:	7c12      	ldrb	r2, [r2, #16]
 800fe4c:	f107 0108 	add.w	r1, r7, #8
 800fe50:	4610      	mov	r0, r2
 800fe52:	4798      	blx	r3
 800fe54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe56:	e077      	b.n	800ff48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe58:	6839      	ldr	r1, [r7, #0]
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f000 fa98 	bl	8010390 <USBD_CtlError>
            err++;
 800fe60:	7afb      	ldrb	r3, [r7, #11]
 800fe62:	3301      	adds	r3, #1
 800fe64:	72fb      	strb	r3, [r7, #11]
          break;
 800fe66:	e06f      	b.n	800ff48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe6e:	68db      	ldr	r3, [r3, #12]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d00b      	beq.n	800fe8c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fe7a:	68db      	ldr	r3, [r3, #12]
 800fe7c:	687a      	ldr	r2, [r7, #4]
 800fe7e:	7c12      	ldrb	r2, [r2, #16]
 800fe80:	f107 0108 	add.w	r1, r7, #8
 800fe84:	4610      	mov	r0, r2
 800fe86:	4798      	blx	r3
 800fe88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fe8a:	e05d      	b.n	800ff48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fe8c:	6839      	ldr	r1, [r7, #0]
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 fa7e 	bl	8010390 <USBD_CtlError>
            err++;
 800fe94:	7afb      	ldrb	r3, [r7, #11]
 800fe96:	3301      	adds	r3, #1
 800fe98:	72fb      	strb	r3, [r7, #11]
          break;
 800fe9a:	e055      	b.n	800ff48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fea2:	691b      	ldr	r3, [r3, #16]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d00b      	beq.n	800fec0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800feae:	691b      	ldr	r3, [r3, #16]
 800feb0:	687a      	ldr	r2, [r7, #4]
 800feb2:	7c12      	ldrb	r2, [r2, #16]
 800feb4:	f107 0108 	add.w	r1, r7, #8
 800feb8:	4610      	mov	r0, r2
 800feba:	4798      	blx	r3
 800febc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800febe:	e043      	b.n	800ff48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fec0:	6839      	ldr	r1, [r7, #0]
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f000 fa64 	bl	8010390 <USBD_CtlError>
            err++;
 800fec8:	7afb      	ldrb	r3, [r7, #11]
 800feca:	3301      	adds	r3, #1
 800fecc:	72fb      	strb	r3, [r7, #11]
          break;
 800fece:	e03b      	b.n	800ff48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fed6:	695b      	ldr	r3, [r3, #20]
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d00b      	beq.n	800fef4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fee2:	695b      	ldr	r3, [r3, #20]
 800fee4:	687a      	ldr	r2, [r7, #4]
 800fee6:	7c12      	ldrb	r2, [r2, #16]
 800fee8:	f107 0108 	add.w	r1, r7, #8
 800feec:	4610      	mov	r0, r2
 800feee:	4798      	blx	r3
 800fef0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fef2:	e029      	b.n	800ff48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fef4:	6839      	ldr	r1, [r7, #0]
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f000 fa4a 	bl	8010390 <USBD_CtlError>
            err++;
 800fefc:	7afb      	ldrb	r3, [r7, #11]
 800fefe:	3301      	adds	r3, #1
 800ff00:	72fb      	strb	r3, [r7, #11]
          break;
 800ff02:	e021      	b.n	800ff48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff0a:	699b      	ldr	r3, [r3, #24]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d00b      	beq.n	800ff28 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ff16:	699b      	ldr	r3, [r3, #24]
 800ff18:	687a      	ldr	r2, [r7, #4]
 800ff1a:	7c12      	ldrb	r2, [r2, #16]
 800ff1c:	f107 0108 	add.w	r1, r7, #8
 800ff20:	4610      	mov	r0, r2
 800ff22:	4798      	blx	r3
 800ff24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ff26:	e00f      	b.n	800ff48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ff28:	6839      	ldr	r1, [r7, #0]
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f000 fa30 	bl	8010390 <USBD_CtlError>
            err++;
 800ff30:	7afb      	ldrb	r3, [r7, #11]
 800ff32:	3301      	adds	r3, #1
 800ff34:	72fb      	strb	r3, [r7, #11]
          break;
 800ff36:	e007      	b.n	800ff48 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ff38:	6839      	ldr	r1, [r7, #0]
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f000 fa28 	bl	8010390 <USBD_CtlError>
          err++;
 800ff40:	7afb      	ldrb	r3, [r7, #11]
 800ff42:	3301      	adds	r3, #1
 800ff44:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ff46:	bf00      	nop
      }
      break;
 800ff48:	e037      	b.n	800ffba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	7c1b      	ldrb	r3, [r3, #16]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d109      	bne.n	800ff66 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ff5a:	f107 0208 	add.w	r2, r7, #8
 800ff5e:	4610      	mov	r0, r2
 800ff60:	4798      	blx	r3
 800ff62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff64:	e029      	b.n	800ffba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ff66:	6839      	ldr	r1, [r7, #0]
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f000 fa11 	bl	8010390 <USBD_CtlError>
        err++;
 800ff6e:	7afb      	ldrb	r3, [r7, #11]
 800ff70:	3301      	adds	r3, #1
 800ff72:	72fb      	strb	r3, [r7, #11]
      break;
 800ff74:	e021      	b.n	800ffba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	7c1b      	ldrb	r3, [r3, #16]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d10d      	bne.n	800ff9a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ff84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff86:	f107 0208 	add.w	r2, r7, #8
 800ff8a:	4610      	mov	r0, r2
 800ff8c:	4798      	blx	r3
 800ff8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	3301      	adds	r3, #1
 800ff94:	2207      	movs	r2, #7
 800ff96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff98:	e00f      	b.n	800ffba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ff9a:	6839      	ldr	r1, [r7, #0]
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f000 f9f7 	bl	8010390 <USBD_CtlError>
        err++;
 800ffa2:	7afb      	ldrb	r3, [r7, #11]
 800ffa4:	3301      	adds	r3, #1
 800ffa6:	72fb      	strb	r3, [r7, #11]
      break;
 800ffa8:	e007      	b.n	800ffba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ffaa:	6839      	ldr	r1, [r7, #0]
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f000 f9ef 	bl	8010390 <USBD_CtlError>
      err++;
 800ffb2:	7afb      	ldrb	r3, [r7, #11]
 800ffb4:	3301      	adds	r3, #1
 800ffb6:	72fb      	strb	r3, [r7, #11]
      break;
 800ffb8:	bf00      	nop
  }

  if (err != 0U)
 800ffba:	7afb      	ldrb	r3, [r7, #11]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d11e      	bne.n	800fffe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	88db      	ldrh	r3, [r3, #6]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d016      	beq.n	800fff6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ffc8:	893b      	ldrh	r3, [r7, #8]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d00e      	beq.n	800ffec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	88da      	ldrh	r2, [r3, #6]
 800ffd2:	893b      	ldrh	r3, [r7, #8]
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	bf28      	it	cs
 800ffd8:	4613      	movcs	r3, r2
 800ffda:	b29b      	uxth	r3, r3
 800ffdc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ffde:	893b      	ldrh	r3, [r7, #8]
 800ffe0:	461a      	mov	r2, r3
 800ffe2:	68f9      	ldr	r1, [r7, #12]
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f000 fa44 	bl	8010472 <USBD_CtlSendData>
 800ffea:	e009      	b.n	8010000 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ffec:	6839      	ldr	r1, [r7, #0]
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f000 f9ce 	bl	8010390 <USBD_CtlError>
 800fff4:	e004      	b.n	8010000 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f000 fa95 	bl	8010526 <USBD_CtlSendStatus>
 800fffc:	e000      	b.n	8010000 <USBD_GetDescriptor+0x320>
    return;
 800fffe:	bf00      	nop
  }
}
 8010000:	3710      	adds	r7, #16
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
 8010006:	bf00      	nop

08010008 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b084      	sub	sp, #16
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]
 8010010:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	889b      	ldrh	r3, [r3, #4]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d131      	bne.n	801007e <USBD_SetAddress+0x76>
 801001a:	683b      	ldr	r3, [r7, #0]
 801001c:	88db      	ldrh	r3, [r3, #6]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d12d      	bne.n	801007e <USBD_SetAddress+0x76>
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	885b      	ldrh	r3, [r3, #2]
 8010026:	2b7f      	cmp	r3, #127	@ 0x7f
 8010028:	d829      	bhi.n	801007e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	885b      	ldrh	r3, [r3, #2]
 801002e:	b2db      	uxtb	r3, r3
 8010030:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010034:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801003c:	b2db      	uxtb	r3, r3
 801003e:	2b03      	cmp	r3, #3
 8010040:	d104      	bne.n	801004c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010042:	6839      	ldr	r1, [r7, #0]
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f000 f9a3 	bl	8010390 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801004a:	e01d      	b.n	8010088 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	7bfa      	ldrb	r2, [r7, #15]
 8010050:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010054:	7bfb      	ldrb	r3, [r7, #15]
 8010056:	4619      	mov	r1, r3
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 feb7 	bl	8010dcc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801005e:	6878      	ldr	r0, [r7, #4]
 8010060:	f000 fa61 	bl	8010526 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010064:	7bfb      	ldrb	r3, [r7, #15]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d004      	beq.n	8010074 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	2202      	movs	r2, #2
 801006e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010072:	e009      	b.n	8010088 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2201      	movs	r2, #1
 8010078:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801007c:	e004      	b.n	8010088 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801007e:	6839      	ldr	r1, [r7, #0]
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f000 f985 	bl	8010390 <USBD_CtlError>
  }
}
 8010086:	bf00      	nop
 8010088:	bf00      	nop
 801008a:	3710      	adds	r7, #16
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b084      	sub	sp, #16
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801009a:	2300      	movs	r3, #0
 801009c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	885b      	ldrh	r3, [r3, #2]
 80100a2:	b2da      	uxtb	r2, r3
 80100a4:	4b4c      	ldr	r3, [pc, #304]	@ (80101d8 <USBD_SetConfig+0x148>)
 80100a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80100a8:	4b4b      	ldr	r3, [pc, #300]	@ (80101d8 <USBD_SetConfig+0x148>)
 80100aa:	781b      	ldrb	r3, [r3, #0]
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	d905      	bls.n	80100bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80100b0:	6839      	ldr	r1, [r7, #0]
 80100b2:	6878      	ldr	r0, [r7, #4]
 80100b4:	f000 f96c 	bl	8010390 <USBD_CtlError>
    return USBD_FAIL;
 80100b8:	2303      	movs	r3, #3
 80100ba:	e088      	b.n	80101ce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	2b02      	cmp	r3, #2
 80100c6:	d002      	beq.n	80100ce <USBD_SetConfig+0x3e>
 80100c8:	2b03      	cmp	r3, #3
 80100ca:	d025      	beq.n	8010118 <USBD_SetConfig+0x88>
 80100cc:	e071      	b.n	80101b2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80100ce:	4b42      	ldr	r3, [pc, #264]	@ (80101d8 <USBD_SetConfig+0x148>)
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d01c      	beq.n	8010110 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80100d6:	4b40      	ldr	r3, [pc, #256]	@ (80101d8 <USBD_SetConfig+0x148>)
 80100d8:	781b      	ldrb	r3, [r3, #0]
 80100da:	461a      	mov	r2, r3
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80100e0:	4b3d      	ldr	r3, [pc, #244]	@ (80101d8 <USBD_SetConfig+0x148>)
 80100e2:	781b      	ldrb	r3, [r3, #0]
 80100e4:	4619      	mov	r1, r3
 80100e6:	6878      	ldr	r0, [r7, #4]
 80100e8:	f7ff f992 	bl	800f410 <USBD_SetClassConfig>
 80100ec:	4603      	mov	r3, r0
 80100ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80100f0:	7bfb      	ldrb	r3, [r7, #15]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d004      	beq.n	8010100 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80100f6:	6839      	ldr	r1, [r7, #0]
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f000 f949 	bl	8010390 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80100fe:	e065      	b.n	80101cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010100:	6878      	ldr	r0, [r7, #4]
 8010102:	f000 fa10 	bl	8010526 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2203      	movs	r2, #3
 801010a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801010e:	e05d      	b.n	80101cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 fa08 	bl	8010526 <USBD_CtlSendStatus>
      break;
 8010116:	e059      	b.n	80101cc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010118:	4b2f      	ldr	r3, [pc, #188]	@ (80101d8 <USBD_SetConfig+0x148>)
 801011a:	781b      	ldrb	r3, [r3, #0]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d112      	bne.n	8010146 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	2202      	movs	r2, #2
 8010124:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010128:	4b2b      	ldr	r3, [pc, #172]	@ (80101d8 <USBD_SetConfig+0x148>)
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	461a      	mov	r2, r3
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010132:	4b29      	ldr	r3, [pc, #164]	@ (80101d8 <USBD_SetConfig+0x148>)
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	4619      	mov	r1, r3
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f7ff f985 	bl	800f448 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	f000 f9f1 	bl	8010526 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010144:	e042      	b.n	80101cc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8010146:	4b24      	ldr	r3, [pc, #144]	@ (80101d8 <USBD_SetConfig+0x148>)
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	461a      	mov	r2, r3
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	685b      	ldr	r3, [r3, #4]
 8010150:	429a      	cmp	r2, r3
 8010152:	d02a      	beq.n	80101aa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	b2db      	uxtb	r3, r3
 801015a:	4619      	mov	r1, r3
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7ff f973 	bl	800f448 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010162:	4b1d      	ldr	r3, [pc, #116]	@ (80101d8 <USBD_SetConfig+0x148>)
 8010164:	781b      	ldrb	r3, [r3, #0]
 8010166:	461a      	mov	r2, r3
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801016c:	4b1a      	ldr	r3, [pc, #104]	@ (80101d8 <USBD_SetConfig+0x148>)
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	4619      	mov	r1, r3
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f7ff f94c 	bl	800f410 <USBD_SetClassConfig>
 8010178:	4603      	mov	r3, r0
 801017a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801017c:	7bfb      	ldrb	r3, [r7, #15]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00f      	beq.n	80101a2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010182:	6839      	ldr	r1, [r7, #0]
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f000 f903 	bl	8010390 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	b2db      	uxtb	r3, r3
 8010190:	4619      	mov	r1, r3
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f7ff f958 	bl	800f448 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	2202      	movs	r2, #2
 801019c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80101a0:	e014      	b.n	80101cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 f9bf 	bl	8010526 <USBD_CtlSendStatus>
      break;
 80101a8:	e010      	b.n	80101cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f000 f9bb 	bl	8010526 <USBD_CtlSendStatus>
      break;
 80101b0:	e00c      	b.n	80101cc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80101b2:	6839      	ldr	r1, [r7, #0]
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f000 f8eb 	bl	8010390 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80101ba:	4b07      	ldr	r3, [pc, #28]	@ (80101d8 <USBD_SetConfig+0x148>)
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	4619      	mov	r1, r3
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f7ff f941 	bl	800f448 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80101c6:	2303      	movs	r3, #3
 80101c8:	73fb      	strb	r3, [r7, #15]
      break;
 80101ca:	bf00      	nop
  }

  return ret;
 80101cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3710      	adds	r7, #16
 80101d2:	46bd      	mov	sp, r7
 80101d4:	bd80      	pop	{r7, pc}
 80101d6:	bf00      	nop
 80101d8:	20000bd0 	.word	0x20000bd0

080101dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b082      	sub	sp, #8
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80101e6:	683b      	ldr	r3, [r7, #0]
 80101e8:	88db      	ldrh	r3, [r3, #6]
 80101ea:	2b01      	cmp	r3, #1
 80101ec:	d004      	beq.n	80101f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80101ee:	6839      	ldr	r1, [r7, #0]
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f000 f8cd 	bl	8010390 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80101f6:	e023      	b.n	8010240 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101fe:	b2db      	uxtb	r3, r3
 8010200:	2b02      	cmp	r3, #2
 8010202:	dc02      	bgt.n	801020a <USBD_GetConfig+0x2e>
 8010204:	2b00      	cmp	r3, #0
 8010206:	dc03      	bgt.n	8010210 <USBD_GetConfig+0x34>
 8010208:	e015      	b.n	8010236 <USBD_GetConfig+0x5a>
 801020a:	2b03      	cmp	r3, #3
 801020c:	d00b      	beq.n	8010226 <USBD_GetConfig+0x4a>
 801020e:	e012      	b.n	8010236 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	2200      	movs	r2, #0
 8010214:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	3308      	adds	r3, #8
 801021a:	2201      	movs	r2, #1
 801021c:	4619      	mov	r1, r3
 801021e:	6878      	ldr	r0, [r7, #4]
 8010220:	f000 f927 	bl	8010472 <USBD_CtlSendData>
        break;
 8010224:	e00c      	b.n	8010240 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	3304      	adds	r3, #4
 801022a:	2201      	movs	r2, #1
 801022c:	4619      	mov	r1, r3
 801022e:	6878      	ldr	r0, [r7, #4]
 8010230:	f000 f91f 	bl	8010472 <USBD_CtlSendData>
        break;
 8010234:	e004      	b.n	8010240 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010236:	6839      	ldr	r1, [r7, #0]
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f000 f8a9 	bl	8010390 <USBD_CtlError>
        break;
 801023e:	bf00      	nop
}
 8010240:	bf00      	nop
 8010242:	3708      	adds	r7, #8
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b082      	sub	sp, #8
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010258:	b2db      	uxtb	r3, r3
 801025a:	3b01      	subs	r3, #1
 801025c:	2b02      	cmp	r3, #2
 801025e:	d81e      	bhi.n	801029e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	88db      	ldrh	r3, [r3, #6]
 8010264:	2b02      	cmp	r3, #2
 8010266:	d004      	beq.n	8010272 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010268:	6839      	ldr	r1, [r7, #0]
 801026a:	6878      	ldr	r0, [r7, #4]
 801026c:	f000 f890 	bl	8010390 <USBD_CtlError>
        break;
 8010270:	e01a      	b.n	80102a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	2201      	movs	r2, #1
 8010276:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801027e:	2b00      	cmp	r3, #0
 8010280:	d005      	beq.n	801028e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	f043 0202 	orr.w	r2, r3, #2
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	330c      	adds	r3, #12
 8010292:	2202      	movs	r2, #2
 8010294:	4619      	mov	r1, r3
 8010296:	6878      	ldr	r0, [r7, #4]
 8010298:	f000 f8eb 	bl	8010472 <USBD_CtlSendData>
      break;
 801029c:	e004      	b.n	80102a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801029e:	6839      	ldr	r1, [r7, #0]
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f000 f875 	bl	8010390 <USBD_CtlError>
      break;
 80102a6:	bf00      	nop
  }
}
 80102a8:	bf00      	nop
 80102aa:	3708      	adds	r7, #8
 80102ac:	46bd      	mov	sp, r7
 80102ae:	bd80      	pop	{r7, pc}

080102b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	885b      	ldrh	r3, [r3, #2]
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d106      	bne.n	80102d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2201      	movs	r2, #1
 80102c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f000 f92b 	bl	8010526 <USBD_CtlSendStatus>
  }
}
 80102d0:	bf00      	nop
 80102d2:	3708      	adds	r7, #8
 80102d4:	46bd      	mov	sp, r7
 80102d6:	bd80      	pop	{r7, pc}

080102d8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	b082      	sub	sp, #8
 80102dc:	af00      	add	r7, sp, #0
 80102de:	6078      	str	r0, [r7, #4]
 80102e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102e8:	b2db      	uxtb	r3, r3
 80102ea:	3b01      	subs	r3, #1
 80102ec:	2b02      	cmp	r3, #2
 80102ee:	d80b      	bhi.n	8010308 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	885b      	ldrh	r3, [r3, #2]
 80102f4:	2b01      	cmp	r3, #1
 80102f6:	d10c      	bne.n	8010312 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2200      	movs	r2, #0
 80102fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f000 f910 	bl	8010526 <USBD_CtlSendStatus>
      }
      break;
 8010306:	e004      	b.n	8010312 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010308:	6839      	ldr	r1, [r7, #0]
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f000 f840 	bl	8010390 <USBD_CtlError>
      break;
 8010310:	e000      	b.n	8010314 <USBD_ClrFeature+0x3c>
      break;
 8010312:	bf00      	nop
  }
}
 8010314:	bf00      	nop
 8010316:	3708      	adds	r7, #8
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}

0801031c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b084      	sub	sp, #16
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010326:	683b      	ldr	r3, [r7, #0]
 8010328:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	781a      	ldrb	r2, [r3, #0]
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	3301      	adds	r3, #1
 8010336:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	781a      	ldrb	r2, [r3, #0]
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	3301      	adds	r3, #1
 8010344:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010346:	68f8      	ldr	r0, [r7, #12]
 8010348:	f7ff fa92 	bl	800f870 <SWAPBYTE>
 801034c:	4603      	mov	r3, r0
 801034e:	461a      	mov	r2, r3
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	3301      	adds	r3, #1
 8010358:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	3301      	adds	r3, #1
 801035e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010360:	68f8      	ldr	r0, [r7, #12]
 8010362:	f7ff fa85 	bl	800f870 <SWAPBYTE>
 8010366:	4603      	mov	r3, r0
 8010368:	461a      	mov	r2, r3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	3301      	adds	r3, #1
 8010372:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	3301      	adds	r3, #1
 8010378:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801037a:	68f8      	ldr	r0, [r7, #12]
 801037c:	f7ff fa78 	bl	800f870 <SWAPBYTE>
 8010380:	4603      	mov	r3, r0
 8010382:	461a      	mov	r2, r3
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	80da      	strh	r2, [r3, #6]
}
 8010388:	bf00      	nop
 801038a:	3710      	adds	r7, #16
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
 8010398:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801039a:	2180      	movs	r1, #128	@ 0x80
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f000 fcab 	bl	8010cf8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80103a2:	2100      	movs	r1, #0
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f000 fca7 	bl	8010cf8 <USBD_LL_StallEP>
}
 80103aa:	bf00      	nop
 80103ac:	3708      	adds	r7, #8
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}

080103b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80103b2:	b580      	push	{r7, lr}
 80103b4:	b086      	sub	sp, #24
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	60f8      	str	r0, [r7, #12]
 80103ba:	60b9      	str	r1, [r7, #8]
 80103bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80103be:	2300      	movs	r3, #0
 80103c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d036      	beq.n	8010436 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80103cc:	6938      	ldr	r0, [r7, #16]
 80103ce:	f000 f836 	bl	801043e <USBD_GetLen>
 80103d2:	4603      	mov	r3, r0
 80103d4:	3301      	adds	r3, #1
 80103d6:	b29b      	uxth	r3, r3
 80103d8:	005b      	lsls	r3, r3, #1
 80103da:	b29a      	uxth	r2, r3
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80103e0:	7dfb      	ldrb	r3, [r7, #23]
 80103e2:	68ba      	ldr	r2, [r7, #8]
 80103e4:	4413      	add	r3, r2
 80103e6:	687a      	ldr	r2, [r7, #4]
 80103e8:	7812      	ldrb	r2, [r2, #0]
 80103ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80103ec:	7dfb      	ldrb	r3, [r7, #23]
 80103ee:	3301      	adds	r3, #1
 80103f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80103f2:	7dfb      	ldrb	r3, [r7, #23]
 80103f4:	68ba      	ldr	r2, [r7, #8]
 80103f6:	4413      	add	r3, r2
 80103f8:	2203      	movs	r2, #3
 80103fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80103fc:	7dfb      	ldrb	r3, [r7, #23]
 80103fe:	3301      	adds	r3, #1
 8010400:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010402:	e013      	b.n	801042c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010404:	7dfb      	ldrb	r3, [r7, #23]
 8010406:	68ba      	ldr	r2, [r7, #8]
 8010408:	4413      	add	r3, r2
 801040a:	693a      	ldr	r2, [r7, #16]
 801040c:	7812      	ldrb	r2, [r2, #0]
 801040e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	3301      	adds	r3, #1
 8010414:	613b      	str	r3, [r7, #16]
    idx++;
 8010416:	7dfb      	ldrb	r3, [r7, #23]
 8010418:	3301      	adds	r3, #1
 801041a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801041c:	7dfb      	ldrb	r3, [r7, #23]
 801041e:	68ba      	ldr	r2, [r7, #8]
 8010420:	4413      	add	r3, r2
 8010422:	2200      	movs	r2, #0
 8010424:	701a      	strb	r2, [r3, #0]
    idx++;
 8010426:	7dfb      	ldrb	r3, [r7, #23]
 8010428:	3301      	adds	r3, #1
 801042a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801042c:	693b      	ldr	r3, [r7, #16]
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d1e7      	bne.n	8010404 <USBD_GetString+0x52>
 8010434:	e000      	b.n	8010438 <USBD_GetString+0x86>
    return;
 8010436:	bf00      	nop
  }
}
 8010438:	3718      	adds	r7, #24
 801043a:	46bd      	mov	sp, r7
 801043c:	bd80      	pop	{r7, pc}

0801043e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801043e:	b480      	push	{r7}
 8010440:	b085      	sub	sp, #20
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8010446:	2300      	movs	r3, #0
 8010448:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801044e:	e005      	b.n	801045c <USBD_GetLen+0x1e>
  {
    len++;
 8010450:	7bfb      	ldrb	r3, [r7, #15]
 8010452:	3301      	adds	r3, #1
 8010454:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	3301      	adds	r3, #1
 801045a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	781b      	ldrb	r3, [r3, #0]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d1f5      	bne.n	8010450 <USBD_GetLen+0x12>
  }

  return len;
 8010464:	7bfb      	ldrb	r3, [r7, #15]
}
 8010466:	4618      	mov	r0, r3
 8010468:	3714      	adds	r7, #20
 801046a:	46bd      	mov	sp, r7
 801046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010470:	4770      	bx	lr

08010472 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010472:	b580      	push	{r7, lr}
 8010474:	b084      	sub	sp, #16
 8010476:	af00      	add	r7, sp, #0
 8010478:	60f8      	str	r0, [r7, #12]
 801047a:	60b9      	str	r1, [r7, #8]
 801047c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	2202      	movs	r2, #2
 8010482:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	687a      	ldr	r2, [r7, #4]
 801048a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	687a      	ldr	r2, [r7, #4]
 8010490:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	68ba      	ldr	r2, [r7, #8]
 8010496:	2100      	movs	r1, #0
 8010498:	68f8      	ldr	r0, [r7, #12]
 801049a:	f000 fcb6 	bl	8010e0a <USBD_LL_Transmit>

  return USBD_OK;
 801049e:	2300      	movs	r3, #0
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	3710      	adds	r7, #16
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}

080104a8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b084      	sub	sp, #16
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	60f8      	str	r0, [r7, #12]
 80104b0:	60b9      	str	r1, [r7, #8]
 80104b2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	68ba      	ldr	r2, [r7, #8]
 80104b8:	2100      	movs	r1, #0
 80104ba:	68f8      	ldr	r0, [r7, #12]
 80104bc:	f000 fca5 	bl	8010e0a <USBD_LL_Transmit>

  return USBD_OK;
 80104c0:	2300      	movs	r3, #0
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	3710      	adds	r7, #16
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}

080104ca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80104ca:	b580      	push	{r7, lr}
 80104cc:	b084      	sub	sp, #16
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	60f8      	str	r0, [r7, #12]
 80104d2:	60b9      	str	r1, [r7, #8]
 80104d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	2203      	movs	r2, #3
 80104da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	687a      	ldr	r2, [r7, #4]
 80104e2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	687a      	ldr	r2, [r7, #4]
 80104ea:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	68ba      	ldr	r2, [r7, #8]
 80104f2:	2100      	movs	r1, #0
 80104f4:	68f8      	ldr	r0, [r7, #12]
 80104f6:	f000 fca9 	bl	8010e4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80104fa:	2300      	movs	r3, #0
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3710      	adds	r7, #16
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b084      	sub	sp, #16
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	60b9      	str	r1, [r7, #8]
 801050e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	68ba      	ldr	r2, [r7, #8]
 8010514:	2100      	movs	r1, #0
 8010516:	68f8      	ldr	r0, [r7, #12]
 8010518:	f000 fc98 	bl	8010e4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 801051c:	2300      	movs	r3, #0
}
 801051e:	4618      	mov	r0, r3
 8010520:	3710      	adds	r7, #16
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}

08010526 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010526:	b580      	push	{r7, lr}
 8010528:	b082      	sub	sp, #8
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	2204      	movs	r2, #4
 8010532:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010536:	2300      	movs	r3, #0
 8010538:	2200      	movs	r2, #0
 801053a:	2100      	movs	r1, #0
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f000 fc64 	bl	8010e0a <USBD_LL_Transmit>

  return USBD_OK;
 8010542:	2300      	movs	r3, #0
}
 8010544:	4618      	mov	r0, r3
 8010546:	3708      	adds	r7, #8
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b082      	sub	sp, #8
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2205      	movs	r2, #5
 8010558:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801055c:	2300      	movs	r3, #0
 801055e:	2200      	movs	r2, #0
 8010560:	2100      	movs	r1, #0
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f000 fc72 	bl	8010e4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010568:	2300      	movs	r3, #0
}
 801056a:	4618      	mov	r0, r3
 801056c:	3708      	adds	r7, #8
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
	...

08010574 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010578:	2200      	movs	r2, #0
 801057a:	4912      	ldr	r1, [pc, #72]	@ (80105c4 <MX_USB_Device_Init+0x50>)
 801057c:	4812      	ldr	r0, [pc, #72]	@ (80105c8 <MX_USB_Device_Init+0x54>)
 801057e:	f7fe fed9 	bl	800f334 <USBD_Init>
 8010582:	4603      	mov	r3, r0
 8010584:	2b00      	cmp	r3, #0
 8010586:	d001      	beq.n	801058c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010588:	f7f3 fabe 	bl	8003b08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 801058c:	490f      	ldr	r1, [pc, #60]	@ (80105cc <MX_USB_Device_Init+0x58>)
 801058e:	480e      	ldr	r0, [pc, #56]	@ (80105c8 <MX_USB_Device_Init+0x54>)
 8010590:	f7fe ff00 	bl	800f394 <USBD_RegisterClass>
 8010594:	4603      	mov	r3, r0
 8010596:	2b00      	cmp	r3, #0
 8010598:	d001      	beq.n	801059e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801059a:	f7f3 fab5 	bl	8003b08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801059e:	490c      	ldr	r1, [pc, #48]	@ (80105d0 <MX_USB_Device_Init+0x5c>)
 80105a0:	4809      	ldr	r0, [pc, #36]	@ (80105c8 <MX_USB_Device_Init+0x54>)
 80105a2:	f7fe fe21 	bl	800f1e8 <USBD_CDC_RegisterInterface>
 80105a6:	4603      	mov	r3, r0
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d001      	beq.n	80105b0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80105ac:	f7f3 faac 	bl	8003b08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80105b0:	4805      	ldr	r0, [pc, #20]	@ (80105c8 <MX_USB_Device_Init+0x54>)
 80105b2:	f7fe ff16 	bl	800f3e2 <USBD_Start>
 80105b6:	4603      	mov	r3, r0
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d001      	beq.n	80105c0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80105bc:	f7f3 faa4 	bl	8003b08 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80105c0:	bf00      	nop
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	20000198 	.word	0x20000198
 80105c8:	20000bd4 	.word	0x20000bd4
 80105cc:	20000080 	.word	0x20000080
 80105d0:	20000184 	.word	0x20000184

080105d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80105d8:	2200      	movs	r2, #0
 80105da:	4905      	ldr	r1, [pc, #20]	@ (80105f0 <CDC_Init_FS+0x1c>)
 80105dc:	4805      	ldr	r0, [pc, #20]	@ (80105f4 <CDC_Init_FS+0x20>)
 80105de:	f7fe fe18 	bl	800f212 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80105e2:	4905      	ldr	r1, [pc, #20]	@ (80105f8 <CDC_Init_FS+0x24>)
 80105e4:	4803      	ldr	r0, [pc, #12]	@ (80105f4 <CDC_Init_FS+0x20>)
 80105e6:	f7fe fe32 	bl	800f24e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80105ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80105ec:	4618      	mov	r0, r3
 80105ee:	bd80      	pop	{r7, pc}
 80105f0:	200016a4 	.word	0x200016a4
 80105f4:	20000bd4 	.word	0x20000bd4
 80105f8:	20000ea4 	.word	0x20000ea4

080105fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80105fc:	b480      	push	{r7}
 80105fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010600:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010602:	4618      	mov	r0, r3
 8010604:	46bd      	mov	sp, r7
 8010606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060a:	4770      	bx	lr

0801060c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801060c:	b480      	push	{r7}
 801060e:	b083      	sub	sp, #12
 8010610:	af00      	add	r7, sp, #0
 8010612:	4603      	mov	r3, r0
 8010614:	6039      	str	r1, [r7, #0]
 8010616:	71fb      	strb	r3, [r7, #7]
 8010618:	4613      	mov	r3, r2
 801061a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801061c:	79fb      	ldrb	r3, [r7, #7]
 801061e:	2b23      	cmp	r3, #35	@ 0x23
 8010620:	d84a      	bhi.n	80106b8 <CDC_Control_FS+0xac>
 8010622:	a201      	add	r2, pc, #4	@ (adr r2, 8010628 <CDC_Control_FS+0x1c>)
 8010624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010628:	080106b9 	.word	0x080106b9
 801062c:	080106b9 	.word	0x080106b9
 8010630:	080106b9 	.word	0x080106b9
 8010634:	080106b9 	.word	0x080106b9
 8010638:	080106b9 	.word	0x080106b9
 801063c:	080106b9 	.word	0x080106b9
 8010640:	080106b9 	.word	0x080106b9
 8010644:	080106b9 	.word	0x080106b9
 8010648:	080106b9 	.word	0x080106b9
 801064c:	080106b9 	.word	0x080106b9
 8010650:	080106b9 	.word	0x080106b9
 8010654:	080106b9 	.word	0x080106b9
 8010658:	080106b9 	.word	0x080106b9
 801065c:	080106b9 	.word	0x080106b9
 8010660:	080106b9 	.word	0x080106b9
 8010664:	080106b9 	.word	0x080106b9
 8010668:	080106b9 	.word	0x080106b9
 801066c:	080106b9 	.word	0x080106b9
 8010670:	080106b9 	.word	0x080106b9
 8010674:	080106b9 	.word	0x080106b9
 8010678:	080106b9 	.word	0x080106b9
 801067c:	080106b9 	.word	0x080106b9
 8010680:	080106b9 	.word	0x080106b9
 8010684:	080106b9 	.word	0x080106b9
 8010688:	080106b9 	.word	0x080106b9
 801068c:	080106b9 	.word	0x080106b9
 8010690:	080106b9 	.word	0x080106b9
 8010694:	080106b9 	.word	0x080106b9
 8010698:	080106b9 	.word	0x080106b9
 801069c:	080106b9 	.word	0x080106b9
 80106a0:	080106b9 	.word	0x080106b9
 80106a4:	080106b9 	.word	0x080106b9
 80106a8:	080106b9 	.word	0x080106b9
 80106ac:	080106b9 	.word	0x080106b9
 80106b0:	080106b9 	.word	0x080106b9
 80106b4:	080106b9 	.word	0x080106b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80106b8:	bf00      	nop
  }

  return (USBD_OK);
 80106ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80106bc:	4618      	mov	r0, r3
 80106be:	370c      	adds	r7, #12
 80106c0:	46bd      	mov	sp, r7
 80106c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c6:	4770      	bx	lr

080106c8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b082      	sub	sp, #8
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	if (*Len > sizeof(USB_RX_Buffer)) {
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80106da:	d903      	bls.n	80106e4 <CDC_Receive_FS+0x1c>
	          *Len = sizeof(USB_RX_Buffer);  // Prevent buffer overflow
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80106e2:	601a      	str	r2, [r3, #0]
	      }
	      memcpy(USB_RX_Buffer, Buf, *Len);
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	461a      	mov	r2, r3
 80106ea:	6879      	ldr	r1, [r7, #4]
 80106ec:	4808      	ldr	r0, [pc, #32]	@ (8010710 <CDC_Receive_FS+0x48>)
 80106ee:	f001 fcb0 	bl	8012052 <memcpy>

	      dataReceivedFlag = 1;
 80106f2:	4b08      	ldr	r3, [pc, #32]	@ (8010714 <CDC_Receive_FS+0x4c>)
 80106f4:	2201      	movs	r2, #1
 80106f6:	601a      	str	r2, [r3, #0]

	      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80106f8:	6879      	ldr	r1, [r7, #4]
 80106fa:	4807      	ldr	r0, [pc, #28]	@ (8010718 <CDC_Receive_FS+0x50>)
 80106fc:	f7fe fda7 	bl	800f24e <USBD_CDC_SetRxBuffer>
	      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010700:	4805      	ldr	r0, [pc, #20]	@ (8010718 <CDC_Receive_FS+0x50>)
 8010702:	f7fe fded 	bl	800f2e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010706:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010708:	4618      	mov	r0, r3
 801070a:	3708      	adds	r7, #8
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}
 8010710:	20000abc 	.word	0x20000abc
 8010714:	20000b7c 	.word	0x20000b7c
 8010718:	20000bd4 	.word	0x20000bd4

0801071c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b084      	sub	sp, #16
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	460b      	mov	r3, r1
 8010726:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010728:	2300      	movs	r3, #0
 801072a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801072c:	4b0d      	ldr	r3, [pc, #52]	@ (8010764 <CDC_Transmit_FS+0x48>)
 801072e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8010732:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010734:	68bb      	ldr	r3, [r7, #8]
 8010736:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801073a:	2b00      	cmp	r3, #0
 801073c:	d001      	beq.n	8010742 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801073e:	2301      	movs	r3, #1
 8010740:	e00b      	b.n	801075a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010742:	887b      	ldrh	r3, [r7, #2]
 8010744:	461a      	mov	r2, r3
 8010746:	6879      	ldr	r1, [r7, #4]
 8010748:	4806      	ldr	r0, [pc, #24]	@ (8010764 <CDC_Transmit_FS+0x48>)
 801074a:	f7fe fd62 	bl	800f212 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801074e:	4805      	ldr	r0, [pc, #20]	@ (8010764 <CDC_Transmit_FS+0x48>)
 8010750:	f7fe fd96 	bl	800f280 <USBD_CDC_TransmitPacket>
 8010754:	4603      	mov	r3, r0
 8010756:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010758:	7bfb      	ldrb	r3, [r7, #15]
}
 801075a:	4618      	mov	r0, r3
 801075c:	3710      	adds	r7, #16
 801075e:	46bd      	mov	sp, r7
 8010760:	bd80      	pop	{r7, pc}
 8010762:	bf00      	nop
 8010764:	20000bd4 	.word	0x20000bd4

08010768 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010768:	b480      	push	{r7}
 801076a:	b087      	sub	sp, #28
 801076c:	af00      	add	r7, sp, #0
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	60b9      	str	r1, [r7, #8]
 8010772:	4613      	mov	r3, r2
 8010774:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010776:	2300      	movs	r3, #0
 8010778:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801077a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801077e:	4618      	mov	r0, r3
 8010780:	371c      	adds	r7, #28
 8010782:	46bd      	mov	sp, r7
 8010784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010788:	4770      	bx	lr
	...

0801078c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	4603      	mov	r3, r0
 8010794:	6039      	str	r1, [r7, #0]
 8010796:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8010798:	683b      	ldr	r3, [r7, #0]
 801079a:	2212      	movs	r2, #18
 801079c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801079e:	4b03      	ldr	r3, [pc, #12]	@ (80107ac <USBD_CDC_DeviceDescriptor+0x20>)
}
 80107a0:	4618      	mov	r0, r3
 80107a2:	370c      	adds	r7, #12
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr
 80107ac:	200001b8 	.word	0x200001b8

080107b0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80107b0:	b480      	push	{r7}
 80107b2:	b083      	sub	sp, #12
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	4603      	mov	r3, r0
 80107b8:	6039      	str	r1, [r7, #0]
 80107ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	2204      	movs	r2, #4
 80107c0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80107c2:	4b03      	ldr	r3, [pc, #12]	@ (80107d0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	370c      	adds	r7, #12
 80107c8:	46bd      	mov	sp, r7
 80107ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ce:	4770      	bx	lr
 80107d0:	200001cc 	.word	0x200001cc

080107d4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b082      	sub	sp, #8
 80107d8:	af00      	add	r7, sp, #0
 80107da:	4603      	mov	r3, r0
 80107dc:	6039      	str	r1, [r7, #0]
 80107de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80107e0:	79fb      	ldrb	r3, [r7, #7]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d105      	bne.n	80107f2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80107e6:	683a      	ldr	r2, [r7, #0]
 80107e8:	4907      	ldr	r1, [pc, #28]	@ (8010808 <USBD_CDC_ProductStrDescriptor+0x34>)
 80107ea:	4808      	ldr	r0, [pc, #32]	@ (801080c <USBD_CDC_ProductStrDescriptor+0x38>)
 80107ec:	f7ff fde1 	bl	80103b2 <USBD_GetString>
 80107f0:	e004      	b.n	80107fc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80107f2:	683a      	ldr	r2, [r7, #0]
 80107f4:	4904      	ldr	r1, [pc, #16]	@ (8010808 <USBD_CDC_ProductStrDescriptor+0x34>)
 80107f6:	4805      	ldr	r0, [pc, #20]	@ (801080c <USBD_CDC_ProductStrDescriptor+0x38>)
 80107f8:	f7ff fddb 	bl	80103b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80107fc:	4b02      	ldr	r3, [pc, #8]	@ (8010808 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80107fe:	4618      	mov	r0, r3
 8010800:	3708      	adds	r7, #8
 8010802:	46bd      	mov	sp, r7
 8010804:	bd80      	pop	{r7, pc}
 8010806:	bf00      	nop
 8010808:	20001ea4 	.word	0x20001ea4
 801080c:	08017114 	.word	0x08017114

08010810 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
 8010816:	4603      	mov	r3, r0
 8010818:	6039      	str	r1, [r7, #0]
 801081a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801081c:	683a      	ldr	r2, [r7, #0]
 801081e:	4904      	ldr	r1, [pc, #16]	@ (8010830 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8010820:	4804      	ldr	r0, [pc, #16]	@ (8010834 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8010822:	f7ff fdc6 	bl	80103b2 <USBD_GetString>
  return USBD_StrDesc;
 8010826:	4b02      	ldr	r3, [pc, #8]	@ (8010830 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010828:	4618      	mov	r0, r3
 801082a:	3708      	adds	r7, #8
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}
 8010830:	20001ea4 	.word	0x20001ea4
 8010834:	0801712c 	.word	0x0801712c

08010838 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b082      	sub	sp, #8
 801083c:	af00      	add	r7, sp, #0
 801083e:	4603      	mov	r3, r0
 8010840:	6039      	str	r1, [r7, #0]
 8010842:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	221a      	movs	r2, #26
 8010848:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801084a:	f000 f843 	bl	80108d4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801084e:	4b02      	ldr	r3, [pc, #8]	@ (8010858 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8010850:	4618      	mov	r0, r3
 8010852:	3708      	adds	r7, #8
 8010854:	46bd      	mov	sp, r7
 8010856:	bd80      	pop	{r7, pc}
 8010858:	200001d0 	.word	0x200001d0

0801085c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	4603      	mov	r3, r0
 8010864:	6039      	str	r1, [r7, #0]
 8010866:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010868:	79fb      	ldrb	r3, [r7, #7]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d105      	bne.n	801087a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801086e:	683a      	ldr	r2, [r7, #0]
 8010870:	4907      	ldr	r1, [pc, #28]	@ (8010890 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8010872:	4808      	ldr	r0, [pc, #32]	@ (8010894 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010874:	f7ff fd9d 	bl	80103b2 <USBD_GetString>
 8010878:	e004      	b.n	8010884 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801087a:	683a      	ldr	r2, [r7, #0]
 801087c:	4904      	ldr	r1, [pc, #16]	@ (8010890 <USBD_CDC_ConfigStrDescriptor+0x34>)
 801087e:	4805      	ldr	r0, [pc, #20]	@ (8010894 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8010880:	f7ff fd97 	bl	80103b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010884:	4b02      	ldr	r3, [pc, #8]	@ (8010890 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8010886:	4618      	mov	r0, r3
 8010888:	3708      	adds	r7, #8
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
 801088e:	bf00      	nop
 8010890:	20001ea4 	.word	0x20001ea4
 8010894:	08017140 	.word	0x08017140

08010898 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
 801089e:	4603      	mov	r3, r0
 80108a0:	6039      	str	r1, [r7, #0]
 80108a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80108a4:	79fb      	ldrb	r3, [r7, #7]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d105      	bne.n	80108b6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80108aa:	683a      	ldr	r2, [r7, #0]
 80108ac:	4907      	ldr	r1, [pc, #28]	@ (80108cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80108ae:	4808      	ldr	r0, [pc, #32]	@ (80108d0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80108b0:	f7ff fd7f 	bl	80103b2 <USBD_GetString>
 80108b4:	e004      	b.n	80108c0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80108b6:	683a      	ldr	r2, [r7, #0]
 80108b8:	4904      	ldr	r1, [pc, #16]	@ (80108cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80108ba:	4805      	ldr	r0, [pc, #20]	@ (80108d0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80108bc:	f7ff fd79 	bl	80103b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80108c0:	4b02      	ldr	r3, [pc, #8]	@ (80108cc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3708      	adds	r7, #8
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	20001ea4 	.word	0x20001ea4
 80108d0:	0801714c 	.word	0x0801714c

080108d4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b084      	sub	sp, #16
 80108d8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80108da:	4b0f      	ldr	r3, [pc, #60]	@ (8010918 <Get_SerialNum+0x44>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80108e0:	4b0e      	ldr	r3, [pc, #56]	@ (801091c <Get_SerialNum+0x48>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80108e6:	4b0e      	ldr	r3, [pc, #56]	@ (8010920 <Get_SerialNum+0x4c>)
 80108e8:	681b      	ldr	r3, [r3, #0]
 80108ea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80108ec:	68fa      	ldr	r2, [r7, #12]
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	4413      	add	r3, r2
 80108f2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d009      	beq.n	801090e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80108fa:	2208      	movs	r2, #8
 80108fc:	4909      	ldr	r1, [pc, #36]	@ (8010924 <Get_SerialNum+0x50>)
 80108fe:	68f8      	ldr	r0, [r7, #12]
 8010900:	f000 f814 	bl	801092c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010904:	2204      	movs	r2, #4
 8010906:	4908      	ldr	r1, [pc, #32]	@ (8010928 <Get_SerialNum+0x54>)
 8010908:	68b8      	ldr	r0, [r7, #8]
 801090a:	f000 f80f 	bl	801092c <IntToUnicode>
  }
}
 801090e:	bf00      	nop
 8010910:	3710      	adds	r7, #16
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
 8010916:	bf00      	nop
 8010918:	1fff7590 	.word	0x1fff7590
 801091c:	1fff7594 	.word	0x1fff7594
 8010920:	1fff7598 	.word	0x1fff7598
 8010924:	200001d2 	.word	0x200001d2
 8010928:	200001e2 	.word	0x200001e2

0801092c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801092c:	b480      	push	{r7}
 801092e:	b087      	sub	sp, #28
 8010930:	af00      	add	r7, sp, #0
 8010932:	60f8      	str	r0, [r7, #12]
 8010934:	60b9      	str	r1, [r7, #8]
 8010936:	4613      	mov	r3, r2
 8010938:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801093a:	2300      	movs	r3, #0
 801093c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801093e:	2300      	movs	r3, #0
 8010940:	75fb      	strb	r3, [r7, #23]
 8010942:	e027      	b.n	8010994 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	0f1b      	lsrs	r3, r3, #28
 8010948:	2b09      	cmp	r3, #9
 801094a:	d80b      	bhi.n	8010964 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	0f1b      	lsrs	r3, r3, #28
 8010950:	b2da      	uxtb	r2, r3
 8010952:	7dfb      	ldrb	r3, [r7, #23]
 8010954:	005b      	lsls	r3, r3, #1
 8010956:	4619      	mov	r1, r3
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	440b      	add	r3, r1
 801095c:	3230      	adds	r2, #48	@ 0x30
 801095e:	b2d2      	uxtb	r2, r2
 8010960:	701a      	strb	r2, [r3, #0]
 8010962:	e00a      	b.n	801097a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	0f1b      	lsrs	r3, r3, #28
 8010968:	b2da      	uxtb	r2, r3
 801096a:	7dfb      	ldrb	r3, [r7, #23]
 801096c:	005b      	lsls	r3, r3, #1
 801096e:	4619      	mov	r1, r3
 8010970:	68bb      	ldr	r3, [r7, #8]
 8010972:	440b      	add	r3, r1
 8010974:	3237      	adds	r2, #55	@ 0x37
 8010976:	b2d2      	uxtb	r2, r2
 8010978:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	011b      	lsls	r3, r3, #4
 801097e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010980:	7dfb      	ldrb	r3, [r7, #23]
 8010982:	005b      	lsls	r3, r3, #1
 8010984:	3301      	adds	r3, #1
 8010986:	68ba      	ldr	r2, [r7, #8]
 8010988:	4413      	add	r3, r2
 801098a:	2200      	movs	r2, #0
 801098c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801098e:	7dfb      	ldrb	r3, [r7, #23]
 8010990:	3301      	adds	r3, #1
 8010992:	75fb      	strb	r3, [r7, #23]
 8010994:	7dfa      	ldrb	r2, [r7, #23]
 8010996:	79fb      	ldrb	r3, [r7, #7]
 8010998:	429a      	cmp	r2, r3
 801099a:	d3d3      	bcc.n	8010944 <IntToUnicode+0x18>
  }
}
 801099c:	bf00      	nop
 801099e:	bf00      	nop
 80109a0:	371c      	adds	r7, #28
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr
	...

080109ac <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b098      	sub	sp, #96	@ 0x60
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80109b4:	f107 030c 	add.w	r3, r7, #12
 80109b8:	2254      	movs	r2, #84	@ 0x54
 80109ba:	2100      	movs	r1, #0
 80109bc:	4618      	mov	r0, r3
 80109be:	f001 fab6 	bl	8011f2e <memset>
  if(pcdHandle->Instance==USB)
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	4a15      	ldr	r2, [pc, #84]	@ (8010a1c <HAL_PCD_MspInit+0x70>)
 80109c8:	4293      	cmp	r3, r2
 80109ca:	d122      	bne.n	8010a12 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80109cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80109d0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80109d2:	2300      	movs	r3, #0
 80109d4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80109d6:	f107 030c 	add.w	r3, r7, #12
 80109da:	4618      	mov	r0, r3
 80109dc:	f7f9 f82a 	bl	8009a34 <HAL_RCCEx_PeriphCLKConfig>
 80109e0:	4603      	mov	r3, r0
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d001      	beq.n	80109ea <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 80109e6:	f7f3 f88f 	bl	8003b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80109ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010a20 <HAL_PCD_MspInit+0x74>)
 80109ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80109ee:	4a0c      	ldr	r2, [pc, #48]	@ (8010a20 <HAL_PCD_MspInit+0x74>)
 80109f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80109f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80109f6:	4b0a      	ldr	r3, [pc, #40]	@ (8010a20 <HAL_PCD_MspInit+0x74>)
 80109f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80109fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80109fe:	60bb      	str	r3, [r7, #8]
 8010a00:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8010a02:	2200      	movs	r2, #0
 8010a04:	2100      	movs	r1, #0
 8010a06:	2014      	movs	r0, #20
 8010a08:	f7f5 fdab 	bl	8006562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8010a0c:	2014      	movs	r0, #20
 8010a0e:	f7f5 fdc2 	bl	8006596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010a12:	bf00      	nop
 8010a14:	3760      	adds	r7, #96	@ 0x60
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	40005c00 	.word	0x40005c00
 8010a20:	40021000 	.word	0x40021000

08010a24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8010a38:	4619      	mov	r1, r3
 8010a3a:	4610      	mov	r0, r2
 8010a3c:	f7fe fd1c 	bl	800f478 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010a40:	bf00      	nop
 8010a42:	3708      	adds	r7, #8
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}

08010a48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	460b      	mov	r3, r1
 8010a52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010a5a:	78fa      	ldrb	r2, [r7, #3]
 8010a5c:	6879      	ldr	r1, [r7, #4]
 8010a5e:	4613      	mov	r3, r2
 8010a60:	009b      	lsls	r3, r3, #2
 8010a62:	4413      	add	r3, r2
 8010a64:	00db      	lsls	r3, r3, #3
 8010a66:	440b      	add	r3, r1
 8010a68:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010a6c:	681a      	ldr	r2, [r3, #0]
 8010a6e:	78fb      	ldrb	r3, [r7, #3]
 8010a70:	4619      	mov	r1, r3
 8010a72:	f7fe fd56 	bl	800f522 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8010a76:	bf00      	nop
 8010a78:	3708      	adds	r7, #8
 8010a7a:	46bd      	mov	sp, r7
 8010a7c:	bd80      	pop	{r7, pc}

08010a7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a7e:	b580      	push	{r7, lr}
 8010a80:	b082      	sub	sp, #8
 8010a82:	af00      	add	r7, sp, #0
 8010a84:	6078      	str	r0, [r7, #4]
 8010a86:	460b      	mov	r3, r1
 8010a88:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8010a90:	78fa      	ldrb	r2, [r7, #3]
 8010a92:	6879      	ldr	r1, [r7, #4]
 8010a94:	4613      	mov	r3, r2
 8010a96:	009b      	lsls	r3, r3, #2
 8010a98:	4413      	add	r3, r2
 8010a9a:	00db      	lsls	r3, r3, #3
 8010a9c:	440b      	add	r3, r1
 8010a9e:	3324      	adds	r3, #36	@ 0x24
 8010aa0:	681a      	ldr	r2, [r3, #0]
 8010aa2:	78fb      	ldrb	r3, [r7, #3]
 8010aa4:	4619      	mov	r1, r3
 8010aa6:	f7fe fd9f 	bl	800f5e8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8010aaa:	bf00      	nop
 8010aac:	3708      	adds	r7, #8
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}

08010ab2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ab2:	b580      	push	{r7, lr}
 8010ab4:	b082      	sub	sp, #8
 8010ab6:	af00      	add	r7, sp, #0
 8010ab8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7fe feb3 	bl	800f82c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8010ac6:	bf00      	nop
 8010ac8:	3708      	adds	r7, #8
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}

08010ace <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ace:	b580      	push	{r7, lr}
 8010ad0:	b084      	sub	sp, #16
 8010ad2:	af00      	add	r7, sp, #0
 8010ad4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010ad6:	2301      	movs	r3, #1
 8010ad8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	795b      	ldrb	r3, [r3, #5]
 8010ade:	2b02      	cmp	r3, #2
 8010ae0:	d001      	beq.n	8010ae6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010ae2:	f7f3 f811 	bl	8003b08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010aec:	7bfa      	ldrb	r2, [r7, #15]
 8010aee:	4611      	mov	r1, r2
 8010af0:	4618      	mov	r0, r3
 8010af2:	f7fe fe5d 	bl	800f7b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7fe fe09 	bl	800f714 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010b02:	bf00      	nop
 8010b04:	3710      	adds	r7, #16
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bd80      	pop	{r7, pc}
	...

08010b0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	f7fe fe58 	bl	800f7d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	7a5b      	ldrb	r3, [r3, #9]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d005      	beq.n	8010b34 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010b28:	4b04      	ldr	r3, [pc, #16]	@ (8010b3c <HAL_PCD_SuspendCallback+0x30>)
 8010b2a:	691b      	ldr	r3, [r3, #16]
 8010b2c:	4a03      	ldr	r2, [pc, #12]	@ (8010b3c <HAL_PCD_SuspendCallback+0x30>)
 8010b2e:	f043 0306 	orr.w	r3, r3, #6
 8010b32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8010b34:	bf00      	nop
 8010b36:	3708      	adds	r7, #8
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}
 8010b3c:	e000ed00 	.word	0xe000ed00

08010b40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b082      	sub	sp, #8
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	7a5b      	ldrb	r3, [r3, #9]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d007      	beq.n	8010b60 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010b50:	4b08      	ldr	r3, [pc, #32]	@ (8010b74 <HAL_PCD_ResumeCallback+0x34>)
 8010b52:	691b      	ldr	r3, [r3, #16]
 8010b54:	4a07      	ldr	r2, [pc, #28]	@ (8010b74 <HAL_PCD_ResumeCallback+0x34>)
 8010b56:	f023 0306 	bic.w	r3, r3, #6
 8010b5a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8010b5c:	f000 f9f8 	bl	8010f50 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7fe fe48 	bl	800f7fc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8010b6c:	bf00      	nop
 8010b6e:	3708      	adds	r7, #8
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd80      	pop	{r7, pc}
 8010b74:	e000ed00 	.word	0xe000ed00

08010b78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8010b80:	4a2b      	ldr	r2, [pc, #172]	@ (8010c30 <USBD_LL_Init+0xb8>)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	4a29      	ldr	r2, [pc, #164]	@ (8010c30 <USBD_LL_Init+0xb8>)
 8010b8c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

  hpcd_USB_FS.Instance = USB;
 8010b90:	4b27      	ldr	r3, [pc, #156]	@ (8010c30 <USBD_LL_Init+0xb8>)
 8010b92:	4a28      	ldr	r2, [pc, #160]	@ (8010c34 <USBD_LL_Init+0xbc>)
 8010b94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8010b96:	4b26      	ldr	r3, [pc, #152]	@ (8010c30 <USBD_LL_Init+0xb8>)
 8010b98:	2208      	movs	r2, #8
 8010b9a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8010b9c:	4b24      	ldr	r3, [pc, #144]	@ (8010c30 <USBD_LL_Init+0xb8>)
 8010b9e:	2202      	movs	r2, #2
 8010ba0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8010ba2:	4b23      	ldr	r3, [pc, #140]	@ (8010c30 <USBD_LL_Init+0xb8>)
 8010ba4:	2202      	movs	r2, #2
 8010ba6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8010ba8:	4b21      	ldr	r3, [pc, #132]	@ (8010c30 <USBD_LL_Init+0xb8>)
 8010baa:	2200      	movs	r2, #0
 8010bac:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8010bae:	4b20      	ldr	r3, [pc, #128]	@ (8010c30 <USBD_LL_Init+0xb8>)
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8010bb4:	4b1e      	ldr	r3, [pc, #120]	@ (8010c30 <USBD_LL_Init+0xb8>)
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8010bba:	4b1d      	ldr	r3, [pc, #116]	@ (8010c30 <USBD_LL_Init+0xb8>)
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8010bc0:	481b      	ldr	r0, [pc, #108]	@ (8010c30 <USBD_LL_Init+0xb8>)
 8010bc2:	f7f6 fc1f 	bl	8007404 <HAL_PCD_Init>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d001      	beq.n	8010bd0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8010bcc:	f7f2 ff9c 	bl	8003b08 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010bd6:	2318      	movs	r3, #24
 8010bd8:	2200      	movs	r2, #0
 8010bda:	2100      	movs	r1, #0
 8010bdc:	f7f8 f8da 	bl	8008d94 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010be6:	2358      	movs	r3, #88	@ 0x58
 8010be8:	2200      	movs	r2, #0
 8010bea:	2180      	movs	r1, #128	@ 0x80
 8010bec:	f7f8 f8d2 	bl	8008d94 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010bf6:	23c0      	movs	r3, #192	@ 0xc0
 8010bf8:	2200      	movs	r2, #0
 8010bfa:	2181      	movs	r1, #129	@ 0x81
 8010bfc:	f7f8 f8ca 	bl	8008d94 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010c06:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	2101      	movs	r1, #1
 8010c0e:	f7f8 f8c1 	bl	8008d94 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010c18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	2182      	movs	r1, #130	@ 0x82
 8010c20:	f7f8 f8b8 	bl	8008d94 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010c24:	2300      	movs	r3, #0
}
 8010c26:	4618      	mov	r0, r3
 8010c28:	3708      	adds	r7, #8
 8010c2a:	46bd      	mov	sp, r7
 8010c2c:	bd80      	pop	{r7, pc}
 8010c2e:	bf00      	nop
 8010c30:	200020a4 	.word	0x200020a4
 8010c34:	40005c00 	.word	0x40005c00

08010c38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b084      	sub	sp, #16
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c40:	2300      	movs	r3, #0
 8010c42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c44:	2300      	movs	r3, #0
 8010c46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7f6 fca6 	bl	80075a0 <HAL_PCD_Start>
 8010c54:	4603      	mov	r3, r0
 8010c56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c58:	7bfb      	ldrb	r3, [r7, #15]
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f000 f97e 	bl	8010f5c <USBD_Get_USB_Status>
 8010c60:	4603      	mov	r3, r0
 8010c62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c64:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c66:	4618      	mov	r0, r3
 8010c68:	3710      	adds	r7, #16
 8010c6a:	46bd      	mov	sp, r7
 8010c6c:	bd80      	pop	{r7, pc}

08010c6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010c6e:	b580      	push	{r7, lr}
 8010c70:	b084      	sub	sp, #16
 8010c72:	af00      	add	r7, sp, #0
 8010c74:	6078      	str	r0, [r7, #4]
 8010c76:	4608      	mov	r0, r1
 8010c78:	4611      	mov	r1, r2
 8010c7a:	461a      	mov	r2, r3
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	70fb      	strb	r3, [r7, #3]
 8010c80:	460b      	mov	r3, r1
 8010c82:	70bb      	strb	r3, [r7, #2]
 8010c84:	4613      	mov	r3, r2
 8010c86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c8c:	2300      	movs	r3, #0
 8010c8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010c96:	78bb      	ldrb	r3, [r7, #2]
 8010c98:	883a      	ldrh	r2, [r7, #0]
 8010c9a:	78f9      	ldrb	r1, [r7, #3]
 8010c9c:	f7f6 fded 	bl	800787a <HAL_PCD_EP_Open>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ca4:	7bfb      	ldrb	r3, [r7, #15]
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f000 f958 	bl	8010f5c <USBD_Get_USB_Status>
 8010cac:	4603      	mov	r3, r0
 8010cae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	3710      	adds	r7, #16
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}

08010cba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010cba:	b580      	push	{r7, lr}
 8010cbc:	b084      	sub	sp, #16
 8010cbe:	af00      	add	r7, sp, #0
 8010cc0:	6078      	str	r0, [r7, #4]
 8010cc2:	460b      	mov	r3, r1
 8010cc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010cd4:	78fa      	ldrb	r2, [r7, #3]
 8010cd6:	4611      	mov	r1, r2
 8010cd8:	4618      	mov	r0, r3
 8010cda:	f7f6 fe2d 	bl	8007938 <HAL_PCD_EP_Close>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ce2:	7bfb      	ldrb	r3, [r7, #15]
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f000 f939 	bl	8010f5c <USBD_Get_USB_Status>
 8010cea:	4603      	mov	r3, r0
 8010cec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cee:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3710      	adds	r7, #16
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}

08010cf8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b084      	sub	sp, #16
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
 8010d00:	460b      	mov	r3, r1
 8010d02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d04:	2300      	movs	r3, #0
 8010d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010d12:	78fa      	ldrb	r2, [r7, #3]
 8010d14:	4611      	mov	r1, r2
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7f6 fed6 	bl	8007ac8 <HAL_PCD_EP_SetStall>
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d20:	7bfb      	ldrb	r3, [r7, #15]
 8010d22:	4618      	mov	r0, r3
 8010d24:	f000 f91a 	bl	8010f5c <USBD_Get_USB_Status>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3710      	adds	r7, #16
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}

08010d36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d36:	b580      	push	{r7, lr}
 8010d38:	b084      	sub	sp, #16
 8010d3a:	af00      	add	r7, sp, #0
 8010d3c:	6078      	str	r0, [r7, #4]
 8010d3e:	460b      	mov	r3, r1
 8010d40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d42:	2300      	movs	r3, #0
 8010d44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d46:	2300      	movs	r3, #0
 8010d48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010d50:	78fa      	ldrb	r2, [r7, #3]
 8010d52:	4611      	mov	r1, r2
 8010d54:	4618      	mov	r0, r3
 8010d56:	f7f6 ff09 	bl	8007b6c <HAL_PCD_EP_ClrStall>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d5e:	7bfb      	ldrb	r3, [r7, #15]
 8010d60:	4618      	mov	r0, r3
 8010d62:	f000 f8fb 	bl	8010f5c <USBD_Get_USB_Status>
 8010d66:	4603      	mov	r3, r0
 8010d68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3710      	adds	r7, #16
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}

08010d74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010d74:	b480      	push	{r7}
 8010d76:	b085      	sub	sp, #20
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010d86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010d88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	da0b      	bge.n	8010da8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010d90:	78fb      	ldrb	r3, [r7, #3]
 8010d92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010d96:	68f9      	ldr	r1, [r7, #12]
 8010d98:	4613      	mov	r3, r2
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	4413      	add	r3, r2
 8010d9e:	00db      	lsls	r3, r3, #3
 8010da0:	440b      	add	r3, r1
 8010da2:	3312      	adds	r3, #18
 8010da4:	781b      	ldrb	r3, [r3, #0]
 8010da6:	e00b      	b.n	8010dc0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010da8:	78fb      	ldrb	r3, [r7, #3]
 8010daa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010dae:	68f9      	ldr	r1, [r7, #12]
 8010db0:	4613      	mov	r3, r2
 8010db2:	009b      	lsls	r3, r3, #2
 8010db4:	4413      	add	r3, r2
 8010db6:	00db      	lsls	r3, r3, #3
 8010db8:	440b      	add	r3, r1
 8010dba:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8010dbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3714      	adds	r7, #20
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dca:	4770      	bx	lr

08010dcc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010de6:	78fa      	ldrb	r2, [r7, #3]
 8010de8:	4611      	mov	r1, r2
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7f6 fd21 	bl	8007832 <HAL_PCD_SetAddress>
 8010df0:	4603      	mov	r3, r0
 8010df2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010df4:	7bfb      	ldrb	r3, [r7, #15]
 8010df6:	4618      	mov	r0, r3
 8010df8:	f000 f8b0 	bl	8010f5c <USBD_Get_USB_Status>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010e00:	7bbb      	ldrb	r3, [r7, #14]
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3710      	adds	r7, #16
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b086      	sub	sp, #24
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	60f8      	str	r0, [r7, #12]
 8010e12:	607a      	str	r2, [r7, #4]
 8010e14:	603b      	str	r3, [r7, #0]
 8010e16:	460b      	mov	r3, r1
 8010e18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e1e:	2300      	movs	r3, #0
 8010e20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010e22:	68fb      	ldr	r3, [r7, #12]
 8010e24:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010e28:	7af9      	ldrb	r1, [r7, #11]
 8010e2a:	683b      	ldr	r3, [r7, #0]
 8010e2c:	687a      	ldr	r2, [r7, #4]
 8010e2e:	f7f6 fe14 	bl	8007a5a <HAL_PCD_EP_Transmit>
 8010e32:	4603      	mov	r3, r0
 8010e34:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e36:	7dfb      	ldrb	r3, [r7, #23]
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f000 f88f 	bl	8010f5c <USBD_Get_USB_Status>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010e42:	7dbb      	ldrb	r3, [r7, #22]
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3718      	adds	r7, #24
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}

08010e4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b086      	sub	sp, #24
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	607a      	str	r2, [r7, #4]
 8010e56:	603b      	str	r3, [r7, #0]
 8010e58:	460b      	mov	r3, r1
 8010e5a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e60:	2300      	movs	r3, #0
 8010e62:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010e64:	68fb      	ldr	r3, [r7, #12]
 8010e66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	@ 0x2c4
 8010e6a:	7af9      	ldrb	r1, [r7, #11]
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	687a      	ldr	r2, [r7, #4]
 8010e70:	f7f6 fdaa 	bl	80079c8 <HAL_PCD_EP_Receive>
 8010e74:	4603      	mov	r3, r0
 8010e76:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010e78:	7dfb      	ldrb	r3, [r7, #23]
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f000 f86e 	bl	8010f5c <USBD_Get_USB_Status>
 8010e80:	4603      	mov	r3, r0
 8010e82:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010e84:	7dbb      	ldrb	r3, [r7, #22]
}
 8010e86:	4618      	mov	r0, r3
 8010e88:	3718      	adds	r7, #24
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}

08010e8e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010e8e:	b580      	push	{r7, lr}
 8010e90:	b082      	sub	sp, #8
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
 8010e96:	460b      	mov	r3, r1
 8010e98:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8010ea0:	78fa      	ldrb	r2, [r7, #3]
 8010ea2:	4611      	mov	r1, r2
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7f6 fdc0 	bl	8007a2a <HAL_PCD_EP_GetRxCount>
 8010eaa:	4603      	mov	r3, r0
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3708      	adds	r7, #8
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	460b      	mov	r3, r1
 8010ebe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010ec0:	78fb      	ldrb	r3, [r7, #3]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d002      	beq.n	8010ecc <HAL_PCDEx_LPM_Callback+0x18>
 8010ec6:	2b01      	cmp	r3, #1
 8010ec8:	d013      	beq.n	8010ef2 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010eca:	e023      	b.n	8010f14 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	7a5b      	ldrb	r3, [r3, #9]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d007      	beq.n	8010ee4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010ed4:	f000 f83c 	bl	8010f50 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010ed8:	4b10      	ldr	r3, [pc, #64]	@ (8010f1c <HAL_PCDEx_LPM_Callback+0x68>)
 8010eda:	691b      	ldr	r3, [r3, #16]
 8010edc:	4a0f      	ldr	r2, [pc, #60]	@ (8010f1c <HAL_PCDEx_LPM_Callback+0x68>)
 8010ede:	f023 0306 	bic.w	r3, r3, #6
 8010ee2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7fe fc86 	bl	800f7fc <USBD_LL_Resume>
    break;
 8010ef0:	e010      	b.n	8010f14 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010ef8:	4618      	mov	r0, r3
 8010efa:	f7fe fc69 	bl	800f7d0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	7a5b      	ldrb	r3, [r3, #9]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d005      	beq.n	8010f12 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010f06:	4b05      	ldr	r3, [pc, #20]	@ (8010f1c <HAL_PCDEx_LPM_Callback+0x68>)
 8010f08:	691b      	ldr	r3, [r3, #16]
 8010f0a:	4a04      	ldr	r2, [pc, #16]	@ (8010f1c <HAL_PCDEx_LPM_Callback+0x68>)
 8010f0c:	f043 0306 	orr.w	r3, r3, #6
 8010f10:	6113      	str	r3, [r2, #16]
    break;
 8010f12:	bf00      	nop
}
 8010f14:	bf00      	nop
 8010f16:	3708      	adds	r7, #8
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	e000ed00 	.word	0xe000ed00

08010f20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010f20:	b480      	push	{r7}
 8010f22:	b083      	sub	sp, #12
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010f28:	4b03      	ldr	r3, [pc, #12]	@ (8010f38 <USBD_static_malloc+0x18>)
}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	370c      	adds	r7, #12
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f34:	4770      	bx	lr
 8010f36:	bf00      	nop
 8010f38:	20002380 	.word	0x20002380

08010f3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010f3c:	b480      	push	{r7}
 8010f3e:	b083      	sub	sp, #12
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]

}
 8010f44:	bf00      	nop
 8010f46:	370c      	adds	r7, #12
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4e:	4770      	bx	lr

08010f50 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010f54:	f7f0 fda0 	bl	8001a98 <SystemClock_Config>
}
 8010f58:	bf00      	nop
 8010f5a:	bd80      	pop	{r7, pc}

08010f5c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b085      	sub	sp, #20
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	4603      	mov	r3, r0
 8010f64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010f66:	2300      	movs	r3, #0
 8010f68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010f6a:	79fb      	ldrb	r3, [r7, #7]
 8010f6c:	2b03      	cmp	r3, #3
 8010f6e:	d817      	bhi.n	8010fa0 <USBD_Get_USB_Status+0x44>
 8010f70:	a201      	add	r2, pc, #4	@ (adr r2, 8010f78 <USBD_Get_USB_Status+0x1c>)
 8010f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f76:	bf00      	nop
 8010f78:	08010f89 	.word	0x08010f89
 8010f7c:	08010f8f 	.word	0x08010f8f
 8010f80:	08010f95 	.word	0x08010f95
 8010f84:	08010f9b 	.word	0x08010f9b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8010f8c:	e00b      	b.n	8010fa6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010f8e:	2303      	movs	r3, #3
 8010f90:	73fb      	strb	r3, [r7, #15]
    break;
 8010f92:	e008      	b.n	8010fa6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010f94:	2301      	movs	r3, #1
 8010f96:	73fb      	strb	r3, [r7, #15]
    break;
 8010f98:	e005      	b.n	8010fa6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010f9a:	2303      	movs	r3, #3
 8010f9c:	73fb      	strb	r3, [r7, #15]
    break;
 8010f9e:	e002      	b.n	8010fa6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010fa0:	2303      	movs	r3, #3
 8010fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8010fa4:	bf00      	nop
  }
  return usb_status;
 8010fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	3714      	adds	r7, #20
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr

08010fb4 <__cvt>:
 8010fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010fb8:	ec57 6b10 	vmov	r6, r7, d0
 8010fbc:	2f00      	cmp	r7, #0
 8010fbe:	460c      	mov	r4, r1
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	463b      	mov	r3, r7
 8010fc4:	bfbb      	ittet	lt
 8010fc6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010fca:	461f      	movlt	r7, r3
 8010fcc:	2300      	movge	r3, #0
 8010fce:	232d      	movlt	r3, #45	@ 0x2d
 8010fd0:	700b      	strb	r3, [r1, #0]
 8010fd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010fd4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010fd8:	4691      	mov	r9, r2
 8010fda:	f023 0820 	bic.w	r8, r3, #32
 8010fde:	bfbc      	itt	lt
 8010fe0:	4632      	movlt	r2, r6
 8010fe2:	4616      	movlt	r6, r2
 8010fe4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010fe8:	d005      	beq.n	8010ff6 <__cvt+0x42>
 8010fea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010fee:	d100      	bne.n	8010ff2 <__cvt+0x3e>
 8010ff0:	3401      	adds	r4, #1
 8010ff2:	2102      	movs	r1, #2
 8010ff4:	e000      	b.n	8010ff8 <__cvt+0x44>
 8010ff6:	2103      	movs	r1, #3
 8010ff8:	ab03      	add	r3, sp, #12
 8010ffa:	9301      	str	r3, [sp, #4]
 8010ffc:	ab02      	add	r3, sp, #8
 8010ffe:	9300      	str	r3, [sp, #0]
 8011000:	ec47 6b10 	vmov	d0, r6, r7
 8011004:	4653      	mov	r3, sl
 8011006:	4622      	mov	r2, r4
 8011008:	f001 f8c2 	bl	8012190 <_dtoa_r>
 801100c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011010:	4605      	mov	r5, r0
 8011012:	d119      	bne.n	8011048 <__cvt+0x94>
 8011014:	f019 0f01 	tst.w	r9, #1
 8011018:	d00e      	beq.n	8011038 <__cvt+0x84>
 801101a:	eb00 0904 	add.w	r9, r0, r4
 801101e:	2200      	movs	r2, #0
 8011020:	2300      	movs	r3, #0
 8011022:	4630      	mov	r0, r6
 8011024:	4639      	mov	r1, r7
 8011026:	f7ef fd77 	bl	8000b18 <__aeabi_dcmpeq>
 801102a:	b108      	cbz	r0, 8011030 <__cvt+0x7c>
 801102c:	f8cd 900c 	str.w	r9, [sp, #12]
 8011030:	2230      	movs	r2, #48	@ 0x30
 8011032:	9b03      	ldr	r3, [sp, #12]
 8011034:	454b      	cmp	r3, r9
 8011036:	d31e      	bcc.n	8011076 <__cvt+0xc2>
 8011038:	9b03      	ldr	r3, [sp, #12]
 801103a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801103c:	1b5b      	subs	r3, r3, r5
 801103e:	4628      	mov	r0, r5
 8011040:	6013      	str	r3, [r2, #0]
 8011042:	b004      	add	sp, #16
 8011044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011048:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801104c:	eb00 0904 	add.w	r9, r0, r4
 8011050:	d1e5      	bne.n	801101e <__cvt+0x6a>
 8011052:	7803      	ldrb	r3, [r0, #0]
 8011054:	2b30      	cmp	r3, #48	@ 0x30
 8011056:	d10a      	bne.n	801106e <__cvt+0xba>
 8011058:	2200      	movs	r2, #0
 801105a:	2300      	movs	r3, #0
 801105c:	4630      	mov	r0, r6
 801105e:	4639      	mov	r1, r7
 8011060:	f7ef fd5a 	bl	8000b18 <__aeabi_dcmpeq>
 8011064:	b918      	cbnz	r0, 801106e <__cvt+0xba>
 8011066:	f1c4 0401 	rsb	r4, r4, #1
 801106a:	f8ca 4000 	str.w	r4, [sl]
 801106e:	f8da 3000 	ldr.w	r3, [sl]
 8011072:	4499      	add	r9, r3
 8011074:	e7d3      	b.n	801101e <__cvt+0x6a>
 8011076:	1c59      	adds	r1, r3, #1
 8011078:	9103      	str	r1, [sp, #12]
 801107a:	701a      	strb	r2, [r3, #0]
 801107c:	e7d9      	b.n	8011032 <__cvt+0x7e>

0801107e <__exponent>:
 801107e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011080:	2900      	cmp	r1, #0
 8011082:	bfba      	itte	lt
 8011084:	4249      	neglt	r1, r1
 8011086:	232d      	movlt	r3, #45	@ 0x2d
 8011088:	232b      	movge	r3, #43	@ 0x2b
 801108a:	2909      	cmp	r1, #9
 801108c:	7002      	strb	r2, [r0, #0]
 801108e:	7043      	strb	r3, [r0, #1]
 8011090:	dd29      	ble.n	80110e6 <__exponent+0x68>
 8011092:	f10d 0307 	add.w	r3, sp, #7
 8011096:	461d      	mov	r5, r3
 8011098:	270a      	movs	r7, #10
 801109a:	461a      	mov	r2, r3
 801109c:	fbb1 f6f7 	udiv	r6, r1, r7
 80110a0:	fb07 1416 	mls	r4, r7, r6, r1
 80110a4:	3430      	adds	r4, #48	@ 0x30
 80110a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80110aa:	460c      	mov	r4, r1
 80110ac:	2c63      	cmp	r4, #99	@ 0x63
 80110ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80110b2:	4631      	mov	r1, r6
 80110b4:	dcf1      	bgt.n	801109a <__exponent+0x1c>
 80110b6:	3130      	adds	r1, #48	@ 0x30
 80110b8:	1e94      	subs	r4, r2, #2
 80110ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80110be:	1c41      	adds	r1, r0, #1
 80110c0:	4623      	mov	r3, r4
 80110c2:	42ab      	cmp	r3, r5
 80110c4:	d30a      	bcc.n	80110dc <__exponent+0x5e>
 80110c6:	f10d 0309 	add.w	r3, sp, #9
 80110ca:	1a9b      	subs	r3, r3, r2
 80110cc:	42ac      	cmp	r4, r5
 80110ce:	bf88      	it	hi
 80110d0:	2300      	movhi	r3, #0
 80110d2:	3302      	adds	r3, #2
 80110d4:	4403      	add	r3, r0
 80110d6:	1a18      	subs	r0, r3, r0
 80110d8:	b003      	add	sp, #12
 80110da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80110e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80110e4:	e7ed      	b.n	80110c2 <__exponent+0x44>
 80110e6:	2330      	movs	r3, #48	@ 0x30
 80110e8:	3130      	adds	r1, #48	@ 0x30
 80110ea:	7083      	strb	r3, [r0, #2]
 80110ec:	70c1      	strb	r1, [r0, #3]
 80110ee:	1d03      	adds	r3, r0, #4
 80110f0:	e7f1      	b.n	80110d6 <__exponent+0x58>
	...

080110f4 <_printf_float>:
 80110f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110f8:	b08d      	sub	sp, #52	@ 0x34
 80110fa:	460c      	mov	r4, r1
 80110fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011100:	4616      	mov	r6, r2
 8011102:	461f      	mov	r7, r3
 8011104:	4605      	mov	r5, r0
 8011106:	f000 ff2d 	bl	8011f64 <_localeconv_r>
 801110a:	6803      	ldr	r3, [r0, #0]
 801110c:	9304      	str	r3, [sp, #16]
 801110e:	4618      	mov	r0, r3
 8011110:	f7ef f8d6 	bl	80002c0 <strlen>
 8011114:	2300      	movs	r3, #0
 8011116:	930a      	str	r3, [sp, #40]	@ 0x28
 8011118:	f8d8 3000 	ldr.w	r3, [r8]
 801111c:	9005      	str	r0, [sp, #20]
 801111e:	3307      	adds	r3, #7
 8011120:	f023 0307 	bic.w	r3, r3, #7
 8011124:	f103 0208 	add.w	r2, r3, #8
 8011128:	f894 a018 	ldrb.w	sl, [r4, #24]
 801112c:	f8d4 b000 	ldr.w	fp, [r4]
 8011130:	f8c8 2000 	str.w	r2, [r8]
 8011134:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011138:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801113c:	9307      	str	r3, [sp, #28]
 801113e:	f8cd 8018 	str.w	r8, [sp, #24]
 8011142:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8011146:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801114a:	4b9c      	ldr	r3, [pc, #624]	@ (80113bc <_printf_float+0x2c8>)
 801114c:	f04f 32ff 	mov.w	r2, #4294967295
 8011150:	f7ef fd14 	bl	8000b7c <__aeabi_dcmpun>
 8011154:	bb70      	cbnz	r0, 80111b4 <_printf_float+0xc0>
 8011156:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801115a:	4b98      	ldr	r3, [pc, #608]	@ (80113bc <_printf_float+0x2c8>)
 801115c:	f04f 32ff 	mov.w	r2, #4294967295
 8011160:	f7ef fcee 	bl	8000b40 <__aeabi_dcmple>
 8011164:	bb30      	cbnz	r0, 80111b4 <_printf_float+0xc0>
 8011166:	2200      	movs	r2, #0
 8011168:	2300      	movs	r3, #0
 801116a:	4640      	mov	r0, r8
 801116c:	4649      	mov	r1, r9
 801116e:	f7ef fcdd 	bl	8000b2c <__aeabi_dcmplt>
 8011172:	b110      	cbz	r0, 801117a <_printf_float+0x86>
 8011174:	232d      	movs	r3, #45	@ 0x2d
 8011176:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801117a:	4a91      	ldr	r2, [pc, #580]	@ (80113c0 <_printf_float+0x2cc>)
 801117c:	4b91      	ldr	r3, [pc, #580]	@ (80113c4 <_printf_float+0x2d0>)
 801117e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011182:	bf94      	ite	ls
 8011184:	4690      	movls	r8, r2
 8011186:	4698      	movhi	r8, r3
 8011188:	2303      	movs	r3, #3
 801118a:	6123      	str	r3, [r4, #16]
 801118c:	f02b 0304 	bic.w	r3, fp, #4
 8011190:	6023      	str	r3, [r4, #0]
 8011192:	f04f 0900 	mov.w	r9, #0
 8011196:	9700      	str	r7, [sp, #0]
 8011198:	4633      	mov	r3, r6
 801119a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801119c:	4621      	mov	r1, r4
 801119e:	4628      	mov	r0, r5
 80111a0:	f000 f9d2 	bl	8011548 <_printf_common>
 80111a4:	3001      	adds	r0, #1
 80111a6:	f040 808d 	bne.w	80112c4 <_printf_float+0x1d0>
 80111aa:	f04f 30ff 	mov.w	r0, #4294967295
 80111ae:	b00d      	add	sp, #52	@ 0x34
 80111b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111b4:	4642      	mov	r2, r8
 80111b6:	464b      	mov	r3, r9
 80111b8:	4640      	mov	r0, r8
 80111ba:	4649      	mov	r1, r9
 80111bc:	f7ef fcde 	bl	8000b7c <__aeabi_dcmpun>
 80111c0:	b140      	cbz	r0, 80111d4 <_printf_float+0xe0>
 80111c2:	464b      	mov	r3, r9
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	bfbc      	itt	lt
 80111c8:	232d      	movlt	r3, #45	@ 0x2d
 80111ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80111ce:	4a7e      	ldr	r2, [pc, #504]	@ (80113c8 <_printf_float+0x2d4>)
 80111d0:	4b7e      	ldr	r3, [pc, #504]	@ (80113cc <_printf_float+0x2d8>)
 80111d2:	e7d4      	b.n	801117e <_printf_float+0x8a>
 80111d4:	6863      	ldr	r3, [r4, #4]
 80111d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80111da:	9206      	str	r2, [sp, #24]
 80111dc:	1c5a      	adds	r2, r3, #1
 80111de:	d13b      	bne.n	8011258 <_printf_float+0x164>
 80111e0:	2306      	movs	r3, #6
 80111e2:	6063      	str	r3, [r4, #4]
 80111e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80111e8:	2300      	movs	r3, #0
 80111ea:	6022      	str	r2, [r4, #0]
 80111ec:	9303      	str	r3, [sp, #12]
 80111ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80111f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80111f4:	ab09      	add	r3, sp, #36	@ 0x24
 80111f6:	9300      	str	r3, [sp, #0]
 80111f8:	6861      	ldr	r1, [r4, #4]
 80111fa:	ec49 8b10 	vmov	d0, r8, r9
 80111fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011202:	4628      	mov	r0, r5
 8011204:	f7ff fed6 	bl	8010fb4 <__cvt>
 8011208:	9b06      	ldr	r3, [sp, #24]
 801120a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801120c:	2b47      	cmp	r3, #71	@ 0x47
 801120e:	4680      	mov	r8, r0
 8011210:	d129      	bne.n	8011266 <_printf_float+0x172>
 8011212:	1cc8      	adds	r0, r1, #3
 8011214:	db02      	blt.n	801121c <_printf_float+0x128>
 8011216:	6863      	ldr	r3, [r4, #4]
 8011218:	4299      	cmp	r1, r3
 801121a:	dd41      	ble.n	80112a0 <_printf_float+0x1ac>
 801121c:	f1aa 0a02 	sub.w	sl, sl, #2
 8011220:	fa5f fa8a 	uxtb.w	sl, sl
 8011224:	3901      	subs	r1, #1
 8011226:	4652      	mov	r2, sl
 8011228:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801122c:	9109      	str	r1, [sp, #36]	@ 0x24
 801122e:	f7ff ff26 	bl	801107e <__exponent>
 8011232:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011234:	1813      	adds	r3, r2, r0
 8011236:	2a01      	cmp	r2, #1
 8011238:	4681      	mov	r9, r0
 801123a:	6123      	str	r3, [r4, #16]
 801123c:	dc02      	bgt.n	8011244 <_printf_float+0x150>
 801123e:	6822      	ldr	r2, [r4, #0]
 8011240:	07d2      	lsls	r2, r2, #31
 8011242:	d501      	bpl.n	8011248 <_printf_float+0x154>
 8011244:	3301      	adds	r3, #1
 8011246:	6123      	str	r3, [r4, #16]
 8011248:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801124c:	2b00      	cmp	r3, #0
 801124e:	d0a2      	beq.n	8011196 <_printf_float+0xa2>
 8011250:	232d      	movs	r3, #45	@ 0x2d
 8011252:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011256:	e79e      	b.n	8011196 <_printf_float+0xa2>
 8011258:	9a06      	ldr	r2, [sp, #24]
 801125a:	2a47      	cmp	r2, #71	@ 0x47
 801125c:	d1c2      	bne.n	80111e4 <_printf_float+0xf0>
 801125e:	2b00      	cmp	r3, #0
 8011260:	d1c0      	bne.n	80111e4 <_printf_float+0xf0>
 8011262:	2301      	movs	r3, #1
 8011264:	e7bd      	b.n	80111e2 <_printf_float+0xee>
 8011266:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801126a:	d9db      	bls.n	8011224 <_printf_float+0x130>
 801126c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8011270:	d118      	bne.n	80112a4 <_printf_float+0x1b0>
 8011272:	2900      	cmp	r1, #0
 8011274:	6863      	ldr	r3, [r4, #4]
 8011276:	dd0b      	ble.n	8011290 <_printf_float+0x19c>
 8011278:	6121      	str	r1, [r4, #16]
 801127a:	b913      	cbnz	r3, 8011282 <_printf_float+0x18e>
 801127c:	6822      	ldr	r2, [r4, #0]
 801127e:	07d0      	lsls	r0, r2, #31
 8011280:	d502      	bpl.n	8011288 <_printf_float+0x194>
 8011282:	3301      	adds	r3, #1
 8011284:	440b      	add	r3, r1
 8011286:	6123      	str	r3, [r4, #16]
 8011288:	65a1      	str	r1, [r4, #88]	@ 0x58
 801128a:	f04f 0900 	mov.w	r9, #0
 801128e:	e7db      	b.n	8011248 <_printf_float+0x154>
 8011290:	b913      	cbnz	r3, 8011298 <_printf_float+0x1a4>
 8011292:	6822      	ldr	r2, [r4, #0]
 8011294:	07d2      	lsls	r2, r2, #31
 8011296:	d501      	bpl.n	801129c <_printf_float+0x1a8>
 8011298:	3302      	adds	r3, #2
 801129a:	e7f4      	b.n	8011286 <_printf_float+0x192>
 801129c:	2301      	movs	r3, #1
 801129e:	e7f2      	b.n	8011286 <_printf_float+0x192>
 80112a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80112a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80112a6:	4299      	cmp	r1, r3
 80112a8:	db05      	blt.n	80112b6 <_printf_float+0x1c2>
 80112aa:	6823      	ldr	r3, [r4, #0]
 80112ac:	6121      	str	r1, [r4, #16]
 80112ae:	07d8      	lsls	r0, r3, #31
 80112b0:	d5ea      	bpl.n	8011288 <_printf_float+0x194>
 80112b2:	1c4b      	adds	r3, r1, #1
 80112b4:	e7e7      	b.n	8011286 <_printf_float+0x192>
 80112b6:	2900      	cmp	r1, #0
 80112b8:	bfd4      	ite	le
 80112ba:	f1c1 0202 	rsble	r2, r1, #2
 80112be:	2201      	movgt	r2, #1
 80112c0:	4413      	add	r3, r2
 80112c2:	e7e0      	b.n	8011286 <_printf_float+0x192>
 80112c4:	6823      	ldr	r3, [r4, #0]
 80112c6:	055a      	lsls	r2, r3, #21
 80112c8:	d407      	bmi.n	80112da <_printf_float+0x1e6>
 80112ca:	6923      	ldr	r3, [r4, #16]
 80112cc:	4642      	mov	r2, r8
 80112ce:	4631      	mov	r1, r6
 80112d0:	4628      	mov	r0, r5
 80112d2:	47b8      	blx	r7
 80112d4:	3001      	adds	r0, #1
 80112d6:	d12b      	bne.n	8011330 <_printf_float+0x23c>
 80112d8:	e767      	b.n	80111aa <_printf_float+0xb6>
 80112da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80112de:	f240 80dd 	bls.w	801149c <_printf_float+0x3a8>
 80112e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80112e6:	2200      	movs	r2, #0
 80112e8:	2300      	movs	r3, #0
 80112ea:	f7ef fc15 	bl	8000b18 <__aeabi_dcmpeq>
 80112ee:	2800      	cmp	r0, #0
 80112f0:	d033      	beq.n	801135a <_printf_float+0x266>
 80112f2:	4a37      	ldr	r2, [pc, #220]	@ (80113d0 <_printf_float+0x2dc>)
 80112f4:	2301      	movs	r3, #1
 80112f6:	4631      	mov	r1, r6
 80112f8:	4628      	mov	r0, r5
 80112fa:	47b8      	blx	r7
 80112fc:	3001      	adds	r0, #1
 80112fe:	f43f af54 	beq.w	80111aa <_printf_float+0xb6>
 8011302:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011306:	4543      	cmp	r3, r8
 8011308:	db02      	blt.n	8011310 <_printf_float+0x21c>
 801130a:	6823      	ldr	r3, [r4, #0]
 801130c:	07d8      	lsls	r0, r3, #31
 801130e:	d50f      	bpl.n	8011330 <_printf_float+0x23c>
 8011310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011314:	4631      	mov	r1, r6
 8011316:	4628      	mov	r0, r5
 8011318:	47b8      	blx	r7
 801131a:	3001      	adds	r0, #1
 801131c:	f43f af45 	beq.w	80111aa <_printf_float+0xb6>
 8011320:	f04f 0900 	mov.w	r9, #0
 8011324:	f108 38ff 	add.w	r8, r8, #4294967295
 8011328:	f104 0a1a 	add.w	sl, r4, #26
 801132c:	45c8      	cmp	r8, r9
 801132e:	dc09      	bgt.n	8011344 <_printf_float+0x250>
 8011330:	6823      	ldr	r3, [r4, #0]
 8011332:	079b      	lsls	r3, r3, #30
 8011334:	f100 8103 	bmi.w	801153e <_printf_float+0x44a>
 8011338:	68e0      	ldr	r0, [r4, #12]
 801133a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801133c:	4298      	cmp	r0, r3
 801133e:	bfb8      	it	lt
 8011340:	4618      	movlt	r0, r3
 8011342:	e734      	b.n	80111ae <_printf_float+0xba>
 8011344:	2301      	movs	r3, #1
 8011346:	4652      	mov	r2, sl
 8011348:	4631      	mov	r1, r6
 801134a:	4628      	mov	r0, r5
 801134c:	47b8      	blx	r7
 801134e:	3001      	adds	r0, #1
 8011350:	f43f af2b 	beq.w	80111aa <_printf_float+0xb6>
 8011354:	f109 0901 	add.w	r9, r9, #1
 8011358:	e7e8      	b.n	801132c <_printf_float+0x238>
 801135a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801135c:	2b00      	cmp	r3, #0
 801135e:	dc39      	bgt.n	80113d4 <_printf_float+0x2e0>
 8011360:	4a1b      	ldr	r2, [pc, #108]	@ (80113d0 <_printf_float+0x2dc>)
 8011362:	2301      	movs	r3, #1
 8011364:	4631      	mov	r1, r6
 8011366:	4628      	mov	r0, r5
 8011368:	47b8      	blx	r7
 801136a:	3001      	adds	r0, #1
 801136c:	f43f af1d 	beq.w	80111aa <_printf_float+0xb6>
 8011370:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8011374:	ea59 0303 	orrs.w	r3, r9, r3
 8011378:	d102      	bne.n	8011380 <_printf_float+0x28c>
 801137a:	6823      	ldr	r3, [r4, #0]
 801137c:	07d9      	lsls	r1, r3, #31
 801137e:	d5d7      	bpl.n	8011330 <_printf_float+0x23c>
 8011380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011384:	4631      	mov	r1, r6
 8011386:	4628      	mov	r0, r5
 8011388:	47b8      	blx	r7
 801138a:	3001      	adds	r0, #1
 801138c:	f43f af0d 	beq.w	80111aa <_printf_float+0xb6>
 8011390:	f04f 0a00 	mov.w	sl, #0
 8011394:	f104 0b1a 	add.w	fp, r4, #26
 8011398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801139a:	425b      	negs	r3, r3
 801139c:	4553      	cmp	r3, sl
 801139e:	dc01      	bgt.n	80113a4 <_printf_float+0x2b0>
 80113a0:	464b      	mov	r3, r9
 80113a2:	e793      	b.n	80112cc <_printf_float+0x1d8>
 80113a4:	2301      	movs	r3, #1
 80113a6:	465a      	mov	r2, fp
 80113a8:	4631      	mov	r1, r6
 80113aa:	4628      	mov	r0, r5
 80113ac:	47b8      	blx	r7
 80113ae:	3001      	adds	r0, #1
 80113b0:	f43f aefb 	beq.w	80111aa <_printf_float+0xb6>
 80113b4:	f10a 0a01 	add.w	sl, sl, #1
 80113b8:	e7ee      	b.n	8011398 <_printf_float+0x2a4>
 80113ba:	bf00      	nop
 80113bc:	7fefffff 	.word	0x7fefffff
 80113c0:	080171a8 	.word	0x080171a8
 80113c4:	080171ac 	.word	0x080171ac
 80113c8:	080171b0 	.word	0x080171b0
 80113cc:	080171b4 	.word	0x080171b4
 80113d0:	08017548 	.word	0x08017548
 80113d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80113d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80113da:	4553      	cmp	r3, sl
 80113dc:	bfa8      	it	ge
 80113de:	4653      	movge	r3, sl
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	4699      	mov	r9, r3
 80113e4:	dc36      	bgt.n	8011454 <_printf_float+0x360>
 80113e6:	f04f 0b00 	mov.w	fp, #0
 80113ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80113ee:	f104 021a 	add.w	r2, r4, #26
 80113f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80113f4:	9306      	str	r3, [sp, #24]
 80113f6:	eba3 0309 	sub.w	r3, r3, r9
 80113fa:	455b      	cmp	r3, fp
 80113fc:	dc31      	bgt.n	8011462 <_printf_float+0x36e>
 80113fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011400:	459a      	cmp	sl, r3
 8011402:	dc3a      	bgt.n	801147a <_printf_float+0x386>
 8011404:	6823      	ldr	r3, [r4, #0]
 8011406:	07da      	lsls	r2, r3, #31
 8011408:	d437      	bmi.n	801147a <_printf_float+0x386>
 801140a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801140c:	ebaa 0903 	sub.w	r9, sl, r3
 8011410:	9b06      	ldr	r3, [sp, #24]
 8011412:	ebaa 0303 	sub.w	r3, sl, r3
 8011416:	4599      	cmp	r9, r3
 8011418:	bfa8      	it	ge
 801141a:	4699      	movge	r9, r3
 801141c:	f1b9 0f00 	cmp.w	r9, #0
 8011420:	dc33      	bgt.n	801148a <_printf_float+0x396>
 8011422:	f04f 0800 	mov.w	r8, #0
 8011426:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801142a:	f104 0b1a 	add.w	fp, r4, #26
 801142e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011430:	ebaa 0303 	sub.w	r3, sl, r3
 8011434:	eba3 0309 	sub.w	r3, r3, r9
 8011438:	4543      	cmp	r3, r8
 801143a:	f77f af79 	ble.w	8011330 <_printf_float+0x23c>
 801143e:	2301      	movs	r3, #1
 8011440:	465a      	mov	r2, fp
 8011442:	4631      	mov	r1, r6
 8011444:	4628      	mov	r0, r5
 8011446:	47b8      	blx	r7
 8011448:	3001      	adds	r0, #1
 801144a:	f43f aeae 	beq.w	80111aa <_printf_float+0xb6>
 801144e:	f108 0801 	add.w	r8, r8, #1
 8011452:	e7ec      	b.n	801142e <_printf_float+0x33a>
 8011454:	4642      	mov	r2, r8
 8011456:	4631      	mov	r1, r6
 8011458:	4628      	mov	r0, r5
 801145a:	47b8      	blx	r7
 801145c:	3001      	adds	r0, #1
 801145e:	d1c2      	bne.n	80113e6 <_printf_float+0x2f2>
 8011460:	e6a3      	b.n	80111aa <_printf_float+0xb6>
 8011462:	2301      	movs	r3, #1
 8011464:	4631      	mov	r1, r6
 8011466:	4628      	mov	r0, r5
 8011468:	9206      	str	r2, [sp, #24]
 801146a:	47b8      	blx	r7
 801146c:	3001      	adds	r0, #1
 801146e:	f43f ae9c 	beq.w	80111aa <_printf_float+0xb6>
 8011472:	9a06      	ldr	r2, [sp, #24]
 8011474:	f10b 0b01 	add.w	fp, fp, #1
 8011478:	e7bb      	b.n	80113f2 <_printf_float+0x2fe>
 801147a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801147e:	4631      	mov	r1, r6
 8011480:	4628      	mov	r0, r5
 8011482:	47b8      	blx	r7
 8011484:	3001      	adds	r0, #1
 8011486:	d1c0      	bne.n	801140a <_printf_float+0x316>
 8011488:	e68f      	b.n	80111aa <_printf_float+0xb6>
 801148a:	9a06      	ldr	r2, [sp, #24]
 801148c:	464b      	mov	r3, r9
 801148e:	4442      	add	r2, r8
 8011490:	4631      	mov	r1, r6
 8011492:	4628      	mov	r0, r5
 8011494:	47b8      	blx	r7
 8011496:	3001      	adds	r0, #1
 8011498:	d1c3      	bne.n	8011422 <_printf_float+0x32e>
 801149a:	e686      	b.n	80111aa <_printf_float+0xb6>
 801149c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80114a0:	f1ba 0f01 	cmp.w	sl, #1
 80114a4:	dc01      	bgt.n	80114aa <_printf_float+0x3b6>
 80114a6:	07db      	lsls	r3, r3, #31
 80114a8:	d536      	bpl.n	8011518 <_printf_float+0x424>
 80114aa:	2301      	movs	r3, #1
 80114ac:	4642      	mov	r2, r8
 80114ae:	4631      	mov	r1, r6
 80114b0:	4628      	mov	r0, r5
 80114b2:	47b8      	blx	r7
 80114b4:	3001      	adds	r0, #1
 80114b6:	f43f ae78 	beq.w	80111aa <_printf_float+0xb6>
 80114ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80114be:	4631      	mov	r1, r6
 80114c0:	4628      	mov	r0, r5
 80114c2:	47b8      	blx	r7
 80114c4:	3001      	adds	r0, #1
 80114c6:	f43f ae70 	beq.w	80111aa <_printf_float+0xb6>
 80114ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80114ce:	2200      	movs	r2, #0
 80114d0:	2300      	movs	r3, #0
 80114d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80114d6:	f7ef fb1f 	bl	8000b18 <__aeabi_dcmpeq>
 80114da:	b9c0      	cbnz	r0, 801150e <_printf_float+0x41a>
 80114dc:	4653      	mov	r3, sl
 80114de:	f108 0201 	add.w	r2, r8, #1
 80114e2:	4631      	mov	r1, r6
 80114e4:	4628      	mov	r0, r5
 80114e6:	47b8      	blx	r7
 80114e8:	3001      	adds	r0, #1
 80114ea:	d10c      	bne.n	8011506 <_printf_float+0x412>
 80114ec:	e65d      	b.n	80111aa <_printf_float+0xb6>
 80114ee:	2301      	movs	r3, #1
 80114f0:	465a      	mov	r2, fp
 80114f2:	4631      	mov	r1, r6
 80114f4:	4628      	mov	r0, r5
 80114f6:	47b8      	blx	r7
 80114f8:	3001      	adds	r0, #1
 80114fa:	f43f ae56 	beq.w	80111aa <_printf_float+0xb6>
 80114fe:	f108 0801 	add.w	r8, r8, #1
 8011502:	45d0      	cmp	r8, sl
 8011504:	dbf3      	blt.n	80114ee <_printf_float+0x3fa>
 8011506:	464b      	mov	r3, r9
 8011508:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801150c:	e6df      	b.n	80112ce <_printf_float+0x1da>
 801150e:	f04f 0800 	mov.w	r8, #0
 8011512:	f104 0b1a 	add.w	fp, r4, #26
 8011516:	e7f4      	b.n	8011502 <_printf_float+0x40e>
 8011518:	2301      	movs	r3, #1
 801151a:	4642      	mov	r2, r8
 801151c:	e7e1      	b.n	80114e2 <_printf_float+0x3ee>
 801151e:	2301      	movs	r3, #1
 8011520:	464a      	mov	r2, r9
 8011522:	4631      	mov	r1, r6
 8011524:	4628      	mov	r0, r5
 8011526:	47b8      	blx	r7
 8011528:	3001      	adds	r0, #1
 801152a:	f43f ae3e 	beq.w	80111aa <_printf_float+0xb6>
 801152e:	f108 0801 	add.w	r8, r8, #1
 8011532:	68e3      	ldr	r3, [r4, #12]
 8011534:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011536:	1a5b      	subs	r3, r3, r1
 8011538:	4543      	cmp	r3, r8
 801153a:	dcf0      	bgt.n	801151e <_printf_float+0x42a>
 801153c:	e6fc      	b.n	8011338 <_printf_float+0x244>
 801153e:	f04f 0800 	mov.w	r8, #0
 8011542:	f104 0919 	add.w	r9, r4, #25
 8011546:	e7f4      	b.n	8011532 <_printf_float+0x43e>

08011548 <_printf_common>:
 8011548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801154c:	4616      	mov	r6, r2
 801154e:	4698      	mov	r8, r3
 8011550:	688a      	ldr	r2, [r1, #8]
 8011552:	690b      	ldr	r3, [r1, #16]
 8011554:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011558:	4293      	cmp	r3, r2
 801155a:	bfb8      	it	lt
 801155c:	4613      	movlt	r3, r2
 801155e:	6033      	str	r3, [r6, #0]
 8011560:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011564:	4607      	mov	r7, r0
 8011566:	460c      	mov	r4, r1
 8011568:	b10a      	cbz	r2, 801156e <_printf_common+0x26>
 801156a:	3301      	adds	r3, #1
 801156c:	6033      	str	r3, [r6, #0]
 801156e:	6823      	ldr	r3, [r4, #0]
 8011570:	0699      	lsls	r1, r3, #26
 8011572:	bf42      	ittt	mi
 8011574:	6833      	ldrmi	r3, [r6, #0]
 8011576:	3302      	addmi	r3, #2
 8011578:	6033      	strmi	r3, [r6, #0]
 801157a:	6825      	ldr	r5, [r4, #0]
 801157c:	f015 0506 	ands.w	r5, r5, #6
 8011580:	d106      	bne.n	8011590 <_printf_common+0x48>
 8011582:	f104 0a19 	add.w	sl, r4, #25
 8011586:	68e3      	ldr	r3, [r4, #12]
 8011588:	6832      	ldr	r2, [r6, #0]
 801158a:	1a9b      	subs	r3, r3, r2
 801158c:	42ab      	cmp	r3, r5
 801158e:	dc26      	bgt.n	80115de <_printf_common+0x96>
 8011590:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011594:	6822      	ldr	r2, [r4, #0]
 8011596:	3b00      	subs	r3, #0
 8011598:	bf18      	it	ne
 801159a:	2301      	movne	r3, #1
 801159c:	0692      	lsls	r2, r2, #26
 801159e:	d42b      	bmi.n	80115f8 <_printf_common+0xb0>
 80115a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80115a4:	4641      	mov	r1, r8
 80115a6:	4638      	mov	r0, r7
 80115a8:	47c8      	blx	r9
 80115aa:	3001      	adds	r0, #1
 80115ac:	d01e      	beq.n	80115ec <_printf_common+0xa4>
 80115ae:	6823      	ldr	r3, [r4, #0]
 80115b0:	6922      	ldr	r2, [r4, #16]
 80115b2:	f003 0306 	and.w	r3, r3, #6
 80115b6:	2b04      	cmp	r3, #4
 80115b8:	bf02      	ittt	eq
 80115ba:	68e5      	ldreq	r5, [r4, #12]
 80115bc:	6833      	ldreq	r3, [r6, #0]
 80115be:	1aed      	subeq	r5, r5, r3
 80115c0:	68a3      	ldr	r3, [r4, #8]
 80115c2:	bf0c      	ite	eq
 80115c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80115c8:	2500      	movne	r5, #0
 80115ca:	4293      	cmp	r3, r2
 80115cc:	bfc4      	itt	gt
 80115ce:	1a9b      	subgt	r3, r3, r2
 80115d0:	18ed      	addgt	r5, r5, r3
 80115d2:	2600      	movs	r6, #0
 80115d4:	341a      	adds	r4, #26
 80115d6:	42b5      	cmp	r5, r6
 80115d8:	d11a      	bne.n	8011610 <_printf_common+0xc8>
 80115da:	2000      	movs	r0, #0
 80115dc:	e008      	b.n	80115f0 <_printf_common+0xa8>
 80115de:	2301      	movs	r3, #1
 80115e0:	4652      	mov	r2, sl
 80115e2:	4641      	mov	r1, r8
 80115e4:	4638      	mov	r0, r7
 80115e6:	47c8      	blx	r9
 80115e8:	3001      	adds	r0, #1
 80115ea:	d103      	bne.n	80115f4 <_printf_common+0xac>
 80115ec:	f04f 30ff 	mov.w	r0, #4294967295
 80115f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115f4:	3501      	adds	r5, #1
 80115f6:	e7c6      	b.n	8011586 <_printf_common+0x3e>
 80115f8:	18e1      	adds	r1, r4, r3
 80115fa:	1c5a      	adds	r2, r3, #1
 80115fc:	2030      	movs	r0, #48	@ 0x30
 80115fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011602:	4422      	add	r2, r4
 8011604:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011608:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801160c:	3302      	adds	r3, #2
 801160e:	e7c7      	b.n	80115a0 <_printf_common+0x58>
 8011610:	2301      	movs	r3, #1
 8011612:	4622      	mov	r2, r4
 8011614:	4641      	mov	r1, r8
 8011616:	4638      	mov	r0, r7
 8011618:	47c8      	blx	r9
 801161a:	3001      	adds	r0, #1
 801161c:	d0e6      	beq.n	80115ec <_printf_common+0xa4>
 801161e:	3601      	adds	r6, #1
 8011620:	e7d9      	b.n	80115d6 <_printf_common+0x8e>
	...

08011624 <_printf_i>:
 8011624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011628:	7e0f      	ldrb	r7, [r1, #24]
 801162a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801162c:	2f78      	cmp	r7, #120	@ 0x78
 801162e:	4691      	mov	r9, r2
 8011630:	4680      	mov	r8, r0
 8011632:	460c      	mov	r4, r1
 8011634:	469a      	mov	sl, r3
 8011636:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801163a:	d807      	bhi.n	801164c <_printf_i+0x28>
 801163c:	2f62      	cmp	r7, #98	@ 0x62
 801163e:	d80a      	bhi.n	8011656 <_printf_i+0x32>
 8011640:	2f00      	cmp	r7, #0
 8011642:	f000 80d2 	beq.w	80117ea <_printf_i+0x1c6>
 8011646:	2f58      	cmp	r7, #88	@ 0x58
 8011648:	f000 80b9 	beq.w	80117be <_printf_i+0x19a>
 801164c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011650:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011654:	e03a      	b.n	80116cc <_printf_i+0xa8>
 8011656:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801165a:	2b15      	cmp	r3, #21
 801165c:	d8f6      	bhi.n	801164c <_printf_i+0x28>
 801165e:	a101      	add	r1, pc, #4	@ (adr r1, 8011664 <_printf_i+0x40>)
 8011660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011664:	080116bd 	.word	0x080116bd
 8011668:	080116d1 	.word	0x080116d1
 801166c:	0801164d 	.word	0x0801164d
 8011670:	0801164d 	.word	0x0801164d
 8011674:	0801164d 	.word	0x0801164d
 8011678:	0801164d 	.word	0x0801164d
 801167c:	080116d1 	.word	0x080116d1
 8011680:	0801164d 	.word	0x0801164d
 8011684:	0801164d 	.word	0x0801164d
 8011688:	0801164d 	.word	0x0801164d
 801168c:	0801164d 	.word	0x0801164d
 8011690:	080117d1 	.word	0x080117d1
 8011694:	080116fb 	.word	0x080116fb
 8011698:	0801178b 	.word	0x0801178b
 801169c:	0801164d 	.word	0x0801164d
 80116a0:	0801164d 	.word	0x0801164d
 80116a4:	080117f3 	.word	0x080117f3
 80116a8:	0801164d 	.word	0x0801164d
 80116ac:	080116fb 	.word	0x080116fb
 80116b0:	0801164d 	.word	0x0801164d
 80116b4:	0801164d 	.word	0x0801164d
 80116b8:	08011793 	.word	0x08011793
 80116bc:	6833      	ldr	r3, [r6, #0]
 80116be:	1d1a      	adds	r2, r3, #4
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	6032      	str	r2, [r6, #0]
 80116c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80116c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80116cc:	2301      	movs	r3, #1
 80116ce:	e09d      	b.n	801180c <_printf_i+0x1e8>
 80116d0:	6833      	ldr	r3, [r6, #0]
 80116d2:	6820      	ldr	r0, [r4, #0]
 80116d4:	1d19      	adds	r1, r3, #4
 80116d6:	6031      	str	r1, [r6, #0]
 80116d8:	0606      	lsls	r6, r0, #24
 80116da:	d501      	bpl.n	80116e0 <_printf_i+0xbc>
 80116dc:	681d      	ldr	r5, [r3, #0]
 80116de:	e003      	b.n	80116e8 <_printf_i+0xc4>
 80116e0:	0645      	lsls	r5, r0, #25
 80116e2:	d5fb      	bpl.n	80116dc <_printf_i+0xb8>
 80116e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80116e8:	2d00      	cmp	r5, #0
 80116ea:	da03      	bge.n	80116f4 <_printf_i+0xd0>
 80116ec:	232d      	movs	r3, #45	@ 0x2d
 80116ee:	426d      	negs	r5, r5
 80116f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80116f4:	4859      	ldr	r0, [pc, #356]	@ (801185c <_printf_i+0x238>)
 80116f6:	230a      	movs	r3, #10
 80116f8:	e011      	b.n	801171e <_printf_i+0xfa>
 80116fa:	6821      	ldr	r1, [r4, #0]
 80116fc:	6833      	ldr	r3, [r6, #0]
 80116fe:	0608      	lsls	r0, r1, #24
 8011700:	f853 5b04 	ldr.w	r5, [r3], #4
 8011704:	d402      	bmi.n	801170c <_printf_i+0xe8>
 8011706:	0649      	lsls	r1, r1, #25
 8011708:	bf48      	it	mi
 801170a:	b2ad      	uxthmi	r5, r5
 801170c:	2f6f      	cmp	r7, #111	@ 0x6f
 801170e:	4853      	ldr	r0, [pc, #332]	@ (801185c <_printf_i+0x238>)
 8011710:	6033      	str	r3, [r6, #0]
 8011712:	bf14      	ite	ne
 8011714:	230a      	movne	r3, #10
 8011716:	2308      	moveq	r3, #8
 8011718:	2100      	movs	r1, #0
 801171a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801171e:	6866      	ldr	r6, [r4, #4]
 8011720:	60a6      	str	r6, [r4, #8]
 8011722:	2e00      	cmp	r6, #0
 8011724:	bfa2      	ittt	ge
 8011726:	6821      	ldrge	r1, [r4, #0]
 8011728:	f021 0104 	bicge.w	r1, r1, #4
 801172c:	6021      	strge	r1, [r4, #0]
 801172e:	b90d      	cbnz	r5, 8011734 <_printf_i+0x110>
 8011730:	2e00      	cmp	r6, #0
 8011732:	d04b      	beq.n	80117cc <_printf_i+0x1a8>
 8011734:	4616      	mov	r6, r2
 8011736:	fbb5 f1f3 	udiv	r1, r5, r3
 801173a:	fb03 5711 	mls	r7, r3, r1, r5
 801173e:	5dc7      	ldrb	r7, [r0, r7]
 8011740:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011744:	462f      	mov	r7, r5
 8011746:	42bb      	cmp	r3, r7
 8011748:	460d      	mov	r5, r1
 801174a:	d9f4      	bls.n	8011736 <_printf_i+0x112>
 801174c:	2b08      	cmp	r3, #8
 801174e:	d10b      	bne.n	8011768 <_printf_i+0x144>
 8011750:	6823      	ldr	r3, [r4, #0]
 8011752:	07df      	lsls	r7, r3, #31
 8011754:	d508      	bpl.n	8011768 <_printf_i+0x144>
 8011756:	6923      	ldr	r3, [r4, #16]
 8011758:	6861      	ldr	r1, [r4, #4]
 801175a:	4299      	cmp	r1, r3
 801175c:	bfde      	ittt	le
 801175e:	2330      	movle	r3, #48	@ 0x30
 8011760:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011764:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011768:	1b92      	subs	r2, r2, r6
 801176a:	6122      	str	r2, [r4, #16]
 801176c:	f8cd a000 	str.w	sl, [sp]
 8011770:	464b      	mov	r3, r9
 8011772:	aa03      	add	r2, sp, #12
 8011774:	4621      	mov	r1, r4
 8011776:	4640      	mov	r0, r8
 8011778:	f7ff fee6 	bl	8011548 <_printf_common>
 801177c:	3001      	adds	r0, #1
 801177e:	d14a      	bne.n	8011816 <_printf_i+0x1f2>
 8011780:	f04f 30ff 	mov.w	r0, #4294967295
 8011784:	b004      	add	sp, #16
 8011786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801178a:	6823      	ldr	r3, [r4, #0]
 801178c:	f043 0320 	orr.w	r3, r3, #32
 8011790:	6023      	str	r3, [r4, #0]
 8011792:	4833      	ldr	r0, [pc, #204]	@ (8011860 <_printf_i+0x23c>)
 8011794:	2778      	movs	r7, #120	@ 0x78
 8011796:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801179a:	6823      	ldr	r3, [r4, #0]
 801179c:	6831      	ldr	r1, [r6, #0]
 801179e:	061f      	lsls	r7, r3, #24
 80117a0:	f851 5b04 	ldr.w	r5, [r1], #4
 80117a4:	d402      	bmi.n	80117ac <_printf_i+0x188>
 80117a6:	065f      	lsls	r7, r3, #25
 80117a8:	bf48      	it	mi
 80117aa:	b2ad      	uxthmi	r5, r5
 80117ac:	6031      	str	r1, [r6, #0]
 80117ae:	07d9      	lsls	r1, r3, #31
 80117b0:	bf44      	itt	mi
 80117b2:	f043 0320 	orrmi.w	r3, r3, #32
 80117b6:	6023      	strmi	r3, [r4, #0]
 80117b8:	b11d      	cbz	r5, 80117c2 <_printf_i+0x19e>
 80117ba:	2310      	movs	r3, #16
 80117bc:	e7ac      	b.n	8011718 <_printf_i+0xf4>
 80117be:	4827      	ldr	r0, [pc, #156]	@ (801185c <_printf_i+0x238>)
 80117c0:	e7e9      	b.n	8011796 <_printf_i+0x172>
 80117c2:	6823      	ldr	r3, [r4, #0]
 80117c4:	f023 0320 	bic.w	r3, r3, #32
 80117c8:	6023      	str	r3, [r4, #0]
 80117ca:	e7f6      	b.n	80117ba <_printf_i+0x196>
 80117cc:	4616      	mov	r6, r2
 80117ce:	e7bd      	b.n	801174c <_printf_i+0x128>
 80117d0:	6833      	ldr	r3, [r6, #0]
 80117d2:	6825      	ldr	r5, [r4, #0]
 80117d4:	6961      	ldr	r1, [r4, #20]
 80117d6:	1d18      	adds	r0, r3, #4
 80117d8:	6030      	str	r0, [r6, #0]
 80117da:	062e      	lsls	r6, r5, #24
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	d501      	bpl.n	80117e4 <_printf_i+0x1c0>
 80117e0:	6019      	str	r1, [r3, #0]
 80117e2:	e002      	b.n	80117ea <_printf_i+0x1c6>
 80117e4:	0668      	lsls	r0, r5, #25
 80117e6:	d5fb      	bpl.n	80117e0 <_printf_i+0x1bc>
 80117e8:	8019      	strh	r1, [r3, #0]
 80117ea:	2300      	movs	r3, #0
 80117ec:	6123      	str	r3, [r4, #16]
 80117ee:	4616      	mov	r6, r2
 80117f0:	e7bc      	b.n	801176c <_printf_i+0x148>
 80117f2:	6833      	ldr	r3, [r6, #0]
 80117f4:	1d1a      	adds	r2, r3, #4
 80117f6:	6032      	str	r2, [r6, #0]
 80117f8:	681e      	ldr	r6, [r3, #0]
 80117fa:	6862      	ldr	r2, [r4, #4]
 80117fc:	2100      	movs	r1, #0
 80117fe:	4630      	mov	r0, r6
 8011800:	f7ee fd0e 	bl	8000220 <memchr>
 8011804:	b108      	cbz	r0, 801180a <_printf_i+0x1e6>
 8011806:	1b80      	subs	r0, r0, r6
 8011808:	6060      	str	r0, [r4, #4]
 801180a:	6863      	ldr	r3, [r4, #4]
 801180c:	6123      	str	r3, [r4, #16]
 801180e:	2300      	movs	r3, #0
 8011810:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011814:	e7aa      	b.n	801176c <_printf_i+0x148>
 8011816:	6923      	ldr	r3, [r4, #16]
 8011818:	4632      	mov	r2, r6
 801181a:	4649      	mov	r1, r9
 801181c:	4640      	mov	r0, r8
 801181e:	47d0      	blx	sl
 8011820:	3001      	adds	r0, #1
 8011822:	d0ad      	beq.n	8011780 <_printf_i+0x15c>
 8011824:	6823      	ldr	r3, [r4, #0]
 8011826:	079b      	lsls	r3, r3, #30
 8011828:	d413      	bmi.n	8011852 <_printf_i+0x22e>
 801182a:	68e0      	ldr	r0, [r4, #12]
 801182c:	9b03      	ldr	r3, [sp, #12]
 801182e:	4298      	cmp	r0, r3
 8011830:	bfb8      	it	lt
 8011832:	4618      	movlt	r0, r3
 8011834:	e7a6      	b.n	8011784 <_printf_i+0x160>
 8011836:	2301      	movs	r3, #1
 8011838:	4632      	mov	r2, r6
 801183a:	4649      	mov	r1, r9
 801183c:	4640      	mov	r0, r8
 801183e:	47d0      	blx	sl
 8011840:	3001      	adds	r0, #1
 8011842:	d09d      	beq.n	8011780 <_printf_i+0x15c>
 8011844:	3501      	adds	r5, #1
 8011846:	68e3      	ldr	r3, [r4, #12]
 8011848:	9903      	ldr	r1, [sp, #12]
 801184a:	1a5b      	subs	r3, r3, r1
 801184c:	42ab      	cmp	r3, r5
 801184e:	dcf2      	bgt.n	8011836 <_printf_i+0x212>
 8011850:	e7eb      	b.n	801182a <_printf_i+0x206>
 8011852:	2500      	movs	r5, #0
 8011854:	f104 0619 	add.w	r6, r4, #25
 8011858:	e7f5      	b.n	8011846 <_printf_i+0x222>
 801185a:	bf00      	nop
 801185c:	080171b8 	.word	0x080171b8
 8011860:	080171c9 	.word	0x080171c9

08011864 <_scanf_float>:
 8011864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011868:	b087      	sub	sp, #28
 801186a:	4617      	mov	r7, r2
 801186c:	9303      	str	r3, [sp, #12]
 801186e:	688b      	ldr	r3, [r1, #8]
 8011870:	1e5a      	subs	r2, r3, #1
 8011872:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8011876:	bf81      	itttt	hi
 8011878:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801187c:	eb03 0b05 	addhi.w	fp, r3, r5
 8011880:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8011884:	608b      	strhi	r3, [r1, #8]
 8011886:	680b      	ldr	r3, [r1, #0]
 8011888:	460a      	mov	r2, r1
 801188a:	f04f 0500 	mov.w	r5, #0
 801188e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8011892:	f842 3b1c 	str.w	r3, [r2], #28
 8011896:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801189a:	4680      	mov	r8, r0
 801189c:	460c      	mov	r4, r1
 801189e:	bf98      	it	ls
 80118a0:	f04f 0b00 	movls.w	fp, #0
 80118a4:	9201      	str	r2, [sp, #4]
 80118a6:	4616      	mov	r6, r2
 80118a8:	46aa      	mov	sl, r5
 80118aa:	46a9      	mov	r9, r5
 80118ac:	9502      	str	r5, [sp, #8]
 80118ae:	68a2      	ldr	r2, [r4, #8]
 80118b0:	b152      	cbz	r2, 80118c8 <_scanf_float+0x64>
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	781b      	ldrb	r3, [r3, #0]
 80118b6:	2b4e      	cmp	r3, #78	@ 0x4e
 80118b8:	d864      	bhi.n	8011984 <_scanf_float+0x120>
 80118ba:	2b40      	cmp	r3, #64	@ 0x40
 80118bc:	d83c      	bhi.n	8011938 <_scanf_float+0xd4>
 80118be:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80118c2:	b2c8      	uxtb	r0, r1
 80118c4:	280e      	cmp	r0, #14
 80118c6:	d93a      	bls.n	801193e <_scanf_float+0xda>
 80118c8:	f1b9 0f00 	cmp.w	r9, #0
 80118cc:	d003      	beq.n	80118d6 <_scanf_float+0x72>
 80118ce:	6823      	ldr	r3, [r4, #0]
 80118d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80118d4:	6023      	str	r3, [r4, #0]
 80118d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80118da:	f1ba 0f01 	cmp.w	sl, #1
 80118de:	f200 8117 	bhi.w	8011b10 <_scanf_float+0x2ac>
 80118e2:	9b01      	ldr	r3, [sp, #4]
 80118e4:	429e      	cmp	r6, r3
 80118e6:	f200 8108 	bhi.w	8011afa <_scanf_float+0x296>
 80118ea:	2001      	movs	r0, #1
 80118ec:	b007      	add	sp, #28
 80118ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118f2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80118f6:	2a0d      	cmp	r2, #13
 80118f8:	d8e6      	bhi.n	80118c8 <_scanf_float+0x64>
 80118fa:	a101      	add	r1, pc, #4	@ (adr r1, 8011900 <_scanf_float+0x9c>)
 80118fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8011900:	08011a47 	.word	0x08011a47
 8011904:	080118c9 	.word	0x080118c9
 8011908:	080118c9 	.word	0x080118c9
 801190c:	080118c9 	.word	0x080118c9
 8011910:	08011aa7 	.word	0x08011aa7
 8011914:	08011a7f 	.word	0x08011a7f
 8011918:	080118c9 	.word	0x080118c9
 801191c:	080118c9 	.word	0x080118c9
 8011920:	08011a55 	.word	0x08011a55
 8011924:	080118c9 	.word	0x080118c9
 8011928:	080118c9 	.word	0x080118c9
 801192c:	080118c9 	.word	0x080118c9
 8011930:	080118c9 	.word	0x080118c9
 8011934:	08011a0d 	.word	0x08011a0d
 8011938:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801193c:	e7db      	b.n	80118f6 <_scanf_float+0x92>
 801193e:	290e      	cmp	r1, #14
 8011940:	d8c2      	bhi.n	80118c8 <_scanf_float+0x64>
 8011942:	a001      	add	r0, pc, #4	@ (adr r0, 8011948 <_scanf_float+0xe4>)
 8011944:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8011948:	080119fd 	.word	0x080119fd
 801194c:	080118c9 	.word	0x080118c9
 8011950:	080119fd 	.word	0x080119fd
 8011954:	08011a93 	.word	0x08011a93
 8011958:	080118c9 	.word	0x080118c9
 801195c:	080119a5 	.word	0x080119a5
 8011960:	080119e3 	.word	0x080119e3
 8011964:	080119e3 	.word	0x080119e3
 8011968:	080119e3 	.word	0x080119e3
 801196c:	080119e3 	.word	0x080119e3
 8011970:	080119e3 	.word	0x080119e3
 8011974:	080119e3 	.word	0x080119e3
 8011978:	080119e3 	.word	0x080119e3
 801197c:	080119e3 	.word	0x080119e3
 8011980:	080119e3 	.word	0x080119e3
 8011984:	2b6e      	cmp	r3, #110	@ 0x6e
 8011986:	d809      	bhi.n	801199c <_scanf_float+0x138>
 8011988:	2b60      	cmp	r3, #96	@ 0x60
 801198a:	d8b2      	bhi.n	80118f2 <_scanf_float+0x8e>
 801198c:	2b54      	cmp	r3, #84	@ 0x54
 801198e:	d07b      	beq.n	8011a88 <_scanf_float+0x224>
 8011990:	2b59      	cmp	r3, #89	@ 0x59
 8011992:	d199      	bne.n	80118c8 <_scanf_float+0x64>
 8011994:	2d07      	cmp	r5, #7
 8011996:	d197      	bne.n	80118c8 <_scanf_float+0x64>
 8011998:	2508      	movs	r5, #8
 801199a:	e02c      	b.n	80119f6 <_scanf_float+0x192>
 801199c:	2b74      	cmp	r3, #116	@ 0x74
 801199e:	d073      	beq.n	8011a88 <_scanf_float+0x224>
 80119a0:	2b79      	cmp	r3, #121	@ 0x79
 80119a2:	e7f6      	b.n	8011992 <_scanf_float+0x12e>
 80119a4:	6821      	ldr	r1, [r4, #0]
 80119a6:	05c8      	lsls	r0, r1, #23
 80119a8:	d51b      	bpl.n	80119e2 <_scanf_float+0x17e>
 80119aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80119ae:	6021      	str	r1, [r4, #0]
 80119b0:	f109 0901 	add.w	r9, r9, #1
 80119b4:	f1bb 0f00 	cmp.w	fp, #0
 80119b8:	d003      	beq.n	80119c2 <_scanf_float+0x15e>
 80119ba:	3201      	adds	r2, #1
 80119bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80119c0:	60a2      	str	r2, [r4, #8]
 80119c2:	68a3      	ldr	r3, [r4, #8]
 80119c4:	3b01      	subs	r3, #1
 80119c6:	60a3      	str	r3, [r4, #8]
 80119c8:	6923      	ldr	r3, [r4, #16]
 80119ca:	3301      	adds	r3, #1
 80119cc:	6123      	str	r3, [r4, #16]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	3b01      	subs	r3, #1
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	607b      	str	r3, [r7, #4]
 80119d6:	f340 8087 	ble.w	8011ae8 <_scanf_float+0x284>
 80119da:	683b      	ldr	r3, [r7, #0]
 80119dc:	3301      	adds	r3, #1
 80119de:	603b      	str	r3, [r7, #0]
 80119e0:	e765      	b.n	80118ae <_scanf_float+0x4a>
 80119e2:	eb1a 0105 	adds.w	r1, sl, r5
 80119e6:	f47f af6f 	bne.w	80118c8 <_scanf_float+0x64>
 80119ea:	6822      	ldr	r2, [r4, #0]
 80119ec:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80119f0:	6022      	str	r2, [r4, #0]
 80119f2:	460d      	mov	r5, r1
 80119f4:	468a      	mov	sl, r1
 80119f6:	f806 3b01 	strb.w	r3, [r6], #1
 80119fa:	e7e2      	b.n	80119c2 <_scanf_float+0x15e>
 80119fc:	6822      	ldr	r2, [r4, #0]
 80119fe:	0610      	lsls	r0, r2, #24
 8011a00:	f57f af62 	bpl.w	80118c8 <_scanf_float+0x64>
 8011a04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8011a08:	6022      	str	r2, [r4, #0]
 8011a0a:	e7f4      	b.n	80119f6 <_scanf_float+0x192>
 8011a0c:	f1ba 0f00 	cmp.w	sl, #0
 8011a10:	d10e      	bne.n	8011a30 <_scanf_float+0x1cc>
 8011a12:	f1b9 0f00 	cmp.w	r9, #0
 8011a16:	d10e      	bne.n	8011a36 <_scanf_float+0x1d2>
 8011a18:	6822      	ldr	r2, [r4, #0]
 8011a1a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011a1e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011a22:	d108      	bne.n	8011a36 <_scanf_float+0x1d2>
 8011a24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011a28:	6022      	str	r2, [r4, #0]
 8011a2a:	f04f 0a01 	mov.w	sl, #1
 8011a2e:	e7e2      	b.n	80119f6 <_scanf_float+0x192>
 8011a30:	f1ba 0f02 	cmp.w	sl, #2
 8011a34:	d055      	beq.n	8011ae2 <_scanf_float+0x27e>
 8011a36:	2d01      	cmp	r5, #1
 8011a38:	d002      	beq.n	8011a40 <_scanf_float+0x1dc>
 8011a3a:	2d04      	cmp	r5, #4
 8011a3c:	f47f af44 	bne.w	80118c8 <_scanf_float+0x64>
 8011a40:	3501      	adds	r5, #1
 8011a42:	b2ed      	uxtb	r5, r5
 8011a44:	e7d7      	b.n	80119f6 <_scanf_float+0x192>
 8011a46:	f1ba 0f01 	cmp.w	sl, #1
 8011a4a:	f47f af3d 	bne.w	80118c8 <_scanf_float+0x64>
 8011a4e:	f04f 0a02 	mov.w	sl, #2
 8011a52:	e7d0      	b.n	80119f6 <_scanf_float+0x192>
 8011a54:	b97d      	cbnz	r5, 8011a76 <_scanf_float+0x212>
 8011a56:	f1b9 0f00 	cmp.w	r9, #0
 8011a5a:	f47f af38 	bne.w	80118ce <_scanf_float+0x6a>
 8011a5e:	6822      	ldr	r2, [r4, #0]
 8011a60:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8011a64:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8011a68:	f040 8108 	bne.w	8011c7c <_scanf_float+0x418>
 8011a6c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011a70:	6022      	str	r2, [r4, #0]
 8011a72:	2501      	movs	r5, #1
 8011a74:	e7bf      	b.n	80119f6 <_scanf_float+0x192>
 8011a76:	2d03      	cmp	r5, #3
 8011a78:	d0e2      	beq.n	8011a40 <_scanf_float+0x1dc>
 8011a7a:	2d05      	cmp	r5, #5
 8011a7c:	e7de      	b.n	8011a3c <_scanf_float+0x1d8>
 8011a7e:	2d02      	cmp	r5, #2
 8011a80:	f47f af22 	bne.w	80118c8 <_scanf_float+0x64>
 8011a84:	2503      	movs	r5, #3
 8011a86:	e7b6      	b.n	80119f6 <_scanf_float+0x192>
 8011a88:	2d06      	cmp	r5, #6
 8011a8a:	f47f af1d 	bne.w	80118c8 <_scanf_float+0x64>
 8011a8e:	2507      	movs	r5, #7
 8011a90:	e7b1      	b.n	80119f6 <_scanf_float+0x192>
 8011a92:	6822      	ldr	r2, [r4, #0]
 8011a94:	0591      	lsls	r1, r2, #22
 8011a96:	f57f af17 	bpl.w	80118c8 <_scanf_float+0x64>
 8011a9a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8011a9e:	6022      	str	r2, [r4, #0]
 8011aa0:	f8cd 9008 	str.w	r9, [sp, #8]
 8011aa4:	e7a7      	b.n	80119f6 <_scanf_float+0x192>
 8011aa6:	6822      	ldr	r2, [r4, #0]
 8011aa8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8011aac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8011ab0:	d006      	beq.n	8011ac0 <_scanf_float+0x25c>
 8011ab2:	0550      	lsls	r0, r2, #21
 8011ab4:	f57f af08 	bpl.w	80118c8 <_scanf_float+0x64>
 8011ab8:	f1b9 0f00 	cmp.w	r9, #0
 8011abc:	f000 80de 	beq.w	8011c7c <_scanf_float+0x418>
 8011ac0:	0591      	lsls	r1, r2, #22
 8011ac2:	bf58      	it	pl
 8011ac4:	9902      	ldrpl	r1, [sp, #8]
 8011ac6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8011aca:	bf58      	it	pl
 8011acc:	eba9 0101 	subpl.w	r1, r9, r1
 8011ad0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8011ad4:	bf58      	it	pl
 8011ad6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8011ada:	6022      	str	r2, [r4, #0]
 8011adc:	f04f 0900 	mov.w	r9, #0
 8011ae0:	e789      	b.n	80119f6 <_scanf_float+0x192>
 8011ae2:	f04f 0a03 	mov.w	sl, #3
 8011ae6:	e786      	b.n	80119f6 <_scanf_float+0x192>
 8011ae8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011aec:	4639      	mov	r1, r7
 8011aee:	4640      	mov	r0, r8
 8011af0:	4798      	blx	r3
 8011af2:	2800      	cmp	r0, #0
 8011af4:	f43f aedb 	beq.w	80118ae <_scanf_float+0x4a>
 8011af8:	e6e6      	b.n	80118c8 <_scanf_float+0x64>
 8011afa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011afe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011b02:	463a      	mov	r2, r7
 8011b04:	4640      	mov	r0, r8
 8011b06:	4798      	blx	r3
 8011b08:	6923      	ldr	r3, [r4, #16]
 8011b0a:	3b01      	subs	r3, #1
 8011b0c:	6123      	str	r3, [r4, #16]
 8011b0e:	e6e8      	b.n	80118e2 <_scanf_float+0x7e>
 8011b10:	1e6b      	subs	r3, r5, #1
 8011b12:	2b06      	cmp	r3, #6
 8011b14:	d824      	bhi.n	8011b60 <_scanf_float+0x2fc>
 8011b16:	2d02      	cmp	r5, #2
 8011b18:	d836      	bhi.n	8011b88 <_scanf_float+0x324>
 8011b1a:	9b01      	ldr	r3, [sp, #4]
 8011b1c:	429e      	cmp	r6, r3
 8011b1e:	f67f aee4 	bls.w	80118ea <_scanf_float+0x86>
 8011b22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011b2a:	463a      	mov	r2, r7
 8011b2c:	4640      	mov	r0, r8
 8011b2e:	4798      	blx	r3
 8011b30:	6923      	ldr	r3, [r4, #16]
 8011b32:	3b01      	subs	r3, #1
 8011b34:	6123      	str	r3, [r4, #16]
 8011b36:	e7f0      	b.n	8011b1a <_scanf_float+0x2b6>
 8011b38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b3c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8011b40:	463a      	mov	r2, r7
 8011b42:	4640      	mov	r0, r8
 8011b44:	4798      	blx	r3
 8011b46:	6923      	ldr	r3, [r4, #16]
 8011b48:	3b01      	subs	r3, #1
 8011b4a:	6123      	str	r3, [r4, #16]
 8011b4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011b50:	fa5f fa8a 	uxtb.w	sl, sl
 8011b54:	f1ba 0f02 	cmp.w	sl, #2
 8011b58:	d1ee      	bne.n	8011b38 <_scanf_float+0x2d4>
 8011b5a:	3d03      	subs	r5, #3
 8011b5c:	b2ed      	uxtb	r5, r5
 8011b5e:	1b76      	subs	r6, r6, r5
 8011b60:	6823      	ldr	r3, [r4, #0]
 8011b62:	05da      	lsls	r2, r3, #23
 8011b64:	d530      	bpl.n	8011bc8 <_scanf_float+0x364>
 8011b66:	055b      	lsls	r3, r3, #21
 8011b68:	d511      	bpl.n	8011b8e <_scanf_float+0x32a>
 8011b6a:	9b01      	ldr	r3, [sp, #4]
 8011b6c:	429e      	cmp	r6, r3
 8011b6e:	f67f aebc 	bls.w	80118ea <_scanf_float+0x86>
 8011b72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011b76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8011b7a:	463a      	mov	r2, r7
 8011b7c:	4640      	mov	r0, r8
 8011b7e:	4798      	blx	r3
 8011b80:	6923      	ldr	r3, [r4, #16]
 8011b82:	3b01      	subs	r3, #1
 8011b84:	6123      	str	r3, [r4, #16]
 8011b86:	e7f0      	b.n	8011b6a <_scanf_float+0x306>
 8011b88:	46aa      	mov	sl, r5
 8011b8a:	46b3      	mov	fp, r6
 8011b8c:	e7de      	b.n	8011b4c <_scanf_float+0x2e8>
 8011b8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011b92:	6923      	ldr	r3, [r4, #16]
 8011b94:	2965      	cmp	r1, #101	@ 0x65
 8011b96:	f103 33ff 	add.w	r3, r3, #4294967295
 8011b9a:	f106 35ff 	add.w	r5, r6, #4294967295
 8011b9e:	6123      	str	r3, [r4, #16]
 8011ba0:	d00c      	beq.n	8011bbc <_scanf_float+0x358>
 8011ba2:	2945      	cmp	r1, #69	@ 0x45
 8011ba4:	d00a      	beq.n	8011bbc <_scanf_float+0x358>
 8011ba6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011baa:	463a      	mov	r2, r7
 8011bac:	4640      	mov	r0, r8
 8011bae:	4798      	blx	r3
 8011bb0:	6923      	ldr	r3, [r4, #16]
 8011bb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8011bb6:	3b01      	subs	r3, #1
 8011bb8:	1eb5      	subs	r5, r6, #2
 8011bba:	6123      	str	r3, [r4, #16]
 8011bbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8011bc0:	463a      	mov	r2, r7
 8011bc2:	4640      	mov	r0, r8
 8011bc4:	4798      	blx	r3
 8011bc6:	462e      	mov	r6, r5
 8011bc8:	6822      	ldr	r2, [r4, #0]
 8011bca:	f012 0210 	ands.w	r2, r2, #16
 8011bce:	d001      	beq.n	8011bd4 <_scanf_float+0x370>
 8011bd0:	2000      	movs	r0, #0
 8011bd2:	e68b      	b.n	80118ec <_scanf_float+0x88>
 8011bd4:	7032      	strb	r2, [r6, #0]
 8011bd6:	6823      	ldr	r3, [r4, #0]
 8011bd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8011bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011be0:	d11c      	bne.n	8011c1c <_scanf_float+0x3b8>
 8011be2:	9b02      	ldr	r3, [sp, #8]
 8011be4:	454b      	cmp	r3, r9
 8011be6:	eba3 0209 	sub.w	r2, r3, r9
 8011bea:	d123      	bne.n	8011c34 <_scanf_float+0x3d0>
 8011bec:	9901      	ldr	r1, [sp, #4]
 8011bee:	2200      	movs	r2, #0
 8011bf0:	4640      	mov	r0, r8
 8011bf2:	f002 fc45 	bl	8014480 <_strtod_r>
 8011bf6:	9b03      	ldr	r3, [sp, #12]
 8011bf8:	6821      	ldr	r1, [r4, #0]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	f011 0f02 	tst.w	r1, #2
 8011c00:	ec57 6b10 	vmov	r6, r7, d0
 8011c04:	f103 0204 	add.w	r2, r3, #4
 8011c08:	d01f      	beq.n	8011c4a <_scanf_float+0x3e6>
 8011c0a:	9903      	ldr	r1, [sp, #12]
 8011c0c:	600a      	str	r2, [r1, #0]
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	e9c3 6700 	strd	r6, r7, [r3]
 8011c14:	68e3      	ldr	r3, [r4, #12]
 8011c16:	3301      	adds	r3, #1
 8011c18:	60e3      	str	r3, [r4, #12]
 8011c1a:	e7d9      	b.n	8011bd0 <_scanf_float+0x36c>
 8011c1c:	9b04      	ldr	r3, [sp, #16]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d0e4      	beq.n	8011bec <_scanf_float+0x388>
 8011c22:	9905      	ldr	r1, [sp, #20]
 8011c24:	230a      	movs	r3, #10
 8011c26:	3101      	adds	r1, #1
 8011c28:	4640      	mov	r0, r8
 8011c2a:	f002 fca9 	bl	8014580 <_strtol_r>
 8011c2e:	9b04      	ldr	r3, [sp, #16]
 8011c30:	9e05      	ldr	r6, [sp, #20]
 8011c32:	1ac2      	subs	r2, r0, r3
 8011c34:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8011c38:	429e      	cmp	r6, r3
 8011c3a:	bf28      	it	cs
 8011c3c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8011c40:	4910      	ldr	r1, [pc, #64]	@ (8011c84 <_scanf_float+0x420>)
 8011c42:	4630      	mov	r0, r6
 8011c44:	f000 f8e4 	bl	8011e10 <siprintf>
 8011c48:	e7d0      	b.n	8011bec <_scanf_float+0x388>
 8011c4a:	f011 0f04 	tst.w	r1, #4
 8011c4e:	9903      	ldr	r1, [sp, #12]
 8011c50:	600a      	str	r2, [r1, #0]
 8011c52:	d1dc      	bne.n	8011c0e <_scanf_float+0x3aa>
 8011c54:	681d      	ldr	r5, [r3, #0]
 8011c56:	4632      	mov	r2, r6
 8011c58:	463b      	mov	r3, r7
 8011c5a:	4630      	mov	r0, r6
 8011c5c:	4639      	mov	r1, r7
 8011c5e:	f7ee ff8d 	bl	8000b7c <__aeabi_dcmpun>
 8011c62:	b128      	cbz	r0, 8011c70 <_scanf_float+0x40c>
 8011c64:	4808      	ldr	r0, [pc, #32]	@ (8011c88 <_scanf_float+0x424>)
 8011c66:	f000 fa03 	bl	8012070 <nanf>
 8011c6a:	ed85 0a00 	vstr	s0, [r5]
 8011c6e:	e7d1      	b.n	8011c14 <_scanf_float+0x3b0>
 8011c70:	4630      	mov	r0, r6
 8011c72:	4639      	mov	r1, r7
 8011c74:	f7ee ffe0 	bl	8000c38 <__aeabi_d2f>
 8011c78:	6028      	str	r0, [r5, #0]
 8011c7a:	e7cb      	b.n	8011c14 <_scanf_float+0x3b0>
 8011c7c:	f04f 0900 	mov.w	r9, #0
 8011c80:	e629      	b.n	80118d6 <_scanf_float+0x72>
 8011c82:	bf00      	nop
 8011c84:	080171da 	.word	0x080171da
 8011c88:	08017590 	.word	0x08017590

08011c8c <std>:
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	b510      	push	{r4, lr}
 8011c90:	4604      	mov	r4, r0
 8011c92:	e9c0 3300 	strd	r3, r3, [r0]
 8011c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011c9a:	6083      	str	r3, [r0, #8]
 8011c9c:	8181      	strh	r1, [r0, #12]
 8011c9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011ca0:	81c2      	strh	r2, [r0, #14]
 8011ca2:	6183      	str	r3, [r0, #24]
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	2208      	movs	r2, #8
 8011ca8:	305c      	adds	r0, #92	@ 0x5c
 8011caa:	f000 f940 	bl	8011f2e <memset>
 8011cae:	4b0d      	ldr	r3, [pc, #52]	@ (8011ce4 <std+0x58>)
 8011cb0:	6263      	str	r3, [r4, #36]	@ 0x24
 8011cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8011ce8 <std+0x5c>)
 8011cb4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8011cec <std+0x60>)
 8011cb8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8011cba:	4b0d      	ldr	r3, [pc, #52]	@ (8011cf0 <std+0x64>)
 8011cbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8011cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8011cf4 <std+0x68>)
 8011cc0:	6224      	str	r4, [r4, #32]
 8011cc2:	429c      	cmp	r4, r3
 8011cc4:	d006      	beq.n	8011cd4 <std+0x48>
 8011cc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8011cca:	4294      	cmp	r4, r2
 8011ccc:	d002      	beq.n	8011cd4 <std+0x48>
 8011cce:	33d0      	adds	r3, #208	@ 0xd0
 8011cd0:	429c      	cmp	r4, r3
 8011cd2:	d105      	bne.n	8011ce0 <std+0x54>
 8011cd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011cdc:	f000 b9b6 	b.w	801204c <__retarget_lock_init_recursive>
 8011ce0:	bd10      	pop	{r4, pc}
 8011ce2:	bf00      	nop
 8011ce4:	08011ea5 	.word	0x08011ea5
 8011ce8:	08011ecb 	.word	0x08011ecb
 8011cec:	08011f03 	.word	0x08011f03
 8011cf0:	08011f27 	.word	0x08011f27
 8011cf4:	200025a0 	.word	0x200025a0

08011cf8 <stdio_exit_handler>:
 8011cf8:	4a02      	ldr	r2, [pc, #8]	@ (8011d04 <stdio_exit_handler+0xc>)
 8011cfa:	4903      	ldr	r1, [pc, #12]	@ (8011d08 <stdio_exit_handler+0x10>)
 8011cfc:	4803      	ldr	r0, [pc, #12]	@ (8011d0c <stdio_exit_handler+0x14>)
 8011cfe:	f000 b869 	b.w	8011dd4 <_fwalk_sglue>
 8011d02:	bf00      	nop
 8011d04:	200001ec 	.word	0x200001ec
 8011d08:	08014f71 	.word	0x08014f71
 8011d0c:	200001fc 	.word	0x200001fc

08011d10 <cleanup_stdio>:
 8011d10:	6841      	ldr	r1, [r0, #4]
 8011d12:	4b0c      	ldr	r3, [pc, #48]	@ (8011d44 <cleanup_stdio+0x34>)
 8011d14:	4299      	cmp	r1, r3
 8011d16:	b510      	push	{r4, lr}
 8011d18:	4604      	mov	r4, r0
 8011d1a:	d001      	beq.n	8011d20 <cleanup_stdio+0x10>
 8011d1c:	f003 f928 	bl	8014f70 <_fflush_r>
 8011d20:	68a1      	ldr	r1, [r4, #8]
 8011d22:	4b09      	ldr	r3, [pc, #36]	@ (8011d48 <cleanup_stdio+0x38>)
 8011d24:	4299      	cmp	r1, r3
 8011d26:	d002      	beq.n	8011d2e <cleanup_stdio+0x1e>
 8011d28:	4620      	mov	r0, r4
 8011d2a:	f003 f921 	bl	8014f70 <_fflush_r>
 8011d2e:	68e1      	ldr	r1, [r4, #12]
 8011d30:	4b06      	ldr	r3, [pc, #24]	@ (8011d4c <cleanup_stdio+0x3c>)
 8011d32:	4299      	cmp	r1, r3
 8011d34:	d004      	beq.n	8011d40 <cleanup_stdio+0x30>
 8011d36:	4620      	mov	r0, r4
 8011d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d3c:	f003 b918 	b.w	8014f70 <_fflush_r>
 8011d40:	bd10      	pop	{r4, pc}
 8011d42:	bf00      	nop
 8011d44:	200025a0 	.word	0x200025a0
 8011d48:	20002608 	.word	0x20002608
 8011d4c:	20002670 	.word	0x20002670

08011d50 <global_stdio_init.part.0>:
 8011d50:	b510      	push	{r4, lr}
 8011d52:	4b0b      	ldr	r3, [pc, #44]	@ (8011d80 <global_stdio_init.part.0+0x30>)
 8011d54:	4c0b      	ldr	r4, [pc, #44]	@ (8011d84 <global_stdio_init.part.0+0x34>)
 8011d56:	4a0c      	ldr	r2, [pc, #48]	@ (8011d88 <global_stdio_init.part.0+0x38>)
 8011d58:	601a      	str	r2, [r3, #0]
 8011d5a:	4620      	mov	r0, r4
 8011d5c:	2200      	movs	r2, #0
 8011d5e:	2104      	movs	r1, #4
 8011d60:	f7ff ff94 	bl	8011c8c <std>
 8011d64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011d68:	2201      	movs	r2, #1
 8011d6a:	2109      	movs	r1, #9
 8011d6c:	f7ff ff8e 	bl	8011c8c <std>
 8011d70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011d74:	2202      	movs	r2, #2
 8011d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011d7a:	2112      	movs	r1, #18
 8011d7c:	f7ff bf86 	b.w	8011c8c <std>
 8011d80:	200026d8 	.word	0x200026d8
 8011d84:	200025a0 	.word	0x200025a0
 8011d88:	08011cf9 	.word	0x08011cf9

08011d8c <__sfp_lock_acquire>:
 8011d8c:	4801      	ldr	r0, [pc, #4]	@ (8011d94 <__sfp_lock_acquire+0x8>)
 8011d8e:	f000 b95e 	b.w	801204e <__retarget_lock_acquire_recursive>
 8011d92:	bf00      	nop
 8011d94:	200026e1 	.word	0x200026e1

08011d98 <__sfp_lock_release>:
 8011d98:	4801      	ldr	r0, [pc, #4]	@ (8011da0 <__sfp_lock_release+0x8>)
 8011d9a:	f000 b959 	b.w	8012050 <__retarget_lock_release_recursive>
 8011d9e:	bf00      	nop
 8011da0:	200026e1 	.word	0x200026e1

08011da4 <__sinit>:
 8011da4:	b510      	push	{r4, lr}
 8011da6:	4604      	mov	r4, r0
 8011da8:	f7ff fff0 	bl	8011d8c <__sfp_lock_acquire>
 8011dac:	6a23      	ldr	r3, [r4, #32]
 8011dae:	b11b      	cbz	r3, 8011db8 <__sinit+0x14>
 8011db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011db4:	f7ff bff0 	b.w	8011d98 <__sfp_lock_release>
 8011db8:	4b04      	ldr	r3, [pc, #16]	@ (8011dcc <__sinit+0x28>)
 8011dba:	6223      	str	r3, [r4, #32]
 8011dbc:	4b04      	ldr	r3, [pc, #16]	@ (8011dd0 <__sinit+0x2c>)
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d1f5      	bne.n	8011db0 <__sinit+0xc>
 8011dc4:	f7ff ffc4 	bl	8011d50 <global_stdio_init.part.0>
 8011dc8:	e7f2      	b.n	8011db0 <__sinit+0xc>
 8011dca:	bf00      	nop
 8011dcc:	08011d11 	.word	0x08011d11
 8011dd0:	200026d8 	.word	0x200026d8

08011dd4 <_fwalk_sglue>:
 8011dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dd8:	4607      	mov	r7, r0
 8011dda:	4688      	mov	r8, r1
 8011ddc:	4614      	mov	r4, r2
 8011dde:	2600      	movs	r6, #0
 8011de0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011de4:	f1b9 0901 	subs.w	r9, r9, #1
 8011de8:	d505      	bpl.n	8011df6 <_fwalk_sglue+0x22>
 8011dea:	6824      	ldr	r4, [r4, #0]
 8011dec:	2c00      	cmp	r4, #0
 8011dee:	d1f7      	bne.n	8011de0 <_fwalk_sglue+0xc>
 8011df0:	4630      	mov	r0, r6
 8011df2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011df6:	89ab      	ldrh	r3, [r5, #12]
 8011df8:	2b01      	cmp	r3, #1
 8011dfa:	d907      	bls.n	8011e0c <_fwalk_sglue+0x38>
 8011dfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011e00:	3301      	adds	r3, #1
 8011e02:	d003      	beq.n	8011e0c <_fwalk_sglue+0x38>
 8011e04:	4629      	mov	r1, r5
 8011e06:	4638      	mov	r0, r7
 8011e08:	47c0      	blx	r8
 8011e0a:	4306      	orrs	r6, r0
 8011e0c:	3568      	adds	r5, #104	@ 0x68
 8011e0e:	e7e9      	b.n	8011de4 <_fwalk_sglue+0x10>

08011e10 <siprintf>:
 8011e10:	b40e      	push	{r1, r2, r3}
 8011e12:	b500      	push	{lr}
 8011e14:	b09c      	sub	sp, #112	@ 0x70
 8011e16:	ab1d      	add	r3, sp, #116	@ 0x74
 8011e18:	9002      	str	r0, [sp, #8]
 8011e1a:	9006      	str	r0, [sp, #24]
 8011e1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011e20:	4809      	ldr	r0, [pc, #36]	@ (8011e48 <siprintf+0x38>)
 8011e22:	9107      	str	r1, [sp, #28]
 8011e24:	9104      	str	r1, [sp, #16]
 8011e26:	4909      	ldr	r1, [pc, #36]	@ (8011e4c <siprintf+0x3c>)
 8011e28:	f853 2b04 	ldr.w	r2, [r3], #4
 8011e2c:	9105      	str	r1, [sp, #20]
 8011e2e:	6800      	ldr	r0, [r0, #0]
 8011e30:	9301      	str	r3, [sp, #4]
 8011e32:	a902      	add	r1, sp, #8
 8011e34:	f002 fc02 	bl	801463c <_svfiprintf_r>
 8011e38:	9b02      	ldr	r3, [sp, #8]
 8011e3a:	2200      	movs	r2, #0
 8011e3c:	701a      	strb	r2, [r3, #0]
 8011e3e:	b01c      	add	sp, #112	@ 0x70
 8011e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e44:	b003      	add	sp, #12
 8011e46:	4770      	bx	lr
 8011e48:	200001f8 	.word	0x200001f8
 8011e4c:	ffff0208 	.word	0xffff0208

08011e50 <siscanf>:
 8011e50:	b40e      	push	{r1, r2, r3}
 8011e52:	b530      	push	{r4, r5, lr}
 8011e54:	b09c      	sub	sp, #112	@ 0x70
 8011e56:	ac1f      	add	r4, sp, #124	@ 0x7c
 8011e58:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8011e5c:	f854 5b04 	ldr.w	r5, [r4], #4
 8011e60:	f8ad 2014 	strh.w	r2, [sp, #20]
 8011e64:	9002      	str	r0, [sp, #8]
 8011e66:	9006      	str	r0, [sp, #24]
 8011e68:	f7ee fa2a 	bl	80002c0 <strlen>
 8011e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8011e9c <siscanf+0x4c>)
 8011e6e:	9003      	str	r0, [sp, #12]
 8011e70:	9007      	str	r0, [sp, #28]
 8011e72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011e74:	480a      	ldr	r0, [pc, #40]	@ (8011ea0 <siscanf+0x50>)
 8011e76:	9401      	str	r4, [sp, #4]
 8011e78:	2300      	movs	r3, #0
 8011e7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011e7c:	9314      	str	r3, [sp, #80]	@ 0x50
 8011e7e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8011e82:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011e86:	462a      	mov	r2, r5
 8011e88:	4623      	mov	r3, r4
 8011e8a:	a902      	add	r1, sp, #8
 8011e8c:	6800      	ldr	r0, [r0, #0]
 8011e8e:	f002 fd29 	bl	80148e4 <__ssvfiscanf_r>
 8011e92:	b01c      	add	sp, #112	@ 0x70
 8011e94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e98:	b003      	add	sp, #12
 8011e9a:	4770      	bx	lr
 8011e9c:	08011ec7 	.word	0x08011ec7
 8011ea0:	200001f8 	.word	0x200001f8

08011ea4 <__sread>:
 8011ea4:	b510      	push	{r4, lr}
 8011ea6:	460c      	mov	r4, r1
 8011ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eac:	f000 f880 	bl	8011fb0 <_read_r>
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	bfab      	itete	ge
 8011eb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011eb6:	89a3      	ldrhlt	r3, [r4, #12]
 8011eb8:	181b      	addge	r3, r3, r0
 8011eba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8011ebe:	bfac      	ite	ge
 8011ec0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011ec2:	81a3      	strhlt	r3, [r4, #12]
 8011ec4:	bd10      	pop	{r4, pc}

08011ec6 <__seofread>:
 8011ec6:	2000      	movs	r0, #0
 8011ec8:	4770      	bx	lr

08011eca <__swrite>:
 8011eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ece:	461f      	mov	r7, r3
 8011ed0:	898b      	ldrh	r3, [r1, #12]
 8011ed2:	05db      	lsls	r3, r3, #23
 8011ed4:	4605      	mov	r5, r0
 8011ed6:	460c      	mov	r4, r1
 8011ed8:	4616      	mov	r6, r2
 8011eda:	d505      	bpl.n	8011ee8 <__swrite+0x1e>
 8011edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ee0:	2302      	movs	r3, #2
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	f000 f852 	bl	8011f8c <_lseek_r>
 8011ee8:	89a3      	ldrh	r3, [r4, #12]
 8011eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011eee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8011ef2:	81a3      	strh	r3, [r4, #12]
 8011ef4:	4632      	mov	r2, r6
 8011ef6:	463b      	mov	r3, r7
 8011ef8:	4628      	mov	r0, r5
 8011efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011efe:	f000 b869 	b.w	8011fd4 <_write_r>

08011f02 <__sseek>:
 8011f02:	b510      	push	{r4, lr}
 8011f04:	460c      	mov	r4, r1
 8011f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f0a:	f000 f83f 	bl	8011f8c <_lseek_r>
 8011f0e:	1c43      	adds	r3, r0, #1
 8011f10:	89a3      	ldrh	r3, [r4, #12]
 8011f12:	bf15      	itete	ne
 8011f14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011f16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011f1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011f1e:	81a3      	strheq	r3, [r4, #12]
 8011f20:	bf18      	it	ne
 8011f22:	81a3      	strhne	r3, [r4, #12]
 8011f24:	bd10      	pop	{r4, pc}

08011f26 <__sclose>:
 8011f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f2a:	f000 b81f 	b.w	8011f6c <_close_r>

08011f2e <memset>:
 8011f2e:	4402      	add	r2, r0
 8011f30:	4603      	mov	r3, r0
 8011f32:	4293      	cmp	r3, r2
 8011f34:	d100      	bne.n	8011f38 <memset+0xa>
 8011f36:	4770      	bx	lr
 8011f38:	f803 1b01 	strb.w	r1, [r3], #1
 8011f3c:	e7f9      	b.n	8011f32 <memset+0x4>

08011f3e <strncmp>:
 8011f3e:	b510      	push	{r4, lr}
 8011f40:	b16a      	cbz	r2, 8011f5e <strncmp+0x20>
 8011f42:	3901      	subs	r1, #1
 8011f44:	1884      	adds	r4, r0, r2
 8011f46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f4a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d103      	bne.n	8011f5a <strncmp+0x1c>
 8011f52:	42a0      	cmp	r0, r4
 8011f54:	d001      	beq.n	8011f5a <strncmp+0x1c>
 8011f56:	2a00      	cmp	r2, #0
 8011f58:	d1f5      	bne.n	8011f46 <strncmp+0x8>
 8011f5a:	1ad0      	subs	r0, r2, r3
 8011f5c:	bd10      	pop	{r4, pc}
 8011f5e:	4610      	mov	r0, r2
 8011f60:	e7fc      	b.n	8011f5c <strncmp+0x1e>
	...

08011f64 <_localeconv_r>:
 8011f64:	4800      	ldr	r0, [pc, #0]	@ (8011f68 <_localeconv_r+0x4>)
 8011f66:	4770      	bx	lr
 8011f68:	20000338 	.word	0x20000338

08011f6c <_close_r>:
 8011f6c:	b538      	push	{r3, r4, r5, lr}
 8011f6e:	4d06      	ldr	r5, [pc, #24]	@ (8011f88 <_close_r+0x1c>)
 8011f70:	2300      	movs	r3, #0
 8011f72:	4604      	mov	r4, r0
 8011f74:	4608      	mov	r0, r1
 8011f76:	602b      	str	r3, [r5, #0]
 8011f78:	f7f2 fb38 	bl	80045ec <_close>
 8011f7c:	1c43      	adds	r3, r0, #1
 8011f7e:	d102      	bne.n	8011f86 <_close_r+0x1a>
 8011f80:	682b      	ldr	r3, [r5, #0]
 8011f82:	b103      	cbz	r3, 8011f86 <_close_r+0x1a>
 8011f84:	6023      	str	r3, [r4, #0]
 8011f86:	bd38      	pop	{r3, r4, r5, pc}
 8011f88:	200026dc 	.word	0x200026dc

08011f8c <_lseek_r>:
 8011f8c:	b538      	push	{r3, r4, r5, lr}
 8011f8e:	4d07      	ldr	r5, [pc, #28]	@ (8011fac <_lseek_r+0x20>)
 8011f90:	4604      	mov	r4, r0
 8011f92:	4608      	mov	r0, r1
 8011f94:	4611      	mov	r1, r2
 8011f96:	2200      	movs	r2, #0
 8011f98:	602a      	str	r2, [r5, #0]
 8011f9a:	461a      	mov	r2, r3
 8011f9c:	f7f2 fb4d 	bl	800463a <_lseek>
 8011fa0:	1c43      	adds	r3, r0, #1
 8011fa2:	d102      	bne.n	8011faa <_lseek_r+0x1e>
 8011fa4:	682b      	ldr	r3, [r5, #0]
 8011fa6:	b103      	cbz	r3, 8011faa <_lseek_r+0x1e>
 8011fa8:	6023      	str	r3, [r4, #0]
 8011faa:	bd38      	pop	{r3, r4, r5, pc}
 8011fac:	200026dc 	.word	0x200026dc

08011fb0 <_read_r>:
 8011fb0:	b538      	push	{r3, r4, r5, lr}
 8011fb2:	4d07      	ldr	r5, [pc, #28]	@ (8011fd0 <_read_r+0x20>)
 8011fb4:	4604      	mov	r4, r0
 8011fb6:	4608      	mov	r0, r1
 8011fb8:	4611      	mov	r1, r2
 8011fba:	2200      	movs	r2, #0
 8011fbc:	602a      	str	r2, [r5, #0]
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	f7f2 fadb 	bl	800457a <_read>
 8011fc4:	1c43      	adds	r3, r0, #1
 8011fc6:	d102      	bne.n	8011fce <_read_r+0x1e>
 8011fc8:	682b      	ldr	r3, [r5, #0]
 8011fca:	b103      	cbz	r3, 8011fce <_read_r+0x1e>
 8011fcc:	6023      	str	r3, [r4, #0]
 8011fce:	bd38      	pop	{r3, r4, r5, pc}
 8011fd0:	200026dc 	.word	0x200026dc

08011fd4 <_write_r>:
 8011fd4:	b538      	push	{r3, r4, r5, lr}
 8011fd6:	4d07      	ldr	r5, [pc, #28]	@ (8011ff4 <_write_r+0x20>)
 8011fd8:	4604      	mov	r4, r0
 8011fda:	4608      	mov	r0, r1
 8011fdc:	4611      	mov	r1, r2
 8011fde:	2200      	movs	r2, #0
 8011fe0:	602a      	str	r2, [r5, #0]
 8011fe2:	461a      	mov	r2, r3
 8011fe4:	f7f2 fae6 	bl	80045b4 <_write>
 8011fe8:	1c43      	adds	r3, r0, #1
 8011fea:	d102      	bne.n	8011ff2 <_write_r+0x1e>
 8011fec:	682b      	ldr	r3, [r5, #0]
 8011fee:	b103      	cbz	r3, 8011ff2 <_write_r+0x1e>
 8011ff0:	6023      	str	r3, [r4, #0]
 8011ff2:	bd38      	pop	{r3, r4, r5, pc}
 8011ff4:	200026dc 	.word	0x200026dc

08011ff8 <__errno>:
 8011ff8:	4b01      	ldr	r3, [pc, #4]	@ (8012000 <__errno+0x8>)
 8011ffa:	6818      	ldr	r0, [r3, #0]
 8011ffc:	4770      	bx	lr
 8011ffe:	bf00      	nop
 8012000:	200001f8 	.word	0x200001f8

08012004 <__libc_init_array>:
 8012004:	b570      	push	{r4, r5, r6, lr}
 8012006:	4d0d      	ldr	r5, [pc, #52]	@ (801203c <__libc_init_array+0x38>)
 8012008:	4c0d      	ldr	r4, [pc, #52]	@ (8012040 <__libc_init_array+0x3c>)
 801200a:	1b64      	subs	r4, r4, r5
 801200c:	10a4      	asrs	r4, r4, #2
 801200e:	2600      	movs	r6, #0
 8012010:	42a6      	cmp	r6, r4
 8012012:	d109      	bne.n	8012028 <__libc_init_array+0x24>
 8012014:	4d0b      	ldr	r5, [pc, #44]	@ (8012044 <__libc_init_array+0x40>)
 8012016:	4c0c      	ldr	r4, [pc, #48]	@ (8012048 <__libc_init_array+0x44>)
 8012018:	f004 fee0 	bl	8016ddc <_init>
 801201c:	1b64      	subs	r4, r4, r5
 801201e:	10a4      	asrs	r4, r4, #2
 8012020:	2600      	movs	r6, #0
 8012022:	42a6      	cmp	r6, r4
 8012024:	d105      	bne.n	8012032 <__libc_init_array+0x2e>
 8012026:	bd70      	pop	{r4, r5, r6, pc}
 8012028:	f855 3b04 	ldr.w	r3, [r5], #4
 801202c:	4798      	blx	r3
 801202e:	3601      	adds	r6, #1
 8012030:	e7ee      	b.n	8012010 <__libc_init_array+0xc>
 8012032:	f855 3b04 	ldr.w	r3, [r5], #4
 8012036:	4798      	blx	r3
 8012038:	3601      	adds	r6, #1
 801203a:	e7f2      	b.n	8012022 <__libc_init_array+0x1e>
 801203c:	08017630 	.word	0x08017630
 8012040:	08017630 	.word	0x08017630
 8012044:	08017630 	.word	0x08017630
 8012048:	08017634 	.word	0x08017634

0801204c <__retarget_lock_init_recursive>:
 801204c:	4770      	bx	lr

0801204e <__retarget_lock_acquire_recursive>:
 801204e:	4770      	bx	lr

08012050 <__retarget_lock_release_recursive>:
 8012050:	4770      	bx	lr

08012052 <memcpy>:
 8012052:	440a      	add	r2, r1
 8012054:	4291      	cmp	r1, r2
 8012056:	f100 33ff 	add.w	r3, r0, #4294967295
 801205a:	d100      	bne.n	801205e <memcpy+0xc>
 801205c:	4770      	bx	lr
 801205e:	b510      	push	{r4, lr}
 8012060:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012064:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012068:	4291      	cmp	r1, r2
 801206a:	d1f9      	bne.n	8012060 <memcpy+0xe>
 801206c:	bd10      	pop	{r4, pc}
	...

08012070 <nanf>:
 8012070:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012078 <nanf+0x8>
 8012074:	4770      	bx	lr
 8012076:	bf00      	nop
 8012078:	7fc00000 	.word	0x7fc00000

0801207c <quorem>:
 801207c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012080:	6903      	ldr	r3, [r0, #16]
 8012082:	690c      	ldr	r4, [r1, #16]
 8012084:	42a3      	cmp	r3, r4
 8012086:	4607      	mov	r7, r0
 8012088:	db7e      	blt.n	8012188 <quorem+0x10c>
 801208a:	3c01      	subs	r4, #1
 801208c:	f101 0814 	add.w	r8, r1, #20
 8012090:	00a3      	lsls	r3, r4, #2
 8012092:	f100 0514 	add.w	r5, r0, #20
 8012096:	9300      	str	r3, [sp, #0]
 8012098:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801209c:	9301      	str	r3, [sp, #4]
 801209e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80120a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80120a6:	3301      	adds	r3, #1
 80120a8:	429a      	cmp	r2, r3
 80120aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80120ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80120b2:	d32e      	bcc.n	8012112 <quorem+0x96>
 80120b4:	f04f 0a00 	mov.w	sl, #0
 80120b8:	46c4      	mov	ip, r8
 80120ba:	46ae      	mov	lr, r5
 80120bc:	46d3      	mov	fp, sl
 80120be:	f85c 3b04 	ldr.w	r3, [ip], #4
 80120c2:	b298      	uxth	r0, r3
 80120c4:	fb06 a000 	mla	r0, r6, r0, sl
 80120c8:	0c02      	lsrs	r2, r0, #16
 80120ca:	0c1b      	lsrs	r3, r3, #16
 80120cc:	fb06 2303 	mla	r3, r6, r3, r2
 80120d0:	f8de 2000 	ldr.w	r2, [lr]
 80120d4:	b280      	uxth	r0, r0
 80120d6:	b292      	uxth	r2, r2
 80120d8:	1a12      	subs	r2, r2, r0
 80120da:	445a      	add	r2, fp
 80120dc:	f8de 0000 	ldr.w	r0, [lr]
 80120e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80120e4:	b29b      	uxth	r3, r3
 80120e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80120ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80120ee:	b292      	uxth	r2, r2
 80120f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80120f4:	45e1      	cmp	r9, ip
 80120f6:	f84e 2b04 	str.w	r2, [lr], #4
 80120fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80120fe:	d2de      	bcs.n	80120be <quorem+0x42>
 8012100:	9b00      	ldr	r3, [sp, #0]
 8012102:	58eb      	ldr	r3, [r5, r3]
 8012104:	b92b      	cbnz	r3, 8012112 <quorem+0x96>
 8012106:	9b01      	ldr	r3, [sp, #4]
 8012108:	3b04      	subs	r3, #4
 801210a:	429d      	cmp	r5, r3
 801210c:	461a      	mov	r2, r3
 801210e:	d32f      	bcc.n	8012170 <quorem+0xf4>
 8012110:	613c      	str	r4, [r7, #16]
 8012112:	4638      	mov	r0, r7
 8012114:	f001 f9c4 	bl	80134a0 <__mcmp>
 8012118:	2800      	cmp	r0, #0
 801211a:	db25      	blt.n	8012168 <quorem+0xec>
 801211c:	4629      	mov	r1, r5
 801211e:	2000      	movs	r0, #0
 8012120:	f858 2b04 	ldr.w	r2, [r8], #4
 8012124:	f8d1 c000 	ldr.w	ip, [r1]
 8012128:	fa1f fe82 	uxth.w	lr, r2
 801212c:	fa1f f38c 	uxth.w	r3, ip
 8012130:	eba3 030e 	sub.w	r3, r3, lr
 8012134:	4403      	add	r3, r0
 8012136:	0c12      	lsrs	r2, r2, #16
 8012138:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801213c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012140:	b29b      	uxth	r3, r3
 8012142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012146:	45c1      	cmp	r9, r8
 8012148:	f841 3b04 	str.w	r3, [r1], #4
 801214c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012150:	d2e6      	bcs.n	8012120 <quorem+0xa4>
 8012152:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012156:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801215a:	b922      	cbnz	r2, 8012166 <quorem+0xea>
 801215c:	3b04      	subs	r3, #4
 801215e:	429d      	cmp	r5, r3
 8012160:	461a      	mov	r2, r3
 8012162:	d30b      	bcc.n	801217c <quorem+0x100>
 8012164:	613c      	str	r4, [r7, #16]
 8012166:	3601      	adds	r6, #1
 8012168:	4630      	mov	r0, r6
 801216a:	b003      	add	sp, #12
 801216c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012170:	6812      	ldr	r2, [r2, #0]
 8012172:	3b04      	subs	r3, #4
 8012174:	2a00      	cmp	r2, #0
 8012176:	d1cb      	bne.n	8012110 <quorem+0x94>
 8012178:	3c01      	subs	r4, #1
 801217a:	e7c6      	b.n	801210a <quorem+0x8e>
 801217c:	6812      	ldr	r2, [r2, #0]
 801217e:	3b04      	subs	r3, #4
 8012180:	2a00      	cmp	r2, #0
 8012182:	d1ef      	bne.n	8012164 <quorem+0xe8>
 8012184:	3c01      	subs	r4, #1
 8012186:	e7ea      	b.n	801215e <quorem+0xe2>
 8012188:	2000      	movs	r0, #0
 801218a:	e7ee      	b.n	801216a <quorem+0xee>
 801218c:	0000      	movs	r0, r0
	...

08012190 <_dtoa_r>:
 8012190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012194:	69c7      	ldr	r7, [r0, #28]
 8012196:	b099      	sub	sp, #100	@ 0x64
 8012198:	ed8d 0b02 	vstr	d0, [sp, #8]
 801219c:	ec55 4b10 	vmov	r4, r5, d0
 80121a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80121a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80121a4:	4683      	mov	fp, r0
 80121a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80121a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80121aa:	b97f      	cbnz	r7, 80121cc <_dtoa_r+0x3c>
 80121ac:	2010      	movs	r0, #16
 80121ae:	f000 fdfd 	bl	8012dac <malloc>
 80121b2:	4602      	mov	r2, r0
 80121b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80121b8:	b920      	cbnz	r0, 80121c4 <_dtoa_r+0x34>
 80121ba:	4ba7      	ldr	r3, [pc, #668]	@ (8012458 <_dtoa_r+0x2c8>)
 80121bc:	21ef      	movs	r1, #239	@ 0xef
 80121be:	48a7      	ldr	r0, [pc, #668]	@ (801245c <_dtoa_r+0x2cc>)
 80121c0:	f002 ffa6 	bl	8015110 <__assert_func>
 80121c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80121c8:	6007      	str	r7, [r0, #0]
 80121ca:	60c7      	str	r7, [r0, #12]
 80121cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80121d0:	6819      	ldr	r1, [r3, #0]
 80121d2:	b159      	cbz	r1, 80121ec <_dtoa_r+0x5c>
 80121d4:	685a      	ldr	r2, [r3, #4]
 80121d6:	604a      	str	r2, [r1, #4]
 80121d8:	2301      	movs	r3, #1
 80121da:	4093      	lsls	r3, r2
 80121dc:	608b      	str	r3, [r1, #8]
 80121de:	4658      	mov	r0, fp
 80121e0:	f000 feda 	bl	8012f98 <_Bfree>
 80121e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80121e8:	2200      	movs	r2, #0
 80121ea:	601a      	str	r2, [r3, #0]
 80121ec:	1e2b      	subs	r3, r5, #0
 80121ee:	bfb9      	ittee	lt
 80121f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80121f4:	9303      	strlt	r3, [sp, #12]
 80121f6:	2300      	movge	r3, #0
 80121f8:	6033      	strge	r3, [r6, #0]
 80121fa:	9f03      	ldr	r7, [sp, #12]
 80121fc:	4b98      	ldr	r3, [pc, #608]	@ (8012460 <_dtoa_r+0x2d0>)
 80121fe:	bfbc      	itt	lt
 8012200:	2201      	movlt	r2, #1
 8012202:	6032      	strlt	r2, [r6, #0]
 8012204:	43bb      	bics	r3, r7
 8012206:	d112      	bne.n	801222e <_dtoa_r+0x9e>
 8012208:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801220a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801220e:	6013      	str	r3, [r2, #0]
 8012210:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012214:	4323      	orrs	r3, r4
 8012216:	f000 854d 	beq.w	8012cb4 <_dtoa_r+0xb24>
 801221a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801221c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012474 <_dtoa_r+0x2e4>
 8012220:	2b00      	cmp	r3, #0
 8012222:	f000 854f 	beq.w	8012cc4 <_dtoa_r+0xb34>
 8012226:	f10a 0303 	add.w	r3, sl, #3
 801222a:	f000 bd49 	b.w	8012cc0 <_dtoa_r+0xb30>
 801222e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012232:	2200      	movs	r2, #0
 8012234:	ec51 0b17 	vmov	r0, r1, d7
 8012238:	2300      	movs	r3, #0
 801223a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801223e:	f7ee fc6b 	bl	8000b18 <__aeabi_dcmpeq>
 8012242:	4680      	mov	r8, r0
 8012244:	b158      	cbz	r0, 801225e <_dtoa_r+0xce>
 8012246:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012248:	2301      	movs	r3, #1
 801224a:	6013      	str	r3, [r2, #0]
 801224c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801224e:	b113      	cbz	r3, 8012256 <_dtoa_r+0xc6>
 8012250:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012252:	4b84      	ldr	r3, [pc, #528]	@ (8012464 <_dtoa_r+0x2d4>)
 8012254:	6013      	str	r3, [r2, #0]
 8012256:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012478 <_dtoa_r+0x2e8>
 801225a:	f000 bd33 	b.w	8012cc4 <_dtoa_r+0xb34>
 801225e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012262:	aa16      	add	r2, sp, #88	@ 0x58
 8012264:	a917      	add	r1, sp, #92	@ 0x5c
 8012266:	4658      	mov	r0, fp
 8012268:	f001 fa3a 	bl	80136e0 <__d2b>
 801226c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012270:	4681      	mov	r9, r0
 8012272:	2e00      	cmp	r6, #0
 8012274:	d077      	beq.n	8012366 <_dtoa_r+0x1d6>
 8012276:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012278:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801227c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012280:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012284:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012288:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801228c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012290:	4619      	mov	r1, r3
 8012292:	2200      	movs	r2, #0
 8012294:	4b74      	ldr	r3, [pc, #464]	@ (8012468 <_dtoa_r+0x2d8>)
 8012296:	f7ee f81f 	bl	80002d8 <__aeabi_dsub>
 801229a:	a369      	add	r3, pc, #420	@ (adr r3, 8012440 <_dtoa_r+0x2b0>)
 801229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a0:	f7ee f9d2 	bl	8000648 <__aeabi_dmul>
 80122a4:	a368      	add	r3, pc, #416	@ (adr r3, 8012448 <_dtoa_r+0x2b8>)
 80122a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122aa:	f7ee f817 	bl	80002dc <__adddf3>
 80122ae:	4604      	mov	r4, r0
 80122b0:	4630      	mov	r0, r6
 80122b2:	460d      	mov	r5, r1
 80122b4:	f7ee f95e 	bl	8000574 <__aeabi_i2d>
 80122b8:	a365      	add	r3, pc, #404	@ (adr r3, 8012450 <_dtoa_r+0x2c0>)
 80122ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122be:	f7ee f9c3 	bl	8000648 <__aeabi_dmul>
 80122c2:	4602      	mov	r2, r0
 80122c4:	460b      	mov	r3, r1
 80122c6:	4620      	mov	r0, r4
 80122c8:	4629      	mov	r1, r5
 80122ca:	f7ee f807 	bl	80002dc <__adddf3>
 80122ce:	4604      	mov	r4, r0
 80122d0:	460d      	mov	r5, r1
 80122d2:	f7ee fc69 	bl	8000ba8 <__aeabi_d2iz>
 80122d6:	2200      	movs	r2, #0
 80122d8:	4607      	mov	r7, r0
 80122da:	2300      	movs	r3, #0
 80122dc:	4620      	mov	r0, r4
 80122de:	4629      	mov	r1, r5
 80122e0:	f7ee fc24 	bl	8000b2c <__aeabi_dcmplt>
 80122e4:	b140      	cbz	r0, 80122f8 <_dtoa_r+0x168>
 80122e6:	4638      	mov	r0, r7
 80122e8:	f7ee f944 	bl	8000574 <__aeabi_i2d>
 80122ec:	4622      	mov	r2, r4
 80122ee:	462b      	mov	r3, r5
 80122f0:	f7ee fc12 	bl	8000b18 <__aeabi_dcmpeq>
 80122f4:	b900      	cbnz	r0, 80122f8 <_dtoa_r+0x168>
 80122f6:	3f01      	subs	r7, #1
 80122f8:	2f16      	cmp	r7, #22
 80122fa:	d851      	bhi.n	80123a0 <_dtoa_r+0x210>
 80122fc:	4b5b      	ldr	r3, [pc, #364]	@ (801246c <_dtoa_r+0x2dc>)
 80122fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801230a:	f7ee fc0f 	bl	8000b2c <__aeabi_dcmplt>
 801230e:	2800      	cmp	r0, #0
 8012310:	d048      	beq.n	80123a4 <_dtoa_r+0x214>
 8012312:	3f01      	subs	r7, #1
 8012314:	2300      	movs	r3, #0
 8012316:	9312      	str	r3, [sp, #72]	@ 0x48
 8012318:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801231a:	1b9b      	subs	r3, r3, r6
 801231c:	1e5a      	subs	r2, r3, #1
 801231e:	bf44      	itt	mi
 8012320:	f1c3 0801 	rsbmi	r8, r3, #1
 8012324:	2300      	movmi	r3, #0
 8012326:	9208      	str	r2, [sp, #32]
 8012328:	bf54      	ite	pl
 801232a:	f04f 0800 	movpl.w	r8, #0
 801232e:	9308      	strmi	r3, [sp, #32]
 8012330:	2f00      	cmp	r7, #0
 8012332:	db39      	blt.n	80123a8 <_dtoa_r+0x218>
 8012334:	9b08      	ldr	r3, [sp, #32]
 8012336:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012338:	443b      	add	r3, r7
 801233a:	9308      	str	r3, [sp, #32]
 801233c:	2300      	movs	r3, #0
 801233e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012340:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012342:	2b09      	cmp	r3, #9
 8012344:	d864      	bhi.n	8012410 <_dtoa_r+0x280>
 8012346:	2b05      	cmp	r3, #5
 8012348:	bfc4      	itt	gt
 801234a:	3b04      	subgt	r3, #4
 801234c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801234e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012350:	f1a3 0302 	sub.w	r3, r3, #2
 8012354:	bfcc      	ite	gt
 8012356:	2400      	movgt	r4, #0
 8012358:	2401      	movle	r4, #1
 801235a:	2b03      	cmp	r3, #3
 801235c:	d863      	bhi.n	8012426 <_dtoa_r+0x296>
 801235e:	e8df f003 	tbb	[pc, r3]
 8012362:	372a      	.short	0x372a
 8012364:	5535      	.short	0x5535
 8012366:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801236a:	441e      	add	r6, r3
 801236c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012370:	2b20      	cmp	r3, #32
 8012372:	bfc1      	itttt	gt
 8012374:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012378:	409f      	lslgt	r7, r3
 801237a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801237e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012382:	bfd6      	itet	le
 8012384:	f1c3 0320 	rsble	r3, r3, #32
 8012388:	ea47 0003 	orrgt.w	r0, r7, r3
 801238c:	fa04 f003 	lslle.w	r0, r4, r3
 8012390:	f7ee f8e0 	bl	8000554 <__aeabi_ui2d>
 8012394:	2201      	movs	r2, #1
 8012396:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801239a:	3e01      	subs	r6, #1
 801239c:	9214      	str	r2, [sp, #80]	@ 0x50
 801239e:	e777      	b.n	8012290 <_dtoa_r+0x100>
 80123a0:	2301      	movs	r3, #1
 80123a2:	e7b8      	b.n	8012316 <_dtoa_r+0x186>
 80123a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80123a6:	e7b7      	b.n	8012318 <_dtoa_r+0x188>
 80123a8:	427b      	negs	r3, r7
 80123aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80123ac:	2300      	movs	r3, #0
 80123ae:	eba8 0807 	sub.w	r8, r8, r7
 80123b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80123b4:	e7c4      	b.n	8012340 <_dtoa_r+0x1b0>
 80123b6:	2300      	movs	r3, #0
 80123b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80123ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123bc:	2b00      	cmp	r3, #0
 80123be:	dc35      	bgt.n	801242c <_dtoa_r+0x29c>
 80123c0:	2301      	movs	r3, #1
 80123c2:	9300      	str	r3, [sp, #0]
 80123c4:	9307      	str	r3, [sp, #28]
 80123c6:	461a      	mov	r2, r3
 80123c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80123ca:	e00b      	b.n	80123e4 <_dtoa_r+0x254>
 80123cc:	2301      	movs	r3, #1
 80123ce:	e7f3      	b.n	80123b8 <_dtoa_r+0x228>
 80123d0:	2300      	movs	r3, #0
 80123d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80123d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123d6:	18fb      	adds	r3, r7, r3
 80123d8:	9300      	str	r3, [sp, #0]
 80123da:	3301      	adds	r3, #1
 80123dc:	2b01      	cmp	r3, #1
 80123de:	9307      	str	r3, [sp, #28]
 80123e0:	bfb8      	it	lt
 80123e2:	2301      	movlt	r3, #1
 80123e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80123e8:	2100      	movs	r1, #0
 80123ea:	2204      	movs	r2, #4
 80123ec:	f102 0514 	add.w	r5, r2, #20
 80123f0:	429d      	cmp	r5, r3
 80123f2:	d91f      	bls.n	8012434 <_dtoa_r+0x2a4>
 80123f4:	6041      	str	r1, [r0, #4]
 80123f6:	4658      	mov	r0, fp
 80123f8:	f000 fd8e 	bl	8012f18 <_Balloc>
 80123fc:	4682      	mov	sl, r0
 80123fe:	2800      	cmp	r0, #0
 8012400:	d13c      	bne.n	801247c <_dtoa_r+0x2ec>
 8012402:	4b1b      	ldr	r3, [pc, #108]	@ (8012470 <_dtoa_r+0x2e0>)
 8012404:	4602      	mov	r2, r0
 8012406:	f240 11af 	movw	r1, #431	@ 0x1af
 801240a:	e6d8      	b.n	80121be <_dtoa_r+0x2e>
 801240c:	2301      	movs	r3, #1
 801240e:	e7e0      	b.n	80123d2 <_dtoa_r+0x242>
 8012410:	2401      	movs	r4, #1
 8012412:	2300      	movs	r3, #0
 8012414:	9309      	str	r3, [sp, #36]	@ 0x24
 8012416:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012418:	f04f 33ff 	mov.w	r3, #4294967295
 801241c:	9300      	str	r3, [sp, #0]
 801241e:	9307      	str	r3, [sp, #28]
 8012420:	2200      	movs	r2, #0
 8012422:	2312      	movs	r3, #18
 8012424:	e7d0      	b.n	80123c8 <_dtoa_r+0x238>
 8012426:	2301      	movs	r3, #1
 8012428:	930b      	str	r3, [sp, #44]	@ 0x2c
 801242a:	e7f5      	b.n	8012418 <_dtoa_r+0x288>
 801242c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801242e:	9300      	str	r3, [sp, #0]
 8012430:	9307      	str	r3, [sp, #28]
 8012432:	e7d7      	b.n	80123e4 <_dtoa_r+0x254>
 8012434:	3101      	adds	r1, #1
 8012436:	0052      	lsls	r2, r2, #1
 8012438:	e7d8      	b.n	80123ec <_dtoa_r+0x25c>
 801243a:	bf00      	nop
 801243c:	f3af 8000 	nop.w
 8012440:	636f4361 	.word	0x636f4361
 8012444:	3fd287a7 	.word	0x3fd287a7
 8012448:	8b60c8b3 	.word	0x8b60c8b3
 801244c:	3fc68a28 	.word	0x3fc68a28
 8012450:	509f79fb 	.word	0x509f79fb
 8012454:	3fd34413 	.word	0x3fd34413
 8012458:	080171ec 	.word	0x080171ec
 801245c:	08017203 	.word	0x08017203
 8012460:	7ff00000 	.word	0x7ff00000
 8012464:	08017549 	.word	0x08017549
 8012468:	3ff80000 	.word	0x3ff80000
 801246c:	08017300 	.word	0x08017300
 8012470:	0801725b 	.word	0x0801725b
 8012474:	080171e8 	.word	0x080171e8
 8012478:	08017548 	.word	0x08017548
 801247c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012480:	6018      	str	r0, [r3, #0]
 8012482:	9b07      	ldr	r3, [sp, #28]
 8012484:	2b0e      	cmp	r3, #14
 8012486:	f200 80a4 	bhi.w	80125d2 <_dtoa_r+0x442>
 801248a:	2c00      	cmp	r4, #0
 801248c:	f000 80a1 	beq.w	80125d2 <_dtoa_r+0x442>
 8012490:	2f00      	cmp	r7, #0
 8012492:	dd33      	ble.n	80124fc <_dtoa_r+0x36c>
 8012494:	4bad      	ldr	r3, [pc, #692]	@ (801274c <_dtoa_r+0x5bc>)
 8012496:	f007 020f 	and.w	r2, r7, #15
 801249a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801249e:	ed93 7b00 	vldr	d7, [r3]
 80124a2:	05f8      	lsls	r0, r7, #23
 80124a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80124a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80124ac:	d516      	bpl.n	80124dc <_dtoa_r+0x34c>
 80124ae:	4ba8      	ldr	r3, [pc, #672]	@ (8012750 <_dtoa_r+0x5c0>)
 80124b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80124b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80124b8:	f7ee f9f0 	bl	800089c <__aeabi_ddiv>
 80124bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124c0:	f004 040f 	and.w	r4, r4, #15
 80124c4:	2603      	movs	r6, #3
 80124c6:	4da2      	ldr	r5, [pc, #648]	@ (8012750 <_dtoa_r+0x5c0>)
 80124c8:	b954      	cbnz	r4, 80124e0 <_dtoa_r+0x350>
 80124ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80124ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80124d2:	f7ee f9e3 	bl	800089c <__aeabi_ddiv>
 80124d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124da:	e028      	b.n	801252e <_dtoa_r+0x39e>
 80124dc:	2602      	movs	r6, #2
 80124de:	e7f2      	b.n	80124c6 <_dtoa_r+0x336>
 80124e0:	07e1      	lsls	r1, r4, #31
 80124e2:	d508      	bpl.n	80124f6 <_dtoa_r+0x366>
 80124e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80124e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80124ec:	f7ee f8ac 	bl	8000648 <__aeabi_dmul>
 80124f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80124f4:	3601      	adds	r6, #1
 80124f6:	1064      	asrs	r4, r4, #1
 80124f8:	3508      	adds	r5, #8
 80124fa:	e7e5      	b.n	80124c8 <_dtoa_r+0x338>
 80124fc:	f000 80d2 	beq.w	80126a4 <_dtoa_r+0x514>
 8012500:	427c      	negs	r4, r7
 8012502:	4b92      	ldr	r3, [pc, #584]	@ (801274c <_dtoa_r+0x5bc>)
 8012504:	4d92      	ldr	r5, [pc, #584]	@ (8012750 <_dtoa_r+0x5c0>)
 8012506:	f004 020f 	and.w	r2, r4, #15
 801250a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012512:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012516:	f7ee f897 	bl	8000648 <__aeabi_dmul>
 801251a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801251e:	1124      	asrs	r4, r4, #4
 8012520:	2300      	movs	r3, #0
 8012522:	2602      	movs	r6, #2
 8012524:	2c00      	cmp	r4, #0
 8012526:	f040 80b2 	bne.w	801268e <_dtoa_r+0x4fe>
 801252a:	2b00      	cmp	r3, #0
 801252c:	d1d3      	bne.n	80124d6 <_dtoa_r+0x346>
 801252e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8012530:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012534:	2b00      	cmp	r3, #0
 8012536:	f000 80b7 	beq.w	80126a8 <_dtoa_r+0x518>
 801253a:	4b86      	ldr	r3, [pc, #536]	@ (8012754 <_dtoa_r+0x5c4>)
 801253c:	2200      	movs	r2, #0
 801253e:	4620      	mov	r0, r4
 8012540:	4629      	mov	r1, r5
 8012542:	f7ee faf3 	bl	8000b2c <__aeabi_dcmplt>
 8012546:	2800      	cmp	r0, #0
 8012548:	f000 80ae 	beq.w	80126a8 <_dtoa_r+0x518>
 801254c:	9b07      	ldr	r3, [sp, #28]
 801254e:	2b00      	cmp	r3, #0
 8012550:	f000 80aa 	beq.w	80126a8 <_dtoa_r+0x518>
 8012554:	9b00      	ldr	r3, [sp, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	dd37      	ble.n	80125ca <_dtoa_r+0x43a>
 801255a:	1e7b      	subs	r3, r7, #1
 801255c:	9304      	str	r3, [sp, #16]
 801255e:	4620      	mov	r0, r4
 8012560:	4b7d      	ldr	r3, [pc, #500]	@ (8012758 <_dtoa_r+0x5c8>)
 8012562:	2200      	movs	r2, #0
 8012564:	4629      	mov	r1, r5
 8012566:	f7ee f86f 	bl	8000648 <__aeabi_dmul>
 801256a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801256e:	9c00      	ldr	r4, [sp, #0]
 8012570:	3601      	adds	r6, #1
 8012572:	4630      	mov	r0, r6
 8012574:	f7ed fffe 	bl	8000574 <__aeabi_i2d>
 8012578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801257c:	f7ee f864 	bl	8000648 <__aeabi_dmul>
 8012580:	4b76      	ldr	r3, [pc, #472]	@ (801275c <_dtoa_r+0x5cc>)
 8012582:	2200      	movs	r2, #0
 8012584:	f7ed feaa 	bl	80002dc <__adddf3>
 8012588:	4605      	mov	r5, r0
 801258a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801258e:	2c00      	cmp	r4, #0
 8012590:	f040 808d 	bne.w	80126ae <_dtoa_r+0x51e>
 8012594:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012598:	4b71      	ldr	r3, [pc, #452]	@ (8012760 <_dtoa_r+0x5d0>)
 801259a:	2200      	movs	r2, #0
 801259c:	f7ed fe9c 	bl	80002d8 <__aeabi_dsub>
 80125a0:	4602      	mov	r2, r0
 80125a2:	460b      	mov	r3, r1
 80125a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80125a8:	462a      	mov	r2, r5
 80125aa:	4633      	mov	r3, r6
 80125ac:	f7ee fadc 	bl	8000b68 <__aeabi_dcmpgt>
 80125b0:	2800      	cmp	r0, #0
 80125b2:	f040 828b 	bne.w	8012acc <_dtoa_r+0x93c>
 80125b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125ba:	462a      	mov	r2, r5
 80125bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80125c0:	f7ee fab4 	bl	8000b2c <__aeabi_dcmplt>
 80125c4:	2800      	cmp	r0, #0
 80125c6:	f040 8128 	bne.w	801281a <_dtoa_r+0x68a>
 80125ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80125ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80125d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	f2c0 815a 	blt.w	801288e <_dtoa_r+0x6fe>
 80125da:	2f0e      	cmp	r7, #14
 80125dc:	f300 8157 	bgt.w	801288e <_dtoa_r+0x6fe>
 80125e0:	4b5a      	ldr	r3, [pc, #360]	@ (801274c <_dtoa_r+0x5bc>)
 80125e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80125e6:	ed93 7b00 	vldr	d7, [r3]
 80125ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	ed8d 7b00 	vstr	d7, [sp]
 80125f2:	da03      	bge.n	80125fc <_dtoa_r+0x46c>
 80125f4:	9b07      	ldr	r3, [sp, #28]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	f340 8101 	ble.w	80127fe <_dtoa_r+0x66e>
 80125fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8012600:	4656      	mov	r6, sl
 8012602:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012606:	4620      	mov	r0, r4
 8012608:	4629      	mov	r1, r5
 801260a:	f7ee f947 	bl	800089c <__aeabi_ddiv>
 801260e:	f7ee facb 	bl	8000ba8 <__aeabi_d2iz>
 8012612:	4680      	mov	r8, r0
 8012614:	f7ed ffae 	bl	8000574 <__aeabi_i2d>
 8012618:	e9dd 2300 	ldrd	r2, r3, [sp]
 801261c:	f7ee f814 	bl	8000648 <__aeabi_dmul>
 8012620:	4602      	mov	r2, r0
 8012622:	460b      	mov	r3, r1
 8012624:	4620      	mov	r0, r4
 8012626:	4629      	mov	r1, r5
 8012628:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801262c:	f7ed fe54 	bl	80002d8 <__aeabi_dsub>
 8012630:	f806 4b01 	strb.w	r4, [r6], #1
 8012634:	9d07      	ldr	r5, [sp, #28]
 8012636:	eba6 040a 	sub.w	r4, r6, sl
 801263a:	42a5      	cmp	r5, r4
 801263c:	4602      	mov	r2, r0
 801263e:	460b      	mov	r3, r1
 8012640:	f040 8117 	bne.w	8012872 <_dtoa_r+0x6e2>
 8012644:	f7ed fe4a 	bl	80002dc <__adddf3>
 8012648:	e9dd 2300 	ldrd	r2, r3, [sp]
 801264c:	4604      	mov	r4, r0
 801264e:	460d      	mov	r5, r1
 8012650:	f7ee fa8a 	bl	8000b68 <__aeabi_dcmpgt>
 8012654:	2800      	cmp	r0, #0
 8012656:	f040 80f9 	bne.w	801284c <_dtoa_r+0x6bc>
 801265a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801265e:	4620      	mov	r0, r4
 8012660:	4629      	mov	r1, r5
 8012662:	f7ee fa59 	bl	8000b18 <__aeabi_dcmpeq>
 8012666:	b118      	cbz	r0, 8012670 <_dtoa_r+0x4e0>
 8012668:	f018 0f01 	tst.w	r8, #1
 801266c:	f040 80ee 	bne.w	801284c <_dtoa_r+0x6bc>
 8012670:	4649      	mov	r1, r9
 8012672:	4658      	mov	r0, fp
 8012674:	f000 fc90 	bl	8012f98 <_Bfree>
 8012678:	2300      	movs	r3, #0
 801267a:	7033      	strb	r3, [r6, #0]
 801267c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801267e:	3701      	adds	r7, #1
 8012680:	601f      	str	r7, [r3, #0]
 8012682:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012684:	2b00      	cmp	r3, #0
 8012686:	f000 831d 	beq.w	8012cc4 <_dtoa_r+0xb34>
 801268a:	601e      	str	r6, [r3, #0]
 801268c:	e31a      	b.n	8012cc4 <_dtoa_r+0xb34>
 801268e:	07e2      	lsls	r2, r4, #31
 8012690:	d505      	bpl.n	801269e <_dtoa_r+0x50e>
 8012692:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012696:	f7ed ffd7 	bl	8000648 <__aeabi_dmul>
 801269a:	3601      	adds	r6, #1
 801269c:	2301      	movs	r3, #1
 801269e:	1064      	asrs	r4, r4, #1
 80126a0:	3508      	adds	r5, #8
 80126a2:	e73f      	b.n	8012524 <_dtoa_r+0x394>
 80126a4:	2602      	movs	r6, #2
 80126a6:	e742      	b.n	801252e <_dtoa_r+0x39e>
 80126a8:	9c07      	ldr	r4, [sp, #28]
 80126aa:	9704      	str	r7, [sp, #16]
 80126ac:	e761      	b.n	8012572 <_dtoa_r+0x3e2>
 80126ae:	4b27      	ldr	r3, [pc, #156]	@ (801274c <_dtoa_r+0x5bc>)
 80126b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80126b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80126b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80126ba:	4454      	add	r4, sl
 80126bc:	2900      	cmp	r1, #0
 80126be:	d053      	beq.n	8012768 <_dtoa_r+0x5d8>
 80126c0:	4928      	ldr	r1, [pc, #160]	@ (8012764 <_dtoa_r+0x5d4>)
 80126c2:	2000      	movs	r0, #0
 80126c4:	f7ee f8ea 	bl	800089c <__aeabi_ddiv>
 80126c8:	4633      	mov	r3, r6
 80126ca:	462a      	mov	r2, r5
 80126cc:	f7ed fe04 	bl	80002d8 <__aeabi_dsub>
 80126d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80126d4:	4656      	mov	r6, sl
 80126d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126da:	f7ee fa65 	bl	8000ba8 <__aeabi_d2iz>
 80126de:	4605      	mov	r5, r0
 80126e0:	f7ed ff48 	bl	8000574 <__aeabi_i2d>
 80126e4:	4602      	mov	r2, r0
 80126e6:	460b      	mov	r3, r1
 80126e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126ec:	f7ed fdf4 	bl	80002d8 <__aeabi_dsub>
 80126f0:	3530      	adds	r5, #48	@ 0x30
 80126f2:	4602      	mov	r2, r0
 80126f4:	460b      	mov	r3, r1
 80126f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80126fa:	f806 5b01 	strb.w	r5, [r6], #1
 80126fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012702:	f7ee fa13 	bl	8000b2c <__aeabi_dcmplt>
 8012706:	2800      	cmp	r0, #0
 8012708:	d171      	bne.n	80127ee <_dtoa_r+0x65e>
 801270a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801270e:	4911      	ldr	r1, [pc, #68]	@ (8012754 <_dtoa_r+0x5c4>)
 8012710:	2000      	movs	r0, #0
 8012712:	f7ed fde1 	bl	80002d8 <__aeabi_dsub>
 8012716:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801271a:	f7ee fa07 	bl	8000b2c <__aeabi_dcmplt>
 801271e:	2800      	cmp	r0, #0
 8012720:	f040 8095 	bne.w	801284e <_dtoa_r+0x6be>
 8012724:	42a6      	cmp	r6, r4
 8012726:	f43f af50 	beq.w	80125ca <_dtoa_r+0x43a>
 801272a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801272e:	4b0a      	ldr	r3, [pc, #40]	@ (8012758 <_dtoa_r+0x5c8>)
 8012730:	2200      	movs	r2, #0
 8012732:	f7ed ff89 	bl	8000648 <__aeabi_dmul>
 8012736:	4b08      	ldr	r3, [pc, #32]	@ (8012758 <_dtoa_r+0x5c8>)
 8012738:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801273c:	2200      	movs	r2, #0
 801273e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012742:	f7ed ff81 	bl	8000648 <__aeabi_dmul>
 8012746:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801274a:	e7c4      	b.n	80126d6 <_dtoa_r+0x546>
 801274c:	08017300 	.word	0x08017300
 8012750:	080172d8 	.word	0x080172d8
 8012754:	3ff00000 	.word	0x3ff00000
 8012758:	40240000 	.word	0x40240000
 801275c:	401c0000 	.word	0x401c0000
 8012760:	40140000 	.word	0x40140000
 8012764:	3fe00000 	.word	0x3fe00000
 8012768:	4631      	mov	r1, r6
 801276a:	4628      	mov	r0, r5
 801276c:	f7ed ff6c 	bl	8000648 <__aeabi_dmul>
 8012770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012774:	9415      	str	r4, [sp, #84]	@ 0x54
 8012776:	4656      	mov	r6, sl
 8012778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801277c:	f7ee fa14 	bl	8000ba8 <__aeabi_d2iz>
 8012780:	4605      	mov	r5, r0
 8012782:	f7ed fef7 	bl	8000574 <__aeabi_i2d>
 8012786:	4602      	mov	r2, r0
 8012788:	460b      	mov	r3, r1
 801278a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801278e:	f7ed fda3 	bl	80002d8 <__aeabi_dsub>
 8012792:	3530      	adds	r5, #48	@ 0x30
 8012794:	f806 5b01 	strb.w	r5, [r6], #1
 8012798:	4602      	mov	r2, r0
 801279a:	460b      	mov	r3, r1
 801279c:	42a6      	cmp	r6, r4
 801279e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80127a2:	f04f 0200 	mov.w	r2, #0
 80127a6:	d124      	bne.n	80127f2 <_dtoa_r+0x662>
 80127a8:	4bac      	ldr	r3, [pc, #688]	@ (8012a5c <_dtoa_r+0x8cc>)
 80127aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80127ae:	f7ed fd95 	bl	80002dc <__adddf3>
 80127b2:	4602      	mov	r2, r0
 80127b4:	460b      	mov	r3, r1
 80127b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127ba:	f7ee f9d5 	bl	8000b68 <__aeabi_dcmpgt>
 80127be:	2800      	cmp	r0, #0
 80127c0:	d145      	bne.n	801284e <_dtoa_r+0x6be>
 80127c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80127c6:	49a5      	ldr	r1, [pc, #660]	@ (8012a5c <_dtoa_r+0x8cc>)
 80127c8:	2000      	movs	r0, #0
 80127ca:	f7ed fd85 	bl	80002d8 <__aeabi_dsub>
 80127ce:	4602      	mov	r2, r0
 80127d0:	460b      	mov	r3, r1
 80127d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127d6:	f7ee f9a9 	bl	8000b2c <__aeabi_dcmplt>
 80127da:	2800      	cmp	r0, #0
 80127dc:	f43f aef5 	beq.w	80125ca <_dtoa_r+0x43a>
 80127e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80127e2:	1e73      	subs	r3, r6, #1
 80127e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80127e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80127ea:	2b30      	cmp	r3, #48	@ 0x30
 80127ec:	d0f8      	beq.n	80127e0 <_dtoa_r+0x650>
 80127ee:	9f04      	ldr	r7, [sp, #16]
 80127f0:	e73e      	b.n	8012670 <_dtoa_r+0x4e0>
 80127f2:	4b9b      	ldr	r3, [pc, #620]	@ (8012a60 <_dtoa_r+0x8d0>)
 80127f4:	f7ed ff28 	bl	8000648 <__aeabi_dmul>
 80127f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127fc:	e7bc      	b.n	8012778 <_dtoa_r+0x5e8>
 80127fe:	d10c      	bne.n	801281a <_dtoa_r+0x68a>
 8012800:	4b98      	ldr	r3, [pc, #608]	@ (8012a64 <_dtoa_r+0x8d4>)
 8012802:	2200      	movs	r2, #0
 8012804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012808:	f7ed ff1e 	bl	8000648 <__aeabi_dmul>
 801280c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012810:	f7ee f9a0 	bl	8000b54 <__aeabi_dcmpge>
 8012814:	2800      	cmp	r0, #0
 8012816:	f000 8157 	beq.w	8012ac8 <_dtoa_r+0x938>
 801281a:	2400      	movs	r4, #0
 801281c:	4625      	mov	r5, r4
 801281e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012820:	43db      	mvns	r3, r3
 8012822:	9304      	str	r3, [sp, #16]
 8012824:	4656      	mov	r6, sl
 8012826:	2700      	movs	r7, #0
 8012828:	4621      	mov	r1, r4
 801282a:	4658      	mov	r0, fp
 801282c:	f000 fbb4 	bl	8012f98 <_Bfree>
 8012830:	2d00      	cmp	r5, #0
 8012832:	d0dc      	beq.n	80127ee <_dtoa_r+0x65e>
 8012834:	b12f      	cbz	r7, 8012842 <_dtoa_r+0x6b2>
 8012836:	42af      	cmp	r7, r5
 8012838:	d003      	beq.n	8012842 <_dtoa_r+0x6b2>
 801283a:	4639      	mov	r1, r7
 801283c:	4658      	mov	r0, fp
 801283e:	f000 fbab 	bl	8012f98 <_Bfree>
 8012842:	4629      	mov	r1, r5
 8012844:	4658      	mov	r0, fp
 8012846:	f000 fba7 	bl	8012f98 <_Bfree>
 801284a:	e7d0      	b.n	80127ee <_dtoa_r+0x65e>
 801284c:	9704      	str	r7, [sp, #16]
 801284e:	4633      	mov	r3, r6
 8012850:	461e      	mov	r6, r3
 8012852:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012856:	2a39      	cmp	r2, #57	@ 0x39
 8012858:	d107      	bne.n	801286a <_dtoa_r+0x6da>
 801285a:	459a      	cmp	sl, r3
 801285c:	d1f8      	bne.n	8012850 <_dtoa_r+0x6c0>
 801285e:	9a04      	ldr	r2, [sp, #16]
 8012860:	3201      	adds	r2, #1
 8012862:	9204      	str	r2, [sp, #16]
 8012864:	2230      	movs	r2, #48	@ 0x30
 8012866:	f88a 2000 	strb.w	r2, [sl]
 801286a:	781a      	ldrb	r2, [r3, #0]
 801286c:	3201      	adds	r2, #1
 801286e:	701a      	strb	r2, [r3, #0]
 8012870:	e7bd      	b.n	80127ee <_dtoa_r+0x65e>
 8012872:	4b7b      	ldr	r3, [pc, #492]	@ (8012a60 <_dtoa_r+0x8d0>)
 8012874:	2200      	movs	r2, #0
 8012876:	f7ed fee7 	bl	8000648 <__aeabi_dmul>
 801287a:	2200      	movs	r2, #0
 801287c:	2300      	movs	r3, #0
 801287e:	4604      	mov	r4, r0
 8012880:	460d      	mov	r5, r1
 8012882:	f7ee f949 	bl	8000b18 <__aeabi_dcmpeq>
 8012886:	2800      	cmp	r0, #0
 8012888:	f43f aebb 	beq.w	8012602 <_dtoa_r+0x472>
 801288c:	e6f0      	b.n	8012670 <_dtoa_r+0x4e0>
 801288e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012890:	2a00      	cmp	r2, #0
 8012892:	f000 80db 	beq.w	8012a4c <_dtoa_r+0x8bc>
 8012896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012898:	2a01      	cmp	r2, #1
 801289a:	f300 80bf 	bgt.w	8012a1c <_dtoa_r+0x88c>
 801289e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80128a0:	2a00      	cmp	r2, #0
 80128a2:	f000 80b7 	beq.w	8012a14 <_dtoa_r+0x884>
 80128a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80128aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80128ac:	4646      	mov	r6, r8
 80128ae:	9a08      	ldr	r2, [sp, #32]
 80128b0:	2101      	movs	r1, #1
 80128b2:	441a      	add	r2, r3
 80128b4:	4658      	mov	r0, fp
 80128b6:	4498      	add	r8, r3
 80128b8:	9208      	str	r2, [sp, #32]
 80128ba:	f000 fc6b 	bl	8013194 <__i2b>
 80128be:	4605      	mov	r5, r0
 80128c0:	b15e      	cbz	r6, 80128da <_dtoa_r+0x74a>
 80128c2:	9b08      	ldr	r3, [sp, #32]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	dd08      	ble.n	80128da <_dtoa_r+0x74a>
 80128c8:	42b3      	cmp	r3, r6
 80128ca:	9a08      	ldr	r2, [sp, #32]
 80128cc:	bfa8      	it	ge
 80128ce:	4633      	movge	r3, r6
 80128d0:	eba8 0803 	sub.w	r8, r8, r3
 80128d4:	1af6      	subs	r6, r6, r3
 80128d6:	1ad3      	subs	r3, r2, r3
 80128d8:	9308      	str	r3, [sp, #32]
 80128da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128dc:	b1f3      	cbz	r3, 801291c <_dtoa_r+0x78c>
 80128de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	f000 80b7 	beq.w	8012a54 <_dtoa_r+0x8c4>
 80128e6:	b18c      	cbz	r4, 801290c <_dtoa_r+0x77c>
 80128e8:	4629      	mov	r1, r5
 80128ea:	4622      	mov	r2, r4
 80128ec:	4658      	mov	r0, fp
 80128ee:	f000 fd11 	bl	8013314 <__pow5mult>
 80128f2:	464a      	mov	r2, r9
 80128f4:	4601      	mov	r1, r0
 80128f6:	4605      	mov	r5, r0
 80128f8:	4658      	mov	r0, fp
 80128fa:	f000 fc61 	bl	80131c0 <__multiply>
 80128fe:	4649      	mov	r1, r9
 8012900:	9004      	str	r0, [sp, #16]
 8012902:	4658      	mov	r0, fp
 8012904:	f000 fb48 	bl	8012f98 <_Bfree>
 8012908:	9b04      	ldr	r3, [sp, #16]
 801290a:	4699      	mov	r9, r3
 801290c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801290e:	1b1a      	subs	r2, r3, r4
 8012910:	d004      	beq.n	801291c <_dtoa_r+0x78c>
 8012912:	4649      	mov	r1, r9
 8012914:	4658      	mov	r0, fp
 8012916:	f000 fcfd 	bl	8013314 <__pow5mult>
 801291a:	4681      	mov	r9, r0
 801291c:	2101      	movs	r1, #1
 801291e:	4658      	mov	r0, fp
 8012920:	f000 fc38 	bl	8013194 <__i2b>
 8012924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012926:	4604      	mov	r4, r0
 8012928:	2b00      	cmp	r3, #0
 801292a:	f000 81cf 	beq.w	8012ccc <_dtoa_r+0xb3c>
 801292e:	461a      	mov	r2, r3
 8012930:	4601      	mov	r1, r0
 8012932:	4658      	mov	r0, fp
 8012934:	f000 fcee 	bl	8013314 <__pow5mult>
 8012938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801293a:	2b01      	cmp	r3, #1
 801293c:	4604      	mov	r4, r0
 801293e:	f300 8095 	bgt.w	8012a6c <_dtoa_r+0x8dc>
 8012942:	9b02      	ldr	r3, [sp, #8]
 8012944:	2b00      	cmp	r3, #0
 8012946:	f040 8087 	bne.w	8012a58 <_dtoa_r+0x8c8>
 801294a:	9b03      	ldr	r3, [sp, #12]
 801294c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012950:	2b00      	cmp	r3, #0
 8012952:	f040 8089 	bne.w	8012a68 <_dtoa_r+0x8d8>
 8012956:	9b03      	ldr	r3, [sp, #12]
 8012958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801295c:	0d1b      	lsrs	r3, r3, #20
 801295e:	051b      	lsls	r3, r3, #20
 8012960:	b12b      	cbz	r3, 801296e <_dtoa_r+0x7de>
 8012962:	9b08      	ldr	r3, [sp, #32]
 8012964:	3301      	adds	r3, #1
 8012966:	9308      	str	r3, [sp, #32]
 8012968:	f108 0801 	add.w	r8, r8, #1
 801296c:	2301      	movs	r3, #1
 801296e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012970:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012972:	2b00      	cmp	r3, #0
 8012974:	f000 81b0 	beq.w	8012cd8 <_dtoa_r+0xb48>
 8012978:	6923      	ldr	r3, [r4, #16]
 801297a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801297e:	6918      	ldr	r0, [r3, #16]
 8012980:	f000 fbbc 	bl	80130fc <__hi0bits>
 8012984:	f1c0 0020 	rsb	r0, r0, #32
 8012988:	9b08      	ldr	r3, [sp, #32]
 801298a:	4418      	add	r0, r3
 801298c:	f010 001f 	ands.w	r0, r0, #31
 8012990:	d077      	beq.n	8012a82 <_dtoa_r+0x8f2>
 8012992:	f1c0 0320 	rsb	r3, r0, #32
 8012996:	2b04      	cmp	r3, #4
 8012998:	dd6b      	ble.n	8012a72 <_dtoa_r+0x8e2>
 801299a:	9b08      	ldr	r3, [sp, #32]
 801299c:	f1c0 001c 	rsb	r0, r0, #28
 80129a0:	4403      	add	r3, r0
 80129a2:	4480      	add	r8, r0
 80129a4:	4406      	add	r6, r0
 80129a6:	9308      	str	r3, [sp, #32]
 80129a8:	f1b8 0f00 	cmp.w	r8, #0
 80129ac:	dd05      	ble.n	80129ba <_dtoa_r+0x82a>
 80129ae:	4649      	mov	r1, r9
 80129b0:	4642      	mov	r2, r8
 80129b2:	4658      	mov	r0, fp
 80129b4:	f000 fd08 	bl	80133c8 <__lshift>
 80129b8:	4681      	mov	r9, r0
 80129ba:	9b08      	ldr	r3, [sp, #32]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	dd05      	ble.n	80129cc <_dtoa_r+0x83c>
 80129c0:	4621      	mov	r1, r4
 80129c2:	461a      	mov	r2, r3
 80129c4:	4658      	mov	r0, fp
 80129c6:	f000 fcff 	bl	80133c8 <__lshift>
 80129ca:	4604      	mov	r4, r0
 80129cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d059      	beq.n	8012a86 <_dtoa_r+0x8f6>
 80129d2:	4621      	mov	r1, r4
 80129d4:	4648      	mov	r0, r9
 80129d6:	f000 fd63 	bl	80134a0 <__mcmp>
 80129da:	2800      	cmp	r0, #0
 80129dc:	da53      	bge.n	8012a86 <_dtoa_r+0x8f6>
 80129de:	1e7b      	subs	r3, r7, #1
 80129e0:	9304      	str	r3, [sp, #16]
 80129e2:	4649      	mov	r1, r9
 80129e4:	2300      	movs	r3, #0
 80129e6:	220a      	movs	r2, #10
 80129e8:	4658      	mov	r0, fp
 80129ea:	f000 faf7 	bl	8012fdc <__multadd>
 80129ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80129f0:	4681      	mov	r9, r0
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	f000 8172 	beq.w	8012cdc <_dtoa_r+0xb4c>
 80129f8:	2300      	movs	r3, #0
 80129fa:	4629      	mov	r1, r5
 80129fc:	220a      	movs	r2, #10
 80129fe:	4658      	mov	r0, fp
 8012a00:	f000 faec 	bl	8012fdc <__multadd>
 8012a04:	9b00      	ldr	r3, [sp, #0]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	4605      	mov	r5, r0
 8012a0a:	dc67      	bgt.n	8012adc <_dtoa_r+0x94c>
 8012a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a0e:	2b02      	cmp	r3, #2
 8012a10:	dc41      	bgt.n	8012a96 <_dtoa_r+0x906>
 8012a12:	e063      	b.n	8012adc <_dtoa_r+0x94c>
 8012a14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012a16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8012a1a:	e746      	b.n	80128aa <_dtoa_r+0x71a>
 8012a1c:	9b07      	ldr	r3, [sp, #28]
 8012a1e:	1e5c      	subs	r4, r3, #1
 8012a20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a22:	42a3      	cmp	r3, r4
 8012a24:	bfbf      	itttt	lt
 8012a26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8012a28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8012a2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8012a2c:	1ae3      	sublt	r3, r4, r3
 8012a2e:	bfb4      	ite	lt
 8012a30:	18d2      	addlt	r2, r2, r3
 8012a32:	1b1c      	subge	r4, r3, r4
 8012a34:	9b07      	ldr	r3, [sp, #28]
 8012a36:	bfbc      	itt	lt
 8012a38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8012a3a:	2400      	movlt	r4, #0
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	bfb5      	itete	lt
 8012a40:	eba8 0603 	sublt.w	r6, r8, r3
 8012a44:	9b07      	ldrge	r3, [sp, #28]
 8012a46:	2300      	movlt	r3, #0
 8012a48:	4646      	movge	r6, r8
 8012a4a:	e730      	b.n	80128ae <_dtoa_r+0x71e>
 8012a4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8012a4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8012a50:	4646      	mov	r6, r8
 8012a52:	e735      	b.n	80128c0 <_dtoa_r+0x730>
 8012a54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012a56:	e75c      	b.n	8012912 <_dtoa_r+0x782>
 8012a58:	2300      	movs	r3, #0
 8012a5a:	e788      	b.n	801296e <_dtoa_r+0x7de>
 8012a5c:	3fe00000 	.word	0x3fe00000
 8012a60:	40240000 	.word	0x40240000
 8012a64:	40140000 	.word	0x40140000
 8012a68:	9b02      	ldr	r3, [sp, #8]
 8012a6a:	e780      	b.n	801296e <_dtoa_r+0x7de>
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a70:	e782      	b.n	8012978 <_dtoa_r+0x7e8>
 8012a72:	d099      	beq.n	80129a8 <_dtoa_r+0x818>
 8012a74:	9a08      	ldr	r2, [sp, #32]
 8012a76:	331c      	adds	r3, #28
 8012a78:	441a      	add	r2, r3
 8012a7a:	4498      	add	r8, r3
 8012a7c:	441e      	add	r6, r3
 8012a7e:	9208      	str	r2, [sp, #32]
 8012a80:	e792      	b.n	80129a8 <_dtoa_r+0x818>
 8012a82:	4603      	mov	r3, r0
 8012a84:	e7f6      	b.n	8012a74 <_dtoa_r+0x8e4>
 8012a86:	9b07      	ldr	r3, [sp, #28]
 8012a88:	9704      	str	r7, [sp, #16]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	dc20      	bgt.n	8012ad0 <_dtoa_r+0x940>
 8012a8e:	9300      	str	r3, [sp, #0]
 8012a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a92:	2b02      	cmp	r3, #2
 8012a94:	dd1e      	ble.n	8012ad4 <_dtoa_r+0x944>
 8012a96:	9b00      	ldr	r3, [sp, #0]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	f47f aec0 	bne.w	801281e <_dtoa_r+0x68e>
 8012a9e:	4621      	mov	r1, r4
 8012aa0:	2205      	movs	r2, #5
 8012aa2:	4658      	mov	r0, fp
 8012aa4:	f000 fa9a 	bl	8012fdc <__multadd>
 8012aa8:	4601      	mov	r1, r0
 8012aaa:	4604      	mov	r4, r0
 8012aac:	4648      	mov	r0, r9
 8012aae:	f000 fcf7 	bl	80134a0 <__mcmp>
 8012ab2:	2800      	cmp	r0, #0
 8012ab4:	f77f aeb3 	ble.w	801281e <_dtoa_r+0x68e>
 8012ab8:	4656      	mov	r6, sl
 8012aba:	2331      	movs	r3, #49	@ 0x31
 8012abc:	f806 3b01 	strb.w	r3, [r6], #1
 8012ac0:	9b04      	ldr	r3, [sp, #16]
 8012ac2:	3301      	adds	r3, #1
 8012ac4:	9304      	str	r3, [sp, #16]
 8012ac6:	e6ae      	b.n	8012826 <_dtoa_r+0x696>
 8012ac8:	9c07      	ldr	r4, [sp, #28]
 8012aca:	9704      	str	r7, [sp, #16]
 8012acc:	4625      	mov	r5, r4
 8012ace:	e7f3      	b.n	8012ab8 <_dtoa_r+0x928>
 8012ad0:	9b07      	ldr	r3, [sp, #28]
 8012ad2:	9300      	str	r3, [sp, #0]
 8012ad4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	f000 8104 	beq.w	8012ce4 <_dtoa_r+0xb54>
 8012adc:	2e00      	cmp	r6, #0
 8012ade:	dd05      	ble.n	8012aec <_dtoa_r+0x95c>
 8012ae0:	4629      	mov	r1, r5
 8012ae2:	4632      	mov	r2, r6
 8012ae4:	4658      	mov	r0, fp
 8012ae6:	f000 fc6f 	bl	80133c8 <__lshift>
 8012aea:	4605      	mov	r5, r0
 8012aec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d05a      	beq.n	8012ba8 <_dtoa_r+0xa18>
 8012af2:	6869      	ldr	r1, [r5, #4]
 8012af4:	4658      	mov	r0, fp
 8012af6:	f000 fa0f 	bl	8012f18 <_Balloc>
 8012afa:	4606      	mov	r6, r0
 8012afc:	b928      	cbnz	r0, 8012b0a <_dtoa_r+0x97a>
 8012afe:	4b84      	ldr	r3, [pc, #528]	@ (8012d10 <_dtoa_r+0xb80>)
 8012b00:	4602      	mov	r2, r0
 8012b02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012b06:	f7ff bb5a 	b.w	80121be <_dtoa_r+0x2e>
 8012b0a:	692a      	ldr	r2, [r5, #16]
 8012b0c:	3202      	adds	r2, #2
 8012b0e:	0092      	lsls	r2, r2, #2
 8012b10:	f105 010c 	add.w	r1, r5, #12
 8012b14:	300c      	adds	r0, #12
 8012b16:	f7ff fa9c 	bl	8012052 <memcpy>
 8012b1a:	2201      	movs	r2, #1
 8012b1c:	4631      	mov	r1, r6
 8012b1e:	4658      	mov	r0, fp
 8012b20:	f000 fc52 	bl	80133c8 <__lshift>
 8012b24:	f10a 0301 	add.w	r3, sl, #1
 8012b28:	9307      	str	r3, [sp, #28]
 8012b2a:	9b00      	ldr	r3, [sp, #0]
 8012b2c:	4453      	add	r3, sl
 8012b2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012b30:	9b02      	ldr	r3, [sp, #8]
 8012b32:	f003 0301 	and.w	r3, r3, #1
 8012b36:	462f      	mov	r7, r5
 8012b38:	930a      	str	r3, [sp, #40]	@ 0x28
 8012b3a:	4605      	mov	r5, r0
 8012b3c:	9b07      	ldr	r3, [sp, #28]
 8012b3e:	4621      	mov	r1, r4
 8012b40:	3b01      	subs	r3, #1
 8012b42:	4648      	mov	r0, r9
 8012b44:	9300      	str	r3, [sp, #0]
 8012b46:	f7ff fa99 	bl	801207c <quorem>
 8012b4a:	4639      	mov	r1, r7
 8012b4c:	9002      	str	r0, [sp, #8]
 8012b4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012b52:	4648      	mov	r0, r9
 8012b54:	f000 fca4 	bl	80134a0 <__mcmp>
 8012b58:	462a      	mov	r2, r5
 8012b5a:	9008      	str	r0, [sp, #32]
 8012b5c:	4621      	mov	r1, r4
 8012b5e:	4658      	mov	r0, fp
 8012b60:	f000 fcba 	bl	80134d8 <__mdiff>
 8012b64:	68c2      	ldr	r2, [r0, #12]
 8012b66:	4606      	mov	r6, r0
 8012b68:	bb02      	cbnz	r2, 8012bac <_dtoa_r+0xa1c>
 8012b6a:	4601      	mov	r1, r0
 8012b6c:	4648      	mov	r0, r9
 8012b6e:	f000 fc97 	bl	80134a0 <__mcmp>
 8012b72:	4602      	mov	r2, r0
 8012b74:	4631      	mov	r1, r6
 8012b76:	4658      	mov	r0, fp
 8012b78:	920e      	str	r2, [sp, #56]	@ 0x38
 8012b7a:	f000 fa0d 	bl	8012f98 <_Bfree>
 8012b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b82:	9e07      	ldr	r6, [sp, #28]
 8012b84:	ea43 0102 	orr.w	r1, r3, r2
 8012b88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b8a:	4319      	orrs	r1, r3
 8012b8c:	d110      	bne.n	8012bb0 <_dtoa_r+0xa20>
 8012b8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012b92:	d029      	beq.n	8012be8 <_dtoa_r+0xa58>
 8012b94:	9b08      	ldr	r3, [sp, #32]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	dd02      	ble.n	8012ba0 <_dtoa_r+0xa10>
 8012b9a:	9b02      	ldr	r3, [sp, #8]
 8012b9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012ba0:	9b00      	ldr	r3, [sp, #0]
 8012ba2:	f883 8000 	strb.w	r8, [r3]
 8012ba6:	e63f      	b.n	8012828 <_dtoa_r+0x698>
 8012ba8:	4628      	mov	r0, r5
 8012baa:	e7bb      	b.n	8012b24 <_dtoa_r+0x994>
 8012bac:	2201      	movs	r2, #1
 8012bae:	e7e1      	b.n	8012b74 <_dtoa_r+0x9e4>
 8012bb0:	9b08      	ldr	r3, [sp, #32]
 8012bb2:	2b00      	cmp	r3, #0
 8012bb4:	db04      	blt.n	8012bc0 <_dtoa_r+0xa30>
 8012bb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012bb8:	430b      	orrs	r3, r1
 8012bba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012bbc:	430b      	orrs	r3, r1
 8012bbe:	d120      	bne.n	8012c02 <_dtoa_r+0xa72>
 8012bc0:	2a00      	cmp	r2, #0
 8012bc2:	dded      	ble.n	8012ba0 <_dtoa_r+0xa10>
 8012bc4:	4649      	mov	r1, r9
 8012bc6:	2201      	movs	r2, #1
 8012bc8:	4658      	mov	r0, fp
 8012bca:	f000 fbfd 	bl	80133c8 <__lshift>
 8012bce:	4621      	mov	r1, r4
 8012bd0:	4681      	mov	r9, r0
 8012bd2:	f000 fc65 	bl	80134a0 <__mcmp>
 8012bd6:	2800      	cmp	r0, #0
 8012bd8:	dc03      	bgt.n	8012be2 <_dtoa_r+0xa52>
 8012bda:	d1e1      	bne.n	8012ba0 <_dtoa_r+0xa10>
 8012bdc:	f018 0f01 	tst.w	r8, #1
 8012be0:	d0de      	beq.n	8012ba0 <_dtoa_r+0xa10>
 8012be2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012be6:	d1d8      	bne.n	8012b9a <_dtoa_r+0xa0a>
 8012be8:	9a00      	ldr	r2, [sp, #0]
 8012bea:	2339      	movs	r3, #57	@ 0x39
 8012bec:	7013      	strb	r3, [r2, #0]
 8012bee:	4633      	mov	r3, r6
 8012bf0:	461e      	mov	r6, r3
 8012bf2:	3b01      	subs	r3, #1
 8012bf4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012bf8:	2a39      	cmp	r2, #57	@ 0x39
 8012bfa:	d052      	beq.n	8012ca2 <_dtoa_r+0xb12>
 8012bfc:	3201      	adds	r2, #1
 8012bfe:	701a      	strb	r2, [r3, #0]
 8012c00:	e612      	b.n	8012828 <_dtoa_r+0x698>
 8012c02:	2a00      	cmp	r2, #0
 8012c04:	dd07      	ble.n	8012c16 <_dtoa_r+0xa86>
 8012c06:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012c0a:	d0ed      	beq.n	8012be8 <_dtoa_r+0xa58>
 8012c0c:	9a00      	ldr	r2, [sp, #0]
 8012c0e:	f108 0301 	add.w	r3, r8, #1
 8012c12:	7013      	strb	r3, [r2, #0]
 8012c14:	e608      	b.n	8012828 <_dtoa_r+0x698>
 8012c16:	9b07      	ldr	r3, [sp, #28]
 8012c18:	9a07      	ldr	r2, [sp, #28]
 8012c1a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012c1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012c20:	4293      	cmp	r3, r2
 8012c22:	d028      	beq.n	8012c76 <_dtoa_r+0xae6>
 8012c24:	4649      	mov	r1, r9
 8012c26:	2300      	movs	r3, #0
 8012c28:	220a      	movs	r2, #10
 8012c2a:	4658      	mov	r0, fp
 8012c2c:	f000 f9d6 	bl	8012fdc <__multadd>
 8012c30:	42af      	cmp	r7, r5
 8012c32:	4681      	mov	r9, r0
 8012c34:	f04f 0300 	mov.w	r3, #0
 8012c38:	f04f 020a 	mov.w	r2, #10
 8012c3c:	4639      	mov	r1, r7
 8012c3e:	4658      	mov	r0, fp
 8012c40:	d107      	bne.n	8012c52 <_dtoa_r+0xac2>
 8012c42:	f000 f9cb 	bl	8012fdc <__multadd>
 8012c46:	4607      	mov	r7, r0
 8012c48:	4605      	mov	r5, r0
 8012c4a:	9b07      	ldr	r3, [sp, #28]
 8012c4c:	3301      	adds	r3, #1
 8012c4e:	9307      	str	r3, [sp, #28]
 8012c50:	e774      	b.n	8012b3c <_dtoa_r+0x9ac>
 8012c52:	f000 f9c3 	bl	8012fdc <__multadd>
 8012c56:	4629      	mov	r1, r5
 8012c58:	4607      	mov	r7, r0
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	220a      	movs	r2, #10
 8012c5e:	4658      	mov	r0, fp
 8012c60:	f000 f9bc 	bl	8012fdc <__multadd>
 8012c64:	4605      	mov	r5, r0
 8012c66:	e7f0      	b.n	8012c4a <_dtoa_r+0xaba>
 8012c68:	9b00      	ldr	r3, [sp, #0]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	bfcc      	ite	gt
 8012c6e:	461e      	movgt	r6, r3
 8012c70:	2601      	movle	r6, #1
 8012c72:	4456      	add	r6, sl
 8012c74:	2700      	movs	r7, #0
 8012c76:	4649      	mov	r1, r9
 8012c78:	2201      	movs	r2, #1
 8012c7a:	4658      	mov	r0, fp
 8012c7c:	f000 fba4 	bl	80133c8 <__lshift>
 8012c80:	4621      	mov	r1, r4
 8012c82:	4681      	mov	r9, r0
 8012c84:	f000 fc0c 	bl	80134a0 <__mcmp>
 8012c88:	2800      	cmp	r0, #0
 8012c8a:	dcb0      	bgt.n	8012bee <_dtoa_r+0xa5e>
 8012c8c:	d102      	bne.n	8012c94 <_dtoa_r+0xb04>
 8012c8e:	f018 0f01 	tst.w	r8, #1
 8012c92:	d1ac      	bne.n	8012bee <_dtoa_r+0xa5e>
 8012c94:	4633      	mov	r3, r6
 8012c96:	461e      	mov	r6, r3
 8012c98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c9c:	2a30      	cmp	r2, #48	@ 0x30
 8012c9e:	d0fa      	beq.n	8012c96 <_dtoa_r+0xb06>
 8012ca0:	e5c2      	b.n	8012828 <_dtoa_r+0x698>
 8012ca2:	459a      	cmp	sl, r3
 8012ca4:	d1a4      	bne.n	8012bf0 <_dtoa_r+0xa60>
 8012ca6:	9b04      	ldr	r3, [sp, #16]
 8012ca8:	3301      	adds	r3, #1
 8012caa:	9304      	str	r3, [sp, #16]
 8012cac:	2331      	movs	r3, #49	@ 0x31
 8012cae:	f88a 3000 	strb.w	r3, [sl]
 8012cb2:	e5b9      	b.n	8012828 <_dtoa_r+0x698>
 8012cb4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012cb6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012d14 <_dtoa_r+0xb84>
 8012cba:	b11b      	cbz	r3, 8012cc4 <_dtoa_r+0xb34>
 8012cbc:	f10a 0308 	add.w	r3, sl, #8
 8012cc0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012cc2:	6013      	str	r3, [r2, #0]
 8012cc4:	4650      	mov	r0, sl
 8012cc6:	b019      	add	sp, #100	@ 0x64
 8012cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cce:	2b01      	cmp	r3, #1
 8012cd0:	f77f ae37 	ble.w	8012942 <_dtoa_r+0x7b2>
 8012cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012cd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8012cd8:	2001      	movs	r0, #1
 8012cda:	e655      	b.n	8012988 <_dtoa_r+0x7f8>
 8012cdc:	9b00      	ldr	r3, [sp, #0]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	f77f aed6 	ble.w	8012a90 <_dtoa_r+0x900>
 8012ce4:	4656      	mov	r6, sl
 8012ce6:	4621      	mov	r1, r4
 8012ce8:	4648      	mov	r0, r9
 8012cea:	f7ff f9c7 	bl	801207c <quorem>
 8012cee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012cf2:	f806 8b01 	strb.w	r8, [r6], #1
 8012cf6:	9b00      	ldr	r3, [sp, #0]
 8012cf8:	eba6 020a 	sub.w	r2, r6, sl
 8012cfc:	4293      	cmp	r3, r2
 8012cfe:	ddb3      	ble.n	8012c68 <_dtoa_r+0xad8>
 8012d00:	4649      	mov	r1, r9
 8012d02:	2300      	movs	r3, #0
 8012d04:	220a      	movs	r2, #10
 8012d06:	4658      	mov	r0, fp
 8012d08:	f000 f968 	bl	8012fdc <__multadd>
 8012d0c:	4681      	mov	r9, r0
 8012d0e:	e7ea      	b.n	8012ce6 <_dtoa_r+0xb56>
 8012d10:	0801725b 	.word	0x0801725b
 8012d14:	080171df 	.word	0x080171df

08012d18 <_free_r>:
 8012d18:	b538      	push	{r3, r4, r5, lr}
 8012d1a:	4605      	mov	r5, r0
 8012d1c:	2900      	cmp	r1, #0
 8012d1e:	d041      	beq.n	8012da4 <_free_r+0x8c>
 8012d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012d24:	1f0c      	subs	r4, r1, #4
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	bfb8      	it	lt
 8012d2a:	18e4      	addlt	r4, r4, r3
 8012d2c:	f000 f8e8 	bl	8012f00 <__malloc_lock>
 8012d30:	4a1d      	ldr	r2, [pc, #116]	@ (8012da8 <_free_r+0x90>)
 8012d32:	6813      	ldr	r3, [r2, #0]
 8012d34:	b933      	cbnz	r3, 8012d44 <_free_r+0x2c>
 8012d36:	6063      	str	r3, [r4, #4]
 8012d38:	6014      	str	r4, [r2, #0]
 8012d3a:	4628      	mov	r0, r5
 8012d3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012d40:	f000 b8e4 	b.w	8012f0c <__malloc_unlock>
 8012d44:	42a3      	cmp	r3, r4
 8012d46:	d908      	bls.n	8012d5a <_free_r+0x42>
 8012d48:	6820      	ldr	r0, [r4, #0]
 8012d4a:	1821      	adds	r1, r4, r0
 8012d4c:	428b      	cmp	r3, r1
 8012d4e:	bf01      	itttt	eq
 8012d50:	6819      	ldreq	r1, [r3, #0]
 8012d52:	685b      	ldreq	r3, [r3, #4]
 8012d54:	1809      	addeq	r1, r1, r0
 8012d56:	6021      	streq	r1, [r4, #0]
 8012d58:	e7ed      	b.n	8012d36 <_free_r+0x1e>
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	b10b      	cbz	r3, 8012d64 <_free_r+0x4c>
 8012d60:	42a3      	cmp	r3, r4
 8012d62:	d9fa      	bls.n	8012d5a <_free_r+0x42>
 8012d64:	6811      	ldr	r1, [r2, #0]
 8012d66:	1850      	adds	r0, r2, r1
 8012d68:	42a0      	cmp	r0, r4
 8012d6a:	d10b      	bne.n	8012d84 <_free_r+0x6c>
 8012d6c:	6820      	ldr	r0, [r4, #0]
 8012d6e:	4401      	add	r1, r0
 8012d70:	1850      	adds	r0, r2, r1
 8012d72:	4283      	cmp	r3, r0
 8012d74:	6011      	str	r1, [r2, #0]
 8012d76:	d1e0      	bne.n	8012d3a <_free_r+0x22>
 8012d78:	6818      	ldr	r0, [r3, #0]
 8012d7a:	685b      	ldr	r3, [r3, #4]
 8012d7c:	6053      	str	r3, [r2, #4]
 8012d7e:	4408      	add	r0, r1
 8012d80:	6010      	str	r0, [r2, #0]
 8012d82:	e7da      	b.n	8012d3a <_free_r+0x22>
 8012d84:	d902      	bls.n	8012d8c <_free_r+0x74>
 8012d86:	230c      	movs	r3, #12
 8012d88:	602b      	str	r3, [r5, #0]
 8012d8a:	e7d6      	b.n	8012d3a <_free_r+0x22>
 8012d8c:	6820      	ldr	r0, [r4, #0]
 8012d8e:	1821      	adds	r1, r4, r0
 8012d90:	428b      	cmp	r3, r1
 8012d92:	bf04      	itt	eq
 8012d94:	6819      	ldreq	r1, [r3, #0]
 8012d96:	685b      	ldreq	r3, [r3, #4]
 8012d98:	6063      	str	r3, [r4, #4]
 8012d9a:	bf04      	itt	eq
 8012d9c:	1809      	addeq	r1, r1, r0
 8012d9e:	6021      	streq	r1, [r4, #0]
 8012da0:	6054      	str	r4, [r2, #4]
 8012da2:	e7ca      	b.n	8012d3a <_free_r+0x22>
 8012da4:	bd38      	pop	{r3, r4, r5, pc}
 8012da6:	bf00      	nop
 8012da8:	200026e8 	.word	0x200026e8

08012dac <malloc>:
 8012dac:	4b02      	ldr	r3, [pc, #8]	@ (8012db8 <malloc+0xc>)
 8012dae:	4601      	mov	r1, r0
 8012db0:	6818      	ldr	r0, [r3, #0]
 8012db2:	f000 b825 	b.w	8012e00 <_malloc_r>
 8012db6:	bf00      	nop
 8012db8:	200001f8 	.word	0x200001f8

08012dbc <sbrk_aligned>:
 8012dbc:	b570      	push	{r4, r5, r6, lr}
 8012dbe:	4e0f      	ldr	r6, [pc, #60]	@ (8012dfc <sbrk_aligned+0x40>)
 8012dc0:	460c      	mov	r4, r1
 8012dc2:	6831      	ldr	r1, [r6, #0]
 8012dc4:	4605      	mov	r5, r0
 8012dc6:	b911      	cbnz	r1, 8012dce <sbrk_aligned+0x12>
 8012dc8:	f002 f988 	bl	80150dc <_sbrk_r>
 8012dcc:	6030      	str	r0, [r6, #0]
 8012dce:	4621      	mov	r1, r4
 8012dd0:	4628      	mov	r0, r5
 8012dd2:	f002 f983 	bl	80150dc <_sbrk_r>
 8012dd6:	1c43      	adds	r3, r0, #1
 8012dd8:	d103      	bne.n	8012de2 <sbrk_aligned+0x26>
 8012dda:	f04f 34ff 	mov.w	r4, #4294967295
 8012dde:	4620      	mov	r0, r4
 8012de0:	bd70      	pop	{r4, r5, r6, pc}
 8012de2:	1cc4      	adds	r4, r0, #3
 8012de4:	f024 0403 	bic.w	r4, r4, #3
 8012de8:	42a0      	cmp	r0, r4
 8012dea:	d0f8      	beq.n	8012dde <sbrk_aligned+0x22>
 8012dec:	1a21      	subs	r1, r4, r0
 8012dee:	4628      	mov	r0, r5
 8012df0:	f002 f974 	bl	80150dc <_sbrk_r>
 8012df4:	3001      	adds	r0, #1
 8012df6:	d1f2      	bne.n	8012dde <sbrk_aligned+0x22>
 8012df8:	e7ef      	b.n	8012dda <sbrk_aligned+0x1e>
 8012dfa:	bf00      	nop
 8012dfc:	200026e4 	.word	0x200026e4

08012e00 <_malloc_r>:
 8012e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012e04:	1ccd      	adds	r5, r1, #3
 8012e06:	f025 0503 	bic.w	r5, r5, #3
 8012e0a:	3508      	adds	r5, #8
 8012e0c:	2d0c      	cmp	r5, #12
 8012e0e:	bf38      	it	cc
 8012e10:	250c      	movcc	r5, #12
 8012e12:	2d00      	cmp	r5, #0
 8012e14:	4606      	mov	r6, r0
 8012e16:	db01      	blt.n	8012e1c <_malloc_r+0x1c>
 8012e18:	42a9      	cmp	r1, r5
 8012e1a:	d904      	bls.n	8012e26 <_malloc_r+0x26>
 8012e1c:	230c      	movs	r3, #12
 8012e1e:	6033      	str	r3, [r6, #0]
 8012e20:	2000      	movs	r0, #0
 8012e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012efc <_malloc_r+0xfc>
 8012e2a:	f000 f869 	bl	8012f00 <__malloc_lock>
 8012e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8012e32:	461c      	mov	r4, r3
 8012e34:	bb44      	cbnz	r4, 8012e88 <_malloc_r+0x88>
 8012e36:	4629      	mov	r1, r5
 8012e38:	4630      	mov	r0, r6
 8012e3a:	f7ff ffbf 	bl	8012dbc <sbrk_aligned>
 8012e3e:	1c43      	adds	r3, r0, #1
 8012e40:	4604      	mov	r4, r0
 8012e42:	d158      	bne.n	8012ef6 <_malloc_r+0xf6>
 8012e44:	f8d8 4000 	ldr.w	r4, [r8]
 8012e48:	4627      	mov	r7, r4
 8012e4a:	2f00      	cmp	r7, #0
 8012e4c:	d143      	bne.n	8012ed6 <_malloc_r+0xd6>
 8012e4e:	2c00      	cmp	r4, #0
 8012e50:	d04b      	beq.n	8012eea <_malloc_r+0xea>
 8012e52:	6823      	ldr	r3, [r4, #0]
 8012e54:	4639      	mov	r1, r7
 8012e56:	4630      	mov	r0, r6
 8012e58:	eb04 0903 	add.w	r9, r4, r3
 8012e5c:	f002 f93e 	bl	80150dc <_sbrk_r>
 8012e60:	4581      	cmp	r9, r0
 8012e62:	d142      	bne.n	8012eea <_malloc_r+0xea>
 8012e64:	6821      	ldr	r1, [r4, #0]
 8012e66:	1a6d      	subs	r5, r5, r1
 8012e68:	4629      	mov	r1, r5
 8012e6a:	4630      	mov	r0, r6
 8012e6c:	f7ff ffa6 	bl	8012dbc <sbrk_aligned>
 8012e70:	3001      	adds	r0, #1
 8012e72:	d03a      	beq.n	8012eea <_malloc_r+0xea>
 8012e74:	6823      	ldr	r3, [r4, #0]
 8012e76:	442b      	add	r3, r5
 8012e78:	6023      	str	r3, [r4, #0]
 8012e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8012e7e:	685a      	ldr	r2, [r3, #4]
 8012e80:	bb62      	cbnz	r2, 8012edc <_malloc_r+0xdc>
 8012e82:	f8c8 7000 	str.w	r7, [r8]
 8012e86:	e00f      	b.n	8012ea8 <_malloc_r+0xa8>
 8012e88:	6822      	ldr	r2, [r4, #0]
 8012e8a:	1b52      	subs	r2, r2, r5
 8012e8c:	d420      	bmi.n	8012ed0 <_malloc_r+0xd0>
 8012e8e:	2a0b      	cmp	r2, #11
 8012e90:	d917      	bls.n	8012ec2 <_malloc_r+0xc2>
 8012e92:	1961      	adds	r1, r4, r5
 8012e94:	42a3      	cmp	r3, r4
 8012e96:	6025      	str	r5, [r4, #0]
 8012e98:	bf18      	it	ne
 8012e9a:	6059      	strne	r1, [r3, #4]
 8012e9c:	6863      	ldr	r3, [r4, #4]
 8012e9e:	bf08      	it	eq
 8012ea0:	f8c8 1000 	streq.w	r1, [r8]
 8012ea4:	5162      	str	r2, [r4, r5]
 8012ea6:	604b      	str	r3, [r1, #4]
 8012ea8:	4630      	mov	r0, r6
 8012eaa:	f000 f82f 	bl	8012f0c <__malloc_unlock>
 8012eae:	f104 000b 	add.w	r0, r4, #11
 8012eb2:	1d23      	adds	r3, r4, #4
 8012eb4:	f020 0007 	bic.w	r0, r0, #7
 8012eb8:	1ac2      	subs	r2, r0, r3
 8012eba:	bf1c      	itt	ne
 8012ebc:	1a1b      	subne	r3, r3, r0
 8012ebe:	50a3      	strne	r3, [r4, r2]
 8012ec0:	e7af      	b.n	8012e22 <_malloc_r+0x22>
 8012ec2:	6862      	ldr	r2, [r4, #4]
 8012ec4:	42a3      	cmp	r3, r4
 8012ec6:	bf0c      	ite	eq
 8012ec8:	f8c8 2000 	streq.w	r2, [r8]
 8012ecc:	605a      	strne	r2, [r3, #4]
 8012ece:	e7eb      	b.n	8012ea8 <_malloc_r+0xa8>
 8012ed0:	4623      	mov	r3, r4
 8012ed2:	6864      	ldr	r4, [r4, #4]
 8012ed4:	e7ae      	b.n	8012e34 <_malloc_r+0x34>
 8012ed6:	463c      	mov	r4, r7
 8012ed8:	687f      	ldr	r7, [r7, #4]
 8012eda:	e7b6      	b.n	8012e4a <_malloc_r+0x4a>
 8012edc:	461a      	mov	r2, r3
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	42a3      	cmp	r3, r4
 8012ee2:	d1fb      	bne.n	8012edc <_malloc_r+0xdc>
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	6053      	str	r3, [r2, #4]
 8012ee8:	e7de      	b.n	8012ea8 <_malloc_r+0xa8>
 8012eea:	230c      	movs	r3, #12
 8012eec:	6033      	str	r3, [r6, #0]
 8012eee:	4630      	mov	r0, r6
 8012ef0:	f000 f80c 	bl	8012f0c <__malloc_unlock>
 8012ef4:	e794      	b.n	8012e20 <_malloc_r+0x20>
 8012ef6:	6005      	str	r5, [r0, #0]
 8012ef8:	e7d6      	b.n	8012ea8 <_malloc_r+0xa8>
 8012efa:	bf00      	nop
 8012efc:	200026e8 	.word	0x200026e8

08012f00 <__malloc_lock>:
 8012f00:	4801      	ldr	r0, [pc, #4]	@ (8012f08 <__malloc_lock+0x8>)
 8012f02:	f7ff b8a4 	b.w	801204e <__retarget_lock_acquire_recursive>
 8012f06:	bf00      	nop
 8012f08:	200026e0 	.word	0x200026e0

08012f0c <__malloc_unlock>:
 8012f0c:	4801      	ldr	r0, [pc, #4]	@ (8012f14 <__malloc_unlock+0x8>)
 8012f0e:	f7ff b89f 	b.w	8012050 <__retarget_lock_release_recursive>
 8012f12:	bf00      	nop
 8012f14:	200026e0 	.word	0x200026e0

08012f18 <_Balloc>:
 8012f18:	b570      	push	{r4, r5, r6, lr}
 8012f1a:	69c6      	ldr	r6, [r0, #28]
 8012f1c:	4604      	mov	r4, r0
 8012f1e:	460d      	mov	r5, r1
 8012f20:	b976      	cbnz	r6, 8012f40 <_Balloc+0x28>
 8012f22:	2010      	movs	r0, #16
 8012f24:	f7ff ff42 	bl	8012dac <malloc>
 8012f28:	4602      	mov	r2, r0
 8012f2a:	61e0      	str	r0, [r4, #28]
 8012f2c:	b920      	cbnz	r0, 8012f38 <_Balloc+0x20>
 8012f2e:	4b18      	ldr	r3, [pc, #96]	@ (8012f90 <_Balloc+0x78>)
 8012f30:	4818      	ldr	r0, [pc, #96]	@ (8012f94 <_Balloc+0x7c>)
 8012f32:	216b      	movs	r1, #107	@ 0x6b
 8012f34:	f002 f8ec 	bl	8015110 <__assert_func>
 8012f38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012f3c:	6006      	str	r6, [r0, #0]
 8012f3e:	60c6      	str	r6, [r0, #12]
 8012f40:	69e6      	ldr	r6, [r4, #28]
 8012f42:	68f3      	ldr	r3, [r6, #12]
 8012f44:	b183      	cbz	r3, 8012f68 <_Balloc+0x50>
 8012f46:	69e3      	ldr	r3, [r4, #28]
 8012f48:	68db      	ldr	r3, [r3, #12]
 8012f4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012f4e:	b9b8      	cbnz	r0, 8012f80 <_Balloc+0x68>
 8012f50:	2101      	movs	r1, #1
 8012f52:	fa01 f605 	lsl.w	r6, r1, r5
 8012f56:	1d72      	adds	r2, r6, #5
 8012f58:	0092      	lsls	r2, r2, #2
 8012f5a:	4620      	mov	r0, r4
 8012f5c:	f002 f8f6 	bl	801514c <_calloc_r>
 8012f60:	b160      	cbz	r0, 8012f7c <_Balloc+0x64>
 8012f62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012f66:	e00e      	b.n	8012f86 <_Balloc+0x6e>
 8012f68:	2221      	movs	r2, #33	@ 0x21
 8012f6a:	2104      	movs	r1, #4
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	f002 f8ed 	bl	801514c <_calloc_r>
 8012f72:	69e3      	ldr	r3, [r4, #28]
 8012f74:	60f0      	str	r0, [r6, #12]
 8012f76:	68db      	ldr	r3, [r3, #12]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d1e4      	bne.n	8012f46 <_Balloc+0x2e>
 8012f7c:	2000      	movs	r0, #0
 8012f7e:	bd70      	pop	{r4, r5, r6, pc}
 8012f80:	6802      	ldr	r2, [r0, #0]
 8012f82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012f86:	2300      	movs	r3, #0
 8012f88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012f8c:	e7f7      	b.n	8012f7e <_Balloc+0x66>
 8012f8e:	bf00      	nop
 8012f90:	080171ec 	.word	0x080171ec
 8012f94:	0801726c 	.word	0x0801726c

08012f98 <_Bfree>:
 8012f98:	b570      	push	{r4, r5, r6, lr}
 8012f9a:	69c6      	ldr	r6, [r0, #28]
 8012f9c:	4605      	mov	r5, r0
 8012f9e:	460c      	mov	r4, r1
 8012fa0:	b976      	cbnz	r6, 8012fc0 <_Bfree+0x28>
 8012fa2:	2010      	movs	r0, #16
 8012fa4:	f7ff ff02 	bl	8012dac <malloc>
 8012fa8:	4602      	mov	r2, r0
 8012faa:	61e8      	str	r0, [r5, #28]
 8012fac:	b920      	cbnz	r0, 8012fb8 <_Bfree+0x20>
 8012fae:	4b09      	ldr	r3, [pc, #36]	@ (8012fd4 <_Bfree+0x3c>)
 8012fb0:	4809      	ldr	r0, [pc, #36]	@ (8012fd8 <_Bfree+0x40>)
 8012fb2:	218f      	movs	r1, #143	@ 0x8f
 8012fb4:	f002 f8ac 	bl	8015110 <__assert_func>
 8012fb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012fbc:	6006      	str	r6, [r0, #0]
 8012fbe:	60c6      	str	r6, [r0, #12]
 8012fc0:	b13c      	cbz	r4, 8012fd2 <_Bfree+0x3a>
 8012fc2:	69eb      	ldr	r3, [r5, #28]
 8012fc4:	6862      	ldr	r2, [r4, #4]
 8012fc6:	68db      	ldr	r3, [r3, #12]
 8012fc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012fcc:	6021      	str	r1, [r4, #0]
 8012fce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012fd2:	bd70      	pop	{r4, r5, r6, pc}
 8012fd4:	080171ec 	.word	0x080171ec
 8012fd8:	0801726c 	.word	0x0801726c

08012fdc <__multadd>:
 8012fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe0:	690d      	ldr	r5, [r1, #16]
 8012fe2:	4607      	mov	r7, r0
 8012fe4:	460c      	mov	r4, r1
 8012fe6:	461e      	mov	r6, r3
 8012fe8:	f101 0c14 	add.w	ip, r1, #20
 8012fec:	2000      	movs	r0, #0
 8012fee:	f8dc 3000 	ldr.w	r3, [ip]
 8012ff2:	b299      	uxth	r1, r3
 8012ff4:	fb02 6101 	mla	r1, r2, r1, r6
 8012ff8:	0c1e      	lsrs	r6, r3, #16
 8012ffa:	0c0b      	lsrs	r3, r1, #16
 8012ffc:	fb02 3306 	mla	r3, r2, r6, r3
 8013000:	b289      	uxth	r1, r1
 8013002:	3001      	adds	r0, #1
 8013004:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013008:	4285      	cmp	r5, r0
 801300a:	f84c 1b04 	str.w	r1, [ip], #4
 801300e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013012:	dcec      	bgt.n	8012fee <__multadd+0x12>
 8013014:	b30e      	cbz	r6, 801305a <__multadd+0x7e>
 8013016:	68a3      	ldr	r3, [r4, #8]
 8013018:	42ab      	cmp	r3, r5
 801301a:	dc19      	bgt.n	8013050 <__multadd+0x74>
 801301c:	6861      	ldr	r1, [r4, #4]
 801301e:	4638      	mov	r0, r7
 8013020:	3101      	adds	r1, #1
 8013022:	f7ff ff79 	bl	8012f18 <_Balloc>
 8013026:	4680      	mov	r8, r0
 8013028:	b928      	cbnz	r0, 8013036 <__multadd+0x5a>
 801302a:	4602      	mov	r2, r0
 801302c:	4b0c      	ldr	r3, [pc, #48]	@ (8013060 <__multadd+0x84>)
 801302e:	480d      	ldr	r0, [pc, #52]	@ (8013064 <__multadd+0x88>)
 8013030:	21ba      	movs	r1, #186	@ 0xba
 8013032:	f002 f86d 	bl	8015110 <__assert_func>
 8013036:	6922      	ldr	r2, [r4, #16]
 8013038:	3202      	adds	r2, #2
 801303a:	f104 010c 	add.w	r1, r4, #12
 801303e:	0092      	lsls	r2, r2, #2
 8013040:	300c      	adds	r0, #12
 8013042:	f7ff f806 	bl	8012052 <memcpy>
 8013046:	4621      	mov	r1, r4
 8013048:	4638      	mov	r0, r7
 801304a:	f7ff ffa5 	bl	8012f98 <_Bfree>
 801304e:	4644      	mov	r4, r8
 8013050:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013054:	3501      	adds	r5, #1
 8013056:	615e      	str	r6, [r3, #20]
 8013058:	6125      	str	r5, [r4, #16]
 801305a:	4620      	mov	r0, r4
 801305c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013060:	0801725b 	.word	0x0801725b
 8013064:	0801726c 	.word	0x0801726c

08013068 <__s2b>:
 8013068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801306c:	460c      	mov	r4, r1
 801306e:	4615      	mov	r5, r2
 8013070:	461f      	mov	r7, r3
 8013072:	2209      	movs	r2, #9
 8013074:	3308      	adds	r3, #8
 8013076:	4606      	mov	r6, r0
 8013078:	fb93 f3f2 	sdiv	r3, r3, r2
 801307c:	2100      	movs	r1, #0
 801307e:	2201      	movs	r2, #1
 8013080:	429a      	cmp	r2, r3
 8013082:	db09      	blt.n	8013098 <__s2b+0x30>
 8013084:	4630      	mov	r0, r6
 8013086:	f7ff ff47 	bl	8012f18 <_Balloc>
 801308a:	b940      	cbnz	r0, 801309e <__s2b+0x36>
 801308c:	4602      	mov	r2, r0
 801308e:	4b19      	ldr	r3, [pc, #100]	@ (80130f4 <__s2b+0x8c>)
 8013090:	4819      	ldr	r0, [pc, #100]	@ (80130f8 <__s2b+0x90>)
 8013092:	21d3      	movs	r1, #211	@ 0xd3
 8013094:	f002 f83c 	bl	8015110 <__assert_func>
 8013098:	0052      	lsls	r2, r2, #1
 801309a:	3101      	adds	r1, #1
 801309c:	e7f0      	b.n	8013080 <__s2b+0x18>
 801309e:	9b08      	ldr	r3, [sp, #32]
 80130a0:	6143      	str	r3, [r0, #20]
 80130a2:	2d09      	cmp	r5, #9
 80130a4:	f04f 0301 	mov.w	r3, #1
 80130a8:	6103      	str	r3, [r0, #16]
 80130aa:	dd16      	ble.n	80130da <__s2b+0x72>
 80130ac:	f104 0909 	add.w	r9, r4, #9
 80130b0:	46c8      	mov	r8, r9
 80130b2:	442c      	add	r4, r5
 80130b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80130b8:	4601      	mov	r1, r0
 80130ba:	3b30      	subs	r3, #48	@ 0x30
 80130bc:	220a      	movs	r2, #10
 80130be:	4630      	mov	r0, r6
 80130c0:	f7ff ff8c 	bl	8012fdc <__multadd>
 80130c4:	45a0      	cmp	r8, r4
 80130c6:	d1f5      	bne.n	80130b4 <__s2b+0x4c>
 80130c8:	f1a5 0408 	sub.w	r4, r5, #8
 80130cc:	444c      	add	r4, r9
 80130ce:	1b2d      	subs	r5, r5, r4
 80130d0:	1963      	adds	r3, r4, r5
 80130d2:	42bb      	cmp	r3, r7
 80130d4:	db04      	blt.n	80130e0 <__s2b+0x78>
 80130d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130da:	340a      	adds	r4, #10
 80130dc:	2509      	movs	r5, #9
 80130de:	e7f6      	b.n	80130ce <__s2b+0x66>
 80130e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80130e4:	4601      	mov	r1, r0
 80130e6:	3b30      	subs	r3, #48	@ 0x30
 80130e8:	220a      	movs	r2, #10
 80130ea:	4630      	mov	r0, r6
 80130ec:	f7ff ff76 	bl	8012fdc <__multadd>
 80130f0:	e7ee      	b.n	80130d0 <__s2b+0x68>
 80130f2:	bf00      	nop
 80130f4:	0801725b 	.word	0x0801725b
 80130f8:	0801726c 	.word	0x0801726c

080130fc <__hi0bits>:
 80130fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013100:	4603      	mov	r3, r0
 8013102:	bf36      	itet	cc
 8013104:	0403      	lslcc	r3, r0, #16
 8013106:	2000      	movcs	r0, #0
 8013108:	2010      	movcc	r0, #16
 801310a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801310e:	bf3c      	itt	cc
 8013110:	021b      	lslcc	r3, r3, #8
 8013112:	3008      	addcc	r0, #8
 8013114:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013118:	bf3c      	itt	cc
 801311a:	011b      	lslcc	r3, r3, #4
 801311c:	3004      	addcc	r0, #4
 801311e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013122:	bf3c      	itt	cc
 8013124:	009b      	lslcc	r3, r3, #2
 8013126:	3002      	addcc	r0, #2
 8013128:	2b00      	cmp	r3, #0
 801312a:	db05      	blt.n	8013138 <__hi0bits+0x3c>
 801312c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013130:	f100 0001 	add.w	r0, r0, #1
 8013134:	bf08      	it	eq
 8013136:	2020      	moveq	r0, #32
 8013138:	4770      	bx	lr

0801313a <__lo0bits>:
 801313a:	6803      	ldr	r3, [r0, #0]
 801313c:	4602      	mov	r2, r0
 801313e:	f013 0007 	ands.w	r0, r3, #7
 8013142:	d00b      	beq.n	801315c <__lo0bits+0x22>
 8013144:	07d9      	lsls	r1, r3, #31
 8013146:	d421      	bmi.n	801318c <__lo0bits+0x52>
 8013148:	0798      	lsls	r0, r3, #30
 801314a:	bf49      	itett	mi
 801314c:	085b      	lsrmi	r3, r3, #1
 801314e:	089b      	lsrpl	r3, r3, #2
 8013150:	2001      	movmi	r0, #1
 8013152:	6013      	strmi	r3, [r2, #0]
 8013154:	bf5c      	itt	pl
 8013156:	6013      	strpl	r3, [r2, #0]
 8013158:	2002      	movpl	r0, #2
 801315a:	4770      	bx	lr
 801315c:	b299      	uxth	r1, r3
 801315e:	b909      	cbnz	r1, 8013164 <__lo0bits+0x2a>
 8013160:	0c1b      	lsrs	r3, r3, #16
 8013162:	2010      	movs	r0, #16
 8013164:	b2d9      	uxtb	r1, r3
 8013166:	b909      	cbnz	r1, 801316c <__lo0bits+0x32>
 8013168:	3008      	adds	r0, #8
 801316a:	0a1b      	lsrs	r3, r3, #8
 801316c:	0719      	lsls	r1, r3, #28
 801316e:	bf04      	itt	eq
 8013170:	091b      	lsreq	r3, r3, #4
 8013172:	3004      	addeq	r0, #4
 8013174:	0799      	lsls	r1, r3, #30
 8013176:	bf04      	itt	eq
 8013178:	089b      	lsreq	r3, r3, #2
 801317a:	3002      	addeq	r0, #2
 801317c:	07d9      	lsls	r1, r3, #31
 801317e:	d403      	bmi.n	8013188 <__lo0bits+0x4e>
 8013180:	085b      	lsrs	r3, r3, #1
 8013182:	f100 0001 	add.w	r0, r0, #1
 8013186:	d003      	beq.n	8013190 <__lo0bits+0x56>
 8013188:	6013      	str	r3, [r2, #0]
 801318a:	4770      	bx	lr
 801318c:	2000      	movs	r0, #0
 801318e:	4770      	bx	lr
 8013190:	2020      	movs	r0, #32
 8013192:	4770      	bx	lr

08013194 <__i2b>:
 8013194:	b510      	push	{r4, lr}
 8013196:	460c      	mov	r4, r1
 8013198:	2101      	movs	r1, #1
 801319a:	f7ff febd 	bl	8012f18 <_Balloc>
 801319e:	4602      	mov	r2, r0
 80131a0:	b928      	cbnz	r0, 80131ae <__i2b+0x1a>
 80131a2:	4b05      	ldr	r3, [pc, #20]	@ (80131b8 <__i2b+0x24>)
 80131a4:	4805      	ldr	r0, [pc, #20]	@ (80131bc <__i2b+0x28>)
 80131a6:	f240 1145 	movw	r1, #325	@ 0x145
 80131aa:	f001 ffb1 	bl	8015110 <__assert_func>
 80131ae:	2301      	movs	r3, #1
 80131b0:	6144      	str	r4, [r0, #20]
 80131b2:	6103      	str	r3, [r0, #16]
 80131b4:	bd10      	pop	{r4, pc}
 80131b6:	bf00      	nop
 80131b8:	0801725b 	.word	0x0801725b
 80131bc:	0801726c 	.word	0x0801726c

080131c0 <__multiply>:
 80131c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c4:	4614      	mov	r4, r2
 80131c6:	690a      	ldr	r2, [r1, #16]
 80131c8:	6923      	ldr	r3, [r4, #16]
 80131ca:	429a      	cmp	r2, r3
 80131cc:	bfa8      	it	ge
 80131ce:	4623      	movge	r3, r4
 80131d0:	460f      	mov	r7, r1
 80131d2:	bfa4      	itt	ge
 80131d4:	460c      	movge	r4, r1
 80131d6:	461f      	movge	r7, r3
 80131d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80131dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80131e0:	68a3      	ldr	r3, [r4, #8]
 80131e2:	6861      	ldr	r1, [r4, #4]
 80131e4:	eb0a 0609 	add.w	r6, sl, r9
 80131e8:	42b3      	cmp	r3, r6
 80131ea:	b085      	sub	sp, #20
 80131ec:	bfb8      	it	lt
 80131ee:	3101      	addlt	r1, #1
 80131f0:	f7ff fe92 	bl	8012f18 <_Balloc>
 80131f4:	b930      	cbnz	r0, 8013204 <__multiply+0x44>
 80131f6:	4602      	mov	r2, r0
 80131f8:	4b44      	ldr	r3, [pc, #272]	@ (801330c <__multiply+0x14c>)
 80131fa:	4845      	ldr	r0, [pc, #276]	@ (8013310 <__multiply+0x150>)
 80131fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013200:	f001 ff86 	bl	8015110 <__assert_func>
 8013204:	f100 0514 	add.w	r5, r0, #20
 8013208:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801320c:	462b      	mov	r3, r5
 801320e:	2200      	movs	r2, #0
 8013210:	4543      	cmp	r3, r8
 8013212:	d321      	bcc.n	8013258 <__multiply+0x98>
 8013214:	f107 0114 	add.w	r1, r7, #20
 8013218:	f104 0214 	add.w	r2, r4, #20
 801321c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013220:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013224:	9302      	str	r3, [sp, #8]
 8013226:	1b13      	subs	r3, r2, r4
 8013228:	3b15      	subs	r3, #21
 801322a:	f023 0303 	bic.w	r3, r3, #3
 801322e:	3304      	adds	r3, #4
 8013230:	f104 0715 	add.w	r7, r4, #21
 8013234:	42ba      	cmp	r2, r7
 8013236:	bf38      	it	cc
 8013238:	2304      	movcc	r3, #4
 801323a:	9301      	str	r3, [sp, #4]
 801323c:	9b02      	ldr	r3, [sp, #8]
 801323e:	9103      	str	r1, [sp, #12]
 8013240:	428b      	cmp	r3, r1
 8013242:	d80c      	bhi.n	801325e <__multiply+0x9e>
 8013244:	2e00      	cmp	r6, #0
 8013246:	dd03      	ble.n	8013250 <__multiply+0x90>
 8013248:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801324c:	2b00      	cmp	r3, #0
 801324e:	d05b      	beq.n	8013308 <__multiply+0x148>
 8013250:	6106      	str	r6, [r0, #16]
 8013252:	b005      	add	sp, #20
 8013254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013258:	f843 2b04 	str.w	r2, [r3], #4
 801325c:	e7d8      	b.n	8013210 <__multiply+0x50>
 801325e:	f8b1 a000 	ldrh.w	sl, [r1]
 8013262:	f1ba 0f00 	cmp.w	sl, #0
 8013266:	d024      	beq.n	80132b2 <__multiply+0xf2>
 8013268:	f104 0e14 	add.w	lr, r4, #20
 801326c:	46a9      	mov	r9, r5
 801326e:	f04f 0c00 	mov.w	ip, #0
 8013272:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013276:	f8d9 3000 	ldr.w	r3, [r9]
 801327a:	fa1f fb87 	uxth.w	fp, r7
 801327e:	b29b      	uxth	r3, r3
 8013280:	fb0a 330b 	mla	r3, sl, fp, r3
 8013284:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013288:	f8d9 7000 	ldr.w	r7, [r9]
 801328c:	4463      	add	r3, ip
 801328e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013292:	fb0a c70b 	mla	r7, sl, fp, ip
 8013296:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801329a:	b29b      	uxth	r3, r3
 801329c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80132a0:	4572      	cmp	r2, lr
 80132a2:	f849 3b04 	str.w	r3, [r9], #4
 80132a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80132aa:	d8e2      	bhi.n	8013272 <__multiply+0xb2>
 80132ac:	9b01      	ldr	r3, [sp, #4]
 80132ae:	f845 c003 	str.w	ip, [r5, r3]
 80132b2:	9b03      	ldr	r3, [sp, #12]
 80132b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80132b8:	3104      	adds	r1, #4
 80132ba:	f1b9 0f00 	cmp.w	r9, #0
 80132be:	d021      	beq.n	8013304 <__multiply+0x144>
 80132c0:	682b      	ldr	r3, [r5, #0]
 80132c2:	f104 0c14 	add.w	ip, r4, #20
 80132c6:	46ae      	mov	lr, r5
 80132c8:	f04f 0a00 	mov.w	sl, #0
 80132cc:	f8bc b000 	ldrh.w	fp, [ip]
 80132d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80132d4:	fb09 770b 	mla	r7, r9, fp, r7
 80132d8:	4457      	add	r7, sl
 80132da:	b29b      	uxth	r3, r3
 80132dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80132e0:	f84e 3b04 	str.w	r3, [lr], #4
 80132e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80132e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80132ec:	f8be 3000 	ldrh.w	r3, [lr]
 80132f0:	fb09 330a 	mla	r3, r9, sl, r3
 80132f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80132f8:	4562      	cmp	r2, ip
 80132fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80132fe:	d8e5      	bhi.n	80132cc <__multiply+0x10c>
 8013300:	9f01      	ldr	r7, [sp, #4]
 8013302:	51eb      	str	r3, [r5, r7]
 8013304:	3504      	adds	r5, #4
 8013306:	e799      	b.n	801323c <__multiply+0x7c>
 8013308:	3e01      	subs	r6, #1
 801330a:	e79b      	b.n	8013244 <__multiply+0x84>
 801330c:	0801725b 	.word	0x0801725b
 8013310:	0801726c 	.word	0x0801726c

08013314 <__pow5mult>:
 8013314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013318:	4615      	mov	r5, r2
 801331a:	f012 0203 	ands.w	r2, r2, #3
 801331e:	4607      	mov	r7, r0
 8013320:	460e      	mov	r6, r1
 8013322:	d007      	beq.n	8013334 <__pow5mult+0x20>
 8013324:	4c25      	ldr	r4, [pc, #148]	@ (80133bc <__pow5mult+0xa8>)
 8013326:	3a01      	subs	r2, #1
 8013328:	2300      	movs	r3, #0
 801332a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801332e:	f7ff fe55 	bl	8012fdc <__multadd>
 8013332:	4606      	mov	r6, r0
 8013334:	10ad      	asrs	r5, r5, #2
 8013336:	d03d      	beq.n	80133b4 <__pow5mult+0xa0>
 8013338:	69fc      	ldr	r4, [r7, #28]
 801333a:	b97c      	cbnz	r4, 801335c <__pow5mult+0x48>
 801333c:	2010      	movs	r0, #16
 801333e:	f7ff fd35 	bl	8012dac <malloc>
 8013342:	4602      	mov	r2, r0
 8013344:	61f8      	str	r0, [r7, #28]
 8013346:	b928      	cbnz	r0, 8013354 <__pow5mult+0x40>
 8013348:	4b1d      	ldr	r3, [pc, #116]	@ (80133c0 <__pow5mult+0xac>)
 801334a:	481e      	ldr	r0, [pc, #120]	@ (80133c4 <__pow5mult+0xb0>)
 801334c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013350:	f001 fede 	bl	8015110 <__assert_func>
 8013354:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013358:	6004      	str	r4, [r0, #0]
 801335a:	60c4      	str	r4, [r0, #12]
 801335c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013360:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013364:	b94c      	cbnz	r4, 801337a <__pow5mult+0x66>
 8013366:	f240 2171 	movw	r1, #625	@ 0x271
 801336a:	4638      	mov	r0, r7
 801336c:	f7ff ff12 	bl	8013194 <__i2b>
 8013370:	2300      	movs	r3, #0
 8013372:	f8c8 0008 	str.w	r0, [r8, #8]
 8013376:	4604      	mov	r4, r0
 8013378:	6003      	str	r3, [r0, #0]
 801337a:	f04f 0900 	mov.w	r9, #0
 801337e:	07eb      	lsls	r3, r5, #31
 8013380:	d50a      	bpl.n	8013398 <__pow5mult+0x84>
 8013382:	4631      	mov	r1, r6
 8013384:	4622      	mov	r2, r4
 8013386:	4638      	mov	r0, r7
 8013388:	f7ff ff1a 	bl	80131c0 <__multiply>
 801338c:	4631      	mov	r1, r6
 801338e:	4680      	mov	r8, r0
 8013390:	4638      	mov	r0, r7
 8013392:	f7ff fe01 	bl	8012f98 <_Bfree>
 8013396:	4646      	mov	r6, r8
 8013398:	106d      	asrs	r5, r5, #1
 801339a:	d00b      	beq.n	80133b4 <__pow5mult+0xa0>
 801339c:	6820      	ldr	r0, [r4, #0]
 801339e:	b938      	cbnz	r0, 80133b0 <__pow5mult+0x9c>
 80133a0:	4622      	mov	r2, r4
 80133a2:	4621      	mov	r1, r4
 80133a4:	4638      	mov	r0, r7
 80133a6:	f7ff ff0b 	bl	80131c0 <__multiply>
 80133aa:	6020      	str	r0, [r4, #0]
 80133ac:	f8c0 9000 	str.w	r9, [r0]
 80133b0:	4604      	mov	r4, r0
 80133b2:	e7e4      	b.n	801337e <__pow5mult+0x6a>
 80133b4:	4630      	mov	r0, r6
 80133b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80133ba:	bf00      	nop
 80133bc:	080172c8 	.word	0x080172c8
 80133c0:	080171ec 	.word	0x080171ec
 80133c4:	0801726c 	.word	0x0801726c

080133c8 <__lshift>:
 80133c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133cc:	460c      	mov	r4, r1
 80133ce:	6849      	ldr	r1, [r1, #4]
 80133d0:	6923      	ldr	r3, [r4, #16]
 80133d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80133d6:	68a3      	ldr	r3, [r4, #8]
 80133d8:	4607      	mov	r7, r0
 80133da:	4691      	mov	r9, r2
 80133dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80133e0:	f108 0601 	add.w	r6, r8, #1
 80133e4:	42b3      	cmp	r3, r6
 80133e6:	db0b      	blt.n	8013400 <__lshift+0x38>
 80133e8:	4638      	mov	r0, r7
 80133ea:	f7ff fd95 	bl	8012f18 <_Balloc>
 80133ee:	4605      	mov	r5, r0
 80133f0:	b948      	cbnz	r0, 8013406 <__lshift+0x3e>
 80133f2:	4602      	mov	r2, r0
 80133f4:	4b28      	ldr	r3, [pc, #160]	@ (8013498 <__lshift+0xd0>)
 80133f6:	4829      	ldr	r0, [pc, #164]	@ (801349c <__lshift+0xd4>)
 80133f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80133fc:	f001 fe88 	bl	8015110 <__assert_func>
 8013400:	3101      	adds	r1, #1
 8013402:	005b      	lsls	r3, r3, #1
 8013404:	e7ee      	b.n	80133e4 <__lshift+0x1c>
 8013406:	2300      	movs	r3, #0
 8013408:	f100 0114 	add.w	r1, r0, #20
 801340c:	f100 0210 	add.w	r2, r0, #16
 8013410:	4618      	mov	r0, r3
 8013412:	4553      	cmp	r3, sl
 8013414:	db33      	blt.n	801347e <__lshift+0xb6>
 8013416:	6920      	ldr	r0, [r4, #16]
 8013418:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801341c:	f104 0314 	add.w	r3, r4, #20
 8013420:	f019 091f 	ands.w	r9, r9, #31
 8013424:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013428:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801342c:	d02b      	beq.n	8013486 <__lshift+0xbe>
 801342e:	f1c9 0e20 	rsb	lr, r9, #32
 8013432:	468a      	mov	sl, r1
 8013434:	2200      	movs	r2, #0
 8013436:	6818      	ldr	r0, [r3, #0]
 8013438:	fa00 f009 	lsl.w	r0, r0, r9
 801343c:	4310      	orrs	r0, r2
 801343e:	f84a 0b04 	str.w	r0, [sl], #4
 8013442:	f853 2b04 	ldr.w	r2, [r3], #4
 8013446:	459c      	cmp	ip, r3
 8013448:	fa22 f20e 	lsr.w	r2, r2, lr
 801344c:	d8f3      	bhi.n	8013436 <__lshift+0x6e>
 801344e:	ebac 0304 	sub.w	r3, ip, r4
 8013452:	3b15      	subs	r3, #21
 8013454:	f023 0303 	bic.w	r3, r3, #3
 8013458:	3304      	adds	r3, #4
 801345a:	f104 0015 	add.w	r0, r4, #21
 801345e:	4584      	cmp	ip, r0
 8013460:	bf38      	it	cc
 8013462:	2304      	movcc	r3, #4
 8013464:	50ca      	str	r2, [r1, r3]
 8013466:	b10a      	cbz	r2, 801346c <__lshift+0xa4>
 8013468:	f108 0602 	add.w	r6, r8, #2
 801346c:	3e01      	subs	r6, #1
 801346e:	4638      	mov	r0, r7
 8013470:	612e      	str	r6, [r5, #16]
 8013472:	4621      	mov	r1, r4
 8013474:	f7ff fd90 	bl	8012f98 <_Bfree>
 8013478:	4628      	mov	r0, r5
 801347a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801347e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013482:	3301      	adds	r3, #1
 8013484:	e7c5      	b.n	8013412 <__lshift+0x4a>
 8013486:	3904      	subs	r1, #4
 8013488:	f853 2b04 	ldr.w	r2, [r3], #4
 801348c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013490:	459c      	cmp	ip, r3
 8013492:	d8f9      	bhi.n	8013488 <__lshift+0xc0>
 8013494:	e7ea      	b.n	801346c <__lshift+0xa4>
 8013496:	bf00      	nop
 8013498:	0801725b 	.word	0x0801725b
 801349c:	0801726c 	.word	0x0801726c

080134a0 <__mcmp>:
 80134a0:	690a      	ldr	r2, [r1, #16]
 80134a2:	4603      	mov	r3, r0
 80134a4:	6900      	ldr	r0, [r0, #16]
 80134a6:	1a80      	subs	r0, r0, r2
 80134a8:	b530      	push	{r4, r5, lr}
 80134aa:	d10e      	bne.n	80134ca <__mcmp+0x2a>
 80134ac:	3314      	adds	r3, #20
 80134ae:	3114      	adds	r1, #20
 80134b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80134b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80134b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80134bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80134c0:	4295      	cmp	r5, r2
 80134c2:	d003      	beq.n	80134cc <__mcmp+0x2c>
 80134c4:	d205      	bcs.n	80134d2 <__mcmp+0x32>
 80134c6:	f04f 30ff 	mov.w	r0, #4294967295
 80134ca:	bd30      	pop	{r4, r5, pc}
 80134cc:	42a3      	cmp	r3, r4
 80134ce:	d3f3      	bcc.n	80134b8 <__mcmp+0x18>
 80134d0:	e7fb      	b.n	80134ca <__mcmp+0x2a>
 80134d2:	2001      	movs	r0, #1
 80134d4:	e7f9      	b.n	80134ca <__mcmp+0x2a>
	...

080134d8 <__mdiff>:
 80134d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134dc:	4689      	mov	r9, r1
 80134de:	4606      	mov	r6, r0
 80134e0:	4611      	mov	r1, r2
 80134e2:	4648      	mov	r0, r9
 80134e4:	4614      	mov	r4, r2
 80134e6:	f7ff ffdb 	bl	80134a0 <__mcmp>
 80134ea:	1e05      	subs	r5, r0, #0
 80134ec:	d112      	bne.n	8013514 <__mdiff+0x3c>
 80134ee:	4629      	mov	r1, r5
 80134f0:	4630      	mov	r0, r6
 80134f2:	f7ff fd11 	bl	8012f18 <_Balloc>
 80134f6:	4602      	mov	r2, r0
 80134f8:	b928      	cbnz	r0, 8013506 <__mdiff+0x2e>
 80134fa:	4b3f      	ldr	r3, [pc, #252]	@ (80135f8 <__mdiff+0x120>)
 80134fc:	f240 2137 	movw	r1, #567	@ 0x237
 8013500:	483e      	ldr	r0, [pc, #248]	@ (80135fc <__mdiff+0x124>)
 8013502:	f001 fe05 	bl	8015110 <__assert_func>
 8013506:	2301      	movs	r3, #1
 8013508:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801350c:	4610      	mov	r0, r2
 801350e:	b003      	add	sp, #12
 8013510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013514:	bfbc      	itt	lt
 8013516:	464b      	movlt	r3, r9
 8013518:	46a1      	movlt	r9, r4
 801351a:	4630      	mov	r0, r6
 801351c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013520:	bfba      	itte	lt
 8013522:	461c      	movlt	r4, r3
 8013524:	2501      	movlt	r5, #1
 8013526:	2500      	movge	r5, #0
 8013528:	f7ff fcf6 	bl	8012f18 <_Balloc>
 801352c:	4602      	mov	r2, r0
 801352e:	b918      	cbnz	r0, 8013538 <__mdiff+0x60>
 8013530:	4b31      	ldr	r3, [pc, #196]	@ (80135f8 <__mdiff+0x120>)
 8013532:	f240 2145 	movw	r1, #581	@ 0x245
 8013536:	e7e3      	b.n	8013500 <__mdiff+0x28>
 8013538:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801353c:	6926      	ldr	r6, [r4, #16]
 801353e:	60c5      	str	r5, [r0, #12]
 8013540:	f109 0310 	add.w	r3, r9, #16
 8013544:	f109 0514 	add.w	r5, r9, #20
 8013548:	f104 0e14 	add.w	lr, r4, #20
 801354c:	f100 0b14 	add.w	fp, r0, #20
 8013550:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013554:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013558:	9301      	str	r3, [sp, #4]
 801355a:	46d9      	mov	r9, fp
 801355c:	f04f 0c00 	mov.w	ip, #0
 8013560:	9b01      	ldr	r3, [sp, #4]
 8013562:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013566:	f853 af04 	ldr.w	sl, [r3, #4]!
 801356a:	9301      	str	r3, [sp, #4]
 801356c:	fa1f f38a 	uxth.w	r3, sl
 8013570:	4619      	mov	r1, r3
 8013572:	b283      	uxth	r3, r0
 8013574:	1acb      	subs	r3, r1, r3
 8013576:	0c00      	lsrs	r0, r0, #16
 8013578:	4463      	add	r3, ip
 801357a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801357e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013582:	b29b      	uxth	r3, r3
 8013584:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013588:	4576      	cmp	r6, lr
 801358a:	f849 3b04 	str.w	r3, [r9], #4
 801358e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013592:	d8e5      	bhi.n	8013560 <__mdiff+0x88>
 8013594:	1b33      	subs	r3, r6, r4
 8013596:	3b15      	subs	r3, #21
 8013598:	f023 0303 	bic.w	r3, r3, #3
 801359c:	3415      	adds	r4, #21
 801359e:	3304      	adds	r3, #4
 80135a0:	42a6      	cmp	r6, r4
 80135a2:	bf38      	it	cc
 80135a4:	2304      	movcc	r3, #4
 80135a6:	441d      	add	r5, r3
 80135a8:	445b      	add	r3, fp
 80135aa:	461e      	mov	r6, r3
 80135ac:	462c      	mov	r4, r5
 80135ae:	4544      	cmp	r4, r8
 80135b0:	d30e      	bcc.n	80135d0 <__mdiff+0xf8>
 80135b2:	f108 0103 	add.w	r1, r8, #3
 80135b6:	1b49      	subs	r1, r1, r5
 80135b8:	f021 0103 	bic.w	r1, r1, #3
 80135bc:	3d03      	subs	r5, #3
 80135be:	45a8      	cmp	r8, r5
 80135c0:	bf38      	it	cc
 80135c2:	2100      	movcc	r1, #0
 80135c4:	440b      	add	r3, r1
 80135c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80135ca:	b191      	cbz	r1, 80135f2 <__mdiff+0x11a>
 80135cc:	6117      	str	r7, [r2, #16]
 80135ce:	e79d      	b.n	801350c <__mdiff+0x34>
 80135d0:	f854 1b04 	ldr.w	r1, [r4], #4
 80135d4:	46e6      	mov	lr, ip
 80135d6:	0c08      	lsrs	r0, r1, #16
 80135d8:	fa1c fc81 	uxtah	ip, ip, r1
 80135dc:	4471      	add	r1, lr
 80135de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80135e2:	b289      	uxth	r1, r1
 80135e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80135e8:	f846 1b04 	str.w	r1, [r6], #4
 80135ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80135f0:	e7dd      	b.n	80135ae <__mdiff+0xd6>
 80135f2:	3f01      	subs	r7, #1
 80135f4:	e7e7      	b.n	80135c6 <__mdiff+0xee>
 80135f6:	bf00      	nop
 80135f8:	0801725b 	.word	0x0801725b
 80135fc:	0801726c 	.word	0x0801726c

08013600 <__ulp>:
 8013600:	b082      	sub	sp, #8
 8013602:	ed8d 0b00 	vstr	d0, [sp]
 8013606:	9a01      	ldr	r2, [sp, #4]
 8013608:	4b0f      	ldr	r3, [pc, #60]	@ (8013648 <__ulp+0x48>)
 801360a:	4013      	ands	r3, r2
 801360c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8013610:	2b00      	cmp	r3, #0
 8013612:	dc08      	bgt.n	8013626 <__ulp+0x26>
 8013614:	425b      	negs	r3, r3
 8013616:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801361a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801361e:	da04      	bge.n	801362a <__ulp+0x2a>
 8013620:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8013624:	4113      	asrs	r3, r2
 8013626:	2200      	movs	r2, #0
 8013628:	e008      	b.n	801363c <__ulp+0x3c>
 801362a:	f1a2 0314 	sub.w	r3, r2, #20
 801362e:	2b1e      	cmp	r3, #30
 8013630:	bfda      	itte	le
 8013632:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8013636:	40da      	lsrle	r2, r3
 8013638:	2201      	movgt	r2, #1
 801363a:	2300      	movs	r3, #0
 801363c:	4619      	mov	r1, r3
 801363e:	4610      	mov	r0, r2
 8013640:	ec41 0b10 	vmov	d0, r0, r1
 8013644:	b002      	add	sp, #8
 8013646:	4770      	bx	lr
 8013648:	7ff00000 	.word	0x7ff00000

0801364c <__b2d>:
 801364c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013650:	6906      	ldr	r6, [r0, #16]
 8013652:	f100 0814 	add.w	r8, r0, #20
 8013656:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801365a:	1f37      	subs	r7, r6, #4
 801365c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013660:	4610      	mov	r0, r2
 8013662:	f7ff fd4b 	bl	80130fc <__hi0bits>
 8013666:	f1c0 0320 	rsb	r3, r0, #32
 801366a:	280a      	cmp	r0, #10
 801366c:	600b      	str	r3, [r1, #0]
 801366e:	491b      	ldr	r1, [pc, #108]	@ (80136dc <__b2d+0x90>)
 8013670:	dc15      	bgt.n	801369e <__b2d+0x52>
 8013672:	f1c0 0c0b 	rsb	ip, r0, #11
 8013676:	fa22 f30c 	lsr.w	r3, r2, ip
 801367a:	45b8      	cmp	r8, r7
 801367c:	ea43 0501 	orr.w	r5, r3, r1
 8013680:	bf34      	ite	cc
 8013682:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8013686:	2300      	movcs	r3, #0
 8013688:	3015      	adds	r0, #21
 801368a:	fa02 f000 	lsl.w	r0, r2, r0
 801368e:	fa23 f30c 	lsr.w	r3, r3, ip
 8013692:	4303      	orrs	r3, r0
 8013694:	461c      	mov	r4, r3
 8013696:	ec45 4b10 	vmov	d0, r4, r5
 801369a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801369e:	45b8      	cmp	r8, r7
 80136a0:	bf3a      	itte	cc
 80136a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80136a6:	f1a6 0708 	subcc.w	r7, r6, #8
 80136aa:	2300      	movcs	r3, #0
 80136ac:	380b      	subs	r0, #11
 80136ae:	d012      	beq.n	80136d6 <__b2d+0x8a>
 80136b0:	f1c0 0120 	rsb	r1, r0, #32
 80136b4:	fa23 f401 	lsr.w	r4, r3, r1
 80136b8:	4082      	lsls	r2, r0
 80136ba:	4322      	orrs	r2, r4
 80136bc:	4547      	cmp	r7, r8
 80136be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80136c2:	bf8c      	ite	hi
 80136c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80136c8:	2200      	movls	r2, #0
 80136ca:	4083      	lsls	r3, r0
 80136cc:	40ca      	lsrs	r2, r1
 80136ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80136d2:	4313      	orrs	r3, r2
 80136d4:	e7de      	b.n	8013694 <__b2d+0x48>
 80136d6:	ea42 0501 	orr.w	r5, r2, r1
 80136da:	e7db      	b.n	8013694 <__b2d+0x48>
 80136dc:	3ff00000 	.word	0x3ff00000

080136e0 <__d2b>:
 80136e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80136e4:	460f      	mov	r7, r1
 80136e6:	2101      	movs	r1, #1
 80136e8:	ec59 8b10 	vmov	r8, r9, d0
 80136ec:	4616      	mov	r6, r2
 80136ee:	f7ff fc13 	bl	8012f18 <_Balloc>
 80136f2:	4604      	mov	r4, r0
 80136f4:	b930      	cbnz	r0, 8013704 <__d2b+0x24>
 80136f6:	4602      	mov	r2, r0
 80136f8:	4b23      	ldr	r3, [pc, #140]	@ (8013788 <__d2b+0xa8>)
 80136fa:	4824      	ldr	r0, [pc, #144]	@ (801378c <__d2b+0xac>)
 80136fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8013700:	f001 fd06 	bl	8015110 <__assert_func>
 8013704:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013708:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801370c:	b10d      	cbz	r5, 8013712 <__d2b+0x32>
 801370e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013712:	9301      	str	r3, [sp, #4]
 8013714:	f1b8 0300 	subs.w	r3, r8, #0
 8013718:	d023      	beq.n	8013762 <__d2b+0x82>
 801371a:	4668      	mov	r0, sp
 801371c:	9300      	str	r3, [sp, #0]
 801371e:	f7ff fd0c 	bl	801313a <__lo0bits>
 8013722:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013726:	b1d0      	cbz	r0, 801375e <__d2b+0x7e>
 8013728:	f1c0 0320 	rsb	r3, r0, #32
 801372c:	fa02 f303 	lsl.w	r3, r2, r3
 8013730:	430b      	orrs	r3, r1
 8013732:	40c2      	lsrs	r2, r0
 8013734:	6163      	str	r3, [r4, #20]
 8013736:	9201      	str	r2, [sp, #4]
 8013738:	9b01      	ldr	r3, [sp, #4]
 801373a:	61a3      	str	r3, [r4, #24]
 801373c:	2b00      	cmp	r3, #0
 801373e:	bf0c      	ite	eq
 8013740:	2201      	moveq	r2, #1
 8013742:	2202      	movne	r2, #2
 8013744:	6122      	str	r2, [r4, #16]
 8013746:	b1a5      	cbz	r5, 8013772 <__d2b+0x92>
 8013748:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801374c:	4405      	add	r5, r0
 801374e:	603d      	str	r5, [r7, #0]
 8013750:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013754:	6030      	str	r0, [r6, #0]
 8013756:	4620      	mov	r0, r4
 8013758:	b003      	add	sp, #12
 801375a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801375e:	6161      	str	r1, [r4, #20]
 8013760:	e7ea      	b.n	8013738 <__d2b+0x58>
 8013762:	a801      	add	r0, sp, #4
 8013764:	f7ff fce9 	bl	801313a <__lo0bits>
 8013768:	9b01      	ldr	r3, [sp, #4]
 801376a:	6163      	str	r3, [r4, #20]
 801376c:	3020      	adds	r0, #32
 801376e:	2201      	movs	r2, #1
 8013770:	e7e8      	b.n	8013744 <__d2b+0x64>
 8013772:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013776:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801377a:	6038      	str	r0, [r7, #0]
 801377c:	6918      	ldr	r0, [r3, #16]
 801377e:	f7ff fcbd 	bl	80130fc <__hi0bits>
 8013782:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013786:	e7e5      	b.n	8013754 <__d2b+0x74>
 8013788:	0801725b 	.word	0x0801725b
 801378c:	0801726c 	.word	0x0801726c

08013790 <__ratio>:
 8013790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013794:	b085      	sub	sp, #20
 8013796:	e9cd 1000 	strd	r1, r0, [sp]
 801379a:	a902      	add	r1, sp, #8
 801379c:	f7ff ff56 	bl	801364c <__b2d>
 80137a0:	9800      	ldr	r0, [sp, #0]
 80137a2:	a903      	add	r1, sp, #12
 80137a4:	ec55 4b10 	vmov	r4, r5, d0
 80137a8:	f7ff ff50 	bl	801364c <__b2d>
 80137ac:	9b01      	ldr	r3, [sp, #4]
 80137ae:	6919      	ldr	r1, [r3, #16]
 80137b0:	9b00      	ldr	r3, [sp, #0]
 80137b2:	691b      	ldr	r3, [r3, #16]
 80137b4:	1ac9      	subs	r1, r1, r3
 80137b6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80137ba:	1a9b      	subs	r3, r3, r2
 80137bc:	ec5b ab10 	vmov	sl, fp, d0
 80137c0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	bfce      	itee	gt
 80137c8:	462a      	movgt	r2, r5
 80137ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80137ce:	465a      	movle	r2, fp
 80137d0:	462f      	mov	r7, r5
 80137d2:	46d9      	mov	r9, fp
 80137d4:	bfcc      	ite	gt
 80137d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80137da:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80137de:	464b      	mov	r3, r9
 80137e0:	4652      	mov	r2, sl
 80137e2:	4620      	mov	r0, r4
 80137e4:	4639      	mov	r1, r7
 80137e6:	f7ed f859 	bl	800089c <__aeabi_ddiv>
 80137ea:	ec41 0b10 	vmov	d0, r0, r1
 80137ee:	b005      	add	sp, #20
 80137f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080137f4 <__copybits>:
 80137f4:	3901      	subs	r1, #1
 80137f6:	b570      	push	{r4, r5, r6, lr}
 80137f8:	1149      	asrs	r1, r1, #5
 80137fa:	6914      	ldr	r4, [r2, #16]
 80137fc:	3101      	adds	r1, #1
 80137fe:	f102 0314 	add.w	r3, r2, #20
 8013802:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013806:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801380a:	1f05      	subs	r5, r0, #4
 801380c:	42a3      	cmp	r3, r4
 801380e:	d30c      	bcc.n	801382a <__copybits+0x36>
 8013810:	1aa3      	subs	r3, r4, r2
 8013812:	3b11      	subs	r3, #17
 8013814:	f023 0303 	bic.w	r3, r3, #3
 8013818:	3211      	adds	r2, #17
 801381a:	42a2      	cmp	r2, r4
 801381c:	bf88      	it	hi
 801381e:	2300      	movhi	r3, #0
 8013820:	4418      	add	r0, r3
 8013822:	2300      	movs	r3, #0
 8013824:	4288      	cmp	r0, r1
 8013826:	d305      	bcc.n	8013834 <__copybits+0x40>
 8013828:	bd70      	pop	{r4, r5, r6, pc}
 801382a:	f853 6b04 	ldr.w	r6, [r3], #4
 801382e:	f845 6f04 	str.w	r6, [r5, #4]!
 8013832:	e7eb      	b.n	801380c <__copybits+0x18>
 8013834:	f840 3b04 	str.w	r3, [r0], #4
 8013838:	e7f4      	b.n	8013824 <__copybits+0x30>

0801383a <__any_on>:
 801383a:	f100 0214 	add.w	r2, r0, #20
 801383e:	6900      	ldr	r0, [r0, #16]
 8013840:	114b      	asrs	r3, r1, #5
 8013842:	4298      	cmp	r0, r3
 8013844:	b510      	push	{r4, lr}
 8013846:	db11      	blt.n	801386c <__any_on+0x32>
 8013848:	dd0a      	ble.n	8013860 <__any_on+0x26>
 801384a:	f011 011f 	ands.w	r1, r1, #31
 801384e:	d007      	beq.n	8013860 <__any_on+0x26>
 8013850:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013854:	fa24 f001 	lsr.w	r0, r4, r1
 8013858:	fa00 f101 	lsl.w	r1, r0, r1
 801385c:	428c      	cmp	r4, r1
 801385e:	d10b      	bne.n	8013878 <__any_on+0x3e>
 8013860:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013864:	4293      	cmp	r3, r2
 8013866:	d803      	bhi.n	8013870 <__any_on+0x36>
 8013868:	2000      	movs	r0, #0
 801386a:	bd10      	pop	{r4, pc}
 801386c:	4603      	mov	r3, r0
 801386e:	e7f7      	b.n	8013860 <__any_on+0x26>
 8013870:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013874:	2900      	cmp	r1, #0
 8013876:	d0f5      	beq.n	8013864 <__any_on+0x2a>
 8013878:	2001      	movs	r0, #1
 801387a:	e7f6      	b.n	801386a <__any_on+0x30>

0801387c <sulp>:
 801387c:	b570      	push	{r4, r5, r6, lr}
 801387e:	4604      	mov	r4, r0
 8013880:	460d      	mov	r5, r1
 8013882:	ec45 4b10 	vmov	d0, r4, r5
 8013886:	4616      	mov	r6, r2
 8013888:	f7ff feba 	bl	8013600 <__ulp>
 801388c:	ec51 0b10 	vmov	r0, r1, d0
 8013890:	b17e      	cbz	r6, 80138b2 <sulp+0x36>
 8013892:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013896:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801389a:	2b00      	cmp	r3, #0
 801389c:	dd09      	ble.n	80138b2 <sulp+0x36>
 801389e:	051b      	lsls	r3, r3, #20
 80138a0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80138a4:	2400      	movs	r4, #0
 80138a6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80138aa:	4622      	mov	r2, r4
 80138ac:	462b      	mov	r3, r5
 80138ae:	f7ec fecb 	bl	8000648 <__aeabi_dmul>
 80138b2:	ec41 0b10 	vmov	d0, r0, r1
 80138b6:	bd70      	pop	{r4, r5, r6, pc}

080138b8 <_strtod_l>:
 80138b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138bc:	b09f      	sub	sp, #124	@ 0x7c
 80138be:	460c      	mov	r4, r1
 80138c0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80138c2:	2200      	movs	r2, #0
 80138c4:	921a      	str	r2, [sp, #104]	@ 0x68
 80138c6:	9005      	str	r0, [sp, #20]
 80138c8:	f04f 0a00 	mov.w	sl, #0
 80138cc:	f04f 0b00 	mov.w	fp, #0
 80138d0:	460a      	mov	r2, r1
 80138d2:	9219      	str	r2, [sp, #100]	@ 0x64
 80138d4:	7811      	ldrb	r1, [r2, #0]
 80138d6:	292b      	cmp	r1, #43	@ 0x2b
 80138d8:	d04a      	beq.n	8013970 <_strtod_l+0xb8>
 80138da:	d838      	bhi.n	801394e <_strtod_l+0x96>
 80138dc:	290d      	cmp	r1, #13
 80138de:	d832      	bhi.n	8013946 <_strtod_l+0x8e>
 80138e0:	2908      	cmp	r1, #8
 80138e2:	d832      	bhi.n	801394a <_strtod_l+0x92>
 80138e4:	2900      	cmp	r1, #0
 80138e6:	d03b      	beq.n	8013960 <_strtod_l+0xa8>
 80138e8:	2200      	movs	r2, #0
 80138ea:	920b      	str	r2, [sp, #44]	@ 0x2c
 80138ec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80138ee:	782a      	ldrb	r2, [r5, #0]
 80138f0:	2a30      	cmp	r2, #48	@ 0x30
 80138f2:	f040 80b3 	bne.w	8013a5c <_strtod_l+0x1a4>
 80138f6:	786a      	ldrb	r2, [r5, #1]
 80138f8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80138fc:	2a58      	cmp	r2, #88	@ 0x58
 80138fe:	d16e      	bne.n	80139de <_strtod_l+0x126>
 8013900:	9302      	str	r3, [sp, #8]
 8013902:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013904:	9301      	str	r3, [sp, #4]
 8013906:	ab1a      	add	r3, sp, #104	@ 0x68
 8013908:	9300      	str	r3, [sp, #0]
 801390a:	4a8e      	ldr	r2, [pc, #568]	@ (8013b44 <_strtod_l+0x28c>)
 801390c:	9805      	ldr	r0, [sp, #20]
 801390e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8013910:	a919      	add	r1, sp, #100	@ 0x64
 8013912:	f001 fc97 	bl	8015244 <__gethex>
 8013916:	f010 060f 	ands.w	r6, r0, #15
 801391a:	4604      	mov	r4, r0
 801391c:	d005      	beq.n	801392a <_strtod_l+0x72>
 801391e:	2e06      	cmp	r6, #6
 8013920:	d128      	bne.n	8013974 <_strtod_l+0xbc>
 8013922:	3501      	adds	r5, #1
 8013924:	2300      	movs	r3, #0
 8013926:	9519      	str	r5, [sp, #100]	@ 0x64
 8013928:	930b      	str	r3, [sp, #44]	@ 0x2c
 801392a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801392c:	2b00      	cmp	r3, #0
 801392e:	f040 858e 	bne.w	801444e <_strtod_l+0xb96>
 8013932:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013934:	b1cb      	cbz	r3, 801396a <_strtod_l+0xb2>
 8013936:	4652      	mov	r2, sl
 8013938:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801393c:	ec43 2b10 	vmov	d0, r2, r3
 8013940:	b01f      	add	sp, #124	@ 0x7c
 8013942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013946:	2920      	cmp	r1, #32
 8013948:	d1ce      	bne.n	80138e8 <_strtod_l+0x30>
 801394a:	3201      	adds	r2, #1
 801394c:	e7c1      	b.n	80138d2 <_strtod_l+0x1a>
 801394e:	292d      	cmp	r1, #45	@ 0x2d
 8013950:	d1ca      	bne.n	80138e8 <_strtod_l+0x30>
 8013952:	2101      	movs	r1, #1
 8013954:	910b      	str	r1, [sp, #44]	@ 0x2c
 8013956:	1c51      	adds	r1, r2, #1
 8013958:	9119      	str	r1, [sp, #100]	@ 0x64
 801395a:	7852      	ldrb	r2, [r2, #1]
 801395c:	2a00      	cmp	r2, #0
 801395e:	d1c5      	bne.n	80138ec <_strtod_l+0x34>
 8013960:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8013962:	9419      	str	r4, [sp, #100]	@ 0x64
 8013964:	2b00      	cmp	r3, #0
 8013966:	f040 8570 	bne.w	801444a <_strtod_l+0xb92>
 801396a:	4652      	mov	r2, sl
 801396c:	465b      	mov	r3, fp
 801396e:	e7e5      	b.n	801393c <_strtod_l+0x84>
 8013970:	2100      	movs	r1, #0
 8013972:	e7ef      	b.n	8013954 <_strtod_l+0x9c>
 8013974:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013976:	b13a      	cbz	r2, 8013988 <_strtod_l+0xd0>
 8013978:	2135      	movs	r1, #53	@ 0x35
 801397a:	a81c      	add	r0, sp, #112	@ 0x70
 801397c:	f7ff ff3a 	bl	80137f4 <__copybits>
 8013980:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013982:	9805      	ldr	r0, [sp, #20]
 8013984:	f7ff fb08 	bl	8012f98 <_Bfree>
 8013988:	3e01      	subs	r6, #1
 801398a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801398c:	2e04      	cmp	r6, #4
 801398e:	d806      	bhi.n	801399e <_strtod_l+0xe6>
 8013990:	e8df f006 	tbb	[pc, r6]
 8013994:	201d0314 	.word	0x201d0314
 8013998:	14          	.byte	0x14
 8013999:	00          	.byte	0x00
 801399a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801399e:	05e1      	lsls	r1, r4, #23
 80139a0:	bf48      	it	mi
 80139a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80139a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80139aa:	0d1b      	lsrs	r3, r3, #20
 80139ac:	051b      	lsls	r3, r3, #20
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d1bb      	bne.n	801392a <_strtod_l+0x72>
 80139b2:	f7fe fb21 	bl	8011ff8 <__errno>
 80139b6:	2322      	movs	r3, #34	@ 0x22
 80139b8:	6003      	str	r3, [r0, #0]
 80139ba:	e7b6      	b.n	801392a <_strtod_l+0x72>
 80139bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80139c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80139c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80139c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80139cc:	e7e7      	b.n	801399e <_strtod_l+0xe6>
 80139ce:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8013b4c <_strtod_l+0x294>
 80139d2:	e7e4      	b.n	801399e <_strtod_l+0xe6>
 80139d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80139d8:	f04f 3aff 	mov.w	sl, #4294967295
 80139dc:	e7df      	b.n	801399e <_strtod_l+0xe6>
 80139de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80139e0:	1c5a      	adds	r2, r3, #1
 80139e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80139e4:	785b      	ldrb	r3, [r3, #1]
 80139e6:	2b30      	cmp	r3, #48	@ 0x30
 80139e8:	d0f9      	beq.n	80139de <_strtod_l+0x126>
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d09d      	beq.n	801392a <_strtod_l+0x72>
 80139ee:	2301      	movs	r3, #1
 80139f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80139f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80139f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80139f6:	2300      	movs	r3, #0
 80139f8:	9308      	str	r3, [sp, #32]
 80139fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80139fc:	461f      	mov	r7, r3
 80139fe:	220a      	movs	r2, #10
 8013a00:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8013a02:	7805      	ldrb	r5, [r0, #0]
 8013a04:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8013a08:	b2d9      	uxtb	r1, r3
 8013a0a:	2909      	cmp	r1, #9
 8013a0c:	d928      	bls.n	8013a60 <_strtod_l+0x1a8>
 8013a0e:	494e      	ldr	r1, [pc, #312]	@ (8013b48 <_strtod_l+0x290>)
 8013a10:	2201      	movs	r2, #1
 8013a12:	f7fe fa94 	bl	8011f3e <strncmp>
 8013a16:	2800      	cmp	r0, #0
 8013a18:	d032      	beq.n	8013a80 <_strtod_l+0x1c8>
 8013a1a:	2000      	movs	r0, #0
 8013a1c:	462a      	mov	r2, r5
 8013a1e:	4681      	mov	r9, r0
 8013a20:	463d      	mov	r5, r7
 8013a22:	4603      	mov	r3, r0
 8013a24:	2a65      	cmp	r2, #101	@ 0x65
 8013a26:	d001      	beq.n	8013a2c <_strtod_l+0x174>
 8013a28:	2a45      	cmp	r2, #69	@ 0x45
 8013a2a:	d114      	bne.n	8013a56 <_strtod_l+0x19e>
 8013a2c:	b91d      	cbnz	r5, 8013a36 <_strtod_l+0x17e>
 8013a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013a30:	4302      	orrs	r2, r0
 8013a32:	d095      	beq.n	8013960 <_strtod_l+0xa8>
 8013a34:	2500      	movs	r5, #0
 8013a36:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8013a38:	1c62      	adds	r2, r4, #1
 8013a3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8013a3c:	7862      	ldrb	r2, [r4, #1]
 8013a3e:	2a2b      	cmp	r2, #43	@ 0x2b
 8013a40:	d077      	beq.n	8013b32 <_strtod_l+0x27a>
 8013a42:	2a2d      	cmp	r2, #45	@ 0x2d
 8013a44:	d07b      	beq.n	8013b3e <_strtod_l+0x286>
 8013a46:	f04f 0c00 	mov.w	ip, #0
 8013a4a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8013a4e:	2909      	cmp	r1, #9
 8013a50:	f240 8082 	bls.w	8013b58 <_strtod_l+0x2a0>
 8013a54:	9419      	str	r4, [sp, #100]	@ 0x64
 8013a56:	f04f 0800 	mov.w	r8, #0
 8013a5a:	e0a2      	b.n	8013ba2 <_strtod_l+0x2ea>
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	e7c7      	b.n	80139f0 <_strtod_l+0x138>
 8013a60:	2f08      	cmp	r7, #8
 8013a62:	bfd5      	itete	le
 8013a64:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8013a66:	9908      	ldrgt	r1, [sp, #32]
 8013a68:	fb02 3301 	mlale	r3, r2, r1, r3
 8013a6c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8013a70:	f100 0001 	add.w	r0, r0, #1
 8013a74:	bfd4      	ite	le
 8013a76:	930a      	strle	r3, [sp, #40]	@ 0x28
 8013a78:	9308      	strgt	r3, [sp, #32]
 8013a7a:	3701      	adds	r7, #1
 8013a7c:	9019      	str	r0, [sp, #100]	@ 0x64
 8013a7e:	e7bf      	b.n	8013a00 <_strtod_l+0x148>
 8013a80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a82:	1c5a      	adds	r2, r3, #1
 8013a84:	9219      	str	r2, [sp, #100]	@ 0x64
 8013a86:	785a      	ldrb	r2, [r3, #1]
 8013a88:	b37f      	cbz	r7, 8013aea <_strtod_l+0x232>
 8013a8a:	4681      	mov	r9, r0
 8013a8c:	463d      	mov	r5, r7
 8013a8e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8013a92:	2b09      	cmp	r3, #9
 8013a94:	d912      	bls.n	8013abc <_strtod_l+0x204>
 8013a96:	2301      	movs	r3, #1
 8013a98:	e7c4      	b.n	8013a24 <_strtod_l+0x16c>
 8013a9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013a9c:	1c5a      	adds	r2, r3, #1
 8013a9e:	9219      	str	r2, [sp, #100]	@ 0x64
 8013aa0:	785a      	ldrb	r2, [r3, #1]
 8013aa2:	3001      	adds	r0, #1
 8013aa4:	2a30      	cmp	r2, #48	@ 0x30
 8013aa6:	d0f8      	beq.n	8013a9a <_strtod_l+0x1e2>
 8013aa8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8013aac:	2b08      	cmp	r3, #8
 8013aae:	f200 84d3 	bhi.w	8014458 <_strtod_l+0xba0>
 8013ab2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013ab4:	930c      	str	r3, [sp, #48]	@ 0x30
 8013ab6:	4681      	mov	r9, r0
 8013ab8:	2000      	movs	r0, #0
 8013aba:	4605      	mov	r5, r0
 8013abc:	3a30      	subs	r2, #48	@ 0x30
 8013abe:	f100 0301 	add.w	r3, r0, #1
 8013ac2:	d02a      	beq.n	8013b1a <_strtod_l+0x262>
 8013ac4:	4499      	add	r9, r3
 8013ac6:	eb00 0c05 	add.w	ip, r0, r5
 8013aca:	462b      	mov	r3, r5
 8013acc:	210a      	movs	r1, #10
 8013ace:	4563      	cmp	r3, ip
 8013ad0:	d10d      	bne.n	8013aee <_strtod_l+0x236>
 8013ad2:	1c69      	adds	r1, r5, #1
 8013ad4:	4401      	add	r1, r0
 8013ad6:	4428      	add	r0, r5
 8013ad8:	2808      	cmp	r0, #8
 8013ada:	dc16      	bgt.n	8013b0a <_strtod_l+0x252>
 8013adc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013ade:	230a      	movs	r3, #10
 8013ae0:	fb03 2300 	mla	r3, r3, r0, r2
 8013ae4:	930a      	str	r3, [sp, #40]	@ 0x28
 8013ae6:	2300      	movs	r3, #0
 8013ae8:	e018      	b.n	8013b1c <_strtod_l+0x264>
 8013aea:	4638      	mov	r0, r7
 8013aec:	e7da      	b.n	8013aa4 <_strtod_l+0x1ec>
 8013aee:	2b08      	cmp	r3, #8
 8013af0:	f103 0301 	add.w	r3, r3, #1
 8013af4:	dc03      	bgt.n	8013afe <_strtod_l+0x246>
 8013af6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8013af8:	434e      	muls	r6, r1
 8013afa:	960a      	str	r6, [sp, #40]	@ 0x28
 8013afc:	e7e7      	b.n	8013ace <_strtod_l+0x216>
 8013afe:	2b10      	cmp	r3, #16
 8013b00:	bfde      	ittt	le
 8013b02:	9e08      	ldrle	r6, [sp, #32]
 8013b04:	434e      	mulle	r6, r1
 8013b06:	9608      	strle	r6, [sp, #32]
 8013b08:	e7e1      	b.n	8013ace <_strtod_l+0x216>
 8013b0a:	280f      	cmp	r0, #15
 8013b0c:	dceb      	bgt.n	8013ae6 <_strtod_l+0x22e>
 8013b0e:	9808      	ldr	r0, [sp, #32]
 8013b10:	230a      	movs	r3, #10
 8013b12:	fb03 2300 	mla	r3, r3, r0, r2
 8013b16:	9308      	str	r3, [sp, #32]
 8013b18:	e7e5      	b.n	8013ae6 <_strtod_l+0x22e>
 8013b1a:	4629      	mov	r1, r5
 8013b1c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013b1e:	1c50      	adds	r0, r2, #1
 8013b20:	9019      	str	r0, [sp, #100]	@ 0x64
 8013b22:	7852      	ldrb	r2, [r2, #1]
 8013b24:	4618      	mov	r0, r3
 8013b26:	460d      	mov	r5, r1
 8013b28:	e7b1      	b.n	8013a8e <_strtod_l+0x1d6>
 8013b2a:	f04f 0900 	mov.w	r9, #0
 8013b2e:	2301      	movs	r3, #1
 8013b30:	e77d      	b.n	8013a2e <_strtod_l+0x176>
 8013b32:	f04f 0c00 	mov.w	ip, #0
 8013b36:	1ca2      	adds	r2, r4, #2
 8013b38:	9219      	str	r2, [sp, #100]	@ 0x64
 8013b3a:	78a2      	ldrb	r2, [r4, #2]
 8013b3c:	e785      	b.n	8013a4a <_strtod_l+0x192>
 8013b3e:	f04f 0c01 	mov.w	ip, #1
 8013b42:	e7f8      	b.n	8013b36 <_strtod_l+0x27e>
 8013b44:	080173e0 	.word	0x080173e0
 8013b48:	080173c8 	.word	0x080173c8
 8013b4c:	7ff00000 	.word	0x7ff00000
 8013b50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013b52:	1c51      	adds	r1, r2, #1
 8013b54:	9119      	str	r1, [sp, #100]	@ 0x64
 8013b56:	7852      	ldrb	r2, [r2, #1]
 8013b58:	2a30      	cmp	r2, #48	@ 0x30
 8013b5a:	d0f9      	beq.n	8013b50 <_strtod_l+0x298>
 8013b5c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8013b60:	2908      	cmp	r1, #8
 8013b62:	f63f af78 	bhi.w	8013a56 <_strtod_l+0x19e>
 8013b66:	3a30      	subs	r2, #48	@ 0x30
 8013b68:	920e      	str	r2, [sp, #56]	@ 0x38
 8013b6a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013b6c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8013b6e:	f04f 080a 	mov.w	r8, #10
 8013b72:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8013b74:	1c56      	adds	r6, r2, #1
 8013b76:	9619      	str	r6, [sp, #100]	@ 0x64
 8013b78:	7852      	ldrb	r2, [r2, #1]
 8013b7a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8013b7e:	f1be 0f09 	cmp.w	lr, #9
 8013b82:	d939      	bls.n	8013bf8 <_strtod_l+0x340>
 8013b84:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8013b86:	1a76      	subs	r6, r6, r1
 8013b88:	2e08      	cmp	r6, #8
 8013b8a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8013b8e:	dc03      	bgt.n	8013b98 <_strtod_l+0x2e0>
 8013b90:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013b92:	4588      	cmp	r8, r1
 8013b94:	bfa8      	it	ge
 8013b96:	4688      	movge	r8, r1
 8013b98:	f1bc 0f00 	cmp.w	ip, #0
 8013b9c:	d001      	beq.n	8013ba2 <_strtod_l+0x2ea>
 8013b9e:	f1c8 0800 	rsb	r8, r8, #0
 8013ba2:	2d00      	cmp	r5, #0
 8013ba4:	d14e      	bne.n	8013c44 <_strtod_l+0x38c>
 8013ba6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8013ba8:	4308      	orrs	r0, r1
 8013baa:	f47f aebe 	bne.w	801392a <_strtod_l+0x72>
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	f47f aed6 	bne.w	8013960 <_strtod_l+0xa8>
 8013bb4:	2a69      	cmp	r2, #105	@ 0x69
 8013bb6:	d028      	beq.n	8013c0a <_strtod_l+0x352>
 8013bb8:	dc25      	bgt.n	8013c06 <_strtod_l+0x34e>
 8013bba:	2a49      	cmp	r2, #73	@ 0x49
 8013bbc:	d025      	beq.n	8013c0a <_strtod_l+0x352>
 8013bbe:	2a4e      	cmp	r2, #78	@ 0x4e
 8013bc0:	f47f aece 	bne.w	8013960 <_strtod_l+0xa8>
 8013bc4:	499b      	ldr	r1, [pc, #620]	@ (8013e34 <_strtod_l+0x57c>)
 8013bc6:	a819      	add	r0, sp, #100	@ 0x64
 8013bc8:	f001 fd5e 	bl	8015688 <__match>
 8013bcc:	2800      	cmp	r0, #0
 8013bce:	f43f aec7 	beq.w	8013960 <_strtod_l+0xa8>
 8013bd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013bd4:	781b      	ldrb	r3, [r3, #0]
 8013bd6:	2b28      	cmp	r3, #40	@ 0x28
 8013bd8:	d12e      	bne.n	8013c38 <_strtod_l+0x380>
 8013bda:	4997      	ldr	r1, [pc, #604]	@ (8013e38 <_strtod_l+0x580>)
 8013bdc:	aa1c      	add	r2, sp, #112	@ 0x70
 8013bde:	a819      	add	r0, sp, #100	@ 0x64
 8013be0:	f001 fd66 	bl	80156b0 <__hexnan>
 8013be4:	2805      	cmp	r0, #5
 8013be6:	d127      	bne.n	8013c38 <_strtod_l+0x380>
 8013be8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013bea:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8013bee:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8013bf2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8013bf6:	e698      	b.n	801392a <_strtod_l+0x72>
 8013bf8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8013bfa:	fb08 2101 	mla	r1, r8, r1, r2
 8013bfe:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8013c02:	920e      	str	r2, [sp, #56]	@ 0x38
 8013c04:	e7b5      	b.n	8013b72 <_strtod_l+0x2ba>
 8013c06:	2a6e      	cmp	r2, #110	@ 0x6e
 8013c08:	e7da      	b.n	8013bc0 <_strtod_l+0x308>
 8013c0a:	498c      	ldr	r1, [pc, #560]	@ (8013e3c <_strtod_l+0x584>)
 8013c0c:	a819      	add	r0, sp, #100	@ 0x64
 8013c0e:	f001 fd3b 	bl	8015688 <__match>
 8013c12:	2800      	cmp	r0, #0
 8013c14:	f43f aea4 	beq.w	8013960 <_strtod_l+0xa8>
 8013c18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013c1a:	4989      	ldr	r1, [pc, #548]	@ (8013e40 <_strtod_l+0x588>)
 8013c1c:	3b01      	subs	r3, #1
 8013c1e:	a819      	add	r0, sp, #100	@ 0x64
 8013c20:	9319      	str	r3, [sp, #100]	@ 0x64
 8013c22:	f001 fd31 	bl	8015688 <__match>
 8013c26:	b910      	cbnz	r0, 8013c2e <_strtod_l+0x376>
 8013c28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8013c2a:	3301      	adds	r3, #1
 8013c2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8013c2e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8013e50 <_strtod_l+0x598>
 8013c32:	f04f 0a00 	mov.w	sl, #0
 8013c36:	e678      	b.n	801392a <_strtod_l+0x72>
 8013c38:	4882      	ldr	r0, [pc, #520]	@ (8013e44 <_strtod_l+0x58c>)
 8013c3a:	f001 fa61 	bl	8015100 <nan>
 8013c3e:	ec5b ab10 	vmov	sl, fp, d0
 8013c42:	e672      	b.n	801392a <_strtod_l+0x72>
 8013c44:	eba8 0309 	sub.w	r3, r8, r9
 8013c48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8013c4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8013c4c:	2f00      	cmp	r7, #0
 8013c4e:	bf08      	it	eq
 8013c50:	462f      	moveq	r7, r5
 8013c52:	2d10      	cmp	r5, #16
 8013c54:	462c      	mov	r4, r5
 8013c56:	bfa8      	it	ge
 8013c58:	2410      	movge	r4, #16
 8013c5a:	f7ec fc7b 	bl	8000554 <__aeabi_ui2d>
 8013c5e:	2d09      	cmp	r5, #9
 8013c60:	4682      	mov	sl, r0
 8013c62:	468b      	mov	fp, r1
 8013c64:	dc13      	bgt.n	8013c8e <_strtod_l+0x3d6>
 8013c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	f43f ae5e 	beq.w	801392a <_strtod_l+0x72>
 8013c6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013c70:	dd78      	ble.n	8013d64 <_strtod_l+0x4ac>
 8013c72:	2b16      	cmp	r3, #22
 8013c74:	dc5f      	bgt.n	8013d36 <_strtod_l+0x47e>
 8013c76:	4974      	ldr	r1, [pc, #464]	@ (8013e48 <_strtod_l+0x590>)
 8013c78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013c7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013c80:	4652      	mov	r2, sl
 8013c82:	465b      	mov	r3, fp
 8013c84:	f7ec fce0 	bl	8000648 <__aeabi_dmul>
 8013c88:	4682      	mov	sl, r0
 8013c8a:	468b      	mov	fp, r1
 8013c8c:	e64d      	b.n	801392a <_strtod_l+0x72>
 8013c8e:	4b6e      	ldr	r3, [pc, #440]	@ (8013e48 <_strtod_l+0x590>)
 8013c90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8013c94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8013c98:	f7ec fcd6 	bl	8000648 <__aeabi_dmul>
 8013c9c:	4682      	mov	sl, r0
 8013c9e:	9808      	ldr	r0, [sp, #32]
 8013ca0:	468b      	mov	fp, r1
 8013ca2:	f7ec fc57 	bl	8000554 <__aeabi_ui2d>
 8013ca6:	4602      	mov	r2, r0
 8013ca8:	460b      	mov	r3, r1
 8013caa:	4650      	mov	r0, sl
 8013cac:	4659      	mov	r1, fp
 8013cae:	f7ec fb15 	bl	80002dc <__adddf3>
 8013cb2:	2d0f      	cmp	r5, #15
 8013cb4:	4682      	mov	sl, r0
 8013cb6:	468b      	mov	fp, r1
 8013cb8:	ddd5      	ble.n	8013c66 <_strtod_l+0x3ae>
 8013cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013cbc:	1b2c      	subs	r4, r5, r4
 8013cbe:	441c      	add	r4, r3
 8013cc0:	2c00      	cmp	r4, #0
 8013cc2:	f340 8096 	ble.w	8013df2 <_strtod_l+0x53a>
 8013cc6:	f014 030f 	ands.w	r3, r4, #15
 8013cca:	d00a      	beq.n	8013ce2 <_strtod_l+0x42a>
 8013ccc:	495e      	ldr	r1, [pc, #376]	@ (8013e48 <_strtod_l+0x590>)
 8013cce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013cd2:	4652      	mov	r2, sl
 8013cd4:	465b      	mov	r3, fp
 8013cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013cda:	f7ec fcb5 	bl	8000648 <__aeabi_dmul>
 8013cde:	4682      	mov	sl, r0
 8013ce0:	468b      	mov	fp, r1
 8013ce2:	f034 040f 	bics.w	r4, r4, #15
 8013ce6:	d073      	beq.n	8013dd0 <_strtod_l+0x518>
 8013ce8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8013cec:	dd48      	ble.n	8013d80 <_strtod_l+0x4c8>
 8013cee:	2400      	movs	r4, #0
 8013cf0:	46a0      	mov	r8, r4
 8013cf2:	940a      	str	r4, [sp, #40]	@ 0x28
 8013cf4:	46a1      	mov	r9, r4
 8013cf6:	9a05      	ldr	r2, [sp, #20]
 8013cf8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8013e50 <_strtod_l+0x598>
 8013cfc:	2322      	movs	r3, #34	@ 0x22
 8013cfe:	6013      	str	r3, [r2, #0]
 8013d00:	f04f 0a00 	mov.w	sl, #0
 8013d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	f43f ae0f 	beq.w	801392a <_strtod_l+0x72>
 8013d0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013d0e:	9805      	ldr	r0, [sp, #20]
 8013d10:	f7ff f942 	bl	8012f98 <_Bfree>
 8013d14:	9805      	ldr	r0, [sp, #20]
 8013d16:	4649      	mov	r1, r9
 8013d18:	f7ff f93e 	bl	8012f98 <_Bfree>
 8013d1c:	9805      	ldr	r0, [sp, #20]
 8013d1e:	4641      	mov	r1, r8
 8013d20:	f7ff f93a 	bl	8012f98 <_Bfree>
 8013d24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8013d26:	9805      	ldr	r0, [sp, #20]
 8013d28:	f7ff f936 	bl	8012f98 <_Bfree>
 8013d2c:	9805      	ldr	r0, [sp, #20]
 8013d2e:	4621      	mov	r1, r4
 8013d30:	f7ff f932 	bl	8012f98 <_Bfree>
 8013d34:	e5f9      	b.n	801392a <_strtod_l+0x72>
 8013d36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013d38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8013d3c:	4293      	cmp	r3, r2
 8013d3e:	dbbc      	blt.n	8013cba <_strtod_l+0x402>
 8013d40:	4c41      	ldr	r4, [pc, #260]	@ (8013e48 <_strtod_l+0x590>)
 8013d42:	f1c5 050f 	rsb	r5, r5, #15
 8013d46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8013d4a:	4652      	mov	r2, sl
 8013d4c:	465b      	mov	r3, fp
 8013d4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013d52:	f7ec fc79 	bl	8000648 <__aeabi_dmul>
 8013d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013d58:	1b5d      	subs	r5, r3, r5
 8013d5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8013d5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013d62:	e78f      	b.n	8013c84 <_strtod_l+0x3cc>
 8013d64:	3316      	adds	r3, #22
 8013d66:	dba8      	blt.n	8013cba <_strtod_l+0x402>
 8013d68:	4b37      	ldr	r3, [pc, #220]	@ (8013e48 <_strtod_l+0x590>)
 8013d6a:	eba9 0808 	sub.w	r8, r9, r8
 8013d6e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8013d72:	e9d8 2300 	ldrd	r2, r3, [r8]
 8013d76:	4650      	mov	r0, sl
 8013d78:	4659      	mov	r1, fp
 8013d7a:	f7ec fd8f 	bl	800089c <__aeabi_ddiv>
 8013d7e:	e783      	b.n	8013c88 <_strtod_l+0x3d0>
 8013d80:	4b32      	ldr	r3, [pc, #200]	@ (8013e4c <_strtod_l+0x594>)
 8013d82:	9308      	str	r3, [sp, #32]
 8013d84:	2300      	movs	r3, #0
 8013d86:	1124      	asrs	r4, r4, #4
 8013d88:	4650      	mov	r0, sl
 8013d8a:	4659      	mov	r1, fp
 8013d8c:	461e      	mov	r6, r3
 8013d8e:	2c01      	cmp	r4, #1
 8013d90:	dc21      	bgt.n	8013dd6 <_strtod_l+0x51e>
 8013d92:	b10b      	cbz	r3, 8013d98 <_strtod_l+0x4e0>
 8013d94:	4682      	mov	sl, r0
 8013d96:	468b      	mov	fp, r1
 8013d98:	492c      	ldr	r1, [pc, #176]	@ (8013e4c <_strtod_l+0x594>)
 8013d9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8013d9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8013da2:	4652      	mov	r2, sl
 8013da4:	465b      	mov	r3, fp
 8013da6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013daa:	f7ec fc4d 	bl	8000648 <__aeabi_dmul>
 8013dae:	4b28      	ldr	r3, [pc, #160]	@ (8013e50 <_strtod_l+0x598>)
 8013db0:	460a      	mov	r2, r1
 8013db2:	400b      	ands	r3, r1
 8013db4:	4927      	ldr	r1, [pc, #156]	@ (8013e54 <_strtod_l+0x59c>)
 8013db6:	428b      	cmp	r3, r1
 8013db8:	4682      	mov	sl, r0
 8013dba:	d898      	bhi.n	8013cee <_strtod_l+0x436>
 8013dbc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8013dc0:	428b      	cmp	r3, r1
 8013dc2:	bf86      	itte	hi
 8013dc4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8013e58 <_strtod_l+0x5a0>
 8013dc8:	f04f 3aff 	movhi.w	sl, #4294967295
 8013dcc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	9308      	str	r3, [sp, #32]
 8013dd4:	e07a      	b.n	8013ecc <_strtod_l+0x614>
 8013dd6:	07e2      	lsls	r2, r4, #31
 8013dd8:	d505      	bpl.n	8013de6 <_strtod_l+0x52e>
 8013dda:	9b08      	ldr	r3, [sp, #32]
 8013ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de0:	f7ec fc32 	bl	8000648 <__aeabi_dmul>
 8013de4:	2301      	movs	r3, #1
 8013de6:	9a08      	ldr	r2, [sp, #32]
 8013de8:	3208      	adds	r2, #8
 8013dea:	3601      	adds	r6, #1
 8013dec:	1064      	asrs	r4, r4, #1
 8013dee:	9208      	str	r2, [sp, #32]
 8013df0:	e7cd      	b.n	8013d8e <_strtod_l+0x4d6>
 8013df2:	d0ed      	beq.n	8013dd0 <_strtod_l+0x518>
 8013df4:	4264      	negs	r4, r4
 8013df6:	f014 020f 	ands.w	r2, r4, #15
 8013dfa:	d00a      	beq.n	8013e12 <_strtod_l+0x55a>
 8013dfc:	4b12      	ldr	r3, [pc, #72]	@ (8013e48 <_strtod_l+0x590>)
 8013dfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013e02:	4650      	mov	r0, sl
 8013e04:	4659      	mov	r1, fp
 8013e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e0a:	f7ec fd47 	bl	800089c <__aeabi_ddiv>
 8013e0e:	4682      	mov	sl, r0
 8013e10:	468b      	mov	fp, r1
 8013e12:	1124      	asrs	r4, r4, #4
 8013e14:	d0dc      	beq.n	8013dd0 <_strtod_l+0x518>
 8013e16:	2c1f      	cmp	r4, #31
 8013e18:	dd20      	ble.n	8013e5c <_strtod_l+0x5a4>
 8013e1a:	2400      	movs	r4, #0
 8013e1c:	46a0      	mov	r8, r4
 8013e1e:	940a      	str	r4, [sp, #40]	@ 0x28
 8013e20:	46a1      	mov	r9, r4
 8013e22:	9a05      	ldr	r2, [sp, #20]
 8013e24:	2322      	movs	r3, #34	@ 0x22
 8013e26:	f04f 0a00 	mov.w	sl, #0
 8013e2a:	f04f 0b00 	mov.w	fp, #0
 8013e2e:	6013      	str	r3, [r2, #0]
 8013e30:	e768      	b.n	8013d04 <_strtod_l+0x44c>
 8013e32:	bf00      	nop
 8013e34:	080171b5 	.word	0x080171b5
 8013e38:	080173cc 	.word	0x080173cc
 8013e3c:	080171ad 	.word	0x080171ad
 8013e40:	080171e2 	.word	0x080171e2
 8013e44:	08017590 	.word	0x08017590
 8013e48:	08017300 	.word	0x08017300
 8013e4c:	080172d8 	.word	0x080172d8
 8013e50:	7ff00000 	.word	0x7ff00000
 8013e54:	7ca00000 	.word	0x7ca00000
 8013e58:	7fefffff 	.word	0x7fefffff
 8013e5c:	f014 0310 	ands.w	r3, r4, #16
 8013e60:	bf18      	it	ne
 8013e62:	236a      	movne	r3, #106	@ 0x6a
 8013e64:	4ea9      	ldr	r6, [pc, #676]	@ (801410c <_strtod_l+0x854>)
 8013e66:	9308      	str	r3, [sp, #32]
 8013e68:	4650      	mov	r0, sl
 8013e6a:	4659      	mov	r1, fp
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	07e2      	lsls	r2, r4, #31
 8013e70:	d504      	bpl.n	8013e7c <_strtod_l+0x5c4>
 8013e72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013e76:	f7ec fbe7 	bl	8000648 <__aeabi_dmul>
 8013e7a:	2301      	movs	r3, #1
 8013e7c:	1064      	asrs	r4, r4, #1
 8013e7e:	f106 0608 	add.w	r6, r6, #8
 8013e82:	d1f4      	bne.n	8013e6e <_strtod_l+0x5b6>
 8013e84:	b10b      	cbz	r3, 8013e8a <_strtod_l+0x5d2>
 8013e86:	4682      	mov	sl, r0
 8013e88:	468b      	mov	fp, r1
 8013e8a:	9b08      	ldr	r3, [sp, #32]
 8013e8c:	b1b3      	cbz	r3, 8013ebc <_strtod_l+0x604>
 8013e8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013e92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	4659      	mov	r1, fp
 8013e9a:	dd0f      	ble.n	8013ebc <_strtod_l+0x604>
 8013e9c:	2b1f      	cmp	r3, #31
 8013e9e:	dd55      	ble.n	8013f4c <_strtod_l+0x694>
 8013ea0:	2b34      	cmp	r3, #52	@ 0x34
 8013ea2:	bfde      	ittt	le
 8013ea4:	f04f 33ff 	movle.w	r3, #4294967295
 8013ea8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8013eac:	4093      	lslle	r3, r2
 8013eae:	f04f 0a00 	mov.w	sl, #0
 8013eb2:	bfcc      	ite	gt
 8013eb4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8013eb8:	ea03 0b01 	andle.w	fp, r3, r1
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	4650      	mov	r0, sl
 8013ec2:	4659      	mov	r1, fp
 8013ec4:	f7ec fe28 	bl	8000b18 <__aeabi_dcmpeq>
 8013ec8:	2800      	cmp	r0, #0
 8013eca:	d1a6      	bne.n	8013e1a <_strtod_l+0x562>
 8013ecc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ece:	9300      	str	r3, [sp, #0]
 8013ed0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013ed2:	9805      	ldr	r0, [sp, #20]
 8013ed4:	462b      	mov	r3, r5
 8013ed6:	463a      	mov	r2, r7
 8013ed8:	f7ff f8c6 	bl	8013068 <__s2b>
 8013edc:	900a      	str	r0, [sp, #40]	@ 0x28
 8013ede:	2800      	cmp	r0, #0
 8013ee0:	f43f af05 	beq.w	8013cee <_strtod_l+0x436>
 8013ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013ee6:	2a00      	cmp	r2, #0
 8013ee8:	eba9 0308 	sub.w	r3, r9, r8
 8013eec:	bfa8      	it	ge
 8013eee:	2300      	movge	r3, #0
 8013ef0:	9312      	str	r3, [sp, #72]	@ 0x48
 8013ef2:	2400      	movs	r4, #0
 8013ef4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8013ef8:	9316      	str	r3, [sp, #88]	@ 0x58
 8013efa:	46a0      	mov	r8, r4
 8013efc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013efe:	9805      	ldr	r0, [sp, #20]
 8013f00:	6859      	ldr	r1, [r3, #4]
 8013f02:	f7ff f809 	bl	8012f18 <_Balloc>
 8013f06:	4681      	mov	r9, r0
 8013f08:	2800      	cmp	r0, #0
 8013f0a:	f43f aef4 	beq.w	8013cf6 <_strtod_l+0x43e>
 8013f0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013f10:	691a      	ldr	r2, [r3, #16]
 8013f12:	3202      	adds	r2, #2
 8013f14:	f103 010c 	add.w	r1, r3, #12
 8013f18:	0092      	lsls	r2, r2, #2
 8013f1a:	300c      	adds	r0, #12
 8013f1c:	f7fe f899 	bl	8012052 <memcpy>
 8013f20:	ec4b ab10 	vmov	d0, sl, fp
 8013f24:	9805      	ldr	r0, [sp, #20]
 8013f26:	aa1c      	add	r2, sp, #112	@ 0x70
 8013f28:	a91b      	add	r1, sp, #108	@ 0x6c
 8013f2a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8013f2e:	f7ff fbd7 	bl	80136e0 <__d2b>
 8013f32:	901a      	str	r0, [sp, #104]	@ 0x68
 8013f34:	2800      	cmp	r0, #0
 8013f36:	f43f aede 	beq.w	8013cf6 <_strtod_l+0x43e>
 8013f3a:	9805      	ldr	r0, [sp, #20]
 8013f3c:	2101      	movs	r1, #1
 8013f3e:	f7ff f929 	bl	8013194 <__i2b>
 8013f42:	4680      	mov	r8, r0
 8013f44:	b948      	cbnz	r0, 8013f5a <_strtod_l+0x6a2>
 8013f46:	f04f 0800 	mov.w	r8, #0
 8013f4a:	e6d4      	b.n	8013cf6 <_strtod_l+0x43e>
 8013f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8013f50:	fa02 f303 	lsl.w	r3, r2, r3
 8013f54:	ea03 0a0a 	and.w	sl, r3, sl
 8013f58:	e7b0      	b.n	8013ebc <_strtod_l+0x604>
 8013f5a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8013f5c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013f5e:	2d00      	cmp	r5, #0
 8013f60:	bfab      	itete	ge
 8013f62:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8013f64:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8013f66:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8013f68:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8013f6a:	bfac      	ite	ge
 8013f6c:	18ef      	addge	r7, r5, r3
 8013f6e:	1b5e      	sublt	r6, r3, r5
 8013f70:	9b08      	ldr	r3, [sp, #32]
 8013f72:	1aed      	subs	r5, r5, r3
 8013f74:	4415      	add	r5, r2
 8013f76:	4b66      	ldr	r3, [pc, #408]	@ (8014110 <_strtod_l+0x858>)
 8013f78:	3d01      	subs	r5, #1
 8013f7a:	429d      	cmp	r5, r3
 8013f7c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013f80:	da50      	bge.n	8014024 <_strtod_l+0x76c>
 8013f82:	1b5b      	subs	r3, r3, r5
 8013f84:	2b1f      	cmp	r3, #31
 8013f86:	eba2 0203 	sub.w	r2, r2, r3
 8013f8a:	f04f 0101 	mov.w	r1, #1
 8013f8e:	dc3d      	bgt.n	801400c <_strtod_l+0x754>
 8013f90:	fa01 f303 	lsl.w	r3, r1, r3
 8013f94:	9313      	str	r3, [sp, #76]	@ 0x4c
 8013f96:	2300      	movs	r3, #0
 8013f98:	9310      	str	r3, [sp, #64]	@ 0x40
 8013f9a:	18bd      	adds	r5, r7, r2
 8013f9c:	9b08      	ldr	r3, [sp, #32]
 8013f9e:	42af      	cmp	r7, r5
 8013fa0:	4416      	add	r6, r2
 8013fa2:	441e      	add	r6, r3
 8013fa4:	463b      	mov	r3, r7
 8013fa6:	bfa8      	it	ge
 8013fa8:	462b      	movge	r3, r5
 8013faa:	42b3      	cmp	r3, r6
 8013fac:	bfa8      	it	ge
 8013fae:	4633      	movge	r3, r6
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	bfc2      	ittt	gt
 8013fb4:	1aed      	subgt	r5, r5, r3
 8013fb6:	1af6      	subgt	r6, r6, r3
 8013fb8:	1aff      	subgt	r7, r7, r3
 8013fba:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	dd16      	ble.n	8013fee <_strtod_l+0x736>
 8013fc0:	4641      	mov	r1, r8
 8013fc2:	9805      	ldr	r0, [sp, #20]
 8013fc4:	461a      	mov	r2, r3
 8013fc6:	f7ff f9a5 	bl	8013314 <__pow5mult>
 8013fca:	4680      	mov	r8, r0
 8013fcc:	2800      	cmp	r0, #0
 8013fce:	d0ba      	beq.n	8013f46 <_strtod_l+0x68e>
 8013fd0:	4601      	mov	r1, r0
 8013fd2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8013fd4:	9805      	ldr	r0, [sp, #20]
 8013fd6:	f7ff f8f3 	bl	80131c0 <__multiply>
 8013fda:	900e      	str	r0, [sp, #56]	@ 0x38
 8013fdc:	2800      	cmp	r0, #0
 8013fde:	f43f ae8a 	beq.w	8013cf6 <_strtod_l+0x43e>
 8013fe2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8013fe4:	9805      	ldr	r0, [sp, #20]
 8013fe6:	f7fe ffd7 	bl	8012f98 <_Bfree>
 8013fea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013fec:	931a      	str	r3, [sp, #104]	@ 0x68
 8013fee:	2d00      	cmp	r5, #0
 8013ff0:	dc1d      	bgt.n	801402e <_strtod_l+0x776>
 8013ff2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	dd23      	ble.n	8014040 <_strtod_l+0x788>
 8013ff8:	4649      	mov	r1, r9
 8013ffa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8013ffc:	9805      	ldr	r0, [sp, #20]
 8013ffe:	f7ff f989 	bl	8013314 <__pow5mult>
 8014002:	4681      	mov	r9, r0
 8014004:	b9e0      	cbnz	r0, 8014040 <_strtod_l+0x788>
 8014006:	f04f 0900 	mov.w	r9, #0
 801400a:	e674      	b.n	8013cf6 <_strtod_l+0x43e>
 801400c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8014010:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8014014:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8014018:	35e2      	adds	r5, #226	@ 0xe2
 801401a:	fa01 f305 	lsl.w	r3, r1, r5
 801401e:	9310      	str	r3, [sp, #64]	@ 0x40
 8014020:	9113      	str	r1, [sp, #76]	@ 0x4c
 8014022:	e7ba      	b.n	8013f9a <_strtod_l+0x6e2>
 8014024:	2300      	movs	r3, #0
 8014026:	9310      	str	r3, [sp, #64]	@ 0x40
 8014028:	2301      	movs	r3, #1
 801402a:	9313      	str	r3, [sp, #76]	@ 0x4c
 801402c:	e7b5      	b.n	8013f9a <_strtod_l+0x6e2>
 801402e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8014030:	9805      	ldr	r0, [sp, #20]
 8014032:	462a      	mov	r2, r5
 8014034:	f7ff f9c8 	bl	80133c8 <__lshift>
 8014038:	901a      	str	r0, [sp, #104]	@ 0x68
 801403a:	2800      	cmp	r0, #0
 801403c:	d1d9      	bne.n	8013ff2 <_strtod_l+0x73a>
 801403e:	e65a      	b.n	8013cf6 <_strtod_l+0x43e>
 8014040:	2e00      	cmp	r6, #0
 8014042:	dd07      	ble.n	8014054 <_strtod_l+0x79c>
 8014044:	4649      	mov	r1, r9
 8014046:	9805      	ldr	r0, [sp, #20]
 8014048:	4632      	mov	r2, r6
 801404a:	f7ff f9bd 	bl	80133c8 <__lshift>
 801404e:	4681      	mov	r9, r0
 8014050:	2800      	cmp	r0, #0
 8014052:	d0d8      	beq.n	8014006 <_strtod_l+0x74e>
 8014054:	2f00      	cmp	r7, #0
 8014056:	dd08      	ble.n	801406a <_strtod_l+0x7b2>
 8014058:	4641      	mov	r1, r8
 801405a:	9805      	ldr	r0, [sp, #20]
 801405c:	463a      	mov	r2, r7
 801405e:	f7ff f9b3 	bl	80133c8 <__lshift>
 8014062:	4680      	mov	r8, r0
 8014064:	2800      	cmp	r0, #0
 8014066:	f43f ae46 	beq.w	8013cf6 <_strtod_l+0x43e>
 801406a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801406c:	9805      	ldr	r0, [sp, #20]
 801406e:	464a      	mov	r2, r9
 8014070:	f7ff fa32 	bl	80134d8 <__mdiff>
 8014074:	4604      	mov	r4, r0
 8014076:	2800      	cmp	r0, #0
 8014078:	f43f ae3d 	beq.w	8013cf6 <_strtod_l+0x43e>
 801407c:	68c3      	ldr	r3, [r0, #12]
 801407e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014080:	2300      	movs	r3, #0
 8014082:	60c3      	str	r3, [r0, #12]
 8014084:	4641      	mov	r1, r8
 8014086:	f7ff fa0b 	bl	80134a0 <__mcmp>
 801408a:	2800      	cmp	r0, #0
 801408c:	da46      	bge.n	801411c <_strtod_l+0x864>
 801408e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014090:	ea53 030a 	orrs.w	r3, r3, sl
 8014094:	d16c      	bne.n	8014170 <_strtod_l+0x8b8>
 8014096:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801409a:	2b00      	cmp	r3, #0
 801409c:	d168      	bne.n	8014170 <_strtod_l+0x8b8>
 801409e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80140a2:	0d1b      	lsrs	r3, r3, #20
 80140a4:	051b      	lsls	r3, r3, #20
 80140a6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80140aa:	d961      	bls.n	8014170 <_strtod_l+0x8b8>
 80140ac:	6963      	ldr	r3, [r4, #20]
 80140ae:	b913      	cbnz	r3, 80140b6 <_strtod_l+0x7fe>
 80140b0:	6923      	ldr	r3, [r4, #16]
 80140b2:	2b01      	cmp	r3, #1
 80140b4:	dd5c      	ble.n	8014170 <_strtod_l+0x8b8>
 80140b6:	4621      	mov	r1, r4
 80140b8:	2201      	movs	r2, #1
 80140ba:	9805      	ldr	r0, [sp, #20]
 80140bc:	f7ff f984 	bl	80133c8 <__lshift>
 80140c0:	4641      	mov	r1, r8
 80140c2:	4604      	mov	r4, r0
 80140c4:	f7ff f9ec 	bl	80134a0 <__mcmp>
 80140c8:	2800      	cmp	r0, #0
 80140ca:	dd51      	ble.n	8014170 <_strtod_l+0x8b8>
 80140cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80140d0:	9a08      	ldr	r2, [sp, #32]
 80140d2:	0d1b      	lsrs	r3, r3, #20
 80140d4:	051b      	lsls	r3, r3, #20
 80140d6:	2a00      	cmp	r2, #0
 80140d8:	d06b      	beq.n	80141b2 <_strtod_l+0x8fa>
 80140da:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80140de:	d868      	bhi.n	80141b2 <_strtod_l+0x8fa>
 80140e0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80140e4:	f67f ae9d 	bls.w	8013e22 <_strtod_l+0x56a>
 80140e8:	4b0a      	ldr	r3, [pc, #40]	@ (8014114 <_strtod_l+0x85c>)
 80140ea:	4650      	mov	r0, sl
 80140ec:	4659      	mov	r1, fp
 80140ee:	2200      	movs	r2, #0
 80140f0:	f7ec faaa 	bl	8000648 <__aeabi_dmul>
 80140f4:	4b08      	ldr	r3, [pc, #32]	@ (8014118 <_strtod_l+0x860>)
 80140f6:	400b      	ands	r3, r1
 80140f8:	4682      	mov	sl, r0
 80140fa:	468b      	mov	fp, r1
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	f47f ae05 	bne.w	8013d0c <_strtod_l+0x454>
 8014102:	9a05      	ldr	r2, [sp, #20]
 8014104:	2322      	movs	r3, #34	@ 0x22
 8014106:	6013      	str	r3, [r2, #0]
 8014108:	e600      	b.n	8013d0c <_strtod_l+0x454>
 801410a:	bf00      	nop
 801410c:	080173f8 	.word	0x080173f8
 8014110:	fffffc02 	.word	0xfffffc02
 8014114:	39500000 	.word	0x39500000
 8014118:	7ff00000 	.word	0x7ff00000
 801411c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8014120:	d165      	bne.n	80141ee <_strtod_l+0x936>
 8014122:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8014124:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014128:	b35a      	cbz	r2, 8014182 <_strtod_l+0x8ca>
 801412a:	4a9f      	ldr	r2, [pc, #636]	@ (80143a8 <_strtod_l+0xaf0>)
 801412c:	4293      	cmp	r3, r2
 801412e:	d12b      	bne.n	8014188 <_strtod_l+0x8d0>
 8014130:	9b08      	ldr	r3, [sp, #32]
 8014132:	4651      	mov	r1, sl
 8014134:	b303      	cbz	r3, 8014178 <_strtod_l+0x8c0>
 8014136:	4b9d      	ldr	r3, [pc, #628]	@ (80143ac <_strtod_l+0xaf4>)
 8014138:	465a      	mov	r2, fp
 801413a:	4013      	ands	r3, r2
 801413c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8014140:	f04f 32ff 	mov.w	r2, #4294967295
 8014144:	d81b      	bhi.n	801417e <_strtod_l+0x8c6>
 8014146:	0d1b      	lsrs	r3, r3, #20
 8014148:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801414c:	fa02 f303 	lsl.w	r3, r2, r3
 8014150:	4299      	cmp	r1, r3
 8014152:	d119      	bne.n	8014188 <_strtod_l+0x8d0>
 8014154:	4b96      	ldr	r3, [pc, #600]	@ (80143b0 <_strtod_l+0xaf8>)
 8014156:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014158:	429a      	cmp	r2, r3
 801415a:	d102      	bne.n	8014162 <_strtod_l+0x8aa>
 801415c:	3101      	adds	r1, #1
 801415e:	f43f adca 	beq.w	8013cf6 <_strtod_l+0x43e>
 8014162:	4b92      	ldr	r3, [pc, #584]	@ (80143ac <_strtod_l+0xaf4>)
 8014164:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8014166:	401a      	ands	r2, r3
 8014168:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801416c:	f04f 0a00 	mov.w	sl, #0
 8014170:	9b08      	ldr	r3, [sp, #32]
 8014172:	2b00      	cmp	r3, #0
 8014174:	d1b8      	bne.n	80140e8 <_strtod_l+0x830>
 8014176:	e5c9      	b.n	8013d0c <_strtod_l+0x454>
 8014178:	f04f 33ff 	mov.w	r3, #4294967295
 801417c:	e7e8      	b.n	8014150 <_strtod_l+0x898>
 801417e:	4613      	mov	r3, r2
 8014180:	e7e6      	b.n	8014150 <_strtod_l+0x898>
 8014182:	ea53 030a 	orrs.w	r3, r3, sl
 8014186:	d0a1      	beq.n	80140cc <_strtod_l+0x814>
 8014188:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801418a:	b1db      	cbz	r3, 80141c4 <_strtod_l+0x90c>
 801418c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801418e:	4213      	tst	r3, r2
 8014190:	d0ee      	beq.n	8014170 <_strtod_l+0x8b8>
 8014192:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014194:	9a08      	ldr	r2, [sp, #32]
 8014196:	4650      	mov	r0, sl
 8014198:	4659      	mov	r1, fp
 801419a:	b1bb      	cbz	r3, 80141cc <_strtod_l+0x914>
 801419c:	f7ff fb6e 	bl	801387c <sulp>
 80141a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80141a4:	ec53 2b10 	vmov	r2, r3, d0
 80141a8:	f7ec f898 	bl	80002dc <__adddf3>
 80141ac:	4682      	mov	sl, r0
 80141ae:	468b      	mov	fp, r1
 80141b0:	e7de      	b.n	8014170 <_strtod_l+0x8b8>
 80141b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80141b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80141ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80141be:	f04f 3aff 	mov.w	sl, #4294967295
 80141c2:	e7d5      	b.n	8014170 <_strtod_l+0x8b8>
 80141c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80141c6:	ea13 0f0a 	tst.w	r3, sl
 80141ca:	e7e1      	b.n	8014190 <_strtod_l+0x8d8>
 80141cc:	f7ff fb56 	bl	801387c <sulp>
 80141d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80141d4:	ec53 2b10 	vmov	r2, r3, d0
 80141d8:	f7ec f87e 	bl	80002d8 <__aeabi_dsub>
 80141dc:	2200      	movs	r2, #0
 80141de:	2300      	movs	r3, #0
 80141e0:	4682      	mov	sl, r0
 80141e2:	468b      	mov	fp, r1
 80141e4:	f7ec fc98 	bl	8000b18 <__aeabi_dcmpeq>
 80141e8:	2800      	cmp	r0, #0
 80141ea:	d0c1      	beq.n	8014170 <_strtod_l+0x8b8>
 80141ec:	e619      	b.n	8013e22 <_strtod_l+0x56a>
 80141ee:	4641      	mov	r1, r8
 80141f0:	4620      	mov	r0, r4
 80141f2:	f7ff facd 	bl	8013790 <__ratio>
 80141f6:	ec57 6b10 	vmov	r6, r7, d0
 80141fa:	2200      	movs	r2, #0
 80141fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8014200:	4630      	mov	r0, r6
 8014202:	4639      	mov	r1, r7
 8014204:	f7ec fc9c 	bl	8000b40 <__aeabi_dcmple>
 8014208:	2800      	cmp	r0, #0
 801420a:	d06f      	beq.n	80142ec <_strtod_l+0xa34>
 801420c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801420e:	2b00      	cmp	r3, #0
 8014210:	d17a      	bne.n	8014308 <_strtod_l+0xa50>
 8014212:	f1ba 0f00 	cmp.w	sl, #0
 8014216:	d158      	bne.n	80142ca <_strtod_l+0xa12>
 8014218:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801421a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801421e:	2b00      	cmp	r3, #0
 8014220:	d15a      	bne.n	80142d8 <_strtod_l+0xa20>
 8014222:	4b64      	ldr	r3, [pc, #400]	@ (80143b4 <_strtod_l+0xafc>)
 8014224:	2200      	movs	r2, #0
 8014226:	4630      	mov	r0, r6
 8014228:	4639      	mov	r1, r7
 801422a:	f7ec fc7f 	bl	8000b2c <__aeabi_dcmplt>
 801422e:	2800      	cmp	r0, #0
 8014230:	d159      	bne.n	80142e6 <_strtod_l+0xa2e>
 8014232:	4630      	mov	r0, r6
 8014234:	4639      	mov	r1, r7
 8014236:	4b60      	ldr	r3, [pc, #384]	@ (80143b8 <_strtod_l+0xb00>)
 8014238:	2200      	movs	r2, #0
 801423a:	f7ec fa05 	bl	8000648 <__aeabi_dmul>
 801423e:	4606      	mov	r6, r0
 8014240:	460f      	mov	r7, r1
 8014242:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8014246:	9606      	str	r6, [sp, #24]
 8014248:	9307      	str	r3, [sp, #28]
 801424a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801424e:	4d57      	ldr	r5, [pc, #348]	@ (80143ac <_strtod_l+0xaf4>)
 8014250:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014256:	401d      	ands	r5, r3
 8014258:	4b58      	ldr	r3, [pc, #352]	@ (80143bc <_strtod_l+0xb04>)
 801425a:	429d      	cmp	r5, r3
 801425c:	f040 80b2 	bne.w	80143c4 <_strtod_l+0xb0c>
 8014260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014262:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8014266:	ec4b ab10 	vmov	d0, sl, fp
 801426a:	f7ff f9c9 	bl	8013600 <__ulp>
 801426e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014272:	ec51 0b10 	vmov	r0, r1, d0
 8014276:	f7ec f9e7 	bl	8000648 <__aeabi_dmul>
 801427a:	4652      	mov	r2, sl
 801427c:	465b      	mov	r3, fp
 801427e:	f7ec f82d 	bl	80002dc <__adddf3>
 8014282:	460b      	mov	r3, r1
 8014284:	4949      	ldr	r1, [pc, #292]	@ (80143ac <_strtod_l+0xaf4>)
 8014286:	4a4e      	ldr	r2, [pc, #312]	@ (80143c0 <_strtod_l+0xb08>)
 8014288:	4019      	ands	r1, r3
 801428a:	4291      	cmp	r1, r2
 801428c:	4682      	mov	sl, r0
 801428e:	d942      	bls.n	8014316 <_strtod_l+0xa5e>
 8014290:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8014292:	4b47      	ldr	r3, [pc, #284]	@ (80143b0 <_strtod_l+0xaf8>)
 8014294:	429a      	cmp	r2, r3
 8014296:	d103      	bne.n	80142a0 <_strtod_l+0x9e8>
 8014298:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801429a:	3301      	adds	r3, #1
 801429c:	f43f ad2b 	beq.w	8013cf6 <_strtod_l+0x43e>
 80142a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80143b0 <_strtod_l+0xaf8>
 80142a4:	f04f 3aff 	mov.w	sl, #4294967295
 80142a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80142aa:	9805      	ldr	r0, [sp, #20]
 80142ac:	f7fe fe74 	bl	8012f98 <_Bfree>
 80142b0:	9805      	ldr	r0, [sp, #20]
 80142b2:	4649      	mov	r1, r9
 80142b4:	f7fe fe70 	bl	8012f98 <_Bfree>
 80142b8:	9805      	ldr	r0, [sp, #20]
 80142ba:	4641      	mov	r1, r8
 80142bc:	f7fe fe6c 	bl	8012f98 <_Bfree>
 80142c0:	9805      	ldr	r0, [sp, #20]
 80142c2:	4621      	mov	r1, r4
 80142c4:	f7fe fe68 	bl	8012f98 <_Bfree>
 80142c8:	e618      	b.n	8013efc <_strtod_l+0x644>
 80142ca:	f1ba 0f01 	cmp.w	sl, #1
 80142ce:	d103      	bne.n	80142d8 <_strtod_l+0xa20>
 80142d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	f43f ada5 	beq.w	8013e22 <_strtod_l+0x56a>
 80142d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8014388 <_strtod_l+0xad0>
 80142dc:	4f35      	ldr	r7, [pc, #212]	@ (80143b4 <_strtod_l+0xafc>)
 80142de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80142e2:	2600      	movs	r6, #0
 80142e4:	e7b1      	b.n	801424a <_strtod_l+0x992>
 80142e6:	4f34      	ldr	r7, [pc, #208]	@ (80143b8 <_strtod_l+0xb00>)
 80142e8:	2600      	movs	r6, #0
 80142ea:	e7aa      	b.n	8014242 <_strtod_l+0x98a>
 80142ec:	4b32      	ldr	r3, [pc, #200]	@ (80143b8 <_strtod_l+0xb00>)
 80142ee:	4630      	mov	r0, r6
 80142f0:	4639      	mov	r1, r7
 80142f2:	2200      	movs	r2, #0
 80142f4:	f7ec f9a8 	bl	8000648 <__aeabi_dmul>
 80142f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80142fa:	4606      	mov	r6, r0
 80142fc:	460f      	mov	r7, r1
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d09f      	beq.n	8014242 <_strtod_l+0x98a>
 8014302:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8014306:	e7a0      	b.n	801424a <_strtod_l+0x992>
 8014308:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8014390 <_strtod_l+0xad8>
 801430c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014310:	ec57 6b17 	vmov	r6, r7, d7
 8014314:	e799      	b.n	801424a <_strtod_l+0x992>
 8014316:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801431a:	9b08      	ldr	r3, [sp, #32]
 801431c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8014320:	2b00      	cmp	r3, #0
 8014322:	d1c1      	bne.n	80142a8 <_strtod_l+0x9f0>
 8014324:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8014328:	0d1b      	lsrs	r3, r3, #20
 801432a:	051b      	lsls	r3, r3, #20
 801432c:	429d      	cmp	r5, r3
 801432e:	d1bb      	bne.n	80142a8 <_strtod_l+0x9f0>
 8014330:	4630      	mov	r0, r6
 8014332:	4639      	mov	r1, r7
 8014334:	f7ec fce8 	bl	8000d08 <__aeabi_d2lz>
 8014338:	f7ec f958 	bl	80005ec <__aeabi_l2d>
 801433c:	4602      	mov	r2, r0
 801433e:	460b      	mov	r3, r1
 8014340:	4630      	mov	r0, r6
 8014342:	4639      	mov	r1, r7
 8014344:	f7eb ffc8 	bl	80002d8 <__aeabi_dsub>
 8014348:	460b      	mov	r3, r1
 801434a:	4602      	mov	r2, r0
 801434c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8014350:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8014354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014356:	ea46 060a 	orr.w	r6, r6, sl
 801435a:	431e      	orrs	r6, r3
 801435c:	d06f      	beq.n	801443e <_strtod_l+0xb86>
 801435e:	a30e      	add	r3, pc, #56	@ (adr r3, 8014398 <_strtod_l+0xae0>)
 8014360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014364:	f7ec fbe2 	bl	8000b2c <__aeabi_dcmplt>
 8014368:	2800      	cmp	r0, #0
 801436a:	f47f accf 	bne.w	8013d0c <_strtod_l+0x454>
 801436e:	a30c      	add	r3, pc, #48	@ (adr r3, 80143a0 <_strtod_l+0xae8>)
 8014370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8014378:	f7ec fbf6 	bl	8000b68 <__aeabi_dcmpgt>
 801437c:	2800      	cmp	r0, #0
 801437e:	d093      	beq.n	80142a8 <_strtod_l+0x9f0>
 8014380:	e4c4      	b.n	8013d0c <_strtod_l+0x454>
 8014382:	bf00      	nop
 8014384:	f3af 8000 	nop.w
 8014388:	00000000 	.word	0x00000000
 801438c:	bff00000 	.word	0xbff00000
 8014390:	00000000 	.word	0x00000000
 8014394:	3ff00000 	.word	0x3ff00000
 8014398:	94a03595 	.word	0x94a03595
 801439c:	3fdfffff 	.word	0x3fdfffff
 80143a0:	35afe535 	.word	0x35afe535
 80143a4:	3fe00000 	.word	0x3fe00000
 80143a8:	000fffff 	.word	0x000fffff
 80143ac:	7ff00000 	.word	0x7ff00000
 80143b0:	7fefffff 	.word	0x7fefffff
 80143b4:	3ff00000 	.word	0x3ff00000
 80143b8:	3fe00000 	.word	0x3fe00000
 80143bc:	7fe00000 	.word	0x7fe00000
 80143c0:	7c9fffff 	.word	0x7c9fffff
 80143c4:	9b08      	ldr	r3, [sp, #32]
 80143c6:	b323      	cbz	r3, 8014412 <_strtod_l+0xb5a>
 80143c8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80143cc:	d821      	bhi.n	8014412 <_strtod_l+0xb5a>
 80143ce:	a328      	add	r3, pc, #160	@ (adr r3, 8014470 <_strtod_l+0xbb8>)
 80143d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143d4:	4630      	mov	r0, r6
 80143d6:	4639      	mov	r1, r7
 80143d8:	f7ec fbb2 	bl	8000b40 <__aeabi_dcmple>
 80143dc:	b1a0      	cbz	r0, 8014408 <_strtod_l+0xb50>
 80143de:	4639      	mov	r1, r7
 80143e0:	4630      	mov	r0, r6
 80143e2:	f7ec fc09 	bl	8000bf8 <__aeabi_d2uiz>
 80143e6:	2801      	cmp	r0, #1
 80143e8:	bf38      	it	cc
 80143ea:	2001      	movcc	r0, #1
 80143ec:	f7ec f8b2 	bl	8000554 <__aeabi_ui2d>
 80143f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80143f2:	4606      	mov	r6, r0
 80143f4:	460f      	mov	r7, r1
 80143f6:	b9fb      	cbnz	r3, 8014438 <_strtod_l+0xb80>
 80143f8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80143fc:	9014      	str	r0, [sp, #80]	@ 0x50
 80143fe:	9315      	str	r3, [sp, #84]	@ 0x54
 8014400:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8014404:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8014408:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801440a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801440e:	1b5b      	subs	r3, r3, r5
 8014410:	9311      	str	r3, [sp, #68]	@ 0x44
 8014412:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8014416:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801441a:	f7ff f8f1 	bl	8013600 <__ulp>
 801441e:	4650      	mov	r0, sl
 8014420:	ec53 2b10 	vmov	r2, r3, d0
 8014424:	4659      	mov	r1, fp
 8014426:	f7ec f90f 	bl	8000648 <__aeabi_dmul>
 801442a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801442e:	f7eb ff55 	bl	80002dc <__adddf3>
 8014432:	4682      	mov	sl, r0
 8014434:	468b      	mov	fp, r1
 8014436:	e770      	b.n	801431a <_strtod_l+0xa62>
 8014438:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801443c:	e7e0      	b.n	8014400 <_strtod_l+0xb48>
 801443e:	a30e      	add	r3, pc, #56	@ (adr r3, 8014478 <_strtod_l+0xbc0>)
 8014440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014444:	f7ec fb72 	bl	8000b2c <__aeabi_dcmplt>
 8014448:	e798      	b.n	801437c <_strtod_l+0xac4>
 801444a:	2300      	movs	r3, #0
 801444c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801444e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8014450:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8014452:	6013      	str	r3, [r2, #0]
 8014454:	f7ff ba6d 	b.w	8013932 <_strtod_l+0x7a>
 8014458:	2a65      	cmp	r2, #101	@ 0x65
 801445a:	f43f ab66 	beq.w	8013b2a <_strtod_l+0x272>
 801445e:	2a45      	cmp	r2, #69	@ 0x45
 8014460:	f43f ab63 	beq.w	8013b2a <_strtod_l+0x272>
 8014464:	2301      	movs	r3, #1
 8014466:	f7ff bb9e 	b.w	8013ba6 <_strtod_l+0x2ee>
 801446a:	bf00      	nop
 801446c:	f3af 8000 	nop.w
 8014470:	ffc00000 	.word	0xffc00000
 8014474:	41dfffff 	.word	0x41dfffff
 8014478:	94a03595 	.word	0x94a03595
 801447c:	3fcfffff 	.word	0x3fcfffff

08014480 <_strtod_r>:
 8014480:	4b01      	ldr	r3, [pc, #4]	@ (8014488 <_strtod_r+0x8>)
 8014482:	f7ff ba19 	b.w	80138b8 <_strtod_l>
 8014486:	bf00      	nop
 8014488:	20000248 	.word	0x20000248

0801448c <_strtol_l.constprop.0>:
 801448c:	2b24      	cmp	r3, #36	@ 0x24
 801448e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014492:	4686      	mov	lr, r0
 8014494:	4690      	mov	r8, r2
 8014496:	d801      	bhi.n	801449c <_strtol_l.constprop.0+0x10>
 8014498:	2b01      	cmp	r3, #1
 801449a:	d106      	bne.n	80144aa <_strtol_l.constprop.0+0x1e>
 801449c:	f7fd fdac 	bl	8011ff8 <__errno>
 80144a0:	2316      	movs	r3, #22
 80144a2:	6003      	str	r3, [r0, #0]
 80144a4:	2000      	movs	r0, #0
 80144a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144aa:	4834      	ldr	r0, [pc, #208]	@ (801457c <_strtol_l.constprop.0+0xf0>)
 80144ac:	460d      	mov	r5, r1
 80144ae:	462a      	mov	r2, r5
 80144b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80144b4:	5d06      	ldrb	r6, [r0, r4]
 80144b6:	f016 0608 	ands.w	r6, r6, #8
 80144ba:	d1f8      	bne.n	80144ae <_strtol_l.constprop.0+0x22>
 80144bc:	2c2d      	cmp	r4, #45	@ 0x2d
 80144be:	d12d      	bne.n	801451c <_strtol_l.constprop.0+0x90>
 80144c0:	782c      	ldrb	r4, [r5, #0]
 80144c2:	2601      	movs	r6, #1
 80144c4:	1c95      	adds	r5, r2, #2
 80144c6:	f033 0210 	bics.w	r2, r3, #16
 80144ca:	d109      	bne.n	80144e0 <_strtol_l.constprop.0+0x54>
 80144cc:	2c30      	cmp	r4, #48	@ 0x30
 80144ce:	d12a      	bne.n	8014526 <_strtol_l.constprop.0+0x9a>
 80144d0:	782a      	ldrb	r2, [r5, #0]
 80144d2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80144d6:	2a58      	cmp	r2, #88	@ 0x58
 80144d8:	d125      	bne.n	8014526 <_strtol_l.constprop.0+0x9a>
 80144da:	786c      	ldrb	r4, [r5, #1]
 80144dc:	2310      	movs	r3, #16
 80144de:	3502      	adds	r5, #2
 80144e0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80144e4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80144e8:	2200      	movs	r2, #0
 80144ea:	fbbc f9f3 	udiv	r9, ip, r3
 80144ee:	4610      	mov	r0, r2
 80144f0:	fb03 ca19 	mls	sl, r3, r9, ip
 80144f4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80144f8:	2f09      	cmp	r7, #9
 80144fa:	d81b      	bhi.n	8014534 <_strtol_l.constprop.0+0xa8>
 80144fc:	463c      	mov	r4, r7
 80144fe:	42a3      	cmp	r3, r4
 8014500:	dd27      	ble.n	8014552 <_strtol_l.constprop.0+0xc6>
 8014502:	1c57      	adds	r7, r2, #1
 8014504:	d007      	beq.n	8014516 <_strtol_l.constprop.0+0x8a>
 8014506:	4581      	cmp	r9, r0
 8014508:	d320      	bcc.n	801454c <_strtol_l.constprop.0+0xc0>
 801450a:	d101      	bne.n	8014510 <_strtol_l.constprop.0+0x84>
 801450c:	45a2      	cmp	sl, r4
 801450e:	db1d      	blt.n	801454c <_strtol_l.constprop.0+0xc0>
 8014510:	fb00 4003 	mla	r0, r0, r3, r4
 8014514:	2201      	movs	r2, #1
 8014516:	f815 4b01 	ldrb.w	r4, [r5], #1
 801451a:	e7eb      	b.n	80144f4 <_strtol_l.constprop.0+0x68>
 801451c:	2c2b      	cmp	r4, #43	@ 0x2b
 801451e:	bf04      	itt	eq
 8014520:	782c      	ldrbeq	r4, [r5, #0]
 8014522:	1c95      	addeq	r5, r2, #2
 8014524:	e7cf      	b.n	80144c6 <_strtol_l.constprop.0+0x3a>
 8014526:	2b00      	cmp	r3, #0
 8014528:	d1da      	bne.n	80144e0 <_strtol_l.constprop.0+0x54>
 801452a:	2c30      	cmp	r4, #48	@ 0x30
 801452c:	bf0c      	ite	eq
 801452e:	2308      	moveq	r3, #8
 8014530:	230a      	movne	r3, #10
 8014532:	e7d5      	b.n	80144e0 <_strtol_l.constprop.0+0x54>
 8014534:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8014538:	2f19      	cmp	r7, #25
 801453a:	d801      	bhi.n	8014540 <_strtol_l.constprop.0+0xb4>
 801453c:	3c37      	subs	r4, #55	@ 0x37
 801453e:	e7de      	b.n	80144fe <_strtol_l.constprop.0+0x72>
 8014540:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8014544:	2f19      	cmp	r7, #25
 8014546:	d804      	bhi.n	8014552 <_strtol_l.constprop.0+0xc6>
 8014548:	3c57      	subs	r4, #87	@ 0x57
 801454a:	e7d8      	b.n	80144fe <_strtol_l.constprop.0+0x72>
 801454c:	f04f 32ff 	mov.w	r2, #4294967295
 8014550:	e7e1      	b.n	8014516 <_strtol_l.constprop.0+0x8a>
 8014552:	1c53      	adds	r3, r2, #1
 8014554:	d108      	bne.n	8014568 <_strtol_l.constprop.0+0xdc>
 8014556:	2322      	movs	r3, #34	@ 0x22
 8014558:	f8ce 3000 	str.w	r3, [lr]
 801455c:	4660      	mov	r0, ip
 801455e:	f1b8 0f00 	cmp.w	r8, #0
 8014562:	d0a0      	beq.n	80144a6 <_strtol_l.constprop.0+0x1a>
 8014564:	1e69      	subs	r1, r5, #1
 8014566:	e006      	b.n	8014576 <_strtol_l.constprop.0+0xea>
 8014568:	b106      	cbz	r6, 801456c <_strtol_l.constprop.0+0xe0>
 801456a:	4240      	negs	r0, r0
 801456c:	f1b8 0f00 	cmp.w	r8, #0
 8014570:	d099      	beq.n	80144a6 <_strtol_l.constprop.0+0x1a>
 8014572:	2a00      	cmp	r2, #0
 8014574:	d1f6      	bne.n	8014564 <_strtol_l.constprop.0+0xd8>
 8014576:	f8c8 1000 	str.w	r1, [r8]
 801457a:	e794      	b.n	80144a6 <_strtol_l.constprop.0+0x1a>
 801457c:	08017421 	.word	0x08017421

08014580 <_strtol_r>:
 8014580:	f7ff bf84 	b.w	801448c <_strtol_l.constprop.0>

08014584 <__ssputs_r>:
 8014584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014588:	688e      	ldr	r6, [r1, #8]
 801458a:	461f      	mov	r7, r3
 801458c:	42be      	cmp	r6, r7
 801458e:	680b      	ldr	r3, [r1, #0]
 8014590:	4682      	mov	sl, r0
 8014592:	460c      	mov	r4, r1
 8014594:	4690      	mov	r8, r2
 8014596:	d82d      	bhi.n	80145f4 <__ssputs_r+0x70>
 8014598:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801459c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80145a0:	d026      	beq.n	80145f0 <__ssputs_r+0x6c>
 80145a2:	6965      	ldr	r5, [r4, #20]
 80145a4:	6909      	ldr	r1, [r1, #16]
 80145a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80145aa:	eba3 0901 	sub.w	r9, r3, r1
 80145ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80145b2:	1c7b      	adds	r3, r7, #1
 80145b4:	444b      	add	r3, r9
 80145b6:	106d      	asrs	r5, r5, #1
 80145b8:	429d      	cmp	r5, r3
 80145ba:	bf38      	it	cc
 80145bc:	461d      	movcc	r5, r3
 80145be:	0553      	lsls	r3, r2, #21
 80145c0:	d527      	bpl.n	8014612 <__ssputs_r+0x8e>
 80145c2:	4629      	mov	r1, r5
 80145c4:	f7fe fc1c 	bl	8012e00 <_malloc_r>
 80145c8:	4606      	mov	r6, r0
 80145ca:	b360      	cbz	r0, 8014626 <__ssputs_r+0xa2>
 80145cc:	6921      	ldr	r1, [r4, #16]
 80145ce:	464a      	mov	r2, r9
 80145d0:	f7fd fd3f 	bl	8012052 <memcpy>
 80145d4:	89a3      	ldrh	r3, [r4, #12]
 80145d6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80145da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80145de:	81a3      	strh	r3, [r4, #12]
 80145e0:	6126      	str	r6, [r4, #16]
 80145e2:	6165      	str	r5, [r4, #20]
 80145e4:	444e      	add	r6, r9
 80145e6:	eba5 0509 	sub.w	r5, r5, r9
 80145ea:	6026      	str	r6, [r4, #0]
 80145ec:	60a5      	str	r5, [r4, #8]
 80145ee:	463e      	mov	r6, r7
 80145f0:	42be      	cmp	r6, r7
 80145f2:	d900      	bls.n	80145f6 <__ssputs_r+0x72>
 80145f4:	463e      	mov	r6, r7
 80145f6:	6820      	ldr	r0, [r4, #0]
 80145f8:	4632      	mov	r2, r6
 80145fa:	4641      	mov	r1, r8
 80145fc:	f000 fd53 	bl	80150a6 <memmove>
 8014600:	68a3      	ldr	r3, [r4, #8]
 8014602:	1b9b      	subs	r3, r3, r6
 8014604:	60a3      	str	r3, [r4, #8]
 8014606:	6823      	ldr	r3, [r4, #0]
 8014608:	4433      	add	r3, r6
 801460a:	6023      	str	r3, [r4, #0]
 801460c:	2000      	movs	r0, #0
 801460e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014612:	462a      	mov	r2, r5
 8014614:	f001 f8f9 	bl	801580a <_realloc_r>
 8014618:	4606      	mov	r6, r0
 801461a:	2800      	cmp	r0, #0
 801461c:	d1e0      	bne.n	80145e0 <__ssputs_r+0x5c>
 801461e:	6921      	ldr	r1, [r4, #16]
 8014620:	4650      	mov	r0, sl
 8014622:	f7fe fb79 	bl	8012d18 <_free_r>
 8014626:	230c      	movs	r3, #12
 8014628:	f8ca 3000 	str.w	r3, [sl]
 801462c:	89a3      	ldrh	r3, [r4, #12]
 801462e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014632:	81a3      	strh	r3, [r4, #12]
 8014634:	f04f 30ff 	mov.w	r0, #4294967295
 8014638:	e7e9      	b.n	801460e <__ssputs_r+0x8a>
	...

0801463c <_svfiprintf_r>:
 801463c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014640:	4698      	mov	r8, r3
 8014642:	898b      	ldrh	r3, [r1, #12]
 8014644:	061b      	lsls	r3, r3, #24
 8014646:	b09d      	sub	sp, #116	@ 0x74
 8014648:	4607      	mov	r7, r0
 801464a:	460d      	mov	r5, r1
 801464c:	4614      	mov	r4, r2
 801464e:	d510      	bpl.n	8014672 <_svfiprintf_r+0x36>
 8014650:	690b      	ldr	r3, [r1, #16]
 8014652:	b973      	cbnz	r3, 8014672 <_svfiprintf_r+0x36>
 8014654:	2140      	movs	r1, #64	@ 0x40
 8014656:	f7fe fbd3 	bl	8012e00 <_malloc_r>
 801465a:	6028      	str	r0, [r5, #0]
 801465c:	6128      	str	r0, [r5, #16]
 801465e:	b930      	cbnz	r0, 801466e <_svfiprintf_r+0x32>
 8014660:	230c      	movs	r3, #12
 8014662:	603b      	str	r3, [r7, #0]
 8014664:	f04f 30ff 	mov.w	r0, #4294967295
 8014668:	b01d      	add	sp, #116	@ 0x74
 801466a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801466e:	2340      	movs	r3, #64	@ 0x40
 8014670:	616b      	str	r3, [r5, #20]
 8014672:	2300      	movs	r3, #0
 8014674:	9309      	str	r3, [sp, #36]	@ 0x24
 8014676:	2320      	movs	r3, #32
 8014678:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801467c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014680:	2330      	movs	r3, #48	@ 0x30
 8014682:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8014820 <_svfiprintf_r+0x1e4>
 8014686:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801468a:	f04f 0901 	mov.w	r9, #1
 801468e:	4623      	mov	r3, r4
 8014690:	469a      	mov	sl, r3
 8014692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014696:	b10a      	cbz	r2, 801469c <_svfiprintf_r+0x60>
 8014698:	2a25      	cmp	r2, #37	@ 0x25
 801469a:	d1f9      	bne.n	8014690 <_svfiprintf_r+0x54>
 801469c:	ebba 0b04 	subs.w	fp, sl, r4
 80146a0:	d00b      	beq.n	80146ba <_svfiprintf_r+0x7e>
 80146a2:	465b      	mov	r3, fp
 80146a4:	4622      	mov	r2, r4
 80146a6:	4629      	mov	r1, r5
 80146a8:	4638      	mov	r0, r7
 80146aa:	f7ff ff6b 	bl	8014584 <__ssputs_r>
 80146ae:	3001      	adds	r0, #1
 80146b0:	f000 80a7 	beq.w	8014802 <_svfiprintf_r+0x1c6>
 80146b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80146b6:	445a      	add	r2, fp
 80146b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80146ba:	f89a 3000 	ldrb.w	r3, [sl]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	f000 809f 	beq.w	8014802 <_svfiprintf_r+0x1c6>
 80146c4:	2300      	movs	r3, #0
 80146c6:	f04f 32ff 	mov.w	r2, #4294967295
 80146ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80146ce:	f10a 0a01 	add.w	sl, sl, #1
 80146d2:	9304      	str	r3, [sp, #16]
 80146d4:	9307      	str	r3, [sp, #28]
 80146d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80146da:	931a      	str	r3, [sp, #104]	@ 0x68
 80146dc:	4654      	mov	r4, sl
 80146de:	2205      	movs	r2, #5
 80146e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80146e4:	484e      	ldr	r0, [pc, #312]	@ (8014820 <_svfiprintf_r+0x1e4>)
 80146e6:	f7eb fd9b 	bl	8000220 <memchr>
 80146ea:	9a04      	ldr	r2, [sp, #16]
 80146ec:	b9d8      	cbnz	r0, 8014726 <_svfiprintf_r+0xea>
 80146ee:	06d0      	lsls	r0, r2, #27
 80146f0:	bf44      	itt	mi
 80146f2:	2320      	movmi	r3, #32
 80146f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80146f8:	0711      	lsls	r1, r2, #28
 80146fa:	bf44      	itt	mi
 80146fc:	232b      	movmi	r3, #43	@ 0x2b
 80146fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014702:	f89a 3000 	ldrb.w	r3, [sl]
 8014706:	2b2a      	cmp	r3, #42	@ 0x2a
 8014708:	d015      	beq.n	8014736 <_svfiprintf_r+0xfa>
 801470a:	9a07      	ldr	r2, [sp, #28]
 801470c:	4654      	mov	r4, sl
 801470e:	2000      	movs	r0, #0
 8014710:	f04f 0c0a 	mov.w	ip, #10
 8014714:	4621      	mov	r1, r4
 8014716:	f811 3b01 	ldrb.w	r3, [r1], #1
 801471a:	3b30      	subs	r3, #48	@ 0x30
 801471c:	2b09      	cmp	r3, #9
 801471e:	d94b      	bls.n	80147b8 <_svfiprintf_r+0x17c>
 8014720:	b1b0      	cbz	r0, 8014750 <_svfiprintf_r+0x114>
 8014722:	9207      	str	r2, [sp, #28]
 8014724:	e014      	b.n	8014750 <_svfiprintf_r+0x114>
 8014726:	eba0 0308 	sub.w	r3, r0, r8
 801472a:	fa09 f303 	lsl.w	r3, r9, r3
 801472e:	4313      	orrs	r3, r2
 8014730:	9304      	str	r3, [sp, #16]
 8014732:	46a2      	mov	sl, r4
 8014734:	e7d2      	b.n	80146dc <_svfiprintf_r+0xa0>
 8014736:	9b03      	ldr	r3, [sp, #12]
 8014738:	1d19      	adds	r1, r3, #4
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	9103      	str	r1, [sp, #12]
 801473e:	2b00      	cmp	r3, #0
 8014740:	bfbb      	ittet	lt
 8014742:	425b      	neglt	r3, r3
 8014744:	f042 0202 	orrlt.w	r2, r2, #2
 8014748:	9307      	strge	r3, [sp, #28]
 801474a:	9307      	strlt	r3, [sp, #28]
 801474c:	bfb8      	it	lt
 801474e:	9204      	strlt	r2, [sp, #16]
 8014750:	7823      	ldrb	r3, [r4, #0]
 8014752:	2b2e      	cmp	r3, #46	@ 0x2e
 8014754:	d10a      	bne.n	801476c <_svfiprintf_r+0x130>
 8014756:	7863      	ldrb	r3, [r4, #1]
 8014758:	2b2a      	cmp	r3, #42	@ 0x2a
 801475a:	d132      	bne.n	80147c2 <_svfiprintf_r+0x186>
 801475c:	9b03      	ldr	r3, [sp, #12]
 801475e:	1d1a      	adds	r2, r3, #4
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	9203      	str	r2, [sp, #12]
 8014764:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014768:	3402      	adds	r4, #2
 801476a:	9305      	str	r3, [sp, #20]
 801476c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8014830 <_svfiprintf_r+0x1f4>
 8014770:	7821      	ldrb	r1, [r4, #0]
 8014772:	2203      	movs	r2, #3
 8014774:	4650      	mov	r0, sl
 8014776:	f7eb fd53 	bl	8000220 <memchr>
 801477a:	b138      	cbz	r0, 801478c <_svfiprintf_r+0x150>
 801477c:	9b04      	ldr	r3, [sp, #16]
 801477e:	eba0 000a 	sub.w	r0, r0, sl
 8014782:	2240      	movs	r2, #64	@ 0x40
 8014784:	4082      	lsls	r2, r0
 8014786:	4313      	orrs	r3, r2
 8014788:	3401      	adds	r4, #1
 801478a:	9304      	str	r3, [sp, #16]
 801478c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014790:	4824      	ldr	r0, [pc, #144]	@ (8014824 <_svfiprintf_r+0x1e8>)
 8014792:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014796:	2206      	movs	r2, #6
 8014798:	f7eb fd42 	bl	8000220 <memchr>
 801479c:	2800      	cmp	r0, #0
 801479e:	d036      	beq.n	801480e <_svfiprintf_r+0x1d2>
 80147a0:	4b21      	ldr	r3, [pc, #132]	@ (8014828 <_svfiprintf_r+0x1ec>)
 80147a2:	bb1b      	cbnz	r3, 80147ec <_svfiprintf_r+0x1b0>
 80147a4:	9b03      	ldr	r3, [sp, #12]
 80147a6:	3307      	adds	r3, #7
 80147a8:	f023 0307 	bic.w	r3, r3, #7
 80147ac:	3308      	adds	r3, #8
 80147ae:	9303      	str	r3, [sp, #12]
 80147b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80147b2:	4433      	add	r3, r6
 80147b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80147b6:	e76a      	b.n	801468e <_svfiprintf_r+0x52>
 80147b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80147bc:	460c      	mov	r4, r1
 80147be:	2001      	movs	r0, #1
 80147c0:	e7a8      	b.n	8014714 <_svfiprintf_r+0xd8>
 80147c2:	2300      	movs	r3, #0
 80147c4:	3401      	adds	r4, #1
 80147c6:	9305      	str	r3, [sp, #20]
 80147c8:	4619      	mov	r1, r3
 80147ca:	f04f 0c0a 	mov.w	ip, #10
 80147ce:	4620      	mov	r0, r4
 80147d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147d4:	3a30      	subs	r2, #48	@ 0x30
 80147d6:	2a09      	cmp	r2, #9
 80147d8:	d903      	bls.n	80147e2 <_svfiprintf_r+0x1a6>
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d0c6      	beq.n	801476c <_svfiprintf_r+0x130>
 80147de:	9105      	str	r1, [sp, #20]
 80147e0:	e7c4      	b.n	801476c <_svfiprintf_r+0x130>
 80147e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80147e6:	4604      	mov	r4, r0
 80147e8:	2301      	movs	r3, #1
 80147ea:	e7f0      	b.n	80147ce <_svfiprintf_r+0x192>
 80147ec:	ab03      	add	r3, sp, #12
 80147ee:	9300      	str	r3, [sp, #0]
 80147f0:	462a      	mov	r2, r5
 80147f2:	4b0e      	ldr	r3, [pc, #56]	@ (801482c <_svfiprintf_r+0x1f0>)
 80147f4:	a904      	add	r1, sp, #16
 80147f6:	4638      	mov	r0, r7
 80147f8:	f7fc fc7c 	bl	80110f4 <_printf_float>
 80147fc:	1c42      	adds	r2, r0, #1
 80147fe:	4606      	mov	r6, r0
 8014800:	d1d6      	bne.n	80147b0 <_svfiprintf_r+0x174>
 8014802:	89ab      	ldrh	r3, [r5, #12]
 8014804:	065b      	lsls	r3, r3, #25
 8014806:	f53f af2d 	bmi.w	8014664 <_svfiprintf_r+0x28>
 801480a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801480c:	e72c      	b.n	8014668 <_svfiprintf_r+0x2c>
 801480e:	ab03      	add	r3, sp, #12
 8014810:	9300      	str	r3, [sp, #0]
 8014812:	462a      	mov	r2, r5
 8014814:	4b05      	ldr	r3, [pc, #20]	@ (801482c <_svfiprintf_r+0x1f0>)
 8014816:	a904      	add	r1, sp, #16
 8014818:	4638      	mov	r0, r7
 801481a:	f7fc ff03 	bl	8011624 <_printf_i>
 801481e:	e7ed      	b.n	80147fc <_svfiprintf_r+0x1c0>
 8014820:	08017521 	.word	0x08017521
 8014824:	0801752b 	.word	0x0801752b
 8014828:	080110f5 	.word	0x080110f5
 801482c:	08014585 	.word	0x08014585
 8014830:	08017527 	.word	0x08017527

08014834 <_sungetc_r>:
 8014834:	b538      	push	{r3, r4, r5, lr}
 8014836:	1c4b      	adds	r3, r1, #1
 8014838:	4614      	mov	r4, r2
 801483a:	d103      	bne.n	8014844 <_sungetc_r+0x10>
 801483c:	f04f 35ff 	mov.w	r5, #4294967295
 8014840:	4628      	mov	r0, r5
 8014842:	bd38      	pop	{r3, r4, r5, pc}
 8014844:	8993      	ldrh	r3, [r2, #12]
 8014846:	f023 0320 	bic.w	r3, r3, #32
 801484a:	8193      	strh	r3, [r2, #12]
 801484c:	6853      	ldr	r3, [r2, #4]
 801484e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8014850:	b2cd      	uxtb	r5, r1
 8014852:	b18a      	cbz	r2, 8014878 <_sungetc_r+0x44>
 8014854:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8014856:	429a      	cmp	r2, r3
 8014858:	dd08      	ble.n	801486c <_sungetc_r+0x38>
 801485a:	6823      	ldr	r3, [r4, #0]
 801485c:	1e5a      	subs	r2, r3, #1
 801485e:	6022      	str	r2, [r4, #0]
 8014860:	f803 5c01 	strb.w	r5, [r3, #-1]
 8014864:	6863      	ldr	r3, [r4, #4]
 8014866:	3301      	adds	r3, #1
 8014868:	6063      	str	r3, [r4, #4]
 801486a:	e7e9      	b.n	8014840 <_sungetc_r+0xc>
 801486c:	4621      	mov	r1, r4
 801486e:	f000 fbe0 	bl	8015032 <__submore>
 8014872:	2800      	cmp	r0, #0
 8014874:	d0f1      	beq.n	801485a <_sungetc_r+0x26>
 8014876:	e7e1      	b.n	801483c <_sungetc_r+0x8>
 8014878:	6921      	ldr	r1, [r4, #16]
 801487a:	6822      	ldr	r2, [r4, #0]
 801487c:	b141      	cbz	r1, 8014890 <_sungetc_r+0x5c>
 801487e:	4291      	cmp	r1, r2
 8014880:	d206      	bcs.n	8014890 <_sungetc_r+0x5c>
 8014882:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8014886:	42a9      	cmp	r1, r5
 8014888:	d102      	bne.n	8014890 <_sungetc_r+0x5c>
 801488a:	3a01      	subs	r2, #1
 801488c:	6022      	str	r2, [r4, #0]
 801488e:	e7ea      	b.n	8014866 <_sungetc_r+0x32>
 8014890:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8014894:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014898:	6363      	str	r3, [r4, #52]	@ 0x34
 801489a:	2303      	movs	r3, #3
 801489c:	63a3      	str	r3, [r4, #56]	@ 0x38
 801489e:	4623      	mov	r3, r4
 80148a0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80148a4:	6023      	str	r3, [r4, #0]
 80148a6:	2301      	movs	r3, #1
 80148a8:	e7de      	b.n	8014868 <_sungetc_r+0x34>

080148aa <__ssrefill_r>:
 80148aa:	b510      	push	{r4, lr}
 80148ac:	460c      	mov	r4, r1
 80148ae:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80148b0:	b169      	cbz	r1, 80148ce <__ssrefill_r+0x24>
 80148b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80148b6:	4299      	cmp	r1, r3
 80148b8:	d001      	beq.n	80148be <__ssrefill_r+0x14>
 80148ba:	f7fe fa2d 	bl	8012d18 <_free_r>
 80148be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80148c0:	6063      	str	r3, [r4, #4]
 80148c2:	2000      	movs	r0, #0
 80148c4:	6360      	str	r0, [r4, #52]	@ 0x34
 80148c6:	b113      	cbz	r3, 80148ce <__ssrefill_r+0x24>
 80148c8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80148ca:	6023      	str	r3, [r4, #0]
 80148cc:	bd10      	pop	{r4, pc}
 80148ce:	6923      	ldr	r3, [r4, #16]
 80148d0:	6023      	str	r3, [r4, #0]
 80148d2:	2300      	movs	r3, #0
 80148d4:	6063      	str	r3, [r4, #4]
 80148d6:	89a3      	ldrh	r3, [r4, #12]
 80148d8:	f043 0320 	orr.w	r3, r3, #32
 80148dc:	81a3      	strh	r3, [r4, #12]
 80148de:	f04f 30ff 	mov.w	r0, #4294967295
 80148e2:	e7f3      	b.n	80148cc <__ssrefill_r+0x22>

080148e4 <__ssvfiscanf_r>:
 80148e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80148e8:	460c      	mov	r4, r1
 80148ea:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80148ee:	2100      	movs	r1, #0
 80148f0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80148f4:	49a5      	ldr	r1, [pc, #660]	@ (8014b8c <__ssvfiscanf_r+0x2a8>)
 80148f6:	91a0      	str	r1, [sp, #640]	@ 0x280
 80148f8:	f10d 0804 	add.w	r8, sp, #4
 80148fc:	49a4      	ldr	r1, [pc, #656]	@ (8014b90 <__ssvfiscanf_r+0x2ac>)
 80148fe:	4fa5      	ldr	r7, [pc, #660]	@ (8014b94 <__ssvfiscanf_r+0x2b0>)
 8014900:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8014904:	4606      	mov	r6, r0
 8014906:	91a1      	str	r1, [sp, #644]	@ 0x284
 8014908:	9300      	str	r3, [sp, #0]
 801490a:	7813      	ldrb	r3, [r2, #0]
 801490c:	2b00      	cmp	r3, #0
 801490e:	f000 8158 	beq.w	8014bc2 <__ssvfiscanf_r+0x2de>
 8014912:	5cf9      	ldrb	r1, [r7, r3]
 8014914:	f011 0108 	ands.w	r1, r1, #8
 8014918:	f102 0501 	add.w	r5, r2, #1
 801491c:	d019      	beq.n	8014952 <__ssvfiscanf_r+0x6e>
 801491e:	6863      	ldr	r3, [r4, #4]
 8014920:	2b00      	cmp	r3, #0
 8014922:	dd0f      	ble.n	8014944 <__ssvfiscanf_r+0x60>
 8014924:	6823      	ldr	r3, [r4, #0]
 8014926:	781a      	ldrb	r2, [r3, #0]
 8014928:	5cba      	ldrb	r2, [r7, r2]
 801492a:	0712      	lsls	r2, r2, #28
 801492c:	d401      	bmi.n	8014932 <__ssvfiscanf_r+0x4e>
 801492e:	462a      	mov	r2, r5
 8014930:	e7eb      	b.n	801490a <__ssvfiscanf_r+0x26>
 8014932:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8014934:	3201      	adds	r2, #1
 8014936:	9245      	str	r2, [sp, #276]	@ 0x114
 8014938:	6862      	ldr	r2, [r4, #4]
 801493a:	3301      	adds	r3, #1
 801493c:	3a01      	subs	r2, #1
 801493e:	6062      	str	r2, [r4, #4]
 8014940:	6023      	str	r3, [r4, #0]
 8014942:	e7ec      	b.n	801491e <__ssvfiscanf_r+0x3a>
 8014944:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014946:	4621      	mov	r1, r4
 8014948:	4630      	mov	r0, r6
 801494a:	4798      	blx	r3
 801494c:	2800      	cmp	r0, #0
 801494e:	d0e9      	beq.n	8014924 <__ssvfiscanf_r+0x40>
 8014950:	e7ed      	b.n	801492e <__ssvfiscanf_r+0x4a>
 8014952:	2b25      	cmp	r3, #37	@ 0x25
 8014954:	d012      	beq.n	801497c <__ssvfiscanf_r+0x98>
 8014956:	4699      	mov	r9, r3
 8014958:	6863      	ldr	r3, [r4, #4]
 801495a:	2b00      	cmp	r3, #0
 801495c:	f340 8093 	ble.w	8014a86 <__ssvfiscanf_r+0x1a2>
 8014960:	6822      	ldr	r2, [r4, #0]
 8014962:	7813      	ldrb	r3, [r2, #0]
 8014964:	454b      	cmp	r3, r9
 8014966:	f040 812c 	bne.w	8014bc2 <__ssvfiscanf_r+0x2de>
 801496a:	6863      	ldr	r3, [r4, #4]
 801496c:	3b01      	subs	r3, #1
 801496e:	6063      	str	r3, [r4, #4]
 8014970:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8014972:	3201      	adds	r2, #1
 8014974:	3301      	adds	r3, #1
 8014976:	6022      	str	r2, [r4, #0]
 8014978:	9345      	str	r3, [sp, #276]	@ 0x114
 801497a:	e7d8      	b.n	801492e <__ssvfiscanf_r+0x4a>
 801497c:	9141      	str	r1, [sp, #260]	@ 0x104
 801497e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8014980:	7853      	ldrb	r3, [r2, #1]
 8014982:	2b2a      	cmp	r3, #42	@ 0x2a
 8014984:	bf02      	ittt	eq
 8014986:	2310      	moveq	r3, #16
 8014988:	1c95      	addeq	r5, r2, #2
 801498a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801498c:	220a      	movs	r2, #10
 801498e:	46a9      	mov	r9, r5
 8014990:	f819 1b01 	ldrb.w	r1, [r9], #1
 8014994:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8014998:	2b09      	cmp	r3, #9
 801499a:	d91e      	bls.n	80149da <__ssvfiscanf_r+0xf6>
 801499c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8014b98 <__ssvfiscanf_r+0x2b4>
 80149a0:	2203      	movs	r2, #3
 80149a2:	4650      	mov	r0, sl
 80149a4:	f7eb fc3c 	bl	8000220 <memchr>
 80149a8:	b138      	cbz	r0, 80149ba <__ssvfiscanf_r+0xd6>
 80149aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80149ac:	eba0 000a 	sub.w	r0, r0, sl
 80149b0:	2301      	movs	r3, #1
 80149b2:	4083      	lsls	r3, r0
 80149b4:	4313      	orrs	r3, r2
 80149b6:	9341      	str	r3, [sp, #260]	@ 0x104
 80149b8:	464d      	mov	r5, r9
 80149ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80149be:	2b78      	cmp	r3, #120	@ 0x78
 80149c0:	d806      	bhi.n	80149d0 <__ssvfiscanf_r+0xec>
 80149c2:	2b57      	cmp	r3, #87	@ 0x57
 80149c4:	d810      	bhi.n	80149e8 <__ssvfiscanf_r+0x104>
 80149c6:	2b25      	cmp	r3, #37	@ 0x25
 80149c8:	d0c5      	beq.n	8014956 <__ssvfiscanf_r+0x72>
 80149ca:	d857      	bhi.n	8014a7c <__ssvfiscanf_r+0x198>
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d065      	beq.n	8014a9c <__ssvfiscanf_r+0x1b8>
 80149d0:	2303      	movs	r3, #3
 80149d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80149d4:	230a      	movs	r3, #10
 80149d6:	9342      	str	r3, [sp, #264]	@ 0x108
 80149d8:	e078      	b.n	8014acc <__ssvfiscanf_r+0x1e8>
 80149da:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80149dc:	fb02 1103 	mla	r1, r2, r3, r1
 80149e0:	3930      	subs	r1, #48	@ 0x30
 80149e2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80149e4:	464d      	mov	r5, r9
 80149e6:	e7d2      	b.n	801498e <__ssvfiscanf_r+0xaa>
 80149e8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80149ec:	2a20      	cmp	r2, #32
 80149ee:	d8ef      	bhi.n	80149d0 <__ssvfiscanf_r+0xec>
 80149f0:	a101      	add	r1, pc, #4	@ (adr r1, 80149f8 <__ssvfiscanf_r+0x114>)
 80149f2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80149f6:	bf00      	nop
 80149f8:	08014aab 	.word	0x08014aab
 80149fc:	080149d1 	.word	0x080149d1
 8014a00:	080149d1 	.word	0x080149d1
 8014a04:	08014b05 	.word	0x08014b05
 8014a08:	080149d1 	.word	0x080149d1
 8014a0c:	080149d1 	.word	0x080149d1
 8014a10:	080149d1 	.word	0x080149d1
 8014a14:	080149d1 	.word	0x080149d1
 8014a18:	080149d1 	.word	0x080149d1
 8014a1c:	080149d1 	.word	0x080149d1
 8014a20:	080149d1 	.word	0x080149d1
 8014a24:	08014b1b 	.word	0x08014b1b
 8014a28:	08014b01 	.word	0x08014b01
 8014a2c:	08014a83 	.word	0x08014a83
 8014a30:	08014a83 	.word	0x08014a83
 8014a34:	08014a83 	.word	0x08014a83
 8014a38:	080149d1 	.word	0x080149d1
 8014a3c:	08014abd 	.word	0x08014abd
 8014a40:	080149d1 	.word	0x080149d1
 8014a44:	080149d1 	.word	0x080149d1
 8014a48:	080149d1 	.word	0x080149d1
 8014a4c:	080149d1 	.word	0x080149d1
 8014a50:	08014b2b 	.word	0x08014b2b
 8014a54:	08014ac5 	.word	0x08014ac5
 8014a58:	08014aa3 	.word	0x08014aa3
 8014a5c:	080149d1 	.word	0x080149d1
 8014a60:	080149d1 	.word	0x080149d1
 8014a64:	08014b27 	.word	0x08014b27
 8014a68:	080149d1 	.word	0x080149d1
 8014a6c:	08014b01 	.word	0x08014b01
 8014a70:	080149d1 	.word	0x080149d1
 8014a74:	080149d1 	.word	0x080149d1
 8014a78:	08014aab 	.word	0x08014aab
 8014a7c:	3b45      	subs	r3, #69	@ 0x45
 8014a7e:	2b02      	cmp	r3, #2
 8014a80:	d8a6      	bhi.n	80149d0 <__ssvfiscanf_r+0xec>
 8014a82:	2305      	movs	r3, #5
 8014a84:	e021      	b.n	8014aca <__ssvfiscanf_r+0x1e6>
 8014a86:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014a88:	4621      	mov	r1, r4
 8014a8a:	4630      	mov	r0, r6
 8014a8c:	4798      	blx	r3
 8014a8e:	2800      	cmp	r0, #0
 8014a90:	f43f af66 	beq.w	8014960 <__ssvfiscanf_r+0x7c>
 8014a94:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014a96:	2800      	cmp	r0, #0
 8014a98:	f040 808b 	bne.w	8014bb2 <__ssvfiscanf_r+0x2ce>
 8014a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8014aa0:	e08b      	b.n	8014bba <__ssvfiscanf_r+0x2d6>
 8014aa2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014aa4:	f042 0220 	orr.w	r2, r2, #32
 8014aa8:	9241      	str	r2, [sp, #260]	@ 0x104
 8014aaa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8014aac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014ab0:	9241      	str	r2, [sp, #260]	@ 0x104
 8014ab2:	2210      	movs	r2, #16
 8014ab4:	2b6e      	cmp	r3, #110	@ 0x6e
 8014ab6:	9242      	str	r2, [sp, #264]	@ 0x108
 8014ab8:	d902      	bls.n	8014ac0 <__ssvfiscanf_r+0x1dc>
 8014aba:	e005      	b.n	8014ac8 <__ssvfiscanf_r+0x1e4>
 8014abc:	2300      	movs	r3, #0
 8014abe:	9342      	str	r3, [sp, #264]	@ 0x108
 8014ac0:	2303      	movs	r3, #3
 8014ac2:	e002      	b.n	8014aca <__ssvfiscanf_r+0x1e6>
 8014ac4:	2308      	movs	r3, #8
 8014ac6:	9342      	str	r3, [sp, #264]	@ 0x108
 8014ac8:	2304      	movs	r3, #4
 8014aca:	9347      	str	r3, [sp, #284]	@ 0x11c
 8014acc:	6863      	ldr	r3, [r4, #4]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	dd39      	ble.n	8014b46 <__ssvfiscanf_r+0x262>
 8014ad2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014ad4:	0659      	lsls	r1, r3, #25
 8014ad6:	d404      	bmi.n	8014ae2 <__ssvfiscanf_r+0x1fe>
 8014ad8:	6823      	ldr	r3, [r4, #0]
 8014ada:	781a      	ldrb	r2, [r3, #0]
 8014adc:	5cba      	ldrb	r2, [r7, r2]
 8014ade:	0712      	lsls	r2, r2, #28
 8014ae0:	d438      	bmi.n	8014b54 <__ssvfiscanf_r+0x270>
 8014ae2:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8014ae4:	2b02      	cmp	r3, #2
 8014ae6:	dc47      	bgt.n	8014b78 <__ssvfiscanf_r+0x294>
 8014ae8:	466b      	mov	r3, sp
 8014aea:	4622      	mov	r2, r4
 8014aec:	a941      	add	r1, sp, #260	@ 0x104
 8014aee:	4630      	mov	r0, r6
 8014af0:	f000 f86c 	bl	8014bcc <_scanf_chars>
 8014af4:	2801      	cmp	r0, #1
 8014af6:	d064      	beq.n	8014bc2 <__ssvfiscanf_r+0x2de>
 8014af8:	2802      	cmp	r0, #2
 8014afa:	f47f af18 	bne.w	801492e <__ssvfiscanf_r+0x4a>
 8014afe:	e7c9      	b.n	8014a94 <__ssvfiscanf_r+0x1b0>
 8014b00:	220a      	movs	r2, #10
 8014b02:	e7d7      	b.n	8014ab4 <__ssvfiscanf_r+0x1d0>
 8014b04:	4629      	mov	r1, r5
 8014b06:	4640      	mov	r0, r8
 8014b08:	f000 fa5a 	bl	8014fc0 <__sccl>
 8014b0c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b12:	9341      	str	r3, [sp, #260]	@ 0x104
 8014b14:	4605      	mov	r5, r0
 8014b16:	2301      	movs	r3, #1
 8014b18:	e7d7      	b.n	8014aca <__ssvfiscanf_r+0x1e6>
 8014b1a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8014b1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014b20:	9341      	str	r3, [sp, #260]	@ 0x104
 8014b22:	2300      	movs	r3, #0
 8014b24:	e7d1      	b.n	8014aca <__ssvfiscanf_r+0x1e6>
 8014b26:	2302      	movs	r3, #2
 8014b28:	e7cf      	b.n	8014aca <__ssvfiscanf_r+0x1e6>
 8014b2a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8014b2c:	06c3      	lsls	r3, r0, #27
 8014b2e:	f53f aefe 	bmi.w	801492e <__ssvfiscanf_r+0x4a>
 8014b32:	9b00      	ldr	r3, [sp, #0]
 8014b34:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8014b36:	1d19      	adds	r1, r3, #4
 8014b38:	9100      	str	r1, [sp, #0]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	07c0      	lsls	r0, r0, #31
 8014b3e:	bf4c      	ite	mi
 8014b40:	801a      	strhmi	r2, [r3, #0]
 8014b42:	601a      	strpl	r2, [r3, #0]
 8014b44:	e6f3      	b.n	801492e <__ssvfiscanf_r+0x4a>
 8014b46:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014b48:	4621      	mov	r1, r4
 8014b4a:	4630      	mov	r0, r6
 8014b4c:	4798      	blx	r3
 8014b4e:	2800      	cmp	r0, #0
 8014b50:	d0bf      	beq.n	8014ad2 <__ssvfiscanf_r+0x1ee>
 8014b52:	e79f      	b.n	8014a94 <__ssvfiscanf_r+0x1b0>
 8014b54:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8014b56:	3201      	adds	r2, #1
 8014b58:	9245      	str	r2, [sp, #276]	@ 0x114
 8014b5a:	6862      	ldr	r2, [r4, #4]
 8014b5c:	3a01      	subs	r2, #1
 8014b5e:	2a00      	cmp	r2, #0
 8014b60:	6062      	str	r2, [r4, #4]
 8014b62:	dd02      	ble.n	8014b6a <__ssvfiscanf_r+0x286>
 8014b64:	3301      	adds	r3, #1
 8014b66:	6023      	str	r3, [r4, #0]
 8014b68:	e7b6      	b.n	8014ad8 <__ssvfiscanf_r+0x1f4>
 8014b6a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8014b6c:	4621      	mov	r1, r4
 8014b6e:	4630      	mov	r0, r6
 8014b70:	4798      	blx	r3
 8014b72:	2800      	cmp	r0, #0
 8014b74:	d0b0      	beq.n	8014ad8 <__ssvfiscanf_r+0x1f4>
 8014b76:	e78d      	b.n	8014a94 <__ssvfiscanf_r+0x1b0>
 8014b78:	2b04      	cmp	r3, #4
 8014b7a:	dc0f      	bgt.n	8014b9c <__ssvfiscanf_r+0x2b8>
 8014b7c:	466b      	mov	r3, sp
 8014b7e:	4622      	mov	r2, r4
 8014b80:	a941      	add	r1, sp, #260	@ 0x104
 8014b82:	4630      	mov	r0, r6
 8014b84:	f000 f87c 	bl	8014c80 <_scanf_i>
 8014b88:	e7b4      	b.n	8014af4 <__ssvfiscanf_r+0x210>
 8014b8a:	bf00      	nop
 8014b8c:	08014835 	.word	0x08014835
 8014b90:	080148ab 	.word	0x080148ab
 8014b94:	08017421 	.word	0x08017421
 8014b98:	08017527 	.word	0x08017527
 8014b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8014bc8 <__ssvfiscanf_r+0x2e4>)
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	f43f aec5 	beq.w	801492e <__ssvfiscanf_r+0x4a>
 8014ba4:	466b      	mov	r3, sp
 8014ba6:	4622      	mov	r2, r4
 8014ba8:	a941      	add	r1, sp, #260	@ 0x104
 8014baa:	4630      	mov	r0, r6
 8014bac:	f7fc fe5a 	bl	8011864 <_scanf_float>
 8014bb0:	e7a0      	b.n	8014af4 <__ssvfiscanf_r+0x210>
 8014bb2:	89a3      	ldrh	r3, [r4, #12]
 8014bb4:	065b      	lsls	r3, r3, #25
 8014bb6:	f53f af71 	bmi.w	8014a9c <__ssvfiscanf_r+0x1b8>
 8014bba:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8014bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014bc2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8014bc4:	e7f9      	b.n	8014bba <__ssvfiscanf_r+0x2d6>
 8014bc6:	bf00      	nop
 8014bc8:	08011865 	.word	0x08011865

08014bcc <_scanf_chars>:
 8014bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014bd0:	4615      	mov	r5, r2
 8014bd2:	688a      	ldr	r2, [r1, #8]
 8014bd4:	4680      	mov	r8, r0
 8014bd6:	460c      	mov	r4, r1
 8014bd8:	b932      	cbnz	r2, 8014be8 <_scanf_chars+0x1c>
 8014bda:	698a      	ldr	r2, [r1, #24]
 8014bdc:	2a00      	cmp	r2, #0
 8014bde:	bf14      	ite	ne
 8014be0:	f04f 32ff 	movne.w	r2, #4294967295
 8014be4:	2201      	moveq	r2, #1
 8014be6:	608a      	str	r2, [r1, #8]
 8014be8:	6822      	ldr	r2, [r4, #0]
 8014bea:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8014c7c <_scanf_chars+0xb0>
 8014bee:	06d1      	lsls	r1, r2, #27
 8014bf0:	bf5f      	itttt	pl
 8014bf2:	681a      	ldrpl	r2, [r3, #0]
 8014bf4:	1d11      	addpl	r1, r2, #4
 8014bf6:	6019      	strpl	r1, [r3, #0]
 8014bf8:	6816      	ldrpl	r6, [r2, #0]
 8014bfa:	2700      	movs	r7, #0
 8014bfc:	69a0      	ldr	r0, [r4, #24]
 8014bfe:	b188      	cbz	r0, 8014c24 <_scanf_chars+0x58>
 8014c00:	2801      	cmp	r0, #1
 8014c02:	d107      	bne.n	8014c14 <_scanf_chars+0x48>
 8014c04:	682b      	ldr	r3, [r5, #0]
 8014c06:	781a      	ldrb	r2, [r3, #0]
 8014c08:	6963      	ldr	r3, [r4, #20]
 8014c0a:	5c9b      	ldrb	r3, [r3, r2]
 8014c0c:	b953      	cbnz	r3, 8014c24 <_scanf_chars+0x58>
 8014c0e:	2f00      	cmp	r7, #0
 8014c10:	d031      	beq.n	8014c76 <_scanf_chars+0xaa>
 8014c12:	e022      	b.n	8014c5a <_scanf_chars+0x8e>
 8014c14:	2802      	cmp	r0, #2
 8014c16:	d120      	bne.n	8014c5a <_scanf_chars+0x8e>
 8014c18:	682b      	ldr	r3, [r5, #0]
 8014c1a:	781b      	ldrb	r3, [r3, #0]
 8014c1c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8014c20:	071b      	lsls	r3, r3, #28
 8014c22:	d41a      	bmi.n	8014c5a <_scanf_chars+0x8e>
 8014c24:	6823      	ldr	r3, [r4, #0]
 8014c26:	06da      	lsls	r2, r3, #27
 8014c28:	bf5e      	ittt	pl
 8014c2a:	682b      	ldrpl	r3, [r5, #0]
 8014c2c:	781b      	ldrbpl	r3, [r3, #0]
 8014c2e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8014c32:	682a      	ldr	r2, [r5, #0]
 8014c34:	686b      	ldr	r3, [r5, #4]
 8014c36:	3201      	adds	r2, #1
 8014c38:	602a      	str	r2, [r5, #0]
 8014c3a:	68a2      	ldr	r2, [r4, #8]
 8014c3c:	3b01      	subs	r3, #1
 8014c3e:	3a01      	subs	r2, #1
 8014c40:	606b      	str	r3, [r5, #4]
 8014c42:	3701      	adds	r7, #1
 8014c44:	60a2      	str	r2, [r4, #8]
 8014c46:	b142      	cbz	r2, 8014c5a <_scanf_chars+0x8e>
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	dcd7      	bgt.n	8014bfc <_scanf_chars+0x30>
 8014c4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014c50:	4629      	mov	r1, r5
 8014c52:	4640      	mov	r0, r8
 8014c54:	4798      	blx	r3
 8014c56:	2800      	cmp	r0, #0
 8014c58:	d0d0      	beq.n	8014bfc <_scanf_chars+0x30>
 8014c5a:	6823      	ldr	r3, [r4, #0]
 8014c5c:	f013 0310 	ands.w	r3, r3, #16
 8014c60:	d105      	bne.n	8014c6e <_scanf_chars+0xa2>
 8014c62:	68e2      	ldr	r2, [r4, #12]
 8014c64:	3201      	adds	r2, #1
 8014c66:	60e2      	str	r2, [r4, #12]
 8014c68:	69a2      	ldr	r2, [r4, #24]
 8014c6a:	b102      	cbz	r2, 8014c6e <_scanf_chars+0xa2>
 8014c6c:	7033      	strb	r3, [r6, #0]
 8014c6e:	6923      	ldr	r3, [r4, #16]
 8014c70:	443b      	add	r3, r7
 8014c72:	6123      	str	r3, [r4, #16]
 8014c74:	2000      	movs	r0, #0
 8014c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c7a:	bf00      	nop
 8014c7c:	08017421 	.word	0x08017421

08014c80 <_scanf_i>:
 8014c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c84:	4698      	mov	r8, r3
 8014c86:	4b74      	ldr	r3, [pc, #464]	@ (8014e58 <_scanf_i+0x1d8>)
 8014c88:	460c      	mov	r4, r1
 8014c8a:	4682      	mov	sl, r0
 8014c8c:	4616      	mov	r6, r2
 8014c8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014c92:	b087      	sub	sp, #28
 8014c94:	ab03      	add	r3, sp, #12
 8014c96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8014c9a:	4b70      	ldr	r3, [pc, #448]	@ (8014e5c <_scanf_i+0x1dc>)
 8014c9c:	69a1      	ldr	r1, [r4, #24]
 8014c9e:	4a70      	ldr	r2, [pc, #448]	@ (8014e60 <_scanf_i+0x1e0>)
 8014ca0:	2903      	cmp	r1, #3
 8014ca2:	bf08      	it	eq
 8014ca4:	461a      	moveq	r2, r3
 8014ca6:	68a3      	ldr	r3, [r4, #8]
 8014ca8:	9201      	str	r2, [sp, #4]
 8014caa:	1e5a      	subs	r2, r3, #1
 8014cac:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8014cb0:	bf88      	it	hi
 8014cb2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8014cb6:	4627      	mov	r7, r4
 8014cb8:	bf82      	ittt	hi
 8014cba:	eb03 0905 	addhi.w	r9, r3, r5
 8014cbe:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8014cc2:	60a3      	strhi	r3, [r4, #8]
 8014cc4:	f857 3b1c 	ldr.w	r3, [r7], #28
 8014cc8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8014ccc:	bf98      	it	ls
 8014cce:	f04f 0900 	movls.w	r9, #0
 8014cd2:	6023      	str	r3, [r4, #0]
 8014cd4:	463d      	mov	r5, r7
 8014cd6:	f04f 0b00 	mov.w	fp, #0
 8014cda:	6831      	ldr	r1, [r6, #0]
 8014cdc:	ab03      	add	r3, sp, #12
 8014cde:	7809      	ldrb	r1, [r1, #0]
 8014ce0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014ce4:	2202      	movs	r2, #2
 8014ce6:	f7eb fa9b 	bl	8000220 <memchr>
 8014cea:	b328      	cbz	r0, 8014d38 <_scanf_i+0xb8>
 8014cec:	f1bb 0f01 	cmp.w	fp, #1
 8014cf0:	d159      	bne.n	8014da6 <_scanf_i+0x126>
 8014cf2:	6862      	ldr	r2, [r4, #4]
 8014cf4:	b92a      	cbnz	r2, 8014d02 <_scanf_i+0x82>
 8014cf6:	6822      	ldr	r2, [r4, #0]
 8014cf8:	2108      	movs	r1, #8
 8014cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8014cfe:	6061      	str	r1, [r4, #4]
 8014d00:	6022      	str	r2, [r4, #0]
 8014d02:	6822      	ldr	r2, [r4, #0]
 8014d04:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8014d08:	6022      	str	r2, [r4, #0]
 8014d0a:	68a2      	ldr	r2, [r4, #8]
 8014d0c:	1e51      	subs	r1, r2, #1
 8014d0e:	60a1      	str	r1, [r4, #8]
 8014d10:	b192      	cbz	r2, 8014d38 <_scanf_i+0xb8>
 8014d12:	6832      	ldr	r2, [r6, #0]
 8014d14:	1c51      	adds	r1, r2, #1
 8014d16:	6031      	str	r1, [r6, #0]
 8014d18:	7812      	ldrb	r2, [r2, #0]
 8014d1a:	f805 2b01 	strb.w	r2, [r5], #1
 8014d1e:	6872      	ldr	r2, [r6, #4]
 8014d20:	3a01      	subs	r2, #1
 8014d22:	2a00      	cmp	r2, #0
 8014d24:	6072      	str	r2, [r6, #4]
 8014d26:	dc07      	bgt.n	8014d38 <_scanf_i+0xb8>
 8014d28:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8014d2c:	4631      	mov	r1, r6
 8014d2e:	4650      	mov	r0, sl
 8014d30:	4790      	blx	r2
 8014d32:	2800      	cmp	r0, #0
 8014d34:	f040 8085 	bne.w	8014e42 <_scanf_i+0x1c2>
 8014d38:	f10b 0b01 	add.w	fp, fp, #1
 8014d3c:	f1bb 0f03 	cmp.w	fp, #3
 8014d40:	d1cb      	bne.n	8014cda <_scanf_i+0x5a>
 8014d42:	6863      	ldr	r3, [r4, #4]
 8014d44:	b90b      	cbnz	r3, 8014d4a <_scanf_i+0xca>
 8014d46:	230a      	movs	r3, #10
 8014d48:	6063      	str	r3, [r4, #4]
 8014d4a:	6863      	ldr	r3, [r4, #4]
 8014d4c:	4945      	ldr	r1, [pc, #276]	@ (8014e64 <_scanf_i+0x1e4>)
 8014d4e:	6960      	ldr	r0, [r4, #20]
 8014d50:	1ac9      	subs	r1, r1, r3
 8014d52:	f000 f935 	bl	8014fc0 <__sccl>
 8014d56:	f04f 0b00 	mov.w	fp, #0
 8014d5a:	68a3      	ldr	r3, [r4, #8]
 8014d5c:	6822      	ldr	r2, [r4, #0]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d03d      	beq.n	8014dde <_scanf_i+0x15e>
 8014d62:	6831      	ldr	r1, [r6, #0]
 8014d64:	6960      	ldr	r0, [r4, #20]
 8014d66:	f891 c000 	ldrb.w	ip, [r1]
 8014d6a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014d6e:	2800      	cmp	r0, #0
 8014d70:	d035      	beq.n	8014dde <_scanf_i+0x15e>
 8014d72:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8014d76:	d124      	bne.n	8014dc2 <_scanf_i+0x142>
 8014d78:	0510      	lsls	r0, r2, #20
 8014d7a:	d522      	bpl.n	8014dc2 <_scanf_i+0x142>
 8014d7c:	f10b 0b01 	add.w	fp, fp, #1
 8014d80:	f1b9 0f00 	cmp.w	r9, #0
 8014d84:	d003      	beq.n	8014d8e <_scanf_i+0x10e>
 8014d86:	3301      	adds	r3, #1
 8014d88:	f109 39ff 	add.w	r9, r9, #4294967295
 8014d8c:	60a3      	str	r3, [r4, #8]
 8014d8e:	6873      	ldr	r3, [r6, #4]
 8014d90:	3b01      	subs	r3, #1
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	6073      	str	r3, [r6, #4]
 8014d96:	dd1b      	ble.n	8014dd0 <_scanf_i+0x150>
 8014d98:	6833      	ldr	r3, [r6, #0]
 8014d9a:	3301      	adds	r3, #1
 8014d9c:	6033      	str	r3, [r6, #0]
 8014d9e:	68a3      	ldr	r3, [r4, #8]
 8014da0:	3b01      	subs	r3, #1
 8014da2:	60a3      	str	r3, [r4, #8]
 8014da4:	e7d9      	b.n	8014d5a <_scanf_i+0xda>
 8014da6:	f1bb 0f02 	cmp.w	fp, #2
 8014daa:	d1ae      	bne.n	8014d0a <_scanf_i+0x8a>
 8014dac:	6822      	ldr	r2, [r4, #0]
 8014dae:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8014db2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8014db6:	d1bf      	bne.n	8014d38 <_scanf_i+0xb8>
 8014db8:	2110      	movs	r1, #16
 8014dba:	6061      	str	r1, [r4, #4]
 8014dbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8014dc0:	e7a2      	b.n	8014d08 <_scanf_i+0x88>
 8014dc2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8014dc6:	6022      	str	r2, [r4, #0]
 8014dc8:	780b      	ldrb	r3, [r1, #0]
 8014dca:	f805 3b01 	strb.w	r3, [r5], #1
 8014dce:	e7de      	b.n	8014d8e <_scanf_i+0x10e>
 8014dd0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8014dd4:	4631      	mov	r1, r6
 8014dd6:	4650      	mov	r0, sl
 8014dd8:	4798      	blx	r3
 8014dda:	2800      	cmp	r0, #0
 8014ddc:	d0df      	beq.n	8014d9e <_scanf_i+0x11e>
 8014dde:	6823      	ldr	r3, [r4, #0]
 8014de0:	05d9      	lsls	r1, r3, #23
 8014de2:	d50d      	bpl.n	8014e00 <_scanf_i+0x180>
 8014de4:	42bd      	cmp	r5, r7
 8014de6:	d909      	bls.n	8014dfc <_scanf_i+0x17c>
 8014de8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014dec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8014df0:	4632      	mov	r2, r6
 8014df2:	4650      	mov	r0, sl
 8014df4:	4798      	blx	r3
 8014df6:	f105 39ff 	add.w	r9, r5, #4294967295
 8014dfa:	464d      	mov	r5, r9
 8014dfc:	42bd      	cmp	r5, r7
 8014dfe:	d028      	beq.n	8014e52 <_scanf_i+0x1d2>
 8014e00:	6822      	ldr	r2, [r4, #0]
 8014e02:	f012 0210 	ands.w	r2, r2, #16
 8014e06:	d113      	bne.n	8014e30 <_scanf_i+0x1b0>
 8014e08:	702a      	strb	r2, [r5, #0]
 8014e0a:	6863      	ldr	r3, [r4, #4]
 8014e0c:	9e01      	ldr	r6, [sp, #4]
 8014e0e:	4639      	mov	r1, r7
 8014e10:	4650      	mov	r0, sl
 8014e12:	47b0      	blx	r6
 8014e14:	f8d8 3000 	ldr.w	r3, [r8]
 8014e18:	6821      	ldr	r1, [r4, #0]
 8014e1a:	1d1a      	adds	r2, r3, #4
 8014e1c:	f8c8 2000 	str.w	r2, [r8]
 8014e20:	f011 0f20 	tst.w	r1, #32
 8014e24:	681b      	ldr	r3, [r3, #0]
 8014e26:	d00f      	beq.n	8014e48 <_scanf_i+0x1c8>
 8014e28:	6018      	str	r0, [r3, #0]
 8014e2a:	68e3      	ldr	r3, [r4, #12]
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	60e3      	str	r3, [r4, #12]
 8014e30:	6923      	ldr	r3, [r4, #16]
 8014e32:	1bed      	subs	r5, r5, r7
 8014e34:	445d      	add	r5, fp
 8014e36:	442b      	add	r3, r5
 8014e38:	6123      	str	r3, [r4, #16]
 8014e3a:	2000      	movs	r0, #0
 8014e3c:	b007      	add	sp, #28
 8014e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e42:	f04f 0b00 	mov.w	fp, #0
 8014e46:	e7ca      	b.n	8014dde <_scanf_i+0x15e>
 8014e48:	07ca      	lsls	r2, r1, #31
 8014e4a:	bf4c      	ite	mi
 8014e4c:	8018      	strhmi	r0, [r3, #0]
 8014e4e:	6018      	strpl	r0, [r3, #0]
 8014e50:	e7eb      	b.n	8014e2a <_scanf_i+0x1aa>
 8014e52:	2001      	movs	r0, #1
 8014e54:	e7f2      	b.n	8014e3c <_scanf_i+0x1bc>
 8014e56:	bf00      	nop
 8014e58:	0801715c 	.word	0x0801715c
 8014e5c:	08014581 	.word	0x08014581
 8014e60:	08015945 	.word	0x08015945
 8014e64:	08017542 	.word	0x08017542

08014e68 <__sflush_r>:
 8014e68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e70:	0716      	lsls	r6, r2, #28
 8014e72:	4605      	mov	r5, r0
 8014e74:	460c      	mov	r4, r1
 8014e76:	d454      	bmi.n	8014f22 <__sflush_r+0xba>
 8014e78:	684b      	ldr	r3, [r1, #4]
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	dc02      	bgt.n	8014e84 <__sflush_r+0x1c>
 8014e7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	dd48      	ble.n	8014f16 <__sflush_r+0xae>
 8014e84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014e86:	2e00      	cmp	r6, #0
 8014e88:	d045      	beq.n	8014f16 <__sflush_r+0xae>
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014e90:	682f      	ldr	r7, [r5, #0]
 8014e92:	6a21      	ldr	r1, [r4, #32]
 8014e94:	602b      	str	r3, [r5, #0]
 8014e96:	d030      	beq.n	8014efa <__sflush_r+0x92>
 8014e98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014e9a:	89a3      	ldrh	r3, [r4, #12]
 8014e9c:	0759      	lsls	r1, r3, #29
 8014e9e:	d505      	bpl.n	8014eac <__sflush_r+0x44>
 8014ea0:	6863      	ldr	r3, [r4, #4]
 8014ea2:	1ad2      	subs	r2, r2, r3
 8014ea4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014ea6:	b10b      	cbz	r3, 8014eac <__sflush_r+0x44>
 8014ea8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014eaa:	1ad2      	subs	r2, r2, r3
 8014eac:	2300      	movs	r3, #0
 8014eae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014eb0:	6a21      	ldr	r1, [r4, #32]
 8014eb2:	4628      	mov	r0, r5
 8014eb4:	47b0      	blx	r6
 8014eb6:	1c43      	adds	r3, r0, #1
 8014eb8:	89a3      	ldrh	r3, [r4, #12]
 8014eba:	d106      	bne.n	8014eca <__sflush_r+0x62>
 8014ebc:	6829      	ldr	r1, [r5, #0]
 8014ebe:	291d      	cmp	r1, #29
 8014ec0:	d82b      	bhi.n	8014f1a <__sflush_r+0xb2>
 8014ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8014f6c <__sflush_r+0x104>)
 8014ec4:	410a      	asrs	r2, r1
 8014ec6:	07d6      	lsls	r6, r2, #31
 8014ec8:	d427      	bmi.n	8014f1a <__sflush_r+0xb2>
 8014eca:	2200      	movs	r2, #0
 8014ecc:	6062      	str	r2, [r4, #4]
 8014ece:	04d9      	lsls	r1, r3, #19
 8014ed0:	6922      	ldr	r2, [r4, #16]
 8014ed2:	6022      	str	r2, [r4, #0]
 8014ed4:	d504      	bpl.n	8014ee0 <__sflush_r+0x78>
 8014ed6:	1c42      	adds	r2, r0, #1
 8014ed8:	d101      	bne.n	8014ede <__sflush_r+0x76>
 8014eda:	682b      	ldr	r3, [r5, #0]
 8014edc:	b903      	cbnz	r3, 8014ee0 <__sflush_r+0x78>
 8014ede:	6560      	str	r0, [r4, #84]	@ 0x54
 8014ee0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014ee2:	602f      	str	r7, [r5, #0]
 8014ee4:	b1b9      	cbz	r1, 8014f16 <__sflush_r+0xae>
 8014ee6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014eea:	4299      	cmp	r1, r3
 8014eec:	d002      	beq.n	8014ef4 <__sflush_r+0x8c>
 8014eee:	4628      	mov	r0, r5
 8014ef0:	f7fd ff12 	bl	8012d18 <_free_r>
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	6363      	str	r3, [r4, #52]	@ 0x34
 8014ef8:	e00d      	b.n	8014f16 <__sflush_r+0xae>
 8014efa:	2301      	movs	r3, #1
 8014efc:	4628      	mov	r0, r5
 8014efe:	47b0      	blx	r6
 8014f00:	4602      	mov	r2, r0
 8014f02:	1c50      	adds	r0, r2, #1
 8014f04:	d1c9      	bne.n	8014e9a <__sflush_r+0x32>
 8014f06:	682b      	ldr	r3, [r5, #0]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d0c6      	beq.n	8014e9a <__sflush_r+0x32>
 8014f0c:	2b1d      	cmp	r3, #29
 8014f0e:	d001      	beq.n	8014f14 <__sflush_r+0xac>
 8014f10:	2b16      	cmp	r3, #22
 8014f12:	d11e      	bne.n	8014f52 <__sflush_r+0xea>
 8014f14:	602f      	str	r7, [r5, #0]
 8014f16:	2000      	movs	r0, #0
 8014f18:	e022      	b.n	8014f60 <__sflush_r+0xf8>
 8014f1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014f1e:	b21b      	sxth	r3, r3
 8014f20:	e01b      	b.n	8014f5a <__sflush_r+0xf2>
 8014f22:	690f      	ldr	r7, [r1, #16]
 8014f24:	2f00      	cmp	r7, #0
 8014f26:	d0f6      	beq.n	8014f16 <__sflush_r+0xae>
 8014f28:	0793      	lsls	r3, r2, #30
 8014f2a:	680e      	ldr	r6, [r1, #0]
 8014f2c:	bf08      	it	eq
 8014f2e:	694b      	ldreq	r3, [r1, #20]
 8014f30:	600f      	str	r7, [r1, #0]
 8014f32:	bf18      	it	ne
 8014f34:	2300      	movne	r3, #0
 8014f36:	eba6 0807 	sub.w	r8, r6, r7
 8014f3a:	608b      	str	r3, [r1, #8]
 8014f3c:	f1b8 0f00 	cmp.w	r8, #0
 8014f40:	dde9      	ble.n	8014f16 <__sflush_r+0xae>
 8014f42:	6a21      	ldr	r1, [r4, #32]
 8014f44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014f46:	4643      	mov	r3, r8
 8014f48:	463a      	mov	r2, r7
 8014f4a:	4628      	mov	r0, r5
 8014f4c:	47b0      	blx	r6
 8014f4e:	2800      	cmp	r0, #0
 8014f50:	dc08      	bgt.n	8014f64 <__sflush_r+0xfc>
 8014f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014f5a:	81a3      	strh	r3, [r4, #12]
 8014f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8014f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f64:	4407      	add	r7, r0
 8014f66:	eba8 0800 	sub.w	r8, r8, r0
 8014f6a:	e7e7      	b.n	8014f3c <__sflush_r+0xd4>
 8014f6c:	dfbffffe 	.word	0xdfbffffe

08014f70 <_fflush_r>:
 8014f70:	b538      	push	{r3, r4, r5, lr}
 8014f72:	690b      	ldr	r3, [r1, #16]
 8014f74:	4605      	mov	r5, r0
 8014f76:	460c      	mov	r4, r1
 8014f78:	b913      	cbnz	r3, 8014f80 <_fflush_r+0x10>
 8014f7a:	2500      	movs	r5, #0
 8014f7c:	4628      	mov	r0, r5
 8014f7e:	bd38      	pop	{r3, r4, r5, pc}
 8014f80:	b118      	cbz	r0, 8014f8a <_fflush_r+0x1a>
 8014f82:	6a03      	ldr	r3, [r0, #32]
 8014f84:	b90b      	cbnz	r3, 8014f8a <_fflush_r+0x1a>
 8014f86:	f7fc ff0d 	bl	8011da4 <__sinit>
 8014f8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d0f3      	beq.n	8014f7a <_fflush_r+0xa>
 8014f92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014f94:	07d0      	lsls	r0, r2, #31
 8014f96:	d404      	bmi.n	8014fa2 <_fflush_r+0x32>
 8014f98:	0599      	lsls	r1, r3, #22
 8014f9a:	d402      	bmi.n	8014fa2 <_fflush_r+0x32>
 8014f9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014f9e:	f7fd f856 	bl	801204e <__retarget_lock_acquire_recursive>
 8014fa2:	4628      	mov	r0, r5
 8014fa4:	4621      	mov	r1, r4
 8014fa6:	f7ff ff5f 	bl	8014e68 <__sflush_r>
 8014faa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014fac:	07da      	lsls	r2, r3, #31
 8014fae:	4605      	mov	r5, r0
 8014fb0:	d4e4      	bmi.n	8014f7c <_fflush_r+0xc>
 8014fb2:	89a3      	ldrh	r3, [r4, #12]
 8014fb4:	059b      	lsls	r3, r3, #22
 8014fb6:	d4e1      	bmi.n	8014f7c <_fflush_r+0xc>
 8014fb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014fba:	f7fd f849 	bl	8012050 <__retarget_lock_release_recursive>
 8014fbe:	e7dd      	b.n	8014f7c <_fflush_r+0xc>

08014fc0 <__sccl>:
 8014fc0:	b570      	push	{r4, r5, r6, lr}
 8014fc2:	780b      	ldrb	r3, [r1, #0]
 8014fc4:	4604      	mov	r4, r0
 8014fc6:	2b5e      	cmp	r3, #94	@ 0x5e
 8014fc8:	bf0b      	itete	eq
 8014fca:	784b      	ldrbeq	r3, [r1, #1]
 8014fcc:	1c4a      	addne	r2, r1, #1
 8014fce:	1c8a      	addeq	r2, r1, #2
 8014fd0:	2100      	movne	r1, #0
 8014fd2:	bf08      	it	eq
 8014fd4:	2101      	moveq	r1, #1
 8014fd6:	3801      	subs	r0, #1
 8014fd8:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8014fdc:	f800 1f01 	strb.w	r1, [r0, #1]!
 8014fe0:	42a8      	cmp	r0, r5
 8014fe2:	d1fb      	bne.n	8014fdc <__sccl+0x1c>
 8014fe4:	b90b      	cbnz	r3, 8014fea <__sccl+0x2a>
 8014fe6:	1e50      	subs	r0, r2, #1
 8014fe8:	bd70      	pop	{r4, r5, r6, pc}
 8014fea:	f081 0101 	eor.w	r1, r1, #1
 8014fee:	54e1      	strb	r1, [r4, r3]
 8014ff0:	4610      	mov	r0, r2
 8014ff2:	4602      	mov	r2, r0
 8014ff4:	f812 5b01 	ldrb.w	r5, [r2], #1
 8014ff8:	2d2d      	cmp	r5, #45	@ 0x2d
 8014ffa:	d005      	beq.n	8015008 <__sccl+0x48>
 8014ffc:	2d5d      	cmp	r5, #93	@ 0x5d
 8014ffe:	d016      	beq.n	801502e <__sccl+0x6e>
 8015000:	2d00      	cmp	r5, #0
 8015002:	d0f1      	beq.n	8014fe8 <__sccl+0x28>
 8015004:	462b      	mov	r3, r5
 8015006:	e7f2      	b.n	8014fee <__sccl+0x2e>
 8015008:	7846      	ldrb	r6, [r0, #1]
 801500a:	2e5d      	cmp	r6, #93	@ 0x5d
 801500c:	d0fa      	beq.n	8015004 <__sccl+0x44>
 801500e:	42b3      	cmp	r3, r6
 8015010:	dcf8      	bgt.n	8015004 <__sccl+0x44>
 8015012:	3002      	adds	r0, #2
 8015014:	461a      	mov	r2, r3
 8015016:	3201      	adds	r2, #1
 8015018:	4296      	cmp	r6, r2
 801501a:	54a1      	strb	r1, [r4, r2]
 801501c:	dcfb      	bgt.n	8015016 <__sccl+0x56>
 801501e:	1af2      	subs	r2, r6, r3
 8015020:	3a01      	subs	r2, #1
 8015022:	1c5d      	adds	r5, r3, #1
 8015024:	42b3      	cmp	r3, r6
 8015026:	bfa8      	it	ge
 8015028:	2200      	movge	r2, #0
 801502a:	18ab      	adds	r3, r5, r2
 801502c:	e7e1      	b.n	8014ff2 <__sccl+0x32>
 801502e:	4610      	mov	r0, r2
 8015030:	e7da      	b.n	8014fe8 <__sccl+0x28>

08015032 <__submore>:
 8015032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015036:	460c      	mov	r4, r1
 8015038:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801503a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801503e:	4299      	cmp	r1, r3
 8015040:	d11d      	bne.n	801507e <__submore+0x4c>
 8015042:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8015046:	f7fd fedb 	bl	8012e00 <_malloc_r>
 801504a:	b918      	cbnz	r0, 8015054 <__submore+0x22>
 801504c:	f04f 30ff 	mov.w	r0, #4294967295
 8015050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015054:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015058:	63a3      	str	r3, [r4, #56]	@ 0x38
 801505a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801505e:	6360      	str	r0, [r4, #52]	@ 0x34
 8015060:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8015064:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8015068:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801506c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8015070:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8015074:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8015078:	6020      	str	r0, [r4, #0]
 801507a:	2000      	movs	r0, #0
 801507c:	e7e8      	b.n	8015050 <__submore+0x1e>
 801507e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8015080:	0077      	lsls	r7, r6, #1
 8015082:	463a      	mov	r2, r7
 8015084:	f000 fbc1 	bl	801580a <_realloc_r>
 8015088:	4605      	mov	r5, r0
 801508a:	2800      	cmp	r0, #0
 801508c:	d0de      	beq.n	801504c <__submore+0x1a>
 801508e:	eb00 0806 	add.w	r8, r0, r6
 8015092:	4601      	mov	r1, r0
 8015094:	4632      	mov	r2, r6
 8015096:	4640      	mov	r0, r8
 8015098:	f7fc ffdb 	bl	8012052 <memcpy>
 801509c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80150a0:	f8c4 8000 	str.w	r8, [r4]
 80150a4:	e7e9      	b.n	801507a <__submore+0x48>

080150a6 <memmove>:
 80150a6:	4288      	cmp	r0, r1
 80150a8:	b510      	push	{r4, lr}
 80150aa:	eb01 0402 	add.w	r4, r1, r2
 80150ae:	d902      	bls.n	80150b6 <memmove+0x10>
 80150b0:	4284      	cmp	r4, r0
 80150b2:	4623      	mov	r3, r4
 80150b4:	d807      	bhi.n	80150c6 <memmove+0x20>
 80150b6:	1e43      	subs	r3, r0, #1
 80150b8:	42a1      	cmp	r1, r4
 80150ba:	d008      	beq.n	80150ce <memmove+0x28>
 80150bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80150c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80150c4:	e7f8      	b.n	80150b8 <memmove+0x12>
 80150c6:	4402      	add	r2, r0
 80150c8:	4601      	mov	r1, r0
 80150ca:	428a      	cmp	r2, r1
 80150cc:	d100      	bne.n	80150d0 <memmove+0x2a>
 80150ce:	bd10      	pop	{r4, pc}
 80150d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80150d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80150d8:	e7f7      	b.n	80150ca <memmove+0x24>
	...

080150dc <_sbrk_r>:
 80150dc:	b538      	push	{r3, r4, r5, lr}
 80150de:	4d06      	ldr	r5, [pc, #24]	@ (80150f8 <_sbrk_r+0x1c>)
 80150e0:	2300      	movs	r3, #0
 80150e2:	4604      	mov	r4, r0
 80150e4:	4608      	mov	r0, r1
 80150e6:	602b      	str	r3, [r5, #0]
 80150e8:	f7ef fab4 	bl	8004654 <_sbrk>
 80150ec:	1c43      	adds	r3, r0, #1
 80150ee:	d102      	bne.n	80150f6 <_sbrk_r+0x1a>
 80150f0:	682b      	ldr	r3, [r5, #0]
 80150f2:	b103      	cbz	r3, 80150f6 <_sbrk_r+0x1a>
 80150f4:	6023      	str	r3, [r4, #0]
 80150f6:	bd38      	pop	{r3, r4, r5, pc}
 80150f8:	200026dc 	.word	0x200026dc
 80150fc:	00000000 	.word	0x00000000

08015100 <nan>:
 8015100:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8015108 <nan+0x8>
 8015104:	4770      	bx	lr
 8015106:	bf00      	nop
 8015108:	00000000 	.word	0x00000000
 801510c:	7ff80000 	.word	0x7ff80000

08015110 <__assert_func>:
 8015110:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015112:	4614      	mov	r4, r2
 8015114:	461a      	mov	r2, r3
 8015116:	4b09      	ldr	r3, [pc, #36]	@ (801513c <__assert_func+0x2c>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	4605      	mov	r5, r0
 801511c:	68d8      	ldr	r0, [r3, #12]
 801511e:	b954      	cbnz	r4, 8015136 <__assert_func+0x26>
 8015120:	4b07      	ldr	r3, [pc, #28]	@ (8015140 <__assert_func+0x30>)
 8015122:	461c      	mov	r4, r3
 8015124:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015128:	9100      	str	r1, [sp, #0]
 801512a:	462b      	mov	r3, r5
 801512c:	4905      	ldr	r1, [pc, #20]	@ (8015144 <__assert_func+0x34>)
 801512e:	f000 fc19 	bl	8015964 <fiprintf>
 8015132:	f000 fc29 	bl	8015988 <abort>
 8015136:	4b04      	ldr	r3, [pc, #16]	@ (8015148 <__assert_func+0x38>)
 8015138:	e7f4      	b.n	8015124 <__assert_func+0x14>
 801513a:	bf00      	nop
 801513c:	200001f8 	.word	0x200001f8
 8015140:	08017590 	.word	0x08017590
 8015144:	08017562 	.word	0x08017562
 8015148:	08017555 	.word	0x08017555

0801514c <_calloc_r>:
 801514c:	b570      	push	{r4, r5, r6, lr}
 801514e:	fba1 5402 	umull	r5, r4, r1, r2
 8015152:	b93c      	cbnz	r4, 8015164 <_calloc_r+0x18>
 8015154:	4629      	mov	r1, r5
 8015156:	f7fd fe53 	bl	8012e00 <_malloc_r>
 801515a:	4606      	mov	r6, r0
 801515c:	b928      	cbnz	r0, 801516a <_calloc_r+0x1e>
 801515e:	2600      	movs	r6, #0
 8015160:	4630      	mov	r0, r6
 8015162:	bd70      	pop	{r4, r5, r6, pc}
 8015164:	220c      	movs	r2, #12
 8015166:	6002      	str	r2, [r0, #0]
 8015168:	e7f9      	b.n	801515e <_calloc_r+0x12>
 801516a:	462a      	mov	r2, r5
 801516c:	4621      	mov	r1, r4
 801516e:	f7fc fede 	bl	8011f2e <memset>
 8015172:	e7f5      	b.n	8015160 <_calloc_r+0x14>

08015174 <rshift>:
 8015174:	6903      	ldr	r3, [r0, #16]
 8015176:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801517a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801517e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015182:	f100 0414 	add.w	r4, r0, #20
 8015186:	dd45      	ble.n	8015214 <rshift+0xa0>
 8015188:	f011 011f 	ands.w	r1, r1, #31
 801518c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015190:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015194:	d10c      	bne.n	80151b0 <rshift+0x3c>
 8015196:	f100 0710 	add.w	r7, r0, #16
 801519a:	4629      	mov	r1, r5
 801519c:	42b1      	cmp	r1, r6
 801519e:	d334      	bcc.n	801520a <rshift+0x96>
 80151a0:	1a9b      	subs	r3, r3, r2
 80151a2:	009b      	lsls	r3, r3, #2
 80151a4:	1eea      	subs	r2, r5, #3
 80151a6:	4296      	cmp	r6, r2
 80151a8:	bf38      	it	cc
 80151aa:	2300      	movcc	r3, #0
 80151ac:	4423      	add	r3, r4
 80151ae:	e015      	b.n	80151dc <rshift+0x68>
 80151b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80151b4:	f1c1 0820 	rsb	r8, r1, #32
 80151b8:	40cf      	lsrs	r7, r1
 80151ba:	f105 0e04 	add.w	lr, r5, #4
 80151be:	46a1      	mov	r9, r4
 80151c0:	4576      	cmp	r6, lr
 80151c2:	46f4      	mov	ip, lr
 80151c4:	d815      	bhi.n	80151f2 <rshift+0x7e>
 80151c6:	1a9a      	subs	r2, r3, r2
 80151c8:	0092      	lsls	r2, r2, #2
 80151ca:	3a04      	subs	r2, #4
 80151cc:	3501      	adds	r5, #1
 80151ce:	42ae      	cmp	r6, r5
 80151d0:	bf38      	it	cc
 80151d2:	2200      	movcc	r2, #0
 80151d4:	18a3      	adds	r3, r4, r2
 80151d6:	50a7      	str	r7, [r4, r2]
 80151d8:	b107      	cbz	r7, 80151dc <rshift+0x68>
 80151da:	3304      	adds	r3, #4
 80151dc:	1b1a      	subs	r2, r3, r4
 80151de:	42a3      	cmp	r3, r4
 80151e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80151e4:	bf08      	it	eq
 80151e6:	2300      	moveq	r3, #0
 80151e8:	6102      	str	r2, [r0, #16]
 80151ea:	bf08      	it	eq
 80151ec:	6143      	streq	r3, [r0, #20]
 80151ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151f2:	f8dc c000 	ldr.w	ip, [ip]
 80151f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80151fa:	ea4c 0707 	orr.w	r7, ip, r7
 80151fe:	f849 7b04 	str.w	r7, [r9], #4
 8015202:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015206:	40cf      	lsrs	r7, r1
 8015208:	e7da      	b.n	80151c0 <rshift+0x4c>
 801520a:	f851 cb04 	ldr.w	ip, [r1], #4
 801520e:	f847 cf04 	str.w	ip, [r7, #4]!
 8015212:	e7c3      	b.n	801519c <rshift+0x28>
 8015214:	4623      	mov	r3, r4
 8015216:	e7e1      	b.n	80151dc <rshift+0x68>

08015218 <__hexdig_fun>:
 8015218:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801521c:	2b09      	cmp	r3, #9
 801521e:	d802      	bhi.n	8015226 <__hexdig_fun+0xe>
 8015220:	3820      	subs	r0, #32
 8015222:	b2c0      	uxtb	r0, r0
 8015224:	4770      	bx	lr
 8015226:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801522a:	2b05      	cmp	r3, #5
 801522c:	d801      	bhi.n	8015232 <__hexdig_fun+0x1a>
 801522e:	3847      	subs	r0, #71	@ 0x47
 8015230:	e7f7      	b.n	8015222 <__hexdig_fun+0xa>
 8015232:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8015236:	2b05      	cmp	r3, #5
 8015238:	d801      	bhi.n	801523e <__hexdig_fun+0x26>
 801523a:	3827      	subs	r0, #39	@ 0x27
 801523c:	e7f1      	b.n	8015222 <__hexdig_fun+0xa>
 801523e:	2000      	movs	r0, #0
 8015240:	4770      	bx	lr
	...

08015244 <__gethex>:
 8015244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015248:	b085      	sub	sp, #20
 801524a:	468a      	mov	sl, r1
 801524c:	9302      	str	r3, [sp, #8]
 801524e:	680b      	ldr	r3, [r1, #0]
 8015250:	9001      	str	r0, [sp, #4]
 8015252:	4690      	mov	r8, r2
 8015254:	1c9c      	adds	r4, r3, #2
 8015256:	46a1      	mov	r9, r4
 8015258:	f814 0b01 	ldrb.w	r0, [r4], #1
 801525c:	2830      	cmp	r0, #48	@ 0x30
 801525e:	d0fa      	beq.n	8015256 <__gethex+0x12>
 8015260:	eba9 0303 	sub.w	r3, r9, r3
 8015264:	f1a3 0b02 	sub.w	fp, r3, #2
 8015268:	f7ff ffd6 	bl	8015218 <__hexdig_fun>
 801526c:	4605      	mov	r5, r0
 801526e:	2800      	cmp	r0, #0
 8015270:	d168      	bne.n	8015344 <__gethex+0x100>
 8015272:	49a0      	ldr	r1, [pc, #640]	@ (80154f4 <__gethex+0x2b0>)
 8015274:	2201      	movs	r2, #1
 8015276:	4648      	mov	r0, r9
 8015278:	f7fc fe61 	bl	8011f3e <strncmp>
 801527c:	4607      	mov	r7, r0
 801527e:	2800      	cmp	r0, #0
 8015280:	d167      	bne.n	8015352 <__gethex+0x10e>
 8015282:	f899 0001 	ldrb.w	r0, [r9, #1]
 8015286:	4626      	mov	r6, r4
 8015288:	f7ff ffc6 	bl	8015218 <__hexdig_fun>
 801528c:	2800      	cmp	r0, #0
 801528e:	d062      	beq.n	8015356 <__gethex+0x112>
 8015290:	4623      	mov	r3, r4
 8015292:	7818      	ldrb	r0, [r3, #0]
 8015294:	2830      	cmp	r0, #48	@ 0x30
 8015296:	4699      	mov	r9, r3
 8015298:	f103 0301 	add.w	r3, r3, #1
 801529c:	d0f9      	beq.n	8015292 <__gethex+0x4e>
 801529e:	f7ff ffbb 	bl	8015218 <__hexdig_fun>
 80152a2:	fab0 f580 	clz	r5, r0
 80152a6:	096d      	lsrs	r5, r5, #5
 80152a8:	f04f 0b01 	mov.w	fp, #1
 80152ac:	464a      	mov	r2, r9
 80152ae:	4616      	mov	r6, r2
 80152b0:	3201      	adds	r2, #1
 80152b2:	7830      	ldrb	r0, [r6, #0]
 80152b4:	f7ff ffb0 	bl	8015218 <__hexdig_fun>
 80152b8:	2800      	cmp	r0, #0
 80152ba:	d1f8      	bne.n	80152ae <__gethex+0x6a>
 80152bc:	498d      	ldr	r1, [pc, #564]	@ (80154f4 <__gethex+0x2b0>)
 80152be:	2201      	movs	r2, #1
 80152c0:	4630      	mov	r0, r6
 80152c2:	f7fc fe3c 	bl	8011f3e <strncmp>
 80152c6:	2800      	cmp	r0, #0
 80152c8:	d13f      	bne.n	801534a <__gethex+0x106>
 80152ca:	b944      	cbnz	r4, 80152de <__gethex+0x9a>
 80152cc:	1c74      	adds	r4, r6, #1
 80152ce:	4622      	mov	r2, r4
 80152d0:	4616      	mov	r6, r2
 80152d2:	3201      	adds	r2, #1
 80152d4:	7830      	ldrb	r0, [r6, #0]
 80152d6:	f7ff ff9f 	bl	8015218 <__hexdig_fun>
 80152da:	2800      	cmp	r0, #0
 80152dc:	d1f8      	bne.n	80152d0 <__gethex+0x8c>
 80152de:	1ba4      	subs	r4, r4, r6
 80152e0:	00a7      	lsls	r7, r4, #2
 80152e2:	7833      	ldrb	r3, [r6, #0]
 80152e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80152e8:	2b50      	cmp	r3, #80	@ 0x50
 80152ea:	d13e      	bne.n	801536a <__gethex+0x126>
 80152ec:	7873      	ldrb	r3, [r6, #1]
 80152ee:	2b2b      	cmp	r3, #43	@ 0x2b
 80152f0:	d033      	beq.n	801535a <__gethex+0x116>
 80152f2:	2b2d      	cmp	r3, #45	@ 0x2d
 80152f4:	d034      	beq.n	8015360 <__gethex+0x11c>
 80152f6:	1c71      	adds	r1, r6, #1
 80152f8:	2400      	movs	r4, #0
 80152fa:	7808      	ldrb	r0, [r1, #0]
 80152fc:	f7ff ff8c 	bl	8015218 <__hexdig_fun>
 8015300:	1e43      	subs	r3, r0, #1
 8015302:	b2db      	uxtb	r3, r3
 8015304:	2b18      	cmp	r3, #24
 8015306:	d830      	bhi.n	801536a <__gethex+0x126>
 8015308:	f1a0 0210 	sub.w	r2, r0, #16
 801530c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015310:	f7ff ff82 	bl	8015218 <__hexdig_fun>
 8015314:	f100 3cff 	add.w	ip, r0, #4294967295
 8015318:	fa5f fc8c 	uxtb.w	ip, ip
 801531c:	f1bc 0f18 	cmp.w	ip, #24
 8015320:	f04f 030a 	mov.w	r3, #10
 8015324:	d91e      	bls.n	8015364 <__gethex+0x120>
 8015326:	b104      	cbz	r4, 801532a <__gethex+0xe6>
 8015328:	4252      	negs	r2, r2
 801532a:	4417      	add	r7, r2
 801532c:	f8ca 1000 	str.w	r1, [sl]
 8015330:	b1ed      	cbz	r5, 801536e <__gethex+0x12a>
 8015332:	f1bb 0f00 	cmp.w	fp, #0
 8015336:	bf0c      	ite	eq
 8015338:	2506      	moveq	r5, #6
 801533a:	2500      	movne	r5, #0
 801533c:	4628      	mov	r0, r5
 801533e:	b005      	add	sp, #20
 8015340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015344:	2500      	movs	r5, #0
 8015346:	462c      	mov	r4, r5
 8015348:	e7b0      	b.n	80152ac <__gethex+0x68>
 801534a:	2c00      	cmp	r4, #0
 801534c:	d1c7      	bne.n	80152de <__gethex+0x9a>
 801534e:	4627      	mov	r7, r4
 8015350:	e7c7      	b.n	80152e2 <__gethex+0x9e>
 8015352:	464e      	mov	r6, r9
 8015354:	462f      	mov	r7, r5
 8015356:	2501      	movs	r5, #1
 8015358:	e7c3      	b.n	80152e2 <__gethex+0x9e>
 801535a:	2400      	movs	r4, #0
 801535c:	1cb1      	adds	r1, r6, #2
 801535e:	e7cc      	b.n	80152fa <__gethex+0xb6>
 8015360:	2401      	movs	r4, #1
 8015362:	e7fb      	b.n	801535c <__gethex+0x118>
 8015364:	fb03 0002 	mla	r0, r3, r2, r0
 8015368:	e7ce      	b.n	8015308 <__gethex+0xc4>
 801536a:	4631      	mov	r1, r6
 801536c:	e7de      	b.n	801532c <__gethex+0xe8>
 801536e:	eba6 0309 	sub.w	r3, r6, r9
 8015372:	3b01      	subs	r3, #1
 8015374:	4629      	mov	r1, r5
 8015376:	2b07      	cmp	r3, #7
 8015378:	dc0a      	bgt.n	8015390 <__gethex+0x14c>
 801537a:	9801      	ldr	r0, [sp, #4]
 801537c:	f7fd fdcc 	bl	8012f18 <_Balloc>
 8015380:	4604      	mov	r4, r0
 8015382:	b940      	cbnz	r0, 8015396 <__gethex+0x152>
 8015384:	4b5c      	ldr	r3, [pc, #368]	@ (80154f8 <__gethex+0x2b4>)
 8015386:	4602      	mov	r2, r0
 8015388:	21e4      	movs	r1, #228	@ 0xe4
 801538a:	485c      	ldr	r0, [pc, #368]	@ (80154fc <__gethex+0x2b8>)
 801538c:	f7ff fec0 	bl	8015110 <__assert_func>
 8015390:	3101      	adds	r1, #1
 8015392:	105b      	asrs	r3, r3, #1
 8015394:	e7ef      	b.n	8015376 <__gethex+0x132>
 8015396:	f100 0a14 	add.w	sl, r0, #20
 801539a:	2300      	movs	r3, #0
 801539c:	4655      	mov	r5, sl
 801539e:	469b      	mov	fp, r3
 80153a0:	45b1      	cmp	r9, r6
 80153a2:	d337      	bcc.n	8015414 <__gethex+0x1d0>
 80153a4:	f845 bb04 	str.w	fp, [r5], #4
 80153a8:	eba5 050a 	sub.w	r5, r5, sl
 80153ac:	10ad      	asrs	r5, r5, #2
 80153ae:	6125      	str	r5, [r4, #16]
 80153b0:	4658      	mov	r0, fp
 80153b2:	f7fd fea3 	bl	80130fc <__hi0bits>
 80153b6:	016d      	lsls	r5, r5, #5
 80153b8:	f8d8 6000 	ldr.w	r6, [r8]
 80153bc:	1a2d      	subs	r5, r5, r0
 80153be:	42b5      	cmp	r5, r6
 80153c0:	dd54      	ble.n	801546c <__gethex+0x228>
 80153c2:	1bad      	subs	r5, r5, r6
 80153c4:	4629      	mov	r1, r5
 80153c6:	4620      	mov	r0, r4
 80153c8:	f7fe fa37 	bl	801383a <__any_on>
 80153cc:	4681      	mov	r9, r0
 80153ce:	b178      	cbz	r0, 80153f0 <__gethex+0x1ac>
 80153d0:	1e6b      	subs	r3, r5, #1
 80153d2:	1159      	asrs	r1, r3, #5
 80153d4:	f003 021f 	and.w	r2, r3, #31
 80153d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80153dc:	f04f 0901 	mov.w	r9, #1
 80153e0:	fa09 f202 	lsl.w	r2, r9, r2
 80153e4:	420a      	tst	r2, r1
 80153e6:	d003      	beq.n	80153f0 <__gethex+0x1ac>
 80153e8:	454b      	cmp	r3, r9
 80153ea:	dc36      	bgt.n	801545a <__gethex+0x216>
 80153ec:	f04f 0902 	mov.w	r9, #2
 80153f0:	4629      	mov	r1, r5
 80153f2:	4620      	mov	r0, r4
 80153f4:	f7ff febe 	bl	8015174 <rshift>
 80153f8:	442f      	add	r7, r5
 80153fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80153fe:	42bb      	cmp	r3, r7
 8015400:	da42      	bge.n	8015488 <__gethex+0x244>
 8015402:	9801      	ldr	r0, [sp, #4]
 8015404:	4621      	mov	r1, r4
 8015406:	f7fd fdc7 	bl	8012f98 <_Bfree>
 801540a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801540c:	2300      	movs	r3, #0
 801540e:	6013      	str	r3, [r2, #0]
 8015410:	25a3      	movs	r5, #163	@ 0xa3
 8015412:	e793      	b.n	801533c <__gethex+0xf8>
 8015414:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8015418:	2a2e      	cmp	r2, #46	@ 0x2e
 801541a:	d012      	beq.n	8015442 <__gethex+0x1fe>
 801541c:	2b20      	cmp	r3, #32
 801541e:	d104      	bne.n	801542a <__gethex+0x1e6>
 8015420:	f845 bb04 	str.w	fp, [r5], #4
 8015424:	f04f 0b00 	mov.w	fp, #0
 8015428:	465b      	mov	r3, fp
 801542a:	7830      	ldrb	r0, [r6, #0]
 801542c:	9303      	str	r3, [sp, #12]
 801542e:	f7ff fef3 	bl	8015218 <__hexdig_fun>
 8015432:	9b03      	ldr	r3, [sp, #12]
 8015434:	f000 000f 	and.w	r0, r0, #15
 8015438:	4098      	lsls	r0, r3
 801543a:	ea4b 0b00 	orr.w	fp, fp, r0
 801543e:	3304      	adds	r3, #4
 8015440:	e7ae      	b.n	80153a0 <__gethex+0x15c>
 8015442:	45b1      	cmp	r9, r6
 8015444:	d8ea      	bhi.n	801541c <__gethex+0x1d8>
 8015446:	492b      	ldr	r1, [pc, #172]	@ (80154f4 <__gethex+0x2b0>)
 8015448:	9303      	str	r3, [sp, #12]
 801544a:	2201      	movs	r2, #1
 801544c:	4630      	mov	r0, r6
 801544e:	f7fc fd76 	bl	8011f3e <strncmp>
 8015452:	9b03      	ldr	r3, [sp, #12]
 8015454:	2800      	cmp	r0, #0
 8015456:	d1e1      	bne.n	801541c <__gethex+0x1d8>
 8015458:	e7a2      	b.n	80153a0 <__gethex+0x15c>
 801545a:	1ea9      	subs	r1, r5, #2
 801545c:	4620      	mov	r0, r4
 801545e:	f7fe f9ec 	bl	801383a <__any_on>
 8015462:	2800      	cmp	r0, #0
 8015464:	d0c2      	beq.n	80153ec <__gethex+0x1a8>
 8015466:	f04f 0903 	mov.w	r9, #3
 801546a:	e7c1      	b.n	80153f0 <__gethex+0x1ac>
 801546c:	da09      	bge.n	8015482 <__gethex+0x23e>
 801546e:	1b75      	subs	r5, r6, r5
 8015470:	4621      	mov	r1, r4
 8015472:	9801      	ldr	r0, [sp, #4]
 8015474:	462a      	mov	r2, r5
 8015476:	f7fd ffa7 	bl	80133c8 <__lshift>
 801547a:	1b7f      	subs	r7, r7, r5
 801547c:	4604      	mov	r4, r0
 801547e:	f100 0a14 	add.w	sl, r0, #20
 8015482:	f04f 0900 	mov.w	r9, #0
 8015486:	e7b8      	b.n	80153fa <__gethex+0x1b6>
 8015488:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801548c:	42bd      	cmp	r5, r7
 801548e:	dd6f      	ble.n	8015570 <__gethex+0x32c>
 8015490:	1bed      	subs	r5, r5, r7
 8015492:	42ae      	cmp	r6, r5
 8015494:	dc34      	bgt.n	8015500 <__gethex+0x2bc>
 8015496:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801549a:	2b02      	cmp	r3, #2
 801549c:	d022      	beq.n	80154e4 <__gethex+0x2a0>
 801549e:	2b03      	cmp	r3, #3
 80154a0:	d024      	beq.n	80154ec <__gethex+0x2a8>
 80154a2:	2b01      	cmp	r3, #1
 80154a4:	d115      	bne.n	80154d2 <__gethex+0x28e>
 80154a6:	42ae      	cmp	r6, r5
 80154a8:	d113      	bne.n	80154d2 <__gethex+0x28e>
 80154aa:	2e01      	cmp	r6, #1
 80154ac:	d10b      	bne.n	80154c6 <__gethex+0x282>
 80154ae:	9a02      	ldr	r2, [sp, #8]
 80154b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80154b4:	6013      	str	r3, [r2, #0]
 80154b6:	2301      	movs	r3, #1
 80154b8:	6123      	str	r3, [r4, #16]
 80154ba:	f8ca 3000 	str.w	r3, [sl]
 80154be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80154c0:	2562      	movs	r5, #98	@ 0x62
 80154c2:	601c      	str	r4, [r3, #0]
 80154c4:	e73a      	b.n	801533c <__gethex+0xf8>
 80154c6:	1e71      	subs	r1, r6, #1
 80154c8:	4620      	mov	r0, r4
 80154ca:	f7fe f9b6 	bl	801383a <__any_on>
 80154ce:	2800      	cmp	r0, #0
 80154d0:	d1ed      	bne.n	80154ae <__gethex+0x26a>
 80154d2:	9801      	ldr	r0, [sp, #4]
 80154d4:	4621      	mov	r1, r4
 80154d6:	f7fd fd5f 	bl	8012f98 <_Bfree>
 80154da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80154dc:	2300      	movs	r3, #0
 80154de:	6013      	str	r3, [r2, #0]
 80154e0:	2550      	movs	r5, #80	@ 0x50
 80154e2:	e72b      	b.n	801533c <__gethex+0xf8>
 80154e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d1f3      	bne.n	80154d2 <__gethex+0x28e>
 80154ea:	e7e0      	b.n	80154ae <__gethex+0x26a>
 80154ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d1dd      	bne.n	80154ae <__gethex+0x26a>
 80154f2:	e7ee      	b.n	80154d2 <__gethex+0x28e>
 80154f4:	080173c8 	.word	0x080173c8
 80154f8:	0801725b 	.word	0x0801725b
 80154fc:	08017591 	.word	0x08017591
 8015500:	1e6f      	subs	r7, r5, #1
 8015502:	f1b9 0f00 	cmp.w	r9, #0
 8015506:	d130      	bne.n	801556a <__gethex+0x326>
 8015508:	b127      	cbz	r7, 8015514 <__gethex+0x2d0>
 801550a:	4639      	mov	r1, r7
 801550c:	4620      	mov	r0, r4
 801550e:	f7fe f994 	bl	801383a <__any_on>
 8015512:	4681      	mov	r9, r0
 8015514:	117a      	asrs	r2, r7, #5
 8015516:	2301      	movs	r3, #1
 8015518:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801551c:	f007 071f 	and.w	r7, r7, #31
 8015520:	40bb      	lsls	r3, r7
 8015522:	4213      	tst	r3, r2
 8015524:	4629      	mov	r1, r5
 8015526:	4620      	mov	r0, r4
 8015528:	bf18      	it	ne
 801552a:	f049 0902 	orrne.w	r9, r9, #2
 801552e:	f7ff fe21 	bl	8015174 <rshift>
 8015532:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8015536:	1b76      	subs	r6, r6, r5
 8015538:	2502      	movs	r5, #2
 801553a:	f1b9 0f00 	cmp.w	r9, #0
 801553e:	d047      	beq.n	80155d0 <__gethex+0x38c>
 8015540:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015544:	2b02      	cmp	r3, #2
 8015546:	d015      	beq.n	8015574 <__gethex+0x330>
 8015548:	2b03      	cmp	r3, #3
 801554a:	d017      	beq.n	801557c <__gethex+0x338>
 801554c:	2b01      	cmp	r3, #1
 801554e:	d109      	bne.n	8015564 <__gethex+0x320>
 8015550:	f019 0f02 	tst.w	r9, #2
 8015554:	d006      	beq.n	8015564 <__gethex+0x320>
 8015556:	f8da 3000 	ldr.w	r3, [sl]
 801555a:	ea49 0903 	orr.w	r9, r9, r3
 801555e:	f019 0f01 	tst.w	r9, #1
 8015562:	d10e      	bne.n	8015582 <__gethex+0x33e>
 8015564:	f045 0510 	orr.w	r5, r5, #16
 8015568:	e032      	b.n	80155d0 <__gethex+0x38c>
 801556a:	f04f 0901 	mov.w	r9, #1
 801556e:	e7d1      	b.n	8015514 <__gethex+0x2d0>
 8015570:	2501      	movs	r5, #1
 8015572:	e7e2      	b.n	801553a <__gethex+0x2f6>
 8015574:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015576:	f1c3 0301 	rsb	r3, r3, #1
 801557a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801557c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801557e:	2b00      	cmp	r3, #0
 8015580:	d0f0      	beq.n	8015564 <__gethex+0x320>
 8015582:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015586:	f104 0314 	add.w	r3, r4, #20
 801558a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801558e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8015592:	f04f 0c00 	mov.w	ip, #0
 8015596:	4618      	mov	r0, r3
 8015598:	f853 2b04 	ldr.w	r2, [r3], #4
 801559c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80155a0:	d01b      	beq.n	80155da <__gethex+0x396>
 80155a2:	3201      	adds	r2, #1
 80155a4:	6002      	str	r2, [r0, #0]
 80155a6:	2d02      	cmp	r5, #2
 80155a8:	f104 0314 	add.w	r3, r4, #20
 80155ac:	d13c      	bne.n	8015628 <__gethex+0x3e4>
 80155ae:	f8d8 2000 	ldr.w	r2, [r8]
 80155b2:	3a01      	subs	r2, #1
 80155b4:	42b2      	cmp	r2, r6
 80155b6:	d109      	bne.n	80155cc <__gethex+0x388>
 80155b8:	1171      	asrs	r1, r6, #5
 80155ba:	2201      	movs	r2, #1
 80155bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80155c0:	f006 061f 	and.w	r6, r6, #31
 80155c4:	fa02 f606 	lsl.w	r6, r2, r6
 80155c8:	421e      	tst	r6, r3
 80155ca:	d13a      	bne.n	8015642 <__gethex+0x3fe>
 80155cc:	f045 0520 	orr.w	r5, r5, #32
 80155d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80155d2:	601c      	str	r4, [r3, #0]
 80155d4:	9b02      	ldr	r3, [sp, #8]
 80155d6:	601f      	str	r7, [r3, #0]
 80155d8:	e6b0      	b.n	801533c <__gethex+0xf8>
 80155da:	4299      	cmp	r1, r3
 80155dc:	f843 cc04 	str.w	ip, [r3, #-4]
 80155e0:	d8d9      	bhi.n	8015596 <__gethex+0x352>
 80155e2:	68a3      	ldr	r3, [r4, #8]
 80155e4:	459b      	cmp	fp, r3
 80155e6:	db17      	blt.n	8015618 <__gethex+0x3d4>
 80155e8:	6861      	ldr	r1, [r4, #4]
 80155ea:	9801      	ldr	r0, [sp, #4]
 80155ec:	3101      	adds	r1, #1
 80155ee:	f7fd fc93 	bl	8012f18 <_Balloc>
 80155f2:	4681      	mov	r9, r0
 80155f4:	b918      	cbnz	r0, 80155fe <__gethex+0x3ba>
 80155f6:	4b1a      	ldr	r3, [pc, #104]	@ (8015660 <__gethex+0x41c>)
 80155f8:	4602      	mov	r2, r0
 80155fa:	2184      	movs	r1, #132	@ 0x84
 80155fc:	e6c5      	b.n	801538a <__gethex+0x146>
 80155fe:	6922      	ldr	r2, [r4, #16]
 8015600:	3202      	adds	r2, #2
 8015602:	f104 010c 	add.w	r1, r4, #12
 8015606:	0092      	lsls	r2, r2, #2
 8015608:	300c      	adds	r0, #12
 801560a:	f7fc fd22 	bl	8012052 <memcpy>
 801560e:	4621      	mov	r1, r4
 8015610:	9801      	ldr	r0, [sp, #4]
 8015612:	f7fd fcc1 	bl	8012f98 <_Bfree>
 8015616:	464c      	mov	r4, r9
 8015618:	6923      	ldr	r3, [r4, #16]
 801561a:	1c5a      	adds	r2, r3, #1
 801561c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015620:	6122      	str	r2, [r4, #16]
 8015622:	2201      	movs	r2, #1
 8015624:	615a      	str	r2, [r3, #20]
 8015626:	e7be      	b.n	80155a6 <__gethex+0x362>
 8015628:	6922      	ldr	r2, [r4, #16]
 801562a:	455a      	cmp	r2, fp
 801562c:	dd0b      	ble.n	8015646 <__gethex+0x402>
 801562e:	2101      	movs	r1, #1
 8015630:	4620      	mov	r0, r4
 8015632:	f7ff fd9f 	bl	8015174 <rshift>
 8015636:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801563a:	3701      	adds	r7, #1
 801563c:	42bb      	cmp	r3, r7
 801563e:	f6ff aee0 	blt.w	8015402 <__gethex+0x1be>
 8015642:	2501      	movs	r5, #1
 8015644:	e7c2      	b.n	80155cc <__gethex+0x388>
 8015646:	f016 061f 	ands.w	r6, r6, #31
 801564a:	d0fa      	beq.n	8015642 <__gethex+0x3fe>
 801564c:	4453      	add	r3, sl
 801564e:	f1c6 0620 	rsb	r6, r6, #32
 8015652:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8015656:	f7fd fd51 	bl	80130fc <__hi0bits>
 801565a:	42b0      	cmp	r0, r6
 801565c:	dbe7      	blt.n	801562e <__gethex+0x3ea>
 801565e:	e7f0      	b.n	8015642 <__gethex+0x3fe>
 8015660:	0801725b 	.word	0x0801725b

08015664 <L_shift>:
 8015664:	f1c2 0208 	rsb	r2, r2, #8
 8015668:	0092      	lsls	r2, r2, #2
 801566a:	b570      	push	{r4, r5, r6, lr}
 801566c:	f1c2 0620 	rsb	r6, r2, #32
 8015670:	6843      	ldr	r3, [r0, #4]
 8015672:	6804      	ldr	r4, [r0, #0]
 8015674:	fa03 f506 	lsl.w	r5, r3, r6
 8015678:	432c      	orrs	r4, r5
 801567a:	40d3      	lsrs	r3, r2
 801567c:	6004      	str	r4, [r0, #0]
 801567e:	f840 3f04 	str.w	r3, [r0, #4]!
 8015682:	4288      	cmp	r0, r1
 8015684:	d3f4      	bcc.n	8015670 <L_shift+0xc>
 8015686:	bd70      	pop	{r4, r5, r6, pc}

08015688 <__match>:
 8015688:	b530      	push	{r4, r5, lr}
 801568a:	6803      	ldr	r3, [r0, #0]
 801568c:	3301      	adds	r3, #1
 801568e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015692:	b914      	cbnz	r4, 801569a <__match+0x12>
 8015694:	6003      	str	r3, [r0, #0]
 8015696:	2001      	movs	r0, #1
 8015698:	bd30      	pop	{r4, r5, pc}
 801569a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801569e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80156a2:	2d19      	cmp	r5, #25
 80156a4:	bf98      	it	ls
 80156a6:	3220      	addls	r2, #32
 80156a8:	42a2      	cmp	r2, r4
 80156aa:	d0f0      	beq.n	801568e <__match+0x6>
 80156ac:	2000      	movs	r0, #0
 80156ae:	e7f3      	b.n	8015698 <__match+0x10>

080156b0 <__hexnan>:
 80156b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156b4:	680b      	ldr	r3, [r1, #0]
 80156b6:	6801      	ldr	r1, [r0, #0]
 80156b8:	115e      	asrs	r6, r3, #5
 80156ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80156be:	f013 031f 	ands.w	r3, r3, #31
 80156c2:	b087      	sub	sp, #28
 80156c4:	bf18      	it	ne
 80156c6:	3604      	addne	r6, #4
 80156c8:	2500      	movs	r5, #0
 80156ca:	1f37      	subs	r7, r6, #4
 80156cc:	4682      	mov	sl, r0
 80156ce:	4690      	mov	r8, r2
 80156d0:	9301      	str	r3, [sp, #4]
 80156d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80156d6:	46b9      	mov	r9, r7
 80156d8:	463c      	mov	r4, r7
 80156da:	9502      	str	r5, [sp, #8]
 80156dc:	46ab      	mov	fp, r5
 80156de:	784a      	ldrb	r2, [r1, #1]
 80156e0:	1c4b      	adds	r3, r1, #1
 80156e2:	9303      	str	r3, [sp, #12]
 80156e4:	b342      	cbz	r2, 8015738 <__hexnan+0x88>
 80156e6:	4610      	mov	r0, r2
 80156e8:	9105      	str	r1, [sp, #20]
 80156ea:	9204      	str	r2, [sp, #16]
 80156ec:	f7ff fd94 	bl	8015218 <__hexdig_fun>
 80156f0:	2800      	cmp	r0, #0
 80156f2:	d151      	bne.n	8015798 <__hexnan+0xe8>
 80156f4:	9a04      	ldr	r2, [sp, #16]
 80156f6:	9905      	ldr	r1, [sp, #20]
 80156f8:	2a20      	cmp	r2, #32
 80156fa:	d818      	bhi.n	801572e <__hexnan+0x7e>
 80156fc:	9b02      	ldr	r3, [sp, #8]
 80156fe:	459b      	cmp	fp, r3
 8015700:	dd13      	ble.n	801572a <__hexnan+0x7a>
 8015702:	454c      	cmp	r4, r9
 8015704:	d206      	bcs.n	8015714 <__hexnan+0x64>
 8015706:	2d07      	cmp	r5, #7
 8015708:	dc04      	bgt.n	8015714 <__hexnan+0x64>
 801570a:	462a      	mov	r2, r5
 801570c:	4649      	mov	r1, r9
 801570e:	4620      	mov	r0, r4
 8015710:	f7ff ffa8 	bl	8015664 <L_shift>
 8015714:	4544      	cmp	r4, r8
 8015716:	d952      	bls.n	80157be <__hexnan+0x10e>
 8015718:	2300      	movs	r3, #0
 801571a:	f1a4 0904 	sub.w	r9, r4, #4
 801571e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015722:	f8cd b008 	str.w	fp, [sp, #8]
 8015726:	464c      	mov	r4, r9
 8015728:	461d      	mov	r5, r3
 801572a:	9903      	ldr	r1, [sp, #12]
 801572c:	e7d7      	b.n	80156de <__hexnan+0x2e>
 801572e:	2a29      	cmp	r2, #41	@ 0x29
 8015730:	d157      	bne.n	80157e2 <__hexnan+0x132>
 8015732:	3102      	adds	r1, #2
 8015734:	f8ca 1000 	str.w	r1, [sl]
 8015738:	f1bb 0f00 	cmp.w	fp, #0
 801573c:	d051      	beq.n	80157e2 <__hexnan+0x132>
 801573e:	454c      	cmp	r4, r9
 8015740:	d206      	bcs.n	8015750 <__hexnan+0xa0>
 8015742:	2d07      	cmp	r5, #7
 8015744:	dc04      	bgt.n	8015750 <__hexnan+0xa0>
 8015746:	462a      	mov	r2, r5
 8015748:	4649      	mov	r1, r9
 801574a:	4620      	mov	r0, r4
 801574c:	f7ff ff8a 	bl	8015664 <L_shift>
 8015750:	4544      	cmp	r4, r8
 8015752:	d936      	bls.n	80157c2 <__hexnan+0x112>
 8015754:	f1a8 0204 	sub.w	r2, r8, #4
 8015758:	4623      	mov	r3, r4
 801575a:	f853 1b04 	ldr.w	r1, [r3], #4
 801575e:	f842 1f04 	str.w	r1, [r2, #4]!
 8015762:	429f      	cmp	r7, r3
 8015764:	d2f9      	bcs.n	801575a <__hexnan+0xaa>
 8015766:	1b3b      	subs	r3, r7, r4
 8015768:	f023 0303 	bic.w	r3, r3, #3
 801576c:	3304      	adds	r3, #4
 801576e:	3401      	adds	r4, #1
 8015770:	3e03      	subs	r6, #3
 8015772:	42b4      	cmp	r4, r6
 8015774:	bf88      	it	hi
 8015776:	2304      	movhi	r3, #4
 8015778:	4443      	add	r3, r8
 801577a:	2200      	movs	r2, #0
 801577c:	f843 2b04 	str.w	r2, [r3], #4
 8015780:	429f      	cmp	r7, r3
 8015782:	d2fb      	bcs.n	801577c <__hexnan+0xcc>
 8015784:	683b      	ldr	r3, [r7, #0]
 8015786:	b91b      	cbnz	r3, 8015790 <__hexnan+0xe0>
 8015788:	4547      	cmp	r7, r8
 801578a:	d128      	bne.n	80157de <__hexnan+0x12e>
 801578c:	2301      	movs	r3, #1
 801578e:	603b      	str	r3, [r7, #0]
 8015790:	2005      	movs	r0, #5
 8015792:	b007      	add	sp, #28
 8015794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015798:	3501      	adds	r5, #1
 801579a:	2d08      	cmp	r5, #8
 801579c:	f10b 0b01 	add.w	fp, fp, #1
 80157a0:	dd06      	ble.n	80157b0 <__hexnan+0x100>
 80157a2:	4544      	cmp	r4, r8
 80157a4:	d9c1      	bls.n	801572a <__hexnan+0x7a>
 80157a6:	2300      	movs	r3, #0
 80157a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80157ac:	2501      	movs	r5, #1
 80157ae:	3c04      	subs	r4, #4
 80157b0:	6822      	ldr	r2, [r4, #0]
 80157b2:	f000 000f 	and.w	r0, r0, #15
 80157b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80157ba:	6020      	str	r0, [r4, #0]
 80157bc:	e7b5      	b.n	801572a <__hexnan+0x7a>
 80157be:	2508      	movs	r5, #8
 80157c0:	e7b3      	b.n	801572a <__hexnan+0x7a>
 80157c2:	9b01      	ldr	r3, [sp, #4]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d0dd      	beq.n	8015784 <__hexnan+0xd4>
 80157c8:	f1c3 0320 	rsb	r3, r3, #32
 80157cc:	f04f 32ff 	mov.w	r2, #4294967295
 80157d0:	40da      	lsrs	r2, r3
 80157d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80157d6:	4013      	ands	r3, r2
 80157d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80157dc:	e7d2      	b.n	8015784 <__hexnan+0xd4>
 80157de:	3f04      	subs	r7, #4
 80157e0:	e7d0      	b.n	8015784 <__hexnan+0xd4>
 80157e2:	2004      	movs	r0, #4
 80157e4:	e7d5      	b.n	8015792 <__hexnan+0xe2>

080157e6 <__ascii_mbtowc>:
 80157e6:	b082      	sub	sp, #8
 80157e8:	b901      	cbnz	r1, 80157ec <__ascii_mbtowc+0x6>
 80157ea:	a901      	add	r1, sp, #4
 80157ec:	b142      	cbz	r2, 8015800 <__ascii_mbtowc+0x1a>
 80157ee:	b14b      	cbz	r3, 8015804 <__ascii_mbtowc+0x1e>
 80157f0:	7813      	ldrb	r3, [r2, #0]
 80157f2:	600b      	str	r3, [r1, #0]
 80157f4:	7812      	ldrb	r2, [r2, #0]
 80157f6:	1e10      	subs	r0, r2, #0
 80157f8:	bf18      	it	ne
 80157fa:	2001      	movne	r0, #1
 80157fc:	b002      	add	sp, #8
 80157fe:	4770      	bx	lr
 8015800:	4610      	mov	r0, r2
 8015802:	e7fb      	b.n	80157fc <__ascii_mbtowc+0x16>
 8015804:	f06f 0001 	mvn.w	r0, #1
 8015808:	e7f8      	b.n	80157fc <__ascii_mbtowc+0x16>

0801580a <_realloc_r>:
 801580a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801580e:	4680      	mov	r8, r0
 8015810:	4615      	mov	r5, r2
 8015812:	460c      	mov	r4, r1
 8015814:	b921      	cbnz	r1, 8015820 <_realloc_r+0x16>
 8015816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801581a:	4611      	mov	r1, r2
 801581c:	f7fd baf0 	b.w	8012e00 <_malloc_r>
 8015820:	b92a      	cbnz	r2, 801582e <_realloc_r+0x24>
 8015822:	f7fd fa79 	bl	8012d18 <_free_r>
 8015826:	2400      	movs	r4, #0
 8015828:	4620      	mov	r0, r4
 801582a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801582e:	f000 f8b2 	bl	8015996 <_malloc_usable_size_r>
 8015832:	4285      	cmp	r5, r0
 8015834:	4606      	mov	r6, r0
 8015836:	d802      	bhi.n	801583e <_realloc_r+0x34>
 8015838:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801583c:	d8f4      	bhi.n	8015828 <_realloc_r+0x1e>
 801583e:	4629      	mov	r1, r5
 8015840:	4640      	mov	r0, r8
 8015842:	f7fd fadd 	bl	8012e00 <_malloc_r>
 8015846:	4607      	mov	r7, r0
 8015848:	2800      	cmp	r0, #0
 801584a:	d0ec      	beq.n	8015826 <_realloc_r+0x1c>
 801584c:	42b5      	cmp	r5, r6
 801584e:	462a      	mov	r2, r5
 8015850:	4621      	mov	r1, r4
 8015852:	bf28      	it	cs
 8015854:	4632      	movcs	r2, r6
 8015856:	f7fc fbfc 	bl	8012052 <memcpy>
 801585a:	4621      	mov	r1, r4
 801585c:	4640      	mov	r0, r8
 801585e:	f7fd fa5b 	bl	8012d18 <_free_r>
 8015862:	463c      	mov	r4, r7
 8015864:	e7e0      	b.n	8015828 <_realloc_r+0x1e>
	...

08015868 <_strtoul_l.constprop.0>:
 8015868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801586c:	4e34      	ldr	r6, [pc, #208]	@ (8015940 <_strtoul_l.constprop.0+0xd8>)
 801586e:	4686      	mov	lr, r0
 8015870:	460d      	mov	r5, r1
 8015872:	4628      	mov	r0, r5
 8015874:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015878:	5d37      	ldrb	r7, [r6, r4]
 801587a:	f017 0708 	ands.w	r7, r7, #8
 801587e:	d1f8      	bne.n	8015872 <_strtoul_l.constprop.0+0xa>
 8015880:	2c2d      	cmp	r4, #45	@ 0x2d
 8015882:	d12f      	bne.n	80158e4 <_strtoul_l.constprop.0+0x7c>
 8015884:	782c      	ldrb	r4, [r5, #0]
 8015886:	2701      	movs	r7, #1
 8015888:	1c85      	adds	r5, r0, #2
 801588a:	f033 0010 	bics.w	r0, r3, #16
 801588e:	d109      	bne.n	80158a4 <_strtoul_l.constprop.0+0x3c>
 8015890:	2c30      	cmp	r4, #48	@ 0x30
 8015892:	d12c      	bne.n	80158ee <_strtoul_l.constprop.0+0x86>
 8015894:	7828      	ldrb	r0, [r5, #0]
 8015896:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801589a:	2858      	cmp	r0, #88	@ 0x58
 801589c:	d127      	bne.n	80158ee <_strtoul_l.constprop.0+0x86>
 801589e:	786c      	ldrb	r4, [r5, #1]
 80158a0:	2310      	movs	r3, #16
 80158a2:	3502      	adds	r5, #2
 80158a4:	f04f 38ff 	mov.w	r8, #4294967295
 80158a8:	2600      	movs	r6, #0
 80158aa:	fbb8 f8f3 	udiv	r8, r8, r3
 80158ae:	fb03 f908 	mul.w	r9, r3, r8
 80158b2:	ea6f 0909 	mvn.w	r9, r9
 80158b6:	4630      	mov	r0, r6
 80158b8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80158bc:	f1bc 0f09 	cmp.w	ip, #9
 80158c0:	d81c      	bhi.n	80158fc <_strtoul_l.constprop.0+0x94>
 80158c2:	4664      	mov	r4, ip
 80158c4:	42a3      	cmp	r3, r4
 80158c6:	dd2a      	ble.n	801591e <_strtoul_l.constprop.0+0xb6>
 80158c8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80158cc:	d007      	beq.n	80158de <_strtoul_l.constprop.0+0x76>
 80158ce:	4580      	cmp	r8, r0
 80158d0:	d322      	bcc.n	8015918 <_strtoul_l.constprop.0+0xb0>
 80158d2:	d101      	bne.n	80158d8 <_strtoul_l.constprop.0+0x70>
 80158d4:	45a1      	cmp	r9, r4
 80158d6:	db1f      	blt.n	8015918 <_strtoul_l.constprop.0+0xb0>
 80158d8:	fb00 4003 	mla	r0, r0, r3, r4
 80158dc:	2601      	movs	r6, #1
 80158de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80158e2:	e7e9      	b.n	80158b8 <_strtoul_l.constprop.0+0x50>
 80158e4:	2c2b      	cmp	r4, #43	@ 0x2b
 80158e6:	bf04      	itt	eq
 80158e8:	782c      	ldrbeq	r4, [r5, #0]
 80158ea:	1c85      	addeq	r5, r0, #2
 80158ec:	e7cd      	b.n	801588a <_strtoul_l.constprop.0+0x22>
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d1d8      	bne.n	80158a4 <_strtoul_l.constprop.0+0x3c>
 80158f2:	2c30      	cmp	r4, #48	@ 0x30
 80158f4:	bf0c      	ite	eq
 80158f6:	2308      	moveq	r3, #8
 80158f8:	230a      	movne	r3, #10
 80158fa:	e7d3      	b.n	80158a4 <_strtoul_l.constprop.0+0x3c>
 80158fc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8015900:	f1bc 0f19 	cmp.w	ip, #25
 8015904:	d801      	bhi.n	801590a <_strtoul_l.constprop.0+0xa2>
 8015906:	3c37      	subs	r4, #55	@ 0x37
 8015908:	e7dc      	b.n	80158c4 <_strtoul_l.constprop.0+0x5c>
 801590a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801590e:	f1bc 0f19 	cmp.w	ip, #25
 8015912:	d804      	bhi.n	801591e <_strtoul_l.constprop.0+0xb6>
 8015914:	3c57      	subs	r4, #87	@ 0x57
 8015916:	e7d5      	b.n	80158c4 <_strtoul_l.constprop.0+0x5c>
 8015918:	f04f 36ff 	mov.w	r6, #4294967295
 801591c:	e7df      	b.n	80158de <_strtoul_l.constprop.0+0x76>
 801591e:	1c73      	adds	r3, r6, #1
 8015920:	d106      	bne.n	8015930 <_strtoul_l.constprop.0+0xc8>
 8015922:	2322      	movs	r3, #34	@ 0x22
 8015924:	f8ce 3000 	str.w	r3, [lr]
 8015928:	4630      	mov	r0, r6
 801592a:	b932      	cbnz	r2, 801593a <_strtoul_l.constprop.0+0xd2>
 801592c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015930:	b107      	cbz	r7, 8015934 <_strtoul_l.constprop.0+0xcc>
 8015932:	4240      	negs	r0, r0
 8015934:	2a00      	cmp	r2, #0
 8015936:	d0f9      	beq.n	801592c <_strtoul_l.constprop.0+0xc4>
 8015938:	b106      	cbz	r6, 801593c <_strtoul_l.constprop.0+0xd4>
 801593a:	1e69      	subs	r1, r5, #1
 801593c:	6011      	str	r1, [r2, #0]
 801593e:	e7f5      	b.n	801592c <_strtoul_l.constprop.0+0xc4>
 8015940:	08017421 	.word	0x08017421

08015944 <_strtoul_r>:
 8015944:	f7ff bf90 	b.w	8015868 <_strtoul_l.constprop.0>

08015948 <__ascii_wctomb>:
 8015948:	4603      	mov	r3, r0
 801594a:	4608      	mov	r0, r1
 801594c:	b141      	cbz	r1, 8015960 <__ascii_wctomb+0x18>
 801594e:	2aff      	cmp	r2, #255	@ 0xff
 8015950:	d904      	bls.n	801595c <__ascii_wctomb+0x14>
 8015952:	228a      	movs	r2, #138	@ 0x8a
 8015954:	601a      	str	r2, [r3, #0]
 8015956:	f04f 30ff 	mov.w	r0, #4294967295
 801595a:	4770      	bx	lr
 801595c:	700a      	strb	r2, [r1, #0]
 801595e:	2001      	movs	r0, #1
 8015960:	4770      	bx	lr
	...

08015964 <fiprintf>:
 8015964:	b40e      	push	{r1, r2, r3}
 8015966:	b503      	push	{r0, r1, lr}
 8015968:	4601      	mov	r1, r0
 801596a:	ab03      	add	r3, sp, #12
 801596c:	4805      	ldr	r0, [pc, #20]	@ (8015984 <fiprintf+0x20>)
 801596e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015972:	6800      	ldr	r0, [r0, #0]
 8015974:	9301      	str	r3, [sp, #4]
 8015976:	f000 f83f 	bl	80159f8 <_vfiprintf_r>
 801597a:	b002      	add	sp, #8
 801597c:	f85d eb04 	ldr.w	lr, [sp], #4
 8015980:	b003      	add	sp, #12
 8015982:	4770      	bx	lr
 8015984:	200001f8 	.word	0x200001f8

08015988 <abort>:
 8015988:	b508      	push	{r3, lr}
 801598a:	2006      	movs	r0, #6
 801598c:	f000 fa08 	bl	8015da0 <raise>
 8015990:	2001      	movs	r0, #1
 8015992:	f7ee fde7 	bl	8004564 <_exit>

08015996 <_malloc_usable_size_r>:
 8015996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801599a:	1f18      	subs	r0, r3, #4
 801599c:	2b00      	cmp	r3, #0
 801599e:	bfbc      	itt	lt
 80159a0:	580b      	ldrlt	r3, [r1, r0]
 80159a2:	18c0      	addlt	r0, r0, r3
 80159a4:	4770      	bx	lr

080159a6 <__sfputc_r>:
 80159a6:	6893      	ldr	r3, [r2, #8]
 80159a8:	3b01      	subs	r3, #1
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	b410      	push	{r4}
 80159ae:	6093      	str	r3, [r2, #8]
 80159b0:	da08      	bge.n	80159c4 <__sfputc_r+0x1e>
 80159b2:	6994      	ldr	r4, [r2, #24]
 80159b4:	42a3      	cmp	r3, r4
 80159b6:	db01      	blt.n	80159bc <__sfputc_r+0x16>
 80159b8:	290a      	cmp	r1, #10
 80159ba:	d103      	bne.n	80159c4 <__sfputc_r+0x1e>
 80159bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159c0:	f000 b932 	b.w	8015c28 <__swbuf_r>
 80159c4:	6813      	ldr	r3, [r2, #0]
 80159c6:	1c58      	adds	r0, r3, #1
 80159c8:	6010      	str	r0, [r2, #0]
 80159ca:	7019      	strb	r1, [r3, #0]
 80159cc:	4608      	mov	r0, r1
 80159ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80159d2:	4770      	bx	lr

080159d4 <__sfputs_r>:
 80159d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159d6:	4606      	mov	r6, r0
 80159d8:	460f      	mov	r7, r1
 80159da:	4614      	mov	r4, r2
 80159dc:	18d5      	adds	r5, r2, r3
 80159de:	42ac      	cmp	r4, r5
 80159e0:	d101      	bne.n	80159e6 <__sfputs_r+0x12>
 80159e2:	2000      	movs	r0, #0
 80159e4:	e007      	b.n	80159f6 <__sfputs_r+0x22>
 80159e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80159ea:	463a      	mov	r2, r7
 80159ec:	4630      	mov	r0, r6
 80159ee:	f7ff ffda 	bl	80159a6 <__sfputc_r>
 80159f2:	1c43      	adds	r3, r0, #1
 80159f4:	d1f3      	bne.n	80159de <__sfputs_r+0xa>
 80159f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080159f8 <_vfiprintf_r>:
 80159f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159fc:	460d      	mov	r5, r1
 80159fe:	b09d      	sub	sp, #116	@ 0x74
 8015a00:	4614      	mov	r4, r2
 8015a02:	4698      	mov	r8, r3
 8015a04:	4606      	mov	r6, r0
 8015a06:	b118      	cbz	r0, 8015a10 <_vfiprintf_r+0x18>
 8015a08:	6a03      	ldr	r3, [r0, #32]
 8015a0a:	b90b      	cbnz	r3, 8015a10 <_vfiprintf_r+0x18>
 8015a0c:	f7fc f9ca 	bl	8011da4 <__sinit>
 8015a10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015a12:	07d9      	lsls	r1, r3, #31
 8015a14:	d405      	bmi.n	8015a22 <_vfiprintf_r+0x2a>
 8015a16:	89ab      	ldrh	r3, [r5, #12]
 8015a18:	059a      	lsls	r2, r3, #22
 8015a1a:	d402      	bmi.n	8015a22 <_vfiprintf_r+0x2a>
 8015a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015a1e:	f7fc fb16 	bl	801204e <__retarget_lock_acquire_recursive>
 8015a22:	89ab      	ldrh	r3, [r5, #12]
 8015a24:	071b      	lsls	r3, r3, #28
 8015a26:	d501      	bpl.n	8015a2c <_vfiprintf_r+0x34>
 8015a28:	692b      	ldr	r3, [r5, #16]
 8015a2a:	b99b      	cbnz	r3, 8015a54 <_vfiprintf_r+0x5c>
 8015a2c:	4629      	mov	r1, r5
 8015a2e:	4630      	mov	r0, r6
 8015a30:	f000 f938 	bl	8015ca4 <__swsetup_r>
 8015a34:	b170      	cbz	r0, 8015a54 <_vfiprintf_r+0x5c>
 8015a36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015a38:	07dc      	lsls	r4, r3, #31
 8015a3a:	d504      	bpl.n	8015a46 <_vfiprintf_r+0x4e>
 8015a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8015a40:	b01d      	add	sp, #116	@ 0x74
 8015a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a46:	89ab      	ldrh	r3, [r5, #12]
 8015a48:	0598      	lsls	r0, r3, #22
 8015a4a:	d4f7      	bmi.n	8015a3c <_vfiprintf_r+0x44>
 8015a4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015a4e:	f7fc faff 	bl	8012050 <__retarget_lock_release_recursive>
 8015a52:	e7f3      	b.n	8015a3c <_vfiprintf_r+0x44>
 8015a54:	2300      	movs	r3, #0
 8015a56:	9309      	str	r3, [sp, #36]	@ 0x24
 8015a58:	2320      	movs	r3, #32
 8015a5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8015a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015a62:	2330      	movs	r3, #48	@ 0x30
 8015a64:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8015c14 <_vfiprintf_r+0x21c>
 8015a68:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8015a6c:	f04f 0901 	mov.w	r9, #1
 8015a70:	4623      	mov	r3, r4
 8015a72:	469a      	mov	sl, r3
 8015a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015a78:	b10a      	cbz	r2, 8015a7e <_vfiprintf_r+0x86>
 8015a7a:	2a25      	cmp	r2, #37	@ 0x25
 8015a7c:	d1f9      	bne.n	8015a72 <_vfiprintf_r+0x7a>
 8015a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8015a82:	d00b      	beq.n	8015a9c <_vfiprintf_r+0xa4>
 8015a84:	465b      	mov	r3, fp
 8015a86:	4622      	mov	r2, r4
 8015a88:	4629      	mov	r1, r5
 8015a8a:	4630      	mov	r0, r6
 8015a8c:	f7ff ffa2 	bl	80159d4 <__sfputs_r>
 8015a90:	3001      	adds	r0, #1
 8015a92:	f000 80a7 	beq.w	8015be4 <_vfiprintf_r+0x1ec>
 8015a96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015a98:	445a      	add	r2, fp
 8015a9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8015a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	f000 809f 	beq.w	8015be4 <_vfiprintf_r+0x1ec>
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8015aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ab0:	f10a 0a01 	add.w	sl, sl, #1
 8015ab4:	9304      	str	r3, [sp, #16]
 8015ab6:	9307      	str	r3, [sp, #28]
 8015ab8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8015abc:	931a      	str	r3, [sp, #104]	@ 0x68
 8015abe:	4654      	mov	r4, sl
 8015ac0:	2205      	movs	r2, #5
 8015ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ac6:	4853      	ldr	r0, [pc, #332]	@ (8015c14 <_vfiprintf_r+0x21c>)
 8015ac8:	f7ea fbaa 	bl	8000220 <memchr>
 8015acc:	9a04      	ldr	r2, [sp, #16]
 8015ace:	b9d8      	cbnz	r0, 8015b08 <_vfiprintf_r+0x110>
 8015ad0:	06d1      	lsls	r1, r2, #27
 8015ad2:	bf44      	itt	mi
 8015ad4:	2320      	movmi	r3, #32
 8015ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015ada:	0713      	lsls	r3, r2, #28
 8015adc:	bf44      	itt	mi
 8015ade:	232b      	movmi	r3, #43	@ 0x2b
 8015ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8015ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8015ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8015aea:	d015      	beq.n	8015b18 <_vfiprintf_r+0x120>
 8015aec:	9a07      	ldr	r2, [sp, #28]
 8015aee:	4654      	mov	r4, sl
 8015af0:	2000      	movs	r0, #0
 8015af2:	f04f 0c0a 	mov.w	ip, #10
 8015af6:	4621      	mov	r1, r4
 8015af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015afc:	3b30      	subs	r3, #48	@ 0x30
 8015afe:	2b09      	cmp	r3, #9
 8015b00:	d94b      	bls.n	8015b9a <_vfiprintf_r+0x1a2>
 8015b02:	b1b0      	cbz	r0, 8015b32 <_vfiprintf_r+0x13a>
 8015b04:	9207      	str	r2, [sp, #28]
 8015b06:	e014      	b.n	8015b32 <_vfiprintf_r+0x13a>
 8015b08:	eba0 0308 	sub.w	r3, r0, r8
 8015b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8015b10:	4313      	orrs	r3, r2
 8015b12:	9304      	str	r3, [sp, #16]
 8015b14:	46a2      	mov	sl, r4
 8015b16:	e7d2      	b.n	8015abe <_vfiprintf_r+0xc6>
 8015b18:	9b03      	ldr	r3, [sp, #12]
 8015b1a:	1d19      	adds	r1, r3, #4
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	9103      	str	r1, [sp, #12]
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	bfbb      	ittet	lt
 8015b24:	425b      	neglt	r3, r3
 8015b26:	f042 0202 	orrlt.w	r2, r2, #2
 8015b2a:	9307      	strge	r3, [sp, #28]
 8015b2c:	9307      	strlt	r3, [sp, #28]
 8015b2e:	bfb8      	it	lt
 8015b30:	9204      	strlt	r2, [sp, #16]
 8015b32:	7823      	ldrb	r3, [r4, #0]
 8015b34:	2b2e      	cmp	r3, #46	@ 0x2e
 8015b36:	d10a      	bne.n	8015b4e <_vfiprintf_r+0x156>
 8015b38:	7863      	ldrb	r3, [r4, #1]
 8015b3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8015b3c:	d132      	bne.n	8015ba4 <_vfiprintf_r+0x1ac>
 8015b3e:	9b03      	ldr	r3, [sp, #12]
 8015b40:	1d1a      	adds	r2, r3, #4
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	9203      	str	r2, [sp, #12]
 8015b46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8015b4a:	3402      	adds	r4, #2
 8015b4c:	9305      	str	r3, [sp, #20]
 8015b4e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8015c24 <_vfiprintf_r+0x22c>
 8015b52:	7821      	ldrb	r1, [r4, #0]
 8015b54:	2203      	movs	r2, #3
 8015b56:	4650      	mov	r0, sl
 8015b58:	f7ea fb62 	bl	8000220 <memchr>
 8015b5c:	b138      	cbz	r0, 8015b6e <_vfiprintf_r+0x176>
 8015b5e:	9b04      	ldr	r3, [sp, #16]
 8015b60:	eba0 000a 	sub.w	r0, r0, sl
 8015b64:	2240      	movs	r2, #64	@ 0x40
 8015b66:	4082      	lsls	r2, r0
 8015b68:	4313      	orrs	r3, r2
 8015b6a:	3401      	adds	r4, #1
 8015b6c:	9304      	str	r3, [sp, #16]
 8015b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015b72:	4829      	ldr	r0, [pc, #164]	@ (8015c18 <_vfiprintf_r+0x220>)
 8015b74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8015b78:	2206      	movs	r2, #6
 8015b7a:	f7ea fb51 	bl	8000220 <memchr>
 8015b7e:	2800      	cmp	r0, #0
 8015b80:	d03f      	beq.n	8015c02 <_vfiprintf_r+0x20a>
 8015b82:	4b26      	ldr	r3, [pc, #152]	@ (8015c1c <_vfiprintf_r+0x224>)
 8015b84:	bb1b      	cbnz	r3, 8015bce <_vfiprintf_r+0x1d6>
 8015b86:	9b03      	ldr	r3, [sp, #12]
 8015b88:	3307      	adds	r3, #7
 8015b8a:	f023 0307 	bic.w	r3, r3, #7
 8015b8e:	3308      	adds	r3, #8
 8015b90:	9303      	str	r3, [sp, #12]
 8015b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015b94:	443b      	add	r3, r7
 8015b96:	9309      	str	r3, [sp, #36]	@ 0x24
 8015b98:	e76a      	b.n	8015a70 <_vfiprintf_r+0x78>
 8015b9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8015b9e:	460c      	mov	r4, r1
 8015ba0:	2001      	movs	r0, #1
 8015ba2:	e7a8      	b.n	8015af6 <_vfiprintf_r+0xfe>
 8015ba4:	2300      	movs	r3, #0
 8015ba6:	3401      	adds	r4, #1
 8015ba8:	9305      	str	r3, [sp, #20]
 8015baa:	4619      	mov	r1, r3
 8015bac:	f04f 0c0a 	mov.w	ip, #10
 8015bb0:	4620      	mov	r0, r4
 8015bb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015bb6:	3a30      	subs	r2, #48	@ 0x30
 8015bb8:	2a09      	cmp	r2, #9
 8015bba:	d903      	bls.n	8015bc4 <_vfiprintf_r+0x1cc>
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d0c6      	beq.n	8015b4e <_vfiprintf_r+0x156>
 8015bc0:	9105      	str	r1, [sp, #20]
 8015bc2:	e7c4      	b.n	8015b4e <_vfiprintf_r+0x156>
 8015bc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8015bc8:	4604      	mov	r4, r0
 8015bca:	2301      	movs	r3, #1
 8015bcc:	e7f0      	b.n	8015bb0 <_vfiprintf_r+0x1b8>
 8015bce:	ab03      	add	r3, sp, #12
 8015bd0:	9300      	str	r3, [sp, #0]
 8015bd2:	462a      	mov	r2, r5
 8015bd4:	4b12      	ldr	r3, [pc, #72]	@ (8015c20 <_vfiprintf_r+0x228>)
 8015bd6:	a904      	add	r1, sp, #16
 8015bd8:	4630      	mov	r0, r6
 8015bda:	f7fb fa8b 	bl	80110f4 <_printf_float>
 8015bde:	4607      	mov	r7, r0
 8015be0:	1c78      	adds	r0, r7, #1
 8015be2:	d1d6      	bne.n	8015b92 <_vfiprintf_r+0x19a>
 8015be4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8015be6:	07d9      	lsls	r1, r3, #31
 8015be8:	d405      	bmi.n	8015bf6 <_vfiprintf_r+0x1fe>
 8015bea:	89ab      	ldrh	r3, [r5, #12]
 8015bec:	059a      	lsls	r2, r3, #22
 8015bee:	d402      	bmi.n	8015bf6 <_vfiprintf_r+0x1fe>
 8015bf0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8015bf2:	f7fc fa2d 	bl	8012050 <__retarget_lock_release_recursive>
 8015bf6:	89ab      	ldrh	r3, [r5, #12]
 8015bf8:	065b      	lsls	r3, r3, #25
 8015bfa:	f53f af1f 	bmi.w	8015a3c <_vfiprintf_r+0x44>
 8015bfe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015c00:	e71e      	b.n	8015a40 <_vfiprintf_r+0x48>
 8015c02:	ab03      	add	r3, sp, #12
 8015c04:	9300      	str	r3, [sp, #0]
 8015c06:	462a      	mov	r2, r5
 8015c08:	4b05      	ldr	r3, [pc, #20]	@ (8015c20 <_vfiprintf_r+0x228>)
 8015c0a:	a904      	add	r1, sp, #16
 8015c0c:	4630      	mov	r0, r6
 8015c0e:	f7fb fd09 	bl	8011624 <_printf_i>
 8015c12:	e7e4      	b.n	8015bde <_vfiprintf_r+0x1e6>
 8015c14:	08017521 	.word	0x08017521
 8015c18:	0801752b 	.word	0x0801752b
 8015c1c:	080110f5 	.word	0x080110f5
 8015c20:	080159d5 	.word	0x080159d5
 8015c24:	08017527 	.word	0x08017527

08015c28 <__swbuf_r>:
 8015c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c2a:	460e      	mov	r6, r1
 8015c2c:	4614      	mov	r4, r2
 8015c2e:	4605      	mov	r5, r0
 8015c30:	b118      	cbz	r0, 8015c3a <__swbuf_r+0x12>
 8015c32:	6a03      	ldr	r3, [r0, #32]
 8015c34:	b90b      	cbnz	r3, 8015c3a <__swbuf_r+0x12>
 8015c36:	f7fc f8b5 	bl	8011da4 <__sinit>
 8015c3a:	69a3      	ldr	r3, [r4, #24]
 8015c3c:	60a3      	str	r3, [r4, #8]
 8015c3e:	89a3      	ldrh	r3, [r4, #12]
 8015c40:	071a      	lsls	r2, r3, #28
 8015c42:	d501      	bpl.n	8015c48 <__swbuf_r+0x20>
 8015c44:	6923      	ldr	r3, [r4, #16]
 8015c46:	b943      	cbnz	r3, 8015c5a <__swbuf_r+0x32>
 8015c48:	4621      	mov	r1, r4
 8015c4a:	4628      	mov	r0, r5
 8015c4c:	f000 f82a 	bl	8015ca4 <__swsetup_r>
 8015c50:	b118      	cbz	r0, 8015c5a <__swbuf_r+0x32>
 8015c52:	f04f 37ff 	mov.w	r7, #4294967295
 8015c56:	4638      	mov	r0, r7
 8015c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c5a:	6823      	ldr	r3, [r4, #0]
 8015c5c:	6922      	ldr	r2, [r4, #16]
 8015c5e:	1a98      	subs	r0, r3, r2
 8015c60:	6963      	ldr	r3, [r4, #20]
 8015c62:	b2f6      	uxtb	r6, r6
 8015c64:	4283      	cmp	r3, r0
 8015c66:	4637      	mov	r7, r6
 8015c68:	dc05      	bgt.n	8015c76 <__swbuf_r+0x4e>
 8015c6a:	4621      	mov	r1, r4
 8015c6c:	4628      	mov	r0, r5
 8015c6e:	f7ff f97f 	bl	8014f70 <_fflush_r>
 8015c72:	2800      	cmp	r0, #0
 8015c74:	d1ed      	bne.n	8015c52 <__swbuf_r+0x2a>
 8015c76:	68a3      	ldr	r3, [r4, #8]
 8015c78:	3b01      	subs	r3, #1
 8015c7a:	60a3      	str	r3, [r4, #8]
 8015c7c:	6823      	ldr	r3, [r4, #0]
 8015c7e:	1c5a      	adds	r2, r3, #1
 8015c80:	6022      	str	r2, [r4, #0]
 8015c82:	701e      	strb	r6, [r3, #0]
 8015c84:	6962      	ldr	r2, [r4, #20]
 8015c86:	1c43      	adds	r3, r0, #1
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	d004      	beq.n	8015c96 <__swbuf_r+0x6e>
 8015c8c:	89a3      	ldrh	r3, [r4, #12]
 8015c8e:	07db      	lsls	r3, r3, #31
 8015c90:	d5e1      	bpl.n	8015c56 <__swbuf_r+0x2e>
 8015c92:	2e0a      	cmp	r6, #10
 8015c94:	d1df      	bne.n	8015c56 <__swbuf_r+0x2e>
 8015c96:	4621      	mov	r1, r4
 8015c98:	4628      	mov	r0, r5
 8015c9a:	f7ff f969 	bl	8014f70 <_fflush_r>
 8015c9e:	2800      	cmp	r0, #0
 8015ca0:	d0d9      	beq.n	8015c56 <__swbuf_r+0x2e>
 8015ca2:	e7d6      	b.n	8015c52 <__swbuf_r+0x2a>

08015ca4 <__swsetup_r>:
 8015ca4:	b538      	push	{r3, r4, r5, lr}
 8015ca6:	4b29      	ldr	r3, [pc, #164]	@ (8015d4c <__swsetup_r+0xa8>)
 8015ca8:	4605      	mov	r5, r0
 8015caa:	6818      	ldr	r0, [r3, #0]
 8015cac:	460c      	mov	r4, r1
 8015cae:	b118      	cbz	r0, 8015cb8 <__swsetup_r+0x14>
 8015cb0:	6a03      	ldr	r3, [r0, #32]
 8015cb2:	b90b      	cbnz	r3, 8015cb8 <__swsetup_r+0x14>
 8015cb4:	f7fc f876 	bl	8011da4 <__sinit>
 8015cb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015cbc:	0719      	lsls	r1, r3, #28
 8015cbe:	d422      	bmi.n	8015d06 <__swsetup_r+0x62>
 8015cc0:	06da      	lsls	r2, r3, #27
 8015cc2:	d407      	bmi.n	8015cd4 <__swsetup_r+0x30>
 8015cc4:	2209      	movs	r2, #9
 8015cc6:	602a      	str	r2, [r5, #0]
 8015cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015ccc:	81a3      	strh	r3, [r4, #12]
 8015cce:	f04f 30ff 	mov.w	r0, #4294967295
 8015cd2:	e033      	b.n	8015d3c <__swsetup_r+0x98>
 8015cd4:	0758      	lsls	r0, r3, #29
 8015cd6:	d512      	bpl.n	8015cfe <__swsetup_r+0x5a>
 8015cd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015cda:	b141      	cbz	r1, 8015cee <__swsetup_r+0x4a>
 8015cdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015ce0:	4299      	cmp	r1, r3
 8015ce2:	d002      	beq.n	8015cea <__swsetup_r+0x46>
 8015ce4:	4628      	mov	r0, r5
 8015ce6:	f7fd f817 	bl	8012d18 <_free_r>
 8015cea:	2300      	movs	r3, #0
 8015cec:	6363      	str	r3, [r4, #52]	@ 0x34
 8015cee:	89a3      	ldrh	r3, [r4, #12]
 8015cf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015cf4:	81a3      	strh	r3, [r4, #12]
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	6063      	str	r3, [r4, #4]
 8015cfa:	6923      	ldr	r3, [r4, #16]
 8015cfc:	6023      	str	r3, [r4, #0]
 8015cfe:	89a3      	ldrh	r3, [r4, #12]
 8015d00:	f043 0308 	orr.w	r3, r3, #8
 8015d04:	81a3      	strh	r3, [r4, #12]
 8015d06:	6923      	ldr	r3, [r4, #16]
 8015d08:	b94b      	cbnz	r3, 8015d1e <__swsetup_r+0x7a>
 8015d0a:	89a3      	ldrh	r3, [r4, #12]
 8015d0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015d14:	d003      	beq.n	8015d1e <__swsetup_r+0x7a>
 8015d16:	4621      	mov	r1, r4
 8015d18:	4628      	mov	r0, r5
 8015d1a:	f000 f883 	bl	8015e24 <__smakebuf_r>
 8015d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d22:	f013 0201 	ands.w	r2, r3, #1
 8015d26:	d00a      	beq.n	8015d3e <__swsetup_r+0x9a>
 8015d28:	2200      	movs	r2, #0
 8015d2a:	60a2      	str	r2, [r4, #8]
 8015d2c:	6962      	ldr	r2, [r4, #20]
 8015d2e:	4252      	negs	r2, r2
 8015d30:	61a2      	str	r2, [r4, #24]
 8015d32:	6922      	ldr	r2, [r4, #16]
 8015d34:	b942      	cbnz	r2, 8015d48 <__swsetup_r+0xa4>
 8015d36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015d3a:	d1c5      	bne.n	8015cc8 <__swsetup_r+0x24>
 8015d3c:	bd38      	pop	{r3, r4, r5, pc}
 8015d3e:	0799      	lsls	r1, r3, #30
 8015d40:	bf58      	it	pl
 8015d42:	6962      	ldrpl	r2, [r4, #20]
 8015d44:	60a2      	str	r2, [r4, #8]
 8015d46:	e7f4      	b.n	8015d32 <__swsetup_r+0x8e>
 8015d48:	2000      	movs	r0, #0
 8015d4a:	e7f7      	b.n	8015d3c <__swsetup_r+0x98>
 8015d4c:	200001f8 	.word	0x200001f8

08015d50 <_raise_r>:
 8015d50:	291f      	cmp	r1, #31
 8015d52:	b538      	push	{r3, r4, r5, lr}
 8015d54:	4605      	mov	r5, r0
 8015d56:	460c      	mov	r4, r1
 8015d58:	d904      	bls.n	8015d64 <_raise_r+0x14>
 8015d5a:	2316      	movs	r3, #22
 8015d5c:	6003      	str	r3, [r0, #0]
 8015d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8015d62:	bd38      	pop	{r3, r4, r5, pc}
 8015d64:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8015d66:	b112      	cbz	r2, 8015d6e <_raise_r+0x1e>
 8015d68:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015d6c:	b94b      	cbnz	r3, 8015d82 <_raise_r+0x32>
 8015d6e:	4628      	mov	r0, r5
 8015d70:	f000 f830 	bl	8015dd4 <_getpid_r>
 8015d74:	4622      	mov	r2, r4
 8015d76:	4601      	mov	r1, r0
 8015d78:	4628      	mov	r0, r5
 8015d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d7e:	f000 b817 	b.w	8015db0 <_kill_r>
 8015d82:	2b01      	cmp	r3, #1
 8015d84:	d00a      	beq.n	8015d9c <_raise_r+0x4c>
 8015d86:	1c59      	adds	r1, r3, #1
 8015d88:	d103      	bne.n	8015d92 <_raise_r+0x42>
 8015d8a:	2316      	movs	r3, #22
 8015d8c:	6003      	str	r3, [r0, #0]
 8015d8e:	2001      	movs	r0, #1
 8015d90:	e7e7      	b.n	8015d62 <_raise_r+0x12>
 8015d92:	2100      	movs	r1, #0
 8015d94:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8015d98:	4620      	mov	r0, r4
 8015d9a:	4798      	blx	r3
 8015d9c:	2000      	movs	r0, #0
 8015d9e:	e7e0      	b.n	8015d62 <_raise_r+0x12>

08015da0 <raise>:
 8015da0:	4b02      	ldr	r3, [pc, #8]	@ (8015dac <raise+0xc>)
 8015da2:	4601      	mov	r1, r0
 8015da4:	6818      	ldr	r0, [r3, #0]
 8015da6:	f7ff bfd3 	b.w	8015d50 <_raise_r>
 8015daa:	bf00      	nop
 8015dac:	200001f8 	.word	0x200001f8

08015db0 <_kill_r>:
 8015db0:	b538      	push	{r3, r4, r5, lr}
 8015db2:	4d07      	ldr	r5, [pc, #28]	@ (8015dd0 <_kill_r+0x20>)
 8015db4:	2300      	movs	r3, #0
 8015db6:	4604      	mov	r4, r0
 8015db8:	4608      	mov	r0, r1
 8015dba:	4611      	mov	r1, r2
 8015dbc:	602b      	str	r3, [r5, #0]
 8015dbe:	f7ee fbc1 	bl	8004544 <_kill>
 8015dc2:	1c43      	adds	r3, r0, #1
 8015dc4:	d102      	bne.n	8015dcc <_kill_r+0x1c>
 8015dc6:	682b      	ldr	r3, [r5, #0]
 8015dc8:	b103      	cbz	r3, 8015dcc <_kill_r+0x1c>
 8015dca:	6023      	str	r3, [r4, #0]
 8015dcc:	bd38      	pop	{r3, r4, r5, pc}
 8015dce:	bf00      	nop
 8015dd0:	200026dc 	.word	0x200026dc

08015dd4 <_getpid_r>:
 8015dd4:	f7ee bbae 	b.w	8004534 <_getpid>

08015dd8 <__swhatbuf_r>:
 8015dd8:	b570      	push	{r4, r5, r6, lr}
 8015dda:	460c      	mov	r4, r1
 8015ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015de0:	2900      	cmp	r1, #0
 8015de2:	b096      	sub	sp, #88	@ 0x58
 8015de4:	4615      	mov	r5, r2
 8015de6:	461e      	mov	r6, r3
 8015de8:	da0d      	bge.n	8015e06 <__swhatbuf_r+0x2e>
 8015dea:	89a3      	ldrh	r3, [r4, #12]
 8015dec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8015df0:	f04f 0100 	mov.w	r1, #0
 8015df4:	bf14      	ite	ne
 8015df6:	2340      	movne	r3, #64	@ 0x40
 8015df8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8015dfc:	2000      	movs	r0, #0
 8015dfe:	6031      	str	r1, [r6, #0]
 8015e00:	602b      	str	r3, [r5, #0]
 8015e02:	b016      	add	sp, #88	@ 0x58
 8015e04:	bd70      	pop	{r4, r5, r6, pc}
 8015e06:	466a      	mov	r2, sp
 8015e08:	f000 f848 	bl	8015e9c <_fstat_r>
 8015e0c:	2800      	cmp	r0, #0
 8015e0e:	dbec      	blt.n	8015dea <__swhatbuf_r+0x12>
 8015e10:	9901      	ldr	r1, [sp, #4]
 8015e12:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8015e16:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8015e1a:	4259      	negs	r1, r3
 8015e1c:	4159      	adcs	r1, r3
 8015e1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8015e22:	e7eb      	b.n	8015dfc <__swhatbuf_r+0x24>

08015e24 <__smakebuf_r>:
 8015e24:	898b      	ldrh	r3, [r1, #12]
 8015e26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015e28:	079d      	lsls	r5, r3, #30
 8015e2a:	4606      	mov	r6, r0
 8015e2c:	460c      	mov	r4, r1
 8015e2e:	d507      	bpl.n	8015e40 <__smakebuf_r+0x1c>
 8015e30:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8015e34:	6023      	str	r3, [r4, #0]
 8015e36:	6123      	str	r3, [r4, #16]
 8015e38:	2301      	movs	r3, #1
 8015e3a:	6163      	str	r3, [r4, #20]
 8015e3c:	b003      	add	sp, #12
 8015e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e40:	ab01      	add	r3, sp, #4
 8015e42:	466a      	mov	r2, sp
 8015e44:	f7ff ffc8 	bl	8015dd8 <__swhatbuf_r>
 8015e48:	9f00      	ldr	r7, [sp, #0]
 8015e4a:	4605      	mov	r5, r0
 8015e4c:	4639      	mov	r1, r7
 8015e4e:	4630      	mov	r0, r6
 8015e50:	f7fc ffd6 	bl	8012e00 <_malloc_r>
 8015e54:	b948      	cbnz	r0, 8015e6a <__smakebuf_r+0x46>
 8015e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e5a:	059a      	lsls	r2, r3, #22
 8015e5c:	d4ee      	bmi.n	8015e3c <__smakebuf_r+0x18>
 8015e5e:	f023 0303 	bic.w	r3, r3, #3
 8015e62:	f043 0302 	orr.w	r3, r3, #2
 8015e66:	81a3      	strh	r3, [r4, #12]
 8015e68:	e7e2      	b.n	8015e30 <__smakebuf_r+0xc>
 8015e6a:	89a3      	ldrh	r3, [r4, #12]
 8015e6c:	6020      	str	r0, [r4, #0]
 8015e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015e72:	81a3      	strh	r3, [r4, #12]
 8015e74:	9b01      	ldr	r3, [sp, #4]
 8015e76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8015e7a:	b15b      	cbz	r3, 8015e94 <__smakebuf_r+0x70>
 8015e7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015e80:	4630      	mov	r0, r6
 8015e82:	f000 f81d 	bl	8015ec0 <_isatty_r>
 8015e86:	b128      	cbz	r0, 8015e94 <__smakebuf_r+0x70>
 8015e88:	89a3      	ldrh	r3, [r4, #12]
 8015e8a:	f023 0303 	bic.w	r3, r3, #3
 8015e8e:	f043 0301 	orr.w	r3, r3, #1
 8015e92:	81a3      	strh	r3, [r4, #12]
 8015e94:	89a3      	ldrh	r3, [r4, #12]
 8015e96:	431d      	orrs	r5, r3
 8015e98:	81a5      	strh	r5, [r4, #12]
 8015e9a:	e7cf      	b.n	8015e3c <__smakebuf_r+0x18>

08015e9c <_fstat_r>:
 8015e9c:	b538      	push	{r3, r4, r5, lr}
 8015e9e:	4d07      	ldr	r5, [pc, #28]	@ (8015ebc <_fstat_r+0x20>)
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	4604      	mov	r4, r0
 8015ea4:	4608      	mov	r0, r1
 8015ea6:	4611      	mov	r1, r2
 8015ea8:	602b      	str	r3, [r5, #0]
 8015eaa:	f7ee fbab 	bl	8004604 <_fstat>
 8015eae:	1c43      	adds	r3, r0, #1
 8015eb0:	d102      	bne.n	8015eb8 <_fstat_r+0x1c>
 8015eb2:	682b      	ldr	r3, [r5, #0]
 8015eb4:	b103      	cbz	r3, 8015eb8 <_fstat_r+0x1c>
 8015eb6:	6023      	str	r3, [r4, #0]
 8015eb8:	bd38      	pop	{r3, r4, r5, pc}
 8015eba:	bf00      	nop
 8015ebc:	200026dc 	.word	0x200026dc

08015ec0 <_isatty_r>:
 8015ec0:	b538      	push	{r3, r4, r5, lr}
 8015ec2:	4d06      	ldr	r5, [pc, #24]	@ (8015edc <_isatty_r+0x1c>)
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	4604      	mov	r4, r0
 8015ec8:	4608      	mov	r0, r1
 8015eca:	602b      	str	r3, [r5, #0]
 8015ecc:	f7ee fbaa 	bl	8004624 <_isatty>
 8015ed0:	1c43      	adds	r3, r0, #1
 8015ed2:	d102      	bne.n	8015eda <_isatty_r+0x1a>
 8015ed4:	682b      	ldr	r3, [r5, #0]
 8015ed6:	b103      	cbz	r3, 8015eda <_isatty_r+0x1a>
 8015ed8:	6023      	str	r3, [r4, #0]
 8015eda:	bd38      	pop	{r3, r4, r5, pc}
 8015edc:	200026dc 	.word	0x200026dc

08015ee0 <pow>:
 8015ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ee2:	ed2d 8b02 	vpush	{d8}
 8015ee6:	eeb0 8a40 	vmov.f32	s16, s0
 8015eea:	eef0 8a60 	vmov.f32	s17, s1
 8015eee:	ec55 4b11 	vmov	r4, r5, d1
 8015ef2:	f000 f891 	bl	8016018 <__ieee754_pow>
 8015ef6:	4622      	mov	r2, r4
 8015ef8:	462b      	mov	r3, r5
 8015efa:	4620      	mov	r0, r4
 8015efc:	4629      	mov	r1, r5
 8015efe:	ec57 6b10 	vmov	r6, r7, d0
 8015f02:	f7ea fe3b 	bl	8000b7c <__aeabi_dcmpun>
 8015f06:	2800      	cmp	r0, #0
 8015f08:	d13b      	bne.n	8015f82 <pow+0xa2>
 8015f0a:	ec51 0b18 	vmov	r0, r1, d8
 8015f0e:	2200      	movs	r2, #0
 8015f10:	2300      	movs	r3, #0
 8015f12:	f7ea fe01 	bl	8000b18 <__aeabi_dcmpeq>
 8015f16:	b1b8      	cbz	r0, 8015f48 <pow+0x68>
 8015f18:	2200      	movs	r2, #0
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	4620      	mov	r0, r4
 8015f1e:	4629      	mov	r1, r5
 8015f20:	f7ea fdfa 	bl	8000b18 <__aeabi_dcmpeq>
 8015f24:	2800      	cmp	r0, #0
 8015f26:	d146      	bne.n	8015fb6 <pow+0xd6>
 8015f28:	ec45 4b10 	vmov	d0, r4, r5
 8015f2c:	f000 f866 	bl	8015ffc <finite>
 8015f30:	b338      	cbz	r0, 8015f82 <pow+0xa2>
 8015f32:	2200      	movs	r2, #0
 8015f34:	2300      	movs	r3, #0
 8015f36:	4620      	mov	r0, r4
 8015f38:	4629      	mov	r1, r5
 8015f3a:	f7ea fdf7 	bl	8000b2c <__aeabi_dcmplt>
 8015f3e:	b300      	cbz	r0, 8015f82 <pow+0xa2>
 8015f40:	f7fc f85a 	bl	8011ff8 <__errno>
 8015f44:	2322      	movs	r3, #34	@ 0x22
 8015f46:	e01b      	b.n	8015f80 <pow+0xa0>
 8015f48:	ec47 6b10 	vmov	d0, r6, r7
 8015f4c:	f000 f856 	bl	8015ffc <finite>
 8015f50:	b9e0      	cbnz	r0, 8015f8c <pow+0xac>
 8015f52:	eeb0 0a48 	vmov.f32	s0, s16
 8015f56:	eef0 0a68 	vmov.f32	s1, s17
 8015f5a:	f000 f84f 	bl	8015ffc <finite>
 8015f5e:	b1a8      	cbz	r0, 8015f8c <pow+0xac>
 8015f60:	ec45 4b10 	vmov	d0, r4, r5
 8015f64:	f000 f84a 	bl	8015ffc <finite>
 8015f68:	b180      	cbz	r0, 8015f8c <pow+0xac>
 8015f6a:	4632      	mov	r2, r6
 8015f6c:	463b      	mov	r3, r7
 8015f6e:	4630      	mov	r0, r6
 8015f70:	4639      	mov	r1, r7
 8015f72:	f7ea fe03 	bl	8000b7c <__aeabi_dcmpun>
 8015f76:	2800      	cmp	r0, #0
 8015f78:	d0e2      	beq.n	8015f40 <pow+0x60>
 8015f7a:	f7fc f83d 	bl	8011ff8 <__errno>
 8015f7e:	2321      	movs	r3, #33	@ 0x21
 8015f80:	6003      	str	r3, [r0, #0]
 8015f82:	ecbd 8b02 	vpop	{d8}
 8015f86:	ec47 6b10 	vmov	d0, r6, r7
 8015f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	2300      	movs	r3, #0
 8015f90:	4630      	mov	r0, r6
 8015f92:	4639      	mov	r1, r7
 8015f94:	f7ea fdc0 	bl	8000b18 <__aeabi_dcmpeq>
 8015f98:	2800      	cmp	r0, #0
 8015f9a:	d0f2      	beq.n	8015f82 <pow+0xa2>
 8015f9c:	eeb0 0a48 	vmov.f32	s0, s16
 8015fa0:	eef0 0a68 	vmov.f32	s1, s17
 8015fa4:	f000 f82a 	bl	8015ffc <finite>
 8015fa8:	2800      	cmp	r0, #0
 8015faa:	d0ea      	beq.n	8015f82 <pow+0xa2>
 8015fac:	ec45 4b10 	vmov	d0, r4, r5
 8015fb0:	f000 f824 	bl	8015ffc <finite>
 8015fb4:	e7c3      	b.n	8015f3e <pow+0x5e>
 8015fb6:	4f01      	ldr	r7, [pc, #4]	@ (8015fbc <pow+0xdc>)
 8015fb8:	2600      	movs	r6, #0
 8015fba:	e7e2      	b.n	8015f82 <pow+0xa2>
 8015fbc:	3ff00000 	.word	0x3ff00000

08015fc0 <sqrtf>:
 8015fc0:	b508      	push	{r3, lr}
 8015fc2:	ed2d 8b02 	vpush	{d8}
 8015fc6:	eeb0 8a40 	vmov.f32	s16, s0
 8015fca:	f000 f822 	bl	8016012 <__ieee754_sqrtf>
 8015fce:	eeb4 8a48 	vcmp.f32	s16, s16
 8015fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fd6:	d60c      	bvs.n	8015ff2 <sqrtf+0x32>
 8015fd8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8015ff8 <sqrtf+0x38>
 8015fdc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8015fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015fe4:	d505      	bpl.n	8015ff2 <sqrtf+0x32>
 8015fe6:	f7fc f807 	bl	8011ff8 <__errno>
 8015fea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8015fee:	2321      	movs	r3, #33	@ 0x21
 8015ff0:	6003      	str	r3, [r0, #0]
 8015ff2:	ecbd 8b02 	vpop	{d8}
 8015ff6:	bd08      	pop	{r3, pc}
 8015ff8:	00000000 	.word	0x00000000

08015ffc <finite>:
 8015ffc:	b082      	sub	sp, #8
 8015ffe:	ed8d 0b00 	vstr	d0, [sp]
 8016002:	9801      	ldr	r0, [sp, #4]
 8016004:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8016008:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 801600c:	0fc0      	lsrs	r0, r0, #31
 801600e:	b002      	add	sp, #8
 8016010:	4770      	bx	lr

08016012 <__ieee754_sqrtf>:
 8016012:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016016:	4770      	bx	lr

08016018 <__ieee754_pow>:
 8016018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801601c:	b091      	sub	sp, #68	@ 0x44
 801601e:	ed8d 1b00 	vstr	d1, [sp]
 8016022:	e9dd 1900 	ldrd	r1, r9, [sp]
 8016026:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 801602a:	ea5a 0001 	orrs.w	r0, sl, r1
 801602e:	ec57 6b10 	vmov	r6, r7, d0
 8016032:	d113      	bne.n	801605c <__ieee754_pow+0x44>
 8016034:	19b3      	adds	r3, r6, r6
 8016036:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 801603a:	4152      	adcs	r2, r2
 801603c:	4298      	cmp	r0, r3
 801603e:	4b98      	ldr	r3, [pc, #608]	@ (80162a0 <__ieee754_pow+0x288>)
 8016040:	4193      	sbcs	r3, r2
 8016042:	f080 84ea 	bcs.w	8016a1a <__ieee754_pow+0xa02>
 8016046:	e9dd 2300 	ldrd	r2, r3, [sp]
 801604a:	4630      	mov	r0, r6
 801604c:	4639      	mov	r1, r7
 801604e:	f7ea f945 	bl	80002dc <__adddf3>
 8016052:	ec41 0b10 	vmov	d0, r0, r1
 8016056:	b011      	add	sp, #68	@ 0x44
 8016058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801605c:	4a91      	ldr	r2, [pc, #580]	@ (80162a4 <__ieee754_pow+0x28c>)
 801605e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8016062:	4590      	cmp	r8, r2
 8016064:	463d      	mov	r5, r7
 8016066:	4633      	mov	r3, r6
 8016068:	d806      	bhi.n	8016078 <__ieee754_pow+0x60>
 801606a:	d101      	bne.n	8016070 <__ieee754_pow+0x58>
 801606c:	2e00      	cmp	r6, #0
 801606e:	d1ea      	bne.n	8016046 <__ieee754_pow+0x2e>
 8016070:	4592      	cmp	sl, r2
 8016072:	d801      	bhi.n	8016078 <__ieee754_pow+0x60>
 8016074:	d10e      	bne.n	8016094 <__ieee754_pow+0x7c>
 8016076:	b169      	cbz	r1, 8016094 <__ieee754_pow+0x7c>
 8016078:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 801607c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8016080:	431d      	orrs	r5, r3
 8016082:	d1e0      	bne.n	8016046 <__ieee754_pow+0x2e>
 8016084:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016088:	18db      	adds	r3, r3, r3
 801608a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 801608e:	4152      	adcs	r2, r2
 8016090:	429d      	cmp	r5, r3
 8016092:	e7d4      	b.n	801603e <__ieee754_pow+0x26>
 8016094:	2d00      	cmp	r5, #0
 8016096:	46c3      	mov	fp, r8
 8016098:	da3a      	bge.n	8016110 <__ieee754_pow+0xf8>
 801609a:	4a83      	ldr	r2, [pc, #524]	@ (80162a8 <__ieee754_pow+0x290>)
 801609c:	4592      	cmp	sl, r2
 801609e:	d84d      	bhi.n	801613c <__ieee754_pow+0x124>
 80160a0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80160a4:	4592      	cmp	sl, r2
 80160a6:	f240 84c7 	bls.w	8016a38 <__ieee754_pow+0xa20>
 80160aa:	ea4f 522a 	mov.w	r2, sl, asr #20
 80160ae:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80160b2:	2a14      	cmp	r2, #20
 80160b4:	dd0f      	ble.n	80160d6 <__ieee754_pow+0xbe>
 80160b6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80160ba:	fa21 f402 	lsr.w	r4, r1, r2
 80160be:	fa04 f202 	lsl.w	r2, r4, r2
 80160c2:	428a      	cmp	r2, r1
 80160c4:	f040 84b8 	bne.w	8016a38 <__ieee754_pow+0xa20>
 80160c8:	f004 0401 	and.w	r4, r4, #1
 80160cc:	f1c4 0402 	rsb	r4, r4, #2
 80160d0:	2900      	cmp	r1, #0
 80160d2:	d158      	bne.n	8016186 <__ieee754_pow+0x16e>
 80160d4:	e00e      	b.n	80160f4 <__ieee754_pow+0xdc>
 80160d6:	2900      	cmp	r1, #0
 80160d8:	d154      	bne.n	8016184 <__ieee754_pow+0x16c>
 80160da:	f1c2 0214 	rsb	r2, r2, #20
 80160de:	fa4a f402 	asr.w	r4, sl, r2
 80160e2:	fa04 f202 	lsl.w	r2, r4, r2
 80160e6:	4552      	cmp	r2, sl
 80160e8:	f040 84a3 	bne.w	8016a32 <__ieee754_pow+0xa1a>
 80160ec:	f004 0401 	and.w	r4, r4, #1
 80160f0:	f1c4 0402 	rsb	r4, r4, #2
 80160f4:	4a6d      	ldr	r2, [pc, #436]	@ (80162ac <__ieee754_pow+0x294>)
 80160f6:	4592      	cmp	sl, r2
 80160f8:	d12e      	bne.n	8016158 <__ieee754_pow+0x140>
 80160fa:	f1b9 0f00 	cmp.w	r9, #0
 80160fe:	f280 8494 	bge.w	8016a2a <__ieee754_pow+0xa12>
 8016102:	496a      	ldr	r1, [pc, #424]	@ (80162ac <__ieee754_pow+0x294>)
 8016104:	4632      	mov	r2, r6
 8016106:	463b      	mov	r3, r7
 8016108:	2000      	movs	r0, #0
 801610a:	f7ea fbc7 	bl	800089c <__aeabi_ddiv>
 801610e:	e7a0      	b.n	8016052 <__ieee754_pow+0x3a>
 8016110:	2400      	movs	r4, #0
 8016112:	bbc1      	cbnz	r1, 8016186 <__ieee754_pow+0x16e>
 8016114:	4a63      	ldr	r2, [pc, #396]	@ (80162a4 <__ieee754_pow+0x28c>)
 8016116:	4592      	cmp	sl, r2
 8016118:	d1ec      	bne.n	80160f4 <__ieee754_pow+0xdc>
 801611a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 801611e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8016122:	431a      	orrs	r2, r3
 8016124:	f000 8479 	beq.w	8016a1a <__ieee754_pow+0xa02>
 8016128:	4b61      	ldr	r3, [pc, #388]	@ (80162b0 <__ieee754_pow+0x298>)
 801612a:	4598      	cmp	r8, r3
 801612c:	d908      	bls.n	8016140 <__ieee754_pow+0x128>
 801612e:	f1b9 0f00 	cmp.w	r9, #0
 8016132:	f2c0 8476 	blt.w	8016a22 <__ieee754_pow+0xa0a>
 8016136:	e9dd 0100 	ldrd	r0, r1, [sp]
 801613a:	e78a      	b.n	8016052 <__ieee754_pow+0x3a>
 801613c:	2402      	movs	r4, #2
 801613e:	e7e8      	b.n	8016112 <__ieee754_pow+0xfa>
 8016140:	f1b9 0f00 	cmp.w	r9, #0
 8016144:	f04f 0000 	mov.w	r0, #0
 8016148:	f04f 0100 	mov.w	r1, #0
 801614c:	da81      	bge.n	8016052 <__ieee754_pow+0x3a>
 801614e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016152:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8016156:	e77c      	b.n	8016052 <__ieee754_pow+0x3a>
 8016158:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 801615c:	d106      	bne.n	801616c <__ieee754_pow+0x154>
 801615e:	4632      	mov	r2, r6
 8016160:	463b      	mov	r3, r7
 8016162:	4630      	mov	r0, r6
 8016164:	4639      	mov	r1, r7
 8016166:	f7ea fa6f 	bl	8000648 <__aeabi_dmul>
 801616a:	e772      	b.n	8016052 <__ieee754_pow+0x3a>
 801616c:	4a51      	ldr	r2, [pc, #324]	@ (80162b4 <__ieee754_pow+0x29c>)
 801616e:	4591      	cmp	r9, r2
 8016170:	d109      	bne.n	8016186 <__ieee754_pow+0x16e>
 8016172:	2d00      	cmp	r5, #0
 8016174:	db07      	blt.n	8016186 <__ieee754_pow+0x16e>
 8016176:	ec47 6b10 	vmov	d0, r6, r7
 801617a:	b011      	add	sp, #68	@ 0x44
 801617c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016180:	f000 bd52 	b.w	8016c28 <__ieee754_sqrt>
 8016184:	2400      	movs	r4, #0
 8016186:	ec47 6b10 	vmov	d0, r6, r7
 801618a:	9302      	str	r3, [sp, #8]
 801618c:	f000 fc88 	bl	8016aa0 <fabs>
 8016190:	9b02      	ldr	r3, [sp, #8]
 8016192:	ec51 0b10 	vmov	r0, r1, d0
 8016196:	bb53      	cbnz	r3, 80161ee <__ieee754_pow+0x1d6>
 8016198:	4b44      	ldr	r3, [pc, #272]	@ (80162ac <__ieee754_pow+0x294>)
 801619a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 801619e:	429a      	cmp	r2, r3
 80161a0:	d002      	beq.n	80161a8 <__ieee754_pow+0x190>
 80161a2:	f1b8 0f00 	cmp.w	r8, #0
 80161a6:	d122      	bne.n	80161ee <__ieee754_pow+0x1d6>
 80161a8:	f1b9 0f00 	cmp.w	r9, #0
 80161ac:	da05      	bge.n	80161ba <__ieee754_pow+0x1a2>
 80161ae:	4602      	mov	r2, r0
 80161b0:	460b      	mov	r3, r1
 80161b2:	2000      	movs	r0, #0
 80161b4:	493d      	ldr	r1, [pc, #244]	@ (80162ac <__ieee754_pow+0x294>)
 80161b6:	f7ea fb71 	bl	800089c <__aeabi_ddiv>
 80161ba:	2d00      	cmp	r5, #0
 80161bc:	f6bf af49 	bge.w	8016052 <__ieee754_pow+0x3a>
 80161c0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80161c4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80161c8:	ea58 0804 	orrs.w	r8, r8, r4
 80161cc:	d108      	bne.n	80161e0 <__ieee754_pow+0x1c8>
 80161ce:	4602      	mov	r2, r0
 80161d0:	460b      	mov	r3, r1
 80161d2:	4610      	mov	r0, r2
 80161d4:	4619      	mov	r1, r3
 80161d6:	f7ea f87f 	bl	80002d8 <__aeabi_dsub>
 80161da:	4602      	mov	r2, r0
 80161dc:	460b      	mov	r3, r1
 80161de:	e794      	b.n	801610a <__ieee754_pow+0xf2>
 80161e0:	2c01      	cmp	r4, #1
 80161e2:	f47f af36 	bne.w	8016052 <__ieee754_pow+0x3a>
 80161e6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80161ea:	4619      	mov	r1, r3
 80161ec:	e731      	b.n	8016052 <__ieee754_pow+0x3a>
 80161ee:	0feb      	lsrs	r3, r5, #31
 80161f0:	3b01      	subs	r3, #1
 80161f2:	ea53 0204 	orrs.w	r2, r3, r4
 80161f6:	d102      	bne.n	80161fe <__ieee754_pow+0x1e6>
 80161f8:	4632      	mov	r2, r6
 80161fa:	463b      	mov	r3, r7
 80161fc:	e7e9      	b.n	80161d2 <__ieee754_pow+0x1ba>
 80161fe:	3c01      	subs	r4, #1
 8016200:	431c      	orrs	r4, r3
 8016202:	d016      	beq.n	8016232 <__ieee754_pow+0x21a>
 8016204:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8016290 <__ieee754_pow+0x278>
 8016208:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 801620c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016210:	f240 8112 	bls.w	8016438 <__ieee754_pow+0x420>
 8016214:	4b28      	ldr	r3, [pc, #160]	@ (80162b8 <__ieee754_pow+0x2a0>)
 8016216:	459a      	cmp	sl, r3
 8016218:	4b25      	ldr	r3, [pc, #148]	@ (80162b0 <__ieee754_pow+0x298>)
 801621a:	d916      	bls.n	801624a <__ieee754_pow+0x232>
 801621c:	4598      	cmp	r8, r3
 801621e:	d80b      	bhi.n	8016238 <__ieee754_pow+0x220>
 8016220:	f1b9 0f00 	cmp.w	r9, #0
 8016224:	da0b      	bge.n	801623e <__ieee754_pow+0x226>
 8016226:	2000      	movs	r0, #0
 8016228:	b011      	add	sp, #68	@ 0x44
 801622a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801622e:	f000 bcf3 	b.w	8016c18 <__math_oflow>
 8016232:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8016298 <__ieee754_pow+0x280>
 8016236:	e7e7      	b.n	8016208 <__ieee754_pow+0x1f0>
 8016238:	f1b9 0f00 	cmp.w	r9, #0
 801623c:	dcf3      	bgt.n	8016226 <__ieee754_pow+0x20e>
 801623e:	2000      	movs	r0, #0
 8016240:	b011      	add	sp, #68	@ 0x44
 8016242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016246:	f000 bcdf 	b.w	8016c08 <__math_uflow>
 801624a:	4598      	cmp	r8, r3
 801624c:	d20c      	bcs.n	8016268 <__ieee754_pow+0x250>
 801624e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016252:	2200      	movs	r2, #0
 8016254:	2300      	movs	r3, #0
 8016256:	f7ea fc69 	bl	8000b2c <__aeabi_dcmplt>
 801625a:	3800      	subs	r0, #0
 801625c:	bf18      	it	ne
 801625e:	2001      	movne	r0, #1
 8016260:	f1b9 0f00 	cmp.w	r9, #0
 8016264:	daec      	bge.n	8016240 <__ieee754_pow+0x228>
 8016266:	e7df      	b.n	8016228 <__ieee754_pow+0x210>
 8016268:	4b10      	ldr	r3, [pc, #64]	@ (80162ac <__ieee754_pow+0x294>)
 801626a:	4598      	cmp	r8, r3
 801626c:	f04f 0200 	mov.w	r2, #0
 8016270:	d924      	bls.n	80162bc <__ieee754_pow+0x2a4>
 8016272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016276:	2300      	movs	r3, #0
 8016278:	f7ea fc58 	bl	8000b2c <__aeabi_dcmplt>
 801627c:	3800      	subs	r0, #0
 801627e:	bf18      	it	ne
 8016280:	2001      	movne	r0, #1
 8016282:	f1b9 0f00 	cmp.w	r9, #0
 8016286:	dccf      	bgt.n	8016228 <__ieee754_pow+0x210>
 8016288:	e7da      	b.n	8016240 <__ieee754_pow+0x228>
 801628a:	bf00      	nop
 801628c:	f3af 8000 	nop.w
 8016290:	00000000 	.word	0x00000000
 8016294:	3ff00000 	.word	0x3ff00000
 8016298:	00000000 	.word	0x00000000
 801629c:	bff00000 	.word	0xbff00000
 80162a0:	fff00000 	.word	0xfff00000
 80162a4:	7ff00000 	.word	0x7ff00000
 80162a8:	433fffff 	.word	0x433fffff
 80162ac:	3ff00000 	.word	0x3ff00000
 80162b0:	3fefffff 	.word	0x3fefffff
 80162b4:	3fe00000 	.word	0x3fe00000
 80162b8:	43f00000 	.word	0x43f00000
 80162bc:	4b5a      	ldr	r3, [pc, #360]	@ (8016428 <__ieee754_pow+0x410>)
 80162be:	f7ea f80b 	bl	80002d8 <__aeabi_dsub>
 80162c2:	a351      	add	r3, pc, #324	@ (adr r3, 8016408 <__ieee754_pow+0x3f0>)
 80162c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162c8:	4604      	mov	r4, r0
 80162ca:	460d      	mov	r5, r1
 80162cc:	f7ea f9bc 	bl	8000648 <__aeabi_dmul>
 80162d0:	a34f      	add	r3, pc, #316	@ (adr r3, 8016410 <__ieee754_pow+0x3f8>)
 80162d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162d6:	4606      	mov	r6, r0
 80162d8:	460f      	mov	r7, r1
 80162da:	4620      	mov	r0, r4
 80162dc:	4629      	mov	r1, r5
 80162de:	f7ea f9b3 	bl	8000648 <__aeabi_dmul>
 80162e2:	4b52      	ldr	r3, [pc, #328]	@ (801642c <__ieee754_pow+0x414>)
 80162e4:	4682      	mov	sl, r0
 80162e6:	468b      	mov	fp, r1
 80162e8:	2200      	movs	r2, #0
 80162ea:	4620      	mov	r0, r4
 80162ec:	4629      	mov	r1, r5
 80162ee:	f7ea f9ab 	bl	8000648 <__aeabi_dmul>
 80162f2:	4602      	mov	r2, r0
 80162f4:	460b      	mov	r3, r1
 80162f6:	a148      	add	r1, pc, #288	@ (adr r1, 8016418 <__ieee754_pow+0x400>)
 80162f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80162fc:	f7e9 ffec 	bl	80002d8 <__aeabi_dsub>
 8016300:	4622      	mov	r2, r4
 8016302:	462b      	mov	r3, r5
 8016304:	f7ea f9a0 	bl	8000648 <__aeabi_dmul>
 8016308:	4602      	mov	r2, r0
 801630a:	460b      	mov	r3, r1
 801630c:	2000      	movs	r0, #0
 801630e:	4948      	ldr	r1, [pc, #288]	@ (8016430 <__ieee754_pow+0x418>)
 8016310:	f7e9 ffe2 	bl	80002d8 <__aeabi_dsub>
 8016314:	4622      	mov	r2, r4
 8016316:	4680      	mov	r8, r0
 8016318:	4689      	mov	r9, r1
 801631a:	462b      	mov	r3, r5
 801631c:	4620      	mov	r0, r4
 801631e:	4629      	mov	r1, r5
 8016320:	f7ea f992 	bl	8000648 <__aeabi_dmul>
 8016324:	4602      	mov	r2, r0
 8016326:	460b      	mov	r3, r1
 8016328:	4640      	mov	r0, r8
 801632a:	4649      	mov	r1, r9
 801632c:	f7ea f98c 	bl	8000648 <__aeabi_dmul>
 8016330:	a33b      	add	r3, pc, #236	@ (adr r3, 8016420 <__ieee754_pow+0x408>)
 8016332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016336:	f7ea f987 	bl	8000648 <__aeabi_dmul>
 801633a:	4602      	mov	r2, r0
 801633c:	460b      	mov	r3, r1
 801633e:	4650      	mov	r0, sl
 8016340:	4659      	mov	r1, fp
 8016342:	f7e9 ffc9 	bl	80002d8 <__aeabi_dsub>
 8016346:	4602      	mov	r2, r0
 8016348:	460b      	mov	r3, r1
 801634a:	4680      	mov	r8, r0
 801634c:	4689      	mov	r9, r1
 801634e:	4630      	mov	r0, r6
 8016350:	4639      	mov	r1, r7
 8016352:	f7e9 ffc3 	bl	80002dc <__adddf3>
 8016356:	2400      	movs	r4, #0
 8016358:	4632      	mov	r2, r6
 801635a:	463b      	mov	r3, r7
 801635c:	4620      	mov	r0, r4
 801635e:	460d      	mov	r5, r1
 8016360:	f7e9 ffba 	bl	80002d8 <__aeabi_dsub>
 8016364:	4602      	mov	r2, r0
 8016366:	460b      	mov	r3, r1
 8016368:	4640      	mov	r0, r8
 801636a:	4649      	mov	r1, r9
 801636c:	f7e9 ffb4 	bl	80002d8 <__aeabi_dsub>
 8016370:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016374:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8016378:	2300      	movs	r3, #0
 801637a:	9304      	str	r3, [sp, #16]
 801637c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8016380:	4606      	mov	r6, r0
 8016382:	460f      	mov	r7, r1
 8016384:	4652      	mov	r2, sl
 8016386:	465b      	mov	r3, fp
 8016388:	e9dd 0100 	ldrd	r0, r1, [sp]
 801638c:	f7e9 ffa4 	bl	80002d8 <__aeabi_dsub>
 8016390:	4622      	mov	r2, r4
 8016392:	462b      	mov	r3, r5
 8016394:	f7ea f958 	bl	8000648 <__aeabi_dmul>
 8016398:	e9dd 2300 	ldrd	r2, r3, [sp]
 801639c:	4680      	mov	r8, r0
 801639e:	4689      	mov	r9, r1
 80163a0:	4630      	mov	r0, r6
 80163a2:	4639      	mov	r1, r7
 80163a4:	f7ea f950 	bl	8000648 <__aeabi_dmul>
 80163a8:	4602      	mov	r2, r0
 80163aa:	460b      	mov	r3, r1
 80163ac:	4640      	mov	r0, r8
 80163ae:	4649      	mov	r1, r9
 80163b0:	f7e9 ff94 	bl	80002dc <__adddf3>
 80163b4:	4652      	mov	r2, sl
 80163b6:	465b      	mov	r3, fp
 80163b8:	4606      	mov	r6, r0
 80163ba:	460f      	mov	r7, r1
 80163bc:	4620      	mov	r0, r4
 80163be:	4629      	mov	r1, r5
 80163c0:	f7ea f942 	bl	8000648 <__aeabi_dmul>
 80163c4:	460b      	mov	r3, r1
 80163c6:	4602      	mov	r2, r0
 80163c8:	4680      	mov	r8, r0
 80163ca:	4689      	mov	r9, r1
 80163cc:	4630      	mov	r0, r6
 80163ce:	4639      	mov	r1, r7
 80163d0:	f7e9 ff84 	bl	80002dc <__adddf3>
 80163d4:	4b17      	ldr	r3, [pc, #92]	@ (8016434 <__ieee754_pow+0x41c>)
 80163d6:	4299      	cmp	r1, r3
 80163d8:	4604      	mov	r4, r0
 80163da:	460d      	mov	r5, r1
 80163dc:	468a      	mov	sl, r1
 80163de:	468b      	mov	fp, r1
 80163e0:	f340 82ef 	ble.w	80169c2 <__ieee754_pow+0x9aa>
 80163e4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80163e8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80163ec:	4303      	orrs	r3, r0
 80163ee:	f000 81e8 	beq.w	80167c2 <__ieee754_pow+0x7aa>
 80163f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80163f6:	2200      	movs	r2, #0
 80163f8:	2300      	movs	r3, #0
 80163fa:	f7ea fb97 	bl	8000b2c <__aeabi_dcmplt>
 80163fe:	3800      	subs	r0, #0
 8016400:	bf18      	it	ne
 8016402:	2001      	movne	r0, #1
 8016404:	e710      	b.n	8016228 <__ieee754_pow+0x210>
 8016406:	bf00      	nop
 8016408:	60000000 	.word	0x60000000
 801640c:	3ff71547 	.word	0x3ff71547
 8016410:	f85ddf44 	.word	0xf85ddf44
 8016414:	3e54ae0b 	.word	0x3e54ae0b
 8016418:	55555555 	.word	0x55555555
 801641c:	3fd55555 	.word	0x3fd55555
 8016420:	652b82fe 	.word	0x652b82fe
 8016424:	3ff71547 	.word	0x3ff71547
 8016428:	3ff00000 	.word	0x3ff00000
 801642c:	3fd00000 	.word	0x3fd00000
 8016430:	3fe00000 	.word	0x3fe00000
 8016434:	408fffff 	.word	0x408fffff
 8016438:	4bd5      	ldr	r3, [pc, #852]	@ (8016790 <__ieee754_pow+0x778>)
 801643a:	402b      	ands	r3, r5
 801643c:	2200      	movs	r2, #0
 801643e:	b92b      	cbnz	r3, 801644c <__ieee754_pow+0x434>
 8016440:	4bd4      	ldr	r3, [pc, #848]	@ (8016794 <__ieee754_pow+0x77c>)
 8016442:	f7ea f901 	bl	8000648 <__aeabi_dmul>
 8016446:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 801644a:	468b      	mov	fp, r1
 801644c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8016450:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8016454:	4413      	add	r3, r2
 8016456:	930a      	str	r3, [sp, #40]	@ 0x28
 8016458:	4bcf      	ldr	r3, [pc, #828]	@ (8016798 <__ieee754_pow+0x780>)
 801645a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 801645e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8016462:	459b      	cmp	fp, r3
 8016464:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8016468:	dd08      	ble.n	801647c <__ieee754_pow+0x464>
 801646a:	4bcc      	ldr	r3, [pc, #816]	@ (801679c <__ieee754_pow+0x784>)
 801646c:	459b      	cmp	fp, r3
 801646e:	f340 81a5 	ble.w	80167bc <__ieee754_pow+0x7a4>
 8016472:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016474:	3301      	adds	r3, #1
 8016476:	930a      	str	r3, [sp, #40]	@ 0x28
 8016478:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 801647c:	f04f 0a00 	mov.w	sl, #0
 8016480:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016484:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016486:	4bc6      	ldr	r3, [pc, #792]	@ (80167a0 <__ieee754_pow+0x788>)
 8016488:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801648c:	ed93 7b00 	vldr	d7, [r3]
 8016490:	4629      	mov	r1, r5
 8016492:	ec53 2b17 	vmov	r2, r3, d7
 8016496:	ed8d 7b06 	vstr	d7, [sp, #24]
 801649a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801649e:	f7e9 ff1b 	bl	80002d8 <__aeabi_dsub>
 80164a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80164a6:	4606      	mov	r6, r0
 80164a8:	460f      	mov	r7, r1
 80164aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80164ae:	f7e9 ff15 	bl	80002dc <__adddf3>
 80164b2:	4602      	mov	r2, r0
 80164b4:	460b      	mov	r3, r1
 80164b6:	2000      	movs	r0, #0
 80164b8:	49ba      	ldr	r1, [pc, #744]	@ (80167a4 <__ieee754_pow+0x78c>)
 80164ba:	f7ea f9ef 	bl	800089c <__aeabi_ddiv>
 80164be:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80164c2:	4602      	mov	r2, r0
 80164c4:	460b      	mov	r3, r1
 80164c6:	4630      	mov	r0, r6
 80164c8:	4639      	mov	r1, r7
 80164ca:	f7ea f8bd 	bl	8000648 <__aeabi_dmul>
 80164ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80164d2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80164d6:	106d      	asrs	r5, r5, #1
 80164d8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80164dc:	f04f 0b00 	mov.w	fp, #0
 80164e0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80164e4:	4661      	mov	r1, ip
 80164e6:	2200      	movs	r2, #0
 80164e8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80164ec:	4658      	mov	r0, fp
 80164ee:	46e1      	mov	r9, ip
 80164f0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 80164f4:	4614      	mov	r4, r2
 80164f6:	461d      	mov	r5, r3
 80164f8:	f7ea f8a6 	bl	8000648 <__aeabi_dmul>
 80164fc:	4602      	mov	r2, r0
 80164fe:	460b      	mov	r3, r1
 8016500:	4630      	mov	r0, r6
 8016502:	4639      	mov	r1, r7
 8016504:	f7e9 fee8 	bl	80002d8 <__aeabi_dsub>
 8016508:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801650c:	4606      	mov	r6, r0
 801650e:	460f      	mov	r7, r1
 8016510:	4620      	mov	r0, r4
 8016512:	4629      	mov	r1, r5
 8016514:	f7e9 fee0 	bl	80002d8 <__aeabi_dsub>
 8016518:	4602      	mov	r2, r0
 801651a:	460b      	mov	r3, r1
 801651c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016520:	f7e9 feda 	bl	80002d8 <__aeabi_dsub>
 8016524:	465a      	mov	r2, fp
 8016526:	464b      	mov	r3, r9
 8016528:	f7ea f88e 	bl	8000648 <__aeabi_dmul>
 801652c:	4602      	mov	r2, r0
 801652e:	460b      	mov	r3, r1
 8016530:	4630      	mov	r0, r6
 8016532:	4639      	mov	r1, r7
 8016534:	f7e9 fed0 	bl	80002d8 <__aeabi_dsub>
 8016538:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801653c:	f7ea f884 	bl	8000648 <__aeabi_dmul>
 8016540:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016544:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8016548:	4610      	mov	r0, r2
 801654a:	4619      	mov	r1, r3
 801654c:	f7ea f87c 	bl	8000648 <__aeabi_dmul>
 8016550:	a37d      	add	r3, pc, #500	@ (adr r3, 8016748 <__ieee754_pow+0x730>)
 8016552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016556:	4604      	mov	r4, r0
 8016558:	460d      	mov	r5, r1
 801655a:	f7ea f875 	bl	8000648 <__aeabi_dmul>
 801655e:	a37c      	add	r3, pc, #496	@ (adr r3, 8016750 <__ieee754_pow+0x738>)
 8016560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016564:	f7e9 feba 	bl	80002dc <__adddf3>
 8016568:	4622      	mov	r2, r4
 801656a:	462b      	mov	r3, r5
 801656c:	f7ea f86c 	bl	8000648 <__aeabi_dmul>
 8016570:	a379      	add	r3, pc, #484	@ (adr r3, 8016758 <__ieee754_pow+0x740>)
 8016572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016576:	f7e9 feb1 	bl	80002dc <__adddf3>
 801657a:	4622      	mov	r2, r4
 801657c:	462b      	mov	r3, r5
 801657e:	f7ea f863 	bl	8000648 <__aeabi_dmul>
 8016582:	a377      	add	r3, pc, #476	@ (adr r3, 8016760 <__ieee754_pow+0x748>)
 8016584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016588:	f7e9 fea8 	bl	80002dc <__adddf3>
 801658c:	4622      	mov	r2, r4
 801658e:	462b      	mov	r3, r5
 8016590:	f7ea f85a 	bl	8000648 <__aeabi_dmul>
 8016594:	a374      	add	r3, pc, #464	@ (adr r3, 8016768 <__ieee754_pow+0x750>)
 8016596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801659a:	f7e9 fe9f 	bl	80002dc <__adddf3>
 801659e:	4622      	mov	r2, r4
 80165a0:	462b      	mov	r3, r5
 80165a2:	f7ea f851 	bl	8000648 <__aeabi_dmul>
 80165a6:	a372      	add	r3, pc, #456	@ (adr r3, 8016770 <__ieee754_pow+0x758>)
 80165a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165ac:	f7e9 fe96 	bl	80002dc <__adddf3>
 80165b0:	4622      	mov	r2, r4
 80165b2:	4606      	mov	r6, r0
 80165b4:	460f      	mov	r7, r1
 80165b6:	462b      	mov	r3, r5
 80165b8:	4620      	mov	r0, r4
 80165ba:	4629      	mov	r1, r5
 80165bc:	f7ea f844 	bl	8000648 <__aeabi_dmul>
 80165c0:	4602      	mov	r2, r0
 80165c2:	460b      	mov	r3, r1
 80165c4:	4630      	mov	r0, r6
 80165c6:	4639      	mov	r1, r7
 80165c8:	f7ea f83e 	bl	8000648 <__aeabi_dmul>
 80165cc:	465a      	mov	r2, fp
 80165ce:	4604      	mov	r4, r0
 80165d0:	460d      	mov	r5, r1
 80165d2:	464b      	mov	r3, r9
 80165d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80165d8:	f7e9 fe80 	bl	80002dc <__adddf3>
 80165dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80165e0:	f7ea f832 	bl	8000648 <__aeabi_dmul>
 80165e4:	4622      	mov	r2, r4
 80165e6:	462b      	mov	r3, r5
 80165e8:	f7e9 fe78 	bl	80002dc <__adddf3>
 80165ec:	465a      	mov	r2, fp
 80165ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80165f2:	464b      	mov	r3, r9
 80165f4:	4658      	mov	r0, fp
 80165f6:	4649      	mov	r1, r9
 80165f8:	f7ea f826 	bl	8000648 <__aeabi_dmul>
 80165fc:	4b6a      	ldr	r3, [pc, #424]	@ (80167a8 <__ieee754_pow+0x790>)
 80165fe:	2200      	movs	r2, #0
 8016600:	4606      	mov	r6, r0
 8016602:	460f      	mov	r7, r1
 8016604:	f7e9 fe6a 	bl	80002dc <__adddf3>
 8016608:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801660c:	f7e9 fe66 	bl	80002dc <__adddf3>
 8016610:	46d8      	mov	r8, fp
 8016612:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8016616:	460d      	mov	r5, r1
 8016618:	465a      	mov	r2, fp
 801661a:	460b      	mov	r3, r1
 801661c:	4640      	mov	r0, r8
 801661e:	4649      	mov	r1, r9
 8016620:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8016624:	f7ea f810 	bl	8000648 <__aeabi_dmul>
 8016628:	465c      	mov	r4, fp
 801662a:	4680      	mov	r8, r0
 801662c:	4689      	mov	r9, r1
 801662e:	4b5e      	ldr	r3, [pc, #376]	@ (80167a8 <__ieee754_pow+0x790>)
 8016630:	2200      	movs	r2, #0
 8016632:	4620      	mov	r0, r4
 8016634:	4629      	mov	r1, r5
 8016636:	f7e9 fe4f 	bl	80002d8 <__aeabi_dsub>
 801663a:	4632      	mov	r2, r6
 801663c:	463b      	mov	r3, r7
 801663e:	f7e9 fe4b 	bl	80002d8 <__aeabi_dsub>
 8016642:	4602      	mov	r2, r0
 8016644:	460b      	mov	r3, r1
 8016646:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801664a:	f7e9 fe45 	bl	80002d8 <__aeabi_dsub>
 801664e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016652:	f7e9 fff9 	bl	8000648 <__aeabi_dmul>
 8016656:	4622      	mov	r2, r4
 8016658:	4606      	mov	r6, r0
 801665a:	460f      	mov	r7, r1
 801665c:	462b      	mov	r3, r5
 801665e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016662:	f7e9 fff1 	bl	8000648 <__aeabi_dmul>
 8016666:	4602      	mov	r2, r0
 8016668:	460b      	mov	r3, r1
 801666a:	4630      	mov	r0, r6
 801666c:	4639      	mov	r1, r7
 801666e:	f7e9 fe35 	bl	80002dc <__adddf3>
 8016672:	4606      	mov	r6, r0
 8016674:	460f      	mov	r7, r1
 8016676:	4602      	mov	r2, r0
 8016678:	460b      	mov	r3, r1
 801667a:	4640      	mov	r0, r8
 801667c:	4649      	mov	r1, r9
 801667e:	f7e9 fe2d 	bl	80002dc <__adddf3>
 8016682:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8016686:	a33c      	add	r3, pc, #240	@ (adr r3, 8016778 <__ieee754_pow+0x760>)
 8016688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801668c:	4658      	mov	r0, fp
 801668e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8016692:	460d      	mov	r5, r1
 8016694:	f7e9 ffd8 	bl	8000648 <__aeabi_dmul>
 8016698:	465c      	mov	r4, fp
 801669a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801669e:	4642      	mov	r2, r8
 80166a0:	464b      	mov	r3, r9
 80166a2:	4620      	mov	r0, r4
 80166a4:	4629      	mov	r1, r5
 80166a6:	f7e9 fe17 	bl	80002d8 <__aeabi_dsub>
 80166aa:	4602      	mov	r2, r0
 80166ac:	460b      	mov	r3, r1
 80166ae:	4630      	mov	r0, r6
 80166b0:	4639      	mov	r1, r7
 80166b2:	f7e9 fe11 	bl	80002d8 <__aeabi_dsub>
 80166b6:	a332      	add	r3, pc, #200	@ (adr r3, 8016780 <__ieee754_pow+0x768>)
 80166b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166bc:	f7e9 ffc4 	bl	8000648 <__aeabi_dmul>
 80166c0:	a331      	add	r3, pc, #196	@ (adr r3, 8016788 <__ieee754_pow+0x770>)
 80166c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166c6:	4606      	mov	r6, r0
 80166c8:	460f      	mov	r7, r1
 80166ca:	4620      	mov	r0, r4
 80166cc:	4629      	mov	r1, r5
 80166ce:	f7e9 ffbb 	bl	8000648 <__aeabi_dmul>
 80166d2:	4602      	mov	r2, r0
 80166d4:	460b      	mov	r3, r1
 80166d6:	4630      	mov	r0, r6
 80166d8:	4639      	mov	r1, r7
 80166da:	f7e9 fdff 	bl	80002dc <__adddf3>
 80166de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80166e0:	4b32      	ldr	r3, [pc, #200]	@ (80167ac <__ieee754_pow+0x794>)
 80166e2:	4413      	add	r3, r2
 80166e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80166e8:	f7e9 fdf8 	bl	80002dc <__adddf3>
 80166ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80166f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80166f2:	f7e9 ff3f 	bl	8000574 <__aeabi_i2d>
 80166f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80166f8:	4b2d      	ldr	r3, [pc, #180]	@ (80167b0 <__ieee754_pow+0x798>)
 80166fa:	4413      	add	r3, r2
 80166fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016700:	4606      	mov	r6, r0
 8016702:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016706:	460f      	mov	r7, r1
 8016708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801670c:	f7e9 fde6 	bl	80002dc <__adddf3>
 8016710:	4642      	mov	r2, r8
 8016712:	464b      	mov	r3, r9
 8016714:	f7e9 fde2 	bl	80002dc <__adddf3>
 8016718:	4632      	mov	r2, r6
 801671a:	463b      	mov	r3, r7
 801671c:	f7e9 fdde 	bl	80002dc <__adddf3>
 8016720:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8016724:	4632      	mov	r2, r6
 8016726:	463b      	mov	r3, r7
 8016728:	4658      	mov	r0, fp
 801672a:	460d      	mov	r5, r1
 801672c:	f7e9 fdd4 	bl	80002d8 <__aeabi_dsub>
 8016730:	4642      	mov	r2, r8
 8016732:	464b      	mov	r3, r9
 8016734:	f7e9 fdd0 	bl	80002d8 <__aeabi_dsub>
 8016738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801673c:	f7e9 fdcc 	bl	80002d8 <__aeabi_dsub>
 8016740:	465c      	mov	r4, fp
 8016742:	4602      	mov	r2, r0
 8016744:	e036      	b.n	80167b4 <__ieee754_pow+0x79c>
 8016746:	bf00      	nop
 8016748:	4a454eef 	.word	0x4a454eef
 801674c:	3fca7e28 	.word	0x3fca7e28
 8016750:	93c9db65 	.word	0x93c9db65
 8016754:	3fcd864a 	.word	0x3fcd864a
 8016758:	a91d4101 	.word	0xa91d4101
 801675c:	3fd17460 	.word	0x3fd17460
 8016760:	518f264d 	.word	0x518f264d
 8016764:	3fd55555 	.word	0x3fd55555
 8016768:	db6fabff 	.word	0xdb6fabff
 801676c:	3fdb6db6 	.word	0x3fdb6db6
 8016770:	33333303 	.word	0x33333303
 8016774:	3fe33333 	.word	0x3fe33333
 8016778:	e0000000 	.word	0xe0000000
 801677c:	3feec709 	.word	0x3feec709
 8016780:	dc3a03fd 	.word	0xdc3a03fd
 8016784:	3feec709 	.word	0x3feec709
 8016788:	145b01f5 	.word	0x145b01f5
 801678c:	be3e2fe0 	.word	0xbe3e2fe0
 8016790:	7ff00000 	.word	0x7ff00000
 8016794:	43400000 	.word	0x43400000
 8016798:	0003988e 	.word	0x0003988e
 801679c:	000bb679 	.word	0x000bb679
 80167a0:	08017618 	.word	0x08017618
 80167a4:	3ff00000 	.word	0x3ff00000
 80167a8:	40080000 	.word	0x40080000
 80167ac:	080175f8 	.word	0x080175f8
 80167b0:	08017608 	.word	0x08017608
 80167b4:	460b      	mov	r3, r1
 80167b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80167ba:	e5d7      	b.n	801636c <__ieee754_pow+0x354>
 80167bc:	f04f 0a01 	mov.w	sl, #1
 80167c0:	e65e      	b.n	8016480 <__ieee754_pow+0x468>
 80167c2:	a3b4      	add	r3, pc, #720	@ (adr r3, 8016a94 <__ieee754_pow+0xa7c>)
 80167c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167c8:	4630      	mov	r0, r6
 80167ca:	4639      	mov	r1, r7
 80167cc:	f7e9 fd86 	bl	80002dc <__adddf3>
 80167d0:	4642      	mov	r2, r8
 80167d2:	e9cd 0100 	strd	r0, r1, [sp]
 80167d6:	464b      	mov	r3, r9
 80167d8:	4620      	mov	r0, r4
 80167da:	4629      	mov	r1, r5
 80167dc:	f7e9 fd7c 	bl	80002d8 <__aeabi_dsub>
 80167e0:	4602      	mov	r2, r0
 80167e2:	460b      	mov	r3, r1
 80167e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80167e8:	f7ea f9be 	bl	8000b68 <__aeabi_dcmpgt>
 80167ec:	2800      	cmp	r0, #0
 80167ee:	f47f ae00 	bne.w	80163f2 <__ieee754_pow+0x3da>
 80167f2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 80167f6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80167fa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 80167fe:	fa43 fa0a 	asr.w	sl, r3, sl
 8016802:	44da      	add	sl, fp
 8016804:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8016808:	489d      	ldr	r0, [pc, #628]	@ (8016a80 <__ieee754_pow+0xa68>)
 801680a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 801680e:	4108      	asrs	r0, r1
 8016810:	ea00 030a 	and.w	r3, r0, sl
 8016814:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8016818:	f1c1 0114 	rsb	r1, r1, #20
 801681c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8016820:	fa4a fa01 	asr.w	sl, sl, r1
 8016824:	f1bb 0f00 	cmp.w	fp, #0
 8016828:	4640      	mov	r0, r8
 801682a:	4649      	mov	r1, r9
 801682c:	f04f 0200 	mov.w	r2, #0
 8016830:	bfb8      	it	lt
 8016832:	f1ca 0a00 	rsblt	sl, sl, #0
 8016836:	f7e9 fd4f 	bl	80002d8 <__aeabi_dsub>
 801683a:	4680      	mov	r8, r0
 801683c:	4689      	mov	r9, r1
 801683e:	4632      	mov	r2, r6
 8016840:	463b      	mov	r3, r7
 8016842:	4640      	mov	r0, r8
 8016844:	4649      	mov	r1, r9
 8016846:	f7e9 fd49 	bl	80002dc <__adddf3>
 801684a:	2400      	movs	r4, #0
 801684c:	a37c      	add	r3, pc, #496	@ (adr r3, 8016a40 <__ieee754_pow+0xa28>)
 801684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016852:	4620      	mov	r0, r4
 8016854:	460d      	mov	r5, r1
 8016856:	f7e9 fef7 	bl	8000648 <__aeabi_dmul>
 801685a:	4642      	mov	r2, r8
 801685c:	e9cd 0100 	strd	r0, r1, [sp]
 8016860:	464b      	mov	r3, r9
 8016862:	4620      	mov	r0, r4
 8016864:	4629      	mov	r1, r5
 8016866:	f7e9 fd37 	bl	80002d8 <__aeabi_dsub>
 801686a:	4602      	mov	r2, r0
 801686c:	460b      	mov	r3, r1
 801686e:	4630      	mov	r0, r6
 8016870:	4639      	mov	r1, r7
 8016872:	f7e9 fd31 	bl	80002d8 <__aeabi_dsub>
 8016876:	a374      	add	r3, pc, #464	@ (adr r3, 8016a48 <__ieee754_pow+0xa30>)
 8016878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801687c:	f7e9 fee4 	bl	8000648 <__aeabi_dmul>
 8016880:	a373      	add	r3, pc, #460	@ (adr r3, 8016a50 <__ieee754_pow+0xa38>)
 8016882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016886:	4680      	mov	r8, r0
 8016888:	4689      	mov	r9, r1
 801688a:	4620      	mov	r0, r4
 801688c:	4629      	mov	r1, r5
 801688e:	f7e9 fedb 	bl	8000648 <__aeabi_dmul>
 8016892:	4602      	mov	r2, r0
 8016894:	460b      	mov	r3, r1
 8016896:	4640      	mov	r0, r8
 8016898:	4649      	mov	r1, r9
 801689a:	f7e9 fd1f 	bl	80002dc <__adddf3>
 801689e:	4604      	mov	r4, r0
 80168a0:	460d      	mov	r5, r1
 80168a2:	4602      	mov	r2, r0
 80168a4:	460b      	mov	r3, r1
 80168a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80168aa:	f7e9 fd17 	bl	80002dc <__adddf3>
 80168ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80168b2:	4680      	mov	r8, r0
 80168b4:	4689      	mov	r9, r1
 80168b6:	f7e9 fd0f 	bl	80002d8 <__aeabi_dsub>
 80168ba:	4602      	mov	r2, r0
 80168bc:	460b      	mov	r3, r1
 80168be:	4620      	mov	r0, r4
 80168c0:	4629      	mov	r1, r5
 80168c2:	f7e9 fd09 	bl	80002d8 <__aeabi_dsub>
 80168c6:	4642      	mov	r2, r8
 80168c8:	4606      	mov	r6, r0
 80168ca:	460f      	mov	r7, r1
 80168cc:	464b      	mov	r3, r9
 80168ce:	4640      	mov	r0, r8
 80168d0:	4649      	mov	r1, r9
 80168d2:	f7e9 feb9 	bl	8000648 <__aeabi_dmul>
 80168d6:	a360      	add	r3, pc, #384	@ (adr r3, 8016a58 <__ieee754_pow+0xa40>)
 80168d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168dc:	4604      	mov	r4, r0
 80168de:	460d      	mov	r5, r1
 80168e0:	f7e9 feb2 	bl	8000648 <__aeabi_dmul>
 80168e4:	a35e      	add	r3, pc, #376	@ (adr r3, 8016a60 <__ieee754_pow+0xa48>)
 80168e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ea:	f7e9 fcf5 	bl	80002d8 <__aeabi_dsub>
 80168ee:	4622      	mov	r2, r4
 80168f0:	462b      	mov	r3, r5
 80168f2:	f7e9 fea9 	bl	8000648 <__aeabi_dmul>
 80168f6:	a35c      	add	r3, pc, #368	@ (adr r3, 8016a68 <__ieee754_pow+0xa50>)
 80168f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168fc:	f7e9 fcee 	bl	80002dc <__adddf3>
 8016900:	4622      	mov	r2, r4
 8016902:	462b      	mov	r3, r5
 8016904:	f7e9 fea0 	bl	8000648 <__aeabi_dmul>
 8016908:	a359      	add	r3, pc, #356	@ (adr r3, 8016a70 <__ieee754_pow+0xa58>)
 801690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801690e:	f7e9 fce3 	bl	80002d8 <__aeabi_dsub>
 8016912:	4622      	mov	r2, r4
 8016914:	462b      	mov	r3, r5
 8016916:	f7e9 fe97 	bl	8000648 <__aeabi_dmul>
 801691a:	a357      	add	r3, pc, #348	@ (adr r3, 8016a78 <__ieee754_pow+0xa60>)
 801691c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016920:	f7e9 fcdc 	bl	80002dc <__adddf3>
 8016924:	4622      	mov	r2, r4
 8016926:	462b      	mov	r3, r5
 8016928:	f7e9 fe8e 	bl	8000648 <__aeabi_dmul>
 801692c:	4602      	mov	r2, r0
 801692e:	460b      	mov	r3, r1
 8016930:	4640      	mov	r0, r8
 8016932:	4649      	mov	r1, r9
 8016934:	f7e9 fcd0 	bl	80002d8 <__aeabi_dsub>
 8016938:	4604      	mov	r4, r0
 801693a:	460d      	mov	r5, r1
 801693c:	4602      	mov	r2, r0
 801693e:	460b      	mov	r3, r1
 8016940:	4640      	mov	r0, r8
 8016942:	4649      	mov	r1, r9
 8016944:	f7e9 fe80 	bl	8000648 <__aeabi_dmul>
 8016948:	2200      	movs	r2, #0
 801694a:	e9cd 0100 	strd	r0, r1, [sp]
 801694e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8016952:	4620      	mov	r0, r4
 8016954:	4629      	mov	r1, r5
 8016956:	f7e9 fcbf 	bl	80002d8 <__aeabi_dsub>
 801695a:	4602      	mov	r2, r0
 801695c:	460b      	mov	r3, r1
 801695e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016962:	f7e9 ff9b 	bl	800089c <__aeabi_ddiv>
 8016966:	4632      	mov	r2, r6
 8016968:	4604      	mov	r4, r0
 801696a:	460d      	mov	r5, r1
 801696c:	463b      	mov	r3, r7
 801696e:	4640      	mov	r0, r8
 8016970:	4649      	mov	r1, r9
 8016972:	f7e9 fe69 	bl	8000648 <__aeabi_dmul>
 8016976:	4632      	mov	r2, r6
 8016978:	463b      	mov	r3, r7
 801697a:	f7e9 fcaf 	bl	80002dc <__adddf3>
 801697e:	4602      	mov	r2, r0
 8016980:	460b      	mov	r3, r1
 8016982:	4620      	mov	r0, r4
 8016984:	4629      	mov	r1, r5
 8016986:	f7e9 fca7 	bl	80002d8 <__aeabi_dsub>
 801698a:	4642      	mov	r2, r8
 801698c:	464b      	mov	r3, r9
 801698e:	f7e9 fca3 	bl	80002d8 <__aeabi_dsub>
 8016992:	460b      	mov	r3, r1
 8016994:	4602      	mov	r2, r0
 8016996:	493b      	ldr	r1, [pc, #236]	@ (8016a84 <__ieee754_pow+0xa6c>)
 8016998:	2000      	movs	r0, #0
 801699a:	f7e9 fc9d 	bl	80002d8 <__aeabi_dsub>
 801699e:	ec41 0b10 	vmov	d0, r0, r1
 80169a2:	ee10 3a90 	vmov	r3, s1
 80169a6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80169aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80169ae:	da30      	bge.n	8016a12 <__ieee754_pow+0x9fa>
 80169b0:	4650      	mov	r0, sl
 80169b2:	f000 f87d 	bl	8016ab0 <scalbn>
 80169b6:	ec51 0b10 	vmov	r0, r1, d0
 80169ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80169be:	f7ff bbd2 	b.w	8016166 <__ieee754_pow+0x14e>
 80169c2:	4c31      	ldr	r4, [pc, #196]	@ (8016a88 <__ieee754_pow+0xa70>)
 80169c4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80169c8:	42a3      	cmp	r3, r4
 80169ca:	d91a      	bls.n	8016a02 <__ieee754_pow+0x9ea>
 80169cc:	4b2f      	ldr	r3, [pc, #188]	@ (8016a8c <__ieee754_pow+0xa74>)
 80169ce:	440b      	add	r3, r1
 80169d0:	4303      	orrs	r3, r0
 80169d2:	d009      	beq.n	80169e8 <__ieee754_pow+0x9d0>
 80169d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80169d8:	2200      	movs	r2, #0
 80169da:	2300      	movs	r3, #0
 80169dc:	f7ea f8a6 	bl	8000b2c <__aeabi_dcmplt>
 80169e0:	3800      	subs	r0, #0
 80169e2:	bf18      	it	ne
 80169e4:	2001      	movne	r0, #1
 80169e6:	e42b      	b.n	8016240 <__ieee754_pow+0x228>
 80169e8:	4642      	mov	r2, r8
 80169ea:	464b      	mov	r3, r9
 80169ec:	f7e9 fc74 	bl	80002d8 <__aeabi_dsub>
 80169f0:	4632      	mov	r2, r6
 80169f2:	463b      	mov	r3, r7
 80169f4:	f7ea f8ae 	bl	8000b54 <__aeabi_dcmpge>
 80169f8:	2800      	cmp	r0, #0
 80169fa:	d1eb      	bne.n	80169d4 <__ieee754_pow+0x9bc>
 80169fc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8016a9c <__ieee754_pow+0xa84>
 8016a00:	e6f7      	b.n	80167f2 <__ieee754_pow+0x7da>
 8016a02:	469a      	mov	sl, r3
 8016a04:	4b22      	ldr	r3, [pc, #136]	@ (8016a90 <__ieee754_pow+0xa78>)
 8016a06:	459a      	cmp	sl, r3
 8016a08:	f63f aef3 	bhi.w	80167f2 <__ieee754_pow+0x7da>
 8016a0c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8016a10:	e715      	b.n	801683e <__ieee754_pow+0x826>
 8016a12:	ec51 0b10 	vmov	r0, r1, d0
 8016a16:	4619      	mov	r1, r3
 8016a18:	e7cf      	b.n	80169ba <__ieee754_pow+0x9a2>
 8016a1a:	491a      	ldr	r1, [pc, #104]	@ (8016a84 <__ieee754_pow+0xa6c>)
 8016a1c:	2000      	movs	r0, #0
 8016a1e:	f7ff bb18 	b.w	8016052 <__ieee754_pow+0x3a>
 8016a22:	2000      	movs	r0, #0
 8016a24:	2100      	movs	r1, #0
 8016a26:	f7ff bb14 	b.w	8016052 <__ieee754_pow+0x3a>
 8016a2a:	4630      	mov	r0, r6
 8016a2c:	4639      	mov	r1, r7
 8016a2e:	f7ff bb10 	b.w	8016052 <__ieee754_pow+0x3a>
 8016a32:	460c      	mov	r4, r1
 8016a34:	f7ff bb5e 	b.w	80160f4 <__ieee754_pow+0xdc>
 8016a38:	2400      	movs	r4, #0
 8016a3a:	f7ff bb49 	b.w	80160d0 <__ieee754_pow+0xb8>
 8016a3e:	bf00      	nop
 8016a40:	00000000 	.word	0x00000000
 8016a44:	3fe62e43 	.word	0x3fe62e43
 8016a48:	fefa39ef 	.word	0xfefa39ef
 8016a4c:	3fe62e42 	.word	0x3fe62e42
 8016a50:	0ca86c39 	.word	0x0ca86c39
 8016a54:	be205c61 	.word	0xbe205c61
 8016a58:	72bea4d0 	.word	0x72bea4d0
 8016a5c:	3e663769 	.word	0x3e663769
 8016a60:	c5d26bf1 	.word	0xc5d26bf1
 8016a64:	3ebbbd41 	.word	0x3ebbbd41
 8016a68:	af25de2c 	.word	0xaf25de2c
 8016a6c:	3f11566a 	.word	0x3f11566a
 8016a70:	16bebd93 	.word	0x16bebd93
 8016a74:	3f66c16c 	.word	0x3f66c16c
 8016a78:	5555553e 	.word	0x5555553e
 8016a7c:	3fc55555 	.word	0x3fc55555
 8016a80:	fff00000 	.word	0xfff00000
 8016a84:	3ff00000 	.word	0x3ff00000
 8016a88:	4090cbff 	.word	0x4090cbff
 8016a8c:	3f6f3400 	.word	0x3f6f3400
 8016a90:	3fe00000 	.word	0x3fe00000
 8016a94:	652b82fe 	.word	0x652b82fe
 8016a98:	3c971547 	.word	0x3c971547
 8016a9c:	4090cc00 	.word	0x4090cc00

08016aa0 <fabs>:
 8016aa0:	ec51 0b10 	vmov	r0, r1, d0
 8016aa4:	4602      	mov	r2, r0
 8016aa6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8016aaa:	ec43 2b10 	vmov	d0, r2, r3
 8016aae:	4770      	bx	lr

08016ab0 <scalbn>:
 8016ab0:	b570      	push	{r4, r5, r6, lr}
 8016ab2:	ec55 4b10 	vmov	r4, r5, d0
 8016ab6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8016aba:	4606      	mov	r6, r0
 8016abc:	462b      	mov	r3, r5
 8016abe:	b991      	cbnz	r1, 8016ae6 <scalbn+0x36>
 8016ac0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016ac4:	4323      	orrs	r3, r4
 8016ac6:	d03d      	beq.n	8016b44 <scalbn+0x94>
 8016ac8:	4b35      	ldr	r3, [pc, #212]	@ (8016ba0 <scalbn+0xf0>)
 8016aca:	4620      	mov	r0, r4
 8016acc:	4629      	mov	r1, r5
 8016ace:	2200      	movs	r2, #0
 8016ad0:	f7e9 fdba 	bl	8000648 <__aeabi_dmul>
 8016ad4:	4b33      	ldr	r3, [pc, #204]	@ (8016ba4 <scalbn+0xf4>)
 8016ad6:	429e      	cmp	r6, r3
 8016ad8:	4604      	mov	r4, r0
 8016ada:	460d      	mov	r5, r1
 8016adc:	da0f      	bge.n	8016afe <scalbn+0x4e>
 8016ade:	a328      	add	r3, pc, #160	@ (adr r3, 8016b80 <scalbn+0xd0>)
 8016ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ae4:	e01e      	b.n	8016b24 <scalbn+0x74>
 8016ae6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8016aea:	4291      	cmp	r1, r2
 8016aec:	d10b      	bne.n	8016b06 <scalbn+0x56>
 8016aee:	4622      	mov	r2, r4
 8016af0:	4620      	mov	r0, r4
 8016af2:	4629      	mov	r1, r5
 8016af4:	f7e9 fbf2 	bl	80002dc <__adddf3>
 8016af8:	4604      	mov	r4, r0
 8016afa:	460d      	mov	r5, r1
 8016afc:	e022      	b.n	8016b44 <scalbn+0x94>
 8016afe:	460b      	mov	r3, r1
 8016b00:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8016b04:	3936      	subs	r1, #54	@ 0x36
 8016b06:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8016b0a:	4296      	cmp	r6, r2
 8016b0c:	dd0d      	ble.n	8016b2a <scalbn+0x7a>
 8016b0e:	2d00      	cmp	r5, #0
 8016b10:	a11d      	add	r1, pc, #116	@ (adr r1, 8016b88 <scalbn+0xd8>)
 8016b12:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b16:	da02      	bge.n	8016b1e <scalbn+0x6e>
 8016b18:	a11d      	add	r1, pc, #116	@ (adr r1, 8016b90 <scalbn+0xe0>)
 8016b1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b1e:	a31a      	add	r3, pc, #104	@ (adr r3, 8016b88 <scalbn+0xd8>)
 8016b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b24:	f7e9 fd90 	bl	8000648 <__aeabi_dmul>
 8016b28:	e7e6      	b.n	8016af8 <scalbn+0x48>
 8016b2a:	1872      	adds	r2, r6, r1
 8016b2c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8016b30:	428a      	cmp	r2, r1
 8016b32:	dcec      	bgt.n	8016b0e <scalbn+0x5e>
 8016b34:	2a00      	cmp	r2, #0
 8016b36:	dd08      	ble.n	8016b4a <scalbn+0x9a>
 8016b38:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016b3c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8016b40:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016b44:	ec45 4b10 	vmov	d0, r4, r5
 8016b48:	bd70      	pop	{r4, r5, r6, pc}
 8016b4a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8016b4e:	da08      	bge.n	8016b62 <scalbn+0xb2>
 8016b50:	2d00      	cmp	r5, #0
 8016b52:	a10b      	add	r1, pc, #44	@ (adr r1, 8016b80 <scalbn+0xd0>)
 8016b54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b58:	dac1      	bge.n	8016ade <scalbn+0x2e>
 8016b5a:	a10f      	add	r1, pc, #60	@ (adr r1, 8016b98 <scalbn+0xe8>)
 8016b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016b60:	e7bd      	b.n	8016ade <scalbn+0x2e>
 8016b62:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8016b66:	3236      	adds	r2, #54	@ 0x36
 8016b68:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8016b6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016b70:	4620      	mov	r0, r4
 8016b72:	4b0d      	ldr	r3, [pc, #52]	@ (8016ba8 <scalbn+0xf8>)
 8016b74:	4629      	mov	r1, r5
 8016b76:	2200      	movs	r2, #0
 8016b78:	e7d4      	b.n	8016b24 <scalbn+0x74>
 8016b7a:	bf00      	nop
 8016b7c:	f3af 8000 	nop.w
 8016b80:	c2f8f359 	.word	0xc2f8f359
 8016b84:	01a56e1f 	.word	0x01a56e1f
 8016b88:	8800759c 	.word	0x8800759c
 8016b8c:	7e37e43c 	.word	0x7e37e43c
 8016b90:	8800759c 	.word	0x8800759c
 8016b94:	fe37e43c 	.word	0xfe37e43c
 8016b98:	c2f8f359 	.word	0xc2f8f359
 8016b9c:	81a56e1f 	.word	0x81a56e1f
 8016ba0:	43500000 	.word	0x43500000
 8016ba4:	ffff3cb0 	.word	0xffff3cb0
 8016ba8:	3c900000 	.word	0x3c900000

08016bac <with_errno>:
 8016bac:	b510      	push	{r4, lr}
 8016bae:	ed2d 8b02 	vpush	{d8}
 8016bb2:	eeb0 8a40 	vmov.f32	s16, s0
 8016bb6:	eef0 8a60 	vmov.f32	s17, s1
 8016bba:	4604      	mov	r4, r0
 8016bbc:	f7fb fa1c 	bl	8011ff8 <__errno>
 8016bc0:	eeb0 0a48 	vmov.f32	s0, s16
 8016bc4:	eef0 0a68 	vmov.f32	s1, s17
 8016bc8:	ecbd 8b02 	vpop	{d8}
 8016bcc:	6004      	str	r4, [r0, #0]
 8016bce:	bd10      	pop	{r4, pc}

08016bd0 <xflow>:
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	b507      	push	{r0, r1, r2, lr}
 8016bd4:	ec51 0b10 	vmov	r0, r1, d0
 8016bd8:	b183      	cbz	r3, 8016bfc <xflow+0x2c>
 8016bda:	4602      	mov	r2, r0
 8016bdc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8016be0:	e9cd 2300 	strd	r2, r3, [sp]
 8016be4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016be8:	f7e9 fd2e 	bl	8000648 <__aeabi_dmul>
 8016bec:	ec41 0b10 	vmov	d0, r0, r1
 8016bf0:	2022      	movs	r0, #34	@ 0x22
 8016bf2:	b003      	add	sp, #12
 8016bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016bf8:	f7ff bfd8 	b.w	8016bac <with_errno>
 8016bfc:	4602      	mov	r2, r0
 8016bfe:	460b      	mov	r3, r1
 8016c00:	e7ee      	b.n	8016be0 <xflow+0x10>
 8016c02:	0000      	movs	r0, r0
 8016c04:	0000      	movs	r0, r0
	...

08016c08 <__math_uflow>:
 8016c08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016c10 <__math_uflow+0x8>
 8016c0c:	f7ff bfe0 	b.w	8016bd0 <xflow>
 8016c10:	00000000 	.word	0x00000000
 8016c14:	10000000 	.word	0x10000000

08016c18 <__math_oflow>:
 8016c18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8016c20 <__math_oflow+0x8>
 8016c1c:	f7ff bfd8 	b.w	8016bd0 <xflow>
 8016c20:	00000000 	.word	0x00000000
 8016c24:	70000000 	.word	0x70000000

08016c28 <__ieee754_sqrt>:
 8016c28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c2c:	4a68      	ldr	r2, [pc, #416]	@ (8016dd0 <__ieee754_sqrt+0x1a8>)
 8016c2e:	ec55 4b10 	vmov	r4, r5, d0
 8016c32:	43aa      	bics	r2, r5
 8016c34:	462b      	mov	r3, r5
 8016c36:	4621      	mov	r1, r4
 8016c38:	d110      	bne.n	8016c5c <__ieee754_sqrt+0x34>
 8016c3a:	4622      	mov	r2, r4
 8016c3c:	4620      	mov	r0, r4
 8016c3e:	4629      	mov	r1, r5
 8016c40:	f7e9 fd02 	bl	8000648 <__aeabi_dmul>
 8016c44:	4602      	mov	r2, r0
 8016c46:	460b      	mov	r3, r1
 8016c48:	4620      	mov	r0, r4
 8016c4a:	4629      	mov	r1, r5
 8016c4c:	f7e9 fb46 	bl	80002dc <__adddf3>
 8016c50:	4604      	mov	r4, r0
 8016c52:	460d      	mov	r5, r1
 8016c54:	ec45 4b10 	vmov	d0, r4, r5
 8016c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c5c:	2d00      	cmp	r5, #0
 8016c5e:	dc0e      	bgt.n	8016c7e <__ieee754_sqrt+0x56>
 8016c60:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8016c64:	4322      	orrs	r2, r4
 8016c66:	d0f5      	beq.n	8016c54 <__ieee754_sqrt+0x2c>
 8016c68:	b19d      	cbz	r5, 8016c92 <__ieee754_sqrt+0x6a>
 8016c6a:	4622      	mov	r2, r4
 8016c6c:	4620      	mov	r0, r4
 8016c6e:	4629      	mov	r1, r5
 8016c70:	f7e9 fb32 	bl	80002d8 <__aeabi_dsub>
 8016c74:	4602      	mov	r2, r0
 8016c76:	460b      	mov	r3, r1
 8016c78:	f7e9 fe10 	bl	800089c <__aeabi_ddiv>
 8016c7c:	e7e8      	b.n	8016c50 <__ieee754_sqrt+0x28>
 8016c7e:	152a      	asrs	r2, r5, #20
 8016c80:	d115      	bne.n	8016cae <__ieee754_sqrt+0x86>
 8016c82:	2000      	movs	r0, #0
 8016c84:	e009      	b.n	8016c9a <__ieee754_sqrt+0x72>
 8016c86:	0acb      	lsrs	r3, r1, #11
 8016c88:	3a15      	subs	r2, #21
 8016c8a:	0549      	lsls	r1, r1, #21
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d0fa      	beq.n	8016c86 <__ieee754_sqrt+0x5e>
 8016c90:	e7f7      	b.n	8016c82 <__ieee754_sqrt+0x5a>
 8016c92:	462a      	mov	r2, r5
 8016c94:	e7fa      	b.n	8016c8c <__ieee754_sqrt+0x64>
 8016c96:	005b      	lsls	r3, r3, #1
 8016c98:	3001      	adds	r0, #1
 8016c9a:	02dc      	lsls	r4, r3, #11
 8016c9c:	d5fb      	bpl.n	8016c96 <__ieee754_sqrt+0x6e>
 8016c9e:	1e44      	subs	r4, r0, #1
 8016ca0:	1b12      	subs	r2, r2, r4
 8016ca2:	f1c0 0420 	rsb	r4, r0, #32
 8016ca6:	fa21 f404 	lsr.w	r4, r1, r4
 8016caa:	4323      	orrs	r3, r4
 8016cac:	4081      	lsls	r1, r0
 8016cae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016cb2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8016cb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8016cba:	07d2      	lsls	r2, r2, #31
 8016cbc:	bf5c      	itt	pl
 8016cbe:	005b      	lslpl	r3, r3, #1
 8016cc0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8016cc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016cc8:	bf58      	it	pl
 8016cca:	0049      	lslpl	r1, r1, #1
 8016ccc:	2600      	movs	r6, #0
 8016cce:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8016cd2:	106d      	asrs	r5, r5, #1
 8016cd4:	0049      	lsls	r1, r1, #1
 8016cd6:	2016      	movs	r0, #22
 8016cd8:	4632      	mov	r2, r6
 8016cda:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8016cde:	1917      	adds	r7, r2, r4
 8016ce0:	429f      	cmp	r7, r3
 8016ce2:	bfde      	ittt	le
 8016ce4:	193a      	addle	r2, r7, r4
 8016ce6:	1bdb      	suble	r3, r3, r7
 8016ce8:	1936      	addle	r6, r6, r4
 8016cea:	0fcf      	lsrs	r7, r1, #31
 8016cec:	3801      	subs	r0, #1
 8016cee:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8016cf2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016cf6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8016cfa:	d1f0      	bne.n	8016cde <__ieee754_sqrt+0xb6>
 8016cfc:	4604      	mov	r4, r0
 8016cfe:	2720      	movs	r7, #32
 8016d00:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8016d04:	429a      	cmp	r2, r3
 8016d06:	eb00 0e0c 	add.w	lr, r0, ip
 8016d0a:	db02      	blt.n	8016d12 <__ieee754_sqrt+0xea>
 8016d0c:	d113      	bne.n	8016d36 <__ieee754_sqrt+0x10e>
 8016d0e:	458e      	cmp	lr, r1
 8016d10:	d811      	bhi.n	8016d36 <__ieee754_sqrt+0x10e>
 8016d12:	f1be 0f00 	cmp.w	lr, #0
 8016d16:	eb0e 000c 	add.w	r0, lr, ip
 8016d1a:	da42      	bge.n	8016da2 <__ieee754_sqrt+0x17a>
 8016d1c:	2800      	cmp	r0, #0
 8016d1e:	db40      	blt.n	8016da2 <__ieee754_sqrt+0x17a>
 8016d20:	f102 0801 	add.w	r8, r2, #1
 8016d24:	1a9b      	subs	r3, r3, r2
 8016d26:	458e      	cmp	lr, r1
 8016d28:	bf88      	it	hi
 8016d2a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8016d2e:	eba1 010e 	sub.w	r1, r1, lr
 8016d32:	4464      	add	r4, ip
 8016d34:	4642      	mov	r2, r8
 8016d36:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8016d3a:	3f01      	subs	r7, #1
 8016d3c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8016d40:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8016d44:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8016d48:	d1dc      	bne.n	8016d04 <__ieee754_sqrt+0xdc>
 8016d4a:	4319      	orrs	r1, r3
 8016d4c:	d01b      	beq.n	8016d86 <__ieee754_sqrt+0x15e>
 8016d4e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8016dd4 <__ieee754_sqrt+0x1ac>
 8016d52:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8016dd8 <__ieee754_sqrt+0x1b0>
 8016d56:	e9da 0100 	ldrd	r0, r1, [sl]
 8016d5a:	e9db 2300 	ldrd	r2, r3, [fp]
 8016d5e:	f7e9 fabb 	bl	80002d8 <__aeabi_dsub>
 8016d62:	e9da 8900 	ldrd	r8, r9, [sl]
 8016d66:	4602      	mov	r2, r0
 8016d68:	460b      	mov	r3, r1
 8016d6a:	4640      	mov	r0, r8
 8016d6c:	4649      	mov	r1, r9
 8016d6e:	f7e9 fee7 	bl	8000b40 <__aeabi_dcmple>
 8016d72:	b140      	cbz	r0, 8016d86 <__ieee754_sqrt+0x15e>
 8016d74:	f1b4 3fff 	cmp.w	r4, #4294967295
 8016d78:	e9da 0100 	ldrd	r0, r1, [sl]
 8016d7c:	e9db 2300 	ldrd	r2, r3, [fp]
 8016d80:	d111      	bne.n	8016da6 <__ieee754_sqrt+0x17e>
 8016d82:	3601      	adds	r6, #1
 8016d84:	463c      	mov	r4, r7
 8016d86:	1072      	asrs	r2, r6, #1
 8016d88:	0863      	lsrs	r3, r4, #1
 8016d8a:	07f1      	lsls	r1, r6, #31
 8016d8c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8016d90:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8016d94:	bf48      	it	mi
 8016d96:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8016d9a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8016d9e:	4618      	mov	r0, r3
 8016da0:	e756      	b.n	8016c50 <__ieee754_sqrt+0x28>
 8016da2:	4690      	mov	r8, r2
 8016da4:	e7be      	b.n	8016d24 <__ieee754_sqrt+0xfc>
 8016da6:	f7e9 fa99 	bl	80002dc <__adddf3>
 8016daa:	e9da 8900 	ldrd	r8, r9, [sl]
 8016dae:	4602      	mov	r2, r0
 8016db0:	460b      	mov	r3, r1
 8016db2:	4640      	mov	r0, r8
 8016db4:	4649      	mov	r1, r9
 8016db6:	f7e9 feb9 	bl	8000b2c <__aeabi_dcmplt>
 8016dba:	b120      	cbz	r0, 8016dc6 <__ieee754_sqrt+0x19e>
 8016dbc:	1ca0      	adds	r0, r4, #2
 8016dbe:	bf08      	it	eq
 8016dc0:	3601      	addeq	r6, #1
 8016dc2:	3402      	adds	r4, #2
 8016dc4:	e7df      	b.n	8016d86 <__ieee754_sqrt+0x15e>
 8016dc6:	1c63      	adds	r3, r4, #1
 8016dc8:	f023 0401 	bic.w	r4, r3, #1
 8016dcc:	e7db      	b.n	8016d86 <__ieee754_sqrt+0x15e>
 8016dce:	bf00      	nop
 8016dd0:	7ff00000 	.word	0x7ff00000
 8016dd4:	200003c0 	.word	0x200003c0
 8016dd8:	200003b8 	.word	0x200003b8

08016ddc <_init>:
 8016ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dde:	bf00      	nop
 8016de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016de2:	bc08      	pop	{r3}
 8016de4:	469e      	mov	lr, r3
 8016de6:	4770      	bx	lr

08016de8 <_fini>:
 8016de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dea:	bf00      	nop
 8016dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016dee:	bc08      	pop	{r3}
 8016df0:	469e      	mov	lr, r3
 8016df2:	4770      	bx	lr
